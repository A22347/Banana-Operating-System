
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 91 f7 00 00       	call   c000f7b1 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 23 57 02 00       	call   c0025748 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 08 62 02 c0       	mov    ebx,0xc0026208
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 14 62 02 c0    	cmp    ebx,0xc0026214
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 ec a0 02 c0       	mov    eax,0xc002a0ec
c0000049:	3d ec a0 02 c0       	cmp    eax,0xc002a0ec
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 ec a0 02 c0       	push   0xc002a0ec
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 ec a0 02 c0       	mov    eax,0xc002a0ec
c0000075:	2d ec a0 02 c0       	sub    eax,0xc002a0ec
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 ec a0 02 c0       	push   0xc002a0ec
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 1c a7 02 c0 00 	cmp    BYTE PTR ds:0xc002a71c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 1c 62 02 c0       	mov    ebx,0xc002621c
c00000bb:	81 eb 18 62 02 c0    	sub    ebx,0xc0026218
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 18 62 02 c0       	mov    esi,0xc0026218
c00000ca:	a1 20 a7 02 c0       	mov    eax,ds:0xc002a720
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 20 a7 02 c0       	mov    ds:0xc002a720,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 20 a7 02 c0       	mov    eax,ds:0xc002a720
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 ec a0 02 c0       	push   0xc002a0ec
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 1c a7 02 c0 01 	mov    BYTE PTR ds:0xc002a71c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 24 a7 02 c0       	push   0xc002a724
c000012c:	68 ec a0 02 c0       	push   0xc002a0ec
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 09                	jne    c0000195 <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c000018f:	81 c4 14 00 00 00    	add    esp,0x14

c0000195 <voodooXADD.usermode>:
c0000195:	89 35 30 02 00 c0    	mov    DWORD PTR ds:0xc0000230,esi
c000019b:	89 25 2c 02 00 c0    	mov    DWORD PTR ds:0xc000022c,esp
c00001a1:	60                   	pusha  
c00001a2:	b0 90                	mov    al,0x90
c00001a4:	b9 20 00 00 00       	mov    ecx,0x20
c00001a9:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001b0:	61                   	popa   
c00001b1:	60                   	pusha  
c00001b2:	89 d6                	mov    esi,edx
c00001b4:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001bb:	61                   	popa   
c00001bc:	60                   	pusha  
c00001bd:	89 d6                	mov    esi,edx
c00001bf:	bf 13 02 00 c0       	mov    edi,0xc0000213
c00001c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c6:	61                   	popa   
c00001c7:	b1 90                	mov    cl,0x90
c00001c9:	85 db                	test   ebx,ebx
c00001cb:	74 06                	je     c00001d3 <voodooXADD.skipChange>
c00001cd:	8a 8b 02 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdfe]

c00001d3 <voodooXADD.skipChange>:
c00001d3:	88 8b 03 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdfd],cl
c00001d9:	80 ab 04 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdfc],0x3a
c00001e0:	88 8b 13 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffded],cl
c00001e6:	80 ab 14 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdec],0xbe
c00001ed:	89 c4                	mov    esp,eax
c00001ef:	81 c4 10 00 00 00    	add    esp,0x10
c00001f5:	5f                   	pop    edi
c00001f6:	5e                   	pop    esi
c00001f7:	5d                   	pop    ebp
c00001f8:	5b                   	pop    ebx
c00001f9:	5b                   	pop    ebx
c00001fa:	5a                   	pop    edx
c00001fb:	59                   	pop    ecx
c00001fc:	58                   	pop    eax
c00001fd:	8b 25 30 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000230

c0000203 <voodooXADD.helper>:
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	90                   	nop
c000021e:	90                   	nop
c000021f:	90                   	nop
c0000220:	90                   	nop
c0000221:	90                   	nop
c0000222:	90                   	nop
c0000223:	8b 25 2c 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022c
c0000229:	61                   	popa   
c000022a:	c9                   	leave  
c000022b:	c3                   	ret    

c000022c <voodooXADD.oldStack>:
c000022c:	00 00                	add    BYTE PTR [eax],al
	...

c0000230 <voodooXADD.newStack>:
c0000230:	00 00                	add    BYTE PTR [eax],al
	...

c0000234 <doTPAUSE>:
c0000234:	fb                   	sti    
c0000235:	31 c0                	xor    eax,eax
c0000237:	31 d2                	xor    edx,edx
c0000239:	66 0f ae f0          	tpause eax
c000023d:	c3                   	ret    

c000023e <hasLegacyFPU>:
c000023e:	0f 20 c2             	mov    edx,cr0
c0000241:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000247:	0f 22 c2             	mov    cr0,edx
c000024a:	db e3                	fninit 
c000024c:	dd 3d 61 02 00 c0    	fnstsw WORD PTR ds:0xc0000261
c0000252:	31 c0                	xor    eax,eax
c0000254:	66 81 3d 61 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000261,0x0
c000025d:	75 01                	jne    c0000260 <hasLegacyFPU.nofpu>

c000025f <hasLegacyFPU.hasfpu>:
c000025f:	40                   	inc    eax

c0000260 <hasLegacyFPU.nofpu>:
c0000260:	c3                   	ret    

c0000261 <testword>:
c0000261:	aa                   	stos   BYTE PTR es:[edi],al
c0000262:	55                   	push   ebp

c0000263 <is486>:
c0000263:	0f 09                	wbinvd 
c0000265:	31 c0                	xor    eax,eax
c0000267:	40                   	inc    eax
c0000268:	c3                   	ret    
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	90                   	nop
c0000291:	90                   	nop
c0000292:	90                   	nop
c0000293:	90                   	nop
c0000294:	90                   	nop
c0000295:	90                   	nop
c0000296:	31 c0                	xor    eax,eax
c0000298:	c3                   	ret    

c0000299 <detectCPUID>:
c0000299:	9c                   	pushf  
c000029a:	9c                   	pushf  
c000029b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002a2:	9d                   	popf   
c00002a3:	9c                   	pushf  
c00002a4:	58                   	pop    eax
c00002a5:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002a8:	9d                   	popf   
c00002a9:	25 00 00 20 00       	and    eax,0x200000
c00002ae:	c3                   	ret    

c00002af <goToVM86>:
c00002af:	fa                   	cli    
c00002b0:	55                   	push   ebp
c00002b1:	89 e5                	mov    ebp,esp
c00002b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00002b6:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00002b9:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002bc:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002bf:	25 ff ff 00 00       	and    eax,0xffff
c00002c4:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002ca:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002d0:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002d6:	52                   	push   edx
c00002d7:	51                   	push   ecx
c00002d8:	68 02 02 02 00       	push   0x20202
c00002dd:	53                   	push   ebx
c00002de:	50                   	push   eax
c00002df:	cf                   	iret   

c00002e0 <goToUsermode>:
c00002e0:	fa                   	cli    
c00002e1:	55                   	push   ebp
c00002e2:	89 e5                	mov    ebp,esp
c00002e4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002e7:	66 b8 23 00          	mov    ax,0x23
c00002eb:	66 8e d8             	mov    ds,ax
c00002ee:	66 8e c0             	mov    es,ax
c00002f1:	66 8e e0             	mov    fs,ax
c00002f4:	66 8e e8             	mov    gs,ax
c00002f7:	89 e0                	mov    eax,esp
c00002f9:	68 23 00 00 00       	push   0x23
c00002fe:	50                   	push   eax
c00002ff:	68 02 02 00 00       	push   0x202
c0000304:	68 1b 00 00 00       	push   0x1b
c0000309:	53                   	push   ebx
c000030a:	cf                   	iret   

c000030b <switchToThreadASMFirstTime>:
c000030b:	9c                   	pushf  
c000030c:	fa                   	cli    
c000030d:	50                   	push   eax
c000030e:	53                   	push   ebx
c000030f:	51                   	push   ecx
c0000310:	52                   	push   edx
c0000311:	56                   	push   esi
c0000312:	57                   	push   edi
c0000313:	55                   	push   ebp
c0000314:	e9 11 00 00 00       	jmp    c000032a <commonThreadSwitch>

c0000319 <switchToThreadASM>:
c0000319:	9c                   	pushf  
c000031a:	50                   	push   eax
c000031b:	53                   	push   ebx
c000031c:	51                   	push   ecx
c000031d:	52                   	push   edx
c000031e:	56                   	push   esi
c000031f:	57                   	push   edi
c0000320:	55                   	push   ebp
c0000321:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000327:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c000032a <commonThreadSwitch>:
c000032a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000032e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000334:	8b 06                	mov    eax,DWORD PTR [esi]
c0000336:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000339:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000033c:	0f 20 d9             	mov    ecx,cr3
c000033f:	39 c8                	cmp    eax,ecx
c0000341:	74 03                	je     c0000346 <commonThreadSwitch.doneVAS>
c0000343:	0f 22 d8             	mov    cr3,eax

c0000346 <commonThreadSwitch.doneVAS>:
c0000346:	85 d2                	test   edx,edx
c0000348:	75 11                	jne    c000035b <commonThreadSwitch.firstTime>
c000034a:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000034d:	e8 b0 b6 01 00       	call   c001ba02 <changeTSS>
c0000352:	5d                   	pop    ebp
c0000353:	5f                   	pop    edi
c0000354:	5e                   	pop    esi
c0000355:	5a                   	pop    edx
c0000356:	59                   	pop    ecx
c0000357:	5b                   	pop    ebx
c0000358:	58                   	pop    eax
c0000359:	9d                   	popf   
c000035a:	c3                   	ret    

c000035b <commonThreadSwitch.firstTime>:
c000035b:	fa                   	cli    
c000035c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000035f:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000364:	60                   	pusha  
c0000365:	e8 a9 20 01 00       	call   c0012413 <mapVASFirstTime>
c000036a:	61                   	popa   
c000036b:	89 c4                	mov    esp,eax
c000036d:	56                   	push   esi
c000036e:	52                   	push   edx
c000036f:	e8 8e b6 01 00       	call   c001ba02 <changeTSS>
c0000374:	5a                   	pop    edx
c0000375:	5e                   	pop    esi
c0000376:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000037d:	5d                   	pop    ebp
c000037e:	5f                   	pop    edi
c000037f:	5e                   	pop    esi
c0000380:	59                   	pop    ecx
c0000381:	59                   	pop    ecx
c0000382:	5b                   	pop    ebx
c0000383:	58                   	pop    eax
c0000384:	81 c4 04 00 00 00    	add    esp,0x4
c000038a:	6a 02                	push   0x2
c000038c:	9d                   	popf   
c000038d:	52                   	push   edx
c000038e:	e8 a5 ba 01 00       	call   c001be38 <taskStartupFunction>
c0000393:	5a                   	pop    edx
c0000394:	50                   	push   eax
c0000395:	ff d2                	call   edx
c0000397:	e8 52 c0 01 00       	call   c001c3ee <taskReturned>
c000039c:	e9 fb ff ff ff       	jmp    c000039c <commonThreadSwitch.firstTime+0x41>

c00003a1 <asmQuickAcquireLock>:
c00003a1:	55                   	push   ebp
c00003a2:	89 e5                	mov    ebp,esp
c00003a4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003a7 <asmQuickAcquireLock.retry>:
c00003a7:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003ac:	72 02                	jb     c00003b0 <asmQuickAcquireLock.spin_with_pause>
c00003ae:	fa                   	cli    
c00003af:	c3                   	ret    

c00003b0 <asmQuickAcquireLock.spin_with_pause>:
c00003b0:	f3 90                	pause  
c00003b2:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003b8:	75 f6                	jne    c00003b0 <asmQuickAcquireLock.spin_with_pause>
c00003ba:	e9 e8 ff ff ff       	jmp    c00003a7 <asmQuickAcquireLock.retry>

c00003bf <asmQuickReleaseLock>:
c00003bf:	55                   	push   ebp
c00003c0:	89 e5                	mov    ebp,esp
c00003c2:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003c9:	5d                   	pop    ebp
c00003ca:	c3                   	ret    

c00003cb <asmAcquireLock>:
c00003cb:	55                   	push   ebp
c00003cc:	89 e5                	mov    ebp,esp
c00003ce:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003d1 <asmAcquireLock.retry>:
c00003d1:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003d6:	72 05                	jb     c00003dd <asmAcquireLock.spin_with_pause>
c00003d8:	9c                   	pushf  
c00003d9:	58                   	pop    eax
c00003da:	fa                   	cli    
c00003db:	5d                   	pop    ebp
c00003dc:	c3                   	ret    

c00003dd <asmAcquireLock.spin_with_pause>:
c00003dd:	f3 90                	pause  
c00003df:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003e5:	75 f6                	jne    c00003dd <asmAcquireLock.spin_with_pause>
c00003e7:	e9 e5 ff ff ff       	jmp    c00003d1 <asmAcquireLock.retry>

c00003ec <asmReleaseLock>:
c00003ec:	55                   	push   ebp
c00003ed:	89 e5                	mov    ebp,esp
c00003ef:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003f2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003f5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003fb:	52                   	push   edx
c00003fc:	9d                   	popf   
c00003fd:	5d                   	pop    ebp
c00003fe:	c3                   	ret    

c00003ff <loadGDT>:
c00003ff:	0f 01 15 50 ab 02 c0 	lgdtd  ds:0xc002ab50
c0000406:	66 b8 10 00          	mov    ax,0x10
c000040a:	66 8e d8             	mov    ds,ax
c000040d:	66 8e c0             	mov    es,ax
c0000410:	66 8e e0             	mov    fs,ax
c0000413:	66 8e e8             	mov    gs,ax
c0000416:	66 8e d0             	mov    ss,ax
c0000419:	e9 00 00 00 00       	jmp    c000041e <flush2>

c000041e <flush2>:
c000041e:	c3                   	ret    

c000041f <isr0>:
c000041f:	fa                   	cli    
c0000420:	68 00 00 00 00       	push   0x0
c0000425:	68 00 00 00 00       	push   0x0
c000042a:	e9 44 01 00 00       	jmp    c0000573 <int_common_stub>

c000042f <isr1>:
c000042f:	fa                   	cli    
c0000430:	6a 00                	push   0x0
c0000432:	6a 01                	push   0x1
c0000434:	e9 3a 01 00 00       	jmp    c0000573 <int_common_stub>

c0000439 <isr2>:
c0000439:	fa                   	cli    
c000043a:	6a 00                	push   0x0
c000043c:	6a 02                	push   0x2
c000043e:	e9 30 01 00 00       	jmp    c0000573 <int_common_stub>

c0000443 <isr3>:
c0000443:	fa                   	cli    
c0000444:	6a 00                	push   0x0
c0000446:	6a 03                	push   0x3
c0000448:	e9 26 01 00 00       	jmp    c0000573 <int_common_stub>

c000044d <isr4>:
c000044d:	fa                   	cli    
c000044e:	6a 00                	push   0x0
c0000450:	6a 04                	push   0x4
c0000452:	e9 1c 01 00 00       	jmp    c0000573 <int_common_stub>

c0000457 <isr5>:
c0000457:	fa                   	cli    
c0000458:	6a 00                	push   0x0
c000045a:	6a 05                	push   0x5
c000045c:	e9 12 01 00 00       	jmp    c0000573 <int_common_stub>

c0000461 <isr6>:
c0000461:	fa                   	cli    
c0000462:	6a 00                	push   0x0
c0000464:	6a 06                	push   0x6
c0000466:	e9 08 01 00 00       	jmp    c0000573 <int_common_stub>

c000046b <isr7>:
c000046b:	fa                   	cli    
c000046c:	6a 00                	push   0x0
c000046e:	6a 07                	push   0x7
c0000470:	e9 fe 00 00 00       	jmp    c0000573 <int_common_stub>

c0000475 <isr8>:
c0000475:	fa                   	cli    
c0000476:	6a 08                	push   0x8
c0000478:	e9 f6 00 00 00       	jmp    c0000573 <int_common_stub>

c000047d <isr9>:
c000047d:	fa                   	cli    
c000047e:	6a 00                	push   0x0
c0000480:	6a 09                	push   0x9
c0000482:	e9 ec 00 00 00       	jmp    c0000573 <int_common_stub>

c0000487 <isr10>:
c0000487:	fa                   	cli    
c0000488:	6a 0a                	push   0xa
c000048a:	e9 e4 00 00 00       	jmp    c0000573 <int_common_stub>

c000048f <isr11>:
c000048f:	fa                   	cli    
c0000490:	6a 0b                	push   0xb
c0000492:	e9 dc 00 00 00       	jmp    c0000573 <int_common_stub>

c0000497 <isr12>:
c0000497:	fa                   	cli    
c0000498:	6a 0c                	push   0xc
c000049a:	e9 d4 00 00 00       	jmp    c0000573 <int_common_stub>

c000049f <isr13>:
c000049f:	fa                   	cli    
c00004a0:	6a 0d                	push   0xd
c00004a2:	e9 cc 00 00 00       	jmp    c0000573 <int_common_stub>

c00004a7 <isr14>:
c00004a7:	fa                   	cli    
c00004a8:	6a 0e                	push   0xe
c00004aa:	e9 c4 00 00 00       	jmp    c0000573 <int_common_stub>

c00004af <isr15>:
c00004af:	fa                   	cli    
c00004b0:	6a 00                	push   0x0
c00004b2:	6a 0f                	push   0xf
c00004b4:	e9 ba 00 00 00       	jmp    c0000573 <int_common_stub>

c00004b9 <isr16>:
c00004b9:	fa                   	cli    
c00004ba:	6a 00                	push   0x0
c00004bc:	6a 10                	push   0x10
c00004be:	e9 b0 00 00 00       	jmp    c0000573 <int_common_stub>

c00004c3 <isr17>:
c00004c3:	fa                   	cli    
c00004c4:	6a 00                	push   0x0
c00004c6:	6a 11                	push   0x11
c00004c8:	e9 a6 00 00 00       	jmp    c0000573 <int_common_stub>

c00004cd <isr18>:
c00004cd:	fa                   	cli    
c00004ce:	6a 00                	push   0x0
c00004d0:	6a 12                	push   0x12
c00004d2:	e9 9c 00 00 00       	jmp    c0000573 <int_common_stub>

c00004d7 <irq3>:
c00004d7:	fa                   	cli    
c00004d8:	6a 00                	push   0x0
c00004da:	6a 23                	push   0x23
c00004dc:	e9 92 00 00 00       	jmp    c0000573 <int_common_stub>

c00004e1 <irq4>:
c00004e1:	fa                   	cli    
c00004e2:	6a 00                	push   0x0
c00004e4:	6a 24                	push   0x24
c00004e6:	e9 88 00 00 00       	jmp    c0000573 <int_common_stub>

c00004eb <irq5>:
c00004eb:	fa                   	cli    
c00004ec:	6a 00                	push   0x0
c00004ee:	6a 25                	push   0x25
c00004f0:	e9 7e 00 00 00       	jmp    c0000573 <int_common_stub>

c00004f5 <irq6>:
c00004f5:	fa                   	cli    
c00004f6:	6a 00                	push   0x0
c00004f8:	6a 26                	push   0x26
c00004fa:	e9 74 00 00 00       	jmp    c0000573 <int_common_stub>

c00004ff <irq7>:
c00004ff:	fa                   	cli    
c0000500:	6a 00                	push   0x0
c0000502:	6a 27                	push   0x27
c0000504:	e9 6a 00 00 00       	jmp    c0000573 <int_common_stub>

c0000509 <irq8>:
c0000509:	fa                   	cli    
c000050a:	6a 00                	push   0x0
c000050c:	6a 28                	push   0x28
c000050e:	e9 60 00 00 00       	jmp    c0000573 <int_common_stub>

c0000513 <irq9>:
c0000513:	fa                   	cli    
c0000514:	6a 00                	push   0x0
c0000516:	6a 29                	push   0x29
c0000518:	e9 56 00 00 00       	jmp    c0000573 <int_common_stub>

c000051d <irq10>:
c000051d:	fa                   	cli    
c000051e:	6a 00                	push   0x0
c0000520:	6a 2a                	push   0x2a
c0000522:	e9 4c 00 00 00       	jmp    c0000573 <int_common_stub>

c0000527 <irq11>:
c0000527:	fa                   	cli    
c0000528:	6a 00                	push   0x0
c000052a:	6a 2b                	push   0x2b
c000052c:	e9 42 00 00 00       	jmp    c0000573 <int_common_stub>

c0000531 <irq12>:
c0000531:	fa                   	cli    
c0000532:	6a 00                	push   0x0
c0000534:	6a 2c                	push   0x2c
c0000536:	e9 38 00 00 00       	jmp    c0000573 <int_common_stub>

c000053b <irq13>:
c000053b:	fa                   	cli    
c000053c:	6a 00                	push   0x0
c000053e:	6a 2d                	push   0x2d
c0000540:	e9 2e 00 00 00       	jmp    c0000573 <int_common_stub>

c0000545 <irq14>:
c0000545:	fa                   	cli    
c0000546:	6a 00                	push   0x0
c0000548:	6a 2e                	push   0x2e
c000054a:	e9 24 00 00 00       	jmp    c0000573 <int_common_stub>

c000054f <irq15>:
c000054f:	fa                   	cli    
c0000550:	6a 00                	push   0x0
c0000552:	6a 2f                	push   0x2f
c0000554:	e9 1a 00 00 00       	jmp    c0000573 <int_common_stub>

c0000559 <irq1>:
c0000559:	fa                   	cli    
c000055a:	6a 00                	push   0x0
c000055c:	6a 21                	push   0x21
c000055e:	eb 13                	jmp    c0000573 <int_common_stub>

c0000560 <irq2>:
c0000560:	fa                   	cli    
c0000561:	6a 00                	push   0x0
c0000563:	6a 22                	push   0x22
c0000565:	eb 0c                	jmp    c0000573 <int_common_stub>

c0000567 <isr96>:
c0000567:	6a 00                	push   0x0
c0000569:	6a 60                	push   0x60
c000056b:	fb                   	sti    
c000056c:	eb 05                	jmp    c0000573 <int_common_stub>

c000056e <irq0>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 20                	push   0x20

c0000573 <int_common_stub>:
c0000573:	60                   	pusha  
c0000574:	1e                   	push   ds
c0000575:	06                   	push   es
c0000576:	0f a0                	push   fs
c0000578:	0f a8                	push   gs
c000057a:	54                   	push   esp
c000057b:	e8 4b 3d 01 00       	call   c00142cb <int_handler>
c0000580:	81 c4 04 00 00 00    	add    esp,0x4
c0000586:	0f a9                	pop    gs
c0000588:	0f a1                	pop    fs
c000058a:	07                   	pop    es
c000058b:	1f                   	pop    ds
c000058c:	61                   	popa   
c000058d:	81 c4 08 00 00 00    	add    esp,0x8
c0000593:	cf                   	iret   

c0000594 <irq16>:
c0000594:	fa                   	cli    
c0000595:	6a 00                	push   0x0
c0000597:	6a 30                	push   0x30
c0000599:	e9 d5 ff ff ff       	jmp    c0000573 <int_common_stub>

c000059e <irq17>:
c000059e:	fa                   	cli    
c000059f:	6a 00                	push   0x0
c00005a1:	6a 31                	push   0x31
c00005a3:	e9 cb ff ff ff       	jmp    c0000573 <int_common_stub>

c00005a8 <irq18>:
c00005a8:	fa                   	cli    
c00005a9:	6a 00                	push   0x0
c00005ab:	6a 32                	push   0x32
c00005ad:	e9 c1 ff ff ff       	jmp    c0000573 <int_common_stub>

c00005b2 <irq19>:
c00005b2:	fa                   	cli    
c00005b3:	6a 00                	push   0x0
c00005b5:	6a 33                	push   0x33
c00005b7:	e9 b7 ff ff ff       	jmp    c0000573 <int_common_stub>

c00005bc <irq20>:
c00005bc:	fa                   	cli    
c00005bd:	6a 00                	push   0x0
c00005bf:	6a 34                	push   0x34
c00005c1:	e9 ad ff ff ff       	jmp    c0000573 <int_common_stub>

c00005c6 <irq21>:
c00005c6:	fa                   	cli    
c00005c7:	6a 00                	push   0x0
c00005c9:	6a 35                	push   0x35
c00005cb:	e9 a3 ff ff ff       	jmp    c0000573 <int_common_stub>

c00005d0 <irq22>:
c00005d0:	fa                   	cli    
c00005d1:	6a 00                	push   0x0
c00005d3:	6a 36                	push   0x36
c00005d5:	e9 99 ff ff ff       	jmp    c0000573 <int_common_stub>

c00005da <irq23>:
c00005da:	fa                   	cli    
c00005db:	6a 00                	push   0x0
c00005dd:	6a 37                	push   0x37
c00005df:	e9 8f ff ff ff       	jmp    c0000573 <int_common_stub>

c00005e4 <memcmp>:
c00005e4:	56                   	push   esi
c00005e5:	53                   	push   ebx
c00005e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00005ea:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00005f2:	01 d6                	add    esi,edx
c00005f4:	39 f2                	cmp    edx,esi
c00005f6:	74 0e                	je     c0000606 <memcmp+0x22>
c00005f8:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00005fb:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00005fe:	38 c8                	cmp    al,cl
c0000600:	75 08                	jne    c000060a <memcmp+0x26>
c0000602:	42                   	inc    edx
c0000603:	43                   	inc    ebx
c0000604:	eb ee                	jmp    c00005f4 <memcmp+0x10>
c0000606:	31 c0                	xor    eax,eax
c0000608:	eb 02                	jmp    c000060c <memcmp+0x28>
c000060a:	29 c8                	sub    eax,ecx
c000060c:	5b                   	pop    ebx
c000060d:	5e                   	pop    esi
c000060e:	c3                   	ret    

c000060f <memmove>:
c000060f:	56                   	push   esi
c0000610:	53                   	push   ebx
c0000611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000615:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000619:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000061d:	39 c8                	cmp    eax,ecx
c000061f:	73 12                	jae    c0000633 <memmove+0x24>
c0000621:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000624:	89 c3                	mov    ebx,eax
c0000626:	39 f1                	cmp    ecx,esi
c0000628:	74 1a                	je     c0000644 <memmove+0x35>
c000062a:	8a 11                	mov    dl,BYTE PTR [ecx]
c000062c:	43                   	inc    ebx
c000062d:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000630:	41                   	inc    ecx
c0000631:	eb f3                	jmp    c0000626 <memmove+0x17>
c0000633:	76 0f                	jbe    c0000644 <memmove+0x35>
c0000635:	85 d2                	test   edx,edx
c0000637:	74 0b                	je     c0000644 <memmove+0x35>
c0000639:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000063d:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c0000641:	4a                   	dec    edx
c0000642:	eb f1                	jmp    c0000635 <memmove+0x26>
c0000644:	5b                   	pop    ebx
c0000645:	5e                   	pop    esi
c0000646:	c3                   	ret    

c0000647 <memcpy>:
c0000647:	57                   	push   edi
c0000648:	56                   	push   esi
c0000649:	53                   	push   ebx
c000064a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000064e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000652:	89 da                	mov    edx,ebx
c0000654:	89 d9                	mov    ecx,ebx
c0000656:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000065a:	83 e2 fc             	and    edx,0xfffffffc
c000065d:	c1 e9 02             	shr    ecx,0x2
c0000660:	89 c7                	mov    edi,eax
c0000662:	fc                   	cld    
c0000663:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000665:	8d 0c 16             	lea    ecx,[esi+edx*1]
c0000668:	01 c2                	add    edx,eax
c000066a:	01 de                	add    esi,ebx
c000066c:	39 f1                	cmp    ecx,esi
c000066e:	74 09                	je     c0000679 <memcpy+0x32>
c0000670:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000672:	42                   	inc    edx
c0000673:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000676:	41                   	inc    ecx
c0000677:	eb f3                	jmp    c000066c <memcpy+0x25>
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	5f                   	pop    edi
c000067c:	c3                   	ret    

c000067d <memset>:
c000067d:	53                   	push   ebx
c000067e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000682:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000686:	89 c2                	mov    edx,eax
c0000688:	01 c1                	add    ecx,eax
c000068a:	39 ca                	cmp    edx,ecx
c000068c:	74 0a                	je     c0000698 <memset+0x1b>
c000068e:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0000692:	42                   	inc    edx
c0000693:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000696:	eb f2                	jmp    c000068a <memset+0xd>
c0000698:	5b                   	pop    ebx
c0000699:	c3                   	ret    

c000069a <strlen>:
c000069a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000069e:	31 c0                	xor    eax,eax
c00006a0:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006a4:	74 03                	je     c00006a9 <strlen+0xf>
c00006a6:	40                   	inc    eax
c00006a7:	eb f7                	jmp    c00006a0 <strlen+0x6>
c00006a9:	c3                   	ret    

c00006aa <strpbrk>:
c00006aa:	53                   	push   ebx
c00006ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006af:	8a 08                	mov    cl,BYTE PTR [eax]
c00006b1:	84 c9                	test   cl,cl
c00006b3:	74 14                	je     c00006c9 <strpbrk+0x1f>
c00006b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006b9:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006bb:	84 db                	test   bl,bl
c00006bd:	74 07                	je     c00006c6 <strpbrk+0x1c>
c00006bf:	38 cb                	cmp    bl,cl
c00006c1:	74 08                	je     c00006cb <strpbrk+0x21>
c00006c3:	42                   	inc    edx
c00006c4:	eb f3                	jmp    c00006b9 <strpbrk+0xf>
c00006c6:	40                   	inc    eax
c00006c7:	eb e6                	jmp    c00006af <strpbrk+0x5>
c00006c9:	31 c0                	xor    eax,eax
c00006cb:	5b                   	pop    ebx
c00006cc:	c3                   	ret    

c00006cd <strtok>:
c00006cd:	56                   	push   esi
c00006ce:	53                   	push   ebx
c00006cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006d7:	85 db                	test   ebx,ebx
c00006d9:	75 0e                	jne    c00006e9 <strtok+0x1c>
c00006db:	8b 1d 3c a7 02 c0    	mov    ebx,DWORD PTR ds:0xc002a73c
c00006e1:	85 db                	test   ebx,ebx
c00006e3:	75 04                	jne    c00006e9 <strtok+0x1c>
c00006e5:	31 db                	xor    ebx,ebx
c00006e7:	eb 2e                	jmp    c0000717 <strtok+0x4a>
c00006e9:	56                   	push   esi
c00006ea:	53                   	push   ebx
c00006eb:	e8 ba ff ff ff       	call   c00006aa <strpbrk>
c00006f0:	5a                   	pop    edx
c00006f1:	a3 3c a7 02 c0       	mov    ds:0xc002a73c,eax
c00006f6:	59                   	pop    ecx
c00006f7:	a1 3c a7 02 c0       	mov    eax,ds:0xc002a73c
c00006fc:	39 d8                	cmp    eax,ebx
c00006fe:	75 07                	jne    c0000707 <strtok+0x3a>
c0000700:	43                   	inc    ebx
c0000701:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000705:	eb e2                	jmp    c00006e9 <strtok+0x1c>
c0000707:	85 c0                	test   eax,eax
c0000709:	74 da                	je     c00006e5 <strtok+0x18>
c000070b:	8d 50 01             	lea    edx,[eax+0x1]
c000070e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000711:	89 15 3c a7 02 c0    	mov    DWORD PTR ds:0xc002a73c,edx
c0000717:	89 d8                	mov    eax,ebx
c0000719:	5b                   	pop    ebx
c000071a:	5e                   	pop    esi
c000071b:	c3                   	ret    

c000071c <strcpy>:
c000071c:	53                   	push   ebx
c000071d:	31 d2                	xor    edx,edx
c000071f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000723:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000727:	8d 1c 10             	lea    ebx,[eax+edx*1]
c000072a:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000072d:	84 c9                	test   cl,cl
c000072f:	74 06                	je     c0000737 <strcpy+0x1b>
c0000731:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000734:	42                   	inc    edx
c0000735:	eb ec                	jmp    c0000723 <strcpy+0x7>
c0000737:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000073a:	5b                   	pop    ebx
c000073b:	c3                   	ret    

c000073c <strncpy>:
c000073c:	56                   	push   esi
c000073d:	53                   	push   ebx
c000073e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000742:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000746:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000074a:	89 c3                	mov    ebx,eax
c000074c:	85 c9                	test   ecx,ecx
c000074e:	74 1a                	je     c000076a <strncpy+0x2e>
c0000750:	46                   	inc    esi
c0000751:	43                   	inc    ebx
c0000752:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000755:	49                   	dec    ecx
c0000756:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000759:	84 d2                	test   dl,dl
c000075b:	75 ef                	jne    c000074c <strncpy+0x10>
c000075d:	31 d2                	xor    edx,edx
c000075f:	39 d1                	cmp    ecx,edx
c0000761:	74 07                	je     c000076a <strncpy+0x2e>
c0000763:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c0000767:	42                   	inc    edx
c0000768:	eb f5                	jmp    c000075f <strncpy+0x23>
c000076a:	5b                   	pop    ebx
c000076b:	5e                   	pop    esi
c000076c:	c3                   	ret    

c000076d <strcmp>:
c000076d:	31 c9                	xor    ecx,ecx
c000076f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000773:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000777:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000077b:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000077f:	38 d0                	cmp    al,dl
c0000781:	75 08                	jne    c000078b <strcmp+0x1e>
c0000783:	41                   	inc    ecx
c0000784:	84 c0                	test   al,al
c0000786:	75 e7                	jne    c000076f <strcmp+0x2>
c0000788:	31 c0                	xor    eax,eax
c000078a:	c3                   	ret    
c000078b:	29 d0                	sub    eax,edx
c000078d:	c3                   	ret    

c000078e <strchr>:
c000078e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000792:	8a 10                	mov    dl,BYTE PTR [eax]
c0000794:	84 d2                	test   dl,dl
c0000796:	74 09                	je     c00007a1 <strchr+0x13>
c0000798:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c000079c:	74 05                	je     c00007a3 <strchr+0x15>
c000079e:	40                   	inc    eax
c000079f:	eb f1                	jmp    c0000792 <strchr+0x4>
c00007a1:	31 c0                	xor    eax,eax
c00007a3:	c3                   	ret    

c00007a4 <strncmp>:
c00007a4:	56                   	push   esi
c00007a5:	53                   	push   ebx
c00007a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007aa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007b2:	01 d6                	add    esi,edx
c00007b4:	39 f2                	cmp    edx,esi
c00007b6:	74 12                	je     c00007ca <strncmp+0x26>
c00007b8:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007bb:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007be:	38 c8                	cmp    al,cl
c00007c0:	75 0c                	jne    c00007ce <strncmp+0x2a>
c00007c2:	42                   	inc    edx
c00007c3:	84 c0                	test   al,al
c00007c5:	74 03                	je     c00007ca <strncmp+0x26>
c00007c7:	43                   	inc    ebx
c00007c8:	eb ea                	jmp    c00007b4 <strncmp+0x10>
c00007ca:	31 c0                	xor    eax,eax
c00007cc:	eb 02                	jmp    c00007d0 <strncmp+0x2c>
c00007ce:	29 c8                	sub    eax,ecx
c00007d0:	5b                   	pop    ebx
c00007d1:	5e                   	pop    esi
c00007d2:	c3                   	ret    

c00007d3 <strcat>:
c00007d3:	53                   	push   ebx
c00007d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d8:	89 c1                	mov    ecx,eax
c00007da:	8d 51 01             	lea    edx,[ecx+0x1]
c00007dd:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007e1:	74 04                	je     c00007e7 <strcat+0x14>
c00007e3:	89 d1                	mov    ecx,edx
c00007e5:	eb f3                	jmp    c00007da <strcat+0x7>
c00007e7:	31 d2                	xor    edx,edx
c00007e9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ed:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c00007f0:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c00007f3:	42                   	inc    edx
c00007f4:	84 db                	test   bl,bl
c00007f6:	75 f1                	jne    c00007e9 <strcat+0x16>
c00007f8:	5b                   	pop    ebx
c00007f9:	c3                   	ret    

c00007fa <strncat>:
c00007fa:	56                   	push   esi
c00007fb:	53                   	push   ebx
c00007fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000800:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000804:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000808:	89 c2                	mov    edx,eax
c000080a:	85 db                	test   ebx,ebx
c000080c:	74 23                	je     c0000831 <strncat+0x37>
c000080e:	8d 72 01             	lea    esi,[edx+0x1]
c0000811:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000815:	74 04                	je     c000081b <strncat+0x21>
c0000817:	89 f2                	mov    edx,esi
c0000819:	eb f3                	jmp    c000080e <strncat+0x14>
c000081b:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000081e:	41                   	inc    ecx
c000081f:	42                   	inc    edx
c0000820:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000823:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000826:	84 db                	test   bl,bl
c0000828:	74 07                	je     c0000831 <strncat+0x37>
c000082a:	39 f1                	cmp    ecx,esi
c000082c:	75 f0                	jne    c000081e <strncat+0x24>
c000082e:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000831:	5b                   	pop    ebx
c0000832:	5e                   	pop    esi
c0000833:	c3                   	ret    

c0000834 <strstr>:
c0000834:	57                   	push   edi
c0000835:	56                   	push   esi
c0000836:	53                   	push   ebx
c0000837:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000083b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000083f:	57                   	push   edi
c0000840:	e8 55 fe ff ff       	call   c000069a <strlen>
c0000845:	59                   	pop    ecx
c0000846:	89 c6                	mov    esi,eax
c0000848:	85 c0                	test   eax,eax
c000084a:	74 1f                	je     c000086b <strstr+0x37>
c000084c:	53                   	push   ebx
c000084d:	e8 48 fe ff ff       	call   c000069a <strlen>
c0000852:	5a                   	pop    edx
c0000853:	39 f0                	cmp    eax,esi
c0000855:	72 12                	jb     c0000869 <strstr+0x35>
c0000857:	56                   	push   esi
c0000858:	57                   	push   edi
c0000859:	53                   	push   ebx
c000085a:	e8 85 fd ff ff       	call   c00005e4 <memcmp>
c000085f:	83 c4 0c             	add    esp,0xc
c0000862:	85 c0                	test   eax,eax
c0000864:	74 05                	je     c000086b <strstr+0x37>
c0000866:	43                   	inc    ebx
c0000867:	eb e3                	jmp    c000084c <strstr+0x18>
c0000869:	31 db                	xor    ebx,ebx
c000086b:	89 d8                	mov    eax,ebx
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    

c0000871 <toupper>:
c0000871:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000875:	0f b6 d0             	movzx  edx,al
c0000878:	f6 82 20 62 02 c0 02 	test   BYTE PTR [edx-0x3ffd9de0],0x2
c000087f:	74 03                	je     c0000884 <toupper+0x13>
c0000881:	83 e8 20             	sub    eax,0x20
c0000884:	c3                   	ret    

c0000885 <tolower>:
c0000885:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000889:	0f b6 d0             	movzx  edx,al
c000088c:	f6 82 20 62 02 c0 01 	test   BYTE PTR [edx-0x3ffd9de0],0x1
c0000893:	74 03                	je     c0000898 <tolower+0x13>
c0000895:	83 c0 20             	add    eax,0x20
c0000898:	c3                   	ret    

c0000899 <simple_strtoul>:
c0000899:	55                   	push   ebp
c000089a:	57                   	push   edi
c000089b:	56                   	push   esi
c000089c:	53                   	push   ebx
c000089d:	83 ec 08             	sub    esp,0x8
c00008a0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008a4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008a8:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008ab:	f6 82 20 62 02 c0 08 	test   BYTE PTR [edx-0x3ffd9de0],0x8
c00008b2:	74 03                	je     c00008b7 <simple_strtoul+0x1e>
c00008b4:	41                   	inc    ecx
c00008b5:	eb f1                	jmp    c00008a8 <simple_strtoul+0xf>
c00008b7:	80 fa 09             	cmp    dl,0x9
c00008ba:	74 f8                	je     c00008b4 <simple_strtoul+0x1b>
c00008bc:	80 fa 2d             	cmp    dl,0x2d
c00008bf:	75 0b                	jne    c00008cc <simple_strtoul+0x33>
c00008c1:	41                   	inc    ecx
c00008c2:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00008ca:	eb 0e                	jmp    c00008da <simple_strtoul+0x41>
c00008cc:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00008d4:	80 fa 2b             	cmp    dl,0x2b
c00008d7:	75 01                	jne    c00008da <simple_strtoul+0x41>
c00008d9:	41                   	inc    ecx
c00008da:	85 f6                	test   esi,esi
c00008dc:	75 22                	jne    c0000900 <simple_strtoul+0x67>
c00008de:	be 0a 00 00 00       	mov    esi,0xa
c00008e3:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008e6:	75 5a                	jne    c0000942 <simple_strtoul+0xa9>
c00008e8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008ec:	50                   	push   eax
c00008ed:	e8 93 ff ff ff       	call   c0000885 <tolower>
c00008f2:	5a                   	pop    edx
c00008f3:	83 f8 78             	cmp    eax,0x78
c00008f6:	74 03                	je     c00008fb <simple_strtoul+0x62>
c00008f8:	41                   	inc    ecx
c00008f9:	eb 16                	jmp    c0000911 <simple_strtoul+0x78>
c00008fb:	83 c1 02             	add    ecx,0x2
c00008fe:	eb 22                	jmp    c0000922 <simple_strtoul+0x89>
c0000900:	8d 46 fe             	lea    eax,[esi-0x2]
c0000903:	83 f8 22             	cmp    eax,0x22
c0000906:	0f 87 b7 00 00 00    	ja     c00009c3 <simple_strtoul+0x12a>
c000090c:	83 fe 08             	cmp    esi,0x8
c000090f:	75 0c                	jne    c000091d <simple_strtoul+0x84>
c0000911:	be 08 00 00 00       	mov    esi,0x8
c0000916:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000919:	75 27                	jne    c0000942 <simple_strtoul+0xa9>
c000091b:	eb 1f                	jmp    c000093c <simple_strtoul+0xa3>
c000091d:	83 fe 10             	cmp    esi,0x10
c0000920:	75 20                	jne    c0000942 <simple_strtoul+0xa9>
c0000922:	be 10 00 00 00       	mov    esi,0x10
c0000927:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000092a:	75 16                	jne    c0000942 <simple_strtoul+0xa9>
c000092c:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000930:	50                   	push   eax
c0000931:	e8 4f ff ff ff       	call   c0000885 <tolower>
c0000936:	5d                   	pop    ebp
c0000937:	83 f8 78             	cmp    eax,0x78
c000093a:	74 03                	je     c000093f <simple_strtoul+0xa6>
c000093c:	41                   	inc    ecx
c000093d:	eb 03                	jmp    c0000942 <simple_strtoul+0xa9>
c000093f:	83 c1 02             	add    ecx,0x2
c0000942:	31 ed                	xor    ebp,ebp
c0000944:	31 db                	xor    ebx,ebx
c0000946:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000094d:	8a 11                	mov    dl,BYTE PTR [ecx]
c000094f:	84 d2                	test   dl,dl
c0000951:	74 27                	je     c000097a <simple_strtoul+0xe1>
c0000953:	0f b6 fa             	movzx  edi,dl
c0000956:	f6 87 20 62 02 c0 04 	test   BYTE PTR [edi-0x3ffd9de0],0x4
c000095d:	74 05                	je     c0000964 <simple_strtoul+0xcb>
c000095f:	83 ef 30             	sub    edi,0x30
c0000962:	eb 22                	jmp    c0000986 <simple_strtoul+0xed>
c0000964:	0f be d2             	movsx  edx,dl
c0000967:	52                   	push   edx
c0000968:	e8 04 ff ff ff       	call   c0000871 <toupper>
c000096d:	5f                   	pop    edi
c000096e:	0f b6 d0             	movzx  edx,al
c0000971:	f6 82 20 62 02 c0 01 	test   BYTE PTR [edx-0x3ffd9de0],0x1
c0000978:	75 09                	jne    c0000983 <simple_strtoul+0xea>
c000097a:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000097f:	75 2d                	jne    c00009ae <simple_strtoul+0x115>
c0000981:	eb 57                	jmp    c00009da <simple_strtoul+0x141>
c0000983:	8d 78 c9             	lea    edi,[eax-0x37]
c0000986:	39 f7                	cmp    edi,esi
c0000988:	73 f0                	jae    c000097a <simple_strtoul+0xe1>
c000098a:	31 d2                	xor    edx,edx
c000098c:	89 f8                	mov    eax,edi
c000098e:	f7 d0                	not    eax
c0000990:	f7 f6                	div    esi
c0000992:	39 d8                	cmp    eax,ebx
c0000994:	72 0e                	jb     c00009a4 <simple_strtoul+0x10b>
c0000996:	0f af de             	imul   ebx,esi
c0000999:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009a0:	01 fb                	add    ebx,edi
c00009a2:	eb 07                	jmp    c00009ab <simple_strtoul+0x112>
c00009a4:	bd 01 00 00 00       	mov    ebp,0x1
c00009a9:	31 db                	xor    ebx,ebx
c00009ab:	41                   	inc    ecx
c00009ac:	eb 9f                	jmp    c000094d <simple_strtoul+0xb4>
c00009ae:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009b1:	09 d8                	or     eax,ebx
c00009b3:	75 1f                	jne    c00009d4 <simple_strtoul+0x13b>
c00009b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009b9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00009bd:	31 db                	xor    ebx,ebx
c00009bf:	89 38                	mov    DWORD PTR [eax],edi
c00009c1:	eb 17                	jmp    c00009da <simple_strtoul+0x141>
c00009c3:	31 db                	xor    ebx,ebx
c00009c5:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009ca:	74 14                	je     c00009e0 <simple_strtoul+0x147>
c00009cc:	31 ed                	xor    ebp,ebp
c00009ce:	85 c9                	test   ecx,ecx
c00009d0:	75 e3                	jne    c00009b5 <simple_strtoul+0x11c>
c00009d2:	31 db                	xor    ebx,ebx
c00009d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d8:	89 08                	mov    DWORD PTR [eax],ecx
c00009da:	4d                   	dec    ebp
c00009db:	75 03                	jne    c00009e0 <simple_strtoul+0x147>
c00009dd:	83 cb ff             	or     ebx,0xffffffff
c00009e0:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009e5:	75 02                	jne    c00009e9 <simple_strtoul+0x150>
c00009e7:	f7 db                	neg    ebx
c00009e9:	83 c4 08             	add    esp,0x8
c00009ec:	89 d8                	mov    eax,ebx
c00009ee:	5b                   	pop    ebx
c00009ef:	5e                   	pop    esi
c00009f0:	5f                   	pop    edi
c00009f1:	5d                   	pop    ebp
c00009f2:	c3                   	ret    

c00009f3 <largebin_index>:
c00009f3:	89 c2                	mov    edx,eax
c00009f5:	c1 ea 08             	shr    edx,0x8
c00009f8:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00009fe:	77 10                	ja     c0000a10 <largebin_index+0x1d>
c0000a00:	0f bd d2             	bsr    edx,edx
c0000a03:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a06:	d3 e8                	shr    eax,cl
c0000a08:	83 e0 03             	and    eax,0x3
c0000a0b:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a0f:	c3                   	ret    
c0000a10:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a15:	c3                   	ret    

c0000a16 <malloc_init_state>:
c0000a16:	53                   	push   ebx
c0000a17:	8d 50 34             	lea    edx,[eax+0x34]
c0000a1a:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a20:	89 d1                	mov    ecx,edx
c0000a22:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a25:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a28:	83 c2 08             	add    edx,0x8
c0000a2b:	39 da                	cmp    edx,ebx
c0000a2d:	75 f3                	jne    c0000a22 <malloc_init_state+0xc>
c0000a2f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a31:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a3b:	83 e2 03             	and    edx,0x3
c0000a3e:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a48:	83 ca 48             	or     edx,0x48
c0000a4b:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a55:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a5f:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000a66:	89 10                	mov    DWORD PTR [eax],edx
c0000a68:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000a6b:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a75:	5b                   	pop    ebx
c0000a76:	c3                   	ret    

c0000a77 <malloc_consolidate>:
c0000a77:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a79:	85 d2                	test   edx,edx
c0000a7b:	0f 84 d8 00 00 00    	je     c0000b59 <malloc_consolidate+0xe2>
c0000a81:	55                   	push   ebp
c0000a82:	83 e2 fd             	and    edx,0xfffffffd
c0000a85:	57                   	push   edi
c0000a86:	89 c5                	mov    ebp,eax
c0000a88:	56                   	push   esi
c0000a89:	8d 78 34             	lea    edi,[eax+0x34]
c0000a8c:	53                   	push   ebx
c0000a8d:	83 ec 10             	sub    esp,0x10
c0000a90:	89 10                	mov    DWORD PTR [eax],edx
c0000a92:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a96:	c1 ea 03             	shr    edx,0x3
c0000a99:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a9d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000aa1:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	0f 84 98 00 00 00    	je     c0000b44 <malloc_consolidate+0xcd>
c0000aac:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ab3:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000ab6:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ab9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000abd:	89 f9                	mov    ecx,edi
c0000abf:	83 e1 fe             	and    ecx,0xfffffffe
c0000ac2:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ac5:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000ac8:	83 e3 fc             	and    ebx,0xfffffffc
c0000acb:	83 e7 01             	and    edi,0x1
c0000ace:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000ad1:	75 14                	jne    c0000ae7 <malloc_consolidate+0x70>
c0000ad3:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000ad5:	29 fa                	sub    edx,edi
c0000ad7:	01 f9                	add    ecx,edi
c0000ad9:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000adc:	89 fb                	mov    ebx,edi
c0000ade:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000ae1:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000ae4:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000ae7:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000aea:	74 40                	je     c0000b2c <malloc_consolidate+0xb5>
c0000aec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000aef:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000af2:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000af6:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000af9:	83 e7 01             	and    edi,0x1
c0000afc:	75 0e                	jne    c0000b0c <malloc_consolidate+0x95>
c0000afe:	01 d9                	add    ecx,ebx
c0000b00:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b03:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b06:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b09:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b0c:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b0f:	89 ce                	mov    esi,ecx
c0000b11:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b14:	83 ce 01             	or     esi,0x1
c0000b17:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b1a:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b1d:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b20:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b24:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b27:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b2a:	eb 0c                	jmp    c0000b38 <malloc_consolidate+0xc1>
c0000b2c:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b2f:	83 c9 01             	or     ecx,0x1
c0000b32:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b35:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b38:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b3c:	85 d2                	test   edx,edx
c0000b3e:	0f 85 6f ff ff ff    	jne    c0000ab3 <malloc_consolidate+0x3c>
c0000b44:	83 c5 04             	add    ebp,0x4
c0000b47:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b4b:	0f 85 50 ff ff ff    	jne    c0000aa1 <malloc_consolidate+0x2a>
c0000b51:	83 c4 10             	add    esp,0x10
c0000b54:	5b                   	pop    ebx
c0000b55:	5e                   	pop    esi
c0000b56:	5f                   	pop    edi
c0000b57:	5d                   	pop    ebp
c0000b58:	c3                   	ret    
c0000b59:	e9 b8 fe ff ff       	jmp    c0000a16 <malloc_init_state>

c0000b5e <dlfree>:
c0000b5e:	57                   	push   edi
c0000b5f:	56                   	push   esi
c0000b60:	53                   	push   ebx
c0000b61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000b65:	85 db                	test   ebx,ebx
c0000b67:	0f 84 e2 00 00 00    	je     c0000c4f <dlfree+0xf1>
c0000b6d:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000b70:	8b 0d 40 a7 02 c0    	mov    ecx,DWORD PTR ds:0xc002a740
c0000b76:	89 f0                	mov    eax,esi
c0000b78:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b7b:	83 e0 fc             	and    eax,0xfffffffc
c0000b7e:	39 c1                	cmp    ecx,eax
c0000b80:	72 24                	jb     c0000ba6 <dlfree+0x48>
c0000b82:	83 c9 03             	or     ecx,0x3
c0000b85:	c1 e8 03             	shr    eax,0x3
c0000b88:	89 0d 40 a7 02 c0    	mov    DWORD PTR ds:0xc002a740,ecx
c0000b8e:	83 e8 02             	sub    eax,0x2
c0000b91:	8b 0c 85 44 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd58bc]
c0000b98:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b9a:	89 14 85 44 a7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd58bc],edx
c0000ba1:	e9 a9 00 00 00       	jmp    c0000c4f <dlfree+0xf1>
c0000ba6:	83 e6 02             	and    esi,0x2
c0000ba9:	0f 85 a0 00 00 00    	jne    c0000c4f <dlfree+0xf1>
c0000baf:	83 c9 01             	or     ecx,0x1
c0000bb2:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bb5:	89 0d 40 a7 02 c0    	mov    DWORD PTR ds:0xc002a740,ecx
c0000bbb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bbe:	83 e1 fc             	and    ecx,0xfffffffc
c0000bc1:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000bc5:	75 13                	jne    c0000bda <dlfree+0x7c>
c0000bc7:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000bca:	29 da                	sub    edx,ebx
c0000bcc:	01 d8                	add    eax,ebx
c0000bce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000bd1:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000bd4:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000bd7:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000bda:	39 35 6c a7 02 c0    	cmp    DWORD PTR ds:0xc002a76c,esi
c0000be0:	74 40                	je     c0000c22 <dlfree+0xc4>
c0000be2:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000be6:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000be9:	80 e3 01             	and    bl,0x1
c0000bec:	75 0e                	jne    c0000bfc <dlfree+0x9e>
c0000bee:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000bf1:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000bf4:	01 c8                	add    eax,ecx
c0000bf6:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000bf9:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000bfc:	8b 0d 7c a7 02 c0    	mov    ecx,DWORD PTR ds:0xc002a77c
c0000c02:	c7 42 0c 74 a7 02 c0 	mov    DWORD PTR [edx+0xc],0xc002a774
c0000c09:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c0c:	89 15 7c a7 02 c0    	mov    DWORD PTR ds:0xc002a77c,edx
c0000c12:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c15:	89 c1                	mov    ecx,eax
c0000c17:	83 c9 01             	or     ecx,0x1
c0000c1a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c1d:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c20:	eb 10                	jmp    c0000c32 <dlfree+0xd4>
c0000c22:	01 c8                	add    eax,ecx
c0000c24:	89 c1                	mov    ecx,eax
c0000c26:	83 c9 01             	or     ecx,0x1
c0000c29:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c2c:	89 15 6c a7 02 c0    	mov    DWORD PTR ds:0xc002a76c,edx
c0000c32:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c37:	76 16                	jbe    c0000c4f <dlfree+0xf1>
c0000c39:	f6 05 40 a7 02 c0 02 	test   BYTE PTR ds:0xc002a740,0x2
c0000c40:	74 0d                	je     c0000c4f <dlfree+0xf1>
c0000c42:	5b                   	pop    ebx
c0000c43:	b8 40 a7 02 c0       	mov    eax,0xc002a740
c0000c48:	5e                   	pop    esi
c0000c49:	5f                   	pop    edi
c0000c4a:	e9 28 fe ff ff       	jmp    c0000a77 <malloc_consolidate>
c0000c4f:	5b                   	pop    ebx
c0000c50:	5e                   	pop    esi
c0000c51:	5f                   	pop    edi
c0000c52:	c3                   	ret    

c0000c53 <sYSMALLOc>:
c0000c53:	55                   	push   ebp
c0000c54:	57                   	push   edi
c0000c55:	56                   	push   esi
c0000c56:	53                   	push   ebx
c0000c57:	89 d3                	mov    ebx,edx
c0000c59:	83 ec 2c             	sub    esp,0x2c
c0000c5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000c60:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000c66:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000c69:	8d 42 ff             	lea    eax,[edx-0x1]
c0000c6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000c70:	74 1f                	je     c0000c91 <sYSMALLOc+0x3e>
c0000c72:	89 d8                	mov    eax,ebx
c0000c74:	e8 fe fd ff ff       	call   c0000a77 <malloc_consolidate>
c0000c79:	83 ec 0c             	sub    esp,0xc
c0000c7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c80:	83 e8 07             	sub    eax,0x7
c0000c83:	50                   	push   eax
c0000c84:	e8 30 02 00 00       	call   c0000eb9 <dlmalloc>
c0000c89:	83 c4 10             	add    esp,0x10
c0000c8c:	e9 20 02 00 00       	jmp    c0000eb1 <sYSMALLOc+0x25e>
c0000c91:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c94:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c9a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c9d:	83 e0 fc             	and    eax,0xfffffffc
c0000ca0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ca4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ca8:	83 c0 10             	add    eax,0x10
c0000cab:	01 c1                	add    ecx,eax
c0000cad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cb1:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cb8:	74 04                	je     c0000cbe <sYSMALLOc+0x6b>
c0000cba:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000cbe:	f7 da                	neg    edx
c0000cc0:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000cc4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000cc8:	21 d1                	and    ecx,edx
c0000cca:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000cce:	7f 07                	jg     c0000cd7 <sYSMALLOc+0x84>
c0000cd0:	31 c0                	xor    eax,eax
c0000cd2:	e9 da 01 00 00       	jmp    c0000eb1 <sYSMALLOc+0x25e>
c0000cd7:	83 ec 0c             	sub    esp,0xc
c0000cda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000cde:	e8 36 e6 00 00       	call   c000f319 <sbrk>
c0000ce3:	83 c4 10             	add    esp,0x10
c0000ce6:	89 c6                	mov    esi,eax
c0000ce8:	83 f8 ff             	cmp    eax,0xffffffff
c0000ceb:	74 e3                	je     c0000cd0 <sYSMALLOc+0x7d>
c0000ced:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000cf1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000cf5:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000cf8:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000cfe:	39 f1                	cmp    ecx,esi
c0000d00:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d06:	75 13                	jne    c0000d1b <sYSMALLOc+0xc8>
c0000d08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d0c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d10:	83 c8 01             	or     eax,0x1
c0000d13:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d16:	e9 3e 01 00 00       	jmp    c0000e59 <sYSMALLOc+0x206>
c0000d1b:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d21:	88 d0                	mov    al,dl
c0000d23:	83 e0 01             	and    eax,0x1
c0000d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d2b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d2f:	0f 95 c0             	setne  al
c0000d32:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d36:	39 f1                	cmp    ecx,esi
c0000d38:	76 12                	jbe    c0000d4c <sYSMALLOc+0xf9>
c0000d3a:	84 c0                	test   al,al
c0000d3c:	74 0e                	je     c0000d4c <sYSMALLOc+0xf9>
c0000d3e:	83 e2 fe             	and    edx,0xfffffffe
c0000d41:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d47:	e9 83 00 00 00       	jmp    c0000dcf <sYSMALLOc+0x17c>
c0000d4c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d51:	74 7c                	je     c0000dcf <sYSMALLOc+0x17c>
c0000d53:	84 c0                	test   al,al
c0000d55:	74 0c                	je     c0000d63 <sYSMALLOc+0x110>
c0000d57:	89 f0                	mov    eax,esi
c0000d59:	29 c8                	sub    eax,ecx
c0000d5b:	01 e8                	add    eax,ebp
c0000d5d:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000d63:	89 f2                	mov    edx,esi
c0000d65:	83 e2 07             	and    edx,0x7
c0000d68:	74 0c                	je     c0000d76 <sYSMALLOc+0x123>
c0000d6a:	b8 08 00 00 00       	mov    eax,0x8
c0000d6f:	29 d0                	sub    eax,edx
c0000d71:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d74:	eb 04                	jmp    c0000d7a <sYSMALLOc+0x127>
c0000d76:	89 f5                	mov    ebp,esi
c0000d78:	31 c0                	xor    eax,eax
c0000d7a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d7e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d82:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d86:	01 c1                	add    ecx,eax
c0000d88:	83 ec 0c             	sub    esp,0xc
c0000d8b:	01 f1                	add    ecx,esi
c0000d8d:	01 ca                	add    edx,ecx
c0000d8f:	29 c8                	sub    eax,ecx
c0000d91:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d95:	01 c2                	add    edx,eax
c0000d97:	52                   	push   edx
c0000d98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d9c:	e8 78 e5 00 00       	call   c000f319 <sbrk>
c0000da1:	83 c4 10             	add    esp,0x10
c0000da4:	83 f8 ff             	cmp    eax,0xffffffff
c0000da7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000dab:	75 0f                	jne    c0000dbc <sYSMALLOc+0x169>
c0000dad:	83 ec 0c             	sub    esp,0xc
c0000db0:	6a 00                	push   0x0
c0000db2:	e8 62 e5 00 00       	call   c000f319 <sbrk>
c0000db7:	83 c4 10             	add    esp,0x10
c0000dba:	eb 30                	jmp    c0000dec <sYSMALLOc+0x199>
c0000dbc:	39 c6                	cmp    esi,eax
c0000dbe:	76 33                	jbe    c0000df3 <sYSMALLOc+0x1a0>
c0000dc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000dc4:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000dcb:	01 f0                	add    eax,esi
c0000dcd:	eb 1d                	jmp    c0000dec <sYSMALLOc+0x199>
c0000dcf:	83 ec 0c             	sub    esp,0xc
c0000dd2:	89 f5                	mov    ebp,esi
c0000dd4:	6a 00                	push   0x0
c0000dd6:	e8 3e e5 00 00       	call   c000f319 <sbrk>
c0000ddb:	89 c2                	mov    edx,eax
c0000ddd:	29 f2                	sub    edx,esi
c0000ddf:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000de3:	83 c4 10             	add    esp,0x10
c0000de6:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000dec:	31 d2                	xor    edx,edx
c0000dee:	83 f8 ff             	cmp    eax,0xffffffff
c0000df1:	74 66                	je     c0000e59 <sYSMALLOc+0x206>
c0000df3:	29 e8                	sub    eax,ebp
c0000df5:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000df8:	01 d0                	add    eax,edx
c0000dfa:	83 c8 01             	or     eax,0x1
c0000dfd:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e00:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e06:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e0b:	74 4c                	je     c0000e59 <sYSMALLOc+0x206>
c0000e0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e11:	83 e8 0c             	sub    eax,0xc
c0000e14:	83 e0 f8             	and    eax,0xfffffff8
c0000e17:	89 c2                	mov    edx,eax
c0000e19:	83 ca 01             	or     edx,0x1
c0000e1c:	83 f8 0f             	cmp    eax,0xf
c0000e1f:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e22:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e2a:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e32:	76 25                	jbe    c0000e59 <sYSMALLOc+0x206>
c0000e34:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e3a:	83 ec 0c             	sub    esp,0xc
c0000e3d:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e47:	83 c7 08             	add    edi,0x8
c0000e4a:	57                   	push   edi
c0000e4b:	e8 0e fd ff ff       	call   c0000b5e <dlfree>
c0000e50:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e56:	83 c4 10             	add    esp,0x10
c0000e59:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000e5f:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000e65:	73 06                	jae    c0000e6d <sYSMALLOc+0x21a>
c0000e67:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000e6d:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e73:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e79:	73 06                	jae    c0000e81 <sYSMALLOc+0x22e>
c0000e7b:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e81:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e84:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e87:	83 e2 fc             	and    edx,0xfffffffc
c0000e8a:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e8e:	0f 82 3c fe ff ff    	jb     c0000cd0 <sYSMALLOc+0x7d>
c0000e94:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e98:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e9b:	29 fa                	sub    edx,edi
c0000e9d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ea0:	83 ca 01             	or     edx,0x1
c0000ea3:	89 fb                	mov    ebx,edi
c0000ea5:	83 c0 08             	add    eax,0x8
c0000ea8:	83 cb 01             	or     ebx,0x1
c0000eab:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000eae:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000eb1:	83 c4 2c             	add    esp,0x2c
c0000eb4:	5b                   	pop    ebx
c0000eb5:	5e                   	pop    esi
c0000eb6:	5f                   	pop    edi
c0000eb7:	5d                   	pop    ebp
c0000eb8:	c3                   	ret    

c0000eb9 <dlmalloc>:
c0000eb9:	55                   	push   ebp
c0000eba:	57                   	push   edi
c0000ebb:	56                   	push   esi
c0000ebc:	53                   	push   ebx
c0000ebd:	83 ec 1c             	sub    esp,0x1c
c0000ec0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000ec4:	83 f8 df             	cmp    eax,0xffffffdf
c0000ec7:	0f 87 70 03 00 00    	ja     c000123d <dlmalloc+0x384>
c0000ecd:	83 c0 0b             	add    eax,0xb
c0000ed0:	be 10 00 00 00       	mov    esi,0x10
c0000ed5:	83 f8 0f             	cmp    eax,0xf
c0000ed8:	76 05                	jbe    c0000edf <dlmalloc+0x26>
c0000eda:	83 e0 f8             	and    eax,0xfffffff8
c0000edd:	89 c6                	mov    esi,eax
c0000edf:	8b 3d 40 a7 02 c0    	mov    edi,DWORD PTR ds:0xc002a740
c0000ee5:	f7 c7 01 00 00 00    	test   edi,0x1
c0000eeb:	75 17                	jne    c0000f04 <dlmalloc+0x4b>
c0000eed:	85 ff                	test   edi,edi
c0000eef:	0f 85 05 03 00 00    	jne    c00011fa <dlmalloc+0x341>
c0000ef5:	b8 40 a7 02 c0       	mov    eax,0xc002a740
c0000efa:	e8 78 fb ff ff       	call   c0000a77 <malloc_consolidate>
c0000eff:	e9 f6 02 00 00       	jmp    c00011fa <dlmalloc+0x341>
c0000f04:	39 f7                	cmp    edi,esi
c0000f06:	72 1f                	jb     c0000f27 <dlmalloc+0x6e>
c0000f08:	89 f2                	mov    edx,esi
c0000f0a:	c1 ea 03             	shr    edx,0x3
c0000f0d:	83 ea 02             	sub    edx,0x2
c0000f10:	8b 04 95 44 a7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd58bc]
c0000f17:	85 c0                	test   eax,eax
c0000f19:	74 0c                	je     c0000f27 <dlmalloc+0x6e>
c0000f1b:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f1e:	89 0c 95 44 a7 02 c0 	mov    DWORD PTR [edx*4-0x3ffd58bc],ecx
c0000f25:	eb 30                	jmp    c0000f57 <dlmalloc+0x9e>
c0000f27:	89 f0                	mov    eax,esi
c0000f29:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2f:	77 2e                	ja     c0000f5f <dlmalloc+0xa6>
c0000f31:	c1 e8 03             	shr    eax,0x3
c0000f34:	8d 14 c5 74 a7 02 c0 	lea    edx,[eax*8-0x3ffd588c]
c0000f3b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f3f:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f42:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f45:	39 c3                	cmp    ebx,eax
c0000f47:	74 2e                	je     c0000f77 <dlmalloc+0xbe>
c0000f49:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f4c:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f54:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f57:	83 c0 08             	add    eax,0x8
c0000f5a:	e9 e0 02 00 00       	jmp    c000123f <dlmalloc+0x386>
c0000f5f:	e8 8f fa ff ff       	call   c00009f3 <largebin_index>
c0000f64:	83 e7 02             	and    edi,0x2
c0000f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f6b:	74 0a                	je     c0000f77 <dlmalloc+0xbe>
c0000f6d:	b8 40 a7 02 c0       	mov    eax,0xc002a740
c0000f72:	e8 00 fb ff ff       	call   c0000a77 <malloc_consolidate>
c0000f77:	8d 46 10             	lea    eax,[esi+0x10]
c0000f7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f7e:	8b 1d 80 a7 02 c0    	mov    ebx,DWORD PTR ds:0xc002a780
c0000f84:	81 fb 74 a7 02 c0    	cmp    ebx,0xc002a774
c0000f8a:	0f 84 13 01 00 00    	je     c00010a3 <dlmalloc+0x1ea>
c0000f90:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f93:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f96:	83 e7 fc             	and    edi,0xfffffffc
c0000f99:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f9f:	77 4c                	ja     c0000fed <dlmalloc+0x134>
c0000fa1:	3d 74 a7 02 c0       	cmp    eax,0xc002a774
c0000fa6:	75 45                	jne    c0000fed <dlmalloc+0x134>
c0000fa8:	39 1d 70 a7 02 c0    	cmp    DWORD PTR ds:0xc002a770,ebx
c0000fae:	75 3d                	jne    c0000fed <dlmalloc+0x134>
c0000fb0:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000fb4:	73 37                	jae    c0000fed <dlmalloc+0x134>
c0000fb6:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000fb9:	89 fa                	mov    edx,edi
c0000fbb:	a3 7c a7 02 c0       	mov    ds:0xc002a77c,eax
c0000fc0:	a3 80 a7 02 c0       	mov    ds:0xc002a780,eax
c0000fc5:	a3 70 a7 02 c0       	mov    ds:0xc002a770,eax
c0000fca:	29 f2                	sub    edx,esi
c0000fcc:	c7 40 08 74 a7 02 c0 	mov    DWORD PTR [eax+0x8],0xc002a774
c0000fd3:	c7 40 0c 74 a7 02 c0 	mov    DWORD PTR [eax+0xc],0xc002a774
c0000fda:	83 ce 01             	or     esi,0x1
c0000fdd:	89 d1                	mov    ecx,edx
c0000fdf:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000fe2:	83 c9 01             	or     ecx,0x1
c0000fe5:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000fe8:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000feb:	eb 15                	jmp    c0001002 <dlmalloc+0x149>
c0000fed:	a3 80 a7 02 c0       	mov    ds:0xc002a780,eax
c0000ff2:	39 fe                	cmp    esi,edi
c0000ff4:	c7 40 08 74 a7 02 c0 	mov    DWORD PTR [eax+0x8],0xc002a774
c0000ffb:	75 0d                	jne    c000100a <dlmalloc+0x151>
c0000ffd:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001002:	8d 43 08             	lea    eax,[ebx+0x8]
c0001005:	e9 35 02 00 00       	jmp    c000123f <dlmalloc+0x386>
c000100a:	89 f8                	mov    eax,edi
c000100c:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001012:	77 19                	ja     c000102d <dlmalloc+0x174>
c0001014:	c1 e8 03             	shr    eax,0x3
c0001017:	8d 14 00             	lea    edx,[eax+eax*1]
c000101a:	83 c2 0d             	add    edx,0xd
c000101d:	8d 2c 95 38 a7 02 c0 	lea    ebp,[edx*4-0x3ffd58c8]
c0001024:	8b 14 95 40 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd58c0]
c000102b:	eb 46                	jmp    c0001073 <dlmalloc+0x1ba>
c000102d:	e8 c1 f9 ff ff       	call   c00009f3 <largebin_index>
c0001032:	8d 14 00             	lea    edx,[eax+eax*1]
c0001035:	83 c2 0d             	add    edx,0xd
c0001038:	8d 0c 95 40 a7 02 c0 	lea    ecx,[edx*4-0x3ffd58c0]
c000103f:	8b 14 95 40 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd58c0]
c0001046:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001049:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000104d:	89 d5                	mov    ebp,edx
c000104f:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001053:	74 1e                	je     c0001073 <dlmalloc+0x1ba>
c0001055:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001058:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000105b:	77 12                	ja     c000106f <dlmalloc+0x1b6>
c000105d:	83 cf 01             	or     edi,0x1
c0001060:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001063:	76 05                	jbe    c000106a <dlmalloc+0x1b1>
c0001065:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001068:	eb f6                	jmp    c0001060 <dlmalloc+0x1a7>
c000106a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000106d:	eb 04                	jmp    c0001073 <dlmalloc+0x1ba>
c000106f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001073:	89 c7                	mov    edi,eax
c0001075:	88 c1                	mov    cl,al
c0001077:	c1 ff 05             	sar    edi,0x5
c000107a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000107e:	bf 01 00 00 00       	mov    edi,0x1
c0001083:	d3 e7                	shl    edi,cl
c0001085:	89 f8                	mov    eax,edi
c0001087:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000108b:	09 04 bd 74 aa 02 c0 	or     DWORD PTR [edi*4-0x3ffd558c],eax
c0001092:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001095:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001098:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000109b:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000109e:	e9 db fe ff ff       	jmp    c0000f7e <dlmalloc+0xc5>
c00010a3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010a9:	76 78                	jbe    c0001123 <dlmalloc+0x26a>
c00010ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010af:	8d 04 c5 74 a7 02 c0 	lea    eax,[eax*8-0x3ffd588c]
c00010b6:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010b9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bc:	39 ca                	cmp    edx,ecx
c00010be:	74 63                	je     c0001123 <dlmalloc+0x26a>
c00010c0:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00010c3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00010c6:	83 e3 fc             	and    ebx,0xfffffffc
c00010c9:	39 de                	cmp    esi,ebx
c00010cb:	77 52                	ja     c000111f <dlmalloc+0x266>
c00010cd:	89 df                	mov    edi,ebx
c00010cf:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00010d2:	29 f7                	sub    edi,esi
c00010d4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00010d7:	01 d3                	add    ebx,edx
c00010d9:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00010dc:	83 ff 0f             	cmp    edi,0xf
c00010df:	8d 42 08             	lea    eax,[edx+0x8]
c00010e2:	77 09                	ja     c00010ed <dlmalloc+0x234>
c00010e4:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00010e8:	e9 52 01 00 00       	jmp    c000123f <dlmalloc+0x386>
c00010ed:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00010f0:	83 ce 01             	or     esi,0x1
c00010f3:	89 0d 7c a7 02 c0    	mov    DWORD PTR ds:0xc002a77c,ecx
c00010f9:	89 0d 80 a7 02 c0    	mov    DWORD PTR ds:0xc002a780,ecx
c00010ff:	c7 41 08 74 a7 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002a774
c0001106:	c7 41 0c 74 a7 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002a774
c000110d:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001110:	89 fa                	mov    edx,edi
c0001112:	83 ca 01             	or     edx,0x1
c0001115:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001118:	89 3b                	mov    DWORD PTR [ebx],edi
c000111a:	e9 20 01 00 00       	jmp    c000123f <dlmalloc+0x386>
c000111f:	89 c2                	mov    edx,eax
c0001121:	eb 99                	jmp    c00010bc <dlmalloc+0x203>
c0001123:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001127:	b8 01 00 00 00       	mov    eax,0x1
c000112c:	41                   	inc    ecx
c000112d:	89 cb                	mov    ebx,ecx
c000112f:	8d 14 cd 6c a7 02 c0 	lea    edx,[ecx*8-0x3ffd5894]
c0001136:	c1 eb 05             	shr    ebx,0x5
c0001139:	d3 e0                	shl    eax,cl
c000113b:	8b 3c 9d 74 aa 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd558c]
c0001142:	39 f8                	cmp    eax,edi
c0001144:	77 04                	ja     c000114a <dlmalloc+0x291>
c0001146:	85 c0                	test   eax,eax
c0001148:	75 26                	jne    c0001170 <dlmalloc+0x2b7>
c000114a:	43                   	inc    ebx
c000114b:	83 fb 02             	cmp    ebx,0x2
c000114e:	0f 87 a6 00 00 00    	ja     c00011fa <dlmalloc+0x341>
c0001154:	8b 3c 9d 74 aa 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd558c]
c000115b:	85 ff                	test   edi,edi
c000115d:	74 eb                	je     c000114a <dlmalloc+0x291>
c000115f:	89 d8                	mov    eax,ebx
c0001161:	c1 e0 06             	shl    eax,0x6
c0001164:	8d 14 85 6c a7 02 c0 	lea    edx,[eax*4-0x3ffd5894]
c000116b:	b8 01 00 00 00       	mov    eax,0x1
c0001170:	85 f8                	test   eax,edi
c0001172:	75 07                	jne    c000117b <dlmalloc+0x2c2>
c0001174:	83 c2 08             	add    edx,0x8
c0001177:	01 c0                	add    eax,eax
c0001179:	eb f5                	jmp    c0001170 <dlmalloc+0x2b7>
c000117b:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000117e:	39 ca                	cmp    edx,ecx
c0001180:	75 14                	jne    c0001196 <dlmalloc+0x2dd>
c0001182:	89 c1                	mov    ecx,eax
c0001184:	83 c2 08             	add    edx,0x8
c0001187:	f7 d1                	not    ecx
c0001189:	01 c0                	add    eax,eax
c000118b:	21 cf                	and    edi,ecx
c000118d:	89 3c 9d 74 aa 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd558c],edi
c0001194:	eb ac                	jmp    c0001142 <dlmalloc+0x289>
c0001196:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001199:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000119c:	83 e0 fc             	and    eax,0xfffffffc
c000119f:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011a2:	89 c3                	mov    ebx,eax
c00011a4:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011a7:	29 f3                	sub    ebx,esi
c00011a9:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011ac:	83 fb 0f             	cmp    ebx,0xf
c00011af:	8d 41 08             	lea    eax,[ecx+0x8]
c00011b2:	77 09                	ja     c00011bd <dlmalloc+0x304>
c00011b4:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011b8:	e9 82 00 00 00       	jmp    c000123f <dlmalloc+0x386>
c00011bd:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00011c0:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011c6:	89 3d 7c a7 02 c0    	mov    DWORD PTR ds:0xc002a77c,edi
c00011cc:	89 3d 80 a7 02 c0    	mov    DWORD PTR ds:0xc002a780,edi
c00011d2:	c7 47 08 74 a7 02 c0 	mov    DWORD PTR [edi+0x8],0xc002a774
c00011d9:	c7 47 0c 74 a7 02 c0 	mov    DWORD PTR [edi+0xc],0xc002a774
c00011e0:	77 06                	ja     c00011e8 <dlmalloc+0x32f>
c00011e2:	89 3d 70 a7 02 c0    	mov    DWORD PTR ds:0xc002a770,edi
c00011e8:	83 ce 01             	or     esi,0x1
c00011eb:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00011ee:	89 d9                	mov    ecx,ebx
c00011f0:	83 c9 01             	or     ecx,0x1
c00011f3:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00011f6:	89 1a                	mov    DWORD PTR [edx],ebx
c00011f8:	eb 45                	jmp    c000123f <dlmalloc+0x386>
c00011fa:	a1 6c a7 02 c0       	mov    eax,ds:0xc002a76c
c00011ff:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001202:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001205:	83 e2 fc             	and    edx,0xfffffffc
c0001208:	39 d1                	cmp    ecx,edx
c000120a:	77 1e                	ja     c000122a <dlmalloc+0x371>
c000120c:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000120f:	89 f3                	mov    ebx,esi
c0001211:	89 0d 6c a7 02 c0    	mov    DWORD PTR ds:0xc002a76c,ecx
c0001217:	83 cb 01             	or     ebx,0x1
c000121a:	29 f2                	sub    edx,esi
c000121c:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000121f:	83 ca 01             	or     edx,0x1
c0001222:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001225:	e9 2d fd ff ff       	jmp    c0000f57 <dlmalloc+0x9e>
c000122a:	83 c4 1c             	add    esp,0x1c
c000122d:	89 f0                	mov    eax,esi
c000122f:	5b                   	pop    ebx
c0001230:	ba 40 a7 02 c0       	mov    edx,0xc002a740
c0001235:	5e                   	pop    esi
c0001236:	5f                   	pop    edi
c0001237:	5d                   	pop    ebp
c0001238:	e9 16 fa ff ff       	jmp    c0000c53 <sYSMALLOc>
c000123d:	31 c0                	xor    eax,eax
c000123f:	83 c4 1c             	add    esp,0x1c
c0001242:	5b                   	pop    ebx
c0001243:	5e                   	pop    esi
c0001244:	5f                   	pop    edi
c0001245:	5d                   	pop    ebp
c0001246:	c3                   	ret    

c0001247 <iALLOc>:
c0001247:	55                   	push   ebp
c0001248:	89 c5                	mov    ebp,eax
c000124a:	57                   	push   edi
c000124b:	56                   	push   esi
c000124c:	53                   	push   ebx
c000124d:	83 ec 2c             	sub    esp,0x2c
c0001250:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001254:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001258:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000125c:	83 3d 40 a7 02 c0 00 	cmp    DWORD PTR ds:0xc002a740,0x0
c0001263:	75 12                	jne    c0001277 <iALLOc+0x30>
c0001265:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001269:	b8 40 a7 02 c0       	mov    eax,0xc002a740
c000126e:	e8 04 f8 ff ff       	call   c0000a77 <malloc_consolidate>
c0001273:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001277:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000127c:	74 12                	je     c0001290 <iALLOc+0x49>
c000127e:	85 ed                	test   ebp,ebp
c0001280:	0f 84 64 01 00 00    	je     c00013ea <iALLOc+0x1a3>
c0001286:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000128e:	eb 33                	jmp    c00012c3 <iALLOc+0x7c>
c0001290:	85 ed                	test   ebp,ebp
c0001292:	75 14                	jne    c00012a8 <iALLOc+0x61>
c0001294:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000129c:	83 c4 2c             	add    esp,0x2c
c000129f:	5b                   	pop    ebx
c00012a0:	5e                   	pop    esi
c00012a1:	5f                   	pop    edi
c00012a2:	5d                   	pop    ebp
c00012a3:	e9 11 fc ff ff       	jmp    c0000eb9 <dlmalloc>
c00012a8:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012af:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012b7:	83 f8 0f             	cmp    eax,0xf
c00012ba:	76 07                	jbe    c00012c3 <iALLOc+0x7c>
c00012bc:	83 e0 f8             	and    eax,0xfffffff8
c00012bf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00012c3:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00012c8:	75 09                	jne    c00012d3 <iALLOc+0x8c>
c00012ca:	89 d0                	mov    eax,edx
c00012cc:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00012cf:	31 f6                	xor    esi,esi
c00012d1:	eb 3b                	jmp    c000130e <iALLOc+0xc7>
c00012d3:	8b 02                	mov    eax,DWORD PTR [edx]
c00012d5:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00012dd:	83 c0 0b             	add    eax,0xb
c00012e0:	83 f8 0f             	cmp    eax,0xf
c00012e3:	76 07                	jbe    c00012ec <iALLOc+0xa5>
c00012e5:	83 e0 f8             	and    eax,0xfffffff8
c00012e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00012ec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00012f0:	0f af f5             	imul   esi,ebp
c00012f3:	eb 25                	jmp    c000131a <iALLOc+0xd3>
c00012f5:	8b 18                	mov    ebx,DWORD PTR [eax]
c00012f7:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00012fa:	bb 10 00 00 00       	mov    ebx,0x10
c00012ff:	83 f9 0f             	cmp    ecx,0xf
c0001302:	76 05                	jbe    c0001309 <iALLOc+0xc2>
c0001304:	83 e1 f8             	and    ecx,0xfffffff8
c0001307:	89 cb                	mov    ebx,ecx
c0001309:	01 de                	add    esi,ebx
c000130b:	83 c0 04             	add    eax,0x4
c000130e:	39 c7                	cmp    edi,eax
c0001310:	75 e3                	jne    c00012f5 <iALLOc+0xae>
c0001312:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000131a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000131e:	8b 1d 94 aa 02 c0    	mov    ebx,DWORD PTR ds:0xc002aa94
c0001324:	83 ec 0c             	sub    esp,0xc
c0001327:	c7 05 94 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aa94,0x0
c0001331:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001335:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001339:	50                   	push   eax
c000133a:	e8 7a fb ff ff       	call   c0000eb9 <dlmalloc>
c000133f:	83 c4 10             	add    esp,0x10
c0001342:	89 1d 94 aa 02 c0    	mov    DWORD PTR ds:0xc002aa94,ebx
c0001348:	85 c0                	test   eax,eax
c000134a:	0f 84 92 00 00 00    	je     c00013e2 <iALLOc+0x19b>
c0001350:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001353:	8d 78 f8             	lea    edi,[eax-0x8]
c0001356:	83 e3 fc             	and    ebx,0xfffffffc
c0001359:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000135d:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001362:	74 1e                	je     c0001382 <iALLOc+0x13b>
c0001364:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001368:	89 d9                	mov    ecx,ebx
c000136a:	52                   	push   edx
c000136b:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000136f:	83 e9 04             	sub    ecx,0x4
c0001372:	51                   	push   ecx
c0001373:	6a 00                	push   0x0
c0001375:	50                   	push   eax
c0001376:	e8 02 f3 ff ff       	call   c000067d <memset>
c000137b:	83 c4 10             	add    esp,0x10
c000137e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001382:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001387:	75 14                	jne    c000139d <iALLOc+0x156>
c0001389:	8d 04 37             	lea    eax,[edi+esi*1]
c000138c:	29 f3                	sub    ebx,esi
c000138e:	8d 48 08             	lea    ecx,[eax+0x8]
c0001391:	83 cb 01             	or     ebx,0x1
c0001394:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001398:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000139b:	89 f3                	mov    ebx,esi
c000139d:	31 c0                	xor    eax,eax
c000139f:	4d                   	dec    ebp
c00013a0:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013a3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013a7:	39 c5                	cmp    ebp,eax
c00013a9:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013ac:	74 2c                	je     c00013da <iALLOc+0x193>
c00013ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013b2:	85 c9                	test   ecx,ecx
c00013b4:	75 15                	jne    c00013cb <iALLOc+0x184>
c00013b6:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013b9:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013bc:	b9 10 00 00 00       	mov    ecx,0x10
c00013c1:	83 fe 0f             	cmp    esi,0xf
c00013c4:	76 05                	jbe    c00013cb <iALLOc+0x184>
c00013c6:	83 e6 f8             	and    esi,0xfffffff8
c00013c9:	89 f1                	mov    ecx,esi
c00013cb:	89 ce                	mov    esi,ecx
c00013cd:	29 cb                	sub    ebx,ecx
c00013cf:	83 ce 01             	or     esi,0x1
c00013d2:	40                   	inc    eax
c00013d3:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00013d6:	01 cf                	add    edi,ecx
c00013d8:	eb c6                	jmp    c00013a0 <iALLOc+0x159>
c00013da:	83 cb 01             	or     ebx,0x1
c00013dd:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00013e0:	eb 08                	jmp    c00013ea <iALLOc+0x1a3>
c00013e2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00013ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00013ee:	83 c4 2c             	add    esp,0x2c
c00013f1:	5b                   	pop    ebx
c00013f2:	5e                   	pop    esi
c00013f3:	5f                   	pop    edi
c00013f4:	5d                   	pop    ebp
c00013f5:	c3                   	ret    

c00013f6 <dlrealloc>:
c00013f6:	55                   	push   ebp
c00013f7:	57                   	push   edi
c00013f8:	56                   	push   esi
c00013f9:	53                   	push   ebx
c00013fa:	83 ec 1c             	sub    esp,0x1c
c00013fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001401:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001405:	85 db                	test   ebx,ebx
c0001407:	75 10                	jne    c0001419 <dlrealloc+0x23>
c0001409:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000140d:	83 c4 1c             	add    esp,0x1c
c0001410:	5b                   	pop    ebx
c0001411:	5e                   	pop    esi
c0001412:	5f                   	pop    edi
c0001413:	5d                   	pop    ebp
c0001414:	e9 a0 fa ff ff       	jmp    c0000eb9 <dlmalloc>
c0001419:	83 f8 df             	cmp    eax,0xffffffdf
c000141c:	76 07                	jbe    c0001425 <dlrealloc+0x2f>
c000141e:	31 db                	xor    ebx,ebx
c0001420:	e9 7c 01 00 00       	jmp    c00015a1 <dlrealloc+0x1ab>
c0001425:	83 c0 0b             	add    eax,0xb
c0001428:	bf 10 00 00 00       	mov    edi,0x10
c000142d:	83 f8 0f             	cmp    eax,0xf
c0001430:	76 05                	jbe    c0001437 <dlrealloc+0x41>
c0001432:	83 e0 f8             	and    eax,0xfffffff8
c0001435:	89 c7                	mov    edi,eax
c0001437:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000143a:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000143d:	89 c6                	mov    esi,eax
c000143f:	83 e6 fc             	and    esi,0xfffffffc
c0001442:	a8 02                	test   al,0x2
c0001444:	75 d8                	jne    c000141e <dlrealloc+0x28>
c0001446:	39 f7                	cmp    edi,esi
c0001448:	0f 86 15 01 00 00    	jbe    c0001563 <dlrealloc+0x16d>
c000144e:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001452:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001455:	39 15 6c a7 02 c0    	cmp    DWORD PTR ds:0xc002a76c,edx
c000145b:	75 33                	jne    c0001490 <dlrealloc+0x9a>
c000145d:	83 e1 fc             	and    ecx,0xfffffffc
c0001460:	01 f1                	add    ecx,esi
c0001462:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001466:	8d 4f 10             	lea    ecx,[edi+0x10]
c0001469:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000146d:	77 49                	ja     c00014b8 <dlrealloc+0xc2>
c000146f:	01 fd                	add    ebp,edi
c0001471:	83 e0 01             	and    eax,0x1
c0001474:	09 f8                	or     eax,edi
c0001476:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001479:	89 2d 6c a7 02 c0    	mov    DWORD PTR ds:0xc002a76c,ebp
c000147f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001483:	29 f8                	sub    eax,edi
c0001485:	83 c8 01             	or     eax,0x1
c0001488:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000148b:	e9 11 01 00 00       	jmp    c00015a1 <dlrealloc+0x1ab>
c0001490:	89 c8                	mov    eax,ecx
c0001492:	83 e0 fe             	and    eax,0xfffffffe
c0001495:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000149a:	75 1c                	jne    c00014b8 <dlrealloc+0xc2>
c000149c:	83 e1 fc             	and    ecx,0xfffffffc
c000149f:	01 f1                	add    ecx,esi
c00014a1:	39 cf                	cmp    edi,ecx
c00014a3:	77 13                	ja     c00014b8 <dlrealloc+0xc2>
c00014a5:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014a8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014ab:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014ae:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014b1:	89 ce                	mov    esi,ecx
c00014b3:	e9 ab 00 00 00       	jmp    c0001563 <dlrealloc+0x16d>
c00014b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014bc:	8d 47 f9             	lea    eax,[edi-0x7]
c00014bf:	83 ec 0c             	sub    esp,0xc
c00014c2:	50                   	push   eax
c00014c3:	e8 f1 f9 ff ff       	call   c0000eb9 <dlmalloc>
c00014c8:	83 c4 10             	add    esp,0x10
c00014cb:	89 c1                	mov    ecx,eax
c00014cd:	85 c0                	test   eax,eax
c00014cf:	0f 84 49 ff ff ff    	je     c000141e <dlrealloc+0x28>
c00014d5:	8d 40 f8             	lea    eax,[eax-0x8]
c00014d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00014dc:	39 c2                	cmp    edx,eax
c00014de:	75 0a                	jne    c00014ea <dlrealloc+0xf4>
c00014e0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00014e3:	83 e0 fc             	and    eax,0xfffffffc
c00014e6:	01 c6                	add    esi,eax
c00014e8:	eb 79                	jmp    c0001563 <dlrealloc+0x16d>
c00014ea:	83 ee 04             	sub    esi,0x4
c00014ed:	83 fe 27             	cmp    esi,0x27
c00014f0:	76 16                	jbe    c0001508 <dlrealloc+0x112>
c00014f2:	50                   	push   eax
c00014f3:	56                   	push   esi
c00014f4:	53                   	push   ebx
c00014f5:	51                   	push   ecx
c00014f6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00014fa:	e8 48 f1 ff ff       	call   c0000647 <memcpy>
c00014ff:	83 c4 10             	add    esp,0x10
c0001502:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001506:	eb 43                	jmp    c000154b <dlrealloc+0x155>
c0001508:	8b 03                	mov    eax,DWORD PTR [ebx]
c000150a:	83 fe 13             	cmp    esi,0x13
c000150d:	89 01                	mov    DWORD PTR [ecx],eax
c000150f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001512:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001515:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001518:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000151b:	76 2e                	jbe    c000154b <dlrealloc+0x155>
c000151d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001520:	83 fe 1b             	cmp    esi,0x1b
c0001523:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001526:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001529:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000152c:	76 1d                	jbe    c000154b <dlrealloc+0x155>
c000152e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001531:	83 fe 23             	cmp    esi,0x23
c0001534:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001537:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000153a:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000153d:	76 0c                	jbe    c000154b <dlrealloc+0x155>
c000153f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001542:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001545:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001548:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c000154b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000154f:	83 ec 0c             	sub    esp,0xc
c0001552:	53                   	push   ebx
c0001553:	e8 06 f6 ff ff       	call   c0000b5e <dlfree>
c0001558:	83 c4 10             	add    esp,0x10
c000155b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000155f:	89 cb                	mov    ebx,ecx
c0001561:	eb 3e                	jmp    c00015a1 <dlrealloc+0x1ab>
c0001563:	89 f2                	mov    edx,esi
c0001565:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001568:	29 fa                	sub    edx,edi
c000156a:	83 e1 01             	and    ecx,0x1
c000156d:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c0001571:	83 fa 0f             	cmp    edx,0xf
c0001574:	77 0b                	ja     c0001581 <dlrealloc+0x18b>
c0001576:	09 ce                	or     esi,ecx
c0001578:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000157b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000157f:	eb 20                	jmp    c00015a1 <dlrealloc+0x1ab>
c0001581:	01 fd                	add    ebp,edi
c0001583:	83 ec 0c             	sub    esp,0xc
c0001586:	09 cf                	or     edi,ecx
c0001588:	83 ca 01             	or     edx,0x1
c000158b:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c000158e:	83 c5 08             	add    ebp,0x8
c0001591:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c0001594:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001598:	55                   	push   ebp
c0001599:	e8 c0 f5 ff ff       	call   c0000b5e <dlfree>
c000159e:	83 c4 10             	add    esp,0x10
c00015a1:	83 c4 1c             	add    esp,0x1c
c00015a4:	89 d8                	mov    eax,ebx
c00015a6:	5b                   	pop    ebx
c00015a7:	5e                   	pop    esi
c00015a8:	5f                   	pop    edi
c00015a9:	5d                   	pop    ebp
c00015aa:	c3                   	ret    

c00015ab <dlmemalign>:
c00015ab:	55                   	push   ebp
c00015ac:	57                   	push   edi
c00015ad:	56                   	push   esi
c00015ae:	53                   	push   ebx
c00015af:	83 ec 0c             	sub    esp,0xc
c00015b2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015b6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015ba:	83 fa 08             	cmp    edx,0x8
c00015bd:	77 10                	ja     c00015cf <dlmemalign+0x24>
c00015bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00015c3:	83 c4 0c             	add    esp,0xc
c00015c6:	5b                   	pop    ebx
c00015c7:	5e                   	pop    esi
c00015c8:	5f                   	pop    edi
c00015c9:	5d                   	pop    ebp
c00015ca:	e9 ea f8 ff ff       	jmp    c0000eb9 <dlmalloc>
c00015cf:	bf 10 00 00 00       	mov    edi,0x10
c00015d4:	83 fa 0f             	cmp    edx,0xf
c00015d7:	76 13                	jbe    c00015ec <dlmemalign+0x41>
c00015d9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00015dc:	85 d1                	test   ecx,edx
c00015de:	75 04                	jne    c00015e4 <dlmemalign+0x39>
c00015e0:	89 d7                	mov    edi,edx
c00015e2:	eb 08                	jmp    c00015ec <dlmemalign+0x41>
c00015e4:	39 d7                	cmp    edi,edx
c00015e6:	73 04                	jae    c00015ec <dlmemalign+0x41>
c00015e8:	01 ff                	add    edi,edi
c00015ea:	eb f8                	jmp    c00015e4 <dlmemalign+0x39>
c00015ec:	83 f8 df             	cmp    eax,0xffffffdf
c00015ef:	76 07                	jbe    c00015f8 <dlmemalign+0x4d>
c00015f1:	31 c0                	xor    eax,eax
c00015f3:	e9 ce 00 00 00       	jmp    c00016c6 <dlmemalign+0x11b>
c00015f8:	83 c0 0b             	add    eax,0xb
c00015fb:	bd 10 00 00 00       	mov    ebp,0x10
c0001600:	83 f8 0f             	cmp    eax,0xf
c0001603:	76 05                	jbe    c000160a <dlmemalign+0x5f>
c0001605:	83 e0 f8             	and    eax,0xfffffff8
c0001608:	89 c5                	mov    ebp,eax
c000160a:	83 ec 0c             	sub    esp,0xc
c000160d:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001611:	50                   	push   eax
c0001612:	e8 a2 f8 ff ff       	call   c0000eb9 <dlmalloc>
c0001617:	83 c4 10             	add    esp,0x10
c000161a:	89 c1                	mov    ecx,eax
c000161c:	85 c0                	test   eax,eax
c000161e:	74 d1                	je     c00015f1 <dlmemalign+0x46>
c0001620:	31 d2                	xor    edx,edx
c0001622:	8d 70 f8             	lea    esi,[eax-0x8]
c0001625:	f7 f7                	div    edi
c0001627:	85 d2                	test   edx,edx
c0001629:	74 62                	je     c000168d <dlmemalign+0xe2>
c000162b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000162f:	89 f8                	mov    eax,edi
c0001631:	f7 d8                	neg    eax
c0001633:	21 c3                	and    ebx,eax
c0001635:	83 eb 08             	sub    ebx,0x8
c0001638:	89 d8                	mov    eax,ebx
c000163a:	29 f0                	sub    eax,esi
c000163c:	83 f8 0f             	cmp    eax,0xf
c000163f:	77 02                	ja     c0001643 <dlmemalign+0x98>
c0001641:	01 fb                	add    ebx,edi
c0001643:	89 d8                	mov    eax,ebx
c0001645:	29 f0                	sub    eax,esi
c0001647:	89 c6                	mov    esi,eax
c0001649:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000164c:	89 c2                	mov    edx,eax
c000164e:	83 e2 fc             	and    edx,0xfffffffc
c0001651:	29 f2                	sub    edx,esi
c0001653:	a8 02                	test   al,0x2
c0001655:	74 10                	je     c0001667 <dlmemalign+0xbc>
c0001657:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000165a:	83 ca 02             	or     edx,0x2
c000165d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001660:	89 33                	mov    DWORD PTR [ebx],esi
c0001662:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001665:	eb 5f                	jmp    c00016c6 <dlmemalign+0x11b>
c0001667:	83 ec 0c             	sub    esp,0xc
c000166a:	89 d0                	mov    eax,edx
c000166c:	83 c8 01             	or     eax,0x1
c000166f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001672:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001677:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000167a:	83 e0 01             	and    eax,0x1
c000167d:	09 f0                	or     eax,esi
c000167f:	89 de                	mov    esi,ebx
c0001681:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001684:	51                   	push   ecx
c0001685:	e8 d4 f4 ff ff       	call   c0000b5e <dlfree>
c000168a:	83 c4 10             	add    esp,0x10
c000168d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001690:	a8 02                	test   al,0x2
c0001692:	75 2f                	jne    c00016c3 <dlmemalign+0x118>
c0001694:	83 e0 fc             	and    eax,0xfffffffc
c0001697:	8d 55 10             	lea    edx,[ebp+0x10]
c000169a:	39 c2                	cmp    edx,eax
c000169c:	73 25                	jae    c00016c3 <dlmemalign+0x118>
c000169e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016a1:	83 ec 0c             	sub    esp,0xc
c00016a4:	29 e8                	sub    eax,ebp
c00016a6:	83 c2 08             	add    edx,0x8
c00016a9:	83 c8 01             	or     eax,0x1
c00016ac:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016af:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016b2:	83 e0 01             	and    eax,0x1
c00016b5:	09 c5                	or     ebp,eax
c00016b7:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016ba:	52                   	push   edx
c00016bb:	e8 9e f4 ff ff       	call   c0000b5e <dlfree>
c00016c0:	83 c4 10             	add    esp,0x10
c00016c3:	8d 46 08             	lea    eax,[esi+0x8]
c00016c6:	83 c4 0c             	add    esp,0xc
c00016c9:	5b                   	pop    ebx
c00016ca:	5e                   	pop    esi
c00016cb:	5f                   	pop    edi
c00016cc:	5d                   	pop    ebp
c00016cd:	c3                   	ret    

c00016ce <dlcalloc>:
c00016ce:	53                   	push   ebx
c00016cf:	83 ec 14             	sub    esp,0x14
c00016d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016d6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00016db:	50                   	push   eax
c00016dc:	e8 d8 f7 ff ff       	call   c0000eb9 <dlmalloc>
c00016e1:	83 c4 10             	add    esp,0x10
c00016e4:	89 c3                	mov    ebx,eax
c00016e6:	85 c0                	test   eax,eax
c00016e8:	74 77                	je     c0001761 <dlcalloc+0x93>
c00016ea:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00016ed:	89 d0                	mov    eax,edx
c00016ef:	83 e0 fc             	and    eax,0xfffffffc
c00016f2:	80 e2 02             	and    dl,0x2
c00016f5:	75 5a                	jne    c0001751 <dlcalloc+0x83>
c00016f7:	83 e8 04             	sub    eax,0x4
c00016fa:	83 f8 27             	cmp    eax,0x27
c00016fd:	76 03                	jbe    c0001702 <dlcalloc+0x34>
c00016ff:	51                   	push   ecx
c0001700:	eb 53                	jmp    c0001755 <dlcalloc+0x87>
c0001702:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001708:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000170f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001716:	83 f8 13             	cmp    eax,0x13
c0001719:	76 46                	jbe    c0001761 <dlcalloc+0x93>
c000171b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001722:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001729:	83 f8 1b             	cmp    eax,0x1b
c000172c:	76 33                	jbe    c0001761 <dlcalloc+0x93>
c000172e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001735:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000173c:	83 f8 23             	cmp    eax,0x23
c000173f:	76 20                	jbe    c0001761 <dlcalloc+0x93>
c0001741:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001748:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000174f:	eb 10                	jmp    c0001761 <dlcalloc+0x93>
c0001751:	83 e8 08             	sub    eax,0x8
c0001754:	52                   	push   edx
c0001755:	50                   	push   eax
c0001756:	6a 00                	push   0x0
c0001758:	53                   	push   ebx
c0001759:	e8 1f ef ff ff       	call   c000067d <memset>
c000175e:	83 c4 10             	add    esp,0x10
c0001761:	89 d8                	mov    eax,ebx
c0001763:	83 c4 08             	add    esp,0x8
c0001766:	5b                   	pop    ebx
c0001767:	c3                   	ret    

c0001768 <dlcfree>:
c0001768:	e9 f1 f3 ff ff       	jmp    c0000b5e <dlfree>

c000176d <dlindependent_calloc>:
c000176d:	83 ec 28             	sub    esp,0x28
c0001770:	b9 03 00 00 00       	mov    ecx,0x3
c0001775:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001779:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000177d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001781:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001785:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001789:	e8 b9 fa ff ff       	call   c0001247 <iALLOc>
c000178e:	83 c4 2c             	add    esp,0x2c
c0001791:	c3                   	ret    

c0001792 <dlindependent_comalloc>:
c0001792:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001796:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000179a:	31 c9                	xor    ecx,ecx
c000179c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017a4:	e9 9e fa ff ff       	jmp    c0001247 <iALLOc>

c00017a9 <dlvalloc>:
c00017a9:	83 ec 0c             	sub    esp,0xc
c00017ac:	83 3d 40 a7 02 c0 00 	cmp    DWORD PTR ds:0xc002a740,0x0
c00017b3:	75 0a                	jne    c00017bf <dlvalloc+0x16>
c00017b5:	b8 40 a7 02 c0       	mov    eax,0xc002a740
c00017ba:	e8 b8 f2 ff ff       	call   c0000a77 <malloc_consolidate>
c00017bf:	50                   	push   eax
c00017c0:	50                   	push   eax
c00017c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00017c5:	ff 35 9c aa 02 c0    	push   DWORD PTR ds:0xc002aa9c
c00017cb:	e8 db fd ff ff       	call   c00015ab <dlmemalign>
c00017d0:	83 c4 1c             	add    esp,0x1c
c00017d3:	c3                   	ret    

c00017d4 <dlpvalloc>:
c00017d4:	83 ec 0c             	sub    esp,0xc
c00017d7:	83 3d 40 a7 02 c0 00 	cmp    DWORD PTR ds:0xc002a740,0x0
c00017de:	75 0a                	jne    c00017ea <dlpvalloc+0x16>
c00017e0:	b8 40 a7 02 c0       	mov    eax,0xc002a740
c00017e5:	e8 8d f2 ff ff       	call   c0000a77 <malloc_consolidate>
c00017ea:	a1 9c aa 02 c0       	mov    eax,ds:0xc002aa9c
c00017ef:	89 c1                	mov    ecx,eax
c00017f1:	52                   	push   edx
c00017f2:	f7 d9                	neg    ecx
c00017f4:	52                   	push   edx
c00017f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00017f9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00017fd:	21 ca                	and    edx,ecx
c00017ff:	52                   	push   edx
c0001800:	50                   	push   eax
c0001801:	e8 a5 fd ff ff       	call   c00015ab <dlmemalign>
c0001806:	83 c4 1c             	add    esp,0x1c
c0001809:	c3                   	ret    

c000180a <dlmalloc_trim>:
c000180a:	b8 40 a7 02 c0       	mov    eax,0xc002a740
c000180f:	e8 63 f2 ff ff       	call   c0000a77 <malloc_consolidate>
c0001814:	31 c0                	xor    eax,eax
c0001816:	c3                   	ret    

c0001817 <dlmalloc_usable_size>:
c0001817:	53                   	push   ebx
c0001818:	31 c0                	xor    eax,eax
c000181a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000181e:	85 c9                	test   ecx,ecx
c0001820:	74 24                	je     c0001846 <dlmalloc_usable_size+0x2f>
c0001822:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001825:	f6 c2 02             	test   dl,0x2
c0001828:	74 08                	je     c0001832 <dlmalloc_usable_size+0x1b>
c000182a:	83 e2 fc             	and    edx,0xfffffffc
c000182d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001830:	eb 14                	jmp    c0001846 <dlmalloc_usable_size+0x2f>
c0001832:	89 d3                	mov    ebx,edx
c0001834:	31 c0                	xor    eax,eax
c0001836:	83 e3 fe             	and    ebx,0xfffffffe
c0001839:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000183e:	74 06                	je     c0001846 <dlmalloc_usable_size+0x2f>
c0001840:	83 e2 fc             	and    edx,0xfffffffc
c0001843:	8d 42 fc             	lea    eax,[edx-0x4]
c0001846:	5b                   	pop    ebx
c0001847:	c3                   	ret    

c0001848 <dlmallinfo>:
c0001848:	55                   	push   ebp
c0001849:	57                   	push   edi
c000184a:	56                   	push   esi
c000184b:	53                   	push   ebx
c000184c:	83 ec 08             	sub    esp,0x8
c000184f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001853:	83 3d 6c a7 02 c0 00 	cmp    DWORD PTR ds:0xc002a76c,0x0
c000185a:	75 0a                	jne    c0001866 <dlmallinfo+0x1e>
c000185c:	b8 40 a7 02 c0       	mov    eax,0xc002a740
c0001861:	e8 11 f2 ff ff       	call   c0000a77 <malloc_consolidate>
c0001866:	a1 6c a7 02 c0       	mov    eax,ds:0xc002a76c
c000186b:	31 ed                	xor    ebp,ebp
c000186d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001870:	31 c9                	xor    ecx,ecx
c0001872:	83 e0 fc             	and    eax,0xfffffffc
c0001875:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001879:	31 c0                	xor    eax,eax
c000187b:	8b 14 85 44 a7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd58bc]
c0001882:	85 d2                	test   edx,edx
c0001884:	74 0e                	je     c0001894 <dlmallinfo+0x4c>
c0001886:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001889:	45                   	inc    ebp
c000188a:	83 e6 fc             	and    esi,0xfffffffc
c000188d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001890:	01 f1                	add    ecx,esi
c0001892:	eb ee                	jmp    c0001882 <dlmallinfo+0x3a>
c0001894:	40                   	inc    eax
c0001895:	83 f8 0a             	cmp    eax,0xa
c0001898:	75 e1                	jne    c000187b <dlmallinfo+0x33>
c000189a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000189e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018a5:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018a8:	b8 74 a7 02 c0       	mov    eax,0xc002a774
c00018ad:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018b0:	39 f0                	cmp    eax,esi
c00018b2:	74 10                	je     c00018c4 <dlmallinfo+0x7c>
c00018b4:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018b7:	ff 04 24             	inc    DWORD PTR [esp]
c00018ba:	83 e7 fc             	and    edi,0xfffffffc
c00018bd:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00018c0:	01 fa                	add    edx,edi
c00018c2:	eb ec                	jmp    c00018b0 <dlmallinfo+0x68>
c00018c4:	83 c0 08             	add    eax,0x8
c00018c7:	3d 6c aa 02 c0       	cmp    eax,0xc002aa6c
c00018cc:	75 df                	jne    c00018ad <dlmallinfo+0x65>
c00018ce:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00018d1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00018d4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00018d7:	a1 a8 aa 02 c0       	mov    eax,ds:0xc002aaa8
c00018dc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00018df:	89 03                	mov    DWORD PTR [ebx],eax
c00018e1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00018e4:	8b 35 90 aa 02 c0    	mov    esi,DWORD PTR ds:0xc002aa90
c00018ea:	29 d0                	sub    eax,edx
c00018ec:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00018ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00018f2:	8b 35 a4 aa 02 c0    	mov    esi,DWORD PTR ds:0xc002aaa4
c00018f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018fc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c00018ff:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001902:	8b 35 b4 aa 02 c0    	mov    esi,DWORD PTR ds:0xc002aab4
c0001908:	89 d8                	mov    eax,ebx
c000190a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000190d:	83 c4 08             	add    esp,0x8
c0001910:	5b                   	pop    ebx
c0001911:	5e                   	pop    esi
c0001912:	5f                   	pop    edi
c0001913:	5d                   	pop    ebp
c0001914:	c2 04 00             	ret    0x4

c0001917 <dlmalloc_stats>:
c0001917:	83 ec 30             	sub    esp,0x30
c000191a:	8d 44 24 08          	lea    eax,[esp+0x8]
c000191e:	50                   	push   eax
c000191f:	e8 24 ff ff ff       	call   c0001848 <dlmallinfo>
c0001924:	83 c4 30             	add    esp,0x30
c0001927:	c3                   	ret    

c0001928 <dlmallopt>:
c0001928:	56                   	push   esi
c0001929:	b8 40 a7 02 c0       	mov    eax,0xc002a740
c000192e:	53                   	push   ebx
c000192f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001933:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001937:	e8 3b f1 ff ff       	call   c0000a77 <malloc_consolidate>
c000193c:	8d 46 04             	lea    eax,[esi+0x4]
c000193f:	83 f8 05             	cmp    eax,0x5
c0001942:	77 67                	ja     c00019ab <dlmallopt+0x83>
c0001944:	ff 24 85 24 63 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9cdc]
c000194b:	83 fb 50             	cmp    ebx,0x50
c000194e:	77 5b                	ja     c00019ab <dlmallopt+0x83>
c0001950:	ba 08 00 00 00       	mov    edx,0x8
c0001955:	85 db                	test   ebx,ebx
c0001957:	74 12                	je     c000196b <dlmallopt+0x43>
c0001959:	83 c3 0b             	add    ebx,0xb
c000195c:	ba 10 00 00 00       	mov    edx,0x10
c0001961:	83 fb 0f             	cmp    ebx,0xf
c0001964:	76 05                	jbe    c000196b <dlmallopt+0x43>
c0001966:	89 da                	mov    edx,ebx
c0001968:	83 e2 f8             	and    edx,0xfffffff8
c000196b:	a1 40 a7 02 c0       	mov    eax,ds:0xc002a740
c0001970:	83 e0 03             	and    eax,0x3
c0001973:	09 d0                	or     eax,edx
c0001975:	a3 40 a7 02 c0       	mov    ds:0xc002a740,eax
c000197a:	eb 31                	jmp    c00019ad <dlmallopt+0x85>
c000197c:	89 1d 84 aa 02 c0    	mov    DWORD PTR ds:0xc002aa84,ebx
c0001982:	eb 06                	jmp    c000198a <dlmallopt+0x62>
c0001984:	89 1d 88 aa 02 c0    	mov    DWORD PTR ds:0xc002aa88,ebx
c000198a:	be 01 00 00 00       	mov    esi,0x1
c000198f:	eb 1c                	jmp    c00019ad <dlmallopt+0x85>
c0001991:	89 1d 8c aa 02 c0    	mov    DWORD PTR ds:0xc002aa8c,ebx
c0001997:	eb f1                	jmp    c000198a <dlmallopt+0x62>
c0001999:	31 f6                	xor    esi,esi
c000199b:	85 db                	test   ebx,ebx
c000199d:	75 0e                	jne    c00019ad <dlmallopt+0x85>
c000199f:	c7 05 94 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aa94,0x0
c00019a9:	eb df                	jmp    c000198a <dlmallopt+0x62>
c00019ab:	31 f6                	xor    esi,esi
c00019ad:	89 f0                	mov    eax,esi
c00019af:	5b                   	pop    ebx
c00019b0:	5e                   	pop    esi
c00019b1:	c3                   	ret    

c00019b2 <disk_status>:
c00019b2:	31 c0                	xor    eax,eax
c00019b4:	c3                   	ret    

c00019b5 <disk_initialize>:
c00019b5:	31 c0                	xor    eax,eax
c00019b7:	c3                   	ret    

c00019b8 <disk_read>:
c00019b8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019bd:	0f b6 04 85 80 c1 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd3e80]
c00019c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c9:	e9 d0 d1 01 00       	jmp    c001eb9e <fatWrapperReadDisk>

c00019ce <disk_write>:
c00019ce:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019d3:	0f b6 04 85 80 c1 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd3e80]
c00019db:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019df:	e9 01 d2 01 00       	jmp    c001ebe5 <fatWrapperWriteDisk>

c00019e4 <disk_ioctl>:
c00019e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00019e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00019ed:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019f2:	0f b6 04 85 80 c1 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd3e80]
c00019fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019fe:	e9 29 d2 01 00       	jmp    c001ec2c <fatWrapperIoctl>

c0001a03 <ld_word>:
c0001a03:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a07:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a0a:	c1 e2 08             	shl    edx,0x8
c0001a0d:	09 d0                	or     eax,edx
c0001a0f:	c3                   	ret    

c0001a10 <ld_dword>:
c0001a10:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a14:	89 d1                	mov    ecx,edx
c0001a16:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a1a:	c1 e1 08             	shl    ecx,0x8
c0001a1d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a20:	09 ca                	or     edx,ecx
c0001a22:	c1 e2 08             	shl    edx,0x8
c0001a25:	09 d0                	or     eax,edx
c0001a27:	c3                   	ret    

c0001a28 <ld_qword>:
c0001a28:	57                   	push   edi
c0001a29:	56                   	push   esi
c0001a2a:	53                   	push   ebx
c0001a2b:	31 db                	xor    ebx,ebx
c0001a2d:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a30:	89 df                	mov    edi,ebx
c0001a32:	89 ce                	mov    esi,ecx
c0001a34:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a38:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a3c:	c1 e6 08             	shl    esi,0x8
c0001a3f:	09 f2                	or     edx,esi
c0001a41:	89 d6                	mov    esi,edx
c0001a43:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a47:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a4b:	c1 e6 08             	shl    esi,0x8
c0001a4e:	09 f2                	or     edx,esi
c0001a50:	89 d6                	mov    esi,edx
c0001a52:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a56:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a5a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a5d:	c1 e6 08             	shl    esi,0x8
c0001a60:	89 fb                	mov    ebx,edi
c0001a62:	09 f2                	or     edx,esi
c0001a64:	89 d1                	mov    ecx,edx
c0001a66:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001a6a:	c1 e1 08             	shl    ecx,0x8
c0001a6d:	89 da                	mov    edx,ebx
c0001a6f:	09 c8                	or     eax,ecx
c0001a71:	5b                   	pop    ebx
c0001a72:	5e                   	pop    esi
c0001a73:	5f                   	pop    edi
c0001a74:	c3                   	ret    

c0001a75 <st_word>:
c0001a75:	66 89 10             	mov    WORD PTR [eax],dx
c0001a78:	c3                   	ret    

c0001a79 <st_dword>:
c0001a79:	89 10                	mov    DWORD PTR [eax],edx
c0001a7b:	c3                   	ret    

c0001a7c <st_qword>:
c0001a7c:	89 10                	mov    DWORD PTR [eax],edx
c0001a7e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a81:	c3                   	ret    

c0001a82 <mem_cpy>:
c0001a82:	85 c9                	test   ecx,ecx
c0001a84:	74 10                	je     c0001a96 <mem_cpy+0x14>
c0001a86:	57                   	push   edi
c0001a87:	01 c1                	add    ecx,eax
c0001a89:	56                   	push   esi
c0001a8a:	89 c7                	mov    edi,eax
c0001a8c:	89 d6                	mov    esi,edx
c0001a8e:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a8f:	39 f9                	cmp    ecx,edi
c0001a91:	75 fb                	jne    c0001a8e <mem_cpy+0xc>
c0001a93:	5e                   	pop    esi
c0001a94:	5f                   	pop    edi
c0001a95:	c3                   	ret    
c0001a96:	c3                   	ret    

c0001a97 <mem_set>:
c0001a97:	01 c1                	add    ecx,eax
c0001a99:	40                   	inc    eax
c0001a9a:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a9d:	39 c8                	cmp    eax,ecx
c0001a9f:	75 f8                	jne    c0001a99 <mem_set+0x2>
c0001aa1:	c3                   	ret    

c0001aa2 <mem_cmp>:
c0001aa2:	57                   	push   edi
c0001aa3:	56                   	push   esi
c0001aa4:	89 c6                	mov    esi,eax
c0001aa6:	53                   	push   ebx
c0001aa7:	46                   	inc    esi
c0001aa8:	42                   	inc    edx
c0001aa9:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001aad:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001ab1:	29 fb                	sub    ebx,edi
c0001ab3:	89 cf                	mov    edi,ecx
c0001ab5:	29 f7                	sub    edi,esi
c0001ab7:	01 c7                	add    edi,eax
c0001ab9:	74 04                	je     c0001abf <mem_cmp+0x1d>
c0001abb:	85 db                	test   ebx,ebx
c0001abd:	74 e8                	je     c0001aa7 <mem_cmp+0x5>
c0001abf:	89 d8                	mov    eax,ebx
c0001ac1:	5b                   	pop    ebx
c0001ac2:	5e                   	pop    esi
c0001ac3:	5f                   	pop    edi
c0001ac4:	c3                   	ret    

c0001ac5 <chk_chr>:
c0001ac5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001ac8:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001acb:	74 07                	je     c0001ad4 <chk_chr+0xf>
c0001acd:	39 d1                	cmp    ecx,edx
c0001acf:	74 03                	je     c0001ad4 <chk_chr+0xf>
c0001ad1:	40                   	inc    eax
c0001ad2:	eb f1                	jmp    c0001ac5 <chk_chr>
c0001ad4:	89 c8                	mov    eax,ecx
c0001ad6:	c3                   	ret    

c0001ad7 <dbc_1st>:
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	c3                   	ret    

c0001ada <dbc_2nd>:
c0001ada:	31 c0                	xor    eax,eax
c0001adc:	c3                   	ret    

c0001add <tchar2uni>:
c0001add:	57                   	push   edi
c0001ade:	89 c7                	mov    edi,eax
c0001ae0:	56                   	push   esi
c0001ae1:	53                   	push   ebx
c0001ae2:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001ae4:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001ae6:	8d 73 01             	lea    esi,[ebx+0x1]
c0001ae9:	84 c9                	test   cl,cl
c0001aeb:	78 0a                	js     c0001af7 <tchar2uni+0x1a>
c0001aed:	0f b6 d1             	movzx  edx,cl
c0001af0:	89 f3                	mov    ebx,esi
c0001af2:	e9 9f 00 00 00       	jmp    c0001b96 <tchar2uni+0xb9>
c0001af7:	88 ca                	mov    dl,cl
c0001af9:	83 e2 e0             	and    edx,0xffffffe0
c0001afc:	80 fa c0             	cmp    dl,0xc0
c0001aff:	75 0c                	jne    c0001b0d <tchar2uni+0x30>
c0001b01:	89 ca                	mov    edx,ecx
c0001b03:	b9 01 00 00 00       	mov    ecx,0x1
c0001b08:	83 e2 1f             	and    edx,0x1f
c0001b0b:	eb 2e                	jmp    c0001b3b <tchar2uni+0x5e>
c0001b0d:	88 ca                	mov    dl,cl
c0001b0f:	83 e2 f0             	and    edx,0xfffffff0
c0001b12:	80 fa e0             	cmp    dl,0xe0
c0001b15:	75 0c                	jne    c0001b23 <tchar2uni+0x46>
c0001b17:	89 ca                	mov    edx,ecx
c0001b19:	b9 02 00 00 00       	mov    ecx,0x2
c0001b1e:	83 e2 0f             	and    edx,0xf
c0001b21:	eb 18                	jmp    c0001b3b <tchar2uni+0x5e>
c0001b23:	88 ca                	mov    dl,cl
c0001b25:	83 e2 f8             	and    edx,0xfffffff8
c0001b28:	88 d0                	mov    al,dl
c0001b2a:	83 ca ff             	or     edx,0xffffffff
c0001b2d:	3c f0                	cmp    al,0xf0
c0001b2f:	75 6c                	jne    c0001b9d <tchar2uni+0xc0>
c0001b31:	89 ca                	mov    edx,ecx
c0001b33:	b9 03 00 00 00       	mov    ecx,0x3
c0001b38:	83 e2 07             	and    edx,0x7
c0001b3b:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b3f:	46                   	inc    esi
c0001b40:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b43:	88 c8                	mov    al,cl
c0001b45:	83 e0 c0             	and    eax,0xffffffc0
c0001b48:	3c 80                	cmp    al,0x80
c0001b4a:	75 4e                	jne    c0001b9a <tchar2uni+0xbd>
c0001b4c:	c1 e2 06             	shl    edx,0x6
c0001b4f:	83 e1 3f             	and    ecx,0x3f
c0001b52:	09 ca                	or     edx,ecx
c0001b54:	39 de                	cmp    esi,ebx
c0001b56:	75 e7                	jne    c0001b3f <tchar2uni+0x62>
c0001b58:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001b5b:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001b61:	77 37                	ja     c0001b9a <tchar2uni+0xbd>
c0001b63:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001b69:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b6f:	76 29                	jbe    c0001b9a <tchar2uni+0xbd>
c0001b71:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b77:	76 1d                	jbe    c0001b96 <tchar2uni+0xb9>
c0001b79:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b7f:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b85:	c1 e1 06             	shl    ecx,0x6
c0001b88:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b8e:	09 ca                	or     edx,ecx
c0001b90:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b96:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b98:	eb 03                	jmp    c0001b9d <tchar2uni+0xc0>
c0001b9a:	83 ca ff             	or     edx,0xffffffff
c0001b9d:	5b                   	pop    ebx
c0001b9e:	89 d0                	mov    eax,edx
c0001ba0:	5e                   	pop    esi
c0001ba1:	5f                   	pop    edi
c0001ba2:	c3                   	ret    

c0001ba3 <put_utf>:
c0001ba3:	53                   	push   ebx
c0001ba4:	83 f8 7f             	cmp    eax,0x7f
c0001ba7:	89 c3                	mov    ebx,eax
c0001ba9:	b0 00                	mov    al,0x0
c0001bab:	77 11                	ja     c0001bbe <put_utf+0x1b>
c0001bad:	85 c9                	test   ecx,ecx
c0001baf:	0f 84 e5 00 00 00    	je     c0001c9a <put_utf+0xf7>
c0001bb5:	88 1a                	mov    BYTE PTR [edx],bl
c0001bb7:	b0 01                	mov    al,0x1
c0001bb9:	e9 dc 00 00 00       	jmp    c0001c9a <put_utf+0xf7>
c0001bbe:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001bc4:	77 23                	ja     c0001be9 <put_utf+0x46>
c0001bc6:	83 f9 01             	cmp    ecx,0x1
c0001bc9:	0f 86 cb 00 00 00    	jbe    c0001c9a <put_utf+0xf7>
c0001bcf:	89 d8                	mov    eax,ebx
c0001bd1:	83 e3 3f             	and    ebx,0x3f
c0001bd4:	c1 e8 06             	shr    eax,0x6
c0001bd7:	83 cb 80             	or     ebx,0xffffff80
c0001bda:	83 c8 c0             	or     eax,0xffffffc0
c0001bdd:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001be0:	88 02                	mov    BYTE PTR [edx],al
c0001be2:	b0 02                	mov    al,0x2
c0001be4:	e9 b1 00 00 00       	jmp    c0001c9a <put_utf+0xf7>
c0001be9:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001bef:	77 40                	ja     c0001c31 <put_utf+0x8e>
c0001bf1:	83 f9 02             	cmp    ecx,0x2
c0001bf4:	0f 86 a0 00 00 00    	jbe    c0001c9a <put_utf+0xf7>
c0001bfa:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c00:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c06:	0f 86 8e 00 00 00    	jbe    c0001c9a <put_utf+0xf7>
c0001c0c:	89 d8                	mov    eax,ebx
c0001c0e:	c1 e8 0c             	shr    eax,0xc
c0001c11:	83 c8 e0             	or     eax,0xffffffe0
c0001c14:	88 02                	mov    BYTE PTR [edx],al
c0001c16:	89 d8                	mov    eax,ebx
c0001c18:	83 e3 3f             	and    ebx,0x3f
c0001c1b:	c1 e8 06             	shr    eax,0x6
c0001c1e:	83 cb 80             	or     ebx,0xffffff80
c0001c21:	83 e0 3f             	and    eax,0x3f
c0001c24:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c27:	83 c8 80             	or     eax,0xffffff80
c0001c2a:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c2d:	b0 03                	mov    al,0x3
c0001c2f:	eb 69                	jmp    c0001c9a <put_utf+0xf7>
c0001c31:	83 f9 03             	cmp    ecx,0x3
c0001c34:	76 64                	jbe    c0001c9a <put_utf+0xf7>
c0001c36:	89 d9                	mov    ecx,ebx
c0001c38:	0f b7 c3             	movzx  eax,bx
c0001c3b:	66 31 c9             	xor    cx,cx
c0001c3e:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c44:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c4a:	c1 e9 06             	shr    ecx,0x6
c0001c4d:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c53:	77 43                	ja     c0001c98 <put_utf+0xf5>
c0001c55:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c5b:	77 3b                	ja     c0001c98 <put_utf+0xf5>
c0001c5d:	09 cb                	or     ebx,ecx
c0001c5f:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001c65:	89 d8                	mov    eax,ebx
c0001c67:	c1 e8 12             	shr    eax,0x12
c0001c6a:	83 c8 f0             	or     eax,0xfffffff0
c0001c6d:	88 02                	mov    BYTE PTR [edx],al
c0001c6f:	89 d8                	mov    eax,ebx
c0001c71:	c1 e8 0c             	shr    eax,0xc
c0001c74:	83 e0 3f             	and    eax,0x3f
c0001c77:	83 c8 80             	or     eax,0xffffff80
c0001c7a:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c7d:	89 d8                	mov    eax,ebx
c0001c7f:	83 e3 3f             	and    ebx,0x3f
c0001c82:	c1 e8 06             	shr    eax,0x6
c0001c85:	83 cb 80             	or     ebx,0xffffff80
c0001c88:	83 e0 3f             	and    eax,0x3f
c0001c8b:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c8e:	83 c8 80             	or     eax,0xffffff80
c0001c91:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c94:	b0 04                	mov    al,0x4
c0001c96:	eb 02                	jmp    c0001c9a <put_utf+0xf7>
c0001c98:	31 c0                	xor    eax,eax
c0001c9a:	5b                   	pop    ebx
c0001c9b:	c3                   	ret    

c0001c9c <clst2sect>:
c0001c9c:	89 c1                	mov    ecx,eax
c0001c9e:	83 ea 02             	sub    edx,0x2
c0001ca1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ca4:	83 e8 02             	sub    eax,0x2
c0001ca7:	39 d0                	cmp    eax,edx
c0001ca9:	76 0d                	jbe    c0001cb8 <clst2sect+0x1c>
c0001cab:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001caf:	f7 e2                	mul    edx
c0001cb1:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cb4:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cb7:	c3                   	ret    
c0001cb8:	31 c0                	xor    eax,eax
c0001cba:	31 d2                	xor    edx,edx
c0001cbc:	c3                   	ret    

c0001cbd <clmt_clust>:
c0001cbd:	57                   	push   edi
c0001cbe:	89 cf                	mov    edi,ecx
c0001cc0:	56                   	push   esi
c0001cc1:	89 d6                	mov    esi,edx
c0001cc3:	53                   	push   ebx
c0001cc4:	0f ac fe 09          	shrd   esi,edi,0x9
c0001cc8:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001ccb:	89 f2                	mov    edx,esi
c0001ccd:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ccf:	c1 ef 09             	shr    edi,0x9
c0001cd2:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001cd6:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001cd9:	89 f9                	mov    ecx,edi
c0001cdb:	31 ff                	xor    edi,edi
c0001cdd:	57                   	push   edi
c0001cde:	56                   	push   esi
c0001cdf:	51                   	push   ecx
c0001ce0:	52                   	push   edx
c0001ce1:	e8 c6 1d 02 00       	call   c0023aac <__udivdi3>
c0001ce6:	83 c4 10             	add    esp,0x10
c0001ce9:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001ceb:	85 d2                	test   edx,edx
c0001ced:	74 10                	je     c0001cff <clmt_clust+0x42>
c0001cef:	39 d0                	cmp    eax,edx
c0001cf1:	72 07                	jb     c0001cfa <clmt_clust+0x3d>
c0001cf3:	29 d0                	sub    eax,edx
c0001cf5:	83 c3 08             	add    ebx,0x8
c0001cf8:	eb ef                	jmp    c0001ce9 <clmt_clust+0x2c>
c0001cfa:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001cfd:	89 c2                	mov    edx,eax
c0001cff:	5b                   	pop    ebx
c0001d00:	89 d0                	mov    eax,edx
c0001d02:	5e                   	pop    esi
c0001d03:	5f                   	pop    edi
c0001d04:	c3                   	ret    

c0001d05 <pick_lfn>:
c0001d05:	55                   	push   ebp
c0001d06:	57                   	push   edi
c0001d07:	56                   	push   esi
c0001d08:	89 d6                	mov    esi,edx
c0001d0a:	53                   	push   ebx
c0001d0b:	89 c3                	mov    ebx,eax
c0001d0d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d10:	e8 ee fc ff ff       	call   c0001a03 <ld_word>
c0001d15:	66 85 c0             	test   ax,ax
c0001d18:	74 04                	je     c0001d1e <pick_lfn+0x19>
c0001d1a:	31 c0                	xor    eax,eax
c0001d1c:	eb 5c                	jmp    c0001d7a <pick_lfn+0x75>
c0001d1e:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d21:	bd 01 00 00 00       	mov    ebp,0x1
c0001d26:	83 e1 bf             	and    ecx,0xffffffbf
c0001d29:	31 ff                	xor    edi,edi
c0001d2b:	49                   	dec    ecx
c0001d2c:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d2f:	0f b6 87 40 64 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd9bc0]
c0001d36:	01 f0                	add    eax,esi
c0001d38:	e8 c6 fc ff ff       	call   c0001a03 <ld_word>
c0001d3d:	66 85 ed             	test   bp,bp
c0001d40:	74 11                	je     c0001d53 <pick_lfn+0x4e>
c0001d42:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d48:	77 d0                	ja     c0001d1a <pick_lfn+0x15>
c0001d4a:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d4e:	89 c5                	mov    ebp,eax
c0001d50:	41                   	inc    ecx
c0001d51:	eb 04                	jmp    c0001d57 <pick_lfn+0x52>
c0001d53:	66 40                	inc    ax
c0001d55:	75 c3                	jne    c0001d1a <pick_lfn+0x15>
c0001d57:	47                   	inc    edi
c0001d58:	83 ff 0d             	cmp    edi,0xd
c0001d5b:	75 d2                	jne    c0001d2f <pick_lfn+0x2a>
c0001d5d:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001d60:	74 13                	je     c0001d75 <pick_lfn+0x70>
c0001d62:	66 85 ed             	test   bp,bp
c0001d65:	74 0e                	je     c0001d75 <pick_lfn+0x70>
c0001d67:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d6d:	77 ab                	ja     c0001d1a <pick_lfn+0x15>
c0001d6f:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d75:	b8 01 00 00 00       	mov    eax,0x1
c0001d7a:	5b                   	pop    ebx
c0001d7b:	5e                   	pop    esi
c0001d7c:	5f                   	pop    edi
c0001d7d:	5d                   	pop    ebp
c0001d7e:	c3                   	ret    

c0001d7f <put_lfn>:
c0001d7f:	55                   	push   ebp
c0001d80:	31 ed                	xor    ebp,ebp
c0001d82:	57                   	push   edi
c0001d83:	89 d7                	mov    edi,edx
c0001d85:	56                   	push   esi
c0001d86:	31 f6                	xor    esi,esi
c0001d88:	53                   	push   ebx
c0001d89:	83 ec 08             	sub    esp,0x8
c0001d8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d8f:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d97:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d9d:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001da0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001da3:	31 d2                	xor    edx,edx
c0001da5:	e8 cb fc ff ff       	call   c0001a75 <st_word>
c0001daa:	0f b6 d9             	movzx  ebx,cl
c0001dad:	4b                   	dec    ebx
c0001dae:	6b db 0d             	imul   ebx,ebx,0xd
c0001db1:	66 83 fe ff          	cmp    si,0xffff
c0001db5:	74 08                	je     c0001dbf <put_lfn+0x40>
c0001db7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001dba:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001dbe:	43                   	inc    ebx
c0001dbf:	0f b6 85 40 64 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd9bc0]
c0001dc6:	0f b7 d6             	movzx  edx,si
c0001dc9:	01 f8                	add    eax,edi
c0001dcb:	e8 a5 fc ff ff       	call   c0001a75 <st_word>
c0001dd0:	66 85 f6             	test   si,si
c0001dd3:	75 03                	jne    c0001dd8 <put_lfn+0x59>
c0001dd5:	83 ce ff             	or     esi,0xffffffff
c0001dd8:	45                   	inc    ebp
c0001dd9:	83 fd 0d             	cmp    ebp,0xd
c0001ddc:	75 d3                	jne    c0001db1 <put_lfn+0x32>
c0001dde:	66 46                	inc    si
c0001de0:	74 0a                	je     c0001dec <put_lfn+0x6d>
c0001de2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001de5:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001dea:	75 09                	jne    c0001df5 <put_lfn+0x76>
c0001dec:	88 c8                	mov    al,cl
c0001dee:	83 c8 40             	or     eax,0x40
c0001df1:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001df5:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001df9:	88 07                	mov    BYTE PTR [edi],al
c0001dfb:	83 c4 08             	add    esp,0x8
c0001dfe:	5b                   	pop    ebx
c0001dff:	5e                   	pop    esi
c0001e00:	5f                   	pop    edi
c0001e01:	5d                   	pop    ebp
c0001e02:	c3                   	ret    

c0001e03 <gen_numname>:
c0001e03:	57                   	push   edi
c0001e04:	89 cf                	mov    edi,ecx
c0001e06:	56                   	push   esi
c0001e07:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e0c:	53                   	push   ebx
c0001e0d:	89 c6                	mov    esi,eax
c0001e0f:	83 ec 10             	sub    esp,0x10
c0001e12:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e16:	e8 67 fc ff ff       	call   c0001a82 <mem_cpy>
c0001e1b:	83 fb 05             	cmp    ebx,0x5
c0001e1e:	76 2d                	jbe    c0001e4d <gen_numname+0x4a>
c0001e20:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e23:	66 85 c0             	test   ax,ax
c0001e26:	74 25                	je     c0001e4d <gen_numname+0x4a>
c0001e28:	83 c7 02             	add    edi,0x2
c0001e2b:	ba 10 00 00 00       	mov    edx,0x10
c0001e30:	01 db                	add    ebx,ebx
c0001e32:	89 c1                	mov    ecx,eax
c0001e34:	66 d1 e8             	shr    ax,1
c0001e37:	83 e1 01             	and    ecx,0x1
c0001e3a:	01 cb                	add    ebx,ecx
c0001e3c:	0f ba e3 10          	bt     ebx,0x10
c0001e40:	73 06                	jae    c0001e48 <gen_numname+0x45>
c0001e42:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e48:	4a                   	dec    edx
c0001e49:	75 e5                	jne    c0001e30 <gen_numname+0x2d>
c0001e4b:	eb d3                	jmp    c0001e20 <gen_numname+0x1d>
c0001e4d:	b8 07 00 00 00       	mov    eax,0x7
c0001e52:	88 d9                	mov    cl,bl
c0001e54:	83 e1 0f             	and    ecx,0xf
c0001e57:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e5a:	80 fa 39             	cmp    dl,0x39
c0001e5d:	76 03                	jbe    c0001e62 <gen_numname+0x5f>
c0001e5f:	8d 51 37             	lea    edx,[ecx+0x37]
c0001e62:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001e65:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001e69:	89 da                	mov    edx,ebx
c0001e6b:	c1 ea 04             	shr    edx,0x4
c0001e6e:	83 fb 0f             	cmp    ebx,0xf
c0001e71:	76 06                	jbe    c0001e79 <gen_numname+0x76>
c0001e73:	89 c8                	mov    eax,ecx
c0001e75:	89 d3                	mov    ebx,edx
c0001e77:	eb d9                	jmp    c0001e52 <gen_numname+0x4f>
c0001e79:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e7e:	31 d2                	xor    edx,edx
c0001e80:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e83:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e86:	39 ca                	cmp    edx,ecx
c0001e88:	73 18                	jae    c0001ea2 <gen_numname+0x9f>
c0001e8a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e8d:	3c 20                	cmp    al,0x20
c0001e8f:	74 11                	je     c0001ea2 <gen_numname+0x9f>
c0001e91:	e8 41 fc ff ff       	call   c0001ad7 <dbc_1st>
c0001e96:	85 c0                	test   eax,eax
c0001e98:	74 05                	je     c0001e9f <gen_numname+0x9c>
c0001e9a:	39 d3                	cmp    ebx,edx
c0001e9c:	74 04                	je     c0001ea2 <gen_numname+0x9f>
c0001e9e:	42                   	inc    edx
c0001e9f:	42                   	inc    edx
c0001ea0:	eb e1                	jmp    c0001e83 <gen_numname+0x80>
c0001ea2:	b0 20                	mov    al,0x20
c0001ea4:	83 f9 07             	cmp    ecx,0x7
c0001ea7:	77 05                	ja     c0001eae <gen_numname+0xab>
c0001ea9:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ead:	41                   	inc    ecx
c0001eae:	42                   	inc    edx
c0001eaf:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001eb3:	83 fa 07             	cmp    edx,0x7
c0001eb6:	76 ea                	jbe    c0001ea2 <gen_numname+0x9f>
c0001eb8:	83 c4 10             	add    esp,0x10
c0001ebb:	5b                   	pop    ebx
c0001ebc:	5e                   	pop    esi
c0001ebd:	5f                   	pop    edi
c0001ebe:	c3                   	ret    

c0001ebf <sum_sfn>:
c0001ebf:	31 c9                	xor    ecx,ecx
c0001ec1:	31 d2                	xor    edx,edx
c0001ec3:	d0 ca                	ror    dl,1
c0001ec5:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001ec8:	41                   	inc    ecx
c0001ec9:	83 f9 0b             	cmp    ecx,0xb
c0001ecc:	75 f5                	jne    c0001ec3 <sum_sfn+0x4>
c0001ece:	88 d0                	mov    al,dl
c0001ed0:	c3                   	ret    

c0001ed1 <xdir_sum>:
c0001ed1:	56                   	push   esi
c0001ed2:	31 c9                	xor    ecx,ecx
c0001ed4:	53                   	push   ebx
c0001ed5:	31 d2                	xor    edx,edx
c0001ed7:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001edb:	43                   	inc    ebx
c0001edc:	c1 e3 05             	shl    ebx,0x5
c0001edf:	83 fa 02             	cmp    edx,0x2
c0001ee2:	74 0b                	je     c0001eef <xdir_sum+0x1e>
c0001ee4:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001ee8:	66 d1 c9             	ror    cx,1
c0001eeb:	01 f1                	add    ecx,esi
c0001eed:	eb 05                	jmp    c0001ef4 <xdir_sum+0x23>
c0001eef:	ba 03 00 00 00       	mov    edx,0x3
c0001ef4:	42                   	inc    edx
c0001ef5:	39 d3                	cmp    ebx,edx
c0001ef7:	77 e6                	ja     c0001edf <xdir_sum+0xe>
c0001ef9:	89 c8                	mov    eax,ecx
c0001efb:	5b                   	pop    ebx
c0001efc:	5e                   	pop    esi
c0001efd:	c3                   	ret    

c0001efe <xsum32>:
c0001efe:	d1 ca                	ror    edx,1
c0001f00:	0f b6 c0             	movzx  eax,al
c0001f03:	01 d0                	add    eax,edx
c0001f05:	c3                   	ret    

c0001f06 <get_xfileinfo>:
c0001f06:	55                   	push   ebp
c0001f07:	31 c9                	xor    ecx,ecx
c0001f09:	57                   	push   edi
c0001f0a:	bd 40 00 00 00       	mov    ebp,0x40
c0001f0f:	56                   	push   esi
c0001f10:	31 ff                	xor    edi,edi
c0001f12:	53                   	push   ebx
c0001f13:	89 c6                	mov    esi,eax
c0001f15:	83 ec 0c             	sub    esp,0xc
c0001f18:	89 d3                	mov    ebx,edx
c0001f1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f21:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f25:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f28:	76 6d                	jbe    c0001f97 <get_xfileinfo+0x91>
c0001f2a:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f30:	76 0b                	jbe    c0001f3d <get_xfileinfo+0x37>
c0001f32:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f36:	bf 01 00 00 00       	mov    edi,0x1
c0001f3b:	eb 63                	jmp    c0001fa0 <get_xfileinfo+0x9a>
c0001f3d:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f43:	75 03                	jne    c0001f48 <get_xfileinfo+0x42>
c0001f45:	83 c5 02             	add    ebp,0x2
c0001f48:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f4b:	83 c5 02             	add    ebp,0x2
c0001f4e:	e8 b0 fa ff ff       	call   c0001a03 <ld_word>
c0001f53:	ff 04 24             	inc    DWORD PTR [esp]
c0001f56:	66 85 c9             	test   cx,cx
c0001f59:	75 0d                	jne    c0001f68 <get_xfileinfo+0x62>
c0001f5b:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001f61:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001f66:	76 2b                	jbe    c0001f93 <get_xfileinfo+0x8d>
c0001f68:	c1 e1 10             	shl    ecx,0x10
c0001f6b:	ba ff 00 00 00       	mov    edx,0xff
c0001f70:	0f b7 c0             	movzx  eax,ax
c0001f73:	29 fa                	sub    edx,edi
c0001f75:	09 c8                	or     eax,ecx
c0001f77:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f7b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f7f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f83:	e8 1b fc ff ff       	call   c0001ba3 <put_utf>
c0001f88:	84 c0                	test   al,al
c0001f8a:	74 a6                	je     c0001f32 <get_xfileinfo+0x2c>
c0001f8c:	0f b6 c0             	movzx  eax,al
c0001f8f:	01 c7                	add    edi,eax
c0001f91:	31 c0                	xor    eax,eax
c0001f93:	89 c1                	mov    ecx,eax
c0001f95:	eb 8a                	jmp    c0001f21 <get_xfileinfo+0x1b>
c0001f97:	85 ff                	test   edi,edi
c0001f99:	74 97                	je     c0001f32 <get_xfileinfo+0x2c>
c0001f9b:	66 85 c9             	test   cx,cx
c0001f9e:	75 92                	jne    c0001f32 <get_xfileinfo+0x2c>
c0001fa0:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fa5:	31 c0                	xor    eax,eax
c0001fa7:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001fab:	31 d2                	xor    edx,edx
c0001fad:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fb0:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001fb3:	80 e1 10             	and    cl,0x10
c0001fb6:	75 08                	jne    c0001fc0 <get_xfileinfo+0xba>
c0001fb8:	8d 46 38             	lea    eax,[esi+0x38]
c0001fbb:	e8 68 fa ff ff       	call   c0001a28 <ld_qword>
c0001fc0:	89 03                	mov    DWORD PTR [ebx],eax
c0001fc2:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001fc5:	8d 46 0c             	lea    eax,[esi+0xc]
c0001fc8:	e8 36 fa ff ff       	call   c0001a03 <ld_word>
c0001fcd:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001fd1:	8d 46 0e             	lea    eax,[esi+0xe]
c0001fd4:	e8 2a fa ff ff       	call   c0001a03 <ld_word>
c0001fd9:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001fdd:	83 c4 0c             	add    esp,0xc
c0001fe0:	5b                   	pop    ebx
c0001fe1:	5e                   	pop    esi
c0001fe2:	5f                   	pop    edi
c0001fe3:	5d                   	pop    ebp
c0001fe4:	c3                   	ret    

c0001fe5 <get_ldnumber>:
c0001fe5:	8b 10                	mov    edx,DWORD PTR [eax]
c0001fe7:	85 d2                	test   edx,edx
c0001fe9:	74 14                	je     c0001fff <get_ldnumber+0x1a>
c0001feb:	56                   	push   esi
c0001fec:	53                   	push   ebx
c0001fed:	89 d3                	mov    ebx,edx
c0001fef:	43                   	inc    ebx
c0001ff0:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001ff3:	80 f9 1f             	cmp    cl,0x1f
c0001ff6:	76 0d                	jbe    c0002005 <get_ldnumber+0x20>
c0001ff8:	80 f9 3a             	cmp    cl,0x3a
c0001ffb:	75 f2                	jne    c0001fef <get_ldnumber+0xa>
c0001ffd:	eb 0a                	jmp    c0002009 <get_ldnumber+0x24>
c0001fff:	83 c9 ff             	or     ecx,0xffffffff
c0002002:	89 c8                	mov    eax,ecx
c0002004:	c3                   	ret    
c0002005:	31 c9                	xor    ecx,ecx
c0002007:	eb 24                	jmp    c000202d <get_ldnumber+0x48>
c0002009:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000200c:	8d 4e d0             	lea    ecx,[esi-0x30]
c000200f:	80 f9 09             	cmp    cl,0x9
c0002012:	77 16                	ja     c000202a <get_ldnumber+0x45>
c0002014:	83 c2 02             	add    edx,0x2
c0002017:	83 c9 ff             	or     ecx,0xffffffff
c000201a:	39 d3                	cmp    ebx,edx
c000201c:	75 0f                	jne    c000202d <get_ldnumber+0x48>
c000201e:	89 f2                	mov    edx,esi
c0002020:	89 18                	mov    DWORD PTR [eax],ebx
c0002022:	0f be ca             	movsx  ecx,dl
c0002025:	83 e9 30             	sub    ecx,0x30
c0002028:	eb 03                	jmp    c000202d <get_ldnumber+0x48>
c000202a:	83 c9 ff             	or     ecx,0xffffffff
c000202d:	89 c8                	mov    eax,ecx
c000202f:	5b                   	pop    ebx
c0002030:	5e                   	pop    esi
c0002031:	c3                   	ret    

c0002032 <crc32>:
c0002032:	56                   	push   esi
c0002033:	89 d6                	mov    esi,edx
c0002035:	53                   	push   ebx
c0002036:	b2 01                	mov    dl,0x1
c0002038:	bb 08 00 00 00       	mov    ebx,0x8
c000203d:	89 f1                	mov    ecx,esi
c000203f:	84 d1                	test   cl,dl
c0002041:	0f 95 c1             	setne  cl
c0002044:	0f b6 c9             	movzx  ecx,cl
c0002047:	31 c1                	xor    ecx,eax
c0002049:	89 c8                	mov    eax,ecx
c000204b:	d1 e8                	shr    eax,1
c000204d:	80 e1 01             	and    cl,0x1
c0002050:	74 05                	je     c0002057 <crc32+0x25>
c0002052:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002057:	d1 e2                	shl    edx,1
c0002059:	4b                   	dec    ebx
c000205a:	75 e1                	jne    c000203d <crc32+0xb>
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	c3                   	ret    

c000205f <test_gpt_header>:
c000205f:	55                   	push   ebp
c0002060:	b9 10 00 00 00       	mov    ecx,0x10
c0002065:	57                   	push   edi
c0002066:	ba 40 63 02 c0       	mov    edx,0xc0026340
c000206b:	56                   	push   esi
c000206c:	31 ff                	xor    edi,edi
c000206e:	53                   	push   ebx
c000206f:	89 c3                	mov    ebx,eax
c0002071:	e8 2c fa ff ff       	call   c0001aa2 <mem_cmp>
c0002076:	85 c0                	test   eax,eax
c0002078:	75 55                	jne    c00020cf <test_gpt_header+0x70>
c000207a:	89 c7                	mov    edi,eax
c000207c:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c0002081:	83 ce ff             	or     esi,0xffffffff
c0002084:	31 d2                	xor    edx,edx
c0002086:	83 fd 03             	cmp    ebp,0x3
c0002089:	76 05                	jbe    c0002090 <test_gpt_header+0x31>
c000208b:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c0002090:	89 f0                	mov    eax,esi
c0002092:	45                   	inc    ebp
c0002093:	e8 9a ff ff ff       	call   c0002032 <crc32>
c0002098:	83 fd 4c             	cmp    ebp,0x4c
c000209b:	89 c6                	mov    esi,eax
c000209d:	75 e5                	jne    c0002084 <test_gpt_header+0x25>
c000209f:	8d 43 10             	lea    eax,[ebx+0x10]
c00020a2:	f7 d6                	not    esi
c00020a4:	e8 67 f9 ff ff       	call   c0001a10 <ld_dword>
c00020a9:	39 c6                	cmp    esi,eax
c00020ab:	75 22                	jne    c00020cf <test_gpt_header+0x70>
c00020ad:	8d 43 54             	lea    eax,[ebx+0x54]
c00020b0:	e8 5b f9 ff ff       	call   c0001a10 <ld_dword>
c00020b5:	83 c0 80             	add    eax,0xffffff80
c00020b8:	75 15                	jne    c00020cf <test_gpt_header+0x70>
c00020ba:	8d 43 50             	lea    eax,[ebx+0x50]
c00020bd:	e8 4e f9 ff ff       	call   c0001a10 <ld_dword>
c00020c2:	3d 80 00 00 00       	cmp    eax,0x80
c00020c7:	0f 96 c0             	setbe  al
c00020ca:	0f b6 c0             	movzx  eax,al
c00020cd:	89 c7                	mov    edi,eax
c00020cf:	5b                   	pop    ebx
c00020d0:	89 f8                	mov    eax,edi
c00020d2:	5e                   	pop    esi
c00020d3:	5f                   	pop    edi
c00020d4:	5d                   	pop    ebp
c00020d5:	c3                   	ret    

c00020d6 <make_rand>:
c00020d6:	56                   	push   esi
c00020d7:	85 c0                	test   eax,eax
c00020d9:	53                   	push   ebx
c00020da:	75 05                	jne    c00020e1 <make_rand+0xb>
c00020dc:	b8 01 00 00 00       	mov    eax,0x1
c00020e1:	01 d1                	add    ecx,edx
c00020e3:	bb 08 00 00 00       	mov    ebx,0x8
c00020e8:	89 c6                	mov    esi,eax
c00020ea:	d1 e8                	shr    eax,1
c00020ec:	83 e6 01             	and    esi,0x1
c00020ef:	85 f6                	test   esi,esi
c00020f1:	74 05                	je     c00020f8 <make_rand+0x22>
c00020f3:	35 00 00 00 a3       	xor    eax,0xa3000000
c00020f8:	4b                   	dec    ebx
c00020f9:	75 ed                	jne    c00020e8 <make_rand+0x12>
c00020fb:	42                   	inc    edx
c00020fc:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c00020ff:	39 ca                	cmp    edx,ecx
c0002101:	75 e0                	jne    c00020e3 <make_rand+0xd>
c0002103:	5b                   	pop    ebx
c0002104:	5e                   	pop    esi
c0002105:	c3                   	ret    

c0002106 <validate>:
c0002106:	56                   	push   esi
c0002107:	53                   	push   ebx
c0002108:	89 d6                	mov    esi,edx
c000210a:	51                   	push   ecx
c000210b:	85 c0                	test   eax,eax
c000210d:	75 09                	jne    c0002118 <validate+0x12>
c000210f:	b8 09 00 00 00       	mov    eax,0x9
c0002114:	31 c9                	xor    ecx,ecx
c0002116:	eb 2f                	jmp    c0002147 <validate+0x41>
c0002118:	89 c3                	mov    ebx,eax
c000211a:	8b 00                	mov    eax,DWORD PTR [eax]
c000211c:	85 c0                	test   eax,eax
c000211e:	74 ef                	je     c000210f <validate+0x9>
c0002120:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002123:	74 ea                	je     c000210f <validate+0x9>
c0002125:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002129:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000212d:	75 e0                	jne    c000210f <validate+0x9>
c000212f:	83 ec 0c             	sub    esp,0xc
c0002132:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002136:	50                   	push   eax
c0002137:	e8 76 f8 ff ff       	call   c00019b2 <disk_status>
c000213c:	83 c4 10             	add    esp,0x10
c000213f:	a8 01                	test   al,0x1
c0002141:	75 cc                	jne    c000210f <validate+0x9>
c0002143:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002145:	31 c0                	xor    eax,eax
c0002147:	89 0e                	mov    DWORD PTR [esi],ecx
c0002149:	5a                   	pop    edx
c000214a:	5b                   	pop    ebx
c000214b:	5e                   	pop    esi
c000214c:	c3                   	ret    

c000214d <sync_window>:
c000214d:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002151:	0f 84 85 00 00 00    	je     c00021dc <sync_window+0x8f>
c0002157:	55                   	push   ebp
c0002158:	8d 68 54             	lea    ebp,[eax+0x54]
c000215b:	57                   	push   edi
c000215c:	56                   	push   esi
c000215d:	53                   	push   ebx
c000215e:	89 c3                	mov    ebx,eax
c0002160:	83 ec 28             	sub    esp,0x28
c0002163:	6a 01                	push   0x1
c0002165:	ff 70 50             	push   DWORD PTR [eax+0x50]
c0002168:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000216b:	55                   	push   ebp
c000216c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002170:	50                   	push   eax
c0002171:	e8 58 f8 ff ff       	call   c00019ce <disk_write>
c0002176:	83 c4 20             	add    esp,0x20
c0002179:	ba 01 00 00 00       	mov    edx,0x1
c000217e:	85 c0                	test   eax,eax
c0002180:	75 50                	jne    c00021d2 <sync_window+0x85>
c0002182:	31 ff                	xor    edi,edi
c0002184:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002187:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000218b:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000218f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0002192:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002195:	89 c6                	mov    esi,eax
c0002197:	89 d7                	mov    edi,edx
c0002199:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c000219c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021a0:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021a3:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021a7:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021ab:	73 23                	jae    c00021d0 <sync_window+0x83>
c00021ad:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021b1:	75 1d                	jne    c00021d0 <sync_window+0x83>
c00021b3:	83 ec 0c             	sub    esp,0xc
c00021b6:	6a 01                	push   0x1
c00021b8:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021bc:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021c0:	52                   	push   edx
c00021c1:	50                   	push   eax
c00021c2:	55                   	push   ebp
c00021c3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021c7:	50                   	push   eax
c00021c8:	e8 01 f8 ff ff       	call   c00019ce <disk_write>
c00021cd:	83 c4 20             	add    esp,0x20
c00021d0:	31 d2                	xor    edx,edx
c00021d2:	83 c4 1c             	add    esp,0x1c
c00021d5:	89 d0                	mov    eax,edx
c00021d7:	5b                   	pop    ebx
c00021d8:	5e                   	pop    esi
c00021d9:	5f                   	pop    edi
c00021da:	5d                   	pop    ebp
c00021db:	c3                   	ret    
c00021dc:	31 d2                	xor    edx,edx
c00021de:	89 d0                	mov    eax,edx
c00021e0:	c3                   	ret    

c00021e1 <move_window>:
c00021e1:	56                   	push   esi
c00021e2:	53                   	push   ebx
c00021e3:	89 c3                	mov    ebx,eax
c00021e5:	83 ec 14             	sub    esp,0x14
c00021e8:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c00021eb:	75 07                	jne    c00021f4 <move_window+0x13>
c00021ed:	31 f6                	xor    esi,esi
c00021ef:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c00021f2:	74 59                	je     c000224d <move_window+0x6c>
c00021f4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00021f8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00021fc:	89 d8                	mov    eax,ebx
c00021fe:	e8 4a ff ff ff       	call   c000214d <sync_window>
c0002203:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002207:	89 c6                	mov    esi,eax
c0002209:	85 c0                	test   eax,eax
c000220b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000220f:	75 3c                	jne    c000224d <move_window+0x6c>
c0002211:	83 ec 0c             	sub    esp,0xc
c0002214:	8d 43 54             	lea    eax,[ebx+0x54]
c0002217:	6a 01                	push   0x1
c0002219:	51                   	push   ecx
c000221a:	52                   	push   edx
c000221b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000221f:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002223:	50                   	push   eax
c0002224:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002228:	50                   	push   eax
c0002229:	e8 8a f7 ff ff       	call   c00019b8 <disk_read>
c000222e:	83 c4 20             	add    esp,0x20
c0002231:	85 c0                	test   eax,eax
c0002233:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002237:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000223b:	74 0a                	je     c0002247 <move_window+0x66>
c000223d:	83 ca ff             	or     edx,0xffffffff
c0002240:	be 01 00 00 00       	mov    esi,0x1
c0002245:	89 d1                	mov    ecx,edx
c0002247:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000224a:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000224d:	89 f0                	mov    eax,esi
c000224f:	83 c4 14             	add    esp,0x14
c0002252:	5b                   	pop    ebx
c0002253:	5e                   	pop    esi
c0002254:	c3                   	ret    

c0002255 <check_fs>:
c0002255:	53                   	push   ebx
c0002256:	89 c3                	mov    ebx,eax
c0002258:	83 ec 08             	sub    esp,0x8
c000225b:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000225f:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c0002266:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c000226d:	e8 6f ff ff ff       	call   c00021e1 <move_window>
c0002272:	ba 04 00 00 00       	mov    edx,0x4
c0002277:	85 c0                	test   eax,eax
c0002279:	0f 85 89 00 00 00    	jne    c0002308 <check_fs+0xb3>
c000227f:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002285:	e8 79 f7 ff ff       	call   c0001a03 <ld_word>
c000228a:	ba 03 00 00 00       	mov    edx,0x3
c000228f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002293:	75 73                	jne    c0002308 <check_fs+0xb3>
c0002295:	ba 60 64 02 c0       	mov    edx,0xc0026460
c000229a:	8d 43 54             	lea    eax,[ebx+0x54]
c000229d:	b9 0b 00 00 00       	mov    ecx,0xb
c00022a2:	e8 fb f7 ff ff       	call   c0001aa2 <mem_cmp>
c00022a7:	ba 01 00 00 00       	mov    edx,0x1
c00022ac:	85 c0                	test   eax,eax
c00022ae:	74 58                	je     c0002308 <check_fs+0xb3>
c00022b0:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022b3:	8d 50 18             	lea    edx,[eax+0x18]
c00022b6:	80 fa 01             	cmp    dl,0x1
c00022b9:	76 09                	jbe    c00022c4 <check_fs+0x6f>
c00022bb:	ba 02 00 00 00       	mov    edx,0x2
c00022c0:	3c eb                	cmp    al,0xeb
c00022c2:	75 44                	jne    c0002308 <check_fs+0xb3>
c00022c4:	ba f8 91 02 c0       	mov    edx,0xc00291f8
c00022c9:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00022cf:	b9 03 00 00 00       	mov    ecx,0x3
c00022d4:	e8 c9 f7 ff ff       	call   c0001aa2 <mem_cmp>
c00022d9:	31 d2                	xor    edx,edx
c00022db:	85 c0                	test   eax,eax
c00022dd:	74 29                	je     c0002308 <check_fs+0xb3>
c00022df:	ba 6c 64 02 c0       	mov    edx,0xc002646c
c00022e4:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c00022ea:	b9 05 00 00 00       	mov    ecx,0x5
c00022ef:	e8 ae f7 ff ff       	call   c0001aa2 <mem_cmp>
c00022f4:	31 d2                	xor    edx,edx
c00022f6:	85 c0                	test   eax,eax
c00022f8:	74 0e                	je     c0002308 <check_fs+0xb3>
c00022fa:	31 d2                	xor    edx,edx
c00022fc:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002303:	0f 95 c2             	setne  dl
c0002306:	01 d2                	add    edx,edx
c0002308:	89 d0                	mov    eax,edx
c000230a:	83 c4 08             	add    esp,0x8
c000230d:	5b                   	pop    ebx
c000230e:	c3                   	ret    

c000230f <find_volume>:
c000230f:	55                   	push   ebp
c0002310:	31 c9                	xor    ecx,ecx
c0002312:	57                   	push   edi
c0002313:	56                   	push   esi
c0002314:	89 d6                	mov    esi,edx
c0002316:	53                   	push   ebx
c0002317:	31 d2                	xor    edx,edx
c0002319:	83 ec 3c             	sub    esp,0x3c
c000231c:	89 c3                	mov    ebx,eax
c000231e:	e8 32 ff ff ff       	call   c0002255 <check_fs>
c0002323:	83 f8 02             	cmp    eax,0x2
c0002326:	74 0e                	je     c0002336 <find_volume+0x27>
c0002328:	0f 87 5d 01 00 00    	ja     c000248b <find_volume+0x17c>
c000232e:	85 f6                	test   esi,esi
c0002330:	0f 84 55 01 00 00    	je     c000248b <find_volume+0x17c>
c0002336:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000233d:	0f 85 dd 00 00 00    	jne    c0002420 <find_volume+0x111>
c0002343:	31 c9                	xor    ecx,ecx
c0002345:	ba 01 00 00 00       	mov    edx,0x1
c000234a:	89 d8                	mov    eax,ebx
c000234c:	e8 90 fe ff ff       	call   c00021e1 <move_window>
c0002351:	85 c0                	test   eax,eax
c0002353:	74 0a                	je     c000235f <find_volume+0x50>
c0002355:	b8 04 00 00 00       	mov    eax,0x4
c000235a:	e9 2c 01 00 00       	jmp    c000248b <find_volume+0x17c>
c000235f:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002362:	89 e8                	mov    eax,ebp
c0002364:	e8 f6 fc ff ff       	call   c000205f <test_gpt_header>
c0002369:	85 c0                	test   eax,eax
c000236b:	75 0a                	jne    c0002377 <find_volume+0x68>
c000236d:	b8 03 00 00 00       	mov    eax,0x3
c0002372:	e9 14 01 00 00       	jmp    c000248b <find_volume+0x17c>
c0002377:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c000237d:	e8 8e f6 ff ff       	call   c0001a10 <ld_dword>
c0002382:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002386:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c000238c:	e8 97 f6 ff ff       	call   c0001a28 <ld_qword>
c0002391:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002399:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000239d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023a1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023a9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023ad:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023b1:	74 ba                	je     c000236d <find_volume+0x5e>
c00023b3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023b7:	31 c9                	xor    ecx,ecx
c00023b9:	c1 e7 07             	shl    edi,0x7
c00023bc:	89 d8                	mov    eax,ebx
c00023be:	89 fa                	mov    edx,edi
c00023c0:	c1 ea 09             	shr    edx,0x9
c00023c3:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00023c7:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00023cb:	e8 11 fe ff ff       	call   c00021e1 <move_window>
c00023d0:	85 c0                	test   eax,eax
c00023d2:	75 81                	jne    c0002355 <find_volume+0x46>
c00023d4:	81 e7 80 01 00 00    	and    edi,0x180
c00023da:	b9 10 00 00 00       	mov    ecx,0x10
c00023df:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c00023e3:	ba 50 64 02 c0       	mov    edx,0xc0026450
c00023e8:	e8 b5 f6 ff ff       	call   c0001aa2 <mem_cmp>
c00023ed:	85 c0                	test   eax,eax
c00023ef:	75 29                	jne    c000241a <find_volume+0x10b>
c00023f1:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00023f5:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c00023f9:	e8 2a f6 ff ff       	call   c0001a28 <ld_qword>
c00023fe:	89 d1                	mov    ecx,edx
c0002400:	89 c2                	mov    edx,eax
c0002402:	89 d8                	mov    eax,ebx
c0002404:	e8 4c fe ff ff       	call   c0002255 <check_fs>
c0002409:	85 f6                	test   esi,esi
c000240b:	75 07                	jne    c0002414 <find_volume+0x105>
c000240d:	83 f8 01             	cmp    eax,0x1
c0002410:	77 08                	ja     c000241a <find_volume+0x10b>
c0002412:	eb 77                	jmp    c000248b <find_volume+0x17c>
c0002414:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002418:	74 71                	je     c000248b <find_volume+0x17c>
c000241a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000241e:	eb 89                	jmp    c00023a9 <find_volume+0x9a>
c0002420:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002424:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000242a:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002430:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002434:	89 cd                	mov    ebp,ecx
c0002436:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000243a:	89 f8                	mov    eax,edi
c000243c:	83 c7 10             	add    edi,0x10
c000243f:	e8 cc f5 ff ff       	call   c0001a10 <ld_dword>
c0002444:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002448:	89 01                	mov    DWORD PTR [ecx],eax
c000244a:	83 c1 04             	add    ecx,0x4
c000244d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002451:	75 e3                	jne    c0002436 <find_volume+0x127>
c0002453:	31 ff                	xor    edi,edi
c0002455:	85 f6                	test   esi,esi
c0002457:	74 03                	je     c000245c <find_volume+0x14d>
c0002459:	8d 7e ff             	lea    edi,[esi-0x1]
c000245c:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002460:	85 d2                	test   edx,edx
c0002462:	74 14                	je     c0002478 <find_volume+0x169>
c0002464:	31 c9                	xor    ecx,ecx
c0002466:	89 d8                	mov    eax,ebx
c0002468:	e8 e8 fd ff ff       	call   c0002255 <check_fs>
c000246d:	83 f8 01             	cmp    eax,0x1
c0002470:	76 19                	jbe    c000248b <find_volume+0x17c>
c0002472:	85 f6                	test   esi,esi
c0002474:	74 0f                	je     c0002485 <find_volume+0x176>
c0002476:	eb 13                	jmp    c000248b <find_volume+0x17c>
c0002478:	85 f6                	test   esi,esi
c000247a:	0f 85 ed fe ff ff    	jne    c000236d <find_volume+0x5e>
c0002480:	b8 03 00 00 00       	mov    eax,0x3
c0002485:	47                   	inc    edi
c0002486:	83 ff 03             	cmp    edi,0x3
c0002489:	76 d1                	jbe    c000245c <find_volume+0x14d>
c000248b:	83 c4 3c             	add    esp,0x3c
c000248e:	5b                   	pop    ebx
c000248f:	5e                   	pop    esi
c0002490:	5f                   	pop    edi
c0002491:	5d                   	pop    ebp
c0002492:	c3                   	ret    

c0002493 <mount_volume>:
c0002493:	55                   	push   ebp
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 3c             	sub    esp,0x3c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024ab:	e8 35 fb ff ff       	call   c0001fe5 <get_ldnumber>
c00024b0:	85 c0                	test   eax,eax
c00024b2:	0f 88 3a 05 00 00    	js     c00029f2 <mount_volume+0x55f>
c00024b8:	8b 2c 85 e0 aa 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd5520]
c00024bf:	89 c6                	mov    esi,eax
c00024c1:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c6:	85 ed                	test   ebp,ebp
c00024c8:	0f 84 24 05 00 00    	je     c00029f2 <mount_volume+0x55f>
c00024ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024d2:	83 e7 fe             	and    edi,0xfffffffe
c00024d5:	89 2a                	mov    DWORD PTR [edx],ebp
c00024d7:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00024db:	74 32                	je     c000250f <mount_volume+0x7c>
c00024dd:	83 ec 0c             	sub    esp,0xc
c00024e0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00024e4:	50                   	push   eax
c00024e5:	e8 c8 f4 ff ff       	call   c00019b2 <disk_status>
c00024ea:	83 c4 10             	add    esp,0x10
c00024ed:	a8 01                	test   al,0x1
c00024ef:	75 1e                	jne    c000250f <mount_volume+0x7c>
c00024f1:	31 db                	xor    ebx,ebx
c00024f3:	89 f9                	mov    ecx,edi
c00024f5:	84 c9                	test   cl,cl
c00024f7:	0f 84 f5 04 00 00    	je     c00029f2 <mount_volume+0x55f>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 ed 04 00 00    	je     c00029f2 <mount_volume+0x55f>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 e3 04 00 00       	jmp    c00029f2 <mount_volume+0x55f>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	89 f0                	mov    eax,esi
c0002514:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002518:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000251b:	0f b6 f0             	movzx  esi,al
c000251e:	bb 03 00 00 00       	mov    ebx,0x3
c0002523:	56                   	push   esi
c0002524:	e8 8c f4 ff ff       	call   c00019b5 <disk_initialize>
c0002529:	83 c4 10             	add    esp,0x10
c000252c:	a8 01                	test   al,0x1
c000252e:	0f 85 be 04 00 00    	jne    c00029f2 <mount_volume+0x55f>
c0002534:	89 f9                	mov    ecx,edi
c0002536:	84 c9                	test   cl,cl
c0002538:	74 04                	je     c000253e <mount_volume+0xab>
c000253a:	a8 04                	test   al,0x4
c000253c:	75 c7                	jne    c0002505 <mount_volume+0x72>
c000253e:	31 d2                	xor    edx,edx
c0002540:	89 e8                	mov    eax,ebp
c0002542:	e8 c8 fd ff ff       	call   c000230f <find_volume>
c0002547:	83 f8 04             	cmp    eax,0x4
c000254a:	75 0a                	jne    c0002556 <mount_volume+0xc3>
c000254c:	bb 01 00 00 00       	mov    ebx,0x1
c0002551:	e9 9c 04 00 00       	jmp    c00029f2 <mount_volume+0x55f>
c0002556:	83 f8 01             	cmp    eax,0x1
c0002559:	76 0a                	jbe    c0002565 <mount_volume+0xd2>
c000255b:	bb 0d 00 00 00       	mov    ebx,0xd
c0002560:	e9 8d 04 00 00       	jmp    c00029f2 <mount_volume+0x55f>
c0002565:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0002568:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000256b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000256f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002573:	75 17                	jne    c000258c <mount_volume+0xf9>
c0002575:	b8 0b 00 00 00       	mov    eax,0xb
c000257a:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000257f:	75 da                	jne    c000255b <mount_volume+0xc8>
c0002581:	40                   	inc    eax
c0002582:	83 f8 40             	cmp    eax,0x40
c0002585:	75 f3                	jne    c000257a <mount_volume+0xe7>
c0002587:	e9 5a 02 00 00       	jmp    c00027e6 <mount_volume+0x353>
c000258c:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000258f:	e8 6f f4 ff ff       	call   c0001a03 <ld_word>
c0002594:	66 3d 00 02          	cmp    ax,0x200
c0002598:	75 c1                	jne    c000255b <mount_volume+0xc8>
c000259a:	8d 45 6a             	lea    eax,[ebp+0x6a]
c000259d:	e8 61 f4 ff ff       	call   c0001a03 <ld_word>
c00025a2:	0f b7 c0             	movzx  eax,ax
c00025a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025a9:	85 c0                	test   eax,eax
c00025ab:	75 0c                	jne    c00025b9 <mount_volume+0x126>
c00025ad:	8d 45 78             	lea    eax,[ebp+0x78]
c00025b0:	e8 5b f4 ff ff       	call   c0001a10 <ld_dword>
c00025b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025bd:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025c0:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025c3:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00025c7:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00025ca:	48                   	dec    eax
c00025cb:	3c 01                	cmp    al,0x1
c00025cd:	77 8c                	ja     c000255b <mount_volume+0xc8>
c00025cf:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00025d3:	89 c3                	mov    ebx,eax
c00025d5:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00025d9:	66 85 c0             	test   ax,ax
c00025dc:	0f 84 79 ff ff ff    	je     c000255b <mount_volume+0xc8>
c00025e2:	8d 40 ff             	lea    eax,[eax-0x1]
c00025e5:	85 d8                	test   eax,ebx
c00025e7:	0f 85 6e ff ff ff    	jne    c000255b <mount_volume+0xc8>
c00025ed:	8d 45 65             	lea    eax,[ebp+0x65]
c00025f0:	e8 0e f4 ff ff       	call   c0001a03 <ld_word>
c00025f5:	89 c7                	mov    edi,eax
c00025f7:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c00025fb:	a8 0f                	test   al,0xf
c00025fd:	0f 85 58 ff ff ff    	jne    c000255b <mount_volume+0xc8>
c0002603:	8d 45 67             	lea    eax,[ebp+0x67]
c0002606:	e8 f8 f3 ff ff       	call   c0001a03 <ld_word>
c000260b:	0f b7 f0             	movzx  esi,ax
c000260e:	85 f6                	test   esi,esi
c0002610:	75 0a                	jne    c000261c <mount_volume+0x189>
c0002612:	8d 45 74             	lea    eax,[ebp+0x74]
c0002615:	e8 f6 f3 ff ff       	call   c0001a10 <ld_dword>
c000261a:	89 c6                	mov    esi,eax
c000261c:	8d 45 62             	lea    eax,[ebp+0x62]
c000261f:	e8 df f3 ff ff       	call   c0001a03 <ld_word>
c0002624:	66 85 c0             	test   ax,ax
c0002627:	0f 84 2e ff ff ff    	je     c000255b <mount_volume+0xc8>
c000262d:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002632:	0f b7 c8             	movzx  ecx,ax
c0002635:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000263a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000263e:	89 fa                	mov    edx,edi
c0002640:	66 c1 ea 04          	shr    dx,0x4
c0002644:	0f b7 d2             	movzx  edx,dx
c0002647:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000264b:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000264e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002652:	39 c6                	cmp    esi,eax
c0002654:	0f 82 01 ff ff ff    	jb     c000255b <mount_volume+0xc8>
c000265a:	29 c6                	sub    esi,eax
c000265c:	31 d2                	xor    edx,edx
c000265e:	89 f0                	mov    eax,esi
c0002660:	f7 f3                	div    ebx
c0002662:	39 de                	cmp    esi,ebx
c0002664:	0f 82 f1 fe ff ff    	jb     c000255b <mount_volume+0xc8>
c000266a:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000266f:	0f 87 e6 fe ff ff    	ja     c000255b <mount_volume+0xc8>
c0002675:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000267a:	0f 86 63 03 00 00    	jbe    c00029e3 <mount_volume+0x550>
c0002680:	bb 03 00 00 00       	mov    ebx,0x3
c0002685:	8d 70 02             	lea    esi,[eax+0x2]
c0002688:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000268c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002690:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002693:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 c8                	mov    eax,ecx
c000269a:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000269d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026a1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026a9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026ad:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026b0:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026b7:	31 d2                	xor    edx,edx
c00026b9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026bd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026c1:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026c4:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00026c7:	83 fb 03             	cmp    ebx,0x3
c00026ca:	75 2b                	jne    c00026f7 <mount_volume+0x264>
c00026cc:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00026cf:	e8 2f f3 ff ff       	call   c0001a03 <ld_word>
c00026d4:	66 09 c7             	or     di,ax
c00026d7:	0f 85 7e fe ff ff    	jne    c000255b <mount_volume+0xc8>
c00026dd:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c00026e3:	c1 e6 02             	shl    esi,0x2
c00026e6:	e8 25 f3 ff ff       	call   c0001a10 <ld_dword>
c00026eb:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c00026f2:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c00026f5:	eb 30                	jmp    c0002727 <mount_volume+0x294>
c00026f7:	66 85 ff             	test   di,di
c00026fa:	0f 84 5b fe ff ff    	je     c000255b <mount_volume+0xc8>
c0002700:	31 d2                	xor    edx,edx
c0002702:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002706:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000270a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000270e:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002711:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002714:	83 fb 02             	cmp    ebx,0x2
c0002717:	75 04                	jne    c000271d <mount_volume+0x28a>
c0002719:	01 f6                	add    esi,esi
c000271b:	eb 0a                	jmp    c0002727 <mount_volume+0x294>
c000271d:	8d 04 76             	lea    eax,[esi+esi*2]
c0002720:	83 e6 01             	and    esi,0x1
c0002723:	d1 e8                	shr    eax,1
c0002725:	01 c6                	add    esi,eax
c0002727:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000272d:	c1 ee 09             	shr    esi,0x9
c0002730:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002734:	0f 87 21 fe ff ff    	ja     c000255b <mount_volume+0xc8>
c000273a:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002741:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002748:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000274c:	83 fb 03             	cmp    ebx,0x3
c000274f:	75 7a                	jne    c00027cb <mount_volume+0x338>
c0002751:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002757:	e8 a7 f2 ff ff       	call   c0001a03 <ld_word>
c000275c:	66 48                	dec    ax
c000275e:	75 6b                	jne    c00027cb <mount_volume+0x338>
c0002760:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002764:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002768:	83 c2 01             	add    edx,0x1
c000276b:	89 e8                	mov    eax,ebp
c000276d:	83 d1 00             	adc    ecx,0x0
c0002770:	e8 6c fa ff ff       	call   c00021e1 <move_window>
c0002775:	85 c0                	test   eax,eax
c0002777:	75 52                	jne    c00027cb <mount_volume+0x338>
c0002779:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c000277d:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002783:	e8 7b f2 ff ff       	call   c0001a03 <ld_word>
c0002788:	66 3d 55 aa          	cmp    ax,0xaa55
c000278c:	75 3d                	jne    c00027cb <mount_volume+0x338>
c000278e:	8d 45 54             	lea    eax,[ebp+0x54]
c0002791:	e8 7a f2 ff ff       	call   c0001a10 <ld_dword>
c0002796:	3d 52 52 61 41       	cmp    eax,0x41615252
c000279b:	75 2e                	jne    c00027cb <mount_volume+0x338>
c000279d:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027a3:	e8 68 f2 ff ff       	call   c0001a10 <ld_dword>
c00027a8:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027ad:	75 1c                	jne    c00027cb <mount_volume+0x338>
c00027af:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027b5:	e8 56 f2 ff ff       	call   c0001a10 <ld_dword>
c00027ba:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027bd:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027c3:	e8 48 f2 ff ff       	call   c0001a10 <ld_dword>
c00027c8:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00027cb:	66 a1 c0 aa 02 c0    	mov    ax,ds:0xc002aac0
c00027d1:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00027d4:	40                   	inc    eax
c00027d5:	31 db                	xor    ebx,ebx
c00027d7:	66 a3 c0 aa 02 c0    	mov    ds:0xc002aac0,ax
c00027dd:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c00027e1:	e9 0c 02 00 00       	jmp    c00029f2 <mount_volume+0x55f>
c00027e6:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c00027ec:	e8 12 f2 ff ff       	call   c0001a03 <ld_word>
c00027f1:	66 3d 00 01          	cmp    ax,0x100
c00027f5:	0f 85 60 fd ff ff    	jne    c000255b <mount_volume+0xc8>
c00027fb:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002802:	0f 85 53 fd ff ff    	jne    c000255b <mount_volume+0xc8>
c0002808:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000280e:	e8 15 f2 ff ff       	call   c0001a28 <ld_qword>
c0002813:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002817:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000281b:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002821:	e8 ea f1 ff ff       	call   c0001a10 <ld_dword>
c0002826:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002829:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000282f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002832:	fe c8                	dec    al
c0002834:	0f 85 21 fd ff ff    	jne    c000255b <mount_volume+0xc8>
c000283a:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002841:	bb 01 00 00 00       	mov    ebx,0x1
c0002846:	d3 e3                	shl    ebx,cl
c0002848:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000284c:	66 85 db             	test   bx,bx
c000284f:	0f 84 06 fd ff ff    	je     c000255b <mount_volume+0xc8>
c0002855:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c000285b:	e8 b0 f1 ff ff       	call   c0001a10 <ld_dword>
c0002860:	89 c6                	mov    esi,eax
c0002862:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002867:	0f 87 ee fc ff ff    	ja     c000255b <mount_volume+0xc8>
c000286d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002871:	8d 40 02             	lea    eax,[eax+0x2]
c0002874:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002877:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c000287a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000287e:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002881:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002887:	e8 84 f1 ff ff       	call   c0001a10 <ld_dword>
c000288c:	31 d2                	xor    edx,edx
c000288e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002892:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002896:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000289a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000289e:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028a1:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028a4:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028aa:	e8 61 f1 ff ff       	call   c0001a10 <ld_dword>
c00028af:	31 d2                	xor    edx,edx
c00028b1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028b5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028b9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028bd:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028c0:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028c3:	0f b7 c3             	movzx  eax,bx
c00028c6:	31 d2                	xor    edx,edx
c00028c8:	0f af f0             	imul   esi,eax
c00028cb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00028cf:	89 f0                	mov    eax,esi
c00028d1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00028d5:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c00028d9:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00028dd:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c00028e1:	39 c1                	cmp    ecx,eax
c00028e3:	89 df                	mov    edi,ebx
c00028e5:	19 d7                	sbb    edi,edx
c00028e7:	0f 82 6e fc ff ff    	jb     c000255b <mount_volume+0xc8>
c00028ed:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c00028f3:	31 db                	xor    ebx,ebx
c00028f5:	e8 16 f1 ff ff       	call   c0001a10 <ld_dword>
c00028fa:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002901:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002904:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000290c:	85 db                	test   ebx,ebx
c000290e:	75 39                	jne    c0002949 <mount_volume+0x4b6>
c0002910:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002914:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002918:	0f 86 3d fc ff ff    	jbe    c000255b <mount_volume+0xc8>
c000291e:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002921:	31 ff                	xor    edi,edi
c0002923:	89 e8                	mov    eax,ebp
c0002925:	e8 72 f3 ff ff       	call   c0001c9c <clst2sect>
c000292a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000292e:	01 c6                	add    esi,eax
c0002930:	89 e8                	mov    eax,ebp
c0002932:	11 d7                	adc    edi,edx
c0002934:	89 f2                	mov    edx,esi
c0002936:	89 f9                	mov    ecx,edi
c0002938:	e8 a4 f8 ff ff       	call   c00021e1 <move_window>
c000293d:	85 c0                	test   eax,eax
c000293f:	0f 85 07 fc ff ff    	jne    c000254c <mount_volume+0xb9>
c0002945:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002949:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000294e:	74 0b                	je     c000295b <mount_volume+0x4c8>
c0002950:	83 c3 20             	add    ebx,0x20
c0002953:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002959:	eb b1                	jmp    c000290c <mount_volume+0x479>
c000295b:	8d 75 54             	lea    esi,[ebp+0x54]
c000295e:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002962:	e8 a9 f0 ff ff       	call   c0001a10 <ld_dword>
c0002967:	89 c3                	mov    ebx,eax
c0002969:	83 f8 01             	cmp    eax,0x1
c000296c:	0f 86 e9 fb ff ff    	jbe    c000255b <mount_volume+0xc8>
c0002972:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002975:	0f 86 e0 fb ff ff    	jbe    c000255b <mount_volume+0xc8>
c000297b:	8d 53 fe             	lea    edx,[ebx-0x2]
c000297e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002982:	0f af c2             	imul   eax,edx
c0002985:	31 d2                	xor    edx,edx
c0002987:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c000298a:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c000298d:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002990:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002993:	31 c9                	xor    ecx,ecx
c0002995:	89 da                	mov    edx,ebx
c0002997:	89 e8                	mov    eax,ebp
c0002999:	c1 ea 07             	shr    edx,0x7
c000299c:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c000299f:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029a2:	e8 3a f8 ff ff       	call   c00021e1 <move_window>
c00029a7:	85 c0                	test   eax,eax
c00029a9:	0f 85 9d fb ff ff    	jne    c000254c <mount_volume+0xb9>
c00029af:	89 d8                	mov    eax,ebx
c00029b1:	83 e0 7f             	and    eax,0x7f
c00029b4:	8d 04 86             	lea    eax,[esi+eax*4]
c00029b7:	e8 54 f0 ff ff       	call   c0001a10 <ld_dword>
c00029bc:	83 f8 ff             	cmp    eax,0xffffffff
c00029bf:	74 0a                	je     c00029cb <mount_volume+0x538>
c00029c1:	43                   	inc    ebx
c00029c2:	39 d8                	cmp    eax,ebx
c00029c4:	74 cd                	je     c0002993 <mount_volume+0x500>
c00029c6:	e9 90 fb ff ff       	jmp    c000255b <mount_volume+0xc8>
c00029cb:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029d2:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029d9:	bb 04 00 00 00       	mov    ebx,0x4
c00029de:	e9 e8 fd ff ff       	jmp    c00027cb <mount_volume+0x338>
c00029e3:	3d f6 0f 00 00       	cmp    eax,0xff6
c00029e8:	19 db                	sbb    ebx,ebx
c00029ea:	83 c3 02             	add    ebx,0x2
c00029ed:	e9 93 fc ff ff       	jmp    c0002685 <mount_volume+0x1f2>
c00029f2:	83 c4 3c             	add    esp,0x3c
c00029f5:	89 d8                	mov    eax,ebx
c00029f7:	5b                   	pop    ebx
c00029f8:	5e                   	pop    esi
c00029f9:	5f                   	pop    edi
c00029fa:	5d                   	pop    ebp
c00029fb:	c3                   	ret    

c00029fc <find_bitmap>:
c00029fc:	55                   	push   ebp
c00029fd:	57                   	push   edi
c00029fe:	89 c7                	mov    edi,eax
c0002a00:	56                   	push   esi
c0002a01:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a04:	53                   	push   ebx
c0002a05:	83 ec 1c             	sub    esp,0x1c
c0002a08:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a0b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a0f:	83 e8 02             	sub    eax,0x2
c0002a12:	39 f0                	cmp    eax,esi
c0002a14:	77 02                	ja     c0002a18 <find_bitmap+0x1c>
c0002a16:	31 f6                	xor    esi,esi
c0002a18:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a1c:	89 f3                	mov    ebx,esi
c0002a1e:	31 ed                	xor    ebp,ebp
c0002a20:	31 c9                	xor    ecx,ecx
c0002a22:	89 da                	mov    edx,ebx
c0002a24:	89 f8                	mov    eax,edi
c0002a26:	c1 ea 0c             	shr    edx,0xc
c0002a29:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a2c:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a2f:	e8 ad f7 ff ff       	call   c00021e1 <move_window>
c0002a34:	85 c0                	test   eax,eax
c0002a36:	75 68                	jne    c0002aa0 <find_bitmap+0xa4>
c0002a38:	89 da                	mov    edx,ebx
c0002a3a:	89 d9                	mov    ecx,ebx
c0002a3c:	c1 ea 03             	shr    edx,0x3
c0002a3f:	83 e1 07             	and    ecx,0x7
c0002a42:	b8 01 00 00 00       	mov    eax,0x1
c0002a47:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a4d:	d3 e0                	shl    eax,cl
c0002a4f:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a52:	83 e9 02             	sub    ecx,0x2
c0002a55:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a59:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a5d:	43                   	inc    ebx
c0002a5e:	21 c1                	and    ecx,eax
c0002a60:	d1 e0                	shl    eax,1
c0002a62:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002a66:	77 09                	ja     c0002a71 <find_bitmap+0x75>
c0002a68:	31 db                	xor    ebx,ebx
c0002a6a:	ba 00 02 00 00       	mov    edx,0x200
c0002a6f:	31 c0                	xor    eax,eax
c0002a71:	84 c9                	test   cl,cl
c0002a73:	75 10                	jne    c0002a85 <find_bitmap+0x89>
c0002a75:	45                   	inc    ebp
c0002a76:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a7a:	75 0f                	jne    c0002a8b <find_bitmap+0x8f>
c0002a7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a80:	83 c0 02             	add    eax,0x2
c0002a83:	eb 22                	jmp    c0002aa7 <find_bitmap+0xab>
c0002a85:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a89:	31 ed                	xor    ebp,ebp
c0002a8b:	39 de                	cmp    esi,ebx
c0002a8d:	74 16                	je     c0002aa5 <find_bitmap+0xa9>
c0002a8f:	84 c0                	test   al,al
c0002a91:	75 c6                	jne    c0002a59 <find_bitmap+0x5d>
c0002a93:	42                   	inc    edx
c0002a94:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a9a:	77 84                	ja     c0002a20 <find_bitmap+0x24>
c0002a9c:	b0 01                	mov    al,0x1
c0002a9e:	eb b9                	jmp    c0002a59 <find_bitmap+0x5d>
c0002aa0:	83 c8 ff             	or     eax,0xffffffff
c0002aa3:	eb 02                	jmp    c0002aa7 <find_bitmap+0xab>
c0002aa5:	31 c0                	xor    eax,eax
c0002aa7:	83 c4 1c             	add    esp,0x1c
c0002aaa:	5b                   	pop    ebx
c0002aab:	5e                   	pop    esi
c0002aac:	5f                   	pop    edi
c0002aad:	5d                   	pop    ebp
c0002aae:	c3                   	ret    

c0002aaf <change_bitmap>:
c0002aaf:	55                   	push   ebp
c0002ab0:	89 cd                	mov    ebp,ecx
c0002ab2:	57                   	push   edi
c0002ab3:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002ab6:	56                   	push   esi
c0002ab7:	89 c7                	mov    edi,eax
c0002ab9:	53                   	push   ebx
c0002aba:	89 c8                	mov    eax,ecx
c0002abc:	83 ec 1c             	sub    esp,0x1c
c0002abf:	31 d2                	xor    edx,edx
c0002ac1:	89 ce                	mov    esi,ecx
c0002ac3:	c1 e8 0c             	shr    eax,0xc
c0002ac6:	bb 01 00 00 00       	mov    ebx,0x1
c0002acb:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002ace:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002ad1:	c1 ee 03             	shr    esi,0x3
c0002ad4:	83 e1 07             	and    ecx,0x7
c0002ad7:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002add:	d3 e3                	shl    ebx,cl
c0002adf:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002ae3:	89 c1                	mov    ecx,eax
c0002ae5:	89 d3                	mov    ebx,edx
c0002ae7:	83 c1 01             	add    ecx,0x1
c0002aea:	83 d3 00             	adc    ebx,0x0
c0002aed:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002af1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002af5:	89 d1                	mov    ecx,edx
c0002af7:	89 c2                	mov    edx,eax
c0002af9:	89 f8                	mov    eax,edi
c0002afb:	e8 e1 f6 ff ff       	call   c00021e1 <move_window>
c0002b00:	89 c1                	mov    ecx,eax
c0002b02:	85 c0                	test   eax,eax
c0002b04:	75 48                	jne    c0002b4e <change_bitmap+0x9f>
c0002b06:	31 d2                	xor    edx,edx
c0002b08:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b0c:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b10:	0f 95 c2             	setne  dl
c0002b13:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b17:	74 3c                	je     c0002b55 <change_bitmap+0xa6>
c0002b19:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b1d:	4d                   	dec    ebp
c0002b1e:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b22:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b26:	74 32                	je     c0002b5a <change_bitmap+0xab>
c0002b28:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b2c:	75 d8                	jne    c0002b06 <change_bitmap+0x57>
c0002b2e:	8d 46 01             	lea    eax,[esi+0x1]
c0002b31:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b36:	89 c3                	mov    ebx,eax
c0002b38:	31 f6                	xor    esi,esi
c0002b3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b3e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b42:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b48:	74 99                	je     c0002ae3 <change_bitmap+0x34>
c0002b4a:	89 de                	mov    esi,ebx
c0002b4c:	eb b8                	jmp    c0002b06 <change_bitmap+0x57>
c0002b4e:	b9 01 00 00 00       	mov    ecx,0x1
c0002b53:	eb 05                	jmp    c0002b5a <change_bitmap+0xab>
c0002b55:	b9 02 00 00 00       	mov    ecx,0x2
c0002b5a:	83 c4 1c             	add    esp,0x1c
c0002b5d:	89 c8                	mov    eax,ecx
c0002b5f:	5b                   	pop    ebx
c0002b60:	5e                   	pop    esi
c0002b61:	5f                   	pop    edi
c0002b62:	5d                   	pop    ebp
c0002b63:	c3                   	ret    

c0002b64 <put_fat>:
c0002b64:	83 fa 01             	cmp    edx,0x1
c0002b67:	0f 86 7b 01 00 00    	jbe    c0002ce8 <put_fat+0x184>
c0002b6d:	55                   	push   ebp
c0002b6e:	57                   	push   edi
c0002b6f:	89 cf                	mov    edi,ecx
c0002b71:	56                   	push   esi
c0002b72:	b9 02 00 00 00       	mov    ecx,0x2
c0002b77:	53                   	push   ebx
c0002b78:	89 c6                	mov    esi,eax
c0002b7a:	83 ec 1c             	sub    esp,0x1c
c0002b7d:	89 d3                	mov    ebx,edx
c0002b7f:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b82:	0f 86 68 01 00 00    	jbe    c0002cf0 <put_fat+0x18c>
c0002b88:	8a 00                	mov    al,BYTE PTR [eax]
c0002b8a:	3c 02                	cmp    al,0x2
c0002b8c:	0f 84 c7 00 00 00    	je     c0002c59 <put_fat+0xf5>
c0002b92:	77 09                	ja     c0002b9d <put_fat+0x39>
c0002b94:	fe c8                	dec    al
c0002b96:	74 17                	je     c0002baf <put_fat+0x4b>
c0002b98:	e9 53 01 00 00       	jmp    c0002cf0 <put_fat+0x18c>
c0002b9d:	b9 02 00 00 00       	mov    ecx,0x2
c0002ba2:	3c 04                	cmp    al,0x4
c0002ba4:	0f 86 e1 00 00 00    	jbe    c0002c8b <put_fat+0x127>
c0002baa:	e9 41 01 00 00       	jmp    c0002cf0 <put_fat+0x18c>
c0002baf:	89 d5                	mov    ebp,edx
c0002bb1:	31 c9                	xor    ecx,ecx
c0002bb3:	d1 ed                	shr    ebp,1
c0002bb5:	89 f0                	mov    eax,esi
c0002bb7:	01 d5                	add    ebp,edx
c0002bb9:	89 ea                	mov    edx,ebp
c0002bbb:	c1 ea 09             	shr    edx,0x9
c0002bbe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bc1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bc4:	e8 18 f6 ff ff       	call   c00021e1 <move_window>
c0002bc9:	89 c1                	mov    ecx,eax
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 1d 01 00 00    	jne    c0002cf0 <put_fat+0x18c>
c0002bd3:	8d 46 54             	lea    eax,[esi+0x54]
c0002bd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bda:	8d 45 01             	lea    eax,[ebp+0x1]
c0002bdd:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002be3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002be7:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002beb:	89 f8                	mov    eax,edi
c0002bed:	83 e3 01             	and    ebx,0x1
c0002bf0:	74 0d                	je     c0002bff <put_fat+0x9b>
c0002bf2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002bf5:	89 fa                	mov    edx,edi
c0002bf7:	83 e0 0f             	and    eax,0xf
c0002bfa:	c1 e2 04             	shl    edx,0x4
c0002bfd:	09 d0                	or     eax,edx
c0002bff:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c02:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c06:	31 c9                	xor    ecx,ecx
c0002c08:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c0c:	c1 ea 09             	shr    edx,0x9
c0002c0f:	89 f0                	mov    eax,esi
c0002c11:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c14:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c17:	e8 c5 f5 ff ff       	call   c00021e1 <move_window>
c0002c1c:	89 c1                	mov    ecx,eax
c0002c1e:	85 c0                	test   eax,eax
c0002c20:	0f 85 ca 00 00 00    	jne    c0002cf0 <put_fat+0x18c>
c0002c26:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c2a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c30:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c34:	85 db                	test   ebx,ebx
c0002c36:	74 07                	je     c0002c3f <put_fat+0xdb>
c0002c38:	c1 ef 04             	shr    edi,0x4
c0002c3b:	89 fa                	mov    edx,edi
c0002c3d:	eb 0e                	jmp    c0002c4d <put_fat+0xe9>
c0002c3f:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c42:	c1 ef 08             	shr    edi,0x8
c0002c45:	83 e2 f0             	and    edx,0xfffffff0
c0002c48:	83 e7 0f             	and    edi,0xf
c0002c4b:	09 fa                	or     edx,edi
c0002c4d:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c50:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c54:	e9 97 00 00 00       	jmp    c0002cf0 <put_fat+0x18c>
c0002c59:	31 c9                	xor    ecx,ecx
c0002c5b:	c1 ea 08             	shr    edx,0x8
c0002c5e:	89 f0                	mov    eax,esi
c0002c60:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c63:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c66:	e8 76 f5 ff ff       	call   c00021e1 <move_window>
c0002c6b:	89 c1                	mov    ecx,eax
c0002c6d:	85 c0                	test   eax,eax
c0002c6f:	75 7f                	jne    c0002cf0 <put_fat+0x18c>
c0002c71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c75:	01 db                	add    ebx,ebx
c0002c77:	0f b7 d7             	movzx  edx,di
c0002c7a:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c80:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c84:	e8 ec ed ff ff       	call   c0001a75 <st_word>
c0002c89:	eb 53                	jmp    c0002cde <put_fat+0x17a>
c0002c8b:	31 c9                	xor    ecx,ecx
c0002c8d:	c1 ea 07             	shr    edx,0x7
c0002c90:	89 f0                	mov    eax,esi
c0002c92:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c95:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c98:	e8 44 f5 ff ff       	call   c00021e1 <move_window>
c0002c9d:	89 c1                	mov    ecx,eax
c0002c9f:	85 c0                	test   eax,eax
c0002ca1:	75 4d                	jne    c0002cf0 <put_fat+0x18c>
c0002ca3:	c1 e3 02             	shl    ebx,0x2
c0002ca6:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cac:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002caf:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cb3:	74 1c                	je     c0002cd1 <put_fat+0x16d>
c0002cb5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb9:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002cbf:	89 d8                	mov    eax,ebx
c0002cc1:	e8 4a ed ff ff       	call   c0001a10 <ld_dword>
c0002cc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cca:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ccf:	09 c7                	or     edi,eax
c0002cd1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cd5:	89 fa                	mov    edx,edi
c0002cd7:	89 d8                	mov    eax,ebx
c0002cd9:	e8 9b ed ff ff       	call   c0001a79 <st_dword>
c0002cde:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002ce2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002ce6:	eb 08                	jmp    c0002cf0 <put_fat+0x18c>
c0002ce8:	b9 02 00 00 00       	mov    ecx,0x2
c0002ced:	89 c8                	mov    eax,ecx
c0002cef:	c3                   	ret    
c0002cf0:	83 c4 1c             	add    esp,0x1c
c0002cf3:	89 c8                	mov    eax,ecx
c0002cf5:	5b                   	pop    ebx
c0002cf6:	5e                   	pop    esi
c0002cf7:	5f                   	pop    edi
c0002cf8:	5d                   	pop    ebp
c0002cf9:	c3                   	ret    

c0002cfa <fill_last_frag>:
c0002cfa:	57                   	push   edi
c0002cfb:	89 cf                	mov    edi,ecx
c0002cfd:	56                   	push   esi
c0002cfe:	89 d6                	mov    esi,edx
c0002d00:	53                   	push   ebx
c0002d01:	89 c3                	mov    ebx,eax
c0002d03:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d06:	85 c0                	test   eax,eax
c0002d08:	74 21                	je     c0002d2b <fill_last_frag+0x31>
c0002d0a:	89 f9                	mov    ecx,edi
c0002d0c:	83 f8 01             	cmp    eax,0x1
c0002d0f:	76 05                	jbe    c0002d16 <fill_last_frag+0x1c>
c0002d11:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d14:	29 c1                	sub    ecx,eax
c0002d16:	8d 56 01             	lea    edx,[esi+0x1]
c0002d19:	29 c2                	sub    edx,eax
c0002d1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d1d:	e8 42 fe ff ff       	call   c0002b64 <put_fat>
c0002d22:	85 c0                	test   eax,eax
c0002d24:	75 05                	jne    c0002d2b <fill_last_frag+0x31>
c0002d26:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d29:	eb d8                	jmp    c0002d03 <fill_last_frag+0x9>
c0002d2b:	5b                   	pop    ebx
c0002d2c:	5e                   	pop    esi
c0002d2d:	5f                   	pop    edi
c0002d2e:	c3                   	ret    

c0002d2f <fill_first_frag>:
c0002d2f:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d33:	75 2d                	jne    c0002d62 <fill_first_frag+0x33>
c0002d35:	57                   	push   edi
c0002d36:	56                   	push   esi
c0002d37:	53                   	push   ebx
c0002d38:	89 c3                	mov    ebx,eax
c0002d3a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d3d:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d40:	01 d7                	add    edi,edx
c0002d42:	39 fa                	cmp    edx,edi
c0002d44:	74 14                	je     c0002d5a <fill_first_frag+0x2b>
c0002d46:	8d 72 01             	lea    esi,[edx+0x1]
c0002d49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d4b:	89 f1                	mov    ecx,esi
c0002d4d:	e8 12 fe ff ff       	call   c0002b64 <put_fat>
c0002d52:	89 f2                	mov    edx,esi
c0002d54:	85 c0                	test   eax,eax
c0002d56:	74 ea                	je     c0002d42 <fill_first_frag+0x13>
c0002d58:	eb 0b                	jmp    c0002d65 <fill_first_frag+0x36>
c0002d5a:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d5e:	31 c0                	xor    eax,eax
c0002d60:	eb 03                	jmp    c0002d65 <fill_first_frag+0x36>
c0002d62:	31 c0                	xor    eax,eax
c0002d64:	c3                   	ret    
c0002d65:	5b                   	pop    ebx
c0002d66:	5e                   	pop    esi
c0002d67:	5f                   	pop    edi
c0002d68:	c3                   	ret    

c0002d69 <get_fat>:
c0002d69:	83 fa 01             	cmp    edx,0x1
c0002d6c:	0f 86 db 01 00 00    	jbe    c0002f4d <get_fat+0x1e4>
c0002d72:	55                   	push   ebp
c0002d73:	b9 01 00 00 00       	mov    ecx,0x1
c0002d78:	57                   	push   edi
c0002d79:	56                   	push   esi
c0002d7a:	53                   	push   ebx
c0002d7b:	83 ec 1c             	sub    esp,0x1c
c0002d7e:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d80:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d83:	0f 86 cc 01 00 00    	jbe    c0002f55 <get_fat+0x1ec>
c0002d89:	89 c3                	mov    ebx,eax
c0002d8b:	89 d6                	mov    esi,edx
c0002d8d:	8a 07                	mov    al,BYTE PTR [edi]
c0002d8f:	3c 02                	cmp    al,0x2
c0002d91:	0f 84 99 00 00 00    	je     c0002e30 <get_fat+0xc7>
c0002d97:	77 09                	ja     c0002da2 <get_fat+0x39>
c0002d99:	fe c8                	dec    al
c0002d9b:	74 1a                	je     c0002db7 <get_fat+0x4e>
c0002d9d:	e9 b3 01 00 00       	jmp    c0002f55 <get_fat+0x1ec>
c0002da2:	3c 03                	cmp    al,0x3
c0002da4:	0f 84 b5 00 00 00    	je     c0002e5f <get_fat+0xf6>
c0002daa:	3c 04                	cmp    al,0x4
c0002dac:	0f 84 e3 00 00 00    	je     c0002e95 <get_fat+0x12c>
c0002db2:	e9 9e 01 00 00       	jmp    c0002f55 <get_fat+0x1ec>
c0002db7:	89 d3                	mov    ebx,edx
c0002db9:	31 c9                	xor    ecx,ecx
c0002dbb:	d1 eb                	shr    ebx,1
c0002dbd:	89 f8                	mov    eax,edi
c0002dbf:	01 d3                	add    ebx,edx
c0002dc1:	89 da                	mov    edx,ebx
c0002dc3:	c1 ea 09             	shr    edx,0x9
c0002dc6:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dc9:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dcc:	e8 10 f4 ff ff       	call   c00021e1 <move_window>
c0002dd1:	85 c0                	test   eax,eax
c0002dd3:	74 08                	je     c0002ddd <get_fat+0x74>
c0002dd5:	83 c9 ff             	or     ecx,0xffffffff
c0002dd8:	e9 78 01 00 00       	jmp    c0002f55 <get_fat+0x1ec>
c0002ddd:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002de0:	31 c9                	xor    ecx,ecx
c0002de2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002de8:	89 ea                	mov    edx,ebp
c0002dea:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002dee:	c1 ea 09             	shr    edx,0x9
c0002df1:	89 f8                	mov    eax,edi
c0002df3:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002df6:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002df9:	e8 e3 f3 ff ff       	call   c00021e1 <move_window>
c0002dfe:	85 c0                	test   eax,eax
c0002e00:	75 d3                	jne    c0002dd5 <get_fat+0x6c>
c0002e02:	0f b6 c3             	movzx  eax,bl
c0002e05:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e0b:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e10:	c1 e3 08             	shl    ebx,0x8
c0002e13:	09 c3                	or     ebx,eax
c0002e15:	89 d9                	mov    ecx,ebx
c0002e17:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e1d:	83 e6 01             	and    esi,0x1
c0002e20:	0f 84 2f 01 00 00    	je     c0002f55 <get_fat+0x1ec>
c0002e26:	89 d9                	mov    ecx,ebx
c0002e28:	c1 e9 04             	shr    ecx,0x4
c0002e2b:	e9 25 01 00 00       	jmp    c0002f55 <get_fat+0x1ec>
c0002e30:	31 c9                	xor    ecx,ecx
c0002e32:	c1 ea 08             	shr    edx,0x8
c0002e35:	89 f8                	mov    eax,edi
c0002e37:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e3a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e3d:	e8 9f f3 ff ff       	call   c00021e1 <move_window>
c0002e42:	85 c0                	test   eax,eax
c0002e44:	75 8f                	jne    c0002dd5 <get_fat+0x6c>
c0002e46:	01 f6                	add    esi,esi
c0002e48:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e4e:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e52:	e8 ac eb ff ff       	call   c0001a03 <ld_word>
c0002e57:	0f b7 c8             	movzx  ecx,ax
c0002e5a:	e9 f6 00 00 00       	jmp    c0002f55 <get_fat+0x1ec>
c0002e5f:	31 c9                	xor    ecx,ecx
c0002e61:	c1 ea 07             	shr    edx,0x7
c0002e64:	89 f8                	mov    eax,edi
c0002e66:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e69:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e6c:	e8 70 f3 ff ff       	call   c00021e1 <move_window>
c0002e71:	85 c0                	test   eax,eax
c0002e73:	0f 85 5c ff ff ff    	jne    c0002dd5 <get_fat+0x6c>
c0002e79:	c1 e6 02             	shl    esi,0x2
c0002e7c:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e82:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e86:	e8 85 eb ff ff       	call   c0001a10 <ld_dword>
c0002e8b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e90:	e9 b4 00 00 00       	jmp    c0002f49 <get_fat+0x1e0>
c0002e95:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e98:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e9b:	89 d1                	mov    ecx,edx
c0002e9d:	09 c1                	or     ecx,eax
c0002e9f:	74 06                	je     c0002ea7 <get_fat+0x13e>
c0002ea1:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ea5:	75 0f                	jne    c0002eb6 <get_fat+0x14d>
c0002ea7:	b9 01 00 00 00       	mov    ecx,0x1
c0002eac:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002eb0:	0f 85 9f 00 00 00    	jne    c0002f55 <get_fat+0x1ec>
c0002eb6:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002eba:	89 f5                	mov    ebp,esi
c0002ebc:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002ec1:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002ec4:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002ec7:	80 f9 02             	cmp    cl,0x2
c0002eca:	75 35                	jne    c0002f01 <get_fat+0x198>
c0002ecc:	83 c0 ff             	add    eax,0xffffffff
c0002ecf:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002ed4:	83 d2 ff             	adc    edx,0xffffffff
c0002ed7:	31 db                	xor    ebx,ebx
c0002ed9:	0f ac d0 09          	shrd   eax,edx,0x9
c0002edd:	53                   	push   ebx
c0002ede:	c1 ea 09             	shr    edx,0x9
c0002ee1:	51                   	push   ecx
c0002ee2:	52                   	push   edx
c0002ee3:	50                   	push   eax
c0002ee4:	e8 c3 0b 02 00       	call   c0023aac <__udivdi3>
c0002ee9:	83 c4 10             	add    esp,0x10
c0002eec:	b9 01 00 00 00       	mov    ecx,0x1
c0002ef1:	39 c5                	cmp    ebp,eax
c0002ef3:	77 60                	ja     c0002f55 <get_fat+0x1ec>
c0002ef5:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002efa:	74 59                	je     c0002f55 <get_fat+0x1ec>
c0002efc:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002eff:	eb 54                	jmp    c0002f55 <get_fat+0x1ec>
c0002f01:	80 f9 03             	cmp    cl,0x3
c0002f04:	75 05                	jne    c0002f0b <get_fat+0x1a2>
c0002f06:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f09:	77 f1                	ja     c0002efc <get_fat+0x193>
c0002f0b:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f10:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f14:	75 3f                	jne    c0002f55 <get_fat+0x1ec>
c0002f16:	31 c9                	xor    ecx,ecx
c0002f18:	89 f2                	mov    edx,esi
c0002f1a:	89 f8                	mov    eax,edi
c0002f1c:	c1 ea 07             	shr    edx,0x7
c0002f1f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f22:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f25:	e8 b7 f2 ff ff       	call   c00021e1 <move_window>
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	0f 85 a3 fe ff ff    	jne    c0002dd5 <get_fat+0x6c>
c0002f32:	c1 e6 02             	shl    esi,0x2
c0002f35:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f3b:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f3f:	e8 cc ea ff ff       	call   c0001a10 <ld_dword>
c0002f44:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f49:	89 c1                	mov    ecx,eax
c0002f4b:	eb 08                	jmp    c0002f55 <get_fat+0x1ec>
c0002f4d:	b9 01 00 00 00       	mov    ecx,0x1
c0002f52:	89 c8                	mov    eax,ecx
c0002f54:	c3                   	ret    
c0002f55:	83 c4 1c             	add    esp,0x1c
c0002f58:	89 c8                	mov    eax,ecx
c0002f5a:	5b                   	pop    ebx
c0002f5b:	5e                   	pop    esi
c0002f5c:	5f                   	pop    edi
c0002f5d:	5d                   	pop    ebp
c0002f5e:	c3                   	ret    

c0002f5f <dir_sdi>:
c0002f5f:	55                   	push   ebp
c0002f60:	57                   	push   edi
c0002f61:	56                   	push   esi
c0002f62:	53                   	push   ebx
c0002f63:	89 c3                	mov    ebx,eax
c0002f65:	83 ec 1c             	sub    esp,0x1c
c0002f68:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f6a:	31 c0                	xor    eax,eax
c0002f6c:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002f6f:	0f 94 c0             	sete   al
c0002f72:	48                   	dec    eax
c0002f73:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f78:	05 00 00 00 10       	add    eax,0x10000000
c0002f7d:	39 d0                	cmp    eax,edx
c0002f7f:	77 0a                	ja     c0002f8b <dir_sdi+0x2c>
c0002f81:	b8 02 00 00 00       	mov    eax,0x2
c0002f86:	e9 c4 00 00 00       	jmp    c000304f <dir_sdi+0xf0>
c0002f8b:	89 d6                	mov    esi,edx
c0002f8d:	f6 c2 1f             	test   dl,0x1f
c0002f90:	75 ef                	jne    c0002f81 <dir_sdi+0x22>
c0002f92:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f95:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f98:	85 c9                	test   ecx,ecx
c0002f9a:	75 2d                	jne    c0002fc9 <dir_sdi+0x6a>
c0002f9c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f9f:	77 1b                	ja     c0002fbc <dir_sdi+0x5d>
c0002fa1:	89 f2                	mov    edx,esi
c0002fa3:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fa7:	c1 ea 05             	shr    edx,0x5
c0002faa:	39 c2                	cmp    edx,eax
c0002fac:	73 d3                	jae    c0002f81 <dir_sdi+0x22>
c0002fae:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fb1:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fb4:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fb7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fba:	eb 4b                	jmp    c0003007 <dir_sdi+0xa8>
c0002fbc:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fbf:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fc3:	85 c0                	test   eax,eax
c0002fc5:	74 da                	je     c0002fa1 <dir_sdi+0x42>
c0002fc7:	89 c1                	mov    ecx,eax
c0002fc9:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002fcd:	c1 e5 09             	shl    ebp,0x9
c0002fd0:	89 ca                	mov    edx,ecx
c0002fd2:	39 ee                	cmp    esi,ebp
c0002fd4:	72 1c                	jb     c0002ff2 <dir_sdi+0x93>
c0002fd6:	89 d8                	mov    eax,ebx
c0002fd8:	e8 8c fd ff ff       	call   c0002d69 <get_fat>
c0002fdd:	89 c1                	mov    ecx,eax
c0002fdf:	83 f8 ff             	cmp    eax,0xffffffff
c0002fe2:	74 66                	je     c000304a <dir_sdi+0xeb>
c0002fe4:	83 f8 01             	cmp    eax,0x1
c0002fe7:	76 98                	jbe    c0002f81 <dir_sdi+0x22>
c0002fe9:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002fec:	76 93                	jbe    c0002f81 <dir_sdi+0x22>
c0002fee:	29 ee                	sub    esi,ebp
c0002ff0:	eb de                	jmp    c0002fd0 <dir_sdi+0x71>
c0002ff2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ff6:	89 f8                	mov    eax,edi
c0002ff8:	e8 9f ec ff ff       	call   c0001c9c <clst2sect>
c0002ffd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003001:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003004:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000300a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000300d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003010:	89 d1                	mov    ecx,edx
c0003012:	09 c1                	or     ecx,eax
c0003014:	0f 84 67 ff ff ff    	je     c0002f81 <dir_sdi+0x22>
c000301a:	89 f1                	mov    ecx,esi
c000301c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003024:	c1 e9 09             	shr    ecx,0x9
c0003027:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000302b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000302f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003033:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003036:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000303c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000303f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003043:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003046:	31 c0                	xor    eax,eax
c0003048:	eb 05                	jmp    c000304f <dir_sdi+0xf0>
c000304a:	b8 01 00 00 00       	mov    eax,0x1
c000304f:	83 c4 1c             	add    esp,0x1c
c0003052:	5b                   	pop    ebx
c0003053:	5e                   	pop    esi
c0003054:	5f                   	pop    edi
c0003055:	5d                   	pop    ebp
c0003056:	c3                   	ret    

c0003057 <create_chain>:
c0003057:	55                   	push   ebp
c0003058:	89 c5                	mov    ebp,eax
c000305a:	57                   	push   edi
c000305b:	56                   	push   esi
c000305c:	53                   	push   ebx
c000305d:	83 ec 1c             	sub    esp,0x1c
c0003060:	85 d2                	test   edx,edx
c0003062:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003066:	8b 30                	mov    esi,DWORD PTR [eax]
c0003068:	75 0e                	jne    c0003078 <create_chain+0x21>
c000306a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000306d:	85 ff                	test   edi,edi
c000306f:	74 39                	je     c00030aa <create_chain+0x53>
c0003071:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003074:	77 39                	ja     c00030af <create_chain+0x58>
c0003076:	eb 32                	jmp    c00030aa <create_chain+0x53>
c0003078:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000307c:	e8 e8 fc ff ff       	call   c0002d69 <get_fat>
c0003081:	89 c3                	mov    ebx,eax
c0003083:	83 f8 01             	cmp    eax,0x1
c0003086:	77 0a                	ja     c0003092 <create_chain+0x3b>
c0003088:	bb 01 00 00 00       	mov    ebx,0x1
c000308d:	e9 ba 01 00 00       	jmp    c000324c <create_chain+0x1f5>
c0003092:	83 f8 ff             	cmp    eax,0xffffffff
c0003095:	0f 84 62 01 00 00    	je     c00031fd <create_chain+0x1a6>
c000309b:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c000309e:	0f 87 a8 01 00 00    	ja     c000324c <create_chain+0x1f5>
c00030a4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030a8:	eb 05                	jmp    c00030af <create_chain+0x58>
c00030aa:	bf 01 00 00 00       	mov    edi,0x1
c00030af:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030b3:	75 07                	jne    c00030bc <create_chain+0x65>
c00030b5:	31 db                	xor    ebx,ebx
c00030b7:	e9 90 01 00 00       	jmp    c000324c <create_chain+0x1f5>
c00030bc:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030bf:	75 74                	jne    c0003135 <create_chain+0xde>
c00030c1:	b9 01 00 00 00       	mov    ecx,0x1
c00030c6:	89 fa                	mov    edx,edi
c00030c8:	89 f0                	mov    eax,esi
c00030ca:	e8 2d f9 ff ff       	call   c00029fc <find_bitmap>
c00030cf:	89 c3                	mov    ebx,eax
c00030d1:	8d 40 ff             	lea    eax,[eax-0x1]
c00030d4:	83 f8 fd             	cmp    eax,0xfffffffd
c00030d7:	0f 87 6f 01 00 00    	ja     c000324c <create_chain+0x1f5>
c00030dd:	83 ec 0c             	sub    esp,0xc
c00030e0:	b9 01 00 00 00       	mov    ecx,0x1
c00030e5:	6a 01                	push   0x1
c00030e7:	89 da                	mov    edx,ebx
c00030e9:	89 f0                	mov    eax,esi
c00030eb:	e8 bf f9 ff ff       	call   c0002aaf <change_bitmap>
c00030f0:	83 c4 10             	add    esp,0x10
c00030f3:	83 f8 02             	cmp    eax,0x2
c00030f6:	74 90                	je     c0003088 <create_chain+0x31>
c00030f8:	83 f8 01             	cmp    eax,0x1
c00030fb:	0f 84 fc 00 00 00    	je     c00031fd <create_chain+0x1a6>
c0003101:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003106:	75 09                	jne    c0003111 <create_chain+0xba>
c0003108:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000310c:	e9 0c 01 00 00       	jmp    c000321d <create_chain+0x1c6>
c0003111:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003115:	0f 85 e7 00 00 00    	jne    c0003202 <create_chain+0x1ab>
c000311b:	8d 57 01             	lea    edx,[edi+0x1]
c000311e:	39 da                	cmp    edx,ebx
c0003120:	0f 84 f7 00 00 00    	je     c000321d <create_chain+0x1c6>
c0003126:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003129:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000312d:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003130:	e9 cd 00 00 00       	jmp    c0003202 <create_chain+0x1ab>
c0003135:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003139:	75 41                	jne    c000317c <create_chain+0x125>
c000313b:	8d 5f 01             	lea    ebx,[edi+0x1]
c000313e:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003141:	77 05                	ja     c0003148 <create_chain+0xf1>
c0003143:	bb 02 00 00 00       	mov    ebx,0x2
c0003148:	89 da                	mov    edx,ebx
c000314a:	89 e8                	mov    eax,ebp
c000314c:	e8 18 fc ff ff       	call   c0002d69 <get_fat>
c0003151:	83 f8 01             	cmp    eax,0x1
c0003154:	0f 84 2e ff ff ff    	je     c0003088 <create_chain+0x31>
c000315a:	83 f8 ff             	cmp    eax,0xffffffff
c000315d:	0f 84 9a 00 00 00    	je     c00031fd <create_chain+0x1a6>
c0003163:	85 c0                	test   eax,eax
c0003165:	74 11                	je     c0003178 <create_chain+0x121>
c0003167:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000316a:	83 f8 01             	cmp    eax,0x1
c000316d:	76 0d                	jbe    c000317c <create_chain+0x125>
c000316f:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003172:	76 08                	jbe    c000317c <create_chain+0x125>
c0003174:	89 c7                	mov    edi,eax
c0003176:	eb 04                	jmp    c000317c <create_chain+0x125>
c0003178:	85 db                	test   ebx,ebx
c000317a:	75 38                	jne    c00031b4 <create_chain+0x15d>
c000317c:	89 fb                	mov    ebx,edi
c000317e:	43                   	inc    ebx
c000317f:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003182:	77 0e                	ja     c0003192 <create_chain+0x13b>
c0003184:	83 ff 01             	cmp    edi,0x1
c0003187:	0f 86 28 ff ff ff    	jbe    c00030b5 <create_chain+0x5e>
c000318d:	bb 02 00 00 00       	mov    ebx,0x2
c0003192:	89 da                	mov    edx,ebx
c0003194:	89 e8                	mov    eax,ebp
c0003196:	e8 ce fb ff ff       	call   c0002d69 <get_fat>
c000319b:	85 c0                	test   eax,eax
c000319d:	74 15                	je     c00031b4 <create_chain+0x15d>
c000319f:	83 f8 01             	cmp    eax,0x1
c00031a2:	0f 84 e0 fe ff ff    	je     c0003088 <create_chain+0x31>
c00031a8:	40                   	inc    eax
c00031a9:	74 52                	je     c00031fd <create_chain+0x1a6>
c00031ab:	39 fb                	cmp    ebx,edi
c00031ad:	75 cf                	jne    c000317e <create_chain+0x127>
c00031af:	e9 01 ff ff ff       	jmp    c00030b5 <create_chain+0x5e>
c00031b4:	83 c9 ff             	or     ecx,0xffffffff
c00031b7:	89 da                	mov    edx,ebx
c00031b9:	89 f0                	mov    eax,esi
c00031bb:	e8 a4 f9 ff ff       	call   c0002b64 <put_fat>
c00031c0:	85 c0                	test   eax,eax
c00031c2:	75 32                	jne    c00031f6 <create_chain+0x19f>
c00031c4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00031c9:	74 11                	je     c00031dc <create_chain+0x185>
c00031cb:	89 d9                	mov    ecx,ebx
c00031cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d1:	89 f0                	mov    eax,esi
c00031d3:	e8 8c f9 ff ff       	call   c0002b64 <put_fat>
c00031d8:	85 c0                	test   eax,eax
c00031da:	75 1a                	jne    c00031f6 <create_chain+0x19f>
c00031dc:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00031df:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c00031e2:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c00031e5:	8d 51 fe             	lea    edx,[ecx-0x2]
c00031e8:	39 d0                	cmp    eax,edx
c00031ea:	77 04                	ja     c00031f0 <create_chain+0x199>
c00031ec:	48                   	dec    eax
c00031ed:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00031f0:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00031f4:	eb 56                	jmp    c000324c <create_chain+0x1f5>
c00031f6:	48                   	dec    eax
c00031f7:	0f 85 8b fe ff ff    	jne    c0003088 <create_chain+0x31>
c00031fd:	83 cb ff             	or     ebx,0xffffffff
c0003200:	eb 4a                	jmp    c000324c <create_chain+0x1f5>
c0003202:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003206:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003209:	41                   	inc    ecx
c000320a:	39 d9                	cmp    ecx,ebx
c000320c:	75 19                	jne    c0003227 <create_chain+0x1d0>
c000320e:	b9 02 00 00 00       	mov    ecx,0x2
c0003213:	85 d2                	test   edx,edx
c0003215:	74 03                	je     c000321a <create_chain+0x1c3>
c0003217:	8d 4a 01             	lea    ecx,[edx+0x1]
c000321a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000321d:	85 c0                	test   eax,eax
c000321f:	0f 85 63 fe ff ff    	jne    c0003088 <create_chain+0x31>
c0003225:	eb b5                	jmp    c00031dc <create_chain+0x185>
c0003227:	85 d2                	test   edx,edx
c0003229:	75 07                	jne    c0003232 <create_chain+0x1db>
c000322b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003232:	89 d9                	mov    ecx,ebx
c0003234:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003238:	89 e8                	mov    eax,ebp
c000323a:	e8 bb fa ff ff       	call   c0002cfa <fill_last_frag>
c000323f:	85 c0                	test   eax,eax
c0003241:	75 b3                	jne    c00031f6 <create_chain+0x19f>
c0003243:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000324a:	eb 90                	jmp    c00031dc <create_chain+0x185>
c000324c:	83 c4 1c             	add    esp,0x1c
c000324f:	89 d8                	mov    eax,ebx
c0003251:	5b                   	pop    ebx
c0003252:	5e                   	pop    esi
c0003253:	5f                   	pop    edi
c0003254:	5d                   	pop    ebp
c0003255:	c3                   	ret    

c0003256 <remove_chain>:
c0003256:	55                   	push   ebp
c0003257:	57                   	push   edi
c0003258:	56                   	push   esi
c0003259:	53                   	push   ebx
c000325a:	83 ec 1c             	sub    esp,0x1c
c000325d:	83 fa 01             	cmp    edx,0x1
c0003260:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003264:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003266:	77 0a                	ja     c0003272 <remove_chain+0x1c>
c0003268:	b8 02 00 00 00       	mov    eax,0x2
c000326d:	e9 24 01 00 00       	jmp    c0003396 <remove_chain+0x140>
c0003272:	89 d6                	mov    esi,edx
c0003274:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003277:	76 ef                	jbe    c0003268 <remove_chain+0x12>
c0003279:	89 c7                	mov    edi,eax
c000327b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003280:	75 06                	jne    c0003288 <remove_chain+0x32>
c0003282:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003286:	eb 54                	jmp    c00032dc <remove_chain+0x86>
c0003288:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000328b:	75 06                	jne    c0003293 <remove_chain+0x3d>
c000328d:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c0003291:	74 ef                	je     c0003282 <remove_chain+0x2c>
c0003293:	83 c9 ff             	or     ecx,0xffffffff
c0003296:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000329a:	89 d8                	mov    eax,ebx
c000329c:	e8 c3 f8 ff ff       	call   c0002b64 <put_fat>
c00032a1:	85 c0                	test   eax,eax
c00032a3:	74 dd                	je     c0003282 <remove_chain+0x2c>
c00032a5:	e9 ec 00 00 00       	jmp    c0003396 <remove_chain+0x140>
c00032aa:	83 f8 01             	cmp    eax,0x1
c00032ad:	74 b9                	je     c0003268 <remove_chain+0x12>
c00032af:	83 f8 ff             	cmp    eax,0xffffffff
c00032b2:	74 6d                	je     c0003321 <remove_chain+0xcb>
c00032b4:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032b7:	75 6f                	jne    c0003328 <remove_chain+0xd2>
c00032b9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032bc:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032bf:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032c2:	39 d0                	cmp    eax,edx
c00032c4:	73 08                	jae    c00032ce <remove_chain+0x78>
c00032c6:	40                   	inc    eax
c00032c7:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00032cb:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00032ce:	8d 4e 01             	lea    ecx,[esi+0x1]
c00032d1:	39 e9                	cmp    ecx,ebp
c00032d3:	75 64                	jne    c0003339 <remove_chain+0xe3>
c00032d5:	89 ee                	mov    esi,ebp
c00032d7:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00032da:	76 0f                	jbe    c00032eb <remove_chain+0x95>
c00032dc:	89 f2                	mov    edx,esi
c00032de:	89 f8                	mov    eax,edi
c00032e0:	e8 84 fa ff ff       	call   c0002d69 <get_fat>
c00032e5:	89 c5                	mov    ebp,eax
c00032e7:	85 c0                	test   eax,eax
c00032e9:	75 bf                	jne    c00032aa <remove_chain+0x54>
c00032eb:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032ee:	0f 85 a0 00 00 00    	jne    c0003394 <remove_chain+0x13e>
c00032f4:	eb 6c                	jmp    c0003362 <remove_chain+0x10c>
c00032f6:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c00032f9:	84 c0                	test   al,al
c00032fb:	75 7d                	jne    c000337a <remove_chain+0x124>
c00032fd:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003300:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003304:	0f 84 86 00 00 00    	je     c0003390 <remove_chain+0x13a>
c000330a:	89 da                	mov    edx,ebx
c000330c:	89 f8                	mov    eax,edi
c000330e:	e8 56 fa ff ff       	call   c0002d69 <get_fat>
c0003313:	83 f8 01             	cmp    eax,0x1
c0003316:	0f 86 4c ff ff ff    	jbe    c0003268 <remove_chain+0x12>
c000331c:	83 f8 ff             	cmp    eax,0xffffffff
c000331f:	75 4e                	jne    c000336f <remove_chain+0x119>
c0003321:	b8 01 00 00 00       	mov    eax,0x1
c0003326:	eb 6e                	jmp    c0003396 <remove_chain+0x140>
c0003328:	31 c9                	xor    ecx,ecx
c000332a:	89 f2                	mov    edx,esi
c000332c:	89 d8                	mov    eax,ebx
c000332e:	e8 31 f8 ff ff       	call   c0002b64 <put_fat>
c0003333:	85 c0                	test   eax,eax
c0003335:	74 82                	je     c00032b9 <remove_chain+0x63>
c0003337:	eb 5d                	jmp    c0003396 <remove_chain+0x140>
c0003339:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000333c:	75 1b                	jne    c0003359 <remove_chain+0x103>
c000333e:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003342:	89 d8                	mov    eax,ebx
c0003344:	83 ec 0c             	sub    esp,0xc
c0003347:	6a 00                	push   0x0
c0003349:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000334d:	e8 5d f7 ff ff       	call   c0002aaf <change_bitmap>
c0003352:	83 c4 10             	add    esp,0x10
c0003355:	85 c0                	test   eax,eax
c0003357:	75 3d                	jne    c0003396 <remove_chain+0x140>
c0003359:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000335d:	e9 73 ff ff ff       	jmp    c00032d5 <remove_chain+0x7f>
c0003362:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003367:	75 8d                	jne    c00032f6 <remove_chain+0xa0>
c0003369:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c000336d:	eb 25                	jmp    c0003394 <remove_chain+0x13e>
c000336f:	8d 53 01             	lea    edx,[ebx+0x1]
c0003372:	89 c3                	mov    ebx,eax
c0003374:	39 c2                	cmp    edx,eax
c0003376:	74 88                	je     c0003300 <remove_chain+0xaa>
c0003378:	eb 1a                	jmp    c0003394 <remove_chain+0x13e>
c000337a:	3c 03                	cmp    al,0x3
c000337c:	75 16                	jne    c0003394 <remove_chain+0x13e>
c000337e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0003381:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003385:	77 0d                	ja     c0003394 <remove_chain+0x13e>
c0003387:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c000338a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000338e:	72 04                	jb     c0003394 <remove_chain+0x13e>
c0003390:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c0003394:	31 c0                	xor    eax,eax
c0003396:	83 c4 1c             	add    esp,0x1c
c0003399:	5b                   	pop    ebx
c000339a:	5e                   	pop    esi
c000339b:	5f                   	pop    edi
c000339c:	5d                   	pop    ebp
c000339d:	c3                   	ret    

c000339e <dir_clear>:
c000339e:	55                   	push   ebp
c000339f:	57                   	push   edi
c00033a0:	56                   	push   esi
c00033a1:	89 c6                	mov    esi,eax
c00033a3:	53                   	push   ebx
c00033a4:	83 ec 1c             	sub    esp,0x1c
c00033a7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033ab:	e8 9d ed ff ff       	call   c000214d <sync_window>
c00033b0:	85 c0                	test   eax,eax
c00033b2:	0f 85 de 00 00 00    	jne    c0003496 <dir_clear+0xf8>
c00033b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033bc:	89 f0                	mov    eax,esi
c00033be:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033c1:	e8 d6 e8 ff ff       	call   c0001c9c <clst2sect>
c00033c6:	b9 00 02 00 00       	mov    ecx,0x200
c00033cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00033cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00033d3:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00033d6:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00033d9:	89 e8                	mov    eax,ebp
c00033db:	31 d2                	xor    edx,edx
c00033dd:	e8 b5 e6 ff ff       	call   c0001a97 <mem_set>
c00033e2:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c00033e6:	c1 e3 09             	shl    ebx,0x9
c00033e9:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c00033ef:	76 1f                	jbe    c0003410 <dir_clear+0x72>
c00033f1:	bb 00 80 00 00       	mov    ebx,0x8000
c00033f6:	eb 18                	jmp    c0003410 <dir_clear+0x72>
c00033f8:	83 ec 0c             	sub    esp,0xc
c00033fb:	53                   	push   ebx
c00033fc:	e8 35 4e 00 00       	call   c0008236 <ff_memalloc>
c0003401:	83 c4 10             	add    esp,0x10
c0003404:	89 c7                	mov    edi,eax
c0003406:	85 c0                	test   eax,eax
c0003408:	0f 85 8f 00 00 00    	jne    c000349d <dir_clear+0xff>
c000340e:	d1 eb                	shr    ebx,1
c0003410:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003416:	77 e0                	ja     c00033f8 <dir_clear+0x5a>
c0003418:	31 db                	xor    ebx,ebx
c000341a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000341e:	39 d8                	cmp    eax,ebx
c0003420:	76 66                	jbe    c0003488 <dir_clear+0xea>
c0003422:	83 ec 0c             	sub    esp,0xc
c0003425:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003429:	6a 01                	push   0x1
c000342b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000342f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003433:	55                   	push   ebp
c0003434:	50                   	push   eax
c0003435:	e8 94 e5 ff ff       	call   c00019ce <disk_write>
c000343a:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000343f:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003444:	83 c4 20             	add    esp,0x20
c0003447:	85 c0                	test   eax,eax
c0003449:	75 3d                	jne    c0003488 <dir_clear+0xea>
c000344b:	43                   	inc    ebx
c000344c:	eb cc                	jmp    c000341a <dir_clear+0x7c>
c000344e:	83 ec 0c             	sub    esp,0xc
c0003451:	31 d2                	xor    edx,edx
c0003453:	55                   	push   ebp
c0003454:	89 d8                	mov    eax,ebx
c0003456:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000345a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000345e:	52                   	push   edx
c000345f:	50                   	push   eax
c0003460:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003464:	57                   	push   edi
c0003465:	50                   	push   eax
c0003466:	e8 63 e5 ff ff       	call   c00019ce <disk_write>
c000346b:	83 c4 20             	add    esp,0x20
c000346e:	85 c0                	test   eax,eax
c0003470:	75 0a                	jne    c000347c <dir_clear+0xde>
c0003472:	01 eb                	add    ebx,ebp
c0003474:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003478:	39 d8                	cmp    eax,ebx
c000347a:	77 d2                	ja     c000344e <dir_clear+0xb0>
c000347c:	83 ec 0c             	sub    esp,0xc
c000347f:	57                   	push   edi
c0003480:	e8 c7 4d 00 00       	call   c000824c <ff_memfree>
c0003485:	83 c4 10             	add    esp,0x10
c0003488:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000348c:	39 d8                	cmp    eax,ebx
c000348e:	0f 95 c0             	setne  al
c0003491:	0f b6 c0             	movzx  eax,al
c0003494:	eb 19                	jmp    c00034af <dir_clear+0x111>
c0003496:	b8 01 00 00 00       	mov    eax,0x1
c000349b:	eb 12                	jmp    c00034af <dir_clear+0x111>
c000349d:	89 d9                	mov    ecx,ebx
c000349f:	31 d2                	xor    edx,edx
c00034a1:	c1 eb 09             	shr    ebx,0x9
c00034a4:	e8 ee e5 ff ff       	call   c0001a97 <mem_set>
c00034a9:	89 dd                	mov    ebp,ebx
c00034ab:	31 db                	xor    ebx,ebx
c00034ad:	eb c5                	jmp    c0003474 <dir_clear+0xd6>
c00034af:	83 c4 1c             	add    esp,0x1c
c00034b2:	5b                   	pop    ebx
c00034b3:	5e                   	pop    esi
c00034b4:	5f                   	pop    edi
c00034b5:	5d                   	pop    ebp
c00034b6:	c3                   	ret    

c00034b7 <dir_next>:
c00034b7:	55                   	push   ebp
c00034b8:	57                   	push   edi
c00034b9:	56                   	push   esi
c00034ba:	53                   	push   ebx
c00034bb:	89 c3                	mov    ebx,eax
c00034bd:	83 ec 1c             	sub    esp,0x1c
c00034c0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00034c6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00034c9:	8d 78 20             	lea    edi,[eax+0x20]
c00034cc:	31 c0                	xor    eax,eax
c00034ce:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00034d2:	0f 94 c0             	sete   al
c00034d5:	48                   	dec    eax
c00034d6:	25 00 00 20 f0       	and    eax,0xf0200000
c00034db:	05 00 00 00 10       	add    eax,0x10000000
c00034e0:	39 f8                	cmp    eax,edi
c00034e2:	77 0e                	ja     c00034f2 <dir_next+0x3b>
c00034e4:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034eb:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034f2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00034f5:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00034f8:	b8 04 00 00 00       	mov    eax,0x4
c00034fd:	89 ce                	mov    esi,ecx
c00034ff:	09 d6                	or     esi,edx
c0003501:	0f 84 da 00 00 00    	je     c00035e1 <dir_next+0x12a>
c0003507:	89 f8                	mov    eax,edi
c0003509:	25 ff 01 00 00       	and    eax,0x1ff
c000350e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003512:	0f 85 b9 00 00 00    	jne    c00035d1 <dir_next+0x11a>
c0003518:	83 c2 01             	add    edx,0x1
c000351b:	83 d1 00             	adc    ecx,0x0
c000351e:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003521:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003524:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003527:	85 d2                	test   edx,edx
c0003529:	75 29                	jne    c0003554 <dir_next+0x9d>
c000352b:	89 fa                	mov    edx,edi
c000352d:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003531:	c1 ea 05             	shr    edx,0x5
c0003534:	39 c2                	cmp    edx,eax
c0003536:	0f 82 95 00 00 00    	jb     c00035d1 <dir_next+0x11a>
c000353c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003543:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000354a:	b8 04 00 00 00       	mov    eax,0x4
c000354f:	e9 8d 00 00 00       	jmp    c00035e1 <dir_next+0x12a>
c0003554:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003558:	89 f9                	mov    ecx,edi
c000355a:	48                   	dec    eax
c000355b:	c1 e9 09             	shr    ecx,0x9
c000355e:	85 c8                	test   eax,ecx
c0003560:	75 6f                	jne    c00035d1 <dir_next+0x11a>
c0003562:	89 d8                	mov    eax,ebx
c0003564:	e8 00 f8 ff ff       	call   c0002d69 <get_fat>
c0003569:	89 c6                	mov    esi,eax
c000356b:	83 f8 01             	cmp    eax,0x1
c000356e:	77 07                	ja     c0003577 <dir_next+0xc0>
c0003570:	b8 02 00 00 00       	mov    eax,0x2
c0003575:	eb 6a                	jmp    c00035e1 <dir_next+0x12a>
c0003577:	83 f8 ff             	cmp    eax,0xffffffff
c000357a:	75 07                	jne    c0003583 <dir_next+0xcc>
c000357c:	b8 01 00 00 00       	mov    eax,0x1
c0003581:	eb 5e                	jmp    c00035e1 <dir_next+0x12a>
c0003583:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003586:	77 37                	ja     c00035bf <dir_next+0x108>
c0003588:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000358d:	74 ad                	je     c000353c <dir_next+0x85>
c000358f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003592:	89 d8                	mov    eax,ebx
c0003594:	e8 be fa ff ff       	call   c0003057 <create_chain>
c0003599:	89 c6                	mov    esi,eax
c000359b:	b8 07 00 00 00       	mov    eax,0x7
c00035a0:	85 f6                	test   esi,esi
c00035a2:	74 3d                	je     c00035e1 <dir_next+0x12a>
c00035a4:	83 fe 01             	cmp    esi,0x1
c00035a7:	74 c7                	je     c0003570 <dir_next+0xb9>
c00035a9:	83 fe ff             	cmp    esi,0xffffffff
c00035ac:	74 ce                	je     c000357c <dir_next+0xc5>
c00035ae:	89 f2                	mov    edx,esi
c00035b0:	89 e8                	mov    eax,ebp
c00035b2:	e8 e7 fd ff ff       	call   c000339e <dir_clear>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 c1                	jne    c000357c <dir_next+0xc5>
c00035bb:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035bf:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035c2:	89 f2                	mov    edx,esi
c00035c4:	89 e8                	mov    eax,ebp
c00035c6:	e8 d1 e6 ff ff       	call   c0001c9c <clst2sect>
c00035cb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00035ce:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00035d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035d5:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00035d8:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c00035dc:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00035df:	31 c0                	xor    eax,eax
c00035e1:	83 c4 1c             	add    esp,0x1c
c00035e4:	5b                   	pop    ebx
c00035e5:	5e                   	pop    esi
c00035e6:	5f                   	pop    edi
c00035e7:	5d                   	pop    ebp
c00035e8:	c3                   	ret    

c00035e9 <load_xdir>:
c00035e9:	55                   	push   ebp
c00035ea:	57                   	push   edi
c00035eb:	56                   	push   esi
c00035ec:	89 c6                	mov    esi,eax
c00035ee:	53                   	push   ebx
c00035ef:	83 ec 1c             	sub    esp,0x1c
c00035f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00035f4:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035f7:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035fa:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035fd:	e8 df eb ff ff       	call   c00021e1 <move_window>
c0003602:	89 c3                	mov    ebx,eax
c0003604:	85 c0                	test   eax,eax
c0003606:	0f 85 0c 01 00 00    	jne    c0003718 <load_xdir+0x12f>
c000360c:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000360f:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003612:	0f 85 fb 00 00 00    	jne    c0003713 <load_xdir+0x12a>
c0003618:	89 f8                	mov    eax,edi
c000361a:	b9 20 00 00 00       	mov    ecx,0x20
c000361f:	e8 5e e4 ff ff       	call   c0001a82 <mem_cpy>
c0003624:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003628:	40                   	inc    eax
c0003629:	c1 e0 05             	shl    eax,0x5
c000362c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003630:	83 e8 60             	sub    eax,0x60
c0003633:	3d 00 02 00 00       	cmp    eax,0x200
c0003638:	0f 87 d5 00 00 00    	ja     c0003713 <load_xdir+0x12a>
c000363e:	31 d2                	xor    edx,edx
c0003640:	89 f0                	mov    eax,esi
c0003642:	e8 70 fe ff ff       	call   c00034b7 <dir_next>
c0003647:	89 c3                	mov    ebx,eax
c0003649:	83 f8 04             	cmp    eax,0x4
c000364c:	0f 84 c1 00 00 00    	je     c0003713 <load_xdir+0x12a>
c0003652:	85 c0                	test   eax,eax
c0003654:	0f 85 be 00 00 00    	jne    c0003718 <load_xdir+0x12f>
c000365a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000365d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003660:	8b 06                	mov    eax,DWORD PTR [esi]
c0003662:	e8 7a eb ff ff       	call   c00021e1 <move_window>
c0003667:	89 c3                	mov    ebx,eax
c0003669:	85 c0                	test   eax,eax
c000366b:	0f 85 a7 00 00 00    	jne    c0003718 <load_xdir+0x12f>
c0003671:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003674:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003677:	0f 85 96 00 00 00    	jne    c0003713 <load_xdir+0x12a>
c000367d:	8d 47 20             	lea    eax,[edi+0x20]
c0003680:	b9 20 00 00 00       	mov    ecx,0x20
c0003685:	e8 f8 e3 ff ff       	call   c0001a82 <mem_cpy>
c000368a:	31 d2                	xor    edx,edx
c000368c:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c0003690:	b9 0f 00 00 00       	mov    ecx,0xf
c0003695:	83 c0 2c             	add    eax,0x2c
c0003698:	f7 f1                	div    ecx
c000369a:	c1 e0 05             	shl    eax,0x5
c000369d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036a1:	77 70                	ja     c0003713 <load_xdir+0x12a>
c00036a3:	bd 40 00 00 00       	mov    ebp,0x40
c00036a8:	31 d2                	xor    edx,edx
c00036aa:	89 f0                	mov    eax,esi
c00036ac:	e8 06 fe ff ff       	call   c00034b7 <dir_next>
c00036b1:	89 c3                	mov    ebx,eax
c00036b3:	83 f8 04             	cmp    eax,0x4
c00036b6:	74 5b                	je     c0003713 <load_xdir+0x12a>
c00036b8:	85 c0                	test   eax,eax
c00036ba:	75 5c                	jne    c0003718 <load_xdir+0x12f>
c00036bc:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036bf:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036c2:	8b 06                	mov    eax,DWORD PTR [esi]
c00036c4:	e8 18 eb ff ff       	call   c00021e1 <move_window>
c00036c9:	89 c3                	mov    ebx,eax
c00036cb:	85 c0                	test   eax,eax
c00036cd:	75 49                	jne    c0003718 <load_xdir+0x12f>
c00036cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036d2:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00036d5:	75 3c                	jne    c0003713 <load_xdir+0x12a>
c00036d7:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00036dd:	77 0d                	ja     c00036ec <load_xdir+0x103>
c00036df:	8d 04 2f             	lea    eax,[edi+ebp*1]
c00036e2:	b9 20 00 00 00       	mov    ecx,0x20
c00036e7:	e8 96 e3 ff ff       	call   c0001a82 <mem_cpy>
c00036ec:	83 c5 20             	add    ebp,0x20
c00036ef:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c00036f3:	77 b3                	ja     c00036a8 <load_xdir+0xbf>
c00036f5:	81 fd 60 02 00 00    	cmp    ebp,0x260
c00036fb:	77 1b                	ja     c0003718 <load_xdir+0x12f>
c00036fd:	89 f8                	mov    eax,edi
c00036ff:	e8 cd e7 ff ff       	call   c0001ed1 <xdir_sum>
c0003704:	89 c1                	mov    ecx,eax
c0003706:	8d 47 02             	lea    eax,[edi+0x2]
c0003709:	e8 f5 e2 ff ff       	call   c0001a03 <ld_word>
c000370e:	66 39 c1             	cmp    cx,ax
c0003711:	74 05                	je     c0003718 <load_xdir+0x12f>
c0003713:	bb 02 00 00 00       	mov    ebx,0x2
c0003718:	83 c4 1c             	add    esp,0x1c
c000371b:	89 d8                	mov    eax,ebx
c000371d:	5b                   	pop    ebx
c000371e:	5e                   	pop    esi
c000371f:	5f                   	pop    edi
c0003720:	5d                   	pop    ebp
c0003721:	c3                   	ret    

c0003722 <load_obj_xdir>:
c0003722:	53                   	push   ebx
c0003723:	89 c3                	mov    ebx,eax
c0003725:	83 ec 08             	sub    esp,0x8
c0003728:	8b 02                	mov    eax,DWORD PTR [edx]
c000372a:	89 03                	mov    DWORD PTR [ebx],eax
c000372c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000372f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003732:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003735:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003738:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000373b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003742:	30 c0                	xor    al,al
c0003744:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000374b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000374e:	89 d8                	mov    eax,ebx
c0003750:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003753:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003756:	e8 04 f8 ff ff       	call   c0002f5f <dir_sdi>
c000375b:	85 c0                	test   eax,eax
c000375d:	75 0b                	jne    c000376a <load_obj_xdir+0x48>
c000375f:	89 d8                	mov    eax,ebx
c0003761:	83 c4 08             	add    esp,0x8
c0003764:	5b                   	pop    ebx
c0003765:	e9 7f fe ff ff       	jmp    c00035e9 <load_xdir>
c000376a:	83 c4 08             	add    esp,0x8
c000376d:	5b                   	pop    ebx
c000376e:	c3                   	ret    

c000376f <dir_read>:
c000376f:	55                   	push   ebp
c0003770:	bd 04 00 00 00       	mov    ebp,0x4
c0003775:	57                   	push   edi
c0003776:	56                   	push   esi
c0003777:	be ff ff ff ff       	mov    esi,0xffffffff
c000377c:	53                   	push   ebx
c000377d:	89 c3                	mov    ebx,eax
c000377f:	83 ec 1c             	sub    esp,0x1c
c0003782:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003786:	8b 38                	mov    edi,DWORD PTR [eax]
c0003788:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000378d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003790:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003793:	89 c8                	mov    eax,ecx
c0003795:	09 d0                	or     eax,edx
c0003797:	0f 84 25 01 00 00    	je     c00038c2 <dir_read+0x153>
c000379d:	89 f8                	mov    eax,edi
c000379f:	e8 3d ea ff ff       	call   c00021e1 <move_window>
c00037a4:	89 c5                	mov    ebp,eax
c00037a6:	85 c0                	test   eax,eax
c00037a8:	0f 85 23 01 00 00    	jne    c00038d1 <dir_read+0x162>
c00037ae:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037b1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037b3:	84 c9                	test   cl,cl
c00037b5:	0f 84 11 01 00 00    	je     c00038cc <dir_read+0x15d>
c00037bb:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037be:	75 48                	jne    c0003808 <dir_read+0x99>
c00037c0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037c5:	74 10                	je     c00037d7 <dir_read+0x68>
c00037c7:	80 f9 83             	cmp    cl,0x83
c00037ca:	0f 85 dd 00 00 00    	jne    c00038ad <dir_read+0x13e>
c00037d0:	31 ed                	xor    ebp,ebp
c00037d2:	e9 08 01 00 00       	jmp    c00038df <dir_read+0x170>
c00037d7:	80 f9 85             	cmp    cl,0x85
c00037da:	0f 85 cd 00 00 00    	jne    c00038ad <dir_read+0x13e>
c00037e0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037e3:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037e6:	89 d8                	mov    eax,ebx
c00037e8:	e8 fc fd ff ff       	call   c00035e9 <load_xdir>
c00037ed:	89 c5                	mov    ebp,eax
c00037ef:	85 c0                	test   eax,eax
c00037f1:	0f 85 da 00 00 00    	jne    c00038d1 <dir_read+0x162>
c00037f7:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00037fa:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00037fd:	83 e0 3f             	and    eax,0x3f
c0003800:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003803:	e9 d7 00 00 00       	jmp    c00038df <dir_read+0x170>
c0003808:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000380b:	83 e0 3f             	and    eax,0x3f
c000380e:	80 f9 2e             	cmp    cl,0x2e
c0003811:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003815:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003818:	0f 84 8a 00 00 00    	je     c00038a8 <dir_read+0x139>
c000381e:	80 f9 e5             	cmp    cl,0xe5
c0003821:	0f 84 81 00 00 00    	je     c00038a8 <dir_read+0x139>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	83 e0 1f             	and    eax,0x1f
c000382e:	83 f8 08             	cmp    eax,0x8
c0003831:	0f 94 c0             	sete   al
c0003834:	0f b6 c0             	movzx  eax,al
c0003837:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000383b:	75 6b                	jne    c00038a8 <dir_read+0x139>
c000383d:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003842:	75 44                	jne    c0003888 <dir_read+0x119>
c0003844:	f6 c1 40             	test   cl,0x40
c0003847:	74 12                	je     c000385b <dir_read+0xec>
c0003849:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000384c:	83 e1 bf             	and    ecx,0xffffffbf
c000384f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003853:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003856:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003859:	eb 06                	jmp    c0003861 <dir_read+0xf2>
c000385b:	89 f0                	mov    eax,esi
c000385d:	38 c8                	cmp    al,cl
c000385f:	75 47                	jne    c00038a8 <dir_read+0x139>
c0003861:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003865:	be ff ff ff ff       	mov    esi,0xffffffff
c000386a:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c000386d:	75 3e                	jne    c00038ad <dir_read+0x13e>
c000386f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003873:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003876:	e8 8a e4 ff ff       	call   c0001d05 <pick_lfn>
c000387b:	85 c0                	test   eax,eax
c000387d:	74 2e                	je     c00038ad <dir_read+0x13e>
c000387f:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003883:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003886:	eb 25                	jmp    c00038ad <dir_read+0x13e>
c0003888:	89 f0                	mov    eax,esi
c000388a:	84 c0                	test   al,al
c000388c:	75 11                	jne    c000389f <dir_read+0x130>
c000388e:	89 d0                	mov    eax,edx
c0003890:	e8 2a e6 ff ff       	call   c0001ebf <sum_sfn>
c0003895:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003899:	0f 84 31 ff ff ff    	je     c00037d0 <dir_read+0x61>
c000389f:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038a6:	eb 37                	jmp    c00038df <dir_read+0x170>
c00038a8:	be ff ff ff ff       	mov    esi,0xffffffff
c00038ad:	31 d2                	xor    edx,edx
c00038af:	89 d8                	mov    eax,ebx
c00038b1:	e8 01 fc ff ff       	call   c00034b7 <dir_next>
c00038b6:	89 c5                	mov    ebp,eax
c00038b8:	85 c0                	test   eax,eax
c00038ba:	0f 84 cd fe ff ff    	je     c000378d <dir_read+0x1e>
c00038c0:	eb 0f                	jmp    c00038d1 <dir_read+0x162>
c00038c2:	85 ed                	test   ebp,ebp
c00038c4:	0f 84 06 ff ff ff    	je     c00037d0 <dir_read+0x61>
c00038ca:	eb 05                	jmp    c00038d1 <dir_read+0x162>
c00038cc:	bd 04 00 00 00       	mov    ebp,0x4
c00038d1:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00038d8:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00038df:	83 c4 1c             	add    esp,0x1c
c00038e2:	89 e8                	mov    eax,ebp
c00038e4:	5b                   	pop    ebx
c00038e5:	5e                   	pop    esi
c00038e6:	5f                   	pop    edi
c00038e7:	5d                   	pop    ebp
c00038e8:	c3                   	ret    

c00038e9 <dir_alloc>:
c00038e9:	55                   	push   ebp
c00038ea:	89 d5                	mov    ebp,edx
c00038ec:	57                   	push   edi
c00038ed:	31 d2                	xor    edx,edx
c00038ef:	56                   	push   esi
c00038f0:	53                   	push   ebx
c00038f1:	89 c3                	mov    ebx,eax
c00038f3:	83 ec 0c             	sub    esp,0xc
c00038f6:	8b 38                	mov    edi,DWORD PTR [eax]
c00038f8:	e8 62 f6 ff ff       	call   c0002f5f <dir_sdi>
c00038fd:	85 c0                	test   eax,eax
c00038ff:	75 4e                	jne    c000394f <dir_alloc+0x66>
c0003901:	31 f6                	xor    esi,esi
c0003903:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003906:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003909:	89 f8                	mov    eax,edi
c000390b:	e8 d1 e8 ff ff       	call   c00021e1 <move_window>
c0003910:	85 c0                	test   eax,eax
c0003912:	75 3b                	jne    c000394f <dir_alloc+0x66>
c0003914:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003917:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000391a:	8a 12                	mov    dl,BYTE PTR [edx]
c000391c:	75 07                	jne    c0003925 <dir_alloc+0x3c>
c000391e:	f7 d2                	not    edx
c0003920:	c0 ea 07             	shr    dl,0x7
c0003923:	eb 0d                	jmp    c0003932 <dir_alloc+0x49>
c0003925:	84 d2                	test   dl,dl
c0003927:	0f 94 c1             	sete   cl
c000392a:	80 fa e5             	cmp    dl,0xe5
c000392d:	0f 94 c2             	sete   dl
c0003930:	09 ca                	or     edx,ecx
c0003932:	84 d2                	test   dl,dl
c0003934:	74 07                	je     c000393d <dir_alloc+0x54>
c0003936:	46                   	inc    esi
c0003937:	39 ee                	cmp    esi,ebp
c0003939:	75 04                	jne    c000393f <dir_alloc+0x56>
c000393b:	eb 1c                	jmp    c0003959 <dir_alloc+0x70>
c000393d:	31 f6                	xor    esi,esi
c000393f:	ba 01 00 00 00       	mov    edx,0x1
c0003944:	89 d8                	mov    eax,ebx
c0003946:	e8 6c fb ff ff       	call   c00034b7 <dir_next>
c000394b:	85 c0                	test   eax,eax
c000394d:	74 b4                	je     c0003903 <dir_alloc+0x1a>
c000394f:	83 f8 04             	cmp    eax,0x4
c0003952:	75 05                	jne    c0003959 <dir_alloc+0x70>
c0003954:	b8 07 00 00 00       	mov    eax,0x7
c0003959:	83 c4 0c             	add    esp,0xc
c000395c:	5b                   	pop    ebx
c000395d:	5e                   	pop    esi
c000395e:	5f                   	pop    edi
c000395f:	5d                   	pop    ebp
c0003960:	c3                   	ret    

c0003961 <store_xdir>:
c0003961:	55                   	push   ebp
c0003962:	57                   	push   edi
c0003963:	89 c7                	mov    edi,eax
c0003965:	56                   	push   esi
c0003966:	53                   	push   ebx
c0003967:	83 ec 0c             	sub    esp,0xc
c000396a:	8b 00                	mov    eax,DWORD PTR [eax]
c000396c:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c000396f:	89 e8                	mov    eax,ebp
c0003971:	e8 5b e5 ff ff       	call   c0001ed1 <xdir_sum>
c0003976:	0f b7 d0             	movzx  edx,ax
c0003979:	8d 45 02             	lea    eax,[ebp+0x2]
c000397c:	e8 f4 e0 ff ff       	call   c0001a75 <st_word>
c0003981:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003985:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003988:	89 f8                	mov    eax,edi
c000398a:	e8 d0 f5 ff ff       	call   c0002f5f <dir_sdi>
c000398f:	89 c6                	mov    esi,eax
c0003991:	85 f6                	test   esi,esi
c0003993:	75 3d                	jne    c00039d2 <store_xdir+0x71>
c0003995:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003998:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c000399b:	8b 07                	mov    eax,DWORD PTR [edi]
c000399d:	e8 3f e8 ff ff       	call   c00021e1 <move_window>
c00039a2:	89 c6                	mov    esi,eax
c00039a4:	85 c0                	test   eax,eax
c00039a6:	75 2a                	jne    c00039d2 <store_xdir+0x71>
c00039a8:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039ab:	b9 20 00 00 00       	mov    ecx,0x20
c00039b0:	89 ea                	mov    edx,ebp
c00039b2:	e8 cb e0 ff ff       	call   c0001a82 <mem_cpy>
c00039b7:	8b 07                	mov    eax,DWORD PTR [edi]
c00039b9:	85 db                	test   ebx,ebx
c00039bb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039bf:	74 11                	je     c00039d2 <store_xdir+0x71>
c00039c1:	31 d2                	xor    edx,edx
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	83 c5 20             	add    ebp,0x20
c00039c8:	e8 ea fa ff ff       	call   c00034b7 <dir_next>
c00039cd:	4b                   	dec    ebx
c00039ce:	89 c6                	mov    esi,eax
c00039d0:	eb bf                	jmp    c0003991 <store_xdir+0x30>
c00039d2:	89 f0                	mov    eax,esi
c00039d4:	83 fe 02             	cmp    esi,0x2
c00039d7:	76 05                	jbe    c00039de <store_xdir+0x7d>
c00039d9:	b8 02 00 00 00       	mov    eax,0x2
c00039de:	83 c4 0c             	add    esp,0xc
c00039e1:	5b                   	pop    ebx
c00039e2:	5e                   	pop    esi
c00039e3:	5f                   	pop    edi
c00039e4:	5d                   	pop    ebp
c00039e5:	c3                   	ret    

c00039e6 <dir_remove>:
c00039e6:	57                   	push   edi
c00039e7:	56                   	push   esi
c00039e8:	53                   	push   ebx
c00039e9:	89 c3                	mov    ebx,eax
c00039eb:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00039ee:	8b 30                	mov    esi,DWORD PTR [eax]
c00039f0:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c00039f3:	83 fa ff             	cmp    edx,0xffffffff
c00039f6:	74 09                	je     c0003a01 <dir_remove+0x1b>
c00039f8:	e8 62 f5 ff ff       	call   c0002f5f <dir_sdi>
c00039fd:	85 c0                	test   eax,eax
c00039ff:	75 41                	jne    c0003a42 <dir_remove+0x5c>
c0003a01:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a04:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a07:	89 f0                	mov    eax,esi
c0003a09:	e8 d3 e7 ff ff       	call   c00021e1 <move_window>
c0003a0e:	85 c0                	test   eax,eax
c0003a10:	75 26                	jne    c0003a38 <dir_remove+0x52>
c0003a12:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a15:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a18:	75 05                	jne    c0003a1f <dir_remove+0x39>
c0003a1a:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a1d:	eb 03                	jmp    c0003a22 <dir_remove+0x3c>
c0003a1f:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a22:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a26:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a29:	73 17                	jae    c0003a42 <dir_remove+0x5c>
c0003a2b:	31 d2                	xor    edx,edx
c0003a2d:	89 d8                	mov    eax,ebx
c0003a2f:	e8 83 fa ff ff       	call   c00034b7 <dir_next>
c0003a34:	85 c0                	test   eax,eax
c0003a36:	74 c9                	je     c0003a01 <dir_remove+0x1b>
c0003a38:	83 f8 04             	cmp    eax,0x4
c0003a3b:	75 05                	jne    c0003a42 <dir_remove+0x5c>
c0003a3d:	b8 02 00 00 00       	mov    eax,0x2
c0003a42:	5b                   	pop    ebx
c0003a43:	5e                   	pop    esi
c0003a44:	5f                   	pop    edi
c0003a45:	c3                   	ret    

c0003a46 <create_name>:
c0003a46:	55                   	push   ebp
c0003a47:	89 d5                	mov    ebp,edx
c0003a49:	57                   	push   edi
c0003a4a:	89 c7                	mov    edi,eax
c0003a4c:	56                   	push   esi
c0003a4d:	31 f6                	xor    esi,esi
c0003a4f:	53                   	push   ebx
c0003a50:	83 ec 3c             	sub    esp,0x3c
c0003a53:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a55:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a59:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a5b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a5e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003a62:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003a66:	e8 72 e0 ff ff       	call   c0001add <tchar2uni>
c0003a6b:	89 c3                	mov    ebx,eax
c0003a6d:	83 f8 ff             	cmp    eax,0xffffffff
c0003a70:	75 0a                	jne    c0003a7c <create_name+0x36>
c0003a72:	b8 06 00 00 00       	mov    eax,0x6
c0003a77:	e9 9e 02 00 00       	jmp    c0003d1a <create_name+0x2d4>
c0003a7c:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a81:	76 0c                	jbe    c0003a8f <create_name+0x49>
c0003a83:	c1 e8 10             	shr    eax,0x10
c0003a86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a8a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a8e:	46                   	inc    esi
c0003a8f:	66 83 fb 1f          	cmp    bx,0x1f
c0003a93:	76 4f                	jbe    c0003ae4 <create_name+0x9e>
c0003a95:	66 83 fb 5c          	cmp    bx,0x5c
c0003a99:	74 35                	je     c0003ad0 <create_name+0x8a>
c0003a9b:	66 83 fb 2f          	cmp    bx,0x2f
c0003a9f:	74 2f                	je     c0003ad0 <create_name+0x8a>
c0003aa1:	66 83 fb 7f          	cmp    bx,0x7f
c0003aa5:	77 11                	ja     c0003ab8 <create_name+0x72>
c0003aa7:	0f b7 d3             	movzx  edx,bx
c0003aaa:	b8 72 64 02 c0       	mov    eax,0xc0026472
c0003aaf:	e8 11 e0 ff ff       	call   c0001ac5 <chk_chr>
c0003ab4:	85 c0                	test   eax,eax
c0003ab6:	75 ba                	jne    c0003a72 <create_name+0x2c>
c0003ab8:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003abe:	77 b2                	ja     c0003a72 <create_name+0x2c>
c0003ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ac4:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003ac8:	46                   	inc    esi
c0003ac9:	eb 97                	jmp    c0003a62 <create_name+0x1c>
c0003acb:	40                   	inc    eax
c0003acc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ad0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003ad4:	8a 10                	mov    dl,BYTE PTR [eax]
c0003ad6:	80 fa 2f             	cmp    dl,0x2f
c0003ad9:	74 f0                	je     c0003acb <create_name+0x85>
c0003adb:	80 fa 5c             	cmp    dl,0x5c
c0003ade:	74 eb                	je     c0003acb <create_name+0x85>
c0003ae0:	31 db                	xor    ebx,ebx
c0003ae2:	eb 02                	jmp    c0003ae6 <create_name+0xa0>
c0003ae4:	b3 04                	mov    bl,0x4
c0003ae6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003aea:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003aed:	85 f6                	test   esi,esi
c0003aef:	74 18                	je     c0003b09 <create_name+0xc3>
c0003af1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003af5:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003afa:	66 83 f8 20          	cmp    ax,0x20
c0003afe:	74 06                	je     c0003b06 <create_name+0xc0>
c0003b00:	66 83 f8 2e          	cmp    ax,0x2e
c0003b04:	75 03                	jne    c0003b09 <create_name+0xc3>
c0003b06:	4e                   	dec    esi
c0003b07:	eb e4                	jmp    c0003aed <create_name+0xa7>
c0003b09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b0d:	31 ed                	xor    ebp,ebp
c0003b0f:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b15:	85 f6                	test   esi,esi
c0003b17:	0f 84 55 ff ff ff    	je     c0003a72 <create_name+0x2c>
c0003b1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b21:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b24:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b28:	66 83 f8 20          	cmp    ax,0x20
c0003b2c:	75 04                	jne    c0003b32 <create_name+0xec>
c0003b2e:	89 d5                	mov    ebp,edx
c0003b30:	eb eb                	jmp    c0003b1d <create_name+0xd7>
c0003b32:	85 ed                	test   ebp,ebp
c0003b34:	75 06                	jne    c0003b3c <create_name+0xf6>
c0003b36:	66 83 f8 2e          	cmp    ax,0x2e
c0003b3a:	75 08                	jne    c0003b44 <create_name+0xfe>
c0003b3c:	83 cb 03             	or     ebx,0x3
c0003b3f:	eb 03                	jmp    c0003b44 <create_name+0xfe>
c0003b41:	4e                   	dec    esi
c0003b42:	74 0c                	je     c0003b50 <create_name+0x10a>
c0003b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b48:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b4e:	75 f1                	jne    c0003b41 <create_name+0xfb>
c0003b50:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b55:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b58:	ba 20 00 00 00       	mov    edx,0x20
c0003b5d:	e8 35 df ff ff       	call   c0001a97 <mem_set>
c0003b62:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003b6a:	31 c9                	xor    ecx,ecx
c0003b6c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003b71:	8d 45 01             	lea    eax,[ebp+0x1]
c0003b74:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b7c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b80:	66 85 ed             	test   bp,bp
c0003b83:	0f 84 30 01 00 00    	je     c0003cb9 <create_name+0x273>
c0003b89:	66 83 fd 20          	cmp    bp,0x20
c0003b8d:	74 10                	je     c0003b9f <create_name+0x159>
c0003b8f:	66 83 fd 2e          	cmp    bp,0x2e
c0003b93:	75 13                	jne    c0003ba8 <create_name+0x162>
c0003b95:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b99:	0f 84 6b 01 00 00    	je     c0003d0a <create_name+0x2c4>
c0003b9f:	83 cb 03             	or     ebx,0x3
c0003ba2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003ba6:	eb c9                	jmp    c0003b71 <create_name+0x12b>
c0003ba8:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bac:	73 0b                	jae    c0003bb9 <create_name+0x173>
c0003bae:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bb2:	75 47                	jne    c0003bfb <create_name+0x1b5>
c0003bb4:	e9 51 01 00 00       	jmp    c0003d0a <create_name+0x2c4>
c0003bb9:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003bbe:	75 10                	jne    c0003bd0 <create_name+0x18a>
c0003bc0:	83 cb 03             	or     ebx,0x3
c0003bc3:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bcb:	e9 e9 00 00 00       	jmp    c0003cb9 <create_name+0x273>
c0003bd0:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bd4:	74 0d                	je     c0003be3 <create_name+0x19d>
c0003bd6:	83 cb 03             	or     ebx,0x3
c0003bd9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bdd:	0f 87 d6 00 00 00    	ja     c0003cb9 <create_name+0x273>
c0003be3:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003be8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003bec:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bf4:	b9 08 00 00 00       	mov    ecx,0x8
c0003bf9:	eb a7                	jmp    c0003ba2 <create_name+0x15c>
c0003bfb:	66 83 fd 7f          	cmp    bp,0x7f
c0003bff:	76 68                	jbe    c0003c69 <create_name+0x223>
c0003c01:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c05:	88 da                	mov    dl,bl
c0003c07:	83 ca 02             	or     edx,0x2
c0003c0a:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c0e:	50                   	push   eax
c0003c0f:	50                   	push   eax
c0003c10:	68 b5 01 00 00       	push   0x1b5
c0003c15:	55                   	push   ebp
c0003c16:	e8 48 46 00 00       	call   c0008263 <ff_uni2oem>
c0003c1b:	83 c4 10             	add    esp,0x10
c0003c1e:	89 c5                	mov    ebp,eax
c0003c20:	a8 80                	test   al,0x80
c0003c22:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c26:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c2a:	74 0c                	je     c0003c38 <create_name+0x1f2>
c0003c2c:	83 e5 7f             	and    ebp,0x7f
c0003c2f:	0f b6 ad c0 63 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd9c40]
c0003c36:	eb 2a                	jmp    c0003c62 <create_name+0x21c>
c0003c38:	66 3d ff 00          	cmp    ax,0xff
c0003c3c:	76 24                	jbe    c0003c62 <create_name+0x21c>
c0003c3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c42:	48                   	dec    eax
c0003c43:	39 c8                	cmp    eax,ecx
c0003c45:	77 0c                	ja     c0003c53 <create_name+0x20d>
c0003c47:	83 cb 03             	or     ebx,0x3
c0003c4a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c4e:	e9 4f ff ff ff       	jmp    c0003ba2 <create_name+0x15c>
c0003c53:	89 e8                	mov    eax,ebp
c0003c55:	88 d3                	mov    bl,dl
c0003c57:	66 c1 e8 08          	shr    ax,0x8
c0003c5b:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c5f:	41                   	inc    ecx
c0003c60:	eb 4b                	jmp    c0003cad <create_name+0x267>
c0003c62:	88 d3                	mov    bl,dl
c0003c64:	66 85 ed             	test   bp,bp
c0003c67:	74 19                	je     c0003c82 <create_name+0x23c>
c0003c69:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003c6d:	0f b7 d5             	movzx  edx,bp
c0003c70:	b8 7b 64 02 c0       	mov    eax,0xc002647b
c0003c75:	e8 4b de ff ff       	call   c0001ac5 <chk_chr>
c0003c7a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c7e:	85 c0                	test   eax,eax
c0003c80:	74 0a                	je     c0003c8c <create_name+0x246>
c0003c82:	83 cb 03             	or     ebx,0x3
c0003c85:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c8a:	eb 21                	jmp    c0003cad <create_name+0x267>
c0003c8c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c8f:	66 83 f8 19          	cmp    ax,0x19
c0003c93:	77 07                	ja     c0003c9c <create_name+0x256>
c0003c95:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003c9a:	eb 11                	jmp    c0003cad <create_name+0x267>
c0003c9c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c9f:	66 83 f8 19          	cmp    ax,0x19
c0003ca3:	77 08                	ja     c0003cad <create_name+0x267>
c0003ca5:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003caa:	83 ed 20             	sub    ebp,0x20
c0003cad:	89 e8                	mov    eax,ebp
c0003caf:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cb3:	41                   	inc    ecx
c0003cb4:	e9 e9 fe ff ff       	jmp    c0003ba2 <create_name+0x15c>
c0003cb9:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003cbd:	75 04                	jne    c0003cc3 <create_name+0x27d>
c0003cbf:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cc3:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003cc8:	75 05                	jne    c0003ccf <create_name+0x289>
c0003cca:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ccf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cd3:	83 e0 0c             	and    eax,0xc
c0003cd6:	3c 0c                	cmp    al,0xc
c0003cd8:	74 0b                	je     c0003ce5 <create_name+0x29f>
c0003cda:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cde:	83 e0 03             	and    eax,0x3
c0003ce1:	3c 03                	cmp    al,0x3
c0003ce3:	75 05                	jne    c0003cea <create_name+0x2a4>
c0003ce5:	83 cb 02             	or     ebx,0x2
c0003ce8:	eb 19                	jmp    c0003d03 <create_name+0x2bd>
c0003cea:	f6 c3 02             	test   bl,0x2
c0003ced:	75 14                	jne    c0003d03 <create_name+0x2bd>
c0003cef:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003cf4:	74 03                	je     c0003cf9 <create_name+0x2b3>
c0003cf6:	83 cb 10             	or     ebx,0x10
c0003cf9:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003cfe:	74 03                	je     c0003d03 <create_name+0x2bd>
c0003d00:	83 cb 08             	or     ebx,0x8
c0003d03:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d06:	31 c0                	xor    eax,eax
c0003d08:	eb 10                	jmp    c0003d1a <create_name+0x2d4>
c0003d0a:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d0f:	0f 85 ce fe ff ff    	jne    c0003be3 <create_name+0x19d>
c0003d15:	e9 a6 fe ff ff       	jmp    c0003bc0 <create_name+0x17a>
c0003d1a:	83 c4 3c             	add    esp,0x3c
c0003d1d:	5b                   	pop    ebx
c0003d1e:	5e                   	pop    esi
c0003d1f:	5f                   	pop    edi
c0003d20:	5d                   	pop    ebp
c0003d21:	c3                   	ret    

c0003d22 <xname_sum>:
c0003d22:	56                   	push   esi
c0003d23:	53                   	push   ebx
c0003d24:	89 c6                	mov    esi,eax
c0003d26:	51                   	push   ecx
c0003d27:	31 db                	xor    ebx,ebx
c0003d29:	83 c6 02             	add    esi,0x2
c0003d2c:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d30:	66 85 c0             	test   ax,ax
c0003d33:	74 1f                	je     c0003d54 <xname_sum+0x32>
c0003d35:	83 ec 0c             	sub    esp,0xc
c0003d38:	66 d1 cb             	ror    bx,1
c0003d3b:	50                   	push   eax
c0003d3c:	e8 1e 46 00 00       	call   c000835f <ff_wtoupper>
c0003d41:	83 c4 10             	add    esp,0x10
c0003d44:	0f b6 d0             	movzx  edx,al
c0003d47:	66 c1 e8 08          	shr    ax,0x8
c0003d4b:	01 d3                	add    ebx,edx
c0003d4d:	66 d1 cb             	ror    bx,1
c0003d50:	01 c3                	add    ebx,eax
c0003d52:	eb d5                	jmp    c0003d29 <xname_sum+0x7>
c0003d54:	89 d8                	mov    eax,ebx
c0003d56:	5a                   	pop    edx
c0003d57:	5b                   	pop    ebx
c0003d58:	5e                   	pop    esi
c0003d59:	c3                   	ret    

c0003d5a <create_xdir>:
c0003d5a:	55                   	push   ebp
c0003d5b:	b9 40 00 00 00       	mov    ecx,0x40
c0003d60:	57                   	push   edi
c0003d61:	bd 01 00 00 00       	mov    ebp,0x1
c0003d66:	56                   	push   esi
c0003d67:	31 ff                	xor    edi,edi
c0003d69:	53                   	push   ebx
c0003d6a:	be 40 00 00 00       	mov    esi,0x40
c0003d6f:	89 c3                	mov    ebx,eax
c0003d71:	83 ec 1c             	sub    esp,0x1c
c0003d74:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d78:	31 d2                	xor    edx,edx
c0003d7a:	e8 18 dd ff ff       	call   c0001a97 <mem_set>
c0003d7f:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d82:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d86:	31 c9                	xor    ecx,ecx
c0003d88:	8d 46 01             	lea    eax,[esi+0x1]
c0003d8b:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d8f:	83 c6 02             	add    esi,0x2
c0003d92:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d96:	66 85 ed             	test   bp,bp
c0003d99:	74 12                	je     c0003dad <create_xdir+0x53>
c0003d9b:	0f b6 c1             	movzx  eax,cl
c0003d9e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003da2:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003da6:	66 83 fd 01          	cmp    bp,0x1
c0003daa:	80 d9 ff             	sbb    cl,0xff
c0003dad:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003db0:	0f b7 d5             	movzx  edx,bp
c0003db3:	83 c6 02             	add    esi,0x2
c0003db6:	e8 ba dc ff ff       	call   c0001a75 <st_word>
c0003dbb:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003dc1:	75 d3                	jne    c0003d96 <create_xdir+0x3c>
c0003dc3:	8d 47 01             	lea    eax,[edi+0x1]
c0003dc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dca:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003dce:	0f b6 c1             	movzx  eax,cl
c0003dd1:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003dd6:	74 07                	je     c0003ddf <create_xdir+0x85>
c0003dd8:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003ddd:	eb a9                	jmp    c0003d88 <create_xdir+0x2e>
c0003ddf:	8d 47 02             	lea    eax,[edi+0x2]
c0003de2:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003de5:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003de8:	89 d0                	mov    eax,edx
c0003dea:	e8 33 ff ff ff       	call   c0003d22 <xname_sum>
c0003def:	83 c4 1c             	add    esp,0x1c
c0003df2:	0f b7 d0             	movzx  edx,ax
c0003df5:	8d 43 24             	lea    eax,[ebx+0x24]
c0003df8:	5b                   	pop    ebx
c0003df9:	5e                   	pop    esi
c0003dfa:	5f                   	pop    edi
c0003dfb:	5d                   	pop    ebp
c0003dfc:	e9 74 dc ff ff       	jmp    c0001a75 <st_word>

c0003e01 <cmp_lfn>:
c0003e01:	55                   	push   ebp
c0003e02:	57                   	push   edi
c0003e03:	89 d7                	mov    edi,edx
c0003e05:	56                   	push   esi
c0003e06:	53                   	push   ebx
c0003e07:	83 ec 1c             	sub    esp,0x1c
c0003e0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e0e:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e11:	e8 ed db ff ff       	call   c0001a03 <ld_word>
c0003e16:	66 85 c0             	test   ax,ax
c0003e19:	74 07                	je     c0003e22 <cmp_lfn+0x21>
c0003e1b:	31 c0                	xor    eax,eax
c0003e1d:	e9 9a 00 00 00       	jmp    c0003ebc <cmp_lfn+0xbb>
c0003e22:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e24:	bd 01 00 00 00       	mov    ebp,0x1
c0003e29:	83 e3 3f             	and    ebx,0x3f
c0003e2c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e34:	4b                   	dec    ebx
c0003e35:	6b db 0d             	imul   ebx,ebx,0xd
c0003e38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e3c:	0f b6 80 40 64 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd9bc0]
c0003e43:	01 f8                	add    eax,edi
c0003e45:	e8 b9 db ff ff       	call   c0001a03 <ld_word>
c0003e4a:	66 85 ed             	test   bp,bp
c0003e4d:	89 c6                	mov    esi,eax
c0003e4f:	74 3c                	je     c0003e8d <cmp_lfn+0x8c>
c0003e51:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e57:	77 c2                	ja     c0003e1b <cmp_lfn+0x1a>
c0003e59:	83 ec 0c             	sub    esp,0xc
c0003e5c:	0f b7 c0             	movzx  eax,ax
c0003e5f:	50                   	push   eax
c0003e60:	e8 fa 44 00 00       	call   c000835f <ff_wtoupper>
c0003e65:	89 c5                	mov    ebp,eax
c0003e67:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e6a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e72:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e76:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e79:	e8 e1 44 00 00       	call   c000835f <ff_wtoupper>
c0003e7e:	83 c4 10             	add    esp,0x10
c0003e81:	39 c5                	cmp    ebp,eax
c0003e83:	75 96                	jne    c0003e1b <cmp_lfn+0x1a>
c0003e85:	89 f5                	mov    ebp,esi
c0003e87:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e8b:	eb 04                	jmp    c0003e91 <cmp_lfn+0x90>
c0003e8d:	66 46                	inc    si
c0003e8f:	75 8a                	jne    c0003e1b <cmp_lfn+0x1a>
c0003e91:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003e95:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e9a:	75 9c                	jne    c0003e38 <cmp_lfn+0x37>
c0003e9c:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e9f:	74 16                	je     c0003eb7 <cmp_lfn+0xb6>
c0003ea1:	66 85 ed             	test   bp,bp
c0003ea4:	74 11                	je     c0003eb7 <cmp_lfn+0xb6>
c0003ea6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eaa:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003eaf:	0f 94 c0             	sete   al
c0003eb2:	0f b6 c0             	movzx  eax,al
c0003eb5:	eb 05                	jmp    c0003ebc <cmp_lfn+0xbb>
c0003eb7:	b8 01 00 00 00       	mov    eax,0x1
c0003ebc:	83 c4 1c             	add    esp,0x1c
c0003ebf:	5b                   	pop    ebx
c0003ec0:	5e                   	pop    esi
c0003ec1:	5f                   	pop    edi
c0003ec2:	5d                   	pop    ebp
c0003ec3:	c3                   	ret    

c0003ec4 <dir_find>:
c0003ec4:	55                   	push   ebp
c0003ec5:	31 d2                	xor    edx,edx
c0003ec7:	57                   	push   edi
c0003ec8:	56                   	push   esi
c0003ec9:	53                   	push   ebx
c0003eca:	89 c3                	mov    ebx,eax
c0003ecc:	83 ec 1c             	sub    esp,0x1c
c0003ecf:	8b 30                	mov    esi,DWORD PTR [eax]
c0003ed1:	e8 89 f0 ff ff       	call   c0002f5f <dir_sdi>
c0003ed6:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ed9:	85 c0                	test   eax,eax
c0003edb:	0f 85 9e 01 00 00    	jne    c000407f <dir_find+0x1bb>
c0003ee1:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003ee4:	0f 85 8d 00 00 00    	jne    c0003f77 <dir_find+0xb3>
c0003eea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003eed:	e8 30 fe ff ff       	call   c0003d22 <xname_sum>
c0003ef2:	89 c7                	mov    edi,eax
c0003ef4:	31 d2                	xor    edx,edx
c0003ef6:	89 d8                	mov    eax,ebx
c0003ef8:	e8 72 f8 ff ff       	call   c000376f <dir_read>
c0003efd:	85 c0                	test   eax,eax
c0003eff:	0f 85 5e 01 00 00    	jne    c0004063 <dir_find+0x19f>
c0003f05:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f08:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f0b:	e8 f3 da ff ff       	call   c0001a03 <ld_word>
c0003f10:	66 39 f8             	cmp    ax,di
c0003f13:	75 df                	jne    c0003ef4 <dir_find+0x30>
c0003f15:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f18:	31 ed                	xor    ebp,ebp
c0003f1a:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f1e:	ba 40 00 00 00       	mov    edx,0x40
c0003f23:	89 e9                	mov    ecx,ebp
c0003f25:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f29:	0f 84 42 01 00 00    	je     c0004071 <dir_find+0x1ad>
c0003f2f:	f6 c2 1f             	test   dl,0x1f
c0003f32:	75 03                	jne    c0003f37 <dir_find+0x73>
c0003f34:	83 c2 02             	add    edx,0x2
c0003f37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f3b:	89 d0                	mov    eax,edx
c0003f3d:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f40:	e8 be da ff ff       	call   c0001a03 <ld_word>
c0003f45:	83 ec 0c             	sub    esp,0xc
c0003f48:	0f b7 c0             	movzx  eax,ax
c0003f4b:	50                   	push   eax
c0003f4c:	e8 0e 44 00 00       	call   c000835f <ff_wtoupper>
c0003f51:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f55:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f58:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003f5c:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f5f:	e8 fb 43 00 00       	call   c000835f <ff_wtoupper>
c0003f64:	83 c4 10             	add    esp,0x10
c0003f67:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f6b:	75 87                	jne    c0003ef4 <dir_find+0x30>
c0003f6d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003f71:	45                   	inc    ebp
c0003f72:	83 c2 02             	add    edx,0x2
c0003f75:	eb ac                	jmp    c0003f23 <dir_find+0x5f>
c0003f77:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f7e:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f83:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f88:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f8b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f8e:	89 f0                	mov    eax,esi
c0003f90:	e8 4c e2 ff ff       	call   c00021e1 <move_window>
c0003f95:	85 c0                	test   eax,eax
c0003f97:	0f 85 c6 00 00 00    	jne    c0004063 <dir_find+0x19f>
c0003f9d:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fa0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fa3:	84 c9                	test   cl,cl
c0003fa5:	0f 84 bd 00 00 00    	je     c0004068 <dir_find+0x1a4>
c0003fab:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fae:	88 d0                	mov    al,dl
c0003fb0:	83 e0 3f             	and    eax,0x3f
c0003fb3:	80 f9 e5             	cmp    cl,0xe5
c0003fb6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fb9:	0f 84 87 00 00 00    	je     c0004046 <dir_find+0x182>
c0003fbf:	80 e2 08             	and    dl,0x8
c0003fc2:	74 06                	je     c0003fca <dir_find+0x106>
c0003fc4:	3c 0f                	cmp    al,0xf
c0003fc6:	75 7e                	jne    c0004046 <dir_find+0x182>
c0003fc8:	eb 04                	jmp    c0003fce <dir_find+0x10a>
c0003fca:	3c 0f                	cmp    al,0xf
c0003fcc:	75 4c                	jne    c000401a <dir_find+0x156>
c0003fce:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003fd2:	75 7e                	jne    c0004052 <dir_find+0x18e>
c0003fd4:	f6 c1 40             	test   cl,0x40
c0003fd7:	74 12                	je     c0003feb <dir_find+0x127>
c0003fd9:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003fdc:	83 e1 bf             	and    ecx,0xffffffbf
c0003fdf:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003fe3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003fe6:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003fe9:	eb 06                	jmp    c0003ff1 <dir_find+0x12d>
c0003feb:	89 f8                	mov    eax,edi
c0003fed:	38 c8                	cmp    al,cl
c0003fef:	75 5c                	jne    c000404d <dir_find+0x189>
c0003ff1:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003ff5:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ffa:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003ffd:	75 53                	jne    c0004052 <dir_find+0x18e>
c0003fff:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004003:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004006:	89 ea                	mov    edx,ebp
c0004008:	e8 f4 fd ff ff       	call   c0003e01 <cmp_lfn>
c000400d:	85 c0                	test   eax,eax
c000400f:	74 41                	je     c0004052 <dir_find+0x18e>
c0004011:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004015:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004018:	eb 38                	jmp    c0004052 <dir_find+0x18e>
c000401a:	89 f8                	mov    eax,edi
c000401c:	84 c0                	test   al,al
c000401e:	75 0d                	jne    c000402d <dir_find+0x169>
c0004020:	89 e8                	mov    eax,ebp
c0004022:	e8 98 de ff ff       	call   c0001ebf <sum_sfn>
c0004027:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000402b:	74 52                	je     c000407f <dir_find+0x1bb>
c000402d:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004031:	75 13                	jne    c0004046 <dir_find+0x182>
c0004033:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004036:	b9 0b 00 00 00       	mov    ecx,0xb
c000403b:	89 e8                	mov    eax,ebp
c000403d:	e8 60 da ff ff       	call   c0001aa2 <mem_cmp>
c0004042:	85 c0                	test   eax,eax
c0004044:	74 39                	je     c000407f <dir_find+0x1bb>
c0004046:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000404d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004052:	31 d2                	xor    edx,edx
c0004054:	89 d8                	mov    eax,ebx
c0004056:	e8 5c f4 ff ff       	call   c00034b7 <dir_next>
c000405b:	85 c0                	test   eax,eax
c000405d:	0f 84 25 ff ff ff    	je     c0003f88 <dir_find+0xc4>
c0004063:	89 04 24             	mov    DWORD PTR [esp],eax
c0004066:	eb 17                	jmp    c000407f <dir_find+0x1bb>
c0004068:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000406f:	eb 0e                	jmp    c000407f <dir_find+0x1bb>
c0004071:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004074:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004079:	0f 85 75 fe ff ff    	jne    c0003ef4 <dir_find+0x30>
c000407f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004082:	83 c4 1c             	add    esp,0x1c
c0004085:	5b                   	pop    ebx
c0004086:	5e                   	pop    esi
c0004087:	5f                   	pop    edi
c0004088:	5d                   	pop    ebp
c0004089:	c3                   	ret    

c000408a <dir_register>:
c000408a:	55                   	push   ebp
c000408b:	57                   	push   edi
c000408c:	56                   	push   esi
c000408d:	be 06 00 00 00       	mov    esi,0x6
c0004092:	53                   	push   ebx
c0004093:	83 ec 6c             	sub    esp,0x6c
c0004096:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c000409a:	0f 85 62 02 00 00    	jne    c0004302 <dir_register+0x278>
c00040a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040a2:	31 ff                	xor    edi,edi
c00040a4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040a7:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040ac:	74 03                	je     c00040b1 <dir_register+0x27>
c00040ae:	47                   	inc    edi
c00040af:	eb f6                	jmp    c00040a7 <dir_register+0x1d>
c00040b1:	89 c3                	mov    ebx,eax
c00040b3:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040b7:	0f 85 e1 00 00 00    	jne    c000419e <dir_register+0x114>
c00040bd:	83 c7 0e             	add    edi,0xe
c00040c0:	b9 0f 00 00 00       	mov    ecx,0xf
c00040c5:	89 f8                	mov    eax,edi
c00040c7:	31 d2                	xor    edx,edx
c00040c9:	f7 f1                	div    ecx
c00040cb:	8d 50 02             	lea    edx,[eax+0x2]
c00040ce:	89 c7                	mov    edi,eax
c00040d0:	89 d8                	mov    eax,ebx
c00040d2:	e8 12 f8 ff ff       	call   c00038e9 <dir_alloc>
c00040d7:	89 c6                	mov    esi,eax
c00040d9:	85 c0                	test   eax,eax
c00040db:	0f 85 21 02 00 00    	jne    c0004302 <dir_register+0x278>
c00040e1:	81 c7 01 00 00 08    	add    edi,0x8000001
c00040e7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00040ea:	c1 e7 05             	shl    edi,0x5
c00040ed:	29 f8                	sub    eax,edi
c00040ef:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00040f2:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040f5:	a8 04                	test   al,0x4
c00040f7:	0f 84 91 00 00 00    	je     c000418e <dir_register+0x104>
c00040fd:	83 e0 fb             	and    eax,0xfffffffb
c0004100:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004103:	89 d8                	mov    eax,ebx
c0004105:	e8 25 ec ff ff       	call   c0002d2f <fill_first_frag>
c000410a:	85 c0                	test   eax,eax
c000410c:	0f 85 ee 01 00 00    	jne    c0004300 <dir_register+0x276>
c0004112:	83 c9 ff             	or     ecx,0xffffffff
c0004115:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004118:	89 d8                	mov    eax,ebx
c000411a:	e8 db eb ff ff       	call   c0002cfa <fill_last_frag>
c000411f:	85 c0                	test   eax,eax
c0004121:	0f 85 d9 01 00 00    	jne    c0004300 <dir_register+0x276>
c0004127:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000412b:	74 61                	je     c000418e <dir_register+0x104>
c000412d:	89 da                	mov    edx,ebx
c000412f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004133:	e8 ea f5 ff ff       	call   c0003722 <load_obj_xdir>
c0004138:	85 c0                	test   eax,eax
c000413a:	0f 85 c0 01 00 00    	jne    c0004300 <dir_register+0x276>
c0004140:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004144:	31 c9                	xor    ecx,ecx
c0004146:	c1 e2 09             	shl    edx,0x9
c0004149:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000414c:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000414f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004152:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004155:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004158:	83 c0 38             	add    eax,0x38
c000415b:	e8 1c d9 ff ff       	call   c0001a7c <st_qword>
c0004160:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004163:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004166:	83 c0 28             	add    eax,0x28
c0004169:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000416c:	e8 0b d9 ff ff       	call   c0001a7c <st_qword>
c0004171:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004174:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004177:	83 c8 01             	or     eax,0x1
c000417a:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c000417d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004181:	e8 db f7 ff ff       	call   c0003961 <store_xdir>
c0004186:	85 c0                	test   eax,eax
c0004188:	0f 85 72 01 00 00    	jne    c0004300 <dir_register+0x276>
c000418e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004191:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004194:	e8 c1 fb ff ff       	call   c0003d5a <create_xdir>
c0004199:	e9 64 01 00 00       	jmp    c0004302 <dir_register+0x278>
c000419e:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041a1:	b9 0c 00 00 00       	mov    ecx,0xc
c00041a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041aa:	89 c2                	mov    edx,eax
c00041ac:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041b0:	e8 cd d8 ff ff       	call   c0001a82 <mem_cpy>
c00041b5:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041ba:	74 58                	je     c0004214 <dir_register+0x18a>
c00041bc:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041c0:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041c8:	83 ec 0c             	sub    esp,0xc
c00041cb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041d2:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041da:	e8 24 dc ff ff       	call   c0001e03 <gen_numname>
c00041df:	89 d8                	mov    eax,ebx
c00041e1:	e8 de fc ff ff       	call   c0003ec4 <dir_find>
c00041e6:	83 c4 10             	add    esp,0x10
c00041e9:	89 c6                	mov    esi,eax
c00041eb:	85 c0                	test   eax,eax
c00041ed:	75 15                	jne    c0004204 <dir_register+0x17a>
c00041ef:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00041f3:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c00041f8:	75 ce                	jne    c00041c8 <dir_register+0x13e>
c00041fa:	be 07 00 00 00       	mov    esi,0x7
c00041ff:	e9 fe 00 00 00       	jmp    c0004302 <dir_register+0x278>
c0004204:	83 f8 04             	cmp    eax,0x4
c0004207:	0f 85 f5 00 00 00    	jne    c0004302 <dir_register+0x278>
c000420d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004211:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004214:	b9 01 00 00 00       	mov    ecx,0x1
c0004219:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000421e:	74 0f                	je     c000422f <dir_register+0x1a5>
c0004220:	b9 0d 00 00 00       	mov    ecx,0xd
c0004225:	8d 47 0c             	lea    eax,[edi+0xc]
c0004228:	31 d2                	xor    edx,edx
c000422a:	f7 f1                	div    ecx
c000422c:	8d 48 01             	lea    ecx,[eax+0x1]
c000422f:	89 ca                	mov    edx,ecx
c0004231:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004235:	89 d8                	mov    eax,ebx
c0004237:	e8 ad f6 ff ff       	call   c00038e9 <dir_alloc>
c000423c:	89 c6                	mov    esi,eax
c000423e:	85 c0                	test   eax,eax
c0004240:	0f 85 bc 00 00 00    	jne    c0004302 <dir_register+0x278>
c0004246:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000424a:	49                   	dec    ecx
c000424b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000424f:	74 6a                	je     c00042bb <dir_register+0x231>
c0004251:	89 c8                	mov    eax,ecx
c0004253:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004256:	c1 e0 05             	shl    eax,0x5
c0004259:	29 c2                	sub    edx,eax
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 fd ec ff ff       	call   c0002f5f <dir_sdi>
c0004262:	89 c6                	mov    esi,eax
c0004264:	85 c0                	test   eax,eax
c0004266:	0f 85 96 00 00 00    	jne    c0004302 <dir_register+0x278>
c000426c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004270:	e8 4a dc ff ff       	call   c0001ebf <sum_sfn>
c0004275:	0f b6 f8             	movzx  edi,al
c0004278:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000427b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 5c df ff ff       	call   c00021e1 <move_window>
c0004285:	89 c6                	mov    esi,eax
c0004287:	85 c0                	test   eax,eax
c0004289:	75 77                	jne    c0004302 <dir_register+0x278>
c000428b:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0004290:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004293:	83 ec 0c             	sub    esp,0xc
c0004296:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004299:	57                   	push   edi
c000429a:	e8 e0 da ff ff       	call   c0001d7f <put_lfn>
c000429f:	31 d2                	xor    edx,edx
c00042a1:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042a5:	89 d8                	mov    eax,ebx
c00042a7:	e8 0b f2 ff ff       	call   c00034b7 <dir_next>
c00042ac:	83 c4 10             	add    esp,0x10
c00042af:	89 c6                	mov    esi,eax
c00042b1:	85 c0                	test   eax,eax
c00042b3:	75 4d                	jne    c0004302 <dir_register+0x278>
c00042b5:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00042b9:	75 bd                	jne    c0004278 <dir_register+0x1ee>
c00042bb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042be:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042c1:	89 e8                	mov    eax,ebp
c00042c3:	e8 19 df ff ff       	call   c00021e1 <move_window>
c00042c8:	89 c6                	mov    esi,eax
c00042ca:	85 c0                	test   eax,eax
c00042cc:	75 34                	jne    c0004302 <dir_register+0x278>
c00042ce:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042d1:	b9 20 00 00 00       	mov    ecx,0x20
c00042d6:	31 d2                	xor    edx,edx
c00042d8:	e8 ba d7 ff ff       	call   c0001a97 <mem_set>
c00042dd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00042e4:	b9 0b 00 00 00       	mov    ecx,0xb
c00042e9:	e8 94 d7 ff ff       	call   c0001a82 <mem_cpy>
c00042ee:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c00042f1:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042f4:	83 e0 18             	and    eax,0x18
c00042f7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c00042fa:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042fe:	eb 02                	jmp    c0004302 <dir_register+0x278>
c0004300:	89 c6                	mov    esi,eax
c0004302:	83 c4 6c             	add    esp,0x6c
c0004305:	89 f0                	mov    eax,esi
c0004307:	5b                   	pop    ebx
c0004308:	5e                   	pop    esi
c0004309:	5f                   	pop    edi
c000430a:	5d                   	pop    ebp
c000430b:	c3                   	ret    

c000430c <sync_fs>:
c000430c:	56                   	push   esi
c000430d:	53                   	push   ebx
c000430e:	53                   	push   ebx
c000430f:	89 c3                	mov    ebx,eax
c0004311:	e8 37 de ff ff       	call   c000214d <sync_window>
c0004316:	85 c0                	test   eax,eax
c0004318:	0f 85 b1 00 00 00    	jne    c00043cf <sync_fs+0xc3>
c000431e:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004321:	0f 85 8e 00 00 00    	jne    c00043b5 <sync_fs+0xa9>
c0004327:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000432b:	0f 85 84 00 00 00    	jne    c00043b5 <sync_fs+0xa9>
c0004331:	b9 00 02 00 00       	mov    ecx,0x200
c0004336:	8d 73 54             	lea    esi,[ebx+0x54]
c0004339:	31 d2                	xor    edx,edx
c000433b:	89 f0                	mov    eax,esi
c000433d:	e8 55 d7 ff ff       	call   c0001a97 <mem_set>
c0004342:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004348:	ba 55 aa 00 00       	mov    edx,0xaa55
c000434d:	e8 23 d7 ff ff       	call   c0001a75 <st_word>
c0004352:	ba 52 52 61 41       	mov    edx,0x41615252
c0004357:	89 f0                	mov    eax,esi
c0004359:	e8 1b d7 ff ff       	call   c0001a79 <st_dword>
c000435e:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004364:	ba 72 72 41 61       	mov    edx,0x61417272
c0004369:	e8 0b d7 ff ff       	call   c0001a79 <st_dword>
c000436e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004371:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004377:	e8 fd d6 ff ff       	call   c0001a79 <st_dword>
c000437c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000437f:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004385:	e8 ef d6 ff ff       	call   c0001a79 <st_dword>
c000438a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000438d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004390:	83 c0 01             	add    eax,0x1
c0004393:	83 d2 00             	adc    edx,0x0
c0004396:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004399:	83 ec 0c             	sub    esp,0xc
c000439c:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000439f:	6a 01                	push   0x1
c00043a1:	52                   	push   edx
c00043a2:	50                   	push   eax
c00043a3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043a7:	56                   	push   esi
c00043a8:	50                   	push   eax
c00043a9:	e8 20 d6 ff ff       	call   c00019ce <disk_write>
c00043ae:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043b2:	83 c4 20             	add    esp,0x20
c00043b5:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043b9:	51                   	push   ecx
c00043ba:	6a 00                	push   0x0
c00043bc:	6a 00                	push   0x0
c00043be:	50                   	push   eax
c00043bf:	e8 20 d6 ff ff       	call   c00019e4 <disk_ioctl>
c00043c4:	83 c4 10             	add    esp,0x10
c00043c7:	85 c0                	test   eax,eax
c00043c9:	0f 95 c0             	setne  al
c00043cc:	0f b6 c0             	movzx  eax,al
c00043cf:	5a                   	pop    edx
c00043d0:	5b                   	pop    ebx
c00043d1:	5e                   	pop    esi
c00043d2:	c3                   	ret    

c00043d3 <create_partition>:
c00043d3:	55                   	push   ebp
c00043d4:	0f b6 c0             	movzx  eax,al
c00043d7:	57                   	push   edi
c00043d8:	56                   	push   esi
c00043d9:	53                   	push   ebx
c00043da:	83 ec 60             	sub    esp,0x60
c00043dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043e1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00043e5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00043e9:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00043ed:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c00043f1:	50                   	push   eax
c00043f2:	6a 01                	push   0x1
c00043f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f8:	e8 e7 d5 ff ff       	call   c00019e4 <disk_ioctl>
c00043fd:	83 c4 10             	add    esp,0x10
c0004400:	85 c0                	test   eax,eax
c0004402:	74 0a                	je     c000440e <create_partition+0x3b>
c0004404:	b8 01 00 00 00       	mov    eax,0x1
c0004409:	e9 67 05 00 00       	jmp    c0004975 <create_partition+0x5a2>
c000440e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004412:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004416:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000441a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000441e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004423:	0f 86 ed 03 00 00    	jbe    c0004816 <create_partition+0x443>
c0004429:	83 c0 df             	add    eax,0xffffffdf
c000442c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004434:	83 d2 ff             	adc    edx,0xffffffff
c0004437:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000443b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000443f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004443:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004447:	83 c0 bd             	add    eax,0xffffffbd
c000444a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004451:	83 d2 ff             	adc    edx,0xffffffff
c0004454:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004458:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000445c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004464:	be 22 00 00 00       	mov    esi,0x22
c0004469:	31 ff                	xor    edi,edi
c000446b:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004473:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000447b:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0004483:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004487:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000448d:	75 0e                	jne    c000449d <create_partition+0xca>
c000448f:	b9 00 02 00 00       	mov    ecx,0x200
c0004494:	31 d2                	xor    edx,edx
c0004496:	89 d8                	mov    eax,ebx
c0004498:	e8 fa d5 ff ff       	call   c0001a97 <mem_set>
c000449d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044a1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044a9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044ac:	0f 84 23 01 00 00    	je     c00045d5 <create_partition+0x202>
c00044b2:	89 f0                	mov    eax,esi
c00044b4:	89 fa                	mov    edx,edi
c00044b6:	05 ff 07 00 00       	add    eax,0x7ff
c00044bb:	83 d2 00             	adc    edx,0x0
c00044be:	89 c1                	mov    ecx,eax
c00044c0:	89 d7                	mov    edi,edx
c00044c2:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044c8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044cc:	89 ce                	mov    esi,ecx
c00044ce:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044d2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044d6:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044da:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00044dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00044e4:	b8 64 00 00 00       	mov    eax,0x64
c00044e9:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00044ec:	b8 00 00 00 00       	mov    eax,0x0
c00044f1:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00044f5:	72 41                	jb     c0004538 <create_partition+0x165>
c00044f7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00044fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044ff:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004503:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004508:	01 c1                	add    ecx,eax
c000450a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000450e:	f7 24 24             	mul    DWORD PTR [esp]
c0004511:	6a 00                	push   0x0
c0004513:	01 ca                	add    edx,ecx
c0004515:	6a 64                	push   0x64
c0004517:	52                   	push   edx
c0004518:	50                   	push   eax
c0004519:	e8 8e f5 01 00       	call   c0023aac <__udivdi3>
c000451e:	83 c4 10             	add    esp,0x10
c0004521:	05 ff 07 00 00       	add    eax,0x7ff
c0004526:	83 d2 00             	adc    edx,0x0
c0004529:	89 c1                	mov    ecx,eax
c000452b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000452f:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004535:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004538:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000453b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000453f:	01 f0                	add    eax,esi
c0004541:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004545:	11 fa                	adc    edx,edi
c0004547:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000454b:	19 d1                	sbb    ecx,edx
c000454d:	73 2e                	jae    c000457d <create_partition+0x1aa>
c000454f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004553:	89 f8                	mov    eax,edi
c0004555:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000455c:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004560:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004568:	73 6b                	jae    c00045d5 <create_partition+0x202>
c000456a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000456e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004572:	29 f0                	sub    eax,esi
c0004574:	19 fa                	sbb    edx,edi
c0004576:	89 04 24             	mov    DWORD PTR [esp],eax
c0004579:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000457d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004581:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004584:	74 4f                	je     c00045d5 <create_partition+0x202>
c0004586:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004589:	b9 10 00 00 00       	mov    ecx,0x10
c000458e:	ba 50 64 02 c0       	mov    edx,0xc0026450
c0004593:	e8 ea d4 ff ff       	call   c0001a82 <mem_cpy>
c0004598:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c000459c:	b9 10 00 00 00       	mov    ecx,0x10
c00045a1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045a5:	e8 2c db ff ff       	call   c00020d6 <make_rand>
c00045aa:	89 f2                	mov    edx,esi
c00045ac:	89 f9                	mov    ecx,edi
c00045ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045b2:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045b6:	e8 c1 d4 ff ff       	call   c0001a7c <st_qword>
c00045bb:	03 34 24             	add    esi,DWORD PTR [esp]
c00045be:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045c2:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045c6:	89 f2                	mov    edx,esi
c00045c8:	89 f9                	mov    ecx,edi
c00045ca:	83 c2 ff             	add    edx,0xffffffff
c00045cd:	83 d1 ff             	adc    ecx,0xffffffff
c00045d0:	e8 a7 d4 ff ff       	call   c0001a7c <st_qword>
c00045d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045d9:	83 e8 80             	sub    eax,0xffffff80
c00045dc:	89 c5                	mov    ebp,eax
c00045de:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045e2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e8:	75 6b                	jne    c0004655 <create_partition+0x282>
c00045ea:	45                   	inc    ebp
c00045eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045ef:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c00045f4:	e8 39 da ff ff       	call   c0002032 <crc32>
c00045f9:	81 fd 00 02 00 00    	cmp    ebp,0x200
c00045ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004603:	75 e5                	jne    c00045ea <create_partition+0x217>
c0004605:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004609:	31 d2                	xor    edx,edx
c000460b:	83 ec 0c             	sub    esp,0xc
c000460e:	c1 ed 09             	shr    ebp,0x9
c0004611:	6a 01                	push   0x1
c0004613:	8d 45 02             	lea    eax,[ebp+0x2]
c0004616:	52                   	push   edx
c0004617:	50                   	push   eax
c0004618:	53                   	push   ebx
c0004619:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000461d:	e8 ac d3 ff ff       	call   c00019ce <disk_write>
c0004622:	83 c4 20             	add    esp,0x20
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 85 d7 fd ff ff    	jne    c0004404 <create_partition+0x31>
c000462d:	83 ec 0c             	sub    esp,0xc
c0004630:	31 d2                	xor    edx,edx
c0004632:	6a 01                	push   0x1
c0004634:	89 e8                	mov    eax,ebp
c0004636:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000463a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000463e:	52                   	push   edx
c000463f:	50                   	push   eax
c0004640:	53                   	push   ebx
c0004641:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004645:	e8 84 d3 ff ff       	call   c00019ce <disk_write>
c000464a:	83 c4 20             	add    esp,0x20
c000464d:	85 c0                	test   eax,eax
c000464f:	0f 85 af fd ff ff    	jne    c0004404 <create_partition+0x31>
c0004655:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004659:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000465d:	3d 00 40 00 00       	cmp    eax,0x4000
c0004662:	74 0d                	je     c0004671 <create_partition+0x29e>
c0004664:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004668:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000466c:	e9 12 fe ff ff       	jmp    c0004483 <create_partition+0xb0>
c0004671:	31 d2                	xor    edx,edx
c0004673:	b9 00 02 00 00       	mov    ecx,0x200
c0004678:	89 d8                	mov    eax,ebx
c000467a:	8d 6b 20             	lea    ebp,[ebx+0x20]
c000467d:	e8 15 d4 ff ff       	call   c0001a97 <mem_set>
c0004682:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004685:	b9 10 00 00 00       	mov    ecx,0x10
c000468a:	ba 40 63 02 c0       	mov    edx,0xc0026340
c000468f:	89 d8                	mov    eax,ebx
c0004691:	e8 ec d3 ff ff       	call   c0001a82 <mem_cpy>
c0004696:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000469a:	8d 43 58             	lea    eax,[ebx+0x58]
c000469d:	f7 d2                	not    edx
c000469f:	e8 d5 d3 ff ff       	call   c0001a79 <st_dword>
c00046a4:	8d 43 18             	lea    eax,[ebx+0x18]
c00046a7:	31 c9                	xor    ecx,ecx
c00046a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00046ac:	ba 01 00 00 00       	mov    edx,0x1
c00046b1:	e8 c6 d3 ff ff       	call   c0001a7c <st_qword>
c00046b6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046ba:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046be:	83 c2 ff             	add    edx,0xffffffff
c00046c1:	89 e8                	mov    eax,ebp
c00046c3:	83 d1 ff             	adc    ecx,0xffffffff
c00046c6:	e8 b1 d3 ff ff       	call   c0001a7c <st_qword>
c00046cb:	31 c9                	xor    ecx,ecx
c00046cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00046d0:	ba 22 00 00 00       	mov    edx,0x22
c00046d5:	e8 a2 d3 ff ff       	call   c0001a7c <st_qword>
c00046da:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00046de:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00046e2:	83 c2 de             	add    edx,0xffffffde
c00046e5:	8d 43 30             	lea    eax,[ebx+0x30]
c00046e8:	83 d1 ff             	adc    ecx,0xffffffff
c00046eb:	31 f6                	xor    esi,esi
c00046ed:	e8 8a d3 ff ff       	call   c0001a7c <st_qword>
c00046f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00046f5:	ba 80 00 00 00       	mov    edx,0x80
c00046fa:	e8 7a d3 ff ff       	call   c0001a79 <st_dword>
c00046ff:	8d 43 50             	lea    eax,[ebx+0x50]
c0004702:	ba 80 00 00 00       	mov    edx,0x80
c0004707:	e8 6d d3 ff ff       	call   c0001a79 <st_dword>
c000470c:	ba 02 00 00 00       	mov    edx,0x2
c0004711:	89 f8                	mov    eax,edi
c0004713:	e8 61 d3 ff ff       	call   c0001a79 <st_dword>
c0004718:	8d 53 38             	lea    edx,[ebx+0x38]
c000471b:	b9 10 00 00 00       	mov    ecx,0x10
c0004720:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004724:	e8 ad d9 ff ff       	call   c00020d6 <make_rand>
c0004729:	83 c8 ff             	or     eax,0xffffffff
c000472c:	46                   	inc    esi
c000472d:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004732:	e8 fb d8 ff ff       	call   c0002032 <crc32>
c0004737:	83 fe 5c             	cmp    esi,0x5c
c000473a:	75 f0                	jne    c000472c <create_partition+0x359>
c000473c:	f7 d0                	not    eax
c000473e:	8d 73 10             	lea    esi,[ebx+0x10]
c0004741:	89 c2                	mov    edx,eax
c0004743:	89 f0                	mov    eax,esi
c0004745:	e8 2f d3 ff ff       	call   c0001a79 <st_dword>
c000474a:	83 ec 0c             	sub    esp,0xc
c000474d:	6a 01                	push   0x1
c000474f:	6a 00                	push   0x0
c0004751:	6a 01                	push   0x1
c0004753:	53                   	push   ebx
c0004754:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004758:	e8 71 d2 ff ff       	call   c00019ce <disk_write>
c000475d:	83 c4 20             	add    esp,0x20
c0004760:	85 c0                	test   eax,eax
c0004762:	0f 85 9c fc ff ff    	jne    c0004404 <create_partition+0x31>
c0004768:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000476c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004770:	83 c2 ff             	add    edx,0xffffffff
c0004773:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004776:	83 d1 ff             	adc    ecx,0xffffffff
c0004779:	e8 fe d2 ff ff       	call   c0001a7c <st_qword>
c000477e:	ba 01 00 00 00       	mov    edx,0x1
c0004783:	31 c9                	xor    ecx,ecx
c0004785:	89 e8                	mov    eax,ebp
c0004787:	e8 f0 d2 ff ff       	call   c0001a7c <st_qword>
c000478c:	89 f8                	mov    eax,edi
c000478e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0004792:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004796:	31 ff                	xor    edi,edi
c0004798:	e8 df d2 ff ff       	call   c0001a7c <st_qword>
c000479d:	89 f0                	mov    eax,esi
c000479f:	31 d2                	xor    edx,edx
c00047a1:	e8 d3 d2 ff ff       	call   c0001a79 <st_dword>
c00047a6:	83 c8 ff             	or     eax,0xffffffff
c00047a9:	47                   	inc    edi
c00047aa:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047af:	e8 7e d8 ff ff       	call   c0002032 <crc32>
c00047b4:	83 ff 5c             	cmp    edi,0x5c
c00047b7:	75 f0                	jne    c00047a9 <create_partition+0x3d6>
c00047b9:	f7 d0                	not    eax
c00047bb:	89 c2                	mov    edx,eax
c00047bd:	89 f0                	mov    eax,esi
c00047bf:	e8 b5 d2 ff ff       	call   c0001a79 <st_dword>
c00047c4:	83 ec 0c             	sub    esp,0xc
c00047c7:	6a 01                	push   0x1
c00047c9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047cd:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047d1:	83 c0 ff             	add    eax,0xffffffff
c00047d4:	83 d2 ff             	adc    edx,0xffffffff
c00047d7:	52                   	push   edx
c00047d8:	50                   	push   eax
c00047d9:	53                   	push   ebx
c00047da:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047de:	e8 eb d1 ff ff       	call   c00019ce <disk_write>
c00047e3:	83 c4 20             	add    esp,0x20
c00047e6:	85 c0                	test   eax,eax
c00047e8:	0f 85 16 fc ff ff    	jne    c0004404 <create_partition+0x31>
c00047ee:	31 d2                	xor    edx,edx
c00047f0:	89 d8                	mov    eax,ebx
c00047f2:	b9 00 02 00 00       	mov    ecx,0x200
c00047f7:	e8 9b d2 ff ff       	call   c0001a97 <mem_set>
c00047fc:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004802:	b9 10 00 00 00       	mov    ecx,0x10
c0004807:	ba 50 63 02 c0       	mov    edx,0xc0026350
c000480c:	e8 71 d2 ff ff       	call   c0001a82 <mem_cpy>
c0004811:	e9 21 01 00 00       	jmp    c0004937 <create_partition+0x564>
c0004816:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000481a:	b9 05 00 00 00       	mov    ecx,0x5
c000481f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004822:	bf 08 00 00 00       	mov    edi,0x8
c0004827:	89 f8                	mov    eax,edi
c0004829:	31 d2                	xor    edx,edx
c000482b:	0f b6 f0             	movzx  esi,al
c000482e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004831:	f7 f6                	div    esi
c0004833:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004838:	76 0a                	jbe    c0004844 <create_partition+0x471>
c000483a:	d1 e7                	shl    edi,1
c000483c:	49                   	dec    ecx
c000483d:	75 e8                	jne    c0004827 <create_partition+0x454>
c000483f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004844:	b9 00 02 00 00       	mov    ecx,0x200
c0004849:	31 d2                	xor    edx,edx
c000484b:	89 d8                	mov    eax,ebx
c000484d:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004853:	e8 3f d2 ff ff       	call   c0001a97 <mem_set>
c0004858:	b9 64 00 00 00       	mov    ecx,0x64
c000485d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004860:	31 d2                	xor    edx,edx
c0004862:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000486a:	f7 f1                	div    ecx
c000486c:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004871:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004875:	89 f8                	mov    eax,edi
c0004877:	0f b6 c0             	movzx  eax,al
c000487a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000487e:	e9 80 00 00 00       	jmp    c0004903 <create_partition+0x530>
c0004883:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004886:	29 cf                	sub    edi,ecx
c0004888:	89 ca                	mov    edx,ecx
c000488a:	89 f0                	mov    eax,esi
c000488c:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004891:	e8 e3 d1 ff ff       	call   c0001a79 <st_dword>
c0004896:	8d 46 04             	lea    eax,[esi+0x4]
c0004899:	89 fa                	mov    edx,edi
c000489b:	83 c6 10             	add    esi,0x10
c000489e:	e8 d6 d1 ff ff       	call   c0001a79 <st_dword>
c00048a3:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048a7:	31 d2                	xor    edx,edx
c00048a9:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048ac:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048b0:	89 c8                	mov    eax,ecx
c00048b2:	01 f9                	add    ecx,edi
c00048b4:	f7 f5                	div    ebp
c00048b6:	89 d5                	mov    ebp,edx
c00048b8:	31 d2                	xor    edx,edx
c00048ba:	45                   	inc    ebp
c00048bb:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048bf:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c00048c2:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c00048c5:	89 c2                	mov    edx,eax
c00048c7:	8d 41 ff             	lea    eax,[ecx-0x1]
c00048ca:	c1 ea 02             	shr    edx,0x2
c00048cd:	83 e2 c0             	and    edx,0xffffffc0
c00048d0:	09 ea                	or     edx,ebp
c00048d2:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048d7:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c00048da:	31 d2                	xor    edx,edx
c00048dc:	f7 f5                	div    ebp
c00048de:	89 d7                	mov    edi,edx
c00048e0:	31 d2                	xor    edx,edx
c00048e2:	47                   	inc    edi
c00048e3:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048e7:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c00048ea:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c00048ed:	89 c5                	mov    ebp,eax
c00048ef:	c1 ed 02             	shr    ebp,0x2
c00048f2:	83 e5 c0             	and    ebp,0xffffffc0
c00048f5:	09 ef                	or     edi,ebp
c00048f7:	89 fa                	mov    edx,edi
c00048f9:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c00048fc:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004901:	74 34                	je     c0004937 <create_partition+0x564>
c0004903:	85 c9                	test   ecx,ecx
c0004905:	74 30                	je     c0004937 <create_partition+0x564>
c0004907:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000490a:	76 2b                	jbe    c0004937 <create_partition+0x564>
c000490c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004910:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004914:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004917:	83 ff 64             	cmp    edi,0x64
c000491a:	76 4b                	jbe    c0004967 <create_partition+0x594>
c000491c:	89 f8                	mov    eax,edi
c000491e:	01 c8                	add    eax,ecx
c0004920:	0f 82 5d ff ff ff    	jb     c0004883 <create_partition+0x4b0>
c0004926:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004929:	0f 87 54 ff ff ff    	ja     c0004883 <create_partition+0x4b0>
c000492f:	85 ff                	test   edi,edi
c0004931:	0f 85 51 ff ff ff    	jne    c0004888 <create_partition+0x4b5>
c0004937:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000493d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004942:	e8 2e d1 ff ff       	call   c0001a75 <st_word>
c0004947:	83 ec 0c             	sub    esp,0xc
c000494a:	6a 01                	push   0x1
c000494c:	6a 00                	push   0x0
c000494e:	6a 00                	push   0x0
c0004950:	53                   	push   ebx
c0004951:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004955:	e8 74 d0 ff ff       	call   c00019ce <disk_write>
c000495a:	83 c4 20             	add    esp,0x20
c000495d:	85 c0                	test   eax,eax
c000495f:	0f 95 c0             	setne  al
c0004962:	0f b6 c0             	movzx  eax,al
c0004965:	eb 0e                	jmp    c0004975 <create_partition+0x5a2>
c0004967:	74 07                	je     c0004970 <create_partition+0x59d>
c0004969:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c000496e:	eb ac                	jmp    c000491c <create_partition+0x549>
c0004970:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004973:	eb a7                	jmp    c000491c <create_partition+0x549>
c0004975:	83 c4 5c             	add    esp,0x5c
c0004978:	5b                   	pop    ebx
c0004979:	5e                   	pop    esi
c000497a:	5f                   	pop    edi
c000497b:	5d                   	pop    ebp
c000497c:	c3                   	ret    

c000497d <get_fileinfo>:
c000497d:	55                   	push   ebp
c000497e:	57                   	push   edi
c000497f:	56                   	push   esi
c0004980:	53                   	push   ebx
c0004981:	83 ec 1c             	sub    esp,0x1c
c0004984:	8b 30                	mov    esi,DWORD PTR [eax]
c0004986:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c000498a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000498e:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004991:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004994:	0f 84 dc 01 00 00    	je     c0004b76 <get_fileinfo+0x1f9>
c000499a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000499d:	75 0f                	jne    c00049ae <get_fileinfo+0x31>
c000499f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049a2:	83 c4 1c             	add    esp,0x1c
c00049a5:	5b                   	pop    ebx
c00049a6:	5e                   	pop    esi
c00049a7:	5f                   	pop    edi
c00049a8:	5d                   	pop    ebp
c00049a9:	e9 58 d5 ff ff       	jmp    c0001f06 <get_xfileinfo>
c00049ae:	89 d3                	mov    ebx,edx
c00049b0:	89 c6                	mov    esi,eax
c00049b2:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049b6:	74 6a                	je     c0004a22 <get_fileinfo+0xa5>
c00049b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049c0:	31 ed                	xor    ebp,ebp
c00049c2:	31 ff                	xor    edi,edi
c00049c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049c8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00049cf:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c00049d3:	66 85 d2             	test   dx,dx
c00049d6:	74 3e                	je     c0004a16 <get_fileinfo+0x99>
c00049d8:	66 85 ed             	test   bp,bp
c00049db:	75 0c                	jne    c00049e9 <get_fileinfo+0x6c>
c00049dd:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c00049e3:	66 3d ff 07          	cmp    ax,0x7ff
c00049e7:	76 22                	jbe    c0004a0b <get_fileinfo+0x8e>
c00049e9:	b9 ff 00 00 00       	mov    ecx,0xff
c00049ee:	89 e8                	mov    eax,ebp
c00049f0:	29 f9                	sub    ecx,edi
c00049f2:	c1 e0 10             	shl    eax,0x10
c00049f5:	09 d0                	or     eax,edx
c00049f7:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00049fb:	e8 a3 d1 ff ff       	call   c0001ba3 <put_utf>
c0004a00:	84 c0                	test   al,al
c0004a02:	74 10                	je     c0004a14 <get_fileinfo+0x97>
c0004a04:	0f b6 c0             	movzx  eax,al
c0004a07:	31 d2                	xor    edx,edx
c0004a09:	01 c7                	add    edi,eax
c0004a0b:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a10:	89 d5                	mov    ebp,edx
c0004a12:	eb b0                	jmp    c00049c4 <get_fileinfo+0x47>
c0004a14:	31 ff                	xor    edi,edi
c0004a16:	66 85 ed             	test   bp,bp
c0004a19:	74 02                	je     c0004a1d <get_fileinfo+0xa0>
c0004a1b:	31 ff                	xor    edi,edi
c0004a1d:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a22:	31 ff                	xor    edi,edi
c0004a24:	31 c9                	xor    ecx,ecx
c0004a26:	83 f9 0a             	cmp    ecx,0xa
c0004a29:	0f 87 ad 00 00 00    	ja     c0004adc <get_fileinfo+0x15f>
c0004a2f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a32:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a35:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a39:	66 83 fa 20          	cmp    dx,0x20
c0004a3d:	0f 84 92 00 00 00    	je     c0004ad5 <get_fileinfo+0x158>
c0004a43:	66 83 fa 05          	cmp    dx,0x5
c0004a47:	75 05                	jne    c0004a4e <get_fileinfo+0xd1>
c0004a49:	ba e5 00 00 00       	mov    edx,0xe5
c0004a4e:	83 ff 0b             	cmp    edi,0xb
c0004a51:	77 0b                	ja     c0004a5e <get_fileinfo+0xe1>
c0004a53:	83 fd 09             	cmp    ebp,0x9
c0004a56:	75 06                	jne    c0004a5e <get_fileinfo+0xe1>
c0004a58:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a5d:	47                   	inc    edi
c0004a5e:	0f b7 c2             	movzx  eax,dx
c0004a61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a65:	e8 6d d0 ff ff       	call   c0001ad7 <dbc_1st>
c0004a6a:	85 c0                	test   eax,eax
c0004a6c:	74 2f                	je     c0004a9d <get_fileinfo+0x120>
c0004a6e:	83 fd 08             	cmp    ebp,0x8
c0004a71:	74 2a                	je     c0004a9d <get_fileinfo+0x120>
c0004a73:	83 fd 0b             	cmp    ebp,0xb
c0004a76:	74 25                	je     c0004a9d <get_fileinfo+0x120>
c0004a78:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a7b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a7f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a83:	e8 52 d0 ff ff       	call   c0001ada <dbc_2nd>
c0004a88:	85 c0                	test   eax,eax
c0004a8a:	74 11                	je     c0004a9d <get_fileinfo+0x120>
c0004a8c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a90:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a95:	c1 e2 08             	shl    edx,0x8
c0004a98:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a9b:	09 c2                	or     edx,eax
c0004a9d:	0f b7 d2             	movzx  edx,dx
c0004aa0:	50                   	push   eax
c0004aa1:	50                   	push   eax
c0004aa2:	68 b5 01 00 00       	push   0x1b5
c0004aa7:	52                   	push   edx
c0004aa8:	e8 46 38 00 00       	call   c00082f3 <ff_oem2uni>
c0004aad:	83 c4 10             	add    esp,0x10
c0004ab0:	66 85 c0             	test   ax,ax
c0004ab3:	75 04                	jne    c0004ab9 <get_fileinfo+0x13c>
c0004ab5:	31 ff                	xor    edi,edi
c0004ab7:	eb 23                	jmp    c0004adc <get_fileinfo+0x15f>
c0004ab9:	b9 0c 00 00 00       	mov    ecx,0xc
c0004abe:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ac2:	29 f9                	sub    ecx,edi
c0004ac4:	0f b7 c0             	movzx  eax,ax
c0004ac7:	e8 d7 d0 ff ff       	call   c0001ba3 <put_utf>
c0004acc:	84 c0                	test   al,al
c0004ace:	74 e5                	je     c0004ab5 <get_fileinfo+0x138>
c0004ad0:	0f b6 c0             	movzx  eax,al
c0004ad3:	01 c7                	add    edi,eax
c0004ad5:	89 e9                	mov    ecx,ebp
c0004ad7:	e9 4a ff ff ff       	jmp    c0004a26 <get_fileinfo+0xa9>
c0004adc:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004ae1:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004ae5:	75 54                	jne    c0004b3b <get_fileinfo+0x1be>
c0004ae7:	85 ff                	test   edi,edi
c0004ae9:	75 0b                	jne    c0004af6 <get_fileinfo+0x179>
c0004aeb:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004aef:	ba 01 00 00 00       	mov    edx,0x1
c0004af4:	eb 33                	jmp    c0004b29 <get_fileinfo+0x1ac>
c0004af6:	b1 08                	mov    cl,0x8
c0004af8:	31 d2                	xor    edx,edx
c0004afa:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b00:	84 c0                	test   al,al
c0004b02:	74 25                	je     c0004b29 <get_fileinfo+0x1ac>
c0004b04:	66 83 f8 2e          	cmp    ax,0x2e
c0004b08:	74 16                	je     c0004b20 <get_fileinfo+0x1a3>
c0004b0a:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b0d:	66 83 ff 19          	cmp    di,0x19
c0004b11:	77 0f                	ja     c0004b22 <get_fileinfo+0x1a5>
c0004b13:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b16:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b19:	74 07                	je     c0004b22 <get_fileinfo+0x1a5>
c0004b1b:	83 c0 20             	add    eax,0x20
c0004b1e:	eb 02                	jmp    c0004b22 <get_fileinfo+0x1a5>
c0004b20:	b1 10                	mov    cl,0x10
c0004b22:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b26:	42                   	inc    edx
c0004b27:	eb d1                	jmp    c0004afa <get_fileinfo+0x17d>
c0004b29:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b2e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b31:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b35:	75 04                	jne    c0004b3b <get_fileinfo+0x1be>
c0004b37:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b3b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b3e:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b41:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b44:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b47:	83 c0 1c             	add    eax,0x1c
c0004b4a:	e8 c1 ce ff ff       	call   c0001a10 <ld_dword>
c0004b4f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b56:	89 03                	mov    DWORD PTR [ebx],eax
c0004b58:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b5b:	83 c0 16             	add    eax,0x16
c0004b5e:	e8 a0 ce ff ff       	call   c0001a03 <ld_word>
c0004b63:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b67:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b6a:	83 c0 18             	add    eax,0x18
c0004b6d:	e8 91 ce ff ff       	call   c0001a03 <ld_word>
c0004b72:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b76:	83 c4 1c             	add    esp,0x1c
c0004b79:	5b                   	pop    ebx
c0004b7a:	5e                   	pop    esi
c0004b7b:	5f                   	pop    edi
c0004b7c:	5d                   	pop    ebp
c0004b7d:	c3                   	ret    

c0004b7e <ld_clust.isra.0>:
c0004b7e:	56                   	push   esi
c0004b7f:	89 c6                	mov    esi,eax
c0004b81:	53                   	push   ebx
c0004b82:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b85:	89 d3                	mov    ebx,edx
c0004b87:	e8 77 ce ff ff       	call   c0001a03 <ld_word>
c0004b8c:	0f b7 c8             	movzx  ecx,ax
c0004b8f:	89 f0                	mov    eax,esi
c0004b91:	3c 03                	cmp    al,0x3
c0004b93:	75 0d                	jne    c0004ba2 <ld_clust.isra.0+0x24>
c0004b95:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b98:	e8 66 ce ff ff       	call   c0001a03 <ld_word>
c0004b9d:	c1 e0 10             	shl    eax,0x10
c0004ba0:	09 c1                	or     ecx,eax
c0004ba2:	89 c8                	mov    eax,ecx
c0004ba4:	5b                   	pop    ebx
c0004ba5:	5e                   	pop    esi
c0004ba6:	c3                   	ret    

c0004ba7 <st_clust.isra.1>:
c0004ba7:	56                   	push   esi
c0004ba8:	89 c6                	mov    esi,eax
c0004baa:	53                   	push   ebx
c0004bab:	89 d3                	mov    ebx,edx
c0004bad:	0f b7 d1             	movzx  edx,cx
c0004bb0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bb3:	e8 bd ce ff ff       	call   c0001a75 <st_word>
c0004bb8:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bbb:	75 0f                	jne    c0004bcc <st_clust.isra.1+0x25>
c0004bbd:	c1 e9 10             	shr    ecx,0x10
c0004bc0:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bc3:	89 ca                	mov    edx,ecx
c0004bc5:	5b                   	pop    ebx
c0004bc6:	5e                   	pop    esi
c0004bc7:	e9 a9 ce ff ff       	jmp    c0001a75 <st_word>
c0004bcc:	5b                   	pop    ebx
c0004bcd:	5e                   	pop    esi
c0004bce:	c3                   	ret    

c0004bcf <init_alloc_info.isra.2>:
c0004bcf:	56                   	push   esi
c0004bd0:	53                   	push   ebx
c0004bd1:	89 c6                	mov    esi,eax
c0004bd3:	89 d3                	mov    ebx,edx
c0004bd5:	51                   	push   ecx
c0004bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0004bd8:	83 c0 34             	add    eax,0x34
c0004bdb:	e8 30 ce ff ff       	call   c0001a10 <ld_dword>
c0004be0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004be3:	8b 06                	mov    eax,DWORD PTR [esi]
c0004be5:	83 c0 38             	add    eax,0x38
c0004be8:	e8 3b ce ff ff       	call   c0001a28 <ld_qword>
c0004bed:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004bf0:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004bf3:	8b 06                	mov    eax,DWORD PTR [esi]
c0004bf5:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004bf8:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bff:	83 e0 02             	and    eax,0x2
c0004c02:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c05:	5b                   	pop    ebx
c0004c06:	5b                   	pop    ebx
c0004c07:	5e                   	pop    esi
c0004c08:	c3                   	ret    

c0004c09 <follow_path>:
c0004c09:	56                   	push   esi
c0004c0a:	53                   	push   ebx
c0004c0b:	89 c3                	mov    ebx,eax
c0004c0d:	83 ec 14             	sub    esp,0x14
c0004c10:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c14:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c1a:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c1c:	80 fa 5c             	cmp    dl,0x5c
c0004c1f:	75 07                	jne    c0004c28 <follow_path+0x1f>
c0004c21:	40                   	inc    eax
c0004c22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c26:	eb ee                	jmp    c0004c16 <follow_path+0xd>
c0004c28:	80 fa 2f             	cmp    dl,0x2f
c0004c2b:	74 f4                	je     c0004c21 <follow_path+0x18>
c0004c2d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c34:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c3b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c3e:	77 52                	ja     c0004c92 <follow_path+0x89>
c0004c40:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c44:	31 d2                	xor    edx,edx
c0004c46:	89 d8                	mov    eax,ebx
c0004c48:	e8 12 e3 ff ff       	call   c0002f5f <dir_sdi>
c0004c4d:	eb 7c                	jmp    c0004ccb <follow_path+0xc2>
c0004c4f:	89 d8                	mov    eax,ebx
c0004c51:	e8 6e f2 ff ff       	call   c0003ec4 <dir_find>
c0004c56:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c59:	85 c0                	test   eax,eax
c0004c5b:	75 46                	jne    c0004ca3 <follow_path+0x9a>
c0004c5d:	80 e2 04             	and    dl,0x4
c0004c60:	75 69                	jne    c0004ccb <follow_path+0xc2>
c0004c62:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c66:	74 5e                	je     c0004cc6 <follow_path+0xbd>
c0004c68:	8a 06                	mov    al,BYTE PTR [esi]
c0004c6a:	3c 04                	cmp    al,0x4
c0004c6c:	75 41                	jne    c0004caf <follow_path+0xa6>
c0004c6e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c71:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c75:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c78:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c7b:	30 c0                	xor    al,al
c0004c7d:	09 d0                	or     eax,edx
c0004c7f:	89 da                	mov    edx,ebx
c0004c81:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c84:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c87:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c8a:	8d 46 10             	lea    eax,[esi+0x10]
c0004c8d:	e8 3d ff ff ff       	call   c0004bcf <init_alloc_info.isra.2>
c0004c92:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c96:	89 d8                	mov    eax,ebx
c0004c98:	e8 a9 ed ff ff       	call   c0003a46 <create_name>
c0004c9d:	85 c0                	test   eax,eax
c0004c9f:	74 ae                	je     c0004c4f <follow_path+0x46>
c0004ca1:	eb 28                	jmp    c0004ccb <follow_path+0xc2>
c0004ca3:	83 f8 04             	cmp    eax,0x4
c0004ca6:	75 23                	jne    c0004ccb <follow_path+0xc2>
c0004ca8:	80 e2 04             	and    dl,0x4
c0004cab:	74 19                	je     c0004cc6 <follow_path+0xbd>
c0004cad:	eb 1c                	jmp    c0004ccb <follow_path+0xc2>
c0004caf:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cb2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cb8:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004cbc:	e8 bd fe ff ff       	call   c0004b7e <ld_clust.isra.0>
c0004cc1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cc4:	eb cc                	jmp    c0004c92 <follow_path+0x89>
c0004cc6:	b8 05 00 00 00       	mov    eax,0x5
c0004ccb:	83 c4 14             	add    esp,0x14
c0004cce:	5b                   	pop    ebx
c0004ccf:	5e                   	pop    esi
c0004cd0:	c3                   	ret    

c0004cd1 <f_mount>:
c0004cd1:	53                   	push   ebx
c0004cd2:	83 ec 18             	sub    esp,0x18
c0004cd5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004cd9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004cdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004ce5:	e8 fb d2 ff ff       	call   c0001fe5 <get_ldnumber>
c0004cea:	89 c2                	mov    edx,eax
c0004cec:	b8 0b 00 00 00       	mov    eax,0xb
c0004cf1:	85 d2                	test   edx,edx
c0004cf3:	78 39                	js     c0004d2e <f_mount+0x5d>
c0004cf5:	8b 04 95 e0 aa 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5520]
c0004cfc:	85 c0                	test   eax,eax
c0004cfe:	74 03                	je     c0004d03 <f_mount+0x32>
c0004d00:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d07:	85 c0                	test   eax,eax
c0004d09:	74 03                	je     c0004d0e <f_mount+0x3d>
c0004d0b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d12:	89 04 95 e0 aa 02 c0 	mov    DWORD PTR [edx*4-0x3ffd5520],eax
c0004d19:	31 c0                	xor    eax,eax
c0004d1b:	84 db                	test   bl,bl
c0004d1d:	74 0f                	je     c0004d2e <f_mount+0x5d>
c0004d1f:	31 c9                	xor    ecx,ecx
c0004d21:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d25:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d29:	e8 65 d7 ff ff       	call   c0002493 <mount_volume>
c0004d2e:	83 c4 18             	add    esp,0x18
c0004d31:	5b                   	pop    ebx
c0004d32:	c3                   	ret    

c0004d33 <f_open>:
c0004d33:	55                   	push   ebp
c0004d34:	bd 09 00 00 00       	mov    ebp,0x9
c0004d39:	57                   	push   edi
c0004d3a:	56                   	push   esi
c0004d3b:	53                   	push   ebx
c0004d3c:	83 ec 7c             	sub    esp,0x7c
c0004d3f:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d46:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d4d:	85 db                	test   ebx,ebx
c0004d4f:	0f 84 10 04 00 00    	je     c0005165 <f_open+0x432>
c0004d55:	89 fe                	mov    esi,edi
c0004d57:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d5b:	83 e6 3f             	and    esi,0x3f
c0004d5e:	89 f0                	mov    eax,esi
c0004d60:	0f b6 c8             	movzx  ecx,al
c0004d63:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d6a:	e8 24 d7 ff ff       	call   c0002493 <mount_volume>
c0004d6f:	89 c5                	mov    ebp,eax
c0004d71:	85 c0                	test   eax,eax
c0004d73:	0f 85 e6 03 00 00    	jne    c000515f <f_open+0x42c>
c0004d79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d7d:	bd 11 00 00 00       	mov    ebp,0x11
c0004d82:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d86:	83 ec 0c             	sub    esp,0xc
c0004d89:	68 60 04 00 00       	push   0x460
c0004d8e:	e8 a3 34 00 00       	call   c0008236 <ff_memalloc>
c0004d93:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d97:	83 c4 10             	add    esp,0x10
c0004d9a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d9f:	0f 84 c0 03 00 00    	je     c0005165 <f_open+0x432>
c0004da5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004da9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dad:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004db3:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004db6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004db9:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dc0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004dc4:	e8 40 fe ff ff       	call   c0004c09 <follow_path>
c0004dc9:	89 c5                	mov    ebp,eax
c0004dcb:	85 c0                	test   eax,eax
c0004dcd:	75 0c                	jne    c0004ddb <f_open+0xa8>
c0004dcf:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004dd4:	79 05                	jns    c0004ddb <f_open+0xa8>
c0004dd6:	bd 06 00 00 00       	mov    ebp,0x6
c0004ddb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004de1:	0f 84 84 01 00 00    	je     c0004f6b <f_open+0x238>
c0004de7:	85 ed                	test   ebp,ebp
c0004de9:	74 20                	je     c0004e0b <f_open+0xd8>
c0004deb:	83 fd 04             	cmp    ebp,0x4
c0004dee:	0f 85 58 03 00 00    	jne    c000514c <f_open+0x419>
c0004df4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004df8:	83 ce 08             	or     esi,0x8
c0004dfb:	e8 8a f2 ff ff       	call   c000408a <dir_register>
c0004e00:	89 c5                	mov    ebp,eax
c0004e02:	85 c0                	test   eax,eax
c0004e04:	74 2f                	je     c0004e35 <f_open+0x102>
c0004e06:	e9 41 03 00 00       	jmp    c000514c <f_open+0x419>
c0004e0b:	bd 07 00 00 00       	mov    ebp,0x7
c0004e10:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e15:	0f 85 31 03 00 00    	jne    c000514c <f_open+0x419>
c0004e1b:	bd 08 00 00 00       	mov    ebp,0x8
c0004e20:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e26:	0f 85 20 03 00 00    	jne    c000514c <f_open+0x419>
c0004e2c:	83 e7 08             	and    edi,0x8
c0004e2f:	0f 84 65 01 00 00    	je     c0004f9a <f_open+0x267>
c0004e35:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e39:	8a 02                	mov    al,BYTE PTR [edx]
c0004e3b:	3c 04                	cmp    al,0x4
c0004e3d:	0f 85 97 00 00 00    	jne    c0004eda <f_open+0x1a7>
c0004e43:	8d 42 10             	lea    eax,[edx+0x10]
c0004e46:	89 13                	mov    DWORD PTR [ebx],edx
c0004e48:	89 da                	mov    edx,ebx
c0004e4a:	e8 80 fd ff ff       	call   c0004bcf <init_alloc_info.isra.2>
c0004e4f:	31 d2                	xor    edx,edx
c0004e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e55:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e5a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e5d:	83 c0 02             	add    eax,0x2
c0004e60:	e8 32 cc ff ff       	call   c0001a97 <mem_set>
c0004e65:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e6a:	31 d2                	xor    edx,edx
c0004e6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e70:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e73:	83 c0 26             	add    eax,0x26
c0004e76:	e8 1c cc ff ff       	call   c0001a97 <mem_set>
c0004e7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e82:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e86:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e8b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e8e:	83 c0 08             	add    eax,0x8
c0004e91:	e8 e3 cb ff ff       	call   c0001a79 <st_dword>
c0004e96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e9a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e9d:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ea1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ea5:	e8 b7 ea ff ff       	call   c0003961 <store_xdir>
c0004eaa:	89 c5                	mov    ebp,eax
c0004eac:	85 c0                	test   eax,eax
c0004eae:	0f 85 98 02 00 00    	jne    c000514c <f_open+0x419>
c0004eb4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004eb7:	85 d2                	test   edx,edx
c0004eb9:	0f 84 db 00 00 00    	je     c0004f9a <f_open+0x267>
c0004ebf:	31 c9                	xor    ecx,ecx
c0004ec1:	89 d8                	mov    eax,ebx
c0004ec3:	e8 8e e3 ff ff       	call   c0003256 <remove_chain>
c0004ec8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004ecc:	89 c5                	mov    ebp,eax
c0004ece:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ed1:	48                   	dec    eax
c0004ed2:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004ed5:	e9 b8 00 00 00       	jmp    c0004f92 <f_open+0x25f>
c0004eda:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004ede:	89 ea                	mov    edx,ebp
c0004ee0:	e8 99 fc ff ff       	call   c0004b7e <ld_clust.isra.0>
c0004ee5:	ba 00 00 21 50       	mov    edx,0x50210000
c0004eea:	89 c7                	mov    edi,eax
c0004eec:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004eef:	e8 85 cb ff ff       	call   c0001a79 <st_dword>
c0004ef4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004ef8:	31 c9                	xor    ecx,ecx
c0004efa:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004efe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f02:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f06:	e8 9c fc ff ff       	call   c0004ba7 <st_clust.isra.1>
c0004f0b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f0f:	31 d2                	xor    edx,edx
c0004f11:	83 c0 1c             	add    eax,0x1c
c0004f14:	e8 60 cb ff ff       	call   c0001a79 <st_dword>
c0004f19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f1d:	85 ff                	test   edi,edi
c0004f1f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f23:	74 75                	je     c0004f9a <f_open+0x267>
c0004f25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f29:	31 c9                	xor    ecx,ecx
c0004f2b:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f2e:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f31:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f35:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f39:	89 fa                	mov    edx,edi
c0004f3b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f3f:	e8 12 e3 ff ff       	call   c0003256 <remove_chain>
c0004f44:	89 c5                	mov    ebp,eax
c0004f46:	85 c0                	test   eax,eax
c0004f48:	0f 85 fe 01 00 00    	jne    c000514c <f_open+0x419>
c0004f4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f52:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f5a:	4f                   	dec    edi
c0004f5b:	e8 81 d2 ff ff       	call   c00021e1 <move_window>
c0004f60:	89 c5                	mov    ebp,eax
c0004f62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f66:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f69:	eb 27                	jmp    c0004f92 <f_open+0x25f>
c0004f6b:	85 ed                	test   ebp,ebp
c0004f6d:	0f 85 d9 01 00 00    	jne    c000514c <f_open+0x419>
c0004f73:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f77:	bd 04 00 00 00       	mov    ebp,0x4
c0004f7c:	a8 10                	test   al,0x10
c0004f7e:	0f 85 c8 01 00 00    	jne    c000514c <f_open+0x419>
c0004f84:	83 e7 02             	and    edi,0x2
c0004f87:	74 11                	je     c0004f9a <f_open+0x267>
c0004f89:	bd 07 00 00 00       	mov    ebp,0x7
c0004f8e:	a8 01                	test   al,0x1
c0004f90:	eb 02                	jmp    c0004f94 <f_open+0x261>
c0004f92:	85 ed                	test   ebp,ebp
c0004f94:	0f 85 b2 01 00 00    	jne    c000514c <f_open+0x419>
c0004f9a:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fa0:	74 03                	je     c0004fa5 <f_open+0x272>
c0004fa2:	83 ce 40             	or     esi,0x40
c0004fa5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fa9:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fac:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004faf:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fb2:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fb5:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fb9:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fbc:	8a 02                	mov    al,BYTE PTR [edx]
c0004fbe:	3c 04                	cmp    al,0x4
c0004fc0:	75 2a                	jne    c0004fec <f_open+0x2b9>
c0004fc2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004fc6:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004fcb:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004fce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004fd2:	30 c0                	xor    al,al
c0004fd4:	09 c8                	or     eax,ecx
c0004fd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004fd9:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004fdd:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004fe0:	8d 42 10             	lea    eax,[edx+0x10]
c0004fe3:	89 da                	mov    edx,ebx
c0004fe5:	e8 e5 fb ff ff       	call   c0004bcf <init_alloc_info.isra.2>
c0004fea:	eb 1c                	jmp    c0005008 <f_open+0x2d5>
c0004fec:	89 fa                	mov    edx,edi
c0004fee:	e8 8b fb ff ff       	call   c0004b7e <ld_clust.isra.0>
c0004ff3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ff6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004ff9:	e8 12 ca ff ff       	call   c0001a10 <ld_dword>
c0004ffe:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005005:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005008:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000500c:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005013:	89 03                	mov    DWORD PTR [ebx],eax
c0005015:	31 d2                	xor    edx,edx
c0005017:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000501b:	b9 00 02 00 00       	mov    ecx,0x200
c0005020:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005024:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005028:	89 f0                	mov    eax,esi
c000502a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005031:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005034:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000503b:	8d 43 50             	lea    eax,[ebx+0x50]
c000503e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005045:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000504c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005050:	e8 42 ca ff ff       	call   c0001a97 <mem_set>
c0005055:	83 e6 20             	and    esi,0x20
c0005058:	75 07                	jne    c0005061 <f_open+0x32e>
c000505a:	31 ed                	xor    ebp,ebp
c000505c:	e9 eb 00 00 00       	jmp    c000514c <f_open+0x419>
c0005061:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005064:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000506f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005073:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005077:	74 e1                	je     c000505a <f_open+0x327>
c0005079:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000507d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005081:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005084:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005087:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000508b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000508e:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0005092:	31 ff                	xor    edi,edi
c0005094:	c1 e5 09             	shl    ebp,0x9
c0005097:	89 ee                	mov    esi,ebp
c0005099:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000509d:	89 f8                	mov    eax,edi
c000509f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050a3:	73 22                	jae    c00050c7 <f_open+0x394>
c00050a5:	89 d8                	mov    eax,ebx
c00050a7:	e8 bd dc ff ff       	call   c0002d69 <get_fat>
c00050ac:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050b0:	89 c2                	mov    edx,eax
c00050b2:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050b6:	83 f8 01             	cmp    eax,0x1
c00050b9:	76 10                	jbe    c00050cb <f_open+0x398>
c00050bb:	83 f8 ff             	cmp    eax,0xffffffff
c00050be:	75 d9                	jne    c0005099 <f_open+0x366>
c00050c0:	bd 01 00 00 00       	mov    ebp,0x1
c00050c5:	eb 09                	jmp    c00050d0 <f_open+0x39d>
c00050c7:	31 ed                	xor    ebp,ebp
c00050c9:	eb 05                	jmp    c00050d0 <f_open+0x39d>
c00050cb:	bd 02 00 00 00       	mov    ebp,0x2
c00050d0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00050d3:	85 ed                	test   ebp,ebp
c00050d5:	75 75                	jne    c000514c <f_open+0x419>
c00050d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050db:	25 ff 01 00 00       	and    eax,0x1ff
c00050e0:	0f 84 74 ff ff ff    	je     c000505a <f_open+0x327>
c00050e6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00050ea:	bd 02 00 00 00       	mov    ebp,0x2
c00050ef:	89 c8                	mov    eax,ecx
c00050f1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00050f5:	e8 a2 cb ff ff       	call   c0001c9c <clst2sect>
c00050fa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00050fe:	89 d7                	mov    edi,edx
c0005100:	09 c7                	or     edi,eax
c0005102:	74 48                	je     c000514c <f_open+0x419>
c0005104:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005108:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000510c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005114:	0f ac fe 09          	shrd   esi,edi,0x9
c0005118:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000511c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005120:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005123:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005127:	83 ec 0c             	sub    esp,0xc
c000512a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000512d:	6a 01                	push   0x1
c000512f:	52                   	push   edx
c0005130:	50                   	push   eax
c0005131:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005135:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005139:	50                   	push   eax
c000513a:	e8 79 c8 ff ff       	call   c00019b8 <disk_read>
c000513f:	83 c4 20             	add    esp,0x20
c0005142:	85 c0                	test   eax,eax
c0005144:	0f 95 c0             	setne  al
c0005147:	0f b6 c0             	movzx  eax,al
c000514a:	89 c5                	mov    ebp,eax
c000514c:	83 ec 0c             	sub    esp,0xc
c000514f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005153:	e8 f4 30 00 00       	call   c000824c <ff_memfree>
c0005158:	83 c4 10             	add    esp,0x10
c000515b:	85 ed                	test   ebp,ebp
c000515d:	74 06                	je     c0005165 <f_open+0x432>
c000515f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005165:	83 c4 7c             	add    esp,0x7c
c0005168:	89 e8                	mov    eax,ebp
c000516a:	5b                   	pop    ebx
c000516b:	5e                   	pop    esi
c000516c:	5f                   	pop    edi
c000516d:	5d                   	pop    ebp
c000516e:	c3                   	ret    

c000516f <f_read>:
c000516f:	55                   	push   ebp
c0005170:	57                   	push   edi
c0005171:	56                   	push   esi
c0005172:	53                   	push   ebx
c0005173:	83 ec 2c             	sub    esp,0x2c
c0005176:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000517a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000517e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005184:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005188:	89 d8                	mov    eax,ebx
c000518a:	e8 77 cf ff ff       	call   c0002106 <validate>
c000518f:	89 c5                	mov    ebp,eax
c0005191:	85 c0                	test   eax,eax
c0005193:	0f 85 4c 02 00 00    	jne    c00053e5 <f_read+0x276>
c0005199:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000519d:	85 ed                	test   ebp,ebp
c000519f:	0f 85 40 02 00 00    	jne    c00053e5 <f_read+0x276>
c00051a5:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051a9:	0f 84 31 02 00 00    	je     c00053e0 <f_read+0x271>
c00051af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051b2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051b5:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051b8:	bf 00 00 00 00       	mov    edi,0x0
c00051bd:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051c0:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051c4:	89 d1                	mov    ecx,edx
c00051c6:	19 f9                	sbb    ecx,edi
c00051c8:	0f 83 cf 00 00 00    	jae    c000529d <f_read+0x12e>
c00051ce:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00051d2:	e9 c6 00 00 00       	jmp    c000529d <f_read+0x12e>
c00051d7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00051da:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00051dd:	89 d0                	mov    eax,edx
c00051df:	25 ff 01 00 00       	and    eax,0x1ff
c00051e4:	0f 85 c9 01 00 00    	jne    c00053b3 <f_read+0x244>
c00051ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ee:	89 d6                	mov    esi,edx
c00051f0:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00051f4:	89 cf                	mov    edi,ecx
c00051f6:	48                   	dec    eax
c00051f7:	0f ac fe 09          	shrd   esi,edi,0x9
c00051fb:	21 f0                	and    eax,esi
c00051fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005201:	0f 84 a6 00 00 00    	je     c00052ad <f_read+0x13e>
c0005207:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000520b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000520e:	89 c8                	mov    eax,ecx
c0005210:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005213:	e8 84 ca ff ff       	call   c0001c9c <clst2sect>
c0005218:	89 d7                	mov    edi,edx
c000521a:	09 c7                	or     edi,eax
c000521c:	0f 84 b4 00 00 00    	je     c00052d6 <f_read+0x167>
c0005222:	31 ff                	xor    edi,edi
c0005224:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005228:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000522b:	01 c6                	add    esi,eax
c000522d:	11 d7                	adc    edi,edx
c000522f:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005237:	0f 86 fd 00 00 00    	jbe    c000533a <f_read+0x1cb>
c000523d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005241:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005245:	c1 e8 09             	shr    eax,0x9
c0005248:	89 04 24             	mov    DWORD PTR [esp],eax
c000524b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000524f:	03 14 24             	add    edx,DWORD PTR [esp]
c0005252:	39 c2                	cmp    edx,eax
c0005254:	76 07                	jbe    c000525d <f_read+0xee>
c0005256:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000525a:	89 04 24             	mov    DWORD PTR [esp],eax
c000525d:	83 ec 0c             	sub    esp,0xc
c0005260:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005264:	57                   	push   edi
c0005265:	56                   	push   esi
c0005266:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000526a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000526e:	50                   	push   eax
c000526f:	e8 44 c7 ff ff       	call   c00019b8 <disk_read>
c0005274:	83 c4 20             	add    esp,0x20
c0005277:	85 c0                	test   eax,eax
c0005279:	75 6e                	jne    c00052e9 <f_read+0x17a>
c000527b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000527f:	78 7e                	js     c00052ff <f_read+0x190>
c0005281:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005284:	c1 e6 09             	shl    esi,0x9
c0005287:	31 ff                	xor    edi,edi
c0005289:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000528d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005291:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005295:	01 30                	add    DWORD PTR [eax],esi
c0005297:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c000529a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000529d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052a2:	0f 85 2f ff ff ff    	jne    c00051d7 <f_read+0x68>
c00052a8:	e9 38 01 00 00       	jmp    c00053e5 <f_read+0x276>
c00052ad:	89 c8                	mov    eax,ecx
c00052af:	09 d0                	or     eax,edx
c00052b1:	75 05                	jne    c00052b8 <f_read+0x149>
c00052b3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052b6:	eb 19                	jmp    c00052d1 <f_read+0x162>
c00052b8:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052bc:	74 09                	je     c00052c7 <f_read+0x158>
c00052be:	89 d8                	mov    eax,ebx
c00052c0:	e8 f8 c9 ff ff       	call   c0001cbd <clmt_clust>
c00052c5:	eb 0a                	jmp    c00052d1 <f_read+0x162>
c00052c7:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052ca:	89 d8                	mov    eax,ebx
c00052cc:	e8 98 da ff ff       	call   c0002d69 <get_fat>
c00052d1:	83 f8 01             	cmp    eax,0x1
c00052d4:	77 0e                	ja     c00052e4 <f_read+0x175>
c00052d6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00052da:	bd 02 00 00 00       	mov    ebp,0x2
c00052df:	e9 01 01 00 00       	jmp    c00053e5 <f_read+0x276>
c00052e4:	83 f8 ff             	cmp    eax,0xffffffff
c00052e7:	75 0e                	jne    c00052f7 <f_read+0x188>
c00052e9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00052ed:	bd 01 00 00 00       	mov    ebp,0x1
c00052f2:	e9 ee 00 00 00       	jmp    c00053e5 <f_read+0x276>
c00052f7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00052fa:	e9 08 ff ff ff       	jmp    c0005207 <f_read+0x98>
c00052ff:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005302:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005305:	29 f0                	sub    eax,esi
c0005307:	19 fa                	sbb    edx,edi
c0005309:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000530c:	89 d7                	mov    edi,edx
c000530e:	ba 00 00 00 00       	mov    edx,0x0
c0005313:	89 f9                	mov    ecx,edi
c0005315:	19 d1                	sbb    ecx,edx
c0005317:	0f 83 64 ff ff ff    	jae    c0005281 <f_read+0x112>
c000531d:	89 c7                	mov    edi,eax
c000531f:	8d 53 50             	lea    edx,[ebx+0x50]
c0005322:	c1 e7 09             	shl    edi,0x9
c0005325:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005329:	b9 00 02 00 00       	mov    ecx,0x200
c000532e:	01 f8                	add    eax,edi
c0005330:	e8 4d c7 ff ff       	call   c0001a82 <mem_cpy>
c0005335:	e9 47 ff ff ff       	jmp    c0005281 <f_read+0x112>
c000533a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000533d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005340:	89 04 24             	mov    DWORD PTR [esp],eax
c0005343:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005347:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000534b:	75 05                	jne    c0005352 <f_read+0x1e3>
c000534d:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005350:	74 5b                	je     c00053ad <f_read+0x23e>
c0005352:	8d 43 50             	lea    eax,[ebx+0x50]
c0005355:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005359:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535d:	79 2a                	jns    c0005389 <f_read+0x21a>
c000535f:	83 ec 0c             	sub    esp,0xc
c0005362:	6a 01                	push   0x1
c0005364:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005368:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000536c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005370:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005374:	50                   	push   eax
c0005375:	e8 54 c6 ff ff       	call   c00019ce <disk_write>
c000537a:	83 c4 20             	add    esp,0x20
c000537d:	85 c0                	test   eax,eax
c000537f:	0f 85 64 ff ff ff    	jne    c00052e9 <f_read+0x17a>
c0005385:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005389:	83 ec 0c             	sub    esp,0xc
c000538c:	6a 01                	push   0x1
c000538e:	57                   	push   edi
c000538f:	56                   	push   esi
c0005390:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005394:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005398:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000539c:	50                   	push   eax
c000539d:	e8 16 c6 ff ff       	call   c00019b8 <disk_read>
c00053a2:	83 c4 20             	add    esp,0x20
c00053a5:	85 c0                	test   eax,eax
c00053a7:	0f 85 3c ff ff ff    	jne    c00052e9 <f_read+0x17a>
c00053ad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053b0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053b3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053b6:	ba 00 02 00 00       	mov    edx,0x200
c00053bb:	25 ff 01 00 00       	and    eax,0x1ff
c00053c0:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053c4:	29 c2                	sub    edx,eax
c00053c6:	39 d6                	cmp    esi,edx
c00053c8:	76 02                	jbe    c00053cc <f_read+0x25d>
c00053ca:	89 d6                	mov    esi,edx
c00053cc:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00053d0:	89 f1                	mov    ecx,esi
c00053d2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053d6:	e8 a7 c6 ff ff       	call   c0001a82 <mem_cpy>
c00053db:	e9 a7 fe ff ff       	jmp    c0005287 <f_read+0x118>
c00053e0:	bd 07 00 00 00       	mov    ebp,0x7
c00053e5:	83 c4 2c             	add    esp,0x2c
c00053e8:	89 e8                	mov    eax,ebp
c00053ea:	5b                   	pop    ebx
c00053eb:	5e                   	pop    esi
c00053ec:	5f                   	pop    edi
c00053ed:	5d                   	pop    ebp
c00053ee:	c3                   	ret    

c00053ef <f_write>:
c00053ef:	55                   	push   ebp
c00053f0:	57                   	push   edi
c00053f1:	56                   	push   esi
c00053f2:	53                   	push   ebx
c00053f3:	83 ec 2c             	sub    esp,0x2c
c00053f6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053fa:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005404:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005408:	89 d8                	mov    eax,ebx
c000540a:	e8 f7 cc ff ff       	call   c0002106 <validate>
c000540f:	89 c5                	mov    ebp,eax
c0005411:	85 c0                	test   eax,eax
c0005413:	0f 85 86 02 00 00    	jne    c000569f <f_write+0x2b0>
c0005419:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000541d:	85 ed                	test   ebp,ebp
c000541f:	0f 85 7a 02 00 00    	jne    c000569f <f_write+0x2b0>
c0005425:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005429:	0f 84 6b 02 00 00    	je     c000569a <f_write+0x2ab>
c000542f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005433:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005436:	0f 84 43 01 00 00    	je     c000557f <f_write+0x190>
c000543c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000543f:	89 c1                	mov    ecx,eax
c0005441:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005445:	0f 83 34 01 00 00    	jae    c000557f <f_write+0x190>
c000544b:	f7 d0                	not    eax
c000544d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005451:	e9 29 01 00 00       	jmp    c000557f <f_write+0x190>
c0005456:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005459:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000545c:	89 d0                	mov    eax,edx
c000545e:	25 ff 01 00 00       	and    eax,0x1ff
c0005463:	0f 85 00 02 00 00    	jne    c0005669 <f_write+0x27a>
c0005469:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000546d:	89 d6                	mov    esi,edx
c000546f:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005473:	89 cf                	mov    edi,ecx
c0005475:	48                   	dec    eax
c0005476:	0f ac fe 09          	shrd   esi,edi,0x9
c000547a:	21 f0                	and    eax,esi
c000547c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005480:	0f 84 06 01 00 00    	je     c000558c <f_write+0x19d>
c0005486:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000548a:	0f 88 6e 01 00 00    	js     c00055fe <f_write+0x20f>
c0005490:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005494:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005497:	89 c8                	mov    eax,ecx
c0005499:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000549d:	e8 fa c7 ff ff       	call   c0001c9c <clst2sect>
c00054a2:	89 d1                	mov    ecx,edx
c00054a4:	09 c1                	or     ecx,eax
c00054a6:	0f 84 1c 01 00 00    	je     c00055c8 <f_write+0x1d9>
c00054ac:	31 ff                	xor    edi,edi
c00054ae:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054b6:	01 c6                	add    esi,eax
c00054b8:	11 d7                	adc    edi,edx
c00054ba:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054c2:	0f 86 63 01 00 00    	jbe    c000562b <f_write+0x23c>
c00054c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054d0:	c1 e8 09             	shr    eax,0x9
c00054d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054d7:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054db:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00054df:	39 c2                	cmp    edx,eax
c00054e1:	76 08                	jbe    c00054eb <f_write+0xfc>
c00054e3:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054eb:	83 ec 0c             	sub    esp,0xc
c00054ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054f2:	57                   	push   edi
c00054f3:	56                   	push   esi
c00054f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054f8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054fc:	50                   	push   eax
c00054fd:	e8 cc c4 ff ff       	call   c00019ce <disk_write>
c0005502:	83 c4 20             	add    esp,0x20
c0005505:	85 c0                	test   eax,eax
c0005507:	0f 85 ce 00 00 00    	jne    c00055db <f_write+0x1ec>
c000550d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005510:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005513:	29 f0                	sub    eax,esi
c0005515:	19 fa                	sbb    edx,edi
c0005517:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000551b:	89 d7                	mov    edi,edx
c000551d:	ba 00 00 00 00       	mov    edx,0x0
c0005522:	89 f9                	mov    ecx,edi
c0005524:	19 d1                	sbb    ecx,edx
c0005526:	73 1c                	jae    c0005544 <f_write+0x155>
c0005528:	89 c7                	mov    edi,eax
c000552a:	b9 00 02 00 00       	mov    ecx,0x200
c000552f:	c1 e7 09             	shl    edi,0x9
c0005532:	8d 43 50             	lea    eax,[ebx+0x50]
c0005535:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005539:	89 fa                	mov    edx,edi
c000553b:	e8 42 c5 ff ff       	call   c0001a82 <mem_cpy>
c0005540:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005544:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005548:	c1 e6 09             	shl    esi,0x9
c000554b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000554f:	31 ff                	xor    edi,edi
c0005551:	01 30                	add    DWORD PTR [eax],esi
c0005553:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005557:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000555b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000555e:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005561:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005564:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005567:	89 c1                	mov    ecx,eax
c0005569:	39 f2                	cmp    edx,esi
c000556b:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000556e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005571:	19 f9                	sbb    ecx,edi
c0005573:	73 04                	jae    c0005579 <f_write+0x18a>
c0005575:	89 f2                	mov    edx,esi
c0005577:	89 f8                	mov    eax,edi
c0005579:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000557c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000557f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005584:	0f 85 cc fe ff ff    	jne    c0005456 <f_write+0x67>
c000558a:	eb 2e                	jmp    c00055ba <f_write+0x1cb>
c000558c:	89 c8                	mov    eax,ecx
c000558e:	09 d0                	or     eax,edx
c0005590:	75 0b                	jne    c000559d <f_write+0x1ae>
c0005592:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005595:	31 d2                	xor    edx,edx
c0005597:	85 c0                	test   eax,eax
c0005599:	75 28                	jne    c00055c3 <f_write+0x1d4>
c000559b:	eb 12                	jmp    c00055af <f_write+0x1c0>
c000559d:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055a1:	74 09                	je     c00055ac <f_write+0x1bd>
c00055a3:	89 d8                	mov    eax,ebx
c00055a5:	e8 13 c7 ff ff       	call   c0001cbd <clmt_clust>
c00055aa:	eb 0a                	jmp    c00055b6 <f_write+0x1c7>
c00055ac:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055af:	89 d8                	mov    eax,ebx
c00055b1:	e8 a1 da ff ff       	call   c0003057 <create_chain>
c00055b6:	85 c0                	test   eax,eax
c00055b8:	75 09                	jne    c00055c3 <f_write+0x1d4>
c00055ba:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055be:	e9 dc 00 00 00       	jmp    c000569f <f_write+0x2b0>
c00055c3:	83 f8 01             	cmp    eax,0x1
c00055c6:	75 0e                	jne    c00055d6 <f_write+0x1e7>
c00055c8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055cc:	bd 02 00 00 00       	mov    ebp,0x2
c00055d1:	e9 c9 00 00 00       	jmp    c000569f <f_write+0x2b0>
c00055d6:	83 f8 ff             	cmp    eax,0xffffffff
c00055d9:	75 0e                	jne    c00055e9 <f_write+0x1fa>
c00055db:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00055df:	bd 01 00 00 00       	mov    ebp,0x1
c00055e4:	e9 b6 00 00 00       	jmp    c000569f <f_write+0x2b0>
c00055e9:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00055ec:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00055f0:	0f 85 90 fe ff ff    	jne    c0005486 <f_write+0x97>
c00055f6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055f9:	e9 88 fe ff ff       	jmp    c0005486 <f_write+0x97>
c00055fe:	83 ec 0c             	sub    esp,0xc
c0005601:	8d 43 50             	lea    eax,[ebx+0x50]
c0005604:	6a 01                	push   0x1
c0005606:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005609:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000560c:	50                   	push   eax
c000560d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005611:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005615:	50                   	push   eax
c0005616:	e8 b3 c3 ff ff       	call   c00019ce <disk_write>
c000561b:	83 c4 20             	add    esp,0x20
c000561e:	85 c0                	test   eax,eax
c0005620:	75 b9                	jne    c00055db <f_write+0x1ec>
c0005622:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005626:	e9 65 fe ff ff       	jmp    c0005490 <f_write+0xa1>
c000562b:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000562e:	75 05                	jne    c0005635 <f_write+0x246>
c0005630:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005633:	74 2e                	je     c0005663 <f_write+0x274>
c0005635:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005638:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000563b:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000563e:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005641:	73 20                	jae    c0005663 <f_write+0x274>
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	8d 43 50             	lea    eax,[ebx+0x50]
c0005649:	6a 01                	push   0x1
c000564b:	57                   	push   edi
c000564c:	56                   	push   esi
c000564d:	50                   	push   eax
c000564e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005652:	50                   	push   eax
c0005653:	e8 60 c3 ff ff       	call   c00019b8 <disk_read>
c0005658:	83 c4 20             	add    esp,0x20
c000565b:	85 c0                	test   eax,eax
c000565d:	0f 85 78 ff ff ff    	jne    c00055db <f_write+0x1ec>
c0005663:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005666:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005669:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000566c:	ba 00 02 00 00       	mov    edx,0x200
c0005671:	25 ff 01 00 00       	and    eax,0x1ff
c0005676:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000567a:	29 c2                	sub    edx,eax
c000567c:	39 d6                	cmp    esi,edx
c000567e:	76 02                	jbe    c0005682 <f_write+0x293>
c0005680:	89 d6                	mov    esi,edx
c0005682:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005686:	89 f1                	mov    ecx,esi
c0005688:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000568c:	e8 f1 c3 ff ff       	call   c0001a82 <mem_cpy>
c0005691:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005695:	e9 b1 fe ff ff       	jmp    c000554b <f_write+0x15c>
c000569a:	bd 07 00 00 00       	mov    ebp,0x7
c000569f:	83 c4 2c             	add    esp,0x2c
c00056a2:	89 e8                	mov    eax,ebp
c00056a4:	5b                   	pop    ebx
c00056a5:	5e                   	pop    esi
c00056a6:	5f                   	pop    edi
c00056a7:	5d                   	pop    ebp
c00056a8:	c3                   	ret    

c00056a9 <f_sync>:
c00056a9:	56                   	push   esi
c00056aa:	53                   	push   ebx
c00056ab:	83 ec 64             	sub    esp,0x64
c00056ae:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056b2:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056b6:	89 d8                	mov    eax,ebx
c00056b8:	e8 49 ca ff ff       	call   c0002106 <validate>
c00056bd:	85 c0                	test   eax,eax
c00056bf:	0f 85 ba 01 00 00    	jne    c000587f <f_sync+0x1d6>
c00056c5:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056c8:	f6 c2 40             	test   dl,0x40
c00056cb:	0f 84 ae 01 00 00    	je     c000587f <f_sync+0x1d6>
c00056d1:	84 d2                	test   dl,dl
c00056d3:	79 33                	jns    c0005708 <f_sync+0x5f>
c00056d5:	83 ec 0c             	sub    esp,0xc
c00056d8:	8d 43 50             	lea    eax,[ebx+0x50]
c00056db:	6a 01                	push   0x1
c00056dd:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00056e0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00056e3:	50                   	push   eax
c00056e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00056ec:	50                   	push   eax
c00056ed:	e8 dc c2 ff ff       	call   c00019ce <disk_write>
c00056f2:	83 c4 20             	add    esp,0x20
c00056f5:	89 c2                	mov    edx,eax
c00056f7:	b8 01 00 00 00       	mov    eax,0x1
c00056fc:	85 d2                	test   edx,edx
c00056fe:	0f 85 7b 01 00 00    	jne    c000587f <f_sync+0x1d6>
c0005704:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000570c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000570f:	0f 85 11 01 00 00    	jne    c0005826 <f_sync+0x17d>
c0005715:	89 d8                	mov    eax,ebx
c0005717:	e8 13 d6 ff ff       	call   c0002d2f <fill_first_frag>
c000571c:	85 c0                	test   eax,eax
c000571e:	0f 85 5b 01 00 00    	jne    c000587f <f_sync+0x1d6>
c0005724:	83 c9 ff             	or     ecx,0xffffffff
c0005727:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000572a:	89 d8                	mov    eax,ebx
c000572c:	e8 c9 d5 ff ff       	call   c0002cfa <fill_last_frag>
c0005731:	85 c0                	test   eax,eax
c0005733:	0f 85 46 01 00 00    	jne    c000587f <f_sync+0x1d6>
c0005739:	83 ec 0c             	sub    esp,0xc
c000573c:	68 60 04 00 00       	push   0x460
c0005741:	e8 f0 2a 00 00       	call   c0008236 <ff_memalloc>
c0005746:	83 c4 10             	add    esp,0x10
c0005749:	89 c6                	mov    esi,eax
c000574b:	b8 11 00 00 00       	mov    eax,0x11
c0005750:	85 f6                	test   esi,esi
c0005752:	0f 84 27 01 00 00    	je     c000587f <f_sync+0x1d6>
c0005758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000575c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005762:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005765:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005768:	89 da                	mov    edx,ebx
c000576a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000576e:	e8 af df ff ff       	call   c0003722 <load_obj_xdir>
c0005773:	85 c0                	test   eax,eax
c0005775:	0f 85 95 00 00 00    	jne    c0005810 <f_sync+0x167>
c000577b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000577f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005782:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005786:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005789:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c000578c:	83 ca 01             	or     edx,0x1
c000578f:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c0005792:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005795:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005798:	83 c0 34             	add    eax,0x34
c000579b:	e8 d9 c2 ff ff       	call   c0001a79 <st_dword>
c00057a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057a4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057aa:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057ad:	83 c0 38             	add    eax,0x38
c00057b0:	e8 c7 c2 ff ff       	call   c0001a7c <st_qword>
c00057b5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057bc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057c2:	83 c0 28             	add    eax,0x28
c00057c5:	e8 b2 c2 ff ff       	call   c0001a7c <st_qword>
c00057ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ce:	ba 00 00 21 50       	mov    edx,0x50210000
c00057d3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d6:	83 c0 0c             	add    eax,0xc
c00057d9:	e8 9b c2 ff ff       	call   c0001a79 <st_dword>
c00057de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057e2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057e5:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c00057e9:	31 d2                	xor    edx,edx
c00057eb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057ee:	83 c0 10             	add    eax,0x10
c00057f1:	e8 83 c2 ff ff       	call   c0001a79 <st_dword>
c00057f6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057fa:	e8 62 e1 ff ff       	call   c0003961 <store_xdir>
c00057ff:	85 c0                	test   eax,eax
c0005801:	75 0d                	jne    c0005810 <f_sync+0x167>
c0005803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005807:	e8 00 eb ff ff       	call   c000430c <sync_fs>
c000580c:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005810:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005814:	83 ec 0c             	sub    esp,0xc
c0005817:	56                   	push   esi
c0005818:	e8 2f 2a 00 00       	call   c000824c <ff_memfree>
c000581d:	83 c4 10             	add    esp,0x10
c0005820:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005824:	eb 59                	jmp    c000587f <f_sync+0x1d6>
c0005826:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005829:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000582c:	e8 b0 c9 ff ff       	call   c00021e1 <move_window>
c0005831:	85 c0                	test   eax,eax
c0005833:	75 4a                	jne    c000587f <f_sync+0x1d6>
c0005835:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005838:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000583c:	89 f2                	mov    edx,esi
c000583e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005841:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005843:	e8 5f f3 ff ff       	call   c0004ba7 <st_clust.isra.1>
c0005848:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000584b:	8d 46 1c             	lea    eax,[esi+0x1c]
c000584e:	e8 26 c2 ff ff       	call   c0001a79 <st_dword>
c0005853:	8d 46 16             	lea    eax,[esi+0x16]
c0005856:	ba 00 00 21 50       	mov    edx,0x50210000
c000585b:	e8 19 c2 ff ff       	call   c0001a79 <st_dword>
c0005860:	8d 46 12             	lea    eax,[esi+0x12]
c0005863:	31 d2                	xor    edx,edx
c0005865:	e8 0b c2 ff ff       	call   c0001a75 <st_word>
c000586a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005876:	e8 91 ea ff ff       	call   c000430c <sync_fs>
c000587b:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000587f:	83 c4 64             	add    esp,0x64
c0005882:	5b                   	pop    ebx
c0005883:	5e                   	pop    esi
c0005884:	c3                   	ret    

c0005885 <f_close>:
c0005885:	53                   	push   ebx
c0005886:	83 ec 24             	sub    esp,0x24
c0005889:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000588d:	53                   	push   ebx
c000588e:	e8 16 fe ff ff       	call   c00056a9 <f_sync>
c0005893:	83 c4 10             	add    esp,0x10
c0005896:	85 c0                	test   eax,eax
c0005898:	75 15                	jne    c00058af <f_close+0x2a>
c000589a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000589e:	89 d8                	mov    eax,ebx
c00058a0:	e8 61 c8 ff ff       	call   c0002106 <validate>
c00058a5:	85 c0                	test   eax,eax
c00058a7:	75 06                	jne    c00058af <f_close+0x2a>
c00058a9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058af:	83 c4 18             	add    esp,0x18
c00058b2:	5b                   	pop    ebx
c00058b3:	c3                   	ret    

c00058b4 <f_lseek>:
c00058b4:	55                   	push   ebp
c00058b5:	57                   	push   edi
c00058b6:	56                   	push   esi
c00058b7:	53                   	push   ebx
c00058b8:	83 ec 3c             	sub    esp,0x3c
c00058bb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058bf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058c3:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00058ca:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058ce:	89 d8                	mov    eax,ebx
c00058d0:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00058d4:	e8 2d c8 ff ff       	call   c0002106 <validate>
c00058d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058dd:	85 c0                	test   eax,eax
c00058df:	0f 85 7a 04 00 00    	jne    c0005d5f <f_lseek+0x4ab>
c00058e5:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c00058e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058ed:	85 c0                	test   eax,eax
c00058ef:	0f 85 6a 04 00 00    	jne    c0005d5f <f_lseek+0x4ab>
c00058f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00058f9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00058fc:	74 0c                	je     c000590a <f_lseek+0x56>
c00058fe:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005901:	85 c0                	test   eax,eax
c0005903:	75 1f                	jne    c0005924 <f_lseek+0x70>
c0005905:	e9 b5 01 00 00       	jmp    c0005abf <f_lseek+0x20b>
c000590a:	83 c9 ff             	or     ecx,0xffffffff
c000590d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005910:	89 d8                	mov    eax,ebx
c0005912:	e8 e3 d3 ff ff       	call   c0002cfa <fill_last_frag>
c0005917:	85 c0                	test   eax,eax
c0005919:	74 e3                	je     c00058fe <f_lseek+0x4a>
c000591b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000591f:	e9 3b 04 00 00       	jmp    c0005d5f <f_lseek+0x4ab>
c0005924:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005929:	0f 85 ac 00 00 00    	jne    c00059db <f_lseek+0x127>
c000592f:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005933:	0f 85 a2 00 00 00    	jne    c00059db <f_lseek+0x127>
c0005939:	8d 78 04             	lea    edi,[eax+0x4]
c000593c:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c000593f:	8b 00                	mov    eax,DWORD PTR [eax]
c0005941:	be 02 00 00 00       	mov    esi,0x2
c0005946:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000594a:	85 ed                	test   ebp,ebp
c000594c:	74 73                	je     c00059c1 <f_lseek+0x10d>
c000594e:	89 e9                	mov    ecx,ebp
c0005950:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005957:	ff 04 24             	inc    DWORD PTR [esp]
c000595a:	89 ca                	mov    edx,ecx
c000595c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005960:	89 d8                	mov    eax,ebx
c0005962:	e8 02 d4 ff ff       	call   c0002d69 <get_fat>
c0005967:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000596b:	83 f8 01             	cmp    eax,0x1
c000596e:	77 11                	ja     c0005981 <f_lseek+0xcd>
c0005970:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005974:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c000597c:	e9 de 03 00 00       	jmp    c0005d5f <f_lseek+0x4ab>
c0005981:	83 f8 ff             	cmp    eax,0xffffffff
c0005984:	75 11                	jne    c0005997 <f_lseek+0xe3>
c0005986:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000598a:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005992:	e9 c8 03 00 00       	jmp    c0005d5f <f_lseek+0x4ab>
c0005997:	8d 51 01             	lea    edx,[ecx+0x1]
c000599a:	89 c1                	mov    ecx,eax
c000599c:	39 c2                	cmp    edx,eax
c000599e:	74 b7                	je     c0005957 <f_lseek+0xa3>
c00059a0:	83 c6 02             	add    esi,0x2
c00059a3:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059a7:	72 0b                	jb     c00059b4 <f_lseek+0x100>
c00059a9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059ac:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059af:	89 0f                	mov    DWORD PTR [edi],ecx
c00059b1:	83 c7 08             	add    edi,0x8
c00059b4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059b8:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059bb:	76 04                	jbe    c00059c1 <f_lseek+0x10d>
c00059bd:	89 c5                	mov    ebp,eax
c00059bf:	eb 8d                	jmp    c000594e <f_lseek+0x9a>
c00059c1:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059c4:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00059c8:	89 30                	mov    DWORD PTR [eax],esi
c00059ca:	0f 87 87 03 00 00    	ja     c0005d57 <f_lseek+0x4a3>
c00059d0:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00059d6:	e9 84 03 00 00       	jmp    c0005d5f <f_lseek+0x4ab>
c00059db:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00059de:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00059e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00059e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00059e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00059ed:	39 04 24             	cmp    DWORD PTR [esp],eax
c00059f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00059f4:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00059f8:	73 0f                	jae    c0005a09 <f_lseek+0x155>
c00059fa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00059fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a05:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a11:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a14:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a1b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a1f:	0f 84 3a 03 00 00    	je     c0005d5f <f_lseek+0x4ab>
c0005a25:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a29:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a2d:	83 c6 ff             	add    esi,0xffffffff
c0005a30:	89 d8                	mov    eax,ebx
c0005a32:	83 d7 ff             	adc    edi,0xffffffff
c0005a35:	89 f2                	mov    edx,esi
c0005a37:	89 f9                	mov    ecx,edi
c0005a39:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a3d:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a40:	e8 78 c2 ff ff       	call   c0001cbd <clmt_clust>
c0005a45:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a49:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a4c:	89 c2                	mov    edx,eax
c0005a4e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a52:	89 c8                	mov    eax,ecx
c0005a54:	e8 43 c2 ff ff       	call   c0001c9c <clst2sect>
c0005a59:	89 d7                	mov    edi,edx
c0005a5b:	09 c7                	or     edi,eax
c0005a5d:	0f 84 0d ff ff ff    	je     c0005970 <f_lseek+0xbc>
c0005a63:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005a67:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005a6d:	0f 84 ec 02 00 00    	je     c0005d5f <f_lseek+0x4ab>
c0005a73:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a77:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a7b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a7e:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a82:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a86:	4d                   	dec    ebp
c0005a87:	31 ff                	xor    edi,edi
c0005a89:	21 ee                	and    esi,ebp
c0005a8b:	01 c6                	add    esi,eax
c0005a8d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a90:	11 d7                	adc    edi,edx
c0005a92:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a95:	39 fa                	cmp    edx,edi
c0005a97:	75 08                	jne    c0005aa1 <f_lseek+0x1ed>
c0005a99:	39 f0                	cmp    eax,esi
c0005a9b:	0f 84 be 02 00 00    	je     c0005d5f <f_lseek+0x4ab>
c0005aa1:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005aa4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005aa8:	0f 89 80 02 00 00    	jns    c0005d2e <f_lseek+0x47a>
c0005aae:	83 ec 0c             	sub    esp,0xc
c0005ab1:	6a 01                	push   0x1
c0005ab3:	52                   	push   edx
c0005ab4:	50                   	push   eax
c0005ab5:	55                   	push   ebp
c0005ab6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005aba:	e9 5a 02 00 00       	jmp    c0005d19 <f_lseek+0x465>
c0005abf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ac3:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ac6:	74 16                	je     c0005ade <f_lseek+0x22a>
c0005ac8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005acd:	76 0f                	jbe    c0005ade <f_lseek+0x22a>
c0005acf:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ad6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ade:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005ae1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005ae4:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005ae7:	89 c7                	mov    edi,eax
c0005ae9:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005aed:	73 0d                	jae    c0005afc <f_lseek+0x248>
c0005aef:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005af3:	75 07                	jne    c0005afc <f_lseek+0x248>
c0005af5:	89 14 24             	mov    DWORD PTR [esp],edx
c0005af8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005afc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005aff:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b02:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b06:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b0d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b14:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b17:	75 09                	jne    c0005b22 <f_lseek+0x26e>
c0005b19:	31 f6                	xor    esi,esi
c0005b1b:	31 ff                	xor    edi,edi
c0005b1d:	e9 af 01 00 00       	jmp    c0005cd1 <f_lseek+0x41d>
c0005b22:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b26:	89 d7                	mov    edi,edx
c0005b28:	c1 e1 09             	shl    ecx,0x9
c0005b2b:	09 c7                	or     edi,eax
c0005b2d:	89 cd                	mov    ebp,ecx
c0005b2f:	74 6d                	je     c0005b9e <f_lseek+0x2ea>
c0005b31:	83 c0 ff             	add    eax,0xffffffff
c0005b34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b38:	83 d2 ff             	adc    edx,0xffffffff
c0005b3b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b42:	83 c0 ff             	add    eax,0xffffffff
c0005b45:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b49:	83 d2 ff             	adc    edx,0xffffffff
c0005b4c:	31 ff                	xor    edi,edi
c0005b4e:	57                   	push   edi
c0005b4f:	51                   	push   ecx
c0005b50:	52                   	push   edx
c0005b51:	50                   	push   eax
c0005b52:	e8 55 df 01 00       	call   c0023aac <__udivdi3>
c0005b57:	83 c4 10             	add    esp,0x10
c0005b5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005b62:	57                   	push   edi
c0005b63:	55                   	push   ebp
c0005b64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b6c:	e8 3b df 01 00       	call   c0023aac <__udivdi3>
c0005b71:	83 c4 10             	add    esp,0x10
c0005b74:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b78:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b7c:	19 d1                	sbb    ecx,edx
c0005b7e:	72 1e                	jb     c0005b9e <f_lseek+0x2ea>
c0005b80:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b84:	89 e9                	mov    ecx,ebp
c0005b86:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b89:	f7 d9                	neg    ecx
c0005b8b:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b8e:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005b92:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b95:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b98:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b9c:	eb 28                	jmp    c0005bc6 <f_lseek+0x312>
c0005b9e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 1e                	jne    c0005bc3 <f_lseek+0x30f>
c0005ba5:	31 d2                	xor    edx,edx
c0005ba7:	89 d8                	mov    eax,ebx
c0005ba9:	e8 a9 d4 ff ff       	call   c0003057 <create_chain>
c0005bae:	83 f8 01             	cmp    eax,0x1
c0005bb1:	0f 84 b9 fd ff ff    	je     c0005970 <f_lseek+0xbc>
c0005bb7:	83 f8 ff             	cmp    eax,0xffffffff
c0005bba:	0f 84 c6 fd ff ff    	je     c0005986 <f_lseek+0xd2>
c0005bc0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bc3:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bc6:	85 c0                	test   eax,eax
c0005bc8:	0f 84 4b ff ff ff    	je     c0005b19 <f_lseek+0x265>
c0005bce:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005bd2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005bda:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005bdd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005be1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005be4:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005be7:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005beb:	0f 83 9d 00 00 00    	jae    c0005c8e <f_lseek+0x3da>
c0005bf1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005bf5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005bf9:	29 34 24             	sub    DWORD PTR [esp],esi
c0005bfc:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c00:	01 f2                	add    edx,esi
c0005c02:	11 f9                	adc    ecx,edi
c0005c04:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c08:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c0c:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c0f:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c12:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c15:	f6 c1 02             	test   cl,0x2
c0005c18:	74 35                	je     c0005c4f <f_lseek+0x39b>
c0005c1a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c1e:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c21:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c24:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c28:	73 16                	jae    c0005c40 <f_lseek+0x38c>
c0005c2a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c2e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c32:	88 ca                	mov    dl,cl
c0005c34:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c37:	83 ca 40             	or     edx,0x40
c0005c3a:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c3d:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c40:	89 c2                	mov    edx,eax
c0005c42:	89 d8                	mov    eax,ebx
c0005c44:	e8 0e d4 ff ff       	call   c0003057 <create_chain>
c0005c49:	85 c0                	test   eax,eax
c0005c4b:	75 0b                	jne    c0005c58 <f_lseek+0x3a4>
c0005c4d:	eb 30                	jmp    c0005c7f <f_lseek+0x3cb>
c0005c4f:	89 c2                	mov    edx,eax
c0005c51:	89 d8                	mov    eax,ebx
c0005c53:	e8 11 d1 ff ff       	call   c0002d69 <get_fat>
c0005c58:	83 f8 ff             	cmp    eax,0xffffffff
c0005c5b:	0f 84 25 fd ff ff    	je     c0005986 <f_lseek+0xd2>
c0005c61:	83 f8 01             	cmp    eax,0x1
c0005c64:	0f 86 06 fd ff ff    	jbe    c0005970 <f_lseek+0xbc>
c0005c6a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c6e:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c71:	0f 86 f9 fc ff ff    	jbe    c0005970 <f_lseek+0xbc>
c0005c77:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c7a:	e9 5b ff ff ff       	jmp    c0005bda <f_lseek+0x326>
c0005c7f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c8e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c91:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c95:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c98:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c9b:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c9e:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ca4:	0f 84 6f fe ff ff    	je     c0005b19 <f_lseek+0x265>
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cb0:	e8 e7 bf ff ff       	call   c0001c9c <clst2sect>
c0005cb5:	89 d7                	mov    edi,edx
c0005cb7:	09 c7                	or     edi,eax
c0005cb9:	0f 84 b1 fc ff ff    	je     c0005970 <f_lseek+0xbc>
c0005cbf:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cc3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cc6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cca:	c1 ef 09             	shr    edi,0x9
c0005ccd:	01 c6                	add    esi,eax
c0005ccf:	11 d7                	adc    edi,edx
c0005cd1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005cd4:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005cd7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005cda:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005cdd:	19 d1                	sbb    ecx,edx
c0005cdf:	73 0a                	jae    c0005ceb <f_lseek+0x437>
c0005ce1:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005ce4:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005ce7:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005ceb:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cf0:	74 6d                	je     c0005d5f <f_lseek+0x4ab>
c0005cf2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cf8:	39 fa                	cmp    edx,edi
c0005cfa:	75 04                	jne    c0005d00 <f_lseek+0x44c>
c0005cfc:	39 f0                	cmp    eax,esi
c0005cfe:	74 5f                	je     c0005d5f <f_lseek+0x4ab>
c0005d00:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d03:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d07:	79 25                	jns    c0005d2e <f_lseek+0x47a>
c0005d09:	83 ec 0c             	sub    esp,0xc
c0005d0c:	6a 01                	push   0x1
c0005d0e:	52                   	push   edx
c0005d0f:	50                   	push   eax
c0005d10:	55                   	push   ebp
c0005d11:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d15:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d19:	50                   	push   eax
c0005d1a:	e8 af bc ff ff       	call   c00019ce <disk_write>
c0005d1f:	83 c4 20             	add    esp,0x20
c0005d22:	85 c0                	test   eax,eax
c0005d24:	0f 85 5c fc ff ff    	jne    c0005986 <f_lseek+0xd2>
c0005d2a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d2e:	83 ec 0c             	sub    esp,0xc
c0005d31:	6a 01                	push   0x1
c0005d33:	57                   	push   edi
c0005d34:	56                   	push   esi
c0005d35:	55                   	push   ebp
c0005d36:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d3a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d3e:	50                   	push   eax
c0005d3f:	e8 74 bc ff ff       	call   c00019b8 <disk_read>
c0005d44:	83 c4 20             	add    esp,0x20
c0005d47:	85 c0                	test   eax,eax
c0005d49:	0f 85 37 fc ff ff    	jne    c0005986 <f_lseek+0xd2>
c0005d4f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d52:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d55:	eb 08                	jmp    c0005d5f <f_lseek+0x4ab>
c0005d57:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005d5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005d63:	83 c4 3c             	add    esp,0x3c
c0005d66:	5b                   	pop    ebx
c0005d67:	5e                   	pop    esi
c0005d68:	5f                   	pop    edi
c0005d69:	5d                   	pop    ebp
c0005d6a:	c3                   	ret    

c0005d6b <f_opendir>:
c0005d6b:	56                   	push   esi
c0005d6c:	b8 09 00 00 00       	mov    eax,0x9
c0005d71:	53                   	push   ebx
c0005d72:	83 ec 24             	sub    esp,0x24
c0005d75:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d79:	85 db                	test   ebx,ebx
c0005d7b:	0f 84 e6 00 00 00    	je     c0005e67 <f_opendir+0xfc>
c0005d81:	31 c9                	xor    ecx,ecx
c0005d83:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d87:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d8b:	e8 03 c7 ff ff       	call   c0002493 <mount_volume>
c0005d90:	85 c0                	test   eax,eax
c0005d92:	0f 85 c9 00 00 00    	jne    c0005e61 <f_opendir+0xf6>
c0005d98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d9c:	83 ec 0c             	sub    esp,0xc
c0005d9f:	89 03                	mov    DWORD PTR [ebx],eax
c0005da1:	68 60 04 00 00       	push   0x460
c0005da6:	e8 8b 24 00 00       	call   c0008236 <ff_memalloc>
c0005dab:	83 c4 10             	add    esp,0x10
c0005dae:	89 c6                	mov    esi,eax
c0005db0:	b8 11 00 00 00       	mov    eax,0x11
c0005db5:	85 f6                	test   esi,esi
c0005db7:	0f 84 aa 00 00 00    	je     c0005e67 <f_opendir+0xfc>
c0005dbd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dc1:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005dc7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005dca:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005dcd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005dd1:	89 d8                	mov    eax,ebx
c0005dd3:	e8 31 ee ff ff       	call   c0004c09 <follow_path>
c0005dd8:	85 c0                	test   eax,eax
c0005dda:	75 61                	jne    c0005e3d <f_opendir+0xd2>
c0005ddc:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005de0:	78 46                	js     c0005e28 <f_opendir+0xbd>
c0005de2:	b8 05 00 00 00       	mov    eax,0x5
c0005de7:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005deb:	74 50                	je     c0005e3d <f_opendir+0xd2>
c0005ded:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005df1:	8a 01                	mov    al,BYTE PTR [ecx]
c0005df3:	3c 04                	cmp    al,0x4
c0005df5:	75 26                	jne    c0005e1d <f_opendir+0xb2>
c0005df7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dfa:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005dfd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e00:	30 d2                	xor    dl,dl
c0005e02:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e06:	09 c2                	or     edx,eax
c0005e08:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e0b:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e0e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e11:	89 da                	mov    edx,ebx
c0005e13:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e16:	e8 b4 ed ff ff       	call   c0004bcf <init_alloc_info.isra.2>
c0005e1b:	eb 0b                	jmp    c0005e28 <f_opendir+0xbd>
c0005e1d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e20:	e8 59 ed ff ff       	call   c0004b7e <ld_clust.isra.0>
c0005e25:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e2c:	31 d2                	xor    edx,edx
c0005e2e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e32:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e36:	89 d8                	mov    eax,ebx
c0005e38:	e8 22 d1 ff ff       	call   c0002f5f <dir_sdi>
c0005e3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e41:	83 ec 0c             	sub    esp,0xc
c0005e44:	56                   	push   esi
c0005e45:	e8 02 24 00 00       	call   c000824c <ff_memfree>
c0005e4a:	83 c4 10             	add    esp,0x10
c0005e4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e51:	83 f8 04             	cmp    eax,0x4
c0005e54:	74 06                	je     c0005e5c <f_opendir+0xf1>
c0005e56:	85 c0                	test   eax,eax
c0005e58:	74 0d                	je     c0005e67 <f_opendir+0xfc>
c0005e5a:	eb 05                	jmp    c0005e61 <f_opendir+0xf6>
c0005e5c:	b8 05 00 00 00       	mov    eax,0x5
c0005e61:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e67:	83 c4 24             	add    esp,0x24
c0005e6a:	5b                   	pop    ebx
c0005e6b:	5e                   	pop    esi
c0005e6c:	c3                   	ret    

c0005e6d <f_closedir>:
c0005e6d:	53                   	push   ebx
c0005e6e:	83 ec 18             	sub    esp,0x18
c0005e71:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e75:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e79:	89 d8                	mov    eax,ebx
c0005e7b:	e8 86 c2 ff ff       	call   c0002106 <validate>
c0005e80:	85 c0                	test   eax,eax
c0005e82:	75 06                	jne    c0005e8a <f_closedir+0x1d>
c0005e84:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e8a:	83 c4 18             	add    esp,0x18
c0005e8d:	5b                   	pop    ebx
c0005e8e:	c3                   	ret    

c0005e8f <f_readdir>:
c0005e8f:	57                   	push   edi
c0005e90:	56                   	push   esi
c0005e91:	53                   	push   ebx
c0005e92:	83 ec 20             	sub    esp,0x20
c0005e95:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e99:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ea1:	89 d8                	mov    eax,ebx
c0005ea3:	e8 5e c2 ff ff       	call   c0002106 <validate>
c0005ea8:	85 c0                	test   eax,eax
c0005eaa:	75 77                	jne    c0005f23 <f_readdir+0x94>
c0005eac:	85 ff                	test   edi,edi
c0005eae:	75 0b                	jne    c0005ebb <f_readdir+0x2c>
c0005eb0:	31 d2                	xor    edx,edx
c0005eb2:	89 d8                	mov    eax,ebx
c0005eb4:	e8 a6 d0 ff ff       	call   c0002f5f <dir_sdi>
c0005eb9:	eb 68                	jmp    c0005f23 <f_readdir+0x94>
c0005ebb:	83 ec 0c             	sub    esp,0xc
c0005ebe:	68 60 04 00 00       	push   0x460
c0005ec3:	e8 6e 23 00 00       	call   c0008236 <ff_memalloc>
c0005ec8:	83 c4 10             	add    esp,0x10
c0005ecb:	89 c6                	mov    esi,eax
c0005ecd:	b8 11 00 00 00       	mov    eax,0x11
c0005ed2:	85 f6                	test   esi,esi
c0005ed4:	74 4d                	je     c0005f23 <f_readdir+0x94>
c0005ed6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005eda:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ee0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ee3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ee6:	31 d2                	xor    edx,edx
c0005ee8:	89 d8                	mov    eax,ebx
c0005eea:	e8 80 d8 ff ff       	call   c000376f <dir_read>
c0005eef:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005ef4:	75 19                	jne    c0005f0f <f_readdir+0x80>
c0005ef6:	89 fa                	mov    edx,edi
c0005ef8:	89 d8                	mov    eax,ebx
c0005efa:	e8 7e ea ff ff       	call   c000497d <get_fileinfo>
c0005eff:	31 d2                	xor    edx,edx
c0005f01:	89 d8                	mov    eax,ebx
c0005f03:	e8 af d5 ff ff       	call   c00034b7 <dir_next>
c0005f08:	83 f8 04             	cmp    eax,0x4
c0005f0b:	75 02                	jne    c0005f0f <f_readdir+0x80>
c0005f0d:	31 c0                	xor    eax,eax
c0005f0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f13:	83 ec 0c             	sub    esp,0xc
c0005f16:	56                   	push   esi
c0005f17:	e8 30 23 00 00       	call   c000824c <ff_memfree>
c0005f1c:	83 c4 10             	add    esp,0x10
c0005f1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f23:	83 c4 20             	add    esp,0x20
c0005f26:	5b                   	pop    ebx
c0005f27:	5e                   	pop    esi
c0005f28:	5f                   	pop    edi
c0005f29:	c3                   	ret    

c0005f2a <f_stat>:
c0005f2a:	57                   	push   edi
c0005f2b:	31 c9                	xor    ecx,ecx
c0005f2d:	56                   	push   esi
c0005f2e:	53                   	push   ebx
c0005f2f:	83 ec 50             	sub    esp,0x50
c0005f32:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f36:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f3a:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f3e:	e8 50 c5 ff ff       	call   c0002493 <mount_volume>
c0005f43:	89 c3                	mov    ebx,eax
c0005f45:	85 c0                	test   eax,eax
c0005f47:	75 67                	jne    c0005fb0 <f_stat+0x86>
c0005f49:	83 ec 0c             	sub    esp,0xc
c0005f4c:	bb 11 00 00 00       	mov    ebx,0x11
c0005f51:	68 60 04 00 00       	push   0x460
c0005f56:	e8 db 22 00 00       	call   c0008236 <ff_memalloc>
c0005f5b:	83 c4 10             	add    esp,0x10
c0005f5e:	89 c6                	mov    esi,eax
c0005f60:	85 c0                	test   eax,eax
c0005f62:	74 4c                	je     c0005fb0 <f_stat+0x86>
c0005f64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f68:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f6e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f71:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f74:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f78:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f7c:	e8 88 ec ff ff       	call   c0004c09 <follow_path>
c0005f81:	89 c3                	mov    ebx,eax
c0005f83:	85 c0                	test   eax,eax
c0005f85:	75 1d                	jne    c0005fa4 <f_stat+0x7a>
c0005f87:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f8c:	78 11                	js     c0005f9f <f_stat+0x75>
c0005f8e:	85 ff                	test   edi,edi
c0005f90:	74 12                	je     c0005fa4 <f_stat+0x7a>
c0005f92:	89 fa                	mov    edx,edi
c0005f94:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f98:	e8 e0 e9 ff ff       	call   c000497d <get_fileinfo>
c0005f9d:	eb 05                	jmp    c0005fa4 <f_stat+0x7a>
c0005f9f:	bb 06 00 00 00       	mov    ebx,0x6
c0005fa4:	83 ec 0c             	sub    esp,0xc
c0005fa7:	56                   	push   esi
c0005fa8:	e8 9f 22 00 00       	call   c000824c <ff_memfree>
c0005fad:	83 c4 10             	add    esp,0x10
c0005fb0:	83 c4 50             	add    esp,0x50
c0005fb3:	89 d8                	mov    eax,ebx
c0005fb5:	5b                   	pop    ebx
c0005fb6:	5e                   	pop    esi
c0005fb7:	5f                   	pop    edi
c0005fb8:	c3                   	ret    

c0005fb9 <f_getfree>:
c0005fb9:	55                   	push   ebp
c0005fba:	31 c9                	xor    ecx,ecx
c0005fbc:	57                   	push   edi
c0005fbd:	56                   	push   esi
c0005fbe:	53                   	push   ebx
c0005fbf:	83 ec 5c             	sub    esp,0x5c
c0005fc2:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005fc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fca:	e8 c4 c4 ff ff       	call   c0002493 <mount_volume>
c0005fcf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fd3:	85 c0                	test   eax,eax
c0005fd5:	0f 85 9d 01 00 00    	jne    c0006178 <f_getfree+0x1bf>
c0005fdb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fdf:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005fe3:	89 02                	mov    DWORD PTR [edx],eax
c0005fe5:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005fe8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005feb:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005fee:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ff2:	39 f2                	cmp    edx,esi
c0005ff4:	77 0b                	ja     c0006001 <f_getfree+0x48>
c0005ff6:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005ffa:	89 10                	mov    DWORD PTR [eax],edx
c0005ffc:	e9 77 01 00 00       	jmp    c0006178 <f_getfree+0x1bf>
c0006001:	8a 10                	mov    dl,BYTE PTR [eax]
c0006003:	80 fa 01             	cmp    dl,0x1
c0006006:	75 3a                	jne    c0006042 <f_getfree+0x89>
c0006008:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000600c:	be 02 00 00 00       	mov    esi,0x2
c0006011:	31 db                	xor    ebx,ebx
c0006013:	89 f2                	mov    edx,esi
c0006015:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006019:	e8 4b cd ff ff       	call   c0002d69 <get_fat>
c000601e:	83 f8 ff             	cmp    eax,0xffffffff
c0006021:	0f 84 28 01 00 00    	je     c000614f <f_getfree+0x196>
c0006027:	83 f8 01             	cmp    eax,0x1
c000602a:	0f 84 29 01 00 00    	je     c0006159 <f_getfree+0x1a0>
c0006030:	83 d3 00             	adc    ebx,0x0
c0006033:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006037:	46                   	inc    esi
c0006038:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000603b:	77 d6                	ja     c0006013 <f_getfree+0x5a>
c000603d:	e9 25 01 00 00       	jmp    c0006167 <f_getfree+0x1ae>
c0006042:	80 fa 04             	cmp    dl,0x4
c0006045:	0f 85 88 00 00 00    	jne    c00060d3 <f_getfree+0x11a>
c000604b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000604e:	31 ed                	xor    ebp,ebp
c0006050:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006053:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006057:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000605b:	31 db                	xor    ebx,ebx
c000605d:	85 ed                	test   ebp,ebp
c000605f:	75 3f                	jne    c00060a0 <f_getfree+0xe7>
c0006061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006065:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006069:	83 c0 01             	add    eax,0x1
c000606c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006070:	83 d2 00             	adc    edx,0x0
c0006073:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006077:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000607b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000607f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006083:	e8 59 c1 ff ff       	call   c00021e1 <move_window>
c0006088:	85 c0                	test   eax,eax
c000608a:	0f 85 d3 00 00 00    	jne    c0006163 <f_getfree+0x1aa>
c0006090:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006094:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006098:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000609c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060a4:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060a7:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060ab:	89 cf                	mov    edi,ecx
c00060ad:	85 f6                	test   esi,esi
c00060af:	74 12                	je     c00060c3 <f_getfree+0x10a>
c00060b1:	88 c1                	mov    cl,al
c00060b3:	83 e1 01             	and    ecx,0x1
c00060b6:	80 f9 01             	cmp    cl,0x1
c00060b9:	83 d3 00             	adc    ebx,0x0
c00060bc:	d0 e8                	shr    al,1
c00060be:	4e                   	dec    esi
c00060bf:	39 fe                	cmp    esi,edi
c00060c1:	75 ea                	jne    c00060ad <f_getfree+0xf4>
c00060c3:	45                   	inc    ebp
c00060c4:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00060ca:	85 f6                	test   esi,esi
c00060cc:	75 8f                	jne    c000605d <f_getfree+0xa4>
c00060ce:	e9 94 00 00 00       	jmp    c0006167 <f_getfree+0x1ae>
c00060d3:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060d6:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060d9:	31 f6                	xor    esi,esi
c00060db:	31 db                	xor    ebx,ebx
c00060dd:	85 f6                	test   esi,esi
c00060df:	75 1b                	jne    c00060fc <f_getfree+0x143>
c00060e1:	89 d7                	mov    edi,edx
c00060e3:	89 cd                	mov    ebp,ecx
c00060e5:	83 c7 01             	add    edi,0x1
c00060e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060ec:	83 d5 00             	adc    ebp,0x0
c00060ef:	e8 ed c0 ff ff       	call   c00021e1 <move_window>
c00060f4:	85 c0                	test   eax,eax
c00060f6:	75 6b                	jne    c0006163 <f_getfree+0x1aa>
c00060f8:	89 fa                	mov    edx,edi
c00060fa:	89 e9                	mov    ecx,ebp
c00060fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006100:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006104:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006108:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000610b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000610f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006113:	75 11                	jne    c0006126 <f_getfree+0x16d>
c0006115:	e8 e9 b8 ff ff       	call   c0001a03 <ld_word>
c000611a:	66 83 f8 01          	cmp    ax,0x1
c000611e:	83 d3 00             	adc    ebx,0x0
c0006121:	83 c6 02             	add    esi,0x2
c0006124:	eb 13                	jmp    c0006139 <f_getfree+0x180>
c0006126:	e8 e5 b8 ff ff       	call   c0001a10 <ld_dword>
c000612b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006130:	83 f8 01             	cmp    eax,0x1
c0006133:	83 d3 00             	adc    ebx,0x0
c0006136:	83 c6 04             	add    esi,0x4
c0006139:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000613f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006143:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006147:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000614b:	75 90                	jne    c00060dd <f_getfree+0x124>
c000614d:	eb 18                	jmp    c0006167 <f_getfree+0x1ae>
c000614f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006157:	eb 0e                	jmp    c0006167 <f_getfree+0x1ae>
c0006159:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006161:	eb 04                	jmp    c0006167 <f_getfree+0x1ae>
c0006163:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006167:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000616b:	89 18                	mov    DWORD PTR [eax],ebx
c000616d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006171:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006174:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006178:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000617c:	83 c4 5c             	add    esp,0x5c
c000617f:	5b                   	pop    ebx
c0006180:	5e                   	pop    esi
c0006181:	5f                   	pop    edi
c0006182:	5d                   	pop    ebp
c0006183:	c3                   	ret    

c0006184 <f_truncate>:
c0006184:	56                   	push   esi
c0006185:	53                   	push   ebx
c0006186:	83 ec 14             	sub    esp,0x14
c0006189:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000618d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006191:	89 d8                	mov    eax,ebx
c0006193:	e8 6e bf ff ff       	call   c0002106 <validate>
c0006198:	89 c6                	mov    esi,eax
c000619a:	85 c0                	test   eax,eax
c000619c:	0f 85 d2 00 00 00    	jne    c0006274 <f_truncate+0xf0>
c00061a2:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061a6:	85 f6                	test   esi,esi
c00061a8:	0f 85 c6 00 00 00    	jne    c0006274 <f_truncate+0xf0>
c00061ae:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061b2:	0f 84 b7 00 00 00    	je     c000626f <f_truncate+0xeb>
c00061b8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061bb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061be:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061c1:	89 d1                	mov    ecx,edx
c00061c3:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061c6:	0f 83 a8 00 00 00    	jae    c0006274 <f_truncate+0xf0>
c00061cc:	09 c2                	or     edx,eax
c00061ce:	75 15                	jne    c00061e5 <f_truncate+0x61>
c00061d0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061d3:	31 c9                	xor    ecx,ecx
c00061d5:	89 d8                	mov    eax,ebx
c00061d7:	e8 7a d0 ff ff       	call   c0003256 <remove_chain>
c00061dc:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061e3:	eb 35                	jmp    c000621a <f_truncate+0x96>
c00061e5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061e8:	89 d8                	mov    eax,ebx
c00061ea:	e8 7a cb ff ff       	call   c0002d69 <get_fat>
c00061ef:	89 c2                	mov    edx,eax
c00061f1:	b8 01 00 00 00       	mov    eax,0x1
c00061f6:	83 fa ff             	cmp    edx,0xffffffff
c00061f9:	74 1f                	je     c000621a <f_truncate+0x96>
c00061fb:	b8 02 00 00 00       	mov    eax,0x2
c0006200:	83 fa 01             	cmp    edx,0x1
c0006203:	74 15                	je     c000621a <f_truncate+0x96>
c0006205:	31 c0                	xor    eax,eax
c0006207:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000620b:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000620e:	76 0a                	jbe    c000621a <f_truncate+0x96>
c0006210:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006213:	89 d8                	mov    eax,ebx
c0006215:	e8 3c d0 ff ff       	call   c0003256 <remove_chain>
c000621a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000621d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006220:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006223:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006226:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006229:	83 ca 40             	or     edx,0x40
c000622c:	85 c0                	test   eax,eax
c000622e:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006231:	75 35                	jne    c0006268 <f_truncate+0xe4>
c0006233:	84 d2                	test   dl,dl
c0006235:	79 3d                	jns    c0006274 <f_truncate+0xf0>
c0006237:	83 ec 0c             	sub    esp,0xc
c000623a:	8d 43 50             	lea    eax,[ebx+0x50]
c000623d:	6a 01                	push   0x1
c000623f:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006242:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006245:	50                   	push   eax
c0006246:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000624a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000624e:	50                   	push   eax
c000624f:	e8 7a b7 ff ff       	call   c00019ce <disk_write>
c0006254:	83 c4 20             	add    esp,0x20
c0006257:	85 c0                	test   eax,eax
c0006259:	75 08                	jne    c0006263 <f_truncate+0xdf>
c000625b:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000625f:	31 f6                	xor    esi,esi
c0006261:	eb 11                	jmp    c0006274 <f_truncate+0xf0>
c0006263:	b8 01 00 00 00       	mov    eax,0x1
c0006268:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000626b:	89 c6                	mov    esi,eax
c000626d:	eb 05                	jmp    c0006274 <f_truncate+0xf0>
c000626f:	be 07 00 00 00       	mov    esi,0x7
c0006274:	89 f0                	mov    eax,esi
c0006276:	83 c4 14             	add    esp,0x14
c0006279:	5b                   	pop    ebx
c000627a:	5e                   	pop    esi
c000627b:	c3                   	ret    

c000627c <f_unlink>:
c000627c:	56                   	push   esi
c000627d:	b9 02 00 00 00       	mov    ecx,0x2
c0006282:	53                   	push   ebx
c0006283:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006289:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000628d:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c0006294:	e8 fa c1 ff ff       	call   c0002493 <mount_volume>
c0006299:	85 c0                	test   eax,eax
c000629b:	0f 85 55 01 00 00    	jne    c00063f6 <f_unlink+0x17a>
c00062a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062a5:	83 ec 0c             	sub    esp,0xc
c00062a8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062ac:	68 60 04 00 00       	push   0x460
c00062b1:	e8 80 1f 00 00       	call   c0008236 <ff_memalloc>
c00062b6:	83 c4 10             	add    esp,0x10
c00062b9:	89 c3                	mov    ebx,eax
c00062bb:	b8 11 00 00 00       	mov    eax,0x11
c00062c0:	85 db                	test   ebx,ebx
c00062c2:	0f 84 2e 01 00 00    	je     c00063f6 <f_unlink+0x17a>
c00062c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062cc:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062d2:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062d5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062d8:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062df:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062e3:	e8 21 e9 ff ff       	call   c0004c09 <follow_path>
c00062e8:	85 c0                	test   eax,eax
c00062ea:	0f 85 f2 00 00 00    	jne    c00063e2 <f_unlink+0x166>
c00062f0:	b8 06 00 00 00       	mov    eax,0x6
c00062f5:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c00062fd:	0f 88 df 00 00 00    	js     c00063e2 <f_unlink+0x166>
c0006303:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006308:	74 0a                	je     c0006314 <f_unlink+0x98>
c000630a:	b8 07 00 00 00       	mov    eax,0x7
c000630f:	e9 ce 00 00 00       	jmp    c00063e2 <f_unlink+0x166>
c0006314:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006318:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000631c:	8a 02                	mov    al,BYTE PTR [edx]
c000631e:	3c 04                	cmp    al,0x4
c0006320:	75 12                	jne    c0006334 <f_unlink+0xb8>
c0006322:	8d 42 10             	lea    eax,[edx+0x10]
c0006325:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006329:	e8 a1 e8 ff ff       	call   c0004bcf <init_alloc_info.isra.2>
c000632e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006332:	eb 0e                	jmp    c0006342 <f_unlink+0xc6>
c0006334:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000633b:	e8 3e e8 ff ff       	call   c0004b7e <ld_clust.isra.0>
c0006340:	89 c6                	mov    esi,eax
c0006342:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006347:	75 12                	jne    c000635b <f_unlink+0xdf>
c0006349:	8d 44 24 48          	lea    eax,[esp+0x48]
c000634d:	e8 94 d6 ff ff       	call   c00039e6 <dir_remove>
c0006352:	85 c0                	test   eax,eax
c0006354:	74 6c                	je     c00063c2 <f_unlink+0x146>
c0006356:	e9 87 00 00 00       	jmp    c00063e2 <f_unlink+0x166>
c000635b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000635f:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006366:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c000636d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006370:	75 21                	jne    c0006393 <f_unlink+0x117>
c0006372:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006376:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000637a:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c0006381:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006388:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c000638c:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c0006393:	31 d2                	xor    edx,edx
c0006395:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000639c:	e8 be cb ff ff       	call   c0002f5f <dir_sdi>
c00063a1:	85 c0                	test   eax,eax
c00063a3:	75 3d                	jne    c00063e2 <f_unlink+0x166>
c00063a5:	31 d2                	xor    edx,edx
c00063a7:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063ae:	e8 bc d3 ff ff       	call   c000376f <dir_read>
c00063b3:	85 c0                	test   eax,eax
c00063b5:	0f 84 4f ff ff ff    	je     c000630a <f_unlink+0x8e>
c00063bb:	83 f8 04             	cmp    eax,0x4
c00063be:	75 22                	jne    c00063e2 <f_unlink+0x166>
c00063c0:	eb 87                	jmp    c0006349 <f_unlink+0xcd>
c00063c2:	85 f6                	test   esi,esi
c00063c4:	75 0b                	jne    c00063d1 <f_unlink+0x155>
c00063c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063ca:	e8 3d df ff ff       	call   c000430c <sync_fs>
c00063cf:	eb 11                	jmp    c00063e2 <f_unlink+0x166>
c00063d1:	31 c9                	xor    ecx,ecx
c00063d3:	89 f2                	mov    edx,esi
c00063d5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00063d9:	e8 78 ce ff ff       	call   c0003256 <remove_chain>
c00063de:	85 c0                	test   eax,eax
c00063e0:	74 e4                	je     c00063c6 <f_unlink+0x14a>
c00063e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063e6:	83 ec 0c             	sub    esp,0xc
c00063e9:	53                   	push   ebx
c00063ea:	e8 5d 1e 00 00       	call   c000824c <ff_memfree>
c00063ef:	83 c4 10             	add    esp,0x10
c00063f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063f6:	81 c4 e4 00 00 00    	add    esp,0xe4
c00063fc:	5b                   	pop    ebx
c00063fd:	5e                   	pop    esi
c00063fe:	c3                   	ret    

c00063ff <f_mkdir>:
c00063ff:	57                   	push   edi
c0006400:	b9 02 00 00 00       	mov    ecx,0x2
c0006405:	56                   	push   esi
c0006406:	53                   	push   ebx
c0006407:	83 c4 80             	add    esp,0xffffff80
c000640a:	8d 54 24 08          	lea    edx,[esp+0x8]
c000640e:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006415:	e8 79 c0 ff ff       	call   c0002493 <mount_volume>
c000641a:	89 c3                	mov    ebx,eax
c000641c:	85 c0                	test   eax,eax
c000641e:	0f 85 fe 01 00 00    	jne    c0006622 <f_mkdir+0x223>
c0006424:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006428:	bb 11 00 00 00       	mov    ebx,0x11
c000642d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006431:	83 ec 0c             	sub    esp,0xc
c0006434:	68 60 04 00 00       	push   0x460
c0006439:	e8 f8 1d 00 00       	call   c0008236 <ff_memalloc>
c000643e:	83 c4 10             	add    esp,0x10
c0006441:	89 c7                	mov    edi,eax
c0006443:	85 c0                	test   eax,eax
c0006445:	0f 84 d7 01 00 00    	je     c0006622 <f_mkdir+0x223>
c000644b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000644f:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006455:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006458:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000645b:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006462:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006466:	e8 9e e7 ff ff       	call   c0004c09 <follow_path>
c000646b:	89 c3                	mov    ebx,eax
c000646d:	85 c0                	test   eax,eax
c000646f:	74 3e                	je     c00064af <f_mkdir+0xb0>
c0006471:	83 f8 04             	cmp    eax,0x4
c0006474:	75 3e                	jne    c00064b4 <f_mkdir+0xb5>
c0006476:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000647a:	31 d2                	xor    edx,edx
c000647c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006480:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006484:	e8 ce cb ff ff       	call   c0003057 <create_chain>
c0006489:	89 c6                	mov    esi,eax
c000648b:	85 c0                	test   eax,eax
c000648d:	74 0c                	je     c000649b <f_mkdir+0x9c>
c000648f:	bb 02 00 00 00       	mov    ebx,0x2
c0006494:	83 f8 01             	cmp    eax,0x1
c0006497:	74 07                	je     c00064a0 <f_mkdir+0xa1>
c0006499:	eb 2a                	jmp    c00064c5 <f_mkdir+0xc6>
c000649b:	bb 07 00 00 00       	mov    ebx,0x7
c00064a0:	31 c9                	xor    ecx,ecx
c00064a2:	89 f2                	mov    edx,esi
c00064a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064a8:	e8 a9 cd ff ff       	call   c0003256 <remove_chain>
c00064ad:	eb 05                	jmp    c00064b4 <f_mkdir+0xb5>
c00064af:	bb 08 00 00 00       	mov    ebx,0x8
c00064b4:	83 ec 0c             	sub    esp,0xc
c00064b7:	57                   	push   edi
c00064b8:	e8 8f 1d 00 00       	call   c000824c <ff_memfree>
c00064bd:	83 c4 10             	add    esp,0x10
c00064c0:	e9 5d 01 00 00       	jmp    c0006622 <f_mkdir+0x223>
c00064c5:	bb 01 00 00 00       	mov    ebx,0x1
c00064ca:	83 f8 ff             	cmp    eax,0xffffffff
c00064cd:	74 d1                	je     c00064a0 <f_mkdir+0xa1>
c00064cf:	89 f2                	mov    edx,esi
c00064d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d5:	e8 c4 ce ff ff       	call   c000339e <dir_clear>
c00064da:	89 c3                	mov    ebx,eax
c00064dc:	85 c0                	test   eax,eax
c00064de:	75 c0                	jne    c00064a0 <f_mkdir+0xa1>
c00064e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064e7:	74 69                	je     c0006552 <f_mkdir+0x153>
c00064e9:	b9 0b 00 00 00       	mov    ecx,0xb
c00064ee:	83 c0 54             	add    eax,0x54
c00064f1:	ba 20 00 00 00       	mov    edx,0x20
c00064f6:	e8 9c b5 ff ff       	call   c0001a97 <mem_set>
c00064fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0006504:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006508:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000650c:	83 c0 6a             	add    eax,0x6a
c000650f:	e8 65 b5 ff ff       	call   c0001a79 <st_dword>
c0006514:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006518:	89 f1                	mov    ecx,esi
c000651a:	8d 50 54             	lea    edx,[eax+0x54]
c000651d:	e8 85 e6 ff ff       	call   c0004ba7 <st_clust.isra.1>
c0006522:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006526:	b9 20 00 00 00       	mov    ecx,0x20
c000652b:	8d 50 54             	lea    edx,[eax+0x54]
c000652e:	83 c0 74             	add    eax,0x74
c0006531:	e8 4c b5 ff ff       	call   c0001a82 <mem_cpy>
c0006536:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000653a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000653e:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006542:	8d 50 74             	lea    edx,[eax+0x74]
c0006545:	e8 5d e6 ff ff       	call   c0004ba7 <st_clust.isra.1>
c000654a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006552:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006556:	e8 2f db ff ff       	call   c000408a <dir_register>
c000655b:	89 c3                	mov    ebx,eax
c000655d:	85 c0                	test   eax,eax
c000655f:	0f 85 3b ff ff ff    	jne    c00064a0 <f_mkdir+0xa1>
c0006565:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006569:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000656c:	75 74                	jne    c00065e2 <f_mkdir+0x1e3>
c000656e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006571:	ba 00 00 21 50       	mov    edx,0x50210000
c0006576:	83 c0 0c             	add    eax,0xc
c0006579:	e8 fb b4 ff ff       	call   c0001a79 <st_dword>
c000657e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006582:	89 f2                	mov    edx,esi
c0006584:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006587:	83 c0 34             	add    eax,0x34
c000658a:	e8 ea b4 ff ff       	call   c0001a79 <st_dword>
c000658f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006593:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006597:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000659a:	c1 e2 09             	shl    edx,0x9
c000659d:	83 c0 38             	add    eax,0x38
c00065a0:	e8 d4 b4 ff ff       	call   c0001a79 <st_dword>
c00065a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a9:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065ad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065b0:	c1 e2 09             	shl    edx,0x9
c00065b3:	83 c0 28             	add    eax,0x28
c00065b6:	e8 be b4 ff ff       	call   c0001a79 <st_dword>
c00065bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065bf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065c2:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065c9:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065cd:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065d1:	e8 8b d3 ff ff       	call   c0003961 <store_xdir>
c00065d6:	89 c3                	mov    ebx,eax
c00065d8:	85 c0                	test   eax,eax
c00065da:	0f 85 d4 fe ff ff    	jne    c00064b4 <f_mkdir+0xb5>
c00065e0:	eb 30                	jmp    c0006612 <f_mkdir+0x213>
c00065e2:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065e6:	ba 00 00 21 50       	mov    edx,0x50210000
c00065eb:	83 c0 16             	add    eax,0x16
c00065ee:	e8 86 b4 ff ff       	call   c0001a79 <st_dword>
c00065f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065f7:	89 f1                	mov    ecx,esi
c00065f9:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c00065fd:	e8 a5 e5 ff ff       	call   c0004ba7 <st_clust.isra.1>
c0006602:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006606:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000660a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000660e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006612:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006616:	e8 f1 dc ff ff       	call   c000430c <sync_fs>
c000661b:	89 c3                	mov    ebx,eax
c000661d:	e9 92 fe ff ff       	jmp    c00064b4 <f_mkdir+0xb5>
c0006622:	83 ec 80             	sub    esp,0xffffff80
c0006625:	89 d8                	mov    eax,ebx
c0006627:	5b                   	pop    ebx
c0006628:	5e                   	pop    esi
c0006629:	5f                   	pop    edi
c000662a:	c3                   	ret    

c000662b <f_rename>:
c000662b:	55                   	push   ebp
c000662c:	57                   	push   edi
c000662d:	56                   	push   esi
c000662e:	53                   	push   ebx
c000662f:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006635:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000663c:	e8 a4 b9 ff ff       	call   c0001fe5 <get_ldnumber>
c0006641:	b9 02 00 00 00       	mov    ecx,0x2
c0006646:	8d 54 24 14          	lea    edx,[esp+0x14]
c000664a:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006651:	e8 3d be ff ff       	call   c0002493 <mount_volume>
c0006656:	85 c0                	test   eax,eax
c0006658:	0f 85 b5 02 00 00    	jne    c0006913 <f_rename+0x2e8>
c000665e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006662:	83 ec 0c             	sub    esp,0xc
c0006665:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006669:	68 60 04 00 00       	push   0x460
c000666e:	e8 c3 1b 00 00       	call   c0008236 <ff_memalloc>
c0006673:	83 c4 10             	add    esp,0x10
c0006676:	89 c3                	mov    ebx,eax
c0006678:	b8 11 00 00 00       	mov    eax,0x11
c000667d:	85 db                	test   ebx,ebx
c000667f:	0f 84 8e 02 00 00    	je     c0006913 <f_rename+0x2e8>
c0006685:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006689:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000668f:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006692:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006695:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c000669c:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066a0:	e8 64 e5 ff ff       	call   c0004c09 <follow_path>
c00066a5:	85 c0                	test   eax,eax
c00066a7:	0f 85 52 02 00 00    	jne    c00068ff <f_rename+0x2d4>
c00066ad:	b8 06 00 00 00       	mov    eax,0x6
c00066b2:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066ba:	0f 85 3f 02 00 00    	jne    c00068ff <f_rename+0x2d4>
c00066c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c7:	0f 85 05 01 00 00    	jne    c00067d2 <f_rename+0x1a7>
c00066cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066d0:	b9 40 00 00 00       	mov    ecx,0x40
c00066d5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066d9:	e8 a4 b3 ff ff       	call   c0001a82 <mem_cpy>
c00066de:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066e3:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066e7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066ee:	e8 8f b3 ff ff       	call   c0001a82 <mem_cpy>
c00066f3:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00066fa:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006701:	e8 03 e5 ff ff       	call   c0004c09 <follow_path>
c0006706:	85 c0                	test   eax,eax
c0006708:	75 29                	jne    c0006733 <f_rename+0x108>
c000670a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000670e:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006715:	74 0a                	je     c0006721 <f_rename+0xf6>
c0006717:	b8 08 00 00 00       	mov    eax,0x8
c000671c:	e9 de 01 00 00       	jmp    c00068ff <f_rename+0x2d4>
c0006721:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006728:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000672f:	75 e6                	jne    c0006717 <f_rename+0xec>
c0006731:	eb 09                	jmp    c000673c <f_rename+0x111>
c0006733:	83 f8 04             	cmp    eax,0x4
c0006736:	0f 85 c3 01 00 00    	jne    c00068ff <f_rename+0x2d4>
c000673c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006743:	e8 42 d9 ff ff       	call   c000408a <dir_register>
c0006748:	85 c0                	test   eax,eax
c000674a:	0f 85 af 01 00 00    	jne    c00068ff <f_rename+0x2d4>
c0006750:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006754:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006757:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000675a:	89 c5                	mov    ebp,eax
c000675c:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000675f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006763:	8d 46 24             	lea    eax,[esi+0x24]
c0006766:	e8 98 b2 ff ff       	call   c0001a03 <ld_word>
c000676b:	b9 40 00 00 00       	mov    ecx,0x40
c0006770:	89 c7                	mov    edi,eax
c0006772:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006776:	89 f0                	mov    eax,esi
c0006778:	e8 05 b3 ff ff       	call   c0001a82 <mem_cpy>
c000677d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006781:	89 e9                	mov    ecx,ebp
c0006783:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006786:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006789:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c000678d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006791:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006794:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006797:	0f b7 d7             	movzx  edx,di
c000679a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000679d:	83 c0 24             	add    eax,0x24
c00067a0:	e8 d0 b2 ff ff       	call   c0001a75 <st_word>
c00067a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067a9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067ac:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067af:	a8 10                	test   al,0x10
c00067b1:	75 06                	jne    c00067b9 <f_rename+0x18e>
c00067b3:	83 c8 20             	or     eax,0x20
c00067b6:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067b9:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067c0:	e8 9c d1 ff ff       	call   c0003961 <store_xdir>
c00067c5:	85 c0                	test   eax,eax
c00067c7:	0f 84 1c 01 00 00    	je     c00068e9 <f_rename+0x2be>
c00067cd:	e9 2d 01 00 00       	jmp    c00068ff <f_rename+0x2d4>
c00067d2:	b9 20 00 00 00       	mov    ecx,0x20
c00067d7:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067de:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067e2:	e8 9b b2 ff ff       	call   c0001a82 <mem_cpy>
c00067e7:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067ec:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067f0:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067f7:	e8 86 b2 ff ff       	call   c0001a82 <mem_cpy>
c00067fc:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006803:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000680a:	e8 fa e3 ff ff       	call   c0004c09 <follow_path>
c000680f:	85 c0                	test   eax,eax
c0006811:	75 27                	jne    c000683a <f_rename+0x20f>
c0006813:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006817:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000681e:	0f 85 f3 fe ff ff    	jne    c0006717 <f_rename+0xec>
c0006824:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000682b:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006832:	0f 85 df fe ff ff    	jne    c0006717 <f_rename+0xec>
c0006838:	eb 09                	jmp    c0006843 <f_rename+0x218>
c000683a:	83 f8 04             	cmp    eax,0x4
c000683d:	0f 85 bc 00 00 00    	jne    c00068ff <f_rename+0x2d4>
c0006843:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000684a:	e8 3b d8 ff ff       	call   c000408a <dir_register>
c000684f:	85 c0                	test   eax,eax
c0006851:	0f 85 a8 00 00 00    	jne    c00068ff <f_rename+0x2d4>
c0006857:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000685e:	b9 13 00 00 00       	mov    ecx,0x13
c0006863:	8d 46 0d             	lea    eax,[esi+0xd]
c0006866:	8d 54 24 25          	lea    edx,[esp+0x25]
c000686a:	e8 13 b2 ff ff       	call   c0001a82 <mem_cpy>
c000686f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006873:	a8 10                	test   al,0x10
c0006875:	75 03                	jne    c000687a <f_rename+0x24f>
c0006877:	83 c8 20             	or     eax,0x20
c000687a:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c000687d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006881:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006885:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006889:	74 5e                	je     c00068e9 <f_rename+0x2be>
c000688b:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006892:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006896:	74 51                	je     c00068e9 <f_rename+0x2be>
c0006898:	89 f2                	mov    edx,esi
c000689a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000689e:	8a 07                	mov    al,BYTE PTR [edi]
c00068a0:	e8 d9 e2 ff ff       	call   c0004b7e <ld_clust.isra.0>
c00068a5:	89 c2                	mov    edx,eax
c00068a7:	89 f8                	mov    eax,edi
c00068a9:	e8 ee b3 ff ff       	call   c0001c9c <clst2sect>
c00068ae:	89 c6                	mov    esi,eax
c00068b0:	89 d1                	mov    ecx,edx
c00068b2:	b8 02 00 00 00       	mov    eax,0x2
c00068b7:	09 f2                	or     edx,esi
c00068b9:	74 44                	je     c00068ff <f_rename+0x2d4>
c00068bb:	89 f2                	mov    edx,esi
c00068bd:	89 f8                	mov    eax,edi
c00068bf:	e8 1d b9 ff ff       	call   c00021e1 <move_window>
c00068c4:	85 c0                	test   eax,eax
c00068c6:	75 37                	jne    c00068ff <f_rename+0x2d4>
c00068c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068cc:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068d0:	75 17                	jne    c00068e9 <f_rename+0x2be>
c00068d2:	8d 50 74             	lea    edx,[eax+0x74]
c00068d5:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068dc:	e8 c6 e2 ff ff       	call   c0004ba7 <st_clust.isra.1>
c00068e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068e9:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068ed:	e8 f4 d0 ff ff       	call   c00039e6 <dir_remove>
c00068f2:	85 c0                	test   eax,eax
c00068f4:	75 09                	jne    c00068ff <f_rename+0x2d4>
c00068f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068fa:	e8 0d da ff ff       	call   c000430c <sync_fs>
c00068ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006903:	83 ec 0c             	sub    esp,0xc
c0006906:	53                   	push   ebx
c0006907:	e8 40 19 00 00       	call   c000824c <ff_memfree>
c000690c:	83 c4 10             	add    esp,0x10
c000690f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006913:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006919:	5b                   	pop    ebx
c000691a:	5e                   	pop    esi
c000691b:	5f                   	pop    edi
c000691c:	5d                   	pop    ebp
c000691d:	c3                   	ret    

c000691e <f_chmod>:
c000691e:	57                   	push   edi
c000691f:	b9 02 00 00 00       	mov    ecx,0x2
c0006924:	56                   	push   esi
c0006925:	53                   	push   ebx
c0006926:	83 ec 60             	sub    esp,0x60
c0006929:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000692d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006931:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006935:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006939:	e8 55 bb ff ff       	call   c0002493 <mount_volume>
c000693e:	85 c0                	test   eax,eax
c0006940:	0f 85 af 00 00 00    	jne    c00069f5 <f_chmod+0xd7>
c0006946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000694a:	83 ec 0c             	sub    esp,0xc
c000694d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006951:	68 60 04 00 00       	push   0x460
c0006956:	e8 db 18 00 00       	call   c0008236 <ff_memalloc>
c000695b:	83 c4 10             	add    esp,0x10
c000695e:	89 c6                	mov    esi,eax
c0006960:	b8 11 00 00 00       	mov    eax,0x11
c0006965:	85 f6                	test   esi,esi
c0006967:	0f 84 88 00 00 00    	je     c00069f5 <f_chmod+0xd7>
c000696d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006971:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006977:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000697a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000697d:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006981:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006985:	e8 7f e2 ff ff       	call   c0004c09 <follow_path>
c000698a:	85 c0                	test   eax,eax
c000698c:	75 53                	jne    c00069e1 <f_chmod+0xc3>
c000698e:	b8 06 00 00 00       	mov    eax,0x6
c0006993:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006998:	75 47                	jne    c00069e1 <f_chmod+0xc3>
c000699a:	89 f9                	mov    ecx,edi
c000699c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069a0:	83 e1 27             	and    ecx,0x27
c00069a3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069a6:	75 1d                	jne    c00069c5 <f_chmod+0xa7>
c00069a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069ab:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069ae:	21 cb                	and    ebx,ecx
c00069b0:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069b3:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069b6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069ba:	e8 a2 cf ff ff       	call   c0003961 <store_xdir>
c00069bf:	85 c0                	test   eax,eax
c00069c1:	75 1e                	jne    c00069e1 <f_chmod+0xc3>
c00069c3:	eb 13                	jmp    c00069d8 <f_chmod+0xba>
c00069c5:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069c9:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069cc:	21 cb                	and    ebx,ecx
c00069ce:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069d1:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069d4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069dc:	e8 2b d9 ff ff       	call   c000430c <sync_fs>
c00069e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069e5:	83 ec 0c             	sub    esp,0xc
c00069e8:	56                   	push   esi
c00069e9:	e8 5e 18 00 00       	call   c000824c <ff_memfree>
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00069f5:	83 c4 60             	add    esp,0x60
c00069f8:	5b                   	pop    ebx
c00069f9:	5e                   	pop    esi
c00069fa:	5f                   	pop    edi
c00069fb:	c3                   	ret    

c00069fc <f_utime>:
c00069fc:	56                   	push   esi
c00069fd:	b9 02 00 00 00       	mov    ecx,0x2
c0006a02:	53                   	push   ebx
c0006a03:	83 ec 64             	sub    esp,0x64
c0006a06:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a0a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a0e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a12:	e8 7c ba ff ff       	call   c0002493 <mount_volume>
c0006a17:	85 c0                	test   eax,eax
c0006a19:	0f 85 b5 00 00 00    	jne    c0006ad4 <f_utime+0xd8>
c0006a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a23:	83 ec 0c             	sub    esp,0xc
c0006a26:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a2a:	68 60 04 00 00       	push   0x460
c0006a2f:	e8 02 18 00 00       	call   c0008236 <ff_memalloc>
c0006a34:	83 c4 10             	add    esp,0x10
c0006a37:	89 c3                	mov    ebx,eax
c0006a39:	b8 11 00 00 00       	mov    eax,0x11
c0006a3e:	85 db                	test   ebx,ebx
c0006a40:	0f 84 8e 00 00 00    	je     c0006ad4 <f_utime+0xd8>
c0006a46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a4a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a50:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a53:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a56:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a5a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a5e:	e8 a6 e1 ff ff       	call   c0004c09 <follow_path>
c0006a63:	85 c0                	test   eax,eax
c0006a65:	75 59                	jne    c0006ac0 <f_utime+0xc4>
c0006a67:	b8 06 00 00 00       	mov    eax,0x6
c0006a6c:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a71:	75 4d                	jne    c0006ac0 <f_utime+0xc4>
c0006a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a77:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a7b:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a7f:	c1 e2 10             	shl    edx,0x10
c0006a82:	09 ca                	or     edx,ecx
c0006a84:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a87:	75 1a                	jne    c0006aa3 <f_utime+0xa7>
c0006a89:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a8c:	83 c0 0c             	add    eax,0xc
c0006a8f:	e8 e5 af ff ff       	call   c0001a79 <st_dword>
c0006a94:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a98:	e8 c4 ce ff ff       	call   c0003961 <store_xdir>
c0006a9d:	85 c0                	test   eax,eax
c0006a9f:	75 1f                	jne    c0006ac0 <f_utime+0xc4>
c0006aa1:	eb 14                	jmp    c0006ab7 <f_utime+0xbb>
c0006aa3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aa7:	83 c0 16             	add    eax,0x16
c0006aaa:	e8 ca af ff ff       	call   c0001a79 <st_dword>
c0006aaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ab3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006abb:	e8 4c d8 ff ff       	call   c000430c <sync_fs>
c0006ac0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ac4:	83 ec 0c             	sub    esp,0xc
c0006ac7:	53                   	push   ebx
c0006ac8:	e8 7f 17 00 00       	call   c000824c <ff_memfree>
c0006acd:	83 c4 10             	add    esp,0x10
c0006ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ad4:	83 c4 64             	add    esp,0x64
c0006ad7:	5b                   	pop    ebx
c0006ad8:	5e                   	pop    esi
c0006ad9:	c3                   	ret    

c0006ada <f_getlabel>:
c0006ada:	55                   	push   ebp
c0006adb:	31 c9                	xor    ecx,ecx
c0006add:	57                   	push   edi
c0006ade:	56                   	push   esi
c0006adf:	53                   	push   ebx
c0006ae0:	83 ec 6c             	sub    esp,0x6c
c0006ae3:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006ae7:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006aee:	e8 a0 b9 ff ff       	call   c0002493 <mount_volume>
c0006af3:	89 c6                	mov    esi,eax
c0006af5:	85 c0                	test   eax,eax
c0006af7:	0f 85 c1 01 00 00    	jne    c0006cbe <f_getlabel+0x1e4>
c0006afd:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b05:	0f 84 5f 01 00 00    	je     c0006c6a <f_getlabel+0x190>
c0006b0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b0f:	31 d2                	xor    edx,edx
c0006b11:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b15:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b1d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b21:	e8 39 c4 ff ff       	call   c0002f5f <dir_sdi>
c0006b26:	85 c0                	test   eax,eax
c0006b28:	0f 85 2d 01 00 00    	jne    c0006c5b <f_getlabel+0x181>
c0006b2e:	ba 01 00 00 00       	mov    edx,0x1
c0006b33:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b37:	e8 33 cc ff ff       	call   c000376f <dir_read>
c0006b3c:	85 c0                	test   eax,eax
c0006b3e:	0f 85 17 01 00 00    	jne    c0006c5b <f_getlabel+0x181>
c0006b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b4b:	74 09                	je     c0006b56 <f_getlabel+0x7c>
c0006b4d:	31 db                	xor    ebx,ebx
c0006b4f:	31 c9                	xor    ecx,ecx
c0006b51:	e9 c8 00 00 00       	jmp    c0006c1e <f_getlabel+0x144>
c0006b56:	31 ed                	xor    ebp,ebp
c0006b58:	31 db                	xor    ebx,ebx
c0006b5a:	31 ff                	xor    edi,edi
c0006b5c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b60:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b64:	39 fa                	cmp    edx,edi
c0006b66:	76 4b                	jbe    c0006bb3 <f_getlabel+0xd9>
c0006b68:	47                   	inc    edi
c0006b69:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b6c:	01 d0                	add    eax,edx
c0006b6e:	e8 90 ae ff ff       	call   c0001a03 <ld_word>
c0006b73:	66 85 ed             	test   bp,bp
c0006b76:	75 0d                	jne    c0006b85 <f_getlabel+0xab>
c0006b78:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b7e:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b83:	76 28                	jbe    c0006bad <f_getlabel+0xd3>
c0006b85:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b8c:	89 e9                	mov    ecx,ebp
c0006b8e:	01 da                	add    edx,ebx
c0006b90:	c1 e1 10             	shl    ecx,0x10
c0006b93:	0f b7 c0             	movzx  eax,ax
c0006b96:	09 c8                	or     eax,ecx
c0006b98:	b9 04 00 00 00       	mov    ecx,0x4
c0006b9d:	e8 01 b0 ff ff       	call   c0001ba3 <put_utf>
c0006ba2:	84 c0                	test   al,al
c0006ba4:	74 0b                	je     c0006bb1 <f_getlabel+0xd7>
c0006ba6:	0f b6 c0             	movzx  eax,al
c0006ba9:	01 c3                	add    ebx,eax
c0006bab:	31 c0                	xor    eax,eax
c0006bad:	89 c5                	mov    ebp,eax
c0006baf:	eb ab                	jmp    c0006b5c <f_getlabel+0x82>
c0006bb1:	31 db                	xor    ebx,ebx
c0006bb3:	66 85 ed             	test   bp,bp
c0006bb6:	74 02                	je     c0006bba <f_getlabel+0xe0>
c0006bb8:	31 db                	xor    ebx,ebx
c0006bba:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bc1:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006bc5:	e9 a0 00 00 00       	jmp    c0006c6a <f_getlabel+0x190>
c0006bca:	83 ff 0b             	cmp    edi,0xb
c0006bcd:	74 11                	je     c0006be0 <f_getlabel+0x106>
c0006bcf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006bd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006bd8:	8d 79 02             	lea    edi,[ecx+0x2]
c0006bdb:	c1 e0 08             	shl    eax,0x8
c0006bde:	09 c2                	or     edx,eax
c0006be0:	0f b7 d2             	movzx  edx,dx
c0006be3:	50                   	push   eax
c0006be4:	50                   	push   eax
c0006be5:	68 b5 01 00 00       	push   0x1b5
c0006bea:	52                   	push   edx
c0006beb:	e8 03 17 00 00       	call   c00082f3 <ff_oem2uni>
c0006bf0:	83 c4 10             	add    esp,0x10
c0006bf3:	66 85 c0             	test   ax,ax
c0006bf6:	74 46                	je     c0006c3e <f_getlabel+0x164>
c0006bf8:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bff:	0f b7 c0             	movzx  eax,ax
c0006c02:	01 da                	add    edx,ebx
c0006c04:	b9 04 00 00 00       	mov    ecx,0x4
c0006c09:	e8 95 af ff ff       	call   c0001ba3 <put_utf>
c0006c0e:	84 c0                	test   al,al
c0006c10:	74 2c                	je     c0006c3e <f_getlabel+0x164>
c0006c12:	0f b6 c0             	movzx  eax,al
c0006c15:	01 c3                	add    ebx,eax
c0006c17:	83 ff 0b             	cmp    edi,0xb
c0006c1a:	74 24                	je     c0006c40 <f_getlabel+0x166>
c0006c1c:	89 f9                	mov    ecx,edi
c0006c1e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c22:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c25:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c2a:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c33:	e8 9f ae ff ff       	call   c0001ad7 <dbc_1st>
c0006c38:	85 c0                	test   eax,eax
c0006c3a:	74 a4                	je     c0006be0 <f_getlabel+0x106>
c0006c3c:	eb 8c                	jmp    c0006bca <f_getlabel+0xf0>
c0006c3e:	31 db                	xor    ebx,ebx
c0006c40:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c47:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c4a:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c51:	74 17                	je     c0006c6a <f_getlabel+0x190>
c0006c53:	4b                   	dec    ebx
c0006c54:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c57:	74 ee                	je     c0006c47 <f_getlabel+0x16d>
c0006c59:	eb 0f                	jmp    c0006c6a <f_getlabel+0x190>
c0006c5b:	83 f8 04             	cmp    eax,0x4
c0006c5e:	75 5c                	jne    c0006cbc <f_getlabel+0x1e2>
c0006c60:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c67:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c6a:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c72:	74 4a                	je     c0006cbe <f_getlabel+0x1e4>
c0006c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c78:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c7b:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c7e:	e8 5e b5 ff ff       	call   c00021e1 <move_window>
c0006c83:	89 c6                	mov    esi,eax
c0006c85:	85 c0                	test   eax,eax
c0006c87:	75 35                	jne    c0006cbe <f_getlabel+0x1e4>
c0006c89:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c8d:	b8 43 00 00 00       	mov    eax,0x43
c0006c92:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c94:	80 f9 03             	cmp    cl,0x3
c0006c97:	74 0f                	je     c0006ca8 <f_getlabel+0x1ce>
c0006c99:	31 c0                	xor    eax,eax
c0006c9b:	80 f9 04             	cmp    cl,0x4
c0006c9e:	0f 94 c0             	sete   al
c0006ca1:	48                   	dec    eax
c0006ca2:	83 e0 c3             	and    eax,0xffffffc3
c0006ca5:	83 c0 64             	add    eax,0x64
c0006ca8:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cac:	e8 5f ad ff ff       	call   c0001a10 <ld_dword>
c0006cb1:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cb8:	89 07                	mov    DWORD PTR [edi],eax
c0006cba:	eb 02                	jmp    c0006cbe <f_getlabel+0x1e4>
c0006cbc:	89 c6                	mov    esi,eax
c0006cbe:	83 c4 6c             	add    esp,0x6c
c0006cc1:	89 f0                	mov    eax,esi
c0006cc3:	5b                   	pop    ebx
c0006cc4:	5e                   	pop    esi
c0006cc5:	5f                   	pop    edi
c0006cc6:	5d                   	pop    ebp
c0006cc7:	c3                   	ret    

c0006cc8 <f_setlabel>:
c0006cc8:	56                   	push   esi
c0006cc9:	b9 02 00 00 00       	mov    ecx,0x2
c0006cce:	53                   	push   ebx
c0006ccf:	83 ec 74             	sub    esp,0x74
c0006cd2:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006cd6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cdd:	e8 b1 b7 ff ff       	call   c0002493 <mount_volume>
c0006ce2:	89 c6                	mov    esi,eax
c0006ce4:	85 c0                	test   eax,eax
c0006ce6:	0f 85 41 02 00 00    	jne    c0006f2d <f_setlabel+0x265>
c0006cec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006cf0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cf3:	0f 85 8e 00 00 00    	jne    c0006d87 <f_setlabel+0xbf>
c0006cf9:	b9 16 00 00 00       	mov    ecx,0x16
c0006cfe:	31 d2                	xor    edx,edx
c0006d00:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d04:	31 db                	xor    ebx,ebx
c0006d06:	e8 8c ad ff ff       	call   c0001a97 <mem_set>
c0006d0b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d12:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d15:	0f 86 0a 01 00 00    	jbe    c0006e25 <f_setlabel+0x15d>
c0006d1b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d22:	e8 b6 ad ff ff       	call   c0001add <tchar2uni>
c0006d27:	89 c6                	mov    esi,eax
c0006d29:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d2e:	76 2a                	jbe    c0006d5a <f_setlabel+0x92>
c0006d30:	83 f8 ff             	cmp    eax,0xffffffff
c0006d33:	74 05                	je     c0006d3a <f_setlabel+0x72>
c0006d35:	83 fb 09             	cmp    ebx,0x9
c0006d38:	76 0a                	jbe    c0006d44 <f_setlabel+0x7c>
c0006d3a:	be 06 00 00 00       	mov    esi,0x6
c0006d3f:	e9 e9 01 00 00       	jmp    c0006f2d <f_setlabel+0x265>
c0006d44:	89 c2                	mov    edx,eax
c0006d46:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d4a:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d4d:	c1 ea 10             	shr    edx,0x10
c0006d50:	01 c8                	add    eax,ecx
c0006d52:	43                   	inc    ebx
c0006d53:	e8 1d ad ff ff       	call   c0001a75 <st_word>
c0006d58:	eb 04                	jmp    c0006d5e <f_setlabel+0x96>
c0006d5a:	85 c0                	test   eax,eax
c0006d5c:	74 dc                	je     c0006d3a <f_setlabel+0x72>
c0006d5e:	89 f2                	mov    edx,esi
c0006d60:	b8 97 63 02 c0       	mov    eax,0xc0026397
c0006d65:	e8 5b ad ff ff       	call   c0001ac5 <chk_chr>
c0006d6a:	85 c0                	test   eax,eax
c0006d6c:	75 cc                	jne    c0006d3a <f_setlabel+0x72>
c0006d6e:	83 fb 0a             	cmp    ebx,0xa
c0006d71:	77 c7                	ja     c0006d3a <f_setlabel+0x72>
c0006d73:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d76:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d7a:	0f b7 d6             	movzx  edx,si
c0006d7d:	01 c8                	add    eax,ecx
c0006d7f:	43                   	inc    ebx
c0006d80:	e8 f0 ac ff ff       	call   c0001a75 <st_word>
c0006d85:	eb 84                	jmp    c0006d0b <f_setlabel+0x43>
c0006d87:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d8c:	ba 20 00 00 00       	mov    edx,0x20
c0006d91:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d95:	31 db                	xor    ebx,ebx
c0006d97:	e8 fb ac ff ff       	call   c0001a97 <mem_set>
c0006d9c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006da3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006da6:	76 60                	jbe    c0006e08 <f_setlabel+0x140>
c0006da8:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006daf:	e8 29 ad ff ff       	call   c0001add <tchar2uni>
c0006db4:	3d ff ff 00 00       	cmp    eax,0xffff
c0006db9:	0f 87 7b ff ff ff    	ja     c0006d3a <f_setlabel+0x72>
c0006dbf:	83 ec 0c             	sub    esp,0xc
c0006dc2:	50                   	push   eax
c0006dc3:	e8 97 15 00 00       	call   c000835f <ff_wtoupper>
c0006dc8:	5a                   	pop    edx
c0006dc9:	59                   	pop    ecx
c0006dca:	68 b5 01 00 00       	push   0x1b5
c0006dcf:	50                   	push   eax
c0006dd0:	e8 8e 14 00 00       	call   c0008263 <ff_uni2oem>
c0006dd5:	83 c4 10             	add    esp,0x10
c0006dd8:	89 c6                	mov    esi,eax
c0006dda:	66 85 c0             	test   ax,ax
c0006ddd:	0f 84 57 ff ff ff    	je     c0006d3a <f_setlabel+0x72>
c0006de3:	0f b7 d0             	movzx  edx,ax
c0006de6:	b8 90 63 02 c0       	mov    eax,0xc0026390
c0006deb:	e8 d5 ac ff ff       	call   c0001ac5 <chk_chr>
c0006df0:	85 c0                	test   eax,eax
c0006df2:	0f 85 42 ff ff ff    	jne    c0006d3a <f_setlabel+0x72>
c0006df8:	66 81 fe ff 00       	cmp    si,0xff
c0006dfd:	0f 87 14 01 00 00    	ja     c0006f17 <f_setlabel+0x24f>
c0006e03:	e9 fa 00 00 00       	jmp    c0006f02 <f_setlabel+0x23a>
c0006e08:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e0d:	0f 84 27 ff ff ff    	je     c0006d3a <f_setlabel+0x72>
c0006e13:	85 db                	test   ebx,ebx
c0006e15:	74 0e                	je     c0006e25 <f_setlabel+0x15d>
c0006e17:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e1a:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e1f:	75 04                	jne    c0006e25 <f_setlabel+0x15d>
c0006e21:	89 c3                	mov    ebx,eax
c0006e23:	eb ee                	jmp    c0006e13 <f_setlabel+0x14b>
c0006e25:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e29:	31 d2                	xor    edx,edx
c0006e2b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e2f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e37:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e3b:	e8 1f c1 ff ff       	call   c0002f5f <dir_sdi>
c0006e40:	89 c6                	mov    esi,eax
c0006e42:	85 c0                	test   eax,eax
c0006e44:	0f 85 e3 00 00 00    	jne    c0006f2d <f_setlabel+0x265>
c0006e4a:	ba 01 00 00 00       	mov    edx,0x1
c0006e4f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e53:	e8 17 c9 ff ff       	call   c000376f <dir_read>
c0006e58:	85 c0                	test   eax,eax
c0006e5a:	75 21                	jne    c0006e7d <f_setlabel+0x1b5>
c0006e5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e60:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e64:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e67:	74 5d                	je     c0006ec6 <f_setlabel+0x1fe>
c0006e69:	85 db                	test   ebx,ebx
c0006e6b:	74 0b                	je     c0006e78 <f_setlabel+0x1b0>
c0006e6d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e72:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e76:	eb 70                	jmp    c0006ee8 <f_setlabel+0x220>
c0006e78:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e7b:	eb 70                	jmp    c0006eed <f_setlabel+0x225>
c0006e7d:	83 f8 04             	cmp    eax,0x4
c0006e80:	75 7c                	jne    c0006efe <f_setlabel+0x236>
c0006e82:	85 db                	test   ebx,ebx
c0006e84:	0f 84 a3 00 00 00    	je     c0006f2d <f_setlabel+0x265>
c0006e8a:	ba 01 00 00 00       	mov    edx,0x1
c0006e8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e93:	e8 51 ca ff ff       	call   c00038e9 <dir_alloc>
c0006e98:	89 c6                	mov    esi,eax
c0006e9a:	85 c0                	test   eax,eax
c0006e9c:	0f 85 8b 00 00 00    	jne    c0006f2d <f_setlabel+0x265>
c0006ea2:	31 d2                	xor    edx,edx
c0006ea4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ea8:	b9 20 00 00 00       	mov    ecx,0x20
c0006ead:	e8 e5 ab ff ff       	call   c0001a97 <mem_set>
c0006eb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eb6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006eb9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ebd:	75 18                	jne    c0006ed7 <f_setlabel+0x20f>
c0006ebf:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ec2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ec6:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ec9:	b9 16 00 00 00       	mov    ecx,0x16
c0006ece:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed2:	83 c0 02             	add    eax,0x2
c0006ed5:	eb 9b                	jmp    c0006e72 <f_setlabel+0x1aa>
c0006ed7:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006edb:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ee4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee8:	e8 95 ab ff ff       	call   c0001a82 <mem_cpy>
c0006eed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ef1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ef5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ef9:	e8 0e d4 ff ff       	call   c000430c <sync_fs>
c0006efe:	89 c6                	mov    esi,eax
c0006f00:	eb 2b                	jmp    c0006f2d <f_setlabel+0x265>
c0006f02:	83 fb 0a             	cmp    ebx,0xa
c0006f05:	0f 87 2f fe ff ff    	ja     c0006d3a <f_setlabel+0x72>
c0006f0b:	89 f0                	mov    eax,esi
c0006f0d:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f11:	43                   	inc    ebx
c0006f12:	e9 85 fe ff ff       	jmp    c0006d9c <f_setlabel+0xd4>
c0006f17:	83 fb 09             	cmp    ebx,0x9
c0006f1a:	0f 87 1a fe ff ff    	ja     c0006d3a <f_setlabel+0x72>
c0006f20:	89 f0                	mov    eax,esi
c0006f22:	66 c1 e8 08          	shr    ax,0x8
c0006f26:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f2a:	43                   	inc    ebx
c0006f2b:	eb de                	jmp    c0006f0b <f_setlabel+0x243>
c0006f2d:	89 f0                	mov    eax,esi
c0006f2f:	83 c4 74             	add    esp,0x74
c0006f32:	5b                   	pop    ebx
c0006f33:	5e                   	pop    esi
c0006f34:	c3                   	ret    

c0006f35 <f_forward>:
c0006f35:	55                   	push   ebp
c0006f36:	57                   	push   edi
c0006f37:	56                   	push   esi
c0006f38:	53                   	push   ebx
c0006f39:	83 ec 2c             	sub    esp,0x2c
c0006f3c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f40:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f44:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f4a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f4e:	89 d8                	mov    eax,ebx
c0006f50:	e8 b1 b1 ff ff       	call   c0002106 <validate>
c0006f55:	89 c5                	mov    ebp,eax
c0006f57:	85 c0                	test   eax,eax
c0006f59:	0f 85 aa 01 00 00    	jne    c0007109 <f_forward+0x1d4>
c0006f5f:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f63:	85 ed                	test   ebp,ebp
c0006f65:	0f 85 9e 01 00 00    	jne    c0007109 <f_forward+0x1d4>
c0006f6b:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f6f:	0f 84 8f 01 00 00    	je     c0007104 <f_forward+0x1cf>
c0006f75:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f78:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f7b:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f7e:	bf 00 00 00 00       	mov    edi,0x0
c0006f83:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f86:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f8a:	89 d1                	mov    ecx,edx
c0006f8c:	19 f9                	sbb    ecx,edi
c0006f8e:	0f 83 cf 00 00 00    	jae    c0007063 <f_forward+0x12e>
c0006f94:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f98:	e9 c6 00 00 00       	jmp    c0007063 <f_forward+0x12e>
c0006f9d:	50                   	push   eax
c0006f9e:	50                   	push   eax
c0006f9f:	6a 00                	push   0x0
c0006fa1:	6a 00                	push   0x0
c0006fa3:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fa7:	83 c4 10             	add    esp,0x10
c0006faa:	85 c0                	test   eax,eax
c0006fac:	0f 84 57 01 00 00    	je     c0007109 <f_forward+0x1d4>
c0006fb2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fb5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fb9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fbc:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fc0:	89 d7                	mov    edi,edx
c0006fc2:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fc5:	89 c6                	mov    esi,eax
c0006fc7:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fcb:	21 ce                	and    esi,ecx
c0006fcd:	89 c1                	mov    ecx,eax
c0006fcf:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fd5:	0f 84 98 00 00 00    	je     c0007073 <f_forward+0x13e>
c0006fdb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fdf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006fe2:	89 c8                	mov    eax,ecx
c0006fe4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006fe8:	e8 af ac ff ff       	call   c0001c9c <clst2sect>
c0006fed:	89 d7                	mov    edi,edx
c0006fef:	09 c7                	or     edi,eax
c0006ff1:	0f 84 9e 00 00 00    	je     c0007095 <f_forward+0x160>
c0006ff7:	31 ff                	xor    edi,edi
c0006ff9:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006ffc:	01 c6                	add    esi,eax
c0006ffe:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007002:	11 d7                	adc    edi,edx
c0007004:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007007:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000700a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000700e:	39 fa                	cmp    edx,edi
c0007010:	0f 85 a2 00 00 00    	jne    c00070b8 <f_forward+0x183>
c0007016:	39 f0                	cmp    eax,esi
c0007018:	0f 85 9a 00 00 00    	jne    c00070b8 <f_forward+0x183>
c000701e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007021:	ba 00 02 00 00       	mov    edx,0x200
c0007026:	25 ff 01 00 00       	and    eax,0x1ff
c000702b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000702f:	29 c2                	sub    edx,eax
c0007031:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007034:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007037:	39 d1                	cmp    ecx,edx
c0007039:	76 02                	jbe    c000703d <f_forward+0x108>
c000703b:	89 d1                	mov    ecx,edx
c000703d:	8d 73 50             	lea    esi,[ebx+0x50]
c0007040:	52                   	push   edx
c0007041:	01 c6                	add    esi,eax
c0007043:	52                   	push   edx
c0007044:	51                   	push   ecx
c0007045:	56                   	push   esi
c0007046:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000704a:	83 c4 10             	add    esp,0x10
c000704d:	85 c0                	test   eax,eax
c000704f:	74 44                	je     c0007095 <f_forward+0x160>
c0007051:	31 ff                	xor    edi,edi
c0007053:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007056:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007059:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000705d:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007061:	01 07                	add    DWORD PTR [edi],eax
c0007063:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007068:	0f 85 2f ff ff ff    	jne    c0006f9d <f_forward+0x68>
c000706e:	e9 96 00 00 00       	jmp    c0007109 <f_forward+0x1d4>
c0007073:	85 f6                	test   esi,esi
c0007075:	0f 85 60 ff ff ff    	jne    c0006fdb <f_forward+0xa6>
c000707b:	89 d7                	mov    edi,edx
c000707d:	09 c7                	or     edi,eax
c000707f:	75 05                	jne    c0007086 <f_forward+0x151>
c0007081:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007084:	eb 0a                	jmp    c0007090 <f_forward+0x15b>
c0007086:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007089:	89 d8                	mov    eax,ebx
c000708b:	e8 d9 bc ff ff       	call   c0002d69 <get_fat>
c0007090:	83 f8 01             	cmp    eax,0x1
c0007093:	77 0b                	ja     c00070a0 <f_forward+0x16b>
c0007095:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007099:	bd 02 00 00 00       	mov    ebp,0x2
c000709e:	eb 69                	jmp    c0007109 <f_forward+0x1d4>
c00070a0:	83 f8 ff             	cmp    eax,0xffffffff
c00070a3:	75 0b                	jne    c00070b0 <f_forward+0x17b>
c00070a5:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070a9:	bd 01 00 00 00       	mov    ebp,0x1
c00070ae:	eb 59                	jmp    c0007109 <f_forward+0x1d4>
c00070b0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070b3:	e9 23 ff ff ff       	jmp    c0006fdb <f_forward+0xa6>
c00070b8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070bc:	79 20                	jns    c00070de <f_forward+0x1a9>
c00070be:	83 ec 0c             	sub    esp,0xc
c00070c1:	6a 01                	push   0x1
c00070c3:	52                   	push   edx
c00070c4:	50                   	push   eax
c00070c5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070c9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070cd:	50                   	push   eax
c00070ce:	e8 fb a8 ff ff       	call   c00019ce <disk_write>
c00070d3:	83 c4 20             	add    esp,0x20
c00070d6:	85 c0                	test   eax,eax
c00070d8:	75 cb                	jne    c00070a5 <f_forward+0x170>
c00070da:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070de:	83 ec 0c             	sub    esp,0xc
c00070e1:	6a 01                	push   0x1
c00070e3:	57                   	push   edi
c00070e4:	56                   	push   esi
c00070e5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070e9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070ed:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070f1:	50                   	push   eax
c00070f2:	e8 c1 a8 ff ff       	call   c00019b8 <disk_read>
c00070f7:	83 c4 20             	add    esp,0x20
c00070fa:	85 c0                	test   eax,eax
c00070fc:	0f 84 1c ff ff ff    	je     c000701e <f_forward+0xe9>
c0007102:	eb a1                	jmp    c00070a5 <f_forward+0x170>
c0007104:	bd 07 00 00 00       	mov    ebp,0x7
c0007109:	83 c4 2c             	add    esp,0x2c
c000710c:	89 e8                	mov    eax,ebp
c000710e:	5b                   	pop    ebx
c000710f:	5e                   	pop    esi
c0007110:	5f                   	pop    edi
c0007111:	5d                   	pop    ebp
c0007112:	c3                   	ret    

c0007113 <f_mkfs>:
c0007113:	55                   	push   ebp
c0007114:	57                   	push   edi
c0007115:	56                   	push   esi
c0007116:	53                   	push   ebx
c0007117:	bb 0b 00 00 00       	mov    ebx,0xb
c000711c:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007122:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007129:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007130:	e8 b0 ae ff ff       	call   c0001fe5 <get_ldnumber>
c0007135:	85 c0                	test   eax,eax
c0007137:	0f 88 ec 10 00 00    	js     c0008229 <f_mkfs+0x1116>
c000713d:	8b 14 85 e0 aa 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5520]
c0007144:	85 d2                	test   edx,edx
c0007146:	74 03                	je     c000714b <f_mkfs+0x38>
c0007148:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000714b:	85 f6                	test   esi,esi
c000714d:	75 05                	jne    c0007154 <f_mkfs+0x41>
c000714f:	be 80 63 02 c0       	mov    esi,0xc0026380
c0007154:	83 ec 0c             	sub    esp,0xc
c0007157:	0f b6 c0             	movzx  eax,al
c000715a:	bb 03 00 00 00       	mov    ebx,0x3
c000715f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007163:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007167:	e8 49 a8 ff ff       	call   c00019b5 <disk_initialize>
c000716c:	83 c4 10             	add    esp,0x10
c000716f:	a8 01                	test   al,0x1
c0007171:	0f 85 b2 10 00 00    	jne    c0008229 <f_mkfs+0x1116>
c0007177:	bb 0a 00 00 00       	mov    ebx,0xa
c000717c:	a8 04                	test   al,0x4
c000717e:	0f 85 a5 10 00 00    	jne    c0008229 <f_mkfs+0x1116>
c0007184:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007187:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000718b:	85 c0                	test   eax,eax
c000718d:	75 20                	jne    c00071af <f_mkfs+0x9c>
c000718f:	51                   	push   ecx
c0007190:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007194:	50                   	push   eax
c0007195:	6a 03                	push   0x3
c0007197:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719b:	e8 44 a8 ff ff       	call   c00019e4 <disk_ioctl>
c00071a0:	83 c4 10             	add    esp,0x10
c00071a3:	85 c0                	test   eax,eax
c00071a5:	74 08                	je     c00071af <f_mkfs+0x9c>
c00071a7:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071af:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071b3:	8d 42 ff             	lea    eax,[edx-0x1]
c00071b6:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071bb:	77 04                	ja     c00071c1 <f_mkfs+0xae>
c00071bd:	85 c2                	test   edx,eax
c00071bf:	74 08                	je     c00071c9 <f_mkfs+0xb6>
c00071c1:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071c9:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071cc:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00071d0:	48                   	dec    eax
c00071d1:	3c 01                	cmp    al,0x1
c00071d3:	76 05                	jbe    c00071da <f_mkfs+0xc7>
c00071d5:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00071da:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071e1:	48                   	dec    eax
c00071e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071e7:	77 07                	ja     c00071f0 <f_mkfs+0xdd>
c00071e9:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071ee:	74 08                	je     c00071f8 <f_mkfs+0xe5>
c00071f0:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c00071f8:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c00071fb:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007201:	77 07                	ja     c000720a <f_mkfs+0xf7>
c0007203:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007206:	85 d8                	test   eax,ebx
c0007208:	74 02                	je     c000720c <f_mkfs+0xf9>
c000720a:	31 db                	xor    ebx,ebx
c000720c:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007217:	77 0a                	ja     c0007223 <f_mkfs+0x110>
c0007219:	bb 11 00 00 00       	mov    ebx,0x11
c000721e:	e9 06 10 00 00       	jmp    c0008229 <f_mkfs+0x1116>
c0007223:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000722a:	8b 36                	mov    esi,DWORD PTR [esi]
c000722c:	85 ed                	test   ebp,ebp
c000722e:	75 1e                	jne    c000724e <f_mkfs+0x13b>
c0007230:	83 ec 0c             	sub    esp,0xc
c0007233:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000723a:	25 00 fe ff ff       	and    eax,0xfffffe00
c000723f:	50                   	push   eax
c0007240:	e8 f1 0f 00 00       	call   c0008236 <ff_memalloc>
c0007245:	83 c4 10             	add    esp,0x10
c0007248:	89 c5                	mov    ebp,eax
c000724a:	85 c0                	test   eax,eax
c000724c:	74 cb                	je     c0007219 <f_mkfs+0x106>
c000724e:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007256:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000725e:	52                   	push   edx
c000725f:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007263:	50                   	push   eax
c0007264:	6a 01                	push   0x1
c0007266:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000726a:	e8 75 a7 ff ff       	call   c00019e4 <disk_ioctl>
c000726f:	83 c4 10             	add    esp,0x10
c0007272:	85 c0                	test   eax,eax
c0007274:	0f 85 4a 0f 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c000727a:	89 f1                	mov    ecx,esi
c000727c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007284:	83 e1 0f             	and    ecx,0xf
c0007287:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000728f:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007293:	83 e6 08             	and    esi,0x8
c0007296:	75 56                	jne    c00072ee <f_mkfs+0x1db>
c0007298:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000729c:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072a0:	83 ff 00             	cmp    edi,0x0
c00072a3:	76 20                	jbe    c00072c5 <f_mkfs+0x1b2>
c00072a5:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072aa:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072b2:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072b8:	83 d7 ff             	adc    edi,0xffffffff
c00072bb:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072bf:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072c3:	eb 21                	jmp    c00072e6 <f_mkfs+0x1d3>
c00072c5:	ba 3f 00 00 00       	mov    edx,0x3f
c00072ca:	39 f2                	cmp    edx,esi
c00072cc:	19 f8                	sbb    eax,edi
c00072ce:	73 1e                	jae    c00072ee <f_mkfs+0x1db>
c00072d0:	83 c6 c1             	add    esi,0xffffffc1
c00072d3:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072db:	83 d7 ff             	adc    edi,0xffffffff
c00072de:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072e2:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072e6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072ee:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00072f2:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00072f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00072f9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00072fd:	31 c0                	xor    eax,eax
c00072ff:	ba 7f 00 00 00       	mov    edx,0x7f
c0007304:	89 c7                	mov    edi,eax
c0007306:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007309:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000730d:	0f 83 c5 0a 00 00    	jae    c0007dd8 <f_mkfs+0xcc5>
c0007313:	89 df                	mov    edi,ebx
c0007315:	c1 ef 09             	shr    edi,0x9
c0007318:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000731c:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007323:	c1 ef 09             	shr    edi,0x9
c0007326:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000732b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000732f:	74 29                	je     c000735a <f_mkfs+0x247>
c0007331:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007337:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000733c:	0f 97 c2             	seta   dl
c000733f:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007342:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007346:	0f 92 c0             	setb   al
c0007349:	08 c2                	or     dl,al
c000734b:	75 5b                	jne    c00073a8 <f_mkfs+0x295>
c000734d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007351:	83 e0 07             	and    eax,0x7
c0007354:	3c 04                	cmp    al,0x4
c0007356:	74 50                	je     c00073a8 <f_mkfs+0x295>
c0007358:	eb 1b                	jmp    c0007375 <f_mkfs+0x262>
c000735a:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000735f:	0f 87 73 0a 00 00    	ja     c0007dd8 <f_mkfs+0xcc5>
c0007365:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000736b:	76 08                	jbe    c0007375 <f_mkfs+0x262>
c000736d:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007375:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007379:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000737d:	83 e0 01             	and    eax,0x1
c0007380:	80 e1 02             	and    cl,0x2
c0007383:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007387:	74 0d                	je     c0007396 <f_mkfs+0x283>
c0007389:	84 c0                	test   al,al
c000738b:	0f 84 53 09 00 00    	je     c0007ce4 <f_mkfs+0xbd1>
c0007391:	e9 12 08 00 00       	jmp    c0007ba8 <f_mkfs+0xa95>
c0007396:	bb 13 00 00 00       	mov    ebx,0x13
c000739b:	84 c0                	test   al,al
c000739d:	0f 85 05 08 00 00    	jne    c0007ba8 <f_mkfs+0xa95>
c00073a3:	e9 39 0e 00 00       	jmp    c00081e1 <f_mkfs+0x10ce>
c00073a8:	31 c0                	xor    eax,eax
c00073aa:	ba ff 0f 00 00       	mov    edx,0xfff
c00073af:	89 c7                	mov    edi,eax
c00073b1:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073b4:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073b8:	0f 83 1a 0a 00 00    	jae    c0007dd8 <f_mkfs+0xcc5>
c00073be:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073c4:	77 39                	ja     c00073ff <f_mkfs+0x2ec>
c00073c6:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073cb:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073d3:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073d6:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073da:	73 08                	jae    c00073e4 <f_mkfs+0x2d1>
c00073dc:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073e4:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073e9:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073ec:	b8 00 00 00 00       	mov    eax,0x0
c00073f1:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073f5:	73 08                	jae    c00073ff <f_mkfs+0x2ec>
c00073f7:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00073ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007403:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007407:	83 c0 20             	add    eax,0x20
c000740a:	83 d2 00             	adc    edx,0x0
c000740d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007411:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007415:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007419:	31 d2                	xor    edx,edx
c000741b:	31 ff                	xor    edi,edi
c000741d:	52                   	push   edx
c000741e:	89 fb                	mov    ebx,edi
c0007420:	50                   	push   eax
c0007421:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007425:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007429:	e8 7e c6 01 00       	call   c0023aac <__udivdi3>
c000742e:	83 c4 10             	add    esp,0x10
c0007431:	c1 e0 02             	shl    eax,0x2
c0007434:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007438:	05 07 02 00 00       	add    eax,0x207
c000743d:	89 f1                	mov    ecx,esi
c000743f:	c1 e8 09             	shr    eax,0x9
c0007442:	83 c1 ff             	add    ecx,0xffffffff
c0007445:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007449:	83 d3 ff             	adc    ebx,0xffffffff
c000744c:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007450:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007454:	31 d2                	xor    edx,edx
c0007456:	01 c8                	add    eax,ecx
c0007458:	11 da                	adc    edx,ebx
c000745a:	89 c1                	mov    ecx,eax
c000745c:	f7 de                	neg    esi
c000745e:	89 d0                	mov    eax,edx
c0007460:	83 d7 00             	adc    edi,0x0
c0007463:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007467:	f7 df                	neg    edi
c0007469:	21 f1                	and    ecx,esi
c000746b:	21 f8                	and    eax,edi
c000746d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007471:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007475:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007479:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000747d:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007481:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007484:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007488:	0f ac d0 01          	shrd   eax,edx,0x1
c000748c:	89 df                	mov    edi,ebx
c000748e:	d1 ea                	shr    edx,1
c0007490:	39 c1                	cmp    ecx,eax
c0007492:	19 d7                	sbb    edi,edx
c0007494:	0f 83 3e 09 00 00    	jae    c0007dd8 <f_mkfs+0xcc5>
c000749a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000749e:	31 d2                	xor    edx,edx
c00074a0:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074a8:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074ac:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074af:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074b3:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074b7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074bb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074bf:	83 f8 0f             	cmp    eax,0xf
c00074c2:	0f 86 10 09 00 00    	jbe    c0007dd8 <f_mkfs+0xcc5>
c00074c8:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074d0:	0f 87 02 09 00 00    	ja     c0007dd8 <f_mkfs+0xcc5>
c00074d6:	31 d2                	xor    edx,edx
c00074d8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074dc:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074e4:	83 c0 07             	add    eax,0x7
c00074e7:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074ef:	c1 e8 03             	shr    eax,0x3
c00074f2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00074f9:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00074fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007501:	c1 e0 09             	shl    eax,0x9
c0007504:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007508:	48                   	dec    eax
c0007509:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000750d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007511:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007515:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007519:	31 d2                	xor    edx,edx
c000751b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000751f:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007526:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000752a:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000752f:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007533:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007537:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000753b:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000753f:	31 ff                	xor    edi,edi
c0007541:	31 f6                	xor    esi,esi
c0007543:	31 db                	xor    ebx,ebx
c0007545:	85 ff                	test   edi,edi
c0007547:	74 05                	je     c000754e <f_mkfs+0x43b>
c0007549:	4f                   	dec    edi
c000754a:	74 44                	je     c0007590 <f_mkfs+0x47d>
c000754c:	eb 4f                	jmp    c000759d <f_mkfs+0x48a>
c000754e:	83 ec 0c             	sub    esp,0xc
c0007551:	0f b7 c3             	movzx  eax,bx
c0007554:	50                   	push   eax
c0007555:	e8 05 0e 00 00       	call   c000835f <ff_wtoupper>
c000755a:	83 c4 10             	add    esp,0x10
c000755d:	89 c1                	mov    ecx,eax
c000755f:	8d 53 01             	lea    edx,[ebx+0x1]
c0007562:	66 39 c3             	cmp    bx,ax
c0007565:	75 3e                	jne    c00075a5 <f_mkfs+0x492>
c0007567:	be 01 00 00 00       	mov    esi,0x1
c000756c:	89 df                	mov    edi,ebx
c000756e:	66 01 f7             	add    di,si
c0007571:	75 07                	jne    c000757a <f_mkfs+0x467>
c0007573:	83 fe 7f             	cmp    esi,0x7f
c0007576:	77 31                	ja     c00075a9 <f_mkfs+0x496>
c0007578:	eb 16                	jmp    c0007590 <f_mkfs+0x47d>
c000757a:	83 ec 0c             	sub    esp,0xc
c000757d:	0f b7 ff             	movzx  edi,di
c0007580:	57                   	push   edi
c0007581:	e8 d9 0d 00 00       	call   c000835f <ff_wtoupper>
c0007586:	83 c4 10             	add    esp,0x10
c0007589:	39 c7                	cmp    edi,eax
c000758b:	75 e6                	jne    c0007573 <f_mkfs+0x460>
c000758d:	46                   	inc    esi
c000758e:	eb dc                	jmp    c000756c <f_mkfs+0x459>
c0007590:	31 c0                	xor    eax,eax
c0007592:	89 d9                	mov    ecx,ebx
c0007594:	4e                   	dec    esi
c0007595:	0f 95 c0             	setne  al
c0007598:	43                   	inc    ebx
c0007599:	89 c7                	mov    edi,eax
c000759b:	eb 14                	jmp    c00075b1 <f_mkfs+0x49e>
c000759d:	89 f1                	mov    ecx,esi
c000759f:	01 f3                	add    ebx,esi
c00075a1:	31 ff                	xor    edi,edi
c00075a3:	eb 0c                	jmp    c00075b1 <f_mkfs+0x49e>
c00075a5:	89 d3                	mov    ebx,edx
c00075a7:	eb 08                	jmp    c00075b1 <f_mkfs+0x49e>
c00075a9:	bf 02 00 00 00       	mov    edi,0x2
c00075ae:	83 c9 ff             	or     ecx,0xffffffff
c00075b1:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075b8:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075bc:	0f b6 c1             	movzx  eax,cl
c00075bf:	e8 3a a9 ff ff       	call   c0001efe <xsum32>
c00075c4:	66 c1 e9 08          	shr    cx,0x8
c00075c8:	89 c2                	mov    edx,eax
c00075ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075cd:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075d1:	0f b7 c1             	movzx  eax,cx
c00075d4:	e8 25 a9 ff ff       	call   c0001efe <xsum32>
c00075d9:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075de:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075e2:	66 85 db             	test   bx,bx
c00075e5:	74 1f                	je     c0007606 <f_mkfs+0x4f3>
c00075e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075ea:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075f1:	83 c0 02             	add    eax,0x2
c00075f4:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c00075fa:	39 c2                	cmp    edx,eax
c00075fc:	74 08                	je     c0007606 <f_mkfs+0x4f3>
c00075fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007601:	e9 3f ff ff ff       	jmp    c0007545 <f_mkfs+0x432>
c0007606:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007609:	83 ec 0c             	sub    esp,0xc
c000760c:	05 01 02 00 00       	add    eax,0x201
c0007611:	c1 e8 09             	shr    eax,0x9
c0007614:	50                   	push   eax
c0007615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007619:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000761d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007621:	55                   	push   ebp
c0007622:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007626:	e8 a3 a3 ff ff       	call   c00019ce <disk_write>
c000762b:	83 c4 20             	add    esp,0x20
c000762e:	85 c0                	test   eax,eax
c0007630:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007633:	0f 85 8b 0b 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0007639:	89 d0                	mov    eax,edx
c000763b:	31 d2                	xor    edx,edx
c000763d:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007641:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007645:	66 85 db             	test   bx,bx
c0007648:	74 04                	je     c000764e <f_mkfs+0x53b>
c000764a:	31 c0                	xor    eax,eax
c000764c:	eb b0                	jmp    c00075fe <f_mkfs+0x4eb>
c000764e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007652:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007656:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000765a:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007660:	31 d2                	xor    edx,edx
c0007662:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c000766d:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007671:	c1 eb 09             	shr    ebx,0x9
c0007674:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000767b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767f:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007683:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007687:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000768b:	8d 70 01             	lea    esi,[eax+0x1]
c000768e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007692:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007696:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c000769d:	31 d2                	xor    edx,edx
c000769f:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00076a7:	89 c1                	mov    ecx,eax
c00076a9:	89 e8                	mov    eax,ebp
c00076ab:	e8 e7 a3 ff ff       	call   c0001a97 <mem_set>
c00076b0:	31 c0                	xor    eax,eax
c00076b2:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076b5:	76 10                	jbe    c00076c7 <f_mkfs+0x5b4>
c00076b7:	83 fe 07             	cmp    esi,0x7
c00076ba:	76 0b                	jbe    c00076c7 <f_mkfs+0x5b4>
c00076bc:	40                   	inc    eax
c00076bd:	83 ee 08             	sub    esi,0x8
c00076c0:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076c5:	eb eb                	jmp    c00076b2 <f_mkfs+0x59f>
c00076c7:	b2 01                	mov    dl,0x1
c00076c9:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076cd:	85 f6                	test   esi,esi
c00076cf:	74 0c                	je     c00076dd <f_mkfs+0x5ca>
c00076d1:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076d4:	76 07                	jbe    c00076dd <f_mkfs+0x5ca>
c00076d6:	08 11                	or     BYTE PTR [ecx],dl
c00076d8:	4e                   	dec    esi
c00076d9:	d1 e2                	shl    edx,1
c00076db:	eb f0                	jmp    c00076cd <f_mkfs+0x5ba>
c00076dd:	89 df                	mov    edi,ebx
c00076df:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076e3:	76 04                	jbe    c00076e9 <f_mkfs+0x5d6>
c00076e5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076e9:	83 ec 0c             	sub    esp,0xc
c00076ec:	57                   	push   edi
c00076ed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076f1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076f5:	55                   	push   ebp
c00076f6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00076fa:	e8 cf a2 ff ff       	call   c00019ce <disk_write>
c00076ff:	83 c4 20             	add    esp,0x20
c0007702:	85 c0                	test   eax,eax
c0007704:	0f 85 ba 0a 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c000770a:	31 d2                	xor    edx,edx
c000770c:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007710:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007714:	29 fb                	sub    ebx,edi
c0007716:	0f 85 7a ff ff ff    	jne    c0007696 <f_mkfs+0x583>
c000771c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007720:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007728:	31 f6                	xor    esi,esi
c000772a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000772e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007731:	31 d2                	xor    edx,edx
c0007733:	89 e8                	mov    eax,ebp
c0007735:	e8 5d a3 ff ff       	call   c0001a97 <mem_set>
c000773a:	31 c9                	xor    ecx,ecx
c000773c:	85 db                	test   ebx,ebx
c000773e:	75 40                	jne    c0007780 <f_mkfs+0x66d>
c0007740:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007745:	89 e8                	mov    eax,ebp
c0007747:	bb 02 00 00 00       	mov    ebx,0x2
c000774c:	e8 28 a3 ff ff       	call   c0001a79 <st_dword>
c0007751:	8d 45 04             	lea    eax,[ebp+0x4]
c0007754:	83 ca ff             	or     edx,0xffffffff
c0007757:	e8 1d a3 ff ff       	call   c0001a79 <st_dword>
c000775c:	b9 08 00 00 00       	mov    ecx,0x8
c0007761:	eb 1d                	jmp    c0007780 <f_mkfs+0x66d>
c0007763:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007766:	76 3b                	jbe    c00077a3 <f_mkfs+0x690>
c0007768:	43                   	inc    ebx
c0007769:	83 fe 01             	cmp    esi,0x1
c000776c:	89 da                	mov    edx,ebx
c000776e:	77 03                	ja     c0007773 <f_mkfs+0x660>
c0007770:	83 ca ff             	or     edx,0xffffffff
c0007773:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007777:	4e                   	dec    esi
c0007778:	e8 fc a2 ff ff       	call   c0001a79 <st_dword>
c000777d:	83 c1 04             	add    ecx,0x4
c0007780:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007784:	85 f6                	test   esi,esi
c0007786:	75 db                	jne    c0007763 <f_mkfs+0x650>
c0007788:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000778d:	77 14                	ja     c00077a3 <f_mkfs+0x690>
c000778f:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007793:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c000779a:	85 f6                	test   esi,esi
c000779c:	74 05                	je     c00077a3 <f_mkfs+0x690>
c000779e:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077a1:	77 dd                	ja     c0007780 <f_mkfs+0x66d>
c00077a3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077a7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077ab:	39 cf                	cmp    edi,ecx
c00077ad:	76 02                	jbe    c00077b1 <f_mkfs+0x69e>
c00077af:	89 cf                	mov    edi,ecx
c00077b1:	83 ec 0c             	sub    esp,0xc
c00077b4:	57                   	push   edi
c00077b5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077b9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077bd:	55                   	push   ebp
c00077be:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077c2:	e8 07 a2 ff ff       	call   c00019ce <disk_write>
c00077c7:	83 c4 20             	add    esp,0x20
c00077ca:	85 c0                	test   eax,eax
c00077cc:	0f 85 f2 09 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c00077d2:	31 d2                	xor    edx,edx
c00077d4:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00077d8:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c00077dc:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c00077e0:	0f 85 48 ff ff ff    	jne    c000772e <f_mkfs+0x61b>
c00077e6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077e9:	31 d2                	xor    edx,edx
c00077eb:	89 e8                	mov    eax,ebp
c00077ed:	31 ff                	xor    edi,edi
c00077ef:	e8 a3 a2 ff ff       	call   c0001a97 <mem_set>
c00077f4:	8d 45 34             	lea    eax,[ebp+0x34]
c00077f7:	ba 02 00 00 00       	mov    edx,0x2
c00077fc:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007800:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007804:	e8 70 a2 ff ff       	call   c0001a79 <st_dword>
c0007809:	8d 45 38             	lea    eax,[ebp+0x38]
c000780c:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007810:	e8 64 a2 ff ff       	call   c0001a79 <st_dword>
c0007815:	8d 45 44             	lea    eax,[ebp+0x44]
c0007818:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000781c:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007820:	e8 54 a2 ff ff       	call   c0001a79 <st_dword>
c0007825:	8d 45 54             	lea    eax,[ebp+0x54]
c0007828:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000782c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007830:	83 c2 02             	add    edx,0x2
c0007833:	e8 41 a2 ff ff       	call   c0001a79 <st_dword>
c0007838:	8d 45 58             	lea    eax,[ebp+0x58]
c000783b:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000783f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007843:	e8 31 a2 ff ff       	call   c0001a79 <st_dword>
c0007848:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000784c:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007851:	89 c6                	mov    esi,eax
c0007853:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007857:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000785b:	89 04 24             	mov    DWORD PTR [esp],eax
c000785e:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007862:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007865:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007869:	39 cb                	cmp    ebx,ecx
c000786b:	76 02                	jbe    c000786f <f_mkfs+0x75c>
c000786d:	89 cb                	mov    ebx,ecx
c000786f:	83 ec 0c             	sub    esp,0xc
c0007872:	53                   	push   ebx
c0007873:	57                   	push   edi
c0007874:	56                   	push   esi
c0007875:	55                   	push   ebp
c0007876:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000787a:	e8 4f a1 ff ff       	call   c00019ce <disk_write>
c000787f:	83 c4 20             	add    esp,0x20
c0007882:	85 c0                	test   eax,eax
c0007884:	0f 85 3a 09 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c000788a:	31 d2                	xor    edx,edx
c000788c:	b9 00 02 00 00       	mov    ecx,0x200
c0007891:	89 e8                	mov    eax,ebp
c0007893:	e8 ff a1 ff ff       	call   c0001a97 <mem_set>
c0007898:	31 d2                	xor    edx,edx
c000789a:	01 de                	add    esi,ebx
c000789c:	11 d7                	adc    edi,edx
c000789e:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078a1:	75 bf                	jne    c0007862 <f_mkfs+0x74f>
c00078a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078ab:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078b3:	b9 00 02 00 00       	mov    ecx,0x200
c00078b8:	31 d2                	xor    edx,edx
c00078ba:	89 e8                	mov    eax,ebp
c00078bc:	e8 d6 a1 ff ff       	call   c0001a97 <mem_set>
c00078c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00078c6:	ba 60 64 02 c0       	mov    edx,0xc0026460
c00078cb:	89 e8                	mov    eax,ebp
c00078cd:	e8 b0 a1 ff ff       	call   c0001a82 <mem_cpy>
c00078d2:	8d 45 40             	lea    eax,[ebp+0x40]
c00078d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078d9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078dd:	e8 9a a1 ff ff       	call   c0001a7c <st_qword>
c00078e2:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078e6:	8d 45 48             	lea    eax,[ebp+0x48]
c00078e9:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078ed:	e8 8a a1 ff ff       	call   c0001a7c <st_qword>
c00078f2:	8d 45 50             	lea    eax,[ebp+0x50]
c00078f5:	ba 20 00 00 00       	mov    edx,0x20
c00078fa:	e8 7a a1 ff ff       	call   c0001a79 <st_dword>
c00078ff:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007903:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007907:	e8 6d a1 ff ff       	call   c0001a79 <st_dword>
c000790c:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007910:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007914:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007918:	e8 5c a1 ff ff       	call   c0001a79 <st_dword>
c000791d:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007920:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007924:	e8 50 a1 ff ff       	call   c0001a79 <st_dword>
c0007929:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000792d:	8d 50 02             	lea    edx,[eax+0x2]
c0007930:	8d 45 60             	lea    eax,[ebp+0x60]
c0007933:	e8 41 a1 ff ff       	call   c0001a79 <st_dword>
c0007938:	8d 45 64             	lea    eax,[ebp+0x64]
c000793b:	ba 00 00 21 50       	mov    edx,0x50210000
c0007940:	e8 34 a1 ff ff       	call   c0001a79 <st_dword>
c0007945:	8d 45 68             	lea    eax,[ebp+0x68]
c0007948:	ba 00 01 00 00       	mov    edx,0x100
c000794d:	e8 23 a1 ff ff       	call   c0001a75 <st_word>
c0007952:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007956:	b8 0a 00 00 00       	mov    eax,0xa
c000795b:	48                   	dec    eax
c000795c:	74 05                	je     c0007963 <f_mkfs+0x850>
c000795e:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007961:	eb f8                	jmp    c000795b <f_mkfs+0x848>
c0007963:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007967:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c000796b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000796f:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007973:	74 05                	je     c000797a <f_mkfs+0x867>
c0007975:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007978:	eb f5                	jmp    c000796f <f_mkfs+0x85c>
c000797a:	8d 45 78             	lea    eax,[ebp+0x78]
c000797d:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007982:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007988:	31 db                	xor    ebx,ebx
c000798a:	e8 e6 a0 ff ff       	call   c0001a75 <st_word>
c000798f:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007995:	ba 55 aa 00 00       	mov    edx,0xaa55
c000799a:	89 04 24             	mov    DWORD PTR [esp],eax
c000799d:	e8 d3 a0 ff ff       	call   c0001a75 <st_word>
c00079a2:	31 c9                	xor    ecx,ecx
c00079a4:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079a7:	83 f8 01             	cmp    eax,0x1
c00079aa:	76 13                	jbe    c00079bf <f_mkfs+0x8ac>
c00079ac:	83 f9 70             	cmp    ecx,0x70
c00079af:	74 0e                	je     c00079bf <f_mkfs+0x8ac>
c00079b1:	89 da                	mov    edx,ebx
c00079b3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079b8:	e8 41 a5 ff ff       	call   c0001efe <xsum32>
c00079bd:	89 c3                	mov    ebx,eax
c00079bf:	41                   	inc    ecx
c00079c0:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079c6:	75 dc                	jne    c00079a4 <f_mkfs+0x891>
c00079c8:	89 f0                	mov    eax,esi
c00079ca:	89 fa                	mov    edx,edi
c00079cc:	83 c0 01             	add    eax,0x1
c00079cf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079d3:	83 d2 00             	adc    edx,0x0
c00079d6:	83 ec 0c             	sub    esp,0xc
c00079d9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00079dd:	6a 01                	push   0x1
c00079df:	57                   	push   edi
c00079e0:	56                   	push   esi
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 e3 9f ff ff       	call   c00019ce <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 ce 07 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	b9 00 02 00 00       	mov    ecx,0x200
c00079fd:	89 e8                	mov    eax,ebp
c00079ff:	e8 93 a0 ff ff       	call   c0001a97 <mem_set>
c0007a04:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a09:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a0c:	e8 64 a0 ff ff       	call   c0001a75 <st_word>
c0007a11:	89 f0                	mov    eax,esi
c0007a13:	89 fa                	mov    edx,edi
c0007a15:	83 c0 09             	add    eax,0x9
c0007a18:	83 d2 00             	adc    edx,0x0
c0007a1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a1e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a22:	31 c9                	xor    ecx,ecx
c0007a24:	41                   	inc    ecx
c0007a25:	89 da                	mov    edx,ebx
c0007a27:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a2c:	e8 cd a4 ff ff       	call   c0001efe <xsum32>
c0007a31:	89 c3                	mov    ebx,eax
c0007a33:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a39:	75 e9                	jne    c0007a24 <f_mkfs+0x911>
c0007a3b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a43:	83 c0 01             	add    eax,0x1
c0007a46:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a4a:	83 d2 00             	adc    edx,0x0
c0007a4d:	83 ec 0c             	sub    esp,0xc
c0007a50:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a54:	6a 01                	push   0x1
c0007a56:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a5a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a5e:	55                   	push   ebp
c0007a5f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a63:	e8 66 9f ff ff       	call   c00019ce <disk_write>
c0007a68:	83 c4 20             	add    esp,0x20
c0007a6b:	85 c0                	test   eax,eax
c0007a6d:	0f 85 51 07 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0007a73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a77:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a7b:	75 09                	jne    c0007a86 <f_mkfs+0x973>
c0007a7d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a80:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a84:	74 12                	je     c0007a98 <f_mkfs+0x985>
c0007a86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a8a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a8e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a92:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a96:	eb 8a                	jmp    c0007a22 <f_mkfs+0x90f>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	b9 00 02 00 00       	mov    ecx,0x200
c0007a9f:	89 e8                	mov    eax,ebp
c0007aa1:	e8 f1 9f ff ff       	call   c0001a97 <mem_set>
c0007aa6:	83 c6 0b             	add    esi,0xb
c0007aa9:	83 d7 00             	adc    edi,0x0
c0007aac:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007ab0:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007ab4:	31 c9                	xor    ecx,ecx
c0007ab6:	41                   	inc    ecx
c0007ab7:	89 da                	mov    edx,ebx
c0007ab9:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007abe:	e8 3b a4 ff ff       	call   c0001efe <xsum32>
c0007ac3:	89 c3                	mov    ebx,eax
c0007ac5:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007acb:	75 e9                	jne    c0007ab6 <f_mkfs+0x9a3>
c0007acd:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ad0:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ad4:	83 c6 01             	add    esi,0x1
c0007ad7:	83 d7 00             	adc    edi,0x0
c0007ada:	83 ec 0c             	sub    esp,0xc
c0007add:	6a 01                	push   0x1
c0007adf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ae3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ae7:	55                   	push   ebp
c0007ae8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007aec:	e8 dd 9e ff ff       	call   c00019ce <disk_write>
c0007af1:	83 c4 20             	add    esp,0x20
c0007af4:	85 c0                	test   eax,eax
c0007af6:	0f 85 c8 06 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0007afc:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b00:	75 06                	jne    c0007b08 <f_mkfs+0x9f5>
c0007b02:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b06:	74 09                	je     c0007b11 <f_mkfs+0x9fe>
c0007b08:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b0b:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b0f:	eb a3                	jmp    c0007ab4 <f_mkfs+0x9a1>
c0007b11:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b15:	89 da                	mov    edx,ebx
c0007b17:	01 e8                	add    eax,ebp
c0007b19:	e8 5b 9f ff ff       	call   c0001a79 <st_dword>
c0007b1e:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b23:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b2b:	75 e4                	jne    c0007b11 <f_mkfs+0x9fe>
c0007b2d:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b30:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b34:	83 c6 02             	add    esi,0x2
c0007b37:	83 d7 00             	adc    edi,0x0
c0007b3a:	83 ec 0c             	sub    esp,0xc
c0007b3d:	6a 01                	push   0x1
c0007b3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b47:	55                   	push   ebp
c0007b48:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b4c:	e8 7d 9e ff ff       	call   c00019ce <disk_write>
c0007b51:	83 c4 20             	add    esp,0x20
c0007b54:	85 c0                	test   eax,eax
c0007b56:	0f 85 68 06 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0007b5c:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b61:	74 0d                	je     c0007b70 <f_mkfs+0xa5d>
c0007b63:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b6b:	e9 43 fd ff ff       	jmp    c00078b3 <f_mkfs+0x7a0>
c0007b70:	b1 07                	mov    cl,0x7
c0007b72:	e9 e3 05 00 00       	jmp    c000815a <f_mkfs+0x1047>
c0007b77:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b7c:	0f 85 4f 02 00 00    	jne    c0007dd1 <f_mkfs+0xcbe>
c0007b82:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b87:	0f 86 22 02 00 00    	jbe    c0007daf <f_mkfs+0xc9c>
c0007b8d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b92:	0f 85 81 06 00 00    	jne    c0008219 <f_mkfs+0x1106>
c0007b98:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b9f:	83 f8 40             	cmp    eax,0x40
c0007ba2:	0f 87 51 06 00 00    	ja     c00081f9 <f_mkfs+0x10e6>
c0007ba8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bac:	85 ff                	test   edi,edi
c0007bae:	75 1c                	jne    c0007bcc <f_mkfs+0xab9>
c0007bb0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bb3:	ba 60 63 02 c0       	mov    edx,0xc0026360
c0007bb8:	c1 e9 0c             	shr    ecx,0xc
c0007bbb:	bf 01 00 00 00       	mov    edi,0x1
c0007bc0:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bc3:	66 85 c0             	test   ax,ax
c0007bc6:	0f 85 95 01 00 00    	jne    c0007d61 <f_mkfs+0xc4e>
c0007bcc:	31 d2                	xor    edx,edx
c0007bce:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bd1:	f7 f7                	div    edi
c0007bd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007bd8:	0f 86 95 01 00 00    	jbe    c0007d73 <f_mkfs+0xc60>
c0007bde:	83 c0 02             	add    eax,0x2
c0007be1:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007be6:	01 c0                	add    eax,eax
c0007be8:	05 ff 01 00 00       	add    eax,0x1ff
c0007bed:	be 01 00 00 00       	mov    esi,0x1
c0007bf2:	c1 e8 09             	shr    eax,0x9
c0007bf5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007bf9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bfd:	c1 e0 05             	shl    eax,0x5
c0007c00:	c1 e8 09             	shr    eax,0x9
c0007c03:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c07:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c0c:	31 d2                	xor    edx,edx
c0007c0e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c12:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c16:	89 f0                	mov    eax,esi
c0007c18:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c1c:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c20:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c24:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c28:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c2c:	31 d2                	xor    edx,edx
c0007c2e:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c33:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c37:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c3b:	31 db                	xor    ebx,ebx
c0007c3d:	01 c8                	add    eax,ecx
c0007c3f:	11 da                	adc    edx,ebx
c0007c41:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c45:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c49:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c4d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c51:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c55:	f7 da                	neg    edx
c0007c57:	21 d1                	and    ecx,edx
c0007c59:	29 d9                	sub    ecx,ebx
c0007c5b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c60:	0f 85 20 01 00 00    	jne    c0007d86 <f_mkfs+0xc73>
c0007c66:	31 db                	xor    ebx,ebx
c0007c68:	01 ce                	add    esi,ecx
c0007c6a:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c6e:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c72:	31 d2                	xor    edx,edx
c0007c74:	89 f8                	mov    eax,edi
c0007c76:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c7a:	c1 e0 04             	shl    eax,0x4
c0007c7d:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c81:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c85:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c89:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c8d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c90:	19 d3                	sbb    ebx,edx
c0007c92:	0f 82 40 01 00 00    	jb     c0007dd8 <f_mkfs+0xcc5>
c0007c98:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c9b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c9f:	89 c8                	mov    eax,ecx
c0007ca1:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007ca6:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007caa:	29 f0                	sub    eax,esi
c0007cac:	29 d0                	sub    eax,edx
c0007cae:	31 d2                	xor    edx,edx
c0007cb0:	f7 f7                	div    edi
c0007cb2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cb7:	89 c3                	mov    ebx,eax
c0007cb9:	0f 85 b8 fe ff ff    	jne    c0007b77 <f_mkfs+0xa64>
c0007cbf:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cc4:	0f 87 1d 01 00 00    	ja     c0007de7 <f_mkfs+0xcd4>
c0007cca:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ccf:	0f 85 03 01 00 00    	jne    c0007dd8 <f_mkfs+0xcc5>
c0007cd5:	83 ff 01             	cmp    edi,0x1
c0007cd8:	0f 86 fa 00 00 00    	jbe    c0007dd8 <f_mkfs+0xcc5>
c0007cde:	d1 ef                	shr    edi,1
c0007ce0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007ce4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007ce8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ceb:	85 db                	test   ebx,ebx
c0007ced:	75 2d                	jne    c0007d1c <f_mkfs+0xc09>
c0007cef:	89 cb                	mov    ebx,ecx
c0007cf1:	ba 70 63 02 c0       	mov    edx,0xc0026370
c0007cf6:	c1 eb 11             	shr    ebx,0x11
c0007cf9:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d01:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d04:	66 85 c0             	test   ax,ax
c0007d07:	74 11                	je     c0007d1a <f_mkfs+0xc07>
c0007d09:	83 c2 02             	add    edx,0x2
c0007d0c:	39 d8                	cmp    eax,ebx
c0007d0e:	77 0a                	ja     c0007d1a <f_mkfs+0xc07>
c0007d10:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d14:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d18:	eb e7                	jmp    c0007d01 <f_mkfs+0xbee>
c0007d1a:	31 db                	xor    ebx,ebx
c0007d1c:	31 d2                	xor    edx,edx
c0007d1e:	89 c8                	mov    eax,ecx
c0007d20:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d24:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d2b:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d30:	c1 ea 09             	shr    edx,0x9
c0007d33:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d38:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d3c:	0f 87 96 00 00 00    	ja     c0007dd8 <f_mkfs+0xcc5>
c0007d42:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d46:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d4e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d52:	be 20 00 00 00       	mov    esi,0x20
c0007d57:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d5c:	e9 a6 fe ff ff       	jmp    c0007c07 <f_mkfs+0xaf4>
c0007d61:	83 c2 02             	add    edx,0x2
c0007d64:	39 c8                	cmp    eax,ecx
c0007d66:	0f 87 60 fe ff ff    	ja     c0007bcc <f_mkfs+0xab9>
c0007d6c:	01 ff                	add    edi,edi
c0007d6e:	e9 4d fe ff ff       	jmp    c0007bc0 <f_mkfs+0xaad>
c0007d73:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d76:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d7b:	40                   	inc    eax
c0007d7c:	d1 e8                	shr    eax,1
c0007d7e:	83 c0 03             	add    eax,0x3
c0007d81:	e9 62 fe ff ff       	jmp    c0007be8 <f_mkfs+0xad5>
c0007d86:	31 d2                	xor    edx,edx
c0007d88:	89 c8                	mov    eax,ecx
c0007d8a:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d8e:	85 d2                	test   edx,edx
c0007d90:	74 0c                	je     c0007d9e <f_mkfs+0xc8b>
c0007d92:	49                   	dec    ecx
c0007d93:	46                   	inc    esi
c0007d94:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d99:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d9e:	89 c8                	mov    eax,ecx
c0007da0:	31 d2                	xor    edx,edx
c0007da2:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007da6:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007daa:	e9 c3 fe ff ff       	jmp    c0007c72 <f_mkfs+0xb5f>
c0007daf:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007db4:	77 31                	ja     c0007de7 <f_mkfs+0xcd4>
c0007db6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dbb:	75 1b                	jne    c0007dd8 <f_mkfs+0xcc5>
c0007dbd:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc4:	3d 80 00 00 00       	cmp    eax,0x80
c0007dc9:	0f 86 d9 fd ff ff    	jbe    c0007ba8 <f_mkfs+0xa95>
c0007dcf:	eb 07                	jmp    c0007dd8 <f_mkfs+0xcc5>
c0007dd1:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dd6:	76 0a                	jbe    c0007de2 <f_mkfs+0xccf>
c0007dd8:	bb 0e 00 00 00       	mov    ebx,0xe
c0007ddd:	e9 ff 03 00 00       	jmp    c00081e1 <f_mkfs+0x10ce>
c0007de2:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007de7:	31 d2                	xor    edx,edx
c0007de9:	b9 00 02 00 00       	mov    ecx,0x200
c0007dee:	89 e8                	mov    eax,ebp
c0007df0:	e8 a2 9c ff ff       	call   c0001a97 <mem_set>
c0007df5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007dfa:	ba 82 64 02 c0       	mov    edx,0xc0026482
c0007dff:	89 e8                	mov    eax,ebp
c0007e01:	e8 7c 9c ff ff       	call   c0001a82 <mem_cpy>
c0007e06:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e09:	ba 00 02 00 00       	mov    edx,0x200
c0007e0e:	e8 62 9c ff ff       	call   c0001a75 <st_word>
c0007e13:	89 f8                	mov    eax,edi
c0007e15:	0f b7 d6             	movzx  edx,si
c0007e18:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e1b:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e1e:	e8 52 9c ff ff       	call   c0001a75 <st_word>
c0007e23:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e27:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e2c:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e2f:	75 08                	jne    c0007e39 <f_mkfs+0xd26>
c0007e31:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e39:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e3c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e40:	e8 30 9c ff ff       	call   c0001a75 <st_word>
c0007e45:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e4a:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e4e:	39 d0                	cmp    eax,edx
c0007e50:	b8 00 00 00 00       	mov    eax,0x0
c0007e55:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e59:	72 0a                	jb     c0007e65 <f_mkfs+0xd52>
c0007e5b:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e5e:	e8 12 9c ff ff       	call   c0001a75 <st_word>
c0007e63:	eb 08                	jmp    c0007e6d <f_mkfs+0xd5a>
c0007e65:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e68:	e8 0c 9c ff ff       	call   c0001a79 <st_dword>
c0007e6d:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e70:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e75:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e79:	e8 f7 9b ff ff       	call   c0001a75 <st_word>
c0007e7e:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e81:	ba ff 00 00 00       	mov    edx,0xff
c0007e86:	e8 ea 9b ff ff       	call   c0001a75 <st_word>
c0007e8b:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e92:	e8 e2 9b ff ff       	call   c0001a79 <st_dword>
c0007e97:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e9c:	75 57                	jne    c0007ef5 <f_mkfs+0xde2>
c0007e9e:	8d 45 43             	lea    eax,[ebp+0x43]
c0007ea1:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ea6:	e8 ce 9b ff ff       	call   c0001a79 <st_dword>
c0007eab:	8d 45 24             	lea    eax,[ebp+0x24]
c0007eae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007eb2:	e8 c2 9b ff ff       	call   c0001a79 <st_dword>
c0007eb7:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007eba:	ba 02 00 00 00       	mov    edx,0x2
c0007ebf:	e8 b5 9b ff ff       	call   c0001a79 <st_dword>
c0007ec4:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ec7:	ba 01 00 00 00       	mov    edx,0x1
c0007ecc:	e8 a4 9b ff ff       	call   c0001a75 <st_word>
c0007ed1:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ed4:	ba 06 00 00 00       	mov    edx,0x6
c0007ed9:	e8 97 9b ff ff       	call   c0001a75 <st_word>
c0007ede:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ee2:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007ee6:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ee9:	b9 13 00 00 00       	mov    ecx,0x13
c0007eee:	ba 8e 64 02 c0       	mov    edx,0xc002648e
c0007ef3:	eb 2f                	jmp    c0007f24 <f_mkfs+0xe11>
c0007ef5:	8d 45 27             	lea    eax,[ebp+0x27]
c0007ef8:	ba 00 00 21 50       	mov    edx,0x50210000
c0007efd:	e8 77 9b ff ff       	call   c0001a79 <st_dword>
c0007f02:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f07:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f0a:	e8 66 9b ff ff       	call   c0001a75 <st_word>
c0007f0f:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f13:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f17:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f1a:	b9 13 00 00 00       	mov    ecx,0x13
c0007f1f:	ba a2 64 02 c0       	mov    edx,0xc00264a2
c0007f24:	e8 59 9b ff ff       	call   c0001a82 <mem_cpy>
c0007f29:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f2f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f34:	89 f0                	mov    eax,esi
c0007f36:	e8 3a 9b ff ff       	call   c0001a75 <st_word>
c0007f3b:	83 ec 0c             	sub    esp,0xc
c0007f3e:	6a 01                	push   0x1
c0007f40:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f48:	55                   	push   ebp
c0007f49:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f4d:	e8 7c 9a ff ff       	call   c00019ce <disk_write>
c0007f52:	83 c4 20             	add    esp,0x20
c0007f55:	85 c0                	test   eax,eax
c0007f57:	0f 85 67 02 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0007f5d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f62:	0f 85 b7 00 00 00    	jne    c000801f <f_mkfs+0xf0c>
c0007f68:	83 ec 0c             	sub    esp,0xc
c0007f6b:	6a 01                	push   0x1
c0007f6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f71:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f75:	83 c0 06             	add    eax,0x6
c0007f78:	83 d2 00             	adc    edx,0x0
c0007f7b:	52                   	push   edx
c0007f7c:	50                   	push   eax
c0007f7d:	55                   	push   ebp
c0007f7e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f82:	e8 47 9a ff ff       	call   c00019ce <disk_write>
c0007f87:	83 c4 20             	add    esp,0x20
c0007f8a:	b9 00 02 00 00       	mov    ecx,0x200
c0007f8f:	31 d2                	xor    edx,edx
c0007f91:	89 e8                	mov    eax,ebp
c0007f93:	e8 ff 9a ff ff       	call   c0001a97 <mem_set>
c0007f98:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f9d:	89 e8                	mov    eax,ebp
c0007f9f:	e8 d5 9a ff ff       	call   c0001a79 <st_dword>
c0007fa4:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007faa:	ba 72 72 41 61       	mov    edx,0x61417272
c0007faf:	e8 c5 9a ff ff       	call   c0001a79 <st_dword>
c0007fb4:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fb7:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fbd:	e8 b7 9a ff ff       	call   c0001a79 <st_dword>
c0007fc2:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fc8:	ba 02 00 00 00       	mov    edx,0x2
c0007fcd:	e8 a7 9a ff ff       	call   c0001a79 <st_dword>
c0007fd2:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fd7:	89 f0                	mov    eax,esi
c0007fd9:	e8 97 9a ff ff       	call   c0001a75 <st_word>
c0007fde:	83 ec 0c             	sub    esp,0xc
c0007fe1:	6a 01                	push   0x1
c0007fe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fe7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007feb:	83 c0 07             	add    eax,0x7
c0007fee:	83 d2 00             	adc    edx,0x0
c0007ff1:	52                   	push   edx
c0007ff2:	50                   	push   eax
c0007ff3:	55                   	push   ebp
c0007ff4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ff8:	e8 d1 99 ff ff       	call   c00019ce <disk_write>
c0007ffd:	83 c4 14             	add    esp,0x14
c0008000:	6a 01                	push   0x1
c0008002:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008006:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000800a:	83 c0 01             	add    eax,0x1
c000800d:	83 d2 00             	adc    edx,0x0
c0008010:	52                   	push   edx
c0008011:	50                   	push   eax
c0008012:	55                   	push   ebp
c0008013:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008017:	e8 b2 99 ff ff       	call   c00019ce <disk_write>
c000801c:	83 c4 20             	add    esp,0x20
c000801f:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008026:	31 d2                	xor    edx,edx
c0008028:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000802e:	31 db                	xor    ebx,ebx
c0008030:	89 e8                	mov    eax,ebp
c0008032:	e8 60 9a ff ff       	call   c0001a97 <mem_set>
c0008037:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000803c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008043:	0f 94 c3             	sete   bl
c0008046:	4b                   	dec    ebx
c0008047:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000804d:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008053:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008058:	75 21                	jne    c000807b <f_mkfs+0xf68>
c000805a:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000805f:	89 e8                	mov    eax,ebp
c0008061:	e8 13 9a ff ff       	call   c0001a79 <st_dword>
c0008066:	8d 45 04             	lea    eax,[ebp+0x4]
c0008069:	83 ca ff             	or     edx,0xffffffff
c000806c:	e8 08 9a ff ff       	call   c0001a79 <st_dword>
c0008071:	8d 45 08             	lea    eax,[ebp+0x8]
c0008074:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008079:	eb 04                	jmp    c000807f <f_mkfs+0xf6c>
c000807b:	89 da                	mov    edx,ebx
c000807d:	89 e8                	mov    eax,ebp
c000807f:	e8 f5 99 ff ff       	call   c0001a79 <st_dword>
c0008084:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008088:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000808c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008090:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008094:	39 ce                	cmp    esi,ecx
c0008096:	76 02                	jbe    c000809a <f_mkfs+0xf87>
c0008098:	89 ce                	mov    esi,ecx
c000809a:	83 ec 0c             	sub    esp,0xc
c000809d:	56                   	push   esi
c000809e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080a2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080a6:	55                   	push   ebp
c00080a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080ab:	e8 1e 99 ff ff       	call   c00019ce <disk_write>
c00080b0:	83 c4 20             	add    esp,0x20
c00080b3:	85 c0                	test   eax,eax
c00080b5:	0f 85 09 01 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c00080bb:	31 d2                	xor    edx,edx
c00080bd:	b9 00 02 00 00       	mov    ecx,0x200
c00080c2:	89 e8                	mov    eax,ebp
c00080c4:	e8 ce 99 ff ff       	call   c0001a97 <mem_set>
c00080c9:	31 d2                	xor    edx,edx
c00080cb:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080cf:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080d3:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080d7:	75 b3                	jne    c000808c <f_mkfs+0xf79>
c00080d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080dc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080e3:	40                   	inc    eax
c00080e4:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c00080e8:	0f 87 65 ff ff ff    	ja     c0008053 <f_mkfs+0xf40>
c00080ee:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080f3:	74 04                	je     c00080f9 <f_mkfs+0xfe6>
c00080f5:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00080f9:	89 fb                	mov    ebx,edi
c00080fb:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c00080ff:	76 04                	jbe    c0008105 <f_mkfs+0xff2>
c0008101:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008105:	83 ec 0c             	sub    esp,0xc
c0008108:	53                   	push   ebx
c0008109:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000810d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008111:	55                   	push   ebp
c0008112:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008116:	e8 b3 98 ff ff       	call   c00019ce <disk_write>
c000811b:	83 c4 20             	add    esp,0x20
c000811e:	85 c0                	test   eax,eax
c0008120:	0f 85 9e 00 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0008126:	31 d2                	xor    edx,edx
c0008128:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000812c:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008130:	29 df                	sub    edi,ebx
c0008132:	75 c5                	jne    c00080f9 <f_mkfs+0xfe6>
c0008134:	b1 0c                	mov    cl,0xc
c0008136:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000813b:	74 1d                	je     c000815a <f_mkfs+0x1047>
c000813d:	b8 ff ff 00 00       	mov    eax,0xffff
c0008142:	b1 06                	mov    cl,0x6
c0008144:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008148:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000814c:	72 0c                	jb     c000815a <f_mkfs+0x1047>
c000814e:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008153:	0f 94 c1             	sete   cl
c0008156:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000815a:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000815f:	75 4c                	jne    c00081ad <f_mkfs+0x109a>
c0008161:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008165:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008169:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008170:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008177:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008182:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000818d:	0f b6 c9             	movzx  ecx,cl
c0008190:	83 ec 0c             	sub    esp,0xc
c0008193:	55                   	push   ebp
c0008194:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c000819b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000819f:	e8 2f c2 ff ff       	call   c00043d3 <create_partition>
c00081a4:	83 c4 10             	add    esp,0x10
c00081a7:	89 c3                	mov    ebx,eax
c00081a9:	85 c0                	test   eax,eax
c00081ab:	75 34                	jne    c00081e1 <f_mkfs+0x10ce>
c00081ad:	31 db                	xor    ebx,ebx
c00081af:	50                   	push   eax
c00081b0:	6a 00                	push   0x0
c00081b2:	6a 00                	push   0x0
c00081b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081b8:	e8 27 98 ff ff       	call   c00019e4 <disk_ioctl>
c00081bd:	83 c4 10             	add    esp,0x10
c00081c0:	85 c0                	test   eax,eax
c00081c2:	74 1d                	je     c00081e1 <f_mkfs+0x10ce>
c00081c4:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081cc:	75 0c                	jne    c00081da <f_mkfs+0x10c7>
c00081ce:	83 ec 0c             	sub    esp,0xc
c00081d1:	55                   	push   ebp
c00081d2:	e8 75 00 00 00       	call   c000824c <ff_memfree>
c00081d7:	83 c4 10             	add    esp,0x10
c00081da:	bb 01 00 00 00       	mov    ebx,0x1
c00081df:	eb 48                	jmp    c0008229 <f_mkfs+0x1116>
c00081e1:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081e9:	75 3e                	jne    c0008229 <f_mkfs+0x1116>
c00081eb:	83 ec 0c             	sub    esp,0xc
c00081ee:	55                   	push   ebp
c00081ef:	e8 58 00 00 00       	call   c000824c <ff_memfree>
c00081f4:	83 c4 10             	add    esp,0x10
c00081f7:	eb 30                	jmp    c0008229 <f_mkfs+0x1116>
c00081f9:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081fe:	0f 85 eb fa ff ff    	jne    c0007cef <f_mkfs+0xbdc>
c0008204:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008208:	81 ff 80 00 00 00    	cmp    edi,0x80
c000820e:	0f 86 b8 f9 ff ff    	jbe    c0007bcc <f_mkfs+0xab9>
c0008214:	e9 bf fb ff ff       	jmp    c0007dd8 <f_mkfs+0xcc5>
c0008219:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000821e:	0f 85 c0 fa ff ff    	jne    c0007ce4 <f_mkfs+0xbd1>
c0008224:	e9 af fb ff ff       	jmp    c0007dd8 <f_mkfs+0xcc5>
c0008229:	81 c4 9c 00 00 00    	add    esp,0x9c
c000822f:	89 d8                	mov    eax,ebx
c0008231:	5b                   	pop    ebx
c0008232:	5e                   	pop    esi
c0008233:	5f                   	pop    edi
c0008234:	5d                   	pop    ebp
c0008235:	c3                   	ret    

c0008236 <ff_memalloc>:
c0008236:	83 ec 0c             	sub    esp,0xc
c0008239:	83 ec 0c             	sub    esp,0xc
c000823c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008240:	e8 7d 72 00 00       	call   c000f4c2 <malloc>
c0008245:	83 c4 10             	add    esp,0x10
c0008248:	83 c4 0c             	add    esp,0xc
c000824b:	c3                   	ret    

c000824c <ff_memfree>:
c000824c:	83 ec 0c             	sub    esp,0xc
c000824f:	83 ec 0c             	sub    esp,0xc
c0008252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008256:	e8 77 72 00 00       	call   c000f4d2 <free>
c000825b:	83 c4 10             	add    esp,0x10
c000825e:	90                   	nop
c000825f:	83 c4 0c             	add    esp,0xc
c0008262:	c3                   	ret    

c0008263 <ff_uni2oem>:
c0008263:	83 ec 14             	sub    esp,0x14
c0008266:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000826a:	66 89 04 24          	mov    WORD PTR [esp],ax
c000826e:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008275:	c7 44 24 0c c0 67 02 c0 	mov    DWORD PTR [esp+0xc],0xc00267c0
c000827d:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008282:	77 0b                	ja     c000828f <ff_uni2oem+0x2c>
c0008284:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008288:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000828d:	eb 5b                	jmp    c00082ea <ff_uni2oem+0x87>
c000828f:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008297:	77 51                	ja     c00082ea <ff_uni2oem+0x87>
c0008299:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000829f:	75 49                	jne    c00082ea <ff_uni2oem+0x87>
c00082a1:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082a8:	eb 0b                	jmp    c00082b5 <ff_uni2oem+0x52>
c00082aa:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082af:	40                   	inc    eax
c00082b0:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082b5:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082bb:	77 1b                	ja     c00082d8 <ff_uni2oem+0x75>
c00082bd:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00082c2:	01 c0                	add    eax,eax
c00082c4:	89 c2                	mov    edx,eax
c00082c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ca:	01 d0                	add    eax,edx
c00082cc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082cf:	0f b7 c0             	movzx  eax,ax
c00082d2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082d6:	75 d2                	jne    c00082aa <ff_uni2oem+0x47>
c00082d8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082dd:	83 e8 80             	sub    eax,0xffffff80
c00082e0:	25 ff 00 00 00       	and    eax,0xff
c00082e5:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082ea:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082ef:	83 c4 14             	add    esp,0x14
c00082f2:	c3                   	ret    

c00082f3 <ff_oem2uni>:
c00082f3:	83 ec 18             	sub    esp,0x18
c00082f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00082fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082fe:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008303:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008307:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000830e:	c7 44 24 10 c0 67 02 c0 	mov    DWORD PTR [esp+0x10],0xc00267c0
c0008316:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000831c:	77 0b                	ja     c0008329 <ff_oem2uni+0x36>
c000831e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008322:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008327:	eb 2d                	jmp    c0008356 <ff_oem2uni+0x63>
c0008329:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000832f:	75 25                	jne    c0008356 <ff_oem2uni+0x63>
c0008331:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008338:	77 1c                	ja     c0008356 <ff_oem2uni+0x63>
c000833a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000833f:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008344:	01 c0                	add    eax,eax
c0008346:	89 c2                	mov    edx,eax
c0008348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000834c:	01 d0                	add    eax,edx
c000834e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008351:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008356:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000835b:	83 c4 18             	add    esp,0x18
c000835e:	c3                   	ret    

c000835f <ff_wtoupper>:
c000835f:	83 ec 10             	sub    esp,0x10
c0008362:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000836a:	0f 87 3e 01 00 00    	ja     c00084ae <ff_wtoupper+0x14f>
c0008370:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008374:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008379:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008380:	77 07                	ja     c0008389 <ff_wtoupper+0x2a>
c0008382:	b8 c0 65 02 c0       	mov    eax,0xc00265c0
c0008387:	eb 05                	jmp    c000838e <ff_wtoupper+0x2f>
c0008389:	b8 00 65 02 c0       	mov    eax,0xc0026500
c000838e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008392:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008396:	8d 50 02             	lea    edx,[eax+0x2]
c0008399:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000839d:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083a0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083a5:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083ab:	0f 84 f4 00 00 00    	je     c00084a5 <ff_wtoupper+0x146>
c00083b1:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083b6:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083bb:	0f 82 e4 00 00 00    	jb     c00084a5 <ff_wtoupper+0x146>
c00083c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083c5:	8d 50 02             	lea    edx,[eax+0x2]
c00083c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083cc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083cf:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083d4:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083d9:	66 c1 e8 08          	shr    ax,0x8
c00083dd:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083e2:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083e9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00083ee:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c00083f3:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c00083f8:	01 ca                	add    edx,ecx
c00083fa:	39 d0                	cmp    eax,edx
c00083fc:	0f 8d 86 00 00 00    	jge    c0008488 <ff_wtoupper+0x129>
c0008402:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008407:	83 f8 08             	cmp    eax,0x8
c000840a:	0f 87 94 00 00 00    	ja     c00084a4 <ff_wtoupper+0x145>
c0008410:	8b 04 85 c0 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9b40]
c0008417:	ff e0                	jmp    eax
c0008419:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000841e:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008423:	29 c2                	sub    edx,eax
c0008425:	89 d0                	mov    eax,edx
c0008427:	01 c0                	add    eax,eax
c0008429:	89 c2                	mov    edx,eax
c000842b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000842f:	01 d0                	add    eax,edx
c0008431:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008434:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008439:	eb 4b                	jmp    c0008486 <ff_wtoupper+0x127>
c000843b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008440:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008444:	83 e0 01             	and    eax,0x1
c0008447:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000844c:	eb 38                	jmp    c0008486 <ff_wtoupper+0x127>
c000844e:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008454:	eb 30                	jmp    c0008486 <ff_wtoupper+0x127>
c0008456:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000845c:	eb 28                	jmp    c0008486 <ff_wtoupper+0x127>
c000845e:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008464:	eb 20                	jmp    c0008486 <ff_wtoupper+0x127>
c0008466:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000846c:	eb 18                	jmp    c0008486 <ff_wtoupper+0x127>
c000846e:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008474:	eb 10                	jmp    c0008486 <ff_wtoupper+0x127>
c0008476:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000847c:	eb 08                	jmp    c0008486 <ff_wtoupper+0x127>
c000847e:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008485:	90                   	nop
c0008486:	eb 1c                	jmp    c00084a4 <ff_wtoupper+0x145>
c0008488:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000848e:	0f 85 fe fe ff ff    	jne    c0008392 <ff_wtoupper+0x33>
c0008494:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008499:	01 c0                	add    eax,eax
c000849b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000849f:	e9 ee fe ff ff       	jmp    c0008392 <ff_wtoupper+0x33>
c00084a4:	90                   	nop
c00084a5:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084b2:	83 c4 10             	add    esp,0x10
c00084b5:	c3                   	ret    

c00084b6 <psrc_set_converter>:
c00084b6:	56                   	push   esi
c00084b7:	89 d6                	mov    esi,edx
c00084b9:	53                   	push   ebx
c00084ba:	89 c3                	mov    ebx,eax
c00084bc:	83 ec 0c             	sub    esp,0xc
c00084bf:	52                   	push   edx
c00084c0:	50                   	push   eax
c00084c1:	e8 6f 55 00 00       	call   c000da35 <sinc_set_converter>
c00084c6:	83 c4 10             	add    esp,0x10
c00084c9:	85 c0                	test   eax,eax
c00084cb:	74 25                	je     c00084f2 <psrc_set_converter+0x3c>
c00084cd:	50                   	push   eax
c00084ce:	50                   	push   eax
c00084cf:	56                   	push   esi
c00084d0:	53                   	push   ebx
c00084d1:	e8 17 5d 00 00       	call   c000e1ed <zoh_set_converter>
c00084d6:	83 c4 10             	add    esp,0x10
c00084d9:	85 c0                	test   eax,eax
c00084db:	74 15                	je     c00084f2 <psrc_set_converter+0x3c>
c00084dd:	51                   	push   ecx
c00084de:	51                   	push   ecx
c00084df:	56                   	push   esi
c00084e0:	53                   	push   ebx
c00084e1:	e8 0f 11 00 00       	call   c00095f5 <linear_set_converter>
c00084e6:	83 c4 10             	add    esp,0x10
c00084e9:	ba 0a 00 00 00       	mov    edx,0xa
c00084ee:	85 c0                	test   eax,eax
c00084f0:	75 02                	jne    c00084f4 <psrc_set_converter+0x3e>
c00084f2:	31 d2                	xor    edx,edx
c00084f4:	89 d0                	mov    eax,edx
c00084f6:	5a                   	pop    edx
c00084f7:	5b                   	pop    ebx
c00084f8:	5e                   	pop    esi
c00084f9:	c3                   	ret    

c00084fa <src_delete>:
c00084fa:	53                   	push   ebx
c00084fb:	83 ec 08             	sub    esp,0x8
c00084fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008502:	85 db                	test   ebx,ebx
c0008504:	74 29                	je     c000852f <src_delete+0x35>
c0008506:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008509:	85 c0                	test   eax,eax
c000850b:	74 0c                	je     c0008519 <src_delete+0x1f>
c000850d:	83 ec 0c             	sub    esp,0xc
c0008510:	50                   	push   eax
c0008511:	e8 bc 6f 00 00       	call   c000f4d2 <free>
c0008516:	83 c4 10             	add    esp,0x10
c0008519:	50                   	push   eax
c000851a:	6a 3c                	push   0x3c
c000851c:	6a 00                	push   0x0
c000851e:	53                   	push   ebx
c000851f:	e8 59 81 ff ff       	call   c000067d <memset>
c0008524:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008527:	e8 a6 6f 00 00       	call   c000f4d2 <free>
c000852c:	83 c4 10             	add    esp,0x10
c000852f:	31 c0                	xor    eax,eax
c0008531:	83 c4 08             	add    esp,0x8
c0008534:	5b                   	pop    ebx
c0008535:	c3                   	ret    

c0008536 <src_process>:
c0008536:	55                   	push   ebp
c0008537:	57                   	push   edi
c0008538:	56                   	push   esi
c0008539:	53                   	push   ebx
c000853a:	83 ec 1c             	sub    esp,0x1c
c000853d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008541:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008545:	85 ed                	test   ebp,ebp
c0008547:	0f 84 6f 01 00 00    	je     c00086bc <src_process+0x186>
c000854d:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008551:	0f 84 6c 01 00 00    	je     c00086c3 <src_process+0x18d>
c0008557:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000855b:	0f 84 62 01 00 00    	je     c00086c3 <src_process+0x18d>
c0008561:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c0008568:	0f 85 5c 01 00 00    	jne    c00086ca <src_process+0x194>
c000856e:	85 db                	test   ebx,ebx
c0008570:	0f 84 5b 01 00 00    	je     c00086d1 <src_process+0x19b>
c0008576:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008578:	85 f6                	test   esi,esi
c000857a:	0f 84 58 01 00 00    	je     c00086d8 <src_process+0x1a2>
c0008580:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008583:	85 ff                	test   edi,edi
c0008585:	0f 84 4d 01 00 00    	je     c00086d8 <src_process+0x1a2>
c000858b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000858e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0008591:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008595:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008599:	68 00 00 70 3f       	push   0x3f700000
c000859e:	6a 00                	push   0x0
c00085a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085a8:	e8 d2 cf 01 00       	call   c002557f <__ltdf2>
c00085ad:	83 c4 10             	add    esp,0x10
c00085b0:	85 c0                	test   eax,eax
c00085b2:	0f 88 27 01 00 00    	js     c00086df <src_process+0x1a9>
c00085b8:	68 00 00 70 40       	push   0x40700000
c00085bd:	6a 00                	push   0x0
c00085bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085c7:	e8 95 cf 01 00       	call   c0025561 <__gtdf2>
c00085cc:	83 c4 10             	add    esp,0x10
c00085cf:	85 c0                	test   eax,eax
c00085d1:	0f 8f 08 01 00 00    	jg     c00086df <src_process+0x1a9>
c00085d7:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00085db:	79 07                	jns    c00085e4 <src_process+0xae>
c00085dd:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00085e4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00085e7:	85 c0                	test   eax,eax
c00085e9:	79 50                	jns    c000863b <src_process+0x105>
c00085eb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00085f2:	39 fe                	cmp    esi,edi
c00085f4:	72 37                	jb     c000862d <src_process+0xf7>
c00085f6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00085fd:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008604:	68 00 00 70 3f       	push   0x3f700000
c0008609:	6a 00                	push   0x0
c000860b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000860e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008611:	e8 69 cf 01 00       	call   c002557f <__ltdf2>
c0008616:	83 c4 10             	add    esp,0x10
c0008619:	85 c0                	test   eax,eax
c000861b:	79 37                	jns    c0008654 <src_process+0x11e>
c000861d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008621:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008625:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008628:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000862b:	eb 27                	jmp    c0008654 <src_process+0x11e>
c000862d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008630:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008634:	8d 04 86             	lea    eax,[esi+eax*4]
c0008637:	39 c7                	cmp    edi,eax
c0008639:	eb 0d                	jmp    c0008648 <src_process+0x112>
c000863b:	39 fe                	cmp    esi,edi
c000863d:	72 ee                	jb     c000862d <src_process+0xf7>
c000863f:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008643:	8d 04 87             	lea    eax,[edi+eax*4]
c0008646:	39 c6                	cmp    esi,eax
c0008648:	73 ac                	jae    c00085f6 <src_process+0xc0>
c000864a:	b8 10 00 00 00       	mov    eax,0x10
c000864f:	e9 90 00 00 00       	jmp    c00086e4 <src_process+0x1ae>
c0008654:	83 ec 10             	sub    esp,0x10
c0008657:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000865a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000865d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008660:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008663:	e8 1c c6 01 00       	call   c0024c84 <__subdf3>
c0008668:	83 c4 18             	add    esp,0x18
c000866b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000866f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008673:	52                   	push   edx
c0008674:	50                   	push   eax
c0008675:	e8 96 d0 01 00       	call   c0025710 <fabs>
c000867a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000867e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008682:	83 c4 10             	add    esp,0x10
c0008685:	68 af 03 d2 3c       	push   0x3cd203af
c000868a:	68 16 56 e7 9e       	push   0x9ee75616
c000868f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008693:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008697:	e8 e3 ce 01 00       	call   c002557f <__ltdf2>
c000869c:	83 c4 10             	add    esp,0x10
c000869f:	85 c0                	test   eax,eax
c00086a1:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00086a5:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00086a9:	79 05                	jns    c00086b0 <src_process+0x17a>
c00086ab:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00086ae:	eb 03                	jmp    c00086b3 <src_process+0x17d>
c00086b0:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00086b3:	83 c4 1c             	add    esp,0x1c
c00086b6:	5b                   	pop    ebx
c00086b7:	5e                   	pop    esi
c00086b8:	5f                   	pop    edi
c00086b9:	5d                   	pop    ebp
c00086ba:	ff e0                	jmp    eax
c00086bc:	b8 02 00 00 00       	mov    eax,0x2
c00086c1:	eb 21                	jmp    c00086e4 <src_process+0x1ae>
c00086c3:	b8 07 00 00 00       	mov    eax,0x7
c00086c8:	eb 1a                	jmp    c00086e4 <src_process+0x1ae>
c00086ca:	b8 12 00 00 00       	mov    eax,0x12
c00086cf:	eb 13                	jmp    c00086e4 <src_process+0x1ae>
c00086d1:	b8 03 00 00 00       	mov    eax,0x3
c00086d6:	eb 0c                	jmp    c00086e4 <src_process+0x1ae>
c00086d8:	b8 04 00 00 00       	mov    eax,0x4
c00086dd:	eb 05                	jmp    c00086e4 <src_process+0x1ae>
c00086df:	b8 06 00 00 00       	mov    eax,0x6
c00086e4:	83 c4 1c             	add    esp,0x1c
c00086e7:	5b                   	pop    ebx
c00086e8:	5e                   	pop    esi
c00086e9:	5f                   	pop    edi
c00086ea:	5d                   	pop    ebp
c00086eb:	c3                   	ret    

c00086ec <src_callback_read>:
c00086ec:	55                   	push   ebp
c00086ed:	57                   	push   edi
c00086ee:	56                   	push   esi
c00086ef:	53                   	push   ebx
c00086f0:	83 ec 3c             	sub    esp,0x3c
c00086f3:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c00086f7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00086fb:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00086ff:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008703:	85 ed                	test   ebp,ebp
c0008705:	0f 8e 52 01 00 00    	jle    c000885d <src_callback_read+0x171>
c000870b:	85 db                	test   ebx,ebx
c000870d:	0f 84 4a 01 00 00    	je     c000885d <src_callback_read+0x171>
c0008713:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000871a:	74 0c                	je     c0008728 <src_callback_read+0x3c>
c000871c:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008723:	e9 35 01 00 00       	jmp    c000885d <src_callback_read+0x171>
c0008728:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000872c:	75 0c                	jne    c000873a <src_callback_read+0x4e>
c000872e:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008735:	e9 23 01 00 00       	jmp    c000885d <src_callback_read+0x171>
c000873a:	51                   	push   ecx
c000873b:	6a 24                	push   0x24
c000873d:	6a 00                	push   0x0
c000873f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008743:	50                   	push   eax
c0008744:	e8 34 7f ff ff       	call   c000067d <memset>
c0008749:	83 c4 10             	add    esp,0x10
c000874c:	68 00 00 70 3f       	push   0x3f700000
c0008751:	6a 00                	push   0x0
c0008753:	57                   	push   edi
c0008754:	56                   	push   esi
c0008755:	e8 25 ce 01 00       	call   c002557f <__ltdf2>
c000875a:	83 c4 10             	add    esp,0x10
c000875d:	85 c0                	test   eax,eax
c000875f:	78 3e                	js     c000879f <src_callback_read+0xb3>
c0008761:	68 00 00 70 40       	push   0x40700000
c0008766:	6a 00                	push   0x0
c0008768:	57                   	push   edi
c0008769:	56                   	push   esi
c000876a:	e8 f2 cd 01 00       	call   c0025561 <__gtdf2>
c000876f:	83 c4 10             	add    esp,0x10
c0008772:	85 c0                	test   eax,eax
c0008774:	7f 29                	jg     c000879f <src_callback_read+0xb3>
c0008776:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000877a:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000877e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008782:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008786:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008789:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000878d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008791:	31 f6                	xor    esi,esi
c0008793:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0008796:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000879a:	e9 97 00 00 00       	jmp    c0008836 <src_callback_read+0x14a>
c000879f:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087a6:	e9 b2 00 00 00       	jmp    c000885d <src_callback_read+0x171>
c00087ab:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b3:	52                   	push   edx
c00087b4:	52                   	push   edx
c00087b5:	8d 44 24 10          	lea    eax,[esp+0x10]
c00087b9:	50                   	push   eax
c00087ba:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087bd:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00087c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00087c4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00087c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00087cc:	83 c4 10             	add    esp,0x10
c00087cf:	85 c0                	test   eax,eax
c00087d1:	75 08                	jne    c00087db <src_callback_read+0xef>
c00087d3:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00087db:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087e2:	50                   	push   eax
c00087e3:	50                   	push   eax
c00087e4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00087e8:	50                   	push   eax
c00087e9:	53                   	push   ebx
c00087ea:	e8 47 fd ff ff       	call   c0008536 <src_process>
c00087ef:	83 c4 10             	add    esp,0x10
c00087f2:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00087f9:	85 c0                	test   eax,eax
c00087fb:	75 49                	jne    c0008846 <src_callback_read+0x15a>
c00087fd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008801:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008804:	89 f9                	mov    ecx,edi
c0008806:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c000880a:	0f af ca             	imul   ecx,edx
c000880d:	c1 e1 02             	shl    ecx,0x2
c0008810:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008814:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008818:	0f af d1             	imul   edx,ecx
c000881b:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c000881f:	c1 e2 02             	shl    edx,0x2
c0008822:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008826:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008829:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000882e:	74 12                	je     c0008842 <src_callback_read+0x156>
c0008830:	39 d5                	cmp    ebp,edx
c0008832:	7e 14                	jle    c0008848 <src_callback_read+0x15c>
c0008834:	89 d6                	mov    esi,edx
c0008836:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000883b:	75 9e                	jne    c00087db <src_callback_read+0xef>
c000883d:	e9 69 ff ff ff       	jmp    c00087ab <src_callback_read+0xbf>
c0008842:	85 c9                	test   ecx,ecx
c0008844:	75 ea                	jne    c0008830 <src_callback_read+0x144>
c0008846:	89 f2                	mov    edx,esi
c0008848:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000884c:	85 c0                	test   eax,eax
c000884e:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008851:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008855:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008858:	74 05                	je     c000885f <src_callback_read+0x173>
c000885a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000885d:	31 d2                	xor    edx,edx
c000885f:	83 c4 3c             	add    esp,0x3c
c0008862:	89 d0                	mov    eax,edx
c0008864:	5b                   	pop    ebx
c0008865:	5e                   	pop    esi
c0008866:	5f                   	pop    edi
c0008867:	5d                   	pop    ebp
c0008868:	c3                   	ret    

c0008869 <src_set_ratio>:
c0008869:	57                   	push   edi
c000886a:	ba 02 00 00 00       	mov    edx,0x2
c000886f:	56                   	push   esi
c0008870:	53                   	push   ebx
c0008871:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008875:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008879:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000887d:	85 db                	test   ebx,ebx
c000887f:	74 4c                	je     c00088cd <src_set_ratio+0x64>
c0008881:	ba 07 00 00 00       	mov    edx,0x7
c0008886:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c000888a:	74 41                	je     c00088cd <src_set_ratio+0x64>
c000888c:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008890:	74 3b                	je     c00088cd <src_set_ratio+0x64>
c0008892:	68 00 00 70 3f       	push   0x3f700000
c0008897:	6a 00                	push   0x0
c0008899:	57                   	push   edi
c000889a:	56                   	push   esi
c000889b:	e8 df cc 01 00       	call   c002557f <__ltdf2>
c00088a0:	83 c4 10             	add    esp,0x10
c00088a3:	ba 06 00 00 00       	mov    edx,0x6
c00088a8:	85 c0                	test   eax,eax
c00088aa:	78 21                	js     c00088cd <src_set_ratio+0x64>
c00088ac:	68 00 00 70 40       	push   0x40700000
c00088b1:	6a 00                	push   0x0
c00088b3:	57                   	push   edi
c00088b4:	56                   	push   esi
c00088b5:	e8 a7 cc 01 00       	call   c0025561 <__gtdf2>
c00088ba:	83 c4 10             	add    esp,0x10
c00088bd:	ba 06 00 00 00       	mov    edx,0x6
c00088c2:	85 c0                	test   eax,eax
c00088c4:	7f 07                	jg     c00088cd <src_set_ratio+0x64>
c00088c6:	89 33                	mov    DWORD PTR [ebx],esi
c00088c8:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00088cb:	31 d2                	xor    edx,edx
c00088cd:	5b                   	pop    ebx
c00088ce:	89 d0                	mov    eax,edx
c00088d0:	5e                   	pop    esi
c00088d1:	5f                   	pop    edi
c00088d2:	c3                   	ret    

c00088d3 <src_get_channels>:
c00088d3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088d7:	b8 02 00 00 00       	mov    eax,0x2
c00088dc:	85 d2                	test   edx,edx
c00088de:	74 14                	je     c00088f4 <src_get_channels+0x21>
c00088e0:	b8 07 00 00 00       	mov    eax,0x7
c00088e5:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00088e9:	74 09                	je     c00088f4 <src_get_channels+0x21>
c00088eb:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088ef:	74 03                	je     c00088f4 <src_get_channels+0x21>
c00088f1:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00088f4:	c3                   	ret    

c00088f5 <src_reset>:
c00088f5:	53                   	push   ebx
c00088f6:	b8 02 00 00 00       	mov    eax,0x2
c00088fb:	83 ec 08             	sub    esp,0x8
c00088fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008902:	85 db                	test   ebx,ebx
c0008904:	74 36                	je     c000893c <src_reset+0x47>
c0008906:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008909:	85 c0                	test   eax,eax
c000890b:	74 09                	je     c0008916 <src_reset+0x21>
c000890d:	83 ec 0c             	sub    esp,0xc
c0008910:	53                   	push   ebx
c0008911:	ff d0                	call   eax
c0008913:	83 c4 10             	add    esp,0x10
c0008916:	31 c0                	xor    eax,eax
c0008918:	31 d2                	xor    edx,edx
c000891a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000891d:	89 03                	mov    DWORD PTR [ebx],eax
c000891f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008922:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008925:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000892c:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008933:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000893a:	31 c0                	xor    eax,eax
c000893c:	83 c4 08             	add    esp,0x8
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    

c0008941 <src_new>:
c0008941:	57                   	push   edi
c0008942:	56                   	push   esi
c0008943:	53                   	push   ebx
c0008944:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008948:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000894c:	85 f6                	test   esi,esi
c000894e:	74 73                	je     c00089c3 <src_new+0x82>
c0008950:	85 ff                	test   edi,edi
c0008952:	7f 08                	jg     c000895c <src_new+0x1b>
c0008954:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c000895a:	eb 1e                	jmp    c000897a <src_new+0x39>
c000895c:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008962:	50                   	push   eax
c0008963:	50                   	push   eax
c0008964:	6a 3c                	push   0x3c
c0008966:	6a 01                	push   0x1
c0008968:	e8 85 6b 00 00       	call   c000f4f2 <calloc>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	89 c3                	mov    ebx,eax
c0008972:	85 c0                	test   eax,eax
c0008974:	75 10                	jne    c0008986 <src_new+0x45>
c0008976:	85 f6                	test   esi,esi
c0008978:	75 04                	jne    c000897e <src_new+0x3d>
c000897a:	31 db                	xor    ebx,ebx
c000897c:	eb 4b                	jmp    c00089c9 <src_new+0x88>
c000897e:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008984:	eb 43                	jmp    c00089c9 <src_new+0x88>
c0008986:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008989:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008990:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008994:	e8 1d fb ff ff       	call   c00084b6 <psrc_set_converter>
c0008999:	85 c0                	test   eax,eax
c000899b:	74 18                	je     c00089b5 <src_new+0x74>
c000899d:	85 f6                	test   esi,esi
c000899f:	74 06                	je     c00089a7 <src_new+0x66>
c00089a1:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089a7:	83 ec 0c             	sub    esp,0xc
c00089aa:	53                   	push   ebx
c00089ab:	31 db                	xor    ebx,ebx
c00089ad:	e8 20 6b 00 00       	call   c000f4d2 <free>
c00089b2:	83 c4 10             	add    esp,0x10
c00089b5:	83 ec 0c             	sub    esp,0xc
c00089b8:	53                   	push   ebx
c00089b9:	e8 37 ff ff ff       	call   c00088f5 <src_reset>
c00089be:	83 c4 10             	add    esp,0x10
c00089c1:	eb 06                	jmp    c00089c9 <src_new+0x88>
c00089c3:	85 ff                	test   edi,edi
c00089c5:	7f 9b                	jg     c0008962 <src_new+0x21>
c00089c7:	eb b1                	jmp    c000897a <src_new+0x39>
c00089c9:	89 d8                	mov    eax,ebx
c00089cb:	5b                   	pop    ebx
c00089cc:	5e                   	pop    esi
c00089cd:	5f                   	pop    edi
c00089ce:	c3                   	ret    

c00089cf <src_callback_new>:
c00089cf:	56                   	push   esi
c00089d0:	53                   	push   ebx
c00089d1:	53                   	push   ebx
c00089d2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00089d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089da:	85 f6                	test   esi,esi
c00089dc:	75 0e                	jne    c00089ec <src_callback_new+0x1d>
c00089de:	31 db                	xor    ebx,ebx
c00089e0:	85 c0                	test   eax,eax
c00089e2:	74 47                	je     c0008a2b <src_callback_new+0x5c>
c00089e4:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00089ea:	eb 3f                	jmp    c0008a2b <src_callback_new+0x5c>
c00089ec:	85 c0                	test   eax,eax
c00089ee:	74 06                	je     c00089f6 <src_callback_new+0x27>
c00089f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00089f6:	51                   	push   ecx
c00089f7:	50                   	push   eax
c00089f8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089fc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a00:	e8 3c ff ff ff       	call   c0008941 <src_new>
c0008a05:	83 c4 10             	add    esp,0x10
c0008a08:	89 c3                	mov    ebx,eax
c0008a0a:	85 c0                	test   eax,eax
c0008a0c:	74 1d                	je     c0008a2b <src_callback_new+0x5c>
c0008a0e:	83 ec 0c             	sub    esp,0xc
c0008a11:	50                   	push   eax
c0008a12:	e8 de fe ff ff       	call   c00088f5 <src_reset>
c0008a17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a1b:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a22:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a25:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a28:	83 c4 10             	add    esp,0x10
c0008a2b:	89 d8                	mov    eax,ebx
c0008a2d:	5a                   	pop    edx
c0008a2e:	5b                   	pop    ebx
c0008a2f:	5e                   	pop    esi
c0008a30:	c3                   	ret    

c0008a31 <src_get_name>:
c0008a31:	53                   	push   ebx
c0008a32:	83 ec 14             	sub    esp,0x14
c0008a35:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a39:	53                   	push   ebx
c0008a3a:	e8 d0 4f 00 00       	call   c000da0f <sinc_get_name>
c0008a3f:	83 c4 10             	add    esp,0x10
c0008a42:	85 c0                	test   eax,eax
c0008a44:	75 1d                	jne    c0008a63 <src_get_name+0x32>
c0008a46:	83 ec 0c             	sub    esp,0xc
c0008a49:	53                   	push   ebx
c0008a4a:	e8 80 57 00 00       	call   c000e1cf <zoh_get_name>
c0008a4f:	83 c4 10             	add    esp,0x10
c0008a52:	85 c0                	test   eax,eax
c0008a54:	75 0d                	jne    c0008a63 <src_get_name+0x32>
c0008a56:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a5a:	83 c4 08             	add    esp,0x8
c0008a5d:	5b                   	pop    ebx
c0008a5e:	e9 74 0b 00 00       	jmp    c00095d7 <linear_get_name>
c0008a63:	83 c4 08             	add    esp,0x8
c0008a66:	5b                   	pop    ebx
c0008a67:	c3                   	ret    

c0008a68 <src_get_description>:
c0008a68:	53                   	push   ebx
c0008a69:	83 ec 14             	sub    esp,0x14
c0008a6c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a70:	53                   	push   ebx
c0008a71:	e8 ac 4f 00 00       	call   c000da22 <sinc_get_description>
c0008a76:	83 c4 10             	add    esp,0x10
c0008a79:	85 c0                	test   eax,eax
c0008a7b:	75 1d                	jne    c0008a9a <src_get_description+0x32>
c0008a7d:	83 ec 0c             	sub    esp,0xc
c0008a80:	53                   	push   ebx
c0008a81:	e8 58 57 00 00       	call   c000e1de <zoh_get_description>
c0008a86:	83 c4 10             	add    esp,0x10
c0008a89:	85 c0                	test   eax,eax
c0008a8b:	75 0d                	jne    c0008a9a <src_get_description+0x32>
c0008a8d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a91:	83 c4 08             	add    esp,0x8
c0008a94:	5b                   	pop    ebx
c0008a95:	e9 4c 0b 00 00       	jmp    c00095e6 <linear_get_description>
c0008a9a:	83 c4 08             	add    esp,0x8
c0008a9d:	5b                   	pop    ebx
c0008a9e:	c3                   	ret    

c0008a9f <src_get_version>:
c0008a9f:	b8 c0 68 02 c0       	mov    eax,0xc00268c0
c0008aa4:	c3                   	ret    

c0008aa5 <src_is_valid_ratio>:
c0008aa5:	83 ec 1c             	sub    esp,0x1c
c0008aa8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ab0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ab4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ab8:	68 00 00 70 3f       	push   0x3f700000
c0008abd:	6a 00                	push   0x0
c0008abf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ac3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ac7:	e8 b3 ca 01 00       	call   c002557f <__ltdf2>
c0008acc:	83 c4 10             	add    esp,0x10
c0008acf:	31 d2                	xor    edx,edx
c0008ad1:	85 c0                	test   eax,eax
c0008ad3:	78 1e                	js     c0008af3 <src_is_valid_ratio+0x4e>
c0008ad5:	68 00 00 70 40       	push   0x40700000
c0008ada:	6a 00                	push   0x0
c0008adc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ae0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ae4:	e8 78 ca 01 00       	call   c0025561 <__gtdf2>
c0008ae9:	31 d2                	xor    edx,edx
c0008aeb:	83 c4 10             	add    esp,0x10
c0008aee:	85 c0                	test   eax,eax
c0008af0:	0f 9e c2             	setle  dl
c0008af3:	89 d0                	mov    eax,edx
c0008af5:	83 c4 1c             	add    esp,0x1c
c0008af8:	c3                   	ret    

c0008af9 <src_error>:
c0008af9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afd:	31 c0                	xor    eax,eax
c0008aff:	85 d2                	test   edx,edx
c0008b01:	74 03                	je     c0008b06 <src_error+0xd>
c0008b03:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b06:	c3                   	ret    

c0008b07 <src_strerror>:
c0008b07:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b0b:	31 c0                	xor    eax,eax
c0008b0d:	83 fa 17             	cmp    edx,0x17
c0008b10:	77 07                	ja     c0008b19 <src_strerror+0x12>
c0008b12:	8b 04 95 20 6d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd92e0]
c0008b19:	c3                   	ret    

c0008b1a <src_simple>:
c0008b1a:	56                   	push   esi
c0008b1b:	53                   	push   ebx
c0008b1c:	83 ec 18             	sub    esp,0x18
c0008b1f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b23:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b27:	50                   	push   eax
c0008b28:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b2c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b30:	e8 0c fe ff ff       	call   c0008941 <src_new>
c0008b35:	83 c4 10             	add    esp,0x10
c0008b38:	85 c0                	test   eax,eax
c0008b3a:	75 06                	jne    c0008b42 <src_simple+0x28>
c0008b3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b40:	eb 25                	jmp    c0008b67 <src_simple+0x4d>
c0008b42:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b49:	89 c3                	mov    ebx,eax
c0008b4b:	50                   	push   eax
c0008b4c:	50                   	push   eax
c0008b4d:	56                   	push   esi
c0008b4e:	53                   	push   ebx
c0008b4f:	e8 e2 f9 ff ff       	call   c0008536 <src_process>
c0008b54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b57:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b5b:	e8 9a f9 ff ff       	call   c00084fa <src_delete>
c0008b60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b64:	83 c4 10             	add    esp,0x10
c0008b67:	83 c4 14             	add    esp,0x14
c0008b6a:	5b                   	pop    ebx
c0008b6b:	5e                   	pop    esi
c0008b6c:	c3                   	ret    

c0008b6d <src_short_to_float_array>:
c0008b6d:	53                   	push   ebx
c0008b6e:	83 ec 18             	sub    esp,0x18
c0008b71:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b75:	85 db                	test   ebx,ebx
c0008b77:	74 54                	je     c0008bcd <src_short_to_float_array+0x60>
c0008b79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b7d:	4b                   	dec    ebx
c0008b7e:	83 ec 0c             	sub    esp,0xc
c0008b81:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b85:	50                   	push   eax
c0008b86:	e8 88 c7 01 00       	call   c0025313 <__floatsidf>
c0008b8b:	83 c4 10             	add    esp,0x10
c0008b8e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b92:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008b96:	68 00 00 00 3f       	push   0x3f000000
c0008b9b:	6a 00                	push   0x0
c0008b9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ba1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ba5:	e8 06 c1 01 00       	call   c0024cb0 <__muldf3>
c0008baa:	59                   	pop    ecx
c0008bab:	59                   	pop    ecx
c0008bac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bb0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bbc:	e8 c2 c9 01 00       	call   c0025583 <__truncdfsf2>
c0008bc1:	83 c4 10             	add    esp,0x10
c0008bc4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bc8:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008bcb:	eb a8                	jmp    c0008b75 <src_short_to_float_array+0x8>
c0008bcd:	83 c4 18             	add    esp,0x18
c0008bd0:	5b                   	pop    ebx
c0008bd1:	c3                   	ret    

c0008bd2 <src_float_to_short_array>:
c0008bd2:	56                   	push   esi
c0008bd3:	53                   	push   ebx
c0008bd4:	83 ec 14             	sub    esp,0x14
c0008bd7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008bdb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bdf:	85 db                	test   ebx,ebx
c0008be1:	0f 84 a4 00 00 00    	je     c0008c8b <src_float_to_short_array+0xb9>
c0008be7:	83 ec 0c             	sub    esp,0xc
c0008bea:	4b                   	dec    ebx
c0008beb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008bef:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008bf2:	e8 b0 ca 01 00       	call   c00256a7 <__extendsfdf2>
c0008bf7:	83 c4 10             	add    esp,0x10
c0008bfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008bfe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c02:	68 00 00 e0 41       	push   0x41e00000
c0008c07:	6a 00                	push   0x0
c0008c09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c11:	e8 9a c0 01 00       	call   c0024cb0 <__muldf3>
c0008c16:	83 c4 10             	add    esp,0x10
c0008c19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c1d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c21:	68 ff ff df 41       	push   0x41dfffff
c0008c26:	68 00 00 c0 ff       	push   0xffc00000
c0008c2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c33:	e8 45 c9 01 00       	call   c002557d <__gedf2>
c0008c38:	83 c4 10             	add    esp,0x10
c0008c3b:	85 c0                	test   eax,eax
c0008c3d:	78 08                	js     c0008c47 <src_float_to_short_array+0x75>
c0008c3f:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c45:	eb 98                	jmp    c0008bdf <src_float_to_short_array+0xd>
c0008c47:	68 00 00 e0 c1       	push   0xc1e00000
c0008c4c:	6a 00                	push   0x0
c0008c4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c56:	e8 26 c9 01 00       	call   c0025581 <__ledf2>
c0008c5b:	83 c4 10             	add    esp,0x10
c0008c5e:	85 c0                	test   eax,eax
c0008c60:	7f 0b                	jg     c0008c6d <src_float_to_short_array+0x9b>
c0008c62:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c68:	e9 72 ff ff ff       	jmp    c0008bdf <src_float_to_short_array+0xd>
c0008c6d:	50                   	push   eax
c0008c6e:	50                   	push   eax
c0008c6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c77:	e8 b4 ca 01 00       	call   c0025730 <lrint>
c0008c7c:	83 c4 10             	add    esp,0x10
c0008c7f:	c1 f8 10             	sar    eax,0x10
c0008c82:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c86:	e9 54 ff ff ff       	jmp    c0008bdf <src_float_to_short_array+0xd>
c0008c8b:	83 c4 14             	add    esp,0x14
c0008c8e:	5b                   	pop    ebx
c0008c8f:	5e                   	pop    esi
c0008c90:	c3                   	ret    

c0008c91 <src_int_to_float_array>:
c0008c91:	53                   	push   ebx
c0008c92:	83 ec 18             	sub    esp,0x18
c0008c95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008c99:	85 db                	test   ebx,ebx
c0008c9b:	74 52                	je     c0008cef <src_int_to_float_array+0x5e>
c0008c9d:	83 ec 0c             	sub    esp,0xc
c0008ca0:	4b                   	dec    ebx
c0008ca1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ca5:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ca8:	e8 66 c6 01 00       	call   c0025313 <__floatsidf>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cb4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cb8:	68 00 00 00 3e       	push   0x3e000000
c0008cbd:	6a 00                	push   0x0
c0008cbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cc7:	e8 e4 bf 01 00       	call   c0024cb0 <__muldf3>
c0008ccc:	59                   	pop    ecx
c0008ccd:	59                   	pop    ecx
c0008cce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008cd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008cd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cde:	e8 a0 c8 01 00       	call   c0025583 <__truncdfsf2>
c0008ce3:	83 c4 10             	add    esp,0x10
c0008ce6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cea:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008ced:	eb aa                	jmp    c0008c99 <src_int_to_float_array+0x8>
c0008cef:	83 c4 18             	add    esp,0x18
c0008cf2:	5b                   	pop    ebx
c0008cf3:	c3                   	ret    

c0008cf4 <src_float_to_int_array>:
c0008cf4:	56                   	push   esi
c0008cf5:	53                   	push   ebx
c0008cf6:	83 ec 14             	sub    esp,0x14
c0008cf9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008cfd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d01:	85 db                	test   ebx,ebx
c0008d03:	0f 84 a2 00 00 00    	je     c0008dab <src_float_to_int_array+0xb7>
c0008d09:	83 ec 0c             	sub    esp,0xc
c0008d0c:	4b                   	dec    ebx
c0008d0d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d11:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d14:	e8 8e c9 01 00       	call   c00256a7 <__extendsfdf2>
c0008d19:	83 c4 10             	add    esp,0x10
c0008d1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d24:	68 00 00 e0 41       	push   0x41e00000
c0008d29:	6a 00                	push   0x0
c0008d2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d33:	e8 78 bf 01 00       	call   c0024cb0 <__muldf3>
c0008d38:	83 c4 10             	add    esp,0x10
c0008d3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d43:	68 ff ff df 41       	push   0x41dfffff
c0008d48:	68 00 00 c0 ff       	push   0xffc00000
c0008d4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d55:	e8 23 c8 01 00       	call   c002557d <__gedf2>
c0008d5a:	83 c4 10             	add    esp,0x10
c0008d5d:	85 c0                	test   eax,eax
c0008d5f:	78 09                	js     c0008d6a <src_float_to_int_array+0x76>
c0008d61:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d68:	eb 97                	jmp    c0008d01 <src_float_to_int_array+0xd>
c0008d6a:	68 00 00 e0 c1       	push   0xc1e00000
c0008d6f:	6a 00                	push   0x0
c0008d71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d79:	e8 03 c8 01 00       	call   c0025581 <__ledf2>
c0008d7e:	83 c4 10             	add    esp,0x10
c0008d81:	85 c0                	test   eax,eax
c0008d83:	7f 0c                	jg     c0008d91 <src_float_to_int_array+0x9d>
c0008d85:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008d8c:	e9 70 ff ff ff       	jmp    c0008d01 <src_float_to_int_array+0xd>
c0008d91:	50                   	push   eax
c0008d92:	50                   	push   eax
c0008d93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d9b:	e8 90 c9 01 00       	call   c0025730 <lrint>
c0008da0:	83 c4 10             	add    esp,0x10
c0008da3:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008da6:	e9 56 ff ff ff       	jmp    c0008d01 <src_float_to_int_array+0xd>
c0008dab:	83 c4 14             	add    esp,0x14
c0008dae:	5b                   	pop    ebx
c0008daf:	5e                   	pop    esi
c0008db0:	c3                   	ret    

c0008db1 <linear_vari_process>:
c0008db1:	55                   	push   ebp
c0008db2:	31 d2                	xor    edx,edx
c0008db4:	57                   	push   edi
c0008db5:	56                   	push   esi
c0008db6:	53                   	push   ebx
c0008db7:	83 ec 3c             	sub    esp,0x3c
c0008dba:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008dbe:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008dc2:	0f 8e d3 07 00 00    	jle    c000959b <linear_vari_process+0x7ea>
c0008dc8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008dcc:	ba 05 00 00 00       	mov    edx,0x5
c0008dd1:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008dd4:	85 db                	test   ebx,ebx
c0008dd6:	0f 84 bf 07 00 00    	je     c000959b <linear_vari_process+0x7ea>
c0008ddc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008ddf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008de3:	74 19                	je     c0008dfe <linear_vari_process+0x4d>
c0008de5:	31 d2                	xor    edx,edx
c0008de7:	39 c2                	cmp    edx,eax
c0008de9:	7d 0c                	jge    c0008df7 <linear_vari_process+0x46>
c0008deb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008ded:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008df0:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008df4:	42                   	inc    edx
c0008df5:	eb f0                	jmp    c0008de7 <linear_vari_process+0x36>
c0008df7:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008dfe:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008e01:	0f af d0             	imul   edx,eax
c0008e04:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008e07:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008e0b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008e12:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008e15:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008e1c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e20:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e23:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e25:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e2d:	68 00 00 70 3f       	push   0x3f700000
c0008e32:	6a 00                	push   0x0
c0008e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e3c:	e8 3e c7 01 00       	call   c002557f <__ltdf2>
c0008e41:	83 c4 10             	add    esp,0x10
c0008e44:	ba 16 00 00 00       	mov    edx,0x16
c0008e49:	85 c0                	test   eax,eax
c0008e4b:	0f 88 4a 07 00 00    	js     c000959b <linear_vari_process+0x7ea>
c0008e51:	68 00 00 70 40       	push   0x40700000
c0008e56:	6a 00                	push   0x0
c0008e58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e60:	e8 fc c6 01 00       	call   c0025561 <__gtdf2>
c0008e65:	83 c4 10             	add    esp,0x10
c0008e68:	ba 16 00 00 00       	mov    edx,0x16
c0008e6d:	85 c0                	test   eax,eax
c0008e6f:	0f 8f 26 07 00 00    	jg     c000959b <linear_vari_process+0x7ea>
c0008e75:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e79:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008e7c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e87:	68 00 00 f0 3f       	push   0x3ff00000
c0008e8c:	6a 00                	push   0x0
c0008e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e96:	e8 e4 c6 01 00       	call   c002557f <__ltdf2>
c0008e9b:	83 c4 10             	add    esp,0x10
c0008e9e:	85 c0                	test   eax,eax
c0008ea0:	0f 89 89 02 00 00    	jns    c000912f <linear_vari_process+0x37e>
c0008ea6:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008ea9:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008eac:	0f 8d 7d 02 00 00    	jge    c000912f <linear_vari_process+0x37e>
c0008eb2:	83 ec 0c             	sub    esp,0xc
c0008eb5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008eb8:	e8 56 c4 01 00       	call   c0025313 <__floatsidf>
c0008ebd:	83 c4 10             	add    esp,0x10
c0008ec0:	89 04 24             	mov    DWORD PTR [esp],eax
c0008ec3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008ec7:	68 00 00 f0 3f       	push   0x3ff00000
c0008ecc:	6a 00                	push   0x0
c0008ece:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed6:	e8 58 b7 01 00       	call   c0024633 <__adddf3>
c0008edb:	83 c4 10             	add    esp,0x10
c0008ede:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ee2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ee6:	52                   	push   edx
c0008ee7:	50                   	push   eax
c0008ee8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008eec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008ef0:	e8 bb bd 01 00       	call   c0024cb0 <__muldf3>
c0008ef5:	5d                   	pop    ebp
c0008ef6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008efa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008efe:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008f01:	e8 0d c4 01 00       	call   c0025313 <__floatsidf>
c0008f06:	83 c4 10             	add    esp,0x10
c0008f09:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f0d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f11:	52                   	push   edx
c0008f12:	50                   	push   eax
c0008f13:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f17:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f1b:	e8 13 b7 01 00       	call   c0024633 <__adddf3>
c0008f20:	59                   	pop    ecx
c0008f21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f25:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f29:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008f2c:	e8 e2 c3 01 00       	call   c0025313 <__floatsidf>
c0008f31:	83 c4 10             	add    esp,0x10
c0008f34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f38:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f3c:	52                   	push   edx
c0008f3d:	50                   	push   eax
c0008f3e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f42:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f46:	e8 32 c6 01 00       	call   c002557d <__gedf2>
c0008f4b:	83 c4 10             	add    esp,0x10
c0008f4e:	85 c0                	test   eax,eax
c0008f50:	0f 89 d9 01 00 00    	jns    c000912f <linear_vari_process+0x37e>
c0008f56:	85 ff                	test   edi,edi
c0008f58:	0f 8e f4 00 00 00    	jle    c0009052 <linear_vari_process+0x2a1>
c0008f5e:	83 ec 10             	sub    esp,0x10
c0008f61:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008f64:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008f67:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008f6b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008f6e:	ff 30                	push   DWORD PTR [eax]
c0008f70:	e8 0f bd 01 00       	call   c0024c84 <__subdf3>
c0008f75:	83 c4 18             	add    esp,0x18
c0008f78:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f80:	52                   	push   edx
c0008f81:	50                   	push   eax
c0008f82:	e8 89 c7 01 00       	call   c0025710 <fabs>
c0008f87:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f8b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f8f:	83 c4 10             	add    esp,0x10
c0008f92:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0008f97:	68 23 42 92 0c       	push   0xc924223
c0008f9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fa0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fa4:	e8 b8 c5 01 00       	call   c0025561 <__gtdf2>
c0008fa9:	83 c4 10             	add    esp,0x10
c0008fac:	85 c0                	test   eax,eax
c0008fae:	0f 8e 9e 00 00 00    	jle    c0009052 <linear_vari_process+0x2a1>
c0008fb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008fb8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008fbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fbd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008fc1:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fc4:	52                   	push   edx
c0008fc5:	50                   	push   eax
c0008fc6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fc9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fcc:	e8 b3 bc 01 00       	call   c0024c84 <__subdf3>
c0008fd1:	59                   	pop    ecx
c0008fd2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fd6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0008fda:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008fdd:	e8 31 c3 01 00       	call   c0025313 <__floatsidf>
c0008fe2:	83 c4 10             	add    esp,0x10
c0008fe5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008fe9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008fed:	52                   	push   edx
c0008fee:	50                   	push   eax
c0008fef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ff7:	e8 b4 bc 01 00       	call   c0024cb0 <__muldf3>
c0008ffc:	5f                   	pop    edi
c0008ffd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009001:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009005:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009008:	e8 06 c3 01 00       	call   c0025313 <__floatsidf>
c000900d:	83 c4 10             	add    esp,0x10
c0009010:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009014:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009018:	52                   	push   edx
c0009019:	50                   	push   eax
c000901a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000901e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009022:	e8 6d bf 01 00       	call   c0024f94 <__divdf3>
c0009027:	83 c4 10             	add    esp,0x10
c000902a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000902e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009032:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009036:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000903a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000903e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009042:	e8 ec b5 01 00       	call   c0024633 <__adddf3>
c0009047:	83 c4 10             	add    esp,0x10
c000904a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000904e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009052:	31 ff                	xor    edi,edi
c0009054:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009057:	0f 8e 9d 00 00 00    	jle    c00090fa <linear_vari_process+0x349>
c000905d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009060:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009064:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009067:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000906b:	89 04 24             	mov    DWORD PTR [esp],eax
c000906e:	8b 06                	mov    eax,DWORD PTR [esi]
c0009070:	52                   	push   edx
c0009071:	52                   	push   edx
c0009072:	55                   	push   ebp
c0009073:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c0009076:	47                   	inc    edi
c0009077:	e8 4c af 01 00       	call   c0023fc8 <__subsf3>
c000907c:	89 04 24             	mov    DWORD PTR [esp],eax
c000907f:	e8 23 c6 01 00       	call   c00256a7 <__extendsfdf2>
c0009084:	83 c4 10             	add    esp,0x10
c0009087:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000908b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000908f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009093:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009097:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000909b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000909f:	e8 0c bc 01 00       	call   c0024cb0 <__muldf3>
c00090a4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00090a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00090ab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00090af:	e8 f3 c5 01 00       	call   c00256a7 <__extendsfdf2>
c00090b4:	83 c4 10             	add    esp,0x10
c00090b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090bb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090bf:	52                   	push   edx
c00090c0:	50                   	push   eax
c00090c1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090c5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090c9:	e8 65 b5 01 00       	call   c0024633 <__adddf3>
c00090ce:	59                   	pop    ecx
c00090cf:	5d                   	pop    ebp
c00090d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090d4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090e0:	e8 9e c4 01 00       	call   c0025583 <__truncdfsf2>
c00090e5:	83 c4 10             	add    esp,0x10
c00090e8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00090eb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00090ef:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c00090f2:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c00090f5:	e9 5a ff ff ff       	jmp    c0009054 <linear_vari_process+0x2a3>
c00090fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009102:	68 00 00 f0 3f       	push   0x3ff00000
c0009107:	6a 00                	push   0x0
c0009109:	e8 86 be 01 00       	call   c0024f94 <__divdf3>
c000910e:	83 c4 10             	add    esp,0x10
c0009111:	89 04 24             	mov    DWORD PTR [esp],eax
c0009114:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009118:	52                   	push   edx
c0009119:	50                   	push   eax
c000911a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000911e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009122:	e8 0c b5 01 00       	call   c0024633 <__adddf3>
c0009127:	83 c4 10             	add    esp,0x10
c000912a:	e9 50 fd ff ff       	jmp    c0008e7f <linear_vari_process+0xce>
c000912f:	50                   	push   eax
c0009130:	50                   	push   eax
c0009131:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009135:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009139:	e8 f2 c5 01 00       	call   c0025730 <lrint>
c000913e:	83 ec 0c             	sub    esp,0xc
c0009141:	50                   	push   eax
c0009142:	e8 cc c1 01 00       	call   c0025313 <__floatsidf>
c0009147:	83 c4 10             	add    esp,0x10
c000914a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000914e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009152:	52                   	push   edx
c0009153:	50                   	push   eax
c0009154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000915c:	e8 23 bb 01 00       	call   c0024c84 <__subdf3>
c0009161:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009165:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009169:	83 c4 20             	add    esp,0x20
c000916c:	6a 00                	push   0x0
c000916e:	6a 00                	push   0x0
c0009170:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009174:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009178:	e8 02 c4 01 00       	call   c002557f <__ltdf2>
c000917d:	83 c4 10             	add    esp,0x10
c0009180:	85 c0                	test   eax,eax
c0009182:	79 1e                	jns    c00091a2 <linear_vari_process+0x3f1>
c0009184:	68 00 00 f0 3f       	push   0x3ff00000
c0009189:	6a 00                	push   0x0
c000918b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000918f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009193:	e8 9b b4 01 00       	call   c0024633 <__adddf3>
c0009198:	83 c4 10             	add    esp,0x10
c000919b:	89 04 24             	mov    DWORD PTR [esp],eax
c000919e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091a2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091a5:	83 ec 10             	sub    esp,0x10
c00091a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091b0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091b8:	e8 c7 ba 01 00       	call   c0024c84 <__subdf3>
c00091bd:	83 c4 18             	add    esp,0x18
c00091c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091c4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091c8:	52                   	push   edx
c00091c9:	50                   	push   eax
c00091ca:	e8 61 c5 01 00       	call   c0025730 <lrint>
c00091cf:	83 c4 10             	add    esp,0x10
c00091d2:	0f af f8             	imul   edi,eax
c00091d5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00091d8:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00091db:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00091de:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00091e1:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c00091e4:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00091e8:	0f 8d 13 03 00 00    	jge    c0009501 <linear_vari_process+0x750>
c00091ee:	83 ec 0c             	sub    esp,0xc
c00091f1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00091f4:	e8 1a c1 01 00       	call   c0025313 <__floatsidf>
c00091f9:	83 c4 10             	add    esp,0x10
c00091fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009200:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009204:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009208:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000920c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009210:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009214:	e8 97 ba 01 00       	call   c0024cb0 <__muldf3>
c0009219:	89 3c 24             	mov    DWORD PTR [esp],edi
c000921c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009220:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009224:	e8 ea c0 01 00       	call   c0025313 <__floatsidf>
c0009229:	83 c4 10             	add    esp,0x10
c000922c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009230:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009234:	52                   	push   edx
c0009235:	50                   	push   eax
c0009236:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000923a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000923e:	e8 f0 b3 01 00       	call   c0024633 <__adddf3>
c0009243:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009246:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000924a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924e:	e8 c0 c0 01 00       	call   c0025313 <__floatsidf>
c0009253:	83 c4 10             	add    esp,0x10
c0009256:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000925a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000925e:	52                   	push   edx
c000925f:	50                   	push   eax
c0009260:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009264:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009268:	e8 12 c3 01 00       	call   c002557f <__ltdf2>
c000926d:	83 c4 10             	add    esp,0x10
c0009270:	85 c0                	test   eax,eax
c0009272:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009276:	0f 89 85 02 00 00    	jns    c0009501 <linear_vari_process+0x750>
c000927c:	85 c9                	test   ecx,ecx
c000927e:	0f 8e f5 00 00 00    	jle    c0009379 <linear_vari_process+0x5c8>
c0009284:	83 ec 10             	sub    esp,0x10
c0009287:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000928a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000928d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0009291:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009294:	ff 30                	push   DWORD PTR [eax]
c0009296:	e8 e9 b9 01 00       	call   c0024c84 <__subdf3>
c000929b:	83 c4 18             	add    esp,0x18
c000929e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092a2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092a6:	52                   	push   edx
c00092a7:	50                   	push   eax
c00092a8:	e8 63 c4 01 00       	call   c0025710 <fabs>
c00092ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092b1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b5:	83 c4 10             	add    esp,0x10
c00092b8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00092bd:	68 23 42 92 0c       	push   0xc924223
c00092c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092ca:	e8 92 c2 01 00       	call   c0025561 <__gtdf2>
c00092cf:	83 c4 10             	add    esp,0x10
c00092d2:	85 c0                	test   eax,eax
c00092d4:	0f 8e 9f 00 00 00    	jle    c0009379 <linear_vari_process+0x5c8>
c00092da:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00092de:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00092e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00092e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00092e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092eb:	52                   	push   edx
c00092ec:	50                   	push   eax
c00092ed:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092f0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00092f3:	e8 8c b9 01 00       	call   c0024c84 <__subdf3>
c00092f8:	5f                   	pop    edi
c00092f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00092fd:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009301:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009304:	e8 0a c0 01 00       	call   c0025313 <__floatsidf>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009310:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009314:	52                   	push   edx
c0009315:	50                   	push   eax
c0009316:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000931a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000931e:	e8 8d b9 01 00       	call   c0024cb0 <__muldf3>
c0009323:	5d                   	pop    ebp
c0009324:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009328:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000932c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000932f:	e8 df bf 01 00       	call   c0025313 <__floatsidf>
c0009334:	83 c4 10             	add    esp,0x10
c0009337:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000933b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000933f:	52                   	push   edx
c0009340:	50                   	push   eax
c0009341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009345:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009349:	e8 46 bc 01 00       	call   c0024f94 <__divdf3>
c000934e:	83 c4 10             	add    esp,0x10
c0009351:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009355:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009359:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000935d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009361:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009365:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009369:	e8 c5 b2 01 00       	call   c0024633 <__adddf3>
c000936e:	83 c4 10             	add    esp,0x10
c0009371:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009375:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009379:	31 ff                	xor    edi,edi
c000937b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000937e:	39 f8                	cmp    eax,edi
c0009380:	0f 8e ac 00 00 00    	jle    c0009432 <linear_vari_process+0x681>
c0009386:	8b 16                	mov    edx,DWORD PTR [esi]
c0009388:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000938b:	29 c1                	sub    ecx,eax
c000938d:	89 c8                	mov    eax,ecx
c000938f:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009392:	01 f8                	add    eax,edi
c0009394:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009398:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000939b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000939e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093a2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093a5:	51                   	push   ecx
c00093a6:	01 f8                	add    eax,edi
c00093a8:	51                   	push   ecx
c00093a9:	47                   	inc    edi
c00093aa:	55                   	push   ebp
c00093ab:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093ae:	e8 15 ac 01 00       	call   c0023fc8 <__subsf3>
c00093b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00093b6:	e8 ec c2 01 00       	call   c00256a7 <__extendsfdf2>
c00093bb:	83 c4 10             	add    esp,0x10
c00093be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093c6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093ca:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d6:	e8 d5 b8 01 00       	call   c0024cb0 <__muldf3>
c00093db:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093de:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00093e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00093e6:	e8 bc c2 01 00       	call   c00256a7 <__extendsfdf2>
c00093eb:	83 c4 10             	add    esp,0x10
c00093ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093f6:	52                   	push   edx
c00093f7:	50                   	push   eax
c00093f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009400:	e8 2e b2 01 00       	call   c0024633 <__adddf3>
c0009405:	5d                   	pop    ebp
c0009406:	59                   	pop    ecx
c0009407:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000940b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000940f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009413:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009417:	e8 67 c1 01 00       	call   c0025583 <__truncdfsf2>
c000941c:	83 c4 10             	add    esp,0x10
c000941f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009423:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009427:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000942a:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000942d:	e9 49 ff ff ff       	jmp    c000937b <linear_vari_process+0x5ca>
c0009432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009436:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000943a:	68 00 00 f0 3f       	push   0x3ff00000
c000943f:	6a 00                	push   0x0
c0009441:	e8 4e bb 01 00       	call   c0024f94 <__divdf3>
c0009446:	83 c4 10             	add    esp,0x10
c0009449:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000944d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009451:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009455:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009459:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009461:	e8 cd b1 01 00       	call   c0024633 <__adddf3>
c0009466:	59                   	pop    ecx
c0009467:	5f                   	pop    edi
c0009468:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000946c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009478:	e8 b3 c2 01 00       	call   c0025730 <lrint>
c000947d:	83 ec 0c             	sub    esp,0xc
c0009480:	50                   	push   eax
c0009481:	e8 8d be 01 00       	call   c0025313 <__floatsidf>
c0009486:	83 c4 10             	add    esp,0x10
c0009489:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000948d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009491:	52                   	push   edx
c0009492:	50                   	push   eax
c0009493:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009497:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000949b:	e8 e4 b7 01 00       	call   c0024c84 <__subdf3>
c00094a0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00094a4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00094a8:	83 c4 20             	add    esp,0x20
c00094ab:	6a 00                	push   0x0
c00094ad:	6a 00                	push   0x0
c00094af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094b7:	e8 c3 c0 01 00       	call   c002557f <__ltdf2>
c00094bc:	83 c4 10             	add    esp,0x10
c00094bf:	85 c0                	test   eax,eax
c00094c1:	79 1e                	jns    c00094e1 <linear_vari_process+0x730>
c00094c3:	68 00 00 f0 3f       	push   0x3ff00000
c00094c8:	6a 00                	push   0x0
c00094ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094d2:	e8 5c b1 01 00       	call   c0024633 <__adddf3>
c00094d7:	83 c4 10             	add    esp,0x10
c00094da:	89 04 24             	mov    DWORD PTR [esp],eax
c00094dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00094e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00094e4:	83 ec 10             	sub    esp,0x10
c00094e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f7:	e8 88 b7 01 00       	call   c0024c84 <__subdf3>
c00094fc:	e9 bc fc ff ff       	jmp    c00091bd <linear_vari_process+0x40c>
c0009501:	39 fd                	cmp    ebp,edi
c0009503:	7d 38                	jge    c000953d <linear_vari_process+0x78c>
c0009505:	83 ec 0c             	sub    esp,0xc
c0009508:	89 f8                	mov    eax,edi
c000950a:	29 e8                	sub    eax,ebp
c000950c:	99                   	cdq    
c000950d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009510:	50                   	push   eax
c0009511:	e8 fd bd 01 00       	call   c0025313 <__floatsidf>
c0009516:	83 c4 10             	add    esp,0x10
c0009519:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000951d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009521:	52                   	push   edx
c0009522:	50                   	push   eax
c0009523:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009527:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000952b:	e8 03 b1 01 00       	call   c0024633 <__adddf3>
c0009530:	83 c4 10             	add    esp,0x10
c0009533:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009536:	89 04 24             	mov    DWORD PTR [esp],eax
c0009539:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000953d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009541:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009544:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009548:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000954b:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000954e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009551:	85 c0                	test   eax,eax
c0009553:	7f 29                	jg     c000957e <linear_vari_process+0x7cd>
c0009555:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009559:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000955d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009561:	89 01                	mov    DWORD PTR [ecx],eax
c0009563:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009566:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009569:	99                   	cdq    
c000956a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000956d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009570:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009573:	99                   	cdq    
c0009574:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009577:	31 d2                	xor    edx,edx
c0009579:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000957c:	eb 1d                	jmp    c000959b <linear_vari_process+0x7ea>
c000957e:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0009581:	31 d2                	xor    edx,edx
c0009583:	29 c8                	sub    eax,ecx
c0009585:	c1 e0 02             	shl    eax,0x2
c0009588:	39 d1                	cmp    ecx,edx
c000958a:	7e c9                	jle    c0009555 <linear_vari_process+0x7a4>
c000958c:	8b 3e                	mov    edi,DWORD PTR [esi]
c000958e:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c0009591:	83 c0 04             	add    eax,0x4
c0009594:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c0009598:	42                   	inc    edx
c0009599:	eb ed                	jmp    c0009588 <linear_vari_process+0x7d7>
c000959b:	83 c4 3c             	add    esp,0x3c
c000959e:	89 d0                	mov    eax,edx
c00095a0:	5b                   	pop    ebx
c00095a1:	5e                   	pop    esi
c00095a2:	5f                   	pop    edi
c00095a3:	5d                   	pop    ebp
c00095a4:	c3                   	ret    

c00095a5 <linear_reset>:
c00095a5:	83 ec 0c             	sub    esp,0xc
c00095a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095ac:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095af:	85 c0                	test   eax,eax
c00095b1:	74 20                	je     c00095d3 <linear_reset+0x2e>
c00095b3:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095b6:	83 c0 1c             	add    eax,0x1c
c00095b9:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00095bc:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00095c3:	c1 e2 02             	shl    edx,0x2
c00095c6:	51                   	push   ecx
c00095c7:	52                   	push   edx
c00095c8:	6a 00                	push   0x0
c00095ca:	50                   	push   eax
c00095cb:	e8 ad 70 ff ff       	call   c000067d <memset>
c00095d0:	83 c4 10             	add    esp,0x10
c00095d3:	83 c4 0c             	add    esp,0xc
c00095d6:	c3                   	ret    

c00095d7 <linear_get_name>:
c00095d7:	31 c0                	xor    eax,eax
c00095d9:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095de:	75 05                	jne    c00095e5 <linear_get_name+0xe>
c00095e0:	b8 80 6d 02 c0       	mov    eax,0xc0026d80
c00095e5:	c3                   	ret    

c00095e6 <linear_get_description>:
c00095e6:	31 c0                	xor    eax,eax
c00095e8:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095ed:	75 05                	jne    c00095f4 <linear_get_description+0xe>
c00095ef:	b8 94 6d 02 c0       	mov    eax,0xc0026d94
c00095f4:	c3                   	ret    

c00095f5 <linear_set_converter>:
c00095f5:	53                   	push   ebx
c00095f6:	b8 0a 00 00 00       	mov    eax,0xa
c00095fb:	83 ec 08             	sub    esp,0x8
c00095fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009602:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009607:	75 6e                	jne    c0009677 <linear_set_converter+0x82>
c0009609:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000960c:	85 c0                	test   eax,eax
c000960e:	74 13                	je     c0009623 <linear_set_converter+0x2e>
c0009610:	83 ec 0c             	sub    esp,0xc
c0009613:	50                   	push   eax
c0009614:	e8 b9 5e 00 00       	call   c000f4d2 <free>
c0009619:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009620:	83 c4 10             	add    esp,0x10
c0009623:	50                   	push   eax
c0009624:	50                   	push   eax
c0009625:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009628:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000962f:	50                   	push   eax
c0009630:	6a 01                	push   0x1
c0009632:	e8 bb 5e 00 00       	call   c000f4f2 <calloc>
c0009637:	83 c4 10             	add    esp,0x10
c000963a:	89 c2                	mov    edx,eax
c000963c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000963f:	85 d2                	test   edx,edx
c0009641:	b8 01 00 00 00       	mov    eax,0x1
c0009646:	74 2f                	je     c0009677 <linear_set_converter+0x82>
c0009648:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000964b:	83 ec 0c             	sub    esp,0xc
c000964e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009651:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009657:	c7 43 24 b1 8d 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008db1
c000965e:	c7 43 20 b1 8d 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008db1
c0009665:	c7 43 28 a5 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095a5
c000966c:	53                   	push   ebx
c000966d:	e8 33 ff ff ff       	call   c00095a5 <linear_reset>
c0009672:	83 c4 10             	add    esp,0x10
c0009675:	31 c0                	xor    eax,eax
c0009677:	83 c4 08             	add    esp,0x8
c000967a:	5b                   	pop    ebx
c000967b:	c3                   	ret    

c000967c <int_to_fp>:
c000967c:	c1 e0 0c             	shl    eax,0xc
c000967f:	c3                   	ret    

c0009680 <fp_to_int>:
c0009680:	c1 f8 0c             	sar    eax,0xc
c0009683:	c3                   	ret    

c0009684 <fp_fraction_part>:
c0009684:	25 ff 0f 00 00       	and    eax,0xfff
c0009689:	c3                   	ret    

c000968a <fp_to_double>:
c000968a:	83 ec 1c             	sub    esp,0x1c
c000968d:	e8 f2 ff ff ff       	call   c0009684 <fp_fraction_part>
c0009692:	83 ec 0c             	sub    esp,0xc
c0009695:	50                   	push   eax
c0009696:	e8 78 bc 01 00       	call   c0025313 <__floatsidf>
c000969b:	83 c4 10             	add    esp,0x10
c000969e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096a2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096a6:	68 00 00 30 3f       	push   0x3f300000
c00096ab:	6a 00                	push   0x0
c00096ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b5:	e8 f6 b5 01 00       	call   c0024cb0 <__muldf3>
c00096ba:	83 c4 2c             	add    esp,0x2c
c00096bd:	c3                   	ret    

c00096be <calc_output_single>:
c00096be:	55                   	push   ebp
c00096bf:	57                   	push   edi
c00096c0:	56                   	push   esi
c00096c1:	89 c6                	mov    esi,eax
c00096c3:	53                   	push   ebx
c00096c4:	89 d3                	mov    ebx,edx
c00096c6:	83 ec 4c             	sub    esp,0x4c
c00096c9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00096cd:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00096d0:	e8 a7 ff ff ff       	call   c000967c <int_to_fp>
c00096d5:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00096d8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00096dc:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00096e0:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00096e4:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c00096e7:	99                   	cdq    
c00096e8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00096f0:	f7 fb                	idiv   ebx
c00096f2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00096fa:	89 da                	mov    edx,ebx
c00096fc:	0f af d0             	imul   edx,eax
c00096ff:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009703:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009707:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000970b:	29 c2                	sub    edx,eax
c000970d:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009714:	83 c5 04             	add    ebp,0x4
c0009717:	e8 6e ff ff ff       	call   c000968a <fp_to_double>
c000971c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009720:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009728:	e8 53 ff ff ff       	call   c0009680 <fp_to_int>
c000972d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009730:	52                   	push   edx
c0009731:	52                   	push   edx
c0009732:	51                   	push   ecx
c0009733:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009737:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000973b:	e8 88 a8 01 00       	call   c0023fc8 <__subsf3>
c0009740:	89 04 24             	mov    DWORD PTR [esp],eax
c0009743:	e8 5f bf 01 00       	call   c00256a7 <__extendsfdf2>
c0009748:	83 c4 10             	add    esp,0x10
c000974b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000974f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009753:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009757:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000975b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000975f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009763:	e8 48 b5 01 00       	call   c0024cb0 <__muldf3>
c0009768:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000976c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009770:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009773:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009777:	e8 2b bf 01 00       	call   c00256a7 <__extendsfdf2>
c000977c:	83 c4 10             	add    esp,0x10
c000977f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009783:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009787:	52                   	push   edx
c0009788:	50                   	push   eax
c0009789:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000978d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009791:	e8 9d ae 01 00       	call   c0024633 <__adddf3>
c0009796:	59                   	pop    ecx
c0009797:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000979b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000979f:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097a5:	e8 fd be 01 00       	call   c00256a7 <__extendsfdf2>
c00097aa:	83 c4 10             	add    esp,0x10
c00097ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097b1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097b5:	52                   	push   edx
c00097b6:	50                   	push   eax
c00097b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097bf:	e8 ec b4 01 00       	call   c0024cb0 <__muldf3>
c00097c4:	83 c4 10             	add    esp,0x10
c00097c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00097cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00097cf:	52                   	push   edx
c00097d0:	50                   	push   eax
c00097d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097d9:	e8 55 ae 01 00       	call   c0024633 <__adddf3>
c00097de:	83 c4 10             	add    esp,0x10
c00097e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00097e9:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c00097ed:	0f 89 1d ff ff ff    	jns    c0009710 <calc_output_single+0x52>
c00097f3:	89 d9                	mov    ecx,ebx
c00097f5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00097f9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00097fd:	89 dd                	mov    ebp,ebx
c00097ff:	29 c8                	sub    eax,ecx
c0009801:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009809:	99                   	cdq    
c000980a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009812:	f7 fb                	idiv   ebx
c0009814:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009818:	0f af e8             	imul   ebp,eax
c000981b:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c000981f:	01 cd                	add    ebp,ecx
c0009821:	8d 34 86             	lea    esi,[esi+eax*4]
c0009824:	89 e8                	mov    eax,ebp
c0009826:	83 ee 04             	sub    esi,0x4
c0009829:	e8 5c fe ff ff       	call   c000968a <fp_to_double>
c000982e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009832:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009836:	89 e8                	mov    eax,ebp
c0009838:	29 dd                	sub    ebp,ebx
c000983a:	e8 41 fe ff ff       	call   c0009680 <fp_to_int>
c000983f:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009842:	52                   	push   edx
c0009843:	52                   	push   edx
c0009844:	51                   	push   ecx
c0009845:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009849:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000984d:	e8 76 a7 01 00       	call   c0023fc8 <__subsf3>
c0009852:	89 04 24             	mov    DWORD PTR [esp],eax
c0009855:	e8 4d be 01 00       	call   c00256a7 <__extendsfdf2>
c000985a:	83 c4 10             	add    esp,0x10
c000985d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009861:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009865:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009869:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000986d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009871:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009875:	e8 36 b4 01 00       	call   c0024cb0 <__muldf3>
c000987a:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000987e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009882:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009885:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009889:	e8 19 be 01 00       	call   c00256a7 <__extendsfdf2>
c000988e:	83 c4 10             	add    esp,0x10
c0009891:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009895:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009899:	52                   	push   edx
c000989a:	50                   	push   eax
c000989b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000989f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098a3:	e8 8b ad 01 00       	call   c0024633 <__adddf3>
c00098a8:	59                   	pop    ecx
c00098a9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098ad:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098b1:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098b7:	e8 eb bd 01 00       	call   c00256a7 <__extendsfdf2>
c00098bc:	83 c4 10             	add    esp,0x10
c00098bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098c7:	52                   	push   edx
c00098c8:	50                   	push   eax
c00098c9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098cd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098d1:	e8 da b3 01 00       	call   c0024cb0 <__muldf3>
c00098d6:	83 c4 10             	add    esp,0x10
c00098d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098e1:	52                   	push   edx
c00098e2:	50                   	push   eax
c00098e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098eb:	e8 43 ad 01 00       	call   c0024633 <__adddf3>
c00098f0:	83 c4 10             	add    esp,0x10
c00098f3:	85 ed                	test   ebp,ebp
c00098f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00098f9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00098fd:	0f 8f 21 ff ff ff    	jg     c0009824 <calc_output_single+0x166>
c0009903:	52                   	push   edx
c0009904:	50                   	push   eax
c0009905:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009909:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990d:	e8 21 ad 01 00       	call   c0024633 <__adddf3>
c0009912:	83 c4 5c             	add    esp,0x5c
c0009915:	5b                   	pop    ebx
c0009916:	5e                   	pop    esi
c0009917:	5f                   	pop    edi
c0009918:	5d                   	pop    ebp
c0009919:	c3                   	ret    

c000991a <calc_output_stereo>:
c000991a:	55                   	push   ebp
c000991b:	89 cd                	mov    ebp,ecx
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	53                   	push   ebx
c0009920:	89 c3                	mov    ebx,eax
c0009922:	83 ec 6c             	sub    esp,0x6c
c0009925:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009929:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009930:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009937:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000993b:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000993f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009942:	e8 35 fd ff ff       	call   c000967c <int_to_fp>
c0009947:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000994f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009953:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000995b:	29 c8                	sub    eax,ecx
c000995d:	99                   	cdq    
c000995e:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009962:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009966:	0f af d0             	imul   edx,eax
c0009969:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000996c:	31 d2                	xor    edx,edx
c000996e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009972:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009976:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009979:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000997d:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009980:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009984:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009988:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000998b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009990:	29 c1                	sub    ecx,eax
c0009992:	31 c0                	xor    eax,eax
c0009994:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009997:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000999b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000999f:	83 c7 08             	add    edi,0x8
c00099a2:	e8 e3 fc ff ff       	call   c000968a <fp_to_double>
c00099a7:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099b3:	e8 c8 fc ff ff       	call   c0009680 <fp_to_int>
c00099b8:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c00099bb:	52                   	push   edx
c00099bc:	52                   	push   edx
c00099bd:	51                   	push   ecx
c00099be:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c00099c2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c00099c6:	e8 fd a5 01 00       	call   c0023fc8 <__subsf3>
c00099cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00099ce:	e8 d4 bc 01 00       	call   c00256a7 <__extendsfdf2>
c00099d3:	83 c4 10             	add    esp,0x10
c00099d6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00099da:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c00099de:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099e2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099e6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099ea:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099ee:	e8 bd b2 01 00       	call   c0024cb0 <__muldf3>
c00099f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c00099f7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00099fb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099fe:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a02:	e8 a0 bc 01 00       	call   c00256a7 <__extendsfdf2>
c0009a07:	83 c4 10             	add    esp,0x10
c0009a0a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a0e:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a12:	52                   	push   edx
c0009a13:	50                   	push   eax
c0009a14:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a18:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a1c:	e8 12 ac 01 00       	call   c0024633 <__adddf3>
c0009a21:	59                   	pop    ecx
c0009a22:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a26:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a2a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a30:	e8 72 bc 01 00       	call   c00256a7 <__extendsfdf2>
c0009a35:	83 c4 10             	add    esp,0x10
c0009a38:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a3c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a4c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a50:	e8 5b b2 01 00       	call   c0024cb0 <__muldf3>
c0009a55:	83 c4 10             	add    esp,0x10
c0009a58:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a5c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a60:	52                   	push   edx
c0009a61:	50                   	push   eax
c0009a62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a6a:	e8 c4 ab 01 00       	call   c0024633 <__adddf3>
c0009a6f:	59                   	pop    ecx
c0009a70:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a74:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009a78:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009a7e:	e8 24 bc 01 00       	call   c00256a7 <__extendsfdf2>
c0009a83:	83 c4 10             	add    esp,0x10
c0009a86:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a8a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a8e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a92:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a96:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a9a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a9e:	e8 0d b2 01 00       	call   c0024cb0 <__muldf3>
c0009aa3:	83 c4 10             	add    esp,0x10
c0009aa6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009aaa:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009aae:	52                   	push   edx
c0009aaf:	50                   	push   eax
c0009ab0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ab4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ab8:	e8 76 ab 01 00       	call   c0024633 <__adddf3>
c0009abd:	83 c4 10             	add    esp,0x10
c0009ac0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ac4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ac8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009acc:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009ad0:	0f 89 c5 fe ff ff    	jns    c000999b <calc_output_stereo+0x81>
c0009ad6:	29 e9                	sub    ecx,ebp
c0009ad8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009adc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009ae0:	29 c8                	sub    eax,ecx
c0009ae2:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009aea:	99                   	cdq    
c0009aeb:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009aef:	31 d2                	xor    edx,edx
c0009af1:	0f af f8             	imul   edi,eax
c0009af4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009af8:	40                   	inc    eax
c0009af9:	01 cf                	add    edi,ecx
c0009afb:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b00:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b04:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b0c:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b0f:	31 c0                	xor    eax,eax
c0009b11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b15:	89 f8                	mov    eax,edi
c0009b17:	83 eb 08             	sub    ebx,0x8
c0009b1a:	e8 6b fb ff ff       	call   c000968a <fp_to_double>
c0009b1f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b23:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b27:	89 f8                	mov    eax,edi
c0009b29:	e8 52 fb ff ff       	call   c0009680 <fp_to_int>
c0009b2e:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b31:	52                   	push   edx
c0009b32:	52                   	push   edx
c0009b33:	55                   	push   ebp
c0009b34:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b38:	e8 8b a4 01 00       	call   c0023fc8 <__subsf3>
c0009b3d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b40:	e8 62 bb 01 00       	call   c00256a7 <__extendsfdf2>
c0009b45:	83 c4 10             	add    esp,0x10
c0009b48:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b4c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b54:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b58:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b5c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b60:	e8 4b b1 01 00       	call   c0024cb0 <__muldf3>
c0009b65:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009b68:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b6c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b70:	e8 32 bb 01 00       	call   c00256a7 <__extendsfdf2>
c0009b75:	83 c4 10             	add    esp,0x10
c0009b78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b80:	52                   	push   edx
c0009b81:	50                   	push   eax
c0009b82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b8a:	e8 a4 aa 01 00       	call   c0024633 <__adddf3>
c0009b8f:	59                   	pop    ecx
c0009b90:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009b94:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009b98:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009b9e:	e8 04 bb 01 00       	call   c00256a7 <__extendsfdf2>
c0009ba3:	83 c4 10             	add    esp,0x10
c0009ba6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009baa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bb2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bb6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bbe:	e8 ed b0 01 00       	call   c0024cb0 <__muldf3>
c0009bc3:	83 c4 10             	add    esp,0x10
c0009bc6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bca:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bce:	52                   	push   edx
c0009bcf:	50                   	push   eax
c0009bd0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009bd4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009bd8:	e8 56 aa 01 00       	call   c0024633 <__adddf3>
c0009bdd:	5d                   	pop    ebp
c0009bde:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009be2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009be6:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009bec:	e8 b6 ba 01 00       	call   c00256a7 <__extendsfdf2>
c0009bf1:	83 c4 10             	add    esp,0x10
c0009bf4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bf8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bfc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c00:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c04:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c08:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c0c:	e8 9f b0 01 00       	call   c0024cb0 <__muldf3>
c0009c11:	83 c4 10             	add    esp,0x10
c0009c14:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c18:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c1c:	52                   	push   edx
c0009c1d:	50                   	push   eax
c0009c1e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c22:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c26:	e8 08 aa 01 00       	call   c0024633 <__adddf3>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c32:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c36:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c3a:	85 ff                	test   edi,edi
c0009c3c:	0f 8f d3 fe ff ff    	jg     c0009b15 <calc_output_stereo+0x1fb>
c0009c42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c52:	e8 dc a9 01 00       	call   c0024633 <__adddf3>
c0009c57:	83 c4 10             	add    esp,0x10
c0009c5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c5e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c72:	e8 39 b0 01 00       	call   c0024cb0 <__muldf3>
c0009c77:	59                   	pop    ecx
c0009c78:	5b                   	pop    ebx
c0009c79:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009c7d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c89:	e8 f5 b8 01 00       	call   c0025583 <__truncdfsf2>
c0009c8e:	83 c4 10             	add    esp,0x10
c0009c91:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009c98:	89 03                	mov    DWORD PTR [ebx],eax
c0009c9a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009c9e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ca2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ca6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009caa:	e8 84 a9 01 00       	call   c0024633 <__adddf3>
c0009caf:	83 c4 10             	add    esp,0x10
c0009cb2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cb6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cbe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cca:	e8 e1 af 01 00       	call   c0024cb0 <__muldf3>
c0009ccf:	5e                   	pop    esi
c0009cd0:	5f                   	pop    edi
c0009cd1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009cd5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009cd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cdd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ce1:	e8 9d b8 01 00       	call   c0025583 <__truncdfsf2>
c0009ce6:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009ced:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009cf0:	83 c4 7c             	add    esp,0x7c
c0009cf3:	5b                   	pop    ebx
c0009cf4:	5e                   	pop    esi
c0009cf5:	5f                   	pop    edi
c0009cf6:	5d                   	pop    ebp
c0009cf7:	c3                   	ret    

c0009cf8 <calc_output_quad>:
c0009cf8:	55                   	push   ebp
c0009cf9:	57                   	push   edi
c0009cfa:	56                   	push   esi
c0009cfb:	89 c6                	mov    esi,eax
c0009cfd:	53                   	push   ebx
c0009cfe:	83 ec 7c             	sub    esp,0x7c
c0009d01:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d05:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d09:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d10:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d17:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d1b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d1f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d22:	e8 55 f9 ff ff       	call   c000967c <int_to_fp>
c0009d27:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d2a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d2d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d31:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d35:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d39:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d3d:	99                   	cdq    
c0009d3e:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d42:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d46:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d49:	31 d2                	xor    edx,edx
c0009d4b:	0f af d8             	imul   ebx,eax
c0009d4e:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d56:	0f af c7             	imul   eax,edi
c0009d59:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009d5d:	29 c1                	sub    ecx,eax
c0009d5f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009d67:	31 c0                	xor    eax,eax
c0009d69:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009d6c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d70:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d74:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d78:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d7c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d80:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d84:	89 d8                	mov    eax,ebx
c0009d86:	83 c7 10             	add    edi,0x10
c0009d89:	e8 fc f8 ff ff       	call   c000968a <fp_to_double>
c0009d8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d96:	89 d8                	mov    eax,ebx
c0009d98:	e8 e3 f8 ff ff       	call   c0009680 <fp_to_int>
c0009d9d:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009da1:	52                   	push   edx
c0009da2:	52                   	push   edx
c0009da3:	51                   	push   ecx
c0009da4:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009da8:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009dac:	e8 17 a2 01 00       	call   c0023fc8 <__subsf3>
c0009db1:	89 04 24             	mov    DWORD PTR [esp],eax
c0009db4:	e8 ee b8 01 00       	call   c00256a7 <__extendsfdf2>
c0009db9:	83 c4 10             	add    esp,0x10
c0009dbc:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009dc0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009dc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dcc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009dd0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009dd4:	e8 d7 ae 01 00       	call   c0024cb0 <__muldf3>
c0009dd9:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009ddd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009de1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009de4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009de8:	e8 ba b8 01 00       	call   c00256a7 <__extendsfdf2>
c0009ded:	83 c4 10             	add    esp,0x10
c0009df0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009df4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009df8:	52                   	push   edx
c0009df9:	50                   	push   eax
c0009dfa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e02:	e8 2c a8 01 00       	call   c0024633 <__adddf3>
c0009e07:	59                   	pop    ecx
c0009e08:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e0c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e10:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e16:	e8 8c b8 01 00       	call   c00256a7 <__extendsfdf2>
c0009e1b:	83 c4 10             	add    esp,0x10
c0009e1e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e22:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e2e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e32:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e36:	e8 75 ae 01 00       	call   c0024cb0 <__muldf3>
c0009e3b:	83 c4 10             	add    esp,0x10
c0009e3e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e42:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e46:	52                   	push   edx
c0009e47:	50                   	push   eax
c0009e48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e4c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e50:	e8 de a7 01 00       	call   c0024633 <__adddf3>
c0009e55:	59                   	pop    ecx
c0009e56:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009e5a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009e5e:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009e64:	e8 3e b8 01 00       	call   c00256a7 <__extendsfdf2>
c0009e69:	83 c4 10             	add    esp,0x10
c0009e6c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e70:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e7c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e80:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e84:	e8 27 ae 01 00       	call   c0024cb0 <__muldf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e90:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e94:	52                   	push   edx
c0009e95:	50                   	push   eax
c0009e96:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e9a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e9e:	e8 90 a7 01 00       	call   c0024633 <__adddf3>
c0009ea3:	59                   	pop    ecx
c0009ea4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009ea8:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009eac:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009eb2:	e8 f0 b7 01 00       	call   c00256a7 <__extendsfdf2>
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ebe:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ec2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eca:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ece:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ed2:	e8 d9 ad 01 00       	call   c0024cb0 <__muldf3>
c0009ed7:	83 c4 10             	add    esp,0x10
c0009eda:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ede:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ee2:	52                   	push   edx
c0009ee3:	50                   	push   eax
c0009ee4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ee8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009eec:	e8 42 a7 01 00       	call   c0024633 <__adddf3>
c0009ef1:	59                   	pop    ecx
c0009ef2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009ef6:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009efa:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f00:	e8 a2 b7 01 00       	call   c00256a7 <__extendsfdf2>
c0009f05:	83 c4 10             	add    esp,0x10
c0009f08:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f0c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f18:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f1c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f20:	e8 8b ad 01 00       	call   c0024cb0 <__muldf3>
c0009f25:	83 c4 10             	add    esp,0x10
c0009f28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f2c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f30:	52                   	push   edx
c0009f31:	50                   	push   eax
c0009f32:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f36:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f3a:	e8 f4 a6 01 00       	call   c0024633 <__adddf3>
c0009f3f:	83 c4 10             	add    esp,0x10
c0009f42:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f46:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f4a:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f4e:	0f 89 30 fe ff ff    	jns    c0009d84 <calc_output_quad+0x8c>
c0009f54:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f58:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f5c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f60:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009f64:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009f6c:	29 c8                	sub    eax,ecx
c0009f6e:	99                   	cdq    
c0009f6f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f73:	31 d2                	xor    edx,edx
c0009f75:	0f af d8             	imul   ebx,eax
c0009f78:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009f7c:	40                   	inc    eax
c0009f7d:	01 cb                	add    ebx,ecx
c0009f7f:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009f84:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009f88:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009f8c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009f90:	8d 34 86             	lea    esi,[esi+eax*4]
c0009f93:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009f9b:	31 c0                	xor    eax,eax
c0009f9d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009fa1:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fa5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fa9:	89 d8                	mov    eax,ebx
c0009fab:	83 ee 10             	sub    esi,0x10
c0009fae:	e8 d7 f6 ff ff       	call   c000968a <fp_to_double>
c0009fb3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fbb:	89 d8                	mov    eax,ebx
c0009fbd:	e8 be f6 ff ff       	call   c0009680 <fp_to_int>
c0009fc2:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c0009fc6:	52                   	push   edx
c0009fc7:	52                   	push   edx
c0009fc8:	57                   	push   edi
c0009fc9:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fcd:	e8 f6 9f 01 00       	call   c0023fc8 <__subsf3>
c0009fd2:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd5:	e8 cd b6 01 00       	call   c00256a7 <__extendsfdf2>
c0009fda:	83 c4 10             	add    esp,0x10
c0009fdd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff5:	e8 b6 ac 01 00       	call   c0024cb0 <__muldf3>
c0009ffa:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009ffd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a001:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a005:	e8 9d b6 01 00       	call   c00256a7 <__extendsfdf2>
c000a00a:	83 c4 10             	add    esp,0x10
c000a00d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a011:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a015:	52                   	push   edx
c000a016:	50                   	push   eax
c000a017:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a01b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a01f:	e8 0f a6 01 00       	call   c0024633 <__adddf3>
c000a024:	59                   	pop    ecx
c000a025:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a029:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a02d:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a033:	e8 6f b6 01 00       	call   c00256a7 <__extendsfdf2>
c000a038:	83 c4 10             	add    esp,0x10
c000a03b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a03f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a043:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a047:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a04f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a053:	e8 58 ac 01 00       	call   c0024cb0 <__muldf3>
c000a058:	83 c4 10             	add    esp,0x10
c000a05b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a05f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a063:	52                   	push   edx
c000a064:	50                   	push   eax
c000a065:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a069:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a06d:	e8 c1 a5 01 00       	call   c0024633 <__adddf3>
c000a072:	5f                   	pop    edi
c000a073:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a077:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a07b:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a081:	e8 21 b6 01 00       	call   c00256a7 <__extendsfdf2>
c000a086:	83 c4 10             	add    esp,0x10
c000a089:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a08d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a091:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a095:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a099:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a09d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a1:	e8 0a ac 01 00       	call   c0024cb0 <__muldf3>
c000a0a6:	83 c4 10             	add    esp,0x10
c000a0a9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ad:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b1:	52                   	push   edx
c000a0b2:	50                   	push   eax
c000a0b3:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0b7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0bb:	e8 73 a5 01 00       	call   c0024633 <__adddf3>
c000a0c0:	59                   	pop    ecx
c000a0c1:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a0c5:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a0c9:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a0cf:	e8 d3 b5 01 00       	call   c00256a7 <__extendsfdf2>
c000a0d4:	83 c4 10             	add    esp,0x10
c000a0d7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0db:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0eb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ef:	e8 bc ab 01 00       	call   c0024cb0 <__muldf3>
c000a0f4:	83 c4 10             	add    esp,0x10
c000a0f7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0fb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0ff:	52                   	push   edx
c000a100:	50                   	push   eax
c000a101:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a105:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a109:	e8 25 a5 01 00       	call   c0024633 <__adddf3>
c000a10e:	5f                   	pop    edi
c000a10f:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a113:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a117:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a11d:	e8 85 b5 01 00       	call   c00256a7 <__extendsfdf2>
c000a122:	83 c4 10             	add    esp,0x10
c000a125:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a129:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a12d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a131:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a135:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a139:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a13d:	e8 6e ab 01 00       	call   c0024cb0 <__muldf3>
c000a142:	83 c4 10             	add    esp,0x10
c000a145:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a149:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a14d:	52                   	push   edx
c000a14e:	50                   	push   eax
c000a14f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a153:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a157:	e8 d7 a4 01 00       	call   c0024633 <__adddf3>
c000a15c:	83 c4 10             	add    esp,0x10
c000a15f:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a163:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a167:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a16b:	85 db                	test   ebx,ebx
c000a16d:	0f 8f 36 fe ff ff    	jg     c0009fa9 <calc_output_quad+0x2b1>
c000a173:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a177:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a17b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a17f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a183:	e8 ab a4 01 00       	call   c0024633 <__adddf3>
c000a188:	83 c4 10             	add    esp,0x10
c000a18b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a18f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a193:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a197:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a19b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a19f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a3:	e8 08 ab 01 00       	call   c0024cb0 <__muldf3>
c000a1a8:	59                   	pop    ecx
c000a1a9:	5b                   	pop    ebx
c000a1aa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1ba:	e8 c4 b3 01 00       	call   c0025583 <__truncdfsf2>
c000a1bf:	83 c4 10             	add    esp,0x10
c000a1c2:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a1c9:	89 06                	mov    DWORD PTR [esi],eax
c000a1cb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1cf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1d3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1d7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1db:	e8 53 a4 01 00       	call   c0024633 <__adddf3>
c000a1e0:	83 c4 10             	add    esp,0x10
c000a1e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1fb:	e8 b0 aa 01 00       	call   c0024cb0 <__muldf3>
c000a200:	5e                   	pop    esi
c000a201:	5f                   	pop    edi
c000a202:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a206:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a20e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a212:	e8 6c b3 01 00       	call   c0025583 <__truncdfsf2>
c000a217:	83 c4 10             	add    esp,0x10
c000a21a:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a221:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a224:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a228:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a22c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a230:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a234:	e8 fa a3 01 00       	call   c0024633 <__adddf3>
c000a239:	83 c4 10             	add    esp,0x10
c000a23c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a240:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a248:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a24c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a254:	e8 57 aa 01 00       	call   c0024cb0 <__muldf3>
c000a259:	5d                   	pop    ebp
c000a25a:	59                   	pop    ecx
c000a25b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a25f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a263:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a267:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a26b:	e8 13 b3 01 00       	call   c0025583 <__truncdfsf2>
c000a270:	83 c4 10             	add    esp,0x10
c000a273:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a27a:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a27d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a281:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a285:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a289:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a28d:	e8 a1 a3 01 00       	call   c0024633 <__adddf3>
c000a292:	83 c4 10             	add    esp,0x10
c000a295:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a299:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a29d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ad:	e8 fe a9 01 00       	call   c0024cb0 <__muldf3>
c000a2b2:	5b                   	pop    ebx
c000a2b3:	5e                   	pop    esi
c000a2b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2b8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2c4:	e8 ba b2 01 00       	call   c0025583 <__truncdfsf2>
c000a2c9:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a2d0:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a2d3:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a2d9:	5b                   	pop    ebx
c000a2da:	5e                   	pop    esi
c000a2db:	5f                   	pop    edi
c000a2dc:	5d                   	pop    ebp
c000a2dd:	c3                   	ret    

c000a2de <calc_output_hex>:
c000a2de:	55                   	push   ebp
c000a2df:	89 cd                	mov    ebp,ecx
c000a2e1:	57                   	push   edi
c000a2e2:	56                   	push   esi
c000a2e3:	53                   	push   ebx
c000a2e4:	89 c3                	mov    ebx,eax
c000a2e6:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a2ec:	89 14 24             	mov    DWORD PTR [esp],edx
c000a2ef:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a2f6:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a2fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a301:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a305:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a308:	e8 6f f3 ff ff       	call   c000967c <int_to_fp>
c000a30d:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a310:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a314:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a317:	29 c8                	sub    eax,ecx
c000a319:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a31d:	99                   	cdq    
c000a31e:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a326:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a329:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a331:	0f af f8             	imul   edi,eax
c000a334:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a337:	01 cf                	add    edi,ecx
c000a339:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a33d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a340:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a344:	0f af c2             	imul   eax,edx
c000a347:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a34b:	29 c1                	sub    ecx,eax
c000a34d:	31 d2                	xor    edx,edx
c000a34f:	31 c0                	xor    eax,eax
c000a351:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a354:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a358:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a35c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a360:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a364:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a368:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a36c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a370:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a374:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a378:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a37c:	89 f8                	mov    eax,edi
c000a37e:	e8 07 f3 ff ff       	call   c000968a <fp_to_double>
c000a383:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a387:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a38b:	89 f8                	mov    eax,edi
c000a38d:	e8 ee f2 ff ff       	call   c0009680 <fp_to_int>
c000a392:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a396:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a399:	52                   	push   edx
c000a39a:	52                   	push   edx
c000a39b:	51                   	push   ecx
c000a39c:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a3a0:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3a7:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3ab:	e8 18 9c 01 00       	call   c0023fc8 <__subsf3>
c000a3b0:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3b3:	e8 ef b2 01 00       	call   c00256a7 <__extendsfdf2>
c000a3b8:	83 c4 10             	add    esp,0x10
c000a3bb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3bf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3cb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3cf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3d3:	e8 d8 a8 01 00       	call   c0024cb0 <__muldf3>
c000a3d8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a3e0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a3e3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a3e7:	e8 bb b2 01 00       	call   c00256a7 <__extendsfdf2>
c000a3ec:	83 c4 10             	add    esp,0x10
c000a3ef:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3f3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3f7:	52                   	push   edx
c000a3f8:	50                   	push   eax
c000a3f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a3fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a401:	e8 2d a2 01 00       	call   c0024633 <__adddf3>
c000a406:	59                   	pop    ecx
c000a407:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a40b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a40f:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a415:	e8 8d b2 01 00       	call   c00256a7 <__extendsfdf2>
c000a41a:	83 c4 10             	add    esp,0x10
c000a41d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a421:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a425:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a429:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a42d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a431:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a435:	e8 76 a8 01 00       	call   c0024cb0 <__muldf3>
c000a43a:	83 c4 10             	add    esp,0x10
c000a43d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a441:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a445:	52                   	push   edx
c000a446:	50                   	push   eax
c000a447:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a44b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a44f:	e8 df a1 01 00       	call   c0024633 <__adddf3>
c000a454:	59                   	pop    ecx
c000a455:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a459:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a45d:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a463:	e8 3f b2 01 00       	call   c00256a7 <__extendsfdf2>
c000a468:	83 c4 10             	add    esp,0x10
c000a46b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a46f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a473:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a477:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a47b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a47f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a483:	e8 28 a8 01 00       	call   c0024cb0 <__muldf3>
c000a488:	83 c4 10             	add    esp,0x10
c000a48b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a48f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a493:	52                   	push   edx
c000a494:	50                   	push   eax
c000a495:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a499:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a49d:	e8 91 a1 01 00       	call   c0024633 <__adddf3>
c000a4a2:	59                   	pop    ecx
c000a4a3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4a7:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4ab:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4b1:	e8 f1 b1 01 00       	call   c00256a7 <__extendsfdf2>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4cd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4d1:	e8 da a7 01 00       	call   c0024cb0 <__muldf3>
c000a4d6:	83 c4 10             	add    esp,0x10
c000a4d9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4dd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4e1:	52                   	push   edx
c000a4e2:	50                   	push   eax
c000a4e3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4e7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4eb:	e8 43 a1 01 00       	call   c0024633 <__adddf3>
c000a4f0:	59                   	pop    ecx
c000a4f1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a4f5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a4f9:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a4ff:	e8 a3 b1 01 00       	call   c00256a7 <__extendsfdf2>
c000a504:	83 c4 10             	add    esp,0x10
c000a507:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a50b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a513:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a517:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a51b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a51f:	e8 8c a7 01 00       	call   c0024cb0 <__muldf3>
c000a524:	83 c4 10             	add    esp,0x10
c000a527:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a52b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a52f:	52                   	push   edx
c000a530:	50                   	push   eax
c000a531:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a535:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a539:	e8 f5 a0 01 00       	call   c0024633 <__adddf3>
c000a53e:	59                   	pop    ecx
c000a53f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a543:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a547:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a54d:	e8 55 b1 01 00       	call   c00256a7 <__extendsfdf2>
c000a552:	83 c4 10             	add    esp,0x10
c000a555:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a559:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a55d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a561:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a565:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a569:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a56d:	e8 3e a7 01 00       	call   c0024cb0 <__muldf3>
c000a572:	83 c4 10             	add    esp,0x10
c000a575:	83 c6 18             	add    esi,0x18
c000a578:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a57c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a580:	52                   	push   edx
c000a581:	50                   	push   eax
c000a582:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a586:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a58a:	e8 a4 a0 01 00       	call   c0024633 <__adddf3>
c000a58f:	59                   	pop    ecx
c000a590:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a594:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a598:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a59e:	e8 04 b1 01 00       	call   c00256a7 <__extendsfdf2>
c000a5a3:	83 c4 10             	add    esp,0x10
c000a5a6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5aa:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5b6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5ba:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5be:	e8 ed a6 01 00       	call   c0024cb0 <__muldf3>
c000a5c3:	83 c4 10             	add    esp,0x10
c000a5c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ce:	52                   	push   edx
c000a5cf:	50                   	push   eax
c000a5d0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5d4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5d8:	e8 56 a0 01 00       	call   c0024633 <__adddf3>
c000a5dd:	83 c4 10             	add    esp,0x10
c000a5e0:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a5e4:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a5e8:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a5eb:	0f 89 8b fd ff ff    	jns    c000a37c <calc_output_hex+0x9e>
c000a5f1:	31 f6                	xor    esi,esi
c000a5f3:	31 ff                	xor    edi,edi
c000a5f5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a5f9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a5fc:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a600:	29 e9                	sub    ecx,ebp
c000a602:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a606:	29 c8                	sub    eax,ecx
c000a608:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a60b:	99                   	cdq    
c000a60c:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a610:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a613:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a617:	0f af e8             	imul   ebp,eax
c000a61a:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a61e:	40                   	inc    eax
c000a61f:	01 cd                	add    ebp,ecx
c000a621:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a626:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a62a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a62e:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a632:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a635:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a639:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a63d:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a641:	89 e8                	mov    eax,ebp
c000a643:	e8 42 f0 ff ff       	call   c000968a <fp_to_double>
c000a648:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a64c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a650:	89 e8                	mov    eax,ebp
c000a652:	e8 29 f0 ff ff       	call   c0009680 <fp_to_int>
c000a657:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a65b:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a65e:	52                   	push   edx
c000a65f:	52                   	push   edx
c000a660:	51                   	push   ecx
c000a661:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a668:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a66f:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a673:	e8 50 99 01 00       	call   c0023fc8 <__subsf3>
c000a678:	89 04 24             	mov    DWORD PTR [esp],eax
c000a67b:	e8 27 b0 01 00       	call   c00256a7 <__extendsfdf2>
c000a680:	83 c4 10             	add    esp,0x10
c000a683:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a687:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a68b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a693:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a697:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a69b:	e8 10 a6 01 00       	call   c0024cb0 <__muldf3>
c000a6a0:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6a7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6ab:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6ae:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6b2:	e8 f0 af 01 00       	call   c00256a7 <__extendsfdf2>
c000a6b7:	83 c4 10             	add    esp,0x10
c000a6ba:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6be:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6c2:	52                   	push   edx
c000a6c3:	50                   	push   eax
c000a6c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6cc:	e8 62 9f 01 00       	call   c0024633 <__adddf3>
c000a6d1:	59                   	pop    ecx
c000a6d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a6d6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a6da:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a6e0:	e8 c2 af 01 00       	call   c00256a7 <__extendsfdf2>
c000a6e5:	83 c4 10             	add    esp,0x10
c000a6e8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6ec:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6f8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6fc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a700:	e8 ab a5 01 00       	call   c0024cb0 <__muldf3>
c000a705:	83 c4 10             	add    esp,0x10
c000a708:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a70c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a710:	52                   	push   edx
c000a711:	50                   	push   eax
c000a712:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a716:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a71a:	e8 14 9f 01 00       	call   c0024633 <__adddf3>
c000a71f:	59                   	pop    ecx
c000a720:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a724:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a728:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a72e:	e8 74 af 01 00       	call   c00256a7 <__extendsfdf2>
c000a733:	83 c4 10             	add    esp,0x10
c000a736:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a73a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a73e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a742:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a746:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a74a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a74e:	e8 5d a5 01 00       	call   c0024cb0 <__muldf3>
c000a753:	83 c4 10             	add    esp,0x10
c000a756:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a75a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a75e:	52                   	push   edx
c000a75f:	50                   	push   eax
c000a760:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a764:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a768:	e8 c6 9e 01 00       	call   c0024633 <__adddf3>
c000a76d:	59                   	pop    ecx
c000a76e:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a772:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a776:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a77c:	e8 26 af 01 00       	call   c00256a7 <__extendsfdf2>
c000a781:	83 c4 10             	add    esp,0x10
c000a784:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a788:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a78c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a790:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a794:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a798:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a79c:	e8 0f a5 01 00       	call   c0024cb0 <__muldf3>
c000a7a1:	83 c4 10             	add    esp,0x10
c000a7a4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7a8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7ac:	52                   	push   edx
c000a7ad:	50                   	push   eax
c000a7ae:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7b2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7b6:	e8 78 9e 01 00       	call   c0024633 <__adddf3>
c000a7bb:	59                   	pop    ecx
c000a7bc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a7c0:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a7c4:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a7ca:	e8 d8 ae 01 00       	call   c00256a7 <__extendsfdf2>
c000a7cf:	83 c4 10             	add    esp,0x10
c000a7d2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7d6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7e2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7e6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7ea:	e8 c1 a4 01 00       	call   c0024cb0 <__muldf3>
c000a7ef:	83 c4 10             	add    esp,0x10
c000a7f2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7f6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7fa:	52                   	push   edx
c000a7fb:	50                   	push   eax
c000a7fc:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a800:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a804:	e8 2a 9e 01 00       	call   c0024633 <__adddf3>
c000a809:	59                   	pop    ecx
c000a80a:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a80e:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a812:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a818:	e8 8a ae 01 00       	call   c00256a7 <__extendsfdf2>
c000a81d:	83 c4 10             	add    esp,0x10
c000a820:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a824:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a828:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a82c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a830:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a834:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a838:	e8 73 a4 01 00       	call   c0024cb0 <__muldf3>
c000a83d:	83 c4 10             	add    esp,0x10
c000a840:	83 eb 18             	sub    ebx,0x18
c000a843:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a847:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a84b:	52                   	push   edx
c000a84c:	50                   	push   eax
c000a84d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a851:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a855:	e8 d9 9d 01 00       	call   c0024633 <__adddf3>
c000a85a:	59                   	pop    ecx
c000a85b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a85f:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a863:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a869:	e8 39 ae 01 00       	call   c00256a7 <__extendsfdf2>
c000a86e:	83 c4 10             	add    esp,0x10
c000a871:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a875:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a879:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a87d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a881:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a885:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a889:	e8 22 a4 01 00       	call   c0024cb0 <__muldf3>
c000a88e:	83 c4 10             	add    esp,0x10
c000a891:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a895:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a899:	52                   	push   edx
c000a89a:	50                   	push   eax
c000a89b:	57                   	push   edi
c000a89c:	56                   	push   esi
c000a89d:	e8 91 9d 01 00       	call   c0024633 <__adddf3>
c000a8a2:	83 c4 10             	add    esp,0x10
c000a8a5:	89 c6                	mov    esi,eax
c000a8a7:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8aa:	89 d7                	mov    edi,edx
c000a8ac:	85 ed                	test   ebp,ebp
c000a8ae:	0f 8f 8d fd ff ff    	jg     c000a641 <calc_output_hex+0x363>
c000a8b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8b8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8c4:	e8 6a 9d 01 00       	call   c0024633 <__adddf3>
c000a8c9:	83 c4 10             	add    esp,0x10
c000a8cc:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a8d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8db:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e3:	e8 c8 a3 01 00       	call   c0024cb0 <__muldf3>
c000a8e8:	59                   	pop    ecx
c000a8e9:	5b                   	pop    ebx
c000a8ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a8ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a8f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8f6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8fa:	e8 84 ac 01 00       	call   c0025583 <__truncdfsf2>
c000a8ff:	83 c4 10             	add    esp,0x10
c000a902:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a909:	89 03                	mov    DWORD PTR [ebx],eax
c000a90b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a90f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a913:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a917:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a91b:	e8 13 9d 01 00       	call   c0024633 <__adddf3>
c000a920:	83 c4 10             	add    esp,0x10
c000a923:	89 04 24             	mov    DWORD PTR [esp],eax
c000a926:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a92a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a92e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a932:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a936:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a93a:	e8 71 a3 01 00       	call   c0024cb0 <__muldf3>
c000a93f:	5d                   	pop    ebp
c000a940:	59                   	pop    ecx
c000a941:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a945:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a949:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a94d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a951:	e8 2d ac 01 00       	call   c0025583 <__truncdfsf2>
c000a956:	83 c4 10             	add    esp,0x10
c000a959:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a960:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a963:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a967:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a96b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a96f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a973:	e8 bb 9c 01 00       	call   c0024633 <__adddf3>
c000a978:	83 c4 10             	add    esp,0x10
c000a97b:	89 04 24             	mov    DWORD PTR [esp],eax
c000a97e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a982:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a986:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a98a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a98e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a992:	e8 19 a3 01 00       	call   c0024cb0 <__muldf3>
c000a997:	5b                   	pop    ebx
c000a998:	5d                   	pop    ebp
c000a999:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a99d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9a1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a9:	e8 d5 ab 01 00       	call   c0025583 <__truncdfsf2>
c000a9ae:	83 c4 10             	add    esp,0x10
c000a9b1:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9b8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000a9bb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9bf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9cb:	e8 63 9c 01 00       	call   c0024633 <__adddf3>
c000a9d0:	83 c4 10             	add    esp,0x10
c000a9d3:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9d6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9de:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9e2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9e6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ea:	e8 c1 a2 01 00       	call   c0024cb0 <__muldf3>
c000a9ef:	59                   	pop    ecx
c000a9f0:	5b                   	pop    ebx
c000a9f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9f9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9fd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa01:	e8 7d ab 01 00       	call   c0025583 <__truncdfsf2>
c000aa06:	83 c4 10             	add    esp,0x10
c000aa09:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa10:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa13:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa17:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa1b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa1f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa23:	e8 0b 9c 01 00       	call   c0024633 <__adddf3>
c000aa28:	83 c4 10             	add    esp,0x10
c000aa2b:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa2e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa3a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa3e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa42:	e8 69 a2 01 00       	call   c0024cb0 <__muldf3>
c000aa47:	5d                   	pop    ebp
c000aa48:	59                   	pop    ecx
c000aa49:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa51:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa55:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa59:	e8 25 ab 01 00       	call   c0025583 <__truncdfsf2>
c000aa5e:	83 c4 10             	add    esp,0x10
c000aa61:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa68:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aa6b:	57                   	push   edi
c000aa6c:	56                   	push   esi
c000aa6d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa71:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa75:	e8 b9 9b 01 00       	call   c0024633 <__adddf3>
c000aa7a:	83 c4 10             	add    esp,0x10
c000aa7d:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa80:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa84:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa94:	e8 17 a2 01 00       	call   c0024cb0 <__muldf3>
c000aa99:	5b                   	pop    ebx
c000aa9a:	5e                   	pop    esi
c000aa9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aaa3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaa7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaab:	e8 d3 aa 01 00       	call   c0025583 <__truncdfsf2>
c000aab0:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aab7:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aaba:	81 c4 9c 00 00 00    	add    esp,0x9c
c000aac0:	5b                   	pop    ebx
c000aac1:	5e                   	pop    esi
c000aac2:	5f                   	pop    edi
c000aac3:	5d                   	pop    ebp
c000aac4:	c3                   	ret    

c000aac5 <sinc_reset>:
c000aac5:	56                   	push   esi
c000aac6:	53                   	push   ebx
c000aac7:	51                   	push   ecx
c000aac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aacc:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000aacf:	85 db                	test   ebx,ebx
c000aad1:	74 59                	je     c000ab2c <sinc_reset+0x67>
c000aad3:	31 d2                	xor    edx,edx
c000aad5:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000aadc:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000aadf:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000aae2:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000aae9:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000aaf0:	31 c0                	xor    eax,eax
c000aaf2:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000aaf8:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000aafb:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000aafe:	52                   	push   edx
c000aaff:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab02:	c1 e0 02             	shl    eax,0x2
c000ab05:	50                   	push   eax
c000ab06:	6a 00                	push   0x0
c000ab08:	56                   	push   esi
c000ab09:	e8 6f 5b ff ff       	call   c000067d <memset>
c000ab0e:	83 c4 0c             	add    esp,0xc
c000ab11:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab14:	c1 e0 02             	shl    eax,0x2
c000ab17:	50                   	push   eax
c000ab18:	68 aa 00 00 00       	push   0xaa
c000ab1d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab20:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab23:	50                   	push   eax
c000ab24:	e8 54 5b ff ff       	call   c000067d <memset>
c000ab29:	83 c4 10             	add    esp,0x10
c000ab2c:	58                   	pop    eax
c000ab2d:	5b                   	pop    ebx
c000ab2e:	5e                   	pop    esi
c000ab2f:	c3                   	ret    

c000ab30 <calc_output_multi>:
c000ab30:	55                   	push   ebp
c000ab31:	57                   	push   edi
c000ab32:	56                   	push   esi
c000ab33:	89 c6                	mov    esi,eax
c000ab35:	53                   	push   ebx
c000ab36:	83 ec 4c             	sub    esp,0x4c
c000ab39:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab3d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab41:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab45:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab49:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab4d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab51:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab55:	8d 46 44             	lea    eax,[esi+0x44]
c000ab58:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab5b:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ab61:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ab65:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ab68:	e8 0f eb ff ff       	call   c000967c <int_to_fp>
c000ab6d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ab70:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ab74:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ab78:	99                   	cdq    
c000ab79:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ab7d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ab81:	0f af d0             	imul   edx,eax
c000ab84:	0f af c3             	imul   eax,ebx
c000ab87:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ab8b:	29 c1                	sub    ecx,eax
c000ab8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ab91:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ab95:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000ab9c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000aba0:	57                   	push   edi
c000aba1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aba5:	6a 00                	push   0x0
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	e8 cd 5a ff ff       	call   c000067d <memset>
c000abb0:	83 c4 10             	add    esp,0x10
c000abb3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abb7:	89 df                	mov    edi,ebx
c000abb9:	e8 cc ea ff ff       	call   c000968a <fp_to_double>
c000abbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000abc2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000abc6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abca:	e8 b1 ea ff ff       	call   c0009680 <fp_to_int>
c000abcf:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000abd2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000abd5:	51                   	push   ecx
c000abd6:	51                   	push   ecx
c000abd7:	55                   	push   ebp
c000abd8:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000abdc:	e8 e7 93 01 00       	call   c0023fc8 <__subsf3>
c000abe1:	89 04 24             	mov    DWORD PTR [esp],eax
c000abe4:	e8 be aa 01 00       	call   c00256a7 <__extendsfdf2>
c000abe9:	83 c4 10             	add    esp,0x10
c000abec:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000abf0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000abf4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abf8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abfc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac00:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac04:	e8 a7 a0 01 00       	call   c0024cb0 <__muldf3>
c000ac09:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac0c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac10:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac14:	e8 8e aa 01 00       	call   c00256a7 <__extendsfdf2>
c000ac19:	83 c4 10             	add    esp,0x10
c000ac1c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac20:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac24:	52                   	push   edx
c000ac25:	50                   	push   eax
c000ac26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac2e:	e8 00 9a 01 00       	call   c0024633 <__adddf3>
c000ac33:	83 c4 10             	add    esp,0x10
c000ac36:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac3a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac3e:	89 f8                	mov    eax,edi
c000ac40:	b9 08 00 00 00       	mov    ecx,0x8
c000ac45:	99                   	cdq    
c000ac46:	f7 f9                	idiv   ecx
c000ac48:	4a                   	dec    edx
c000ac49:	83 fa 06             	cmp    edx,0x6
c000ac4c:	77 07                	ja     c000ac55 <calc_output_multi+0x125>
c000ac4e:	ff 24 95 c4 6d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd923c]
c000ac55:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac58:	4f                   	dec    edi
c000ac59:	83 ec 0c             	sub    esp,0xc
c000ac5c:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ac5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac63:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ac6a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ac6e:	e8 34 aa 01 00       	call   c00256a7 <__extendsfdf2>
c000ac73:	83 c4 10             	add    esp,0x10
c000ac76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac7a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac8e:	e8 1d a0 01 00       	call   c0024cb0 <__muldf3>
c000ac93:	83 c4 10             	add    esp,0x10
c000ac96:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac9a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac9e:	52                   	push   edx
c000ac9f:	50                   	push   eax
c000aca0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aca3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aca6:	e8 88 99 01 00       	call   c0024633 <__adddf3>
c000acab:	83 c4 10             	add    esp,0x10
c000acae:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acb1:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000acb4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acb7:	4f                   	dec    edi
c000acb8:	83 ec 0c             	sub    esp,0xc
c000acbb:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000acbe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acc2:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000acc9:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000accd:	e8 d5 a9 01 00       	call   c00256a7 <__extendsfdf2>
c000acd2:	83 c4 10             	add    esp,0x10
c000acd5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acd9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acdd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ace1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ace5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ace9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aced:	e8 be 9f 01 00       	call   c0024cb0 <__muldf3>
c000acf2:	83 c4 10             	add    esp,0x10
c000acf5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acf9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acfd:	52                   	push   edx
c000acfe:	50                   	push   eax
c000acff:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad02:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad05:	e8 29 99 01 00       	call   c0024633 <__adddf3>
c000ad0a:	83 c4 10             	add    esp,0x10
c000ad0d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad10:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad13:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad16:	4f                   	dec    edi
c000ad17:	83 ec 0c             	sub    esp,0xc
c000ad1a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad1d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad21:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad28:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad2c:	e8 76 a9 01 00       	call   c00256a7 <__extendsfdf2>
c000ad31:	83 c4 10             	add    esp,0x10
c000ad34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad44:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad48:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad4c:	e8 5f 9f 01 00       	call   c0024cb0 <__muldf3>
c000ad51:	83 c4 10             	add    esp,0x10
c000ad54:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad58:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad5c:	52                   	push   edx
c000ad5d:	50                   	push   eax
c000ad5e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad61:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad64:	e8 ca 98 01 00       	call   c0024633 <__adddf3>
c000ad69:	83 c4 10             	add    esp,0x10
c000ad6c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad6f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad72:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad75:	4f                   	dec    edi
c000ad76:	83 ec 0c             	sub    esp,0xc
c000ad79:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad80:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad87:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad8b:	e8 17 a9 01 00       	call   c00256a7 <__extendsfdf2>
c000ad90:	83 c4 10             	add    esp,0x10
c000ad93:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad97:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ada3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ada7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adab:	e8 00 9f 01 00       	call   c0024cb0 <__muldf3>
c000adb0:	83 c4 10             	add    esp,0x10
c000adb3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adb7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adbb:	52                   	push   edx
c000adbc:	50                   	push   eax
c000adbd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000adc0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000adc3:	e8 6b 98 01 00       	call   c0024633 <__adddf3>
c000adc8:	83 c4 10             	add    esp,0x10
c000adcb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000adce:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000add1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000add4:	4f                   	dec    edi
c000add5:	83 ec 0c             	sub    esp,0xc
c000add8:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000addb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000addf:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ade6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000adea:	e8 b8 a8 01 00       	call   c00256a7 <__extendsfdf2>
c000adef:	83 c4 10             	add    esp,0x10
c000adf2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adf6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae02:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae06:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae0a:	e8 a1 9e 01 00       	call   c0024cb0 <__muldf3>
c000ae0f:	83 c4 10             	add    esp,0x10
c000ae12:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae16:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae1a:	52                   	push   edx
c000ae1b:	50                   	push   eax
c000ae1c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae1f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae22:	e8 0c 98 01 00       	call   c0024633 <__adddf3>
c000ae27:	83 c4 10             	add    esp,0x10
c000ae2a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae2d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae30:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae33:	4f                   	dec    edi
c000ae34:	83 ec 0c             	sub    esp,0xc
c000ae37:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae3a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae3e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae45:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae49:	e8 59 a8 01 00       	call   c00256a7 <__extendsfdf2>
c000ae4e:	83 c4 10             	add    esp,0x10
c000ae51:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae55:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae59:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae61:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae65:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae69:	e8 42 9e 01 00       	call   c0024cb0 <__muldf3>
c000ae6e:	83 c4 10             	add    esp,0x10
c000ae71:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae75:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae79:	52                   	push   edx
c000ae7a:	50                   	push   eax
c000ae7b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae7e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae81:	e8 ad 97 01 00       	call   c0024633 <__adddf3>
c000ae86:	83 c4 10             	add    esp,0x10
c000ae89:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae8c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae8f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae92:	4f                   	dec    edi
c000ae93:	83 ec 0c             	sub    esp,0xc
c000ae96:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae9d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aea4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aea8:	e8 fa a7 01 00       	call   c00256a7 <__extendsfdf2>
c000aead:	83 c4 10             	add    esp,0x10
c000aeb0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aeb4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aeb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aebc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aec8:	e8 e3 9d 01 00       	call   c0024cb0 <__muldf3>
c000aecd:	83 c4 10             	add    esp,0x10
c000aed0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aed8:	52                   	push   edx
c000aed9:	50                   	push   eax
c000aeda:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aedd:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aee0:	e8 4e 97 01 00       	call   c0024633 <__adddf3>
c000aee5:	83 c4 10             	add    esp,0x10
c000aee8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aeeb:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aeee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aef1:	4f                   	dec    edi
c000aef2:	83 ec 0c             	sub    esp,0xc
c000aef5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aef8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aefc:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af03:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af07:	e8 9b a7 01 00       	call   c00256a7 <__extendsfdf2>
c000af0c:	83 c4 10             	add    esp,0x10
c000af0f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af13:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af23:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af27:	e8 84 9d 01 00       	call   c0024cb0 <__muldf3>
c000af2c:	83 c4 10             	add    esp,0x10
c000af2f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af33:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af37:	52                   	push   edx
c000af38:	50                   	push   eax
c000af39:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af3c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af3f:	e8 ef 96 01 00       	call   c0024633 <__adddf3>
c000af44:	83 c4 10             	add    esp,0x10
c000af47:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af4a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af4d:	85 ff                	test   edi,edi
c000af4f:	0f 8f e9 fc ff ff    	jg     c000ac3e <calc_output_multi+0x10e>
c000af55:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000af59:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000af5d:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000af61:	0f 89 4c fc ff ff    	jns    c000abb3 <calc_output_multi+0x83>
c000af67:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000af6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000af6f:	29 c8                	sub    eax,ecx
c000af71:	99                   	cdq    
c000af72:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000af76:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000af7a:	0f af d0             	imul   edx,eax
c000af7d:	40                   	inc    eax
c000af7e:	01 d1                	add    ecx,edx
c000af80:	0f af c3             	imul   eax,ebx
c000af83:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000af87:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000af8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af8e:	55                   	push   ebp
c000af8f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000af93:	6a 00                	push   0x0
c000af95:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000af99:	e8 df 56 ff ff       	call   c000067d <memset>
c000af9e:	83 c4 10             	add    esp,0x10
c000afa1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afa5:	e8 e0 e6 ff ff       	call   c000968a <fp_to_double>
c000afaa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000afb2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afb6:	e8 c5 e6 ff ff       	call   c0009680 <fp_to_int>
c000afbb:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000afbe:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000afc1:	57                   	push   edi
c000afc2:	57                   	push   edi
c000afc3:	89 df                	mov    edi,ebx
c000afc5:	55                   	push   ebp
c000afc6:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000afca:	e8 f9 8f 01 00       	call   c0023fc8 <__subsf3>
c000afcf:	89 04 24             	mov    DWORD PTR [esp],eax
c000afd2:	e8 d0 a6 01 00       	call   c00256a7 <__extendsfdf2>
c000afd7:	83 c4 10             	add    esp,0x10
c000afda:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000afde:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000afe2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afe6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aff2:	e8 b9 9c 01 00       	call   c0024cb0 <__muldf3>
c000aff7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000affa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000affe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b002:	e8 a0 a6 01 00       	call   c00256a7 <__extendsfdf2>
c000b007:	83 c4 10             	add    esp,0x10
c000b00a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b00e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b012:	52                   	push   edx
c000b013:	50                   	push   eax
c000b014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b018:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b01c:	e8 12 96 01 00       	call   c0024633 <__adddf3>
c000b021:	83 c4 10             	add    esp,0x10
c000b024:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b028:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b02c:	89 f8                	mov    eax,edi
c000b02e:	b9 08 00 00 00       	mov    ecx,0x8
c000b033:	99                   	cdq    
c000b034:	f7 f9                	idiv   ecx
c000b036:	4a                   	dec    edx
c000b037:	83 fa 06             	cmp    edx,0x6
c000b03a:	77 07                	ja     c000b043 <calc_output_multi+0x513>
c000b03c:	ff 24 95 e0 6d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9220]
c000b043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b047:	4f                   	dec    edi
c000b048:	83 ec 0c             	sub    esp,0xc
c000b04b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b04e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b052:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b059:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b05d:	e8 45 a6 01 00       	call   c00256a7 <__extendsfdf2>
c000b062:	83 c4 10             	add    esp,0x10
c000b065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b06d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b071:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b075:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b079:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b07d:	e8 2e 9c 01 00       	call   c0024cb0 <__muldf3>
c000b082:	83 c4 10             	add    esp,0x10
c000b085:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b089:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b08d:	52                   	push   edx
c000b08e:	50                   	push   eax
c000b08f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b092:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b095:	e8 99 95 01 00       	call   c0024633 <__adddf3>
c000b09a:	83 c4 10             	add    esp,0x10
c000b09d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0a0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0a7:	4f                   	dec    edi
c000b0a8:	83 ec 0c             	sub    esp,0xc
c000b0ab:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0b2:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0b9:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0bd:	e8 e5 a5 01 00       	call   c00256a7 <__extendsfdf2>
c000b0c2:	83 c4 10             	add    esp,0x10
c000b0c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0dd:	e8 ce 9b 01 00       	call   c0024cb0 <__muldf3>
c000b0e2:	83 c4 10             	add    esp,0x10
c000b0e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0ed:	52                   	push   edx
c000b0ee:	50                   	push   eax
c000b0ef:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0f2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0f5:	e8 39 95 01 00       	call   c0024633 <__adddf3>
c000b0fa:	83 c4 10             	add    esp,0x10
c000b0fd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b100:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b103:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b107:	4f                   	dec    edi
c000b108:	83 ec 0c             	sub    esp,0xc
c000b10b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b10e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b112:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b119:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b11d:	e8 85 a5 01 00       	call   c00256a7 <__extendsfdf2>
c000b122:	83 c4 10             	add    esp,0x10
c000b125:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b129:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b12d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b131:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b135:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b139:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b13d:	e8 6e 9b 01 00       	call   c0024cb0 <__muldf3>
c000b142:	83 c4 10             	add    esp,0x10
c000b145:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b149:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b14d:	52                   	push   edx
c000b14e:	50                   	push   eax
c000b14f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b152:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b155:	e8 d9 94 01 00       	call   c0024633 <__adddf3>
c000b15a:	83 c4 10             	add    esp,0x10
c000b15d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b160:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b163:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b167:	4f                   	dec    edi
c000b168:	83 ec 0c             	sub    esp,0xc
c000b16b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b16e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b172:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b179:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b17d:	e8 25 a5 01 00       	call   c00256a7 <__extendsfdf2>
c000b182:	83 c4 10             	add    esp,0x10
c000b185:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b189:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b18d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b191:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b195:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b199:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b19d:	e8 0e 9b 01 00       	call   c0024cb0 <__muldf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1ad:	52                   	push   edx
c000b1ae:	50                   	push   eax
c000b1af:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1b2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1b5:	e8 79 94 01 00       	call   c0024633 <__adddf3>
c000b1ba:	83 c4 10             	add    esp,0x10
c000b1bd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1c0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1c7:	4f                   	dec    edi
c000b1c8:	83 ec 0c             	sub    esp,0xc
c000b1cb:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1d2:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1d9:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1dd:	e8 c5 a4 01 00       	call   c00256a7 <__extendsfdf2>
c000b1e2:	83 c4 10             	add    esp,0x10
c000b1e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1fd:	e8 ae 9a 01 00       	call   c0024cb0 <__muldf3>
c000b202:	83 c4 10             	add    esp,0x10
c000b205:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b209:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b20d:	52                   	push   edx
c000b20e:	50                   	push   eax
c000b20f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b212:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b215:	e8 19 94 01 00       	call   c0024633 <__adddf3>
c000b21a:	83 c4 10             	add    esp,0x10
c000b21d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b220:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b223:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b227:	4f                   	dec    edi
c000b228:	83 ec 0c             	sub    esp,0xc
c000b22b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b22e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b232:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b239:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b23d:	e8 65 a4 01 00       	call   c00256a7 <__extendsfdf2>
c000b242:	83 c4 10             	add    esp,0x10
c000b245:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b249:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b24d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b251:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b255:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b259:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b25d:	e8 4e 9a 01 00       	call   c0024cb0 <__muldf3>
c000b262:	83 c4 10             	add    esp,0x10
c000b265:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b269:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b26d:	52                   	push   edx
c000b26e:	50                   	push   eax
c000b26f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b272:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b275:	e8 b9 93 01 00       	call   c0024633 <__adddf3>
c000b27a:	83 c4 10             	add    esp,0x10
c000b27d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b280:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b283:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b287:	4f                   	dec    edi
c000b288:	83 ec 0c             	sub    esp,0xc
c000b28b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b28e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b292:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b299:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b29d:	e8 05 a4 01 00       	call   c00256a7 <__extendsfdf2>
c000b2a2:	83 c4 10             	add    esp,0x10
c000b2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2bd:	e8 ee 99 01 00       	call   c0024cb0 <__muldf3>
c000b2c2:	83 c4 10             	add    esp,0x10
c000b2c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cd:	52                   	push   edx
c000b2ce:	50                   	push   eax
c000b2cf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2d2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2d5:	e8 59 93 01 00       	call   c0024633 <__adddf3>
c000b2da:	83 c4 10             	add    esp,0x10
c000b2dd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2e0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2e7:	4f                   	dec    edi
c000b2e8:	83 ec 0c             	sub    esp,0xc
c000b2eb:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2f2:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2f9:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2fd:	e8 a5 a3 01 00       	call   c00256a7 <__extendsfdf2>
c000b302:	83 c4 10             	add    esp,0x10
c000b305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b30d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b311:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b315:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b319:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b31d:	e8 8e 99 01 00       	call   c0024cb0 <__muldf3>
c000b322:	83 c4 10             	add    esp,0x10
c000b325:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b329:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32d:	52                   	push   edx
c000b32e:	50                   	push   eax
c000b32f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b332:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b335:	e8 f9 92 01 00       	call   c0024633 <__adddf3>
c000b33a:	83 c4 10             	add    esp,0x10
c000b33d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b340:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b343:	85 ff                	test   edi,edi
c000b345:	0f 8f e1 fc ff ff    	jg     c000b02c <calc_output_multi+0x4fc>
c000b34b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b34f:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b353:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b357:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b35c:	0f 8f 3f fc ff ff    	jg     c000afa1 <calc_output_multi+0x471>
c000b362:	be 08 00 00 00       	mov    esi,0x8
c000b367:	89 d8                	mov    eax,ebx
c000b369:	99                   	cdq    
c000b36a:	f7 fe                	idiv   esi
c000b36c:	4a                   	dec    edx
c000b36d:	83 fa 06             	cmp    edx,0x6
c000b370:	77 07                	ja     c000b379 <calc_output_multi+0x849>
c000b372:	ff 24 95 fc 6d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9204]
c000b379:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b37d:	4b                   	dec    ebx
c000b37e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b382:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b385:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b389:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b38d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b390:	e8 9e 92 01 00       	call   c0024633 <__adddf3>
c000b395:	83 c4 10             	add    esp,0x10
c000b398:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b39c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b0:	e8 fb 98 01 00       	call   c0024cb0 <__muldf3>
c000b3b5:	5d                   	pop    ebp
c000b3b6:	59                   	pop    ecx
c000b3b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b3bb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3c7:	e8 b7 a1 01 00       	call   c0025583 <__truncdfsf2>
c000b3cc:	83 c4 10             	add    esp,0x10
c000b3cf:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b3d3:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b3d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3da:	4b                   	dec    ebx
c000b3db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3e6:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3ea:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3ed:	e8 41 92 01 00       	call   c0024633 <__adddf3>
c000b3f2:	83 c4 10             	add    esp,0x10
c000b3f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b401:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b405:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b409:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b40d:	e8 9e 98 01 00       	call   c0024cb0 <__muldf3>
c000b412:	59                   	pop    ecx
c000b413:	5f                   	pop    edi
c000b414:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b418:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b41c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b420:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b424:	e8 5a a1 01 00       	call   c0025583 <__truncdfsf2>
c000b429:	83 c4 10             	add    esp,0x10
c000b42c:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b430:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b433:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b437:	4b                   	dec    ebx
c000b438:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b43c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b43f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b443:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b447:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b44a:	e8 e4 91 01 00       	call   c0024633 <__adddf3>
c000b44f:	83 c4 10             	add    esp,0x10
c000b452:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b456:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b45a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b45e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b462:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b466:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b46a:	e8 41 98 01 00       	call   c0024cb0 <__muldf3>
c000b46f:	5f                   	pop    edi
c000b470:	5d                   	pop    ebp
c000b471:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b475:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b47d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b481:	e8 fd a0 01 00       	call   c0025583 <__truncdfsf2>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b48d:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b490:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b494:	4b                   	dec    ebx
c000b495:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b499:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b49c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4a0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4a4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4a7:	e8 87 91 01 00       	call   c0024633 <__adddf3>
c000b4ac:	83 c4 10             	add    esp,0x10
c000b4af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4c7:	e8 e4 97 01 00       	call   c0024cb0 <__muldf3>
c000b4cc:	5d                   	pop    ebp
c000b4cd:	59                   	pop    ecx
c000b4ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4de:	e8 a0 a0 01 00       	call   c0025583 <__truncdfsf2>
c000b4e3:	83 c4 10             	add    esp,0x10
c000b4e6:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4ea:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4f1:	4b                   	dec    ebx
c000b4f2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4f6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4fd:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b501:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b504:	e8 2a 91 01 00       	call   c0024633 <__adddf3>
c000b509:	83 c4 10             	add    esp,0x10
c000b50c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b510:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b518:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b51c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b524:	e8 87 97 01 00       	call   c0024cb0 <__muldf3>
c000b529:	59                   	pop    ecx
c000b52a:	5f                   	pop    edi
c000b52b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b52f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b533:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b537:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b53b:	e8 43 a0 01 00       	call   c0025583 <__truncdfsf2>
c000b540:	83 c4 10             	add    esp,0x10
c000b543:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b547:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b54a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b54e:	4b                   	dec    ebx
c000b54f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b553:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b556:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b55a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b55e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b561:	e8 cd 90 01 00       	call   c0024633 <__adddf3>
c000b566:	83 c4 10             	add    esp,0x10
c000b569:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b56d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b579:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b57d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b581:	e8 2a 97 01 00       	call   c0024cb0 <__muldf3>
c000b586:	5f                   	pop    edi
c000b587:	5d                   	pop    ebp
c000b588:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b58c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b590:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b594:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b598:	e8 e6 9f 01 00       	call   c0025583 <__truncdfsf2>
c000b59d:	83 c4 10             	add    esp,0x10
c000b5a0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5a4:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5ab:	4b                   	dec    ebx
c000b5ac:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5b7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5bb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5be:	e8 70 90 01 00       	call   c0024633 <__adddf3>
c000b5c3:	83 c4 10             	add    esp,0x10
c000b5c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5de:	e8 cd 96 01 00       	call   c0024cb0 <__muldf3>
c000b5e3:	5d                   	pop    ebp
c000b5e4:	59                   	pop    ecx
c000b5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5f5:	e8 89 9f 01 00       	call   c0025583 <__truncdfsf2>
c000b5fa:	83 c4 10             	add    esp,0x10
c000b5fd:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b601:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b608:	4b                   	dec    ebx
c000b609:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b610:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b614:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b618:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b61b:	e8 13 90 01 00       	call   c0024633 <__adddf3>
c000b620:	83 c4 10             	add    esp,0x10
c000b623:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b627:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b62f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b633:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b637:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b63b:	e8 70 96 01 00       	call   c0024cb0 <__muldf3>
c000b640:	59                   	pop    ecx
c000b641:	5f                   	pop    edi
c000b642:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b646:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b64a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b652:	e8 2c 9f 01 00       	call   c0025583 <__truncdfsf2>
c000b657:	83 c4 10             	add    esp,0x10
c000b65a:	85 db                	test   ebx,ebx
c000b65c:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b660:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b663:	0f 8f fe fc ff ff    	jg     c000b367 <calc_output_multi+0x837>
c000b669:	83 c4 4c             	add    esp,0x4c
c000b66c:	5b                   	pop    ebx
c000b66d:	5e                   	pop    esi
c000b66e:	5f                   	pop    edi
c000b66f:	5d                   	pop    ebp
c000b670:	c3                   	ret    

c000b671 <double_to_fp>:
c000b671:	83 ec 0c             	sub    esp,0xc
c000b674:	68 00 00 b0 40       	push   0x40b00000
c000b679:	6a 00                	push   0x0
c000b67b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b67f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b683:	e8 28 96 01 00       	call   c0024cb0 <__muldf3>
c000b688:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b68c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b690:	83 c4 1c             	add    esp,0x1c
c000b693:	e9 98 a0 01 00       	jmp    c0025730 <lrint>

c000b698 <prepare_data>:
c000b698:	55                   	push   ebp
c000b699:	57                   	push   edi
c000b69a:	56                   	push   esi
c000b69b:	53                   	push   ebx
c000b69c:	83 ec 1c             	sub    esp,0x1c
c000b69f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b6a3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b6a7:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b6ab:	0f 89 57 01 00 00    	jns    c000b808 <prepare_data+0x170>
c000b6b1:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b6b4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6b7:	85 d2                	test   edx,edx
c000b6b9:	75 0d                	jne    c000b6c8 <prepare_data+0x30>
c000b6bb:	8d 14 36             	lea    edx,[esi+esi*1]
c000b6be:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b6c1:	29 d0                	sub    eax,edx
c000b6c3:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b6c6:	eb 44                	jmp    c000b70c <prepare_data+0x74>
c000b6c8:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b6cb:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b6ce:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b6d1:	39 c1                	cmp    ecx,eax
c000b6d3:	7d 04                	jge    c000b6d9 <prepare_data+0x41>
c000b6d5:	29 d0                	sub    eax,edx
c000b6d7:	eb 2d                	jmp    c000b706 <prepare_data+0x6e>
c000b6d9:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b6df:	29 d7                	sub    edi,edx
c000b6e1:	01 f7                	add    edi,esi
c000b6e3:	51                   	push   ecx
c000b6e4:	29 f2                	sub    edx,esi
c000b6e6:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b6ed:	8d 14 90             	lea    edx,[eax+edx*4]
c000b6f0:	51                   	push   ecx
c000b6f1:	52                   	push   edx
c000b6f2:	50                   	push   eax
c000b6f3:	e8 17 4f ff ff       	call   c000060f <memmove>
c000b6f8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6fb:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b6fe:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b701:	29 f0                	sub    eax,esi
c000b703:	83 c4 10             	add    esp,0x10
c000b706:	29 f0                	sub    eax,esi
c000b708:	79 02                	jns    c000b70c <prepare_data+0x74>
c000b70a:	31 c0                	xor    eax,eax
c000b70c:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b70f:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b712:	29 ef                	sub    edi,ebp
c000b714:	39 c7                	cmp    edi,eax
c000b716:	7e 02                	jle    c000b71a <prepare_data+0x82>
c000b718:	89 c7                	mov    edi,eax
c000b71a:	89 f8                	mov    eax,edi
c000b71c:	99                   	cdq    
c000b71d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b720:	b8 15 00 00 00       	mov    eax,0x15
c000b725:	29 d7                	sub    edi,edx
c000b727:	0f 88 dd 00 00 00    	js     c000b80a <prepare_data+0x172>
c000b72d:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b730:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b733:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b736:	0f 8f ce 00 00 00    	jg     c000b80a <prepare_data+0x172>
c000b73c:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b742:	50                   	push   eax
c000b743:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b74a:	50                   	push   eax
c000b74b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b74f:	8b 00                	mov    eax,DWORD PTR [eax]
c000b751:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b754:	50                   	push   eax
c000b755:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b758:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b75c:	50                   	push   eax
c000b75d:	e8 e5 4e ff ff       	call   c0000647 <memcpy>
c000b762:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b765:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b768:	01 fd                	add    ebp,edi
c000b76a:	01 f9                	add    ecx,edi
c000b76c:	83 c4 10             	add    esp,0x10
c000b76f:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b772:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b775:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b778:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b77c:	0f 85 86 00 00 00    	jne    c000b808 <prepare_data+0x170>
c000b782:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b785:	89 e8                	mov    eax,ebp
c000b787:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b78a:	29 c8                	sub    eax,ecx
c000b78c:	39 f8                	cmp    eax,edi
c000b78e:	7d 78                	jge    c000b808 <prepare_data+0x170>
c000b790:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b794:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b798:	74 6e                	je     c000b808 <prepare_data+0x170>
c000b79a:	8d 7e 04             	lea    edi,[esi+0x4]
c000b79d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b7a1:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b7a4:	29 ef                	sub    edi,ebp
c000b7a6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b7aa:	7c 29                	jl     c000b7d5 <prepare_data+0x13d>
c000b7ac:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7af:	29 f1                	sub    ecx,esi
c000b7b1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b7b8:	55                   	push   ebp
c000b7b9:	50                   	push   eax
c000b7ba:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b7bd:	50                   	push   eax
c000b7be:	52                   	push   edx
c000b7bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b7c3:	e8 47 4e ff ff       	call   c000060f <memmove>
c000b7c8:	83 c4 10             	add    esp,0x10
c000b7cb:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7ce:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b7d1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7d5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b7d8:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b7db:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b7de:	83 c6 05             	add    esi,0x5
c000b7e1:	78 07                	js     c000b7ea <prepare_data+0x152>
c000b7e3:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7e6:	39 cf                	cmp    edi,ecx
c000b7e8:	7e 04                	jle    c000b7ee <prepare_data+0x156>
c000b7ea:	89 ce                	mov    esi,ecx
c000b7ec:	29 c6                	sub    esi,eax
c000b7ee:	8d 04 82             	lea    eax,[edx+eax*4]
c000b7f1:	51                   	push   ecx
c000b7f2:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b7f9:	51                   	push   ecx
c000b7fa:	6a 00                	push   0x0
c000b7fc:	50                   	push   eax
c000b7fd:	e8 7b 4e ff ff       	call   c000067d <memset>
c000b802:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b805:	83 c4 10             	add    esp,0x10
c000b808:	31 c0                	xor    eax,eax
c000b80a:	83 c4 1c             	add    esp,0x1c
c000b80d:	5b                   	pop    ebx
c000b80e:	5e                   	pop    esi
c000b80f:	5f                   	pop    edi
c000b810:	5d                   	pop    ebp
c000b811:	c3                   	ret    

c000b812 <sinc_multichan_vari_process>:
c000b812:	55                   	push   ebp
c000b813:	ba 05 00 00 00       	mov    edx,0x5
c000b818:	57                   	push   edi
c000b819:	56                   	push   esi
c000b81a:	53                   	push   ebx
c000b81b:	83 ec 4c             	sub    esp,0x4c
c000b81e:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b822:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000b826:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b829:	85 db                	test   ebx,ebx
c000b82b:	0f 84 9b 06 00 00    	je     c000becc <sinc_multichan_vari_process+0x6ba>
c000b831:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b834:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b837:	0f af c5             	imul   eax,ebp
c000b83a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000b83d:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b840:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b847:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b84e:	0f af c5             	imul   eax,ebp
c000b851:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b854:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b857:	8b 06                	mov    eax,DWORD PTR [esi]
c000b859:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b85d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b861:	68 00 00 70 3f       	push   0x3f700000
c000b866:	6a 00                	push   0x0
c000b868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b86c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b870:	e8 0a 9d 01 00       	call   c002557f <__ltdf2>
c000b875:	83 c4 10             	add    esp,0x10
c000b878:	ba 16 00 00 00       	mov    edx,0x16
c000b87d:	85 c0                	test   eax,eax
c000b87f:	0f 88 47 06 00 00    	js     c000becc <sinc_multichan_vari_process+0x6ba>
c000b885:	68 00 00 70 40       	push   0x40700000
c000b88a:	6a 00                	push   0x0
c000b88c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b890:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b894:	e8 c8 9c 01 00       	call   c0025561 <__gtdf2>
c000b899:	83 c4 10             	add    esp,0x10
c000b89c:	ba 16 00 00 00       	mov    edx,0x16
c000b8a1:	85 c0                	test   eax,eax
c000b8a3:	0f 8f 23 06 00 00    	jg     c000becc <sinc_multichan_vari_process+0x6ba>
c000b8a9:	83 ec 0c             	sub    esp,0xc
c000b8ac:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b8af:	e8 5f 9a 01 00       	call   c0025313 <__floatsidf>
c000b8b4:	83 c4 10             	add    esp,0x10
c000b8b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8bf:	68 00 00 00 40       	push   0x40000000
c000b8c4:	6a 00                	push   0x0
c000b8c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ce:	e8 60 8d 01 00       	call   c0024633 <__adddf3>
c000b8d3:	59                   	pop    ecx
c000b8d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8d8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b8dc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b8df:	e8 2f 9a 01 00       	call   c0025313 <__floatsidf>
c000b8e4:	83 c4 10             	add    esp,0x10
c000b8e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b8eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b8ef:	52                   	push   edx
c000b8f0:	50                   	push   eax
c000b8f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8f9:	e8 96 96 01 00       	call   c0024f94 <__divdf3>
c000b8fe:	83 c4 10             	add    esp,0x10
c000b901:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b905:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b909:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000b90c:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000b90f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b913:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b917:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b91b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b91f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b923:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b927:	e8 35 9c 01 00       	call   c0025561 <__gtdf2>
c000b92c:	83 c4 10             	add    esp,0x10
c000b92f:	85 c0                	test   eax,eax
c000b931:	7e 2d                	jle    c000b960 <sinc_multichan_vari_process+0x14e>
c000b933:	68 00 00 f0 3f       	push   0x3ff00000
c000b938:	6a 00                	push   0x0
c000b93a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b93e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b942:	e8 38 9c 01 00       	call   c002557f <__ltdf2>
c000b947:	83 c4 10             	add    esp,0x10
c000b94a:	85 c0                	test   eax,eax
c000b94c:	79 4d                	jns    c000b99b <sinc_multichan_vari_process+0x189>
c000b94e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b952:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b956:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b95a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b95e:	eb 1b                	jmp    c000b97b <sinc_multichan_vari_process+0x169>
c000b960:	68 00 00 f0 3f       	push   0x3ff00000
c000b965:	6a 00                	push   0x0
c000b967:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b96b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b96f:	e8 0b 9c 01 00       	call   c002557f <__ltdf2>
c000b974:	83 c4 10             	add    esp,0x10
c000b977:	85 c0                	test   eax,eax
c000b979:	79 20                	jns    c000b99b <sinc_multichan_vari_process+0x189>
c000b97b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b97f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b983:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b987:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b98b:	e8 04 96 01 00       	call   c0024f94 <__divdf3>
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b997:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b99b:	50                   	push   eax
c000b99c:	50                   	push   eax
c000b99d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9a5:	e8 86 9d 01 00       	call   c0025730 <lrint>
c000b9aa:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000b9ad:	40                   	inc    eax
c000b9ae:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9b2:	0f af c5             	imul   eax,ebp
c000b9b5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b9b9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000b9bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b9c0:	58                   	pop    eax
c000b9c1:	5a                   	pop    edx
c000b9c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9ca:	e8 61 9d 01 00       	call   c0025730 <lrint>
c000b9cf:	83 ec 0c             	sub    esp,0xc
c000b9d2:	50                   	push   eax
c000b9d3:	e8 3b 99 01 00       	call   c0025313 <__floatsidf>
c000b9d8:	83 c4 10             	add    esp,0x10
c000b9db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9df:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e3:	52                   	push   edx
c000b9e4:	50                   	push   eax
c000b9e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9ed:	e8 92 92 01 00       	call   c0024c84 <__subdf3>
c000b9f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b9f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9fa:	83 c4 20             	add    esp,0x20
c000b9fd:	6a 00                	push   0x0
c000b9ff:	6a 00                	push   0x0
c000ba01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba09:	e8 71 9b 01 00       	call   c002557f <__ltdf2>
c000ba0e:	83 c4 10             	add    esp,0x10
c000ba11:	85 c0                	test   eax,eax
c000ba13:	79 1f                	jns    c000ba34 <sinc_multichan_vari_process+0x222>
c000ba15:	68 00 00 f0 3f       	push   0x3ff00000
c000ba1a:	6a 00                	push   0x0
c000ba1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba24:	e8 0a 8c 01 00       	call   c0024633 <__adddf3>
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba30:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba34:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba37:	83 ec 10             	sub    esp,0x10
c000ba3a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba3e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba49:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba4d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba51:	e8 2e 92 01 00       	call   c0024c84 <__subdf3>
c000ba56:	83 c4 18             	add    esp,0x18
c000ba59:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ba5d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ba61:	52                   	push   edx
c000ba62:	50                   	push   eax
c000ba63:	e8 c8 9c 01 00       	call   c0025730 <lrint>
c000ba68:	0f af e8             	imul   ebp,eax
c000ba6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba6f:	01 e8                	add    eax,ebp
c000ba71:	99                   	cdq    
c000ba72:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ba75:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ba78:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba7c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba80:	68 00 00 f0 3f       	push   0x3ff00000
c000ba85:	6a 00                	push   0x0
c000ba87:	e8 08 95 01 00       	call   c0024f94 <__divdf3>
c000ba8c:	83 c4 10             	add    esp,0x10
c000ba8f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba93:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba97:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ba9c:	68 23 42 92 0c       	push   0xc924223
c000baa1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baa5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baa9:	e8 85 8b 01 00       	call   c0024633 <__adddf3>
c000baae:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bab2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bab6:	83 c4 20             	add    esp,0x20
c000bab9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bac1:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bac9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bacc:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bacf:	7d 50                	jge    c000bb21 <sinc_multichan_vari_process+0x30f>
c000bad1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bad4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bad7:	01 c8                	add    eax,ecx
c000bad9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000badc:	99                   	cdq    
c000badd:	f7 f9                	idiv   ecx
c000badf:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bae3:	7d 0c                	jge    c000baf1 <sinc_multichan_vari_process+0x2df>
c000bae5:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bae8:	85 ed                	test   ebp,ebp
c000baea:	79 6b                	jns    c000bb57 <sinc_multichan_vari_process+0x345>
c000baec:	e9 e6 00 00 00       	jmp    c000bbd7 <sinc_multichan_vari_process+0x3c5>
c000baf1:	50                   	push   eax
c000baf2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000baf6:	57                   	push   edi
c000baf7:	53                   	push   ebx
c000baf8:	e8 9b fb ff ff       	call   c000b698 <prepare_data>
c000bafd:	83 c4 10             	add    esp,0x10
c000bb00:	89 c2                	mov    edx,eax
c000bb02:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb05:	85 c0                	test   eax,eax
c000bb07:	0f 85 bf 03 00 00    	jne    c000becc <sinc_multichan_vari_process+0x6ba>
c000bb0d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb10:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb13:	01 c8                	add    eax,ecx
c000bb15:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb18:	99                   	cdq    
c000bb19:	f7 f9                	idiv   ecx
c000bb1b:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb1f:	7c c4                	jl     c000bae5 <sinc_multichan_vari_process+0x2d3>
c000bb21:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb25:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb29:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb2c:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb33:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb37:	89 06                	mov    DWORD PTR [esi],eax
c000bb39:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb3c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb3f:	99                   	cdq    
c000bb40:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb43:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bb46:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb49:	99                   	cdq    
c000bb4a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb4d:	31 d2                	xor    edx,edx
c000bb4f:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bb52:	e9 75 03 00 00       	jmp    c000becc <sinc_multichan_vari_process+0x6ba>
c000bb57:	83 ec 0c             	sub    esp,0xc
c000bb5a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bb5d:	e8 b1 97 01 00       	call   c0025313 <__floatsidf>
c000bb62:	83 c4 10             	add    esp,0x10
c000bb65:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb69:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb7d:	e8 b1 8a 01 00       	call   c0024633 <__adddf3>
c000bb82:	83 c4 10             	add    esp,0x10
c000bb85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb89:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb91:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb9d:	e8 91 8a 01 00       	call   c0024633 <__adddf3>
c000bba2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bba5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bba9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bbad:	e8 61 97 01 00       	call   c0025313 <__floatsidf>
c000bbb2:	83 c4 10             	add    esp,0x10
c000bbb5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbb9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbbd:	52                   	push   edx
c000bbbe:	50                   	push   eax
c000bbbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbc3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbc7:	e8 b1 99 01 00       	call   c002557d <__gedf2>
c000bbcc:	83 c4 10             	add    esp,0x10
c000bbcf:	85 c0                	test   eax,eax
c000bbd1:	0f 89 4a ff ff ff    	jns    c000bb21 <sinc_multichan_vari_process+0x30f>
c000bbd7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bbdb:	0f 8e ed 00 00 00    	jle    c000bcce <sinc_multichan_vari_process+0x4bc>
c000bbe1:	83 ec 10             	sub    esp,0x10
c000bbe4:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bbe7:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bbea:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bbed:	ff 36                	push   DWORD PTR [esi]
c000bbef:	e8 90 90 01 00       	call   c0024c84 <__subdf3>
c000bbf4:	83 c4 18             	add    esp,0x18
c000bbf7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbfb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbff:	52                   	push   edx
c000bc00:	50                   	push   eax
c000bc01:	e8 0a 9b 01 00       	call   c0025710 <fabs>
c000bc06:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc0a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc0e:	83 c4 10             	add    esp,0x10
c000bc11:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc16:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc23:	e8 39 99 01 00       	call   c0025561 <__gtdf2>
c000bc28:	83 c4 10             	add    esp,0x10
c000bc2b:	85 c0                	test   eax,eax
c000bc2d:	0f 8e 9b 00 00 00    	jle    c000bcce <sinc_multichan_vari_process+0x4bc>
c000bc33:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc35:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc38:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc3c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc40:	52                   	push   edx
c000bc41:	50                   	push   eax
c000bc42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc48:	e8 37 90 01 00       	call   c0024c84 <__subdf3>
c000bc4d:	59                   	pop    ecx
c000bc4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc52:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc56:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bc59:	e8 b5 96 01 00       	call   c0025313 <__floatsidf>
c000bc5e:	83 c4 10             	add    esp,0x10
c000bc61:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc65:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc69:	52                   	push   edx
c000bc6a:	50                   	push   eax
c000bc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc6f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc73:	e8 38 90 01 00       	call   c0024cb0 <__muldf3>
c000bc78:	5d                   	pop    ebp
c000bc79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc7d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc81:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bc84:	e8 8a 96 01 00       	call   c0025313 <__floatsidf>
c000bc89:	83 c4 10             	add    esp,0x10
c000bc8c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc90:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc94:	52                   	push   edx
c000bc95:	50                   	push   eax
c000bc96:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc9a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc9e:	e8 f1 92 01 00       	call   c0024f94 <__divdf3>
c000bca3:	83 c4 10             	add    esp,0x10
c000bca6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcaa:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcb6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcbe:	e8 70 89 01 00       	call   c0024633 <__adddf3>
c000bcc3:	83 c4 10             	add    esp,0x10
c000bcc6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bcce:	83 ec 0c             	sub    esp,0xc
c000bcd1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bcd4:	e8 3a 96 01 00       	call   c0025313 <__floatsidf>
c000bcd9:	83 c4 10             	add    esp,0x10
c000bcdc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bce0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf4:	e8 86 98 01 00       	call   c002557f <__ltdf2>
c000bcf9:	83 c4 10             	add    esp,0x10
c000bcfc:	85 c0                	test   eax,eax
c000bcfe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd06:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bd0a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bd0e:	78 10                	js     c000bd20 <sinc_multichan_vari_process+0x50e>
c000bd10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd14:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd18:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd1c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd28:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd30:	e8 7b 8f 01 00       	call   c0024cb0 <__muldf3>
c000bd35:	59                   	pop    ecx
c000bd36:	5d                   	pop    ebp
c000bd37:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd3b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd47:	e8 25 f9 ff ff       	call   c000b671 <double_to_fp>
c000bd4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd50:	89 c5                	mov    ebp,eax
c000bd52:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd56:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd5a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd5e:	e8 4d 8f 01 00       	call   c0024cb0 <__muldf3>
c000bd63:	83 c4 18             	add    esp,0x18
c000bd66:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bd6a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bd6e:	52                   	push   edx
c000bd6f:	50                   	push   eax
c000bd70:	e8 fc f8 ff ff       	call   c000b671 <double_to_fp>
c000bd75:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bd78:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bd7c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bd7f:	8d 04 90             	lea    eax,[eax+edx*4]
c000bd82:	50                   	push   eax
c000bd83:	50                   	push   eax
c000bd84:	50                   	push   eax
c000bd85:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd88:	e8 86 95 01 00       	call   c0025313 <__floatsidf>
c000bd8d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bd91:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bd95:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bd99:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bd9d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bda1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bda5:	e8 ea 91 01 00       	call   c0024f94 <__divdf3>
c000bdaa:	83 c4 1c             	add    esp,0x1c
c000bdad:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bdb1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bdb5:	52                   	push   edx
c000bdb6:	89 ea                	mov    edx,ebp
c000bdb8:	50                   	push   eax
c000bdb9:	89 d8                	mov    eax,ebx
c000bdbb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bdbe:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bdc2:	e8 69 ed ff ff       	call   c000ab30 <calc_output_multi>
c000bdc7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bdca:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bdcd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdd1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdd5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bdd9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bddd:	e8 b2 91 01 00       	call   c0024f94 <__divdf3>
c000bde2:	83 c4 10             	add    esp,0x10
c000bde5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bde9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000bded:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdf9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdfd:	e8 31 88 01 00       	call   c0024633 <__adddf3>
c000be02:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000be06:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000be0a:	83 c4 28             	add    esp,0x28
c000be0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be15:	e8 16 99 01 00       	call   c0025730 <lrint>
c000be1a:	83 ec 0c             	sub    esp,0xc
c000be1d:	50                   	push   eax
c000be1e:	e8 f0 94 01 00       	call   c0025313 <__floatsidf>
c000be23:	83 c4 10             	add    esp,0x10
c000be26:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be2a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be2e:	52                   	push   edx
c000be2f:	50                   	push   eax
c000be30:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be34:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be38:	e8 47 8e 01 00       	call   c0024c84 <__subdf3>
c000be3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be45:	83 c4 20             	add    esp,0x20
c000be48:	6a 00                	push   0x0
c000be4a:	6a 00                	push   0x0
c000be4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be54:	e8 26 97 01 00       	call   c002557f <__ltdf2>
c000be59:	83 c4 10             	add    esp,0x10
c000be5c:	85 c0                	test   eax,eax
c000be5e:	79 20                	jns    c000be80 <sinc_multichan_vari_process+0x66e>
c000be60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be70:	e8 be 87 01 00       	call   c0024633 <__adddf3>
c000be75:	83 c4 10             	add    esp,0x10
c000be78:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be7c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be80:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be83:	83 ec 10             	sub    esp,0x10
c000be86:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be8a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000be8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be95:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be99:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be9d:	e8 e2 8d 01 00       	call   c0024c84 <__subdf3>
c000bea2:	83 c4 18             	add    esp,0x18
c000bea5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bea9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bead:	52                   	push   edx
c000beae:	50                   	push   eax
c000beaf:	e8 7c 98 01 00       	call   c0025730 <lrint>
c000beb4:	0f af e8             	imul   ebp,eax
c000beb7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bebb:	83 c4 10             	add    esp,0x10
c000bebe:	01 e8                	add    eax,ebp
c000bec0:	99                   	cdq    
c000bec1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bec4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bec7:	e9 fd fb ff ff       	jmp    c000bac9 <sinc_multichan_vari_process+0x2b7>
c000becc:	83 c4 4c             	add    esp,0x4c
c000becf:	89 d0                	mov    eax,edx
c000bed1:	5b                   	pop    ebx
c000bed2:	5e                   	pop    esi
c000bed3:	5f                   	pop    edi
c000bed4:	5d                   	pop    ebp
c000bed5:	c3                   	ret    

c000bed6 <sinc_hex_vari_process>:
c000bed6:	55                   	push   ebp
c000bed7:	ba 05 00 00 00       	mov    edx,0x5
c000bedc:	57                   	push   edi
c000bedd:	56                   	push   esi
c000bede:	53                   	push   ebx
c000bedf:	83 ec 4c             	sub    esp,0x4c
c000bee2:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bee6:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000beea:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000beed:	85 db                	test   ebx,ebx
c000beef:	0f 84 9c 06 00 00    	je     c000c591 <sinc_hex_vari_process+0x6bb>
c000bef5:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bef8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000befb:	0f af c7             	imul   eax,edi
c000befe:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bf01:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000bf04:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf0b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf12:	0f af c7             	imul   eax,edi
c000bf15:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf18:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf1b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf1e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf22:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf26:	68 00 00 70 3f       	push   0x3f700000
c000bf2b:	6a 00                	push   0x0
c000bf2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf35:	e8 45 96 01 00       	call   c002557f <__ltdf2>
c000bf3a:	83 c4 10             	add    esp,0x10
c000bf3d:	ba 16 00 00 00       	mov    edx,0x16
c000bf42:	85 c0                	test   eax,eax
c000bf44:	0f 88 47 06 00 00    	js     c000c591 <sinc_hex_vari_process+0x6bb>
c000bf4a:	68 00 00 70 40       	push   0x40700000
c000bf4f:	6a 00                	push   0x0
c000bf51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf59:	e8 03 96 01 00       	call   c0025561 <__gtdf2>
c000bf5e:	83 c4 10             	add    esp,0x10
c000bf61:	ba 16 00 00 00       	mov    edx,0x16
c000bf66:	85 c0                	test   eax,eax
c000bf68:	0f 8f 23 06 00 00    	jg     c000c591 <sinc_hex_vari_process+0x6bb>
c000bf6e:	83 ec 0c             	sub    esp,0xc
c000bf71:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf74:	e8 9a 93 01 00       	call   c0025313 <__floatsidf>
c000bf79:	83 c4 10             	add    esp,0x10
c000bf7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf80:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bf84:	68 00 00 00 40       	push   0x40000000
c000bf89:	6a 00                	push   0x0
c000bf8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf93:	e8 9b 86 01 00       	call   c0024633 <__adddf3>
c000bf98:	59                   	pop    ecx
c000bf99:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bf9d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bfa1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfa4:	e8 6a 93 01 00       	call   c0025313 <__floatsidf>
c000bfa9:	83 c4 10             	add    esp,0x10
c000bfac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfb0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfb4:	52                   	push   edx
c000bfb5:	50                   	push   eax
c000bfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfbe:	e8 d1 8f 01 00       	call   c0024f94 <__divdf3>
c000bfc3:	83 c4 10             	add    esp,0x10
c000bfc6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfca:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfce:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bfd1:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000bfd4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfd8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bfdc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfe0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfe4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfe8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfec:	e8 70 95 01 00       	call   c0025561 <__gtdf2>
c000bff1:	83 c4 10             	add    esp,0x10
c000bff4:	85 c0                	test   eax,eax
c000bff6:	7e 2d                	jle    c000c025 <sinc_hex_vari_process+0x14f>
c000bff8:	68 00 00 f0 3f       	push   0x3ff00000
c000bffd:	6a 00                	push   0x0
c000bfff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c003:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c007:	e8 73 95 01 00       	call   c002557f <__ltdf2>
c000c00c:	83 c4 10             	add    esp,0x10
c000c00f:	85 c0                	test   eax,eax
c000c011:	79 4d                	jns    c000c060 <sinc_hex_vari_process+0x18a>
c000c013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c017:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c01b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c01f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c023:	eb 1b                	jmp    c000c040 <sinc_hex_vari_process+0x16a>
c000c025:	68 00 00 f0 3f       	push   0x3ff00000
c000c02a:	6a 00                	push   0x0
c000c02c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c030:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c034:	e8 46 95 01 00       	call   c002557f <__ltdf2>
c000c039:	83 c4 10             	add    esp,0x10
c000c03c:	85 c0                	test   eax,eax
c000c03e:	79 20                	jns    c000c060 <sinc_hex_vari_process+0x18a>
c000c040:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c044:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c048:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c04c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c050:	e8 3f 8f 01 00       	call   c0024f94 <__divdf3>
c000c055:	83 c4 10             	add    esp,0x10
c000c058:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c05c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c060:	50                   	push   eax
c000c061:	50                   	push   eax
c000c062:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c066:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c06a:	e8 c1 96 01 00       	call   c0025730 <lrint>
c000c06f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c072:	40                   	inc    eax
c000c073:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c077:	0f af c7             	imul   eax,edi
c000c07a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c07e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c081:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c085:	58                   	pop    eax
c000c086:	5a                   	pop    edx
c000c087:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c08b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c08f:	e8 9c 96 01 00       	call   c0025730 <lrint>
c000c094:	83 ec 0c             	sub    esp,0xc
c000c097:	50                   	push   eax
c000c098:	e8 76 92 01 00       	call   c0025313 <__floatsidf>
c000c09d:	83 c4 10             	add    esp,0x10
c000c0a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0a4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0a8:	52                   	push   edx
c000c0a9:	50                   	push   eax
c000c0aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0ae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0b2:	e8 cd 8b 01 00       	call   c0024c84 <__subdf3>
c000c0b7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0bb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0bf:	83 c4 20             	add    esp,0x20
c000c0c2:	6a 00                	push   0x0
c000c0c4:	6a 00                	push   0x0
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 ac 94 01 00       	call   c002557f <__ltdf2>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	85 c0                	test   eax,eax
c000c0d8:	79 1f                	jns    c000c0f9 <sinc_hex_vari_process+0x223>
c000c0da:	68 00 00 f0 3f       	push   0x3ff00000
c000c0df:	6a 00                	push   0x0
c000c0e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0e9:	e8 45 85 01 00       	call   c0024633 <__adddf3>
c000c0ee:	83 c4 10             	add    esp,0x10
c000c0f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0f9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0fc:	83 ec 10             	sub    esp,0x10
c000c0ff:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c103:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c10a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c10e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c112:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c116:	e8 69 8b 01 00       	call   c0024c84 <__subdf3>
c000c11b:	83 c4 18             	add    esp,0x18
c000c11e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c122:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c126:	52                   	push   edx
c000c127:	50                   	push   eax
c000c128:	e8 03 96 01 00       	call   c0025730 <lrint>
c000c12d:	0f af f8             	imul   edi,eax
c000c130:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c134:	01 f8                	add    eax,edi
c000c136:	99                   	cdq    
c000c137:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c13a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c13d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c141:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c145:	68 00 00 f0 3f       	push   0x3ff00000
c000c14a:	6a 00                	push   0x0
c000c14c:	e8 43 8e 01 00       	call   c0024f94 <__divdf3>
c000c151:	83 c4 10             	add    esp,0x10
c000c154:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c158:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c15c:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c161:	68 23 42 92 0c       	push   0xc924223
c000c166:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c16a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c16e:	e8 c0 84 01 00       	call   c0024633 <__adddf3>
c000c173:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c177:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c17b:	83 c4 20             	add    esp,0x20
c000c17e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c186:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c18e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c191:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c194:	7d 50                	jge    c000c1e6 <sinc_hex_vari_process+0x310>
c000c196:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c199:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c19c:	01 c8                	add    eax,ecx
c000c19e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1a1:	99                   	cdq    
c000c1a2:	f7 f9                	idiv   ecx
c000c1a4:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1a8:	7d 0c                	jge    c000c1b6 <sinc_hex_vari_process+0x2e0>
c000c1aa:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c1ad:	85 ff                	test   edi,edi
c000c1af:	79 6c                	jns    c000c21d <sinc_hex_vari_process+0x347>
c000c1b1:	e9 e7 00 00 00       	jmp    c000c29d <sinc_hex_vari_process+0x3c7>
c000c1b6:	50                   	push   eax
c000c1b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c1bb:	56                   	push   esi
c000c1bc:	53                   	push   ebx
c000c1bd:	e8 d6 f4 ff ff       	call   c000b698 <prepare_data>
c000c1c2:	83 c4 10             	add    esp,0x10
c000c1c5:	89 c2                	mov    edx,eax
c000c1c7:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c1ca:	85 c0                	test   eax,eax
c000c1cc:	0f 85 bf 03 00 00    	jne    c000c591 <sinc_hex_vari_process+0x6bb>
c000c1d2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1d5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1d8:	01 c8                	add    eax,ecx
c000c1da:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1dd:	99                   	cdq    
c000c1de:	f7 f9                	idiv   ecx
c000c1e0:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1e4:	7c c4                	jl     c000c1aa <sinc_hex_vari_process+0x2d4>
c000c1e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c1ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1ee:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c1f1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c1f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c1fc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c1ff:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c202:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c205:	99                   	cdq    
c000c206:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c209:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c20c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c20f:	99                   	cdq    
c000c210:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c213:	31 d2                	xor    edx,edx
c000c215:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c218:	e9 74 03 00 00       	jmp    c000c591 <sinc_hex_vari_process+0x6bb>
c000c21d:	83 ec 0c             	sub    esp,0xc
c000c220:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c223:	e8 eb 90 01 00       	call   c0025313 <__floatsidf>
c000c228:	83 c4 10             	add    esp,0x10
c000c22b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c22f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c233:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c237:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c23b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c23f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c243:	e8 eb 83 01 00       	call   c0024633 <__adddf3>
c000c248:	83 c4 10             	add    esp,0x10
c000c24b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c24f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c253:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c257:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c25b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c25f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c263:	e8 cb 83 01 00       	call   c0024633 <__adddf3>
c000c268:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c26b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c26f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c273:	e8 9b 90 01 00       	call   c0025313 <__floatsidf>
c000c278:	83 c4 10             	add    esp,0x10
c000c27b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c27f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c283:	52                   	push   edx
c000c284:	50                   	push   eax
c000c285:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c289:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c28d:	e8 eb 92 01 00       	call   c002557d <__gedf2>
c000c292:	83 c4 10             	add    esp,0x10
c000c295:	85 c0                	test   eax,eax
c000c297:	0f 89 49 ff ff ff    	jns    c000c1e6 <sinc_hex_vari_process+0x310>
c000c29d:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c2a1:	0f 8e ef 00 00 00    	jle    c000c396 <sinc_hex_vari_process+0x4c0>
c000c2a7:	83 ec 10             	sub    esp,0x10
c000c2aa:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2ad:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2b0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c2b3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c2b6:	e8 c9 89 01 00       	call   c0024c84 <__subdf3>
c000c2bb:	83 c4 18             	add    esp,0x18
c000c2be:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2c2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2c6:	52                   	push   edx
c000c2c7:	50                   	push   eax
c000c2c8:	e8 43 94 01 00       	call   c0025710 <fabs>
c000c2cd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2d1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2d5:	83 c4 10             	add    esp,0x10
c000c2d8:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c2dd:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c2e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2ea:	e8 72 92 01 00       	call   c0025561 <__gtdf2>
c000c2ef:	83 c4 10             	add    esp,0x10
c000c2f2:	85 c0                	test   eax,eax
c000c2f4:	0f 8e 9c 00 00 00    	jle    c000c396 <sinc_hex_vari_process+0x4c0>
c000c2fa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c2fd:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c300:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c304:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c308:	52                   	push   edx
c000c309:	50                   	push   eax
c000c30a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c30d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c310:	e8 6f 89 01 00       	call   c0024c84 <__subdf3>
c000c315:	59                   	pop    ecx
c000c316:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c31a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c31e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c321:	e8 ed 8f 01 00       	call   c0025313 <__floatsidf>
c000c326:	83 c4 10             	add    esp,0x10
c000c329:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c32d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c331:	52                   	push   edx
c000c332:	50                   	push   eax
c000c333:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c337:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c33b:	e8 70 89 01 00       	call   c0024cb0 <__muldf3>
c000c340:	5f                   	pop    edi
c000c341:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c345:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c349:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c34c:	e8 c2 8f 01 00       	call   c0025313 <__floatsidf>
c000c351:	83 c4 10             	add    esp,0x10
c000c354:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c358:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c35c:	52                   	push   edx
c000c35d:	50                   	push   eax
c000c35e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c362:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c366:	e8 29 8c 01 00       	call   c0024f94 <__divdf3>
c000c36b:	83 c4 10             	add    esp,0x10
c000c36e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c372:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c376:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c37a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c37e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c382:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c386:	e8 a8 82 01 00       	call   c0024633 <__adddf3>
c000c38b:	83 c4 10             	add    esp,0x10
c000c38e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c392:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c396:	83 ec 0c             	sub    esp,0xc
c000c399:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c39c:	e8 72 8f 01 00       	call   c0025313 <__floatsidf>
c000c3a1:	83 c4 10             	add    esp,0x10
c000c3a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3a8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3bc:	e8 be 91 01 00       	call   c002557f <__ltdf2>
c000c3c1:	83 c4 10             	add    esp,0x10
c000c3c4:	85 c0                	test   eax,eax
c000c3c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c3ce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c3d2:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c3d6:	78 10                	js     c000c3e8 <sinc_hex_vari_process+0x512>
c000c3d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c3dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c3e0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3e4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3f0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3f8:	e8 b3 88 01 00       	call   c0024cb0 <__muldf3>
c000c3fd:	59                   	pop    ecx
c000c3fe:	5f                   	pop    edi
c000c3ff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c407:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c40b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c40f:	e8 5d f2 ff ff       	call   c000b671 <double_to_fp>
c000c414:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c418:	89 c7                	mov    edi,eax
c000c41a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c41e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c422:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c426:	e8 85 88 01 00       	call   c0024cb0 <__muldf3>
c000c42b:	83 c4 18             	add    esp,0x18
c000c42e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c432:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c436:	52                   	push   edx
c000c437:	50                   	push   eax
c000c438:	e8 34 f2 ff ff       	call   c000b671 <double_to_fp>
c000c43d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c440:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c444:	83 c4 0c             	add    esp,0xc
c000c447:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c44a:	8d 04 90             	lea    eax,[eax+edx*4]
c000c44d:	50                   	push   eax
c000c44e:	50                   	push   eax
c000c44f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c452:	e8 bc 8e 01 00       	call   c0025313 <__floatsidf>
c000c457:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c45b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c45f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c463:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c467:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c46b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c46f:	e8 20 8b 01 00       	call   c0024f94 <__divdf3>
c000c474:	83 c4 18             	add    esp,0x18
c000c477:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c47b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c47f:	52                   	push   edx
c000c480:	89 fa                	mov    edx,edi
c000c482:	50                   	push   eax
c000c483:	89 d8                	mov    eax,ebx
c000c485:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c489:	e8 50 de ff ff       	call   c000a2de <calc_output_hex>
c000c48e:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c492:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c496:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c49a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c49e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4a2:	e8 ed 8a 01 00       	call   c0024f94 <__divdf3>
c000c4a7:	83 c4 10             	add    esp,0x10
c000c4aa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4ae:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4ba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4be:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4c2:	e8 6c 81 01 00       	call   c0024633 <__adddf3>
c000c4c7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c4cb:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c4cf:	83 c4 18             	add    esp,0x18
c000c4d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4da:	e8 51 92 01 00       	call   c0025730 <lrint>
c000c4df:	83 ec 0c             	sub    esp,0xc
c000c4e2:	50                   	push   eax
c000c4e3:	e8 2b 8e 01 00       	call   c0025313 <__floatsidf>
c000c4e8:	83 c4 10             	add    esp,0x10
c000c4eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4ef:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c4f3:	52                   	push   edx
c000c4f4:	50                   	push   eax
c000c4f5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4f9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4fd:	e8 82 87 01 00       	call   c0024c84 <__subdf3>
c000c502:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c506:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c50a:	83 c4 20             	add    esp,0x20
c000c50d:	6a 00                	push   0x0
c000c50f:	6a 00                	push   0x0
c000c511:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c519:	e8 61 90 01 00       	call   c002557f <__ltdf2>
c000c51e:	83 c4 10             	add    esp,0x10
c000c521:	85 c0                	test   eax,eax
c000c523:	79 20                	jns    c000c545 <sinc_hex_vari_process+0x66f>
c000c525:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c529:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c52d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c535:	e8 f9 80 01 00       	call   c0024633 <__adddf3>
c000c53a:	83 c4 10             	add    esp,0x10
c000c53d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c545:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c548:	83 ec 10             	sub    esp,0x10
c000c54b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c54f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c552:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c55a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c55e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c562:	e8 1d 87 01 00       	call   c0024c84 <__subdf3>
c000c567:	83 c4 18             	add    esp,0x18
c000c56a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c56e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c572:	52                   	push   edx
c000c573:	50                   	push   eax
c000c574:	e8 b7 91 01 00       	call   c0025730 <lrint>
c000c579:	0f af f8             	imul   edi,eax
c000c57c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c580:	83 c4 10             	add    esp,0x10
c000c583:	01 f8                	add    eax,edi
c000c585:	99                   	cdq    
c000c586:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c589:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c58c:	e9 fd fb ff ff       	jmp    c000c18e <sinc_hex_vari_process+0x2b8>
c000c591:	83 c4 4c             	add    esp,0x4c
c000c594:	89 d0                	mov    eax,edx
c000c596:	5b                   	pop    ebx
c000c597:	5e                   	pop    esi
c000c598:	5f                   	pop    edi
c000c599:	5d                   	pop    ebp
c000c59a:	c3                   	ret    

c000c59b <sinc_quad_vari_process>:
c000c59b:	55                   	push   ebp
c000c59c:	ba 05 00 00 00       	mov    edx,0x5
c000c5a1:	57                   	push   edi
c000c5a2:	56                   	push   esi
c000c5a3:	53                   	push   ebx
c000c5a4:	83 ec 4c             	sub    esp,0x4c
c000c5a7:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c5ab:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c5af:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c5b2:	85 db                	test   ebx,ebx
c000c5b4:	0f 84 9c 06 00 00    	je     c000cc56 <sinc_quad_vari_process+0x6bb>
c000c5ba:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c5bd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c5c0:	0f af c7             	imul   eax,edi
c000c5c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c5c6:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c5c9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c5d0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c5d7:	0f af c7             	imul   eax,edi
c000c5da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c5dd:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c5e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5e3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5eb:	68 00 00 70 3f       	push   0x3f700000
c000c5f0:	6a 00                	push   0x0
c000c5f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5fa:	e8 80 8f 01 00       	call   c002557f <__ltdf2>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	ba 16 00 00 00       	mov    edx,0x16
c000c607:	85 c0                	test   eax,eax
c000c609:	0f 88 47 06 00 00    	js     c000cc56 <sinc_quad_vari_process+0x6bb>
c000c60f:	68 00 00 70 40       	push   0x40700000
c000c614:	6a 00                	push   0x0
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61e:	e8 3e 8f 01 00       	call   c0025561 <__gtdf2>
c000c623:	83 c4 10             	add    esp,0x10
c000c626:	ba 16 00 00 00       	mov    edx,0x16
c000c62b:	85 c0                	test   eax,eax
c000c62d:	0f 8f 23 06 00 00    	jg     c000cc56 <sinc_quad_vari_process+0x6bb>
c000c633:	83 ec 0c             	sub    esp,0xc
c000c636:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c639:	e8 d5 8c 01 00       	call   c0025313 <__floatsidf>
c000c63e:	83 c4 10             	add    esp,0x10
c000c641:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c645:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c649:	68 00 00 00 40       	push   0x40000000
c000c64e:	6a 00                	push   0x0
c000c650:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c654:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c658:	e8 d6 7f 01 00       	call   c0024633 <__adddf3>
c000c65d:	59                   	pop    ecx
c000c65e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c662:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c666:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c669:	e8 a5 8c 01 00       	call   c0025313 <__floatsidf>
c000c66e:	83 c4 10             	add    esp,0x10
c000c671:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c675:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c679:	52                   	push   edx
c000c67a:	50                   	push   eax
c000c67b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c67f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c683:	e8 0c 89 01 00       	call   c0024f94 <__divdf3>
c000c688:	83 c4 10             	add    esp,0x10
c000c68b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c68f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c693:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c696:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c699:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c69d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b1:	e8 ab 8e 01 00       	call   c0025561 <__gtdf2>
c000c6b6:	83 c4 10             	add    esp,0x10
c000c6b9:	85 c0                	test   eax,eax
c000c6bb:	7e 2d                	jle    c000c6ea <sinc_quad_vari_process+0x14f>
c000c6bd:	68 00 00 f0 3f       	push   0x3ff00000
c000c6c2:	6a 00                	push   0x0
c000c6c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6cc:	e8 ae 8e 01 00       	call   c002557f <__ltdf2>
c000c6d1:	83 c4 10             	add    esp,0x10
c000c6d4:	85 c0                	test   eax,eax
c000c6d6:	79 4d                	jns    c000c725 <sinc_quad_vari_process+0x18a>
c000c6d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6e8:	eb 1b                	jmp    c000c705 <sinc_quad_vari_process+0x16a>
c000c6ea:	68 00 00 f0 3f       	push   0x3ff00000
c000c6ef:	6a 00                	push   0x0
c000c6f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f9:	e8 81 8e 01 00       	call   c002557f <__ltdf2>
c000c6fe:	83 c4 10             	add    esp,0x10
c000c701:	85 c0                	test   eax,eax
c000c703:	79 20                	jns    c000c725 <sinc_quad_vari_process+0x18a>
c000c705:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c709:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c70d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c711:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c715:	e8 7a 88 01 00       	call   c0024f94 <__divdf3>
c000c71a:	83 c4 10             	add    esp,0x10
c000c71d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c721:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c725:	50                   	push   eax
c000c726:	50                   	push   eax
c000c727:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c72b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c72f:	e8 fc 8f 01 00       	call   c0025730 <lrint>
c000c734:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c737:	40                   	inc    eax
c000c738:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c73c:	0f af c7             	imul   eax,edi
c000c73f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c743:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c746:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c74a:	58                   	pop    eax
c000c74b:	5a                   	pop    edx
c000c74c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c750:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c754:	e8 d7 8f 01 00       	call   c0025730 <lrint>
c000c759:	83 ec 0c             	sub    esp,0xc
c000c75c:	50                   	push   eax
c000c75d:	e8 b1 8b 01 00       	call   c0025313 <__floatsidf>
c000c762:	83 c4 10             	add    esp,0x10
c000c765:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c769:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c76d:	52                   	push   edx
c000c76e:	50                   	push   eax
c000c76f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c773:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c777:	e8 08 85 01 00       	call   c0024c84 <__subdf3>
c000c77c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c780:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c784:	83 c4 20             	add    esp,0x20
c000c787:	6a 00                	push   0x0
c000c789:	6a 00                	push   0x0
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 e7 8d 01 00       	call   c002557f <__ltdf2>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	85 c0                	test   eax,eax
c000c79d:	79 1f                	jns    c000c7be <sinc_quad_vari_process+0x223>
c000c79f:	68 00 00 f0 3f       	push   0x3ff00000
c000c7a4:	6a 00                	push   0x0
c000c7a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7ae:	e8 80 7e 01 00       	call   c0024633 <__adddf3>
c000c7b3:	83 c4 10             	add    esp,0x10
c000c7b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7be:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7c1:	83 ec 10             	sub    esp,0x10
c000c7c4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c7c8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7db:	e8 a4 84 01 00       	call   c0024c84 <__subdf3>
c000c7e0:	83 c4 18             	add    esp,0x18
c000c7e3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7e7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7eb:	52                   	push   edx
c000c7ec:	50                   	push   eax
c000c7ed:	e8 3e 8f 01 00       	call   c0025730 <lrint>
c000c7f2:	0f af f8             	imul   edi,eax
c000c7f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7f9:	01 f8                	add    eax,edi
c000c7fb:	99                   	cdq    
c000c7fc:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ff:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c802:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c806:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c80a:	68 00 00 f0 3f       	push   0x3ff00000
c000c80f:	6a 00                	push   0x0
c000c811:	e8 7e 87 01 00       	call   c0024f94 <__divdf3>
c000c816:	83 c4 10             	add    esp,0x10
c000c819:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c81d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c821:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c826:	68 23 42 92 0c       	push   0xc924223
c000c82b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c82f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c833:	e8 fb 7d 01 00       	call   c0024633 <__adddf3>
c000c838:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c83c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c840:	83 c4 20             	add    esp,0x20
c000c843:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c84b:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c853:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c856:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c859:	7d 50                	jge    c000c8ab <sinc_quad_vari_process+0x310>
c000c85b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c85e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c861:	01 c8                	add    eax,ecx
c000c863:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c866:	99                   	cdq    
c000c867:	f7 f9                	idiv   ecx
c000c869:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c86d:	7d 0c                	jge    c000c87b <sinc_quad_vari_process+0x2e0>
c000c86f:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c872:	85 ff                	test   edi,edi
c000c874:	79 6c                	jns    c000c8e2 <sinc_quad_vari_process+0x347>
c000c876:	e9 e7 00 00 00       	jmp    c000c962 <sinc_quad_vari_process+0x3c7>
c000c87b:	50                   	push   eax
c000c87c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c880:	56                   	push   esi
c000c881:	53                   	push   ebx
c000c882:	e8 11 ee ff ff       	call   c000b698 <prepare_data>
c000c887:	83 c4 10             	add    esp,0x10
c000c88a:	89 c2                	mov    edx,eax
c000c88c:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c88f:	85 c0                	test   eax,eax
c000c891:	0f 85 bf 03 00 00    	jne    c000cc56 <sinc_quad_vari_process+0x6bb>
c000c897:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c89a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c89d:	01 c8                	add    eax,ecx
c000c89f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8a2:	99                   	cdq    
c000c8a3:	f7 f9                	idiv   ecx
c000c8a5:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8a9:	7c c4                	jl     c000c86f <sinc_quad_vari_process+0x2d4>
c000c8ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8af:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8b3:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c8b6:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c8c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c8c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c8c7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c8ca:	99                   	cdq    
c000c8cb:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8ce:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c8d1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c8d4:	99                   	cdq    
c000c8d5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8d8:	31 d2                	xor    edx,edx
c000c8da:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c8dd:	e9 74 03 00 00       	jmp    c000cc56 <sinc_quad_vari_process+0x6bb>
c000c8e2:	83 ec 0c             	sub    esp,0xc
c000c8e5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c8e8:	e8 26 8a 01 00       	call   c0025313 <__floatsidf>
c000c8ed:	83 c4 10             	add    esp,0x10
c000c8f0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c8f4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c8f8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c8fc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c900:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c904:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c908:	e8 26 7d 01 00       	call   c0024633 <__adddf3>
c000c90d:	83 c4 10             	add    esp,0x10
c000c910:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c914:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c918:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c91c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c920:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c924:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c928:	e8 06 7d 01 00       	call   c0024633 <__adddf3>
c000c92d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c930:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c934:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c938:	e8 d6 89 01 00       	call   c0025313 <__floatsidf>
c000c93d:	83 c4 10             	add    esp,0x10
c000c940:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c944:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c948:	52                   	push   edx
c000c949:	50                   	push   eax
c000c94a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c94e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c952:	e8 26 8c 01 00       	call   c002557d <__gedf2>
c000c957:	83 c4 10             	add    esp,0x10
c000c95a:	85 c0                	test   eax,eax
c000c95c:	0f 89 49 ff ff ff    	jns    c000c8ab <sinc_quad_vari_process+0x310>
c000c962:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c966:	0f 8e ef 00 00 00    	jle    c000ca5b <sinc_quad_vari_process+0x4c0>
c000c96c:	83 ec 10             	sub    esp,0x10
c000c96f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c972:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c975:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c978:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c97b:	e8 04 83 01 00       	call   c0024c84 <__subdf3>
c000c980:	83 c4 18             	add    esp,0x18
c000c983:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c987:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c98b:	52                   	push   edx
c000c98c:	50                   	push   eax
c000c98d:	e8 7e 8d 01 00       	call   c0025710 <fabs>
c000c992:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c996:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c99a:	83 c4 10             	add    esp,0x10
c000c99d:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c9a2:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c9a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9af:	e8 ad 8b 01 00       	call   c0025561 <__gtdf2>
c000c9b4:	83 c4 10             	add    esp,0x10
c000c9b7:	85 c0                	test   eax,eax
c000c9b9:	0f 8e 9c 00 00 00    	jle    c000ca5b <sinc_quad_vari_process+0x4c0>
c000c9bf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c9c2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c9c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c9c9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c9cd:	52                   	push   edx
c000c9ce:	50                   	push   eax
c000c9cf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c9d2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c9d5:	e8 aa 82 01 00       	call   c0024c84 <__subdf3>
c000c9da:	59                   	pop    ecx
c000c9db:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c9df:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c9e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c9e6:	e8 28 89 01 00       	call   c0025313 <__floatsidf>
c000c9eb:	83 c4 10             	add    esp,0x10
c000c9ee:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9f6:	52                   	push   edx
c000c9f7:	50                   	push   eax
c000c9f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca00:	e8 ab 82 01 00       	call   c0024cb0 <__muldf3>
c000ca05:	5f                   	pop    edi
c000ca06:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca0a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca0e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ca11:	e8 fd 88 01 00       	call   c0025313 <__floatsidf>
c000ca16:	83 c4 10             	add    esp,0x10
c000ca19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca21:	52                   	push   edx
c000ca22:	50                   	push   eax
c000ca23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca2b:	e8 64 85 01 00       	call   c0024f94 <__divdf3>
c000ca30:	83 c4 10             	add    esp,0x10
c000ca33:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca37:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca4b:	e8 e3 7b 01 00       	call   c0024633 <__adddf3>
c000ca50:	83 c4 10             	add    esp,0x10
c000ca53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca5b:	83 ec 0c             	sub    esp,0xc
c000ca5e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ca61:	e8 ad 88 01 00       	call   c0025313 <__floatsidf>
c000ca66:	83 c4 10             	add    esp,0x10
c000ca69:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca6d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca81:	e8 f9 8a 01 00       	call   c002557f <__ltdf2>
c000ca86:	83 c4 10             	add    esp,0x10
c000ca89:	85 c0                	test   eax,eax
c000ca8b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca8f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ca93:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ca97:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ca9b:	78 10                	js     c000caad <sinc_quad_vari_process+0x512>
c000ca9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000caa1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000caa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000caa9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000caad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cab1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cab5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cab9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cabd:	e8 ee 81 01 00       	call   c0024cb0 <__muldf3>
c000cac2:	59                   	pop    ecx
c000cac3:	5f                   	pop    edi
c000cac4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cac8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cacc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cad0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cad4:	e8 98 eb ff ff       	call   c000b671 <double_to_fp>
c000cad9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cadd:	89 c7                	mov    edi,eax
c000cadf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cae3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cae7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caeb:	e8 c0 81 01 00       	call   c0024cb0 <__muldf3>
c000caf0:	83 c4 18             	add    esp,0x18
c000caf3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000caf7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cafb:	52                   	push   edx
c000cafc:	50                   	push   eax
c000cafd:	e8 6f eb ff ff       	call   c000b671 <double_to_fp>
c000cb02:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cb05:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb09:	83 c4 0c             	add    esp,0xc
c000cb0c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cb0f:	8d 04 90             	lea    eax,[eax+edx*4]
c000cb12:	50                   	push   eax
c000cb13:	50                   	push   eax
c000cb14:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb17:	e8 f7 87 01 00       	call   c0025313 <__floatsidf>
c000cb1c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cb20:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cb24:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb28:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb2c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb30:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb34:	e8 5b 84 01 00       	call   c0024f94 <__divdf3>
c000cb39:	83 c4 18             	add    esp,0x18
c000cb3c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb40:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb44:	52                   	push   edx
c000cb45:	89 fa                	mov    edx,edi
c000cb47:	50                   	push   eax
c000cb48:	89 d8                	mov    eax,ebx
c000cb4a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cb4e:	e8 a5 d1 ff ff       	call   c0009cf8 <calc_output_quad>
c000cb53:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cb57:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb5b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb5f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb67:	e8 28 84 01 00       	call   c0024f94 <__divdf3>
c000cb6c:	83 c4 10             	add    esp,0x10
c000cb6f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb73:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb83:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb87:	e8 a7 7a 01 00       	call   c0024633 <__adddf3>
c000cb8c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cb90:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cb94:	83 c4 18             	add    esp,0x18
c000cb97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb9f:	e8 8c 8b 01 00       	call   c0025730 <lrint>
c000cba4:	83 ec 0c             	sub    esp,0xc
c000cba7:	50                   	push   eax
c000cba8:	e8 66 87 01 00       	call   c0025313 <__floatsidf>
c000cbad:	83 c4 10             	add    esp,0x10
c000cbb0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbb4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbb8:	52                   	push   edx
c000cbb9:	50                   	push   eax
c000cbba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbbe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbc2:	e8 bd 80 01 00       	call   c0024c84 <__subdf3>
c000cbc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbcb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbcf:	83 c4 20             	add    esp,0x20
c000cbd2:	6a 00                	push   0x0
c000cbd4:	6a 00                	push   0x0
c000cbd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbde:	e8 9c 89 01 00       	call   c002557f <__ltdf2>
c000cbe3:	83 c4 10             	add    esp,0x10
c000cbe6:	85 c0                	test   eax,eax
c000cbe8:	79 20                	jns    c000cc0a <sinc_quad_vari_process+0x66f>
c000cbea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbf2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbf6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbfa:	e8 34 7a 01 00       	call   c0024633 <__adddf3>
c000cbff:	83 c4 10             	add    esp,0x10
c000cc02:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc06:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc0a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc0d:	83 ec 10             	sub    esp,0x10
c000cc10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cc14:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc1f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc23:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc27:	e8 58 80 01 00       	call   c0024c84 <__subdf3>
c000cc2c:	83 c4 18             	add    esp,0x18
c000cc2f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc33:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc37:	52                   	push   edx
c000cc38:	50                   	push   eax
c000cc39:	e8 f2 8a 01 00       	call   c0025730 <lrint>
c000cc3e:	0f af f8             	imul   edi,eax
c000cc41:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc45:	83 c4 10             	add    esp,0x10
c000cc48:	01 f8                	add    eax,edi
c000cc4a:	99                   	cdq    
c000cc4b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc4e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc51:	e9 fd fb ff ff       	jmp    c000c853 <sinc_quad_vari_process+0x2b8>
c000cc56:	83 c4 4c             	add    esp,0x4c
c000cc59:	89 d0                	mov    eax,edx
c000cc5b:	5b                   	pop    ebx
c000cc5c:	5e                   	pop    esi
c000cc5d:	5f                   	pop    edi
c000cc5e:	5d                   	pop    ebp
c000cc5f:	c3                   	ret    

c000cc60 <sinc_stereo_vari_process>:
c000cc60:	55                   	push   ebp
c000cc61:	ba 05 00 00 00       	mov    edx,0x5
c000cc66:	57                   	push   edi
c000cc67:	56                   	push   esi
c000cc68:	53                   	push   ebx
c000cc69:	83 ec 4c             	sub    esp,0x4c
c000cc6c:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cc70:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000cc74:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cc77:	85 db                	test   ebx,ebx
c000cc79:	0f 84 9c 06 00 00    	je     c000d31b <sinc_stereo_vari_process+0x6bb>
c000cc7f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cc82:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc85:	0f af c7             	imul   eax,edi
c000cc88:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cc8b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cc8e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cc95:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cc9c:	0f af c7             	imul   eax,edi
c000cc9f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cca2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cca5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cca8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb0:	68 00 00 70 3f       	push   0x3f700000
c000ccb5:	6a 00                	push   0x0
c000ccb7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccbf:	e8 bb 88 01 00       	call   c002557f <__ltdf2>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	ba 16 00 00 00       	mov    edx,0x16
c000cccc:	85 c0                	test   eax,eax
c000ccce:	0f 88 47 06 00 00    	js     c000d31b <sinc_stereo_vari_process+0x6bb>
c000ccd4:	68 00 00 70 40       	push   0x40700000
c000ccd9:	6a 00                	push   0x0
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce3:	e8 79 88 01 00       	call   c0025561 <__gtdf2>
c000cce8:	83 c4 10             	add    esp,0x10
c000cceb:	ba 16 00 00 00       	mov    edx,0x16
c000ccf0:	85 c0                	test   eax,eax
c000ccf2:	0f 8f 23 06 00 00    	jg     c000d31b <sinc_stereo_vari_process+0x6bb>
c000ccf8:	83 ec 0c             	sub    esp,0xc
c000ccfb:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ccfe:	e8 10 86 01 00       	call   c0025313 <__floatsidf>
c000cd03:	83 c4 10             	add    esp,0x10
c000cd06:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd0a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd0e:	68 00 00 00 40       	push   0x40000000
c000cd13:	6a 00                	push   0x0
c000cd15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd1d:	e8 11 79 01 00       	call   c0024633 <__adddf3>
c000cd22:	59                   	pop    ecx
c000cd23:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd27:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd2b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd2e:	e8 e0 85 01 00       	call   c0025313 <__floatsidf>
c000cd33:	83 c4 10             	add    esp,0x10
c000cd36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd3a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd3e:	52                   	push   edx
c000cd3f:	50                   	push   eax
c000cd40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd48:	e8 47 82 01 00       	call   c0024f94 <__divdf3>
c000cd4d:	83 c4 10             	add    esp,0x10
c000cd50:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd54:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd58:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cd5b:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cd5e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd76:	e8 e6 87 01 00       	call   c0025561 <__gtdf2>
c000cd7b:	83 c4 10             	add    esp,0x10
c000cd7e:	85 c0                	test   eax,eax
c000cd80:	7e 2d                	jle    c000cdaf <sinc_stereo_vari_process+0x14f>
c000cd82:	68 00 00 f0 3f       	push   0x3ff00000
c000cd87:	6a 00                	push   0x0
c000cd89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd91:	e8 e9 87 01 00       	call   c002557f <__ltdf2>
c000cd96:	83 c4 10             	add    esp,0x10
c000cd99:	85 c0                	test   eax,eax
c000cd9b:	79 4d                	jns    c000cdea <sinc_stereo_vari_process+0x18a>
c000cd9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cda1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cda5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cda9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdad:	eb 1b                	jmp    c000cdca <sinc_stereo_vari_process+0x16a>
c000cdaf:	68 00 00 f0 3f       	push   0x3ff00000
c000cdb4:	6a 00                	push   0x0
c000cdb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdbe:	e8 bc 87 01 00       	call   c002557f <__ltdf2>
c000cdc3:	83 c4 10             	add    esp,0x10
c000cdc6:	85 c0                	test   eax,eax
c000cdc8:	79 20                	jns    c000cdea <sinc_stereo_vari_process+0x18a>
c000cdca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cdce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cdd2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdda:	e8 b5 81 01 00       	call   c0024f94 <__divdf3>
c000cddf:	83 c4 10             	add    esp,0x10
c000cde2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cde6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdea:	50                   	push   eax
c000cdeb:	50                   	push   eax
c000cdec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdf0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdf4:	e8 37 89 01 00       	call   c0025730 <lrint>
c000cdf9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000cdfc:	40                   	inc    eax
c000cdfd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce01:	0f af c7             	imul   eax,edi
c000ce04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ce08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce0b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce0f:	58                   	pop    eax
c000ce10:	5a                   	pop    edx
c000ce11:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce15:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce19:	e8 12 89 01 00       	call   c0025730 <lrint>
c000ce1e:	83 ec 0c             	sub    esp,0xc
c000ce21:	50                   	push   eax
c000ce22:	e8 ec 84 01 00       	call   c0025313 <__floatsidf>
c000ce27:	83 c4 10             	add    esp,0x10
c000ce2a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce2e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce32:	52                   	push   edx
c000ce33:	50                   	push   eax
c000ce34:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce38:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce3c:	e8 43 7e 01 00       	call   c0024c84 <__subdf3>
c000ce41:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce45:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce49:	83 c4 20             	add    esp,0x20
c000ce4c:	6a 00                	push   0x0
c000ce4e:	6a 00                	push   0x0
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 22 87 01 00       	call   c002557f <__ltdf2>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	85 c0                	test   eax,eax
c000ce62:	79 1f                	jns    c000ce83 <sinc_stereo_vari_process+0x223>
c000ce64:	68 00 00 f0 3f       	push   0x3ff00000
c000ce69:	6a 00                	push   0x0
c000ce6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce73:	e8 bb 77 01 00       	call   c0024633 <__adddf3>
c000ce78:	83 c4 10             	add    esp,0x10
c000ce7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce83:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce86:	83 ec 10             	sub    esp,0x10
c000ce89:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ce8d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce98:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce9c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cea0:	e8 df 7d 01 00       	call   c0024c84 <__subdf3>
c000cea5:	83 c4 18             	add    esp,0x18
c000cea8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ceac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ceb0:	52                   	push   edx
c000ceb1:	50                   	push   eax
c000ceb2:	e8 79 88 01 00       	call   c0025730 <lrint>
c000ceb7:	0f af f8             	imul   edi,eax
c000ceba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cebe:	01 f8                	add    eax,edi
c000cec0:	99                   	cdq    
c000cec1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cec4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cec7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cecb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cecf:	68 00 00 f0 3f       	push   0x3ff00000
c000ced4:	6a 00                	push   0x0
c000ced6:	e8 b9 80 01 00       	call   c0024f94 <__divdf3>
c000cedb:	83 c4 10             	add    esp,0x10
c000cede:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cee2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cee6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ceeb:	68 23 42 92 0c       	push   0xc924223
c000cef0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cef4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cef8:	e8 36 77 01 00       	call   c0024633 <__adddf3>
c000cefd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cf01:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cf05:	83 c4 20             	add    esp,0x20
c000cf08:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cf10:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cf18:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cf1b:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cf1e:	7d 50                	jge    c000cf70 <sinc_stereo_vari_process+0x310>
c000cf20:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf23:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf26:	01 c8                	add    eax,ecx
c000cf28:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf2b:	99                   	cdq    
c000cf2c:	f7 f9                	idiv   ecx
c000cf2e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf32:	7d 0c                	jge    c000cf40 <sinc_stereo_vari_process+0x2e0>
c000cf34:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cf37:	85 ff                	test   edi,edi
c000cf39:	79 6c                	jns    c000cfa7 <sinc_stereo_vari_process+0x347>
c000cf3b:	e9 e7 00 00 00       	jmp    c000d027 <sinc_stereo_vari_process+0x3c7>
c000cf40:	50                   	push   eax
c000cf41:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf45:	56                   	push   esi
c000cf46:	53                   	push   ebx
c000cf47:	e8 4c e7 ff ff       	call   c000b698 <prepare_data>
c000cf4c:	83 c4 10             	add    esp,0x10
c000cf4f:	89 c2                	mov    edx,eax
c000cf51:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cf54:	85 c0                	test   eax,eax
c000cf56:	0f 85 bf 03 00 00    	jne    c000d31b <sinc_stereo_vari_process+0x6bb>
c000cf5c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf5f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf62:	01 c8                	add    eax,ecx
c000cf64:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf67:	99                   	cdq    
c000cf68:	f7 f9                	idiv   ecx
c000cf6a:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf6e:	7c c4                	jl     c000cf34 <sinc_stereo_vari_process+0x2d4>
c000cf70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cf74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cf78:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cf7b:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cf7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf82:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cf86:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cf89:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cf8c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cf8f:	99                   	cdq    
c000cf90:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cf93:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cf96:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cf99:	99                   	cdq    
c000cf9a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cf9d:	31 d2                	xor    edx,edx
c000cf9f:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cfa2:	e9 74 03 00 00       	jmp    c000d31b <sinc_stereo_vari_process+0x6bb>
c000cfa7:	83 ec 0c             	sub    esp,0xc
c000cfaa:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cfad:	e8 61 83 01 00       	call   c0025313 <__floatsidf>
c000cfb2:	83 c4 10             	add    esp,0x10
c000cfb5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfb9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfbd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfc1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfcd:	e8 61 76 01 00       	call   c0024633 <__adddf3>
c000cfd2:	83 c4 10             	add    esp,0x10
c000cfd5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfd9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfe1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfe5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfe9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfed:	e8 41 76 01 00       	call   c0024633 <__adddf3>
c000cff2:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cff5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cff9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cffd:	e8 11 83 01 00       	call   c0025313 <__floatsidf>
c000d002:	83 c4 10             	add    esp,0x10
c000d005:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d009:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d00d:	52                   	push   edx
c000d00e:	50                   	push   eax
c000d00f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d013:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d017:	e8 61 85 01 00       	call   c002557d <__gedf2>
c000d01c:	83 c4 10             	add    esp,0x10
c000d01f:	85 c0                	test   eax,eax
c000d021:	0f 89 49 ff ff ff    	jns    c000cf70 <sinc_stereo_vari_process+0x310>
c000d027:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d02b:	0f 8e ef 00 00 00    	jle    c000d120 <sinc_stereo_vari_process+0x4c0>
c000d031:	83 ec 10             	sub    esp,0x10
c000d034:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d037:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d03a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d03d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d040:	e8 3f 7c 01 00       	call   c0024c84 <__subdf3>
c000d045:	83 c4 18             	add    esp,0x18
c000d048:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d04c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d050:	52                   	push   edx
c000d051:	50                   	push   eax
c000d052:	e8 b9 86 01 00       	call   c0025710 <fabs>
c000d057:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d05b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d05f:	83 c4 10             	add    esp,0x10
c000d062:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d067:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d074:	e8 e8 84 01 00       	call   c0025561 <__gtdf2>
c000d079:	83 c4 10             	add    esp,0x10
c000d07c:	85 c0                	test   eax,eax
c000d07e:	0f 8e 9c 00 00 00    	jle    c000d120 <sinc_stereo_vari_process+0x4c0>
c000d084:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d087:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d08a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d08e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d092:	52                   	push   edx
c000d093:	50                   	push   eax
c000d094:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d097:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d09a:	e8 e5 7b 01 00       	call   c0024c84 <__subdf3>
c000d09f:	59                   	pop    ecx
c000d0a0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0a4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0a8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d0ab:	e8 63 82 01 00       	call   c0025313 <__floatsidf>
c000d0b0:	83 c4 10             	add    esp,0x10
c000d0b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0bb:	52                   	push   edx
c000d0bc:	50                   	push   eax
c000d0bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0c5:	e8 e6 7b 01 00       	call   c0024cb0 <__muldf3>
c000d0ca:	5f                   	pop    edi
c000d0cb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0cf:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0d3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d0d6:	e8 38 82 01 00       	call   c0025313 <__floatsidf>
c000d0db:	83 c4 10             	add    esp,0x10
c000d0de:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0e6:	52                   	push   edx
c000d0e7:	50                   	push   eax
c000d0e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0f0:	e8 9f 7e 01 00       	call   c0024f94 <__divdf3>
c000d0f5:	83 c4 10             	add    esp,0x10
c000d0f8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0fc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d100:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d104:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d108:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d10c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d110:	e8 1e 75 01 00       	call   c0024633 <__adddf3>
c000d115:	83 c4 10             	add    esp,0x10
c000d118:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d11c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d120:	83 ec 0c             	sub    esp,0xc
c000d123:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d126:	e8 e8 81 01 00       	call   c0025313 <__floatsidf>
c000d12b:	83 c4 10             	add    esp,0x10
c000d12e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d132:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d136:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d13a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d13e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d146:	e8 34 84 01 00       	call   c002557f <__ltdf2>
c000d14b:	83 c4 10             	add    esp,0x10
c000d14e:	85 c0                	test   eax,eax
c000d150:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d154:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d158:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d15c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d160:	78 10                	js     c000d172 <sinc_stereo_vari_process+0x512>
c000d162:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d166:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d16a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d16e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d172:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d176:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d17a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d17e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d182:	e8 29 7b 01 00       	call   c0024cb0 <__muldf3>
c000d187:	59                   	pop    ecx
c000d188:	5f                   	pop    edi
c000d189:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d18d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d191:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d195:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d199:	e8 d3 e4 ff ff       	call   c000b671 <double_to_fp>
c000d19e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1a2:	89 c7                	mov    edi,eax
c000d1a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1a8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1b0:	e8 fb 7a 01 00       	call   c0024cb0 <__muldf3>
c000d1b5:	83 c4 18             	add    esp,0x18
c000d1b8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d1bc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1c0:	52                   	push   edx
c000d1c1:	50                   	push   eax
c000d1c2:	e8 aa e4 ff ff       	call   c000b671 <double_to_fp>
c000d1c7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d1ca:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d1ce:	83 c4 0c             	add    esp,0xc
c000d1d1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d1d4:	8d 04 90             	lea    eax,[eax+edx*4]
c000d1d7:	50                   	push   eax
c000d1d8:	50                   	push   eax
c000d1d9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d1dc:	e8 32 81 01 00       	call   c0025313 <__floatsidf>
c000d1e1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d1e5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d1e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1ed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1f1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1f5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1f9:	e8 96 7d 01 00       	call   c0024f94 <__divdf3>
c000d1fe:	83 c4 18             	add    esp,0x18
c000d201:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d205:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d209:	52                   	push   edx
c000d20a:	89 fa                	mov    edx,edi
c000d20c:	50                   	push   eax
c000d20d:	89 d8                	mov    eax,ebx
c000d20f:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d213:	e8 02 c7 ff ff       	call   c000991a <calc_output_stereo>
c000d218:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d21c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d220:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d224:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d228:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d22c:	e8 63 7d 01 00       	call   c0024f94 <__divdf3>
c000d231:	83 c4 10             	add    esp,0x10
c000d234:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d238:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d240:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d244:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d248:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d24c:	e8 e2 73 01 00       	call   c0024633 <__adddf3>
c000d251:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d255:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d259:	83 c4 18             	add    esp,0x18
c000d25c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d260:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d264:	e8 c7 84 01 00       	call   c0025730 <lrint>
c000d269:	83 ec 0c             	sub    esp,0xc
c000d26c:	50                   	push   eax
c000d26d:	e8 a1 80 01 00       	call   c0025313 <__floatsidf>
c000d272:	83 c4 10             	add    esp,0x10
c000d275:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d279:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d27d:	52                   	push   edx
c000d27e:	50                   	push   eax
c000d27f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d283:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d287:	e8 f8 79 01 00       	call   c0024c84 <__subdf3>
c000d28c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d290:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d294:	83 c4 20             	add    esp,0x20
c000d297:	6a 00                	push   0x0
c000d299:	6a 00                	push   0x0
c000d29b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d29f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2a3:	e8 d7 82 01 00       	call   c002557f <__ltdf2>
c000d2a8:	83 c4 10             	add    esp,0x10
c000d2ab:	85 c0                	test   eax,eax
c000d2ad:	79 20                	jns    c000d2cf <sinc_stereo_vari_process+0x66f>
c000d2af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2bf:	e8 6f 73 01 00       	call   c0024633 <__adddf3>
c000d2c4:	83 c4 10             	add    esp,0x10
c000d2c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2cf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d2d2:	83 ec 10             	sub    esp,0x10
c000d2d5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d2d9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d2dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2e4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2e8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2ec:	e8 93 79 01 00       	call   c0024c84 <__subdf3>
c000d2f1:	83 c4 18             	add    esp,0x18
c000d2f4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2f8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2fc:	52                   	push   edx
c000d2fd:	50                   	push   eax
c000d2fe:	e8 2d 84 01 00       	call   c0025730 <lrint>
c000d303:	0f af f8             	imul   edi,eax
c000d306:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d30a:	83 c4 10             	add    esp,0x10
c000d30d:	01 f8                	add    eax,edi
c000d30f:	99                   	cdq    
c000d310:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d313:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d316:	e9 fd fb ff ff       	jmp    c000cf18 <sinc_stereo_vari_process+0x2b8>
c000d31b:	83 c4 4c             	add    esp,0x4c
c000d31e:	89 d0                	mov    eax,edx
c000d320:	5b                   	pop    ebx
c000d321:	5e                   	pop    esi
c000d322:	5f                   	pop    edi
c000d323:	5d                   	pop    ebp
c000d324:	c3                   	ret    

c000d325 <sinc_mono_vari_process>:
c000d325:	55                   	push   ebp
c000d326:	ba 05 00 00 00       	mov    edx,0x5
c000d32b:	57                   	push   edi
c000d32c:	56                   	push   esi
c000d32d:	53                   	push   ebx
c000d32e:	83 ec 4c             	sub    esp,0x4c
c000d331:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d335:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d339:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d33c:	85 db                	test   ebx,ebx
c000d33e:	0f 84 c1 06 00 00    	je     c000da05 <sinc_mono_vari_process+0x6e0>
c000d344:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d347:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d34a:	0f af c7             	imul   eax,edi
c000d34d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d350:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d353:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d35a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d361:	0f af c7             	imul   eax,edi
c000d364:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d367:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d36b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d36e:	8b 00                	mov    eax,DWORD PTR [eax]
c000d370:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d374:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d378:	68 00 00 70 3f       	push   0x3f700000
c000d37d:	6a 00                	push   0x0
c000d37f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d383:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d387:	e8 f3 81 01 00       	call   c002557f <__ltdf2>
c000d38c:	83 c4 10             	add    esp,0x10
c000d38f:	ba 16 00 00 00       	mov    edx,0x16
c000d394:	85 c0                	test   eax,eax
c000d396:	0f 88 69 06 00 00    	js     c000da05 <sinc_mono_vari_process+0x6e0>
c000d39c:	68 00 00 70 40       	push   0x40700000
c000d3a1:	6a 00                	push   0x0
c000d3a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ab:	e8 b1 81 01 00       	call   c0025561 <__gtdf2>
c000d3b0:	83 c4 10             	add    esp,0x10
c000d3b3:	ba 16 00 00 00       	mov    edx,0x16
c000d3b8:	85 c0                	test   eax,eax
c000d3ba:	0f 8f 45 06 00 00    	jg     c000da05 <sinc_mono_vari_process+0x6e0>
c000d3c0:	83 ec 0c             	sub    esp,0xc
c000d3c3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d3c6:	e8 48 7f 01 00       	call   c0025313 <__floatsidf>
c000d3cb:	83 c4 10             	add    esp,0x10
c000d3ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d3d2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d3d6:	68 00 00 00 40       	push   0x40000000
c000d3db:	6a 00                	push   0x0
c000d3dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3e5:	e8 49 72 01 00       	call   c0024633 <__adddf3>
c000d3ea:	59                   	pop    ecx
c000d3eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d3ef:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d3f3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d3f6:	e8 18 7f 01 00       	call   c0025313 <__floatsidf>
c000d3fb:	83 c4 10             	add    esp,0x10
c000d3fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d402:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d406:	52                   	push   edx
c000d407:	50                   	push   eax
c000d408:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d40c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d410:	e8 7f 7b 01 00       	call   c0024f94 <__divdf3>
c000d415:	83 c4 10             	add    esp,0x10
c000d418:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d41c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d420:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d423:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d426:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d42a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d436:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d43a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d43e:	e8 1e 81 01 00       	call   c0025561 <__gtdf2>
c000d443:	83 c4 10             	add    esp,0x10
c000d446:	85 c0                	test   eax,eax
c000d448:	7e 2d                	jle    c000d477 <sinc_mono_vari_process+0x152>
c000d44a:	68 00 00 f0 3f       	push   0x3ff00000
c000d44f:	6a 00                	push   0x0
c000d451:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d455:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d459:	e8 21 81 01 00       	call   c002557f <__ltdf2>
c000d45e:	83 c4 10             	add    esp,0x10
c000d461:	85 c0                	test   eax,eax
c000d463:	79 4d                	jns    c000d4b2 <sinc_mono_vari_process+0x18d>
c000d465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d469:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d46d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d471:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d475:	eb 1b                	jmp    c000d492 <sinc_mono_vari_process+0x16d>
c000d477:	68 00 00 f0 3f       	push   0x3ff00000
c000d47c:	6a 00                	push   0x0
c000d47e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d482:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d486:	e8 f4 80 01 00       	call   c002557f <__ltdf2>
c000d48b:	83 c4 10             	add    esp,0x10
c000d48e:	85 c0                	test   eax,eax
c000d490:	79 20                	jns    c000d4b2 <sinc_mono_vari_process+0x18d>
c000d492:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d496:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d49a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d49e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4a2:	e8 ed 7a 01 00       	call   c0024f94 <__divdf3>
c000d4a7:	83 c4 10             	add    esp,0x10
c000d4aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4b2:	50                   	push   eax
c000d4b3:	50                   	push   eax
c000d4b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4b8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4bc:	e8 6f 82 01 00       	call   c0025730 <lrint>
c000d4c1:	40                   	inc    eax
c000d4c2:	0f af c7             	imul   eax,edi
c000d4c5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d4c9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d4cd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d4d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d4d3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4db:	58                   	pop    eax
c000d4dc:	5a                   	pop    edx
c000d4dd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4e5:	e8 46 82 01 00       	call   c0025730 <lrint>
c000d4ea:	83 ec 0c             	sub    esp,0xc
c000d4ed:	50                   	push   eax
c000d4ee:	e8 20 7e 01 00       	call   c0025313 <__floatsidf>
c000d4f3:	83 c4 10             	add    esp,0x10
c000d4f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4fa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4fe:	52                   	push   edx
c000d4ff:	50                   	push   eax
c000d500:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d504:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d508:	e8 77 77 01 00       	call   c0024c84 <__subdf3>
c000d50d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d511:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d515:	83 c4 20             	add    esp,0x20
c000d518:	6a 00                	push   0x0
c000d51a:	6a 00                	push   0x0
c000d51c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d524:	e8 56 80 01 00       	call   c002557f <__ltdf2>
c000d529:	83 c4 10             	add    esp,0x10
c000d52c:	85 c0                	test   eax,eax
c000d52e:	79 1f                	jns    c000d54f <sinc_mono_vari_process+0x22a>
c000d530:	68 00 00 f0 3f       	push   0x3ff00000
c000d535:	6a 00                	push   0x0
c000d537:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d53b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d53f:	e8 ef 70 01 00       	call   c0024633 <__adddf3>
c000d544:	83 c4 10             	add    esp,0x10
c000d547:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d54b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d54f:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d552:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d555:	83 ec 10             	sub    esp,0x10
c000d558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d55c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d560:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d564:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d568:	e8 17 77 01 00       	call   c0024c84 <__subdf3>
c000d56d:	83 c4 18             	add    esp,0x18
c000d570:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d574:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d578:	52                   	push   edx
c000d579:	50                   	push   eax
c000d57a:	e8 b1 81 01 00       	call   c0025730 <lrint>
c000d57f:	0f af f8             	imul   edi,eax
c000d582:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d585:	31 ff                	xor    edi,edi
c000d587:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d58c:	99                   	cdq    
c000d58d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d590:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d593:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d597:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d59b:	55                   	push   ebp
c000d59c:	57                   	push   edi
c000d59d:	e8 f2 79 01 00       	call   c0024f94 <__divdf3>
c000d5a2:	83 c4 10             	add    esp,0x10
c000d5a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5ad:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d5b2:	68 23 42 92 0c       	push   0xc924223
c000d5b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5bf:	e8 6f 70 01 00       	call   c0024633 <__adddf3>
c000d5c4:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d5c8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d5cc:	83 c4 20             	add    esp,0x20
c000d5cf:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d5d3:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d5d7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d5da:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d5dd:	7d 54                	jge    c000d633 <sinc_mono_vari_process+0x30e>
c000d5df:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d5e2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d5e5:	01 c8                	add    eax,ecx
c000d5e7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d5ea:	99                   	cdq    
c000d5eb:	f7 f9                	idiv   ecx
c000d5ed:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d5f1:	7d 0c                	jge    c000d5ff <sinc_mono_vari_process+0x2da>
c000d5f3:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d5f6:	85 ff                	test   edi,edi
c000d5f8:	79 73                	jns    c000d66d <sinc_mono_vari_process+0x348>
c000d5fa:	e9 ee 00 00 00       	jmp    c000d6ed <sinc_mono_vari_process+0x3c8>
c000d5ff:	50                   	push   eax
c000d600:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d604:	56                   	push   esi
c000d605:	53                   	push   ebx
c000d606:	e8 8d e0 ff ff       	call   c000b698 <prepare_data>
c000d60b:	89 c2                	mov    edx,eax
c000d60d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d611:	83 c4 10             	add    esp,0x10
c000d614:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d617:	85 d2                	test   edx,edx
c000d619:	0f 85 e6 03 00 00    	jne    c000da05 <sinc_mono_vari_process+0x6e0>
c000d61f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d622:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d625:	01 c8                	add    eax,ecx
c000d627:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d62a:	99                   	cdq    
c000d62b:	f7 f9                	idiv   ecx
c000d62d:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d631:	7c c0                	jl     c000d5f3 <sinc_mono_vari_process+0x2ce>
c000d633:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d637:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d63b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d63f:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d642:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d649:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d64d:	89 01                	mov    DWORD PTR [ecx],eax
c000d64f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d652:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d655:	99                   	cdq    
c000d656:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d659:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d65c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d65f:	99                   	cdq    
c000d660:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d663:	31 d2                	xor    edx,edx
c000d665:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d668:	e9 98 03 00 00       	jmp    c000da05 <sinc_mono_vari_process+0x6e0>
c000d66d:	83 ec 0c             	sub    esp,0xc
c000d670:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d673:	e8 9b 7c 01 00       	call   c0025313 <__floatsidf>
c000d678:	83 c4 10             	add    esp,0x10
c000d67b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d67f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d687:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d68b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d68f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d693:	e8 9b 6f 01 00       	call   c0024633 <__adddf3>
c000d698:	83 c4 10             	add    esp,0x10
c000d69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6ab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6b3:	e8 7b 6f 01 00       	call   c0024633 <__adddf3>
c000d6b8:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d6bb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d6bf:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d6c3:	e8 4b 7c 01 00       	call   c0025313 <__floatsidf>
c000d6c8:	83 c4 10             	add    esp,0x10
c000d6cb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6cf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6d3:	52                   	push   edx
c000d6d4:	50                   	push   eax
c000d6d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6dd:	e8 7f 7e 01 00       	call   c0025561 <__gtdf2>
c000d6e2:	83 c4 10             	add    esp,0x10
c000d6e5:	85 c0                	test   eax,eax
c000d6e7:	0f 8f 46 ff ff ff    	jg     c000d633 <sinc_mono_vari_process+0x30e>
c000d6ed:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d6f1:	0f 8e f5 00 00 00    	jle    c000d7ec <sinc_mono_vari_process+0x4c7>
c000d6f7:	83 ec 10             	sub    esp,0x10
c000d6fa:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d6fd:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d700:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d704:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d707:	ff 30                	push   DWORD PTR [eax]
c000d709:	e8 76 75 01 00       	call   c0024c84 <__subdf3>
c000d70e:	83 c4 18             	add    esp,0x18
c000d711:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d715:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d719:	52                   	push   edx
c000d71a:	50                   	push   eax
c000d71b:	e8 f0 7f 01 00       	call   c0025710 <fabs>
c000d720:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d724:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d728:	83 c4 10             	add    esp,0x10
c000d72b:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d730:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d735:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d739:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d73d:	e8 1f 7e 01 00       	call   c0025561 <__gtdf2>
c000d742:	83 c4 10             	add    esp,0x10
c000d745:	85 c0                	test   eax,eax
c000d747:	0f 8e 9f 00 00 00    	jle    c000d7ec <sinc_mono_vari_process+0x4c7>
c000d74d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d751:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d754:	8b 00                	mov    eax,DWORD PTR [eax]
c000d756:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d75a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d75e:	52                   	push   edx
c000d75f:	50                   	push   eax
c000d760:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d763:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d766:	e8 19 75 01 00       	call   c0024c84 <__subdf3>
c000d76b:	5f                   	pop    edi
c000d76c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d770:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d774:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d777:	e8 97 7b 01 00       	call   c0025313 <__floatsidf>
c000d77c:	83 c4 10             	add    esp,0x10
c000d77f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d783:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d787:	52                   	push   edx
c000d788:	50                   	push   eax
c000d789:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d791:	e8 1a 75 01 00       	call   c0024cb0 <__muldf3>
c000d796:	5d                   	pop    ebp
c000d797:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d79b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d79f:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d7a2:	e8 6c 7b 01 00       	call   c0025313 <__floatsidf>
c000d7a7:	83 c4 10             	add    esp,0x10
c000d7aa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7ae:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7b2:	52                   	push   edx
c000d7b3:	50                   	push   eax
c000d7b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7bc:	e8 d3 77 01 00       	call   c0024f94 <__divdf3>
c000d7c1:	83 c4 10             	add    esp,0x10
c000d7c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7dc:	e8 52 6e 01 00       	call   c0024633 <__adddf3>
c000d7e1:	83 c4 10             	add    esp,0x10
c000d7e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7ec:	83 ec 0c             	sub    esp,0xc
c000d7ef:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d7f2:	e8 1c 7b 01 00       	call   c0025313 <__floatsidf>
c000d7f7:	83 c4 10             	add    esp,0x10
c000d7fa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7fe:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d802:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d80a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d812:	e8 68 7d 01 00       	call   c002557f <__ltdf2>
c000d817:	83 c4 10             	add    esp,0x10
c000d81a:	85 c0                	test   eax,eax
c000d81c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d820:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d824:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000d828:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000d82c:	78 10                	js     c000d83e <sinc_mono_vari_process+0x519>
c000d82e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d832:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d836:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d83a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d83e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d842:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d846:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d84a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d84e:	e8 5d 74 01 00       	call   c0024cb0 <__muldf3>
c000d853:	59                   	pop    ecx
c000d854:	5f                   	pop    edi
c000d855:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d859:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d85d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d861:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d865:	e8 07 de ff ff       	call   c000b671 <double_to_fp>
c000d86a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d86e:	89 c7                	mov    edi,eax
c000d870:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d874:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d878:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d87c:	e8 2f 74 01 00       	call   c0024cb0 <__muldf3>
c000d881:	83 c4 18             	add    esp,0x18
c000d884:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d888:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d88c:	52                   	push   edx
c000d88d:	50                   	push   eax
c000d88e:	e8 de dd ff ff       	call   c000b671 <double_to_fp>
c000d893:	83 ec 0c             	sub    esp,0xc
c000d896:	89 c5                	mov    ebp,eax
c000d898:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d89b:	e8 73 7a 01 00       	call   c0025313 <__floatsidf>
c000d8a0:	83 c4 10             	add    esp,0x10
c000d8a3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8a7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8ab:	52                   	push   edx
c000d8ac:	50                   	push   eax
c000d8ad:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8b1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8b5:	e8 da 76 01 00       	call   c0024f94 <__divdf3>
c000d8ba:	83 c4 10             	add    esp,0x10
c000d8bd:	89 e9                	mov    ecx,ebp
c000d8bf:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8c3:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8c7:	89 d8                	mov    eax,ebx
c000d8c9:	89 fa                	mov    edx,edi
c000d8cb:	e8 ee bd ff ff       	call   c00096be <calc_output_single>
c000d8d0:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000d8d3:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d8d6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8da:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8de:	52                   	push   edx
c000d8df:	50                   	push   eax
c000d8e0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8e4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8e8:	e8 c3 73 01 00       	call   c0024cb0 <__muldf3>
c000d8ed:	59                   	pop    ecx
c000d8ee:	59                   	pop    ecx
c000d8ef:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8f3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8ff:	e8 7f 7c 01 00       	call   c0025583 <__truncdfsf2>
c000d904:	83 c4 10             	add    esp,0x10
c000d907:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000d90a:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d90d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d911:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d915:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d919:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d91d:	e8 72 76 01 00       	call   c0024f94 <__divdf3>
c000d922:	83 c4 10             	add    esp,0x10
c000d925:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d929:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d92d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d931:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d935:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d939:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d93d:	e8 f1 6c 01 00       	call   c0024633 <__adddf3>
c000d942:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000d946:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d94a:	83 c4 18             	add    esp,0x18
c000d94d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d951:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d955:	e8 d6 7d 01 00       	call   c0025730 <lrint>
c000d95a:	83 ec 0c             	sub    esp,0xc
c000d95d:	50                   	push   eax
c000d95e:	e8 b0 79 01 00       	call   c0025313 <__floatsidf>
c000d963:	83 c4 10             	add    esp,0x10
c000d966:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d96a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d96e:	52                   	push   edx
c000d96f:	50                   	push   eax
c000d970:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d974:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d978:	e8 07 73 01 00       	call   c0024c84 <__subdf3>
c000d97d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d981:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d985:	83 c4 20             	add    esp,0x20
c000d988:	6a 00                	push   0x0
c000d98a:	6a 00                	push   0x0
c000d98c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d990:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d994:	e8 e6 7b 01 00       	call   c002557f <__ltdf2>
c000d999:	83 c4 10             	add    esp,0x10
c000d99c:	85 c0                	test   eax,eax
c000d99e:	79 20                	jns    c000d9c0 <sinc_mono_vari_process+0x69b>
c000d9a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9b0:	e8 7e 6c 01 00       	call   c0024633 <__adddf3>
c000d9b5:	83 c4 10             	add    esp,0x10
c000d9b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9c0:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d9c3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d9c6:	83 ec 10             	sub    esp,0x10
c000d9c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9d1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9d5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9d9:	e8 a6 72 01 00       	call   c0024c84 <__subdf3>
c000d9de:	83 c4 18             	add    esp,0x18
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e9:	52                   	push   edx
c000d9ea:	50                   	push   eax
c000d9eb:	e8 40 7d 01 00       	call   c0025730 <lrint>
c000d9f0:	83 c4 10             	add    esp,0x10
c000d9f3:	0f af f8             	imul   edi,eax
c000d9f6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d9f9:	99                   	cdq    
c000d9fa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d9fd:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000da00:	e9 d2 fb ff ff       	jmp    c000d5d7 <sinc_mono_vari_process+0x2b2>
c000da05:	83 c4 4c             	add    esp,0x4c
c000da08:	89 d0                	mov    eax,edx
c000da0a:	5b                   	pop    ebx
c000da0b:	5e                   	pop    esi
c000da0c:	5f                   	pop    edi
c000da0d:	5d                   	pop    ebp
c000da0e:	c3                   	ret    

c000da0f <sinc_get_name>:
c000da0f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da13:	31 c0                	xor    eax,eax
c000da15:	83 fa 02             	cmp    edx,0x2
c000da18:	77 07                	ja     c000da21 <sinc_get_name+0x12>
c000da1a:	8b 04 95 24 6e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd91dc]
c000da21:	c3                   	ret    

c000da22 <sinc_get_description>:
c000da22:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da26:	31 c0                	xor    eax,eax
c000da28:	83 fa 02             	cmp    edx,0x2
c000da2b:	77 07                	ja     c000da34 <sinc_get_description+0x12>
c000da2d:	8b 04 95 18 6e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd91e8]
c000da34:	c3                   	ret    

c000da35 <sinc_set_converter>:
c000da35:	53                   	push   ebx
c000da36:	81 ec 58 08 00 00    	sub    esp,0x858
c000da3c:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000da43:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000da46:	85 c0                	test   eax,eax
c000da48:	74 13                	je     c000da5d <sinc_set_converter+0x28>
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	50                   	push   eax
c000da4e:	e8 7f 1a 00 00       	call   c000f4d2 <free>
c000da53:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000da5a:	83 c4 10             	add    esp,0x10
c000da5d:	50                   	push   eax
c000da5e:	68 44 08 00 00       	push   0x844
c000da63:	6a 00                	push   0x0
c000da65:	8d 44 24 18          	lea    eax,[esp+0x18]
c000da69:	50                   	push   eax
c000da6a:	e8 0e 2c ff ff       	call   c000067d <memset>
c000da6f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000da72:	83 c4 10             	add    esp,0x10
c000da75:	b8 0b 00 00 00       	mov    eax,0xb
c000da7a:	81 fa 80 00 00 00    	cmp    edx,0x80
c000da80:	7f 6e                	jg     c000daf0 <sinc_set_converter+0xbb>
c000da82:	83 fa 01             	cmp    edx,0x1
c000da85:	75 10                	jne    c000da97 <sinc_set_converter+0x62>
c000da87:	c7 43 24 25 d3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d325
c000da8e:	c7 43 20 25 d3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d325
c000da95:	eb 4d                	jmp    c000dae4 <sinc_set_converter+0xaf>
c000da97:	83 fa 02             	cmp    edx,0x2
c000da9a:	75 10                	jne    c000daac <sinc_set_converter+0x77>
c000da9c:	c7 43 24 60 cc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cc60
c000daa3:	c7 43 20 60 cc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cc60
c000daaa:	eb 38                	jmp    c000dae4 <sinc_set_converter+0xaf>
c000daac:	83 fa 04             	cmp    edx,0x4
c000daaf:	75 10                	jne    c000dac1 <sinc_set_converter+0x8c>
c000dab1:	c7 43 24 9b c5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c59b
c000dab8:	c7 43 20 9b c5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c59b
c000dabf:	eb 23                	jmp    c000dae4 <sinc_set_converter+0xaf>
c000dac1:	83 fa 06             	cmp    edx,0x6
c000dac4:	75 10                	jne    c000dad6 <sinc_set_converter+0xa1>
c000dac6:	c7 43 24 d6 be 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bed6
c000dacd:	c7 43 20 d6 be 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bed6
c000dad4:	eb 0e                	jmp    c000dae4 <sinc_set_converter+0xaf>
c000dad6:	c7 43 24 12 b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b812
c000dadd:	c7 43 20 12 b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b812
c000dae4:	c7 43 28 c5 aa 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000aac5
c000daeb:	b8 0a 00 00 00       	mov    eax,0xa
c000daf0:	81 c4 58 08 00 00    	add    esp,0x858
c000daf6:	5b                   	pop    ebx
c000daf7:	c3                   	ret    

c000daf8 <zoh_vari_process>:
c000daf8:	55                   	push   ebp
c000daf9:	31 d2                	xor    edx,edx
c000dafb:	57                   	push   edi
c000dafc:	56                   	push   esi
c000dafd:	53                   	push   ebx
c000dafe:	83 ec 3c             	sub    esp,0x3c
c000db01:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000db05:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000db09:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000db0d:	0f 8e 80 06 00 00    	jle    c000e193 <zoh_vari_process+0x69b>
c000db13:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000db16:	ba 05 00 00 00       	mov    edx,0x5
c000db1b:	85 db                	test   ebx,ebx
c000db1d:	0f 84 70 06 00 00    	je     c000e193 <zoh_vari_process+0x69b>
c000db23:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000db26:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000db2a:	74 19                	je     c000db45 <zoh_vari_process+0x4d>
c000db2c:	31 d2                	xor    edx,edx
c000db2e:	39 c2                	cmp    edx,eax
c000db30:	7d 0c                	jge    c000db3e <zoh_vari_process+0x46>
c000db32:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000db34:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000db37:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000db3b:	42                   	inc    edx
c000db3c:	eb f0                	jmp    c000db2e <zoh_vari_process+0x36>
c000db3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000db45:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000db48:	0f af d0             	imul   edx,eax
c000db4b:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000db4e:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000db52:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000db59:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000db5c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000db63:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000db66:	8b 07                	mov    eax,DWORD PTR [edi]
c000db68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db70:	68 00 00 70 3f       	push   0x3f700000
c000db75:	6a 00                	push   0x0
c000db77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db7f:	e8 fb 79 01 00       	call   c002557f <__ltdf2>
c000db84:	83 c4 10             	add    esp,0x10
c000db87:	ba 16 00 00 00       	mov    edx,0x16
c000db8c:	85 c0                	test   eax,eax
c000db8e:	0f 88 ff 05 00 00    	js     c000e193 <zoh_vari_process+0x69b>
c000db94:	68 00 00 70 40       	push   0x40700000
c000db99:	6a 00                	push   0x0
c000db9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dba3:	e8 b9 79 01 00       	call   c0025561 <__gtdf2>
c000dba8:	83 c4 10             	add    esp,0x10
c000dbab:	ba 16 00 00 00       	mov    edx,0x16
c000dbb0:	85 c0                	test   eax,eax
c000dbb2:	0f 8f db 05 00 00    	jg     c000e193 <zoh_vari_process+0x69b>
c000dbb8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dbbb:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dbbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbc2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dbc6:	68 00 00 f0 3f       	push   0x3ff00000
c000dbcb:	6a 00                	push   0x0
c000dbcd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbd5:	e8 a5 79 01 00       	call   c002557f <__ltdf2>
c000dbda:	83 c4 10             	add    esp,0x10
c000dbdd:	85 c0                	test   eax,eax
c000dbdf:	0f 89 da 01 00 00    	jns    c000ddbf <zoh_vari_process+0x2c7>
c000dbe5:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dbe8:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000dbeb:	0f 8d ce 01 00 00    	jge    c000ddbf <zoh_vari_process+0x2c7>
c000dbf1:	83 ec 0c             	sub    esp,0xc
c000dbf4:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dbf7:	e8 17 77 01 00       	call   c0025313 <__floatsidf>
c000dbfc:	83 c4 10             	add    esp,0x10
c000dbff:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc12:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc16:	e8 95 70 01 00       	call   c0024cb0 <__muldf3>
c000dc1b:	59                   	pop    ecx
c000dc1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc20:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc24:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dc27:	e8 e7 76 01 00       	call   c0025313 <__floatsidf>
c000dc2c:	83 c4 10             	add    esp,0x10
c000dc2f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc33:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc37:	52                   	push   edx
c000dc38:	50                   	push   eax
c000dc39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc41:	e8 ed 69 01 00       	call   c0024633 <__adddf3>
c000dc46:	59                   	pop    ecx
c000dc47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc4b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc4f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dc52:	e8 bc 76 01 00       	call   c0025313 <__floatsidf>
c000dc57:	83 c4 10             	add    esp,0x10
c000dc5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc62:	52                   	push   edx
c000dc63:	50                   	push   eax
c000dc64:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc68:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc6c:	e8 0c 79 01 00       	call   c002557d <__gedf2>
c000dc71:	83 c4 10             	add    esp,0x10
c000dc74:	85 c0                	test   eax,eax
c000dc76:	0f 89 43 01 00 00    	jns    c000ddbf <zoh_vari_process+0x2c7>
c000dc7c:	85 ed                	test   ebp,ebp
c000dc7e:	0f 8e ec 00 00 00    	jle    c000dd70 <zoh_vari_process+0x278>
c000dc84:	83 ec 10             	sub    esp,0x10
c000dc87:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc8a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc8d:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dc90:	ff 37                	push   DWORD PTR [edi]
c000dc92:	e8 ed 6f 01 00       	call   c0024c84 <__subdf3>
c000dc97:	83 c4 18             	add    esp,0x18
c000dc9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc9e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dca2:	52                   	push   edx
c000dca3:	50                   	push   eax
c000dca4:	e8 67 7a 01 00       	call   c0025710 <fabs>
c000dca9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcad:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcb1:	83 c4 10             	add    esp,0x10
c000dcb4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dcb9:	68 23 42 92 0c       	push   0xc924223
c000dcbe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcc2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcc6:	e8 96 78 01 00       	call   c0025561 <__gtdf2>
c000dccb:	83 c4 10             	add    esp,0x10
c000dcce:	85 c0                	test   eax,eax
c000dcd0:	0f 8e 9a 00 00 00    	jle    c000dd70 <zoh_vari_process+0x278>
c000dcd6:	8b 07                	mov    eax,DWORD PTR [edi]
c000dcd8:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dcdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000dcde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dce2:	52                   	push   edx
c000dce3:	50                   	push   eax
c000dce4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dce7:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dcea:	e8 95 6f 01 00       	call   c0024c84 <__subdf3>
c000dcef:	59                   	pop    ecx
c000dcf0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dcf4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dcf8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dcfb:	e8 13 76 01 00       	call   c0025313 <__floatsidf>
c000dd00:	83 c4 10             	add    esp,0x10
c000dd03:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd07:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd0b:	52                   	push   edx
c000dd0c:	50                   	push   eax
c000dd0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd15:	e8 96 6f 01 00       	call   c0024cb0 <__muldf3>
c000dd1a:	5d                   	pop    ebp
c000dd1b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd1f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd23:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dd26:	e8 e8 75 01 00       	call   c0025313 <__floatsidf>
c000dd2b:	83 c4 10             	add    esp,0x10
c000dd2e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd32:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd36:	52                   	push   edx
c000dd37:	50                   	push   eax
c000dd38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd40:	e8 4f 72 01 00       	call   c0024f94 <__divdf3>
c000dd45:	83 c4 10             	add    esp,0x10
c000dd48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd60:	e8 ce 68 01 00       	call   c0024633 <__adddf3>
c000dd65:	83 c4 10             	add    esp,0x10
c000dd68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd70:	31 c0                	xor    eax,eax
c000dd72:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dd75:	7e 13                	jle    c000dd8a <zoh_vari_process+0x292>
c000dd77:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dd7b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dd7e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dd81:	40                   	inc    eax
c000dd82:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dd85:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dd88:	eb e8                	jmp    c000dd72 <zoh_vari_process+0x27a>
c000dd8a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd8e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd92:	68 00 00 f0 3f       	push   0x3ff00000
c000dd97:	6a 00                	push   0x0
c000dd99:	e8 f6 71 01 00       	call   c0024f94 <__divdf3>
c000dd9e:	83 c4 10             	add    esp,0x10
c000dda1:	89 04 24             	mov    DWORD PTR [esp],eax
c000dda4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dda8:	52                   	push   edx
c000dda9:	50                   	push   eax
c000ddaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddb2:	e8 7c 68 01 00       	call   c0024633 <__adddf3>
c000ddb7:	83 c4 10             	add    esp,0x10
c000ddba:	e9 ff fd ff ff       	jmp    c000dbbe <zoh_vari_process+0xc6>
c000ddbf:	55                   	push   ebp
c000ddc0:	55                   	push   ebp
c000ddc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddc9:	e8 62 79 01 00       	call   c0025730 <lrint>
c000ddce:	83 ec 0c             	sub    esp,0xc
c000ddd1:	50                   	push   eax
c000ddd2:	e8 3c 75 01 00       	call   c0025313 <__floatsidf>
c000ddd7:	83 c4 10             	add    esp,0x10
c000ddda:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddde:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dde2:	52                   	push   edx
c000dde3:	50                   	push   eax
c000dde4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dde8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddec:	e8 93 6e 01 00       	call   c0024c84 <__subdf3>
c000ddf1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ddf5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ddf9:	83 c4 20             	add    esp,0x20
c000ddfc:	6a 00                	push   0x0
c000ddfe:	6a 00                	push   0x0
c000de00:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de04:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de08:	e8 72 77 01 00       	call   c002557f <__ltdf2>
c000de0d:	83 c4 10             	add    esp,0x10
c000de10:	85 c0                	test   eax,eax
c000de12:	79 1e                	jns    c000de32 <zoh_vari_process+0x33a>
c000de14:	68 00 00 f0 3f       	push   0x3ff00000
c000de19:	6a 00                	push   0x0
c000de1b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de1f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de23:	e8 0b 68 01 00       	call   c0024633 <__adddf3>
c000de28:	83 c4 10             	add    esp,0x10
c000de2b:	89 04 24             	mov    DWORD PTR [esp],eax
c000de2e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de32:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000de35:	83 ec 10             	sub    esp,0x10
c000de38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de40:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de48:	e8 37 6e 01 00       	call   c0024c84 <__subdf3>
c000de4d:	83 c4 18             	add    esp,0x18
c000de50:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de54:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de58:	52                   	push   edx
c000de59:	50                   	push   eax
c000de5a:	e8 d1 78 01 00       	call   c0025730 <lrint>
c000de5f:	83 c4 10             	add    esp,0x10
c000de62:	0f af e8             	imul   ebp,eax
c000de65:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000de68:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000de6b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000de6f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de72:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000de75:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de79:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000de7c:	0f 8d 7a 02 00 00    	jge    c000e0fc <zoh_vari_process+0x604>
c000de82:	83 ec 0c             	sub    esp,0xc
c000de85:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de88:	e8 86 74 01 00       	call   c0025313 <__floatsidf>
c000de8d:	83 c4 10             	add    esp,0x10
c000de90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de94:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000de9c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dea0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dea4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dea8:	e8 03 6e 01 00       	call   c0024cb0 <__muldf3>
c000dead:	59                   	pop    ecx
c000deae:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000deb2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000deb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000deba:	e8 54 74 01 00       	call   c0025313 <__floatsidf>
c000debf:	83 c4 10             	add    esp,0x10
c000dec2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dec6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000deca:	52                   	push   edx
c000decb:	50                   	push   eax
c000decc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ded0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ded4:	e8 5a 67 01 00       	call   c0024633 <__adddf3>
c000ded9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000dedc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dee0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dee4:	e8 2a 74 01 00       	call   c0025313 <__floatsidf>
c000dee9:	83 c4 10             	add    esp,0x10
c000deec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000def0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000def4:	52                   	push   edx
c000def5:	50                   	push   eax
c000def6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000defa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000defe:	e8 7e 76 01 00       	call   c0025581 <__ledf2>
c000df03:	83 c4 10             	add    esp,0x10
c000df06:	85 c0                	test   eax,eax
c000df08:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000df0c:	0f 8f ea 01 00 00    	jg     c000e0fc <zoh_vari_process+0x604>
c000df12:	85 c9                	test   ecx,ecx
c000df14:	0f 8e ed 00 00 00    	jle    c000e007 <zoh_vari_process+0x50f>
c000df1a:	83 ec 10             	sub    esp,0x10
c000df1d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df20:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df23:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df26:	ff 37                	push   DWORD PTR [edi]
c000df28:	e8 57 6d 01 00       	call   c0024c84 <__subdf3>
c000df2d:	83 c4 18             	add    esp,0x18
c000df30:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df34:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df38:	52                   	push   edx
c000df39:	50                   	push   eax
c000df3a:	e8 d1 77 01 00       	call   c0025710 <fabs>
c000df3f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df43:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df47:	83 c4 10             	add    esp,0x10
c000df4a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df4f:	68 23 42 92 0c       	push   0xc924223
c000df54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df5c:	e8 00 76 01 00       	call   c0025561 <__gtdf2>
c000df61:	83 c4 10             	add    esp,0x10
c000df64:	85 c0                	test   eax,eax
c000df66:	0f 8e 9b 00 00 00    	jle    c000e007 <zoh_vari_process+0x50f>
c000df6c:	8b 07                	mov    eax,DWORD PTR [edi]
c000df6e:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df75:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df79:	52                   	push   edx
c000df7a:	50                   	push   eax
c000df7b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df7e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df81:	e8 fe 6c 01 00       	call   c0024c84 <__subdf3>
c000df86:	5d                   	pop    ebp
c000df87:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000df8b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000df8f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df92:	e8 7c 73 01 00       	call   c0025313 <__floatsidf>
c000df97:	83 c4 10             	add    esp,0x10
c000df9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df9e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfa2:	52                   	push   edx
c000dfa3:	50                   	push   eax
c000dfa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfac:	e8 ff 6c 01 00       	call   c0024cb0 <__muldf3>
c000dfb1:	59                   	pop    ecx
c000dfb2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfb6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dfba:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dfbd:	e8 51 73 01 00       	call   c0025313 <__floatsidf>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfc9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfcd:	52                   	push   edx
c000dfce:	50                   	push   eax
c000dfcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd7:	e8 b8 6f 01 00       	call   c0024f94 <__divdf3>
c000dfdc:	83 c4 10             	add    esp,0x10
c000dfdf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dfe3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dfe7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfeb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff7:	e8 37 66 01 00       	call   c0024633 <__adddf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e003:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e007:	31 d2                	xor    edx,edx
c000e009:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e00c:	39 d0                	cmp    eax,edx
c000e00e:	7e 1d                	jle    c000e02d <zoh_vari_process+0x535>
c000e010:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e013:	29 c1                	sub    ecx,eax
c000e015:	89 c8                	mov    eax,ecx
c000e017:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e019:	01 d0                	add    eax,edx
c000e01b:	42                   	inc    edx
c000e01c:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e01f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e022:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e025:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e028:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e02b:	eb dc                	jmp    c000e009 <zoh_vari_process+0x511>
c000e02d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e031:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e035:	68 00 00 f0 3f       	push   0x3ff00000
c000e03a:	6a 00                	push   0x0
c000e03c:	e8 53 6f 01 00       	call   c0024f94 <__divdf3>
c000e041:	83 c4 10             	add    esp,0x10
c000e044:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e048:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e04c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e050:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e054:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e05c:	e8 d2 65 01 00       	call   c0024633 <__adddf3>
c000e061:	5d                   	pop    ebp
c000e062:	59                   	pop    ecx
c000e063:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e067:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e06b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e06f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e073:	e8 b8 76 01 00       	call   c0025730 <lrint>
c000e078:	83 ec 0c             	sub    esp,0xc
c000e07b:	50                   	push   eax
c000e07c:	e8 92 72 01 00       	call   c0025313 <__floatsidf>
c000e081:	83 c4 10             	add    esp,0x10
c000e084:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e088:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e08c:	52                   	push   edx
c000e08d:	50                   	push   eax
c000e08e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e092:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e096:	e8 e9 6b 01 00       	call   c0024c84 <__subdf3>
c000e09b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e09f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0a3:	83 c4 20             	add    esp,0x20
c000e0a6:	6a 00                	push   0x0
c000e0a8:	6a 00                	push   0x0
c000e0aa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0ae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0b2:	e8 c8 74 01 00       	call   c002557f <__ltdf2>
c000e0b7:	83 c4 10             	add    esp,0x10
c000e0ba:	85 c0                	test   eax,eax
c000e0bc:	79 1e                	jns    c000e0dc <zoh_vari_process+0x5e4>
c000e0be:	68 00 00 f0 3f       	push   0x3ff00000
c000e0c3:	6a 00                	push   0x0
c000e0c5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0cd:	e8 61 65 01 00       	call   c0024633 <__adddf3>
c000e0d2:	83 c4 10             	add    esp,0x10
c000e0d5:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0d8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e0dc:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e0df:	83 ec 10             	sub    esp,0x10
c000e0e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0f2:	e8 8d 6b 01 00       	call   c0024c84 <__subdf3>
c000e0f7:	e9 51 fd ff ff       	jmp    c000de4d <zoh_vari_process+0x355>
c000e0fc:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e100:	7d 3a                	jge    c000e13c <zoh_vari_process+0x644>
c000e102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e106:	83 ec 0c             	sub    esp,0xc
c000e109:	29 e8                	sub    eax,ebp
c000e10b:	99                   	cdq    
c000e10c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e10f:	50                   	push   eax
c000e110:	e8 fe 71 01 00       	call   c0025313 <__floatsidf>
c000e115:	83 c4 10             	add    esp,0x10
c000e118:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e11c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e120:	52                   	push   edx
c000e121:	50                   	push   eax
c000e122:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e126:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e12a:	e8 04 65 01 00       	call   c0024633 <__adddf3>
c000e12f:	83 c4 10             	add    esp,0x10
c000e132:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e135:	89 04 24             	mov    DWORD PTR [esp],eax
c000e138:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e13c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e13f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e143:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e146:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e149:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e14c:	85 c0                	test   eax,eax
c000e14e:	7f 25                	jg     c000e175 <zoh_vari_process+0x67d>
c000e150:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e154:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e158:	89 07                	mov    DWORD PTR [edi],eax
c000e15a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e15d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e160:	99                   	cdq    
c000e161:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e164:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e167:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e16a:	99                   	cdq    
c000e16b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e16e:	31 d2                	xor    edx,edx
c000e170:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e173:	eb 1e                	jmp    c000e193 <zoh_vari_process+0x69b>
c000e175:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e178:	31 d2                	xor    edx,edx
c000e17a:	29 c8                	sub    eax,ecx
c000e17c:	c1 e0 02             	shl    eax,0x2
c000e17f:	39 d1                	cmp    ecx,edx
c000e181:	7e cd                	jle    c000e150 <zoh_vari_process+0x658>
c000e183:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e185:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e189:	83 c0 04             	add    eax,0x4
c000e18c:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e190:	42                   	inc    edx
c000e191:	eb ec                	jmp    c000e17f <zoh_vari_process+0x687>
c000e193:	83 c4 3c             	add    esp,0x3c
c000e196:	89 d0                	mov    eax,edx
c000e198:	5b                   	pop    ebx
c000e199:	5e                   	pop    esi
c000e19a:	5f                   	pop    edi
c000e19b:	5d                   	pop    ebp
c000e19c:	c3                   	ret    

c000e19d <zoh_reset>:
c000e19d:	83 ec 0c             	sub    esp,0xc
c000e1a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1a4:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e1a7:	85 c0                	test   eax,eax
c000e1a9:	74 20                	je     c000e1cb <zoh_reset+0x2e>
c000e1ab:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e1ae:	83 c0 1c             	add    eax,0x1c
c000e1b1:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e1b4:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e1bb:	c1 e2 02             	shl    edx,0x2
c000e1be:	51                   	push   ecx
c000e1bf:	52                   	push   edx
c000e1c0:	6a 00                	push   0x0
c000e1c2:	50                   	push   eax
c000e1c3:	e8 b5 24 ff ff       	call   c000067d <memset>
c000e1c8:	83 c4 10             	add    esp,0x10
c000e1cb:	83 c4 0c             	add    esp,0xc
c000e1ce:	c3                   	ret    

c000e1cf <zoh_get_name>:
c000e1cf:	31 c0                	xor    eax,eax
c000e1d1:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1d6:	75 05                	jne    c000e1dd <zoh_get_name+0xe>
c000e1d8:	b8 3e 6f 02 c0       	mov    eax,0xc0026f3e
c000e1dd:	c3                   	ret    

c000e1de <zoh_get_description>:
c000e1de:	31 c0                	xor    eax,eax
c000e1e0:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1e5:	75 05                	jne    c000e1ec <zoh_get_description+0xe>
c000e1e7:	b8 4f 6f 02 c0       	mov    eax,0xc0026f4f
c000e1ec:	c3                   	ret    

c000e1ed <zoh_set_converter>:
c000e1ed:	53                   	push   ebx
c000e1ee:	b8 0a 00 00 00       	mov    eax,0xa
c000e1f3:	83 ec 08             	sub    esp,0x8
c000e1f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e1fa:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e1ff:	75 6e                	jne    c000e26f <zoh_set_converter+0x82>
c000e201:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e204:	85 c0                	test   eax,eax
c000e206:	74 13                	je     c000e21b <zoh_set_converter+0x2e>
c000e208:	83 ec 0c             	sub    esp,0xc
c000e20b:	50                   	push   eax
c000e20c:	e8 c1 12 00 00       	call   c000f4d2 <free>
c000e211:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e218:	83 c4 10             	add    esp,0x10
c000e21b:	50                   	push   eax
c000e21c:	50                   	push   eax
c000e21d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e220:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e227:	50                   	push   eax
c000e228:	6a 01                	push   0x1
c000e22a:	e8 c3 12 00 00       	call   c000f4f2 <calloc>
c000e22f:	83 c4 10             	add    esp,0x10
c000e232:	89 c2                	mov    edx,eax
c000e234:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e237:	85 d2                	test   edx,edx
c000e239:	b8 01 00 00 00       	mov    eax,0x1
c000e23e:	74 2f                	je     c000e26f <zoh_set_converter+0x82>
c000e240:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e243:	83 ec 0c             	sub    esp,0xc
c000e246:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e249:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e24f:	c7 43 24 f8 da 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000daf8
c000e256:	c7 43 20 f8 da 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000daf8
c000e25d:	c7 43 28 9d e1 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e19d
c000e264:	53                   	push   ebx
c000e265:	e8 33 ff ff ff       	call   c000e19d <zoh_reset>
c000e26a:	83 c4 10             	add    esp,0x10
c000e26d:	31 c0                	xor    eax,eax
c000e26f:	83 c4 08             	add    esp,0x8
c000e272:	5b                   	pop    ebx
c000e273:	c3                   	ret    

c000e274 <CPU::current()>:
c000e274:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c000e279:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e27f:	90                   	nop
c000e280:	c3                   	ret    

c000e281 <operator new(unsigned long)>:
c000e281:	83 ec 0c             	sub    esp,0xc
c000e284:	83 ec 0c             	sub    esp,0xc
c000e287:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e28b:	e8 32 12 00 00       	call   c000f4c2 <malloc>
c000e290:	83 c4 10             	add    esp,0x10
c000e293:	83 c4 0c             	add    esp,0xc
c000e296:	c3                   	ret    
c000e297:	90                   	nop

c000e298 <Computer::close(int, int, void*)>:
c000e298:	57                   	push   edi
c000e299:	56                   	push   esi
c000e29a:	53                   	push   ebx
c000e29b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e29f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e2a3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e2a7:	83 ec 0c             	sub    esp,0xc
c000e2aa:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e2b0:	e8 e5 58 00 00       	call   c0013b9a <Device::closeAll()>
c000e2b5:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e2bb:	83 c4 10             	add    esp,0x10
c000e2be:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2c0:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e2c4:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e2cc:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e2d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2d4:	5b                   	pop    ebx
c000e2d5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e2d8:	5e                   	pop    esi
c000e2d9:	5f                   	pop    edi
c000e2da:	ff e0                	jmp    eax

c000e2dc <Computer::Computer()>:
c000e2dc:	83 ec 0c             	sub    esp,0xc
c000e2df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2e3:	83 ec 08             	sub    esp,0x8
c000e2e6:	68 86 6f 02 c0       	push   0xc0026f86
c000e2eb:	50                   	push   eax
c000e2ec:	e8 23 59 00 00       	call   c0013c14 <Device::Device(char const*)>
c000e2f1:	83 c4 10             	add    esp,0x10
c000e2f4:	ba 50 71 02 c0       	mov    edx,0xc0027150
c000e2f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2fd:	89 10                	mov    DWORD PTR [eax],edx
c000e2ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e303:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e30d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e311:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e31b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e325:	83 ca 04             	or     edx,0x4
c000e328:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e32e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e332:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e338:	0f b6 d0             	movzx  edx,al
c000e33b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e33f:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e34a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e350:	0f b6 d0             	movzx  edx,al
c000e353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e357:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e35c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e360:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e366:	8d 50 01             	lea    edx,[eax+0x1]
c000e369:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e36d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e373:	0f b6 d0             	movzx  edx,al
c000e376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e37a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e37e:	83 e1 3f             	and    ecx,0x3f
c000e381:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e389:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e38f:	0f b6 d0             	movzx  edx,al
c000e392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e396:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e39d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3a7:	0f b6 d0             	movzx  edx,al
c000e3aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ae:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e3b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3b7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3bd:	8d 50 01             	lea    edx,[eax+0x1]
c000e3c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e3c4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e3ca:	0f b6 d0             	movzx  edx,al
c000e3cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3d1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e3d5:	83 e1 3f             	and    ecx,0x3f
c000e3d8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3e0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3e6:	0f b6 d0             	movzx  edx,al
c000e3e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ed:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e3f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3f8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3fe:	0f b6 d0             	movzx  edx,al
c000e401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e405:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e40a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e40e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e414:	8d 50 01             	lea    edx,[eax+0x1]
c000e417:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e41b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e421:	0f b6 d0             	movzx  edx,al
c000e424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e428:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e42c:	83 e1 3f             	and    ecx,0x3f
c000e42f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e433:	90                   	nop
c000e434:	83 c4 0c             	add    esp,0xc
c000e437:	c3                   	ret    

c000e438 <Computer::setBootMessage(char const*)>:
c000e438:	c3                   	ret    
c000e439:	90                   	nop

c000e43a <Computer::start()>:
c000e43a:	56                   	push   esi
c000e43b:	53                   	push   ebx
c000e43c:	83 ec 10             	sub    esp,0x10
c000e43f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e443:	fb                   	sti    
c000e444:	68 3b 07 00 00       	push   0x73b
c000e449:	e8 74 10 00 00       	call   c000f4c2 <malloc>
c000e44e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e455:	89 c6                	mov    esi,eax
c000e457:	ff 35 54 c0 02 c0    	push   DWORD PTR ds:0xc002c054
c000e45d:	68 8f 6f 02 c0       	push   0xc0026f8f
c000e462:	6a 01                	push   0x1
c000e464:	50                   	push   eax
c000e465:	e8 ea d7 00 00       	call   c001bc54 <Process::Process(bool, char const*, Process*, char**)>
c000e46a:	83 c4 20             	add    esp,0x20
c000e46d:	68 ff 00 00 00       	push   0xff
c000e472:	6a 00                	push   0x0
c000e474:	68 57 ee 00 c0       	push   0xc000ee57
c000e479:	56                   	push   esi
c000e47a:	e8 b7 da 00 00       	call   c001bf36 <Process::createThread(void (*)(void*), void*, int)>
c000e47f:	6a 7a                	push   0x7a
c000e481:	6a 00                	push   0x0
c000e483:	68 6f c7 01 c0       	push   0xc001c76f
c000e488:	ff 35 54 c0 02 c0    	push   DWORD PTR ds:0xc002c054
c000e48e:	e8 a3 da 00 00       	call   c001bf36 <Process::createThread(void (*)(void*), void*, int)>
c000e493:	83 c4 20             	add    esp,0x20
c000e496:	a3 08 c0 02 c0       	mov    ds:0xc002c008,eax
c000e49b:	e8 48 e6 00 00       	call   c001cae8 <Vm::initialise8086()>
c000e4a0:	c6 05 4d ab 02 c0 01 	mov    BYTE PTR ds:0xc002ab4d,0x1
c000e4a7:	e8 e4 44 00 00       	call   c0012990 <initVFS()>
c000e4ac:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e4b2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4b4:	6a 00                	push   0x0
c000e4b6:	6a 00                	push   0x0
c000e4b8:	6a 00                	push   0x0
c000e4ba:	50                   	push   eax
c000e4bb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e4be:	e8 55 c1 00 00       	call   c001a618 <setupSystemCalls()>
c000e4c3:	e8 da 4f 00 00       	call   c00134a2 <loadClockSettings()>
c000e4c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e4cb:	e8 9e 56 00 00       	call   c0013b6e <Device::loadDriversForAll()>
c000e4d0:	58                   	pop    eax
c000e4d1:	8b 1d 48 ab 02 c0    	mov    ebx,DWORD PTR ds:0xc002ab48
c000e4d7:	5a                   	pop    edx
c000e4d8:	6a 01                	push   0x1
c000e4da:	68 9c 6f 02 c0       	push   0xc0026f9c
c000e4df:	e8 e4 d2 00 00       	call   c001b7c8 <Thr::loadDLL(char const*, bool)>
c000e4e4:	59                   	pop    ecx
c000e4e5:	5e                   	pop    esi
c000e4e6:	53                   	push   ebx
c000e4e7:	50                   	push   eax
c000e4e8:	e8 ea d4 00 00       	call   c001b9d7 <Thr::executeDLL(unsigned long, void*)>
c000e4ed:	c7 04 24 60 81 02 c0 	mov    DWORD PTR [esp],0xc0028160
c000e4f4:	e8 3c 41 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c000e4f9:	83 c4 10             	add    esp,0x10
c000e4fc:	83 ec 0c             	sub    esp,0xc
c000e4ff:	6a 02                	push   0x2
c000e501:	e8 94 dd 00 00       	call   c001c29a <blockTask(TaskState)>
c000e506:	83 c4 10             	add    esp,0x10
c000e509:	eb f1                	jmp    c000e4fc <Computer::start()+0xc2>

c000e50b <firstTask()>:
c000e50b:	83 ec 18             	sub    esp,0x18
c000e50e:	ff 35 48 ab 02 c0    	push   DWORD PTR ds:0xc002ab48
c000e514:	e8 21 ff ff ff       	call   c000e43a <Computer::start()>
c000e519:	90                   	nop

c000e51a <Computer::detectFeatures()>:
c000e51a:	55                   	push   ebp
c000e51b:	57                   	push   edi
c000e51c:	56                   	push   esi
c000e51d:	53                   	push   ebx
c000e51e:	83 ec 1c             	sub    esp,0x1c
c000e521:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e525:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e52f:	e8 65 1d ff ff       	call   c0000299 <detectCPUID>
c000e534:	85 c0                	test   eax,eax
c000e536:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e53c:	0f 95 c2             	setne  dl
c000e53f:	83 e0 fd             	and    eax,0xfffffffd
c000e542:	d1 e2                	shl    edx,1
c000e544:	09 d0                	or     eax,edx
c000e546:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e54c:	a8 02                	test   al,0x2
c000e54e:	75 46                	jne    c000e596 <Computer::detectFeatures()+0x7c>
c000e550:	f6 05 61 ab 02 c0 04 	test   BYTE PTR ds:0xc002ab61,0x4
c000e557:	74 07                	je     c000e560 <Computer::detectFeatures()+0x46>
c000e559:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e560:	e8 11 52 01 00       	call   c0023776 <x87Detect>
c000e565:	83 e0 01             	and    eax,0x1
c000e568:	c1 e0 04             	shl    eax,0x4
c000e56b:	88 c2                	mov    dl,al
c000e56d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e573:	83 e0 ef             	and    eax,0xffffffef
c000e576:	09 d0                	or     eax,edx
c000e578:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e57e:	a8 10                	test   al,0x10
c000e580:	0f 85 2a 01 00 00    	jne    c000e6b0 <Computer::detectFeatures()+0x196>
c000e586:	84 c0                	test   al,al
c000e588:	0f 88 45 01 00 00    	js     c000e6d3 <Computer::detectFeatures()+0x1b9>
c000e58e:	83 c4 1c             	add    esp,0x1c
c000e591:	5b                   	pop    ebx
c000e592:	5e                   	pop    esi
c000e593:	5f                   	pop    edi
c000e594:	5d                   	pop    ebp
c000e595:	c3                   	ret    
c000e596:	83 ec 0c             	sub    esp,0xc
c000e599:	6a 20                	push   0x20
c000e59b:	e8 b6 96 00 00       	call   c0017c56 <CPU::cpuidCheckEDX(unsigned int)>
c000e5a0:	83 e0 01             	and    eax,0x1
c000e5a3:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e5aa:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e5b0:	83 e0 f7             	and    eax,0xfffffff7
c000e5b3:	09 d0                	or     eax,edx
c000e5b5:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e5bb:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e5c2:	e8 8f 96 00 00       	call   c0017c56 <CPU::cpuidCheckEDX(unsigned int)>
c000e5c7:	83 e0 01             	and    eax,0x1
c000e5ca:	88 c2                	mov    dl,al
c000e5cc:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e5d2:	83 e0 fe             	and    eax,0xfffffffe
c000e5d5:	09 d0                	or     eax,edx
c000e5d7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e5dd:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e5e4:	e8 6d 96 00 00       	call   c0017c56 <CPU::cpuidCheckEDX(unsigned int)>
c000e5e9:	c1 e0 07             	shl    eax,0x7
c000e5ec:	88 c2                	mov    dl,al
c000e5ee:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e5f4:	83 e0 7f             	and    eax,0x7f
c000e5f7:	09 d0                	or     eax,edx
c000e5f9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e5ff:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e606:	e8 4b 96 00 00       	call   c0017c56 <CPU::cpuidCheckEDX(unsigned int)>
c000e60b:	83 c4 10             	add    esp,0x10
c000e60e:	83 e0 01             	and    eax,0x1
c000e611:	c1 e0 05             	shl    eax,0x5
c000e614:	88 c2                	mov    dl,al
c000e616:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e61c:	83 e0 df             	and    eax,0xffffffdf
c000e61f:	09 d0                	or     eax,edx
c000e621:	f7 05 60 ab 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002ab60,0x401
c000e62b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e631:	0f 84 c2 00 00 00    	je     c000e6f9 <Computer::detectFeatures()+0x1df>
c000e637:	83 e0 fe             	and    eax,0xfffffffe
c000e63a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e640:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e646:	88 c2                	mov    dl,al
c000e648:	83 e2 09             	and    edx,0x9
c000e64b:	fe ca                	dec    dl
c000e64d:	75 09                	jne    c000e658 <Computer::detectFeatures()+0x13e>
c000e64f:	83 e0 fe             	and    eax,0xfffffffe
c000e652:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e658:	83 ec 0c             	sub    esp,0xc
c000e65b:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e65f:	50                   	push   eax
c000e660:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e664:	55                   	push   ebp
c000e665:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e669:	57                   	push   edi
c000e66a:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e66e:	56                   	push   esi
c000e66f:	68 00 00 00 80       	push   0x80000000
c000e674:	e8 59 95 00 00       	call   c0017bd2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e679:	83 c4 20             	add    esp,0x20
c000e67c:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e683:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e687:	0f 86 c3 fe ff ff    	jbe    c000e550 <Computer::detectFeatures()+0x36>
c000e68d:	83 ec 0c             	sub    esp,0xc
c000e690:	50                   	push   eax
c000e691:	55                   	push   ebp
c000e692:	57                   	push   edi
c000e693:	56                   	push   esi
c000e694:	68 01 00 00 80       	push   0x80000001
c000e699:	e8 34 95 00 00       	call   c0017bd2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e69e:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e6a8:	83 c4 20             	add    esp,0x20
c000e6ab:	e9 a0 fe ff ff       	jmp    c000e550 <Computer::detectFeatures()+0x36>
c000e6b0:	e8 7b 50 01 00       	call   c0023730 <sseDetect>
c000e6b5:	88 c2                	mov    dl,al
c000e6b7:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e6bd:	c1 e2 07             	shl    edx,0x7
c000e6c0:	83 e0 7f             	and    eax,0x7f
c000e6c3:	09 d0                	or     eax,edx
c000e6c5:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6cb:	84 c0                	test   al,al
c000e6cd:	0f 89 bb fe ff ff    	jns    c000e58e <Computer::detectFeatures()+0x74>
c000e6d3:	e8 48 50 01 00       	call   c0023720 <avxDetect>
c000e6d8:	83 e0 01             	and    eax,0x1
c000e6db:	c1 e0 05             	shl    eax,0x5
c000e6de:	88 c2                	mov    dl,al
c000e6e0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e6e6:	83 e0 df             	and    eax,0xffffffdf
c000e6e9:	09 d0                	or     eax,edx
c000e6eb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e6f1:	83 c4 1c             	add    esp,0x1c
c000e6f4:	5b                   	pop    ebx
c000e6f5:	5e                   	pop    esi
c000e6f6:	5f                   	pop    edi
c000e6f7:	5d                   	pop    ebp
c000e6f8:	c3                   	ret    
c000e6f9:	83 ec 0c             	sub    esp,0xc
c000e6fc:	68 00 02 00 00       	push   0x200
c000e701:	e8 50 95 00 00       	call   c0017c56 <CPU::cpuidCheckEDX(unsigned int)>
c000e706:	83 c4 10             	add    esp,0x10
c000e709:	83 e0 01             	and    eax,0x1
c000e70c:	88 c2                	mov    dl,al
c000e70e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e714:	83 e0 fe             	and    eax,0xfffffffe
c000e717:	09 d0                	or     eax,edx
c000e719:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e71f:	e9 1c ff ff ff       	jmp    c000e640 <Computer::detectFeatures()+0x126>

c000e724 <Computer::displayFeatures()>:
c000e724:	53                   	push   ebx
c000e725:	83 ec 14             	sub    esp,0x14
c000e728:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e72c:	68 bf 6f 02 c0       	push   0xc0026fbf
c000e731:	e8 ff 3e 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c000e736:	83 c4 10             	add    esp,0x10
c000e739:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e740:	0f 85 73 02 00 00    	jne    c000e9b9 <Computer::displayFeatures()+0x295>
c000e746:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c000e74b:	83 ec 08             	sub    esp,0x8
c000e74e:	50                   	push   eax
c000e74f:	68 d2 6f 02 c0       	push   0xc0026fd2
c000e754:	e8 dc 3e 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c000e759:	83 c4 10             	add    esp,0x10
c000e75c:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e763:	0f 85 8c 02 00 00    	jne    c000e9f5 <Computer::displayFeatures()+0x2d1>
c000e769:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c000e76e:	83 ec 08             	sub    esp,0x8
c000e771:	50                   	push   eax
c000e772:	68 e3 6f 02 c0       	push   0xc0026fe3
c000e777:	e8 b9 3e 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c000e77c:	83 c4 10             	add    esp,0x10
c000e77f:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e786:	0f 85 5f 02 00 00    	jne    c000e9eb <Computer::displayFeatures()+0x2c7>
c000e78c:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c000e791:	83 ec 08             	sub    esp,0x8
c000e794:	50                   	push   eax
c000e795:	68 f4 6f 02 c0       	push   0xc0026ff4
c000e79a:	e8 96 3e 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c000e79f:	83 c4 10             	add    esp,0x10
c000e7a2:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e7a9:	0f 85 32 02 00 00    	jne    c000e9e1 <Computer::displayFeatures()+0x2bd>
c000e7af:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c000e7b4:	83 ec 08             	sub    esp,0x8
c000e7b7:	50                   	push   eax
c000e7b8:	68 05 70 02 c0       	push   0xc0027005
c000e7bd:	e8 73 3e 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c000e7c2:	83 c4 10             	add    esp,0x10
c000e7c5:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e7cc:	0f 85 05 02 00 00    	jne    c000e9d7 <Computer::displayFeatures()+0x2b3>
c000e7d2:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c000e7d7:	83 ec 08             	sub    esp,0x8
c000e7da:	50                   	push   eax
c000e7db:	68 16 70 02 c0       	push   0xc0027016
c000e7e0:	e8 50 3e 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c000e7e5:	83 c4 10             	add    esp,0x10
c000e7e8:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e7ef:	0f 85 d8 01 00 00    	jne    c000e9cd <Computer::displayFeatures()+0x2a9>
c000e7f5:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c000e7fa:	83 ec 08             	sub    esp,0x8
c000e7fd:	50                   	push   eax
c000e7fe:	68 27 70 02 c0       	push   0xc0027027
c000e803:	e8 2d 3e 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c000e808:	83 c4 10             	add    esp,0x10
c000e80b:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e812:	0f 85 ab 01 00 00    	jne    c000e9c3 <Computer::displayFeatures()+0x29f>
c000e818:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c000e81d:	83 ec 08             	sub    esp,0x8
c000e820:	50                   	push   eax
c000e821:	68 38 70 02 c0       	push   0xc0027038
c000e826:	e8 0a 3e 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c000e82b:	83 c4 10             	add    esp,0x10
c000e82e:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e835:	0f 88 1b 02 00 00    	js     c000ea56 <Computer::displayFeatures()+0x332>
c000e83b:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c000e840:	83 ec 08             	sub    esp,0x8
c000e843:	50                   	push   eax
c000e844:	68 49 70 02 c0       	push   0xc0027049
c000e849:	e8 e7 3d 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c000e84e:	83 c4 10             	add    esp,0x10
c000e851:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e858:	0f 85 a1 01 00 00    	jne    c000e9ff <Computer::displayFeatures()+0x2db>
c000e85e:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c000e863:	83 ec 08             	sub    esp,0x8
c000e866:	50                   	push   eax
c000e867:	68 5a 70 02 c0       	push   0xc002705a
c000e86c:	e8 c4 3d 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c000e871:	83 c4 10             	add    esp,0x10
c000e874:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e87b:	0f 85 cb 01 00 00    	jne    c000ea4c <Computer::displayFeatures()+0x328>
c000e881:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c000e886:	83 ec 08             	sub    esp,0x8
c000e889:	50                   	push   eax
c000e88a:	68 6b 70 02 c0       	push   0xc002706b
c000e88f:	e8 a1 3d 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c000e894:	83 c4 10             	add    esp,0x10
c000e897:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e89e:	0f 85 9e 01 00 00    	jne    c000ea42 <Computer::displayFeatures()+0x31e>
c000e8a4:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c000e8a9:	83 ec 08             	sub    esp,0x8
c000e8ac:	50                   	push   eax
c000e8ad:	68 7c 70 02 c0       	push   0xc002707c
c000e8b2:	e8 7e 3d 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c000e8b7:	83 c4 10             	add    esp,0x10
c000e8ba:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e8c1:	0f 85 71 01 00 00    	jne    c000ea38 <Computer::displayFeatures()+0x314>
c000e8c7:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c000e8cc:	83 ec 08             	sub    esp,0x8
c000e8cf:	50                   	push   eax
c000e8d0:	68 8d 70 02 c0       	push   0xc002708d
c000e8d5:	e8 5b 3d 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c000e8da:	83 c4 10             	add    esp,0x10
c000e8dd:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000e8e4:	0f 85 44 01 00 00    	jne    c000ea2e <Computer::displayFeatures()+0x30a>
c000e8ea:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c000e8ef:	83 ec 08             	sub    esp,0x8
c000e8f2:	50                   	push   eax
c000e8f3:	68 9e 70 02 c0       	push   0xc002709e
c000e8f8:	e8 38 3d 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c000e8fd:	83 c4 10             	add    esp,0x10
c000e900:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000e907:	0f 85 17 01 00 00    	jne    c000ea24 <Computer::displayFeatures()+0x300>
c000e90d:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c000e912:	83 ec 08             	sub    esp,0x8
c000e915:	50                   	push   eax
c000e916:	68 af 70 02 c0       	push   0xc00270af
c000e91b:	e8 15 3d 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c000e920:	83 c4 10             	add    esp,0x10
c000e923:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000e92a:	0f 85 ea 00 00 00    	jne    c000ea1a <Computer::displayFeatures()+0x2f6>
c000e930:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c000e935:	83 ec 08             	sub    esp,0x8
c000e938:	50                   	push   eax
c000e939:	68 c0 70 02 c0       	push   0xc00270c0
c000e93e:	e8 f2 3c 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c000e943:	83 c4 10             	add    esp,0x10
c000e946:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000e94d:	0f 88 0d 01 00 00    	js     c000ea60 <Computer::displayFeatures()+0x33c>
c000e953:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c000e958:	83 ec 08             	sub    esp,0x8
c000e95b:	50                   	push   eax
c000e95c:	68 d1 70 02 c0       	push   0xc00270d1
c000e961:	e8 cf 3c 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c000e966:	83 c4 10             	add    esp,0x10
c000e969:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000e970:	0f 85 9a 00 00 00    	jne    c000ea10 <Computer::displayFeatures()+0x2ec>
c000e976:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c000e97b:	83 ec 08             	sub    esp,0x8
c000e97e:	50                   	push   eax
c000e97f:	68 e2 70 02 c0       	push   0xc00270e2
c000e984:	e8 ac 3c 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000e993:	75 74                	jne    c000ea09 <Computer::displayFeatures()+0x2e5>
c000e995:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c000e99a:	83 ec 08             	sub    esp,0x8
c000e99d:	50                   	push   eax
c000e99e:	68 f3 70 02 c0       	push   0xc00270f3
c000e9a3:	e8 8d 3c 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c000e9a8:	c7 44 24 20 5a 87 02 c0 	mov    DWORD PTR [esp+0x20],0xc002875a
c000e9b0:	83 c4 18             	add    esp,0x18
c000e9b3:	5b                   	pop    ebx
c000e9b4:	e9 7c 3c 00 00       	jmp    c0012635 <Dbg::kprintf(char const*, ...)>
c000e9b9:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c000e9be:	e9 88 fd ff ff       	jmp    c000e74b <Computer::displayFeatures()+0x27>
c000e9c3:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c000e9c8:	e9 50 fe ff ff       	jmp    c000e81d <Computer::displayFeatures()+0xf9>
c000e9cd:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c000e9d2:	e9 23 fe ff ff       	jmp    c000e7fa <Computer::displayFeatures()+0xd6>
c000e9d7:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c000e9dc:	e9 f6 fd ff ff       	jmp    c000e7d7 <Computer::displayFeatures()+0xb3>
c000e9e1:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c000e9e6:	e9 c9 fd ff ff       	jmp    c000e7b4 <Computer::displayFeatures()+0x90>
c000e9eb:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c000e9f0:	e9 9c fd ff ff       	jmp    c000e791 <Computer::displayFeatures()+0x6d>
c000e9f5:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c000e9fa:	e9 6f fd ff ff       	jmp    c000e76e <Computer::displayFeatures()+0x4a>
c000e9ff:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c000ea04:	e9 5a fe ff ff       	jmp    c000e863 <Computer::displayFeatures()+0x13f>
c000ea09:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c000ea0e:	eb 8a                	jmp    c000e99a <Computer::displayFeatures()+0x276>
c000ea10:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c000ea15:	e9 61 ff ff ff       	jmp    c000e97b <Computer::displayFeatures()+0x257>
c000ea1a:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c000ea1f:	e9 11 ff ff ff       	jmp    c000e935 <Computer::displayFeatures()+0x211>
c000ea24:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c000ea29:	e9 e4 fe ff ff       	jmp    c000e912 <Computer::displayFeatures()+0x1ee>
c000ea2e:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c000ea33:	e9 b7 fe ff ff       	jmp    c000e8ef <Computer::displayFeatures()+0x1cb>
c000ea38:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c000ea3d:	e9 8a fe ff ff       	jmp    c000e8cc <Computer::displayFeatures()+0x1a8>
c000ea42:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c000ea47:	e9 5d fe ff ff       	jmp    c000e8a9 <Computer::displayFeatures()+0x185>
c000ea4c:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c000ea51:	e9 30 fe ff ff       	jmp    c000e886 <Computer::displayFeatures()+0x162>
c000ea56:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c000ea5b:	e9 e0 fd ff ff       	jmp    c000e840 <Computer::displayFeatures()+0x11c>
c000ea60:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c000ea65:	e9 ee fe ff ff       	jmp    c000e958 <Computer::displayFeatures()+0x234>

c000ea6a <Computer::rdmsr(unsigned int)>:
c000ea6a:	83 ec 0c             	sub    esp,0xc
c000ea6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea71:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ea78:	74 0a                	je     c000ea84 <Computer::rdmsr(unsigned int)+0x1a>
c000ea7a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ea7e:	0f 32                	rdmsr  
c000ea80:	83 c4 0c             	add    esp,0xc
c000ea83:	c3                   	ret    
c000ea84:	83 ec 0c             	sub    esp,0xc
c000ea87:	68 04 71 02 c0       	push   0xc0027104
c000ea8c:	e8 68 a3 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c000ea91:	83 c4 10             	add    esp,0x10
c000ea94:	eb e4                	jmp    c000ea7a <Computer::rdmsr(unsigned int)+0x10>

c000ea96 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ea96:	57                   	push   edi
c000ea97:	56                   	push   esi
c000ea98:	52                   	push   edx
c000ea99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea9d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eaa1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eaa5:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eaac:	74 0e                	je     c000eabc <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eaae:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eab2:	89 f0                	mov    eax,esi
c000eab4:	89 fa                	mov    edx,edi
c000eab6:	0f 30                	wrmsr  
c000eab8:	58                   	pop    eax
c000eab9:	5e                   	pop    esi
c000eaba:	5f                   	pop    edi
c000eabb:	c3                   	ret    
c000eabc:	83 ec 0c             	sub    esp,0xc
c000eabf:	68 0a 71 02 c0       	push   0xc002710a
c000eac4:	e8 30 a3 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c000eac9:	83 c4 10             	add    esp,0x10
c000eacc:	eb e0                	jmp    c000eaae <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eace <Computer::nmiEnabled()>:
c000eace:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ead2:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ead8:	c3                   	ret    
c000ead9:	90                   	nop

c000eada <Computer::readCMOS(unsigned char)>:
c000eada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eade:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eae5:	19 c0                	sbb    eax,eax
c000eae7:	83 e0 80             	and    eax,0xffffff80
c000eaea:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eaee:	e6 70                	out    0x70,al
c000eaf0:	e4 71                	in     al,0x71
c000eaf2:	c3                   	ret    
c000eaf3:	90                   	nop

c000eaf4 <Computer::enableNMI(bool)>:
c000eaf4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eaf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eafc:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eb02:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eb0a:	eb ce                	jmp    c000eada <Computer::readCMOS(unsigned char)>

c000eb0c <Computer::open(int, int, void*)>:
c000eb0c:	56                   	push   esi
c000eb0d:	53                   	push   ebx
c000eb0e:	83 ec 10             	sub    esp,0x10
c000eb11:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb15:	f6 05 60 ab 02 c0 04 	test   BYTE PTR ds:0xc002ab60,0x4
c000eb1c:	68 68 22 00 00       	push   0x2268
c000eb21:	0f 94 05 00 9b 02 c0 	sete   BYTE PTR ds:0xc0029b00
c000eb28:	e8 95 09 00 00       	call   c000f4c2 <malloc>
c000eb2d:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb30:	89 c6                	mov    esi,eax
c000eb32:	e8 4f 87 00 00       	call   c0017286 <ACPI::ACPI()>
c000eb37:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eb3d:	58                   	pop    eax
c000eb3e:	5a                   	pop    edx
c000eb3f:	56                   	push   esi
c000eb40:	53                   	push   ebx
c000eb41:	e8 de 4e 00 00       	call   c0013a24 <Device::addChild(Device*)>
c000eb46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb49:	e8 cc f9 ff ff       	call   c000e51a <Computer::detectFeatures()>
c000eb4e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb51:	e8 ce fb ff ff       	call   c000e724 <Computer::displayFeatures()>
c000eb56:	59                   	pop    ecx
c000eb57:	5e                   	pop    esi
c000eb58:	6a 01                	push   0x1
c000eb5a:	53                   	push   ebx
c000eb5b:	e8 94 ff ff ff       	call   c000eaf4 <Computer::enableNMI(bool)>
c000eb60:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eb67:	e8 56 09 00 00       	call   c000f4c2 <malloc>
c000eb6c:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb6f:	89 c6                	mov    esi,eax
c000eb71:	e8 98 91 00 00       	call   c0017d0e <CPU::CPU()>
c000eb76:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eb7c:	58                   	pop    eax
c000eb7d:	5a                   	pop    edx
c000eb7e:	56                   	push   esi
c000eb7f:	53                   	push   ebx
c000eb80:	e8 9f 4e 00 00       	call   c0013a24 <Device::addChild(Device*)>
c000eb85:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eb8b:	8b 10                	mov    edx,DWORD PTR [eax]
c000eb8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eb91:	6a 00                	push   0x0
c000eb93:	6a 00                	push   0x0
c000eb95:	50                   	push   eax
c000eb96:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000eb99:	83 c4 20             	add    esp,0x20
c000eb9c:	e8 f5 53 00 00       	call   c0013f96 <setupFPU()>
c000eba1:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000eba7:	85 c0                	test   eax,eax
c000eba9:	74 1f                	je     c000ebca <Computer::open(int, int, void*)+0xbe>
c000ebab:	83 ec 08             	sub    esp,0x8
c000ebae:	50                   	push   eax
c000ebaf:	53                   	push   ebx
c000ebb0:	e8 6f 4e 00 00       	call   c0013a24 <Device::addChild(Device*)>
c000ebb5:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ebbb:	8b 10                	mov    edx,DWORD PTR [eax]
c000ebbd:	6a 00                	push   0x0
c000ebbf:	6a 00                	push   0x0
c000ebc1:	6a 00                	push   0x0
c000ebc3:	50                   	push   eax
c000ebc4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebc7:	83 c4 20             	add    esp,0x20
c000ebca:	83 ec 0c             	sub    esp,0xc
c000ebcd:	68 0b e5 00 c0       	push   0xc000e50b
c000ebd2:	e8 5f d4 00 00       	call   c001c036 <setupMultitasking(void (*)())>
c000ebd7:	83 c4 14             	add    esp,0x14
c000ebda:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ebdf:	5b                   	pop    ebx
c000ebe0:	5e                   	pop    esi
c000ebe1:	c3                   	ret    

c000ebe2 <Computer::disableNMI()>:
c000ebe2:	6a 00                	push   0x0
c000ebe4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ebe8:	e8 07 ff ff ff       	call   c000eaf4 <Computer::enableNMI(bool)>
c000ebed:	58                   	pop    eax
c000ebee:	5a                   	pop    edx
c000ebef:	c3                   	ret    

c000ebf0 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ebf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebf4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ebfb:	19 c0                	sbb    eax,eax
c000ebfd:	83 e0 80             	and    eax,0xffffff80
c000ec00:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ec04:	e6 70                	out    0x70,al
c000ec06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec0a:	e6 71                	out    0x71,al
c000ec0c:	c3                   	ret    
c000ec0d:	90                   	nop

c000ec0e <Computer::handleNMI()>:
c000ec0e:	56                   	push   esi
c000ec0f:	53                   	push   ebx
c000ec10:	83 ec 10             	sub    esp,0x10
c000ec13:	e4 92                	in     al,0x92
c000ec15:	89 c6                	mov    esi,eax
c000ec17:	e4 61                	in     al,0x61
c000ec19:	68 10 71 02 c0       	push   0xc0027110
c000ec1e:	88 c3                	mov    bl,al
c000ec20:	e8 10 3a 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c000ec25:	83 c4 10             	add    esp,0x10
c000ec28:	83 e6 10             	and    esi,0x10
c000ec2b:	75 0d                	jne    c000ec3a <Computer::handleNMI()+0x2c>
c000ec2d:	f6 c3 40             	test   bl,0x40
c000ec30:	75 1d                	jne    c000ec4f <Computer::handleNMI()+0x41>
c000ec32:	84 db                	test   bl,bl
c000ec34:	78 2d                	js     c000ec63 <Computer::handleNMI()+0x55>
c000ec36:	58                   	pop    eax
c000ec37:	5b                   	pop    ebx
c000ec38:	5e                   	pop    esi
c000ec39:	c3                   	ret    
c000ec3a:	83 ec 0c             	sub    esp,0xc
c000ec3d:	68 21 71 02 c0       	push   0xc0027121
c000ec42:	e8 b2 a1 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c000ec47:	83 c4 10             	add    esp,0x10
c000ec4a:	f6 c3 40             	test   bl,0x40
c000ec4d:	74 e3                	je     c000ec32 <Computer::handleNMI()+0x24>
c000ec4f:	83 ec 0c             	sub    esp,0xc
c000ec52:	68 2e 71 02 c0       	push   0xc002712e
c000ec57:	e8 9d a1 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c000ec5c:	83 c4 10             	add    esp,0x10
c000ec5f:	84 db                	test   bl,bl
c000ec61:	79 d3                	jns    c000ec36 <Computer::handleNMI()+0x28>
c000ec63:	c7 44 24 10 38 71 02 c0 	mov    DWORD PTR [esp+0x10],0xc0027138
c000ec6b:	5a                   	pop    edx
c000ec6c:	5b                   	pop    ebx
c000ec6d:	5e                   	pop    esi
c000ec6e:	e9 86 a1 00 00       	jmp    c0018df9 <Krnl::panic(char const*)>
c000ec73:	90                   	nop

c000ec74 <Computer::setDiskActivityLight(int, bool)>:
c000ec74:	56                   	push   esi
c000ec75:	53                   	push   ebx
c000ec76:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ec7a:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ec7f:	77 1b                	ja     c000ec9c <Computer::setDiskActivityLight(int, bool)+0x28>
c000ec81:	e4 92                	in     al,0x92
c000ec83:	bb 40 00 00 00       	mov    ebx,0x40
c000ec88:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ec8c:	89 da                	mov    edx,ebx
c000ec8e:	d3 e2                	shl    edx,cl
c000ec90:	89 f1                	mov    ecx,esi
c000ec92:	f7 d2                	not    edx
c000ec94:	d3 e3                	shl    ebx,cl
c000ec96:	21 d0                	and    eax,edx
c000ec98:	09 d8                	or     eax,ebx
c000ec9a:	e6 92                	out    0x92,al
c000ec9c:	5b                   	pop    ebx
c000ec9d:	5e                   	pop    esi
c000ec9e:	c3                   	ret    
c000ec9f:	90                   	nop

c000eca0 <GDTEntry::setBase(unsigned int)>:
c000eca0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eca4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000eca8:	89 c1                	mov    ecx,eax
c000ecaa:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ecae:	c1 e9 10             	shr    ecx,0x10
c000ecb1:	c1 e8 18             	shr    eax,0x18
c000ecb4:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ecb7:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000ecba:	c3                   	ret    
c000ecbb:	90                   	nop

c000ecbc <GDTEntry::setLimit(unsigned int)>:
c000ecbc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ecc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecc4:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ecc7:	66 89 01             	mov    WORD PTR [ecx],ax
c000ecca:	83 e2 f0             	and    edx,0xfffffff0
c000eccd:	c1 e8 10             	shr    eax,0x10
c000ecd0:	83 e0 0f             	and    eax,0xf
c000ecd3:	09 d0                	or     eax,edx
c000ecd5:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ecd8:	c3                   	ret    
c000ecd9:	90                   	nop

c000ecda <GDT::GDT()>:
c000ecda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecde:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ece4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ecee:	90                   	nop
c000ecef:	c3                   	ret    

c000ecf0 <GDT::addEntry(GDTEntry)>:
c000ecf0:	53                   	push   ebx
c000ecf1:	83 ec 0c             	sub    esp,0xc
c000ecf4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ecf8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ecfa:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ed01:	52                   	push   edx
c000ed02:	50                   	push   eax
c000ed03:	68 74 71 02 c0       	push   0xc0027174
c000ed08:	e8 28 39 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c000ed0d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed0f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ed13:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ed17:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000ed1b:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000ed1f:	8d 50 01             	lea    edx,[eax+0x1]
c000ed22:	c1 e0 03             	shl    eax,0x3
c000ed25:	89 13                	mov    DWORD PTR [ebx],edx
c000ed27:	83 c4 18             	add    esp,0x18
c000ed2a:	5b                   	pop    ebx
c000ed2b:	c3                   	ret    

c000ed2c <GDT::getNumberOfEntries()>:
c000ed2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed30:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed32:	c3                   	ret    
c000ed33:	90                   	nop

c000ed34 <GDT::flush()>:
c000ed34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed38:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed3a:	83 c0 04             	add    eax,0x4
c000ed3d:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ed44:	a3 52 ab 02 c0       	mov    ds:0xc002ab52,eax
c000ed49:	66 89 15 50 ab 02 c0 	mov    WORD PTR ds:0xc002ab50,dx
c000ed50:	e9 aa 16 ff ff       	jmp    c00003ff <loadGDT>
c000ed55:	90                   	nop

c000ed56 <GDT::setup()>:
c000ed56:	55                   	push   ebp
c000ed57:	57                   	push   edi
c000ed58:	56                   	push   esi
c000ed59:	53                   	push   ebx
c000ed5a:	83 ec 3c             	sub    esp,0x3c
c000ed5d:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ed61:	6a 00                	push   0x0
c000ed63:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ed67:	53                   	push   ebx
c000ed68:	e8 33 ff ff ff       	call   c000eca0 <GDTEntry::setBase(unsigned int)>
c000ed6d:	6a 00                	push   0x0
c000ed6f:	53                   	push   ebx
c000ed70:	e8 47 ff ff ff       	call   c000ecbc <GDTEntry::setLimit(unsigned int)>
c000ed75:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ed7d:	6a 00                	push   0x0
c000ed7f:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ed83:	53                   	push   ebx
c000ed84:	e8 17 ff ff ff       	call   c000eca0 <GDTEntry::setBase(unsigned int)>
c000ed89:	68 ff ff ff 00       	push   0xffffff
c000ed8e:	53                   	push   ebx
c000ed8f:	e8 28 ff ff ff       	call   c000ecbc <GDTEntry::setLimit(unsigned int)>
c000ed94:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ed98:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ed9d:	0d 00 9a c0 00       	or     eax,0xc09a00
c000eda2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000eda6:	83 c4 20             	add    esp,0x20
c000eda9:	6a 00                	push   0x0
c000edab:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000edaf:	53                   	push   ebx
c000edb0:	e8 eb fe ff ff       	call   c000eca0 <GDTEntry::setBase(unsigned int)>
c000edb5:	68 ff ff ff 00       	push   0xffffff
c000edba:	53                   	push   ebx
c000edbb:	e8 fc fe ff ff       	call   c000ecbc <GDTEntry::setLimit(unsigned int)>
c000edc0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000edc4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000edc8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000edcc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000edd0:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000edd4:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edd9:	0d 00 92 c0 00       	or     eax,0xc09200
c000edde:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ede2:	89 d8                	mov    eax,ebx
c000ede4:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ede8:	80 cc 60             	or     ah,0x60
c000edeb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000edef:	83 c4 0c             	add    esp,0xc
c000edf2:	89 f8                	mov    eax,edi
c000edf4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000edf8:	80 cc 60             	or     ah,0x60
c000edfb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000edff:	89 c7                	mov    edi,eax
c000ee01:	55                   	push   ebp
c000ee02:	e8 e9 fe ff ff       	call   c000ecf0 <GDT::addEntry(GDTEntry)>
c000ee07:	83 c4 0c             	add    esp,0xc
c000ee0a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee0e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee12:	55                   	push   ebp
c000ee13:	e8 d8 fe ff ff       	call   c000ecf0 <GDT::addEntry(GDTEntry)>
c000ee18:	83 c4 0c             	add    esp,0xc
c000ee1b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee1f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee23:	55                   	push   ebp
c000ee24:	e8 c7 fe ff ff       	call   c000ecf0 <GDT::addEntry(GDTEntry)>
c000ee29:	83 c4 0c             	add    esp,0xc
c000ee2c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee30:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ee34:	53                   	push   ebx
c000ee35:	51                   	push   ecx
c000ee36:	55                   	push   ebp
c000ee37:	e8 b4 fe ff ff       	call   c000ecf0 <GDT::addEntry(GDTEntry)>
c000ee3c:	83 c4 0c             	add    esp,0xc
c000ee3f:	57                   	push   edi
c000ee40:	56                   	push   esi
c000ee41:	55                   	push   ebp
c000ee42:	e8 a9 fe ff ff       	call   c000ecf0 <GDT::addEntry(GDTEntry)>
c000ee47:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ee4a:	e8 e5 fe ff ff       	call   c000ed34 <GDT::flush()>
c000ee4f:	83 c4 4c             	add    esp,0x4c
c000ee52:	5b                   	pop    ebx
c000ee53:	5e                   	pop    esi
c000ee54:	5f                   	pop    edi
c000ee55:	5d                   	pop    ebp
c000ee56:	c3                   	ret    

c000ee57 <idleFunction(void*)>:
c000ee57:	53                   	push   ebx
c000ee58:	83 ec 08             	sub    esp,0x8
c000ee5b:	e8 a7 cf 00 00       	call   c001be07 <unlockScheduler()>
c000ee60:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c000ee65:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ee6b:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ee72:	74 3c                	je     c000eeb0 <idleFunction(void*)+0x59>
c000ee74:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee7b:	74 33                	je     c000eeb0 <idleFunction(void*)+0x59>
c000ee7d:	31 db                	xor    ebx,ebx
c000ee7f:	52                   	push   edx
c000ee80:	52                   	push   edx
c000ee81:	68 e1 00 00 00       	push   0xe1
c000ee86:	50                   	push   eax
c000ee87:	e8 de fb ff ff       	call   c000ea6a <Computer::rdmsr(unsigned int)>
c000ee8c:	53                   	push   ebx
c000ee8d:	83 e0 02             	and    eax,0x2
c000ee90:	50                   	push   eax
c000ee91:	68 e1 00 00 00       	push   0xe1
c000ee96:	ff 35 48 ab 02 c0    	push   DWORD PTR ds:0xc002ab48
c000ee9c:	e8 f5 fb ff ff       	call   c000ea96 <Computer::wrmsr(unsigned int, unsigned long long)>
c000eea1:	83 c4 20             	add    esp,0x20
c000eea4:	e8 8b 13 ff ff       	call   c0000234 <doTPAUSE>
c000eea9:	e8 02 69 01 00       	call   c00257b0 <idleCommon()>
c000eeae:	eb f4                	jmp    c000eea4 <idleFunction(void*)+0x4d>
c000eeb0:	fb                   	sti    
c000eeb1:	f4                   	hlt    
c000eeb2:	e8 f9 68 01 00       	call   c00257b0 <idleCommon()>
c000eeb7:	eb f7                	jmp    c000eeb0 <idleFunction(void*)+0x59>
c000eeb9:	90                   	nop

c000eeba <IDTEntry::IDTEntry(bool)>:
c000eeba:	83 ec 04             	sub    esp,0x4
c000eebd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eec1:	88 04 24             	mov    BYTE PTR [esp],al
c000eec4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eec8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eece:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eed2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eed6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeda:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eedd:	83 e2 f0             	and    edx,0xfffffff0
c000eee0:	83 ca 0e             	or     edx,0xe
c000eee3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eee6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeea:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeed:	83 e2 ef             	and    edx,0xffffffef
c000eef0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eef3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000eef7:	74 04                	je     c000eefd <IDTEntry::IDTEntry(bool)+0x43>
c000eef9:	b2 03                	mov    dl,0x3
c000eefb:	eb 02                	jmp    c000eeff <IDTEntry::IDTEntry(bool)+0x45>
c000eefd:	b2 00                	mov    dl,0x0
c000eeff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef03:	83 e2 03             	and    edx,0x3
c000ef06:	88 d1                	mov    cl,dl
c000ef08:	c1 e1 05             	shl    ecx,0x5
c000ef0b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef0e:	83 e2 9f             	and    edx,0xffffff9f
c000ef11:	09 ca                	or     edx,ecx
c000ef13:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef1a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef1d:	83 ca 80             	or     edx,0xffffff80
c000ef20:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef23:	90                   	nop
c000ef24:	83 c4 04             	add    esp,0x4
c000ef27:	c3                   	ret    

c000ef28 <IDTEntry::setOffset(unsigned int)>:
c000ef28:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ef2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef30:	66 89 02             	mov    WORD PTR [edx],ax
c000ef33:	c1 e8 10             	shr    eax,0x10
c000ef36:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ef3a:	c3                   	ret    
c000ef3b:	90                   	nop

c000ef3c <IDT::IDT()>:
c000ef3c:	90                   	nop
c000ef3d:	c3                   	ret    

c000ef3e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ef3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef42:	83 c0 30             	add    eax,0x30
c000ef45:	c3                   	ret    

c000ef46 <IDT::addEntry(IDTEntry, int)>:
c000ef46:	53                   	push   ebx
c000ef47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef4b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ef4f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef53:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef57:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ef5a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ef5e:	5b                   	pop    ebx
c000ef5f:	c3                   	ret    

c000ef60 <IDT::addEntry(int, void (*)(), bool)>:
c000ef60:	53                   	push   ebx
c000ef61:	83 ec 10             	sub    esp,0x10
c000ef64:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ef69:	50                   	push   eax
c000ef6a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ef6e:	53                   	push   ebx
c000ef6f:	e8 46 ff ff ff       	call   c000eeba <IDTEntry::IDTEntry(bool)>
c000ef74:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef78:	53                   	push   ebx
c000ef79:	e8 aa ff ff ff       	call   c000ef28 <IDTEntry::setOffset(unsigned int)>
c000ef7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef82:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef86:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ef8e:	e8 b3 ff ff ff       	call   c000ef46 <IDT::addEntry(IDTEntry, int)>
c000ef93:	83 c4 30             	add    esp,0x30
c000ef96:	5b                   	pop    ebx
c000ef97:	c3                   	ret    

c000ef98 <IDT::flush()>:
c000ef98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef9c:	66 c7 05 58 ab 02 c0 ff 07 	mov    WORD PTR ds:0xc002ab58,0x7ff
c000efa5:	a3 5a ab 02 c0       	mov    ds:0xc002ab5a,eax
c000efaa:	0f 01 1d 58 ab 02 c0 	lidtd  ds:0xc002ab58
c000efb1:	c3                   	ret    

c000efb2 <IDT::setup()>:
c000efb2:	57                   	push   edi
c000efb3:	56                   	push   esi
c000efb4:	53                   	push   ebx
c000efb5:	83 ec 10             	sub    esp,0x10
c000efb8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000efbc:	6a 00                	push   0x0
c000efbe:	68 1f 04 00 c0       	push   0xc000041f
c000efc3:	6a 00                	push   0x0
c000efc5:	53                   	push   ebx
c000efc6:	e8 95 ff ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000efcb:	6a 00                	push   0x0
c000efcd:	68 2f 04 00 c0       	push   0xc000042f
c000efd2:	6a 01                	push   0x1
c000efd4:	53                   	push   ebx
c000efd5:	e8 86 ff ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000efda:	83 c4 20             	add    esp,0x20
c000efdd:	6a 00                	push   0x0
c000efdf:	68 39 04 00 c0       	push   0xc0000439
c000efe4:	6a 02                	push   0x2
c000efe6:	53                   	push   ebx
c000efe7:	e8 74 ff ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000efec:	6a 00                	push   0x0
c000efee:	68 43 04 00 c0       	push   0xc0000443
c000eff3:	6a 03                	push   0x3
c000eff5:	53                   	push   ebx
c000eff6:	e8 65 ff ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000effb:	83 c4 20             	add    esp,0x20
c000effe:	6a 00                	push   0x0
c000f000:	68 4d 04 00 c0       	push   0xc000044d
c000f005:	6a 04                	push   0x4
c000f007:	53                   	push   ebx
c000f008:	e8 53 ff ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f00d:	6a 00                	push   0x0
c000f00f:	68 57 04 00 c0       	push   0xc0000457
c000f014:	6a 05                	push   0x5
c000f016:	53                   	push   ebx
c000f017:	e8 44 ff ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f01c:	83 c4 20             	add    esp,0x20
c000f01f:	6a 00                	push   0x0
c000f021:	68 61 04 00 c0       	push   0xc0000461
c000f026:	6a 06                	push   0x6
c000f028:	53                   	push   ebx
c000f029:	e8 32 ff ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f02e:	6a 00                	push   0x0
c000f030:	68 6b 04 00 c0       	push   0xc000046b
c000f035:	6a 07                	push   0x7
c000f037:	53                   	push   ebx
c000f038:	e8 23 ff ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f03d:	83 c4 20             	add    esp,0x20
c000f040:	6a 00                	push   0x0
c000f042:	68 75 04 00 c0       	push   0xc0000475
c000f047:	6a 08                	push   0x8
c000f049:	53                   	push   ebx
c000f04a:	e8 11 ff ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f04f:	6a 00                	push   0x0
c000f051:	68 7d 04 00 c0       	push   0xc000047d
c000f056:	6a 09                	push   0x9
c000f058:	53                   	push   ebx
c000f059:	e8 02 ff ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f05e:	83 c4 20             	add    esp,0x20
c000f061:	6a 00                	push   0x0
c000f063:	68 87 04 00 c0       	push   0xc0000487
c000f068:	6a 0a                	push   0xa
c000f06a:	53                   	push   ebx
c000f06b:	e8 f0 fe ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f070:	6a 00                	push   0x0
c000f072:	68 8f 04 00 c0       	push   0xc000048f
c000f077:	6a 0b                	push   0xb
c000f079:	53                   	push   ebx
c000f07a:	e8 e1 fe ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f07f:	83 c4 20             	add    esp,0x20
c000f082:	6a 00                	push   0x0
c000f084:	68 97 04 00 c0       	push   0xc0000497
c000f089:	6a 0c                	push   0xc
c000f08b:	53                   	push   ebx
c000f08c:	e8 cf fe ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f091:	6a 00                	push   0x0
c000f093:	68 9f 04 00 c0       	push   0xc000049f
c000f098:	6a 0d                	push   0xd
c000f09a:	53                   	push   ebx
c000f09b:	e8 c0 fe ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f0a0:	83 c4 20             	add    esp,0x20
c000f0a3:	6a 00                	push   0x0
c000f0a5:	68 a7 04 00 c0       	push   0xc00004a7
c000f0aa:	6a 0e                	push   0xe
c000f0ac:	53                   	push   ebx
c000f0ad:	e8 ae fe ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f0b2:	6a 00                	push   0x0
c000f0b4:	68 af 04 00 c0       	push   0xc00004af
c000f0b9:	6a 0f                	push   0xf
c000f0bb:	53                   	push   ebx
c000f0bc:	e8 9f fe ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f0c1:	83 c4 20             	add    esp,0x20
c000f0c4:	6a 00                	push   0x0
c000f0c6:	68 b9 04 00 c0       	push   0xc00004b9
c000f0cb:	6a 10                	push   0x10
c000f0cd:	53                   	push   ebx
c000f0ce:	e8 8d fe ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f0d3:	6a 00                	push   0x0
c000f0d5:	68 c3 04 00 c0       	push   0xc00004c3
c000f0da:	6a 11                	push   0x11
c000f0dc:	53                   	push   ebx
c000f0dd:	e8 7e fe ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f0e2:	83 c4 20             	add    esp,0x20
c000f0e5:	6a 00                	push   0x0
c000f0e7:	68 cd 04 00 c0       	push   0xc00004cd
c000f0ec:	6a 12                	push   0x12
c000f0ee:	53                   	push   ebx
c000f0ef:	e8 6c fe ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f0f4:	6a 01                	push   0x1
c000f0f6:	68 67 05 00 c0       	push   0xc0000567
c000f0fb:	6a 60                	push   0x60
c000f0fd:	53                   	push   ebx
c000f0fe:	e8 5d fe ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f103:	83 c4 20             	add    esp,0x20
c000f106:	6a 00                	push   0x0
c000f108:	68 6e 05 00 c0       	push   0xc000056e
c000f10d:	6a 20                	push   0x20
c000f10f:	53                   	push   ebx
c000f110:	e8 4b fe ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f115:	6a 00                	push   0x0
c000f117:	68 59 05 00 c0       	push   0xc0000559
c000f11c:	6a 21                	push   0x21
c000f11e:	53                   	push   ebx
c000f11f:	e8 3c fe ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	68 60 05 00 c0       	push   0xc0000560
c000f12e:	6a 22                	push   0x22
c000f130:	53                   	push   ebx
c000f131:	e8 2a fe ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f136:	6a 00                	push   0x0
c000f138:	68 d7 04 00 c0       	push   0xc00004d7
c000f13d:	6a 23                	push   0x23
c000f13f:	53                   	push   ebx
c000f140:	e8 1b fe ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f145:	83 c4 20             	add    esp,0x20
c000f148:	6a 00                	push   0x0
c000f14a:	68 e1 04 00 c0       	push   0xc00004e1
c000f14f:	6a 24                	push   0x24
c000f151:	53                   	push   ebx
c000f152:	e8 09 fe ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f157:	6a 00                	push   0x0
c000f159:	68 eb 04 00 c0       	push   0xc00004eb
c000f15e:	6a 25                	push   0x25
c000f160:	53                   	push   ebx
c000f161:	e8 fa fd ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f166:	83 c4 20             	add    esp,0x20
c000f169:	6a 00                	push   0x0
c000f16b:	68 f5 04 00 c0       	push   0xc00004f5
c000f170:	6a 26                	push   0x26
c000f172:	53                   	push   ebx
c000f173:	e8 e8 fd ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f178:	6a 00                	push   0x0
c000f17a:	68 ff 04 00 c0       	push   0xc00004ff
c000f17f:	6a 27                	push   0x27
c000f181:	53                   	push   ebx
c000f182:	e8 d9 fd ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f187:	83 c4 20             	add    esp,0x20
c000f18a:	6a 00                	push   0x0
c000f18c:	68 09 05 00 c0       	push   0xc0000509
c000f191:	6a 28                	push   0x28
c000f193:	53                   	push   ebx
c000f194:	e8 c7 fd ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f199:	6a 00                	push   0x0
c000f19b:	68 13 05 00 c0       	push   0xc0000513
c000f1a0:	6a 29                	push   0x29
c000f1a2:	53                   	push   ebx
c000f1a3:	e8 b8 fd ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f1a8:	83 c4 20             	add    esp,0x20
c000f1ab:	6a 00                	push   0x0
c000f1ad:	68 1d 05 00 c0       	push   0xc000051d
c000f1b2:	6a 2a                	push   0x2a
c000f1b4:	53                   	push   ebx
c000f1b5:	e8 a6 fd ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f1ba:	6a 00                	push   0x0
c000f1bc:	68 27 05 00 c0       	push   0xc0000527
c000f1c1:	6a 2b                	push   0x2b
c000f1c3:	53                   	push   ebx
c000f1c4:	e8 97 fd ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f1c9:	83 c4 20             	add    esp,0x20
c000f1cc:	6a 00                	push   0x0
c000f1ce:	68 31 05 00 c0       	push   0xc0000531
c000f1d3:	6a 2c                	push   0x2c
c000f1d5:	53                   	push   ebx
c000f1d6:	e8 85 fd ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f1db:	6a 00                	push   0x0
c000f1dd:	68 3b 05 00 c0       	push   0xc000053b
c000f1e2:	6a 2d                	push   0x2d
c000f1e4:	53                   	push   ebx
c000f1e5:	e8 76 fd ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f1ea:	83 c4 20             	add    esp,0x20
c000f1ed:	6a 00                	push   0x0
c000f1ef:	68 45 05 00 c0       	push   0xc0000545
c000f1f4:	6a 2e                	push   0x2e
c000f1f6:	53                   	push   ebx
c000f1f7:	e8 64 fd ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f1fc:	6a 00                	push   0x0
c000f1fe:	68 4f 05 00 c0       	push   0xc000054f
c000f203:	6a 2f                	push   0x2f
c000f205:	53                   	push   ebx
c000f206:	e8 55 fd ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f20b:	83 c4 20             	add    esp,0x20
c000f20e:	6a 00                	push   0x0
c000f210:	68 94 05 00 c0       	push   0xc0000594
c000f215:	6a 30                	push   0x30
c000f217:	53                   	push   ebx
c000f218:	e8 43 fd ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f21d:	6a 00                	push   0x0
c000f21f:	68 9e 05 00 c0       	push   0xc000059e
c000f224:	6a 31                	push   0x31
c000f226:	53                   	push   ebx
c000f227:	e8 34 fd ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f22c:	83 c4 20             	add    esp,0x20
c000f22f:	6a 00                	push   0x0
c000f231:	68 a8 05 00 c0       	push   0xc00005a8
c000f236:	6a 32                	push   0x32
c000f238:	53                   	push   ebx
c000f239:	e8 22 fd ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f23e:	6a 00                	push   0x0
c000f240:	68 b2 05 00 c0       	push   0xc00005b2
c000f245:	6a 33                	push   0x33
c000f247:	53                   	push   ebx
c000f248:	e8 13 fd ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f24d:	83 c4 20             	add    esp,0x20
c000f250:	6a 00                	push   0x0
c000f252:	68 bc 05 00 c0       	push   0xc00005bc
c000f257:	6a 34                	push   0x34
c000f259:	53                   	push   ebx
c000f25a:	e8 01 fd ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f25f:	6a 00                	push   0x0
c000f261:	68 c6 05 00 c0       	push   0xc00005c6
c000f266:	6a 35                	push   0x35
c000f268:	53                   	push   ebx
c000f269:	e8 f2 fc ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f26e:	83 c4 20             	add    esp,0x20
c000f271:	6a 00                	push   0x0
c000f273:	68 d0 05 00 c0       	push   0xc00005d0
c000f278:	6a 36                	push   0x36
c000f27a:	53                   	push   ebx
c000f27b:	e8 e0 fc ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f280:	6a 00                	push   0x0
c000f282:	68 da 05 00 c0       	push   0xc00005da
c000f287:	6a 37                	push   0x37
c000f289:	53                   	push   ebx
c000f28a:	e8 d1 fc ff ff       	call   c000ef60 <IDT::addEntry(int, void (*)(), bool)>
c000f28f:	83 c4 20             	add    esp,0x20
c000f292:	e8 3e 25 00 00       	call   c00117d5 <Virt::getAKernelVAS()>
c000f297:	52                   	push   edx
c000f298:	6a 03                	push   0x3
c000f29a:	6a 02                	push   0x2
c000f29c:	50                   	push   eax
c000f29d:	e8 6e 2b 00 00       	call   c0011e10 <VAS::allocatePages(int, int)>
c000f2a2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f2a9:	89 c6                	mov    esi,eax
c000f2ab:	e8 12 02 00 00       	call   c000f4c2 <malloc>
c000f2b0:	81 c6 00 20 00 00    	add    esi,0x2000
c000f2b6:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2b9:	89 c7                	mov    edi,eax
c000f2bb:	e8 b6 1c 00 00       	call   c0010f76 <TSS::TSS()>
c000f2c0:	83 c4 0c             	add    esp,0xc
c000f2c3:	68 75 04 00 c0       	push   0xc0000475
c000f2c8:	56                   	push   esi
c000f2c9:	57                   	push   edi
c000f2ca:	e8 e7 1c 00 00       	call   c0010fb6 <TSS::setup(unsigned long, unsigned long)>
c000f2cf:	59                   	pop    ecx
c000f2d0:	89 c6                	mov    esi,eax
c000f2d2:	5f                   	pop    edi
c000f2d3:	6a 00                	push   0x0
c000f2d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f2d9:	50                   	push   eax
c000f2da:	e8 db fb ff ff       	call   c000eeba <IDTEntry::IDTEntry(bool)>
c000f2df:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f2e3:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f2e8:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f2ef:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f2f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f2f9:	80 ce 05             	or     dh,0x5
c000f2fc:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f2ff:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f303:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f307:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f30a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f30d:	e8 86 fc ff ff       	call   c000ef98 <IDT::flush()>
c000f312:	83 c4 20             	add    esp,0x20
c000f315:	5b                   	pop    ebx
c000f316:	5e                   	pop    esi
c000f317:	5f                   	pop    edi
c000f318:	c3                   	ret    

c000f319 <sbrk>:
c000f319:	55                   	push   ebp
c000f31a:	57                   	push   edi
c000f31b:	56                   	push   esi
c000f31c:	53                   	push   ebx
c000f31d:	83 ec 1c             	sub    esp,0x1c
c000f320:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f324:	85 c0                	test   eax,eax
c000f326:	74 3e                	je     c000f366 <sbrk+0x4d>
c000f328:	78 43                	js     c000f36d <sbrk+0x54>
c000f32a:	8b 15 48 ab 02 c0    	mov    edx,DWORD PTR ds:0xc002ab48
c000f330:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f336:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f33c:	83 e2 01             	and    edx,0x1
c000f33f:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f343:	8b 0d e0 9a 02 c0    	mov    ecx,DWORD PTR ds:0xc0029ae0
c000f349:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f34d:	05 ff 0f 00 00       	add    eax,0xfff
c000f352:	89 c2                	mov    edx,eax
c000f354:	78 2f                	js     c000f385 <sbrk+0x6c>
c000f356:	c1 fa 0c             	sar    edx,0xc
c000f359:	89 d7                	mov    edi,edx
c000f35b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f35f:	be 00 00 00 00       	mov    esi,0x0
c000f364:	eb 36                	jmp    c000f39c <sbrk+0x83>
c000f366:	a1 e0 9a 02 c0       	mov    eax,ds:0xc0029ae0
c000f36b:	eb 74                	jmp    c000f3e1 <sbrk+0xc8>
c000f36d:	83 ec 08             	sub    esp,0x8
c000f370:	50                   	push   eax
c000f371:	68 90 71 02 c0       	push   0xc0027190
c000f376:	e8 ba 32 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c000f37b:	83 c4 10             	add    esp,0x10
c000f37e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f383:	eb 5c                	jmp    c000f3e1 <sbrk+0xc8>
c000f385:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f38b:	eb c9                	jmp    c000f356 <sbrk+0x3d>
c000f38d:	81 05 e0 9a 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0029ae0,0x1000
c000f397:	46                   	inc    esi
c000f398:	39 f7                	cmp    edi,esi
c000f39a:	74 34                	je     c000f3d0 <sbrk+0xb7>
c000f39c:	e8 34 24 00 00       	call   c00117d5 <Virt::getAKernelVAS()>
c000f3a1:	89 c3                	mov    ebx,eax
c000f3a3:	8b 2d e0 9a 02 c0    	mov    ebp,DWORD PTR ds:0xc0029ae0
c000f3a9:	e8 be 06 00 00       	call   c000fa6c <Phys::allocatePage()>
c000f3ae:	68 01 04 00 00       	push   0x401
c000f3b3:	55                   	push   ebp
c000f3b4:	50                   	push   eax
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 55 29 00 00       	call   c0011d10 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f3bb:	83 c4 10             	add    esp,0x10
c000f3be:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3c3:	74 c8                	je     c000f38d <sbrk+0x74>
c000f3c5:	8b 1d e0 9a 02 c0    	mov    ebx,DWORD PTR ds:0xc0029ae0
c000f3cb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f3ce:	eb bd                	jmp    c000f38d <sbrk+0x74>
c000f3d0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3d5:	75 12                	jne    c000f3e9 <sbrk+0xd0>
c000f3d7:	0f 20 d8             	mov    eax,cr3
c000f3da:	0f 22 d8             	mov    cr3,eax
c000f3dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3e1:	83 c4 1c             	add    esp,0x1c
c000f3e4:	5b                   	pop    ebx
c000f3e5:	5e                   	pop    esi
c000f3e6:	5f                   	pop    edi
c000f3e7:	5d                   	pop    ebp
c000f3e8:	c3                   	ret    
c000f3e9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f3ed:	89 cb                	mov    ebx,ecx
c000f3ef:	c1 eb 0a             	shr    ebx,0xa
c000f3f2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f3f8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f3fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f402:	c1 e0 0c             	shl    eax,0xc
c000f405:	01 c8                	add    eax,ecx
c000f407:	c1 e8 0a             	shr    eax,0xa
c000f40a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f40f:	2d 00 00 40 00       	sub    eax,0x400000
c000f414:	39 c3                	cmp    ebx,eax
c000f416:	77 c5                	ja     c000f3dd <sbrk+0xc4>
c000f418:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f41b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f421:	39 d8                	cmp    eax,ebx
c000f423:	73 f3                	jae    c000f418 <sbrk+0xff>
c000f425:	eb b6                	jmp    c000f3dd <sbrk+0xc4>

c000f427 <mmap>:
c000f427:	83 ec 18             	sub    esp,0x18
c000f42a:	68 c0 71 02 c0       	push   0xc00271c0
c000f42f:	e8 c5 99 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c000f434:	b8 00 00 00 00       	mov    eax,0x0
c000f439:	83 c4 1c             	add    esp,0x1c
c000f43c:	c3                   	ret    

c000f43d <munmap>:
c000f43d:	83 ec 18             	sub    esp,0x18
c000f440:	68 c5 71 02 c0       	push   0xc00271c5
c000f445:	e8 af 99 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c000f44a:	b8 00 00 00 00       	mov    eax,0x0
c000f44f:	83 c4 1c             	add    esp,0x1c
c000f452:	c3                   	ret    

c000f453 <liballoc_lock()>:
c000f453:	83 ec 0c             	sub    esp,0xc
c000f456:	e8 aa c9 00 00       	call   c001be05 <lockScheduler()>
c000f45b:	b8 00 00 00 00       	mov    eax,0x0
c000f460:	83 c4 0c             	add    esp,0xc
c000f463:	c3                   	ret    

c000f464 <liballoc_unlock()>:
c000f464:	83 ec 0c             	sub    esp,0xc
c000f467:	e8 9b c9 00 00       	call   c001be07 <unlockScheduler()>
c000f46c:	b8 00 00 00 00       	mov    eax,0x0
c000f471:	83 c4 0c             	add    esp,0xc
c000f474:	c3                   	ret    

c000f475 <liballoc_alloc(int)>:
c000f475:	83 ec 0c             	sub    esp,0xc
c000f478:	e8 58 23 00 00       	call   c00117d5 <Virt::getAKernelVAS()>
c000f47d:	83 ec 04             	sub    esp,0x4
c000f480:	6a 01                	push   0x1
c000f482:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f486:	50                   	push   eax
c000f487:	e8 84 29 00 00       	call   c0011e10 <VAS::allocatePages(int, int)>
c000f48c:	83 c4 1c             	add    esp,0x1c
c000f48f:	c3                   	ret    

c000f490 <liballoc_free(void*, int)>:
c000f490:	83 ec 0c             	sub    esp,0xc
c000f493:	e8 3d 23 00 00       	call   c00117d5 <Virt::getAKernelVAS()>
c000f498:	83 ec 08             	sub    esp,0x8
c000f49b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f49f:	50                   	push   eax
c000f4a0:	e8 27 26 00 00       	call   c0011acc <VAS::freeAllocatedPages(unsigned long)>
c000f4a5:	b8 00 00 00 00       	mov    eax,0x0
c000f4aa:	83 c4 1c             	add    esp,0x1c
c000f4ad:	c3                   	ret    

c000f4ae <realloc>:
c000f4ae:	83 ec 14             	sub    esp,0x14
c000f4b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4b9:	e8 38 1f ff ff       	call   c00013f6 <dlrealloc>
c000f4be:	83 c4 1c             	add    esp,0x1c
c000f4c1:	c3                   	ret    

c000f4c2 <malloc>:
c000f4c2:	83 ec 18             	sub    esp,0x18
c000f4c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4c9:	e8 eb 19 ff ff       	call   c0000eb9 <dlmalloc>
c000f4ce:	83 c4 1c             	add    esp,0x1c
c000f4d1:	c3                   	ret    

c000f4d2 <free>:
c000f4d2:	83 ec 18             	sub    esp,0x18
c000f4d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4d9:	e8 80 16 ff ff       	call   c0000b5e <dlfree>
c000f4de:	83 c4 1c             	add    esp,0x1c
c000f4e1:	c3                   	ret    

c000f4e2 <rfree>:
c000f4e2:	83 ec 18             	sub    esp,0x18
c000f4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4e9:	e8 70 16 ff ff       	call   c0000b5e <dlfree>
c000f4ee:	83 c4 1c             	add    esp,0x1c
c000f4f1:	c3                   	ret    

c000f4f2 <calloc>:
c000f4f2:	56                   	push   esi
c000f4f3:	53                   	push   ebx
c000f4f4:	83 ec 10             	sub    esp,0x10
c000f4f7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f4fb:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f500:	53                   	push   ebx
c000f501:	e8 bc ff ff ff       	call   c000f4c2 <malloc>
c000f506:	89 c6                	mov    esi,eax
c000f508:	83 c4 0c             	add    esp,0xc
c000f50b:	53                   	push   ebx
c000f50c:	6a 00                	push   0x0
c000f50e:	50                   	push   eax
c000f50f:	e8 69 11 ff ff       	call   c000067d <memset>
c000f514:	89 f0                	mov    eax,esi
c000f516:	83 c4 14             	add    esp,0x14
c000f519:	5b                   	pop    ebx
c000f51a:	5e                   	pop    esi
c000f51b:	c3                   	ret    

c000f51c <hwTextMode_loadInData(VgaText*)>:
c000f51c:	57                   	push   edi
c000f51d:	56                   	push   esi
c000f51e:	53                   	push   ebx
c000f51f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000f523:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000f529:	85 c0                	test   eax,eax
c000f52b:	7e 30                	jle    c000f55d <hwTextMode_loadInData(VgaText*)+0x41>
c000f52d:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000f530:	31 f6                	xor    esi,esi
c000f532:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000f535:	31 c0                	xor    eax,eax
c000f537:	c1 e1 05             	shl    ecx,0x5
c000f53a:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000f540:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000f544:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000f548:	40                   	inc    eax
c000f549:	83 f8 50             	cmp    eax,0x50
c000f54c:	75 f2                	jne    c000f540 <hwTextMode_loadInData(VgaText*)+0x24>
c000f54e:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000f554:	46                   	inc    esi
c000f555:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f55b:	7f d5                	jg     c000f532 <hwTextMode_loadInData(VgaText*)+0x16>
c000f55d:	5b                   	pop    ebx
c000f55e:	5e                   	pop    esi
c000f55f:	5f                   	pop    edi
c000f560:	c3                   	ret    

c000f561 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f561:	56                   	push   esi
c000f562:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000f567:	53                   	push   ebx
c000f568:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f56c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f570:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000f576:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000f57c:	c1 e0 04             	shl    eax,0x4
c000f57f:	83 e6 0f             	and    esi,0xf
c000f582:	0f b6 c0             	movzx  eax,al
c000f585:	41                   	inc    ecx
c000f586:	09 f0                	or     eax,esi
c000f588:	83 c2 02             	add    edx,0x2
c000f58b:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000f58f:	c1 e0 08             	shl    eax,0x8
c000f592:	09 f0                	or     eax,esi
c000f594:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f598:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000f59e:	75 d0                	jne    c000f570 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000f5a0:	5b                   	pop    ebx
c000f5a1:	5e                   	pop    esi
c000f5a2:	c3                   	ret    

c000f5a3 <hwTextMode_showCursor(VgaText*, bool)>:
c000f5a3:	56                   	push   esi
c000f5a4:	53                   	push   ebx
c000f5a5:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000f5aa:	74 38                	je     c000f5e4 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000f5ac:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f5b1:	b0 0a                	mov    al,0xa
c000f5b3:	89 da                	mov    edx,ebx
c000f5b5:	ee                   	out    dx,al
c000f5b6:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f5bb:	89 ca                	mov    edx,ecx
c000f5bd:	ec                   	in     al,dx
c000f5be:	b2 0f                	mov    dl,0xf
c000f5c0:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f5c4:	83 e0 c0             	and    eax,0xffffffc0
c000f5c7:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f5cd:	09 d0                	or     eax,edx
c000f5cf:	89 ca                	mov    edx,ecx
c000f5d1:	ee                   	out    dx,al
c000f5d2:	b0 0b                	mov    al,0xb
c000f5d4:	89 da                	mov    edx,ebx
c000f5d6:	ee                   	out    dx,al
c000f5d7:	89 ca                	mov    edx,ecx
c000f5d9:	ec                   	in     al,dx
c000f5da:	83 e0 e0             	and    eax,0xffffffe0
c000f5dd:	83 c8 0f             	or     eax,0xf
c000f5e0:	ee                   	out    dx,al
c000f5e1:	5b                   	pop    ebx
c000f5e2:	5e                   	pop    esi
c000f5e3:	c3                   	ret    
c000f5e4:	b0 0a                	mov    al,0xa
c000f5e6:	ba d4 03 00 00       	mov    edx,0x3d4
c000f5eb:	ee                   	out    dx,al
c000f5ec:	b0 20                	mov    al,0x20
c000f5ee:	ba d5 03 00 00       	mov    edx,0x3d5
c000f5f3:	ee                   	out    dx,al
c000f5f4:	5b                   	pop    ebx
c000f5f5:	5e                   	pop    esi
c000f5f6:	c3                   	ret    

c000f5f7 <hwTextMode_update(VgaText*)>:
c000f5f7:	c3                   	ret    

c000f5f8 <hwTextMode_updateCursor(VgaText*)>:
c000f5f8:	56                   	push   esi
c000f5f9:	b9 19 00 00 00       	mov    ecx,0x19
c000f5fe:	53                   	push   ebx
c000f5ff:	be d4 03 00 00       	mov    esi,0x3d4
c000f604:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f608:	89 f2                	mov    edx,esi
c000f60a:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f610:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f616:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f619:	c1 e1 04             	shl    ecx,0x4
c000f61c:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f622:	b0 0f                	mov    al,0xf
c000f624:	ee                   	out    dx,al
c000f625:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f62a:	88 c8                	mov    al,cl
c000f62c:	89 da                	mov    edx,ebx
c000f62e:	ee                   	out    dx,al
c000f62f:	b0 0e                	mov    al,0xe
c000f631:	89 f2                	mov    edx,esi
c000f633:	ee                   	out    dx,al
c000f634:	89 c8                	mov    eax,ecx
c000f636:	89 da                	mov    edx,ebx
c000f638:	66 c1 e8 08          	shr    ax,0x8
c000f63c:	ee                   	out    dx,al
c000f63d:	5b                   	pop    ebx
c000f63e:	5e                   	pop    esi
c000f63f:	c3                   	ret    

c000f640 <hwTextMode_disableBlink(VgaText*, bool)>:
c000f640:	ba da 03 00 00       	mov    edx,0x3da
c000f645:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000f64a:	75 18                	jne    c000f664 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000f64c:	ec                   	in     al,dx
c000f64d:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f652:	b0 30                	mov    al,0x30
c000f654:	89 ca                	mov    edx,ecx
c000f656:	ee                   	out    dx,al
c000f657:	ba c1 03 00 00       	mov    edx,0x3c1
c000f65c:	ec                   	in     al,dx
c000f65d:	83 c8 08             	or     eax,0x8
c000f660:	89 ca                	mov    edx,ecx
c000f662:	ee                   	out    dx,al
c000f663:	c3                   	ret    
c000f664:	ec                   	in     al,dx
c000f665:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f66a:	b0 30                	mov    al,0x30
c000f66c:	89 ca                	mov    edx,ecx
c000f66e:	ee                   	out    dx,al
c000f66f:	ba c1 03 00 00       	mov    edx,0x3c1
c000f674:	ec                   	in     al,dx
c000f675:	83 e0 f7             	and    eax,0xfffffff7
c000f678:	89 ca                	mov    edx,ecx
c000f67a:	ee                   	out    dx,al
c000f67b:	c3                   	ret    

c000f67c <hwTextMode_scrollScreen(VgaText*)>:
c000f67c:	55                   	push   ebp
c000f67d:	bd 02 00 00 00       	mov    ebp,0x2
c000f682:	57                   	push   edi
c000f683:	56                   	push   esi
c000f684:	53                   	push   ebx
c000f685:	83 ec 1c             	sub    esp,0x1c
c000f688:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000f690:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f694:	31 c0                	xor    eax,eax
c000f696:	eb 0b                	jmp    c000f6a3 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000f698:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f69e:	74 57                	je     c000f6f7 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f6a0:	43                   	inc    ebx
c000f6a1:	89 f0                	mov    eax,esi
c000f6a3:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f6a9:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f6af:	88 13                	mov    BYTE PTR [ebx],dl
c000f6b1:	8d 70 01             	lea    esi,[eax+0x1]
c000f6b4:	83 fd 18             	cmp    ebp,0x18
c000f6b7:	75 df                	jne    c000f698 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000f6b9:	a8 01                	test   al,0x1
c000f6bb:	75 13                	jne    c000f6d0 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000f6bd:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f6c0:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f6c6:	75 d8                	jne    c000f6a0 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000f6c8:	83 c4 1c             	add    esp,0x1c
c000f6cb:	5b                   	pop    ebx
c000f6cc:	5e                   	pop    esi
c000f6cd:	5f                   	pop    edi
c000f6ce:	5d                   	pop    ebp
c000f6cf:	c3                   	ret    
c000f6d0:	83 ec 08             	sub    esp,0x8
c000f6d3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f6d7:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000f6de:	50                   	push   eax
c000f6df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f6e3:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000f6ea:	50                   	push   eax
c000f6eb:	e8 66 0b 00 00       	call   c0010256 <VgaText::combineColours(unsigned char, unsigned char)>
c000f6f0:	83 c4 10             	add    esp,0x10
c000f6f3:	88 07                	mov    BYTE PTR [edi],al
c000f6f5:	eb c9                	jmp    c000f6c0 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000f6f7:	45                   	inc    ebp
c000f6f8:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f700:	eb 8e                	jmp    c000f690 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000f702 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f702:	56                   	push   esi
c000f703:	53                   	push   ebx
c000f704:	83 ec 0c             	sub    esp,0xc
c000f707:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f70b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000f70f:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f714:	50                   	push   eax
c000f715:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f71a:	50                   	push   eax
c000f71b:	e8 36 0b 00 00       	call   c0010256 <VgaText::combineColours(unsigned char, unsigned char)>
c000f720:	5a                   	pop    edx
c000f721:	0f b6 c0             	movzx  eax,al
c000f724:	59                   	pop    ecx
c000f725:	50                   	push   eax
c000f726:	89 f0                	mov    eax,esi
c000f728:	0f be f0             	movsx  esi,al
c000f72b:	56                   	push   esi
c000f72c:	e8 cb 0b 00 00       	call   c00102fc <VgaText::combineCharAndColour(char, unsigned char)>
c000f731:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f735:	ba 19 00 00 00       	mov    edx,0x19
c000f73a:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f740:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000f743:	8d 14 92             	lea    edx,[edx+edx*4]
c000f746:	c1 e1 04             	shl    ecx,0x4
c000f749:	c1 e2 04             	shl    edx,0x4
c000f74c:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000f750:	01 ca                	add    edx,ecx
c000f752:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f75a:	83 c4 14             	add    esp,0x14
c000f75d:	5b                   	pop    ebx
c000f75e:	5e                   	pop    esi
c000f75f:	c3                   	ret    

c000f760 <setupTextMode()>:
c000f760:	c7 05 f8 ab 02 c0 40 f6 00 c0 	mov    DWORD PTR ds:0xc002abf8,0xc000f640
c000f76a:	c7 05 e4 ab 02 c0 1c f5 00 c0 	mov    DWORD PTR ds:0xc002abe4,0xc000f51c
c000f774:	c7 05 e0 ab 02 c0 61 f5 00 c0 	mov    DWORD PTR ds:0xc002abe0,0xc000f561
c000f77e:	c7 05 ec ab 02 c0 7c f6 00 c0 	mov    DWORD PTR ds:0xc002abec,0xc000f67c
c000f788:	c7 05 f4 ab 02 c0 a3 f5 00 c0 	mov    DWORD PTR ds:0xc002abf4,0xc000f5a3
c000f792:	c7 05 e8 ab 02 c0 f7 f5 00 c0 	mov    DWORD PTR ds:0xc002abe8,0xc000f5f7
c000f79c:	c7 05 f0 ab 02 c0 f8 f5 00 c0 	mov    DWORD PTR ds:0xc002abf0,0xc000f5f8
c000f7a6:	c7 05 fc ab 02 c0 02 f7 00 c0 	mov    DWORD PTR ds:0xc002abfc,0xc000f702
c000f7b0:	c3                   	ret    

c000f7b1 <kernel_main>:
c000f7b1:	57                   	push   edi
c000f7b2:	bf f9 03 00 00       	mov    edi,0x3f9
c000f7b7:	56                   	push   esi
c000f7b8:	31 f6                	xor    esi,esi
c000f7ba:	53                   	push   ebx
c000f7bb:	83 ec 10             	sub    esp,0x10
c000f7be:	e8 ed 08 00 00       	call   c00100b0 <installVgaTextImplementation()>
c000f7c3:	e8 98 ff ff ff       	call   c000f760 <setupTextMode()>
c000f7c8:	89 f0                	mov    eax,esi
c000f7ca:	89 fa                	mov    edx,edi
c000f7cc:	ee                   	out    dx,al
c000f7cd:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f7d2:	b0 80                	mov    al,0x80
c000f7d4:	89 da                	mov    edx,ebx
c000f7d6:	ee                   	out    dx,al
c000f7d7:	b1 03                	mov    cl,0x3
c000f7d9:	ba f8 03 00 00       	mov    edx,0x3f8
c000f7de:	88 c8                	mov    al,cl
c000f7e0:	ee                   	out    dx,al
c000f7e1:	89 f0                	mov    eax,esi
c000f7e3:	89 fa                	mov    edx,edi
c000f7e5:	ee                   	out    dx,al
c000f7e6:	88 c8                	mov    al,cl
c000f7e8:	89 da                	mov    edx,ebx
c000f7ea:	ee                   	out    dx,al
c000f7eb:	b0 c7                	mov    al,0xc7
c000f7ed:	ba fa 03 00 00       	mov    edx,0x3fa
c000f7f2:	ee                   	out    dx,al
c000f7f3:	b0 0b                	mov    al,0xb
c000f7f5:	ba fc 03 00 00       	mov    edx,0x3fc
c000f7fa:	ee                   	out    dx,al
c000f7fb:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f800:	83 ec 0c             	sub    esp,0xc
c000f803:	05 ff 0f 00 00       	add    eax,0xfff
c000f808:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f80d:	50                   	push   eax
c000f80e:	e8 59 03 00 00       	call   c000fb6c <Phys::physicalMemorySetup(unsigned int)>
c000f813:	e8 3e 1f 00 00       	call   c0011756 <Virt::virtualMemorySetup()>
c000f818:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000f81e:	83 c4 10             	add    esp,0x10
c000f821:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000f827:	75 0e                	jne    c000f837 <kernel_main+0x86>
c000f829:	89 d8                	mov    eax,ebx
c000f82b:	25 48 03 00 00       	and    eax,0x348
c000f830:	3d 00 03 00 00       	cmp    eax,0x300
c000f835:	74 10                	je     c000f847 <kernel_main+0x96>
c000f837:	83 ec 0c             	sub    esp,0xc
c000f83a:	68 5b 87 02 c0       	push   0xc002875b
c000f83f:	e8 b5 95 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c000f844:	83 c4 10             	add    esp,0x10
c000f847:	83 ec 0c             	sub    esp,0xc
c000f84a:	89 1d 60 ab 02 c0    	mov    DWORD PTR ds:0xc002ab60,ebx
c000f850:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f854:	53                   	push   ebx
c000f855:	e8 b0 20 00 00       	call   c001190a <VAS::VAS()>
c000f85a:	89 1d a4 ac 02 c0    	mov    DWORD PTR ds:0xc002aca4,ebx
c000f860:	e8 bb 07 ff ff       	call   c0000020 <callGlobalConstructors>
c000f865:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f86c:	e8 51 fc ff ff       	call   c000f4c2 <malloc>
c000f871:	89 04 24             	mov    DWORD PTR [esp],eax
c000f874:	89 c6                	mov    esi,eax
c000f876:	e8 61 ea ff ff       	call   c000e2dc <Computer::Computer()>
c000f87b:	6a 00                	push   0x0
c000f87d:	89 35 48 ab 02 c0    	mov    DWORD PTR ds:0xc002ab48,esi
c000f883:	6a 00                	push   0x0
c000f885:	6a 00                	push   0x0
c000f887:	56                   	push   esi
c000f888:	e8 7f f2 ff ff       	call   c000eb0c <Computer::open(int, int, void*)>
c000f88d:	83 c4 14             	add    esp,0x14
c000f890:	53                   	push   ebx
c000f891:	e8 0e 23 00 00       	call   c0011ba4 <VAS::~VAS()>
c000f896:	c7 04 24 cc 71 02 c0 	mov    DWORD PTR [esp],0xc00271cc
c000f89d:	e8 57 95 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c000f8a2:	83 c4 20             	add    esp,0x20
c000f8a5:	5b                   	pop    ebx
c000f8a6:	5e                   	pop    esi
c000f8a7:	5f                   	pop    edi
c000f8a8:	c3                   	ret    

c000f8a9 <Phys::allocateDMA(unsigned long)>:
c000f8a9:	55                   	push   ebp
c000f8aa:	31 d2                	xor    edx,edx
c000f8ac:	57                   	push   edi
c000f8ad:	31 ed                	xor    ebp,ebp
c000f8af:	56                   	push   esi
c000f8b0:	31 c9                	xor    ecx,ecx
c000f8b2:	53                   	push   ebx
c000f8b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8b7:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f8bd:	31 c0                	xor    eax,eax
c000f8bf:	c1 ee 0c             	shr    esi,0xc
c000f8c2:	eb 17                	jmp    c000f8db <Phys::allocateDMA(unsigned long)+0x32>
c000f8c4:	85 c9                	test   ecx,ecx
c000f8c6:	75 04                	jne    c000f8cc <Phys::allocateDMA(unsigned long)+0x23>
c000f8c8:	89 d5                	mov    ebp,edx
c000f8ca:	89 d0                	mov    eax,edx
c000f8cc:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f8cf:	39 de                	cmp    esi,ebx
c000f8d1:	74 20                	je     c000f8f3 <Phys::allocateDMA(unsigned long)+0x4a>
c000f8d3:	42                   	inc    edx
c000f8d4:	89 d9                	mov    ecx,ebx
c000f8d6:	83 fa 2f             	cmp    edx,0x2f
c000f8d9:	7f 11                	jg     c000f8ec <Phys::allocateDMA(unsigned long)+0x43>
c000f8db:	80 ba a0 ab 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd5460],0x0
c000f8e2:	74 e0                	je     c000f8c4 <Phys::allocateDMA(unsigned long)+0x1b>
c000f8e4:	31 c9                	xor    ecx,ecx
c000f8e6:	42                   	inc    edx
c000f8e7:	83 fa 2f             	cmp    edx,0x2f
c000f8ea:	7e ef                	jle    c000f8db <Phys::allocateDMA(unsigned long)+0x32>
c000f8ec:	5b                   	pop    ebx
c000f8ed:	31 c0                	xor    eax,eax
c000f8ef:	5e                   	pop    esi
c000f8f0:	5f                   	pop    edi
c000f8f1:	5d                   	pop    ebp
c000f8f2:	c3                   	ret    
c000f8f3:	8d 14 30             	lea    edx,[eax+esi*1]
c000f8f6:	89 d7                	mov    edi,edx
c000f8f8:	4f                   	dec    edi
c000f8f9:	79 03                	jns    c000f8fe <Phys::allocateDMA(unsigned long)+0x55>
c000f8fb:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f8fe:	c1 ff 04             	sar    edi,0x4
c000f901:	89 c2                	mov    edx,eax
c000f903:	c1 fa 04             	sar    edx,0x4
c000f906:	39 fa                	cmp    edx,edi
c000f908:	75 2f                	jne    c000f939 <Phys::allocateDMA(unsigned long)+0x90>
c000f90a:	85 db                	test   ebx,ebx
c000f90c:	74 1a                	je     c000f928 <Phys::allocateDMA(unsigned long)+0x7f>
c000f90e:	be a0 ab 02 c0       	mov    esi,0xc002aba0
c000f913:	8d 90 a0 ab 02 c0    	lea    edx,[eax-0x3ffd5460]
c000f919:	f7 d6                	not    esi
c000f91b:	29 c6                	sub    esi,eax
c000f91d:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f920:	42                   	inc    edx
c000f921:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f924:	39 d9                	cmp    ecx,ebx
c000f926:	7f f5                	jg     c000f91d <Phys::allocateDMA(unsigned long)+0x74>
c000f928:	85 ff                	test   edi,edi
c000f92a:	74 13                	je     c000f93f <Phys::allocateDMA(unsigned long)+0x96>
c000f92c:	5b                   	pop    ebx
c000f92d:	05 50 20 0c 00       	add    eax,0xc2050
c000f932:	5e                   	pop    esi
c000f933:	c1 e0 0c             	shl    eax,0xc
c000f936:	5f                   	pop    edi
c000f937:	5d                   	pop    ebp
c000f938:	c3                   	ret    
c000f939:	89 ea                	mov    edx,ebp
c000f93b:	31 c9                	xor    ecx,ecx
c000f93d:	eb a7                	jmp    c000f8e6 <Phys::allocateDMA(unsigned long)+0x3d>
c000f93f:	5b                   	pop    ebx
c000f940:	c1 e0 0c             	shl    eax,0xc
c000f943:	5e                   	pop    esi
c000f944:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f949:	5f                   	pop    edi
c000f94a:	5d                   	pop    ebp
c000f94b:	c3                   	ret    

c000f94c <Phys::freeDMA(unsigned long, unsigned long)>:
c000f94c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f950:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f954:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f95a:	c1 e9 0c             	shr    ecx,0xc
c000f95d:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f962:	76 25                	jbe    c000f989 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f964:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f969:	c1 e8 0c             	shr    eax,0xc
c000f96c:	8d 50 10             	lea    edx,[eax+0x10]
c000f96f:	85 c9                	test   ecx,ecx
c000f971:	74 15                	je     c000f988 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f973:	8d 82 a0 ab 02 c0    	lea    eax,[edx-0x3ffd5460]
c000f979:	8d 94 11 a0 ab 02 c0 	lea    edx,[ecx+edx*1-0x3ffd5460]
c000f980:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f983:	40                   	inc    eax
c000f984:	39 d0                	cmp    eax,edx
c000f986:	75 f8                	jne    c000f980 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f988:	c3                   	ret    
c000f989:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f98f:	c1 ea 0c             	shr    edx,0xc
c000f992:	eb db                	jmp    c000f96f <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f994 <Phys::setPageState(unsigned long, bool)>:
c000f994:	56                   	push   esi
c000f995:	ba 01 00 00 00       	mov    edx,0x1
c000f99a:	53                   	push   ebx
c000f99b:	8b 35 e4 9a 02 c0    	mov    esi,DWORD PTR ds:0xc0029ae4
c000f9a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9a5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f9a9:	89 c8                	mov    eax,ecx
c000f9ab:	83 e1 07             	and    ecx,0x7
c000f9ae:	c1 e8 03             	shr    eax,0x3
c000f9b1:	d3 e3                	shl    ebx,cl
c000f9b3:	01 c6                	add    esi,eax
c000f9b5:	d3 e2                	shl    edx,cl
c000f9b7:	f7 d2                	not    edx
c000f9b9:	20 16                	and    BYTE PTR [esi],dl
c000f9bb:	03 05 e4 9a 02 c0    	add    eax,DWORD PTR ds:0xc0029ae4
c000f9c1:	08 18                	or     BYTE PTR [eax],bl
c000f9c3:	5b                   	pop    ebx
c000f9c4:	5e                   	pop    esi
c000f9c5:	c3                   	ret    

c000f9c6 <Phys::getPageState(unsigned long)>:
c000f9c6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f9ca:	8b 15 e4 9a 02 c0    	mov    edx,DWORD PTR ds:0xc0029ae4
c000f9d0:	89 c8                	mov    eax,ecx
c000f9d2:	83 e1 07             	and    ecx,0x7
c000f9d5:	c1 e8 03             	shr    eax,0x3
c000f9d8:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f9dc:	d3 f8                	sar    eax,cl
c000f9de:	83 e0 01             	and    eax,0x1
c000f9e1:	c3                   	ret    

c000f9e2 <Phys::freePage(unsigned long)>:
c000f9e2:	53                   	push   ebx
c000f9e3:	83 ec 08             	sub    esp,0x8
c000f9e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9ea:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f9f0:	76 57                	jbe    c000fa49 <Phys::freePage(unsigned long)+0x67>
c000f9f2:	c1 eb 0c             	shr    ebx,0xc
c000f9f5:	53                   	push   ebx
c000f9f6:	e8 cb ff ff ff       	call   c000f9c6 <Phys::getPageState(unsigned long)>
c000f9fb:	5a                   	pop    edx
c000f9fc:	84 c0                	test   al,al
c000f9fe:	74 5b                	je     c000fa5b <Phys::freePage(unsigned long)+0x79>
c000fa00:	a1 8c ab 02 c0       	mov    eax,ds:0xc002ab8c
c000fa05:	48                   	dec    eax
c000fa06:	a3 8c ab 02 c0       	mov    ds:0xc002ab8c,eax
c000fa0b:	8d 04 80             	lea    eax,[eax+eax*4]
c000fa0e:	8d 04 80             	lea    eax,[eax+eax*4]
c000fa11:	c1 e0 02             	shl    eax,0x2
c000fa14:	99                   	cdq    
c000fa15:	f7 3d 90 ab 02 c0    	idiv   DWORD PTR ds:0xc002ab90
c000fa1b:	39 05 88 ab 02 c0    	cmp    DWORD PTR ds:0xc002ab88,eax
c000fa21:	75 13                	jne    c000fa36 <Phys::freePage(unsigned long)+0x54>
c000fa23:	83 ec 08             	sub    esp,0x8
c000fa26:	6a 00                	push   0x0
c000fa28:	53                   	push   ebx
c000fa29:	e8 66 ff ff ff       	call   c000f994 <Phys::setPageState(unsigned long, bool)>
c000fa2e:	83 c4 10             	add    esp,0x10
c000fa31:	83 c4 08             	add    esp,0x8
c000fa34:	5b                   	pop    ebx
c000fa35:	c3                   	ret    
c000fa36:	83 ec 0c             	sub    esp,0xc
c000fa39:	a3 88 ab 02 c0       	mov    ds:0xc002ab88,eax
c000fa3e:	50                   	push   eax
c000fa3f:	e8 00 0a 00 00       	call   c0010444 <VgaText::updateRAMUsageDisplay(int)>
c000fa44:	83 c4 10             	add    esp,0x10
c000fa47:	eb da                	jmp    c000fa23 <Phys::freePage(unsigned long)+0x41>
c000fa49:	68 00 10 00 00       	push   0x1000
c000fa4e:	53                   	push   ebx
c000fa4f:	e8 f8 fe ff ff       	call   c000f94c <Phys::freeDMA(unsigned long, unsigned long)>
c000fa54:	59                   	pop    ecx
c000fa55:	5b                   	pop    ebx
c000fa56:	83 c4 08             	add    esp,0x8
c000fa59:	5b                   	pop    ebx
c000fa5a:	c3                   	ret    
c000fa5b:	c7 44 24 10 e7 71 02 c0 	mov    DWORD PTR [esp+0x10],0xc00271e7
c000fa63:	83 c4 08             	add    esp,0x8
c000fa66:	5b                   	pop    ebx
c000fa67:	e9 8d 93 00 00       	jmp    c0018df9 <Krnl::panic(char const*)>

c000fa6c <Phys::allocatePage()>:
c000fa6c:	56                   	push   esi
c000fa6d:	53                   	push   ebx
c000fa6e:	51                   	push   ecx
c000fa6f:	8b 35 80 ab 02 c0    	mov    esi,DWORD PTR ds:0xc002ab80
c000fa75:	89 f3                	mov    ebx,esi
c000fa77:	eb 0a                	jmp    c000fa83 <Phys::allocatePage()+0x17>
c000fa79:	89 1d 80 ab 02 c0    	mov    DWORD PTR ds:0xc002ab80,ebx
c000fa7f:	39 de                	cmp    esi,ebx
c000fa81:	74 24                	je     c000faa7 <Phys::allocatePage()+0x3b>
c000fa83:	53                   	push   ebx
c000fa84:	e8 3d ff ff ff       	call   c000f9c6 <Phys::getPageState(unsigned long)>
c000fa89:	5a                   	pop    edx
c000fa8a:	84 c0                	test   al,al
c000fa8c:	74 5a                	je     c000fae8 <Phys::allocatePage()+0x7c>
c000fa8e:	43                   	inc    ebx
c000fa8f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fa95:	75 e2                	jne    c000fa79 <Phys::allocatePage()+0xd>
c000fa97:	31 db                	xor    ebx,ebx
c000fa99:	c7 05 80 ab 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ab80,0x0
c000faa3:	39 de                	cmp    esi,ebx
c000faa5:	75 dc                	jne    c000fa83 <Phys::allocatePage()+0x17>
c000faa7:	83 ec 0c             	sub    esp,0xc
c000faaa:	68 fd 71 02 c0       	push   0xc00271fd
c000faaf:	e8 81 2b 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c000fab4:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fabb:	e8 e9 fd ff ff       	call   c000f8a9 <Phys::allocateDMA(unsigned long)>
c000fac0:	83 c4 10             	add    esp,0x10
c000fac3:	85 c0                	test   eax,eax
c000fac5:	75 56                	jne    c000fb1d <Phys::allocatePage()+0xb1>
c000fac7:	83 ec 0c             	sub    esp,0xc
c000faca:	68 0e 72 02 c0       	push   0xc002720e
c000facf:	e8 25 93 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c000fad4:	83 c4 10             	add    esp,0x10
c000fad7:	8b 1d 80 ab 02 c0    	mov    ebx,DWORD PTR ds:0xc002ab80
c000fadd:	53                   	push   ebx
c000fade:	e8 e3 fe ff ff       	call   c000f9c6 <Phys::getPageState(unsigned long)>
c000fae3:	5a                   	pop    edx
c000fae4:	84 c0                	test   al,al
c000fae6:	75 a6                	jne    c000fa8e <Phys::allocatePage()+0x22>
c000fae8:	6a 01                	push   0x1
c000faea:	53                   	push   ebx
c000faeb:	e8 a4 fe ff ff       	call   c000f994 <Phys::setPageState(unsigned long, bool)>
c000faf0:	a1 8c ab 02 c0       	mov    eax,ds:0xc002ab8c
c000faf5:	59                   	pop    ecx
c000faf6:	40                   	inc    eax
c000faf7:	5b                   	pop    ebx
c000faf8:	a3 8c ab 02 c0       	mov    ds:0xc002ab8c,eax
c000fafd:	8d 04 80             	lea    eax,[eax+eax*4]
c000fb00:	8d 04 80             	lea    eax,[eax+eax*4]
c000fb03:	c1 e0 02             	shl    eax,0x2
c000fb06:	99                   	cdq    
c000fb07:	f7 3d 90 ab 02 c0    	idiv   DWORD PTR ds:0xc002ab90
c000fb0d:	39 05 88 ab 02 c0    	cmp    DWORD PTR ds:0xc002ab88,eax
c000fb13:	75 0c                	jne    c000fb21 <Phys::allocatePage()+0xb5>
c000fb15:	a1 80 ab 02 c0       	mov    eax,ds:0xc002ab80
c000fb1a:	c1 e0 0c             	shl    eax,0xc
c000fb1d:	5a                   	pop    edx
c000fb1e:	5b                   	pop    ebx
c000fb1f:	5e                   	pop    esi
c000fb20:	c3                   	ret    
c000fb21:	83 ec 0c             	sub    esp,0xc
c000fb24:	a3 88 ab 02 c0       	mov    ds:0xc002ab88,eax
c000fb29:	50                   	push   eax
c000fb2a:	e8 15 09 00 00       	call   c0010444 <VgaText::updateRAMUsageDisplay(int)>
c000fb2f:	83 c4 10             	add    esp,0x10
c000fb32:	eb e1                	jmp    c000fb15 <Phys::allocatePage()+0xa9>

c000fb34 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fb34:	56                   	push   esi
c000fb35:	53                   	push   ebx
c000fb36:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb3a:	39 1d 84 ab 02 c0    	cmp    DWORD PTR ds:0xc002ab84,ebx
c000fb40:	73 06                	jae    c000fb48 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fb42:	89 1d 84 ab 02 c0    	mov    DWORD PTR ds:0xc002ab84,ebx
c000fb48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb4c:	c1 eb 0c             	shr    ebx,0xc
c000fb4f:	c1 e8 0c             	shr    eax,0xc
c000fb52:	39 d8                	cmp    eax,ebx
c000fb54:	73 13                	jae    c000fb69 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fb56:	6a 00                	push   0x0
c000fb58:	8d 70 01             	lea    esi,[eax+0x1]
c000fb5b:	50                   	push   eax
c000fb5c:	e8 33 fe ff ff       	call   c000f994 <Phys::setPageState(unsigned long, bool)>
c000fb61:	5a                   	pop    edx
c000fb62:	89 f0                	mov    eax,esi
c000fb64:	59                   	pop    ecx
c000fb65:	39 f3                	cmp    ebx,esi
c000fb67:	75 ed                	jne    c000fb56 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fb69:	5b                   	pop    ebx
c000fb6a:	5e                   	pop    esi
c000fb6b:	c3                   	ret    

c000fb6c <Phys::physicalMemorySetup(unsigned int)>:
c000fb6c:	55                   	push   ebp
c000fb6d:	57                   	push   edi
c000fb6e:	56                   	push   esi
c000fb6f:	53                   	push   ebx
c000fb70:	31 db                	xor    ebx,ebx
c000fb72:	83 ec 40             	sub    esp,0x40
c000fb75:	6a 30                	push   0x30
c000fb77:	6a 00                	push   0x0
c000fb79:	68 a0 ab 02 c0       	push   0xc002aba0
c000fb7e:	e8 fa 0a ff ff       	call   c000067d <memset>
c000fb83:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fb87:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fb8c:	05 00 10 00 00       	add    eax,0x1000
c000fb91:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fb95:	83 c4 10             	add    esp,0x10
c000fb98:	83 ec 08             	sub    esp,0x8
c000fb9b:	6a 01                	push   0x1
c000fb9d:	53                   	push   ebx
c000fb9e:	43                   	inc    ebx
c000fb9f:	e8 f0 fd ff ff       	call   c000f994 <Phys::setPageState(unsigned long, bool)>
c000fba4:	83 c4 10             	add    esp,0x10
c000fba7:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fbad:	75 e9                	jne    c000fb98 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fbaf:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fbb6:	66 85 c0             	test   ax,ax
c000fbb9:	0f 84 8e 01 00 00    	je     c000fd4d <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fbbf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fbc3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fbcb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fbcf:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fbd4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fbd8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fbe0:	eb 15                	jmp    c000fbf7 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fbe2:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fbe6:	83 c3 18             	add    ebx,0x18
c000fbe9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbed:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fbf1:	0f 84 66 01 00 00    	je     c000fd5d <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fbf7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fbfa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fbfd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fc00:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fc04:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fc08:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fc0a:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fc0d:	01 f0                	add    eax,esi
c000fc0f:	55                   	push   ebp
c000fc10:	11 fa                	adc    edx,edi
c000fc12:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc16:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fc1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fc1e:	56                   	push   esi
c000fc1f:	68 48 72 02 c0       	push   0xc0027248
c000fc24:	e8 0c 2a 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c000fc29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fc2d:	83 c4 10             	add    esp,0x10
c000fc30:	09 f8                	or     eax,edi
c000fc32:	0f 85 25 01 00 00    	jne    c000fd5d <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fc38:	4d                   	dec    ebp
c000fc39:	75 a7                	jne    c000fbe2 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fc3b:	ba 00 00 08 00       	mov    edx,0x80000
c000fc40:	89 c1                	mov    ecx,eax
c000fc42:	39 f2                	cmp    edx,esi
c000fc44:	19 f9                	sbb    ecx,edi
c000fc46:	0f 82 a7 00 00 00    	jb     c000fcf3 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fc4c:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fc50:	89 c1                	mov    ecx,eax
c000fc52:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fc56:	0f 83 97 00 00 00    	jae    c000fcf3 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fc5c:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fc61:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc65:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc69:	39 fa                	cmp    edx,edi
c000fc6b:	19 e8                	sbb    eax,ebp
c000fc6d:	0f 82 14 01 00 00    	jb     c000fd87 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fc73:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc77:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc7b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fc81:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fc86:	83 d5 ff             	adc    ebp,0xffffffff
c000fc89:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fc8d:	31 c0                	xor    eax,eax
c000fc8f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fc93:	39 fa                	cmp    edx,edi
c000fc95:	89 c1                	mov    ecx,eax
c000fc97:	19 e9                	sbb    ecx,ebp
c000fc99:	0f 83 43 ff ff ff    	jae    c000fbe2 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fc9f:	be 00 00 08 00       	mov    esi,0x80000
c000fca4:	50                   	push   eax
c000fca5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fca9:	57                   	push   edi
c000fcaa:	56                   	push   esi
c000fcab:	68 6c 72 02 c0       	push   0xc002726c
c000fcb0:	e8 80 29 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c000fcb5:	5a                   	pop    edx
c000fcb6:	59                   	pop    ecx
c000fcb7:	57                   	push   edi
c000fcb8:	56                   	push   esi
c000fcb9:	e8 76 fe ff ff       	call   c000fb34 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fcbe:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fcc2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fcc6:	83 c4 0c             	add    esp,0xc
c000fcc9:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fccd:	03 05 90 ab 02 c0    	add    eax,DWORD PTR ds:0xc002ab90
c000fcd3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fcda:	a3 90 ab 02 c0       	mov    ds:0xc002ab90,eax
c000fcdf:	52                   	push   edx
c000fce0:	50                   	push   eax
c000fce1:	68 2a 72 02 c0       	push   0xc002722a
c000fce6:	e8 4a 29 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c000fceb:	83 c4 10             	add    esp,0x10
c000fcee:	e9 ef fe ff ff       	jmp    c000fbe2 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fcf3:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fcf7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fcfb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fcff:	39 ea                	cmp    edx,ebp
c000fd01:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fd05:	0f 82 d7 fe ff ff    	jb     c000fbe2 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd0b:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fd10:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fd14:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fd18:	0f 83 c4 fe ff ff    	jae    c000fbe2 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd1e:	39 ee                	cmp    esi,ebp
c000fd20:	89 f8                	mov    eax,edi
c000fd22:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fd26:	0f 83 78 ff ff ff    	jae    c000fca4 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fd2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd30:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fd34:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fd38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fd3c:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fd40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd44:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd48:	e9 57 ff ff ff       	jmp    c000fca4 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fd4d:	83 ec 0c             	sub    esp,0xc
c000fd50:	68 1c 72 02 c0       	push   0xc002721c
c000fd55:	e8 9f 90 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c000fd5a:	83 c4 10             	add    esp,0x10
c000fd5d:	bb 40 01 00 00       	mov    ebx,0x140
c000fd62:	83 ec 08             	sub    esp,0x8
c000fd65:	6a 00                	push   0x0
c000fd67:	53                   	push   ebx
c000fd68:	43                   	inc    ebx
c000fd69:	e8 26 fc ff ff       	call   c000f994 <Phys::setPageState(unsigned long, bool)>
c000fd6e:	ff 05 90 ab 02 c0    	inc    DWORD PTR ds:0xc002ab90
c000fd74:	83 c4 10             	add    esp,0x10
c000fd77:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fd7d:	75 e3                	jne    c000fd62 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000fd7f:	83 c4 3c             	add    esp,0x3c
c000fd82:	5b                   	pop    ebx
c000fd83:	5e                   	pop    esi
c000fd84:	5f                   	pop    edi
c000fd85:	5d                   	pop    ebp
c000fd86:	c3                   	ret    
c000fd87:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fd8f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fd97:	e9 d7 fe ff ff       	jmp    c000fc73 <Phys::physicalMemorySetup(unsigned int)+0x107>

c000fd9c <Pipe::isAtty()>:
c000fd9c:	31 c0                	xor    eax,eax
c000fd9e:	c3                   	ret    
c000fd9f:	90                   	nop

c000fda0 <Pipe::~Pipe()>:
c000fda0:	83 ec 0c             	sub    esp,0xc
c000fda3:	ba d8 72 02 c0       	mov    edx,0xc00272d8
c000fda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdac:	89 10                	mov    DWORD PTR [eax],edx
c000fdae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdb2:	83 ec 0c             	sub    esp,0xc
c000fdb5:	50                   	push   eax
c000fdb6:	e8 29 16 00 00       	call   c00113e4 <UnixFile::~UnixFile()>
c000fdbb:	83 c4 10             	add    esp,0x10
c000fdbe:	90                   	nop
c000fdbf:	83 c4 0c             	add    esp,0xc
c000fdc2:	c3                   	ret    
c000fdc3:	90                   	nop

c000fdc4 <Pipe::~Pipe()>:
c000fdc4:	83 ec 0c             	sub    esp,0xc
c000fdc7:	83 ec 0c             	sub    esp,0xc
c000fdca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdce:	e8 cd ff ff ff       	call   c000fda0 <Pipe::~Pipe()>
c000fdd3:	83 c4 10             	add    esp,0x10
c000fdd6:	83 ec 08             	sub    esp,0x8
c000fdd9:	6a 20                	push   0x20
c000fddb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fddf:	e8 71 27 00 00       	call   c0012555 <operator delete(void*, unsigned long)>
c000fde4:	83 c4 10             	add    esp,0x10
c000fde7:	83 c4 0c             	add    esp,0xc
c000fdea:	c3                   	ret    
c000fdeb:	90                   	nop

c000fdec <Pipe::read(unsigned long long, void*, int*)>:
c000fdec:	55                   	push   ebp
c000fded:	57                   	push   edi
c000fdee:	56                   	push   esi
c000fdef:	53                   	push   ebx
c000fdf0:	83 ec 1c             	sub    esp,0x1c
c000fdf3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fdf7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fdfb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fdff:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fe02:	89 c8                	mov    eax,ecx
c000fe04:	99                   	cdq    
c000fe05:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fe09:	74 19                	je     c000fe24 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fe0b:	39 f9                	cmp    ecx,edi
c000fe0d:	89 d1                	mov    ecx,edx
c000fe0f:	19 f1                	sbb    ecx,esi
c000fe11:	73 11                	jae    c000fe24 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fe13:	e8 ed bf 00 00       	call   c001be05 <lockScheduler()>
c000fe18:	e8 23 c3 00 00       	call   c001c140 <schedule()>
c000fe1d:	e8 e5 bf 00 00       	call   c001be07 <unlockScheduler()>
c000fe22:	eb db                	jmp    c000fdff <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fe24:	39 f8                	cmp    eax,edi
c000fe26:	89 d1                	mov    ecx,edx
c000fe28:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000fe2c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000fe30:	19 f1                	sbb    ecx,esi
c000fe32:	73 08                	jae    c000fe3c <Pipe::read(unsigned long long, void*, int*)+0x50>
c000fe34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fe38:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fe3c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe3f:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe42:	29 c6                	sub    esi,eax
c000fe44:	89 f1                	mov    ecx,esi
c000fe46:	c1 f9 1f             	sar    ecx,0x1f
c000fe49:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000fe4d:	89 ca                	mov    edx,ecx
c000fe4f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe53:	19 d1                	sbb    ecx,edx
c000fe55:	73 04                	jae    c000fe5b <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000fe57:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000fe5b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fe5f:	89 fd                	mov    ebp,edi
c000fe61:	29 f5                	sub    ebp,esi
c000fe63:	85 f6                	test   esi,esi
c000fe65:	74 12                	je     c000fe79 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000fe67:	52                   	push   edx
c000fe68:	56                   	push   esi
c000fe69:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000fe6c:	50                   	push   eax
c000fe6d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000fe71:	e8 d1 07 ff ff       	call   c0000647 <memcpy>
c000fe76:	83 c4 10             	add    esp,0x10
c000fe79:	85 ed                	test   ebp,ebp
c000fe7b:	74 12                	je     c000fe8f <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000fe7d:	50                   	push   eax
c000fe7e:	55                   	push   ebp
c000fe7f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000fe82:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000fe86:	56                   	push   esi
c000fe87:	e8 bb 07 ff ff       	call   c0000647 <memcpy>
c000fe8c:	83 c4 10             	add    esp,0x10
c000fe8f:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000fe92:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe95:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe98:	99                   	cdq    
c000fe99:	89 f7                	mov    edi,esi
c000fe9b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000fe9f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000fea3:	c1 ff 1f             	sar    edi,0x1f
c000fea6:	57                   	push   edi
c000fea7:	56                   	push   esi
c000fea8:	52                   	push   edx
c000fea9:	50                   	push   eax
c000feaa:	e8 fd 3c 01 00       	call   c0023bac <__umoddi3>
c000feaf:	83 c4 10             	add    esp,0x10
c000feb2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000feb5:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000feba:	75 10                	jne    c000fecc <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000febc:	83 ec 0c             	sub    esp,0xc
c000febf:	68 95 72 02 c0       	push   0xc0027295
c000fec4:	e8 30 8f 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c000fec9:	83 c4 10             	add    esp,0x10
c000fecc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fed0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fed4:	89 10                	mov    DWORD PTR [eax],edx
c000fed6:	83 c4 1c             	add    esp,0x1c
c000fed9:	31 c0                	xor    eax,eax
c000fedb:	5b                   	pop    ebx
c000fedc:	5e                   	pop    esi
c000fedd:	5f                   	pop    edi
c000fede:	5d                   	pop    ebp
c000fedf:	c3                   	ret    

c000fee0 <Pipe::write(unsigned long long, void*, int*)>:
c000fee0:	55                   	push   ebp
c000fee1:	57                   	push   edi
c000fee2:	56                   	push   esi
c000fee3:	53                   	push   ebx
c000fee4:	83 ec 1c             	sub    esp,0x1c
c000fee7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000feeb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000feef:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fef3:	89 04 24             	mov    DWORD PTR [esp],eax
c000fef6:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000fef9:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000fefc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ff00:	89 de                	mov    esi,ebx
c000ff02:	89 df                	mov    edi,ebx
c000ff04:	c1 ff 1f             	sar    edi,0x1f
c000ff07:	01 c6                	add    esi,eax
c000ff09:	89 c8                	mov    eax,ecx
c000ff0b:	11 d7                	adc    edi,edx
c000ff0d:	99                   	cdq    
c000ff0e:	39 f1                	cmp    ecx,esi
c000ff10:	89 d0                	mov    eax,edx
c000ff12:	19 f8                	sbb    eax,edi
c000ff14:	b8 01 00 00 00       	mov    eax,0x1
c000ff19:	0f 82 80 00 00 00    	jb     c000ff9f <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000ff1f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ff22:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ff25:	01 d8                	add    eax,ebx
c000ff27:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000ff2b:	99                   	cdq    
c000ff2c:	f7 f9                	idiv   ecx
c000ff2e:	29 d1                	sub    ecx,edx
c000ff30:	89 d7                	mov    edi,edx
c000ff32:	89 c8                	mov    eax,ecx
c000ff34:	99                   	cdq    
c000ff35:	39 ce                	cmp    esi,ecx
c000ff37:	19 d3                	sbb    ebx,edx
c000ff39:	bb 00 00 00 00       	mov    ebx,0x0
c000ff3e:	72 04                	jb     c000ff44 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000ff40:	89 f3                	mov    ebx,esi
c000ff42:	29 cb                	sub    ebx,ecx
c000ff44:	89 f1                	mov    ecx,esi
c000ff46:	29 d9                	sub    ecx,ebx
c000ff48:	74 1a                	je     c000ff64 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000ff4a:	52                   	push   edx
c000ff4b:	51                   	push   ecx
c000ff4c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ff50:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ff54:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ff57:	57                   	push   edi
c000ff58:	e8 ea 06 ff ff       	call   c0000647 <memcpy>
c000ff5d:	83 c4 10             	add    esp,0x10
c000ff60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ff64:	85 db                	test   ebx,ebx
c000ff66:	74 12                	je     c000ff7a <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000ff68:	50                   	push   eax
c000ff69:	53                   	push   ebx
c000ff6a:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000ff6e:	51                   	push   ecx
c000ff6f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000ff72:	e8 d0 06 ff ff       	call   c0000647 <memcpy>
c000ff77:	83 c4 10             	add    esp,0x10
c000ff7a:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000ff7d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff82:	75 10                	jne    c000ff94 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000ff84:	83 ec 0c             	sub    esp,0xc
c000ff87:	68 b1 72 02 c0       	push   0xc00272b1
c000ff8c:	e8 68 8e 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c000ff91:	83 c4 10             	add    esp,0x10
c000ff94:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff98:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000ff9b:	89 38                	mov    DWORD PTR [eax],edi
c000ff9d:	31 c0                	xor    eax,eax
c000ff9f:	83 c4 1c             	add    esp,0x1c
c000ffa2:	5b                   	pop    ebx
c000ffa3:	5e                   	pop    esi
c000ffa4:	5f                   	pop    edi
c000ffa5:	5d                   	pop    ebp
c000ffa6:	c3                   	ret    
c000ffa7:	90                   	nop

c000ffa8 <Pipe::Pipe(int)>:
c000ffa8:	83 ec 0c             	sub    esp,0xc
c000ffab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffaf:	83 ec 08             	sub    esp,0x8
c000ffb2:	6a 00                	push   0x0
c000ffb4:	50                   	push   eax
c000ffb5:	e8 48 12 00 00       	call   c0011202 <UnixFile::UnixFile(int)>
c000ffba:	83 c4 10             	add    esp,0x10
c000ffbd:	ba d8 72 02 c0       	mov    edx,0xc00272d8
c000ffc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc6:	89 10                	mov    DWORD PTR [eax],edx
c000ffc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffcc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ffd0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ffd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffd7:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ffde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe2:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ffe9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffed:	83 ec 0c             	sub    esp,0xc
c000fff0:	50                   	push   eax
c000fff1:	e8 cc f4 ff ff       	call   c000f4c2 <malloc>
c000fff6:	83 c4 10             	add    esp,0x10
c000fff9:	89 c2                	mov    edx,eax
c000fffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffff:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010006:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c001000a:	90                   	nop
c001000b:	83 c4 0c             	add    esp,0xc
c001000e:	c3                   	ret    
c001000f:	90                   	nop

c0010010 <VgaText::isAtty()>:
c0010010:	b0 01                	mov    al,0x1
c0010012:	c3                   	ret    
c0010013:	90                   	nop

c0010014 <VgaText::~VgaText()>:
c0010014:	83 ec 0c             	sub    esp,0xc
c0010017:	ba 94 73 02 c0       	mov    edx,0xc0027394
c001001c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010020:	89 10                	mov    DWORD PTR [eax],edx
c0010022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010026:	83 ec 0c             	sub    esp,0xc
c0010029:	50                   	push   eax
c001002a:	e8 b5 13 00 00       	call   c00113e4 <UnixFile::~UnixFile()>
c001002f:	83 c4 10             	add    esp,0x10
c0010032:	90                   	nop
c0010033:	83 c4 0c             	add    esp,0xc
c0010036:	c3                   	ret    
c0010037:	90                   	nop

c0010038 <VgaText::~VgaText()>:
c0010038:	83 ec 0c             	sub    esp,0xc
c001003b:	83 ec 0c             	sub    esp,0xc
c001003e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010042:	e8 cd ff ff ff       	call   c0010014 <VgaText::~VgaText()>
c0010047:	83 c4 10             	add    esp,0x10
c001004a:	83 ec 08             	sub    esp,0x8
c001004d:	68 60 12 00 00       	push   0x1260
c0010052:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010056:	e8 fa 24 00 00       	call   c0012555 <operator delete(void*, unsigned long)>
c001005b:	83 c4 10             	add    esp,0x10
c001005e:	83 c4 0c             	add    esp,0xc
c0010061:	c3                   	ret    

c0010062 <VgaText::read(unsigned long long, void*, int*)>:
c0010062:	83 ec 10             	sub    esp,0x10
c0010065:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010069:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001006d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010071:	e8 78 57 00 00       	call   c00157ee <readKeyboard(VgaText*, char*, unsigned long)>
c0010076:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001007a:	89 02                	mov    DWORD PTR [edx],eax
c001007c:	31 c0                	xor    eax,eax
c001007e:	83 c4 1c             	add    esp,0x1c
c0010081:	c3                   	ret    

c0010082 <setTerminalScrollLock(bool)>:
c0010082:	c3                   	ret    

c0010083 <addToTerminalCycle(VgaText*)>:
c0010083:	8b 15 00 ac 02 c0    	mov    edx,DWORD PTR ds:0xc002ac00
c0010089:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001008d:	85 d2                	test   edx,edx
c001008f:	75 0c                	jne    c001009d <addToTerminalCycle(VgaText*)+0x1a>
c0010091:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010097:	a3 00 ac 02 c0       	mov    ds:0xc002ac00,eax
c001009c:	c3                   	ret    
c001009d:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00100a3:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00100a9:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00100af:	c3                   	ret    

c00100b0 <installVgaTextImplementation()>:
c00100b0:	83 ec 10             	sub    esp,0x10
c00100b3:	6a 20                	push   0x20
c00100b5:	6a 00                	push   0x0
c00100b7:	68 e0 ab 02 c0       	push   0xc002abe0
c00100bc:	e8 bc 05 ff ff       	call   c000067d <memset>
c00100c1:	83 c4 1c             	add    esp,0x1c
c00100c4:	c3                   	ret    

c00100c5 <scrollTerminalScrollLock(int)>:
c00100c5:	c3                   	ret    

c00100c6 <VgaText::load()>:
c00100c6:	53                   	push   ebx
c00100c7:	31 c0                	xor    eax,eax
c00100c9:	83 ec 58             	sub    esp,0x58
c00100cc:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00100d0:	89 e2                	mov    edx,esp
c00100d2:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00100d6:	40                   	inc    eax
c00100d7:	83 f8 50             	cmp    eax,0x50
c00100da:	75 f6                	jne    c00100d2 <VgaText::load()+0xc>
c00100dc:	31 c0                	xor    eax,eax
c00100de:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c00100e5:	84 c9                	test   cl,cl
c00100e7:	74 06                	je     c00100ef <VgaText::load()+0x29>
c00100e9:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00100ec:	40                   	inc    eax
c00100ed:	eb ef                	jmp    c00100de <VgaText::load()+0x18>
c00100ef:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00100f5:	85 c0                	test   eax,eax
c00100f7:	74 09                	je     c0010102 <VgaText::load()+0x3c>
c00100f9:	51                   	push   ecx
c00100fa:	51                   	push   ecx
c00100fb:	52                   	push   edx
c00100fc:	53                   	push   ebx
c00100fd:	ff d0                	call   eax
c00100ff:	83 c4 10             	add    esp,0x10
c0010102:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010108:	85 c0                	test   eax,eax
c001010a:	74 09                	je     c0010115 <VgaText::load()+0x4f>
c001010c:	83 ec 0c             	sub    esp,0xc
c001010f:	53                   	push   ebx
c0010110:	ff d0                	call   eax
c0010112:	83 c4 10             	add    esp,0x10
c0010115:	83 c4 58             	add    esp,0x58
c0010118:	5b                   	pop    ebx
c0010119:	c3                   	ret    

c001011a <VgaText::updateCursor()>:
c001011a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001011e:	39 05 04 ac 02 c0    	cmp    DWORD PTR ds:0xc002ac04,eax
c0010124:	75 0c                	jne    c0010132 <VgaText::updateCursor()+0x18>
c0010126:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c001012c:	85 c0                	test   eax,eax
c001012e:	74 02                	je     c0010132 <VgaText::updateCursor()+0x18>
c0010130:	ff e0                	jmp    eax
c0010132:	c3                   	ret    
c0010133:	90                   	nop

c0010134 <VgaText::showCursor(bool)>:
c0010134:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010138:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001013c:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c0010142:	c3                   	ret    
c0010143:	90                   	nop

c0010144 <VgaText::disableBlink(bool)>:
c0010144:	56                   	push   esi
c0010145:	53                   	push   ebx
c0010146:	51                   	push   ecx
c0010147:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001014b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001014f:	39 1d 04 ac 02 c0    	cmp    DWORD PTR ds:0xc002ac04,ebx
c0010155:	75 18                	jne    c001016f <VgaText::disableBlink(bool)+0x2b>
c0010157:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c001015d:	85 c0                	test   eax,eax
c001015f:	74 0e                	je     c001016f <VgaText::disableBlink(bool)+0x2b>
c0010161:	89 f1                	mov    ecx,esi
c0010163:	52                   	push   edx
c0010164:	52                   	push   edx
c0010165:	0f b6 d1             	movzx  edx,cl
c0010168:	52                   	push   edx
c0010169:	53                   	push   ebx
c001016a:	ff d0                	call   eax
c001016c:	83 c4 10             	add    esp,0x10
c001016f:	89 f0                	mov    eax,esi
c0010171:	83 f0 01             	xor    eax,0x1
c0010174:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c001017a:	58                   	pop    eax
c001017b:	5b                   	pop    ebx
c001017c:	5e                   	pop    esi
c001017d:	c3                   	ret    

c001017e <VgaText::doANSI_SGR(int)>:
c001017e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010182:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010186:	85 d2                	test   edx,edx
c0010188:	75 14                	jne    c001019e <VgaText::doANSI_SGR(int)+0x20>
c001018a:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c0010190:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010196:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c001019c:	eb 65                	jmp    c0010203 <VgaText::doANSI_SGR(int)+0x85>
c001019e:	83 fa 07             	cmp    edx,0x7
c00101a1:	75 14                	jne    c00101b7 <VgaText::doANSI_SGR(int)+0x39>
c00101a3:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00101a9:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00101af:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00101b5:	eb 4c                	jmp    c0010203 <VgaText::doANSI_SGR(int)+0x85>
c00101b7:	83 fa 1b             	cmp    edx,0x1b
c00101ba:	74 ce                	je     c001018a <VgaText::doANSI_SGR(int)+0xc>
c00101bc:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00101bf:	83 f9 07             	cmp    ecx,0x7
c00101c2:	77 09                	ja     c00101cd <VgaText::doANSI_SGR(int)+0x4f>
c00101c4:	8b 14 8d 20 9b 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd64e0]
c00101cb:	eb 20                	jmp    c00101ed <VgaText::doANSI_SGR(int)+0x6f>
c00101cd:	8d 4a d8             	lea    ecx,[edx-0x28]
c00101d0:	83 f9 07             	cmp    ecx,0x7
c00101d3:	77 09                	ja     c00101de <VgaText::doANSI_SGR(int)+0x60>
c00101d5:	8b 14 8d 20 9b 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd64e0]
c00101dc:	eb 25                	jmp    c0010203 <VgaText::doANSI_SGR(int)+0x85>
c00101de:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00101e1:	83 f9 07             	cmp    ecx,0x7
c00101e4:	77 0e                	ja     c00101f4 <VgaText::doANSI_SGR(int)+0x76>
c00101e6:	8b 14 95 d8 99 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6628]
c00101ed:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00101f3:	c3                   	ret    
c00101f4:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00101f7:	83 f9 07             	cmp    ecx,0x7
c00101fa:	77 0d                	ja     c0010209 <VgaText::doANSI_SGR(int)+0x8b>
c00101fc:	8b 14 95 b0 99 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6650]
c0010203:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010209:	c3                   	ret    

c001020a <VgaText::setDefaultBgColour(VgaColour)>:
c001020a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001020e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010212:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010218:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001021e:	c3                   	ret    
c001021f:	90                   	nop

c0010220 <VgaText::setDefaultFgColour(VgaColour)>:
c0010220:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010224:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010228:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c001022e:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010234:	c3                   	ret    
c0010235:	90                   	nop

c0010236 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010236:	53                   	push   ebx
c0010237:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001023b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001023f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010243:	51                   	push   ecx
c0010244:	e8 c1 ff ff ff       	call   c001020a <VgaText::setDefaultBgColour(VgaColour)>
c0010249:	58                   	pop    eax
c001024a:	5a                   	pop    edx
c001024b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001024f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010253:	5b                   	pop    ebx
c0010254:	eb ca                	jmp    c0010220 <VgaText::setDefaultFgColour(VgaColour)>

c0010256 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010256:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001025a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001025f:	83 e0 0f             	and    eax,0xf
c0010262:	c1 e2 04             	shl    edx,0x4
c0010265:	09 d0                	or     eax,edx
c0010267:	c3                   	ret    

c0010268 <VgaText::scrollScreen()>:
c0010268:	57                   	push   edi
c0010269:	56                   	push   esi
c001026a:	be 01 00 00 00       	mov    esi,0x1
c001026f:	53                   	push   ebx
c0010270:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010274:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c001027a:	31 ff                	xor    edi,edi
c001027c:	01 d9                	add    ecx,ebx
c001027e:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010281:	83 fe 17             	cmp    esi,0x17
c0010284:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c001028a:	75 28                	jne    c00102b4 <VgaText::scrollScreen()+0x4c>
c001028c:	f7 c7 01 00 00 00    	test   edi,0x1
c0010292:	74 1c                	je     c00102b0 <VgaText::scrollScreen()+0x48>
c0010294:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c001029b:	50                   	push   eax
c001029c:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00102a3:	50                   	push   eax
c00102a4:	e8 ad ff ff ff       	call   c0010256 <VgaText::combineColours(unsigned char, unsigned char)>
c00102a9:	5a                   	pop    edx
c00102aa:	5a                   	pop    edx
c00102ab:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00102ae:	eb 04                	jmp    c00102b4 <VgaText::scrollScreen()+0x4c>
c00102b0:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00102b4:	47                   	inc    edi
c00102b5:	41                   	inc    ecx
c00102b6:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00102bc:	75 c0                	jne    c001027e <VgaText::scrollScreen()+0x16>
c00102be:	46                   	inc    esi
c00102bf:	83 fe 18             	cmp    esi,0x18
c00102c2:	75 b0                	jne    c0010274 <VgaText::scrollScreen()+0xc>
c00102c4:	39 1d 04 ac 02 c0    	cmp    DWORD PTR ds:0xc002ac04,ebx
c00102ca:	75 24                	jne    c00102f0 <VgaText::scrollScreen()+0x88>
c00102cc:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00102d3:	74 08                	je     c00102dd <VgaText::scrollScreen()+0x75>
c00102d5:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00102db:	eb 13                	jmp    c00102f0 <VgaText::scrollScreen()+0x88>
c00102dd:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c00102e3:	85 c0                	test   eax,eax
c00102e5:	74 09                	je     c00102f0 <VgaText::scrollScreen()+0x88>
c00102e7:	83 ec 0c             	sub    esp,0xc
c00102ea:	53                   	push   ebx
c00102eb:	ff d0                	call   eax
c00102ed:	83 c4 10             	add    esp,0x10
c00102f0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00102f4:	5b                   	pop    ebx
c00102f5:	5e                   	pop    esi
c00102f6:	5f                   	pop    edi
c00102f7:	e9 1e fe ff ff       	jmp    c001011a <VgaText::updateCursor()>

c00102fc <VgaText::combineCharAndColour(char, unsigned char)>:
c00102fc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010301:	c1 e0 08             	shl    eax,0x8
c0010304:	89 c2                	mov    edx,eax
c0010306:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001030b:	09 d0                	or     eax,edx
c001030d:	c3                   	ret    

c001030e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001030e:	53                   	push   ebx
c001030f:	83 ec 08             	sub    esp,0x8
c0010312:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010316:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001031b:	50                   	push   eax
c001031c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010321:	50                   	push   eax
c0010322:	e8 2f ff ff ff       	call   c0010256 <VgaText::combineColours(unsigned char, unsigned char)>
c0010327:	5a                   	pop    edx
c0010328:	0f b6 c0             	movzx  eax,al
c001032b:	5b                   	pop    ebx
c001032c:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010331:	50                   	push   eax
c0010332:	53                   	push   ebx
c0010333:	e8 c4 ff ff ff       	call   c00102fc <VgaText::combineCharAndColour(char, unsigned char)>
c0010338:	5a                   	pop    edx
c0010339:	5a                   	pop    edx
c001033a:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010340:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010344:	0f b7 d2             	movzx  edx,dx
c0010347:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c001034c:	39 0d 04 ac 02 c0    	cmp    DWORD PTR ds:0xc002ac04,ecx
c0010352:	75 14                	jne    c0010368 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010354:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c001035a:	85 c0                	test   eax,eax
c001035c:	74 0a                	je     c0010368 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001035e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010362:	83 c4 08             	add    esp,0x8
c0010365:	5b                   	pop    ebx
c0010366:	ff e0                	jmp    eax
c0010368:	83 c4 08             	add    esp,0x8
c001036b:	5b                   	pop    ebx
c001036c:	c3                   	ret    
c001036d:	90                   	nop

c001036e <VgaText::getCursorX()>:
c001036e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010372:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010378:	c3                   	ret    
c0010379:	90                   	nop

c001037a <VgaText::getCursorY()>:
c001037a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001037e:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010384:	c3                   	ret    
c0010385:	90                   	nop

c0010386 <VgaText::setCursor(int, int)>:
c0010386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001038a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001038e:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010394:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010398:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c001039e:	e9 77 fd ff ff       	jmp    c001011a <VgaText::updateCursor()>
c00103a3:	90                   	nop

c00103a4 <VgaText::setCursorX(int)>:
c00103a4:	83 ec 10             	sub    esp,0x10
c00103a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103ab:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00103b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103b5:	50                   	push   eax
c00103b6:	e8 cb ff ff ff       	call   c0010386 <VgaText::setCursor(int, int)>
c00103bb:	83 c4 1c             	add    esp,0x1c
c00103be:	c3                   	ret    
c00103bf:	90                   	nop

c00103c0 <VgaText::setCursorY(int)>:
c00103c0:	83 ec 10             	sub    esp,0x10
c00103c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103cb:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00103d1:	50                   	push   eax
c00103d2:	e8 af ff ff ff       	call   c0010386 <VgaText::setCursor(int, int)>
c00103d7:	83 c4 1c             	add    esp,0x1c
c00103da:	c3                   	ret    
c00103db:	90                   	nop

c00103dc <VgaText::incrementCursor(bool)>:
c00103dc:	56                   	push   esi
c00103dd:	53                   	push   ebx
c00103de:	51                   	push   ecx
c00103df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103e3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103e7:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c00103ed:	40                   	inc    eax
c00103ee:	83 f8 50             	cmp    eax,0x50
c00103f1:	74 08                	je     c00103fb <VgaText::incrementCursor(bool)+0x1f>
c00103f3:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00103f9:	eb 33                	jmp    c001042e <VgaText::incrementCursor(bool)+0x52>
c00103fb:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010401:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001040b:	8d 50 01             	lea    edx,[eax+0x1]
c001040e:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010414:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001041a:	75 12                	jne    c001042e <VgaText::incrementCursor(bool)+0x52>
c001041c:	83 ec 0c             	sub    esp,0xc
c001041f:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010425:	53                   	push   ebx
c0010426:	e8 3d fe ff ff       	call   c0010268 <VgaText::scrollScreen()>
c001042b:	83 c4 10             	add    esp,0x10
c001042e:	89 f0                	mov    eax,esi
c0010430:	84 c0                	test   al,al
c0010432:	74 0c                	je     c0010440 <VgaText::incrementCursor(bool)+0x64>
c0010434:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010438:	5a                   	pop    edx
c0010439:	5b                   	pop    ebx
c001043a:	5e                   	pop    esi
c001043b:	e9 da fc ff ff       	jmp    c001011a <VgaText::updateCursor()>
c0010440:	58                   	pop    eax
c0010441:	5b                   	pop    ebx
c0010442:	5e                   	pop    esi
c0010443:	c3                   	ret    

c0010444 <VgaText::updateRAMUsageDisplay(int)>:
c0010444:	53                   	push   ebx
c0010445:	bb 0a 00 00 00       	mov    ebx,0xa
c001044a:	6a 0f                	push   0xf
c001044c:	6a 00                	push   0x0
c001044e:	e8 03 fe ff ff       	call   c0010256 <VgaText::combineColours(unsigned char, unsigned char)>
c0010453:	5a                   	pop    edx
c0010454:	59                   	pop    ecx
c0010455:	0f b6 c8             	movzx  ecx,al
c0010458:	51                   	push   ecx
c0010459:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001045d:	99                   	cdq    
c001045e:	f7 fb                	idiv   ebx
c0010460:	89 d3                	mov    ebx,edx
c0010462:	83 c0 30             	add    eax,0x30
c0010465:	83 c3 30             	add    ebx,0x30
c0010468:	0f be c0             	movsx  eax,al
c001046b:	0f b6 db             	movzx  ebx,bl
c001046e:	50                   	push   eax
c001046f:	e8 88 fe ff ff       	call   c00102fc <VgaText::combineCharAndColour(char, unsigned char)>
c0010474:	5a                   	pop    edx
c0010475:	5a                   	pop    edx
c0010476:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c001047c:	51                   	push   ecx
c001047d:	53                   	push   ebx
c001047e:	e8 79 fe ff ff       	call   c00102fc <VgaText::combineCharAndColour(char, unsigned char)>
c0010483:	5b                   	pop    ebx
c0010484:	5a                   	pop    edx
c0010485:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c001048b:	51                   	push   ecx
c001048c:	6a 25                	push   0x25
c001048e:	e8 69 fe ff ff       	call   c00102fc <VgaText::combineCharAndColour(char, unsigned char)>
c0010493:	59                   	pop    ecx
c0010494:	5b                   	pop    ebx
c0010495:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c001049b:	5b                   	pop    ebx
c001049c:	c3                   	ret    
c001049d:	90                   	nop

c001049e <VgaText::updateDiskUsage()>:
c001049e:	55                   	push   ebp
c001049f:	bd 10 27 00 00       	mov    ebp,0x2710
c00104a4:	57                   	push   edi
c00104a5:	56                   	push   esi
c00104a6:	53                   	push   ebx
c00104a7:	6a 0f                	push   0xf
c00104a9:	6a 00                	push   0x0
c00104ab:	e8 a6 fd ff ff       	call   c0010256 <VgaText::combineColours(unsigned char, unsigned char)>
c00104b0:	5a                   	pop    edx
c00104b1:	0f b6 d8             	movzx  ebx,al
c00104b4:	59                   	pop    ecx
c00104b5:	a1 08 ce 02 c0       	mov    eax,ds:0xc002ce08
c00104ba:	53                   	push   ebx
c00104bb:	b9 0a 00 00 00       	mov    ecx,0xa
c00104c0:	99                   	cdq    
c00104c1:	f7 fd                	idiv   ebp
c00104c3:	99                   	cdq    
c00104c4:	f7 f9                	idiv   ecx
c00104c6:	8d 42 30             	lea    eax,[edx+0x30]
c00104c9:	0f b6 c0             	movzx  eax,al
c00104cc:	50                   	push   eax
c00104cd:	e8 2a fe ff ff       	call   c00102fc <VgaText::combineCharAndColour(char, unsigned char)>
c00104d2:	5e                   	pop    esi
c00104d3:	5f                   	pop    edi
c00104d4:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c00104da:	bf e8 03 00 00       	mov    edi,0x3e8
c00104df:	53                   	push   ebx
c00104e0:	a1 08 ce 02 c0       	mov    eax,ds:0xc002ce08
c00104e5:	99                   	cdq    
c00104e6:	f7 ff                	idiv   edi
c00104e8:	99                   	cdq    
c00104e9:	f7 f9                	idiv   ecx
c00104eb:	8d 42 30             	lea    eax,[edx+0x30]
c00104ee:	0f b6 c0             	movzx  eax,al
c00104f1:	50                   	push   eax
c00104f2:	e8 05 fe ff ff       	call   c00102fc <VgaText::combineCharAndColour(char, unsigned char)>
c00104f7:	5a                   	pop    edx
c00104f8:	5e                   	pop    esi
c00104f9:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c00104ff:	be 64 00 00 00       	mov    esi,0x64
c0010504:	53                   	push   ebx
c0010505:	a1 08 ce 02 c0       	mov    eax,ds:0xc002ce08
c001050a:	99                   	cdq    
c001050b:	f7 fe                	idiv   esi
c001050d:	99                   	cdq    
c001050e:	f7 f9                	idiv   ecx
c0010510:	8d 42 30             	lea    eax,[edx+0x30]
c0010513:	0f b6 c0             	movzx  eax,al
c0010516:	50                   	push   eax
c0010517:	e8 e0 fd ff ff       	call   c00102fc <VgaText::combineCharAndColour(char, unsigned char)>
c001051c:	5a                   	pop    edx
c001051d:	5a                   	pop    edx
c001051e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c0010524:	53                   	push   ebx
c0010525:	a1 08 ce 02 c0       	mov    eax,ds:0xc002ce08
c001052a:	99                   	cdq    
c001052b:	f7 f9                	idiv   ecx
c001052d:	99                   	cdq    
c001052e:	f7 f9                	idiv   ecx
c0010530:	8d 42 30             	lea    eax,[edx+0x30]
c0010533:	0f b6 c0             	movzx  eax,al
c0010536:	50                   	push   eax
c0010537:	e8 c0 fd ff ff       	call   c00102fc <VgaText::combineCharAndColour(char, unsigned char)>
c001053c:	5a                   	pop    edx
c001053d:	5a                   	pop    edx
c001053e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c0010544:	53                   	push   ebx
c0010545:	a1 08 ce 02 c0       	mov    eax,ds:0xc002ce08
c001054a:	99                   	cdq    
c001054b:	f7 f9                	idiv   ecx
c001054d:	8d 42 30             	lea    eax,[edx+0x30]
c0010550:	0f b6 c0             	movzx  eax,al
c0010553:	50                   	push   eax
c0010554:	e8 a3 fd ff ff       	call   c00102fc <VgaText::combineCharAndColour(char, unsigned char)>
c0010559:	5a                   	pop    edx
c001055a:	5a                   	pop    edx
c001055b:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c0010561:	53                   	push   ebx
c0010562:	a1 04 ce 02 c0       	mov    eax,ds:0xc002ce04
c0010567:	99                   	cdq    
c0010568:	f7 fd                	idiv   ebp
c001056a:	99                   	cdq    
c001056b:	f7 f9                	idiv   ecx
c001056d:	8d 42 30             	lea    eax,[edx+0x30]
c0010570:	0f b6 c0             	movzx  eax,al
c0010573:	50                   	push   eax
c0010574:	e8 83 fd ff ff       	call   c00102fc <VgaText::combineCharAndColour(char, unsigned char)>
c0010579:	5d                   	pop    ebp
c001057a:	5a                   	pop    edx
c001057b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c0010581:	53                   	push   ebx
c0010582:	a1 04 ce 02 c0       	mov    eax,ds:0xc002ce04
c0010587:	99                   	cdq    
c0010588:	f7 ff                	idiv   edi
c001058a:	99                   	cdq    
c001058b:	f7 f9                	idiv   ecx
c001058d:	8d 42 30             	lea    eax,[edx+0x30]
c0010590:	0f b6 c0             	movzx  eax,al
c0010593:	50                   	push   eax
c0010594:	e8 63 fd ff ff       	call   c00102fc <VgaText::combineCharAndColour(char, unsigned char)>
c0010599:	5f                   	pop    edi
c001059a:	5d                   	pop    ebp
c001059b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c00105a1:	53                   	push   ebx
c00105a2:	a1 04 ce 02 c0       	mov    eax,ds:0xc002ce04
c00105a7:	99                   	cdq    
c00105a8:	f7 fe                	idiv   esi
c00105aa:	99                   	cdq    
c00105ab:	f7 f9                	idiv   ecx
c00105ad:	8d 42 30             	lea    eax,[edx+0x30]
c00105b0:	0f b6 c0             	movzx  eax,al
c00105b3:	50                   	push   eax
c00105b4:	e8 43 fd ff ff       	call   c00102fc <VgaText::combineCharAndColour(char, unsigned char)>
c00105b9:	5a                   	pop    edx
c00105ba:	5e                   	pop    esi
c00105bb:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c00105c1:	53                   	push   ebx
c00105c2:	a1 04 ce 02 c0       	mov    eax,ds:0xc002ce04
c00105c7:	99                   	cdq    
c00105c8:	f7 f9                	idiv   ecx
c00105ca:	99                   	cdq    
c00105cb:	f7 f9                	idiv   ecx
c00105cd:	8d 42 30             	lea    eax,[edx+0x30]
c00105d0:	0f b6 c0             	movzx  eax,al
c00105d3:	50                   	push   eax
c00105d4:	e8 23 fd ff ff       	call   c00102fc <VgaText::combineCharAndColour(char, unsigned char)>
c00105d9:	5f                   	pop    edi
c00105da:	5d                   	pop    ebp
c00105db:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c00105e1:	53                   	push   ebx
c00105e2:	a1 04 ce 02 c0       	mov    eax,ds:0xc002ce04
c00105e7:	99                   	cdq    
c00105e8:	f7 f9                	idiv   ecx
c00105ea:	83 c2 30             	add    edx,0x30
c00105ed:	0f b6 d2             	movzx  edx,dl
c00105f0:	52                   	push   edx
c00105f1:	e8 06 fd ff ff       	call   c00102fc <VgaText::combineCharAndColour(char, unsigned char)>
c00105f6:	5a                   	pop    edx
c00105f7:	59                   	pop    ecx
c00105f8:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c00105fe:	5b                   	pop    ebx
c00105ff:	5e                   	pop    esi
c0010600:	5f                   	pop    edi
c0010601:	5d                   	pop    ebp
c0010602:	c3                   	ret    
c0010603:	90                   	nop

c0010604 <VgaText::updateTitle()>:
c0010604:	53                   	push   ebx
c0010605:	31 c0                	xor    eax,eax
c0010607:	83 ec 58             	sub    esp,0x58
c001060a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c001060e:	89 e1                	mov    ecx,esp
c0010610:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010614:	40                   	inc    eax
c0010615:	83 f8 50             	cmp    eax,0x50
c0010618:	75 f6                	jne    c0010610 <VgaText::updateTitle()+0xc>
c001061a:	31 c0                	xor    eax,eax
c001061c:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010623:	84 db                	test   bl,bl
c0010625:	74 06                	je     c001062d <VgaText::updateTitle()+0x29>
c0010627:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c001062a:	40                   	inc    eax
c001062b:	eb ef                	jmp    c001061c <VgaText::updateTitle()+0x18>
c001062d:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010633:	85 c0                	test   eax,eax
c0010635:	74 09                	je     c0010640 <VgaText::updateTitle()+0x3c>
c0010637:	53                   	push   ebx
c0010638:	53                   	push   ebx
c0010639:	51                   	push   ecx
c001063a:	52                   	push   edx
c001063b:	ff d0                	call   eax
c001063d:	83 c4 10             	add    esp,0x10
c0010640:	e8 59 fe ff ff       	call   c001049e <VgaText::updateDiskUsage()>
c0010645:	83 c4 58             	add    esp,0x58
c0010648:	5b                   	pop    ebx
c0010649:	c3                   	ret    

c001064a <VgaText::setTitleTextColour(VgaColour)>:
c001064a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001064e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010652:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010658:	eb aa                	jmp    c0010604 <VgaText::updateTitle()>

c001065a <VgaText::setTitleColour(VgaColour)>:
c001065a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001065e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010662:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010668:	eb 9a                	jmp    c0010604 <VgaText::updateTitle()>

c001066a <VgaText::setTitle(char*)>:
c001066a:	53                   	push   ebx
c001066b:	83 ec 10             	sub    esp,0x10
c001066e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010676:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c001067c:	50                   	push   eax
c001067d:	e8 9a 00 ff ff       	call   c000071c <strcpy>
c0010682:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010686:	83 c4 18             	add    esp,0x18
c0010689:	5b                   	pop    ebx
c001068a:	e9 75 ff ff ff       	jmp    c0010604 <VgaText::updateTitle()>
c001068f:	90                   	nop

c0010690 <VgaText::decrementCursor(bool)>:
c0010690:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010694:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010698:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c001069e:	85 c0                	test   eax,eax
c00106a0:	74 07                	je     c00106a9 <VgaText::decrementCursor(bool)+0x19>
c00106a2:	48                   	dec    eax
c00106a3:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c00106a9:	84 c9                	test   cl,cl
c00106ab:	74 09                	je     c00106b6 <VgaText::decrementCursor(bool)+0x26>
c00106ad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00106b1:	e9 64 fa ff ff       	jmp    c001011a <VgaText::updateCursor()>
c00106b6:	c3                   	ret    
c00106b7:	90                   	nop

c00106b8 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00106b8:	53                   	push   ebx
c00106b9:	83 ec 08             	sub    esp,0x8
c00106bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00106c0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00106c8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00106cc:	3c 07                	cmp    al,0x7
c00106ce:	75 2a                	jne    c00106fa <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c00106d0:	a1 ac ac 02 c0       	mov    eax,ds:0xc002acac
c00106d5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00106dd:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00106e5:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00106ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00106f1:	83 c4 08             	add    esp,0x8
c00106f4:	5b                   	pop    ebx
c00106f5:	e9 3a 2d 00 00       	jmp    c0013434 <Buzzer::beep(int, int, bool)>
c00106fa:	3c 0d                	cmp    al,0xd
c00106fc:	75 0c                	jne    c001070a <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c00106fe:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010708:	eb 3b                	jmp    c0010745 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c001070a:	3c 0a                	cmp    al,0xa
c001070c:	75 40                	jne    c001074e <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c001070e:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010714:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001071e:	8d 50 01             	lea    edx,[eax+0x1]
c0010721:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010727:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001072d:	75 12                	jne    c0010741 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c001072f:	83 ec 0c             	sub    esp,0xc
c0010732:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010738:	53                   	push   ebx
c0010739:	e8 2a fb ff ff       	call   c0010268 <VgaText::scrollScreen()>
c001073e:	83 c4 10             	add    esp,0x10
c0010741:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010745:	83 c4 08             	add    esp,0x8
c0010748:	5b                   	pop    ebx
c0010749:	e9 cc f9 ff ff       	jmp    c001011a <VgaText::updateCursor()>
c001074e:	3c 08                	cmp    al,0x8
c0010750:	75 31                	jne    c0010783 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010752:	50                   	push   eax
c0010753:	50                   	push   eax
c0010754:	6a 01                	push   0x1
c0010756:	53                   	push   ebx
c0010757:	e8 34 ff ff ff       	call   c0010690 <VgaText::decrementCursor(bool)>
c001075c:	5a                   	pop    edx
c001075d:	59                   	pop    ecx
c001075e:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010764:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c001076a:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010770:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010776:	6a 20                	push   0x20
c0010778:	53                   	push   ebx
c0010779:	e8 90 fb ff ff       	call   c001030e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001077e:	83 c4 28             	add    esp,0x28
c0010781:	5b                   	pop    ebx
c0010782:	c3                   	ret    
c0010783:	83 ec 08             	sub    esp,0x8
c0010786:	0f be c0             	movsx  eax,al
c0010789:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c001078f:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010795:	51                   	push   ecx
c0010796:	52                   	push   edx
c0010797:	50                   	push   eax
c0010798:	53                   	push   ebx
c0010799:	e8 70 fb ff ff       	call   c001030e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001079e:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00107a2:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00107aa:	83 c4 28             	add    esp,0x28
c00107ad:	5b                   	pop    ebx
c00107ae:	e9 29 fc ff ff       	jmp    c00103dc <VgaText::incrementCursor(bool)>
c00107b3:	90                   	nop

c00107b4 <VgaText::isShowingCursor()>:
c00107b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107b8:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c00107be:	c3                   	ret    
c00107bf:	90                   	nop

c00107c0 <VgaText::isBlinkDisabled()>:
c00107c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107c4:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c00107ca:	83 f0 01             	xor    eax,0x1
c00107cd:	c3                   	ret    

c00107ce <VgaText::setCursorHeight(int)>:
c00107ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107d6:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c00107dc:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c00107e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00107e7:	e9 48 f9 ff ff       	jmp    c0010134 <VgaText::showCursor(bool)>

c00107ec <VgaText::getCursorHeight()>:
c00107ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107f0:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c00107f6:	c3                   	ret    

c00107f7 <setActiveTerminal(VgaText*)>:
c00107f7:	53                   	push   ebx
c00107f8:	83 ec 08             	sub    esp,0x8
c00107fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107ff:	85 db                	test   ebx,ebx
c0010801:	75 11                	jne    c0010814 <setActiveTerminal(VgaText*)+0x1d>
c0010803:	c7 44 24 10 ec 72 02 c0 	mov    DWORD PTR [esp+0x10],0xc00272ec
c001080b:	83 c4 08             	add    esp,0x8
c001080e:	5b                   	pop    ebx
c001080f:	e9 e5 85 00 00       	jmp    c0018df9 <Krnl::panic(char const*)>
c0010814:	50                   	push   eax
c0010815:	50                   	push   eax
c0010816:	53                   	push   ebx
c0010817:	68 fa 72 02 c0       	push   0xc00272fa
c001081c:	e8 14 1e 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0010821:	a1 04 ac 02 c0       	mov    eax,ds:0xc002ac04
c0010826:	83 c4 10             	add    esp,0x10
c0010829:	85 c0                	test   eax,eax
c001082b:	74 0c                	je     c0010839 <setActiveTerminal(VgaText*)+0x42>
c001082d:	83 ec 0c             	sub    esp,0xc
c0010830:	50                   	push   eax
c0010831:	e8 e4 f8 ff ff       	call   c001011a <VgaText::updateCursor()>
c0010836:	83 c4 10             	add    esp,0x10
c0010839:	89 1d 04 ac 02 c0    	mov    DWORD PTR ds:0xc002ac04,ebx
c001083f:	51                   	push   ecx
c0010840:	51                   	push   ecx
c0010841:	53                   	push   ebx
c0010842:	68 12 73 02 c0       	push   0xc0027312
c0010847:	e8 e9 1d 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001084c:	83 c4 0c             	add    esp,0xc
c001084f:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010855:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c001085b:	53                   	push   ebx
c001085c:	e8 25 fb ff ff       	call   c0010386 <VgaText::setCursor(int, int)>
c0010861:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010864:	e8 57 ff ff ff       	call   c00107c0 <VgaText::isBlinkDisabled()>
c0010869:	5a                   	pop    edx
c001086a:	0f b6 c0             	movzx  eax,al
c001086d:	59                   	pop    ecx
c001086e:	50                   	push   eax
c001086f:	53                   	push   ebx
c0010870:	e8 cf f8 ff ff       	call   c0010144 <VgaText::disableBlink(bool)>
c0010875:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010878:	e8 6f ff ff ff       	call   c00107ec <VgaText::getCursorHeight()>
c001087d:	5a                   	pop    edx
c001087e:	59                   	pop    ecx
c001087f:	50                   	push   eax
c0010880:	53                   	push   ebx
c0010881:	e8 48 ff ff ff       	call   c00107ce <VgaText::setCursorHeight(int)>
c0010886:	83 c4 10             	add    esp,0x10
c0010889:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010890:	75 0a                	jne    c001089c <setActiveTerminal(VgaText*)+0xa5>
c0010892:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c001089c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00108a0:	83 c4 08             	add    esp,0x8
c00108a3:	5b                   	pop    ebx
c00108a4:	e9 1d f8 ff ff       	jmp    c00100c6 <VgaText::load()>

c00108a9 <doTerminalCycle()>:
c00108a9:	83 ec 18             	sub    esp,0x18
c00108ac:	a1 00 ac 02 c0       	mov    eax,ds:0xc002ac00
c00108b1:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c00108b7:	50                   	push   eax
c00108b8:	a3 00 ac 02 c0       	mov    ds:0xc002ac00,eax
c00108bd:	e8 35 ff ff ff       	call   c00107f7 <setActiveTerminal(VgaText*)>
c00108c2:	83 c4 1c             	add    esp,0x1c
c00108c5:	c3                   	ret    

c00108c6 <VgaText::doUpdate()>:
c00108c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108ca:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c00108d0:	85 c0                	test   eax,eax
c00108d2:	74 02                	je     c00108d6 <VgaText::doUpdate()+0x10>
c00108d4:	ff e0                	jmp    eax
c00108d6:	c3                   	ret    
c00108d7:	90                   	nop

c00108d8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00108d8:	55                   	push   ebp
c00108d9:	57                   	push   edi
c00108da:	56                   	push   esi
c00108db:	53                   	push   ebx
c00108dc:	83 ec 1c             	sub    esp,0x1c
c00108df:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00108e3:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00108e8:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c00108ef:	8d 7d 0c             	lea    edi,[ebp+0xc]
c00108f2:	50                   	push   eax
c00108f3:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00108f8:	50                   	push   eax
c00108f9:	e8 58 f9 ff ff       	call   c0010256 <VgaText::combineColours(unsigned char, unsigned char)>
c00108fe:	59                   	pop    ecx
c00108ff:	0f b6 c0             	movzx  eax,al
c0010902:	5b                   	pop    ebx
c0010903:	31 c9                	xor    ecx,ecx
c0010905:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c001090d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010911:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010917:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001091b:	0f b7 db             	movzx  ebx,bx
c001091e:	01 db                	add    ebx,ebx
c0010920:	01 fb                	add    ebx,edi
c0010922:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010925:	84 c0                	test   al,al
c0010927:	0f 84 38 01 00 00    	je     c0010a65 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c001092d:	3c 0d                	cmp    al,0xd
c001092f:	75 0f                	jne    c0010940 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010931:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c001093b:	e9 1f 01 00 00       	jmp    c0010a5f <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010940:	3c 0a                	cmp    al,0xa
c0010942:	75 5b                	jne    c001099f <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010944:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c001094a:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010954:	8d 48 01             	lea    ecx,[eax+0x1]
c0010957:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c001095d:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010963:	75 12                	jne    c0010977 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010965:	83 ec 0c             	sub    esp,0xc
c0010968:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c001096e:	55                   	push   ebp
c001096f:	e8 f4 f8 ff ff       	call   c0010268 <VgaText::scrollScreen()>
c0010974:	83 c4 10             	add    esp,0x10
c0010977:	83 ec 0c             	sub    esp,0xc
c001097a:	55                   	push   ebp
c001097b:	e8 9a f7 ff ff       	call   c001011a <VgaText::updateCursor()>
c0010980:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010988:	83 c4 10             	add    esp,0x10
c001098b:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010991:	31 c9                	xor    ecx,ecx
c0010993:	0f b7 db             	movzx  ebx,bx
c0010996:	01 db                	add    ebx,ebx
c0010998:	01 fb                	add    ebx,edi
c001099a:	e9 c0 00 00 00       	jmp    c0010a5f <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c001099f:	3c 08                	cmp    al,0x8
c00109a1:	75 4e                	jne    c00109f1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c00109a3:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00109a7:	53                   	push   ebx
c00109a8:	53                   	push   ebx
c00109a9:	6a 01                	push   0x1
c00109ab:	55                   	push   ebp
c00109ac:	e8 df fc ff ff       	call   c0010690 <VgaText::decrementCursor(bool)>
c00109b1:	58                   	pop    eax
c00109b2:	5a                   	pop    edx
c00109b3:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c00109b9:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c00109bf:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c00109c5:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c00109cb:	6a 20                	push   0x20
c00109cd:	55                   	push   ebp
c00109ce:	e8 3b f9 ff ff       	call   c001030e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00109d3:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00109db:	83 c4 20             	add    esp,0x20
c00109de:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c00109e4:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00109e8:	0f b7 db             	movzx  ebx,bx
c00109eb:	01 db                	add    ebx,ebx
c00109ed:	01 fb                	add    ebx,edi
c00109ef:	eb 6e                	jmp    c0010a5f <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00109f1:	51                   	push   ecx
c00109f2:	51                   	push   ecx
c00109f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00109f7:	50                   	push   eax
c00109f8:	e8 ff f8 ff ff       	call   c00102fc <VgaText::combineCharAndColour(char, unsigned char)>
c00109fd:	83 c4 10             	add    esp,0x10
c0010a00:	66 89 03             	mov    WORD PTR [ebx],ax
c0010a03:	39 2d 04 ac 02 c0    	cmp    DWORD PTR ds:0xc002ac04,ebp
c0010a09:	75 2a                	jne    c0010a35 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010a0b:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010a11:	85 c0                	test   eax,eax
c0010a13:	74 20                	je     c0010a35 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010a15:	52                   	push   edx
c0010a16:	52                   	push   edx
c0010a17:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010a1d:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010a23:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010a27:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010a2b:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010a2e:	51                   	push   ecx
c0010a2f:	55                   	push   ebp
c0010a30:	ff d0                	call   eax
c0010a32:	83 c4 20             	add    esp,0x20
c0010a35:	83 c3 02             	add    ebx,0x2
c0010a38:	50                   	push   eax
c0010a39:	50                   	push   eax
c0010a3a:	6a 00                	push   0x0
c0010a3c:	55                   	push   ebp
c0010a3d:	e8 9a f9 ff ff       	call   c00103dc <VgaText::incrementCursor(bool)>
c0010a42:	83 c4 10             	add    esp,0x10
c0010a45:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010a4c:	75 0f                	jne    c0010a5d <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010a4e:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010a56:	0f b7 db             	movzx  ebx,bx
c0010a59:	01 db                	add    ebx,ebx
c0010a5b:	01 fb                	add    ebx,edi
c0010a5d:	b1 01                	mov    cl,0x1
c0010a5f:	46                   	inc    esi
c0010a60:	e9 bd fe ff ff       	jmp    c0010922 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010a65:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010a69:	83 ec 0c             	sub    esp,0xc
c0010a6c:	55                   	push   ebp
c0010a6d:	e8 a8 f6 ff ff       	call   c001011a <VgaText::updateCursor()>
c0010a72:	83 c4 10             	add    esp,0x10
c0010a75:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010a79:	84 c9                	test   cl,cl
c0010a7b:	74 0c                	je     c0010a89 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010a7d:	83 ec 0c             	sub    esp,0xc
c0010a80:	55                   	push   ebp
c0010a81:	e8 40 fe ff ff       	call   c00108c6 <VgaText::doUpdate()>
c0010a86:	83 c4 10             	add    esp,0x10
c0010a89:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010a90:	83 c4 1c             	add    esp,0x1c
c0010a93:	5b                   	pop    ebx
c0010a94:	5e                   	pop    esi
c0010a95:	5f                   	pop    edi
c0010a96:	5d                   	pop    ebp
c0010a97:	c3                   	ret    

c0010a98 <VgaText::clearScreen()>:
c0010a98:	57                   	push   edi
c0010a99:	56                   	push   esi
c0010a9a:	31 f6                	xor    esi,esi
c0010a9c:	53                   	push   ebx
c0010a9d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010aa1:	52                   	push   edx
c0010aa2:	6a 00                	push   0x0
c0010aa4:	6a 00                	push   0x0
c0010aa6:	53                   	push   ebx
c0010aa7:	e8 da f8 ff ff       	call   c0010386 <VgaText::setCursor(int, int)>
c0010aac:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010ab3:	83 c4 10             	add    esp,0x10
c0010ab6:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010abc:	7e 26                	jle    c0010ae4 <VgaText::clearScreen()+0x4c>
c0010abe:	31 ff                	xor    edi,edi
c0010ac0:	50                   	push   eax
c0010ac1:	50                   	push   eax
c0010ac2:	56                   	push   esi
c0010ac3:	57                   	push   edi
c0010ac4:	47                   	inc    edi
c0010ac5:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010acb:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010ad1:	6a 20                	push   0x20
c0010ad3:	53                   	push   ebx
c0010ad4:	e8 35 f8 ff ff       	call   c001030e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ad9:	83 c4 20             	add    esp,0x20
c0010adc:	83 ff 50             	cmp    edi,0x50
c0010adf:	75 df                	jne    c0010ac0 <VgaText::clearScreen()+0x28>
c0010ae1:	46                   	inc    esi
c0010ae2:	eb d2                	jmp    c0010ab6 <VgaText::clearScreen()+0x1e>
c0010ae4:	83 ec 0c             	sub    esp,0xc
c0010ae7:	53                   	push   ebx
c0010ae8:	e8 d9 fd ff ff       	call   c00108c6 <VgaText::doUpdate()>
c0010aed:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010af4:	83 c4 10             	add    esp,0x10
c0010af7:	5b                   	pop    ebx
c0010af8:	5e                   	pop    esi
c0010af9:	5f                   	pop    edi
c0010afa:	c3                   	ret    
c0010afb:	90                   	nop

c0010afc <VgaText::putchar(char)>:
c0010afc:	56                   	push   esi
c0010afd:	53                   	push   ebx
c0010afe:	83 ec 14             	sub    esp,0x14
c0010b01:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010b05:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010b09:	3c 5b                	cmp    al,0x5b
c0010b0b:	75 21                	jne    c0010b2e <VgaText::putchar(char)+0x32>
c0010b0d:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010b14:	74 28                	je     c0010b3e <VgaText::putchar(char)+0x42>
c0010b16:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010b1f:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010b29:	e9 e2 00 00 00       	jmp    c0010c10 <VgaText::putchar(char)+0x114>
c0010b2e:	3c 1b                	cmp    al,0x1b
c0010b30:	75 0c                	jne    c0010b3e <VgaText::putchar(char)+0x42>
c0010b32:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010b39:	e9 d2 00 00 00       	jmp    c0010c10 <VgaText::putchar(char)+0x114>
c0010b3e:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010b44:	84 c9                	test   cl,cl
c0010b46:	0f 84 ab 00 00 00    	je     c0010bf7 <VgaText::putchar(char)+0xfb>
c0010b4c:	8d 50 c0             	lea    edx,[eax-0x40]
c0010b4f:	80 fa 3e             	cmp    dl,0x3e
c0010b52:	0f 87 82 00 00 00    	ja     c0010bda <VgaText::putchar(char)+0xde>
c0010b58:	3c 6d                	cmp    al,0x6d
c0010b5a:	75 4d                	jne    c0010ba9 <VgaText::putchar(char)+0xad>
c0010b5c:	31 f6                	xor    esi,esi
c0010b5e:	31 d2                	xor    edx,edx
c0010b60:	31 c0                	xor    eax,eax
c0010b62:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010b68:	7e 30                	jle    c0010b9a <VgaText::putchar(char)+0x9e>
c0010b6a:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010b72:	80 fa 3b             	cmp    dl,0x3b
c0010b75:	75 17                	jne    c0010b8e <VgaText::putchar(char)+0x92>
c0010b77:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010b7b:	50                   	push   eax
c0010b7c:	53                   	push   ebx
c0010b7d:	e8 fc f5 ff ff       	call   c001017e <VgaText::doANSI_SGR(int)>
c0010b82:	59                   	pop    ecx
c0010b83:	31 d2                	xor    edx,edx
c0010b85:	58                   	pop    eax
c0010b86:	31 c0                	xor    eax,eax
c0010b88:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010b8c:	eb 09                	jmp    c0010b97 <VgaText::putchar(char)+0x9b>
c0010b8e:	6b c0 0a             	imul   eax,eax,0xa
c0010b91:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010b95:	88 ca                	mov    dl,cl
c0010b97:	46                   	inc    esi
c0010b98:	eb c8                	jmp    c0010b62 <VgaText::putchar(char)+0x66>
c0010b9a:	84 d2                	test   dl,dl
c0010b9c:	74 31                	je     c0010bcf <VgaText::putchar(char)+0xd3>
c0010b9e:	50                   	push   eax
c0010b9f:	53                   	push   ebx
c0010ba0:	e8 d9 f5 ff ff       	call   c001017e <VgaText::doANSI_SGR(int)>
c0010ba5:	58                   	pop    eax
c0010ba6:	5a                   	pop    edx
c0010ba7:	eb 26                	jmp    c0010bcf <VgaText::putchar(char)+0xd3>
c0010ba9:	3c 4a                	cmp    al,0x4a
c0010bab:	75 22                	jne    c0010bcf <VgaText::putchar(char)+0xd3>
c0010bad:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010bb4:	75 19                	jne    c0010bcf <VgaText::putchar(char)+0xd3>
c0010bb6:	83 ec 0c             	sub    esp,0xc
c0010bb9:	53                   	push   ebx
c0010bba:	e8 d9 fe ff ff       	call   c0010a98 <VgaText::clearScreen()>
c0010bbf:	83 c4 0c             	add    esp,0xc
c0010bc2:	6a 00                	push   0x0
c0010bc4:	6a 00                	push   0x0
c0010bc6:	53                   	push   ebx
c0010bc7:	e8 ba f7 ff ff       	call   c0010386 <VgaText::setCursor(int, int)>
c0010bcc:	83 c4 10             	add    esp,0x10
c0010bcf:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010bd8:	eb 36                	jmp    c0010c10 <VgaText::putchar(char)+0x114>
c0010bda:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010be0:	83 fa 0e             	cmp    edx,0xe
c0010be3:	7f 2b                	jg     c0010c10 <VgaText::putchar(char)+0x114>
c0010be5:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010be8:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010bee:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010bf5:	eb 19                	jmp    c0010c10 <VgaText::putchar(char)+0x114>
c0010bf7:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010bfd:	0f be c0             	movsx  eax,al
c0010c00:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c06:	50                   	push   eax
c0010c07:	53                   	push   ebx
c0010c08:	e8 ab fa ff ff       	call   c00106b8 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010c0d:	83 c4 10             	add    esp,0x10
c0010c10:	83 c4 14             	add    esp,0x14
c0010c13:	5b                   	pop    ebx
c0010c14:	5e                   	pop    esi
c0010c15:	c3                   	ret    

c0010c16 <VgaText::puts(char const*)>:
c0010c16:	53                   	push   ebx
c0010c17:	83 ec 08             	sub    esp,0x8
c0010c1a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c1e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010c21:	84 c0                	test   al,al
c0010c23:	74 12                	je     c0010c37 <VgaText::puts(char const*)+0x21>
c0010c25:	43                   	inc    ebx
c0010c26:	51                   	push   ecx
c0010c27:	51                   	push   ecx
c0010c28:	50                   	push   eax
c0010c29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c2d:	e8 ca fe ff ff       	call   c0010afc <VgaText::putchar(char)>
c0010c32:	83 c4 10             	add    esp,0x10
c0010c35:	eb e7                	jmp    c0010c1e <VgaText::puts(char const*)+0x8>
c0010c37:	83 c4 08             	add    esp,0x8
c0010c3a:	5b                   	pop    ebx
c0010c3b:	c3                   	ret    

c0010c3c <VgaText::putx(unsigned int)>:
c0010c3c:	57                   	push   edi
c0010c3d:	b9 11 00 00 00       	mov    ecx,0x11
c0010c42:	56                   	push   esi
c0010c43:	be 2e 73 02 c0       	mov    esi,0xc002732e
c0010c48:	53                   	push   ebx
c0010c49:	83 ec 20             	sub    esp,0x20
c0010c4c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010c50:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010c54:	fc                   	cld    
c0010c55:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c57:	be 08 00 00 00       	mov    esi,0x8
c0010c5c:	50                   	push   eax
c0010c5d:	50                   	push   eax
c0010c5e:	89 d8                	mov    eax,ebx
c0010c60:	c1 e3 04             	shl    ebx,0x4
c0010c63:	c1 e8 1c             	shr    eax,0x1c
c0010c66:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010c6b:	50                   	push   eax
c0010c6c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010c70:	e8 87 fe ff ff       	call   c0010afc <VgaText::putchar(char)>
c0010c75:	83 c4 10             	add    esp,0x10
c0010c78:	4e                   	dec    esi
c0010c79:	75 e1                	jne    c0010c5c <VgaText::putx(unsigned int)+0x20>
c0010c7b:	83 c4 20             	add    esp,0x20
c0010c7e:	5b                   	pop    ebx
c0010c7f:	5e                   	pop    esi
c0010c80:	5f                   	pop    edi
c0010c81:	c3                   	ret    

c0010c82 <VgaText::VgaText(char const*)>:
c0010c82:	57                   	push   edi
c0010c83:	56                   	push   esi
c0010c84:	53                   	push   ebx
c0010c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c89:	83 ec 08             	sub    esp,0x8
c0010c8c:	6a 00                	push   0x0
c0010c8e:	50                   	push   eax
c0010c8f:	e8 6e 05 00 00       	call   c0011202 <UnixFile::UnixFile(int)>
c0010c94:	83 c4 10             	add    esp,0x10
c0010c97:	ba 94 73 02 c0       	mov    edx,0xc0027394
c0010c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ca0:	89 10                	mov    DWORD PTR [eax],edx
c0010ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ca6:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010cb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cb4:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010cbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cc2:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010cc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ccd:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010cd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cd8:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ce6:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010cf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cf4:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010cfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cff:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d0a:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010d10:	bb e0 ab 02 c0       	mov    ebx,0xc002abe0
c0010d15:	b8 08 00 00 00       	mov    eax,0x8
c0010d1a:	fc                   	cld    
c0010d1b:	89 d7                	mov    edi,edx
c0010d1d:	89 de                	mov    esi,ebx
c0010d1f:	89 c1                	mov    ecx,eax
c0010d21:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010d23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d27:	05 1e 10 00 00       	add    eax,0x101e
c0010d2c:	83 ec 08             	sub    esp,0x8
c0010d2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d33:	50                   	push   eax
c0010d34:	e8 e3 f9 fe ff       	call   c000071c <strcpy>
c0010d39:	83 c4 10             	add    esp,0x10
c0010d3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d40:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010d4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d4e:	83 c0 0c             	add    eax,0xc
c0010d51:	83 ec 04             	sub    esp,0x4
c0010d54:	68 00 0f 00 00       	push   0xf00
c0010d59:	6a 00                	push   0x0
c0010d5b:	50                   	push   eax
c0010d5c:	e8 1c f9 fe ff       	call   c000067d <memset>
c0010d61:	83 c4 10             	add    esp,0x10
c0010d64:	83 ec 04             	sub    esp,0x4
c0010d67:	6a 00                	push   0x0
c0010d69:	6a 07                	push   0x7
c0010d6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d6f:	e8 c2 f4 ff ff       	call   c0010236 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010d74:	83 c4 10             	add    esp,0x10
c0010d77:	83 ec 08             	sub    esp,0x8
c0010d7a:	6a 02                	push   0x2
c0010d7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d80:	e8 49 fa ff ff       	call   c00107ce <VgaText::setCursorHeight(int)>
c0010d85:	83 c4 10             	add    esp,0x10
c0010d88:	83 ec 04             	sub    esp,0x4
c0010d8b:	6a 00                	push   0x0
c0010d8d:	6a 00                	push   0x0
c0010d8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d93:	e8 ee f5 ff ff       	call   c0010386 <VgaText::setCursor(int, int)>
c0010d98:	83 c4 10             	add    esp,0x10
c0010d9b:	83 ec 08             	sub    esp,0x8
c0010d9e:	6a 01                	push   0x1
c0010da0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010da4:	e8 8b f3 ff ff       	call   c0010134 <VgaText::showCursor(bool)>
c0010da9:	83 c4 10             	add    esp,0x10
c0010dac:	83 ec 08             	sub    esp,0x8
c0010daf:	6a 01                	push   0x1
c0010db1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010db5:	e8 8a f3 ff ff       	call   c0010144 <VgaText::disableBlink(bool)>
c0010dba:	83 c4 10             	add    esp,0x10
c0010dbd:	83 ec 0c             	sub    esp,0xc
c0010dc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dc4:	e8 cf fc ff ff       	call   c0010a98 <VgaText::clearScreen()>
c0010dc9:	83 c4 10             	add    esp,0x10
c0010dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dd0:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010dd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ddb:	05 9e 10 00 00       	add    eax,0x109e
c0010de0:	83 ec 04             	sub    esp,0x4
c0010de3:	68 96 00 00 00       	push   0x96
c0010de8:	6a 00                	push   0x0
c0010dea:	50                   	push   eax
c0010deb:	e8 8d f8 fe ff       	call   c000067d <memset>
c0010df0:	83 c4 10             	add    esp,0x10
c0010df3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010df7:	05 34 11 00 00       	add    eax,0x1134
c0010dfc:	83 ec 04             	sub    esp,0x4
c0010dff:	68 2c 01 00 00       	push   0x12c
c0010e04:	6a 00                	push   0x0
c0010e06:	50                   	push   eax
c0010e07:	e8 71 f8 fe ff       	call   c000067d <memset>
c0010e0c:	83 c4 10             	add    esp,0x10
c0010e0f:	90                   	nop
c0010e10:	5b                   	pop    ebx
c0010e11:	5e                   	pop    esi
c0010e12:	5f                   	pop    edi
c0010e13:	c3                   	ret    

c0010e14 <VgaText::receiveKey(unsigned char)>:
c0010e14:	55                   	push   ebp
c0010e15:	57                   	push   edi
c0010e16:	56                   	push   esi
c0010e17:	53                   	push   ebx
c0010e18:	83 ec 1c             	sub    esp,0x1c
c0010e1b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010e1f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e23:	84 db                	test   bl,bl
c0010e25:	0f 84 c9 00 00 00    	je     c0010ef4 <VgaText::receiveKey(unsigned char)+0xe0>
c0010e2b:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010e31:	80 fb 08             	cmp    bl,0x8
c0010e34:	75 2c                	jne    c0010e62 <VgaText::receiveKey(unsigned char)+0x4e>
c0010e36:	83 ec 0c             	sub    esp,0xc
c0010e39:	57                   	push   edi
c0010e3a:	e8 5b f8 fe ff       	call   c000069a <strlen>
c0010e3f:	83 c4 10             	add    esp,0x10
c0010e42:	85 c0                	test   eax,eax
c0010e44:	74 41                	je     c0010e87 <VgaText::receiveKey(unsigned char)+0x73>
c0010e46:	50                   	push   eax
c0010e47:	50                   	push   eax
c0010e48:	6a 08                	push   0x8
c0010e4a:	56                   	push   esi
c0010e4b:	e8 ac fc ff ff       	call   c0010afc <VgaText::putchar(char)>
c0010e50:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010e53:	e8 42 f8 fe ff       	call   c000069a <strlen>
c0010e58:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010e60:	eb 22                	jmp    c0010e84 <VgaText::receiveKey(unsigned char)+0x70>
c0010e62:	0f be c3             	movsx  eax,bl
c0010e65:	52                   	push   edx
c0010e66:	52                   	push   edx
c0010e67:	50                   	push   eax
c0010e68:	56                   	push   esi
c0010e69:	e8 8e fc ff ff       	call   c0010afc <VgaText::putchar(char)>
c0010e6e:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010e72:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010e77:	59                   	pop    ecx
c0010e78:	5d                   	pop    ebp
c0010e79:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010e7d:	50                   	push   eax
c0010e7e:	57                   	push   edi
c0010e7f:	e8 4f f9 fe ff       	call   c00007d3 <strcat>
c0010e84:	83 c4 10             	add    esp,0x10
c0010e87:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010e8e:	75 05                	jne    c0010e95 <VgaText::receiveKey(unsigned char)+0x81>
c0010e90:	80 fb 0a             	cmp    bl,0xa
c0010e93:	75 53                	jne    c0010ee8 <VgaText::receiveKey(unsigned char)+0xd4>
c0010e95:	83 ec 0c             	sub    esp,0xc
c0010e98:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010e9e:	53                   	push   ebx
c0010e9f:	e8 f6 f7 fe ff       	call   c000069a <strlen>
c0010ea4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010ea7:	89 c5                	mov    ebp,eax
c0010ea9:	e8 ec f7 fe ff       	call   c000069a <strlen>
c0010eae:	83 c4 10             	add    esp,0x10
c0010eb1:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010eb5:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010eba:	76 10                	jbe    c0010ecc <VgaText::receiveKey(unsigned char)+0xb8>
c0010ebc:	83 ec 0c             	sub    esp,0xc
c0010ebf:	68 3f 73 02 c0       	push   0xc002733f
c0010ec4:	e8 30 7f 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c0010ec9:	83 c4 10             	add    esp,0x10
c0010ecc:	50                   	push   eax
c0010ecd:	50                   	push   eax
c0010ece:	57                   	push   edi
c0010ecf:	53                   	push   ebx
c0010ed0:	e8 fe f8 fe ff       	call   c00007d3 <strcat>
c0010ed5:	83 c4 0c             	add    esp,0xc
c0010ed8:	68 96 00 00 00       	push   0x96
c0010edd:	6a 00                	push   0x0
c0010edf:	57                   	push   edi
c0010ee0:	e8 98 f7 fe ff       	call   c000067d <memset>
c0010ee5:	83 c4 10             	add    esp,0x10
c0010ee8:	83 ec 0c             	sub    esp,0xc
c0010eeb:	56                   	push   esi
c0010eec:	e8 d5 f9 ff ff       	call   c00108c6 <VgaText::doUpdate()>
c0010ef1:	83 c4 10             	add    esp,0x10
c0010ef4:	83 c4 1c             	add    esp,0x1c
c0010ef7:	5b                   	pop    ebx
c0010ef8:	5e                   	pop    esi
c0010ef9:	5f                   	pop    edi
c0010efa:	5d                   	pop    ebp
c0010efb:	c3                   	ret    

c0010efc <VgaText::write(unsigned long long, void*, int*)>:
c0010efc:	55                   	push   ebp
c0010efd:	57                   	push   edi
c0010efe:	56                   	push   esi
c0010eff:	53                   	push   ebx
c0010f00:	83 ec 0c             	sub    esp,0xc
c0010f03:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010f07:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010f0b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010f0f:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010f16:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010f19:	39 eb                	cmp    ebx,ebp
c0010f1b:	74 13                	je     c0010f30 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010f1d:	43                   	inc    ebx
c0010f1e:	50                   	push   eax
c0010f1f:	50                   	push   eax
c0010f20:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010f24:	50                   	push   eax
c0010f25:	56                   	push   esi
c0010f26:	e8 d1 fb ff ff       	call   c0010afc <VgaText::putchar(char)>
c0010f2b:	83 c4 10             	add    esp,0x10
c0010f2e:	eb e9                	jmp    c0010f19 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010f30:	83 ec 0c             	sub    esp,0xc
c0010f33:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010f3a:	56                   	push   esi
c0010f3b:	e8 86 f9 ff ff       	call   c00108c6 <VgaText::doUpdate()>
c0010f40:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010f44:	89 38                	mov    DWORD PTR [eax],edi
c0010f46:	83 c4 1c             	add    esp,0x1c
c0010f49:	31 c0                	xor    eax,eax
c0010f4b:	5b                   	pop    ebx
c0010f4c:	5e                   	pop    esi
c0010f4d:	5f                   	pop    edi
c0010f4e:	5d                   	pop    ebp
c0010f4f:	c3                   	ret    

c0010f50 <newTerminal(char*)>:
c0010f50:	83 ec 28             	sub    esp,0x28
c0010f53:	68 60 12 00 00       	push   0x1260
c0010f58:	e8 65 e5 ff ff       	call   c000f4c2 <malloc>
c0010f5d:	5a                   	pop    edx
c0010f5e:	59                   	pop    ecx
c0010f5f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010f63:	50                   	push   eax
c0010f64:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010f68:	e8 15 fd ff ff       	call   c0010c82 <VgaText::VgaText(char const*)>
c0010f6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f71:	83 c4 2c             	add    esp,0x2c
c0010f74:	c3                   	ret    
c0010f75:	90                   	nop

c0010f76 <TSS::TSS()>:
c0010f76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f7a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010f81:	90                   	nop
c0010f82:	c3                   	ret    
c0010f83:	90                   	nop

c0010f84 <TSS::setESP(unsigned long)>:
c0010f84:	55                   	push   ebp
c0010f85:	89 e5                	mov    ebp,esp
c0010f87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f8d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010f90:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f93:	90                   	nop
c0010f94:	5d                   	pop    ebp
c0010f95:	c3                   	ret    

c0010f96 <TSS::flush()>:
c0010f96:	55                   	push   ebp
c0010f97:	89 e5                	mov    ebp,esp
c0010f99:	83 ec 10             	sub    esp,0x10
c0010f9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010fa1:	83 c8 03             	or     eax,0x3
c0010fa4:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010fa8:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010fac:	66 89 d0             	mov    ax,dx
c0010faf:	0f 00 d8             	ltr    ax
c0010fb2:	90                   	nop
c0010fb3:	c9                   	leave  
c0010fb4:	c3                   	ret    
c0010fb5:	90                   	nop

c0010fb6 <TSS::setup(unsigned long, unsigned long)>:
c0010fb6:	55                   	push   ebp
c0010fb7:	89 e5                	mov    ebp,esp
c0010fb9:	83 ec 18             	sub    esp,0x18
c0010fbc:	83 ec 0c             	sub    esp,0xc
c0010fbf:	6a 68                	push   0x68
c0010fc1:	e8 fc e4 ff ff       	call   c000f4c2 <malloc>
c0010fc6:	83 c4 10             	add    esp,0x10
c0010fc9:	89 c2                	mov    edx,eax
c0010fcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fce:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fd7:	83 ec 04             	sub    esp,0x4
c0010fda:	6a 68                	push   0x68
c0010fdc:	6a 00                	push   0x0
c0010fde:	50                   	push   eax
c0010fdf:	e8 99 f6 fe ff       	call   c000067d <memset>
c0010fe4:	83 c4 10             	add    esp,0x10
c0010fe7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fed:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010ff3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ff6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ff9:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010fff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011002:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011005:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011008:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001100b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001100e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011011:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011017:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001101a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001101d:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011023:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011026:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011029:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c001102f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011032:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011035:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c001103b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001103e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011041:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001104a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001104d:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011053:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011056:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011059:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001105c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001105f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011062:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011065:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011068:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001106b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001106e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011071:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011078:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001107b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001107e:	0f 20 da             	mov    edx,cr3
c0011081:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011084:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011087:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c001108a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001108d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011090:	83 ec 08             	sub    esp,0x8
c0011093:	50                   	push   eax
c0011094:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011097:	50                   	push   eax
c0011098:	e8 03 dc ff ff       	call   c000eca0 <GDTEntry::setBase(unsigned int)>
c001109d:	83 c4 10             	add    esp,0x10
c00110a0:	83 ec 08             	sub    esp,0x8
c00110a3:	6a 68                	push   0x68
c00110a5:	8d 45 ec             	lea    eax,[ebp-0x14]
c00110a8:	50                   	push   eax
c00110a9:	e8 0e dc ff ff       	call   c000ecbc <GDTEntry::setLimit(unsigned int)>
c00110ae:	83 c4 10             	add    esp,0x10
c00110b1:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00110b5:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00110b8:	83 e0 0f             	and    eax,0xf
c00110bb:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00110be:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00110c1:	83 c8 40             	or     eax,0x40
c00110c4:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00110c7:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c00110cc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00110d2:	05 78 01 00 00       	add    eax,0x178
c00110d7:	83 ec 04             	sub    esp,0x4
c00110da:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00110dd:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00110e0:	50                   	push   eax
c00110e1:	e8 0a dc ff ff       	call   c000ecf0 <GDT::addEntry(GDTEntry)>
c00110e6:	83 c4 10             	add    esp,0x10
c00110e9:	89 c2                	mov    edx,eax
c00110eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110ee:	89 10                	mov    DWORD PTR [eax],edx
c00110f0:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c00110f5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00110fb:	05 78 01 00 00       	add    eax,0x178
c0011100:	83 ec 0c             	sub    esp,0xc
c0011103:	50                   	push   eax
c0011104:	e8 2b dc ff ff       	call   c000ed34 <GDT::flush()>
c0011109:	83 c4 10             	add    esp,0x10
c001110c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001110f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011111:	83 ec 08             	sub    esp,0x8
c0011114:	50                   	push   eax
c0011115:	68 a8 73 02 c0       	push   0xc00273a8
c001111a:	e8 16 15 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001111f:	83 c4 10             	add    esp,0x10
c0011122:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011125:	8b 00                	mov    eax,DWORD PTR [eax]
c0011127:	c9                   	leave  
c0011128:	c3                   	ret    
c0011129:	90                   	nop

c001112a <ReservedFilename::read(unsigned long long, void*, int*)>:
c001112a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001112e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011132:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011135:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001113a:	75 08                	jne    c0011144 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c001113c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011142:	eb 38                	jmp    c001117c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011144:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011149:	75 17                	jne    c0011162 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c001114b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011150:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011153:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011159:	8b 10                	mov    edx,DWORD PTR [eax]
c001115b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001115f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011162:	89 c1                	mov    ecx,eax
c0011164:	83 e1 fd             	and    ecx,0xfffffffd
c0011167:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c001116d:	74 cd                	je     c001113c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001116f:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011174:	83 e0 ef             	and    eax,0xffffffef
c0011177:	83 f8 08             	cmp    eax,0x8
c001117a:	76 c0                	jbe    c001113c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001117c:	31 c0                	xor    eax,eax
c001117e:	c3                   	ret    
c001117f:	90                   	nop

c0011180 <ReservedFilename::isAtty()>:
c0011180:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011184:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011187:	31 c0                	xor    eax,eax
c0011189:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001118f:	74 09                	je     c001119a <ReservedFilename::isAtty()+0x1a>
c0011191:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011197:	0f 94 c0             	sete   al
c001119a:	c3                   	ret    
c001119b:	90                   	nop

c001119c <ReservedFilename::write(unsigned long long, void*, int*)>:
c001119c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111a0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00111a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00111ab:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00111b0:	75 08                	jne    c00111ba <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00111b2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00111b8:	eb 3d                	jmp    c00111f7 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00111ba:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00111bf:	75 17                	jne    c00111d8 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00111c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111c6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00111c9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00111cf:	8b 10                	mov    edx,DWORD PTR [eax]
c00111d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00111d5:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00111d8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00111dd:	75 04                	jne    c00111e3 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00111df:	89 0a                	mov    DWORD PTR [edx],ecx
c00111e1:	eb 14                	jmp    c00111f7 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00111e3:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00111e8:	74 c8                	je     c00111b2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00111ea:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00111ef:	83 e0 ef             	and    eax,0xffffffef
c00111f2:	83 f8 08             	cmp    eax,0x8
c00111f5:	76 bb                	jbe    c00111b2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00111f7:	31 c0                	xor    eax,eax
c00111f9:	c3                   	ret    

c00111fa <UnixFile::getFileDescriptor()>:
c00111fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011201:	c3                   	ret    

c0011202 <UnixFile::UnixFile(int)>:
c0011202:	53                   	push   ebx
c0011203:	83 ec 28             	sub    esp,0x28
c0011206:	ba 94 74 02 c0       	mov    edx,0xc0027494
c001120b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001120f:	89 10                	mov    DWORD PTR [eax],edx
c0011211:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011219:	0f 8f 8c 01 00 00    	jg     c00113ab <UnixFile::UnixFile(int)+0x1a9>
c001121f:	a1 60 9b 02 c0       	mov    eax,ds:0xc0029b60
c0011224:	8d 50 01             	lea    edx,[eax+0x1]
c0011227:	89 15 60 9b 02 c0    	mov    DWORD PTR ds:0xc0029b60,edx
c001122d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011231:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011234:	83 ec 08             	sub    esp,0x8
c0011237:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001123b:	68 98 ac 02 c0       	push   0xc002ac98
c0011240:	e8 db 45 01 00       	call   c0025820 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011245:	83 c4 10             	add    esp,0x10
c0011248:	a0 94 ac 02 c0       	mov    al,ds:0xc002ac94
c001124d:	83 f0 01             	xor    eax,0x1
c0011250:	84 c0                	test   al,al
c0011252:	0f 84 54 01 00 00    	je     c00113ac <UnixFile::UnixFile(int)+0x1aa>
c0011258:	c6 05 94 ac 02 c0 01 	mov    BYTE PTR ds:0xc002ac94,0x1
c001125f:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011267:	83 ec 0c             	sub    esp,0xc
c001126a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001126e:	e8 4f e2 ff ff       	call   c000f4c2 <malloc>
c0011273:	83 c4 10             	add    esp,0x10
c0011276:	89 c3                	mov    ebx,eax
c0011278:	83 ec 08             	sub    esp,0x8
c001127b:	68 03 ff ff 0f       	push   0xfffff03
c0011280:	53                   	push   ebx
c0011281:	e8 2c 01 00 00       	call   c00113b2 <ReservedFilename::ReservedFilename(int)>
c0011286:	83 c4 10             	add    esp,0x10
c0011289:	89 1d 8c ac 02 c0    	mov    DWORD PTR ds:0xc002ac8c,ebx
c001128f:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011297:	83 ec 0c             	sub    esp,0xc
c001129a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001129e:	e8 1f e2 ff ff       	call   c000f4c2 <malloc>
c00112a3:	83 c4 10             	add    esp,0x10
c00112a6:	89 c3                	mov    ebx,eax
c00112a8:	83 ec 08             	sub    esp,0x8
c00112ab:	68 01 ff ff 0f       	push   0xfffff01
c00112b0:	53                   	push   ebx
c00112b1:	e8 fc 00 00 00       	call   c00113b2 <ReservedFilename::ReservedFilename(int)>
c00112b6:	83 c4 10             	add    esp,0x10
c00112b9:	89 1d 90 ac 02 c0    	mov    DWORD PTR ds:0xc002ac90,ebx
c00112bf:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00112c7:	83 ec 0c             	sub    esp,0xc
c00112ca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00112ce:	e8 ef e1 ff ff       	call   c000f4c2 <malloc>
c00112d3:	83 c4 10             	add    esp,0x10
c00112d6:	89 c3                	mov    ebx,eax
c00112d8:	83 ec 08             	sub    esp,0x8
c00112db:	68 00 ff ff 0f       	push   0xfffff00
c00112e0:	53                   	push   ebx
c00112e1:	e8 cc 00 00 00       	call   c00113b2 <ReservedFilename::ReservedFilename(int)>
c00112e6:	83 c4 10             	add    esp,0x10
c00112e9:	89 1d 84 ac 02 c0    	mov    DWORD PTR ds:0xc002ac84,ebx
c00112ef:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00112f7:	83 ec 0c             	sub    esp,0xc
c00112fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00112fe:	e8 bf e1 ff ff       	call   c000f4c2 <malloc>
c0011303:	83 c4 10             	add    esp,0x10
c0011306:	89 c3                	mov    ebx,eax
c0011308:	83 ec 08             	sub    esp,0x8
c001130b:	68 02 ff ff 0f       	push   0xfffff02
c0011310:	53                   	push   ebx
c0011311:	e8 9c 00 00 00       	call   c00113b2 <ReservedFilename::ReservedFilename(int)>
c0011316:	83 c4 10             	add    esp,0x10
c0011319:	89 1d 88 ac 02 c0    	mov    DWORD PTR ds:0xc002ac88,ebx
c001131f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011327:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c001132c:	7f 7e                	jg     c00113ac <UnixFile::UnixFile(int)+0x1aa>
c001132e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011336:	83 ec 0c             	sub    esp,0xc
c0011339:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001133d:	e8 80 e1 ff ff       	call   c000f4c2 <malloc>
c0011342:	83 c4 10             	add    esp,0x10
c0011345:	89 c3                	mov    ebx,eax
c0011347:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001134b:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011350:	83 ec 08             	sub    esp,0x8
c0011353:	50                   	push   eax
c0011354:	53                   	push   ebx
c0011355:	e8 58 00 00 00       	call   c00113b2 <ReservedFilename::ReservedFilename(int)>
c001135a:	83 c4 10             	add    esp,0x10
c001135d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011361:	89 1c 85 60 ac 02 c0 	mov    DWORD PTR [eax*4-0x3ffd53a0],ebx
c0011368:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011370:	83 ec 0c             	sub    esp,0xc
c0011373:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011377:	e8 46 e1 ff ff       	call   c000f4c2 <malloc>
c001137c:	83 c4 10             	add    esp,0x10
c001137f:	89 c3                	mov    ebx,eax
c0011381:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011385:	05 20 ff ff 0f       	add    eax,0xfffff20
c001138a:	83 ec 08             	sub    esp,0x8
c001138d:	50                   	push   eax
c001138e:	53                   	push   ebx
c001138f:	e8 1e 00 00 00       	call   c00113b2 <ReservedFilename::ReservedFilename(int)>
c0011394:	83 c4 10             	add    esp,0x10
c0011397:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001139b:	89 1c 85 20 ac 02 c0 	mov    DWORD PTR [eax*4-0x3ffd53e0],ebx
c00113a2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00113a6:	e9 7c ff ff ff       	jmp    c0011327 <UnixFile::UnixFile(int)+0x125>
c00113ab:	90                   	nop
c00113ac:	83 c4 28             	add    esp,0x28
c00113af:	5b                   	pop    ebx
c00113b0:	c3                   	ret    
c00113b1:	90                   	nop

c00113b2 <ReservedFilename::ReservedFilename(int)>:
c00113b2:	83 ec 0c             	sub    esp,0xc
c00113b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113b9:	83 ec 08             	sub    esp,0x8
c00113bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113c0:	50                   	push   eax
c00113c1:	e8 3c fe ff ff       	call   c0011202 <UnixFile::UnixFile(int)>
c00113c6:	83 c4 10             	add    esp,0x10
c00113c9:	ba b0 74 02 c0       	mov    edx,0xc00274b0
c00113ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113d2:	89 10                	mov    DWORD PTR [eax],edx
c00113d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00113dc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00113df:	90                   	nop
c00113e0:	83 c4 0c             	add    esp,0xc
c00113e3:	c3                   	ret    

c00113e4 <UnixFile::~UnixFile()>:
c00113e4:	83 ec 1c             	sub    esp,0x1c
c00113e7:	ba 94 74 02 c0       	mov    edx,0xc0027494
c00113ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00113f0:	89 10                	mov    DWORD PTR [eax],edx
c00113f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00113f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113f9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00113fe:	7f 73                	jg     c0011473 <UnixFile::~UnixFile()+0x8f>
c0011400:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011408:	83 ec 0c             	sub    esp,0xc
c001140b:	68 98 ac 02 c0       	push   0xc002ac98
c0011410:	e8 df 44 01 00       	call   c00258f4 <LinkedList<UnixFile>::getFirstElement()>
c0011415:	83 c4 10             	add    esp,0x10
c0011418:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001141c:	83 ec 0c             	sub    esp,0xc
c001141f:	68 98 ac 02 c0       	push   0xc002ac98
c0011424:	e8 d3 44 01 00       	call   c00258fc <LinkedList<UnixFile>::removeFirst()>
c0011429:	83 c4 10             	add    esp,0x10
c001142c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011430:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011434:	74 40                	je     c0011476 <UnixFile::~UnixFile()+0x92>
c0011436:	83 ec 08             	sub    esp,0x8
c0011439:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001143d:	68 98 ac 02 c0       	push   0xc002ac98
c0011442:	e8 d9 43 01 00       	call   c0025820 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011447:	83 c4 10             	add    esp,0x10
c001144a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001144e:	8d 50 01             	lea    edx,[eax+0x1]
c0011451:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011455:	3d 88 13 00 00       	cmp    eax,0x1388
c001145a:	0f 94 c0             	sete   al
c001145d:	84 c0                	test   al,al
c001145f:	74 a7                	je     c0011408 <UnixFile::~UnixFile()+0x24>
c0011461:	83 ec 0c             	sub    esp,0xc
c0011464:	68 6c 74 02 c0       	push   0xc002746c
c0011469:	e8 8b 79 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c001146e:	83 c4 10             	add    esp,0x10
c0011471:	eb 95                	jmp    c0011408 <UnixFile::~UnixFile()+0x24>
c0011473:	90                   	nop
c0011474:	eb 01                	jmp    c0011477 <UnixFile::~UnixFile()+0x93>
c0011476:	90                   	nop
c0011477:	90                   	nop
c0011478:	83 c4 1c             	add    esp,0x1c
c001147b:	c3                   	ret    

c001147c <UnixFile::~UnixFile()>:
c001147c:	83 ec 0c             	sub    esp,0xc
c001147f:	83 ec 0c             	sub    esp,0xc
c0011482:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011486:	e8 59 ff ff ff       	call   c00113e4 <UnixFile::~UnixFile()>
c001148b:	83 c4 10             	add    esp,0x10
c001148e:	83 ec 08             	sub    esp,0x8
c0011491:	6a 0c                	push   0xc
c0011493:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011497:	e8 b9 10 00 00       	call   c0012555 <operator delete(void*, unsigned long)>
c001149c:	83 c4 10             	add    esp,0x10
c001149f:	83 c4 0c             	add    esp,0xc
c00114a2:	c3                   	ret    
c00114a3:	90                   	nop

c00114a4 <ReservedFilename::~ReservedFilename()>:
c00114a4:	83 ec 0c             	sub    esp,0xc
c00114a7:	ba b0 74 02 c0       	mov    edx,0xc00274b0
c00114ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114b0:	89 10                	mov    DWORD PTR [eax],edx
c00114b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114b6:	83 ec 0c             	sub    esp,0xc
c00114b9:	50                   	push   eax
c00114ba:	e8 25 ff ff ff       	call   c00113e4 <UnixFile::~UnixFile()>
c00114bf:	83 c4 10             	add    esp,0x10
c00114c2:	90                   	nop
c00114c3:	83 c4 0c             	add    esp,0xc
c00114c6:	c3                   	ret    
c00114c7:	90                   	nop

c00114c8 <ReservedFilename::~ReservedFilename()>:
c00114c8:	83 ec 0c             	sub    esp,0xc
c00114cb:	83 ec 0c             	sub    esp,0xc
c00114ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114d2:	e8 cd ff ff ff       	call   c00114a4 <ReservedFilename::~ReservedFilename()>
c00114d7:	83 c4 10             	add    esp,0x10
c00114da:	83 ec 08             	sub    esp,0x8
c00114dd:	6a 0c                	push   0xc
c00114df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114e3:	e8 6d 10 00 00       	call   c0012555 <operator delete(void*, unsigned long)>
c00114e8:	83 c4 10             	add    esp,0x10
c00114eb:	83 c4 0c             	add    esp,0xc
c00114ee:	c3                   	ret    

c00114ef <getFromFileDescriptor(int)>:
c00114ef:	53                   	push   ebx
c00114f0:	83 ec 08             	sub    esp,0x8
c00114f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00114f7:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00114fd:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011503:	7f 2c                	jg     c0011531 <getFromFileDescriptor(int)+0x42>
c0011505:	83 ec 0c             	sub    esp,0xc
c0011508:	68 98 ac 02 c0       	push   0xc002ac98
c001150d:	e8 e2 43 01 00       	call   c00258f4 <LinkedList<UnixFile>::getFirstElement()>
c0011512:	83 c4 10             	add    esp,0x10
c0011515:	85 c0                	test   eax,eax
c0011517:	75 04                	jne    c001151d <getFromFileDescriptor(int)+0x2e>
c0011519:	31 c0                	xor    eax,eax
c001151b:	eb 6e                	jmp    c001158b <getFromFileDescriptor(int)+0x9c>
c001151d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011520:	74 69                	je     c001158b <getFromFileDescriptor(int)+0x9c>
c0011522:	52                   	push   edx
c0011523:	52                   	push   edx
c0011524:	50                   	push   eax
c0011525:	68 98 ac 02 c0       	push   0xc002ac98
c001152a:	e8 6f 44 01 00       	call   c002599e <LinkedList<UnixFile>::getNext(UnixFile*)>
c001152f:	eb e1                	jmp    c0011512 <getFromFileDescriptor(int)+0x23>
c0011531:	a1 8c ac 02 c0       	mov    eax,ds:0xc002ac8c
c0011536:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c001153c:	74 4d                	je     c001158b <getFromFileDescriptor(int)+0x9c>
c001153e:	a1 90 ac 02 c0       	mov    eax,ds:0xc002ac90
c0011543:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011549:	74 40                	je     c001158b <getFromFileDescriptor(int)+0x9c>
c001154b:	a1 88 ac 02 c0       	mov    eax,ds:0xc002ac88
c0011550:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011556:	74 33                	je     c001158b <getFromFileDescriptor(int)+0x9c>
c0011558:	a1 84 ac 02 c0       	mov    eax,ds:0xc002ac84
c001155d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011563:	74 26                	je     c001158b <getFromFileDescriptor(int)+0x9c>
c0011565:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c001156b:	83 f8 08             	cmp    eax,0x8
c001156e:	77 09                	ja     c0011579 <getFromFileDescriptor(int)+0x8a>
c0011570:	8b 04 85 60 ac 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd53a0]
c0011577:	eb 12                	jmp    c001158b <getFromFileDescriptor(int)+0x9c>
c0011579:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001157f:	83 fb 08             	cmp    ebx,0x8
c0011582:	77 95                	ja     c0011519 <getFromFileDescriptor(int)+0x2a>
c0011584:	8b 04 9d 20 ac 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd53e0]
c001158b:	83 c4 08             	add    esp,0x8
c001158e:	5b                   	pop    ebx
c001158f:	c3                   	ret    

c0011590 <__static_initialization_and_destruction_0(int, int)>:
c0011590:	83 ec 0c             	sub    esp,0xc
c0011593:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011598:	75 34                	jne    c00115ce <__static_initialization_and_destruction_0(int, int)+0x3e>
c001159a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00115a2:	75 2a                	jne    c00115ce <__static_initialization_and_destruction_0(int, int)+0x3e>
c00115a4:	83 ec 0c             	sub    esp,0xc
c00115a7:	68 98 ac 02 c0       	push   0xc002ac98
c00115ac:	e8 17 42 01 00       	call   c00257c8 <LinkedList<UnixFile>::LinkedList()>
c00115b1:	83 c4 10             	add    esp,0x10
c00115b4:	83 ec 04             	sub    esp,0x4
c00115b7:	68 dc 9a 02 c0       	push   0xc0029adc
c00115bc:	68 98 ac 02 c0       	push   0xc002ac98
c00115c1:	68 c6 57 02 c0       	push   0xc00257c6
c00115c6:	e8 04 0f 00 00       	call   c00124cf <__cxa_atexit>
c00115cb:	83 c4 10             	add    esp,0x10
c00115ce:	90                   	nop
c00115cf:	83 c4 0c             	add    esp,0xc
c00115d2:	c3                   	ret    

c00115d3 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00115d3:	83 ec 0c             	sub    esp,0xc
c00115d6:	83 ec 08             	sub    esp,0x8
c00115d9:	68 ff ff 00 00       	push   0xffff
c00115de:	6a 01                	push   0x1
c00115e0:	e8 ab ff ff ff       	call   c0011590 <__static_initialization_and_destruction_0(int, int)>
c00115e5:	83 c4 10             	add    esp,0x10
c00115e8:	83 c4 0c             	add    esp,0xc
c00115eb:	c3                   	ret    

c00115ec <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00115ec:	53                   	push   ebx
c00115ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00115f1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00115f5:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00115fb:	89 c8                	mov    eax,ecx
c00115fd:	d1 e8                	shr    eax,1
c00115ff:	03 05 68 9b 02 c0    	add    eax,DWORD PTR ds:0xc0029b68
c0011605:	83 e1 01             	and    ecx,0x1
c0011608:	8a 10                	mov    dl,BYTE PTR [eax]
c001160a:	75 09                	jne    c0011615 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c001160c:	83 e2 f0             	and    edx,0xfffffff0
c001160f:	09 da                	or     edx,ebx
c0011611:	88 10                	mov    BYTE PTR [eax],dl
c0011613:	5b                   	pop    ebx
c0011614:	c3                   	ret    
c0011615:	c1 e3 04             	shl    ebx,0x4
c0011618:	83 e2 0f             	and    edx,0xf
c001161b:	09 da                	or     edx,ebx
c001161d:	88 10                	mov    BYTE PTR [eax],dl
c001161f:	5b                   	pop    ebx
c0011620:	c3                   	ret    

c0011621 <Virt::getPageState(unsigned long)>:
c0011621:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011625:	8b 0d 68 9b 02 c0    	mov    ecx,DWORD PTR ds:0xc0029b68
c001162b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011631:	89 d0                	mov    eax,edx
c0011633:	d1 e8                	shr    eax,1
c0011635:	83 e2 01             	and    edx,0x1
c0011638:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c001163b:	75 04                	jne    c0011641 <Virt::getPageState(unsigned long)+0x20>
c001163d:	83 e0 0f             	and    eax,0xf
c0011640:	c3                   	ret    
c0011641:	c0 e8 04             	shr    al,0x4
c0011644:	c3                   	ret    

c0011645 <Virt::allocateKernelVirtualPages(int)>:
c0011645:	55                   	push   ebp
c0011646:	31 ed                	xor    ebp,ebp
c0011648:	57                   	push   edi
c0011649:	56                   	push   esi
c001164a:	53                   	push   ebx
c001164b:	31 db                	xor    ebx,ebx
c001164d:	83 ec 1c             	sub    esp,0x1c
c0011650:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011654:	8b 3d 64 9b 02 c0    	mov    edi,DWORD PTR ds:0xc0029b64
c001165a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001165f:	57                   	push   edi
c0011660:	e8 bc ff ff ff       	call   c0011621 <Virt::getPageState(unsigned long)>
c0011665:	5a                   	pop    edx
c0011666:	84 c0                	test   al,al
c0011668:	75 3a                	jne    c00116a4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c001166a:	85 db                	test   ebx,ebx
c001166c:	75 02                	jne    c0011670 <Virt::allocateKernelVirtualPages(int)+0x2b>
c001166e:	89 fd                	mov    ebp,edi
c0011670:	43                   	inc    ebx
c0011671:	39 f3                	cmp    ebx,esi
c0011673:	74 5a                	je     c00116cf <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011675:	47                   	inc    edi
c0011676:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001167c:	76 31                	jbe    c00116af <Virt::allocateKernelVirtualPages(int)+0x6a>
c001167e:	c7 05 64 9b 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0029b64,0xc8000
c0011688:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001168d:	75 28                	jne    c00116b7 <Virt::allocateKernelVirtualPages(int)+0x72>
c001168f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011694:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011699:	57                   	push   edi
c001169a:	e8 82 ff ff ff       	call   c0011621 <Virt::getPageState(unsigned long)>
c001169f:	5a                   	pop    edx
c00116a0:	84 c0                	test   al,al
c00116a2:	74 c6                	je     c001166a <Virt::allocateKernelVirtualPages(int)+0x25>
c00116a4:	31 db                	xor    ebx,ebx
c00116a6:	47                   	inc    edi
c00116a7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00116ad:	77 cf                	ja     c001167e <Virt::allocateKernelVirtualPages(int)+0x39>
c00116af:	89 3d 64 9b 02 c0    	mov    DWORD PTR ds:0xc0029b64,edi
c00116b5:	eb a8                	jmp    c001165f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00116b7:	83 ec 0c             	sub    esp,0xc
c00116ba:	68 c4 74 02 c0       	push   0xc00274c4
c00116bf:	e8 35 77 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c00116c4:	8b 3d 64 9b 02 c0    	mov    edi,DWORD PTR ds:0xc0029b64
c00116ca:	83 c4 10             	add    esp,0x10
c00116cd:	eb 90                	jmp    c001165f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00116cf:	89 2d 64 9b 02 c0    	mov    DWORD PTR ds:0xc0029b64,ebp
c00116d5:	4b                   	dec    ebx
c00116d6:	74 5f                	je     c0011737 <Virt::allocateKernelVirtualPages(int)+0xf2>
c00116d8:	85 f6                	test   esi,esi
c00116da:	74 3d                	je     c0011719 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00116dc:	89 e8                	mov    eax,ebp
c00116de:	31 db                	xor    ebx,ebx
c00116e0:	8d 7e ff             	lea    edi,[esi-0x1]
c00116e3:	eb 14                	jmp    c00116f9 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00116e5:	6a 01                	push   0x1
c00116e7:	43                   	inc    ebx
c00116e8:	50                   	push   eax
c00116e9:	e8 fe fe ff ff       	call   c00115ec <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116ee:	58                   	pop    eax
c00116ef:	39 f3                	cmp    ebx,esi
c00116f1:	5a                   	pop    edx
c00116f2:	74 25                	je     c0011719 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00116f4:	a1 64 9b 02 c0       	mov    eax,ds:0xc0029b64
c00116f9:	8d 50 01             	lea    edx,[eax+0x1]
c00116fc:	85 db                	test   ebx,ebx
c00116fe:	89 15 64 9b 02 c0    	mov    DWORD PTR ds:0xc0029b64,edx
c0011704:	74 20                	je     c0011726 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011706:	39 df                	cmp    edi,ebx
c0011708:	75 db                	jne    c00116e5 <Virt::allocateKernelVirtualPages(int)+0xa0>
c001170a:	6a 03                	push   0x3
c001170c:	43                   	inc    ebx
c001170d:	50                   	push   eax
c001170e:	e8 d9 fe ff ff       	call   c00115ec <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011713:	59                   	pop    ecx
c0011714:	39 f3                	cmp    ebx,esi
c0011716:	58                   	pop    eax
c0011717:	75 db                	jne    c00116f4 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011719:	83 c4 1c             	add    esp,0x1c
c001171c:	89 e8                	mov    eax,ebp
c001171e:	5b                   	pop    ebx
c001171f:	c1 e0 0c             	shl    eax,0xc
c0011722:	5e                   	pop    esi
c0011723:	5f                   	pop    edi
c0011724:	5d                   	pop    ebp
c0011725:	c3                   	ret    
c0011726:	6a 02                	push   0x2
c0011728:	bb 01 00 00 00       	mov    ebx,0x1
c001172d:	50                   	push   eax
c001172e:	e8 b9 fe ff ff       	call   c00115ec <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011733:	58                   	pop    eax
c0011734:	5a                   	pop    edx
c0011735:	eb bd                	jmp    c00116f4 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011737:	6a 04                	push   0x4
c0011739:	8d 45 01             	lea    eax,[ebp+0x1]
c001173c:	55                   	push   ebp
c001173d:	a3 64 9b 02 c0       	mov    ds:0xc0029b64,eax
c0011742:	e8 a5 fe ff ff       	call   c00115ec <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011747:	59                   	pop    ecx
c0011748:	89 e8                	mov    eax,ebp
c001174a:	5b                   	pop    ebx
c001174b:	c1 e0 0c             	shl    eax,0xc
c001174e:	83 c4 1c             	add    esp,0x1c
c0011751:	5b                   	pop    ebx
c0011752:	5e                   	pop    esi
c0011753:	5f                   	pop    edi
c0011754:	5d                   	pop    ebp
c0011755:	c3                   	ret    

c0011756 <Virt::virtualMemorySetup()>:
c0011756:	53                   	push   ebx
c0011757:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001175c:	83 ec 08             	sub    esp,0x8
c001175f:	6a 0f                	push   0xf
c0011761:	53                   	push   ebx
c0011762:	43                   	inc    ebx
c0011763:	e8 84 fe ff ff       	call   c00115ec <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011768:	59                   	pop    ecx
c0011769:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001176f:	58                   	pop    eax
c0011770:	75 ed                	jne    c001175f <Virt::virtualMemorySetup()+0x9>
c0011772:	83 ec 08             	sub    esp,0x8
c0011775:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001177a:	68 00 00 00 c8       	push   0xc8000000
c001177f:	68 4b 76 02 c0       	push   0xc002764b
c0011784:	e8 ac 0e 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0011789:	58                   	pop    eax
c001178a:	5a                   	pop    edx
c001178b:	68 00 f0 ff ef       	push   0xeffff000
c0011790:	68 5f 76 02 c0       	push   0xc002765f
c0011795:	e8 9b 0e 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001179a:	83 c4 10             	add    esp,0x10
c001179d:	83 ec 08             	sub    esp,0x8
c00117a0:	6a 00                	push   0x0
c00117a2:	53                   	push   ebx
c00117a3:	43                   	inc    ebx
c00117a4:	e8 43 fe ff ff       	call   c00115ec <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117a9:	83 c4 10             	add    esp,0x10
c00117ac:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00117b2:	75 e9                	jne    c001179d <Virt::virtualMemorySetup()+0x47>
c00117b4:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00117b9:	83 ec 08             	sub    esp,0x8
c00117bc:	6a 0f                	push   0xf
c00117be:	53                   	push   ebx
c00117bf:	43                   	inc    ebx
c00117c0:	e8 27 fe ff ff       	call   c00115ec <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117c5:	83 c4 10             	add    esp,0x10
c00117c8:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00117ce:	75 e9                	jne    c00117b9 <Virt::virtualMemorySetup()+0x63>
c00117d0:	83 c4 08             	add    esp,0x8
c00117d3:	5b                   	pop    ebx
c00117d4:	c3                   	ret    

c00117d5 <Virt::getAKernelVAS()>:
c00117d5:	a1 a4 ac 02 c0       	mov    eax,ds:0xc002aca4
c00117da:	c3                   	ret    

c00117db <Virt::setupPageSwapping(int)>:
c00117db:	57                   	push   edi
c00117dc:	56                   	push   esi
c00117dd:	53                   	push   ebx
c00117de:	83 ec 1c             	sub    esp,0x1c
c00117e1:	68 14 01 00 00       	push   0x114
c00117e6:	e8 d7 dc ff ff       	call   c000f4c2 <malloc>
c00117eb:	83 c4 0c             	add    esp,0xc
c00117ee:	89 c6                	mov    esi,eax
c00117f0:	ff 35 54 c0 02 c0    	push   DWORD PTR ds:0xc002c054
c00117f6:	68 73 76 02 c0       	push   0xc0027673
c00117fb:	50                   	push   eax
c00117fc:	e8 63 13 00 00       	call   c0012b64 <File::File(char const*, Process*)>
c0011801:	89 34 24             	mov    DWORD PTR [esp],esi
c0011804:	e8 37 15 00 00       	call   c0012d40 <File::unlink()>
c0011809:	58                   	pop    eax
c001180a:	5a                   	pop    edx
c001180b:	6a 12                	push   0x12
c001180d:	56                   	push   esi
c001180e:	e8 b5 13 00 00       	call   c0012bc8 <File::open(FileOpenMode)>
c0011813:	83 c4 10             	add    esp,0x10
c0011816:	85 c0                	test   eax,eax
c0011818:	0f 85 ca 00 00 00    	jne    c00118e8 <Virt::setupPageSwapping(int)+0x10d>
c001181e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011822:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001182a:	c1 e3 08             	shl    ebx,0x8
c001182d:	83 ec 0c             	sub    esp,0xc
c0011830:	68 00 00 01 00       	push   0x10000
c0011835:	e8 88 dc ff ff       	call   c000f4c2 <malloc>
c001183a:	83 c4 0c             	add    esp,0xc
c001183d:	89 c7                	mov    edi,eax
c001183f:	68 00 00 01 00       	push   0x10000
c0011844:	6a 00                	push   0x0
c0011846:	50                   	push   eax
c0011847:	e8 31 ee fe ff       	call   c000067d <memset>
c001184c:	83 c4 10             	add    esp,0x10
c001184f:	85 db                	test   ebx,ebx
c0011851:	79 03                	jns    c0011856 <Virt::setupPageSwapping(int)+0x7b>
c0011853:	83 c3 0f             	add    ebx,0xf
c0011856:	c1 fb 04             	sar    ebx,0x4
c0011859:	4b                   	dec    ebx
c001185a:	83 fb ff             	cmp    ebx,0xffffffff
c001185d:	74 4b                	je     c00118aa <Virt::setupPageSwapping(int)+0xcf>
c001185f:	83 ec 0c             	sub    esp,0xc
c0011862:	8b 06                	mov    eax,DWORD PTR [esi]
c0011864:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011868:	52                   	push   edx
c0011869:	57                   	push   edi
c001186a:	6a 00                	push   0x0
c001186c:	68 00 00 01 00       	push   0x10000
c0011871:	56                   	push   esi
c0011872:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011875:	83 c4 20             	add    esp,0x20
c0011878:	85 c0                	test   eax,eax
c001187a:	75 59                	jne    c00118d5 <Virt::setupPageSwapping(int)+0xfa>
c001187c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011880:	3d 00 00 01 00       	cmp    eax,0x10000
c0011885:	74 d2                	je     c0011859 <Virt::setupPageSwapping(int)+0x7e>
c0011887:	83 ec 08             	sub    esp,0x8
c001188a:	4b                   	dec    ebx
c001188b:	50                   	push   eax
c001188c:	68 c6 76 02 c0       	push   0xc00276c6
c0011891:	e8 9f 0d 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0011896:	c7 04 24 cf 76 02 c0 	mov    DWORD PTR [esp],0xc00276cf
c001189d:	e8 57 75 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c00118a2:	83 c4 10             	add    esp,0x10
c00118a5:	83 fb ff             	cmp    ebx,0xffffffff
c00118a8:	75 b5                	jne    c001185f <Virt::setupPageSwapping(int)+0x84>
c00118aa:	83 ec 0c             	sub    esp,0xc
c00118ad:	56                   	push   esi
c00118ae:	e8 73 13 00 00       	call   c0012c26 <File::close()>
c00118b3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00118b6:	e8 27 dc ff ff       	call   c000f4e2 <rfree>
c00118bb:	83 c4 10             	add    esp,0x10
c00118be:	85 f6                	test   esi,esi
c00118c0:	74 0c                	je     c00118ce <Virt::setupPageSwapping(int)+0xf3>
c00118c2:	83 ec 0c             	sub    esp,0xc
c00118c5:	8b 06                	mov    eax,DWORD PTR [esi]
c00118c7:	56                   	push   esi
c00118c8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118cb:	83 c4 10             	add    esp,0x10
c00118ce:	83 c4 10             	add    esp,0x10
c00118d1:	5b                   	pop    ebx
c00118d2:	5e                   	pop    esi
c00118d3:	5f                   	pop    edi
c00118d4:	c3                   	ret    
c00118d5:	83 ec 08             	sub    esp,0x8
c00118d8:	50                   	push   eax
c00118d9:	68 ae 76 02 c0       	push   0xc00276ae
c00118de:	e8 52 0d 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c00118e3:	83 c4 10             	add    esp,0x10
c00118e6:	eb 94                	jmp    c001187c <Virt::setupPageSwapping(int)+0xa1>
c00118e8:	83 ec 08             	sub    esp,0x8
c00118eb:	50                   	push   eax
c00118ec:	68 8a 76 02 c0       	push   0xc002768a
c00118f1:	e8 3f 0d 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c00118f6:	c7 04 24 93 76 02 c0 	mov    DWORD PTR [esp],0xc0027693
c00118fd:	e8 f7 74 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c0011902:	83 c4 10             	add    esp,0x10
c0011905:	e9 14 ff ff ff       	jmp    c001181e <Virt::setupPageSwapping(int)+0x43>

c001190a <VAS::VAS()>:
c001190a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001190e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011915:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011919:	a3 a4 ac 02 c0       	mov    ds:0xc002aca4,eax
c001191e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011922:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011926:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001192a:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001192d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011931:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011938:	90                   	nop
c0011939:	c3                   	ret    

c001193a <VAS::VAS(VAS*)>:
c001193a:	83 ec 0c             	sub    esp,0xc
c001193d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011941:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011948:	83 ec 0c             	sub    esp,0xc
c001194b:	68 e4 74 02 c0       	push   0xc00274e4
c0011950:	e8 a4 74 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c0011955:	83 c4 10             	add    esp,0x10
c0011958:	90                   	nop
c0011959:	83 c4 0c             	add    esp,0xc
c001195c:	c3                   	ret    
c001195d:	90                   	nop

c001195e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001195e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011962:	89 c2                	mov    edx,eax
c0011964:	c1 e8 0a             	shr    eax,0xa
c0011967:	c1 ea 16             	shr    edx,0x16
c001196a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001196f:	19 c9                	sbb    ecx,ecx
c0011971:	c1 e2 0c             	shl    edx,0xc
c0011974:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c001197a:	25 fc 0f 00 00       	and    eax,0xffc
c001197f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011986:	01 d0                	add    eax,edx
c0011988:	c3                   	ret    
c0011989:	90                   	nop

c001198a <VAS::getPageTableEntry(unsigned long)>:
c001198a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001198e:	89 ca                	mov    edx,ecx
c0011990:	c1 e9 0a             	shr    ecx,0xa
c0011993:	c1 ea 16             	shr    edx,0x16
c0011996:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c001199c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00119a2:	c1 e0 0c             	shl    eax,0xc
c00119a5:	8d 04 08             	lea    eax,[eax+ecx*1]
c00119a8:	c3                   	ret    

c00119a9 <Virt::freeKernelVirtualPages(unsigned long)>:
c00119a9:	57                   	push   edi
c00119aa:	56                   	push   esi
c00119ab:	be 01 00 00 00       	mov    esi,0x1
c00119b0:	53                   	push   ebx
c00119b1:	83 ec 10             	sub    esp,0x10
c00119b4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00119b8:	c1 eb 0c             	shr    ebx,0xc
c00119bb:	eb 3f                	jmp    c00119fc <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00119bd:	e8 13 fe ff ff       	call   c00117d5 <Virt::getAKernelVAS()>
c00119c2:	83 ec 08             	sub    esp,0x8
c00119c5:	57                   	push   edi
c00119c6:	50                   	push   eax
c00119c7:	e8 be ff ff ff       	call   c001198a <VAS::getPageTableEntry(unsigned long)>
c00119cc:	83 c4 10             	add    esp,0x10
c00119cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00119d1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00119d5:	f6 c4 04             	test   ah,0x4
c00119d8:	75 5f                	jne    c0011a39 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c00119da:	80 fa 04             	cmp    dl,0x4
c00119dd:	74 78                	je     c0011a57 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c00119df:	80 fa 02             	cmp    dl,0x2
c00119e2:	0f 84 88 00 00 00    	je     c0011a70 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00119e8:	80 fa 03             	cmp    dl,0x3
c00119eb:	0f 84 ad 00 00 00    	je     c0011a9e <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c00119f1:	fe ca                	dec    dl
c00119f3:	0f 84 92 00 00 00    	je     c0011a8b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00119f9:	43                   	inc    ebx
c00119fa:	31 f6                	xor    esi,esi
c00119fc:	53                   	push   ebx
c00119fd:	e8 1f fc ff ff       	call   c0011621 <Virt::getPageState(unsigned long)>
c0011a02:	5f                   	pop    edi
c0011a03:	89 df                	mov    edi,ebx
c0011a05:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011a09:	c1 e7 0c             	shl    edi,0xc
c0011a0c:	84 c0                	test   al,al
c0011a0e:	75 ad                	jne    c00119bd <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011a10:	83 ec 0c             	sub    esp,0xc
c0011a13:	68 d5 76 02 c0       	push   0xc00276d5
c0011a18:	e8 dc 73 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c0011a1d:	e8 b3 fd ff ff       	call   c00117d5 <Virt::getAKernelVAS()>
c0011a22:	5a                   	pop    edx
c0011a23:	59                   	pop    ecx
c0011a24:	57                   	push   edi
c0011a25:	50                   	push   eax
c0011a26:	e8 5f ff ff ff       	call   c001198a <VAS::getPageTableEntry(unsigned long)>
c0011a2b:	83 c4 10             	add    esp,0x10
c0011a2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a30:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a34:	f6 c4 04             	test   ah,0x4
c0011a37:	74 c0                	je     c00119f9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a39:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011a3d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011a42:	83 ec 0c             	sub    esp,0xc
c0011a45:	50                   	push   eax
c0011a46:	e8 97 df ff ff       	call   c000f9e2 <Phys::freePage(unsigned long)>
c0011a4b:	83 c4 10             	add    esp,0x10
c0011a4e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a52:	80 fa 04             	cmp    dl,0x4
c0011a55:	75 88                	jne    c00119df <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011a57:	89 f0                	mov    eax,esi
c0011a59:	84 c0                	test   al,al
c0011a5b:	75 47                	jne    c0011aa4 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011a5d:	c7 44 24 20 08 75 02 c0 	mov    DWORD PTR [esp+0x20],0xc0027508
c0011a65:	83 c4 10             	add    esp,0x10
c0011a68:	5b                   	pop    ebx
c0011a69:	5e                   	pop    esi
c0011a6a:	5f                   	pop    edi
c0011a6b:	e9 89 73 00 00       	jmp    c0018df9 <Krnl::panic(char const*)>
c0011a70:	89 f0                	mov    eax,esi
c0011a72:	84 c0                	test   al,al
c0011a74:	75 15                	jne    c0011a8b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011a76:	83 ec 0c             	sub    esp,0xc
c0011a79:	68 f1 76 02 c0       	push   0xc00276f1
c0011a7e:	e8 76 73 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c0011a83:	83 c4 10             	add    esp,0x10
c0011a86:	e9 6e ff ff ff       	jmp    c00119f9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a8b:	83 ec 08             	sub    esp,0x8
c0011a8e:	6a 00                	push   0x0
c0011a90:	53                   	push   ebx
c0011a91:	e8 56 fb ff ff       	call   c00115ec <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a96:	83 c4 10             	add    esp,0x10
c0011a99:	e9 5b ff ff ff       	jmp    c00119f9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a9e:	89 f0                	mov    eax,esi
c0011aa0:	84 c0                	test   al,al
c0011aa2:	75 15                	jne    c0011ab9 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011aa4:	83 ec 08             	sub    esp,0x8
c0011aa7:	6a 00                	push   0x0
c0011aa9:	53                   	push   ebx
c0011aaa:	e8 3d fb ff ff       	call   c00115ec <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011aaf:	83 c4 10             	add    esp,0x10
c0011ab2:	83 c4 10             	add    esp,0x10
c0011ab5:	5b                   	pop    ebx
c0011ab6:	5e                   	pop    esi
c0011ab7:	5f                   	pop    edi
c0011ab8:	c3                   	ret    
c0011ab9:	c7 44 24 20 0d 77 02 c0 	mov    DWORD PTR [esp+0x20],0xc002770d
c0011ac1:	83 c4 10             	add    esp,0x10
c0011ac4:	5b                   	pop    ebx
c0011ac5:	5e                   	pop    esi
c0011ac6:	5f                   	pop    edi
c0011ac7:	e9 2d 73 00 00       	jmp    c0018df9 <Krnl::panic(char const*)>

c0011acc <VAS::freeAllocatedPages(unsigned long)>:
c0011acc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ad0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011ad4:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011ad8:	74 09                	je     c0011ae3 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011ada:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011ade:	e9 c6 fe ff ff       	jmp    c00119a9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011ae3:	c7 44 24 04 2c 75 02 c0 	mov    DWORD PTR [esp+0x4],0xc002752c
c0011aeb:	e9 45 0b 00 00       	jmp    c0012635 <Dbg::kprintf(char const*, ...)>

c0011af0 <VAS::virtualToPhysical(unsigned long)>:
c0011af0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011af4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011af8:	e8 8d fe ff ff       	call   c001198a <VAS::getPageTableEntry(unsigned long)>
c0011afd:	5a                   	pop    edx
c0011afe:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b00:	59                   	pop    ecx
c0011b01:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011b06:	c3                   	ret    
c0011b07:	90                   	nop

c0011b08 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011b08:	55                   	push   ebp
c0011b09:	57                   	push   edi
c0011b0a:	56                   	push   esi
c0011b0b:	53                   	push   ebx
c0011b0c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011b10:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011b14:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011b18:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011b1c:	85 db                	test   ebx,ebx
c0011b1e:	7e 22                	jle    c0011b42 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011b20:	c1 e3 0c             	shl    ebx,0xc
c0011b23:	01 f3                	add    ebx,esi
c0011b25:	56                   	push   esi
c0011b26:	81 c6 00 10 00 00    	add    esi,0x1000
c0011b2c:	55                   	push   ebp
c0011b2d:	e8 58 fe ff ff       	call   c001198a <VAS::getPageTableEntry(unsigned long)>
c0011b32:	5a                   	pop    edx
c0011b33:	59                   	pop    ecx
c0011b34:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011b36:	21 f9                	and    ecx,edi
c0011b38:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011b3c:	39 f3                	cmp    ebx,esi
c0011b3e:	89 08                	mov    DWORD PTR [eax],ecx
c0011b40:	75 e3                	jne    c0011b25 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011b42:	5b                   	pop    ebx
c0011b43:	5e                   	pop    esi
c0011b44:	5f                   	pop    edi
c0011b45:	5d                   	pop    ebp
c0011b46:	c3                   	ret    
c0011b47:	90                   	nop

c0011b48 <VAS::setToWriteCombining(unsigned long, int)>:
c0011b48:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c0011b4d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011b53:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011b5a:	75 01                	jne    c0011b5d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011b5c:	c3                   	ret    
c0011b5d:	68 80 00 00 00       	push   0x80
c0011b62:	6a ff                	push   0xffffffff
c0011b64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b70:	e8 93 ff ff ff       	call   c0011b08 <VAS::reflagRange(unsigned long, int, int, int)>
c0011b75:	83 c4 14             	add    esp,0x14
c0011b78:	c3                   	ret    
c0011b79:	90                   	nop

c0011b7a <VAS::mapOtherVASIn(bool, VAS*)>:
c0011b7a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011b7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b83:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011b86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b8a:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011b8d:	19 c0                	sbb    eax,eax
c0011b8f:	83 ca 03             	or     edx,0x3
c0011b92:	83 e0 fc             	and    eax,0xfffffffc
c0011b95:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011b9c:	0f 20 d8             	mov    eax,cr3
c0011b9f:	0f 22 d8             	mov    cr3,eax
c0011ba2:	c3                   	ret    
c0011ba3:	90                   	nop

c0011ba4 <VAS::~VAS()>:
c0011ba4:	83 ec 2c             	sub    esp,0x2c
c0011ba7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011baf:	e8 51 a2 00 00       	call   c001be05 <lockScheduler()>
c0011bb4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011bb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bbb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011bbe:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011bc4:	83 ec 04             	sub    esp,0x4
c0011bc7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011bcb:	6a 01                	push   0x1
c0011bcd:	50                   	push   eax
c0011bce:	e8 a7 ff ff ff       	call   c0011b7a <VAS::mapOtherVASIn(bool, VAS*)>
c0011bd3:	83 c4 10             	add    esp,0x10
c0011bd6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011bde:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011be6:	0f 8f d7 00 00 00    	jg     c0011cc3 <VAS::~VAS()+0x11f>
c0011bec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011bf0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011bf3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011bf7:	c1 e2 02             	shl    edx,0x2
c0011bfa:	01 d0                	add    eax,edx
c0011bfc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bfe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c06:	83 e0 01             	and    eax,0x1
c0011c09:	0f 84 ab 00 00 00    	je     c0011cba <VAS::~VAS()+0x116>
c0011c0f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011c17:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011c1f:	7f 75                	jg     c0011c96 <VAS::~VAS()+0xf2>
c0011c21:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c25:	c1 e0 0a             	shl    eax,0xa
c0011c28:	89 c2                	mov    edx,eax
c0011c2a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c2e:	01 d0                	add    eax,edx
c0011c30:	c1 e0 0c             	shl    eax,0xc
c0011c33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c37:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011c3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c3e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c41:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011c47:	83 ec 04             	sub    esp,0x4
c0011c4a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011c4e:	6a 01                	push   0x1
c0011c50:	50                   	push   eax
c0011c51:	e8 08 fd ff ff       	call   c001195e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011c56:	83 c4 10             	add    esp,0x10
c0011c59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011c5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c61:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c6b:	25 01 04 00 00       	and    eax,0x401
c0011c70:	3d 01 04 00 00       	cmp    eax,0x401
c0011c75:	75 19                	jne    c0011c90 <VAS::~VAS()+0xec>
c0011c77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c7b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c80:	83 ec 0c             	sub    esp,0xc
c0011c83:	50                   	push   eax
c0011c84:	e8 59 dd ff ff       	call   c000f9e2 <Phys::freePage(unsigned long)>
c0011c89:	83 c4 10             	add    esp,0x10
c0011c8c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011c90:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011c94:	eb 81                	jmp    c0011c17 <VAS::~VAS()+0x73>
c0011c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c9a:	25 00 04 00 00       	and    eax,0x400
c0011c9f:	74 19                	je     c0011cba <VAS::~VAS()+0x116>
c0011ca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ca5:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011caa:	83 ec 0c             	sub    esp,0xc
c0011cad:	50                   	push   eax
c0011cae:	e8 2f dd ff ff       	call   c000f9e2 <Phys::freePage(unsigned long)>
c0011cb3:	83 c4 10             	add    esp,0x10
c0011cb6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011cba:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011cbe:	e9 1b ff ff ff       	jmp    c0011bde <VAS::~VAS()+0x3a>
c0011cc3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cc7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011cca:	83 ec 0c             	sub    esp,0xc
c0011ccd:	50                   	push   eax
c0011cce:	e8 d6 fc ff ff       	call   c00119a9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011cd3:	83 c4 10             	add    esp,0x10
c0011cd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cda:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011cdd:	83 ec 0c             	sub    esp,0xc
c0011ce0:	50                   	push   eax
c0011ce1:	e8 fc dc ff ff       	call   c000f9e2 <Phys::freePage(unsigned long)>
c0011ce6:	83 c4 10             	add    esp,0x10
c0011ce9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011ced:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cf1:	c1 e0 02             	shl    eax,0x2
c0011cf4:	83 ec 08             	sub    esp,0x8
c0011cf7:	50                   	push   eax
c0011cf8:	68 50 75 02 c0       	push   0xc0027550
c0011cfd:	e8 33 09 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0011d02:	83 c4 10             	add    esp,0x10
c0011d05:	e8 fd a0 00 00       	call   c001be07 <unlockScheduler()>
c0011d0a:	90                   	nop
c0011d0b:	83 c4 2c             	add    esp,0x2c
c0011d0e:	c3                   	ret    
c0011d0f:	90                   	nop

c0011d10 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011d10:	55                   	push   ebp
c0011d11:	57                   	push   edi
c0011d12:	56                   	push   esi
c0011d13:	53                   	push   ebx
c0011d14:	83 ec 1c             	sub    esp,0x1c
c0011d17:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011d1b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011d1f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011d25:	77 08                	ja     c0011d2f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011d27:	0f 20 d8             	mov    eax,cr3
c0011d2a:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011d2d:	75 47                	jne    c0011d76 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011d2f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d33:	09 d8                	or     eax,ebx
c0011d35:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d3a:	75 57                	jne    c0011d93 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011d3c:	89 de                	mov    esi,ebx
c0011d3e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011d41:	c1 ee 16             	shr    esi,0x16
c0011d44:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011d4b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011d4f:	74 54                	je     c0011da5 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011d51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d55:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011d5b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011d5f:	c1 e6 0c             	shl    esi,0xc
c0011d62:	c1 eb 0a             	shr    ebx,0xa
c0011d65:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011d6b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011d6e:	83 c4 1c             	add    esp,0x1c
c0011d71:	5b                   	pop    ebx
c0011d72:	5e                   	pop    esi
c0011d73:	5f                   	pop    edi
c0011d74:	5d                   	pop    ebp
c0011d75:	c3                   	ret    
c0011d76:	83 ec 0c             	sub    esp,0xc
c0011d79:	68 70 75 02 c0       	push   0xc0027570
c0011d7e:	e8 b2 08 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0011d83:	83 c4 10             	add    esp,0x10
c0011d86:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d8a:	09 d8                	or     eax,ebx
c0011d8c:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d91:	74 a9                	je     c0011d3c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011d93:	83 ec 0c             	sub    esp,0xc
c0011d96:	68 d8 75 02 c0       	push   0xc00275d8
c0011d9b:	e8 59 70 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c0011da0:	83 c4 10             	add    esp,0x10
c0011da3:	eb 97                	jmp    c0011d3c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011da5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011da9:	e8 be dc ff ff       	call   c000fa6c <Phys::allocatePage()>
c0011dae:	89 c5                	mov    ebp,eax
c0011db0:	e8 20 fa ff ff       	call   c00117d5 <Virt::getAKernelVAS()>
c0011db5:	83 ec 0c             	sub    esp,0xc
c0011db8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011dbc:	6a 01                	push   0x1
c0011dbe:	e8 82 f8 ff ff       	call   c0011645 <Virt::allocateKernelVirtualPages(int)>
c0011dc3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011dca:	6a 01                	push   0x1
c0011dcc:	50                   	push   eax
c0011dcd:	55                   	push   ebp
c0011dce:	81 cd 07 04 00 00    	or     ebp,0x407
c0011dd4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011dd8:	51                   	push   ecx
c0011dd9:	e8 26 02 00 00       	call   c0012004 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011dde:	83 c4 1c             	add    esp,0x1c
c0011de1:	68 00 10 00 00       	push   0x1000
c0011de6:	6a 00                	push   0x0
c0011de8:	50                   	push   eax
c0011de9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011ded:	e8 8b e8 fe ff       	call   c000067d <memset>
c0011df2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011df6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011df9:	e8 ab fb ff ff       	call   c00119a9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011dfe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e02:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011e05:	83 c4 10             	add    esp,0x10
c0011e08:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011e0b:	e9 41 ff ff ff       	jmp    c0011d51 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011e10 <VAS::allocatePages(int, int)>:
c0011e10:	55                   	push   ebp
c0011e11:	57                   	push   edi
c0011e12:	56                   	push   esi
c0011e13:	53                   	push   ebx
c0011e14:	83 ec 1c             	sub    esp,0x1c
c0011e17:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011e1b:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c0011e20:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e26:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011e2c:	83 e0 01             	and    eax,0x1
c0011e2f:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011e33:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011e37:	0f 85 cc 00 00 00    	jne    c0011f09 <VAS::allocatePages(int, int)+0xf9>
c0011e3d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011e40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e44:	85 c0                	test   eax,eax
c0011e46:	0f 84 a1 00 00 00    	je     c0011eed <VAS::allocatePages(int, int)+0xdd>
c0011e4c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011e50:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e54:	c1 e6 0c             	shl    esi,0xc
c0011e57:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011e5b:	85 c0                	test   eax,eax
c0011e5d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011e60:	7e 33                	jle    c0011e95 <VAS::allocatePages(int, int)+0x85>
c0011e62:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011e66:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011e6a:	81 cd 00 04 00 00    	or     ebp,0x400
c0011e70:	e8 f7 db ff ff       	call   c000fa6c <Phys::allocatePage()>
c0011e75:	55                   	push   ebp
c0011e76:	53                   	push   ebx
c0011e77:	50                   	push   eax
c0011e78:	57                   	push   edi
c0011e79:	e8 92 fe ff ff       	call   c0011d10 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011e7e:	83 c4 10             	add    esp,0x10
c0011e81:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011e86:	74 03                	je     c0011e8b <VAS::allocatePages(int, int)+0x7b>
c0011e88:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011e8b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011e91:	39 de                	cmp    esi,ebx
c0011e93:	75 db                	jne    c0011e70 <VAS::allocatePages(int, int)+0x60>
c0011e95:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011e9a:	75 12                	jne    c0011eae <VAS::allocatePages(int, int)+0x9e>
c0011e9c:	0f 20 d8             	mov    eax,cr3
c0011e9f:	0f 22 d8             	mov    cr3,eax
c0011ea2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ea6:	83 c4 1c             	add    esp,0x1c
c0011ea9:	5b                   	pop    ebx
c0011eaa:	5e                   	pop    esi
c0011eab:	5f                   	pop    edi
c0011eac:	5d                   	pop    ebp
c0011ead:	c3                   	ret    
c0011eae:	c1 ee 0a             	shr    esi,0xa
c0011eb1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011eb5:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011ebb:	c1 eb 0a             	shr    ebx,0xa
c0011ebe:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011ec4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011eca:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011ed0:	39 c3                	cmp    ebx,eax
c0011ed2:	77 ce                	ja     c0011ea2 <VAS::allocatePages(int, int)+0x92>
c0011ed4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ed7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011edd:	39 d8                	cmp    eax,ebx
c0011edf:	73 f3                	jae    c0011ed4 <VAS::allocatePages(int, int)+0xc4>
c0011ee1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ee5:	83 c4 1c             	add    esp,0x1c
c0011ee8:	5b                   	pop    ebx
c0011ee9:	5e                   	pop    esi
c0011eea:	5f                   	pop    edi
c0011eeb:	5d                   	pop    ebp
c0011eec:	c3                   	ret    
c0011eed:	83 ec 0c             	sub    esp,0xc
c0011ef0:	68 fc 75 02 c0       	push   0xc00275fc
c0011ef5:	e8 ff 6e 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c0011efa:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011efd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f01:	83 c4 10             	add    esp,0x10
c0011f04:	e9 43 ff ff ff       	jmp    c0011e4c <VAS::allocatePages(int, int)+0x3c>
c0011f09:	83 ec 0c             	sub    esp,0xc
c0011f0c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011f10:	e8 30 f7 ff ff       	call   c0011645 <Virt::allocateKernelVirtualPages(int)>
c0011f15:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f19:	83 c4 10             	add    esp,0x10
c0011f1c:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011f21:	0f 87 9b 00 00 00    	ja     c0011fc2 <VAS::allocatePages(int, int)+0x1b2>
c0011f27:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011f2b:	85 d2                	test   edx,edx
c0011f2d:	7e 3c                	jle    c0011f6b <VAS::allocatePages(int, int)+0x15b>
c0011f2f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011f33:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011f37:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011f3b:	c1 e5 0c             	shl    ebp,0xc
c0011f3e:	81 ce 00 04 00 00    	or     esi,0x400
c0011f44:	01 dd                	add    ebp,ebx
c0011f46:	e8 21 db ff ff       	call   c000fa6c <Phys::allocatePage()>
c0011f4b:	56                   	push   esi
c0011f4c:	53                   	push   ebx
c0011f4d:	50                   	push   eax
c0011f4e:	57                   	push   edi
c0011f4f:	e8 bc fd ff ff       	call   c0011d10 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f54:	83 c4 10             	add    esp,0x10
c0011f57:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f5c:	74 03                	je     c0011f61 <VAS::allocatePages(int, int)+0x151>
c0011f5e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011f61:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f67:	39 dd                	cmp    ebp,ebx
c0011f69:	75 db                	jne    c0011f46 <VAS::allocatePages(int, int)+0x136>
c0011f6b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f70:	0f 84 26 ff ff ff    	je     c0011e9c <VAS::allocatePages(int, int)+0x8c>
c0011f76:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f7a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f7e:	89 d3                	mov    ebx,edx
c0011f80:	c1 e0 0c             	shl    eax,0xc
c0011f83:	c1 eb 0a             	shr    ebx,0xa
c0011f86:	01 d0                	add    eax,edx
c0011f88:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011f8e:	c1 e8 0a             	shr    eax,0xa
c0011f91:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011f97:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f9c:	2d 00 00 40 00       	sub    eax,0x400000
c0011fa1:	39 c3                	cmp    ebx,eax
c0011fa3:	0f 87 f9 fe ff ff    	ja     c0011ea2 <VAS::allocatePages(int, int)+0x92>
c0011fa9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011fac:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011fb2:	39 d8                	cmp    eax,ebx
c0011fb4:	73 f3                	jae    c0011fa9 <VAS::allocatePages(int, int)+0x199>
c0011fb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fba:	83 c4 1c             	add    esp,0x1c
c0011fbd:	5b                   	pop    ebx
c0011fbe:	5e                   	pop    esi
c0011fbf:	5f                   	pop    edi
c0011fc0:	5d                   	pop    ebp
c0011fc1:	c3                   	ret    
c0011fc2:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c0011fc7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fcd:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011fd4:	0f 84 4d ff ff ff    	je     c0011f27 <VAS::allocatePages(int, int)+0x117>
c0011fda:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011fe2:	e9 40 ff ff ff       	jmp    c0011f27 <VAS::allocatePages(int, int)+0x117>
c0011fe7:	90                   	nop

c0011fe8 <VAS::setCPUSpecific(unsigned long)>:
c0011fe8:	83 ec 0c             	sub    esp,0xc
c0011feb:	6a 05                	push   0x5
c0011fed:	68 00 00 40 c2       	push   0xc2400000
c0011ff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ffa:	e8 11 fd ff ff       	call   c0011d10 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011fff:	83 c4 1c             	add    esp,0x1c
c0012002:	c3                   	ret    
c0012003:	90                   	nop

c0012004 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012004:	55                   	push   ebp
c0012005:	57                   	push   edi
c0012006:	56                   	push   esi
c0012007:	53                   	push   ebx
c0012008:	83 ec 1c             	sub    esp,0x1c
c001200b:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c0012010:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012014:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001201a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001201e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012024:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012028:	83 e0 01             	and    eax,0x1
c001202b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001202f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012033:	85 c0                	test   eax,eax
c0012035:	7e 39                	jle    c0012070 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012037:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001203b:	89 f3                	mov    ebx,esi
c001203d:	c1 e0 0c             	shl    eax,0xc
c0012040:	01 f0                	add    eax,esi
c0012042:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012046:	55                   	push   ebp
c0012047:	53                   	push   ebx
c0012048:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001204c:	29 f0                	sub    eax,esi
c001204e:	01 d8                	add    eax,ebx
c0012050:	50                   	push   eax
c0012051:	57                   	push   edi
c0012052:	e8 b9 fc ff ff       	call   c0011d10 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012057:	83 c4 10             	add    esp,0x10
c001205a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001205f:	74 03                	je     c0012064 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012061:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012064:	81 c3 00 10 00 00    	add    ebx,0x1000
c001206a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001206e:	75 d6                	jne    c0012046 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012070:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012075:	75 10                	jne    c0012087 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012077:	0f 20 d8             	mov    eax,cr3
c001207a:	0f 22 d8             	mov    cr3,eax
c001207d:	83 c4 1c             	add    esp,0x1c
c0012080:	89 f0                	mov    eax,esi
c0012082:	5b                   	pop    ebx
c0012083:	5e                   	pop    esi
c0012084:	5f                   	pop    edi
c0012085:	5d                   	pop    ebp
c0012086:	c3                   	ret    
c0012087:	89 f3                	mov    ebx,esi
c0012089:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001208d:	c1 eb 0a             	shr    ebx,0xa
c0012090:	c1 e0 0c             	shl    eax,0xc
c0012093:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012099:	01 f0                	add    eax,esi
c001209b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00120a1:	c1 e8 0a             	shr    eax,0xa
c00120a4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120a9:	2d 00 00 40 00       	sub    eax,0x400000
c00120ae:	39 c3                	cmp    ebx,eax
c00120b0:	77 cb                	ja     c001207d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00120b2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120b5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120bb:	39 d8                	cmp    eax,ebx
c00120bd:	73 f3                	jae    c00120b2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00120bf:	83 c4 1c             	add    esp,0x1c
c00120c2:	89 f0                	mov    eax,esi
c00120c4:	5b                   	pop    ebx
c00120c5:	5e                   	pop    esi
c00120c6:	5f                   	pop    edi
c00120c7:	5d                   	pop    ebp
c00120c8:	c3                   	ret    
c00120c9:	90                   	nop

c00120ca <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00120ca:	55                   	push   ebp
c00120cb:	57                   	push   edi
c00120cc:	56                   	push   esi
c00120cd:	53                   	push   ebx
c00120ce:	83 ec 1c             	sub    esp,0x1c
c00120d1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00120d5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00120d9:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00120dd:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00120e1:	a9 ff 0f 00 00       	test   eax,0xfff
c00120e6:	75 4a                	jne    c0012132 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00120e8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00120ec:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00120ef:	c1 eb 16             	shr    ebx,0x16
c00120f2:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00120f9:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00120fd:	74 4d                	je     c001214c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00120ff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012103:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012107:	c1 e8 0a             	shr    eax,0xa
c001210a:	80 fa 01             	cmp    dl,0x1
c001210d:	19 d2                	sbb    edx,edx
c001210f:	c1 e3 0c             	shl    ebx,0xc
c0012112:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012116:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001211c:	25 fc 0f 00 00       	and    eax,0xffc
c0012121:	01 d8                	add    eax,ebx
c0012123:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001212a:	83 c4 1c             	add    esp,0x1c
c001212d:	5b                   	pop    ebx
c001212e:	5e                   	pop    esi
c001212f:	5f                   	pop    edi
c0012130:	5d                   	pop    ebp
c0012131:	c3                   	ret    
c0012132:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012136:	83 ec 0c             	sub    esp,0xc
c0012139:	68 28 76 02 c0       	push   0xc0027628
c001213e:	e8 b6 6c 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c0012143:	83 c4 10             	add    esp,0x10
c0012146:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001214a:	eb 9c                	jmp    c00120e8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001214c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012150:	e8 17 d9 ff ff       	call   c000fa6c <Phys::allocatePage()>
c0012155:	89 c5                	mov    ebp,eax
c0012157:	e8 79 f6 ff ff       	call   c00117d5 <Virt::getAKernelVAS()>
c001215c:	83 ec 0c             	sub    esp,0xc
c001215f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012163:	6a 01                	push   0x1
c0012165:	e8 db f4 ff ff       	call   c0011645 <Virt::allocateKernelVirtualPages(int)>
c001216a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012171:	6a 01                	push   0x1
c0012173:	50                   	push   eax
c0012174:	55                   	push   ebp
c0012175:	81 cd 07 04 00 00    	or     ebp,0x407
c001217b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001217f:	51                   	push   ecx
c0012180:	e8 7f fe ff ff       	call   c0012004 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012185:	83 c4 1c             	add    esp,0x1c
c0012188:	68 00 10 00 00       	push   0x1000
c001218d:	6a 00                	push   0x0
c001218f:	50                   	push   eax
c0012190:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012194:	e8 e4 e4 fe ff       	call   c000067d <memset>
c0012199:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001219d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00121a0:	e8 04 f8 ff ff       	call   c00119a9 <Virt::freeKernelVirtualPages(unsigned long)>
c00121a5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00121a8:	83 c4 10             	add    esp,0x10
c00121ab:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00121ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00121b2:	e9 48 ff ff ff       	jmp    c00120ff <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00121b7:	90                   	nop

c00121b8 <VAS::VAS(bool)>:
c00121b8:	53                   	push   ebx
c00121b9:	83 ec 28             	sub    esp,0x28
c00121bc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00121c0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00121c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121c8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00121cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121d3:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00121d7:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00121da:	e8 8d d8 ff ff       	call   c000fa6c <Phys::allocatePage()>
c00121df:	89 c2                	mov    edx,eax
c00121e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121e5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00121e8:	e8 e8 f5 ff ff       	call   c00117d5 <Virt::getAKernelVAS()>
c00121ed:	89 c3                	mov    ebx,eax
c00121ef:	83 ec 0c             	sub    esp,0xc
c00121f2:	6a 01                	push   0x1
c00121f4:	e8 4c f4 ff ff       	call   c0011645 <Virt::allocateKernelVirtualPages(int)>
c00121f9:	83 c4 10             	add    esp,0x10
c00121fc:	89 c2                	mov    edx,eax
c00121fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012202:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012205:	83 ec 0c             	sub    esp,0xc
c0012208:	6a 03                	push   0x3
c001220a:	6a 01                	push   0x1
c001220c:	52                   	push   edx
c001220d:	50                   	push   eax
c001220e:	53                   	push   ebx
c001220f:	e8 f0 fd ff ff       	call   c0012004 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012214:	83 c4 20             	add    esp,0x20
c0012217:	89 c2                	mov    edx,eax
c0012219:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001221d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012220:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012228:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012230:	7f 1c                	jg     c001224e <VAS::VAS(bool)+0x96>
c0012232:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012236:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012239:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001223d:	c1 e2 02             	shl    edx,0x2
c0012240:	01 d0                	add    eax,edx
c0012242:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012248:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001224c:	eb da                	jmp    c0012228 <VAS::VAS(bool)+0x70>
c001224e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012256:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c001225e:	7f 7a                	jg     c00122da <VAS::VAS(bool)+0x122>
c0012260:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012264:	2d 00 02 00 00       	sub    eax,0x200
c0012269:	c1 e0 0c             	shl    eax,0xc
c001226c:	83 c8 03             	or     eax,0x3
c001226f:	89 c2                	mov    edx,eax
c0012271:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c0012276:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001227c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012282:	83 e0 10             	and    eax,0x10
c0012285:	84 c0                	test   al,al
c0012287:	74 07                	je     c0012290 <VAS::VAS(bool)+0xd8>
c0012289:	b8 00 01 00 00       	mov    eax,0x100
c001228e:	eb 05                	jmp    c0012295 <VAS::VAS(bool)+0xdd>
c0012290:	b8 00 00 00 00       	mov    eax,0x0
c0012295:	09 d0                	or     eax,edx
c0012297:	89 c1                	mov    ecx,eax
c0012299:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001229d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00122a0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122a4:	c1 e2 02             	shl    edx,0x2
c00122a7:	01 d0                	add    eax,edx
c00122a9:	89 ca                	mov    edx,ecx
c00122ab:	89 10                	mov    DWORD PTR [eax],edx
c00122ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122b1:	2d 40 03 00 00       	sub    eax,0x340
c00122b6:	83 f8 7f             	cmp    eax,0x7f
c00122b9:	77 16                	ja     c00122d1 <VAS::VAS(bool)+0x119>
c00122bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00122c2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122c6:	c1 e2 02             	shl    edx,0x2
c00122c9:	01 d0                	add    eax,edx
c00122cb:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00122d1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00122d5:	e9 7c ff ff ff       	jmp    c0012256 <VAS::VAS(bool)+0x9e>
c00122da:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c00122df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122e5:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00122eb:	83 e0 10             	and    eax,0x10
c00122ee:	84 c0                	test   al,al
c00122f0:	74 07                	je     c00122f9 <VAS::VAS(bool)+0x141>
c00122f2:	b8 03 41 00 00       	mov    eax,0x4103
c00122f7:	eb 05                	jmp    c00122fe <VAS::VAS(bool)+0x146>
c00122f9:	b8 03 40 00 00       	mov    eax,0x4003
c00122fe:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012302:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012305:	81 c2 20 0c 00 00    	add    edx,0xc20
c001230b:	89 02                	mov    DWORD PTR [edx],eax
c001230d:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c0012312:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012318:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001231e:	83 ec 08             	sub    esp,0x8
c0012321:	50                   	push   eax
c0012322:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012326:	e8 bd fc ff ff       	call   c0011fe8 <VAS::setCPUSpecific(unsigned long)>
c001232b:	83 c4 10             	add    esp,0x10
c001232e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012332:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012335:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c001233a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012340:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012346:	83 e0 10             	and    eax,0x10
c0012349:	84 c0                	test   al,al
c001234b:	74 07                	je     c0012354 <VAS::VAS(bool)+0x19c>
c001234d:	b8 00 01 00 00       	mov    eax,0x100
c0012352:	eb 05                	jmp    c0012359 <VAS::VAS(bool)+0x1a1>
c0012354:	b8 00 00 00 00       	mov    eax,0x0
c0012359:	09 c2                	or     edx,eax
c001235b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001235f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012362:	05 fc 0f 00 00       	add    eax,0xffc
c0012367:	83 ca 03             	or     edx,0x3
c001236a:	89 10                	mov    DWORD PTR [eax],edx
c001236c:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c0012371:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012377:	83 ec 0c             	sub    esp,0xc
c001237a:	50                   	push   eax
c001237b:	e8 90 19 00 00       	call   c0013d10 <Device::getName()>
c0012380:	83 c4 10             	add    esp,0x10
c0012383:	83 ec 08             	sub    esp,0x8
c0012386:	68 27 77 02 c0       	push   0xc0027727
c001238b:	50                   	push   eax
c001238c:	e8 dc e3 fe ff       	call   c000076d <strcmp>
c0012391:	83 c4 10             	add    esp,0x10
c0012394:	85 c0                	test   eax,eax
c0012396:	0f 94 c0             	sete   al
c0012399:	84 c0                	test   al,al
c001239b:	74 70                	je     c001240d <VAS::VAS(bool)+0x255>
c001239d:	e8 46 9a 00 00       	call   c001bde8 <disableIRQs()>
c00123a2:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c00123a7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123ad:	05 7c 09 00 00       	add    eax,0x97c
c00123b2:	83 ec 0c             	sub    esp,0xc
c00123b5:	50                   	push   eax
c00123b6:	e8 83 cb ff ff       	call   c000ef3e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00123bb:	83 c4 10             	add    esp,0x10
c00123be:	25 00 f0 ff ff       	and    eax,0xfffff000
c00123c3:	89 c3                	mov    ebx,eax
c00123c5:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c00123ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123d0:	05 7c 09 00 00       	add    eax,0x97c
c00123d5:	83 ec 0c             	sub    esp,0xc
c00123d8:	50                   	push   eax
c00123d9:	e8 60 cb ff ff       	call   c000ef3e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00123de:	83 c4 10             	add    esp,0x10
c00123e1:	83 ec 08             	sub    esp,0x8
c00123e4:	50                   	push   eax
c00123e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00123e9:	e8 9c f5 ff ff       	call   c001198a <VAS::getPageTableEntry(unsigned long)>
c00123ee:	83 c4 10             	add    esp,0x10
c00123f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00123f3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00123f8:	6a 11                	push   0x11
c00123fa:	53                   	push   ebx
c00123fb:	50                   	push   eax
c00123fc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012400:	e8 0b f9 ff ff       	call   c0011d10 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012405:	83 c4 10             	add    esp,0x10
c0012408:	e8 e9 99 00 00       	call   c001bdf6 <enableIRQs()>
c001240d:	90                   	nop
c001240e:	83 c4 28             	add    esp,0x28
c0012411:	5b                   	pop    ebx
c0012412:	c3                   	ret    

c0012413 <mapVASFirstTime>:
c0012413:	55                   	push   ebp
c0012414:	57                   	push   edi
c0012415:	56                   	push   esi
c0012416:	53                   	push   ebx
c0012417:	83 ec 0c             	sub    esp,0xc
c001241a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001241f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012422:	4a                   	dec    edx
c0012423:	0f 84 8e 00 00 00    	je     c00124b7 <mapVASFirstTime+0xa4>
c0012429:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001242c:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c001242f:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012434:	c1 e5 15             	shl    ebp,0x15
c0012437:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c001243c:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012442:	29 eb                	sub    ebx,ebp
c0012444:	29 ee                	sub    esi,ebp
c0012446:	e8 21 d6 ff ff       	call   c000fa6c <Phys::allocatePage()>
c001244b:	83 ec 0c             	sub    esp,0xc
c001244e:	68 03 04 00 00       	push   0x403
c0012453:	6a 01                	push   0x1
c0012455:	53                   	push   ebx
c0012456:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001245c:	50                   	push   eax
c001245d:	57                   	push   edi
c001245e:	e8 a1 fb ff ff       	call   c0012004 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012463:	83 c4 20             	add    esp,0x20
c0012466:	39 f3                	cmp    ebx,esi
c0012468:	75 dc                	jne    c0012446 <mapVASFirstTime+0x33>
c001246a:	be 00 f0 ff 01       	mov    esi,0x1fff000
c001246f:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012474:	29 ee                	sub    esi,ebp
c0012476:	29 e8                	sub    eax,ebp
c0012478:	89 c5                	mov    ebp,eax
c001247a:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c001247e:	19 db                	sbb    ebx,ebx
c0012480:	e8 e7 d5 ff ff       	call   c000fa6c <Phys::allocatePage()>
c0012485:	83 e3 04             	and    ebx,0x4
c0012488:	83 ec 0c             	sub    esp,0xc
c001248b:	81 c3 03 04 00 00    	add    ebx,0x403
c0012491:	53                   	push   ebx
c0012492:	6a 01                	push   0x1
c0012494:	56                   	push   esi
c0012495:	81 ee 00 10 00 00    	sub    esi,0x1000
c001249b:	50                   	push   eax
c001249c:	57                   	push   edi
c001249d:	e8 62 fb ff ff       	call   c0012004 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124a2:	83 c4 20             	add    esp,0x20
c00124a5:	39 f5                	cmp    ebp,esi
c00124a7:	75 d1                	jne    c001247a <mapVASFirstTime+0x67>
c00124a9:	0f 20 d8             	mov    eax,cr3
c00124ac:	0f 22 d8             	mov    cr3,eax
c00124af:	83 c4 0c             	add    esp,0xc
c00124b2:	5b                   	pop    ebx
c00124b3:	5e                   	pop    esi
c00124b4:	5f                   	pop    edi
c00124b5:	5d                   	pop    ebp
c00124b6:	c3                   	ret    
c00124b7:	83 ec 0c             	sub    esp,0xc
c00124ba:	68 35 77 02 c0       	push   0xc0027735
c00124bf:	e8 71 01 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c00124c4:	83 c4 10             	add    esp,0x10
c00124c7:	83 c4 0c             	add    esp,0xc
c00124ca:	5b                   	pop    ebx
c00124cb:	5e                   	pop    esi
c00124cc:	5f                   	pop    edi
c00124cd:	5d                   	pop    ebp
c00124ce:	c3                   	ret    

c00124cf <__cxa_atexit>:
c00124cf:	31 c0                	xor    eax,eax
c00124d1:	c3                   	ret    

c00124d2 <__cxa_finalize>:
c00124d2:	c3                   	ret    

c00124d3 <__stack_chk_fail>:
c00124d3:	55                   	push   ebp
c00124d4:	89 e5                	mov    ebp,esp
c00124d6:	83 ec 14             	sub    esp,0x14
c00124d9:	68 4e 77 02 c0       	push   0xc002774e
c00124de:	e8 52 01 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c00124e3:	58                   	pop    eax
c00124e4:	5a                   	pop    edx
c00124e5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00124e8:	68 9e 77 02 c0       	push   0xc002779e
c00124ed:	e8 43 01 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c00124f2:	59                   	pop    ecx
c00124f3:	58                   	pop    eax
c00124f4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00124f7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00124fa:	68 9e 77 02 c0       	push   0xc002779e
c00124ff:	e8 31 01 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0012504:	5a                   	pop    edx
c0012505:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012508:	59                   	pop    ecx
c0012509:	8b 00                	mov    eax,DWORD PTR [eax]
c001250b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001250e:	68 9e 77 02 c0       	push   0xc002779e
c0012513:	e8 1d 01 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0012518:	5a                   	pop    edx
c0012519:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001251c:	59                   	pop    ecx
c001251d:	8b 00                	mov    eax,DWORD PTR [eax]
c001251f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012521:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012524:	68 9e 77 02 c0       	push   0xc002779e
c0012529:	e8 07 01 00 00       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001252e:	c7 04 24 a6 77 02 c0 	mov    DWORD PTR [esp],0xc00277a6
c0012535:	e8 bf 68 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c001253a:	83 c4 10             	add    esp,0x10
c001253d:	c9                   	leave  
c001253e:	c3                   	ret    

c001253f <__cxa_pure_virtual>:
c001253f:	83 ec 18             	sub    esp,0x18
c0012542:	68 be 77 02 c0       	push   0xc00277be
c0012547:	e8 ad 68 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c001254c:	83 c4 1c             	add    esp,0x1c
c001254f:	c3                   	ret    

c0012550 <operator new[](unsigned long)>:
c0012550:	e9 6d cf ff ff       	jmp    c000f4c2 <malloc>

c0012555 <operator delete(void*, unsigned long)>:
c0012555:	e9 88 cf ff ff       	jmp    c000f4e2 <rfree>

c001255a <operator delete[](void*)>:
c001255a:	e9 83 cf ff ff       	jmp    c000f4e2 <rfree>

c001255f <operator delete[](void*, unsigned long)>:
c001255f:	e9 7e cf ff ff       	jmp    c000f4e2 <rfree>

c0012564 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012564:	57                   	push   edi
c0012565:	b9 3f 00 00 00       	mov    ecx,0x3f
c001256a:	56                   	push   esi
c001256b:	be d4 77 02 c0       	mov    esi,0xc00277d4
c0012570:	53                   	push   ebx
c0012571:	83 ec 40             	sub    esp,0x40
c0012574:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012578:	8d 7c 24 01          	lea    edi,[esp+0x1]
c001257c:	fc                   	cld    
c001257d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001257f:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012583:	83 f9 3e             	cmp    ecx,0x3e
c0012586:	7e 05                	jle    c001258d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012588:	b9 3e 00 00 00       	mov    ecx,0x3e
c001258d:	89 df                	mov    edi,ebx
c001258f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012593:	eb 02                	jmp    c0012597 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012595:	89 c7                	mov    edi,eax
c0012597:	31 d2                	xor    edx,edx
c0012599:	46                   	inc    esi
c001259a:	89 f8                	mov    eax,edi
c001259c:	f7 f1                	div    ecx
c001259e:	39 cf                	cmp    edi,ecx
c00125a0:	73 f3                	jae    c0012595 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c00125a2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00125a5:	eb 02                	jmp    c00125a9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c00125a7:	89 c3                	mov    ebx,eax
c00125a9:	31 d2                	xor    edx,edx
c00125ab:	4e                   	dec    esi
c00125ac:	89 d8                	mov    eax,ebx
c00125ae:	f7 f1                	div    ecx
c00125b0:	39 cb                	cmp    ebx,ecx
c00125b2:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c00125b6:	88 16                	mov    BYTE PTR [esi],dl
c00125b8:	73 ed                	jae    c00125a7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c00125ba:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00125be:	83 c4 40             	add    esp,0x40
c00125c1:	5b                   	pop    ebx
c00125c2:	5e                   	pop    esi
c00125c3:	5f                   	pop    edi
c00125c4:	c3                   	ret    

c00125c5 <Dbg::logc(char)>:
c00125c5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00125c9:	ba fd 03 00 00       	mov    edx,0x3fd
c00125ce:	ec                   	in     al,dx
c00125cf:	a8 20                	test   al,0x20
c00125d1:	74 fb                	je     c00125ce <Dbg::logc(char)+0x9>
c00125d3:	ba f8 03 00 00       	mov    edx,0x3f8
c00125d8:	88 c8                	mov    al,cl
c00125da:	ee                   	out    dx,al
c00125db:	c3                   	ret    

c00125dc <Dbg::logs(char*)>:
c00125dc:	53                   	push   ebx
c00125dd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00125e1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00125e4:	84 c0                	test   al,al
c00125e6:	74 0f                	je     c00125f7 <Dbg::logs(char*)+0x1b>
c00125e8:	50                   	push   eax
c00125e9:	43                   	inc    ebx
c00125ea:	e8 d6 ff ff ff       	call   c00125c5 <Dbg::logc(char)>
c00125ef:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00125f2:	5a                   	pop    edx
c00125f3:	84 c0                	test   al,al
c00125f5:	75 f1                	jne    c00125e8 <Dbg::logs(char*)+0xc>
c00125f7:	5b                   	pop    ebx
c00125f8:	c3                   	ret    

c00125f9 <Dbg::logWriteInt(unsigned int)>:
c00125f9:	83 ec 10             	sub    esp,0x10
c00125fc:	6a 0a                	push   0xa
c00125fe:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012602:	50                   	push   eax
c0012603:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012607:	e8 58 ff ff ff       	call   c0012564 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001260c:	50                   	push   eax
c001260d:	e8 ca ff ff ff       	call   c00125dc <Dbg::logs(char*)>
c0012612:	83 c4 20             	add    esp,0x20
c0012615:	c3                   	ret    

c0012616 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012616:	83 ec 10             	sub    esp,0x10
c0012619:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001261d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012621:	50                   	push   eax
c0012622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012626:	e8 39 ff ff ff       	call   c0012564 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001262b:	50                   	push   eax
c001262c:	e8 ab ff ff ff       	call   c00125dc <Dbg::logs(char*)>
c0012631:	83 c4 20             	add    esp,0x20
c0012634:	c3                   	ret    

c0012635 <Dbg::kprintf(char const*, ...)>:
c0012635:	55                   	push   ebp
c0012636:	57                   	push   edi
c0012637:	56                   	push   esi
c0012638:	53                   	push   ebx
c0012639:	83 ec 0c             	sub    esp,0xc
c001263c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012640:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012644:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012648:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001264b:	84 c0                	test   al,al
c001264d:	74 4a                	je     c0012699 <Dbg::kprintf(char const*, ...)+0x64>
c001264f:	31 db                	xor    ebx,ebx
c0012651:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012654:	3c 25                	cmp    al,0x25
c0012656:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012659:	0f 85 e4 00 00 00    	jne    c0012743 <Dbg::kprintf(char const*, ...)+0x10e>
c001265f:	83 c3 02             	add    ebx,0x2
c0012662:	8a 07                	mov    al,BYTE PTR [edi]
c0012664:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012667:	83 e8 25             	sub    eax,0x25
c001266a:	3c 53                	cmp    al,0x53
c001266c:	0f 87 ba 00 00 00    	ja     c001272c <Dbg::kprintf(char const*, ...)+0xf7>
c0012672:	0f b6 c0             	movzx  eax,al
c0012675:	ff 24 85 14 78 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd87ec]
c001267c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012680:	89 c8                	mov    eax,ecx
c0012682:	83 c1 04             	add    ecx,0x4
c0012685:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012689:	ff 30                	push   DWORD PTR [eax]
c001268b:	e8 4c ff ff ff       	call   c00125dc <Dbg::logs(char*)>
c0012690:	58                   	pop    eax
c0012691:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012695:	84 c0                	test   al,al
c0012697:	75 b8                	jne    c0012651 <Dbg::kprintf(char const*, ...)+0x1c>
c0012699:	83 c4 0c             	add    esp,0xc
c001269c:	5b                   	pop    ebx
c001269d:	5e                   	pop    esi
c001269e:	5f                   	pop    edi
c001269f:	5d                   	pop    ebp
c00126a0:	c3                   	ret    
c00126a1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00126a5:	89 d0                	mov    eax,edx
c00126a7:	83 c2 04             	add    edx,0x4
c00126aa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00126ae:	ff 30                	push   DWORD PTR [eax]
c00126b0:	e8 44 ff ff ff       	call   c00125f9 <Dbg::logWriteInt(unsigned int)>
c00126b5:	58                   	pop    eax
c00126b6:	eb d9                	jmp    c0012691 <Dbg::kprintf(char const*, ...)+0x5c>
c00126b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00126bc:	89 d0                	mov    eax,edx
c00126be:	83 c2 04             	add    edx,0x4
c00126c1:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00126c4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00126c8:	50                   	push   eax
c00126c9:	e8 f7 fe ff ff       	call   c00125c5 <Dbg::logc(char)>
c00126ce:	58                   	pop    eax
c00126cf:	eb c0                	jmp    c0012691 <Dbg::kprintf(char const*, ...)+0x5c>
c00126d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00126d5:	89 c8                	mov    eax,ecx
c00126d7:	83 c1 04             	add    ecx,0x4
c00126da:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00126de:	ff 30                	push   DWORD PTR [eax]
c00126e0:	e8 14 ff ff ff       	call   c00125f9 <Dbg::logWriteInt(unsigned int)>
c00126e5:	5f                   	pop    edi
c00126e6:	eb a9                	jmp    c0012691 <Dbg::kprintf(char const*, ...)+0x5c>
c00126e8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00126ec:	89 c8                	mov    eax,ecx
c00126ee:	83 c1 04             	add    ecx,0x4
c00126f1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00126f5:	6a 10                	push   0x10
c00126f7:	ff 30                	push   DWORD PTR [eax]
c00126f9:	e8 18 ff ff ff       	call   c0012616 <Dbg::logWriteIntBase(unsigned int, int)>
c00126fe:	59                   	pop    ecx
c00126ff:	5f                   	pop    edi
c0012700:	eb 8f                	jmp    c0012691 <Dbg::kprintf(char const*, ...)+0x5c>
c0012702:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012706:	89 d0                	mov    eax,edx
c0012708:	83 c2 08             	add    edx,0x8
c001270b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001270f:	6a 10                	push   0x10
c0012711:	ff 30                	push   DWORD PTR [eax]
c0012713:	e8 fe fe ff ff       	call   c0012616 <Dbg::logWriteIntBase(unsigned int, int)>
c0012718:	58                   	pop    eax
c0012719:	5a                   	pop    edx
c001271a:	e9 72 ff ff ff       	jmp    c0012691 <Dbg::kprintf(char const*, ...)+0x5c>
c001271f:	6a 25                	push   0x25
c0012721:	e8 9f fe ff ff       	call   c00125c5 <Dbg::logc(char)>
c0012726:	58                   	pop    eax
c0012727:	e9 65 ff ff ff       	jmp    c0012691 <Dbg::kprintf(char const*, ...)+0x5c>
c001272c:	6a 25                	push   0x25
c001272e:	e8 92 fe ff ff       	call   c00125c5 <Dbg::logc(char)>
c0012733:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012736:	50                   	push   eax
c0012737:	e8 89 fe ff ff       	call   c00125c5 <Dbg::logc(char)>
c001273c:	5a                   	pop    edx
c001273d:	59                   	pop    ecx
c001273e:	e9 4e ff ff ff       	jmp    c0012691 <Dbg::kprintf(char const*, ...)+0x5c>
c0012743:	50                   	push   eax
c0012744:	89 eb                	mov    ebx,ebp
c0012746:	e8 7a fe ff ff       	call   c00125c5 <Dbg::logc(char)>
c001274b:	89 fd                	mov    ebp,edi
c001274d:	58                   	pop    eax
c001274e:	e9 3e ff ff ff       	jmp    c0012691 <Dbg::kprintf(char const*, ...)+0x5c>
c0012753:	90                   	nop

c0012754 <File::read(unsigned long long, void*, int*)>:
c0012754:	53                   	push   ebx
c0012755:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012759:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001275d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012764:	3c 19                	cmp    al,0x19
c0012766:	77 35                	ja     c001279d <File::read(unsigned long long, void*, int*)+0x49>
c0012768:	8b 04 85 40 b1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4ec0]
c001276f:	85 c0                	test   eax,eax
c0012771:	74 2a                	je     c001279d <File::read(unsigned long long, void*, int*)+0x49>
c0012773:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012779:	85 c0                	test   eax,eax
c001277b:	74 20                	je     c001279d <File::read(unsigned long long, void*, int*)+0x49>
c001277d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012781:	74 21                	je     c00127a4 <File::read(unsigned long long, void*, int*)+0x50>
c0012783:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012785:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012789:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012797:	5b                   	pop    ebx
c0012798:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c001279b:	ff e0                	jmp    eax
c001279d:	b8 0b 00 00 00       	mov    eax,0xb
c00127a2:	eb 05                	jmp    c00127a9 <File::read(unsigned long long, void*, int*)+0x55>
c00127a4:	b8 05 00 00 00       	mov    eax,0x5
c00127a9:	5b                   	pop    ebx
c00127aa:	c3                   	ret    
c00127ab:	90                   	nop

c00127ac <File::write(unsigned long long, void*, int*)>:
c00127ac:	53                   	push   ebx
c00127ad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127b1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00127b5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00127bc:	3c 19                	cmp    al,0x19
c00127be:	77 35                	ja     c00127f5 <File::write(unsigned long long, void*, int*)+0x49>
c00127c0:	8b 04 85 40 b1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4ec0]
c00127c7:	85 c0                	test   eax,eax
c00127c9:	74 2a                	je     c00127f5 <File::write(unsigned long long, void*, int*)+0x49>
c00127cb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00127d1:	85 c0                	test   eax,eax
c00127d3:	74 20                	je     c00127f5 <File::write(unsigned long long, void*, int*)+0x49>
c00127d5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00127d9:	74 21                	je     c00127fc <File::write(unsigned long long, void*, int*)+0x50>
c00127db:	8b 08                	mov    ecx,DWORD PTR [eax]
c00127dd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00127e1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00127e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00127eb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127ef:	5b                   	pop    ebx
c00127f0:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00127f3:	ff e0                	jmp    eax
c00127f5:	b8 0b 00 00 00       	mov    eax,0xb
c00127fa:	eb 05                	jmp    c0012801 <File::write(unsigned long long, void*, int*)+0x55>
c00127fc:	b8 05 00 00 00       	mov    eax,0x5
c0012801:	5b                   	pop    ebx
c0012802:	c3                   	ret    
c0012803:	90                   	nop

c0012804 <Directory::read(unsigned long long, void*, int*)>:
c0012804:	53                   	push   ebx
c0012805:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012809:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001280d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012814:	3c 19                	cmp    al,0x19
c0012816:	77 35                	ja     c001284d <Directory::read(unsigned long long, void*, int*)+0x49>
c0012818:	8b 04 85 40 b1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4ec0]
c001281f:	85 c0                	test   eax,eax
c0012821:	74 2a                	je     c001284d <Directory::read(unsigned long long, void*, int*)+0x49>
c0012823:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012829:	85 c0                	test   eax,eax
c001282b:	74 20                	je     c001284d <Directory::read(unsigned long long, void*, int*)+0x49>
c001282d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012831:	74 21                	je     c0012854 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012833:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012835:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012839:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001283f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012843:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012847:	5b                   	pop    ebx
c0012848:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001284b:	ff e0                	jmp    eax
c001284d:	b8 0b 00 00 00       	mov    eax,0xb
c0012852:	eb 05                	jmp    c0012859 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012854:	b8 05 00 00 00       	mov    eax,0x5
c0012859:	5b                   	pop    ebx
c001285a:	c3                   	ret    
c001285b:	90                   	nop

c001285c <Directory::write(unsigned long long, void*, int*)>:
c001285c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012860:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012867:	b8 0b 00 00 00       	mov    eax,0xb
c001286c:	80 fa 19             	cmp    dl,0x19
c001286f:	77 18                	ja     c0012889 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012871:	8b 14 95 40 b1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4ec0]
c0012878:	85 d2                	test   edx,edx
c001287a:	74 0d                	je     c0012889 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001287c:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012883:	19 c0                	sbb    eax,eax
c0012885:	83 e0 0a             	and    eax,0xa
c0012888:	40                   	inc    eax
c0012889:	c3                   	ret    

c001288a <File::isAtty()>:
c001288a:	31 c0                	xor    eax,eax
c001288c:	c3                   	ret    
c001288d:	90                   	nop

c001288e <Directory::isAtty()>:
c001288e:	31 c0                	xor    eax,eax
c0012890:	c3                   	ret    
c0012891:	90                   	nop

c0012892 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012892:	b8 0a 00 00 00       	mov    eax,0xa
c0012897:	c3                   	ret    

c0012898 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012898:	b8 0a 00 00 00       	mov    eax,0xa
c001289d:	c3                   	ret    

c001289e <File::~File()>:
c001289e:	83 ec 0c             	sub    esp,0xc
c00128a1:	ba d0 79 02 c0       	mov    edx,0xc00279d0
c00128a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128aa:	89 10                	mov    DWORD PTR [eax],edx
c00128ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128b0:	83 ec 0c             	sub    esp,0xc
c00128b3:	50                   	push   eax
c00128b4:	e8 2b eb ff ff       	call   c00113e4 <UnixFile::~UnixFile()>
c00128b9:	83 c4 10             	add    esp,0x10
c00128bc:	90                   	nop
c00128bd:	83 c4 0c             	add    esp,0xc
c00128c0:	c3                   	ret    
c00128c1:	90                   	nop

c00128c2 <File::~File()>:
c00128c2:	83 ec 0c             	sub    esp,0xc
c00128c5:	83 ec 0c             	sub    esp,0xc
c00128c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128cc:	e8 cd ff ff ff       	call   c001289e <File::~File()>
c00128d1:	83 c4 10             	add    esp,0x10
c00128d4:	83 ec 08             	sub    esp,0x8
c00128d7:	68 14 01 00 00       	push   0x114
c00128dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128e0:	e8 70 fc ff ff       	call   c0012555 <operator delete(void*, unsigned long)>
c00128e5:	83 c4 10             	add    esp,0x10
c00128e8:	83 c4 0c             	add    esp,0xc
c00128eb:	c3                   	ret    

c00128ec <Directory::~Directory()>:
c00128ec:	83 ec 0c             	sub    esp,0xc
c00128ef:	ba ec 79 02 c0       	mov    edx,0xc00279ec
c00128f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128f8:	89 10                	mov    DWORD PTR [eax],edx
c00128fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128fe:	83 ec 0c             	sub    esp,0xc
c0012901:	50                   	push   eax
c0012902:	e8 dd ea ff ff       	call   c00113e4 <UnixFile::~UnixFile()>
c0012907:	83 c4 10             	add    esp,0x10
c001290a:	90                   	nop
c001290b:	83 c4 0c             	add    esp,0xc
c001290e:	c3                   	ret    
c001290f:	90                   	nop

c0012910 <Directory::~Directory()>:
c0012910:	83 ec 0c             	sub    esp,0xc
c0012913:	83 ec 0c             	sub    esp,0xc
c0012916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001291a:	e8 cd ff ff ff       	call   c00128ec <Directory::~Directory()>
c001291f:	83 c4 10             	add    esp,0x10
c0012922:	83 ec 08             	sub    esp,0x8
c0012925:	68 14 01 00 00       	push   0x114
c001292a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001292e:	e8 22 fc ff ff       	call   c0012555 <operator delete(void*, unsigned long)>
c0012933:	83 c4 10             	add    esp,0x10
c0012936:	83 c4 0c             	add    esp,0xc
c0012939:	c3                   	ret    

c001293a <Filesystem::Filesystem()>:
c001293a:	ba 6c 79 02 c0       	mov    edx,0xc002796c
c001293f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012943:	89 10                	mov    DWORD PTR [eax],edx
c0012945:	8b 15 a8 ac 02 c0    	mov    edx,DWORD PTR ds:0xc002aca8
c001294b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001294f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012952:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012956:	a3 a8 ac 02 c0       	mov    ds:0xc002aca8,eax
c001295b:	90                   	nop
c001295c:	c3                   	ret    
c001295d:	90                   	nop

c001295e <Filesystem::~Filesystem()>:
c001295e:	ba 6c 79 02 c0       	mov    edx,0xc002796c
c0012963:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012967:	89 10                	mov    DWORD PTR [eax],edx
c0012969:	90                   	nop
c001296a:	c3                   	ret    
c001296b:	90                   	nop

c001296c <Filesystem::~Filesystem()>:
c001296c:	83 ec 0c             	sub    esp,0xc
c001296f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012973:	e8 e6 ff ff ff       	call   c001295e <Filesystem::~Filesystem()>
c0012978:	83 c4 04             	add    esp,0x4
c001297b:	83 ec 08             	sub    esp,0x8
c001297e:	6a 08                	push   0x8
c0012980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012984:	e8 cc fb ff ff       	call   c0012555 <operator delete(void*, unsigned long)>
c0012989:	83 c4 10             	add    esp,0x10
c001298c:	83 c4 0c             	add    esp,0xc
c001298f:	c3                   	ret    

c0012990 <initVFS()>:
c0012990:	83 ec 18             	sub    esp,0x18
c0012993:	6a 08                	push   0x8
c0012995:	e8 28 cb ff ff       	call   c000f4c2 <malloc>
c001299a:	89 04 24             	mov    DWORD PTR [esp],eax
c001299d:	e8 8e c3 00 00       	call   c001ed30 <FAT::FAT()>
c00129a2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00129a9:	e8 14 cb ff ff       	call   c000f4c2 <malloc>
c00129ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00129b1:	e8 f0 d5 00 00       	call   c001ffa6 <ISO9660::ISO9660()>
c00129b6:	83 c4 1c             	add    esp,0x1c
c00129b9:	c3                   	ret    

c00129ba <standardiseFiles(char*, char const*, char const*)>:
c00129ba:	55                   	push   ebp
c00129bb:	57                   	push   edi
c00129bc:	56                   	push   esi
c00129bd:	53                   	push   ebx
c00129be:	81 ec 10 04 00 00    	sub    esp,0x410
c00129c4:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00129cb:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00129d2:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00129d9:	68 00 04 00 00       	push   0x400
c00129de:	6a 00                	push   0x0
c00129e0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00129e4:	56                   	push   esi
c00129e5:	e8 93 dc fe ff       	call   c000067d <memset>
c00129ea:	83 c4 10             	add    esp,0x10
c00129ed:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00129f1:	75 0b                	jne    c00129fe <standardiseFiles(char*, char const*, char const*)+0x44>
c00129f3:	50                   	push   eax
c00129f4:	50                   	push   eax
c00129f5:	57                   	push   edi
c00129f6:	56                   	push   esi
c00129f7:	e8 20 dd fe ff       	call   c000071c <strcpy>
c00129fc:	eb 41                	jmp    c0012a3f <standardiseFiles(char*, char const*, char const*)+0x85>
c00129fe:	8a 07                	mov    al,BYTE PTR [edi]
c0012a00:	3c 5c                	cmp    al,0x5c
c0012a02:	74 04                	je     c0012a08 <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012a04:	3c 2f                	cmp    al,0x2f
c0012a06:	75 18                	jne    c0012a20 <standardiseFiles(char*, char const*, char const*)+0x66>
c0012a08:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012a0b:	3c 60                	cmp    al,0x60
c0012a0d:	7e 03                	jle    c0012a12 <standardiseFiles(char*, char const*, char const*)+0x58>
c0012a0f:	83 e8 20             	sub    eax,0x20
c0012a12:	88 04 24             	mov    BYTE PTR [esp],al
c0012a15:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012a1c:	50                   	push   eax
c0012a1d:	50                   	push   eax
c0012a1e:	eb 18                	jmp    c0012a38 <standardiseFiles(char*, char const*, char const*)+0x7e>
c0012a20:	50                   	push   eax
c0012a21:	50                   	push   eax
c0012a22:	55                   	push   ebp
c0012a23:	56                   	push   esi
c0012a24:	e8 f3 dc fe ff       	call   c000071c <strcpy>
c0012a29:	5a                   	pop    edx
c0012a2a:	59                   	pop    ecx
c0012a2b:	68 81 8c 02 c0       	push   0xc0028c81
c0012a30:	56                   	push   esi
c0012a31:	e8 9d dd fe ff       	call   c00007d3 <strcat>
c0012a36:	5d                   	pop    ebp
c0012a37:	58                   	pop    eax
c0012a38:	57                   	push   edi
c0012a39:	56                   	push   esi
c0012a3a:	e8 94 dd fe ff       	call   c00007d3 <strcat>
c0012a3f:	83 c4 10             	add    esp,0x10
c0012a42:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012a45:	3c 60                	cmp    al,0x60
c0012a47:	7e 03                	jle    c0012a4c <standardiseFiles(char*, char const*, char const*)+0x92>
c0012a49:	83 e8 20             	sub    eax,0x20
c0012a4c:	88 04 24             	mov    BYTE PTR [esp],al
c0012a4f:	88 03                	mov    BYTE PTR [ebx],al
c0012a51:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012a58:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012a5e:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012a62:	bf 03 00 00 00       	mov    edi,0x3
c0012a67:	b8 03 00 00 00       	mov    eax,0x3
c0012a6c:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012a6f:	84 d2                	test   dl,dl
c0012a71:	0f 84 91 00 00 00    	je     c0012b08 <standardiseFiles(char*, char const*, char const*)+0x14e>
c0012a77:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012a7a:	80 fa 5c             	cmp    dl,0x5c
c0012a7d:	74 05                	je     c0012a84 <standardiseFiles(char*, char const*, char const*)+0xca>
c0012a7f:	80 fa 2f             	cmp    dl,0x2f
c0012a82:	75 12                	jne    c0012a96 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012a84:	89 c5                	mov    ebp,eax
c0012a86:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012a8b:	74 09                	je     c0012a96 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012a8d:	40                   	inc    eax
c0012a8e:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012a92:	89 cf                	mov    edi,ecx
c0012a94:	eb d6                	jmp    c0012a6c <standardiseFiles(char*, char const*, char const*)+0xb2>
c0012a96:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012a9b:	75 5b                	jne    c0012af8 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012a9d:	80 fa 2e             	cmp    dl,0x2e
c0012aa0:	75 56                	jne    c0012af8 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012aa2:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012aa6:	74 19                	je     c0012ac1 <standardiseFiles(char*, char const*, char const*)+0x107>
c0012aa8:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012aad:	74 53                	je     c0012b02 <standardiseFiles(char*, char const*, char const*)+0x148>
c0012aaf:	89 f9                	mov    ecx,edi
c0012ab1:	41                   	inc    ecx
c0012ab2:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012ab5:	80 fa 2f             	cmp    dl,0x2f
c0012ab8:	74 f7                	je     c0012ab1 <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012aba:	80 fa 5c             	cmp    dl,0x5c
c0012abd:	74 f2                	je     c0012ab1 <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012abf:	eb d1                	jmp    c0012a92 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ac1:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012ac6:	74 3a                	je     c0012b02 <standardiseFiles(char*, char const*, char const*)+0x148>
c0012ac8:	83 f8 03             	cmp    eax,0x3
c0012acb:	74 c5                	je     c0012a92 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012acd:	41                   	inc    ecx
c0012ace:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012ad1:	80 fa 2f             	cmp    dl,0x2f
c0012ad4:	74 f7                	je     c0012acd <standardiseFiles(char*, char const*, char const*)+0x113>
c0012ad6:	80 fa 5c             	cmp    dl,0x5c
c0012ad9:	74 f2                	je     c0012acd <standardiseFiles(char*, char const*, char const*)+0x113>
c0012adb:	48                   	dec    eax
c0012adc:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012ae0:	75 06                	jne    c0012ae8 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012ae2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ae6:	eb f3                	jmp    c0012adb <standardiseFiles(char*, char const*, char const*)+0x121>
c0012ae8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012aec:	74 07                	je     c0012af5 <standardiseFiles(char*, char const*, char const*)+0x13b>
c0012aee:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012af2:	48                   	dec    eax
c0012af3:	eb f3                	jmp    c0012ae8 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012af5:	40                   	inc    eax
c0012af6:	eb 9a                	jmp    c0012a92 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012af8:	80 fa 2f             	cmp    dl,0x2f
c0012afb:	74 95                	je     c0012a92 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012afd:	80 fa 5c             	cmp    dl,0x5c
c0012b00:	74 90                	je     c0012a92 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b02:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012b05:	40                   	inc    eax
c0012b06:	eb 8a                	jmp    c0012a92 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b08:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b0c:	83 ec 0c             	sub    esp,0xc
c0012b0f:	53                   	push   ebx
c0012b10:	e8 85 db fe ff       	call   c000069a <strlen>
c0012b15:	83 c4 10             	add    esp,0x10
c0012b18:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012b1d:	75 26                	jne    c0012b45 <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012b1f:	83 ec 0c             	sub    esp,0xc
c0012b22:	53                   	push   ebx
c0012b23:	e8 72 db fe ff       	call   c000069a <strlen>
c0012b28:	83 c4 10             	add    esp,0x10
c0012b2b:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012b30:	74 26                	je     c0012b58 <standardiseFiles(char*, char const*, char const*)+0x19e>
c0012b32:	83 ec 0c             	sub    esp,0xc
c0012b35:	53                   	push   ebx
c0012b36:	e8 5f db fe ff       	call   c000069a <strlen>
c0012b3b:	83 c4 10             	add    esp,0x10
c0012b3e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012b43:	eb c7                	jmp    c0012b0c <standardiseFiles(char*, char const*, char const*)+0x152>
c0012b45:	83 ec 0c             	sub    esp,0xc
c0012b48:	53                   	push   ebx
c0012b49:	e8 4c db fe ff       	call   c000069a <strlen>
c0012b4e:	83 c4 10             	add    esp,0x10
c0012b51:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012b56:	74 c7                	je     c0012b1f <standardiseFiles(char*, char const*, char const*)+0x165>
c0012b58:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012b5e:	5b                   	pop    ebx
c0012b5f:	5e                   	pop    esi
c0012b60:	5f                   	pop    edi
c0012b61:	5d                   	pop    ebp
c0012b62:	c3                   	ret    
c0012b63:	90                   	nop

c0012b64 <File::File(char const*, Process*)>:
c0012b64:	83 ec 0c             	sub    esp,0xc
c0012b67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b6b:	83 ec 08             	sub    esp,0x8
c0012b6e:	6a 00                	push   0x0
c0012b70:	50                   	push   eax
c0012b71:	e8 8c e6 ff ff       	call   c0011202 <UnixFile::UnixFile(int)>
c0012b76:	83 c4 10             	add    esp,0x10
c0012b79:	ba d0 79 02 c0       	mov    edx,0xc00279d0
c0012b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b82:	89 10                	mov    DWORD PTR [eax],edx
c0012b84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012b88:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012b8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b92:	83 c0 0d             	add    eax,0xd
c0012b95:	83 ec 04             	sub    esp,0x4
c0012b98:	52                   	push   edx
c0012b99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b9d:	50                   	push   eax
c0012b9e:	e8 17 fe ff ff       	call   c00129ba <standardiseFiles(char*, char const*, char const*)>
c0012ba3:	83 c4 10             	add    esp,0x10
c0012ba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012baa:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012bad:	8d 50 bf             	lea    edx,[eax-0x41]
c0012bb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bb4:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012bba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bbe:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012bc2:	90                   	nop
c0012bc3:	83 c4 0c             	add    esp,0xc
c0012bc6:	c3                   	ret    
c0012bc7:	90                   	nop

c0012bc8 <File::open(FileOpenMode)>:
c0012bc8:	53                   	push   ebx
c0012bc9:	b8 0b 00 00 00       	mov    eax,0xb
c0012bce:	83 ec 08             	sub    esp,0x8
c0012bd1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012bd5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012bdc:	80 fa 19             	cmp    dl,0x19
c0012bdf:	77 40                	ja     c0012c21 <File::open(FileOpenMode)+0x59>
c0012be1:	8b 14 95 40 b1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4ec0]
c0012be8:	85 d2                	test   edx,edx
c0012bea:	74 35                	je     c0012c21 <File::open(FileOpenMode)+0x59>
c0012bec:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012bf2:	85 d2                	test   edx,edx
c0012bf4:	74 2b                	je     c0012c21 <File::open(FileOpenMode)+0x59>
c0012bf6:	b8 06 00 00 00       	mov    eax,0x6
c0012bfb:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012bff:	75 20                	jne    c0012c21 <File::open(FileOpenMode)+0x59>
c0012c01:	8b 02                	mov    eax,DWORD PTR [edx]
c0012c03:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012c09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c0d:	51                   	push   ecx
c0012c0e:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012c11:	51                   	push   ecx
c0012c12:	52                   	push   edx
c0012c13:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012c16:	83 c4 10             	add    esp,0x10
c0012c19:	85 c0                	test   eax,eax
c0012c1b:	75 04                	jne    c0012c21 <File::open(FileOpenMode)+0x59>
c0012c1d:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012c21:	83 c4 08             	add    esp,0x8
c0012c24:	5b                   	pop    ebx
c0012c25:	c3                   	ret    

c0012c26 <File::close()>:
c0012c26:	53                   	push   ebx
c0012c27:	b8 0b 00 00 00       	mov    eax,0xb
c0012c2c:	83 ec 08             	sub    esp,0x8
c0012c2f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012c33:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012c3a:	80 fa 19             	cmp    dl,0x19
c0012c3d:	77 41                	ja     c0012c80 <File::close()+0x5a>
c0012c3f:	8b 1c 95 40 b1 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd4ec0]
c0012c46:	85 db                	test   ebx,ebx
c0012c48:	74 36                	je     c0012c80 <File::close()+0x5a>
c0012c4a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012c51:	74 2d                	je     c0012c80 <File::close()+0x5a>
c0012c53:	b8 05 00 00 00       	mov    eax,0x5
c0012c58:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012c5c:	74 22                	je     c0012c80 <File::close()+0x5a>
c0012c5e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012c62:	8b 04 95 40 b1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd4ec0]
c0012c69:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012c6f:	53                   	push   ebx
c0012c70:	53                   	push   ebx
c0012c71:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c73:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012c79:	50                   	push   eax
c0012c7a:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012c7d:	83 c4 10             	add    esp,0x10
c0012c80:	83 c4 08             	add    esp,0x8
c0012c83:	5b                   	pop    ebx
c0012c84:	c3                   	ret    
c0012c85:	90                   	nop

c0012c86 <File::seek(unsigned long long)>:
c0012c86:	56                   	push   esi
c0012c87:	53                   	push   ebx
c0012c88:	b8 0b 00 00 00       	mov    eax,0xb
c0012c8d:	51                   	push   ecx
c0012c8e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012c92:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012c96:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012c9d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012ca1:	80 fa 19             	cmp    dl,0x19
c0012ca4:	77 31                	ja     c0012cd7 <File::seek(unsigned long long)+0x51>
c0012ca6:	8b 14 95 40 b1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4ec0]
c0012cad:	85 d2                	test   edx,edx
c0012caf:	74 26                	je     c0012cd7 <File::seek(unsigned long long)+0x51>
c0012cb1:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012cb7:	85 d2                	test   edx,edx
c0012cb9:	74 1c                	je     c0012cd7 <File::seek(unsigned long long)+0x51>
c0012cbb:	b8 05 00 00 00       	mov    eax,0x5
c0012cc0:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012cc4:	74 11                	je     c0012cd7 <File::seek(unsigned long long)+0x51>
c0012cc6:	8b 02                	mov    eax,DWORD PTR [edx]
c0012cc8:	53                   	push   ebx
c0012cc9:	51                   	push   ecx
c0012cca:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012cd0:	52                   	push   edx
c0012cd1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012cd4:	83 c4 10             	add    esp,0x10
c0012cd7:	5a                   	pop    edx
c0012cd8:	5b                   	pop    ebx
c0012cd9:	5e                   	pop    esi
c0012cda:	c3                   	ret    
c0012cdb:	90                   	nop

c0012cdc <File::tell(unsigned long long*)>:
c0012cdc:	83 ec 0c             	sub    esp,0xc
c0012cdf:	b8 0b 00 00 00       	mov    eax,0xb
c0012ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012ce8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012cef:	80 fa 19             	cmp    dl,0x19
c0012cf2:	77 34                	ja     c0012d28 <File::tell(unsigned long long*)+0x4c>
c0012cf4:	8b 14 95 40 b1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4ec0]
c0012cfb:	85 d2                	test   edx,edx
c0012cfd:	74 29                	je     c0012d28 <File::tell(unsigned long long*)+0x4c>
c0012cff:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d05:	85 d2                	test   edx,edx
c0012d07:	74 1f                	je     c0012d28 <File::tell(unsigned long long*)+0x4c>
c0012d09:	b8 05 00 00 00       	mov    eax,0x5
c0012d0e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d12:	74 14                	je     c0012d28 <File::tell(unsigned long long*)+0x4c>
c0012d14:	50                   	push   eax
c0012d15:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d17:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d1b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d21:	52                   	push   edx
c0012d22:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012d25:	83 c4 10             	add    esp,0x10
c0012d28:	83 c4 0c             	add    esp,0xc
c0012d2b:	c3                   	ret    

c0012d2c <File::rewind()>:
c0012d2c:	83 ec 10             	sub    esp,0x10
c0012d2f:	6a 00                	push   0x0
c0012d31:	6a 00                	push   0x0
c0012d33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d37:	e8 4a ff ff ff       	call   c0012c86 <File::seek(unsigned long long)>
c0012d3c:	83 c4 1c             	add    esp,0x1c
c0012d3f:	c3                   	ret    

c0012d40 <File::unlink()>:
c0012d40:	83 ec 0c             	sub    esp,0xc
c0012d43:	b8 0b 00 00 00       	mov    eax,0xb
c0012d48:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d4c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d53:	80 f9 19             	cmp    cl,0x19
c0012d56:	77 2f                	ja     c0012d87 <File::unlink()+0x47>
c0012d58:	8b 0c 8d 40 b1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4ec0]
c0012d5f:	85 c9                	test   ecx,ecx
c0012d61:	74 24                	je     c0012d87 <File::unlink()+0x47>
c0012d63:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d69:	85 c9                	test   ecx,ecx
c0012d6b:	74 1a                	je     c0012d87 <File::unlink()+0x47>
c0012d6d:	b8 06 00 00 00       	mov    eax,0x6
c0012d72:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d76:	75 0f                	jne    c0012d87 <File::unlink()+0x47>
c0012d78:	83 c2 0d             	add    edx,0xd
c0012d7b:	50                   	push   eax
c0012d7c:	50                   	push   eax
c0012d7d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012d7f:	52                   	push   edx
c0012d80:	51                   	push   ecx
c0012d81:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012d84:	83 c4 10             	add    esp,0x10
c0012d87:	83 c4 0c             	add    esp,0xc
c0012d8a:	c3                   	ret    
c0012d8b:	90                   	nop

c0012d8c <File::rename(char const*)>:
c0012d8c:	83 ec 0c             	sub    esp,0xc
c0012d8f:	b8 0b 00 00 00       	mov    eax,0xb
c0012d94:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d98:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d9f:	80 f9 19             	cmp    cl,0x19
c0012da2:	77 32                	ja     c0012dd6 <File::rename(char const*)+0x4a>
c0012da4:	8b 0c 8d 40 b1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4ec0]
c0012dab:	85 c9                	test   ecx,ecx
c0012dad:	74 27                	je     c0012dd6 <File::rename(char const*)+0x4a>
c0012daf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012db5:	85 c9                	test   ecx,ecx
c0012db7:	74 1d                	je     c0012dd6 <File::rename(char const*)+0x4a>
c0012db9:	b8 06 00 00 00       	mov    eax,0x6
c0012dbe:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012dc2:	75 12                	jne    c0012dd6 <File::rename(char const*)+0x4a>
c0012dc4:	83 c2 0d             	add    edx,0xd
c0012dc7:	50                   	push   eax
c0012dc8:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012dca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012dce:	52                   	push   edx
c0012dcf:	51                   	push   ecx
c0012dd0:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012dd3:	83 c4 10             	add    esp,0x10
c0012dd6:	83 c4 0c             	add    esp,0xc
c0012dd9:	c3                   	ret    

c0012dda <File::chfatattr(unsigned char, unsigned char)>:
c0012dda:	57                   	push   edi
c0012ddb:	b8 0b 00 00 00       	mov    eax,0xb
c0012de0:	56                   	push   esi
c0012de1:	53                   	push   ebx
c0012de2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012de6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012dea:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012df1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012df5:	80 f9 19             	cmp    cl,0x19
c0012df8:	77 37                	ja     c0012e31 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012dfa:	8b 0c 8d 40 b1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4ec0]
c0012e01:	85 c9                	test   ecx,ecx
c0012e03:	74 2c                	je     c0012e31 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e05:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e0b:	85 c9                	test   ecx,ecx
c0012e0d:	74 22                	je     c0012e31 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e0f:	b8 06 00 00 00       	mov    eax,0x6
c0012e14:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e18:	75 17                	jne    c0012e31 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e1a:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012e1c:	89 f0                	mov    eax,esi
c0012e1e:	83 c2 0d             	add    edx,0xd
c0012e21:	0f b6 f0             	movzx  esi,al
c0012e24:	0f b6 db             	movzx  ebx,bl
c0012e27:	56                   	push   esi
c0012e28:	53                   	push   ebx
c0012e29:	52                   	push   edx
c0012e2a:	51                   	push   ecx
c0012e2b:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012e2e:	83 c4 10             	add    esp,0x10
c0012e31:	5b                   	pop    ebx
c0012e32:	5e                   	pop    esi
c0012e33:	5f                   	pop    edi
c0012e34:	c3                   	ret    
c0012e35:	90                   	nop

c0012e36 <File::exists()>:
c0012e36:	83 ec 0c             	sub    esp,0xc
c0012e39:	31 c0                	xor    eax,eax
c0012e3b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e3f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e46:	80 f9 19             	cmp    cl,0x19
c0012e49:	77 24                	ja     c0012e6f <File::exists()+0x39>
c0012e4b:	8b 0c 8d 40 b1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4ec0]
c0012e52:	85 c9                	test   ecx,ecx
c0012e54:	74 19                	je     c0012e6f <File::exists()+0x39>
c0012e56:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e5c:	85 c9                	test   ecx,ecx
c0012e5e:	74 0f                	je     c0012e6f <File::exists()+0x39>
c0012e60:	83 c2 0d             	add    edx,0xd
c0012e63:	50                   	push   eax
c0012e64:	50                   	push   eax
c0012e65:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e67:	52                   	push   edx
c0012e68:	51                   	push   ecx
c0012e69:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012e6c:	83 c4 10             	add    esp,0x10
c0012e6f:	83 c4 0c             	add    esp,0xc
c0012e72:	c3                   	ret    
c0012e73:	90                   	nop

c0012e74 <File::stat(unsigned long long*, bool*)>:
c0012e74:	56                   	push   esi
c0012e75:	53                   	push   ebx
c0012e76:	50                   	push   eax
c0012e77:	b8 0b 00 00 00       	mov    eax,0xb
c0012e7c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e80:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012e84:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e8b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012e8f:	80 f9 19             	cmp    cl,0x19
c0012e92:	77 3d                	ja     c0012ed1 <File::stat(unsigned long long*, bool*)+0x5d>
c0012e94:	8b 0c 8d 40 b1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4ec0]
c0012e9b:	85 c9                	test   ecx,ecx
c0012e9d:	74 32                	je     c0012ed1 <File::stat(unsigned long long*, bool*)+0x5d>
c0012e9f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ea5:	85 c9                	test   ecx,ecx
c0012ea7:	74 28                	je     c0012ed1 <File::stat(unsigned long long*, bool*)+0x5d>
c0012ea9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012eab:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012eaf:	74 13                	je     c0012ec4 <File::stat(unsigned long long*, bool*)+0x50>
c0012eb1:	83 ec 04             	sub    esp,0x4
c0012eb4:	56                   	push   esi
c0012eb5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012ebb:	51                   	push   ecx
c0012ebc:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012ebf:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012ec2:	eb 0a                	jmp    c0012ece <File::stat(unsigned long long*, bool*)+0x5a>
c0012ec4:	53                   	push   ebx
c0012ec5:	83 c2 0d             	add    edx,0xd
c0012ec8:	56                   	push   esi
c0012ec9:	52                   	push   edx
c0012eca:	51                   	push   ecx
c0012ecb:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012ece:	83 c4 10             	add    esp,0x10
c0012ed1:	5a                   	pop    edx
c0012ed2:	5b                   	pop    ebx
c0012ed3:	5e                   	pop    esi
c0012ed4:	c3                   	ret    

c0012ed5 <getcwd(Process*, char*, int)>:
c0012ed5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ed9:	31 c0                	xor    eax,eax
c0012edb:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012ede:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012ee2:	7d 15                	jge    c0012ef9 <getcwd(Process*, char*, int)+0x24>
c0012ee4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ee8:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012eef:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012ef2:	84 c9                	test   cl,cl
c0012ef4:	74 06                	je     c0012efc <getcwd(Process*, char*, int)+0x27>
c0012ef6:	40                   	inc    eax
c0012ef7:	eb e2                	jmp    c0012edb <getcwd(Process*, char*, int)+0x6>
c0012ef9:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012efc:	31 c0                	xor    eax,eax
c0012efe:	c3                   	ret    

c0012eff <setcwd(Process*, char*)>:
c0012eff:	55                   	push   ebp
c0012f00:	57                   	push   edi
c0012f01:	56                   	push   esi
c0012f02:	53                   	push   ebx
c0012f03:	81 ec 20 02 00 00    	sub    esp,0x220
c0012f09:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012f10:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012f16:	57                   	push   edi
c0012f17:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012f1e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012f22:	56                   	push   esi
c0012f23:	e8 92 fa ff ff       	call   c00129ba <standardiseFiles(char*, char const*, char const*)>
c0012f28:	89 34 24             	mov    DWORD PTR [esp],esi
c0012f2b:	e8 6a d7 fe ff       	call   c000069a <strlen>
c0012f30:	83 c4 10             	add    esp,0x10
c0012f33:	83 f8 02             	cmp    eax,0x2
c0012f36:	77 17                	ja     c0012f4f <setcwd(Process*, char*)+0x50>
c0012f38:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012f3d:	83 e8 41             	sub    eax,0x41
c0012f40:	83 f8 19             	cmp    eax,0x19
c0012f43:	76 24                	jbe    c0012f69 <setcwd(Process*, char*)+0x6a>
c0012f45:	b8 03 00 00 00       	mov    eax,0x3
c0012f4a:	e9 e0 00 00 00       	jmp    c001302f <setcwd(Process*, char*)+0x130>
c0012f4f:	83 ec 0c             	sub    esp,0xc
c0012f52:	56                   	push   esi
c0012f53:	e8 42 d7 fe ff       	call   c000069a <strlen>
c0012f58:	83 c4 10             	add    esp,0x10
c0012f5b:	83 f8 03             	cmp    eax,0x3
c0012f5e:	75 34                	jne    c0012f94 <setcwd(Process*, char*)+0x95>
c0012f60:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012f65:	75 2d                	jne    c0012f94 <setcwd(Process*, char*)+0x95>
c0012f67:	eb cf                	jmp    c0012f38 <setcwd(Process*, char*)+0x39>
c0012f69:	8b 14 85 40 b1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4ec0]
c0012f70:	b8 05 00 00 00       	mov    eax,0x5
c0012f75:	85 d2                	test   edx,edx
c0012f77:	0f 84 b2 00 00 00    	je     c001302f <setcwd(Process*, char*)+0x130>
c0012f7d:	b8 06 00 00 00       	mov    eax,0x6
c0012f82:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012f89:	0f 85 92 00 00 00    	jne    c0013021 <setcwd(Process*, char*)+0x122>
c0012f8f:	e9 9b 00 00 00       	jmp    c001302f <setcwd(Process*, char*)+0x130>
c0012f94:	83 ec 0c             	sub    esp,0xc
c0012f97:	68 14 01 00 00       	push   0x114
c0012f9c:	e8 21 c5 ff ff       	call   c000f4c2 <malloc>
c0012fa1:	83 c4 0c             	add    esp,0xc
c0012fa4:	89 c3                	mov    ebx,eax
c0012fa6:	55                   	push   ebp
c0012fa7:	56                   	push   esi
c0012fa8:	50                   	push   eax
c0012fa9:	e8 b6 fb ff ff       	call   c0012b64 <File::File(char const*, Process*)>
c0012fae:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012fb3:	83 c4 0c             	add    esp,0xc
c0012fb6:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012fba:	50                   	push   eax
c0012fbb:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012fbf:	50                   	push   eax
c0012fc0:	53                   	push   ebx
c0012fc1:	e8 ae fe ff ff       	call   c0012e74 <File::stat(unsigned long long*, bool*)>
c0012fc6:	83 c4 10             	add    esp,0x10
c0012fc9:	83 f8 02             	cmp    eax,0x2
c0012fcc:	74 04                	je     c0012fd2 <setcwd(Process*, char*)+0xd3>
c0012fce:	85 c0                	test   eax,eax
c0012fd0:	74 1c                	je     c0012fee <setcwd(Process*, char*)+0xef>
c0012fd2:	b8 01 00 00 00       	mov    eax,0x1
c0012fd7:	85 db                	test   ebx,ebx
c0012fd9:	74 54                	je     c001302f <setcwd(Process*, char*)+0x130>
c0012fdb:	83 ec 0c             	sub    esp,0xc
c0012fde:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fe0:	53                   	push   ebx
c0012fe1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012fe4:	83 c4 10             	add    esp,0x10
c0012fe7:	b8 01 00 00 00       	mov    eax,0x1
c0012fec:	eb 41                	jmp    c001302f <setcwd(Process*, char*)+0x130>
c0012fee:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012ff3:	75 1c                	jne    c0013011 <setcwd(Process*, char*)+0x112>
c0012ff5:	b8 02 00 00 00       	mov    eax,0x2
c0012ffa:	85 db                	test   ebx,ebx
c0012ffc:	74 31                	je     c001302f <setcwd(Process*, char*)+0x130>
c0012ffe:	83 ec 0c             	sub    esp,0xc
c0013001:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013003:	53                   	push   ebx
c0013004:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013007:	83 c4 10             	add    esp,0x10
c001300a:	b8 02 00 00 00       	mov    eax,0x2
c001300f:	eb 1e                	jmp    c001302f <setcwd(Process*, char*)+0x130>
c0013011:	85 db                	test   ebx,ebx
c0013013:	74 0c                	je     c0013021 <setcwd(Process*, char*)+0x122>
c0013015:	83 ec 0c             	sub    esp,0xc
c0013018:	8b 03                	mov    eax,DWORD PTR [ebx]
c001301a:	53                   	push   ebx
c001301b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001301e:	83 c4 10             	add    esp,0x10
c0013021:	50                   	push   eax
c0013022:	50                   	push   eax
c0013023:	56                   	push   esi
c0013024:	57                   	push   edi
c0013025:	e8 f2 d6 fe ff       	call   c000071c <strcpy>
c001302a:	83 c4 10             	add    esp,0x10
c001302d:	31 c0                	xor    eax,eax
c001302f:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013035:	5b                   	pop    ebx
c0013036:	5e                   	pop    esi
c0013037:	5f                   	pop    edi
c0013038:	5d                   	pop    ebp
c0013039:	c3                   	ret    

c001303a <Directory::Directory(char const*, Process*)>:
c001303a:	83 ec 0c             	sub    esp,0xc
c001303d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013041:	83 ec 08             	sub    esp,0x8
c0013044:	6a 00                	push   0x0
c0013046:	50                   	push   eax
c0013047:	e8 b6 e1 ff ff       	call   c0011202 <UnixFile::UnixFile(int)>
c001304c:	83 c4 10             	add    esp,0x10
c001304f:	ba ec 79 02 c0       	mov    edx,0xc00279ec
c0013054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013058:	89 10                	mov    DWORD PTR [eax],edx
c001305a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001305e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013068:	83 c0 0d             	add    eax,0xd
c001306b:	83 ec 04             	sub    esp,0x4
c001306e:	52                   	push   edx
c001306f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013073:	50                   	push   eax
c0013074:	e8 41 f9 ff ff       	call   c00129ba <standardiseFiles(char*, char const*, char const*)>
c0013079:	83 c4 10             	add    esp,0x10
c001307c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013080:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013083:	8d 50 bf             	lea    edx,[eax-0x41]
c0013086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001308a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013094:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013098:	90                   	nop
c0013099:	83 c4 0c             	add    esp,0xc
c001309c:	c3                   	ret    
c001309d:	90                   	nop

c001309e <Directory::open()>:
c001309e:	53                   	push   ebx
c001309f:	b8 0b 00 00 00       	mov    eax,0xb
c00130a4:	83 ec 08             	sub    esp,0x8
c00130a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130ab:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00130b2:	80 fa 19             	cmp    dl,0x19
c00130b5:	77 3d                	ja     c00130f4 <Directory::open()+0x56>
c00130b7:	8b 14 95 40 b1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4ec0]
c00130be:	85 d2                	test   edx,edx
c00130c0:	74 32                	je     c00130f4 <Directory::open()+0x56>
c00130c2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00130c8:	85 d2                	test   edx,edx
c00130ca:	74 28                	je     c00130f4 <Directory::open()+0x56>
c00130cc:	b8 06 00 00 00       	mov    eax,0x6
c00130d1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00130d5:	75 1d                	jne    c00130f4 <Directory::open()+0x56>
c00130d7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00130dd:	50                   	push   eax
c00130de:	8b 02                	mov    eax,DWORD PTR [edx]
c00130e0:	51                   	push   ecx
c00130e1:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00130e4:	51                   	push   ecx
c00130e5:	52                   	push   edx
c00130e6:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00130e9:	83 c4 10             	add    esp,0x10
c00130ec:	85 c0                	test   eax,eax
c00130ee:	75 04                	jne    c00130f4 <Directory::open()+0x56>
c00130f0:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00130f4:	83 c4 08             	add    esp,0x8
c00130f7:	5b                   	pop    ebx
c00130f8:	c3                   	ret    
c00130f9:	90                   	nop

c00130fa <Directory::close()>:
c00130fa:	53                   	push   ebx
c00130fb:	b8 0b 00 00 00       	mov    eax,0xb
c0013100:	83 ec 08             	sub    esp,0x8
c0013103:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013107:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001310e:	80 fa 19             	cmp    dl,0x19
c0013111:	77 41                	ja     c0013154 <Directory::close()+0x5a>
c0013113:	8b 1c 95 40 b1 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd4ec0]
c001311a:	85 db                	test   ebx,ebx
c001311c:	74 36                	je     c0013154 <Directory::close()+0x5a>
c001311e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013125:	74 2d                	je     c0013154 <Directory::close()+0x5a>
c0013127:	b8 05 00 00 00       	mov    eax,0x5
c001312c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013130:	74 22                	je     c0013154 <Directory::close()+0x5a>
c0013132:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013136:	8b 04 95 40 b1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd4ec0]
c001313d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013143:	53                   	push   ebx
c0013144:	53                   	push   ebx
c0013145:	8b 10                	mov    edx,DWORD PTR [eax]
c0013147:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001314d:	50                   	push   eax
c001314e:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013151:	83 c4 10             	add    esp,0x10
c0013154:	83 c4 08             	add    esp,0x8
c0013157:	5b                   	pop    ebx
c0013158:	c3                   	ret    
c0013159:	90                   	nop

c001315a <Directory::unlink()>:
c001315a:	83 ec 0c             	sub    esp,0xc
c001315d:	b8 0b 00 00 00       	mov    eax,0xb
c0013162:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013166:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001316d:	80 f9 19             	cmp    cl,0x19
c0013170:	77 2f                	ja     c00131a1 <Directory::unlink()+0x47>
c0013172:	8b 0c 8d 40 b1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4ec0]
c0013179:	85 c9                	test   ecx,ecx
c001317b:	74 24                	je     c00131a1 <Directory::unlink()+0x47>
c001317d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013183:	85 c9                	test   ecx,ecx
c0013185:	74 1a                	je     c00131a1 <Directory::unlink()+0x47>
c0013187:	b8 06 00 00 00       	mov    eax,0x6
c001318c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013190:	75 0f                	jne    c00131a1 <Directory::unlink()+0x47>
c0013192:	83 c2 0d             	add    edx,0xd
c0013195:	50                   	push   eax
c0013196:	50                   	push   eax
c0013197:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013199:	52                   	push   edx
c001319a:	51                   	push   ecx
c001319b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001319e:	83 c4 10             	add    esp,0x10
c00131a1:	83 c4 0c             	add    esp,0xc
c00131a4:	c3                   	ret    
c00131a5:	90                   	nop

c00131a6 <Directory::rename(char const*)>:
c00131a6:	83 ec 0c             	sub    esp,0xc
c00131a9:	b8 0b 00 00 00       	mov    eax,0xb
c00131ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131b2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00131b9:	80 f9 19             	cmp    cl,0x19
c00131bc:	77 32                	ja     c00131f0 <Directory::rename(char const*)+0x4a>
c00131be:	8b 0c 8d 40 b1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4ec0]
c00131c5:	85 c9                	test   ecx,ecx
c00131c7:	74 27                	je     c00131f0 <Directory::rename(char const*)+0x4a>
c00131c9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00131cf:	85 c9                	test   ecx,ecx
c00131d1:	74 1d                	je     c00131f0 <Directory::rename(char const*)+0x4a>
c00131d3:	b8 06 00 00 00       	mov    eax,0x6
c00131d8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131dc:	75 12                	jne    c00131f0 <Directory::rename(char const*)+0x4a>
c00131de:	83 c2 0d             	add    edx,0xd
c00131e1:	50                   	push   eax
c00131e2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00131e8:	52                   	push   edx
c00131e9:	51                   	push   ecx
c00131ea:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00131ed:	83 c4 10             	add    esp,0x10
c00131f0:	83 c4 0c             	add    esp,0xc
c00131f3:	c3                   	ret    

c00131f4 <Directory::exists()>:
c00131f4:	83 ec 0c             	sub    esp,0xc
c00131f7:	31 c0                	xor    eax,eax
c00131f9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131fd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013204:	80 f9 19             	cmp    cl,0x19
c0013207:	77 24                	ja     c001322d <Directory::exists()+0x39>
c0013209:	8b 0c 8d 40 b1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4ec0]
c0013210:	85 c9                	test   ecx,ecx
c0013212:	74 19                	je     c001322d <Directory::exists()+0x39>
c0013214:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001321a:	85 c9                	test   ecx,ecx
c001321c:	74 0f                	je     c001322d <Directory::exists()+0x39>
c001321e:	83 c2 0d             	add    edx,0xd
c0013221:	50                   	push   eax
c0013222:	50                   	push   eax
c0013223:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013225:	52                   	push   edx
c0013226:	51                   	push   ecx
c0013227:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001322a:	83 c4 10             	add    esp,0x10
c001322d:	83 c4 0c             	add    esp,0xc
c0013230:	c3                   	ret    
c0013231:	90                   	nop

c0013232 <Directory::read(dirent*)>:
c0013232:	83 ec 1c             	sub    esp,0x1c
c0013235:	b8 0b 00 00 00       	mov    eax,0xb
c001323a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001323e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013245:	80 fa 19             	cmp    dl,0x19
c0013248:	77 30                	ja     c001327a <Directory::read(dirent*)+0x48>
c001324a:	8b 14 95 40 b1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4ec0]
c0013251:	85 d2                	test   edx,edx
c0013253:	74 25                	je     c001327a <Directory::read(dirent*)+0x48>
c0013255:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001325c:	74 1c                	je     c001327a <Directory::read(dirent*)+0x48>
c001325e:	83 ec 0c             	sub    esp,0xc
c0013261:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013263:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013267:	52                   	push   edx
c0013268:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001326c:	6a 00                	push   0x0
c001326e:	68 10 01 00 00       	push   0x110
c0013273:	51                   	push   ecx
c0013274:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013277:	83 c4 20             	add    esp,0x20
c001327a:	83 c4 1c             	add    esp,0x1c
c001327d:	c3                   	ret    

c001327e <Directory::create()>:
c001327e:	83 ec 0c             	sub    esp,0xc
c0013281:	b8 0b 00 00 00       	mov    eax,0xb
c0013286:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001328a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013291:	80 f9 19             	cmp    cl,0x19
c0013294:	77 2f                	ja     c00132c5 <Directory::create()+0x47>
c0013296:	8b 0c 8d 40 b1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4ec0]
c001329d:	85 c9                	test   ecx,ecx
c001329f:	74 24                	je     c00132c5 <Directory::create()+0x47>
c00132a1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132a7:	85 c9                	test   ecx,ecx
c00132a9:	74 1a                	je     c00132c5 <Directory::create()+0x47>
c00132ab:	b8 06 00 00 00       	mov    eax,0x6
c00132b0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132b4:	75 0f                	jne    c00132c5 <Directory::create()+0x47>
c00132b6:	83 c2 0d             	add    edx,0xd
c00132b9:	50                   	push   eax
c00132ba:	50                   	push   eax
c00132bb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132bd:	52                   	push   edx
c00132be:	51                   	push   ecx
c00132bf:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00132c2:	83 c4 10             	add    esp,0x10
c00132c5:	83 c4 0c             	add    esp,0xc
c00132c8:	c3                   	ret    
c00132c9:	90                   	nop

c00132ca <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00132ca:	b8 0a 00 00 00       	mov    eax,0xa
c00132cf:	c3                   	ret    

c00132d0 <Bus::Bus(char const*)>:
c00132d0:	83 ec 0c             	sub    esp,0xc
c00132d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132d7:	83 ec 08             	sub    esp,0x8
c00132da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132de:	50                   	push   eax
c00132df:	e8 30 09 00 00       	call   c0013c14 <Device::Device(char const*)>
c00132e4:	83 c4 10             	add    esp,0x10
c00132e7:	ba 08 7a 02 c0       	mov    edx,0xc0027a08
c00132ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132f0:	89 10                	mov    DWORD PTR [eax],edx
c00132f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132f6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013300:	90                   	nop
c0013301:	83 c4 0c             	add    esp,0xc
c0013304:	c3                   	ret    
c0013305:	90                   	nop

c0013306 <Bus::~Bus()>:
c0013306:	83 ec 0c             	sub    esp,0xc
c0013309:	ba 08 7a 02 c0       	mov    edx,0xc0027a08
c001330e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013312:	89 10                	mov    DWORD PTR [eax],edx
c0013314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013318:	83 ec 0c             	sub    esp,0xc
c001331b:	50                   	push   eax
c001331c:	e8 d5 05 00 00       	call   c00138f6 <Device::~Device()>
c0013321:	83 c4 10             	add    esp,0x10
c0013324:	90                   	nop
c0013325:	83 c4 0c             	add    esp,0xc
c0013328:	c3                   	ret    
c0013329:	90                   	nop

c001332a <Bus::~Bus()>:
c001332a:	83 ec 0c             	sub    esp,0xc
c001332d:	83 ec 0c             	sub    esp,0xc
c0013330:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013334:	e8 cd ff ff ff       	call   c0013306 <Bus::~Bus()>
c0013339:	83 c4 10             	add    esp,0x10
c001333c:	83 ec 08             	sub    esp,0x8
c001333f:	68 58 01 00 00       	push   0x158
c0013344:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013348:	e8 08 f2 ff ff       	call   c0012555 <operator delete(void*, unsigned long)>
c001334d:	83 c4 10             	add    esp,0x10
c0013350:	83 c4 0c             	add    esp,0xc
c0013353:	c3                   	ret    

c0013354 <Buzzer::Buzzer(char const*)>:
c0013354:	83 ec 0c             	sub    esp,0xc
c0013357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001335b:	83 ec 08             	sub    esp,0x8
c001335e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013362:	50                   	push   eax
c0013363:	e8 ac 08 00 00       	call   c0013c14 <Device::Device(char const*)>
c0013368:	83 c4 10             	add    esp,0x10
c001336b:	ba 34 7a 02 c0       	mov    edx,0xc0027a34
c0013370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013374:	89 10                	mov    DWORD PTR [eax],edx
c0013376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001337a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013388:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013392:	90                   	nop
c0013393:	83 c4 0c             	add    esp,0xc
c0013396:	c3                   	ret    
c0013397:	90                   	nop

c0013398 <Buzzer::~Buzzer()>:
c0013398:	83 ec 0c             	sub    esp,0xc
c001339b:	ba 34 7a 02 c0       	mov    edx,0xc0027a34
c00133a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133a4:	89 10                	mov    DWORD PTR [eax],edx
c00133a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133aa:	83 ec 0c             	sub    esp,0xc
c00133ad:	50                   	push   eax
c00133ae:	e8 43 05 00 00       	call   c00138f6 <Device::~Device()>
c00133b3:	83 c4 10             	add    esp,0x10
c00133b6:	90                   	nop
c00133b7:	83 c4 0c             	add    esp,0xc
c00133ba:	c3                   	ret    
c00133bb:	90                   	nop

c00133bc <Buzzer::~Buzzer()>:
c00133bc:	83 ec 0c             	sub    esp,0xc
c00133bf:	83 ec 0c             	sub    esp,0xc
c00133c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133c6:	e8 cd ff ff ff       	call   c0013398 <Buzzer::~Buzzer()>
c00133cb:	83 c4 10             	add    esp,0x10
c00133ce:	83 ec 08             	sub    esp,0x8
c00133d1:	68 5c 01 00 00       	push   0x15c
c00133d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133da:	e8 76 f1 ff ff       	call   c0012555 <operator delete(void*, unsigned long)>
c00133df:	83 c4 10             	add    esp,0x10
c00133e2:	83 c4 0c             	add    esp,0xc
c00133e5:	c3                   	ret    

c00133e6 <Buzzer::stop()>:
c00133e6:	83 ec 14             	sub    esp,0x14
c00133e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133ed:	8b 10                	mov    edx,DWORD PTR [eax]
c00133ef:	6a 00                	push   0x0
c00133f1:	50                   	push   eax
c00133f2:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00133f5:	83 c4 1c             	add    esp,0x1c
c00133f8:	c3                   	ret    

c00133f9 <beepThread(void*)>:
c00133f9:	53                   	push   ebx
c00133fa:	83 ec 08             	sub    esp,0x8
c00133fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013401:	e8 01 8a 00 00       	call   c001be07 <unlockScheduler()>
c0013406:	b8 40 42 0f 00       	mov    eax,0xf4240
c001340b:	52                   	push   edx
c001340c:	52                   	push   edx
c001340d:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013413:	52                   	push   edx
c0013414:	50                   	push   eax
c0013415:	e8 3a 8f 00 00       	call   c001c354 <nanoSleep(unsigned long long)>
c001341a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001341d:	e8 c4 ff ff ff       	call   c00133e6 <Buzzer::stop()>
c0013422:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001342a:	83 c4 18             	add    esp,0x18
c001342d:	5b                   	pop    ebx
c001342e:	e9 67 8e 00 00       	jmp    c001c29a <blockTask(TaskState)>
c0013433:	90                   	nop

c0013434 <Buzzer::beep(int, int, bool)>:
c0013434:	57                   	push   edi
c0013435:	56                   	push   esi
c0013436:	53                   	push   ebx
c0013437:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001343b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001343f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013443:	52                   	push   edx
c0013444:	52                   	push   edx
c0013445:	8b 06                	mov    eax,DWORD PTR [esi]
c0013447:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001344b:	56                   	push   esi
c001344c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001344f:	83 c4 10             	add    esp,0x10
c0013452:	89 f8                	mov    eax,edi
c0013454:	84 c0                	test   al,al
c0013456:	74 1f                	je     c0013477 <Buzzer::beep(int, int, bool)+0x43>
c0013458:	50                   	push   eax
c0013459:	50                   	push   eax
c001345a:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013460:	99                   	cdq    
c0013461:	52                   	push   edx
c0013462:	50                   	push   eax
c0013463:	e8 ec 8e 00 00       	call   c001c354 <nanoSleep(unsigned long long)>
c0013468:	83 c4 10             	add    esp,0x10
c001346b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001346f:	5b                   	pop    ebx
c0013470:	5e                   	pop    esi
c0013471:	5f                   	pop    edi
c0013472:	e9 6f ff ff ff       	jmp    c00133e6 <Buzzer::stop()>
c0013477:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c001347d:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0013482:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c001348a:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001348e:	c7 44 24 14 f9 33 01 c0 	mov    DWORD PTR [esp+0x14],0xc00133f9
c0013496:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001349a:	5b                   	pop    ebx
c001349b:	5e                   	pop    esi
c001349c:	5f                   	pop    edi
c001349d:	e9 94 8a 00 00       	jmp    c001bf36 <Process::createThread(void (*)(void*), void*, int)>

c00134a2 <loadClockSettings()>:
c00134a2:	c7 05 b4 ac 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002acb4,0xa
c00134ac:	c6 05 b1 ac 02 c0 00 	mov    BYTE PTR ds:0xc002acb1,0x0
c00134b3:	c6 05 b0 ac 02 c0 01 	mov    BYTE PTR ds:0xc002acb0,0x1
c00134ba:	c3                   	ret    
c00134bb:	90                   	nop

c00134bc <Clock::Clock(char const*)>:
c00134bc:	83 ec 0c             	sub    esp,0xc
c00134bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134c3:	83 ec 08             	sub    esp,0x8
c00134c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134ca:	50                   	push   eax
c00134cb:	e8 44 07 00 00       	call   c0013c14 <Device::Device(char const*)>
c00134d0:	83 c4 10             	add    esp,0x10
c00134d3:	ba 64 7a 02 c0       	mov    edx,0xc0027a64
c00134d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134dc:	89 10                	mov    DWORD PTR [eax],edx
c00134de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e2:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00134ec:	90                   	nop
c00134ed:	83 c4 0c             	add    esp,0xc
c00134f0:	c3                   	ret    
c00134f1:	90                   	nop

c00134f2 <Clock::~Clock()>:
c00134f2:	83 ec 0c             	sub    esp,0xc
c00134f5:	ba 64 7a 02 c0       	mov    edx,0xc0027a64
c00134fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134fe:	89 10                	mov    DWORD PTR [eax],edx
c0013500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013504:	83 ec 0c             	sub    esp,0xc
c0013507:	50                   	push   eax
c0013508:	e8 e9 03 00 00       	call   c00138f6 <Device::~Device()>
c001350d:	83 c4 10             	add    esp,0x10
c0013510:	90                   	nop
c0013511:	83 c4 0c             	add    esp,0xc
c0013514:	c3                   	ret    
c0013515:	90                   	nop

c0013516 <Clock::~Clock()>:
c0013516:	83 ec 0c             	sub    esp,0xc
c0013519:	83 ec 0c             	sub    esp,0xc
c001351c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013520:	e8 cd ff ff ff       	call   c00134f2 <Clock::~Clock()>
c0013525:	83 c4 10             	add    esp,0x10
c0013528:	83 ec 08             	sub    esp,0x8
c001352b:	68 58 01 00 00       	push   0x158
c0013530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013534:	e8 1c f0 ff ff       	call   c0012555 <operator delete(void*, unsigned long)>
c0013539:	83 c4 10             	add    esp,0x10
c001353c:	83 c4 0c             	add    esp,0xc
c001353f:	c3                   	ret    

c0013540 <Clock::timeInSecondsLocal()>:
c0013540:	53                   	push   ebx
c0013541:	83 ec 14             	sub    esp,0x14
c0013544:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013548:	8b 10                	mov    edx,DWORD PTR [eax]
c001354a:	50                   	push   eax
c001354b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001354e:	0f b6 0d b0 ac 02 c0 	movzx  ecx,BYTE PTR ds:0xc002acb0
c0013555:	03 0d b4 ac 02 c0    	add    ecx,DWORD PTR ds:0xc002acb4
c001355b:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013561:	89 cb                	mov    ebx,ecx
c0013563:	c1 fb 1f             	sar    ebx,0x1f
c0013566:	01 c8                	add    eax,ecx
c0013568:	11 da                	adc    edx,ebx
c001356a:	83 c4 10             	add    esp,0x10
c001356d:	31 c9                	xor    ecx,ecx
c001356f:	80 3d b1 ac 02 c0 00 	cmp    BYTE PTR ds:0xc002acb1,0x0
c0013576:	74 05                	je     c001357d <Clock::timeInSecondsLocal()+0x3d>
c0013578:	b9 08 07 00 00       	mov    ecx,0x708
c001357d:	31 db                	xor    ebx,ebx
c001357f:	01 c8                	add    eax,ecx
c0013581:	11 da                	adc    edx,ebx
c0013583:	83 c4 08             	add    esp,0x8
c0013586:	5b                   	pop    ebx
c0013587:	c3                   	ret    

c0013588 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013588:	57                   	push   edi
c0013589:	56                   	push   esi
c001358a:	53                   	push   ebx
c001358b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001358f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013593:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013595:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013599:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001359c:	0f b6 05 b0 ac 02 c0 	movzx  eax,BYTE PTR ds:0xc002acb0
c00135a3:	03 05 b4 ac 02 c0    	add    eax,DWORD PTR ds:0xc002acb4
c00135a9:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00135af:	99                   	cdq    
c00135b0:	29 c6                	sub    esi,eax
c00135b2:	19 d7                	sbb    edi,edx
c00135b4:	89 f0                	mov    eax,esi
c00135b6:	89 fa                	mov    edx,edi
c00135b8:	31 f6                	xor    esi,esi
c00135ba:	80 3d b1 ac 02 c0 00 	cmp    BYTE PTR ds:0xc002acb1,0x0
c00135c1:	74 05                	je     c00135c8 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00135c3:	be 08 07 00 00       	mov    esi,0x708
c00135c8:	31 ff                	xor    edi,edi
c00135ca:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00135ce:	29 f0                	sub    eax,esi
c00135d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00135d4:	19 fa                	sbb    edx,edi
c00135d6:	89 d8                	mov    eax,ebx
c00135d8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00135dc:	5b                   	pop    ebx
c00135dd:	5e                   	pop    esi
c00135de:	5f                   	pop    edi
c00135df:	ff e0                	jmp    eax

c00135e1 <datetimeToSeconds(datetime_t)>:
c00135e1:	55                   	push   ebp
c00135e2:	57                   	push   edi
c00135e3:	56                   	push   esi
c00135e4:	53                   	push   ebx
c00135e5:	83 ec 14             	sub    esp,0x14
c00135e8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00135ec:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00135f0:	89 d3                	mov    ebx,edx
c00135f2:	0f b6 c6             	movzx  eax,dh
c00135f5:	c1 eb 10             	shr    ebx,0x10
c00135f8:	48                   	dec    eax
c00135f9:	66 81 eb 6c 07       	sub    bx,0x76c
c00135fe:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013602:	0f b6 f5             	movzx  esi,ch
c0013605:	89 cf                	mov    edi,ecx
c0013607:	6b f6 3c             	imul   esi,esi,0x3c
c001360a:	c1 ef 10             	shr    edi,0x10
c001360d:	0f b6 c9             	movzx  ecx,cl
c0013610:	89 f8                	mov    eax,edi
c0013612:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013618:	0f b6 f8             	movzx  edi,al
c001361b:	0f b6 d2             	movzx  edx,dl
c001361e:	01 fe                	add    esi,edi
c0013620:	01 f1                	add    ecx,esi
c0013622:	0f b7 f3             	movzx  esi,bx
c0013625:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013629:	c1 f9 1f             	sar    ecx,0x1f
c001362c:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013631:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013635:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c001363a:	8b 0c 8d a0 7a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8560]
c0013641:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013645:	76 29                	jbe    c0013670 <datetimeToSeconds(datetime_t)+0x8f>
c0013647:	f6 c3 03             	test   bl,0x3
c001364a:	75 24                	jne    c0013670 <datetimeToSeconds(datetime_t)+0x8f>
c001364c:	31 d2                	xor    edx,edx
c001364e:	bf 64 00 00 00       	mov    edi,0x64
c0013653:	89 d8                	mov    eax,ebx
c0013655:	66 f7 f7             	div    di
c0013658:	66 85 d2             	test   dx,dx
c001365b:	75 12                	jne    c001366f <datetimeToSeconds(datetime_t)+0x8e>
c001365d:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013663:	bf 90 01 00 00       	mov    edi,0x190
c0013668:	99                   	cdq    
c0013669:	f7 ff                	idiv   edi
c001366b:	85 d2                	test   edx,edx
c001366d:	75 01                	jne    c0013670 <datetimeToSeconds(datetime_t)+0x8f>
c001366f:	41                   	inc    ecx
c0013670:	66 83 fb 46          	cmp    bx,0x46
c0013674:	76 45                	jbe    c00136bb <datetimeToSeconds(datetime_t)+0xda>
c0013676:	bb 46 00 00 00       	mov    ebx,0x46
c001367b:	bf 64 00 00 00       	mov    edi,0x64
c0013680:	bd 90 01 00 00       	mov    ebp,0x190
c0013685:	b8 6d 01 00 00       	mov    eax,0x16d
c001368a:	f6 c3 03             	test   bl,0x3
c001368d:	75 23                	jne    c00136b2 <datetimeToSeconds(datetime_t)+0xd1>
c001368f:	89 d8                	mov    eax,ebx
c0013691:	99                   	cdq    
c0013692:	f7 ff                	idiv   edi
c0013694:	b8 6e 01 00 00       	mov    eax,0x16e
c0013699:	85 d2                	test   edx,edx
c001369b:	75 15                	jne    c00136b2 <datetimeToSeconds(datetime_t)+0xd1>
c001369d:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00136a3:	99                   	cdq    
c00136a4:	f7 fd                	idiv   ebp
c00136a6:	83 fa 01             	cmp    edx,0x1
c00136a9:	19 c0                	sbb    eax,eax
c00136ab:	f7 d0                	not    eax
c00136ad:	05 6e 01 00 00       	add    eax,0x16e
c00136b2:	01 c1                	add    ecx,eax
c00136b4:	43                   	inc    ebx
c00136b5:	39 f3                	cmp    ebx,esi
c00136b7:	7c cc                	jl     c0013685 <datetimeToSeconds(datetime_t)+0xa4>
c00136b9:	eb 35                	jmp    c00136f0 <datetimeToSeconds(datetime_t)+0x10f>
c00136bb:	74 33                	je     c00136f0 <datetimeToSeconds(datetime_t)+0x10f>
c00136bd:	b8 45 00 00 00       	mov    eax,0x45
c00136c2:	89 c2                	mov    edx,eax
c00136c4:	83 e2 03             	and    edx,0x3
c00136c7:	39 f0                	cmp    eax,esi
c00136c9:	7e 0f                	jle    c00136da <datetimeToSeconds(datetime_t)+0xf9>
c00136cb:	83 fa 01             	cmp    edx,0x1
c00136ce:	19 d2                	sbb    edx,edx
c00136d0:	48                   	dec    eax
c00136d1:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00136d8:	eb e8                	jmp    c00136c2 <datetimeToSeconds(datetime_t)+0xe1>
c00136da:	b8 6d 01 00 00       	mov    eax,0x16d
c00136df:	85 d2                	test   edx,edx
c00136e1:	75 0b                	jne    c00136ee <datetimeToSeconds(datetime_t)+0x10d>
c00136e3:	66 83 fb 01          	cmp    bx,0x1
c00136e7:	19 c0                	sbb    eax,eax
c00136e9:	05 6e 01 00 00       	add    eax,0x16e
c00136ee:	29 c1                	sub    ecx,eax
c00136f0:	b8 80 51 01 00       	mov    eax,0x15180
c00136f5:	f7 e9                	imul   ecx
c00136f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00136fb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00136ff:	83 c4 14             	add    esp,0x14
c0013702:	5b                   	pop    ebx
c0013703:	5e                   	pop    esi
c0013704:	5f                   	pop    edi
c0013705:	5d                   	pop    ebp
c0013706:	c3                   	ret    
c0013707:	90                   	nop

c0013708 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013708:	57                   	push   edi
c0013709:	56                   	push   esi
c001370a:	53                   	push   ebx
c001370b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001370f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013711:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013714:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013718:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001371c:	e8 c0 fe ff ff       	call   c00135e1 <datetimeToSeconds(datetime_t)>
c0013721:	59                   	pop    ecx
c0013722:	0f b6 0d b0 ac 02 c0 	movzx  ecx,BYTE PTR ds:0xc002acb0
c0013729:	5b                   	pop    ebx
c001372a:	03 0d b4 ac 02 c0    	add    ecx,DWORD PTR ds:0xc002acb4
c0013730:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013736:	89 cb                	mov    ebx,ecx
c0013738:	c1 fb 1f             	sar    ebx,0x1f
c001373b:	29 c8                	sub    eax,ecx
c001373d:	19 da                	sbb    edx,ebx
c001373f:	31 c9                	xor    ecx,ecx
c0013741:	80 3d b1 ac 02 c0 00 	cmp    BYTE PTR ds:0xc002acb1,0x0
c0013748:	74 05                	je     c001374f <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001374a:	b9 08 07 00 00       	mov    ecx,0x708
c001374f:	31 db                	xor    ebx,ebx
c0013751:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013755:	29 c8                	sub    eax,ecx
c0013757:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001375b:	19 da                	sbb    edx,ebx
c001375d:	89 f8                	mov    eax,edi
c001375f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013763:	5b                   	pop    ebx
c0013764:	5e                   	pop    esi
c0013765:	5f                   	pop    edi
c0013766:	ff e0                	jmp    eax

c0013768 <secondsToDatetime(unsigned long long)>:
c0013768:	55                   	push   ebp
c0013769:	57                   	push   edi
c001376a:	56                   	push   esi
c001376b:	53                   	push   ebx
c001376c:	83 ec 1c             	sub    esp,0x1c
c001376f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013773:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013777:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001377b:	6a 00                	push   0x0
c001377d:	68 80 51 01 00       	push   0x15180
c0013782:	55                   	push   ebp
c0013783:	57                   	push   edi
c0013784:	e8 23 03 01 00       	call   c0023aac <__udivdi3>
c0013789:	83 c4 10             	add    esp,0x10
c001378c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013792:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013796:	6a 00                	push   0x0
c0013798:	68 80 51 01 00       	push   0x15180
c001379d:	55                   	push   ebp
c001379e:	57                   	push   edi
c001379f:	bf 10 0e 00 00       	mov    edi,0xe10
c00137a4:	e8 03 04 01 00       	call   c0023bac <__umoddi3>
c00137a9:	83 c4 10             	add    esp,0x10
c00137ac:	99                   	cdq    
c00137ad:	f7 ff                	idiv   edi
c00137af:	bf 3c 00 00 00       	mov    edi,0x3c
c00137b4:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00137b7:	89 d0                	mov    eax,edx
c00137b9:	99                   	cdq    
c00137ba:	f7 ff                	idiv   edi
c00137bc:	85 db                	test   ebx,ebx
c00137be:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00137c1:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00137c4:	79 11                	jns    c00137d7 <secondsToDatetime(unsigned long long)+0x6f>
c00137c6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00137ca:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00137d0:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00137d5:	eb 07                	jmp    c00137de <secondsToDatetime(unsigned long long)+0x76>
c00137d7:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00137dc:	89 d8                	mov    eax,ebx
c00137de:	bf b4 05 00 00       	mov    edi,0x5b4
c00137e3:	99                   	cdq    
c00137e4:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00137e9:	f7 f9                	idiv   ecx
c00137eb:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00137f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00137f4:	31 d2                	xor    edx,edx
c00137f6:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00137fe:	01 c3                	add    ebx,eax
c0013800:	89 d8                	mov    eax,ebx
c0013802:	f7 f1                	div    ecx
c0013804:	31 d2                	xor    edx,edx
c0013806:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013809:	89 d8                	mov    eax,ebx
c001380b:	f7 f7                	div    edi
c001380d:	31 d2                	xor    edx,edx
c001380f:	29 c1                	sub    ecx,eax
c0013811:	89 d8                	mov    eax,ebx
c0013813:	f7 f5                	div    ebp
c0013815:	bd 6d 01 00 00       	mov    ebp,0x16d
c001381a:	29 c1                	sub    ecx,eax
c001381c:	31 d2                	xor    edx,edx
c001381e:	89 c8                	mov    eax,ecx
c0013820:	f7 f5                	div    ebp
c0013822:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013827:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001382b:	31 d2                	xor    edx,edx
c001382d:	89 c8                	mov    eax,ecx
c001382f:	f7 f5                	div    ebp
c0013831:	31 d2                	xor    edx,edx
c0013833:	01 c3                	add    ebx,eax
c0013835:	89 c8                	mov    eax,ecx
c0013837:	f7 f7                	div    edi
c0013839:	bf 99 00 00 00       	mov    edi,0x99
c001383e:	29 c3                	sub    ebx,eax
c0013840:	31 d2                	xor    edx,edx
c0013842:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001384a:	29 c3                	sub    ebx,eax
c001384c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001384f:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013852:	bb 05 00 00 00       	mov    ebx,0x5
c0013857:	83 c1 02             	add    ecx,0x2
c001385a:	89 c8                	mov    eax,ecx
c001385c:	f7 f7                	div    edi
c001385e:	31 d2                	xor    edx,edx
c0013860:	89 c7                	mov    edi,eax
c0013862:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013868:	83 c0 02             	add    eax,0x2
c001386b:	f7 f3                	div    ebx
c001386d:	89 eb                	mov    ebx,ebp
c001386f:	29 c3                	sub    ebx,eax
c0013871:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013877:	88 1e                	mov    BYTE PTR [esi],bl
c0013879:	19 c0                	sbb    eax,eax
c001387b:	31 d2                	xor    edx,edx
c001387d:	83 e0 0c             	and    eax,0xc
c0013880:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013884:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001388c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013890:	83 f9 01             	cmp    ecx,0x1
c0013893:	0f 96 c2             	setbe  dl
c0013896:	41                   	inc    ecx
c0013897:	01 d0                	add    eax,edx
c0013899:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001389c:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00138a0:	83 c4 1c             	add    esp,0x1c
c00138a3:	89 f0                	mov    eax,esi
c00138a5:	5b                   	pop    ebx
c00138a6:	5e                   	pop    esi
c00138a7:	5f                   	pop    edi
c00138a8:	5d                   	pop    ebp
c00138a9:	c2 04 00             	ret    0x4

c00138ac <Clock::timeInDatetimeLocal()>:
c00138ac:	53                   	push   ebx
c00138ad:	83 ec 14             	sub    esp,0x14
c00138b0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00138b4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00138b8:	e8 83 fc ff ff       	call   c0013540 <Clock::timeInSecondsLocal()>
c00138bd:	83 c4 0c             	add    esp,0xc
c00138c0:	52                   	push   edx
c00138c1:	50                   	push   eax
c00138c2:	53                   	push   ebx
c00138c3:	e8 a0 fe ff ff       	call   c0013768 <secondsToDatetime(unsigned long long)>
c00138c8:	89 d8                	mov    eax,ebx
c00138ca:	83 c4 14             	add    esp,0x14
c00138cd:	5b                   	pop    ebx
c00138ce:	c2 04 00             	ret    0x4
c00138d1:	90                   	nop

c00138d2 <Device::hibernate()>:
c00138d2:	c3                   	ret    
c00138d3:	90                   	nop

c00138d4 <Device::wake()>:
c00138d4:	c3                   	ret    
c00138d5:	90                   	nop

c00138d6 <Device::detect()>:
c00138d6:	c3                   	ret    
c00138d7:	90                   	nop

c00138d8 <Device::disableLegacy()>:
c00138d8:	c3                   	ret    
c00138d9:	90                   	nop

c00138da <Device::powerSaving(PowerSavingLevel)>:
c00138da:	c3                   	ret    
c00138db:	90                   	nop

c00138dc <DriverlessDevice::close(int, int, void*)>:
c00138dc:	31 c0                	xor    eax,eax
c00138de:	c3                   	ret    
c00138df:	90                   	nop

c00138e0 <DriverlessDevice::detect()>:
c00138e0:	c3                   	ret    
c00138e1:	90                   	nop

c00138e2 <DriverlessDevice::open(int, int, void*)>:
c00138e2:	83 ec 18             	sub    esp,0x18
c00138e5:	68 d0 7a 02 c0       	push   0xc0027ad0
c00138ea:	e8 0a 55 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c00138ef:	83 c8 ff             	or     eax,0xffffffff
c00138f2:	83 c4 1c             	add    esp,0x1c
c00138f5:	c3                   	ret    

c00138f6 <Device::~Device()>:
c00138f6:	ba f8 7a 02 c0       	mov    edx,0xc0027af8
c00138fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138ff:	89 10                	mov    DWORD PTR [eax],edx
c0013901:	90                   	nop
c0013902:	c3                   	ret    
c0013903:	90                   	nop

c0013904 <Device::~Device()>:
c0013904:	83 ec 0c             	sub    esp,0xc
c0013907:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001390b:	e8 e6 ff ff ff       	call   c00138f6 <Device::~Device()>
c0013910:	83 c4 04             	add    esp,0x4
c0013913:	83 ec 08             	sub    esp,0x8
c0013916:	68 58 01 00 00       	push   0x158
c001391b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001391f:	e8 31 ec ff ff       	call   c0012555 <operator delete(void*, unsigned long)>
c0013924:	83 c4 10             	add    esp,0x10
c0013927:	83 c4 0c             	add    esp,0xc
c001392a:	c3                   	ret    
c001392b:	90                   	nop

c001392c <Device::findAndLoadDriver()>:
c001392c:	c3                   	ret    
c001392d:	90                   	nop

c001392e <Device::preOpenPCI(PCIDeviceInfo)>:
c001392e:	57                   	push   edi
c001392f:	b9 09 00 00 00       	mov    ecx,0x9
c0013934:	56                   	push   esi
c0013935:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013939:	8d 74 24 10          	lea    esi,[esp+0x10]
c001393d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013947:	81 c7 18 01 00 00    	add    edi,0x118
c001394d:	fc                   	cld    
c001394e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013950:	5e                   	pop    esi
c0013951:	5f                   	pop    edi
c0013952:	c3                   	ret    
c0013953:	90                   	nop

c0013954 <Device::preOpenACPI(void*, char*, char*)>:
c0013954:	56                   	push   esi
c0013955:	53                   	push   ebx
c0013956:	83 ec 08             	sub    esp,0x8
c0013959:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001395d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013961:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c001396b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001396f:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013975:	6a 1e                	push   0x1e
c0013977:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c001397d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013981:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013987:	50                   	push   eax
c0013988:	e8 ba cc fe ff       	call   c0000647 <memcpy>
c001398d:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013991:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013995:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c001399d:	83 c4 14             	add    esp,0x14
c00139a0:	5b                   	pop    ebx
c00139a1:	5e                   	pop    esi
c00139a2:	e9 a0 cc fe ff       	jmp    c0000647 <memcpy>
c00139a7:	90                   	nop

c00139a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00139a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139ac:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00139b1:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00139b8:	75 0b                	jne    c00139c5 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00139ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00139bc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00139c0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00139c3:	eb 1e                	jmp    c00139e3 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00139c5:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c00139ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00139d0:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00139d6:	8b 08                	mov    ecx,DWORD PTR [eax]
c00139d8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00139dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00139e0:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00139e3:	ff e0                	jmp    eax
c00139e5:	90                   	nop

c00139e6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00139e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139ea:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00139ef:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00139f6:	75 0b                	jne    c0013a03 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00139f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00139fa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00139fe:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013a01:	eb 1e                	jmp    c0013a21 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013a03:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c0013a08:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013a0e:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013a14:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a16:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a1a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013a1e:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013a21:	ff e0                	jmp    eax
c0013a23:	90                   	nop

c0013a24 <Device::addChild(Device*)>:
c0013a24:	53                   	push   ebx
c0013a25:	83 ec 08             	sub    esp,0x8
c0013a28:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a30:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013a36:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013a3c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013a3e:	85 d2                	test   edx,edx
c0013a40:	74 04                	je     c0013a46 <Device::addChild(Device*)+0x22>
c0013a42:	89 d3                	mov    ebx,edx
c0013a44:	eb f6                	jmp    c0013a3c <Device::addChild(Device*)+0x18>
c0013a46:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013a49:	83 ec 0c             	sub    esp,0xc
c0013a4c:	6a 08                	push   0x8
c0013a4e:	e8 6f ba ff ff       	call   c000f4c2 <malloc>
c0013a53:	89 03                	mov    DWORD PTR [ebx],eax
c0013a55:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013a5b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013a62:	83 c4 18             	add    esp,0x18
c0013a65:	5b                   	pop    ebx
c0013a66:	c3                   	ret    
c0013a67:	90                   	nop

c0013a68 <Device::removeAllChildren()>:
c0013a68:	56                   	push   esi
c0013a69:	53                   	push   ebx
c0013a6a:	52                   	push   edx
c0013a6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013a6f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013a75:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013a78:	74 17                	je     c0013a91 <Device::removeAllChildren()+0x29>
c0013a7a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013a7d:	85 c0                	test   eax,eax
c0013a7f:	74 0c                	je     c0013a8d <Device::removeAllChildren()+0x25>
c0013a81:	83 ec 0c             	sub    esp,0xc
c0013a84:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a86:	50                   	push   eax
c0013a87:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013a8a:	83 c4 10             	add    esp,0x10
c0013a8d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013a8f:	eb e4                	jmp    c0013a75 <Device::removeAllChildren()+0xd>
c0013a91:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013a97:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013a9d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013aa3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013aaa:	58                   	pop    eax
c0013aab:	5b                   	pop    ebx
c0013aac:	5e                   	pop    esi
c0013aad:	c3                   	ret    

c0013aae <Device::hibernateAll()>:
c0013aae:	53                   	push   ebx
c0013aaf:	83 ec 14             	sub    esp,0x14
c0013ab2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ab6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ab8:	53                   	push   ebx
c0013ab9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013abc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ac2:	83 c4 10             	add    esp,0x10
c0013ac5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ac8:	74 0f                	je     c0013ad9 <Device::hibernateAll()+0x2b>
c0013aca:	83 ec 0c             	sub    esp,0xc
c0013acd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ad0:	e8 d9 ff ff ff       	call   c0013aae <Device::hibernateAll()>
c0013ad5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ad7:	eb e9                	jmp    c0013ac2 <Device::hibernateAll()+0x14>
c0013ad9:	83 c4 08             	add    esp,0x8
c0013adc:	5b                   	pop    ebx
c0013add:	c3                   	ret    

c0013ade <Device::wakeAll()>:
c0013ade:	53                   	push   ebx
c0013adf:	83 ec 14             	sub    esp,0x14
c0013ae2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ae6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ae8:	53                   	push   ebx
c0013ae9:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013aec:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013af2:	83 c4 10             	add    esp,0x10
c0013af5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013af8:	74 0f                	je     c0013b09 <Device::wakeAll()+0x2b>
c0013afa:	83 ec 0c             	sub    esp,0xc
c0013afd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b00:	e8 d9 ff ff ff       	call   c0013ade <Device::wakeAll()>
c0013b05:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b07:	eb e9                	jmp    c0013af2 <Device::wakeAll()+0x14>
c0013b09:	83 c4 08             	add    esp,0x8
c0013b0c:	5b                   	pop    ebx
c0013b0d:	c3                   	ret    

c0013b0e <Device::detectAll()>:
c0013b0e:	53                   	push   ebx
c0013b0f:	83 ec 14             	sub    esp,0x14
c0013b12:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b18:	53                   	push   ebx
c0013b19:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013b1c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b22:	83 c4 10             	add    esp,0x10
c0013b25:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b28:	74 0f                	je     c0013b39 <Device::detectAll()+0x2b>
c0013b2a:	83 ec 0c             	sub    esp,0xc
c0013b2d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b30:	e8 d9 ff ff ff       	call   c0013b0e <Device::detectAll()>
c0013b35:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b37:	eb e9                	jmp    c0013b22 <Device::detectAll()+0x14>
c0013b39:	83 c4 08             	add    esp,0x8
c0013b3c:	5b                   	pop    ebx
c0013b3d:	c3                   	ret    

c0013b3e <Device::disableLegacyAll()>:
c0013b3e:	53                   	push   ebx
c0013b3f:	83 ec 14             	sub    esp,0x14
c0013b42:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b46:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b48:	53                   	push   ebx
c0013b49:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013b4c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b52:	83 c4 10             	add    esp,0x10
c0013b55:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b58:	74 0f                	je     c0013b69 <Device::disableLegacyAll()+0x2b>
c0013b5a:	83 ec 0c             	sub    esp,0xc
c0013b5d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b60:	e8 d9 ff ff ff       	call   c0013b3e <Device::disableLegacyAll()>
c0013b65:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b67:	eb e9                	jmp    c0013b52 <Device::disableLegacyAll()+0x14>
c0013b69:	83 c4 08             	add    esp,0x8
c0013b6c:	5b                   	pop    ebx
c0013b6d:	c3                   	ret    

c0013b6e <Device::loadDriversForAll()>:
c0013b6e:	53                   	push   ebx
c0013b6f:	83 ec 08             	sub    esp,0x8
c0013b72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b76:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013b7c:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013b7e:	85 db                	test   ebx,ebx
c0013b80:	74 12                	je     c0013b94 <Device::loadDriversForAll()+0x26>
c0013b82:	83 ec 0c             	sub    esp,0xc
c0013b85:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013b88:	e8 e1 ff ff ff       	call   c0013b6e <Device::loadDriversForAll()>
c0013b8d:	83 c4 10             	add    esp,0x10
c0013b90:	89 d8                	mov    eax,ebx
c0013b92:	eb e8                	jmp    c0013b7c <Device::loadDriversForAll()+0xe>
c0013b94:	83 c4 08             	add    esp,0x8
c0013b97:	5b                   	pop    ebx
c0013b98:	c3                   	ret    
c0013b99:	90                   	nop

c0013b9a <Device::closeAll()>:
c0013b9a:	53                   	push   ebx
c0013b9b:	83 ec 08             	sub    esp,0x8
c0013b9e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ba2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ba4:	6a 00                	push   0x0
c0013ba6:	6a 00                	push   0x0
c0013ba8:	6a 00                	push   0x0
c0013baa:	53                   	push   ebx
c0013bab:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013bae:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bb4:	83 c4 10             	add    esp,0x10
c0013bb7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bba:	74 0f                	je     c0013bcb <Device::closeAll()+0x31>
c0013bbc:	83 ec 0c             	sub    esp,0xc
c0013bbf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bc2:	e8 d3 ff ff ff       	call   c0013b9a <Device::closeAll()>
c0013bc7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bc9:	eb e9                	jmp    c0013bb4 <Device::closeAll()+0x1a>
c0013bcb:	83 c4 08             	add    esp,0x8
c0013bce:	5b                   	pop    ebx
c0013bcf:	c3                   	ret    

c0013bd0 <Device::powerSavingAll(PowerSavingLevel)>:
c0013bd0:	56                   	push   esi
c0013bd1:	53                   	push   ebx
c0013bd2:	83 ec 0c             	sub    esp,0xc
c0013bd5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013bd9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013bdd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bdf:	56                   	push   esi
c0013be0:	53                   	push   ebx
c0013be1:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013be4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bea:	83 c4 10             	add    esp,0x10
c0013bed:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bf0:	74 0f                	je     c0013c01 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013bf2:	52                   	push   edx
c0013bf3:	52                   	push   edx
c0013bf4:	56                   	push   esi
c0013bf5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bf8:	e8 d3 ff ff ff       	call   c0013bd0 <Device::powerSavingAll(PowerSavingLevel)>
c0013bfd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bff:	eb e9                	jmp    c0013bea <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013c01:	58                   	pop    eax
c0013c02:	5b                   	pop    ebx
c0013c03:	5e                   	pop    esi
c0013c04:	c3                   	ret    
c0013c05:	90                   	nop

c0013c06 <Device::setName(char const*)>:
c0013c06:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013c0e:	e9 09 cb fe ff       	jmp    c000071c <strcpy>
c0013c13:	90                   	nop

c0013c14 <Device::Device(char const*)>:
c0013c14:	83 ec 1c             	sub    esp,0x1c
c0013c17:	ba f8 7a 02 c0       	mov    edx,0xc0027af8
c0013c1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c20:	89 10                	mov    DWORD PTR [eax],edx
c0013c22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c26:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013c30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c34:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013c3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c42:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013c4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c50:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013c5a:	83 ec 08             	sub    esp,0x8
c0013c5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c61:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c65:	e8 9c ff ff ff       	call   c0013c06 <Device::setName(char const*)>
c0013c6a:	83 c4 10             	add    esp,0x10
c0013c6d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013c75:	83 ec 0c             	sub    esp,0xc
c0013c78:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c7c:	e8 41 b8 ff ff       	call   c000f4c2 <malloc>
c0013c81:	83 c4 10             	add    esp,0x10
c0013c84:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013c8a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013c91:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013c95:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013c9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c9f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013ca5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013cab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013caf:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013cb5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013cbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cc0:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013cc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ccb:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013cd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cd6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013ce0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ce4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013cee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cf2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013cfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d00:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013d0a:	90                   	nop
c0013d0b:	83 c4 1c             	add    esp,0x1c
c0013d0e:	c3                   	ret    
c0013d0f:	90                   	nop

c0013d10 <Device::getName()>:
c0013d10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d14:	05 d0 00 00 00       	add    eax,0xd0
c0013d19:	c3                   	ret    

c0013d1a <DriverlessDevice::DriverlessDevice(char const*)>:
c0013d1a:	83 ec 0c             	sub    esp,0xc
c0013d1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d21:	83 ec 08             	sub    esp,0x8
c0013d24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d28:	50                   	push   eax
c0013d29:	e8 e6 fe ff ff       	call   c0013c14 <Device::Device(char const*)>
c0013d2e:	83 c4 10             	add    esp,0x10
c0013d31:	ba 24 7b 02 c0       	mov    edx,0xc0027b24
c0013d36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d3a:	89 10                	mov    DWORD PTR [eax],edx
c0013d3c:	90                   	nop
c0013d3d:	83 c4 0c             	add    esp,0xc
c0013d40:	c3                   	ret    
c0013d41:	90                   	nop

c0013d42 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013d42:	57                   	push   edi
c0013d43:	56                   	push   esi
c0013d44:	53                   	push   ebx
c0013d45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d49:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013d4d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d51:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013d57:	75 0c                	jne    c0013d65 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013d59:	52                   	push   edx
c0013d5a:	52                   	push   edx
c0013d5b:	53                   	push   ebx
c0013d5c:	56                   	push   esi
c0013d5d:	e8 88 1c 01 00       	call   c00259ea <LinkedList<Device>::addElement(Device*)>
c0013d62:	83 c4 10             	add    esp,0x10
c0013d65:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d6b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d6e:	74 12                	je     c0013d82 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013d70:	50                   	push   eax
c0013d71:	57                   	push   edi
c0013d72:	56                   	push   esi
c0013d73:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d76:	e8 c7 ff ff ff       	call   c0013d42 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013d7b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d7d:	83 c4 10             	add    esp,0x10
c0013d80:	eb e9                	jmp    c0013d6b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013d82:	5b                   	pop    ebx
c0013d83:	5e                   	pop    esi
c0013d84:	5f                   	pop    edi
c0013d85:	c3                   	ret    

c0013d86 <getDevicesOfType(DeviceType)>:
c0013d86:	53                   	push   ebx
c0013d87:	83 ec 14             	sub    esp,0x14
c0013d8a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d8e:	53                   	push   ebx
c0013d8f:	e8 32 1d 01 00       	call   c0025ac6 <LinkedList<Device>::LinkedList()>
c0013d94:	83 c4 0c             	add    esp,0xc
c0013d97:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013d9b:	53                   	push   ebx
c0013d9c:	ff 35 48 ab 02 c0    	push   DWORD PTR ds:0xc002ab48
c0013da2:	e8 9b ff ff ff       	call   c0013d42 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013da7:	89 d8                	mov    eax,ebx
c0013da9:	83 c4 18             	add    esp,0x18
c0013dac:	5b                   	pop    ebx
c0013dad:	c2 04 00             	ret    0x4

c0013db0 <HardDiskController::HardDiskController(char const*)>:
c0013db0:	83 ec 0c             	sub    esp,0xc
c0013db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013db7:	83 ec 08             	sub    esp,0x8
c0013dba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dbe:	50                   	push   eax
c0013dbf:	e8 50 fe ff ff       	call   c0013c14 <Device::Device(char const*)>
c0013dc4:	83 c4 10             	add    esp,0x10
c0013dc7:	ba 50 7b 02 c0       	mov    edx,0xc0027b50
c0013dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dd0:	89 10                	mov    DWORD PTR [eax],edx
c0013dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dd6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013de0:	90                   	nop
c0013de1:	83 c4 0c             	add    esp,0xc
c0013de4:	c3                   	ret    
c0013de5:	90                   	nop

c0013de6 <HardDiskController::~HardDiskController()>:
c0013de6:	83 ec 0c             	sub    esp,0xc
c0013de9:	ba 50 7b 02 c0       	mov    edx,0xc0027b50
c0013dee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013df2:	89 10                	mov    DWORD PTR [eax],edx
c0013df4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013df8:	83 ec 0c             	sub    esp,0xc
c0013dfb:	50                   	push   eax
c0013dfc:	e8 f5 fa ff ff       	call   c00138f6 <Device::~Device()>
c0013e01:	83 c4 10             	add    esp,0x10
c0013e04:	90                   	nop
c0013e05:	83 c4 0c             	add    esp,0xc
c0013e08:	c3                   	ret    
c0013e09:	90                   	nop

c0013e0a <HardDiskController::~HardDiskController()>:
c0013e0a:	83 ec 0c             	sub    esp,0xc
c0013e0d:	83 ec 0c             	sub    esp,0xc
c0013e10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e14:	e8 cd ff ff ff       	call   c0013de6 <HardDiskController::~HardDiskController()>
c0013e19:	83 c4 10             	add    esp,0x10
c0013e1c:	83 ec 08             	sub    esp,0x8
c0013e1f:	68 58 01 00 00       	push   0x158
c0013e24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e28:	e8 28 e7 ff ff       	call   c0012555 <operator delete(void*, unsigned long)>
c0013e2d:	83 c4 10             	add    esp,0x10
c0013e30:	83 c4 0c             	add    esp,0xc
c0013e33:	c3                   	ret    

c0013e34 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013e34:	83 ec 0c             	sub    esp,0xc
c0013e37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e3b:	83 ec 08             	sub    esp,0x8
c0013e3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e42:	50                   	push   eax
c0013e43:	e8 cc fd ff ff       	call   c0013c14 <Device::Device(char const*)>
c0013e48:	83 c4 10             	add    esp,0x10
c0013e4b:	ba 7c 7b 02 c0       	mov    edx,0xc0027b7c
c0013e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e54:	89 10                	mov    DWORD PTR [eax],edx
c0013e56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e5a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013e61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e65:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013e6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e70:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e7e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e82:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e8c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013e96:	90                   	nop
c0013e97:	83 c4 0c             	add    esp,0xc
c0013e9a:	c3                   	ret    
c0013e9b:	90                   	nop

c0013e9c <PhysicalDisk::startCache()>:
c0013e9c:	56                   	push   esi
c0013e9d:	53                   	push   ebx
c0013e9e:	83 ec 10             	sub    esp,0x10
c0013ea1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ea5:	6a 30                	push   0x30
c0013ea7:	e8 16 b6 ff ff       	call   c000f4c2 <malloc>
c0013eac:	89 c6                	mov    esi,eax
c0013eae:	58                   	pop    eax
c0013eaf:	5a                   	pop    edx
c0013eb0:	53                   	push   ebx
c0013eb1:	56                   	push   esi
c0013eb2:	e8 df 24 00 00       	call   c0016396 <VCache::VCache(PhysicalDisk*)>
c0013eb7:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013ebd:	83 c4 14             	add    esp,0x14
c0013ec0:	5b                   	pop    ebx
c0013ec1:	5e                   	pop    esi
c0013ec2:	c3                   	ret    
c0013ec3:	90                   	nop

c0013ec4 <PhysicalDisk::~PhysicalDisk()>:
c0013ec4:	83 ec 0c             	sub    esp,0xc
c0013ec7:	ba 7c 7b 02 c0       	mov    edx,0xc0027b7c
c0013ecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ed0:	89 10                	mov    DWORD PTR [eax],edx
c0013ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ed6:	83 ec 0c             	sub    esp,0xc
c0013ed9:	50                   	push   eax
c0013eda:	e8 17 fa ff ff       	call   c00138f6 <Device::~Device()>
c0013edf:	83 c4 10             	add    esp,0x10
c0013ee2:	90                   	nop
c0013ee3:	83 c4 0c             	add    esp,0xc
c0013ee6:	c3                   	ret    
c0013ee7:	90                   	nop

c0013ee8 <PhysicalDisk::~PhysicalDisk()>:
c0013ee8:	83 ec 0c             	sub    esp,0xc
c0013eeb:	83 ec 0c             	sub    esp,0xc
c0013eee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ef2:	e8 cd ff ff ff       	call   c0013ec4 <PhysicalDisk::~PhysicalDisk()>
c0013ef7:	83 c4 10             	add    esp,0x10
c0013efa:	83 ec 08             	sub    esp,0x8
c0013efd:	68 6c 01 00 00       	push   0x16c
c0013f02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f06:	e8 4a e6 ff ff       	call   c0012555 <operator delete(void*, unsigned long)>
c0013f0b:	83 c4 10             	add    esp,0x10
c0013f0e:	83 c4 0c             	add    esp,0xc
c0013f11:	c3                   	ret    

c0013f12 <FPU::FPU(char const*)>:
c0013f12:	83 ec 0c             	sub    esp,0xc
c0013f15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f19:	83 ec 08             	sub    esp,0x8
c0013f1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f20:	50                   	push   eax
c0013f21:	e8 ee fc ff ff       	call   c0013c14 <Device::Device(char const*)>
c0013f26:	83 c4 10             	add    esp,0x10
c0013f29:	ba bc 7b 02 c0       	mov    edx,0xc0027bbc
c0013f2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f32:	89 10                	mov    DWORD PTR [eax],edx
c0013f34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f38:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013f42:	90                   	nop
c0013f43:	83 c4 0c             	add    esp,0xc
c0013f46:	c3                   	ret    
c0013f47:	90                   	nop

c0013f48 <FPU::~FPU()>:
c0013f48:	83 ec 0c             	sub    esp,0xc
c0013f4b:	ba bc 7b 02 c0       	mov    edx,0xc0027bbc
c0013f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f54:	89 10                	mov    DWORD PTR [eax],edx
c0013f56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f5a:	83 ec 0c             	sub    esp,0xc
c0013f5d:	50                   	push   eax
c0013f5e:	e8 93 f9 ff ff       	call   c00138f6 <Device::~Device()>
c0013f63:	83 c4 10             	add    esp,0x10
c0013f66:	90                   	nop
c0013f67:	83 c4 0c             	add    esp,0xc
c0013f6a:	c3                   	ret    
c0013f6b:	90                   	nop

c0013f6c <FPU::~FPU()>:
c0013f6c:	83 ec 0c             	sub    esp,0xc
c0013f6f:	83 ec 0c             	sub    esp,0xc
c0013f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f76:	e8 cd ff ff ff       	call   c0013f48 <FPU::~FPU()>
c0013f7b:	83 c4 10             	add    esp,0x10
c0013f7e:	83 ec 08             	sub    esp,0x8
c0013f81:	68 58 01 00 00       	push   0x158
c0013f86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f8a:	e8 c6 e5 ff ff       	call   c0012555 <operator delete(void*, unsigned long)>
c0013f8f:	83 c4 10             	add    esp,0x10
c0013f92:	83 c4 0c             	add    esp,0xc
c0013f95:	c3                   	ret    

c0013f96 <setupFPU()>:
c0013f96:	53                   	push   ebx
c0013f97:	83 ec 08             	sub    esp,0x8
c0013f9a:	8b 15 48 ab 02 c0    	mov    edx,DWORD PTR ds:0xc002ab48
c0013fa0:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0013fa7:	74 19                	je     c0013fc2 <setupFPU()+0x2c>
c0013fa9:	83 ec 0c             	sub    esp,0xc
c0013fac:	68 58 01 00 00       	push   0x158
c0013fb1:	e8 0c b5 ff ff       	call   c000f4c2 <malloc>
c0013fb6:	89 c3                	mov    ebx,eax
c0013fb8:	89 04 24             	mov    DWORD PTR [esp],eax
c0013fbb:	e8 7e e6 00 00       	call   c002263e <AVX::AVX()>
c0013fc0:	eb 5b                	jmp    c001401d <setupFPU()+0x87>
c0013fc2:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013fc8:	84 c0                	test   al,al
c0013fca:	79 19                	jns    c0013fe5 <setupFPU()+0x4f>
c0013fcc:	83 ec 0c             	sub    esp,0xc
c0013fcf:	68 58 01 00 00       	push   0x158
c0013fd4:	e8 e9 b4 ff ff       	call   c000f4c2 <malloc>
c0013fd9:	89 c3                	mov    ebx,eax
c0013fdb:	89 04 24             	mov    DWORD PTR [esp],eax
c0013fde:	e8 81 e7 00 00       	call   c0022764 <SSE::SSE()>
c0013fe3:	eb 38                	jmp    c001401d <setupFPU()+0x87>
c0013fe5:	a8 20                	test   al,0x20
c0013fe7:	74 19                	je     c0014002 <setupFPU()+0x6c>
c0013fe9:	83 ec 0c             	sub    esp,0xc
c0013fec:	68 58 01 00 00       	push   0x158
c0013ff1:	e8 cc b4 ff ff       	call   c000f4c2 <malloc>
c0013ff6:	89 c3                	mov    ebx,eax
c0013ff8:	89 04 24             	mov    DWORD PTR [esp],eax
c0013ffb:	e8 ce e6 00 00       	call   c00226ce <MMX::MMX()>
c0014000:	eb 1b                	jmp    c001401d <setupFPU()+0x87>
c0014002:	a8 10                	test   al,0x10
c0014004:	74 1c                	je     c0014022 <setupFPU()+0x8c>
c0014006:	83 ec 0c             	sub    esp,0xc
c0014009:	68 58 01 00 00       	push   0x158
c001400e:	e8 af b4 ff ff       	call   c000f4c2 <malloc>
c0014013:	89 c3                	mov    ebx,eax
c0014015:	89 04 24             	mov    DWORD PTR [esp],eax
c0014018:	e8 d5 e7 00 00       	call   c00227f2 <x87::x87()>
c001401d:	83 c4 10             	add    esp,0x10
c0014020:	eb 24                	jmp    c0014046 <setupFPU()+0xb0>
c0014022:	83 e0 ef             	and    eax,0xffffffef
c0014025:	83 ec 0c             	sub    esp,0xc
c0014028:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001402e:	68 a8 7b 02 c0       	push   0xc0027ba8
c0014033:	e8 fd e5 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0014038:	0f 20 c0             	mov    eax,cr0
c001403b:	83 c8 04             	or     eax,0x4
c001403e:	0f 22 c0             	mov    cr0,eax
c0014041:	31 db                	xor    ebx,ebx
c0014043:	83 c4 10             	add    esp,0x10
c0014046:	89 d8                	mov    eax,ebx
c0014048:	83 c4 08             	add    esp,0x8
c001404b:	5b                   	pop    ebx
c001404c:	c3                   	ret    
c001404d:	90                   	nop

c001404e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001404e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014052:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014056:	c1 e0 04             	shl    eax,0x4
c0014059:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001405d:	8d 50 10             	lea    edx,[eax+0x10]
c0014060:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014066:	74 08                	je     c0014070 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014068:	83 c0 04             	add    eax,0x4
c001406b:	39 d0                	cmp    eax,edx
c001406d:	75 f1                	jne    c0014060 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001406f:	c3                   	ret    
c0014070:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001407a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014084:	eb e2                	jmp    c0014068 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014086 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014086:	57                   	push   edi
c0014087:	31 c0                	xor    eax,eax
c0014089:	56                   	push   esi
c001408a:	53                   	push   ebx
c001408b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001408f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014093:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014097:	89 da                	mov    edx,ebx
c0014099:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001409d:	c1 e2 04             	shl    edx,0x4
c00140a0:	01 ca                	add    edx,ecx
c00140a2:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00140aa:	74 16                	je     c00140c2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00140ac:	40                   	inc    eax
c00140ad:	83 f8 04             	cmp    eax,0x4
c00140b0:	75 f0                	jne    c00140a2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00140b2:	c7 44 24 10 ec 7b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0027bec
c00140ba:	5b                   	pop    ebx
c00140bb:	5e                   	pop    esi
c00140bc:	5f                   	pop    edi
c00140bd:	e9 37 4d 00 00       	jmp    c0018df9 <Krnl::panic(char const*)>
c00140c2:	8d 04 98             	lea    eax,[eax+ebx*4]
c00140c5:	8d 04 81             	lea    eax,[ecx+eax*4]
c00140c8:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00140ce:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00140d4:	5b                   	pop    ebx
c00140d5:	5e                   	pop    esi
c00140d6:	5f                   	pop    edi
c00140d7:	c3                   	ret    

c00140d8 <doubleFault(regs*, void*)>:
c00140d8:	55                   	push   ebp
c00140d9:	89 e5                	mov    ebp,esp
c00140db:	83 ec 08             	sub    esp,0x8
c00140de:	83 ec 0c             	sub    esp,0xc
c00140e1:	68 27 7c 02 c0       	push   0xc0027c27
c00140e6:	e8 0e 4d 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c00140eb:	83 c4 10             	add    esp,0x10
c00140ee:	90                   	nop
c00140ef:	c9                   	leave  
c00140f0:	c3                   	ret    
c00140f1:	90                   	nop

c00140f2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00140f2:	56                   	push   esi
c00140f3:	53                   	push   ebx
c00140f4:	50                   	push   eax
c00140f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00140f9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00140fd:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014102:	75 35                	jne    c0014139 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014104:	8d 43 20             	lea    eax,[ebx+0x20]
c0014107:	31 d2                	xor    edx,edx
c0014109:	89 c1                	mov    ecx,eax
c001410b:	c1 e1 04             	shl    ecx,0x4
c001410e:	01 f1                	add    ecx,esi
c0014110:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014118:	74 3e                	je     c0014158 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c001411a:	42                   	inc    edx
c001411b:	83 fa 04             	cmp    edx,0x4
c001411e:	75 f0                	jne    c0014110 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014120:	83 ec 0c             	sub    esp,0xc
c0014123:	68 6c 7c 02 c0       	push   0xc0027c6c
c0014128:	e8 cc 4c 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c001412d:	83 c4 10             	add    esp,0x10
c0014130:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014135:	5a                   	pop    edx
c0014136:	5b                   	pop    ebx
c0014137:	5e                   	pop    esi
c0014138:	c3                   	ret    
c0014139:	83 ec 0c             	sub    esp,0xc
c001413c:	56                   	push   esi
c001413d:	e8 ce fb ff ff       	call   c0013d10 <Device::getName()>
c0014142:	83 c4 10             	add    esp,0x10
c0014145:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014148:	75 ba                	jne    c0014104 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001414a:	83 fb 0f             	cmp    ebx,0xf
c001414d:	7f 29                	jg     c0014178 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c001414f:	0f b6 9b 20 9e 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd61e0]
c0014156:	eb ac                	jmp    c0014104 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014158:	8d 04 82             	lea    eax,[edx+eax*4]
c001415b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001415f:	8d 04 86             	lea    eax,[esi+eax*4]
c0014162:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014168:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001416c:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014172:	89 d8                	mov    eax,ebx
c0014174:	5a                   	pop    edx
c0014175:	5b                   	pop    ebx
c0014176:	5e                   	pop    esi
c0014177:	c3                   	ret    
c0014178:	83 ec 0c             	sub    esp,0xc
c001417b:	68 34 7c 02 c0       	push   0xc0027c34
c0014180:	e8 74 4c 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c0014185:	83 c4 10             	add    esp,0x10
c0014188:	e9 77 ff ff ff       	jmp    c0014104 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001418d:	90                   	nop

c001418e <InterruptController::clearAllHandlers(int, bool)>:
c001418e:	56                   	push   esi
c001418f:	53                   	push   ebx
c0014190:	52                   	push   edx
c0014191:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014195:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014199:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001419e:	75 61                	jne    c0014201 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00141a0:	8d 46 20             	lea    eax,[esi+0x20]
c00141a3:	c1 e6 04             	shl    esi,0x4
c00141a6:	c1 e0 04             	shl    eax,0x4
c00141a9:	01 de                	add    esi,ebx
c00141ab:	01 d8                	add    eax,ebx
c00141ad:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00141b7:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00141c1:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00141cb:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00141d5:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00141df:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00141e9:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00141f3:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00141fd:	58                   	pop    eax
c00141fe:	5b                   	pop    ebx
c00141ff:	5e                   	pop    esi
c0014200:	c3                   	ret    
c0014201:	83 ec 0c             	sub    esp,0xc
c0014204:	53                   	push   ebx
c0014205:	e8 06 fb ff ff       	call   c0013d10 <Device::getName()>
c001420a:	83 c4 10             	add    esp,0x10
c001420d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014210:	75 8e                	jne    c00141a0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014212:	83 fe 0f             	cmp    esi,0xf
c0014215:	7f 09                	jg     c0014220 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014217:	0f b6 b6 20 9e 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd61e0]
c001421e:	eb 80                	jmp    c00141a0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014220:	83 ec 0c             	sub    esp,0xc
c0014223:	68 a8 7c 02 c0       	push   0xc0027ca8
c0014228:	e8 cc 4b 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c001422d:	83 c4 10             	add    esp,0x10
c0014230:	e9 6b ff ff ff       	jmp    c00141a0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014235:	90                   	nop

c0014236 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014236:	56                   	push   esi
c0014237:	53                   	push   ebx
c0014238:	52                   	push   edx
c0014239:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001423d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014241:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014246:	75 3a                	jne    c0014282 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014248:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001424c:	8d 50 20             	lea    edx,[eax+0x20]
c001424f:	c1 e2 04             	shl    edx,0x4
c0014252:	8d 04 16             	lea    eax,[esi+edx*1]
c0014255:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014259:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c001425f:	74 0b                	je     c001426c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014261:	83 c0 04             	add    eax,0x4
c0014264:	39 d0                	cmp    eax,edx
c0014266:	75 f1                	jne    c0014259 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014268:	58                   	pop    eax
c0014269:	5b                   	pop    ebx
c001426a:	5e                   	pop    esi
c001426b:	c3                   	ret    
c001426c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014276:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014280:	eb df                	jmp    c0014261 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014282:	83 ec 0c             	sub    esp,0xc
c0014285:	56                   	push   esi
c0014286:	e8 85 fa ff ff       	call   c0013d10 <Device::getName()>
c001428b:	83 c4 10             	add    esp,0x10
c001428e:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014291:	75 b5                	jne    c0014248 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014293:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014298:	7f 11                	jg     c00142ab <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c001429a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001429e:	0f b6 80 20 9e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd61e0]
c00142a5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00142a9:	eb 9d                	jmp    c0014248 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00142ab:	83 ec 0c             	sub    esp,0xc
c00142ae:	68 a8 7c 02 c0       	push   0xc0027ca8
c00142b3:	e8 41 4b 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c00142b8:	83 c4 10             	add    esp,0x10
c00142bb:	eb 8b                	jmp    c0014248 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00142bd <nmiHandler(regs*, void*)>:
c00142bd:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c00142c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142c6:	e9 43 a9 ff ff       	jmp    c000ec0e <Computer::handleNMI()>

c00142cb <int_handler>:
c00142cb:	55                   	push   ebp
c00142cc:	57                   	push   edi
c00142cd:	56                   	push   esi
c00142ce:	53                   	push   ebx
c00142cf:	83 ec 0c             	sub    esp,0xc
c00142d2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00142d6:	80 3d 54 b6 02 c0 00 	cmp    BYTE PTR ds:0xc002b654,0x0
c00142dd:	74 0b                	je     c00142ea <int_handler+0x1f>
c00142df:	fa                   	cli    
c00142e0:	f4                   	hlt    
c00142e1:	80 3d 54 b6 02 c0 00 	cmp    BYTE PTR ds:0xc002b654,0x0
c00142e8:	75 f5                	jne    c00142df <int_handler+0x14>
c00142ea:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c00142ef:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00142f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00142f8:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c00142fe:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014301:	83 f8 17             	cmp    eax,0x17
c0014304:	77 13                	ja     c0014319 <int_handler+0x4e>
c0014306:	83 ec 08             	sub    esp,0x8
c0014309:	8b 17                	mov    edx,DWORD PTR [edi]
c001430b:	8d 43 e0             	lea    eax,[ebx-0x20]
c001430e:	0f b6 c0             	movzx  eax,al
c0014311:	50                   	push   eax
c0014312:	57                   	push   edi
c0014313:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014316:	83 c4 10             	add    esp,0x10
c0014319:	83 c3 15             	add    ebx,0x15
c001431c:	c1 e3 04             	shl    ebx,0x4
c001431f:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014323:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c001432a:	31 db                	xor    ebx,ebx
c001432c:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014330:	85 c0                	test   eax,eax
c0014332:	74 13                	je     c0014347 <int_handler+0x7c>
c0014334:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014337:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c001433b:	74 1c                	je     c0014359 <int_handler+0x8e>
c001433d:	83 ec 08             	sub    esp,0x8
c0014340:	52                   	push   edx
c0014341:	56                   	push   esi
c0014342:	ff d0                	call   eax
c0014344:	83 c4 10             	add    esp,0x10
c0014347:	43                   	inc    ebx
c0014348:	83 fb 04             	cmp    ebx,0x4
c001434b:	75 df                	jne    c001432c <int_handler+0x61>
c001434d:	83 c4 0c             	add    esp,0xc
c0014350:	31 c0                	xor    eax,eax
c0014352:	5b                   	pop    ebx
c0014353:	31 d2                	xor    edx,edx
c0014355:	5e                   	pop    esi
c0014356:	5f                   	pop    edi
c0014357:	5d                   	pop    ebp
c0014358:	c3                   	ret    
c0014359:	83 ec 08             	sub    esp,0x8
c001435c:	52                   	push   edx
c001435d:	56                   	push   esi
c001435e:	ff d0                	call   eax
c0014360:	83 c4 10             	add    esp,0x10
c0014363:	83 c4 0c             	add    esp,0xc
c0014366:	5b                   	pop    ebx
c0014367:	5e                   	pop    esi
c0014368:	5f                   	pop    edi
c0014369:	5d                   	pop    ebp
c001436a:	c3                   	ret    
c001436b:	90                   	nop

c001436c <InterruptController::InterruptController(char const*)>:
c001436c:	83 ec 1c             	sub    esp,0x1c
c001436f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014373:	83 ec 08             	sub    esp,0x8
c0014376:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001437a:	50                   	push   eax
c001437b:	e8 94 f8 ff ff       	call   c0013c14 <Device::Device(char const*)>
c0014380:	83 c4 10             	add    esp,0x10
c0014383:	ba dc 7e 02 c0       	mov    edx,0xc0027edc
c0014388:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001438c:	89 10                	mov    DWORD PTR [eax],edx
c001438e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014392:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001439c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00143a4:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00143ac:	7f 5e                	jg     c001440c <InterruptController::InterruptController(char const*)+0xa0>
c00143ae:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00143b6:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00143bb:	7f 49                	jg     c0014406 <InterruptController::InterruptController(char const*)+0x9a>
c00143bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143c1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00143c5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00143cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00143d0:	01 ca                	add    edx,ecx
c00143d2:	83 c2 54             	add    edx,0x54
c00143d5:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00143dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00143e5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00143ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00143f0:	01 ca                	add    edx,ecx
c00143f2:	81 c2 54 04 00 00    	add    edx,0x454
c00143f8:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014400:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014404:	eb b0                	jmp    c00143b6 <InterruptController::InterruptController(char const*)+0x4a>
c0014406:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001440a:	eb 98                	jmp    c00143a4 <InterruptController::InterruptController(char const*)+0x38>
c001440c:	90                   	nop
c001440d:	83 c4 1c             	add    esp,0x1c
c0014410:	c3                   	ret    
c0014411:	90                   	nop

c0014412 <InterruptController::~InterruptController()>:
c0014412:	83 ec 0c             	sub    esp,0xc
c0014415:	ba dc 7e 02 c0       	mov    edx,0xc0027edc
c001441a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001441e:	89 10                	mov    DWORD PTR [eax],edx
c0014420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014424:	83 ec 0c             	sub    esp,0xc
c0014427:	50                   	push   eax
c0014428:	e8 c9 f4 ff ff       	call   c00138f6 <Device::~Device()>
c001442d:	83 c4 10             	add    esp,0x10
c0014430:	90                   	nop
c0014431:	83 c4 0c             	add    esp,0xc
c0014434:	c3                   	ret    
c0014435:	90                   	nop

c0014436 <InterruptController::~InterruptController()>:
c0014436:	83 ec 0c             	sub    esp,0xc
c0014439:	83 ec 0c             	sub    esp,0xc
c001443c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014440:	e8 cd ff ff ff       	call   c0014412 <InterruptController::~InterruptController()>
c0014445:	83 c4 10             	add    esp,0x10
c0014448:	83 ec 08             	sub    esp,0x8
c001444b:	68 58 21 00 00       	push   0x2158
c0014450:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014454:	e8 fc e0 ff ff       	call   c0012555 <operator delete(void*, unsigned long)>
c0014459:	83 c4 10             	add    esp,0x10
c001445c:	83 c4 0c             	add    esp,0xc
c001445f:	c3                   	ret    

c0014460 <displayDebugInfo(regs*)>:
c0014460:	55                   	push   ebp
c0014461:	57                   	push   edi
c0014462:	56                   	push   esi
c0014463:	53                   	push   ebx
c0014464:	83 ec 24             	sub    esp,0x24
c0014467:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001446b:	0f 20 c2             	mov    edx,cr0
c001446e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014472:	0f 20 d7             	mov    edi,cr2
c0014475:	0f 20 de             	mov    esi,cr3
c0014478:	0f 20 e5             	mov    ebp,cr4
c001447b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001447e:	68 e2 7c 02 c0       	push   0xc0027ce2
c0014483:	e8 ad e1 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0014488:	58                   	pop    eax
c0014489:	5a                   	pop    edx
c001448a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001448d:	68 ed 7c 02 c0       	push   0xc0027ced
c0014492:	e8 9e e1 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0014497:	59                   	pop    ecx
c0014498:	58                   	pop    eax
c0014499:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001449c:	68 f8 7c 02 c0       	push   0xc0027cf8
c00144a1:	e8 8f e1 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c00144a6:	58                   	pop    eax
c00144a7:	5a                   	pop    edx
c00144a8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00144ab:	68 03 7d 02 c0       	push   0xc0027d03
c00144b0:	e8 80 e1 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c00144b5:	59                   	pop    ecx
c00144b6:	58                   	pop    eax
c00144b7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00144ba:	68 0e 7d 02 c0       	push   0xc0027d0e
c00144bf:	e8 71 e1 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c00144c4:	58                   	pop    eax
c00144c5:	5a                   	pop    edx
c00144c6:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00144c9:	68 19 7d 02 c0       	push   0xc0027d19
c00144ce:	e8 62 e1 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c00144d3:	59                   	pop    ecx
c00144d4:	58                   	pop    eax
c00144d5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00144d8:	68 24 7d 02 c0       	push   0xc0027d24
c00144dd:	e8 53 e1 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c00144e2:	58                   	pop    eax
c00144e3:	5a                   	pop    edx
c00144e4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00144e7:	68 2f 7d 02 c0       	push   0xc0027d2f
c00144ec:	e8 44 e1 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c00144f1:	59                   	pop    ecx
c00144f2:	58                   	pop    eax
c00144f3:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00144f6:	68 3a 7d 02 c0       	push   0xc0027d3a
c00144fb:	e8 35 e1 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0014500:	58                   	pop    eax
c0014501:	5a                   	pop    edx
c0014502:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014505:	68 49 7d 02 c0       	push   0xc0027d49
c001450a:	e8 26 e1 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001450f:	59                   	pop    ecx
c0014510:	58                   	pop    eax
c0014511:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014514:	68 54 7d 02 c0       	push   0xc0027d54
c0014519:	e8 17 e1 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001451e:	58                   	pop    eax
c001451f:	5a                   	pop    edx
c0014520:	57                   	push   edi
c0014521:	68 5f 7d 02 c0       	push   0xc0027d5f
c0014526:	e8 0a e1 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001452b:	59                   	pop    ecx
c001452c:	58                   	pop    eax
c001452d:	56                   	push   esi
c001452e:	68 6a 7d 02 c0       	push   0xc0027d6a
c0014533:	e8 fd e0 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0014538:	58                   	pop    eax
c0014539:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c001453e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014544:	e8 ae c2 ff ff       	call   c00107f7 <setActiveTerminal(VgaText*)>
c0014549:	58                   	pop    eax
c001454a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001454d:	5a                   	pop    edx
c001454e:	c1 e0 05             	shl    eax,0x5
c0014551:	05 80 9b 02 c0       	add    eax,0xc0029b80
c0014556:	50                   	push   eax
c0014557:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c001455c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014562:	e8 af c6 ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c0014567:	59                   	pop    ecx
c0014568:	58                   	pop    eax
c0014569:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c001456e:	68 75 7d 02 c0       	push   0xc0027d75
c0014573:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014579:	e8 98 c6 ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c001457e:	58                   	pop    eax
c001457f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014584:	5a                   	pop    edx
c0014585:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014588:	83 c0 0c             	add    eax,0xc
c001458b:	50                   	push   eax
c001458c:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0014591:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014597:	e8 7a c6 ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c001459c:	59                   	pop    ecx
c001459d:	58                   	pop    eax
c001459e:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c00145a3:	68 7e 7d 02 c0       	push   0xc0027d7e
c00145a8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145ae:	e8 63 c6 ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c00145b3:	58                   	pop    eax
c00145b4:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c00145b9:	5a                   	pop    edx
c00145ba:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00145bd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145c3:	e8 74 c6 ff ff       	call   c0010c3c <VgaText::putx(unsigned int)>
c00145c8:	59                   	pop    ecx
c00145c9:	58                   	pop    eax
c00145ca:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c00145cf:	68 86 7d 02 c0       	push   0xc0027d86
c00145d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145da:	e8 37 c6 ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c00145df:	58                   	pop    eax
c00145e0:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c00145e5:	5a                   	pop    edx
c00145e6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00145e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145ef:	e8 48 c6 ff ff       	call   c0010c3c <VgaText::putx(unsigned int)>
c00145f4:	59                   	pop    ecx
c00145f5:	58                   	pop    eax
c00145f6:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c00145fb:	68 8e 7d 02 c0       	push   0xc0027d8e
c0014600:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014606:	e8 0b c6 ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c001460b:	58                   	pop    eax
c001460c:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0014611:	5a                   	pop    edx
c0014612:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014615:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001461b:	e8 1c c6 ff ff       	call   c0010c3c <VgaText::putx(unsigned int)>
c0014620:	59                   	pop    ecx
c0014621:	58                   	pop    eax
c0014622:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0014627:	68 96 7d 02 c0       	push   0xc0027d96
c001462c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014632:	e8 df c5 ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c0014637:	58                   	pop    eax
c0014638:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c001463d:	5a                   	pop    edx
c001463e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014641:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014647:	e8 f0 c5 ff ff       	call   c0010c3c <VgaText::putx(unsigned int)>
c001464c:	59                   	pop    ecx
c001464d:	58                   	pop    eax
c001464e:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0014653:	68 9e 7d 02 c0       	push   0xc0027d9e
c0014658:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001465e:	e8 b3 c5 ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c0014663:	58                   	pop    eax
c0014664:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0014669:	5a                   	pop    edx
c001466a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001466d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014673:	e8 c4 c5 ff ff       	call   c0010c3c <VgaText::putx(unsigned int)>
c0014678:	59                   	pop    ecx
c0014679:	58                   	pop    eax
c001467a:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c001467f:	68 a6 7d 02 c0       	push   0xc0027da6
c0014684:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001468a:	e8 87 c5 ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c001468f:	58                   	pop    eax
c0014690:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0014695:	5a                   	pop    edx
c0014696:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014699:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001469f:	e8 98 c5 ff ff       	call   c0010c3c <VgaText::putx(unsigned int)>
c00146a4:	59                   	pop    ecx
c00146a5:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c00146aa:	5b                   	pop    ebx
c00146ab:	68 ae 7d 02 c0       	push   0xc0027dae
c00146b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146b6:	e8 5b c5 ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c00146bb:	58                   	pop    eax
c00146bc:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c00146c1:	5a                   	pop    edx
c00146c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00146c6:	52                   	push   edx
c00146c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146cd:	e8 6a c5 ff ff       	call   c0010c3c <VgaText::putx(unsigned int)>
c00146d2:	59                   	pop    ecx
c00146d3:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c00146d8:	5b                   	pop    ebx
c00146d9:	68 b7 7d 02 c0       	push   0xc0027db7
c00146de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146e4:	e8 2d c5 ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c00146e9:	58                   	pop    eax
c00146ea:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c00146ef:	5a                   	pop    edx
c00146f0:	57                   	push   edi
c00146f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146f7:	e8 40 c5 ff ff       	call   c0010c3c <VgaText::putx(unsigned int)>
c00146fc:	59                   	pop    ecx
c00146fd:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0014702:	5b                   	pop    ebx
c0014703:	68 bf 7d 02 c0       	push   0xc0027dbf
c0014708:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001470e:	e8 03 c5 ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c0014713:	5f                   	pop    edi
c0014714:	58                   	pop    eax
c0014715:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c001471a:	56                   	push   esi
c001471b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014721:	e8 16 c5 ff ff       	call   c0010c3c <VgaText::putx(unsigned int)>
c0014726:	58                   	pop    eax
c0014727:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c001472c:	5a                   	pop    edx
c001472d:	68 c7 7d 02 c0       	push   0xc0027dc7
c0014732:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014738:	e8 d9 c4 ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c001473d:	59                   	pop    ecx
c001473e:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0014743:	5b                   	pop    ebx
c0014744:	55                   	push   ebp
c0014745:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001474b:	e8 ec c4 ff ff       	call   c0010c3c <VgaText::putx(unsigned int)>
c0014750:	5e                   	pop    esi
c0014751:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0014756:	5f                   	pop    edi
c0014757:	68 cf 7d 02 c0       	push   0xc0027dcf
c001475c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014762:	e8 af c4 ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c0014767:	0f 21 c0             	mov    eax,db0
c001476a:	5d                   	pop    ebp
c001476b:	5a                   	pop    edx
c001476c:	50                   	push   eax
c001476d:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0014772:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014778:	e8 bf c4 ff ff       	call   c0010c3c <VgaText::putx(unsigned int)>
c001477d:	59                   	pop    ecx
c001477e:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0014783:	5b                   	pop    ebx
c0014784:	68 d8 7d 02 c0       	push   0xc0027dd8
c0014789:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001478f:	e8 82 c4 ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c0014794:	0f 21 c8             	mov    eax,db1
c0014797:	5e                   	pop    esi
c0014798:	5f                   	pop    edi
c0014799:	50                   	push   eax
c001479a:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c001479f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147a5:	e8 92 c4 ff ff       	call   c0010c3c <VgaText::putx(unsigned int)>
c00147aa:	5d                   	pop    ebp
c00147ab:	58                   	pop    eax
c00147ac:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c00147b1:	68 e0 7d 02 c0       	push   0xc0027de0
c00147b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147bc:	e8 55 c4 ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c00147c1:	0f 21 d0             	mov    eax,db2
c00147c4:	5a                   	pop    edx
c00147c5:	59                   	pop    ecx
c00147c6:	50                   	push   eax
c00147c7:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c00147cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147d2:	e8 65 c4 ff ff       	call   c0010c3c <VgaText::putx(unsigned int)>
c00147d7:	5b                   	pop    ebx
c00147d8:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c00147dd:	5e                   	pop    esi
c00147de:	68 e8 7d 02 c0       	push   0xc0027de8
c00147e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147e9:	e8 28 c4 ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c00147ee:	0f 21 d8             	mov    eax,db3
c00147f1:	5f                   	pop    edi
c00147f2:	5d                   	pop    ebp
c00147f3:	50                   	push   eax
c00147f4:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c00147f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147ff:	e8 38 c4 ff ff       	call   c0010c3c <VgaText::putx(unsigned int)>
c0014804:	58                   	pop    eax
c0014805:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c001480a:	5a                   	pop    edx
c001480b:	68 f0 7d 02 c0       	push   0xc0027df0
c0014810:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014816:	e8 fb c3 ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c001481b:	0f 21 f0             	mov    eax,db6
c001481e:	59                   	pop    ecx
c001481f:	5b                   	pop    ebx
c0014820:	50                   	push   eax
c0014821:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0014826:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001482c:	e8 0b c4 ff ff       	call   c0010c3c <VgaText::putx(unsigned int)>
c0014831:	5e                   	pop    esi
c0014832:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0014837:	5f                   	pop    edi
c0014838:	68 f8 7d 02 c0       	push   0xc0027df8
c001483d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014843:	e8 ce c3 ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c0014848:	0f 21 f8             	mov    eax,db7
c001484b:	5d                   	pop    ebp
c001484c:	5a                   	pop    edx
c001484d:	50                   	push   eax
c001484e:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0014853:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014859:	e8 de c3 ff ff       	call   c0010c3c <VgaText::putx(unsigned int)>
c001485e:	fa                   	cli    
c001485f:	f4                   	hlt    
c0014860:	83 c4 10             	add    esp,0x10
c0014863:	eb fe                	jmp    c0014863 <displayDebugInfo(regs*)+0x403>

c0014865 <x87EmulHandler(regs*, void*)>:
c0014865:	53                   	push   ebx
c0014866:	83 ec 14             	sub    esp,0x14
c0014869:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001486d:	53                   	push   ebx
c001486e:	e8 dd 8f 00 00       	call   c001d850 <Vm::x87Handler(regs*)>
c0014873:	83 c4 10             	add    esp,0x10
c0014876:	84 c0                	test   al,al
c0014878:	74 05                	je     c001487f <x87EmulHandler(regs*, void*)+0x1a>
c001487a:	83 c4 08             	add    esp,0x8
c001487d:	5b                   	pop    ebx
c001487e:	c3                   	ret    
c001487f:	83 ec 0c             	sub    esp,0xc
c0014882:	68 00 7e 02 c0       	push   0xc0027e00
c0014887:	e8 a9 dd ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001488c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001488f:	e8 cc fb ff ff       	call   c0014460 <displayDebugInfo(regs*)>

c0014894 <gpFault(regs*, void*)>:
c0014894:	53                   	push   ebx
c0014895:	83 ec 14             	sub    esp,0x14
c0014898:	c7 05 d0 ac 02 c0 c4 cd 01 c0 	mov    DWORD PTR ds:0xc002acd0,0xc001cdc4
c00148a2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00148a6:	53                   	push   ebx
c00148a7:	e8 18 85 00 00       	call   c001cdc4 <Vm::faultHandler(regs*)>
c00148ac:	83 c4 10             	add    esp,0x10
c00148af:	84 c0                	test   al,al
c00148b1:	74 05                	je     c00148b8 <gpFault(regs*, void*)+0x24>
c00148b3:	83 c4 08             	add    esp,0x8
c00148b6:	5b                   	pop    ebx
c00148b7:	c3                   	ret    
c00148b8:	83 ec 0c             	sub    esp,0xc
c00148bb:	68 16 7e 02 c0       	push   0xc0027e16
c00148c0:	e8 70 dd ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c00148c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148c8:	e8 93 fb ff ff       	call   c0014460 <displayDebugInfo(regs*)>

c00148cd <pgFault(regs*, void*)>:
c00148cd:	83 ec 18             	sub    esp,0x18
c00148d0:	68 31 7e 02 c0       	push   0xc0027e31
c00148d5:	e8 5b dd ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c00148da:	58                   	pop    eax
c00148db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148df:	e8 7c fb ff ff       	call   c0014460 <displayDebugInfo(regs*)>

c00148e4 <otherISRHandler(regs*, void*)>:
c00148e4:	53                   	push   ebx
c00148e5:	83 ec 0c             	sub    esp,0xc
c00148e8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00148ec:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00148ef:	50                   	push   eax
c00148f0:	50                   	push   eax
c00148f1:	68 3e 7e 02 c0       	push   0xc0027e3e
c00148f6:	e8 3a dd ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c00148fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148fe:	e8 5d fb ff ff       	call   c0014460 <displayDebugInfo(regs*)>

c0014903 <opcodeFault(regs*, void*)>:
c0014903:	55                   	push   ebp
c0014904:	89 e5                	mov    ebp,esp
c0014906:	56                   	push   esi
c0014907:	53                   	push   ebx
c0014908:	83 ec 40             	sub    esp,0x40
c001490b:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c0014910:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014916:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c001491c:	84 c0                	test   al,al
c001491e:	74 24                	je     c0014944 <opcodeFault(regs*, void*)+0x41>
c0014920:	83 ec 0c             	sub    esp,0xc
c0014923:	68 5c 7e 02 c0       	push   0xc0027e5c
c0014928:	e8 08 dd ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001492d:	83 c4 10             	add    esp,0x10
c0014930:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014933:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014936:	8d 50 19             	lea    edx,[eax+0x19]
c0014939:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001493c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001493f:	e9 77 05 00 00       	jmp    c0014ebb <opcodeFault(regs*, void*)+0x5b8>
c0014944:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014947:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001494a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001494d:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014951:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014955:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014958:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001495b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001495e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014961:	8a 00                	mov    al,BYTE PTR [eax]
c0014963:	3c f0                	cmp    al,0xf0
c0014965:	75 17                	jne    c001497e <opcodeFault(regs*, void*)+0x7b>
c0014967:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001496a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001496d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014970:	8d 50 01             	lea    edx,[eax+0x1]
c0014973:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014976:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014979:	e9 da 00 00 00       	jmp    c0014a58 <opcodeFault(regs*, void*)+0x155>
c001497e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014981:	8a 00                	mov    al,BYTE PTR [eax]
c0014983:	3c f2                	cmp    al,0xf2
c0014985:	74 09                	je     c0014990 <opcodeFault(regs*, void*)+0x8d>
c0014987:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001498a:	8a 00                	mov    al,BYTE PTR [eax]
c001498c:	3c f3                	cmp    al,0xf3
c001498e:	75 1b                	jne    c00149ab <opcodeFault(regs*, void*)+0xa8>
c0014990:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014994:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014997:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001499a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001499d:	8d 50 01             	lea    edx,[eax+0x1]
c00149a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149a3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149a6:	e9 ad 00 00 00       	jmp    c0014a58 <opcodeFault(regs*, void*)+0x155>
c00149ab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149ae:	8a 00                	mov    al,BYTE PTR [eax]
c00149b0:	3c 66                	cmp    al,0x66
c00149b2:	75 1f                	jne    c00149d3 <opcodeFault(regs*, void*)+0xd0>
c00149b4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00149b8:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00149bc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00149bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149c2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149c5:	8d 50 01             	lea    edx,[eax+0x1]
c00149c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149cb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149ce:	e9 85 00 00 00       	jmp    c0014a58 <opcodeFault(regs*, void*)+0x155>
c00149d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149d6:	8a 00                	mov    al,BYTE PTR [eax]
c00149d8:	3c 67                	cmp    al,0x67
c00149da:	75 18                	jne    c00149f4 <opcodeFault(regs*, void*)+0xf1>
c00149dc:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00149e0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00149e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149e6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149e9:	8d 50 01             	lea    edx,[eax+0x1]
c00149ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149ef:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149f2:	eb 64                	jmp    c0014a58 <opcodeFault(regs*, void*)+0x155>
c00149f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149f7:	8a 00                	mov    al,BYTE PTR [eax]
c00149f9:	3c 2e                	cmp    al,0x2e
c00149fb:	74 09                	je     c0014a06 <opcodeFault(regs*, void*)+0x103>
c00149fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a00:	8a 00                	mov    al,BYTE PTR [eax]
c0014a02:	3c 3e                	cmp    al,0x3e
c0014a04:	75 18                	jne    c0014a1e <opcodeFault(regs*, void*)+0x11b>
c0014a06:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a0a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a10:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a13:	8d 50 01             	lea    edx,[eax+0x1]
c0014a16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a19:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a1c:	eb 3a                	jmp    c0014a58 <opcodeFault(regs*, void*)+0x155>
c0014a1e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a21:	8a 00                	mov    al,BYTE PTR [eax]
c0014a23:	3c 36                	cmp    al,0x36
c0014a25:	74 1b                	je     c0014a42 <opcodeFault(regs*, void*)+0x13f>
c0014a27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a2a:	8a 00                	mov    al,BYTE PTR [eax]
c0014a2c:	3c 26                	cmp    al,0x26
c0014a2e:	74 12                	je     c0014a42 <opcodeFault(regs*, void*)+0x13f>
c0014a30:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a33:	8a 00                	mov    al,BYTE PTR [eax]
c0014a35:	3c 64                	cmp    al,0x64
c0014a37:	74 09                	je     c0014a42 <opcodeFault(regs*, void*)+0x13f>
c0014a39:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a3c:	8a 00                	mov    al,BYTE PTR [eax]
c0014a3e:	3c 65                	cmp    al,0x65
c0014a40:	75 16                	jne    c0014a58 <opcodeFault(regs*, void*)+0x155>
c0014a42:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a46:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a4c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a4f:	8d 50 01             	lea    edx,[eax+0x1]
c0014a52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a55:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a58:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a5b:	8a 00                	mov    al,BYTE PTR [eax]
c0014a5d:	3c 0f                	cmp    al,0xf
c0014a5f:	0f 85 ad 00 00 00    	jne    c0014b12 <opcodeFault(regs*, void*)+0x20f>
c0014a65:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a68:	40                   	inc    eax
c0014a69:	8a 00                	mov    al,BYTE PTR [eax]
c0014a6b:	3c c2                	cmp    al,0xc2
c0014a6d:	74 0e                	je     c0014a7d <opcodeFault(regs*, void*)+0x17a>
c0014a6f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a72:	40                   	inc    eax
c0014a73:	8a 00                	mov    al,BYTE PTR [eax]
c0014a75:	3c c3                	cmp    al,0xc3
c0014a77:	0f 85 95 00 00 00    	jne    c0014b12 <opcodeFault(regs*, void*)+0x20f>
c0014a7d:	83 ec 0c             	sub    esp,0xc
c0014a80:	68 7f 7e 02 c0       	push   0xc0027e7f
c0014a85:	e8 ab db ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0014a8a:	83 c4 10             	add    esp,0x10
c0014a8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a90:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a93:	8d 50 01             	lea    edx,[eax+0x1]
c0014a96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a99:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a9c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a9f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014aa2:	8a 00                	mov    al,BYTE PTR [eax]
c0014aa4:	8d 50 fe             	lea    edx,[eax-0x2]
c0014aa7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014aaa:	88 10                	mov    BYTE PTR [eax],dl
c0014aac:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014aaf:	50                   	push   eax
c0014ab0:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014ab3:	50                   	push   eax
c0014ab4:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014ab7:	50                   	push   eax
c0014ab8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014abb:	e8 3e 41 00 00       	call   c0018bfe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014ac0:	83 c4 10             	add    esp,0x10
c0014ac3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ac6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ac9:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014acc:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014acf:	01 d0                	add    eax,edx
c0014ad1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014ad4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ad7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ada:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014add:	48                   	dec    eax
c0014ade:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014ae1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ae4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014ae7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014aea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aed:	83 ec 04             	sub    esp,0x4
c0014af0:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014af3:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014af6:	50                   	push   eax
c0014af7:	e8 6d b6 fe ff       	call   c0000169 <voodooXADD>
c0014afc:	83 c4 10             	add    esp,0x10
c0014aff:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014b02:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014b05:	01 c2                	add    edx,eax
c0014b07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b0a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b0d:	e9 a9 03 00 00       	jmp    c0014ebb <opcodeFault(regs*, void*)+0x5b8>
c0014b12:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b15:	8a 00                	mov    al,BYTE PTR [eax]
c0014b17:	3c 0f                	cmp    al,0xf
c0014b19:	0f 85 8b 01 00 00    	jne    c0014caa <opcodeFault(regs*, void*)+0x3a7>
c0014b1f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b22:	40                   	inc    eax
c0014b23:	8a 00                	mov    al,BYTE PTR [eax]
c0014b25:	3c c7                	cmp    al,0xc7
c0014b27:	0f 86 7d 01 00 00    	jbe    c0014caa <opcodeFault(regs*, void*)+0x3a7>
c0014b2d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b30:	40                   	inc    eax
c0014b31:	8a 00                	mov    al,BYTE PTR [eax]
c0014b33:	3c cf                	cmp    al,0xcf
c0014b35:	0f 87 6f 01 00 00    	ja     c0014caa <opcodeFault(regs*, void*)+0x3a7>
c0014b3b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b3e:	40                   	inc    eax
c0014b3f:	8a 00                	mov    al,BYTE PTR [eax]
c0014b41:	83 c0 38             	add    eax,0x38
c0014b44:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014b47:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014b4b:	75 0b                	jne    c0014b58 <opcodeFault(regs*, void*)+0x255>
c0014b4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b50:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014b53:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014b56:	eb 75                	jmp    c0014bcd <opcodeFault(regs*, void*)+0x2ca>
c0014b58:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014b5c:	75 0b                	jne    c0014b69 <opcodeFault(regs*, void*)+0x266>
c0014b5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b61:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014b64:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014b67:	eb 64                	jmp    c0014bcd <opcodeFault(regs*, void*)+0x2ca>
c0014b69:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014b6d:	75 0b                	jne    c0014b7a <opcodeFault(regs*, void*)+0x277>
c0014b6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b72:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014b75:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014b78:	eb 53                	jmp    c0014bcd <opcodeFault(regs*, void*)+0x2ca>
c0014b7a:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014b7e:	75 0b                	jne    c0014b8b <opcodeFault(regs*, void*)+0x288>
c0014b80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b83:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014b86:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014b89:	eb 42                	jmp    c0014bcd <opcodeFault(regs*, void*)+0x2ca>
c0014b8b:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014b8f:	75 0b                	jne    c0014b9c <opcodeFault(regs*, void*)+0x299>
c0014b91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b94:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014b97:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014b9a:	eb 31                	jmp    c0014bcd <opcodeFault(regs*, void*)+0x2ca>
c0014b9c:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014ba0:	75 0b                	jne    c0014bad <opcodeFault(regs*, void*)+0x2aa>
c0014ba2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ba5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014ba8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bab:	eb 20                	jmp    c0014bcd <opcodeFault(regs*, void*)+0x2ca>
c0014bad:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014bb1:	75 0b                	jne    c0014bbe <opcodeFault(regs*, void*)+0x2bb>
c0014bb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bb6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014bb9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bbc:	eb 0f                	jmp    c0014bcd <opcodeFault(regs*, void*)+0x2ca>
c0014bbe:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014bc2:	75 09                	jne    c0014bcd <opcodeFault(regs*, void*)+0x2ca>
c0014bc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bc7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014bca:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bcd:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014bd1:	74 10                	je     c0014be3 <opcodeFault(regs*, void*)+0x2e0>
c0014bd3:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014bda:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014be1:	eb 2d                	jmp    c0014c10 <opcodeFault(regs*, void*)+0x30d>
c0014be3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014be6:	c1 e0 18             	shl    eax,0x18
c0014be9:	89 c2                	mov    edx,eax
c0014beb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014bee:	c1 e0 08             	shl    eax,0x8
c0014bf1:	25 00 00 ff 00       	and    eax,0xff0000
c0014bf6:	09 c2                	or     edx,eax
c0014bf8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014bfb:	c1 e8 08             	shr    eax,0x8
c0014bfe:	25 00 ff 00 00       	and    eax,0xff00
c0014c03:	09 c2                	or     edx,eax
c0014c05:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c08:	c1 e8 18             	shr    eax,0x18
c0014c0b:	09 d0                	or     eax,edx
c0014c0d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c10:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014c14:	75 0b                	jne    c0014c21 <opcodeFault(regs*, void*)+0x31e>
c0014c16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c19:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c1c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014c1f:	eb 75                	jmp    c0014c96 <opcodeFault(regs*, void*)+0x393>
c0014c21:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014c25:	75 0b                	jne    c0014c32 <opcodeFault(regs*, void*)+0x32f>
c0014c27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c2a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c2d:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014c30:	eb 64                	jmp    c0014c96 <opcodeFault(regs*, void*)+0x393>
c0014c32:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014c36:	75 0b                	jne    c0014c43 <opcodeFault(regs*, void*)+0x340>
c0014c38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c3b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c3e:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014c41:	eb 53                	jmp    c0014c96 <opcodeFault(regs*, void*)+0x393>
c0014c43:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014c47:	75 0b                	jne    c0014c54 <opcodeFault(regs*, void*)+0x351>
c0014c49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c4c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c4f:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014c52:	eb 42                	jmp    c0014c96 <opcodeFault(regs*, void*)+0x393>
c0014c54:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014c58:	75 0b                	jne    c0014c65 <opcodeFault(regs*, void*)+0x362>
c0014c5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c5d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c60:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014c63:	eb 31                	jmp    c0014c96 <opcodeFault(regs*, void*)+0x393>
c0014c65:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014c69:	75 0b                	jne    c0014c76 <opcodeFault(regs*, void*)+0x373>
c0014c6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c6e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c71:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014c74:	eb 20                	jmp    c0014c96 <opcodeFault(regs*, void*)+0x393>
c0014c76:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014c7a:	75 0b                	jne    c0014c87 <opcodeFault(regs*, void*)+0x384>
c0014c7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c7f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c82:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014c85:	eb 0f                	jmp    c0014c96 <opcodeFault(regs*, void*)+0x393>
c0014c87:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014c8b:	75 09                	jne    c0014c96 <opcodeFault(regs*, void*)+0x393>
c0014c8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c90:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c93:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014c96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c99:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c9c:	8d 50 02             	lea    edx,[eax+0x2]
c0014c9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ca5:	e9 11 02 00 00       	jmp    c0014ebb <opcodeFault(regs*, void*)+0x5b8>
c0014caa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cad:	8a 00                	mov    al,BYTE PTR [eax]
c0014caf:	3c 0f                	cmp    al,0xf
c0014cb1:	0f 85 76 01 00 00    	jne    c0014e2d <opcodeFault(regs*, void*)+0x52a>
c0014cb7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cba:	40                   	inc    eax
c0014cbb:	8a 00                	mov    al,BYTE PTR [eax]
c0014cbd:	3c c7                	cmp    al,0xc7
c0014cbf:	0f 85 68 01 00 00    	jne    c0014e2d <opcodeFault(regs*, void*)+0x52a>
c0014cc5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ccb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cce:	8d 50 01             	lea    edx,[eax+0x1]
c0014cd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cd4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cd7:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014cda:	50                   	push   eax
c0014cdb:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014cde:	50                   	push   eax
c0014cdf:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014ce2:	50                   	push   eax
c0014ce3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014ce6:	e8 13 3f 00 00       	call   c0018bfe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014ceb:	83 c4 10             	add    esp,0x10
c0014cee:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014cf1:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014cf4:	83 f0 01             	xor    eax,0x1
c0014cf7:	84 c0                	test   al,al
c0014cf9:	0f 84 2e 01 00 00    	je     c0014e2d <opcodeFault(regs*, void*)+0x52a>
c0014cff:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014d02:	3c 01                	cmp    al,0x1
c0014d04:	0f 85 23 01 00 00    	jne    c0014e2d <opcodeFault(regs*, void*)+0x52a>
c0014d0a:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014d0d:	83 f0 01             	xor    eax,0x1
c0014d10:	84 c0                	test   al,al
c0014d12:	0f 84 15 01 00 00    	je     c0014e2d <opcodeFault(regs*, void*)+0x52a>
c0014d18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d1b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014d1e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014d21:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014d28:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014d2b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014d2e:	89 c2                	mov    edx,eax
c0014d30:	b8 00 00 00 00       	mov    eax,0x0
c0014d35:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014d38:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014d3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d3e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014d41:	ba 00 00 00 00       	mov    edx,0x0
c0014d46:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014d49:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014d4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d4f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014d52:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014d55:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014d5c:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014d5f:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014d62:	89 c2                	mov    edx,eax
c0014d64:	b8 00 00 00 00       	mov    eax,0x0
c0014d69:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014d6c:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014d6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d72:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014d75:	ba 00 00 00 00       	mov    edx,0x0
c0014d7a:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014d7d:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014d80:	e8 80 70 00 00       	call   c001be05 <lockScheduler()>
c0014d85:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014d88:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014d8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d8d:	89 c1                	mov    ecx,eax
c0014d8f:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014d92:	89 cb                	mov    ebx,ecx
c0014d94:	89 d0                	mov    eax,edx
c0014d96:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014d99:	89 c6                	mov    esi,eax
c0014d9b:	89 f0                	mov    eax,esi
c0014d9d:	09 d8                	or     eax,ebx
c0014d9f:	85 c0                	test   eax,eax
c0014da1:	75 21                	jne    c0014dc4 <opcodeFault(regs*, void*)+0x4c1>
c0014da3:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014da6:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014da9:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014dac:	89 01                	mov    DWORD PTR [ecx],eax
c0014dae:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014db1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014db7:	83 c8 40             	or     eax,0x40
c0014dba:	89 c2                	mov    edx,eax
c0014dbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dbf:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014dc2:	eb 3e                	jmp    c0014e02 <opcodeFault(regs*, void*)+0x4ff>
c0014dc4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014dc7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014dca:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dcc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014dcf:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014dd2:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014dd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dd8:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014ddb:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014dde:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014de1:	89 d0                	mov    eax,edx
c0014de3:	31 d2                	xor    edx,edx
c0014de5:	89 c3                	mov    ebx,eax
c0014de7:	89 d6                	mov    esi,edx
c0014de9:	89 da                	mov    edx,ebx
c0014deb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dee:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014df1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014df4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014df7:	83 e0 bf             	and    eax,0xffffffbf
c0014dfa:	89 c2                	mov    edx,eax
c0014dfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dff:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014e02:	e8 00 70 00 00       	call   c001be07 <unlockScheduler()>
c0014e07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e0a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e0d:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014e10:	01 c2                	add    edx,eax
c0014e12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e15:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e18:	83 ec 0c             	sub    esp,0xc
c0014e1b:	68 8e 7e 02 c0       	push   0xc0027e8e
c0014e20:	e8 10 d8 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0014e25:	83 c4 10             	add    esp,0x10
c0014e28:	e9 8e 00 00 00       	jmp    c0014ebb <opcodeFault(regs*, void*)+0x5b8>
c0014e2d:	83 ec 0c             	sub    esp,0xc
c0014e30:	68 a1 7e 02 c0       	push   0xc0027ea1
c0014e35:	e8 fb d7 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0014e3a:	83 c4 10             	add    esp,0x10
c0014e3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e40:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014e43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e46:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e49:	c1 e0 04             	shl    eax,0x4
c0014e4c:	01 d0                	add    eax,edx
c0014e4e:	83 c0 03             	add    eax,0x3
c0014e51:	8a 00                	mov    al,BYTE PTR [eax]
c0014e53:	0f b6 d8             	movzx  ebx,al
c0014e56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e59:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014e5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e5f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e62:	c1 e0 04             	shl    eax,0x4
c0014e65:	01 d0                	add    eax,edx
c0014e67:	83 c0 02             	add    eax,0x2
c0014e6a:	8a 00                	mov    al,BYTE PTR [eax]
c0014e6c:	0f b6 c8             	movzx  ecx,al
c0014e6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e72:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014e75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e78:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e7b:	c1 e0 04             	shl    eax,0x4
c0014e7e:	01 d0                	add    eax,edx
c0014e80:	40                   	inc    eax
c0014e81:	8a 00                	mov    al,BYTE PTR [eax]
c0014e83:	0f b6 d0             	movzx  edx,al
c0014e86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e89:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014e8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e8f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e92:	c1 e0 04             	shl    eax,0x4
c0014e95:	01 f0                	add    eax,esi
c0014e97:	8a 00                	mov    al,BYTE PTR [eax]
c0014e99:	0f b6 c0             	movzx  eax,al
c0014e9c:	83 ec 0c             	sub    esp,0xc
c0014e9f:	53                   	push   ebx
c0014ea0:	51                   	push   ecx
c0014ea1:	52                   	push   edx
c0014ea2:	50                   	push   eax
c0014ea3:	68 b4 7e 02 c0       	push   0xc0027eb4
c0014ea8:	e8 88 d7 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0014ead:	83 c4 20             	add    esp,0x20
c0014eb0:	83 ec 0c             	sub    esp,0xc
c0014eb3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014eb6:	e8 a5 f5 ff ff       	call   c0014460 <displayDebugInfo(regs*)>
c0014ebb:	8d 65 f8             	lea    esp,[ebp-0x8]
c0014ebe:	5b                   	pop    ebx
c0014ebf:	5e                   	pop    esi
c0014ec0:	5d                   	pop    ebp
c0014ec1:	c3                   	ret    

c0014ec2 <displayProgramFault(char const*)>:
c0014ec2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ec7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014eca:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014ed0:	85 c0                	test   eax,eax
c0014ed2:	74 15                	je     c0014ee9 <displayProgramFault(char const*)+0x27>
c0014ed4:	83 ec 0c             	sub    esp,0xc
c0014ed7:	6a 04                	push   0x4
c0014ed9:	6a 0f                	push   0xf
c0014edb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014edf:	50                   	push   eax
c0014ee0:	e8 f3 b9 ff ff       	call   c00108d8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014ee5:	83 c4 1c             	add    esp,0x1c
c0014ee8:	c3                   	ret    
c0014ee9:	c3                   	ret    

c0014eea <setupInterruptController()>:
c0014eea:	55                   	push   ebp
c0014eeb:	89 e5                	mov    ebp,esp
c0014eed:	53                   	push   ebx
c0014eee:	83 ec 24             	sub    esp,0x24
c0014ef1:	b8 00 00 00 00       	mov    eax,0x0
c0014ef6:	85 c0                	test   eax,eax
c0014ef8:	0f 95 c0             	setne  al
c0014efb:	84 c0                	test   al,al
c0014efd:	74 5b                	je     c0014f5a <setupInterruptController()+0x70>
c0014eff:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0014f06:	83 ec 0c             	sub    esp,0xc
c0014f09:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0014f0c:	e8 b1 a5 ff ff       	call   c000f4c2 <malloc>
c0014f11:	83 c4 10             	add    esp,0x10
c0014f14:	89 c3                	mov    ebx,eax
c0014f16:	83 ec 0c             	sub    esp,0xc
c0014f19:	53                   	push   ebx
c0014f1a:	e8 11 db 00 00       	call   c0022a30 <APIC::APIC()>
c0014f1f:	83 c4 10             	add    esp,0x10
c0014f22:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0014f25:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0014f28:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f2d:	83 c0 08             	add    eax,0x8
c0014f30:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f32:	6a 00                	push   0x0
c0014f34:	6a 00                	push   0x0
c0014f36:	6a 00                	push   0x0
c0014f38:	52                   	push   edx
c0014f39:	ff d0                	call   eax
c0014f3b:	83 c4 10             	add    esp,0x10
c0014f3e:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c0014f43:	83 ec 08             	sub    esp,0x8
c0014f46:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014f49:	50                   	push   eax
c0014f4a:	e8 d5 ea ff ff       	call   c0013a24 <Device::addChild(Device*)>
c0014f4f:	83 c4 10             	add    esp,0x10
c0014f52:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014f55:	e9 52 03 00 00       	jmp    c00152ac <setupInterruptController()+0x3c2>
c0014f5a:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c0014f5f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014f65:	83 e0 01             	and    eax,0x1
c0014f68:	84 c0                	test   al,al
c0014f6a:	0f 95 c0             	setne  al
c0014f6d:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0014f70:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0014f77:	83 ec 0c             	sub    esp,0xc
c0014f7a:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014f7d:	e8 40 a5 ff ff       	call   c000f4c2 <malloc>
c0014f82:	83 c4 10             	add    esp,0x10
c0014f85:	89 c3                	mov    ebx,eax
c0014f87:	83 ec 0c             	sub    esp,0xc
c0014f8a:	53                   	push   ebx
c0014f8b:	e8 f8 df 00 00       	call   c0022f88 <PIC::PIC()>
c0014f90:	83 c4 10             	add    esp,0x10
c0014f93:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014f96:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014f99:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f9e:	83 c0 08             	add    eax,0x8
c0014fa1:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fa3:	6a 00                	push   0x0
c0014fa5:	6a 00                	push   0x0
c0014fa7:	6a 00                	push   0x0
c0014fa9:	52                   	push   edx
c0014faa:	ff d0                	call   eax
c0014fac:	83 c4 10             	add    esp,0x10
c0014faf:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0014fb3:	74 73                	je     c0015028 <setupInterruptController()+0x13e>
c0014fb5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014fb8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fbd:	83 c0 0c             	add    eax,0xc
c0014fc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fc2:	6a 00                	push   0x0
c0014fc4:	6a 00                	push   0x0
c0014fc6:	6a 00                	push   0x0
c0014fc8:	52                   	push   edx
c0014fc9:	ff d0                	call   eax
c0014fcb:	83 c4 10             	add    esp,0x10
c0014fce:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0014fd2:	74 15                	je     c0014fe9 <setupInterruptController()+0xff>
c0014fd4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fd9:	83 c0 04             	add    eax,0x4
c0014fdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fde:	83 ec 0c             	sub    esp,0xc
c0014fe1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014fe4:	ff d0                	call   eax
c0014fe6:	83 c4 10             	add    esp,0x10
c0014fe9:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0014ff0:	83 ec 0c             	sub    esp,0xc
c0014ff3:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014ff6:	e8 c7 a4 ff ff       	call   c000f4c2 <malloc>
c0014ffb:	83 c4 10             	add    esp,0x10
c0014ffe:	89 c3                	mov    ebx,eax
c0015000:	83 ec 0c             	sub    esp,0xc
c0015003:	53                   	push   ebx
c0015004:	e8 27 da 00 00       	call   c0022a30 <APIC::APIC()>
c0015009:	83 c4 10             	add    esp,0x10
c001500c:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001500f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015012:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015015:	8b 00                	mov    eax,DWORD PTR [eax]
c0015017:	83 c0 08             	add    eax,0x8
c001501a:	8b 00                	mov    eax,DWORD PTR [eax]
c001501c:	6a 00                	push   0x0
c001501e:	6a 00                	push   0x0
c0015020:	6a 00                	push   0x0
c0015022:	52                   	push   edx
c0015023:	ff d0                	call   eax
c0015025:	83 c4 10             	add    esp,0x10
c0015028:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c001502d:	83 ec 08             	sub    esp,0x8
c0015030:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015033:	50                   	push   eax
c0015034:	e8 eb e9 ff ff       	call   c0013a24 <Device::addChild(Device*)>
c0015039:	83 c4 10             	add    esp,0x10
c001503c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001503f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015041:	83 c0 24             	add    eax,0x24
c0015044:	8b 00                	mov    eax,DWORD PTR [eax]
c0015046:	6a 00                	push   0x0
c0015048:	68 e4 48 01 c0       	push   0xc00148e4
c001504d:	6a 00                	push   0x0
c001504f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015052:	ff d0                	call   eax
c0015054:	83 c4 10             	add    esp,0x10
c0015057:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001505a:	8b 00                	mov    eax,DWORD PTR [eax]
c001505c:	83 c0 24             	add    eax,0x24
c001505f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015061:	6a 00                	push   0x0
c0015063:	68 e4 48 01 c0       	push   0xc00148e4
c0015068:	6a 01                	push   0x1
c001506a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001506d:	ff d0                	call   eax
c001506f:	83 c4 10             	add    esp,0x10
c0015072:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015075:	8b 00                	mov    eax,DWORD PTR [eax]
c0015077:	83 c0 24             	add    eax,0x24
c001507a:	8b 00                	mov    eax,DWORD PTR [eax]
c001507c:	6a 00                	push   0x0
c001507e:	68 bd 42 01 c0       	push   0xc00142bd
c0015083:	6a 02                	push   0x2
c0015085:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015088:	ff d0                	call   eax
c001508a:	83 c4 10             	add    esp,0x10
c001508d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015090:	8b 00                	mov    eax,DWORD PTR [eax]
c0015092:	83 c0 24             	add    eax,0x24
c0015095:	8b 00                	mov    eax,DWORD PTR [eax]
c0015097:	6a 00                	push   0x0
c0015099:	68 e4 48 01 c0       	push   0xc00148e4
c001509e:	6a 03                	push   0x3
c00150a0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150a3:	ff d0                	call   eax
c00150a5:	83 c4 10             	add    esp,0x10
c00150a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00150ad:	83 c0 24             	add    eax,0x24
c00150b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00150b2:	6a 00                	push   0x0
c00150b4:	68 e4 48 01 c0       	push   0xc00148e4
c00150b9:	6a 04                	push   0x4
c00150bb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150be:	ff d0                	call   eax
c00150c0:	83 c4 10             	add    esp,0x10
c00150c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00150c8:	83 c0 24             	add    eax,0x24
c00150cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00150cd:	6a 00                	push   0x0
c00150cf:	68 e4 48 01 c0       	push   0xc00148e4
c00150d4:	6a 05                	push   0x5
c00150d6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150d9:	ff d0                	call   eax
c00150db:	83 c4 10             	add    esp,0x10
c00150de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00150e3:	83 c0 24             	add    eax,0x24
c00150e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00150e8:	6a 00                	push   0x0
c00150ea:	68 03 49 01 c0       	push   0xc0014903
c00150ef:	6a 06                	push   0x6
c00150f1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150f4:	ff d0                	call   eax
c00150f6:	83 c4 10             	add    esp,0x10
c00150f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00150fe:	83 c0 24             	add    eax,0x24
c0015101:	8b 00                	mov    eax,DWORD PTR [eax]
c0015103:	6a 00                	push   0x0
c0015105:	68 65 48 01 c0       	push   0xc0014865
c001510a:	6a 07                	push   0x7
c001510c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001510f:	ff d0                	call   eax
c0015111:	83 c4 10             	add    esp,0x10
c0015114:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015117:	8b 00                	mov    eax,DWORD PTR [eax]
c0015119:	83 c0 24             	add    eax,0x24
c001511c:	8b 00                	mov    eax,DWORD PTR [eax]
c001511e:	6a 00                	push   0x0
c0015120:	68 d8 40 01 c0       	push   0xc00140d8
c0015125:	6a 08                	push   0x8
c0015127:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001512a:	ff d0                	call   eax
c001512c:	83 c4 10             	add    esp,0x10
c001512f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015132:	8b 00                	mov    eax,DWORD PTR [eax]
c0015134:	83 c0 24             	add    eax,0x24
c0015137:	8b 00                	mov    eax,DWORD PTR [eax]
c0015139:	6a 00                	push   0x0
c001513b:	68 e4 48 01 c0       	push   0xc00148e4
c0015140:	6a 09                	push   0x9
c0015142:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015145:	ff d0                	call   eax
c0015147:	83 c4 10             	add    esp,0x10
c001514a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001514d:	8b 00                	mov    eax,DWORD PTR [eax]
c001514f:	83 c0 24             	add    eax,0x24
c0015152:	8b 00                	mov    eax,DWORD PTR [eax]
c0015154:	6a 00                	push   0x0
c0015156:	68 e4 48 01 c0       	push   0xc00148e4
c001515b:	6a 0a                	push   0xa
c001515d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015160:	ff d0                	call   eax
c0015162:	83 c4 10             	add    esp,0x10
c0015165:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015168:	8b 00                	mov    eax,DWORD PTR [eax]
c001516a:	83 c0 24             	add    eax,0x24
c001516d:	8b 00                	mov    eax,DWORD PTR [eax]
c001516f:	6a 00                	push   0x0
c0015171:	68 e4 48 01 c0       	push   0xc00148e4
c0015176:	6a 0b                	push   0xb
c0015178:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001517b:	ff d0                	call   eax
c001517d:	83 c4 10             	add    esp,0x10
c0015180:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015183:	8b 00                	mov    eax,DWORD PTR [eax]
c0015185:	83 c0 24             	add    eax,0x24
c0015188:	8b 00                	mov    eax,DWORD PTR [eax]
c001518a:	6a 00                	push   0x0
c001518c:	68 e4 48 01 c0       	push   0xc00148e4
c0015191:	6a 0c                	push   0xc
c0015193:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015196:	ff d0                	call   eax
c0015198:	83 c4 10             	add    esp,0x10
c001519b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001519e:	8b 00                	mov    eax,DWORD PTR [eax]
c00151a0:	83 c0 24             	add    eax,0x24
c00151a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00151a5:	6a 00                	push   0x0
c00151a7:	68 94 48 01 c0       	push   0xc0014894
c00151ac:	6a 0d                	push   0xd
c00151ae:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151b1:	ff d0                	call   eax
c00151b3:	83 c4 10             	add    esp,0x10
c00151b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00151bb:	83 c0 24             	add    eax,0x24
c00151be:	8b 00                	mov    eax,DWORD PTR [eax]
c00151c0:	6a 00                	push   0x0
c00151c2:	68 cd 48 01 c0       	push   0xc00148cd
c00151c7:	6a 0e                	push   0xe
c00151c9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151cc:	ff d0                	call   eax
c00151ce:	83 c4 10             	add    esp,0x10
c00151d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00151d6:	83 c0 24             	add    eax,0x24
c00151d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00151db:	6a 00                	push   0x0
c00151dd:	68 e4 48 01 c0       	push   0xc00148e4
c00151e2:	6a 0f                	push   0xf
c00151e4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151e7:	ff d0                	call   eax
c00151e9:	83 c4 10             	add    esp,0x10
c00151ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00151f1:	83 c0 24             	add    eax,0x24
c00151f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00151f6:	6a 00                	push   0x0
c00151f8:	68 e4 48 01 c0       	push   0xc00148e4
c00151fd:	6a 10                	push   0x10
c00151ff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015202:	ff d0                	call   eax
c0015204:	83 c4 10             	add    esp,0x10
c0015207:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001520a:	8b 00                	mov    eax,DWORD PTR [eax]
c001520c:	83 c0 24             	add    eax,0x24
c001520f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015211:	6a 00                	push   0x0
c0015213:	68 e4 48 01 c0       	push   0xc00148e4
c0015218:	6a 11                	push   0x11
c001521a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001521d:	ff d0                	call   eax
c001521f:	83 c4 10             	add    esp,0x10
c0015222:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015225:	8b 00                	mov    eax,DWORD PTR [eax]
c0015227:	83 c0 24             	add    eax,0x24
c001522a:	8b 00                	mov    eax,DWORD PTR [eax]
c001522c:	6a 00                	push   0x0
c001522e:	68 e4 48 01 c0       	push   0xc00148e4
c0015233:	6a 12                	push   0x12
c0015235:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015238:	ff d0                	call   eax
c001523a:	83 c4 10             	add    esp,0x10
c001523d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015240:	8b 00                	mov    eax,DWORD PTR [eax]
c0015242:	83 c0 24             	add    eax,0x24
c0015245:	8b 00                	mov    eax,DWORD PTR [eax]
c0015247:	6a 00                	push   0x0
c0015249:	68 e4 48 01 c0       	push   0xc00148e4
c001524e:	6a 13                	push   0x13
c0015250:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015253:	ff d0                	call   eax
c0015255:	83 c4 10             	add    esp,0x10
c0015258:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001525b:	8b 00                	mov    eax,DWORD PTR [eax]
c001525d:	83 c0 24             	add    eax,0x24
c0015260:	8b 00                	mov    eax,DWORD PTR [eax]
c0015262:	6a 00                	push   0x0
c0015264:	68 e4 48 01 c0       	push   0xc00148e4
c0015269:	6a 14                	push   0x14
c001526b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001526e:	ff d0                	call   eax
c0015270:	83 c4 10             	add    esp,0x10
c0015273:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015276:	8b 00                	mov    eax,DWORD PTR [eax]
c0015278:	83 c0 24             	add    eax,0x24
c001527b:	8b 00                	mov    eax,DWORD PTR [eax]
c001527d:	6a 00                	push   0x0
c001527f:	68 e4 48 01 c0       	push   0xc00148e4
c0015284:	6a 1e                	push   0x1e
c0015286:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015289:	ff d0                	call   eax
c001528b:	83 c4 10             	add    esp,0x10
c001528e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015291:	8b 00                	mov    eax,DWORD PTR [eax]
c0015293:	83 c0 24             	add    eax,0x24
c0015296:	8b 00                	mov    eax,DWORD PTR [eax]
c0015298:	6a 00                	push   0x0
c001529a:	68 d1 a7 01 c0       	push   0xc001a7d1
c001529f:	6a 60                	push   0x60
c00152a1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152a4:	ff d0                	call   eax
c00152a6:	83 c4 10             	add    esp,0x10
c00152a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ac:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00152af:	c9                   	leave  
c00152b0:	c3                   	ret    
c00152b1:	90                   	nop

c00152b2 <InterruptController::convertLegacyIRQNumber(int)>:
c00152b2:	55                   	push   ebp
c00152b3:	89 e5                	mov    ebp,esp
c00152b5:	83 ec 08             	sub    esp,0x8
c00152b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152bb:	83 ec 0c             	sub    esp,0xc
c00152be:	50                   	push   eax
c00152bf:	e8 4c ea ff ff       	call   c0013d10 <Device::getName()>
c00152c4:	83 c4 10             	add    esp,0x10
c00152c7:	8a 00                	mov    al,BYTE PTR [eax]
c00152c9:	3c 41                	cmp    al,0x41
c00152cb:	0f 94 c0             	sete   al
c00152ce:	84 c0                	test   al,al
c00152d0:	74 28                	je     c00152fa <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00152d2:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00152d6:	7f 12                	jg     c00152ea <InterruptController::convertLegacyIRQNumber(int)+0x38>
c00152d8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00152db:	05 20 9e 02 c0       	add    eax,0xc0029e20
c00152e0:	8a 00                	mov    al,BYTE PTR [eax]
c00152e2:	0f b6 c0             	movzx  eax,al
c00152e5:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00152e8:	eb 10                	jmp    c00152fa <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00152ea:	83 ec 0c             	sub    esp,0xc
c00152ed:	68 34 7c 02 c0       	push   0xc0027c34
c00152f2:	e8 02 3b 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c00152f7:	83 c4 10             	add    esp,0x10
c00152fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00152fd:	c9                   	leave  
c00152fe:	c3                   	ret    
c00152ff:	90                   	nop

c0015300 <startGUI(void*)>:
c0015300:	55                   	push   ebp
c0015301:	89 e5                	mov    ebp,esp
c0015303:	53                   	push   ebx
c0015304:	83 ec 04             	sub    esp,0x4
c0015307:	e8 fb 6a 00 00       	call   c001be07 <unlockScheduler()>
c001530c:	e8 df 6a 00 00       	call   c001bdf0 <getIRQNestingLevel()>
c0015311:	83 ec 08             	sub    esp,0x8
c0015314:	50                   	push   eax
c0015315:	68 1c 7f 02 c0       	push   0xc0027f1c
c001531a:	e8 16 d3 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001531f:	83 c4 10             	add    esp,0x10
c0015322:	8b 1d 48 ab 02 c0    	mov    ebx,DWORD PTR ds:0xc002ab48
c0015328:	83 ec 08             	sub    esp,0x8
c001532b:	6a 01                	push   0x1
c001532d:	68 36 7f 02 c0       	push   0xc0027f36
c0015332:	e8 91 64 00 00       	call   c001b7c8 <Thr::loadDLL(char const*, bool)>
c0015337:	83 c4 10             	add    esp,0x10
c001533a:	83 ec 08             	sub    esp,0x8
c001533d:	53                   	push   ebx
c001533e:	50                   	push   eax
c001533f:	e8 93 66 00 00       	call   c001b9d7 <Thr::executeDLL(unsigned long, void*)>
c0015344:	83 c4 10             	add    esp,0x10
c0015347:	8b 1d 48 ab 02 c0    	mov    ebx,DWORD PTR ds:0xc002ab48
c001534d:	83 ec 08             	sub    esp,0x8
c0015350:	6a 01                	push   0x1
c0015352:	68 50 7f 02 c0       	push   0xc0027f50
c0015357:	e8 6c 64 00 00       	call   c001b7c8 <Thr::loadDLL(char const*, bool)>
c001535c:	83 c4 10             	add    esp,0x10
c001535f:	83 ec 08             	sub    esp,0x8
c0015362:	53                   	push   ebx
c0015363:	50                   	push   eax
c0015364:	e8 6e 66 00 00       	call   c001b9d7 <Thr::executeDLL(unsigned long, void*)>
c0015369:	83 c4 10             	add    esp,0x10
c001536c:	90                   	nop
c001536d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015370:	c9                   	leave  
c0015371:	c3                   	ret    

c0015372 <sendKeyToTerminal(unsigned char)>:
c0015372:	55                   	push   ebp
c0015373:	89 e5                	mov    ebp,esp
c0015375:	83 ec 28             	sub    esp,0x28
c0015378:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001537b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001537e:	a1 04 ac 02 c0       	mov    eax,ds:0xc002ac04
c0015383:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015387:	83 ec 08             	sub    esp,0x8
c001538a:	52                   	push   edx
c001538b:	50                   	push   eax
c001538c:	e8 83 ba ff ff       	call   c0010e14 <VgaText::receiveKey(unsigned char)>
c0015391:	83 c4 10             	add    esp,0x10
c0015394:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015398:	75 41                	jne    c00153db <sendKeyToTerminal(unsigned char)+0x69>
c001539a:	e8 8d 6a 00 00       	call   c001be2c <lockStuff()>
c001539f:	a1 e0 ac 02 c0       	mov    eax,ds:0xc002ace0
c00153a4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00153a7:	c7 05 e0 ac 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ace0,0x0
c00153b1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00153b5:	74 1f                	je     c00153d6 <sendKeyToTerminal(unsigned char)+0x64>
c00153b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ba:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00153bd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00153c0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00153c3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00153c6:	83 ec 0c             	sub    esp,0xc
c00153c9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00153cc:	e8 4b 70 00 00       	call   c001c41c <unblockTask(ThreadControlBlock*)>
c00153d1:	83 c4 10             	add    esp,0x10
c00153d4:	eb db                	jmp    c00153b1 <sendKeyToTerminal(unsigned char)+0x3f>
c00153d6:	e8 ea 6d 00 00       	call   c001c1c5 <unlockStuff()>
c00153db:	90                   	nop
c00153dc:	c9                   	leave  
c00153dd:	c3                   	ret    

c00153de <sendKeyboardToken(KeyboardToken)>:
c00153de:	55                   	push   ebp
c00153df:	89 e5                	mov    ebp,esp
c00153e1:	83 ec 18             	sub    esp,0x18
c00153e4:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00153e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ea:	0f b7 c0             	movzx  eax,ax
c00153ed:	83 f2 01             	xor    edx,0x1
c00153f0:	88 90 00 ad 02 c0    	mov    BYTE PTR [eax-0x3ffd5300],dl
c00153f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f9:	66 3d 03 02          	cmp    ax,0x203
c00153fd:	75 07                	jne    c0015406 <sendKeyboardToken(KeyboardToken)+0x28>
c00153ff:	a0 00 ae 02 c0       	mov    al,ds:0xc002ae00
c0015404:	84 c0                	test   al,al
c0015406:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001540a:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001540d:	a0 08 b1 02 c0       	mov    al,ds:0xc002b108
c0015412:	38 c2                	cmp    dl,al
c0015414:	74 1c                	je     c0015432 <sendKeyboardToken(KeyboardToken)+0x54>
c0015416:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015419:	a2 08 b1 02 c0       	mov    ds:0xc002b108,al
c001541e:	a0 08 b1 02 c0       	mov    al,ds:0xc002b108
c0015423:	0f b6 c0             	movzx  eax,al
c0015426:	83 ec 0c             	sub    esp,0xc
c0015429:	50                   	push   eax
c001542a:	e8 53 ac ff ff       	call   c0010082 <setTerminalScrollLock(bool)>
c001542f:	83 c4 10             	add    esp,0x10
c0015432:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015435:	84 c0                	test   al,al
c0015437:	0f 84 ae 00 00 00    	je     c00154eb <sendKeyboardToken(KeyboardToken)+0x10d>
c001543d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015440:	66 3d 10 03          	cmp    ax,0x310
c0015444:	75 06                	jne    c001544c <sendKeyboardToken(KeyboardToken)+0x6e>
c0015446:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001544c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001544f:	66 3d 11 03          	cmp    ax,0x311
c0015453:	75 06                	jne    c001545b <sendKeyboardToken(KeyboardToken)+0x7d>
c0015455:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001545b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001545e:	66 3d 12 03          	cmp    ax,0x312
c0015462:	75 06                	jne    c001546a <sendKeyboardToken(KeyboardToken)+0x8c>
c0015464:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001546a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001546d:	66 3d 13 03          	cmp    ax,0x313
c0015471:	75 06                	jne    c0015479 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015473:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015479:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001547c:	66 3d 14 03          	cmp    ax,0x314
c0015480:	75 06                	jne    c0015488 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015482:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015488:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001548b:	66 3d 15 03          	cmp    ax,0x315
c001548f:	75 06                	jne    c0015497 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015491:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015497:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001549a:	66 3d 16 03          	cmp    ax,0x316
c001549e:	75 06                	jne    c00154a6 <sendKeyboardToken(KeyboardToken)+0xc8>
c00154a0:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00154a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a9:	66 3d 17 03          	cmp    ax,0x317
c00154ad:	75 06                	jne    c00154b5 <sendKeyboardToken(KeyboardToken)+0xd7>
c00154af:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00154b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b8:	66 3d 18 03          	cmp    ax,0x318
c00154bc:	75 06                	jne    c00154c4 <sendKeyboardToken(KeyboardToken)+0xe6>
c00154be:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00154c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c7:	66 3d 19 03          	cmp    ax,0x319
c00154cb:	75 06                	jne    c00154d3 <sendKeyboardToken(KeyboardToken)+0xf5>
c00154cd:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00154d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d6:	66 3d 1a 03          	cmp    ax,0x31a
c00154da:	0f 85 c9 00 00 00    	jne    c00155a9 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00154e0:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00154e6:	e9 be 00 00 00       	jmp    c00155a9 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00154eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ee:	66 3d 10 03          	cmp    ax,0x310
c00154f2:	75 0a                	jne    c00154fe <sendKeyboardToken(KeyboardToken)+0x120>
c00154f4:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00154fa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00154fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015501:	66 3d 11 03          	cmp    ax,0x311
c0015505:	75 0a                	jne    c0015511 <sendKeyboardToken(KeyboardToken)+0x133>
c0015507:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001550d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015511:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015514:	66 3d 12 03          	cmp    ax,0x312
c0015518:	75 0a                	jne    c0015524 <sendKeyboardToken(KeyboardToken)+0x146>
c001551a:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015520:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015524:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015527:	66 3d 13 03          	cmp    ax,0x313
c001552b:	75 0a                	jne    c0015537 <sendKeyboardToken(KeyboardToken)+0x159>
c001552d:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015533:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015537:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001553a:	66 3d 14 03          	cmp    ax,0x314
c001553e:	75 0a                	jne    c001554a <sendKeyboardToken(KeyboardToken)+0x16c>
c0015540:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015546:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001554a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001554d:	66 3d 15 03          	cmp    ax,0x315
c0015551:	75 0a                	jne    c001555d <sendKeyboardToken(KeyboardToken)+0x17f>
c0015553:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015559:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001555d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015560:	66 3d 16 03          	cmp    ax,0x316
c0015564:	75 0a                	jne    c0015570 <sendKeyboardToken(KeyboardToken)+0x192>
c0015566:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001556c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015570:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015573:	66 3d 17 03          	cmp    ax,0x317
c0015577:	75 0a                	jne    c0015583 <sendKeyboardToken(KeyboardToken)+0x1a5>
c0015579:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001557f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015583:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015586:	66 3d 18 03          	cmp    ax,0x318
c001558a:	75 0a                	jne    c0015596 <sendKeyboardToken(KeyboardToken)+0x1b8>
c001558c:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015592:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015596:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015599:	66 3d 19 03          	cmp    ax,0x319
c001559d:	75 0a                	jne    c00155a9 <sendKeyboardToken(KeyboardToken)+0x1cb>
c001559f:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00155a5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ac:	66 3d 00 02          	cmp    ax,0x200
c00155b0:	75 2a                	jne    c00155dc <sendKeyboardToken(KeyboardToken)+0x1fe>
c00155b2:	a0 00 b1 02 c0       	mov    al,ds:0xc002b100
c00155b7:	83 f0 01             	xor    eax,0x1
c00155ba:	84 c0                	test   al,al
c00155bc:	74 1e                	je     c00155dc <sendKeyboardToken(KeyboardToken)+0x1fe>
c00155be:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c00155c3:	6a 01                	push   0x1
c00155c5:	6a 00                	push   0x0
c00155c7:	68 00 53 01 c0       	push   0xc0015300
c00155cc:	50                   	push   eax
c00155cd:	e8 64 69 00 00       	call   c001bf36 <Process::createThread(void (*)(void*), void*, int)>
c00155d2:	83 c4 10             	add    esp,0x10
c00155d5:	c6 05 00 b1 02 c0 01 	mov    BYTE PTR ds:0xc002b100,0x1
c00155dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155df:	66 3d 1d 03          	cmp    ax,0x31d
c00155e3:	75 06                	jne    c00155eb <sendKeyboardToken(KeyboardToken)+0x20d>
c00155e5:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00155eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ee:	66 3d 1c 03          	cmp    ax,0x31c
c00155f2:	75 06                	jne    c00155fa <sendKeyboardToken(KeyboardToken)+0x21c>
c00155f4:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00155fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155fd:	66 3d 1b 03          	cmp    ax,0x31b
c0015601:	75 06                	jne    c0015609 <sendKeyboardToken(KeyboardToken)+0x22b>
c0015603:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015609:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001560c:	66 3d 1e 03          	cmp    ax,0x31e
c0015610:	75 06                	jne    c0015618 <sendKeyboardToken(KeyboardToken)+0x23a>
c0015612:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015618:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561b:	66 3d 1f 03          	cmp    ax,0x31f
c001561f:	75 06                	jne    c0015627 <sendKeyboardToken(KeyboardToken)+0x249>
c0015621:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015627:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001562a:	66 3d 1a 03          	cmp    ax,0x31a
c001562e:	75 06                	jne    c0015636 <sendKeyboardToken(KeyboardToken)+0x258>
c0015630:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015636:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001563a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001563d:	83 f0 01             	xor    eax,0x1
c0015640:	84 c0                	test   al,al
c0015642:	74 77                	je     c00156bb <sendKeyboardToken(KeyboardToken)+0x2dd>
c0015644:	a0 01 ae 02 c0       	mov    al,ds:0xc002ae01
c0015649:	84 c0                	test   al,al
c001564b:	74 41                	je     c001568e <sendKeyboardToken(KeyboardToken)+0x2b0>
c001564d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015651:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015655:	74 2b                	je     c0015682 <sendKeyboardToken(KeyboardToken)+0x2a4>
c0015657:	8b 15 04 b1 02 c0    	mov    edx,DWORD PTR ds:0xc002b104
c001565d:	89 d0                	mov    eax,edx
c001565f:	c1 e0 02             	shl    eax,0x2
c0015662:	01 d0                	add    eax,edx
c0015664:	01 c0                	add    eax,eax
c0015666:	a3 04 b1 02 c0       	mov    ds:0xc002b104,eax
c001566b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001566e:	0f b7 c0             	movzx  eax,ax
c0015671:	8d 50 d0             	lea    edx,[eax-0x30]
c0015674:	a1 04 b1 02 c0       	mov    eax,ds:0xc002b104
c0015679:	01 d0                	add    eax,edx
c001567b:	a3 04 b1 02 c0       	mov    ds:0xc002b104,eax
c0015680:	eb 6d                	jmp    c00156ef <sendKeyboardToken(KeyboardToken)+0x311>
c0015682:	c7 05 04 b1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b104,0x0
c001568c:	eb 61                	jmp    c00156ef <sendKeyboardToken(KeyboardToken)+0x311>
c001568e:	a1 04 b1 02 c0       	mov    eax,ds:0xc002b104
c0015693:	85 c0                	test   eax,eax
c0015695:	74 18                	je     c00156af <sendKeyboardToken(KeyboardToken)+0x2d1>
c0015697:	a1 04 b1 02 c0       	mov    eax,ds:0xc002b104
c001569c:	0f b6 c0             	movzx  eax,al
c001569f:	83 ec 0c             	sub    esp,0xc
c00156a2:	50                   	push   eax
c00156a3:	e8 ca fc ff ff       	call   c0015372 <sendKeyToTerminal(unsigned char)>
c00156a8:	83 c4 10             	add    esp,0x10
c00156ab:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00156af:	c7 05 04 b1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b104,0x0
c00156b9:	eb 34                	jmp    c00156ef <sendKeyboardToken(KeyboardToken)+0x311>
c00156bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156be:	66 3d 01 01          	cmp    ax,0x101
c00156c2:	75 2b                	jne    c00156ef <sendKeyboardToken(KeyboardToken)+0x311>
c00156c4:	a1 04 b1 02 c0       	mov    eax,ds:0xc002b104
c00156c9:	85 c0                	test   eax,eax
c00156cb:	74 18                	je     c00156e5 <sendKeyboardToken(KeyboardToken)+0x307>
c00156cd:	a1 04 b1 02 c0       	mov    eax,ds:0xc002b104
c00156d2:	0f b6 c0             	movzx  eax,al
c00156d5:	83 ec 0c             	sub    esp,0xc
c00156d8:	50                   	push   eax
c00156d9:	e8 94 fc ff ff       	call   c0015372 <sendKeyToTerminal(unsigned char)>
c00156de:	83 c4 10             	add    esp,0x10
c00156e1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00156e5:	c7 05 04 b1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b104,0x0
c00156ef:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00156f2:	83 f0 01             	xor    eax,0x1
c00156f5:	84 c0                	test   al,al
c00156f7:	74 4c                	je     c0015745 <sendKeyboardToken(KeyboardToken)+0x367>
c00156f9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00156fc:	83 f0 01             	xor    eax,0x1
c00156ff:	84 c0                	test   al,al
c0015701:	74 42                	je     c0015745 <sendKeyboardToken(KeyboardToken)+0x367>
c0015703:	a0 00 ae 02 c0       	mov    al,ds:0xc002ae00
c0015708:	83 f0 01             	xor    eax,0x1
c001570b:	84 c0                	test   al,al
c001570d:	74 36                	je     c0015745 <sendKeyboardToken(KeyboardToken)+0x367>
c001570f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015712:	66 83 f8 1f          	cmp    ax,0x1f
c0015716:	76 09                	jbe    c0015721 <sendKeyboardToken(KeyboardToken)+0x343>
c0015718:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001571b:	66 83 f8 7e          	cmp    ax,0x7e
c001571f:	76 12                	jbe    c0015733 <sendKeyboardToken(KeyboardToken)+0x355>
c0015721:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015724:	66 83 f8 0a          	cmp    ax,0xa
c0015728:	74 09                	je     c0015733 <sendKeyboardToken(KeyboardToken)+0x355>
c001572a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001572d:	66 83 f8 08          	cmp    ax,0x8
c0015731:	75 12                	jne    c0015745 <sendKeyboardToken(KeyboardToken)+0x367>
c0015733:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015736:	0f b6 c0             	movzx  eax,al
c0015739:	83 ec 0c             	sub    esp,0xc
c001573c:	50                   	push   eax
c001573d:	e8 30 fc ff ff       	call   c0015372 <sendKeyToTerminal(unsigned char)>
c0015742:	83 c4 10             	add    esp,0x10
c0015745:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015748:	83 f0 01             	xor    eax,0x1
c001574b:	84 c0                	test   al,al
c001574d:	74 4f                	je     c001579e <sendKeyboardToken(KeyboardToken)+0x3c0>
c001574f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015752:	83 f0 01             	xor    eax,0x1
c0015755:	84 c0                	test   al,al
c0015757:	74 45                	je     c001579e <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015759:	a0 00 ae 02 c0       	mov    al,ds:0xc002ae00
c001575e:	84 c0                	test   al,al
c0015760:	74 3c                	je     c001579e <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015762:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015765:	66 83 f8 3f          	cmp    ax,0x3f
c0015769:	76 33                	jbe    c001579e <sendKeyboardToken(KeyboardToken)+0x3c0>
c001576b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001576e:	66 83 f8 7f          	cmp    ax,0x7f
c0015772:	77 2a                	ja     c001579e <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015774:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015777:	88 c2                	mov    dl,al
c0015779:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001577c:	66 83 f8 5f          	cmp    ax,0x5f
c0015780:	76 04                	jbe    c0015786 <sendKeyboardToken(KeyboardToken)+0x3a8>
c0015782:	b0 20                	mov    al,0x20
c0015784:	eb 02                	jmp    c0015788 <sendKeyboardToken(KeyboardToken)+0x3aa>
c0015786:	b0 00                	mov    al,0x0
c0015788:	29 c2                	sub    edx,eax
c001578a:	88 d0                	mov    al,dl
c001578c:	83 e8 40             	sub    eax,0x40
c001578f:	0f b6 c0             	movzx  eax,al
c0015792:	83 ec 0c             	sub    esp,0xc
c0015795:	50                   	push   eax
c0015796:	e8 d7 fb ff ff       	call   c0015372 <sendKeyToTerminal(unsigned char)>
c001579b:	83 c4 10             	add    esp,0x10
c001579e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a1:	66 3d 00 03          	cmp    ax,0x300
c00157a5:	75 0f                	jne    c00157b6 <sendKeyboardToken(KeyboardToken)+0x3d8>
c00157a7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00157aa:	83 f0 01             	xor    eax,0x1
c00157ad:	84 c0                	test   al,al
c00157af:	74 05                	je     c00157b6 <sendKeyboardToken(KeyboardToken)+0x3d8>
c00157b1:	e8 f3 b0 ff ff       	call   c00108a9 <doTerminalCycle()>
c00157b6:	90                   	nop
c00157b7:	c9                   	leave  
c00157b8:	c3                   	ret    

c00157b9 <clearInternalKeybuffer(VgaText*)>:
c00157b9:	55                   	push   ebp
c00157ba:	89 e5                	mov    ebp,esp
c00157bc:	83 ec 08             	sub    esp,0x8
c00157bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c2:	05 34 11 00 00       	add    eax,0x1134
c00157c7:	83 ec 0c             	sub    esp,0xc
c00157ca:	50                   	push   eax
c00157cb:	e8 ca ae fe ff       	call   c000069a <strlen>
c00157d0:	83 c4 10             	add    esp,0x10
c00157d3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00157d6:	81 c2 34 11 00 00    	add    edx,0x1134
c00157dc:	83 ec 04             	sub    esp,0x4
c00157df:	50                   	push   eax
c00157e0:	6a 00                	push   0x0
c00157e2:	52                   	push   edx
c00157e3:	e8 95 ae fe ff       	call   c000067d <memset>
c00157e8:	83 c4 10             	add    esp,0x10
c00157eb:	90                   	nop
c00157ec:	c9                   	leave  
c00157ed:	c3                   	ret    

c00157ee <readKeyboard(VgaText*, char*, unsigned long)>:
c00157ee:	55                   	push   ebp
c00157ef:	89 e5                	mov    ebp,esp
c00157f1:	83 ec 18             	sub    esp,0x18
c00157f4:	fb                   	sti    
c00157f5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00157fc:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015800:	0f 84 8a 00 00 00    	je     c0015890 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015806:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015809:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001580f:	84 c0                	test   al,al
c0015811:	75 11                	jne    c0015824 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0015813:	e8 ed 65 00 00       	call   c001be05 <lockScheduler()>
c0015818:	e8 23 69 00 00       	call   c001c140 <schedule()>
c001581d:	e8 e5 65 00 00       	call   c001be07 <unlockScheduler()>
c0015822:	eb e2                	jmp    c0015806 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015824:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015827:	8d 50 01             	lea    edx,[eax+0x1]
c001582a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001582d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015830:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015836:	88 10                	mov    BYTE PTR [eax],dl
c0015838:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001583b:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015841:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015844:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015847:	05 34 11 00 00       	add    eax,0x1134
c001584c:	83 ec 0c             	sub    esp,0xc
c001584f:	50                   	push   eax
c0015850:	e8 45 ae fe ff       	call   c000069a <strlen>
c0015855:	83 c4 10             	add    esp,0x10
c0015858:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001585b:	81 c2 34 11 00 00    	add    edx,0x1134
c0015861:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015864:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015867:	81 c2 34 11 00 00    	add    edx,0x1134
c001586d:	83 ec 04             	sub    esp,0x4
c0015870:	50                   	push   eax
c0015871:	51                   	push   ecx
c0015872:	52                   	push   edx
c0015873:	e8 97 ad fe ff       	call   c000060f <memmove>
c0015878:	83 c4 10             	add    esp,0x10
c001587b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001587e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015881:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015885:	0f 85 71 ff ff ff    	jne    c00157fc <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c001588b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001588e:	eb 03                	jmp    c0015893 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015890:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015893:	c9                   	leave  
c0015894:	c3                   	ret    
c0015895:	90                   	nop

c0015896 <Keyboard::Keyboard(char const*)>:
c0015896:	83 ec 0c             	sub    esp,0xc
c0015899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001589d:	83 ec 08             	sub    esp,0x8
c00158a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00158a4:	50                   	push   eax
c00158a5:	e8 6a e3 ff ff       	call   c0013c14 <Device::Device(char const*)>
c00158aa:	83 c4 10             	add    esp,0x10
c00158ad:	ba 74 7f 02 c0       	mov    edx,0xc0027f74
c00158b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158b6:	89 10                	mov    DWORD PTR [eax],edx
c00158b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158bc:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00158c6:	c6 05 e4 ac 02 c0 01 	mov    BYTE PTR ds:0xc002ace4,0x1
c00158cd:	90                   	nop
c00158ce:	83 c4 0c             	add    esp,0xc
c00158d1:	c3                   	ret    

c00158d2 <Keyboard::~Keyboard()>:
c00158d2:	83 ec 0c             	sub    esp,0xc
c00158d5:	ba 74 7f 02 c0       	mov    edx,0xc0027f74
c00158da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158de:	89 10                	mov    DWORD PTR [eax],edx
c00158e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158e4:	83 ec 0c             	sub    esp,0xc
c00158e7:	50                   	push   eax
c00158e8:	e8 09 e0 ff ff       	call   c00138f6 <Device::~Device()>
c00158ed:	83 c4 10             	add    esp,0x10
c00158f0:	90                   	nop
c00158f1:	83 c4 0c             	add    esp,0xc
c00158f4:	c3                   	ret    
c00158f5:	90                   	nop

c00158f6 <Keyboard::~Keyboard()>:
c00158f6:	83 ec 0c             	sub    esp,0xc
c00158f9:	83 ec 0c             	sub    esp,0xc
c00158fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015900:	e8 cd ff ff ff       	call   c00158d2 <Keyboard::~Keyboard()>
c0015905:	83 c4 10             	add    esp,0x10
c0015908:	83 ec 08             	sub    esp,0x8
c001590b:	68 5c 01 00 00       	push   0x15c
c0015910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015914:	e8 3c cc ff ff       	call   c0012555 <operator delete(void*, unsigned long)>
c0015919:	83 c4 10             	add    esp,0x10
c001591c:	83 c4 0c             	add    esp,0xc
c001591f:	c3                   	ret    

c0015920 <LogicalDisk::close(int, int, void*)>:
c0015920:	83 c8 ff             	or     eax,0xffffffff
c0015923:	c3                   	ret    

c0015924 <LogicalDisk::~LogicalDisk()>:
c0015924:	83 ec 0c             	sub    esp,0xc
c0015927:	ba 24 80 02 c0       	mov    edx,0xc0028024
c001592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015930:	89 10                	mov    DWORD PTR [eax],edx
c0015932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015936:	83 ec 0c             	sub    esp,0xc
c0015939:	50                   	push   eax
c001593a:	e8 b7 df ff ff       	call   c00138f6 <Device::~Device()>
c001593f:	83 c4 10             	add    esp,0x10
c0015942:	90                   	nop
c0015943:	83 c4 0c             	add    esp,0xc
c0015946:	c3                   	ret    
c0015947:	90                   	nop

c0015948 <LogicalDisk::~LogicalDisk()>:
c0015948:	83 ec 0c             	sub    esp,0xc
c001594b:	83 ec 0c             	sub    esp,0xc
c001594e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015952:	e8 cd ff ff ff       	call   c0015924 <LogicalDisk::~LogicalDisk()>
c0015957:	83 c4 10             	add    esp,0x10
c001595a:	83 ec 08             	sub    esp,0x8
c001595d:	68 74 01 00 00       	push   0x174
c0015962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015966:	e8 ea cb ff ff       	call   c0012555 <operator delete(void*, unsigned long)>
c001596b:	83 c4 10             	add    esp,0x10
c001596e:	83 c4 0c             	add    esp,0xc
c0015971:	c3                   	ret    

c0015972 <LogicalDisk::open(int, int, void*)>:
c0015972:	83 ec 18             	sub    esp,0x18
c0015975:	68 a0 7f 02 c0       	push   0xc0027fa0
c001597a:	e8 7a 34 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c001597f:	83 c8 ff             	or     eax,0xffffffff
c0015982:	83 c4 1c             	add    esp,0x1c
c0015985:	c3                   	ret    

c0015986 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015986:	53                   	push   ebx
c0015987:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001598b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001598f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015993:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015999:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001599f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00159a5:	77 10                	ja     c00159b7 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00159a7:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00159ad:	89 d3                	mov    ebx,edx
c00159af:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00159b5:	72 05                	jb     c00159bc <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00159b7:	83 c8 ff             	or     eax,0xffffffff
c00159ba:	89 c2                	mov    edx,eax
c00159bc:	5b                   	pop    ebx
c00159bd:	c3                   	ret    

c00159be <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00159be:	56                   	push   esi
c00159bf:	83 c8 ff             	or     eax,0xffffffff
c00159c2:	53                   	push   ebx
c00159c3:	89 c2                	mov    edx,eax
c00159c5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00159c9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00159cd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00159d1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00159d7:	77 27                	ja     c0015a00 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00159d9:	89 d8                	mov    eax,ebx
c00159db:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00159e1:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00159e7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00159ec:	89 c2                	mov    edx,eax
c00159ee:	73 10                	jae    c0015a00 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00159f0:	89 c8                	mov    eax,ecx
c00159f2:	89 da                	mov    edx,ebx
c00159f4:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00159fa:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015a00:	5b                   	pop    ebx
c0015a01:	5e                   	pop    esi
c0015a02:	c3                   	ret    
c0015a03:	90                   	nop

c0015a04 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015a04:	83 ec 1c             	sub    esp,0x1c
c0015a07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015a0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015a0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015a17:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015a1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0015a1e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015a22:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015a26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a2a:	83 ec 08             	sub    esp,0x8
c0015a2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015a31:	50                   	push   eax
c0015a32:	e8 dd e1 ff ff       	call   c0013c14 <Device::Device(char const*)>
c0015a37:	83 c4 10             	add    esp,0x10
c0015a3a:	ba 24 80 02 c0       	mov    edx,0xc0028024
c0015a3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a43:	89 10                	mov    DWORD PTR [eax],edx
c0015a45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a49:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015a50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a54:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015a5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a5f:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015a69:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015a6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015a71:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015a75:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015a7b:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015a81:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015a85:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015a88:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015a8c:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015a92:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015a98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a9c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015aa0:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015aa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aaa:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015ab4:	90                   	nop
c0015ab5:	83 c4 1c             	add    esp,0x1c
c0015ab8:	c3                   	ret    
c0015ab9:	90                   	nop

c0015aba <LogicalDisk::assignDriveLetter()>:
c0015aba:	55                   	push   ebp
c0015abb:	57                   	push   edi
c0015abc:	56                   	push   esi
c0015abd:	53                   	push   ebx
c0015abe:	83 ec 14             	sub    esp,0x14
c0015ac1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015ac5:	8b 3d 20 b1 02 c0    	mov    edi,DWORD PTR ds:0xc002b120
c0015acb:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015ad1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015ad5:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015adb:	8b 3d 24 b1 02 c0    	mov    edi,DWORD PTR ds:0xc002b124
c0015ae1:	3c 01                	cmp    al,0x1
c0015ae3:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015ae7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015aeb:	19 c0                	sbb    eax,eax
c0015aed:	83 e0 02             	and    eax,0x2
c0015af0:	83 c0 41             	add    eax,0x41
c0015af3:	0f be e8             	movsx  ebp,al
c0015af6:	3c 43                	cmp    al,0x43
c0015af8:	75 10                	jne    c0015b0a <LogicalDisk::assignDriveLetter()+0x50>
c0015afa:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015b01:	75 5d                	jne    c0015b60 <LogicalDisk::assignDriveLetter()+0xa6>
c0015b03:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015b08:	75 56                	jne    c0015b60 <LogicalDisk::assignDriveLetter()+0xa6>
c0015b0a:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015b0d:	ba 01 00 00 00       	mov    edx,0x1
c0015b12:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015b16:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015b1a:	d3 e2                	shl    edx,cl
c0015b1c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015b20:	89 d7                	mov    edi,edx
c0015b22:	89 d6                	mov    esi,edx
c0015b24:	c1 ff 1f             	sar    edi,0x1f
c0015b27:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015b2b:	21 f9                	and    ecx,edi
c0015b2d:	09 d1                	or     ecx,edx
c0015b2f:	75 2f                	jne    c0015b60 <LogicalDisk::assignDriveLetter()+0xa6>
c0015b31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015b35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015b39:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015b3f:	09 f2                	or     edx,esi
c0015b41:	89 15 20 b1 02 c0    	mov    DWORD PTR ds:0xc002b120,edx
c0015b47:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015b4b:	09 fa                	or     edx,edi
c0015b4d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015b51:	89 15 24 b1 02 c0    	mov    DWORD PTR ds:0xc002b124,edx
c0015b57:	89 1c bd 40 b1 02 c0 	mov    DWORD PTR [edi*4-0x3ffd4ec0],ebx
c0015b5e:	eb 08                	jmp    c0015b68 <LogicalDisk::assignDriveLetter()+0xae>
c0015b60:	45                   	inc    ebp
c0015b61:	40                   	inc    eax
c0015b62:	3c 5b                	cmp    al,0x5b
c0015b64:	75 90                	jne    c0015af6 <LogicalDisk::assignDriveLetter()+0x3c>
c0015b66:	31 c0                	xor    eax,eax
c0015b68:	83 c4 14             	add    esp,0x14
c0015b6b:	5b                   	pop    ebx
c0015b6c:	5e                   	pop    esi
c0015b6d:	5f                   	pop    edi
c0015b6e:	5d                   	pop    ebp
c0015b6f:	c3                   	ret    

c0015b70 <LogicalDisk::mount()>:
c0015b70:	56                   	push   esi
c0015b71:	53                   	push   ebx
c0015b72:	51                   	push   ecx
c0015b73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015b77:	8b 1d a8 ac 02 c0    	mov    ebx,DWORD PTR ds:0xc002aca8
c0015b7d:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015b87:	85 db                	test   ebx,ebx
c0015b89:	74 50                	je     c0015bdb <LogicalDisk::mount()+0x6b>
c0015b8b:	e8 60 62 00 00       	call   c001bdf0 <getIRQNestingLevel()>
c0015b90:	52                   	push   edx
c0015b91:	52                   	push   edx
c0015b92:	50                   	push   eax
c0015b93:	68 c4 7f 02 c0       	push   0xc0027fc4
c0015b98:	e8 98 ca ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0015b9d:	83 c4 0c             	add    esp,0xc
c0015ba0:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015ba7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015ba9:	83 e8 41             	sub    eax,0x41
c0015bac:	50                   	push   eax
c0015bad:	56                   	push   esi
c0015bae:	53                   	push   ebx
c0015baf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015bb2:	83 c4 10             	add    esp,0x10
c0015bb5:	84 c0                	test   al,al
c0015bb7:	74 08                	je     c0015bc1 <LogicalDisk::mount()+0x51>
c0015bb9:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015bbf:	eb 1c                	jmp    c0015bdd <LogicalDisk::mount()+0x6d>
c0015bc1:	e8 2a 62 00 00       	call   c001bdf0 <getIRQNestingLevel()>
c0015bc6:	51                   	push   ecx
c0015bc7:	51                   	push   ecx
c0015bc8:	50                   	push   eax
c0015bc9:	68 df 7f 02 c0       	push   0xc0027fdf
c0015bce:	e8 62 ca ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0015bd3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015bd6:	83 c4 10             	add    esp,0x10
c0015bd9:	eb ac                	jmp    c0015b87 <LogicalDisk::mount()+0x17>
c0015bdb:	31 c0                	xor    eax,eax
c0015bdd:	5a                   	pop    edx
c0015bde:	5b                   	pop    ebx
c0015bdf:	5e                   	pop    esi
c0015be0:	c3                   	ret    
c0015be1:	90                   	nop

c0015be2 <LogicalDisk::unmount()>:
c0015be2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015be6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015bf0:	c3                   	ret    
c0015bf1:	90                   	nop

c0015bf2 <LogicalDisk::unassignDriveLetter()>:
c0015bf2:	57                   	push   edi
c0015bf3:	56                   	push   esi
c0015bf4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015bf8:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015bff:	84 c9                	test   cl,cl
c0015c01:	75 0f                	jne    c0015c12 <LogicalDisk::unassignDriveLetter()+0x20>
c0015c03:	c7 44 24 0c fa 7f 02 c0 	mov    DWORD PTR [esp+0xc],0xc0027ffa
c0015c0b:	5e                   	pop    esi
c0015c0c:	5f                   	pop    edi
c0015c0d:	e9 e7 31 00 00       	jmp    c0018df9 <Krnl::panic(char const*)>
c0015c12:	83 e9 41             	sub    ecx,0x41
c0015c15:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015c1c:	b8 01 00 00 00       	mov    eax,0x1
c0015c21:	c7 04 8d 40 b1 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4ec0],0x0
c0015c2c:	d3 e0                	shl    eax,cl
c0015c2e:	89 c7                	mov    edi,eax
c0015c30:	f7 d0                	not    eax
c0015c32:	c1 ff 1f             	sar    edi,0x1f
c0015c35:	21 05 20 b1 02 c0    	and    DWORD PTR ds:0xc002b120,eax
c0015c3b:	89 fe                	mov    esi,edi
c0015c3d:	f7 d6                	not    esi
c0015c3f:	21 35 24 b1 02 c0    	and    DWORD PTR ds:0xc002b124,esi
c0015c45:	5e                   	pop    esi
c0015c46:	5f                   	pop    edi
c0015c47:	c3                   	ret    

c0015c48 <LogicalDisk::read(unsigned long long, int, void*)>:
c0015c48:	57                   	push   edi
c0015c49:	56                   	push   esi
c0015c4a:	53                   	push   ebx
c0015c4b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015c4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015c53:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015c57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015c5b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015c61:	77 41                	ja     c0015ca4 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015c63:	99                   	cdq    
c0015c64:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015c6a:	01 c8                	add    eax,ecx
c0015c6c:	11 da                	adc    edx,ebx
c0015c6e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015c74:	19 d7                	sbb    edi,edx
c0015c76:	72 33                	jb     c0015cab <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015c78:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015c7e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015c84:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015c88:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015c8c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015c92:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015c98:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015c9c:	5b                   	pop    ebx
c0015c9d:	5e                   	pop    esi
c0015c9e:	5f                   	pop    edi
c0015c9f:	e9 74 09 00 00       	jmp    c0016618 <VCache::read(unsigned long long, int, void*)>
c0015ca4:	b8 05 00 00 00       	mov    eax,0x5
c0015ca9:	eb 05                	jmp    c0015cb0 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015cab:	b8 07 00 00 00       	mov    eax,0x7
c0015cb0:	5b                   	pop    ebx
c0015cb1:	5e                   	pop    esi
c0015cb2:	5f                   	pop    edi
c0015cb3:	c3                   	ret    

c0015cb4 <LogicalDisk::write(unsigned long long, int, void*)>:
c0015cb4:	57                   	push   edi
c0015cb5:	56                   	push   esi
c0015cb6:	53                   	push   ebx
c0015cb7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015cbb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015cbf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015cc7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015ccd:	77 41                	ja     c0015d10 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015ccf:	99                   	cdq    
c0015cd0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015cd6:	01 c8                	add    eax,ecx
c0015cd8:	11 da                	adc    edx,ebx
c0015cda:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015ce0:	19 d7                	sbb    edi,edx
c0015ce2:	72 33                	jb     c0015d17 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015ce4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015cea:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015cf0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015cf4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015cf8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015cfe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015d04:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015d08:	5b                   	pop    ebx
c0015d09:	5e                   	pop    esi
c0015d0a:	5f                   	pop    edi
c0015d0b:	e9 24 08 00 00       	jmp    c0016534 <VCache::write(unsigned long long, int, void*)>
c0015d10:	b8 05 00 00 00       	mov    eax,0x5
c0015d15:	eb 05                	jmp    c0015d1c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015d17:	b8 07 00 00 00       	mov    eax,0x7
c0015d1c:	5b                   	pop    ebx
c0015d1d:	5e                   	pop    esi
c0015d1e:	5f                   	pop    edi
c0015d1f:	c3                   	ret    

c0015d20 <Mouse::Mouse(char const*)>:
c0015d20:	83 ec 0c             	sub    esp,0xc
c0015d23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d27:	83 ec 08             	sub    esp,0x8
c0015d2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d2e:	50                   	push   eax
c0015d2f:	e8 e0 de ff ff       	call   c0013c14 <Device::Device(char const*)>
c0015d34:	83 c4 10             	add    esp,0x10
c0015d37:	ba 50 80 02 c0       	mov    edx,0xc0028050
c0015d3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d40:	89 10                	mov    DWORD PTR [eax],edx
c0015d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d46:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015d50:	90                   	nop
c0015d51:	83 c4 0c             	add    esp,0xc
c0015d54:	c3                   	ret    
c0015d55:	90                   	nop

c0015d56 <Mouse::~Mouse()>:
c0015d56:	83 ec 0c             	sub    esp,0xc
c0015d59:	ba 50 80 02 c0       	mov    edx,0xc0028050
c0015d5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d62:	89 10                	mov    DWORD PTR [eax],edx
c0015d64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d68:	83 ec 0c             	sub    esp,0xc
c0015d6b:	50                   	push   eax
c0015d6c:	e8 85 db ff ff       	call   c00138f6 <Device::~Device()>
c0015d71:	83 c4 10             	add    esp,0x10
c0015d74:	90                   	nop
c0015d75:	83 c4 0c             	add    esp,0xc
c0015d78:	c3                   	ret    
c0015d79:	90                   	nop

c0015d7a <Mouse::~Mouse()>:
c0015d7a:	83 ec 0c             	sub    esp,0xc
c0015d7d:	83 ec 0c             	sub    esp,0xc
c0015d80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d84:	e8 cd ff ff ff       	call   c0015d56 <Mouse::~Mouse()>
c0015d89:	83 c4 10             	add    esp,0x10
c0015d8c:	83 ec 08             	sub    esp,0x8
c0015d8f:	68 58 01 00 00       	push   0x158
c0015d94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d98:	e8 b8 c7 ff ff       	call   c0012555 <operator delete(void*, unsigned long)>
c0015d9d:	83 c4 10             	add    esp,0x10
c0015da0:	83 c4 0c             	add    esp,0xc
c0015da3:	c3                   	ret    

c0015da4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015da4:	55                   	push   ebp
c0015da5:	57                   	push   edi
c0015da6:	56                   	push   esi
c0015da7:	53                   	push   ebx
c0015da8:	81 ec 28 01 00 00    	sub    esp,0x128
c0015dae:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015db5:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015dbc:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0015dc3:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0015dca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015dce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015dd2:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015dd9:	e8 32 df ff ff       	call   c0013d10 <Device::getName()>
c0015dde:	5a                   	pop    edx
c0015ddf:	59                   	pop    ecx
c0015de0:	50                   	push   eax
c0015de1:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015de5:	55                   	push   ebp
c0015de6:	e8 31 a9 fe ff       	call   c000071c <strcpy>
c0015deb:	5b                   	pop    ebx
c0015dec:	58                   	pop    eax
c0015ded:	68 74 80 02 c0       	push   0xc0028074
c0015df2:	55                   	push   ebp
c0015df3:	e8 db a9 fe ff       	call   c00007d3 <strcat>
c0015df8:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015dff:	e8 be 96 ff ff       	call   c000f4c2 <malloc>
c0015e04:	83 c4 0c             	add    esp,0xc
c0015e07:	89 c3                	mov    ebx,eax
c0015e09:	57                   	push   edi
c0015e0a:	56                   	push   esi
c0015e0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015e0f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015e13:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0015e1a:	55                   	push   ebp
c0015e1b:	50                   	push   eax
c0015e1c:	e8 e3 fb ff ff       	call   c0015a04 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0015e21:	83 c4 14             	add    esp,0x14
c0015e24:	53                   	push   ebx
c0015e25:	e8 90 fc ff ff       	call   c0015aba <LogicalDisk::assignDriveLetter()>
c0015e2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e2d:	e8 3e fd ff ff       	call   c0015b70 <LogicalDisk::mount()>
c0015e32:	58                   	pop    eax
c0015e33:	5a                   	pop    edx
c0015e34:	53                   	push   ebx
c0015e35:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015e3c:	e8 e3 db ff ff       	call   c0013a24 <Device::addChild(Device*)>
c0015e41:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015e47:	5b                   	pop    ebx
c0015e48:	5e                   	pop    esi
c0015e49:	5f                   	pop    edi
c0015e4a:	5d                   	pop    ebp
c0015e4b:	c3                   	ret    

c0015e4c <createPartitionsForDisk(PhysicalDisk*)>:
c0015e4c:	55                   	push   ebp
c0015e4d:	57                   	push   edi
c0015e4e:	56                   	push   esi
c0015e4f:	53                   	push   ebx
c0015e50:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0015e56:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0015e5d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015e63:	3d 00 02 00 00       	cmp    eax,0x200
c0015e68:	74 27                	je     c0015e91 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0015e6a:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0015e70:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0015e76:	83 ec 10             	sub    esp,0x10
c0015e79:	0f a4 f7 0a          	shld   edi,esi,0xa
c0015e7d:	99                   	cdq    
c0015e7e:	c1 e6 0a             	shl    esi,0xa
c0015e81:	52                   	push   edx
c0015e82:	89 fd                	mov    ebp,edi
c0015e84:	50                   	push   eax
c0015e85:	55                   	push   ebp
c0015e86:	56                   	push   esi
c0015e87:	e8 20 dc 00 00       	call   c0023aac <__udivdi3>
c0015e8c:	e9 b1 00 00 00       	jmp    c0015f42 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015e91:	83 ec 0c             	sub    esp,0xc
c0015e94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e96:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0015e9a:	56                   	push   esi
c0015e9b:	6a 01                	push   0x1
c0015e9d:	6a 00                	push   0x0
c0015e9f:	6a 00                	push   0x0
c0015ea1:	53                   	push   ebx
c0015ea2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015ea5:	83 c4 20             	add    esp,0x20
c0015ea8:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0015eb0:	75 0a                	jne    c0015ebc <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0015eb2:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0015eba:	74 2c                	je     c0015ee8 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0015ebc:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015ec2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015ec8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015ece:	83 ec 10             	sub    esp,0x10
c0015ed1:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015ed5:	89 f7                	mov    edi,esi
c0015ed7:	c1 e0 0a             	shl    eax,0xa
c0015eda:	c1 ff 1f             	sar    edi,0x1f
c0015edd:	57                   	push   edi
c0015ede:	56                   	push   esi
c0015edf:	52                   	push   edx
c0015ee0:	50                   	push   eax
c0015ee1:	e8 c6 db 00 00       	call   c0023aac <__udivdi3>
c0015ee6:	eb 5a                	jmp    c0015f42 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015ee8:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0015eef:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0015ef6:	83 e1 7f             	and    ecx,0x7f
c0015ef9:	83 e0 7f             	and    eax,0x7f
c0015efc:	01 c1                	add    ecx,eax
c0015efe:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0015f05:	83 e0 7f             	and    eax,0x7f
c0015f08:	01 c1                	add    ecx,eax
c0015f0a:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0015f11:	83 e0 7f             	and    eax,0x7f
c0015f14:	00 c1                	add    cl,al
c0015f16:	74 41                	je     c0015f59 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0015f18:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015f1e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015f24:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015f2a:	83 ec 10             	sub    esp,0x10
c0015f2d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015f31:	89 f7                	mov    edi,esi
c0015f33:	c1 e0 0a             	shl    eax,0xa
c0015f36:	c1 ff 1f             	sar    edi,0x1f
c0015f39:	57                   	push   edi
c0015f3a:	56                   	push   esi
c0015f3b:	52                   	push   edx
c0015f3c:	50                   	push   eax
c0015f3d:	e8 6a db 00 00       	call   c0023aac <__udivdi3>
c0015f42:	83 c4 14             	add    esp,0x14
c0015f45:	52                   	push   edx
c0015f46:	50                   	push   eax
c0015f47:	6a 00                	push   0x0
c0015f49:	6a 00                	push   0x0
c0015f4b:	53                   	push   ebx
c0015f4c:	e8 53 fe ff ff       	call   c0015da4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015f51:	83 c4 20             	add    esp,0x20
c0015f54:	e9 79 01 00 00       	jmp    c00160d2 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0015f59:	89 f0                	mov    eax,esi
c0015f5b:	31 f6                	xor    esi,esi
c0015f5d:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0015f64:	75 02                	jne    c0015f68 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0015f66:	89 f1                	mov    ecx,esi
c0015f68:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0015f6f:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0015f76:	c1 e2 08             	shl    edx,0x8
c0015f79:	c1 e7 10             	shl    edi,0x10
c0015f7c:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0015f84:	09 fa                	or     edx,edi
c0015f86:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0015f8e:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0015f95:	83 c0 10             	add    eax,0x10
c0015f98:	09 fa                	or     edx,edi
c0015f9a:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0015fa1:	c1 e7 18             	shl    edi,0x18
c0015fa4:	09 fa                	or     edx,edi
c0015fa6:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0015fad:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0015fb1:	c1 e7 10             	shl    edi,0x10
c0015fb4:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0015fbb:	c1 e2 08             	shl    edx,0x8
c0015fbe:	09 fa                	or     edx,edi
c0015fc0:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0015fc7:	09 fa                	or     edx,edi
c0015fc9:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0015fd0:	c1 e7 18             	shl    edi,0x18
c0015fd3:	09 fa                	or     edx,edi
c0015fd5:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0015fd9:	46                   	inc    esi
c0015fda:	83 fe 04             	cmp    esi,0x4
c0015fdd:	0f 85 7a ff ff ff    	jne    c0015f5d <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0015fe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fe7:	83 f0 01             	xor    eax,0x1
c0015fea:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0015fee:	75 57                	jne    c0016047 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015ff0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ff4:	83 f0 01             	xor    eax,0x1
c0015ff7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0015ffb:	75 4a                	jne    c0016047 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015ffd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016001:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016009:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016011:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016017:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001601d:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016023:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016027:	89 f7                	mov    edi,esi
c0016029:	c1 e0 0a             	shl    eax,0xa
c001602c:	c1 ff 1f             	sar    edi,0x1f
c001602f:	57                   	push   edi
c0016030:	56                   	push   esi
c0016031:	52                   	push   edx
c0016032:	50                   	push   eax
c0016033:	e8 74 da 00 00       	call   c0023aac <__udivdi3>
c0016038:	83 c4 10             	add    esp,0x10
c001603b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001603f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016043:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016047:	84 c9                	test   cl,cl
c0016049:	74 53                	je     c001609e <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001604b:	0f b6 c9             	movzx  ecx,cl
c001604e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016052:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016056:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001605a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001605e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016062:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016066:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c001606a:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001606e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016072:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016076:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001607a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001607e:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016082:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016086:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001608a:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001608e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016092:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016096:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001609a:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001609e:	31 ed                	xor    ebp,ebp
c00160a0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00160a4:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00160a8:	89 f8                	mov    eax,edi
c00160aa:	09 f0                	or     eax,esi
c00160ac:	74 1e                	je     c00160cc <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00160ae:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00160b2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00160b6:	89 d1                	mov    ecx,edx
c00160b8:	09 c1                	or     ecx,eax
c00160ba:	74 10                	je     c00160cc <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00160bc:	83 ec 0c             	sub    esp,0xc
c00160bf:	57                   	push   edi
c00160c0:	56                   	push   esi
c00160c1:	52                   	push   edx
c00160c2:	50                   	push   eax
c00160c3:	53                   	push   ebx
c00160c4:	e8 db fc ff ff       	call   c0015da4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00160c9:	83 c4 20             	add    esp,0x20
c00160cc:	45                   	inc    ebp
c00160cd:	83 fd 04             	cmp    ebp,0x4
c00160d0:	75 ce                	jne    c00160a0 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00160d2:	81 c4 5c 02 00 00    	add    esp,0x25c
c00160d8:	5b                   	pop    ebx
c00160d9:	5e                   	pop    esi
c00160da:	5f                   	pop    edi
c00160db:	5d                   	pop    ebp
c00160dc:	c3                   	ret    
c00160dd:	90                   	nop

c00160de <Timer::Timer(char const*)>:
c00160de:	83 ec 0c             	sub    esp,0xc
c00160e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160e5:	83 ec 08             	sub    esp,0x8
c00160e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160ec:	50                   	push   eax
c00160ed:	e8 22 db ff ff       	call   c0013c14 <Device::Device(char const*)>
c00160f2:	83 c4 10             	add    esp,0x10
c00160f5:	ba 88 80 02 c0       	mov    edx,0xc0028088
c00160fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160fe:	89 10                	mov    DWORD PTR [eax],edx
c0016100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016104:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001610e:	90                   	nop
c001610f:	83 c4 0c             	add    esp,0xc
c0016112:	c3                   	ret    
c0016113:	90                   	nop

c0016114 <Timer::~Timer()>:
c0016114:	83 ec 0c             	sub    esp,0xc
c0016117:	ba 88 80 02 c0       	mov    edx,0xc0028088
c001611c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016120:	89 10                	mov    DWORD PTR [eax],edx
c0016122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016126:	83 ec 0c             	sub    esp,0xc
c0016129:	50                   	push   eax
c001612a:	e8 c7 d7 ff ff       	call   c00138f6 <Device::~Device()>
c001612f:	83 c4 10             	add    esp,0x10
c0016132:	90                   	nop
c0016133:	83 c4 0c             	add    esp,0xc
c0016136:	c3                   	ret    
c0016137:	90                   	nop

c0016138 <Timer::~Timer()>:
c0016138:	83 ec 0c             	sub    esp,0xc
c001613b:	83 ec 0c             	sub    esp,0xc
c001613e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016142:	e8 cd ff ff ff       	call   c0016114 <Timer::~Timer()>
c0016147:	83 c4 10             	add    esp,0x10
c001614a:	83 ec 08             	sub    esp,0x8
c001614d:	68 5c 01 00 00       	push   0x15c
c0016152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016156:	e8 fa c3 ff ff       	call   c0012555 <operator delete(void*, unsigned long)>
c001615b:	83 c4 10             	add    esp,0x10
c001615e:	83 c4 0c             	add    esp,0xc
c0016161:	c3                   	ret    

c0016162 <Timer::read()>:
c0016162:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016166:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001616c:	c3                   	ret    

c001616d <timerHandler(unsigned long long)>:
c001616d:	55                   	push   ebp
c001616e:	57                   	push   edi
c001616f:	56                   	push   esi
c0016170:	53                   	push   ebx
c0016171:	83 ec 0c             	sub    esp,0xc
c0016174:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016178:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001617c:	01 35 b0 b1 02 c0    	add    DWORD PTR ds:0xc002b1b0,esi
c0016182:	11 3d b4 b1 02 c0    	adc    DWORD PTR ds:0xc002b1b4,edi
c0016188:	80 3d 4d ab 02 c0 00 	cmp    BYTE PTR ds:0xc002ab4d,0x0
c001618f:	0f 84 07 01 00 00    	je     c001629c <timerHandler(unsigned long long)+0x12f>
c0016195:	e8 92 5c 00 00       	call   c001be2c <lockStuff()>
c001619a:	83 ec 0c             	sub    esp,0xc
c001619d:	68 3c c0 02 c0       	push   0xc002c03c
c00161a2:	e8 77 f9 00 00       	call   c0025b1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00161a7:	c7 04 24 3c c0 02 c0 	mov    DWORD PTR [esp],0xc002c03c
c00161ae:	89 c3                	mov    ebx,eax
c00161b0:	e8 71 f9 00 00       	call   c0025b26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00161b5:	83 c4 10             	add    esp,0x10
c00161b8:	84 c0                	test   al,al
c00161ba:	74 60                	je     c001621c <timerHandler(unsigned long long)+0xaf>
c00161bc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00161c2:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00161c5:	85 c0                	test   eax,eax
c00161c7:	0f 85 91 00 00 00    	jne    c001625e <timerHandler(unsigned long long)+0xf1>
c00161cd:	e9 be 00 00 00       	jmp    c0016290 <timerHandler(unsigned long long)+0x123>
c00161d2:	83 ec 0c             	sub    esp,0xc
c00161d5:	55                   	push   ebp
c00161d6:	e8 41 62 00 00       	call   c001c41c <unblockTask(ThreadControlBlock*)>
c00161db:	83 c4 10             	add    esp,0x10
c00161de:	39 eb                	cmp    ebx,ebp
c00161e0:	75 12                	jne    c00161f4 <timerHandler(unsigned long long)+0x87>
c00161e2:	83 ec 0c             	sub    esp,0xc
c00161e5:	68 3c c0 02 c0       	push   0xc002c03c
c00161ea:	e8 2f f9 00 00       	call   c0025b1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00161ef:	89 c3                	mov    ebx,eax
c00161f1:	83 c4 10             	add    esp,0x10
c00161f4:	83 ec 0c             	sub    esp,0xc
c00161f7:	68 3c c0 02 c0       	push   0xc002c03c
c00161fc:	e8 25 f9 00 00       	call   c0025b26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016201:	83 c4 10             	add    esp,0x10
c0016204:	84 c0                	test   al,al
c0016206:	75 b4                	jne    c00161bc <timerHandler(unsigned long long)+0x4f>
c0016208:	83 ec 0c             	sub    esp,0xc
c001620b:	68 3c c0 02 c0       	push   0xc002c03c
c0016210:	e8 09 f9 00 00       	call   c0025b1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016215:	83 c4 10             	add    esp,0x10
c0016218:	39 d8                	cmp    eax,ebx
c001621a:	74 a0                	je     c00161bc <timerHandler(unsigned long long)+0x4f>
c001621c:	83 ec 0c             	sub    esp,0xc
c001621f:	68 3c c0 02 c0       	push   0xc002c03c
c0016224:	e8 f5 f8 00 00       	call   c0025b1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016229:	c7 04 24 3c c0 02 c0 	mov    DWORD PTR [esp],0xc002c03c
c0016230:	89 c5                	mov    ebp,eax
c0016232:	e8 0b f9 00 00       	call   c0025b42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016237:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001623a:	83 c4 10             	add    esp,0x10
c001623d:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016240:	39 15 b0 b1 02 c0    	cmp    DWORD PTR ds:0xc002b1b0,edx
c0016246:	a1 b4 b1 02 c0       	mov    eax,ds:0xc002b1b4
c001624b:	19 c8                	sbb    eax,ecx
c001624d:	73 83                	jae    c00161d2 <timerHandler(unsigned long long)+0x65>
c001624f:	50                   	push   eax
c0016250:	50                   	push   eax
c0016251:	55                   	push   ebp
c0016252:	68 3c c0 02 c0       	push   0xc002c03c
c0016257:	e8 94 f9 00 00       	call   c0025bf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001625c:	eb 93                	jmp    c00161f1 <timerHandler(unsigned long long)+0x84>
c001625e:	80 3d 4c ab 02 c0 00 	cmp    BYTE PTR ds:0xc002ab4c,0x0
c0016265:	74 29                	je     c0016290 <timerHandler(unsigned long long)+0x123>
c0016267:	39 c6                	cmp    esi,eax
c0016269:	bb 00 00 00 00       	mov    ebx,0x0
c001626e:	19 df                	sbb    edi,ebx
c0016270:	72 19                	jb     c001628b <timerHandler(unsigned long long)+0x11e>
c0016272:	e8 8e 5b 00 00       	call   c001be05 <lockScheduler()>
c0016277:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001627c:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c001627f:	e8 bc 5e 00 00       	call   c001c140 <schedule()>
c0016284:	e8 7e 5b 00 00       	call   c001be07 <unlockScheduler()>
c0016289:	eb 05                	jmp    c0016290 <timerHandler(unsigned long long)+0x123>
c001628b:	29 f0                	sub    eax,esi
c001628d:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016290:	83 c4 0c             	add    esp,0xc
c0016293:	5b                   	pop    ebx
c0016294:	5e                   	pop    esi
c0016295:	5f                   	pop    edi
c0016296:	5d                   	pop    ebp
c0016297:	e9 29 5f 00 00       	jmp    c001c1c5 <unlockStuff()>
c001629c:	83 c4 0c             	add    esp,0xc
c001629f:	5b                   	pop    ebx
c00162a0:	5e                   	pop    esi
c00162a1:	5f                   	pop    edi
c00162a2:	5d                   	pop    ebp
c00162a3:	c3                   	ret    

c00162a4 <setupTimer(int)>:
c00162a4:	57                   	push   edi
c00162a5:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c00162aa:	56                   	push   esi
c00162ab:	53                   	push   ebx
c00162ac:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162b0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00162b6:	83 ec 0c             	sub    esp,0xc
c00162b9:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00162bf:	e8 4c da ff ff       	call   c0013d10 <Device::getName()>
c00162c4:	83 c4 10             	add    esp,0x10
c00162c7:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00162ca:	0f 85 8d 00 00 00    	jne    c001635d <setupTimer(int)+0xb9>
c00162d0:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c00162d5:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00162dc:	74 7f                	je     c001635d <setupTimer(int)+0xb9>
c00162de:	83 ec 0c             	sub    esp,0xc
c00162e1:	68 5c 01 00 00       	push   0x15c
c00162e6:	e8 d7 91 ff ff       	call   c000f4c2 <malloc>
c00162eb:	89 04 24             	mov    DWORD PTR [esp],eax
c00162ee:	89 c3                	mov    ebx,eax
c00162f0:	e8 9d d3 00 00       	call   c0023692 <PIT::PIT()>
c00162f5:	59                   	pop    ecx
c00162f6:	5f                   	pop    edi
c00162f7:	53                   	push   ebx
c00162f8:	ff 35 48 ab 02 c0    	push   DWORD PTR ds:0xc002ab48
c00162fe:	e8 21 d7 ff ff       	call   c0013a24 <Device::addChild(Device*)>
c0016303:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016305:	6a 00                	push   0x0
c0016307:	6a 00                	push   0x0
c0016309:	56                   	push   esi
c001630a:	53                   	push   ebx
c001630b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001630e:	83 c4 14             	add    esp,0x14
c0016311:	68 60 01 00 00       	push   0x160
c0016316:	e8 a7 91 ff ff       	call   c000f4c2 <malloc>
c001631b:	89 04 24             	mov    DWORD PTR [esp],eax
c001631e:	89 c7                	mov    edi,eax
c0016320:	e8 1d d2 00 00       	call   c0023542 <APICTimer::APICTimer()>
c0016325:	6a 00                	push   0x0
c0016327:	6a 00                	push   0x0
c0016329:	56                   	push   esi
c001632a:	57                   	push   edi
c001632b:	e8 14 d1 00 00       	call   c0023444 <APICTimer::open(int, int, void*)>
c0016330:	83 c4 20             	add    esp,0x20
c0016333:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016335:	6a 00                	push   0x0
c0016337:	6a 00                	push   0x0
c0016339:	6a 00                	push   0x0
c001633b:	53                   	push   ebx
c001633c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001633f:	58                   	pop    eax
c0016340:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c0016345:	5a                   	pop    edx
c0016346:	57                   	push   edi
c0016347:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001634d:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016353:	e8 cc d6 ff ff       	call   c0013a24 <Device::addChild(Device*)>
c0016358:	83 c4 10             	add    esp,0x10
c001635b:	eb 33                	jmp    c0016390 <setupTimer(int)+0xec>
c001635d:	83 ec 0c             	sub    esp,0xc
c0016360:	68 5c 01 00 00       	push   0x15c
c0016365:	e8 58 91 ff ff       	call   c000f4c2 <malloc>
c001636a:	89 04 24             	mov    DWORD PTR [esp],eax
c001636d:	89 c3                	mov    ebx,eax
c001636f:	e8 1e d3 00 00       	call   c0023692 <PIT::PIT()>
c0016374:	58                   	pop    eax
c0016375:	5a                   	pop    edx
c0016376:	53                   	push   ebx
c0016377:	ff 35 48 ab 02 c0    	push   DWORD PTR ds:0xc002ab48
c001637d:	e8 a2 d6 ff ff       	call   c0013a24 <Device::addChild(Device*)>
c0016382:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016384:	6a 00                	push   0x0
c0016386:	6a 00                	push   0x0
c0016388:	56                   	push   esi
c0016389:	53                   	push   ebx
c001638a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001638d:	83 c4 20             	add    esp,0x20
c0016390:	89 d8                	mov    eax,ebx
c0016392:	5b                   	pop    ebx
c0016393:	5e                   	pop    esi
c0016394:	5f                   	pop    edi
c0016395:	c3                   	ret    

c0016396 <VCache::VCache(PhysicalDisk*)>:
c0016396:	53                   	push   ebx
c0016397:	83 ec 18             	sub    esp,0x18
c001639a:	ba b8 80 02 c0       	mov    edx,0xc00280b8
c001639f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163a3:	89 10                	mov    DWORD PTR [eax],edx
c00163a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163a9:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00163b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163b4:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00163bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163bf:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00163c6:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00163cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163d1:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00163d8:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00163df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163e3:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00163ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163ee:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00163f2:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00163fa:	83 ec 0c             	sub    esp,0xc
c00163fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016401:	e8 bc 90 ff ff       	call   c000f4c2 <malloc>
c0016406:	83 c4 10             	add    esp,0x10
c0016409:	89 c3                	mov    ebx,eax
c001640b:	83 ec 0c             	sub    esp,0xc
c001640e:	53                   	push   ebx
c001640f:	e8 10 5b 00 00       	call   c001bf24 <Mutex::Mutex()>
c0016414:	83 c4 10             	add    esp,0x10
c0016417:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001641b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001641e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016422:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016426:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016429:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001642d:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016434:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016438:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001643e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016442:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016445:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016449:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001644f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016455:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016459:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001645c:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001645f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016463:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016467:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001646b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016471:	c1 e0 06             	shl    eax,0x6
c0016474:	83 ec 0c             	sub    esp,0xc
c0016477:	50                   	push   eax
c0016478:	e8 45 90 ff ff       	call   c000f4c2 <malloc>
c001647d:	83 c4 10             	add    esp,0x10
c0016480:	89 c2                	mov    edx,eax
c0016482:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016486:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016489:	90                   	nop
c001648a:	83 c4 18             	add    esp,0x18
c001648d:	5b                   	pop    ebx
c001648e:	c3                   	ret    
c001648f:	90                   	nop

c0016490 <VCache::writeWriteBuffer()>:
c0016490:	53                   	push   ebx
c0016491:	83 ec 14             	sub    esp,0x14
c0016494:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016498:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001649b:	8b 10                	mov    edx,DWORD PTR [eax]
c001649d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00164a0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00164a3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00164a6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00164a9:	50                   	push   eax
c00164aa:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00164ad:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00164b4:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00164bb:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00164bf:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00164c6:	83 c4 28             	add    esp,0x28
c00164c9:	5b                   	pop    ebx
c00164ca:	c3                   	ret    
c00164cb:	90                   	nop

c00164cc <VCache::~VCache()>:
c00164cc:	83 ec 0c             	sub    esp,0xc
c00164cf:	ba b8 80 02 c0       	mov    edx,0xc00280b8
c00164d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164d8:	89 10                	mov    DWORD PTR [eax],edx
c00164da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164de:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00164e1:	84 c0                	test   al,al
c00164e3:	74 0f                	je     c00164f4 <VCache::~VCache()+0x28>
c00164e5:	83 ec 0c             	sub    esp,0xc
c00164e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164ec:	e8 9f ff ff ff       	call   c0016490 <VCache::writeWriteBuffer()>
c00164f1:	83 c4 10             	add    esp,0x10
c00164f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164f8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00164fb:	83 ec 0c             	sub    esp,0xc
c00164fe:	50                   	push   eax
c00164ff:	e8 ce 8f ff ff       	call   c000f4d2 <free>
c0016504:	83 c4 10             	add    esp,0x10
c0016507:	90                   	nop
c0016508:	83 c4 0c             	add    esp,0xc
c001650b:	c3                   	ret    

c001650c <VCache::~VCache()>:
c001650c:	83 ec 0c             	sub    esp,0xc
c001650f:	83 ec 0c             	sub    esp,0xc
c0016512:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016516:	e8 b1 ff ff ff       	call   c00164cc <VCache::~VCache()>
c001651b:	83 c4 10             	add    esp,0x10
c001651e:	83 ec 08             	sub    esp,0x8
c0016521:	6a 30                	push   0x30
c0016523:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016527:	e8 29 c0 ff ff       	call   c0012555 <operator delete(void*, unsigned long)>
c001652c:	83 c4 10             	add    esp,0x10
c001652f:	83 c4 0c             	add    esp,0xc
c0016532:	c3                   	ret    
c0016533:	90                   	nop

c0016534 <VCache::write(unsigned long long, int, void*)>:
c0016534:	55                   	push   ebp
c0016535:	57                   	push   edi
c0016536:	56                   	push   esi
c0016537:	53                   	push   ebx
c0016538:	83 ec 28             	sub    esp,0x28
c001653b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001653f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016543:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016547:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001654b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001654e:	e8 33 5e 00 00       	call   c001c386 <Semaphore::acquire()>
c0016553:	83 c4 10             	add    esp,0x10
c0016556:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001655a:	74 66                	je     c00165c2 <VCache::write(unsigned long long, int, void*)+0x8e>
c001655c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001655f:	99                   	cdq    
c0016560:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016564:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016567:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001656a:	89 c1                	mov    ecx,eax
c001656c:	89 d0                	mov    eax,edx
c001656e:	31 f1                	xor    ecx,esi
c0016570:	31 f8                	xor    eax,edi
c0016572:	89 ca                	mov    edx,ecx
c0016574:	09 c2                	or     edx,eax
c0016576:	75 3e                	jne    c00165b6 <VCache::write(unsigned long long, int, void*)+0x82>
c0016578:	83 fd 01             	cmp    ebp,0x1
c001657b:	75 39                	jne    c00165b6 <VCache::write(unsigned long long, int, void*)+0x82>
c001657d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016580:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016586:	51                   	push   ecx
c0016587:	50                   	push   eax
c0016588:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001658c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016590:	0f af c8             	imul   ecx,eax
c0016593:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0016596:	51                   	push   ecx
c0016597:	e8 ab a0 fe ff       	call   c0000647 <memcpy>
c001659c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001659f:	83 c4 10             	add    esp,0x10
c00165a2:	40                   	inc    eax
c00165a3:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00165a6:	83 f8 40             	cmp    eax,0x40
c00165a9:	75 57                	jne    c0016602 <VCache::write(unsigned long long, int, void*)+0xce>
c00165ab:	83 ec 0c             	sub    esp,0xc
c00165ae:	53                   	push   ebx
c00165af:	e8 dc fe ff ff       	call   c0016490 <VCache::writeWriteBuffer()>
c00165b4:	eb 34                	jmp    c00165ea <VCache::write(unsigned long long, int, void*)+0xb6>
c00165b6:	83 ec 0c             	sub    esp,0xc
c00165b9:	53                   	push   ebx
c00165ba:	e8 d1 fe ff ff       	call   c0016490 <VCache::writeWriteBuffer()>
c00165bf:	83 c4 10             	add    esp,0x10
c00165c2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00165c5:	83 fd 3f             	cmp    ebp,0x3f
c00165c8:	7f 25                	jg     c00165ef <VCache::write(unsigned long long, int, void*)+0xbb>
c00165ca:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00165cd:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00165d0:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00165d3:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00165d7:	52                   	push   edx
c00165d8:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00165de:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00165e2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00165e5:	e8 5d a0 fe ff       	call   c0000647 <memcpy>
c00165ea:	83 c4 10             	add    esp,0x10
c00165ed:	eb 13                	jmp    c0016602 <VCache::write(unsigned long long, int, void*)+0xce>
c00165ef:	83 ec 0c             	sub    esp,0xc
c00165f2:	8b 10                	mov    edx,DWORD PTR [eax]
c00165f4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00165f8:	55                   	push   ebp
c00165f9:	57                   	push   edi
c00165fa:	56                   	push   esi
c00165fb:	50                   	push   eax
c00165fc:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00165ff:	83 c4 20             	add    esp,0x20
c0016602:	83 ec 0c             	sub    esp,0xc
c0016605:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016608:	e8 01 63 00 00       	call   c001c90e <Semaphore::release()>
c001660d:	83 c4 2c             	add    esp,0x2c
c0016610:	31 c0                	xor    eax,eax
c0016612:	5b                   	pop    ebx
c0016613:	5e                   	pop    esi
c0016614:	5f                   	pop    edi
c0016615:	5d                   	pop    ebp
c0016616:	c3                   	ret    
c0016617:	90                   	nop

c0016618 <VCache::read(unsigned long long, int, void*)>:
c0016618:	57                   	push   edi
c0016619:	56                   	push   esi
c001661a:	53                   	push   ebx
c001661b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001661f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016623:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016627:	83 ec 0c             	sub    esp,0xc
c001662a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001662d:	e8 54 5d 00 00       	call   c001c386 <Semaphore::acquire()>
c0016632:	83 c4 10             	add    esp,0x10
c0016635:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016639:	74 0c                	je     c0016647 <VCache::read(unsigned long long, int, void*)+0x2f>
c001663b:	83 ec 0c             	sub    esp,0xc
c001663e:	53                   	push   ebx
c001663f:	e8 4c fe ff ff       	call   c0016490 <VCache::writeWriteBuffer()>
c0016644:	83 c4 10             	add    esp,0x10
c0016647:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001664a:	83 ec 0c             	sub    esp,0xc
c001664d:	8b 10                	mov    edx,DWORD PTR [eax]
c001664f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016653:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016657:	57                   	push   edi
c0016658:	56                   	push   esi
c0016659:	50                   	push   eax
c001665a:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001665d:	83 c4 14             	add    esp,0x14
c0016660:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016663:	e8 a6 62 00 00       	call   c001c90e <Semaphore::release()>
c0016668:	83 c4 10             	add    esp,0x10
c001666b:	31 c0                	xor    eax,eax
c001666d:	5b                   	pop    ebx
c001666e:	5e                   	pop    esi
c001666f:	5f                   	pop    edi
c0016670:	c3                   	ret    
c0016671:	90                   	nop

c0016672 <Video::putrect(int, int, int, int, unsigned int)>:
c0016672:	55                   	push   ebp
c0016673:	57                   	push   edi
c0016674:	56                   	push   esi
c0016675:	53                   	push   ebx
c0016676:	83 ec 1c             	sub    esp,0x1c
c0016679:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001667d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016681:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016685:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016689:	01 e8                	add    eax,ebp
c001668b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001668f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016693:	01 df                	add    edi,ebx
c0016695:	39 fb                	cmp    ebx,edi
c0016697:	7d 1b                	jge    c00166b4 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c0016699:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001669d:	7d 12                	jge    c00166b1 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c001669f:	8b 16                	mov    edx,DWORD PTR [esi]
c00166a1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00166a5:	53                   	push   ebx
c00166a6:	55                   	push   ebp
c00166a7:	45                   	inc    ebp
c00166a8:	56                   	push   esi
c00166a9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00166ac:	83 c4 10             	add    esp,0x10
c00166af:	eb e8                	jmp    c0016699 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c00166b1:	43                   	inc    ebx
c00166b2:	eb e1                	jmp    c0016695 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c00166b4:	83 c4 1c             	add    esp,0x1c
c00166b7:	5b                   	pop    ebx
c00166b8:	5e                   	pop    esi
c00166b9:	5f                   	pop    edi
c00166ba:	5d                   	pop    ebp
c00166bb:	c3                   	ret    

c00166bc <Video::blit(unsigned int*, int, int, int, int)>:
c00166bc:	55                   	push   ebp
c00166bd:	57                   	push   edi
c00166be:	56                   	push   esi
c00166bf:	53                   	push   ebx
c00166c0:	83 ec 1c             	sub    esp,0x1c
c00166c3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00166c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00166cb:	85 c0                	test   eax,eax
c00166cd:	79 02                	jns    c00166d1 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00166cf:	31 c0                	xor    eax,eax
c00166d1:	c1 e0 02             	shl    eax,0x2
c00166d4:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00166d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00166dc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00166e0:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00166e4:	39 d8                	cmp    eax,ebx
c00166e6:	7e 49                	jle    c0016731 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00166e8:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00166ee:	7c 41                	jl     c0016731 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00166f0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00166f4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00166f8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00166fc:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016700:	39 f9                	cmp    ecx,edi
c0016702:	7e 22                	jle    c0016726 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016704:	83 c5 04             	add    ebp,0x4
c0016707:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001670d:	7c 14                	jl     c0016723 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001670f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016711:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016714:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016718:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001671c:	56                   	push   esi
c001671d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016720:	83 c4 10             	add    esp,0x10
c0016723:	47                   	inc    edi
c0016724:	eb d2                	jmp    c00166f8 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016726:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001672a:	43                   	inc    ebx
c001672b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001672f:	eb ab                	jmp    c00166dc <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016731:	83 c4 1c             	add    esp,0x1c
c0016734:	5b                   	pop    ebx
c0016735:	5e                   	pop    esi
c0016736:	5f                   	pop    edi
c0016737:	5d                   	pop    ebp
c0016738:	c3                   	ret    
c0016739:	90                   	nop

c001673a <Video::clearScreen(unsigned int)>:
c001673a:	57                   	push   edi
c001673b:	56                   	push   esi
c001673c:	53                   	push   ebx
c001673d:	31 db                	xor    ebx,ebx
c001673f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016743:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016749:	7e 1f                	jle    c001676a <Video::clearScreen(unsigned int)+0x30>
c001674b:	31 ff                	xor    edi,edi
c001674d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016753:	7e 12                	jle    c0016767 <Video::clearScreen(unsigned int)+0x2d>
c0016755:	8b 06                	mov    eax,DWORD PTR [esi]
c0016757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001675b:	53                   	push   ebx
c001675c:	57                   	push   edi
c001675d:	47                   	inc    edi
c001675e:	56                   	push   esi
c001675f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016762:	83 c4 10             	add    esp,0x10
c0016765:	eb e6                	jmp    c001674d <Video::clearScreen(unsigned int)+0x13>
c0016767:	43                   	inc    ebx
c0016768:	eb d9                	jmp    c0016743 <Video::clearScreen(unsigned int)+0x9>
c001676a:	5b                   	pop    ebx
c001676b:	5e                   	pop    esi
c001676c:	5f                   	pop    edi
c001676d:	c3                   	ret    

c001676e <Video::putpixel(int, int, unsigned int)>:
c001676e:	c7 44 24 04 c0 80 02 c0 	mov    DWORD PTR [esp+0x4],0xc00280c0
c0016776:	e9 ba be ff ff       	jmp    c0012635 <Dbg::kprintf(char const*, ...)>
c001677b:	90                   	nop

c001677c <Video::Video(char const*)>:
c001677c:	83 ec 0c             	sub    esp,0xc
c001677f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016783:	83 ec 08             	sub    esp,0x8
c0016786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001678a:	50                   	push   eax
c001678b:	e8 84 d4 ff ff       	call   c0013c14 <Device::Device(char const*)>
c0016790:	83 c4 10             	add    esp,0x10
c0016793:	ba d8 80 02 c0       	mov    edx,0xc00280d8
c0016798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001679c:	89 10                	mov    DWORD PTR [eax],edx
c001679e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167a2:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00167ac:	90                   	nop
c00167ad:	83 c4 0c             	add    esp,0xc
c00167b0:	c3                   	ret    
c00167b1:	90                   	nop

c00167b2 <Video::~Video()>:
c00167b2:	83 ec 0c             	sub    esp,0xc
c00167b5:	ba d8 80 02 c0       	mov    edx,0xc00280d8
c00167ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167be:	89 10                	mov    DWORD PTR [eax],edx
c00167c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167c4:	83 ec 0c             	sub    esp,0xc
c00167c7:	50                   	push   eax
c00167c8:	e8 29 d1 ff ff       	call   c00138f6 <Device::~Device()>
c00167cd:	83 c4 10             	add    esp,0x10
c00167d0:	90                   	nop
c00167d1:	83 c4 0c             	add    esp,0xc
c00167d4:	c3                   	ret    
c00167d5:	90                   	nop

c00167d6 <Video::~Video()>:
c00167d6:	83 ec 0c             	sub    esp,0xc
c00167d9:	83 ec 0c             	sub    esp,0xc
c00167dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167e0:	e8 cd ff ff ff       	call   c00167b2 <Video::~Video()>
c00167e5:	83 c4 10             	add    esp,0x10
c00167e8:	83 ec 08             	sub    esp,0x8
c00167eb:	68 64 01 00 00       	push   0x164
c00167f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167f4:	e8 5c bd ff ff       	call   c0012555 <operator delete(void*, unsigned long)>
c00167f9:	83 c4 10             	add    esp,0x10
c00167fc:	83 c4 0c             	add    esp,0xc
c00167ff:	c3                   	ret    

c0016800 <Video::isMonochrome()>:
c0016800:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016804:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001680a:	c3                   	ret    
c001680b:	90                   	nop

c001680c <Video::getWidth()>:
c001680c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016810:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016816:	c3                   	ret    
c0016817:	90                   	nop

c0016818 <Video::getHeight()>:
c0016818:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001681c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016822:	c3                   	ret    
c0016823:	90                   	nop

c0016824 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016824:	55                   	push   ebp
c0016825:	57                   	push   edi
c0016826:	56                   	push   esi
c0016827:	53                   	push   ebx
c0016828:	83 ec 2c             	sub    esp,0x2c
c001682b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001682f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016833:	83 f8 01             	cmp    eax,0x1
c0016836:	19 c9                	sbb    ecx,ecx
c0016838:	31 db                	xor    ebx,ebx
c001683a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001683e:	89 cd                	mov    ebp,ecx
c0016840:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016848:	f7 d5                	not    ebp
c001684a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016850:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016854:	01 d8                	add    eax,ebx
c0016856:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001685a:	56                   	push   esi
c001685b:	e8 b8 ff ff ff       	call   c0016818 <Video::getHeight()>
c0016860:	59                   	pop    ecx
c0016861:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016865:	7e 70                	jle    c00168d7 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016867:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001686b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001686f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016872:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016876:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001687a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016881:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016885:	89 f8                	mov    eax,edi
c0016887:	83 c0 20             	add    eax,0x20
c001688a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001688e:	56                   	push   esi
c001688f:	e8 78 ff ff ff       	call   c001680c <Video::getWidth()>
c0016894:	5a                   	pop    edx
c0016895:	39 c7                	cmp    edi,eax
c0016897:	7d 34                	jge    c00168cd <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016899:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001689e:	74 05                	je     c00168a5 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00168a0:	8b 06                	mov    eax,DWORD PTR [esi]
c00168a2:	55                   	push   ebp
c00168a3:	eb 0d                	jmp    c00168b2 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00168a5:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00168aa:	74 12                	je     c00168be <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00168ac:	8b 06                	mov    eax,DWORD PTR [esi]
c00168ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00168b2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00168b6:	57                   	push   edi
c00168b7:	56                   	push   esi
c00168b8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00168bb:	83 c4 10             	add    esp,0x10
c00168be:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00168c2:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00168c6:	47                   	inc    edi
c00168c7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00168cb:	75 c1                	jne    c001688e <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00168cd:	43                   	inc    ebx
c00168ce:	83 fb 20             	cmp    ebx,0x20
c00168d1:	0f 85 79 ff ff ff    	jne    c0016850 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00168d7:	83 c4 2c             	add    esp,0x2c
c00168da:	5b                   	pop    ebx
c00168db:	5e                   	pop    esi
c00168dc:	5f                   	pop    edi
c00168dd:	5d                   	pop    ebp
c00168de:	c3                   	ret    
c00168df:	90                   	nop

c00168e0 <ACPI::close(int, int, void*)>:
c00168e0:	83 ec 1c             	sub    esp,0x1c
c00168e3:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00168eb:	74 0a                	je     c00168f7 <ACPI::close(int, int, void*)+0x17>
c00168ed:	b8 00 00 00 00       	mov    eax,0x0
c00168f2:	e9 9a 00 00 00       	jmp    c0016991 <ACPI::close(int, int, void*)+0xb1>
c00168f7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00168fc:	75 37                	jne    c0016935 <ACPI::close(int, int, void*)+0x55>
c00168fe:	83 ec 0c             	sub    esp,0xc
c0016901:	68 10 81 02 c0       	push   0xc0028110
c0016906:	e8 2a bd ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001690b:	83 c4 10             	add    esp,0x10
c001690e:	a1 c8 b1 02 c0       	mov    eax,ds:0xc002b1c8
c0016913:	85 c0                	test   eax,eax
c0016915:	74 07                	je     c001691e <ACPI::close(int, int, void*)+0x3e>
c0016917:	a1 c8 b1 02 c0       	mov    eax,ds:0xc002b1c8
c001691c:	ff d0                	call   eax
c001691e:	83 ec 0c             	sub    esp,0xc
c0016921:	68 c4 81 02 c0       	push   0xc00281c4
c0016926:	e8 ce 24 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c001692b:	83 c4 10             	add    esp,0x10
c001692e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016933:	eb 5c                	jmp    c0016991 <ACPI::close(int, int, void*)+0xb1>
c0016935:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001693a:	75 50                	jne    c001698c <ACPI::close(int, int, void*)+0xac>
c001693c:	a1 c4 b1 02 c0       	mov    eax,ds:0xc002b1c4
c0016941:	85 c0                	test   eax,eax
c0016943:	74 07                	je     c001694c <ACPI::close(int, int, void*)+0x6c>
c0016945:	a1 c4 b1 02 c0       	mov    eax,ds:0xc002b1c4
c001694a:	ff d0                	call   eax
c001694c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016951:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016956:	83 e0 02             	and    eax,0x2
c0016959:	74 1c                	je     c0016977 <ACPI::close(int, int, void*)+0x97>
c001695b:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0016962:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016966:	89 c2                	mov    edx,eax
c0016968:	ec                   	in     al,dx
c0016969:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001696d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0016971:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016975:	eb da                	jmp    c0016951 <ACPI::close(int, int, void*)+0x71>
c0016977:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001697e:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0016983:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0016987:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001698b:	ee                   	out    dx,al
c001698c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016991:	83 c4 1c             	add    esp,0x1c
c0016994:	c3                   	ret    

c0016995 <findRSDP()>:
c0016995:	83 ec 1c             	sub    esp,0x1c
c0016998:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c001699d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00169a3:	83 e0 04             	and    eax,0x4
c00169a6:	84 c0                	test   al,al
c00169a8:	75 07                	jne    c00169b1 <findRSDP()+0x1c>
c00169aa:	b8 00 00 00 00       	mov    eax,0x0
c00169af:	eb 6a                	jmp    c0016a1b <findRSDP()+0x86>
c00169b1:	a1 90 ab 02 c0       	mov    eax,ds:0xc002ab90
c00169b6:	3d ff 07 00 00       	cmp    eax,0x7ff
c00169bb:	7f 1b                	jg     c00169d8 <findRSDP()+0x43>
c00169bd:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c00169c2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00169c8:	83 e2 fb             	and    edx,0xfffffffb
c00169cb:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00169d1:	b8 00 00 00 00       	mov    eax,0x0
c00169d6:	eb 43                	jmp    c0016a1b <findRSDP()+0x86>
c00169d8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00169e0:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00169e8:	77 2c                	ja     c0016a16 <findRSDP()+0x81>
c00169ea:	83 ec 04             	sub    esp,0x4
c00169ed:	6a 08                	push   0x8
c00169ef:	68 1d 81 02 c0       	push   0xc002811d
c00169f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00169f8:	e8 e7 9b fe ff       	call   c00005e4 <memcmp>
c00169fd:	83 c4 10             	add    esp,0x10
c0016a00:	85 c0                	test   eax,eax
c0016a02:	0f 94 c0             	sete   al
c0016a05:	84 c0                	test   al,al
c0016a07:	74 06                	je     c0016a0f <findRSDP()+0x7a>
c0016a09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a0d:	eb 0c                	jmp    c0016a1b <findRSDP()+0x86>
c0016a0f:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0016a14:	eb ca                	jmp    c00169e0 <findRSDP()+0x4b>
c0016a16:	b8 00 00 00 00       	mov    eax,0x0
c0016a1b:	83 c4 1c             	add    esp,0x1c
c0016a1e:	c3                   	ret    

c0016a1f <loadACPITables(unsigned char*)>:
c0016a1f:	56                   	push   esi
c0016a20:	53                   	push   ebx
c0016a21:	83 ec 44             	sub    esp,0x44
c0016a24:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c0016a29:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016a2f:	83 e0 04             	and    eax,0x4
c0016a32:	84 c0                	test   al,al
c0016a34:	0f 84 05 02 00 00    	je     c0016c3f <loadACPITables(unsigned char*)+0x220>
c0016a3a:	a0 e0 b3 02 c0       	mov    al,ds:0xc002b3e0
c0016a3f:	84 c0                	test   al,al
c0016a41:	74 75                	je     c0016ab8 <loadACPITables(unsigned char*)+0x99>
c0016a43:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016a47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016a4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a4f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016a52:	83 e8 24             	sub    eax,0x24
c0016a55:	c1 e8 03             	shr    eax,0x3
c0016a58:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016a5c:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016a64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016a68:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0016a6c:	0f 8d b2 00 00 00    	jge    c0016b24 <loadACPITables(unsigned char*)+0x105>
c0016a72:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016a76:	83 c0 24             	add    eax,0x24
c0016a79:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016a7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016a81:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016a85:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016a89:	c1 e0 03             	shl    eax,0x3
c0016a8c:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0016a90:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016a94:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0016a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0016a99:	89 c1                	mov    ecx,eax
c0016a9b:	a1 cc b1 02 c0       	mov    eax,ds:0xc002b1cc
c0016aa0:	8d 50 01             	lea    edx,[eax+0x1]
c0016aa3:	89 15 cc b1 02 c0    	mov    DWORD PTR ds:0xc002b1cc,edx
c0016aa9:	89 ca                	mov    edx,ecx
c0016aab:	89 14 c5 e4 b1 02 c0 	mov    DWORD PTR [eax*8-0x3ffd4e1c],edx
c0016ab2:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0016ab6:	eb ac                	jmp    c0016a64 <loadACPITables(unsigned char*)+0x45>
c0016ab8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016abc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016ac0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ac4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016ac7:	83 e8 24             	sub    eax,0x24
c0016aca:	c1 e8 02             	shr    eax,0x2
c0016acd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016ad1:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0016ad9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016add:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0016ae1:	7d 41                	jge    c0016b24 <loadACPITables(unsigned char*)+0x105>
c0016ae3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016ae7:	83 c0 24             	add    eax,0x24
c0016aea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016aee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016af2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016af6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016afa:	c1 e0 02             	shl    eax,0x2
c0016afd:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0016b01:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016b05:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016b07:	a1 cc b1 02 c0       	mov    eax,ds:0xc002b1cc
c0016b0c:	8d 50 01             	lea    edx,[eax+0x1]
c0016b0f:	89 15 cc b1 02 c0    	mov    DWORD PTR ds:0xc002b1cc,edx
c0016b15:	89 ca                	mov    edx,ecx
c0016b17:	89 14 c5 e4 b1 02 c0 	mov    DWORD PTR [eax*8-0x3ffd4e1c],edx
c0016b1e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0016b22:	eb b5                	jmp    c0016ad9 <loadACPITables(unsigned char*)+0xba>
c0016b24:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0016b2c:	a1 cc b1 02 c0       	mov    eax,ds:0xc002b1cc
c0016b31:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0016b35:	0f 8d 05 01 00 00    	jge    c0016c40 <loadACPITables(unsigned char*)+0x221>
c0016b3b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016b3f:	8b 04 c5 e4 b1 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd4e1c]
c0016b46:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b56:	25 ff 0f 00 00       	and    eax,0xfff
c0016b5b:	89 c6                	mov    esi,eax
c0016b5d:	e8 73 ac ff ff       	call   c00117d5 <Virt::getAKernelVAS()>
c0016b62:	89 c3                	mov    ebx,eax
c0016b64:	83 ec 0c             	sub    esp,0xc
c0016b67:	6a 01                	push   0x1
c0016b69:	e8 d7 aa ff ff       	call   c0011645 <Virt::allocateKernelVirtualPages(int)>
c0016b6e:	83 c4 10             	add    esp,0x10
c0016b71:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016b75:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016b7b:	83 ec 0c             	sub    esp,0xc
c0016b7e:	6a 01                	push   0x1
c0016b80:	6a 01                	push   0x1
c0016b82:	50                   	push   eax
c0016b83:	52                   	push   edx
c0016b84:	53                   	push   ebx
c0016b85:	e8 7a b4 ff ff       	call   c0012004 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016b8a:	83 c4 20             	add    esp,0x20
c0016b8d:	09 f0                	or     eax,esi
c0016b8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b93:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016b97:	c1 e0 03             	shl    eax,0x3
c0016b9a:	05 e0 b1 02 c0       	add    eax,0xc002b1e0
c0016b9f:	83 ec 04             	sub    esp,0x4
c0016ba2:	6a 04                	push   0x4
c0016ba4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ba8:	50                   	push   eax
c0016ba9:	e8 99 9a fe ff       	call   c0000647 <memcpy>
c0016bae:	83 c4 10             	add    esp,0x10
c0016bb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bb5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016bb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016bbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016bc0:	05 00 10 00 00       	add    eax,0x1000
c0016bc5:	c1 e8 0c             	shr    eax,0xc
c0016bc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bd0:	89 04 24             	mov    DWORD PTR [esp],eax
c0016bd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bd7:	25 ff 0f 00 00       	and    eax,0xfff
c0016bdc:	89 c6                	mov    esi,eax
c0016bde:	e8 f2 ab ff ff       	call   c00117d5 <Virt::getAKernelVAS()>
c0016be3:	89 c3                	mov    ebx,eax
c0016be5:	83 ec 0c             	sub    esp,0xc
c0016be8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016bec:	e8 54 aa ff ff       	call   c0011645 <Virt::allocateKernelVirtualPages(int)>
c0016bf1:	83 c4 10             	add    esp,0x10
c0016bf4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016bf8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016bfe:	83 ec 0c             	sub    esp,0xc
c0016c01:	6a 01                	push   0x1
c0016c03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016c07:	50                   	push   eax
c0016c08:	52                   	push   edx
c0016c09:	53                   	push   ebx
c0016c0a:	e8 f5 b3 ff ff       	call   c0012004 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016c0f:	83 c4 20             	add    esp,0x20
c0016c12:	09 f0                	or     eax,esi
c0016c14:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016c1b:	83 ec 0c             	sub    esp,0xc
c0016c1e:	50                   	push   eax
c0016c1f:	e8 85 ad ff ff       	call   c00119a9 <Virt::freeKernelVirtualPages(unsigned long)>
c0016c24:	83 c4 10             	add    esp,0x10
c0016c27:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016c2b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016c2f:	89 14 c5 e4 b1 02 c0 	mov    DWORD PTR [eax*8-0x3ffd4e1c],edx
c0016c36:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0016c3a:	e9 ed fe ff ff       	jmp    c0016b2c <loadACPITables(unsigned char*)+0x10d>
c0016c3f:	90                   	nop
c0016c40:	83 c4 44             	add    esp,0x44
c0016c43:	5b                   	pop    ebx
c0016c44:	5e                   	pop    esi
c0016c45:	c3                   	ret    

c0016c46 <findRSDT(unsigned char*)>:
c0016c46:	56                   	push   esi
c0016c47:	53                   	push   ebx
c0016c48:	83 ec 44             	sub    esp,0x44
c0016c4b:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c0016c50:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016c56:	83 e0 04             	and    eax,0x4
c0016c59:	84 c0                	test   al,al
c0016c5b:	75 0a                	jne    c0016c67 <findRSDT(unsigned char*)+0x21>
c0016c5d:	b8 00 00 00 00       	mov    eax,0x0
c0016c62:	e9 f7 00 00 00       	jmp    c0016d5e <findRSDT(unsigned char*)+0x118>
c0016c67:	83 ec 04             	sub    esp,0x4
c0016c6a:	6a 24                	push   0x24
c0016c6c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0016c70:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016c74:	50                   	push   eax
c0016c75:	e8 cd 99 fe ff       	call   c0000647 <memcpy>
c0016c7a:	83 c4 10             	add    esp,0x10
c0016c7d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016c81:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0016c85:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016c8d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c91:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016c95:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016c99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c9d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016ca1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ca5:	25 ff 0f 00 00       	and    eax,0xfff
c0016caa:	89 c6                	mov    esi,eax
c0016cac:	e8 24 ab ff ff       	call   c00117d5 <Virt::getAKernelVAS()>
c0016cb1:	89 c3                	mov    ebx,eax
c0016cb3:	83 ec 0c             	sub    esp,0xc
c0016cb6:	6a 02                	push   0x2
c0016cb8:	e8 88 a9 ff ff       	call   c0011645 <Virt::allocateKernelVirtualPages(int)>
c0016cbd:	83 c4 10             	add    esp,0x10
c0016cc0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016cc4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016cca:	83 ec 0c             	sub    esp,0xc
c0016ccd:	6a 01                	push   0x1
c0016ccf:	6a 02                	push   0x2
c0016cd1:	50                   	push   eax
c0016cd2:	52                   	push   edx
c0016cd3:	53                   	push   ebx
c0016cd4:	e8 2b b3 ff ff       	call   c0012004 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016cd9:	83 c4 20             	add    esp,0x20
c0016cdc:	09 f0                	or     eax,esi
c0016cde:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016ce2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ce6:	25 ff 0f 00 00       	and    eax,0xfff
c0016ceb:	89 c6                	mov    esi,eax
c0016ced:	e8 e3 aa ff ff       	call   c00117d5 <Virt::getAKernelVAS()>
c0016cf2:	89 c3                	mov    ebx,eax
c0016cf4:	83 ec 0c             	sub    esp,0xc
c0016cf7:	6a 02                	push   0x2
c0016cf9:	e8 47 a9 ff ff       	call   c0011645 <Virt::allocateKernelVirtualPages(int)>
c0016cfe:	83 c4 10             	add    esp,0x10
c0016d01:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016d05:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016d0b:	83 ec 0c             	sub    esp,0xc
c0016d0e:	6a 01                	push   0x1
c0016d10:	6a 02                	push   0x2
c0016d12:	50                   	push   eax
c0016d13:	52                   	push   edx
c0016d14:	53                   	push   ebx
c0016d15:	e8 ea b2 ff ff       	call   c0012004 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016d1a:	83 c4 20             	add    esp,0x20
c0016d1d:	09 f0                	or     eax,esi
c0016d1f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016d23:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0016d28:	75 11                	jne    c0016d3b <findRSDT(unsigned char*)+0xf5>
c0016d2a:	c6 05 e0 b3 02 c0 00 	mov    BYTE PTR ds:0xc002b3e0,0x0
c0016d31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d35:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016d39:	eb 1f                	jmp    c0016d5a <findRSDT(unsigned char*)+0x114>
c0016d3b:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0016d40:	75 11                	jne    c0016d53 <findRSDT(unsigned char*)+0x10d>
c0016d42:	c6 05 e0 b3 02 c0 01 	mov    BYTE PTR ds:0xc002b3e0,0x1
c0016d49:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016d4d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016d51:	eb 07                	jmp    c0016d5a <findRSDT(unsigned char*)+0x114>
c0016d53:	b8 00 00 00 00       	mov    eax,0x0
c0016d58:	eb 04                	jmp    c0016d5e <findRSDT(unsigned char*)+0x118>
c0016d5a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016d5e:	83 c4 44             	add    esp,0x44
c0016d61:	5b                   	pop    ebx
c0016d62:	5e                   	pop    esi
c0016d63:	c3                   	ret    

c0016d64 <findDataTable(unsigned char*, char*)>:
c0016d64:	83 ec 1c             	sub    esp,0x1c
c0016d67:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c0016d6c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016d72:	83 e0 04             	and    eax,0x4
c0016d75:	84 c0                	test   al,al
c0016d77:	75 07                	jne    c0016d80 <findDataTable(unsigned char*, char*)+0x1c>
c0016d79:	b8 00 00 00 00       	mov    eax,0x0
c0016d7e:	eb 7c                	jmp    c0016dfc <findDataTable(unsigned char*, char*)+0x98>
c0016d80:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016d88:	a1 cc b1 02 c0       	mov    eax,ds:0xc002b1cc
c0016d8d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0016d91:	7d 3a                	jge    c0016dcd <findDataTable(unsigned char*, char*)+0x69>
c0016d93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d97:	c1 e0 03             	shl    eax,0x3
c0016d9a:	05 e0 b1 02 c0       	add    eax,0xc002b1e0
c0016d9f:	83 ec 04             	sub    esp,0x4
c0016da2:	6a 04                	push   0x4
c0016da4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016da8:	50                   	push   eax
c0016da9:	e8 36 98 fe ff       	call   c00005e4 <memcmp>
c0016dae:	83 c4 10             	add    esp,0x10
c0016db1:	85 c0                	test   eax,eax
c0016db3:	0f 94 c0             	sete   al
c0016db6:	84 c0                	test   al,al
c0016db8:	74 0d                	je     c0016dc7 <findDataTable(unsigned char*, char*)+0x63>
c0016dba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016dbe:	8b 04 c5 e4 b1 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd4e1c]
c0016dc5:	eb 35                	jmp    c0016dfc <findDataTable(unsigned char*, char*)+0x98>
c0016dc7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016dcb:	eb bb                	jmp    c0016d88 <findDataTable(unsigned char*, char*)+0x24>
c0016dcd:	a0 e0 b3 02 c0       	mov    al,ds:0xc002b3e0
c0016dd2:	84 c0                	test   al,al
c0016dd4:	74 07                	je     c0016ddd <findDataTable(unsigned char*, char*)+0x79>
c0016dd6:	b8 58 00 00 00       	mov    eax,0x58
c0016ddb:	eb 05                	jmp    c0016de2 <findDataTable(unsigned char*, char*)+0x7e>
c0016ddd:	b8 52 00 00 00       	mov    eax,0x52
c0016de2:	83 ec 04             	sub    esp,0x4
c0016de5:	50                   	push   eax
c0016de6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016dea:	68 e8 81 02 c0       	push   0xc00281e8
c0016def:	e8 41 b8 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0016df4:	83 c4 10             	add    esp,0x10
c0016df7:	b8 00 00 00 00       	mov    eax,0x0
c0016dfc:	83 c4 1c             	add    esp,0x1c
c0016dff:	c3                   	ret    

c0016e00 <scanMADT()>:
c0016e00:	53                   	push   ebx
c0016e01:	83 ec 38             	sub    esp,0x38
c0016e04:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c0016e09:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016e0f:	83 e0 04             	and    eax,0x4
c0016e12:	84 c0                	test   al,al
c0016e14:	0f 84 63 04 00 00    	je     c001727d <scanMADT()+0x47d>
c0016e1a:	e8 76 fb ff ff       	call   c0016995 <findRSDP()>
c0016e1f:	a3 ec b3 02 c0       	mov    ds:0xc002b3ec,eax
c0016e24:	a1 ec b3 02 c0       	mov    eax,ds:0xc002b3ec
c0016e29:	85 c0                	test   eax,eax
c0016e2b:	75 19                	jne    c0016e46 <scanMADT()+0x46>
c0016e2d:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c0016e32:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016e38:	83 e2 fb             	and    edx,0xfffffffb
c0016e3b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016e41:	e9 3b 04 00 00       	jmp    c0017281 <scanMADT()+0x481>
c0016e46:	a1 ec b3 02 c0       	mov    eax,ds:0xc002b3ec
c0016e4b:	83 ec 0c             	sub    esp,0xc
c0016e4e:	50                   	push   eax
c0016e4f:	e8 f2 fd ff ff       	call   c0016c46 <findRSDT(unsigned char*)>
c0016e54:	83 c4 10             	add    esp,0x10
c0016e57:	a3 e8 b3 02 c0       	mov    ds:0xc002b3e8,eax
c0016e5c:	a1 e8 b3 02 c0       	mov    eax,ds:0xc002b3e8
c0016e61:	85 c0                	test   eax,eax
c0016e63:	75 19                	jne    c0016e7e <scanMADT()+0x7e>
c0016e65:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c0016e6a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016e70:	83 e2 fb             	and    edx,0xfffffffb
c0016e73:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016e79:	e9 03 04 00 00       	jmp    c0017281 <scanMADT()+0x481>
c0016e7e:	a1 e8 b3 02 c0       	mov    eax,ds:0xc002b3e8
c0016e83:	83 ec 0c             	sub    esp,0xc
c0016e86:	50                   	push   eax
c0016e87:	e8 93 fb ff ff       	call   c0016a1f <loadACPITables(unsigned char*)>
c0016e8c:	83 c4 10             	add    esp,0x10
c0016e8f:	a1 e8 b3 02 c0       	mov    eax,ds:0xc002b3e8
c0016e94:	83 ec 08             	sub    esp,0x8
c0016e97:	68 26 81 02 c0       	push   0xc0028126
c0016e9c:	50                   	push   eax
c0016e9d:	e8 c2 fe ff ff       	call   c0016d64 <findDataTable(unsigned char*, char*)>
c0016ea2:	83 c4 10             	add    esp,0x10
c0016ea5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016ea9:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0016eae:	75 19                	jne    c0016ec9 <scanMADT()+0xc9>
c0016eb0:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c0016eb5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016ebb:	83 e2 fe             	and    edx,0xfffffffe
c0016ebe:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016ec4:	e9 b8 03 00 00       	jmp    c0017281 <scanMADT()+0x481>
c0016ec9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016ed1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016ed5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016ed8:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0016edc:	0f 87 9f 03 00 00    	ja     c0017281 <scanMADT()+0x481>
c0016ee2:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0016eea:	0f 87 91 03 00 00    	ja     c0017281 <scanMADT()+0x481>
c0016ef0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016ef4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016ef8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016efc:	8d 50 01             	lea    edx,[eax+0x1]
c0016eff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016f03:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016f07:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016f0b:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0016f0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016f13:	8d 50 01             	lea    edx,[eax+0x1]
c0016f16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016f1a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016f1e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016f22:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0016f26:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0016f2b:	0f 86 4f 03 00 00    	jbe    c0017280 <scanMADT()+0x480>
c0016f31:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0016f36:	75 57                	jne    c0016f8f <scanMADT()+0x18f>
c0016f38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016f3c:	8d 50 01             	lea    edx,[eax+0x1]
c0016f3f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016f43:	8a 15 e0 b5 02 c0    	mov    dl,BYTE PTR ds:0xc002b5e0
c0016f49:	0f b6 d2             	movzx  edx,dl
c0016f4c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0016f50:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016f54:	88 82 20 b6 02 c0    	mov    BYTE PTR [edx-0x3ffd49e0],al
c0016f5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016f5e:	8d 50 01             	lea    edx,[eax+0x1]
c0016f61:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016f65:	8a 15 e0 b5 02 c0    	mov    dl,BYTE PTR ds:0xc002b5e0
c0016f6b:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016f6e:	88 0d e0 b5 02 c0    	mov    BYTE PTR ds:0xc002b5e0,cl
c0016f74:	0f b6 d2             	movzx  edx,dl
c0016f77:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0016f7b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016f7f:	88 82 00 b6 02 c0    	mov    BYTE PTR [edx-0x3ffd4a00],al
c0016f85:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0016f8a:	e9 da 02 00 00       	jmp    c0017269 <scanMADT()+0x469>
c0016f8f:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0016f94:	0f 85 14 01 00 00    	jne    c00170ae <scanMADT()+0x2ae>
c0016f9a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016f9e:	8d 50 01             	lea    edx,[eax+0x1]
c0016fa1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016fa5:	8a 15 a0 b4 02 c0    	mov    dl,BYTE PTR ds:0xc002b4a0
c0016fab:	0f b6 d2             	movzx  edx,dl
c0016fae:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0016fb2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016fb6:	88 82 c0 b4 02 c0    	mov    BYTE PTR [edx-0x3ffd4b40],al
c0016fbc:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0016fc0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016fc4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016fc8:	01 d0                	add    eax,edx
c0016fca:	83 c0 2c             	add    eax,0x2c
c0016fcd:	8a 00                	mov    al,BYTE PTR [eax]
c0016fcf:	0f b6 d0             	movzx  edx,al
c0016fd2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016fd6:	8d 48 01             	lea    ecx,[eax+0x1]
c0016fd9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016fdd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016fe1:	0f b6 c0             	movzx  eax,al
c0016fe4:	c1 e0 08             	shl    eax,0x8
c0016fe7:	89 d1                	mov    ecx,edx
c0016fe9:	09 c1                	or     ecx,eax
c0016feb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016fef:	8d 50 02             	lea    edx,[eax+0x2]
c0016ff2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016ff6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016ffa:	0f b6 c0             	movzx  eax,al
c0016ffd:	c1 e0 10             	shl    eax,0x10
c0017000:	09 c1                	or     ecx,eax
c0017002:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017006:	8d 50 03             	lea    edx,[eax+0x3]
c0017009:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001700d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017011:	0f b6 c0             	movzx  eax,al
c0017014:	c1 e0 18             	shl    eax,0x18
c0017017:	09 c1                	or     ecx,eax
c0017019:	89 ca                	mov    edx,ecx
c001701b:	a0 a0 b4 02 c0       	mov    al,ds:0xc002b4a0
c0017020:	0f b6 c0             	movzx  eax,al
c0017023:	89 14 85 e0 b4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4b20],edx
c001702a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001702f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017033:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017037:	01 d0                	add    eax,edx
c0017039:	83 c0 2c             	add    eax,0x2c
c001703c:	8a 00                	mov    al,BYTE PTR [eax]
c001703e:	0f b6 d0             	movzx  edx,al
c0017041:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017045:	8d 48 01             	lea    ecx,[eax+0x1]
c0017048:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001704c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017050:	0f b6 c0             	movzx  eax,al
c0017053:	c1 e0 08             	shl    eax,0x8
c0017056:	89 d1                	mov    ecx,edx
c0017058:	09 c1                	or     ecx,eax
c001705a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001705e:	8d 50 02             	lea    edx,[eax+0x2]
c0017061:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017065:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017069:	0f b6 c0             	movzx  eax,al
c001706c:	c1 e0 10             	shl    eax,0x10
c001706f:	09 c1                	or     ecx,eax
c0017071:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017075:	8d 50 03             	lea    edx,[eax+0x3]
c0017078:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001707c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017080:	0f b6 c0             	movzx  eax,al
c0017083:	c1 e0 18             	shl    eax,0x18
c0017086:	09 c1                	or     ecx,eax
c0017088:	89 ca                	mov    edx,ecx
c001708a:	a0 a0 b4 02 c0       	mov    al,ds:0xc002b4a0
c001708f:	0f b6 c0             	movzx  eax,al
c0017092:	89 14 85 60 b5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4aa0],edx
c0017099:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001709e:	a0 a0 b4 02 c0       	mov    al,ds:0xc002b4a0
c00170a3:	40                   	inc    eax
c00170a4:	a2 a0 b4 02 c0       	mov    ds:0xc002b4a0,al
c00170a9:	e9 bb 01 00 00       	jmp    c0017269 <scanMADT()+0x469>
c00170ae:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00170b3:	0f 85 e9 00 00 00    	jne    c00171a2 <scanMADT()+0x3a2>
c00170b9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00170bd:	8d 50 01             	lea    edx,[eax+0x1]
c00170c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00170c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00170c8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00170cc:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00170d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00170d4:	8d 50 01             	lea    edx,[eax+0x1]
c00170d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00170db:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00170df:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00170e3:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00170e7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00170eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00170ef:	01 d0                	add    eax,edx
c00170f1:	83 c0 2c             	add    eax,0x2c
c00170f4:	8a 00                	mov    al,BYTE PTR [eax]
c00170f6:	0f b6 d0             	movzx  edx,al
c00170f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00170fd:	8d 48 01             	lea    ecx,[eax+0x1]
c0017100:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017104:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017108:	0f b6 c0             	movzx  eax,al
c001710b:	c1 e0 08             	shl    eax,0x8
c001710e:	89 d1                	mov    ecx,edx
c0017110:	09 c1                	or     ecx,eax
c0017112:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017116:	8d 50 02             	lea    edx,[eax+0x2]
c0017119:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001711d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017121:	0f b6 c0             	movzx  eax,al
c0017124:	c1 e0 10             	shl    eax,0x10
c0017127:	09 c1                	or     ecx,eax
c0017129:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001712d:	8d 50 03             	lea    edx,[eax+0x3]
c0017130:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017134:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017138:	0f b6 c0             	movzx  eax,al
c001713b:	c1 e0 18             	shl    eax,0x18
c001713e:	09 c8                	or     eax,ecx
c0017140:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017144:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017149:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001714d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017151:	01 d0                	add    eax,edx
c0017153:	83 c0 2c             	add    eax,0x2c
c0017156:	8a 00                	mov    al,BYTE PTR [eax]
c0017158:	0f b6 c0             	movzx  eax,al
c001715b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001715f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017162:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017166:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001716a:	0f b6 d2             	movzx  edx,dl
c001716d:	c1 e2 08             	shl    edx,0x8
c0017170:	09 d0                	or     eax,edx
c0017172:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017177:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001717c:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017181:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017185:	88 90 20 9e 02 c0    	mov    BYTE PTR [eax-0x3ffd61e0],dl
c001718b:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017190:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017195:	66 89 84 12 80 b4 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd4b80],ax
c001719d:	e9 c7 00 00 00       	jmp    c0017269 <scanMADT()+0x469>
c00171a2:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00171a7:	0f 85 b0 00 00 00    	jne    c001725d <scanMADT()+0x45d>
c00171ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00171b1:	8d 50 01             	lea    edx,[eax+0x1]
c00171b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00171b8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00171bc:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00171c0:	0f b6 c0             	movzx  eax,al
c00171c3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00171c7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00171cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00171cf:	01 d0                	add    eax,edx
c00171d1:	83 c0 2c             	add    eax,0x2c
c00171d4:	8a 00                	mov    al,BYTE PTR [eax]
c00171d6:	0f b6 d0             	movzx  edx,al
c00171d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00171dd:	8d 48 01             	lea    ecx,[eax+0x1]
c00171e0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00171e4:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00171e8:	0f b6 c0             	movzx  eax,al
c00171eb:	c1 e0 08             	shl    eax,0x8
c00171ee:	09 d0                	or     eax,edx
c00171f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00171f4:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00171f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00171fd:	8d 50 01             	lea    edx,[eax+0x1]
c0017200:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017204:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017208:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001720c:	0f b6 c0             	movzx  eax,al
c001720f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017217:	c1 e0 08             	shl    eax,0x8
c001721a:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001721e:	89 c1                	mov    ecx,eax
c0017220:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017224:	c1 e0 18             	shl    eax,0x18
c0017227:	89 c3                	mov    ebx,eax
c0017229:	a1 f0 b3 02 c0       	mov    eax,ds:0xc002b3f0
c001722e:	8d 50 01             	lea    edx,[eax+0x1]
c0017231:	89 15 f0 b3 02 c0    	mov    DWORD PTR ds:0xc002b3f0,edx
c0017237:	09 d9                	or     ecx,ebx
c0017239:	89 ca                	mov    edx,ecx
c001723b:	89 14 85 00 b4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4c00],edx
c0017242:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001724a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001724e:	68 18 82 02 c0       	push   0xc0028218
c0017253:	e8 dd b3 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0017258:	83 c4 10             	add    esp,0x10
c001725b:	eb 0c                	jmp    c0017269 <scanMADT()+0x469>
c001725d:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017262:	75 05                	jne    c0017269 <scanMADT()+0x469>
c0017264:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017269:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001726e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017272:	01 d0                	add    eax,edx
c0017274:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017278:	e9 54 fc ff ff       	jmp    c0016ed1 <scanMADT()+0xd1>
c001727d:	90                   	nop
c001727e:	eb 01                	jmp    c0017281 <scanMADT()+0x481>
c0017280:	90                   	nop
c0017281:	83 c4 38             	add    esp,0x38
c0017284:	5b                   	pop    ebx
c0017285:	c3                   	ret    

c0017286 <ACPI::ACPI()>:
c0017286:	83 ec 0c             	sub    esp,0xc
c0017289:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001728d:	83 ec 08             	sub    esp,0x8
c0017290:	68 2b 81 02 c0       	push   0xc002812b
c0017295:	50                   	push   eax
c0017296:	e8 79 c9 ff ff       	call   c0013c14 <Device::Device(char const*)>
c001729b:	83 c4 10             	add    esp,0x10
c001729e:	ba f0 82 02 c0       	mov    edx,0xc00282f0
c00172a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00172a7:	89 10                	mov    DWORD PTR [eax],edx
c00172a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00172ad:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00172b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00172b8:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c00172c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00172c6:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c00172d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00172d4:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c00172db:	e8 20 fb ff ff       	call   c0016e00 <scanMADT()>
c00172e0:	90                   	nop
c00172e1:	83 c4 0c             	add    esp,0xc
c00172e4:	c3                   	ret    
c00172e5:	90                   	nop

c00172e6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00172e6:	83 ec 2c             	sub    esp,0x2c
c00172e9:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00172ed:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00172f1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00172f5:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00172f9:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00172fe:	88 d0                	mov    al,dl
c0017300:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017304:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017309:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017311:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017315:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001731b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001731f:	0f 8d 97 00 00 00    	jge    c00173bc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017325:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017329:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001732d:	83 c2 2a             	add    edx,0x2a
c0017330:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017334:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017339:	75 78                	jne    c00173b3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001733b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001733f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017343:	83 c2 2a             	add    edx,0x2a
c0017346:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001734a:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001734e:	75 63                	jne    c00173b3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017350:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017355:	74 3a                	je     c0017391 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017357:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001735b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001735f:	83 c2 2a             	add    edx,0x2a
c0017362:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017366:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001736a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001736d:	39 c2                	cmp    edx,eax
c001736f:	74 10                	je     c0017381 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017371:	83 ec 0c             	sub    esp,0xc
c0017374:	68 54 82 02 c0       	push   0xc0028254
c0017379:	e8 7b 1a 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c001737e:	83 c4 10             	add    esp,0x10
c0017381:	83 ec 0c             	sub    esp,0xc
c0017384:	68 30 81 02 c0       	push   0xc0028130
c0017389:	e8 6b 1a 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c001738e:	83 c4 10             	add    esp,0x10
c0017391:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017395:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017399:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001739d:	83 c2 2a             	add    edx,0x2a
c00173a0:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00173a4:	8b 02                	mov    eax,DWORD PTR [edx]
c00173a6:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00173a9:	89 01                	mov    DWORD PTR [ecx],eax
c00173ab:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00173ae:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00173b3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00173b7:	e9 55 ff ff ff       	jmp    c0017311 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00173bc:	90                   	nop
c00173bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173c1:	83 c4 2c             	add    esp,0x2c
c00173c4:	c2 04 00             	ret    0x4
c00173c7:	90                   	nop

c00173c8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00173c8:	56                   	push   esi
c00173c9:	53                   	push   ebx
c00173ca:	83 ec 14             	sub    esp,0x14
c00173cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173d1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00173d5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00173d9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00173de:	88 c8                	mov    al,cl
c00173e0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00173e4:	88 d0                	mov    al,dl
c00173e6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00173ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173ee:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c00173f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173f8:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c00173fe:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0017403:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0017408:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001740d:	83 ec 04             	sub    esp,0x4
c0017410:	56                   	push   esi
c0017411:	53                   	push   ebx
c0017412:	51                   	push   ecx
c0017413:	52                   	push   edx
c0017414:	50                   	push   eax
c0017415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017419:	68 84 82 02 c0       	push   0xc0028284
c001741e:	e8 12 b2 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0017423:	83 c4 20             	add    esp,0x20
c0017426:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001742a:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017430:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017434:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017437:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001743b:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001743f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017443:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017449:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001744d:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017450:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017454:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017459:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001745d:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017463:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017467:	8d 48 01             	lea    ecx,[eax+0x1]
c001746a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001746e:	83 c2 2a             	add    edx,0x2a
c0017471:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017475:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017479:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001747f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017483:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017486:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001748a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001748e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017492:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017498:	8d 50 01             	lea    edx,[eax+0x1]
c001749b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001749f:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c00174a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174a9:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00174af:	3d 00 08 00 00       	cmp    eax,0x800
c00174b4:	75 10                	jne    c00174c6 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c00174b6:	83 ec 0c             	sub    esp,0xc
c00174b9:	68 3f 81 02 c0       	push   0xc002813f
c00174be:	e8 36 19 00 00       	call   c0018df9 <Krnl::panic(char const*)>
c00174c3:	83 c4 10             	add    esp,0x10
c00174c6:	90                   	nop
c00174c7:	83 c4 14             	add    esp,0x14
c00174ca:	5b                   	pop    ebx
c00174cb:	5e                   	pop    esi
c00174cc:	c3                   	ret    
c00174cd:	90                   	nop

c00174ce <ACPI::setScreenBrightnessLevel(void*, int)>:
c00174ce:	b8 00 00 00 00       	mov    eax,0x0
c00174d3:	c3                   	ret    

c00174d4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00174d4:	83 ec 1c             	sub    esp,0x1c
c00174d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00174db:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00174de:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00174e2:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c00174e7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00174ec:	83 ec 08             	sub    esp,0x8
c00174ef:	52                   	push   edx
c00174f0:	50                   	push   eax
c00174f1:	e8 e4 75 ff ff       	call   c000eada <Computer::readCMOS(unsigned char)>
c00174f6:	83 c4 10             	add    esp,0x10
c00174f9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00174fd:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c0017502:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017507:	83 ec 04             	sub    esp,0x4
c001750a:	6a 01                	push   0x1
c001750c:	52                   	push   edx
c001750d:	50                   	push   eax
c001750e:	e8 dd 76 ff ff       	call   c000ebf0 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017513:	83 c4 10             	add    esp,0x10
c0017516:	90                   	nop
c0017517:	83 c4 1c             	add    esp,0x1c
c001751a:	c3                   	ret    
c001751b:	90                   	nop

c001751c <ACPI::open(int, int, void*)>:
c001751c:	53                   	push   ebx
c001751d:	83 ec 28             	sub    esp,0x28
c0017520:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017524:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c001752b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001752f:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0017535:	84 c0                	test   al,al
c0017537:	74 67                	je     c00175a0 <ACPI::open(int, int, void*)+0x84>
c0017539:	c7 44 24 10 58 01 00 00 	mov    DWORD PTR [esp+0x10],0x158
c0017541:	83 ec 0c             	sub    esp,0xc
c0017544:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017548:	e8 75 7f ff ff       	call   c000f4c2 <malloc>
c001754d:	83 c4 10             	add    esp,0x10
c0017550:	89 c3                	mov    ebx,eax
c0017552:	83 ec 0c             	sub    esp,0xc
c0017555:	53                   	push   ebx
c0017556:	e8 83 91 00 00       	call   c00206de <PCI::PCI()>
c001755b:	83 c4 10             	add    esp,0x10
c001755e:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0017562:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017566:	83 ec 08             	sub    esp,0x8
c0017569:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001756d:	50                   	push   eax
c001756e:	e8 b1 c4 ff ff       	call   c0013a24 <Device::addChild(Device*)>
c0017573:	83 c4 10             	add    esp,0x10
c0017576:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001757a:	8b 00                	mov    eax,DWORD PTR [eax]
c001757c:	83 c0 08             	add    eax,0x8
c001757f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017581:	6a 00                	push   0x0
c0017583:	6a 00                	push   0x0
c0017585:	6a 00                	push   0x0
c0017587:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001758b:	ff d0                	call   eax
c001758d:	83 c4 10             	add    esp,0x10
c0017590:	83 ec 0c             	sub    esp,0xc
c0017593:	68 5c 81 02 c0       	push   0xc002815c
c0017598:	e8 98 b0 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001759d:	83 c4 10             	add    esp,0x10
c00175a0:	83 ec 0c             	sub    esp,0xc
c00175a3:	68 67 81 02 c0       	push   0xc0028167
c00175a8:	e8 5b 37 00 00       	call   c001ad08 <Thr::loadKernelSymbolTable(char const*)>
c00175ad:	83 c4 10             	add    esp,0x10
c00175b0:	8b 1d 48 ab 02 c0    	mov    ebx,DWORD PTR ds:0xc002ab48
c00175b6:	83 ec 08             	sub    esp,0x8
c00175b9:	6a 01                	push   0x1
c00175bb:	68 85 81 02 c0       	push   0xc0028185
c00175c0:	e8 03 42 00 00       	call   c001b7c8 <Thr::loadDLL(char const*, bool)>
c00175c5:	83 c4 10             	add    esp,0x10
c00175c8:	83 ec 08             	sub    esp,0x8
c00175cb:	53                   	push   ebx
c00175cc:	50                   	push   eax
c00175cd:	e8 05 44 00 00       	call   c001b9d7 <Thr::executeDLL(unsigned long, void*)>
c00175d2:	83 c4 10             	add    esp,0x10
c00175d5:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c00175da:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00175e0:	83 e0 04             	and    eax,0x4
c00175e3:	84 c0                	test   al,al
c00175e5:	0f 84 d6 00 00 00    	je     c00176c1 <ACPI::open(int, int, void*)+0x1a5>
c00175eb:	c7 44 24 0c 14 01 00 00 	mov    DWORD PTR [esp+0xc],0x114
c00175f3:	83 ec 0c             	sub    esp,0xc
c00175f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00175fa:	e8 c3 7e ff ff       	call   c000f4c2 <malloc>
c00175ff:	83 c4 10             	add    esp,0x10
c0017602:	89 c3                	mov    ebx,eax
c0017604:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0017609:	83 ec 04             	sub    esp,0x4
c001760c:	50                   	push   eax
c001760d:	68 a2 81 02 c0       	push   0xc00281a2
c0017612:	53                   	push   ebx
c0017613:	e8 4c b5 ff ff       	call   c0012b64 <File::File(char const*, Process*)>
c0017618:	83 c4 10             	add    esp,0x10
c001761b:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001761f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017624:	74 17                	je     c001763d <ACPI::open(int, int, void*)+0x121>
c0017626:	83 ec 0c             	sub    esp,0xc
c0017629:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001762d:	e8 04 b8 ff ff       	call   c0012e36 <File::exists()>
c0017632:	83 c4 10             	add    esp,0x10
c0017635:	84 c0                	test   al,al
c0017637:	74 04                	je     c001763d <ACPI::open(int, int, void*)+0x121>
c0017639:	b0 01                	mov    al,0x1
c001763b:	eb 02                	jmp    c001763f <ACPI::open(int, int, void*)+0x123>
c001763d:	b0 00                	mov    al,0x0
c001763f:	84 c0                	test   al,al
c0017641:	74 25                	je     c0017668 <ACPI::open(int, int, void*)+0x14c>
c0017643:	8b 1d 48 ab 02 c0    	mov    ebx,DWORD PTR ds:0xc002ab48
c0017649:	83 ec 08             	sub    esp,0x8
c001764c:	6a 01                	push   0x1
c001764e:	68 a2 81 02 c0       	push   0xc00281a2
c0017653:	e8 70 41 00 00       	call   c001b7c8 <Thr::loadDLL(char const*, bool)>
c0017658:	83 c4 10             	add    esp,0x10
c001765b:	83 ec 08             	sub    esp,0x8
c001765e:	53                   	push   ebx
c001765f:	50                   	push   eax
c0017660:	e8 72 43 00 00       	call   c001b9d7 <Thr::executeDLL(unsigned long, void*)>
c0017665:	83 c4 10             	add    esp,0x10
c0017668:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001766d:	74 1e                	je     c001768d <ACPI::open(int, int, void*)+0x171>
c001766f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017674:	74 17                	je     c001768d <ACPI::open(int, int, void*)+0x171>
c0017676:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001767a:	8b 00                	mov    eax,DWORD PTR [eax]
c001767c:	83 c0 08             	add    eax,0x8
c001767f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017681:	83 ec 0c             	sub    esp,0xc
c0017684:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017688:	ff d0                	call   eax
c001768a:	83 c4 10             	add    esp,0x10
c001768d:	a1 e8 b3 02 c0       	mov    eax,ds:0xc002b3e8
c0017692:	83 ec 08             	sub    esp,0x8
c0017695:	68 bf 81 02 c0       	push   0xc00281bf
c001769a:	50                   	push   eax
c001769b:	e8 c4 f6 ff ff       	call   c0016d64 <findDataTable(unsigned char*, char*)>
c00176a0:	83 c4 10             	add    esp,0x10
c00176a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00176a7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00176ac:	74 13                	je     c00176c1 <ACPI::open(int, int, void*)+0x1a5>
c00176ae:	83 ec 08             	sub    esp,0x8
c00176b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00176b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00176b9:	e8 16 fe ff ff       	call   c00174d4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00176be:	83 c4 10             	add    esp,0x10
c00176c1:	b8 00 00 00 00       	mov    eax,0x0
c00176c6:	83 c4 28             	add    esp,0x28
c00176c9:	5b                   	pop    ebx
c00176ca:	c3                   	ret    
c00176cb:	90                   	nop

c00176cc <ACPI::sleep()>:
c00176cc:	83 ec 0c             	sub    esp,0xc
c00176cf:	a1 c0 b1 02 c0       	mov    eax,ds:0xc002b1c0
c00176d4:	85 c0                	test   eax,eax
c00176d6:	74 07                	je     c00176df <ACPI::sleep()+0x13>
c00176d8:	a1 c0 b1 02 c0       	mov    eax,ds:0xc002b1c0
c00176dd:	ff d0                	call   eax
c00176df:	90                   	nop
c00176e0:	83 c4 0c             	add    esp,0xc
c00176e3:	c3                   	ret    

c00176e4 <CPU::close(int, int, void*)>:
c00176e4:	31 c0                	xor    eax,eax
c00176e6:	c3                   	ret    
c00176e7:	90                   	nop

c00176e8 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00176e8:	55                   	push   ebp
c00176e9:	57                   	push   edi
c00176ea:	56                   	push   esi
c00176eb:	53                   	push   ebx
c00176ec:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00176f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00176f4:	89 ce                	mov    esi,ecx
c00176f6:	89 d5                	mov    ebp,edx
c00176f8:	80 f9 04             	cmp    cl,0x4
c00176fb:	75 28                	jne    c0017725 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00176fd:	8d 42 f9             	lea    eax,[edx-0x7]
c0017700:	3c 03                	cmp    al,0x3
c0017702:	0f 86 63 01 00 00    	jbe    c001786b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017708:	80 fa 03             	cmp    dl,0x3
c001770b:	0f 84 5a 01 00 00    	je     c001786b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017711:	8d 7a f2             	lea    edi,[edx-0xe]
c0017714:	b8 f0 9f 02 c0       	mov    eax,0xc0029ff0
c0017719:	89 fb                	mov    ebx,edi
c001771b:	80 fb 01             	cmp    bl,0x1
c001771e:	77 4e                	ja     c001776e <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0017720:	e9 52 01 00 00       	jmp    c0017877 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017725:	80 f9 05             	cmp    cl,0x5
c0017728:	75 4d                	jne    c0017777 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001772a:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c001772f:	80 fa 03             	cmp    dl,0x3
c0017732:	0f 86 3f 01 00 00    	jbe    c0017877 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017738:	8d 7a fa             	lea    edi,[edx-0x6]
c001773b:	b8 10 a0 02 c0       	mov    eax,0xc002a010
c0017740:	89 fb                	mov    ebx,edi
c0017742:	80 fb 01             	cmp    bl,0x1
c0017745:	0f 86 2c 01 00 00    	jbe    c0017877 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001774b:	b8 20 a0 02 c0       	mov    eax,0xc002a020
c0017750:	80 fa 08             	cmp    dl,0x8
c0017753:	0f 84 1e 01 00 00    	je     c0017877 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017759:	89 d7                	mov    edi,edx
c001775b:	b8 30 a0 02 c0       	mov    eax,0xc002a030
c0017760:	83 e7 fb             	and    edi,0xfffffffb
c0017763:	89 fb                	mov    ebx,edi
c0017765:	80 fb 09             	cmp    bl,0x9
c0017768:	0f 84 09 01 00 00    	je     c0017877 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001776e:	31 c0                	xor    eax,eax
c0017770:	89 eb                	mov    ebx,ebp
c0017772:	0f b6 fb             	movzx  edi,bl
c0017775:	eb 30                	jmp    c00177a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0017777:	31 c0                	xor    eax,eax
c0017779:	80 f9 06             	cmp    cl,0x6
c001777c:	75 f2                	jne    c0017770 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001777e:	80 fa 0a             	cmp    dl,0xa
c0017781:	77 ed                	ja     c0017770 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017783:	bf de 05 00 00       	mov    edi,0x5de
c0017788:	0f a3 d7             	bt     edi,edx
c001778b:	73 e3                	jae    c0017770 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001778d:	b8 40 a0 02 c0       	mov    eax,0xc002a040
c0017792:	e9 e0 00 00 00       	jmp    c0017877 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017797:	39 c7                	cmp    edi,eax
c0017799:	0f 84 d3 00 00 00    	je     c0017872 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001779f:	40                   	inc    eax
c00177a0:	3d d0 00 00 00       	cmp    eax,0xd0
c00177a5:	74 09                	je     c00177b0 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00177a7:	89 f3                	mov    ebx,esi
c00177a9:	80 fb 0f             	cmp    bl,0xf
c00177ac:	75 f1                	jne    c001779f <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00177ae:	eb e7                	jmp    c0017797 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00177b0:	80 f9 10             	cmp    cl,0x10
c00177b3:	75 14                	jne    c00177c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00177b5:	8d 42 fc             	lea    eax,[edx-0x4]
c00177b8:	83 e0 fb             	and    eax,0xfffffffb
c00177bb:	3c 02                	cmp    al,0x2
c00177bd:	76 34                	jbe    c00177f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00177bf:	b8 06 86 02 c0       	mov    eax,0xc0028606
c00177c4:	80 fa 02             	cmp    dl,0x2
c00177c7:	eb 24                	jmp    c00177ed <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00177c9:	80 f9 11             	cmp    cl,0x11
c00177cc:	75 13                	jne    c00177e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00177ce:	b8 06 86 02 c0       	mov    eax,0xc0028606
c00177d3:	80 fa 03             	cmp    dl,0x3
c00177d6:	0f 85 9b 00 00 00    	jne    c0017877 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00177dc:	e9 91 00 00 00       	jmp    c0017872 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00177e1:	80 f9 12             	cmp    cl,0x12
c00177e4:	75 14                	jne    c00177fa <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00177e6:	b8 06 86 02 c0       	mov    eax,0xc0028606
c00177eb:	fe ca                	dec    dl
c00177ed:	0f 85 84 00 00 00    	jne    c0017877 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00177f3:	b8 60 a0 02 c0       	mov    eax,0xc002a060
c00177f8:	eb 7d                	jmp    c0017877 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00177fa:	80 f9 14             	cmp    cl,0x14
c00177fd:	75 12                	jne    c0017811 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00177ff:	4a                   	dec    edx
c0017800:	b8 06 86 02 c0       	mov    eax,0xc0028606
c0017805:	80 fa 01             	cmp    dl,0x1
c0017808:	77 6d                	ja     c0017877 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001780a:	b8 70 a0 02 c0       	mov    eax,0xc002a070
c001780f:	eb 66                	jmp    c0017877 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017811:	80 f9 15             	cmp    cl,0x15
c0017814:	75 31                	jne    c0017847 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0017816:	b8 80 a0 02 c0       	mov    eax,0xc002a080
c001781b:	80 fa 01             	cmp    dl,0x1
c001781e:	74 57                	je     c0017877 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017820:	b8 06 86 02 c0       	mov    eax,0xc0028606
c0017825:	80 fa 13             	cmp    dl,0x13
c0017828:	76 0c                	jbe    c0017836 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001782a:	80 fa 30             	cmp    dl,0x30
c001782d:	75 48                	jne    c0017877 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001782f:	b8 a0 a0 02 c0       	mov    eax,0xc002a0a0
c0017834:	eb 41                	jmp    c0017877 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017836:	b9 04 00 09 00       	mov    ecx,0x90004
c001783b:	0f a3 d1             	bt     ecx,edx
c001783e:	73 37                	jae    c0017877 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017840:	b8 90 a0 02 c0       	mov    eax,0xc002a090
c0017845:	eb 30                	jmp    c0017877 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017847:	b8 06 86 02 c0       	mov    eax,0xc0028606
c001784c:	80 f9 16             	cmp    cl,0x16
c001784f:	75 26                	jne    c0017877 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017851:	b8 b0 a0 02 c0       	mov    eax,0xc002a0b0
c0017856:	84 d2                	test   dl,dl
c0017858:	74 1d                	je     c0017877 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001785a:	b8 06 86 02 c0       	mov    eax,0xc0028606
c001785f:	80 fa 30             	cmp    dl,0x30
c0017862:	75 13                	jne    c0017877 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017864:	b8 c0 a0 02 c0       	mov    eax,0xc002a0c0
c0017869:	eb 0c                	jmp    c0017877 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001786b:	b8 e0 9f 02 c0       	mov    eax,0xc0029fe0
c0017870:	eb 05                	jmp    c0017877 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017872:	b8 50 a0 02 c0       	mov    eax,0xc002a050
c0017877:	5b                   	pop    ebx
c0017878:	5e                   	pop    esi
c0017879:	5f                   	pop    edi
c001787a:	5d                   	pop    ebp
c001787b:	c3                   	ret    

c001787c <CPU::lookupIntelName(unsigned char, unsigned char)>:
c001787c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017880:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017884:	80 f9 04             	cmp    cl,0x4
c0017887:	75 6b                	jne    c00178f4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0017889:	b8 40 9e 02 c0       	mov    eax,0xc0029e40
c001788e:	80 fa 01             	cmp    dl,0x1
c0017891:	0f 86 92 02 00 00    	jbe    c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017897:	b8 50 9e 02 c0       	mov    eax,0xc0029e50
c001789c:	80 fa 02             	cmp    dl,0x2
c001789f:	0f 84 84 02 00 00    	je     c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00178a5:	b8 60 9e 02 c0       	mov    eax,0xc0029e60
c00178aa:	80 fa 03             	cmp    dl,0x3
c00178ad:	0f 84 76 02 00 00    	je     c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00178b3:	b8 70 9e 02 c0       	mov    eax,0xc0029e70
c00178b8:	80 fa 04             	cmp    dl,0x4
c00178bb:	0f 84 68 02 00 00    	je     c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00178c1:	b8 80 9e 02 c0       	mov    eax,0xc0029e80
c00178c6:	80 fa 05             	cmp    dl,0x5
c00178c9:	0f 84 5a 02 00 00    	je     c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00178cf:	b8 60 9e 02 c0       	mov    eax,0xc0029e60
c00178d4:	80 fa 07             	cmp    dl,0x7
c00178d7:	0f 84 4c 02 00 00    	je     c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00178dd:	83 ea 08             	sub    edx,0x8
c00178e0:	b8 06 86 02 c0       	mov    eax,0xc0028606
c00178e5:	80 fa 01             	cmp    dl,0x1
c00178e8:	0f 87 3b 02 00 00    	ja     c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00178ee:	b8 90 9e 02 c0       	mov    eax,0xc0029e90
c00178f3:	c3                   	ret    
c00178f4:	80 f9 05             	cmp    cl,0x5
c00178f7:	75 45                	jne    c001793e <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00178f9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00178fc:	b8 a0 9e 02 c0       	mov    eax,0xc0029ea0
c0017901:	80 f9 02             	cmp    cl,0x2
c0017904:	0f 86 1f 02 00 00    	jbe    c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001790a:	80 fa 04             	cmp    dl,0x4
c001790d:	0f 84 f3 01 00 00    	je     c0017b06 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0017913:	80 fa 07             	cmp    dl,0x7
c0017916:	0f 84 0d 02 00 00    	je     c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001791c:	b8 b0 9e 02 c0       	mov    eax,0xc0029eb0
c0017921:	80 fa 08             	cmp    dl,0x8
c0017924:	0f 84 ff 01 00 00    	je     c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001792a:	b8 06 86 02 c0       	mov    eax,0xc0028606
c001792f:	80 fa 09             	cmp    dl,0x9
c0017932:	0f 85 f1 01 00 00    	jne    c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017938:	b8 c0 9e 02 c0       	mov    eax,0xc0029ec0
c001793d:	c3                   	ret    
c001793e:	80 f9 06             	cmp    cl,0x6
c0017941:	0f 85 85 01 00 00    	jne    c0017acc <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0017947:	b8 d0 9e 02 c0       	mov    eax,0xc0029ed0
c001794c:	80 fa 01             	cmp    dl,0x1
c001794f:	0f 84 d4 01 00 00    	je     c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017955:	8d 42 fb             	lea    eax,[edx-0x5]
c0017958:	3c 01                	cmp    al,0x1
c001795a:	0f 86 ac 01 00 00    	jbe    c0017b0c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017960:	80 fa 03             	cmp    dl,0x3
c0017963:	0f 84 a3 01 00 00    	je     c0017b0c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017969:	8d 4a f9             	lea    ecx,[edx-0x7]
c001796c:	b8 f0 9e 02 c0       	mov    eax,0xc0029ef0
c0017971:	80 f9 01             	cmp    cl,0x1
c0017974:	0f 86 af 01 00 00    	jbe    c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001797a:	80 fa 09             	cmp    dl,0x9
c001797d:	0f 84 8f 01 00 00    	je     c0017b12 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0017983:	8d 4a f6             	lea    ecx,[edx-0xa]
c0017986:	80 f9 01             	cmp    cl,0x1
c0017989:	0f 86 9a 01 00 00    	jbe    c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001798f:	b8 00 9f 02 c0       	mov    eax,0xc0029f00
c0017994:	80 fa 0d             	cmp    dl,0xd
c0017997:	0f 84 8c 01 00 00    	je     c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001799d:	b8 10 9f 02 c0       	mov    eax,0xc0029f10
c00179a2:	80 fa 0e             	cmp    dl,0xe
c00179a5:	0f 84 7e 01 00 00    	je     c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00179ab:	b8 20 9f 02 c0       	mov    eax,0xc0029f20
c00179b0:	80 fa 0f             	cmp    dl,0xf
c00179b3:	0f 84 70 01 00 00    	je     c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00179b9:	b8 00 9f 02 c0       	mov    eax,0xc0029f00
c00179be:	80 fa 15             	cmp    dl,0x15
c00179c1:	0f 84 62 01 00 00    	je     c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00179c7:	8d 4a ea             	lea    ecx,[edx-0x16]
c00179ca:	b8 20 9f 02 c0       	mov    eax,0xc0029f20
c00179cf:	80 f9 01             	cmp    cl,0x1
c00179d2:	0f 86 51 01 00 00    	jbe    c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00179d8:	80 fa 1a             	cmp    dl,0x1a
c00179db:	0f 84 37 01 00 00    	je     c0017b18 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00179e1:	80 fa 1c             	cmp    dl,0x1c
c00179e4:	0f 84 34 01 00 00    	je     c0017b1e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00179ea:	80 fa 1d             	cmp    dl,0x1d
c00179ed:	0f 84 36 01 00 00    	je     c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00179f3:	b8 50 9f 02 c0       	mov    eax,0xc0029f50
c00179f8:	80 fa 25             	cmp    dl,0x25
c00179fb:	0f 84 28 01 00 00    	je     c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a01:	8d 4a da             	lea    ecx,[edx-0x26]
c0017a04:	b8 40 9f 02 c0       	mov    eax,0xc0029f40
c0017a09:	80 f9 01             	cmp    cl,0x1
c0017a0c:	0f 86 17 01 00 00    	jbe    c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a12:	b8 60 9f 02 c0       	mov    eax,0xc0029f60
c0017a17:	80 fa 2a             	cmp    dl,0x2a
c0017a1a:	0f 84 09 01 00 00    	je     c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a20:	b8 50 9f 02 c0       	mov    eax,0xc0029f50
c0017a25:	80 fa 2c             	cmp    dl,0x2c
c0017a28:	0f 84 fb 00 00 00    	je     c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a2e:	b8 60 9f 02 c0       	mov    eax,0xc0029f60
c0017a33:	80 fa 2d             	cmp    dl,0x2d
c0017a36:	0f 84 ed 00 00 00    	je     c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a3c:	b8 30 9f 02 c0       	mov    eax,0xc0029f30
c0017a41:	80 fa 2e             	cmp    dl,0x2e
c0017a44:	0f 84 df 00 00 00    	je     c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a4a:	b8 50 9f 02 c0       	mov    eax,0xc0029f50
c0017a4f:	80 fa 2f             	cmp    dl,0x2f
c0017a52:	0f 84 d1 00 00 00    	je     c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a58:	8d 4a cb             	lea    ecx,[edx-0x35]
c0017a5b:	b8 40 9f 02 c0       	mov    eax,0xc0029f40
c0017a60:	80 f9 01             	cmp    cl,0x1
c0017a63:	0f 86 c0 00 00 00    	jbe    c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a69:	b8 70 9f 02 c0       	mov    eax,0xc0029f70
c0017a6e:	80 fa 37             	cmp    dl,0x37
c0017a71:	0f 84 b2 00 00 00    	je     c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a77:	b8 80 9f 02 c0       	mov    eax,0xc0029f80
c0017a7c:	80 fa 3a             	cmp    dl,0x3a
c0017a7f:	0f 84 a4 00 00 00    	je     c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a85:	b8 90 9f 02 c0       	mov    eax,0xc0029f90
c0017a8a:	80 fa 3c             	cmp    dl,0x3c
c0017a8d:	0f 84 96 00 00 00    	je     c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a93:	b8 a0 9f 02 c0       	mov    eax,0xc0029fa0
c0017a98:	80 fa 3d             	cmp    dl,0x3d
c0017a9b:	0f 84 88 00 00 00    	je     c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017aa1:	b8 80 9f 02 c0       	mov    eax,0xc0029f80
c0017aa6:	80 fa 3e             	cmp    dl,0x3e
c0017aa9:	74 7e                	je     c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017aab:	8d 42 bb             	lea    eax,[edx-0x45]
c0017aae:	3c 01                	cmp    al,0x1
c0017ab0:	76 72                	jbe    c0017b24 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017ab2:	80 fa 3f             	cmp    dl,0x3f
c0017ab5:	74 6d                	je     c0017b24 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017ab7:	80 fa 4a             	cmp    dl,0x4a
c0017aba:	74 0a                	je     c0017ac6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0017abc:	b8 06 86 02 c0       	mov    eax,0xc0028606
c0017ac1:	80 fa 4d             	cmp    dl,0x4d
c0017ac4:	75 63                	jne    c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ac6:	b8 70 9f 02 c0       	mov    eax,0xc0029f70
c0017acb:	c3                   	ret    
c0017acc:	b8 06 86 02 c0       	mov    eax,0xc0028606
c0017ad1:	80 f9 0b             	cmp    cl,0xb
c0017ad4:	75 0a                	jne    c0017ae0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0017ad6:	fe ca                	dec    dl
c0017ad8:	75 4f                	jne    c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ada:	b8 b0 9f 02 c0       	mov    eax,0xc0029fb0
c0017adf:	c3                   	ret    
c0017ae0:	80 f9 0f             	cmp    cl,0xf
c0017ae3:	75 44                	jne    c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ae5:	b8 c0 9f 02 c0       	mov    eax,0xc0029fc0
c0017aea:	80 fa 02             	cmp    dl,0x2
c0017aed:	76 3a                	jbe    c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017aef:	8d 42 fd             	lea    eax,[edx-0x3]
c0017af2:	3c 01                	cmp    al,0x1
c0017af4:	76 0a                	jbe    c0017b00 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0017af6:	b8 06 86 02 c0       	mov    eax,0xc0028606
c0017afb:	80 fa 06             	cmp    dl,0x6
c0017afe:	75 29                	jne    c0017b29 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017b00:	b8 d0 9f 02 c0       	mov    eax,0xc0029fd0
c0017b05:	c3                   	ret    
c0017b06:	b8 b0 9e 02 c0       	mov    eax,0xc0029eb0
c0017b0b:	c3                   	ret    
c0017b0c:	b8 e0 9e 02 c0       	mov    eax,0xc0029ee0
c0017b11:	c3                   	ret    
c0017b12:	b8 00 9f 02 c0       	mov    eax,0xc0029f00
c0017b17:	c3                   	ret    
c0017b18:	b8 30 9f 02 c0       	mov    eax,0xc0029f30
c0017b1d:	c3                   	ret    
c0017b1e:	b8 40 9f 02 c0       	mov    eax,0xc0029f40
c0017b23:	c3                   	ret    
c0017b24:	b8 90 9f 02 c0       	mov    eax,0xc0029f90
c0017b29:	c3                   	ret    

c0017b2a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0017b2a:	60                   	pusha  
c0017b2b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017b2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b37:	9c                   	pushf  
c0017b38:	fa                   	cli    
c0017b39:	0f 09                	wbinvd 
c0017b3b:	0f 30                	wrmsr  
c0017b3d:	9d                   	popf   
c0017b3e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017b42:	89 02                	mov    DWORD PTR [edx],eax
c0017b44:	61                   	popa   
c0017b45:	c3                   	ret    

c0017b46 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0017b46:	60                   	pusha  
c0017b47:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017b4b:	9c                   	pushf  
c0017b4c:	fa                   	cli    
c0017b4d:	0f 09                	wbinvd 
c0017b4f:	31 c0                	xor    eax,eax
c0017b51:	31 d2                	xor    edx,edx
c0017b53:	0f 32                	rdmsr  
c0017b55:	9d                   	popf   
c0017b56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017b5a:	89 02                	mov    DWORD PTR [edx],eax
c0017b5c:	61                   	popa   
c0017b5d:	c3                   	ret    

c0017b5e <CPU::AMD_K6_writeback(int, int, int)>:
c0017b5e:	56                   	push   esi
c0017b5f:	53                   	push   ebx
c0017b60:	83 ec 10             	sub    esp,0x10
c0017b63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b67:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0017b6c:	75 5d                	jne    c0017bcb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017b6e:	83 f8 08             	cmp    eax,0x8
c0017b71:	75 09                	jne    c0017b7c <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0017b73:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0017b78:	7e 13                	jle    c0017b8d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0017b7a:	eb 30                	jmp    c0017bac <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0017b7c:	83 f8 06             	cmp    eax,0x6
c0017b7f:	7c 4a                	jl     c0017bcb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017b81:	83 f8 07             	cmp    eax,0x7
c0017b84:	7e 07                	jle    c0017b8d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0017b86:	83 f8 09             	cmp    eax,0x9
c0017b89:	74 21                	je     c0017bac <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0017b8b:	eb 3e                	jmp    c0017bcb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017b8d:	89 e6                	mov    esi,esp
c0017b8f:	8b 1d 84 ab 02 c0    	mov    ebx,DWORD PTR ds:0xc002ab84
c0017b95:	56                   	push   esi
c0017b96:	c1 eb 15             	shr    ebx,0x15
c0017b99:	68 82 00 00 c0       	push   0xc0000082
c0017b9e:	83 e3 7e             	and    ebx,0x7e
c0017ba1:	e8 a0 ff ff ff       	call   c0017b46 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0017ba6:	56                   	push   esi
c0017ba7:	6a 00                	push   0x0
c0017ba9:	53                   	push   ebx
c0017baa:	eb 12                	jmp    c0017bbe <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0017bac:	89 e3                	mov    ebx,esp
c0017bae:	53                   	push   ebx
c0017baf:	68 82 00 00 c0       	push   0xc0000082
c0017bb4:	e8 8d ff ff ff       	call   c0017b46 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0017bb9:	53                   	push   ebx
c0017bba:	6a 00                	push   0x0
c0017bbc:	6a 00                	push   0x0
c0017bbe:	68 82 00 00 c0       	push   0xc0000082
c0017bc3:	e8 62 ff ff ff       	call   c0017b2a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0017bc8:	83 c4 18             	add    esp,0x18
c0017bcb:	83 c4 10             	add    esp,0x10
c0017bce:	5b                   	pop    ebx
c0017bcf:	5e                   	pop    esi
c0017bd0:	c3                   	ret    
c0017bd1:	90                   	nop

c0017bd2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0017bd2:	55                   	push   ebp
c0017bd3:	57                   	push   edi
c0017bd4:	56                   	push   esi
c0017bd5:	53                   	push   ebx
c0017bd6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bda:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017bde:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017be2:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0017be6:	39 05 e0 a0 02 c0    	cmp    DWORD PTR ds:0xc002a0e0,eax
c0017bec:	75 23                	jne    c0017c11 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0017bee:	a1 4c b6 02 c0       	mov    eax,ds:0xc002b64c
c0017bf3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017bf7:	89 06                	mov    DWORD PTR [esi],eax
c0017bf9:	a1 48 b6 02 c0       	mov    eax,ds:0xc002b648
c0017bfe:	89 07                	mov    DWORD PTR [edi],eax
c0017c00:	a1 44 b6 02 c0       	mov    eax,ds:0xc002b644
c0017c05:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0017c08:	a1 40 b6 02 c0       	mov    eax,ds:0xc002b640
c0017c0d:	89 02                	mov    DWORD PTR [edx],eax
c0017c0f:	eb 3f                	jmp    c0017c50 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0017c11:	31 c9                	xor    ecx,ecx
c0017c13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c17:	0f a2                	cpuid  
c0017c19:	89 06                	mov    DWORD PTR [esi],eax
c0017c1b:	89 1f                	mov    DWORD PTR [edi],ebx
c0017c1d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017c21:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0017c24:	89 10                	mov    DWORD PTR [eax],edx
c0017c26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c2a:	a3 e0 a0 02 c0       	mov    ds:0xc002a0e0,eax
c0017c2f:	8b 06                	mov    eax,DWORD PTR [esi]
c0017c31:	a3 4c b6 02 c0       	mov    ds:0xc002b64c,eax
c0017c36:	8b 07                	mov    eax,DWORD PTR [edi]
c0017c38:	a3 48 b6 02 c0       	mov    ds:0xc002b648,eax
c0017c3d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017c40:	a3 44 b6 02 c0       	mov    ds:0xc002b644,eax
c0017c45:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017c49:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c4b:	a3 40 b6 02 c0       	mov    ds:0xc002b640,eax
c0017c50:	5b                   	pop    ebx
c0017c51:	5e                   	pop    esi
c0017c52:	5f                   	pop    edi
c0017c53:	5d                   	pop    ebp
c0017c54:	c3                   	ret    
c0017c55:	90                   	nop

c0017c56 <CPU::cpuidCheckEDX(unsigned int)>:
c0017c56:	83 ec 10             	sub    esp,0x10
c0017c59:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017c5d:	50                   	push   eax
c0017c5e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017c62:	50                   	push   eax
c0017c63:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017c67:	50                   	push   eax
c0017c68:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017c6c:	50                   	push   eax
c0017c6d:	6a 01                	push   0x1
c0017c6f:	e8 5e ff ff ff       	call   c0017bd2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017c74:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c78:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0017c7c:	0f 95 c0             	setne  al
c0017c7f:	83 c4 24             	add    esp,0x24
c0017c82:	c3                   	ret    
c0017c83:	90                   	nop

c0017c84 <CPU::cpuidCheckECX(unsigned int)>:
c0017c84:	83 ec 10             	sub    esp,0x10
c0017c87:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017c8b:	50                   	push   eax
c0017c8c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017c90:	50                   	push   eax
c0017c91:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017c95:	50                   	push   eax
c0017c96:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017c9a:	50                   	push   eax
c0017c9b:	6a 01                	push   0x1
c0017c9d:	e8 30 ff ff ff       	call   c0017bd2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017ca2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ca6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0017caa:	0f 95 c0             	setne  al
c0017cad:	83 c4 24             	add    esp,0x24
c0017cb0:	c3                   	ret    
c0017cb1:	90                   	nop

c0017cb2 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0017cb2:	83 ec 10             	sub    esp,0x10
c0017cb5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017cb9:	50                   	push   eax
c0017cba:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017cbe:	50                   	push   eax
c0017cbf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017cc3:	50                   	push   eax
c0017cc4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017cc8:	50                   	push   eax
c0017cc9:	6a 07                	push   0x7
c0017ccb:	e8 02 ff ff ff       	call   c0017bd2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017cd0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cd4:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0017cd8:	0f 95 c0             	setne  al
c0017cdb:	83 c4 24             	add    esp,0x24
c0017cde:	c3                   	ret    
c0017cdf:	90                   	nop

c0017ce0 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0017ce0:	83 ec 10             	sub    esp,0x10
c0017ce3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017ce7:	50                   	push   eax
c0017ce8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017cec:	50                   	push   eax
c0017ced:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017cf1:	50                   	push   eax
c0017cf2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017cf6:	50                   	push   eax
c0017cf7:	6a 07                	push   0x7
c0017cf9:	e8 d4 fe ff ff       	call   c0017bd2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017cfe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d02:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0017d06:	0f 95 c0             	setne  al
c0017d09:	83 c4 24             	add    esp,0x24
c0017d0c:	c3                   	ret    
c0017d0d:	90                   	nop

c0017d0e <CPU::CPU()>:
c0017d0e:	83 ec 0c             	sub    esp,0xc
c0017d11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d15:	83 ec 08             	sub    esp,0x8
c0017d18:	68 06 86 02 c0       	push   0xc0028606
c0017d1d:	50                   	push   eax
c0017d1e:	e8 f1 be ff ff       	call   c0013c14 <Device::Device(char const*)>
c0017d23:	83 c4 10             	add    esp,0x10
c0017d26:	ba e0 86 02 c0       	mov    edx,0xc00286e0
c0017d2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d2f:	89 10                	mov    DWORD PTR [eax],edx
c0017d31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d35:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0017d3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d43:	05 78 01 00 00       	add    eax,0x178
c0017d48:	83 ec 0c             	sub    esp,0xc
c0017d4b:	50                   	push   eax
c0017d4c:	e8 89 6f ff ff       	call   c000ecda <GDT::GDT()>
c0017d51:	83 c4 10             	add    esp,0x10
c0017d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d58:	05 7c 09 00 00       	add    eax,0x97c
c0017d5d:	83 ec 0c             	sub    esp,0xc
c0017d60:	50                   	push   eax
c0017d61:	e8 d6 71 ff ff       	call   c000ef3c <IDT::IDT()>
c0017d66:	83 c4 10             	add    esp,0x10
c0017d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d6d:	05 7c 11 00 00       	add    eax,0x117c
c0017d72:	83 ec 0c             	sub    esp,0xc
c0017d75:	50                   	push   eax
c0017d76:	e8 fb 91 ff ff       	call   c0010f76 <TSS::TSS()>
c0017d7b:	83 c4 10             	add    esp,0x10
c0017d7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d82:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0017d89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d8d:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0017d97:	90                   	nop
c0017d98:	83 c4 0c             	add    esp,0xc
c0017d9b:	c3                   	ret    

c0017d9c <CPU::displayFeatures()>:
c0017d9c:	53                   	push   ebx
c0017d9d:	83 ec 10             	sub    esp,0x10
c0017da0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017da4:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0017daa:	68 14 83 02 c0       	push   0xc0028314
c0017daf:	e8 81 a8 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0017db4:	59                   	pop    ecx
c0017db5:	58                   	pop    eax
c0017db6:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0017dbc:	50                   	push   eax
c0017dbd:	68 25 83 02 c0       	push   0xc0028325
c0017dc2:	e8 6e a8 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0017dc7:	58                   	pop    eax
c0017dc8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017dce:	5a                   	pop    edx
c0017dcf:	c1 e8 0e             	shr    eax,0xe
c0017dd2:	0f b6 c0             	movzx  eax,al
c0017dd5:	50                   	push   eax
c0017dd6:	68 36 83 02 c0       	push   0xc0028336
c0017ddb:	e8 55 a8 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0017de0:	59                   	pop    ecx
c0017de1:	58                   	pop    eax
c0017de2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017de8:	66 c1 e8 06          	shr    ax,0x6
c0017dec:	0f b6 c0             	movzx  eax,al
c0017def:	50                   	push   eax
c0017df0:	68 47 83 02 c0       	push   0xc0028347
c0017df5:	e8 3b a8 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0017dfa:	c7 04 24 5a 87 02 c0 	mov    DWORD PTR [esp],0xc002875a
c0017e01:	e8 2f a8 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0017e06:	83 c4 10             	add    esp,0x10
c0017e09:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c0017e0e:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0017e15:	74 05                	je     c0017e1c <CPU::displayFeatures()+0x80>
c0017e17:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c0017e1c:	52                   	push   edx
c0017e1d:	52                   	push   edx
c0017e1e:	50                   	push   eax
c0017e1f:	68 58 83 02 c0       	push   0xc0028358
c0017e24:	e8 0c a8 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0017e29:	83 c4 10             	add    esp,0x10
c0017e2c:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c0017e31:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0017e38:	78 05                	js     c0017e3f <CPU::displayFeatures()+0xa3>
c0017e3a:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c0017e3f:	51                   	push   ecx
c0017e40:	51                   	push   ecx
c0017e41:	50                   	push   eax
c0017e42:	68 6f 83 02 c0       	push   0xc002836f
c0017e47:	e8 e9 a7 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0017e4c:	83 c4 10             	add    esp,0x10
c0017e4f:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c0017e54:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0017e5b:	75 05                	jne    c0017e62 <CPU::displayFeatures()+0xc6>
c0017e5d:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c0017e62:	52                   	push   edx
c0017e63:	52                   	push   edx
c0017e64:	50                   	push   eax
c0017e65:	68 86 83 02 c0       	push   0xc0028386
c0017e6a:	e8 c6 a7 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0017e6f:	83 c4 10             	add    esp,0x10
c0017e72:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c0017e77:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0017e7e:	75 05                	jne    c0017e85 <CPU::displayFeatures()+0xe9>
c0017e80:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c0017e85:	51                   	push   ecx
c0017e86:	51                   	push   ecx
c0017e87:	50                   	push   eax
c0017e88:	68 9d 83 02 c0       	push   0xc002839d
c0017e8d:	e8 a3 a7 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0017e92:	83 c4 10             	add    esp,0x10
c0017e95:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c0017e9a:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0017ea1:	75 05                	jne    c0017ea8 <CPU::displayFeatures()+0x10c>
c0017ea3:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c0017ea8:	52                   	push   edx
c0017ea9:	52                   	push   edx
c0017eaa:	50                   	push   eax
c0017eab:	68 b4 83 02 c0       	push   0xc00283b4
c0017eb0:	e8 80 a7 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0017eb5:	83 c4 10             	add    esp,0x10
c0017eb8:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c0017ebd:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0017ec4:	75 05                	jne    c0017ecb <CPU::displayFeatures()+0x12f>
c0017ec6:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c0017ecb:	51                   	push   ecx
c0017ecc:	51                   	push   ecx
c0017ecd:	50                   	push   eax
c0017ece:	68 cb 83 02 c0       	push   0xc00283cb
c0017ed3:	e8 5d a7 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0017ed8:	83 c4 10             	add    esp,0x10
c0017edb:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c0017ee0:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0017ee7:	75 05                	jne    c0017eee <CPU::displayFeatures()+0x152>
c0017ee9:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c0017eee:	52                   	push   edx
c0017eef:	52                   	push   edx
c0017ef0:	50                   	push   eax
c0017ef1:	68 e2 83 02 c0       	push   0xc00283e2
c0017ef6:	e8 3a a7 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0017efb:	83 c4 10             	add    esp,0x10
c0017efe:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c0017f03:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0017f0a:	75 05                	jne    c0017f11 <CPU::displayFeatures()+0x175>
c0017f0c:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c0017f11:	51                   	push   ecx
c0017f12:	51                   	push   ecx
c0017f13:	50                   	push   eax
c0017f14:	68 f9 83 02 c0       	push   0xc00283f9
c0017f19:	e8 17 a7 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0017f1e:	83 c4 10             	add    esp,0x10
c0017f21:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c0017f26:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0017f2d:	75 05                	jne    c0017f34 <CPU::displayFeatures()+0x198>
c0017f2f:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c0017f34:	52                   	push   edx
c0017f35:	52                   	push   edx
c0017f36:	50                   	push   eax
c0017f37:	68 10 84 02 c0       	push   0xc0028410
c0017f3c:	e8 f4 a6 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0017f41:	83 c4 10             	add    esp,0x10
c0017f44:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c0017f49:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0017f50:	75 05                	jne    c0017f57 <CPU::displayFeatures()+0x1bb>
c0017f52:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c0017f57:	51                   	push   ecx
c0017f58:	51                   	push   ecx
c0017f59:	50                   	push   eax
c0017f5a:	68 27 84 02 c0       	push   0xc0028427
c0017f5f:	e8 d1 a6 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0017f64:	83 c4 10             	add    esp,0x10
c0017f67:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c0017f6c:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0017f73:	75 05                	jne    c0017f7a <CPU::displayFeatures()+0x1de>
c0017f75:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c0017f7a:	52                   	push   edx
c0017f7b:	52                   	push   edx
c0017f7c:	50                   	push   eax
c0017f7d:	68 3e 84 02 c0       	push   0xc002843e
c0017f82:	e8 ae a6 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0017f87:	83 c4 10             	add    esp,0x10
c0017f8a:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c0017f8f:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0017f96:	75 05                	jne    c0017f9d <CPU::displayFeatures()+0x201>
c0017f98:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c0017f9d:	51                   	push   ecx
c0017f9e:	51                   	push   ecx
c0017f9f:	50                   	push   eax
c0017fa0:	68 55 84 02 c0       	push   0xc0028455
c0017fa5:	e8 8b a6 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0017faa:	83 c4 10             	add    esp,0x10
c0017fad:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c0017fb2:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0017fb9:	75 05                	jne    c0017fc0 <CPU::displayFeatures()+0x224>
c0017fbb:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c0017fc0:	52                   	push   edx
c0017fc1:	52                   	push   edx
c0017fc2:	50                   	push   eax
c0017fc3:	68 6c 84 02 c0       	push   0xc002846c
c0017fc8:	e8 68 a6 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0017fcd:	83 c4 10             	add    esp,0x10
c0017fd0:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c0017fd5:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0017fdc:	78 05                	js     c0017fe3 <CPU::displayFeatures()+0x247>
c0017fde:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c0017fe3:	51                   	push   ecx
c0017fe4:	51                   	push   ecx
c0017fe5:	50                   	push   eax
c0017fe6:	68 83 84 02 c0       	push   0xc0028483
c0017feb:	e8 45 a6 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0017ff0:	83 c4 10             	add    esp,0x10
c0017ff3:	b8 b8 6f 02 c0       	mov    eax,0xc0026fb8
c0017ff8:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0017fff:	75 05                	jne    c0018006 <CPU::displayFeatures()+0x26a>
c0018001:	b8 bc 6f 02 c0       	mov    eax,0xc0026fbc
c0018006:	52                   	push   edx
c0018007:	52                   	push   edx
c0018008:	50                   	push   eax
c0018009:	68 9a 84 02 c0       	push   0xc002849a
c001800e:	e8 22 a6 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0018013:	83 c4 18             	add    esp,0x18
c0018016:	5b                   	pop    ebx
c0018017:	c3                   	ret    

c0018018 <CPU::detectFeatures()>:
c0018018:	55                   	push   ebp
c0018019:	57                   	push   edi
c001801a:	56                   	push   esi
c001801b:	53                   	push   ebx
c001801c:	83 ec 50             	sub    esp,0x50
c001801f:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018023:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001802d:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018034:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c001803a:	6a 0d                	push   0xd
c001803c:	6a 00                	push   0x0
c001803e:	57                   	push   edi
c001803f:	e8 39 86 fe ff       	call   c000067d <memset>
c0018044:	83 c4 10             	add    esp,0x10
c0018047:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c001804c:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018053:	0f 84 20 09 00 00    	je     c0018979 <CPU::detectFeatures()+0x961>
c0018059:	83 ec 0c             	sub    esp,0xc
c001805c:	6a 10                	push   0x10
c001805e:	e8 f3 fb ff ff       	call   c0017c56 <CPU::cpuidCheckEDX(unsigned int)>
c0018063:	83 e0 01             	and    eax,0x1
c0018066:	8d 14 00             	lea    edx,[eax+eax*1]
c0018069:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001806f:	83 e0 fd             	and    eax,0xfffffffd
c0018072:	09 d0                	or     eax,edx
c0018074:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001807a:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018081:	e8 d0 fb ff ff       	call   c0017c56 <CPU::cpuidCheckEDX(unsigned int)>
c0018086:	83 e0 01             	and    eax,0x1
c0018089:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018090:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018096:	83 e0 fb             	and    eax,0xfffffffb
c0018099:	09 d0                	or     eax,edx
c001809b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00180a1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00180a8:	e8 a9 fb ff ff       	call   c0017c56 <CPU::cpuidCheckEDX(unsigned int)>
c00180ad:	83 e0 01             	and    eax,0x1
c00180b0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00180b7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00180bd:	83 e0 f7             	and    eax,0xfffffff7
c00180c0:	09 d0                	or     eax,edx
c00180c2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00180c8:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00180cf:	e8 82 fb ff ff       	call   c0017c56 <CPU::cpuidCheckEDX(unsigned int)>
c00180d4:	83 e0 01             	and    eax,0x1
c00180d7:	c1 e0 04             	shl    eax,0x4
c00180da:	88 c2                	mov    dl,al
c00180dc:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00180e2:	83 e0 ef             	and    eax,0xffffffef
c00180e5:	09 d0                	or     eax,edx
c00180e7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00180ed:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00180f4:	e8 5d fb ff ff       	call   c0017c56 <CPU::cpuidCheckEDX(unsigned int)>
c00180f9:	83 e0 01             	and    eax,0x1
c00180fc:	c1 e0 05             	shl    eax,0x5
c00180ff:	88 c2                	mov    dl,al
c0018101:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018107:	83 e0 df             	and    eax,0xffffffdf
c001810a:	09 d0                	or     eax,edx
c001810c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018112:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018119:	e8 38 fb ff ff       	call   c0017c56 <CPU::cpuidCheckEDX(unsigned int)>
c001811e:	83 e0 01             	and    eax,0x1
c0018121:	8d 14 00             	lea    edx,[eax+eax*1]
c0018124:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001812a:	83 e0 fd             	and    eax,0xfffffffd
c001812d:	09 d0                	or     eax,edx
c001812f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018135:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001813c:	e8 15 fb ff ff       	call   c0017c56 <CPU::cpuidCheckEDX(unsigned int)>
c0018141:	83 e0 01             	and    eax,0x1
c0018144:	c1 e0 06             	shl    eax,0x6
c0018147:	88 c2                	mov    dl,al
c0018149:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001814f:	83 e0 bf             	and    eax,0xffffffbf
c0018152:	09 d0                	or     eax,edx
c0018154:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001815a:	58                   	pop    eax
c001815b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001815f:	56                   	push   esi
c0018160:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018164:	55                   	push   ebp
c0018165:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018169:	50                   	push   eax
c001816a:	8d 54 24 28          	lea    edx,[esp+0x28]
c001816e:	52                   	push   edx
c001816f:	6a 00                	push   0x0
c0018171:	e8 5c fa ff ff       	call   c0017bd2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018176:	83 c4 1c             	add    esp,0x1c
c0018179:	6a 04                	push   0x4
c001817b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001817f:	50                   	push   eax
c0018180:	57                   	push   edi
c0018181:	e8 c1 84 fe ff       	call   c0000647 <memcpy>
c0018186:	83 c4 0c             	add    esp,0xc
c0018189:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c001818f:	6a 04                	push   0x4
c0018191:	56                   	push   esi
c0018192:	50                   	push   eax
c0018193:	e8 af 84 fe ff       	call   c0000647 <memcpy>
c0018198:	83 c4 0c             	add    esp,0xc
c001819b:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00181a1:	6a 04                	push   0x4
c00181a3:	55                   	push   ebp
c00181a4:	50                   	push   eax
c00181a5:	e8 9d 84 fe ff       	call   c0000647 <memcpy>
c00181aa:	58                   	pop    eax
c00181ab:	5a                   	pop    edx
c00181ac:	68 b1 84 02 c0       	push   0xc00284b1
c00181b1:	57                   	push   edi
c00181b2:	e8 b6 85 fe ff       	call   c000076d <strcmp>
c00181b7:	83 c4 10             	add    esp,0x10
c00181ba:	85 c0                	test   eax,eax
c00181bc:	75 0f                	jne    c00181cd <CPU::detectFeatures()+0x1b5>
c00181be:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00181c8:	e9 22 02 00 00       	jmp    c00183ef <CPU::detectFeatures()+0x3d7>
c00181cd:	50                   	push   eax
c00181ce:	50                   	push   eax
c00181cf:	68 be 84 02 c0       	push   0xc00284be
c00181d4:	57                   	push   edi
c00181d5:	e8 93 85 fe ff       	call   c000076d <strcmp>
c00181da:	83 c4 10             	add    esp,0x10
c00181dd:	85 c0                	test   eax,eax
c00181df:	74 dd                	je     c00181be <CPU::detectFeatures()+0x1a6>
c00181e1:	51                   	push   ecx
c00181e2:	51                   	push   ecx
c00181e3:	68 cb 84 02 c0       	push   0xc00284cb
c00181e8:	57                   	push   edi
c00181e9:	e8 7f 85 fe ff       	call   c000076d <strcmp>
c00181ee:	83 c4 10             	add    esp,0x10
c00181f1:	85 c0                	test   eax,eax
c00181f3:	74 2a                	je     c001821f <CPU::detectFeatures()+0x207>
c00181f5:	52                   	push   edx
c00181f6:	52                   	push   edx
c00181f7:	68 d8 84 02 c0       	push   0xc00284d8
c00181fc:	57                   	push   edi
c00181fd:	e8 6b 85 fe ff       	call   c000076d <strcmp>
c0018202:	83 c4 10             	add    esp,0x10
c0018205:	85 c0                	test   eax,eax
c0018207:	74 16                	je     c001821f <CPU::detectFeatures()+0x207>
c0018209:	50                   	push   eax
c001820a:	50                   	push   eax
c001820b:	68 e5 84 02 c0       	push   0xc00284e5
c0018210:	57                   	push   edi
c0018211:	e8 57 85 fe ff       	call   c000076d <strcmp>
c0018216:	83 c4 10             	add    esp,0x10
c0018219:	85 c0                	test   eax,eax
c001821b:	74 48                	je     c0018265 <CPU::detectFeatures()+0x24d>
c001821d:	eb 0f                	jmp    c001822e <CPU::detectFeatures()+0x216>
c001821f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018229:	e9 c1 01 00 00       	jmp    c00183ef <CPU::detectFeatures()+0x3d7>
c001822e:	50                   	push   eax
c001822f:	50                   	push   eax
c0018230:	68 f2 84 02 c0       	push   0xc00284f2
c0018235:	57                   	push   edi
c0018236:	e8 32 85 fe ff       	call   c000076d <strcmp>
c001823b:	83 c4 10             	add    esp,0x10
c001823e:	85 c0                	test   eax,eax
c0018240:	74 23                	je     c0018265 <CPU::detectFeatures()+0x24d>
c0018242:	50                   	push   eax
c0018243:	50                   	push   eax
c0018244:	68 ff 84 02 c0       	push   0xc00284ff
c0018249:	57                   	push   edi
c001824a:	e8 1e 85 fe ff       	call   c000076d <strcmp>
c001824f:	83 c4 10             	add    esp,0x10
c0018252:	85 c0                	test   eax,eax
c0018254:	75 1e                	jne    c0018274 <CPU::detectFeatures()+0x25c>
c0018256:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018260:	e9 8a 01 00 00       	jmp    c00183ef <CPU::detectFeatures()+0x3d7>
c0018265:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001826f:	e9 7b 01 00 00       	jmp    c00183ef <CPU::detectFeatures()+0x3d7>
c0018274:	50                   	push   eax
c0018275:	50                   	push   eax
c0018276:	68 0c 85 02 c0       	push   0xc002850c
c001827b:	57                   	push   edi
c001827c:	e8 ec 84 fe ff       	call   c000076d <strcmp>
c0018281:	83 c4 10             	add    esp,0x10
c0018284:	85 c0                	test   eax,eax
c0018286:	75 0f                	jne    c0018297 <CPU::detectFeatures()+0x27f>
c0018288:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018292:	e9 58 01 00 00       	jmp    c00183ef <CPU::detectFeatures()+0x3d7>
c0018297:	50                   	push   eax
c0018298:	50                   	push   eax
c0018299:	68 cb 84 02 c0       	push   0xc00284cb
c001829e:	57                   	push   edi
c001829f:	e8 c9 84 fe ff       	call   c000076d <strcmp>
c00182a4:	83 c4 10             	add    esp,0x10
c00182a7:	85 c0                	test   eax,eax
c00182a9:	75 0f                	jne    c00182ba <CPU::detectFeatures()+0x2a2>
c00182ab:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00182b5:	e9 35 01 00 00       	jmp    c00183ef <CPU::detectFeatures()+0x3d7>
c00182ba:	50                   	push   eax
c00182bb:	50                   	push   eax
c00182bc:	68 19 85 02 c0       	push   0xc0028519
c00182c1:	57                   	push   edi
c00182c2:	e8 a6 84 fe ff       	call   c000076d <strcmp>
c00182c7:	83 c4 10             	add    esp,0x10
c00182ca:	85 c0                	test   eax,eax
c00182cc:	75 0f                	jne    c00182dd <CPU::detectFeatures()+0x2c5>
c00182ce:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00182d8:	e9 12 01 00 00       	jmp    c00183ef <CPU::detectFeatures()+0x3d7>
c00182dd:	51                   	push   ecx
c00182de:	51                   	push   ecx
c00182df:	68 26 85 02 c0       	push   0xc0028526
c00182e4:	57                   	push   edi
c00182e5:	e8 83 84 fe ff       	call   c000076d <strcmp>
c00182ea:	83 c4 10             	add    esp,0x10
c00182ed:	85 c0                	test   eax,eax
c00182ef:	75 0f                	jne    c0018300 <CPU::detectFeatures()+0x2e8>
c00182f1:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00182fb:	e9 ef 00 00 00       	jmp    c00183ef <CPU::detectFeatures()+0x3d7>
c0018300:	52                   	push   edx
c0018301:	52                   	push   edx
c0018302:	68 33 85 02 c0       	push   0xc0028533
c0018307:	57                   	push   edi
c0018308:	e8 60 84 fe ff       	call   c000076d <strcmp>
c001830d:	83 c4 10             	add    esp,0x10
c0018310:	85 c0                	test   eax,eax
c0018312:	75 0f                	jne    c0018323 <CPU::detectFeatures()+0x30b>
c0018314:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001831e:	e9 cc 00 00 00       	jmp    c00183ef <CPU::detectFeatures()+0x3d7>
c0018323:	50                   	push   eax
c0018324:	50                   	push   eax
c0018325:	68 40 85 02 c0       	push   0xc0028540
c001832a:	57                   	push   edi
c001832b:	e8 3d 84 fe ff       	call   c000076d <strcmp>
c0018330:	83 c4 10             	add    esp,0x10
c0018333:	85 c0                	test   eax,eax
c0018335:	75 0f                	jne    c0018346 <CPU::detectFeatures()+0x32e>
c0018337:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018341:	e9 a9 00 00 00       	jmp    c00183ef <CPU::detectFeatures()+0x3d7>
c0018346:	50                   	push   eax
c0018347:	50                   	push   eax
c0018348:	68 4d 85 02 c0       	push   0xc002854d
c001834d:	57                   	push   edi
c001834e:	e8 1a 84 fe ff       	call   c000076d <strcmp>
c0018353:	83 c4 10             	add    esp,0x10
c0018356:	85 c0                	test   eax,eax
c0018358:	75 0f                	jne    c0018369 <CPU::detectFeatures()+0x351>
c001835a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018364:	e9 86 00 00 00       	jmp    c00183ef <CPU::detectFeatures()+0x3d7>
c0018369:	50                   	push   eax
c001836a:	50                   	push   eax
c001836b:	68 5a 85 02 c0       	push   0xc002855a
c0018370:	57                   	push   edi
c0018371:	e8 f7 83 fe ff       	call   c000076d <strcmp>
c0018376:	83 c4 10             	add    esp,0x10
c0018379:	85 c0                	test   eax,eax
c001837b:	75 0c                	jne    c0018389 <CPU::detectFeatures()+0x371>
c001837d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018387:	eb 66                	jmp    c00183ef <CPU::detectFeatures()+0x3d7>
c0018389:	50                   	push   eax
c001838a:	50                   	push   eax
c001838b:	68 67 85 02 c0       	push   0xc0028567
c0018390:	57                   	push   edi
c0018391:	e8 d7 83 fe ff       	call   c000076d <strcmp>
c0018396:	83 c4 10             	add    esp,0x10
c0018399:	85 c0                	test   eax,eax
c001839b:	75 0c                	jne    c00183a9 <CPU::detectFeatures()+0x391>
c001839d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00183a7:	eb 46                	jmp    c00183ef <CPU::detectFeatures()+0x3d7>
c00183a9:	50                   	push   eax
c00183aa:	50                   	push   eax
c00183ab:	68 74 85 02 c0       	push   0xc0028574
c00183b0:	57                   	push   edi
c00183b1:	e8 b7 83 fe ff       	call   c000076d <strcmp>
c00183b6:	83 c4 10             	add    esp,0x10
c00183b9:	85 c0                	test   eax,eax
c00183bb:	74 e0                	je     c001839d <CPU::detectFeatures()+0x385>
c00183bd:	50                   	push   eax
c00183be:	50                   	push   eax
c00183bf:	68 81 85 02 c0       	push   0xc0028581
c00183c4:	57                   	push   edi
c00183c5:	e8 a3 83 fe ff       	call   c000076d <strcmp>
c00183ca:	83 c4 10             	add    esp,0x10
c00183cd:	85 c0                	test   eax,eax
c00183cf:	74 cc                	je     c001839d <CPU::detectFeatures()+0x385>
c00183d1:	51                   	push   ecx
c00183d2:	51                   	push   ecx
c00183d3:	68 8e 85 02 c0       	push   0xc002858e
c00183d8:	57                   	push   edi
c00183d9:	e8 8f 83 fe ff       	call   c000076d <strcmp>
c00183de:	83 c4 10             	add    esp,0x10
c00183e1:	85 c0                	test   eax,eax
c00183e3:	74 b8                	je     c001839d <CPU::detectFeatures()+0x385>
c00183e5:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00183ef:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00183f4:	0f 86 be 00 00 00    	jbe    c00184b8 <CPU::detectFeatures()+0x4a0>
c00183fa:	83 ec 0c             	sub    esp,0xc
c00183fd:	68 80 00 00 00       	push   0x80
c0018402:	e8 ab f8 ff ff       	call   c0017cb2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018407:	83 e0 01             	and    eax,0x1
c001840a:	c1 e0 06             	shl    eax,0x6
c001840d:	88 c2                	mov    dl,al
c001840f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018415:	83 e0 bf             	and    eax,0xffffffbf
c0018418:	09 d0                	or     eax,edx
c001841a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018420:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018427:	e8 86 f8 ff ff       	call   c0017cb2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001842c:	83 e0 01             	and    eax,0x1
c001842f:	c1 e0 04             	shl    eax,0x4
c0018432:	88 c2                	mov    dl,al
c0018434:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001843a:	83 e0 ef             	and    eax,0xffffffef
c001843d:	09 d0                	or     eax,edx
c001843f:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018445:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001844c:	e8 61 f8 ff ff       	call   c0017cb2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018451:	c1 e0 07             	shl    eax,0x7
c0018454:	88 c2                	mov    dl,al
c0018456:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001845c:	83 e0 7f             	and    eax,0x7f
c001845f:	09 d0                	or     eax,edx
c0018461:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018467:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001846e:	e8 6d f8 ff ff       	call   c0017ce0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018473:	83 e0 01             	and    eax,0x1
c0018476:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001847d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018483:	83 e0 f7             	and    eax,0xfffffff7
c0018486:	09 d0                	or     eax,edx
c0018488:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001848e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018495:	e8 46 f8 ff ff       	call   c0017ce0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001849a:	83 c4 10             	add    esp,0x10
c001849d:	83 e0 01             	and    eax,0x1
c00184a0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00184a7:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00184ad:	83 e0 fb             	and    eax,0xfffffffb
c00184b0:	09 d0                	or     eax,edx
c00184b2:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00184b8:	83 ec 0c             	sub    esp,0xc
c00184bb:	56                   	push   esi
c00184bc:	55                   	push   ebp
c00184bd:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00184c1:	57                   	push   edi
c00184c2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00184c6:	50                   	push   eax
c00184c7:	6a 01                	push   0x1
c00184c9:	e8 04 f7 ff ff       	call   c0017bd2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00184ce:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00184d2:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00184d8:	88 ca                	mov    dl,cl
c00184da:	83 e0 f0             	and    eax,0xfffffff0
c00184dd:	83 e2 0f             	and    edx,0xf
c00184e0:	09 d0                	or     eax,edx
c00184e2:	88 ca                	mov    dl,cl
c00184e4:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00184ea:	c0 ea 04             	shr    dl,0x4
c00184ed:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00184f1:	0f b6 c2             	movzx  eax,dl
c00184f4:	83 c4 20             	add    esp,0x20
c00184f7:	c1 e0 06             	shl    eax,0x6
c00184fa:	89 c5                	mov    ebp,eax
c00184fc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018502:	66 25 3f c0          	and    ax,0xc03f
c0018506:	09 e8                	or     eax,ebp
c0018508:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001850f:	89 c8                	mov    eax,ecx
c0018511:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0018517:	c1 e8 08             	shr    eax,0x8
c001851a:	83 e2 3f             	and    edx,0x3f
c001851d:	83 e0 0f             	and    eax,0xf
c0018520:	89 c5                	mov    ebp,eax
c0018522:	c1 e5 06             	shl    ebp,0x6
c0018525:	09 d5                	or     ebp,edx
c0018527:	89 ea                	mov    edx,ebp
c0018529:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001852f:	88 c2                	mov    dl,al
c0018531:	c0 ea 02             	shr    dl,0x2
c0018534:	89 d5                	mov    ebp,edx
c0018536:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001853c:	83 e2 c0             	and    edx,0xffffffc0
c001853f:	09 d5                	or     ebp,edx
c0018541:	89 ea                	mov    edx,ebp
c0018543:	89 cd                	mov    ebp,ecx
c0018545:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001854b:	c1 ed 0c             	shr    ebp,0xc
c001854e:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0018554:	83 e5 03             	and    ebp,0x3
c0018557:	83 e2 cf             	and    edx,0xffffffcf
c001855a:	c1 e5 04             	shl    ebp,0x4
c001855d:	09 d5                	or     ebp,edx
c001855f:	3c 06                	cmp    al,0x6
c0018561:	89 ea                	mov    edx,ebp
c0018563:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018569:	74 04                	je     c001856f <CPU::detectFeatures()+0x557>
c001856b:	3c 0f                	cmp    al,0xf
c001856d:	75 5c                	jne    c00185cb <CPU::detectFeatures()+0x5b3>
c001856f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018573:	89 cd                	mov    ebp,ecx
c0018575:	c1 ed 10             	shr    ebp,0x10
c0018578:	c1 e5 04             	shl    ebp,0x4
c001857b:	09 ea                	or     edx,ebp
c001857d:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018583:	0f b6 d2             	movzx  edx,dl
c0018586:	66 81 e5 3f c0       	and    bp,0xc03f
c001858b:	c1 e2 06             	shl    edx,0x6
c001858e:	09 ea                	or     edx,ebp
c0018590:	3c 0f                	cmp    al,0xf
c0018592:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018599:	75 30                	jne    c00185cb <CPU::detectFeatures()+0x5b3>
c001859b:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00185a1:	c1 e9 14             	shr    ecx,0x14
c00185a4:	83 e0 3f             	and    eax,0x3f
c00185a7:	83 c1 0f             	add    ecx,0xf
c00185aa:	88 ca                	mov    dl,cl
c00185ac:	c0 e9 02             	shr    cl,0x2
c00185af:	c1 e2 06             	shl    edx,0x6
c00185b2:	09 d0                	or     eax,edx
c00185b4:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00185ba:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00185c0:	83 e0 c0             	and    eax,0xffffffc0
c00185c3:	09 c1                	or     ecx,eax
c00185c5:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00185cb:	83 ec 0c             	sub    esp,0xc
c00185ce:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00185d5:	56                   	push   esi
c00185d6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00185da:	50                   	push   eax
c00185db:	57                   	push   edi
c00185dc:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00185e0:	55                   	push   ebp
c00185e1:	68 00 00 00 80       	push   0x80000000
c00185e6:	e8 e7 f5 ff ff       	call   c0017bd2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00185eb:	83 c4 20             	add    esp,0x20
c00185ee:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00185f6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00185fa:	76 1e                	jbe    c001861a <CPU::detectFeatures()+0x602>
c00185fc:	83 ec 0c             	sub    esp,0xc
c00185ff:	56                   	push   esi
c0018600:	50                   	push   eax
c0018601:	57                   	push   edi
c0018602:	55                   	push   ebp
c0018603:	68 01 00 00 80       	push   0x80000001
c0018608:	e8 c5 f5 ff ff       	call   c0017bd2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001860d:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018617:	83 c4 20             	add    esp,0x20
c001861a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018620:	83 f8 01             	cmp    eax,0x1
c0018623:	75 6f                	jne    c0018694 <CPU::detectFeatures()+0x67c>
c0018625:	51                   	push   ecx
c0018626:	51                   	push   ecx
c0018627:	68 9a 85 02 c0       	push   0xc002859a
c001862c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018630:	56                   	push   esi
c0018631:	e8 e6 80 fe ff       	call   c000071c <strcpy>
c0018636:	5f                   	pop    edi
c0018637:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001863d:	5d                   	pop    ebp
c001863e:	66 c1 e8 06          	shr    ax,0x6
c0018642:	0f b6 c0             	movzx  eax,al
c0018645:	50                   	push   eax
c0018646:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001864c:	c1 e8 0e             	shr    eax,0xe
c001864f:	0f b6 c0             	movzx  eax,al
c0018652:	50                   	push   eax
c0018653:	e8 24 f2 ff ff       	call   c001787c <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018658:	5a                   	pop    edx
c0018659:	59                   	pop    ecx
c001865a:	50                   	push   eax
c001865b:	56                   	push   esi
c001865c:	e8 72 81 fe ff       	call   c00007d3 <strcat>
c0018661:	5f                   	pop    edi
c0018662:	5d                   	pop    ebp
c0018663:	56                   	push   esi
c0018664:	53                   	push   ebx
c0018665:	e8 9c b5 ff ff       	call   c0013c06 <Device::setName(char const*)>
c001866a:	58                   	pop    eax
c001866b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018671:	5a                   	pop    edx
c0018672:	68 a1 85 02 c0       	push   0xc00285a1
c0018677:	50                   	push   eax
c0018678:	e8 f0 80 fe ff       	call   c000076d <strcmp>
c001867d:	83 c4 10             	add    esp,0x10
c0018680:	85 c0                	test   eax,eax
c0018682:	0f 85 71 03 00 00    	jne    c00189f9 <CPU::detectFeatures()+0x9e1>
c0018688:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001868f:	e9 65 03 00 00       	jmp    c00189f9 <CPU::detectFeatures()+0x9e1>
c0018694:	83 f8 02             	cmp    eax,0x2
c0018697:	0f 85 b5 00 00 00    	jne    c0018752 <CPU::detectFeatures()+0x73a>
c001869d:	57                   	push   edi
c001869e:	57                   	push   edi
c001869f:	68 b3 85 02 c0       	push   0xc00285b3
c00186a4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00186a8:	56                   	push   esi
c00186a9:	e8 6e 80 fe ff       	call   c000071c <strcpy>
c00186ae:	5d                   	pop    ebp
c00186af:	58                   	pop    eax
c00186b0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00186b6:	66 c1 e8 06          	shr    ax,0x6
c00186ba:	0f b6 c0             	movzx  eax,al
c00186bd:	50                   	push   eax
c00186be:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00186c4:	c1 e8 0e             	shr    eax,0xe
c00186c7:	0f b6 c0             	movzx  eax,al
c00186ca:	50                   	push   eax
c00186cb:	e8 18 f0 ff ff       	call   c00176e8 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00186d0:	5a                   	pop    edx
c00186d1:	59                   	pop    ecx
c00186d2:	50                   	push   eax
c00186d3:	56                   	push   esi
c00186d4:	e8 fa 80 fe ff       	call   c00007d3 <strcat>
c00186d9:	5f                   	pop    edi
c00186da:	5d                   	pop    ebp
c00186db:	56                   	push   esi
c00186dc:	53                   	push   ebx
c00186dd:	e8 24 b5 ff ff       	call   c0013c06 <Device::setName(char const*)>
c00186e2:	58                   	pop    eax
c00186e3:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00186e9:	5a                   	pop    edx
c00186ea:	68 b8 85 02 c0       	push   0xc00285b8
c00186ef:	50                   	push   eax
c00186f0:	e8 78 80 fe ff       	call   c000076d <strcmp>
c00186f5:	83 c4 10             	add    esp,0x10
c00186f8:	85 c0                	test   eax,eax
c00186fa:	75 20                	jne    c001871c <CPU::detectFeatures()+0x704>
c00186fc:	8b 15 48 ab 02 c0    	mov    edx,DWORD PTR ds:0xc002ab48
c0018702:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018708:	a8 01                	test   al,0x1
c001870a:	74 10                	je     c001871c <CPU::detectFeatures()+0x704>
c001870c:	83 e0 fe             	and    eax,0xfffffffe
c001870f:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018715:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001871c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018722:	c1 e8 0e             	shr    eax,0xe
c0018725:	3c 05                	cmp    al,0x5
c0018727:	0f 85 cc 02 00 00    	jne    c00189f9 <CPU::detectFeatures()+0x9e1>
c001872d:	56                   	push   esi
c001872e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018734:	83 e0 0f             	and    eax,0xf
c0018737:	50                   	push   eax
c0018738:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001873e:	66 c1 e8 06          	shr    ax,0x6
c0018742:	0f b6 c0             	movzx  eax,al
c0018745:	50                   	push   eax
c0018746:	6a 05                	push   0x5
c0018748:	e8 11 f4 ff ff       	call   c0017b5e <CPU::AMD_K6_writeback(int, int, int)>
c001874d:	e9 1f 02 00 00       	jmp    c0018971 <CPU::detectFeatures()+0x959>
c0018752:	8d 50 fd             	lea    edx,[eax-0x3]
c0018755:	83 fa 01             	cmp    edx,0x1
c0018758:	76 09                	jbe    c0018763 <CPU::detectFeatures()+0x74b>
c001875a:	83 f8 06             	cmp    eax,0x6
c001875d:	0f 85 91 01 00 00    	jne    c00188f4 <CPU::detectFeatures()+0x8dc>
c0018763:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018769:	c1 ea 0e             	shr    edx,0xe
c001876c:	80 fa 05             	cmp    dl,0x5
c001876f:	75 7b                	jne    c00187ec <CPU::detectFeatures()+0x7d4>
c0018771:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018777:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001877c:	66 81 fa 00 01       	cmp    dx,0x100
c0018781:	75 0c                	jne    c001878f <CPU::detectFeatures()+0x777>
c0018783:	51                   	push   ecx
c0018784:	51                   	push   ecx
c0018785:	68 bf 85 02 c0       	push   0xc00285bf
c001878a:	e9 dc 01 00 00       	jmp    c001896b <CPU::detectFeatures()+0x953>
c001878f:	66 81 fa 00 02       	cmp    dx,0x200
c0018794:	75 0c                	jne    c00187a2 <CPU::detectFeatures()+0x78a>
c0018796:	52                   	push   edx
c0018797:	52                   	push   edx
c0018798:	68 d2 85 02 c0       	push   0xc00285d2
c001879d:	e9 c9 01 00 00       	jmp    c001896b <CPU::detectFeatures()+0x953>
c00187a2:	66 81 fa 40 02       	cmp    dx,0x240
c00187a7:	75 0c                	jne    c00187b5 <CPU::detectFeatures()+0x79d>
c00187a9:	50                   	push   eax
c00187aa:	50                   	push   eax
c00187ab:	68 e4 85 02 c0       	push   0xc00285e4
c00187b0:	e9 b6 01 00 00       	jmp    c001896b <CPU::detectFeatures()+0x953>
c00187b5:	83 f8 06             	cmp    eax,0x6
c00187b8:	75 0c                	jne    c00187c6 <CPU::detectFeatures()+0x7ae>
c00187ba:	50                   	push   eax
c00187bb:	50                   	push   eax
c00187bc:	68 f6 85 02 c0       	push   0xc00285f6
c00187c1:	e9 a5 01 00 00       	jmp    c001896b <CPU::detectFeatures()+0x953>
c00187c6:	83 f8 04             	cmp    eax,0x4
c00187c9:	75 0c                	jne    c00187d7 <CPU::detectFeatures()+0x7bf>
c00187cb:	50                   	push   eax
c00187cc:	50                   	push   eax
c00187cd:	68 02 86 02 c0       	push   0xc0028602
c00187d2:	e9 94 01 00 00       	jmp    c001896b <CPU::detectFeatures()+0x953>
c00187d7:	83 f8 03             	cmp    eax,0x3
c00187da:	0f 85 19 02 00 00    	jne    c00189f9 <CPU::detectFeatures()+0x9e1>
c00187e0:	50                   	push   eax
c00187e1:	50                   	push   eax
c00187e2:	68 0a 86 02 c0       	push   0xc002860a
c00187e7:	e9 7f 01 00 00       	jmp    c001896b <CPU::detectFeatures()+0x953>
c00187ec:	80 fa 06             	cmp    dl,0x6
c00187ef:	0f 85 db 00 00 00    	jne    c00188d0 <CPU::detectFeatures()+0x8b8>
c00187f5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00187fb:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018800:	66 81 fa 80 01       	cmp    dx,0x180
c0018805:	75 0c                	jne    c0018813 <CPU::detectFeatures()+0x7fb>
c0018807:	50                   	push   eax
c0018808:	50                   	push   eax
c0018809:	68 15 86 02 c0       	push   0xc0028615
c001880e:	e9 58 01 00 00       	jmp    c001896b <CPU::detectFeatures()+0x953>
c0018813:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0018819:	66 f7 c1 80 ff       	test   cx,0xff80
c001881e:	75 0c                	jne    c001882c <CPU::detectFeatures()+0x814>
c0018820:	50                   	push   eax
c0018821:	50                   	push   eax
c0018822:	68 25 86 02 c0       	push   0xc0028625
c0018827:	e9 3f 01 00 00       	jmp    c001896b <CPU::detectFeatures()+0x953>
c001882c:	66 81 fa 40 02       	cmp    dx,0x240
c0018831:	75 0c                	jne    c001883f <CPU::detectFeatures()+0x827>
c0018833:	55                   	push   ebp
c0018834:	55                   	push   ebp
c0018835:	68 2c 86 02 c0       	push   0xc002862c
c001883a:	e9 2c 01 00 00       	jmp    c001896b <CPU::detectFeatures()+0x953>
c001883f:	66 81 fa 80 02       	cmp    dx,0x280
c0018844:	75 0c                	jne    c0018852 <CPU::detectFeatures()+0x83a>
c0018846:	57                   	push   edi
c0018847:	57                   	push   edi
c0018848:	68 35 86 02 c0       	push   0xc0028635
c001884d:	e9 19 01 00 00       	jmp    c001896b <CPU::detectFeatures()+0x953>
c0018852:	66 81 fa 40 03       	cmp    dx,0x340
c0018857:	74 ed                	je     c0018846 <CPU::detectFeatures()+0x82e>
c0018859:	66 81 fa c0 03       	cmp    dx,0x3c0
c001885e:	75 0c                	jne    c001886c <CPU::detectFeatures()+0x854>
c0018860:	56                   	push   esi
c0018861:	56                   	push   esi
c0018862:	68 3c 86 02 c0       	push   0xc002863c
c0018867:	e9 ff 00 00 00       	jmp    c001896b <CPU::detectFeatures()+0x953>
c001886c:	83 f8 06             	cmp    eax,0x6
c001886f:	0f 84 45 ff ff ff    	je     c00187ba <CPU::detectFeatures()+0x7a2>
c0018875:	83 f8 04             	cmp    eax,0x4
c0018878:	0f 84 4d ff ff ff    	je     c00187cb <CPU::detectFeatures()+0x7b3>
c001887e:	83 f8 03             	cmp    eax,0x3
c0018881:	0f 85 72 01 00 00    	jne    c00189f9 <CPU::detectFeatures()+0x9e1>
c0018887:	51                   	push   ecx
c0018888:	51                   	push   ecx
c0018889:	68 45 86 02 c0       	push   0xc0028645
c001888e:	53                   	push   ebx
c001888f:	e8 72 b3 ff ff       	call   c0013c06 <Device::setName(char const*)>
c0018894:	b1 c1                	mov    cl,0xc1
c0018896:	88 c8                	mov    al,cl
c0018898:	e6 22                	out    0x22,al
c001889a:	e4 23                	in     al,0x23
c001889c:	88 c2                	mov    dl,al
c001889e:	88 c8                	mov    al,cl
c00188a0:	e6 22                	out    0x22,al
c00188a2:	88 d0                	mov    al,dl
c00188a4:	83 c8 10             	or     eax,0x10
c00188a7:	e6 23                	out    0x23,al
c00188a9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00188b0:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00188b3:	89 d0                	mov    eax,edx
c00188b5:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00188bb:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00188bf:	40                   	inc    eax
c00188c0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00188c6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00188cb:	e9 a1 00 00 00       	jmp    c0018971 <CPU::detectFeatures()+0x959>
c00188d0:	83 f8 06             	cmp    eax,0x6
c00188d3:	0f 84 e1 fe ff ff    	je     c00187ba <CPU::detectFeatures()+0x7a2>
c00188d9:	83 f8 04             	cmp    eax,0x4
c00188dc:	0f 84 e9 fe ff ff    	je     c00187cb <CPU::detectFeatures()+0x7b3>
c00188e2:	83 f8 03             	cmp    eax,0x3
c00188e5:	0f 85 0e 01 00 00    	jne    c00189f9 <CPU::detectFeatures()+0x9e1>
c00188eb:	52                   	push   edx
c00188ec:	52                   	push   edx
c00188ed:	68 50 86 02 c0       	push   0xc0028650
c00188f2:	eb 77                	jmp    c001896b <CPU::detectFeatures()+0x953>
c00188f4:	83 f8 07             	cmp    eax,0x7
c00188f7:	75 09                	jne    c0018902 <CPU::detectFeatures()+0x8ea>
c00188f9:	50                   	push   eax
c00188fa:	50                   	push   eax
c00188fb:	68 5a 86 02 c0       	push   0xc002865a
c0018900:	eb 69                	jmp    c001896b <CPU::detectFeatures()+0x953>
c0018902:	83 f8 0a             	cmp    eax,0xa
c0018905:	75 09                	jne    c0018910 <CPU::detectFeatures()+0x8f8>
c0018907:	50                   	push   eax
c0018908:	50                   	push   eax
c0018909:	68 65 86 02 c0       	push   0xc0028665
c001890e:	eb 5b                	jmp    c001896b <CPU::detectFeatures()+0x953>
c0018910:	83 f8 0b             	cmp    eax,0xb
c0018913:	75 09                	jne    c001891e <CPU::detectFeatures()+0x906>
c0018915:	50                   	push   eax
c0018916:	50                   	push   eax
c0018917:	68 6d 86 02 c0       	push   0xc002866d
c001891c:	eb 4d                	jmp    c001896b <CPU::detectFeatures()+0x953>
c001891e:	83 f8 08             	cmp    eax,0x8
c0018921:	75 09                	jne    c001892c <CPU::detectFeatures()+0x914>
c0018923:	50                   	push   eax
c0018924:	50                   	push   eax
c0018925:	68 76 86 02 c0       	push   0xc0028676
c001892a:	eb 3f                	jmp    c001896b <CPU::detectFeatures()+0x953>
c001892c:	83 f8 09             	cmp    eax,0x9
c001892f:	75 09                	jne    c001893a <CPU::detectFeatures()+0x922>
c0018931:	50                   	push   eax
c0018932:	50                   	push   eax
c0018933:	68 7e 86 02 c0       	push   0xc002867e
c0018938:	eb 31                	jmp    c001896b <CPU::detectFeatures()+0x953>
c001893a:	83 f8 05             	cmp    eax,0x5
c001893d:	75 09                	jne    c0018948 <CPU::detectFeatures()+0x930>
c001893f:	50                   	push   eax
c0018940:	50                   	push   eax
c0018941:	68 86 86 02 c0       	push   0xc0028686
c0018946:	eb 23                	jmp    c001896b <CPU::detectFeatures()+0x953>
c0018948:	83 f8 0c             	cmp    eax,0xc
c001894b:	75 09                	jne    c0018956 <CPU::detectFeatures()+0x93e>
c001894d:	55                   	push   ebp
c001894e:	55                   	push   ebp
c001894f:	68 94 86 02 c0       	push   0xc0028694
c0018954:	eb 15                	jmp    c001896b <CPU::detectFeatures()+0x953>
c0018956:	83 f8 0d             	cmp    eax,0xd
c0018959:	75 09                	jne    c0018964 <CPU::detectFeatures()+0x94c>
c001895b:	57                   	push   edi
c001895c:	57                   	push   edi
c001895d:	68 9f 86 02 c0       	push   0xc002869f
c0018962:	eb 07                	jmp    c001896b <CPU::detectFeatures()+0x953>
c0018964:	56                   	push   esi
c0018965:	56                   	push   esi
c0018966:	68 b3 86 02 c0       	push   0xc00286b3
c001896b:	53                   	push   ebx
c001896c:	e8 95 b2 ff ff       	call   c0013c06 <Device::setName(char const*)>
c0018971:	83 c4 10             	add    esp,0x10
c0018974:	e9 80 00 00 00       	jmp    c00189f9 <CPU::detectFeatures()+0x9e1>
c0018979:	51                   	push   ecx
c001897a:	51                   	push   ecx
c001897b:	68 ff 84 02 c0       	push   0xc00284ff
c0018980:	57                   	push   edi
c0018981:	e8 96 7d fe ff       	call   c000071c <strcpy>
c0018986:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018990:	e8 ce 78 fe ff       	call   c0000263 <is486>
c0018995:	83 c4 10             	add    esp,0x10
c0018998:	85 c0                	test   eax,eax
c001899a:	74 2b                	je     c00189c7 <CPU::detectFeatures()+0x9af>
c001899c:	52                   	push   edx
c001899d:	52                   	push   edx
c001899e:	68 bf 86 02 c0       	push   0xc00286bf
c00189a3:	53                   	push   ebx
c00189a4:	e8 5d b2 ff ff       	call   c0013c06 <Device::setName(char const*)>
c00189a9:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00189b0:	0f 20 c0             	mov    eax,cr0
c00189b3:	83 e0 14             	and    eax,0x14
c00189b6:	83 c4 10             	add    esp,0x10
c00189b9:	83 f8 04             	cmp    eax,0x4
c00189bc:	75 1f                	jne    c00189dd <CPU::detectFeatures()+0x9c5>
c00189be:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00189c5:	eb 32                	jmp    c00189f9 <CPU::detectFeatures()+0x9e1>
c00189c7:	50                   	push   eax
c00189c8:	50                   	push   eax
c00189c9:	68 ca 86 02 c0       	push   0xc00286ca
c00189ce:	53                   	push   ebx
c00189cf:	e8 32 b2 ff ff       	call   c0013c06 <Device::setName(char const*)>
c00189d4:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00189db:	eb d3                	jmp    c00189b0 <CPU::detectFeatures()+0x998>
c00189dd:	e8 5c 78 fe ff       	call   c000023e <hasLegacyFPU>
c00189e2:	83 e0 01             	and    eax,0x1
c00189e5:	8d 14 00             	lea    edx,[eax+eax*1]
c00189e8:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00189ee:	83 e0 fd             	and    eax,0xfffffffd
c00189f1:	09 d0                	or     eax,edx
c00189f3:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00189f9:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0018a00:	83 c4 4c             	add    esp,0x4c
c0018a03:	5b                   	pop    ebx
c0018a04:	5e                   	pop    esi
c0018a05:	5f                   	pop    edi
c0018a06:	5d                   	pop    ebp
c0018a07:	c3                   	ret    

c0018a08 <CPU::setupSMEP()>:
c0018a08:	0f 20 e0             	mov    eax,cr4
c0018a0b:	0d 00 00 10 00       	or     eax,0x100000
c0018a10:	0f 22 e0             	mov    cr4,eax
c0018a13:	c3                   	ret    

c0018a14 <CPU::setupUMIP()>:
c0018a14:	0f 20 e0             	mov    eax,cr4
c0018a17:	80 cc 08             	or     ah,0x8
c0018a1a:	0f 22 e0             	mov    cr4,eax
c0018a1d:	c3                   	ret    

c0018a1e <CPU::setupTSC()>:
c0018a1e:	0f 20 e0             	mov    eax,cr4
c0018a21:	83 c8 04             	or     eax,0x4
c0018a24:	0f 22 e0             	mov    cr4,eax
c0018a27:	c3                   	ret    

c0018a28 <CPU::setupLargePages()>:
c0018a28:	0f 20 e0             	mov    eax,cr4
c0018a2b:	83 c8 10             	or     eax,0x10
c0018a2e:	0f 22 e0             	mov    cr4,eax
c0018a31:	c3                   	ret    

c0018a32 <CPU::setupPAT()>:
c0018a32:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c0018a37:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0018a3e:	74 2c                	je     c0018a6c <CPU::setupPAT()+0x3a>
c0018a40:	53                   	push   ebx
c0018a41:	83 ec 10             	sub    esp,0x10
c0018a44:	68 77 02 00 00       	push   0x277
c0018a49:	50                   	push   eax
c0018a4a:	e8 1b 60 ff ff       	call   c000ea6a <Computer::rdmsr(unsigned int)>
c0018a4f:	83 e2 f8             	and    edx,0xfffffff8
c0018a52:	83 ca 01             	or     edx,0x1
c0018a55:	52                   	push   edx
c0018a56:	50                   	push   eax
c0018a57:	68 77 02 00 00       	push   0x277
c0018a5c:	ff 35 48 ab 02 c0    	push   DWORD PTR ds:0xc002ab48
c0018a62:	e8 2f 60 ff ff       	call   c000ea96 <Computer::wrmsr(unsigned int, unsigned long long)>
c0018a67:	83 c4 28             	add    esp,0x28
c0018a6a:	5b                   	pop    ebx
c0018a6b:	c3                   	ret    
c0018a6c:	c3                   	ret    
c0018a6d:	90                   	nop

c0018a6e <CPU::setupMTRR()>:
c0018a6e:	c3                   	ret    
c0018a6f:	90                   	nop

c0018a70 <CPU::setupGlobalPages()>:
c0018a70:	0f 20 e0             	mov    eax,cr4
c0018a73:	0c 80                	or     al,0x80
c0018a75:	0f 22 e0             	mov    cr4,eax
c0018a78:	c3                   	ret    
c0018a79:	90                   	nop

c0018a7a <CPU::allowUsermodeDataAccess()>:
c0018a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a7e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018a85:	74 03                	je     c0018a8a <CPU::allowUsermodeDataAccess()+0x10>
c0018a87:	0f 01 cb             	stac   
c0018a8a:	c3                   	ret    
c0018a8b:	90                   	nop

c0018a8c <CPU::prohibitUsermodeDataAccess()>:
c0018a8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a90:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018a97:	74 03                	je     c0018a9c <CPU::prohibitUsermodeDataAccess()+0x10>
c0018a99:	0f 01 ca             	clac   
c0018a9c:	c3                   	ret    
c0018a9d:	90                   	nop

c0018a9e <CPU::setupSMAP()>:
c0018a9e:	0f 20 e0             	mov    eax,cr4
c0018aa1:	0d 00 00 20 00       	or     eax,0x200000
c0018aa6:	0f 22 e0             	mov    cr4,eax
c0018aa9:	eb e1                	jmp    c0018a8c <CPU::prohibitUsermodeDataAccess()>
c0018aab:	90                   	nop

c0018aac <CPU::setupFeatures()>:
c0018aac:	83 ec 0c             	sub    esp,0xc
c0018aaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ab3:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0018aba:	74 07                	je     c0018ac3 <CPU::setupFeatures()+0x17>
c0018abc:	52                   	push   edx
c0018abd:	e8 46 ff ff ff       	call   c0018a08 <CPU::setupSMEP()>
c0018ac2:	58                   	pop    eax
c0018ac3:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0018aca:	74 07                	je     c0018ad3 <CPU::setupFeatures()+0x27>
c0018acc:	52                   	push   edx
c0018acd:	e8 cc ff ff ff       	call   c0018a9e <CPU::setupSMAP()>
c0018ad2:	58                   	pop    eax
c0018ad3:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0018ada:	74 07                	je     c0018ae3 <CPU::setupFeatures()+0x37>
c0018adc:	52                   	push   edx
c0018add:	e8 32 ff ff ff       	call   c0018a14 <CPU::setupUMIP()>
c0018ae2:	58                   	pop    eax
c0018ae3:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0018aea:	74 07                	je     c0018af3 <CPU::setupFeatures()+0x47>
c0018aec:	52                   	push   edx
c0018aed:	e8 2c ff ff ff       	call   c0018a1e <CPU::setupTSC()>
c0018af2:	58                   	pop    eax
c0018af3:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0018afa:	74 07                	je     c0018b03 <CPU::setupFeatures()+0x57>
c0018afc:	52                   	push   edx
c0018afd:	e8 26 ff ff ff       	call   c0018a28 <CPU::setupLargePages()>
c0018b02:	59                   	pop    ecx
c0018b03:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0018b0a:	74 07                	je     c0018b13 <CPU::setupFeatures()+0x67>
c0018b0c:	52                   	push   edx
c0018b0d:	e8 5e ff ff ff       	call   c0018a70 <CPU::setupGlobalPages()>
c0018b12:	58                   	pop    eax
c0018b13:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0018b1a:	74 0c                	je     c0018b28 <CPU::setupFeatures()+0x7c>
c0018b1c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018b20:	83 c4 0c             	add    esp,0xc
c0018b23:	e9 0a ff ff ff       	jmp    c0018a32 <CPU::setupPAT()>
c0018b28:	83 c4 0c             	add    esp,0xc
c0018b2b:	c3                   	ret    

c0018b2c <CPU::open(int, int, void*)>:
c0018b2c:	57                   	push   edi
c0018b2d:	56                   	push   esi
c0018b2e:	53                   	push   ebx
c0018b2f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018b33:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018b37:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0018b3d:	83 ec 0c             	sub    esp,0xc
c0018b40:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0018b46:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0018b4c:	50                   	push   eax
c0018b4d:	e8 04 62 ff ff       	call   c000ed56 <GDT::setup()>
c0018b52:	83 c4 0c             	add    esp,0xc
c0018b55:	6a 00                	push   0x0
c0018b57:	68 ef be ad de       	push   0xdeadbeef
c0018b5c:	57                   	push   edi
c0018b5d:	e8 54 84 ff ff       	call   c0010fb6 <TSS::setup(unsigned long, unsigned long)>
c0018b62:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018b65:	e8 2c 84 ff ff       	call   c0010f96 <TSS::flush()>
c0018b6a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0018b70:	89 04 24             	mov    DWORD PTR [esp],eax
c0018b73:	e8 3a 64 ff ff       	call   c000efb2 <IDT::setup()>
c0018b78:	b8 00 04 00 00       	mov    eax,0x400
c0018b7d:	0f 23 f8             	mov    db7,eax
c0018b80:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0018b8a:	e8 dd 6e ff ff       	call   c000fa6c <Phys::allocatePage()>
c0018b8f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0018b95:	89 30                	mov    DWORD PTR [eax],esi
c0018b97:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0018b9d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0018ba0:	58                   	pop    eax
c0018ba1:	5a                   	pop    edx
c0018ba2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0018ba8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018bac:	e8 37 94 ff ff       	call   c0011fe8 <VAS::setCPUSpecific(unsigned long)>
c0018bb1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018bb4:	e8 5f f4 ff ff       	call   c0018018 <CPU::detectFeatures()>
c0018bb9:	e8 2c c3 ff ff       	call   c0014eea <setupInterruptController()>
c0018bbe:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0018bc4:	a1 60 ab 02 c0       	mov    eax,ds:0xc002ab60
c0018bc9:	83 e0 10             	and    eax,0x10
c0018bcc:	83 f8 01             	cmp    eax,0x1
c0018bcf:	19 c0                	sbb    eax,eax
c0018bd1:	83 e0 46             	and    eax,0x46
c0018bd4:	83 c0 1e             	add    eax,0x1e
c0018bd7:	89 04 24             	mov    DWORD PTR [esp],eax
c0018bda:	e8 c5 d6 ff ff       	call   c00162a4 <setupTimer(int)>
c0018bdf:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0018be5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018be8:	e8 bf fe ff ff       	call   c0018aac <CPU::setupFeatures()>
c0018bed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018bf0:	e8 a7 f1 ff ff       	call   c0017d9c <CPU::displayFeatures()>
c0018bf5:	83 c4 10             	add    esp,0x10
c0018bf8:	31 c0                	xor    eax,eax
c0018bfa:	5b                   	pop    ebx
c0018bfb:	5e                   	pop    esi
c0018bfc:	5f                   	pop    edi
c0018bfd:	c3                   	ret    

c0018bfe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0018bfe:	57                   	push   edi
c0018bff:	56                   	push   esi
c0018c00:	53                   	push   ebx
c0018c01:	51                   	push   ecx
c0018c02:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018c06:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0018c09:	0f 02 c0             	lar    eax,ax
c0018c0c:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0018c0f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018c13:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0018c16:	88 ca                	mov    dl,cl
c0018c18:	c0 ea 06             	shr    dl,0x6
c0018c1b:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0018c1f:	89 ca                	mov    edx,ecx
c0018c21:	66 c1 ea 03          	shr    dx,0x3
c0018c25:	83 e2 07             	and    edx,0x7
c0018c28:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0018c2d:	88 17                	mov    BYTE PTR [edi],dl
c0018c2f:	0f 84 a6 01 00 00    	je     c0018ddb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0018c35:	83 e1 07             	and    ecx,0x7
c0018c38:	80 f9 04             	cmp    cl,0x4
c0018c3b:	0f 84 98 00 00 00    	je     c0018cd9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0018c41:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0018c46:	0f 95 c0             	setne  al
c0018c49:	80 f9 05             	cmp    cl,0x5
c0018c4c:	0f 95 c2             	setne  dl
c0018c4f:	08 c2                	or     dl,al
c0018c51:	74 79                	je     c0018ccc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0018c53:	84 c9                	test   cl,cl
c0018c55:	75 05                	jne    c0018c5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0018c57:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0018c5a:	eb 3c                	jmp    c0018c98 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018c5c:	80 f9 01             	cmp    cl,0x1
c0018c5f:	75 05                	jne    c0018c66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0018c61:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0018c64:	eb 32                	jmp    c0018c98 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018c66:	80 f9 02             	cmp    cl,0x2
c0018c69:	75 05                	jne    c0018c70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0018c6b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0018c6e:	eb 28                	jmp    c0018c98 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018c70:	31 c0                	xor    eax,eax
c0018c72:	80 f9 03             	cmp    cl,0x3
c0018c75:	75 05                	jne    c0018c7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0018c77:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0018c7a:	eb 1c                	jmp    c0018c98 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018c7c:	80 f9 05             	cmp    cl,0x5
c0018c7f:	75 05                	jne    c0018c86 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0018c81:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0018c84:	eb 12                	jmp    c0018c98 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018c86:	80 f9 06             	cmp    cl,0x6
c0018c89:	75 05                	jne    c0018c90 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0018c8b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0018c8e:	eb 08                	jmp    c0018c98 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018c90:	80 f9 07             	cmp    cl,0x7
c0018c93:	75 03                	jne    c0018c98 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018c95:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018c98:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0018c9d:	75 10                	jne    c0018caf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0018c9f:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0018ca3:	b9 03 00 00 00       	mov    ecx,0x3
c0018ca8:	01 d0                	add    eax,edx
c0018caa:	e9 37 01 00 00       	jmp    c0018de6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0018caf:	b9 02 00 00 00       	mov    ecx,0x2
c0018cb4:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0018cb9:	0f 85 27 01 00 00    	jne    c0018de6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0018cbf:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0018cc2:	b9 06 00 00 00       	mov    ecx,0x6
c0018cc7:	e9 1a 01 00 00       	jmp    c0018de6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0018ccc:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0018ccf:	b9 06 00 00 00       	mov    ecx,0x6
c0018cd4:	e9 0f 01 00 00       	jmp    c0018de8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0018cd9:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0018cdc:	88 ca                	mov    dl,cl
c0018cde:	c0 ea 06             	shr    dl,0x6
c0018ce1:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0018ce5:	89 ca                	mov    edx,ecx
c0018ce7:	66 c1 ea 03          	shr    dx,0x3
c0018ceb:	83 e2 07             	and    edx,0x7
c0018cee:	80 e1 07             	and    cl,0x7
c0018cf1:	75 05                	jne    c0018cf8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0018cf3:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0018cf6:	eb 4c                	jmp    c0018d44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018cf8:	80 f9 01             	cmp    cl,0x1
c0018cfb:	75 05                	jne    c0018d02 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0018cfd:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0018d00:	eb 42                	jmp    c0018d44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018d02:	80 f9 02             	cmp    cl,0x2
c0018d05:	75 05                	jne    c0018d0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0018d07:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0018d0a:	eb 38                	jmp    c0018d44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018d0c:	80 f9 03             	cmp    cl,0x3
c0018d0f:	75 05                	jne    c0018d16 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0018d11:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0018d14:	eb 2e                	jmp    c0018d44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018d16:	80 f9 04             	cmp    cl,0x4
c0018d19:	75 12                	jne    c0018d2d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0018d1b:	f6 c4 60             	test   ah,0x60
c0018d1e:	75 08                	jne    c0018d28 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0018d20:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0018d23:	8d 78 14             	lea    edi,[eax+0x14]
c0018d26:	eb 1c                	jmp    c0018d44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018d28:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0018d2b:	eb 17                	jmp    c0018d44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018d2d:	80 f9 05             	cmp    cl,0x5
c0018d30:	75 05                	jne    c0018d37 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0018d32:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0018d35:	eb 0d                	jmp    c0018d44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018d37:	80 f9 06             	cmp    cl,0x6
c0018d3a:	75 05                	jne    c0018d41 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0018d3c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0018d3f:	eb 03                	jmp    c0018d44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018d41:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0018d44:	84 d2                	test   dl,dl
c0018d46:	75 05                	jne    c0018d4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0018d48:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0018d4b:	eb 3c                	jmp    c0018d89 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018d4d:	80 fa 01             	cmp    dl,0x1
c0018d50:	75 05                	jne    c0018d57 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0018d52:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0018d55:	eb 32                	jmp    c0018d89 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018d57:	80 fa 02             	cmp    dl,0x2
c0018d5a:	75 05                	jne    c0018d61 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0018d5c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0018d5f:	eb 28                	jmp    c0018d89 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018d61:	80 fa 03             	cmp    dl,0x3
c0018d64:	75 05                	jne    c0018d6b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0018d66:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0018d69:	eb 1e                	jmp    c0018d89 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018d6b:	31 c0                	xor    eax,eax
c0018d6d:	80 fa 04             	cmp    dl,0x4
c0018d70:	74 17                	je     c0018d89 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018d72:	80 fa 05             	cmp    dl,0x5
c0018d75:	75 05                	jne    c0018d7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0018d77:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0018d7a:	eb 0d                	jmp    c0018d89 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018d7c:	80 fa 06             	cmp    dl,0x6
c0018d7f:	75 05                	jne    c0018d86 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0018d81:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0018d84:	eb 03                	jmp    c0018d89 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018d86:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018d89:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0018d8e:	0f 94 c2             	sete   dl
c0018d91:	80 f9 05             	cmp    cl,0x5
c0018d94:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0018d98:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0018d9d:	d3 e0                	shl    eax,cl
c0018d9f:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0018da3:	74 0a                	je     c0018daf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0018da5:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0018da8:	b9 07 00 00 00       	mov    ecx,0x7
c0018dad:	eb 37                	jmp    c0018de6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0018daf:	01 f8                	add    eax,edi
c0018db1:	b9 03 00 00 00       	mov    ecx,0x3
c0018db6:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0018dbb:	74 2b                	je     c0018de8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0018dbd:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0018dc2:	75 0d                	jne    c0018dd1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0018dc4:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0018dc8:	01 c8                	add    eax,ecx
c0018dca:	b9 04 00 00 00       	mov    ecx,0x4
c0018dcf:	eb 17                	jmp    c0018de8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0018dd1:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0018dd4:	b9 07 00 00 00       	mov    ecx,0x7
c0018dd9:	eb 0d                	jmp    c0018de8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0018ddb:	b9 02 00 00 00       	mov    ecx,0x2
c0018de0:	b2 01                	mov    dl,0x1
c0018de2:	31 c0                	xor    eax,eax
c0018de4:	eb 02                	jmp    c0018de8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0018de6:	31 d2                	xor    edx,edx
c0018de8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018dec:	89 0b                	mov    DWORD PTR [ebx],ecx
c0018dee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018df2:	88 11                	mov    BYTE PTR [ecx],dl
c0018df4:	5a                   	pop    edx
c0018df5:	5b                   	pop    ebx
c0018df6:	5e                   	pop    esi
c0018df7:	5f                   	pop    edi
c0018df8:	c3                   	ret    

c0018df9 <Krnl::panic(char const*)>:
c0018df9:	55                   	push   ebp
c0018dfa:	89 e5                	mov    ebp,esp
c0018dfc:	53                   	push   ebx
c0018dfd:	50                   	push   eax
c0018dfe:	a1 50 b6 02 c0       	mov    eax,ds:0xc002b650
c0018e03:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0018e06:	85 c0                	test   eax,eax
c0018e08:	74 02                	je     c0018e0c <Krnl::panic(char const*)+0x13>
c0018e0a:	ff d0                	call   eax
c0018e0c:	fa                   	cli    
c0018e0d:	c6 05 54 b6 02 c0 01 	mov    BYTE PTR ds:0xc002b654,0x1
c0018e14:	83 ec 08             	sub    esp,0x8
c0018e17:	c6 05 00 9b 02 c0 00 	mov    BYTE PTR ds:0xc0029b00,0x0
c0018e1e:	53                   	push   ebx
c0018e1f:	68 04 87 02 c0       	push   0xc0028704
c0018e24:	e8 0c 98 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0018e29:	58                   	pop    eax
c0018e2a:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0018e2f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018e35:	e8 bd 79 ff ff       	call   c00107f7 <setActiveTerminal(VgaText*)>
c0018e3a:	83 c4 0c             	add    esp,0xc
c0018e3d:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0018e42:	6a 01                	push   0x1
c0018e44:	6a 0f                	push   0xf
c0018e46:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018e4c:	e8 e5 73 ff ff       	call   c0010236 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018e51:	5a                   	pop    edx
c0018e52:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0018e57:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018e5d:	e8 36 7c ff ff       	call   c0010a98 <VgaText::clearScreen()>
c0018e62:	59                   	pop    ecx
c0018e63:	58                   	pop    eax
c0018e64:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0018e69:	68 1d 87 02 c0       	push   0xc002871d
c0018e6e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018e74:	e8 9d 7d ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c0018e79:	58                   	pop    eax
c0018e7a:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0018e7f:	5a                   	pop    edx
c0018e80:	68 c4 87 02 c0       	push   0xc00287c4
c0018e85:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018e8b:	e8 86 7d ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c0018e90:	59                   	pop    ecx
c0018e91:	58                   	pop    eax
c0018e92:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0018e97:	68 39 87 02 c0       	push   0xc0028739
c0018e9c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018ea2:	e8 6f 7d ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c0018ea7:	58                   	pop    eax
c0018ea8:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0018ead:	5a                   	pop    edx
c0018eae:	53                   	push   ebx
c0018eaf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018eb5:	e8 5c 7d ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c0018eba:	59                   	pop    ecx
c0018ebb:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0018ec0:	5b                   	pop    ebx
c0018ec1:	68 59 87 02 c0       	push   0xc0028759
c0018ec6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018ecc:	e8 45 7d ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c0018ed1:	58                   	pop    eax
c0018ed2:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0018ed7:	5a                   	pop    edx
c0018ed8:	68 00 88 02 c0       	push   0xc0028800
c0018edd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018ee3:	e8 2e 7d ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c0018ee8:	59                   	pop    ecx
c0018ee9:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0018eee:	5b                   	pop    ebx
c0018eef:	68 39 87 02 c0       	push   0xc0028739
c0018ef4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018efa:	e8 17 7d ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c0018eff:	58                   	pop    eax
c0018f00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f05:	5a                   	pop    edx
c0018f06:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018f09:	83 c0 0c             	add    eax,0xc
c0018f0c:	50                   	push   eax
c0018f0d:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0018f12:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018f18:	e8 f9 7c ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c0018f1d:	59                   	pop    ecx
c0018f1e:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0018f23:	5b                   	pop    ebx
c0018f24:	68 58 87 02 c0       	push   0xc0028758
c0018f29:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018f2f:	e8 e2 7c ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c0018f34:	58                   	pop    eax
c0018f35:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0018f3a:	5a                   	pop    edx
c0018f3b:	68 2c 88 02 c0       	push   0xc002882c
c0018f40:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018f46:	e8 cb 7c ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c0018f4b:	59                   	pop    ecx
c0018f4c:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0018f51:	5b                   	pop    ebx
c0018f52:	68 6c 88 02 c0       	push   0xc002886c
c0018f57:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018f5d:	e8 b4 7c ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c0018f62:	58                   	pop    eax
c0018f63:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0018f68:	5a                   	pop    edx
c0018f69:	68 44 87 02 c0       	push   0xc0028744
c0018f6e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018f74:	e8 9d 7c ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c0018f79:	59                   	pop    ecx
c0018f7a:	5b                   	pop    ebx
c0018f7b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0018f7e:	68 5c 87 02 c0       	push   0xc002875c
c0018f83:	e8 ad 96 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0018f88:	58                   	pop    eax
c0018f89:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018f8c:	5a                   	pop    edx
c0018f8d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0018f90:	68 65 87 02 c0       	push   0xc0028765
c0018f95:	e8 9b 96 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0018f9a:	59                   	pop    ecx
c0018f9b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018f9e:	5b                   	pop    ebx
c0018f9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018fa1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0018fa4:	68 6e 87 02 c0       	push   0xc002876e
c0018fa9:	e8 87 96 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0018fae:	58                   	pop    eax
c0018faf:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0018fb4:	5a                   	pop    edx
c0018fb5:	68 b0 88 02 c0       	push   0xc00288b0
c0018fba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018fc0:	e8 51 7c ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c0018fc5:	59                   	pop    ecx
c0018fc6:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0018fcb:	5b                   	pop    ebx
c0018fcc:	68 77 87 02 c0       	push   0xc0028777
c0018fd1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018fd7:	e8 3a 7c ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c0018fdc:	0f 20 c0             	mov    eax,cr0
c0018fdf:	5a                   	pop    edx
c0018fe0:	59                   	pop    ecx
c0018fe1:	50                   	push   eax
c0018fe2:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0018fe7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018fed:	e8 4a 7c ff ff       	call   c0010c3c <VgaText::putx(unsigned int)>
c0018ff2:	5b                   	pop    ebx
c0018ff3:	58                   	pop    eax
c0018ff4:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0018ff9:	68 81 87 02 c0       	push   0xc0028781
c0018ffe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019004:	e8 0d 7c ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c0019009:	0f 20 d0             	mov    eax,cr2
c001900c:	5a                   	pop    edx
c001900d:	59                   	pop    ecx
c001900e:	50                   	push   eax
c001900f:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0019014:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001901a:	e8 1d 7c ff ff       	call   c0010c3c <VgaText::putx(unsigned int)>
c001901f:	5b                   	pop    ebx
c0019020:	58                   	pop    eax
c0019021:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0019026:	68 8b 87 02 c0       	push   0xc002878b
c001902b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019031:	e8 e0 7b ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c0019036:	0f 20 d8             	mov    eax,cr3
c0019039:	5a                   	pop    edx
c001903a:	59                   	pop    ecx
c001903b:	50                   	push   eax
c001903c:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0019041:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019047:	e8 f0 7b ff ff       	call   c0010c3c <VgaText::putx(unsigned int)>
c001904c:	5b                   	pop    ebx
c001904d:	58                   	pop    eax
c001904e:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0019053:	68 9e 87 02 c0       	push   0xc002879e
c0019058:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001905e:	e8 b3 7b ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c0019063:	0f 20 e0             	mov    eax,cr4
c0019066:	5a                   	pop    edx
c0019067:	59                   	pop    ecx
c0019068:	50                   	push   eax
c0019069:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c001906e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019074:	e8 c3 7b ff ff       	call   c0010c3c <VgaText::putx(unsigned int)>
c0019079:	5b                   	pop    ebx
c001907a:	58                   	pop    eax
c001907b:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0019080:	68 a8 87 02 c0       	push   0xc00287a8
c0019085:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001908b:	e8 86 7b ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c0019090:	5a                   	pop    edx
c0019091:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c0019096:	59                   	pop    ecx
c0019097:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001909d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00190a0:	50                   	push   eax
c00190a1:	e8 96 7b ff ff       	call   c0010c3c <VgaText::putx(unsigned int)>
c00190a6:	5b                   	pop    ebx
c00190a7:	58                   	pop    eax
c00190a8:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c00190ad:	68 bf 87 02 c0       	push   0xc00287bf
c00190b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00190b8:	e8 59 7b ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c00190bd:	5a                   	pop    edx
c00190be:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c00190c3:	59                   	pop    ecx
c00190c4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00190ca:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00190cd:	ff 72 04             	push   DWORD PTR [edx+0x4]
c00190d0:	50                   	push   eax
c00190d1:	e8 66 7b ff ff       	call   c0010c3c <VgaText::putx(unsigned int)>
c00190d6:	5b                   	pop    ebx
c00190d7:	58                   	pop    eax
c00190d8:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c00190dd:	68 bf 87 02 c0       	push   0xc00287bf
c00190e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00190e8:	e8 29 7b ff ff       	call   c0010c16 <VgaText::puts(char const*)>
c00190ed:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c00190f2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00190f5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00190fb:	8b 12                	mov    edx,DWORD PTR [edx]
c00190fd:	59                   	pop    ecx
c00190fe:	5b                   	pop    ebx
c00190ff:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019102:	50                   	push   eax
c0019103:	e8 34 7b ff ff       	call   c0010c3c <VgaText::putx(unsigned int)>
c0019108:	83 c4 10             	add    esp,0x10
c001910b:	b2 fe                	mov    dl,0xfe
c001910d:	e4 60                	in     al,0x60
c001910f:	3c 1c                	cmp    al,0x1c
c0019111:	74 04                	je     c0019117 <Krnl::panic(char const*)+0x31e>
c0019113:	3c 5a                	cmp    al,0x5a
c0019115:	75 f6                	jne    c001910d <Krnl::panic(char const*)+0x314>
c0019117:	e4 64                	in     al,0x64
c0019119:	a8 02                	test   al,0x2
c001911b:	75 fa                	jne    c0019117 <Krnl::panic(char const*)+0x31e>
c001911d:	88 d0                	mov    al,dl
c001911f:	e6 64                	out    0x64,al
c0019121:	fa                   	cli    
c0019122:	f4                   	hlt    
c0019123:	eb e8                	jmp    c001910d <Krnl::panic(char const*)+0x314>

c0019125 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0019125:	55                   	push   ebp
c0019126:	57                   	push   edi
c0019127:	56                   	push   esi
c0019128:	53                   	push   ebx
c0019129:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001912f:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0019136:	8a 1e                	mov    bl,BYTE PTR [esi]
c0019138:	8d 6e 01             	lea    ebp,[esi+0x1]
c001913b:	80 fb 40             	cmp    bl,0x40
c001913e:	75 1b                	jne    c001915b <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0019140:	8a 16                	mov    dl,BYTE PTR [esi]
c0019142:	84 d2                	test   dl,dl
c0019144:	0f 84 f1 00 00 00    	je     c001923b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001914a:	8d 46 01             	lea    eax,[esi+0x1]
c001914d:	80 fa 3a             	cmp    dl,0x3a
c0019150:	74 04                	je     c0019156 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0019152:	89 c6                	mov    esi,eax
c0019154:	eb ea                	jmp    c0019140 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0019156:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0019159:	89 c6                	mov    esi,eax
c001915b:	50                   	push   eax
c001915c:	6a 40                	push   0x40
c001915e:	6a 00                	push   0x0
c0019160:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019164:	50                   	push   eax
c0019165:	e8 13 75 fe ff       	call   c000067d <memset>
c001916a:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0019171:	31 c0                	xor    eax,eax
c0019173:	83 c4 10             	add    esp,0x10
c0019176:	8a 0f                	mov    cl,BYTE PTR [edi]
c0019178:	84 c9                	test   cl,cl
c001917a:	0f 84 bb 00 00 00    	je     c001923b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019180:	3d c7 00 00 00       	cmp    eax,0xc7
c0019185:	0f 8f b0 00 00 00    	jg     c001923b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001918b:	80 f9 0a             	cmp    cl,0xa
c001918e:	0f 85 98 00 00 00    	jne    c001922c <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0019194:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0019199:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001919d:	a8 df                	test   al,0xdf
c001919f:	0f 94 c1             	sete   cl
c00191a2:	3c 23                	cmp    al,0x23
c00191a4:	0f 94 c2             	sete   dl
c00191a7:	08 d1                	or     cl,dl
c00191a9:	75 4a                	jne    c00191f5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00191ab:	8d 50 f7             	lea    edx,[eax-0x9]
c00191ae:	80 fa 01             	cmp    dl,0x1
c00191b1:	76 42                	jbe    c00191f5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00191b3:	3c 5b                	cmp    al,0x5b
c00191b5:	75 42                	jne    c00191f9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00191b7:	80 fb 40             	cmp    bl,0x40
c00191ba:	75 39                	jne    c00191f5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00191bc:	83 ec 0c             	sub    esp,0xc
c00191bf:	8d 54 24 65          	lea    edx,[esp+0x65]
c00191c3:	52                   	push   edx
c00191c4:	e8 d1 74 fe ff       	call   c000069a <strlen>
c00191c9:	83 c4 10             	add    esp,0x10
c00191cc:	83 f8 3f             	cmp    eax,0x3f
c00191cf:	77 6a                	ja     c001923b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00191d1:	50                   	push   eax
c00191d2:	50                   	push   eax
c00191d3:	8d 54 24 61          	lea    edx,[esp+0x61]
c00191d7:	52                   	push   edx
c00191d8:	8d 54 24 24          	lea    edx,[esp+0x24]
c00191dc:	52                   	push   edx
c00191dd:	e8 3a 75 fe ff       	call   c000071c <strcpy>
c00191e2:	58                   	pop    eax
c00191e3:	8d 54 24 24          	lea    edx,[esp+0x24]
c00191e7:	52                   	push   edx
c00191e8:	e8 ad 74 fe ff       	call   c000069a <strlen>
c00191ed:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00191f2:	83 c4 10             	add    esp,0x10
c00191f5:	31 d2                	xor    edx,edx
c00191f7:	eb 3a                	jmp    c0019233 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c00191f9:	80 fb 40             	cmp    bl,0x40
c00191fc:	74 06                	je     c0019204 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c00191fe:	8d 44 24 58          	lea    eax,[esp+0x58]
c0019202:	eb 20                	jmp    c0019224 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0019204:	50                   	push   eax
c0019205:	50                   	push   eax
c0019206:	55                   	push   ebp
c0019207:	8d 44 24 24          	lea    eax,[esp+0x24]
c001920b:	50                   	push   eax
c001920c:	e8 5c 75 fe ff       	call   c000076d <strcmp>
c0019211:	83 c4 10             	add    esp,0x10
c0019214:	85 c0                	test   eax,eax
c0019216:	75 dd                	jne    c00191f5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019218:	eb e4                	jmp    c00191fe <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001921a:	8d 50 01             	lea    edx,[eax+0x1]
c001921d:	80 f9 3d             	cmp    cl,0x3d
c0019220:	74 1d                	je     c001923f <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0019222:	89 d0                	mov    eax,edx
c0019224:	8a 08                	mov    cl,BYTE PTR [eax]
c0019226:	84 c9                	test   cl,cl
c0019228:	75 f0                	jne    c001921a <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001922a:	eb 0f                	jmp    c001923b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001922c:	8d 50 01             	lea    edx,[eax+0x1]
c001922f:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0019233:	47                   	inc    edi
c0019234:	89 d0                	mov    eax,edx
c0019236:	e9 3b ff ff ff       	jmp    c0019176 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001923b:	31 c0                	xor    eax,eax
c001923d:	eb 33                	jmp    c0019272 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001923f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019243:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0019246:	50                   	push   eax
c0019247:	50                   	push   eax
c0019248:	8d 44 24 60          	lea    eax,[esp+0x60]
c001924c:	50                   	push   eax
c001924d:	56                   	push   esi
c001924e:	e8 1a 75 fe ff       	call   c000076d <strcmp>
c0019253:	83 c4 10             	add    esp,0x10
c0019256:	85 c0                	test   eax,eax
c0019258:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001925c:	75 97                	jne    c00191f5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001925e:	51                   	push   ecx
c001925f:	51                   	push   ecx
c0019260:	52                   	push   edx
c0019261:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0019268:	e8 af 74 fe ff       	call   c000071c <strcpy>
c001926d:	83 c4 10             	add    esp,0x10
c0019270:	b0 01                	mov    al,0x1
c0019272:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019278:	5b                   	pop    ebx
c0019279:	5e                   	pop    esi
c001927a:	5f                   	pop    edi
c001927b:	5d                   	pop    ebp
c001927c:	c3                   	ret    

c001927d <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001927d:	57                   	push   edi
c001927e:	56                   	push   esi
c001927f:	53                   	push   ebx
c0019280:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019286:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001928d:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0019294:	53                   	push   ebx
c0019295:	e8 00 74 fe ff       	call   c000069a <strlen>
c001929a:	89 34 24             	mov    DWORD PTR [esp],esi
c001929d:	89 c7                	mov    edi,eax
c001929f:	e8 f6 73 fe ff       	call   c000069a <strlen>
c00192a4:	83 c4 10             	add    esp,0x10
c00192a7:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00192ab:	3d ff 00 00 00       	cmp    eax,0xff
c00192b0:	0f 87 d3 00 00 00    	ja     c0019389 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00192b6:	57                   	push   edi
c00192b7:	57                   	push   edi
c00192b8:	56                   	push   esi
c00192b9:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00192bd:	56                   	push   esi
c00192be:	e8 59 74 fe ff       	call   c000071c <strcpy>
c00192c3:	58                   	pop    eax
c00192c4:	5a                   	pop    edx
c00192c5:	68 81 8c 02 c0       	push   0xc0028c81
c00192ca:	56                   	push   esi
c00192cb:	e8 03 75 fe ff       	call   c00007d3 <strcat>
c00192d0:	59                   	pop    ecx
c00192d1:	5f                   	pop    edi
c00192d2:	53                   	push   ebx
c00192d3:	56                   	push   esi
c00192d4:	e8 fa 74 fe ff       	call   c00007d3 <strcat>
c00192d9:	58                   	pop    eax
c00192da:	5a                   	pop    edx
c00192db:	68 d6 88 02 c0       	push   0xc00288d6
c00192e0:	56                   	push   esi
c00192e1:	e8 ed 74 fe ff       	call   c00007d3 <strcat>
c00192e6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00192ed:	e8 d0 61 ff ff       	call   c000f4c2 <malloc>
c00192f2:	83 c4 0c             	add    esp,0xc
c00192f5:	89 c3                	mov    ebx,eax
c00192f7:	ff 35 54 c0 02 c0    	push   DWORD PTR ds:0xc002c054
c00192fd:	56                   	push   esi
c00192fe:	50                   	push   eax
c00192ff:	e8 60 98 ff ff       	call   c0012b64 <File::File(char const*, Process*)>
c0019304:	83 c4 10             	add    esp,0x10
c0019307:	85 db                	test   ebx,ebx
c0019309:	74 7e                	je     c0019389 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001930b:	51                   	push   ecx
c001930c:	51                   	push   ecx
c001930d:	6a 01                	push   0x1
c001930f:	53                   	push   ebx
c0019310:	e8 b3 98 ff ff       	call   c0012bc8 <File::open(FileOpenMode)>
c0019315:	83 c4 10             	add    esp,0x10
c0019318:	85 c0                	test   eax,eax
c001931a:	74 08                	je     c0019324 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001931c:	83 ec 0c             	sub    esp,0xc
c001931f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019321:	53                   	push   ebx
c0019322:	eb 5f                	jmp    c0019383 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0019324:	52                   	push   edx
c0019325:	8d 44 24 17          	lea    eax,[esp+0x17]
c0019329:	50                   	push   eax
c001932a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001932e:	50                   	push   eax
c001932f:	53                   	push   ebx
c0019330:	e8 3f 9b ff ff       	call   c0012e74 <File::stat(unsigned long long*, bool*)>
c0019335:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019339:	83 c4 10             	add    esp,0x10
c001933c:	89 c1                	mov    ecx,eax
c001933e:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0019342:	74 31                	je     c0019375 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0019344:	83 ec 0c             	sub    esp,0xc
c0019347:	50                   	push   eax
c0019348:	e8 75 61 ff ff       	call   c000f4c2 <malloc>
c001934d:	89 c6                	mov    esi,eax
c001934f:	58                   	pop    eax
c0019350:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019352:	8d 54 24 20          	lea    edx,[esp+0x20]
c0019356:	52                   	push   edx
c0019357:	56                   	push   esi
c0019358:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001935c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019360:	53                   	push   ebx
c0019361:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019364:	83 c4 20             	add    esp,0x20
c0019367:	85 c0                	test   eax,eax
c0019369:	75 0a                	jne    c0019375 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001936b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001936f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0019373:	74 18                	je     c001938d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0019375:	83 ec 0c             	sub    esp,0xc
c0019378:	53                   	push   ebx
c0019379:	e8 a8 98 ff ff       	call   c0012c26 <File::close()>
c001937e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019380:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019383:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019386:	83 c4 10             	add    esp,0x10
c0019389:	31 c0                	xor    eax,eax
c001938b:	eb 3b                	jmp    c00193c8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001938d:	83 ec 0c             	sub    esp,0xc
c0019390:	53                   	push   ebx
c0019391:	e8 90 98 ff ff       	call   c0012c26 <File::close()>
c0019396:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019398:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001939b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001939e:	83 c4 0c             	add    esp,0xc
c00193a1:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00193a8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00193af:	56                   	push   esi
c00193b0:	e8 70 fd ff ff       	call   c0019125 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00193b5:	89 34 24             	mov    DWORD PTR [esp],esi
c00193b8:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00193bc:	e8 11 61 ff ff       	call   c000f4d2 <free>
c00193c1:	83 c4 10             	add    esp,0x10
c00193c4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00193c8:	81 c4 20 01 00 00    	add    esp,0x120
c00193ce:	5b                   	pop    ebx
c00193cf:	5e                   	pop    esi
c00193d0:	5f                   	pop    edi
c00193d1:	c3                   	ret    

c00193d2 <Reg::getLine(char*, char*, char*)>:
c00193d2:	57                   	push   edi
c00193d3:	56                   	push   esi
c00193d4:	53                   	push   ebx
c00193d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00193d9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00193dd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00193e1:	57                   	push   edi
c00193e2:	56                   	push   esi
c00193e3:	53                   	push   ebx
c00193e4:	68 db 88 02 c0       	push   0xc00288db
c00193e9:	e8 8f fe ff ff       	call   c001927d <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00193ee:	83 c4 10             	add    esp,0x10
c00193f1:	84 c0                	test   al,al
c00193f3:	75 10                	jne    c0019405 <Reg::getLine(char*, char*, char*)+0x33>
c00193f5:	57                   	push   edi
c00193f6:	56                   	push   esi
c00193f7:	53                   	push   ebx
c00193f8:	68 00 89 02 c0       	push   0xc0028900
c00193fd:	e8 7b fe ff ff       	call   c001927d <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0019402:	83 c4 10             	add    esp,0x10
c0019405:	5b                   	pop    ebx
c0019406:	5e                   	pop    esi
c0019407:	5f                   	pop    edi
c0019408:	c3                   	ret    

c0019409 <Reg::readInt(char*, char*, int*)>:
c0019409:	55                   	push   ebp
c001940a:	57                   	push   edi
c001940b:	56                   	push   esi
c001940c:	53                   	push   ebx
c001940d:	81 ec f0 00 00 00    	sub    esp,0xf0
c0019413:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0019417:	57                   	push   edi
c0019418:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001941f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0019426:	e8 a7 ff ff ff       	call   c00193d2 <Reg::getLine(char*, char*, char*)>
c001942b:	83 c4 10             	add    esp,0x10
c001942e:	84 c0                	test   al,al
c0019430:	0f 84 b3 00 00 00    	je     c00194e9 <Reg::readInt(char*, char*, int*)+0xe0>
c0019436:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001943a:	80 fa 2b             	cmp    dl,0x2b
c001943d:	74 0c                	je     c001944b <Reg::readInt(char*, char*, int*)+0x42>
c001943f:	80 fa 2d             	cmp    dl,0x2d
c0019442:	75 0e                	jne    c0019452 <Reg::readInt(char*, char*, int*)+0x49>
c0019444:	ba 01 00 00 00       	mov    edx,0x1
c0019449:	eb 0b                	jmp    c0019456 <Reg::readInt(char*, char*, int*)+0x4d>
c001944b:	ba 01 00 00 00       	mov    edx,0x1
c0019450:	eb 02                	jmp    c0019454 <Reg::readInt(char*, char*, int*)+0x4b>
c0019452:	31 d2                	xor    edx,edx
c0019454:	31 c0                	xor    eax,eax
c0019456:	be 0a 00 00 00       	mov    esi,0xa
c001945b:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0019460:	75 20                	jne    c0019482 <Reg::readInt(char*, char*, int*)+0x79>
c0019462:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0019466:	80 f9 78             	cmp    cl,0x78
c0019469:	75 0a                	jne    c0019475 <Reg::readInt(char*, char*, int*)+0x6c>
c001946b:	83 c2 02             	add    edx,0x2
c001946e:	be 10 00 00 00       	mov    esi,0x10
c0019473:	eb 0d                	jmp    c0019482 <Reg::readInt(char*, char*, int*)+0x79>
c0019475:	80 f9 62             	cmp    cl,0x62
c0019478:	75 08                	jne    c0019482 <Reg::readInt(char*, char*, int*)+0x79>
c001947a:	83 c2 02             	add    edx,0x2
c001947d:	be 02 00 00 00       	mov    esi,0x2
c0019482:	01 d7                	add    edi,edx
c0019484:	31 d2                	xor    edx,edx
c0019486:	8a 1f                	mov    bl,BYTE PTR [edi]
c0019488:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001948c:	80 fb 0d             	cmp    bl,0xd
c001948f:	0f 94 c3             	sete   bl
c0019492:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0019497:	0f 94 c1             	sete   cl
c001949a:	08 cb                	or     bl,cl
c001949c:	75 3a                	jne    c00194d8 <Reg::readInt(char*, char*, int*)+0xcf>
c001949e:	0f af d6             	imul   edx,esi
c00194a1:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00194a6:	83 fe 10             	cmp    esi,0x10
c00194a9:	75 26                	jne    c00194d1 <Reg::readInt(char*, char*, int*)+0xc8>
c00194ab:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00194af:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00194b2:	89 e9                	mov    ecx,ebp
c00194b4:	80 f9 05             	cmp    cl,0x5
c00194b7:	77 06                	ja     c00194bf <Reg::readInt(char*, char*, int*)+0xb6>
c00194b9:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00194bd:	eb 16                	jmp    c00194d5 <Reg::readInt(char*, char*, int*)+0xcc>
c00194bf:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00194c3:	83 e9 61             	sub    ecx,0x61
c00194c6:	80 f9 05             	cmp    cl,0x5
c00194c9:	77 06                	ja     c00194d1 <Reg::readInt(char*, char*, int*)+0xc8>
c00194cb:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00194cf:	eb 04                	jmp    c00194d5 <Reg::readInt(char*, char*, int*)+0xcc>
c00194d1:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00194d5:	47                   	inc    edi
c00194d6:	eb ae                	jmp    c0019486 <Reg::readInt(char*, char*, int*)+0x7d>
c00194d8:	84 c0                	test   al,al
c00194da:	74 02                	je     c00194de <Reg::readInt(char*, char*, int*)+0xd5>
c00194dc:	f7 da                	neg    edx
c00194de:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00194e5:	89 10                	mov    DWORD PTR [eax],edx
c00194e7:	88 d8                	mov    al,bl
c00194e9:	81 c4 ec 00 00 00    	add    esp,0xec
c00194ef:	5b                   	pop    ebx
c00194f0:	5e                   	pop    esi
c00194f1:	5f                   	pop    edi
c00194f2:	5d                   	pop    ebp
c00194f3:	c3                   	ret    

c00194f4 <Reg::readString(char*, char*, char*, int)>:
c00194f4:	57                   	push   edi
c00194f5:	56                   	push   esi
c00194f6:	53                   	push   ebx
c00194f7:	81 ec d4 00 00 00    	sub    esp,0xd4
c00194fd:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0019504:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0019508:	57                   	push   edi
c0019509:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0019510:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0019517:	e8 b6 fe ff ff       	call   c00193d2 <Reg::getLine(char*, char*, char*)>
c001951c:	83 c4 10             	add    esp,0x10
c001951f:	89 c6                	mov    esi,eax
c0019521:	84 c0                	test   al,al
c0019523:	74 44                	je     c0019569 <Reg::readString(char*, char*, char*, int)+0x75>
c0019525:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001952c:	31 c0                	xor    eax,eax
c001952e:	4a                   	dec    edx
c001952f:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0019532:	84 c9                	test   cl,cl
c0019534:	74 0f                	je     c0019545 <Reg::readString(char*, char*, char*, int)+0x51>
c0019536:	39 c2                	cmp    edx,eax
c0019538:	7e 0b                	jle    c0019545 <Reg::readString(char*, char*, char*, int)+0x51>
c001953a:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001953d:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0019542:	40                   	inc    eax
c0019543:	eb ea                	jmp    c001952f <Reg::readString(char*, char*, char*, int)+0x3b>
c0019545:	83 ec 0c             	sub    esp,0xc
c0019548:	53                   	push   ebx
c0019549:	e8 4c 71 fe ff       	call   c000069a <strlen>
c001954e:	83 c4 10             	add    esp,0x10
c0019551:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0019556:	75 11                	jne    c0019569 <Reg::readString(char*, char*, char*, int)+0x75>
c0019558:	83 ec 0c             	sub    esp,0xc
c001955b:	53                   	push   ebx
c001955c:	e8 39 71 fe ff       	call   c000069a <strlen>
c0019561:	83 c4 10             	add    esp,0x10
c0019564:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0019569:	81 c4 d0 00 00 00    	add    esp,0xd0
c001956f:	89 f0                	mov    eax,esi
c0019571:	5b                   	pop    ebx
c0019572:	5e                   	pop    esi
c0019573:	5f                   	pop    edi
c0019574:	c3                   	ret    

c0019575 <Reg::readBool(char*, char*, bool*)>:
c0019575:	83 ec 20             	sub    esp,0x20
c0019578:	8d 44 24 10          	lea    eax,[esp+0x10]
c001957c:	50                   	push   eax
c001957d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019581:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019585:	e8 7f fe ff ff       	call   c0019409 <Reg::readInt(char*, char*, int*)>
c001958a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001958f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019593:	0f 95 02             	setne  BYTE PTR [edx]
c0019596:	83 c4 2c             	add    esp,0x2c
c0019599:	c3                   	ret    

c001959a <Reg::readBoolWithDefault(char*, char*, bool)>:
c001959a:	53                   	push   ebx
c001959b:	83 ec 1c             	sub    esp,0x1c
c001959e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00195a2:	8d 44 24 13          	lea    eax,[esp+0x13]
c00195a6:	50                   	push   eax
c00195a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00195ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00195af:	e8 c1 ff ff ff       	call   c0019575 <Reg::readBool(char*, char*, bool*)>
c00195b4:	83 c4 10             	add    esp,0x10
c00195b7:	84 c0                	test   al,al
c00195b9:	74 04                	je     c00195bf <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00195bb:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00195bf:	88 d8                	mov    al,bl
c00195c1:	83 c4 18             	add    esp,0x18
c00195c4:	5b                   	pop    ebx
c00195c5:	c3                   	ret    

c00195c6 <Reg::readIntWithDefault(char*, char*, int)>:
c00195c6:	53                   	push   ebx
c00195c7:	83 ec 1c             	sub    esp,0x1c
c00195ca:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00195ce:	8d 44 24 10          	lea    eax,[esp+0x10]
c00195d2:	50                   	push   eax
c00195d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00195d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00195db:	e8 29 fe ff ff       	call   c0019409 <Reg::readInt(char*, char*, int*)>
c00195e0:	83 c4 10             	add    esp,0x10
c00195e3:	84 c0                	test   al,al
c00195e5:	74 04                	je     c00195eb <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00195e7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00195eb:	89 d8                	mov    eax,ebx
c00195ed:	83 c4 18             	add    esp,0x18
c00195f0:	5b                   	pop    ebx
c00195f1:	c3                   	ret    

c00195f2 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00195f2:	56                   	push   esi
c00195f3:	53                   	push   ebx
c00195f4:	51                   	push   ecx
c00195f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00195f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00195fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019601:	56                   	push   esi
c0019602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001960a:	e8 e5 fe ff ff       	call   c00194f4 <Reg::readString(char*, char*, char*, int)>
c001960f:	83 c4 10             	add    esp,0x10
c0019612:	84 c0                	test   al,al
c0019614:	74 02                	je     c0019618 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c0019616:	89 f3                	mov    ebx,esi
c0019618:	89 d8                	mov    eax,ebx
c001961a:	5a                   	pop    edx
c001961b:	5b                   	pop    ebx
c001961c:	5e                   	pop    esi
c001961d:	c3                   	ret    

c001961e <Sys::exit(regs*)>:
c001961e:	83 ec 18             	sub    esp,0x18
c0019621:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019625:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019628:	e8 f5 31 00 00       	call   c001c822 <terminateTask(int)>
c001962d:	83 c8 ff             	or     eax,0xffffffff
c0019630:	83 c4 1c             	add    esp,0x1c
c0019633:	89 c2                	mov    edx,eax
c0019635:	c3                   	ret    

c0019636 <Sys::loadDLL(regs*)>:
c0019636:	56                   	push   esi
c0019637:	53                   	push   ebx
c0019638:	31 d2                	xor    edx,edx
c001963a:	51                   	push   ecx
c001963b:	b8 01 00 00 00       	mov    eax,0x1
c0019640:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019644:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0019648:	0f 84 8c 00 00 00    	je     c00196da <Sys::loadDLL(regs*)+0xa4>
c001964e:	83 ec 0c             	sub    esp,0xc
c0019651:	68 14 01 00 00       	push   0x114
c0019656:	e8 67 5e ff ff       	call   c000f4c2 <malloc>
c001965b:	83 c4 0c             	add    esp,0xc
c001965e:	89 c3                	mov    ebx,eax
c0019660:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019665:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019668:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001966b:	53                   	push   ebx
c001966c:	e8 f3 94 ff ff       	call   c0012b64 <File::File(char const*, Process*)>
c0019671:	83 c4 10             	add    esp,0x10
c0019674:	31 d2                	xor    edx,edx
c0019676:	b8 02 00 00 00       	mov    eax,0x2
c001967b:	85 db                	test   ebx,ebx
c001967d:	74 5b                	je     c00196da <Sys::loadDLL(regs*)+0xa4>
c001967f:	83 ec 0c             	sub    esp,0xc
c0019682:	53                   	push   ebx
c0019683:	e8 ae 97 ff ff       	call   c0012e36 <File::exists()>
c0019688:	83 c4 10             	add    esp,0x10
c001968b:	84 c0                	test   al,al
c001968d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001968f:	75 11                	jne    c00196a2 <Sys::loadDLL(regs*)+0x6c>
c0019691:	83 ec 0c             	sub    esp,0xc
c0019694:	53                   	push   ebx
c0019695:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019698:	83 c4 10             	add    esp,0x10
c001969b:	b8 03 00 00 00       	mov    eax,0x3
c00196a0:	eb 36                	jmp    c00196d8 <Sys::loadDLL(regs*)+0xa2>
c00196a2:	83 ec 0c             	sub    esp,0xc
c00196a5:	53                   	push   ebx
c00196a6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00196a9:	58                   	pop    eax
c00196aa:	5a                   	pop    edx
c00196ab:	6a 00                	push   0x0
c00196ad:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00196b0:	e8 13 21 00 00       	call   c001b7c8 <Thr::loadDLL(char const*, bool)>
c00196b5:	83 c4 10             	add    esp,0x10
c00196b8:	89 c1                	mov    ecx,eax
c00196ba:	31 d2                	xor    edx,edx
c00196bc:	b8 04 00 00 00       	mov    eax,0x4
c00196c1:	85 c9                	test   ecx,ecx
c00196c3:	74 15                	je     c00196da <Sys::loadDLL(regs*)+0xa4>
c00196c5:	53                   	push   ebx
c00196c6:	53                   	push   ebx
c00196c7:	ff 35 48 ab 02 c0    	push   DWORD PTR ds:0xc002ab48
c00196cd:	51                   	push   ecx
c00196ce:	e8 04 23 00 00       	call   c001b9d7 <Thr::executeDLL(unsigned long, void*)>
c00196d3:	83 c4 10             	add    esp,0x10
c00196d6:	31 c0                	xor    eax,eax
c00196d8:	31 d2                	xor    edx,edx
c00196da:	59                   	pop    ecx
c00196db:	5b                   	pop    ebx
c00196dc:	5e                   	pop    esi
c00196dd:	c3                   	ret    

c00196de <Sys::read(regs*)>:
c00196de:	57                   	push   edi
c00196df:	56                   	push   esi
c00196e0:	53                   	push   ebx
c00196e1:	83 ec 10             	sub    esp,0x10
c00196e4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00196e8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00196eb:	83 f8 02             	cmp    eax,0x2
c00196ee:	77 10                	ja     c0019700 <Sys::read(regs*)+0x22>
c00196f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00196f5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00196f8:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00196fe:	eb 0e                	jmp    c001970e <Sys::read(regs*)+0x30>
c0019700:	83 ec 0c             	sub    esp,0xc
c0019703:	50                   	push   eax
c0019704:	e8 e6 7d ff ff       	call   c00114ef <getFromFileDescriptor(int)>
c0019709:	83 c4 10             	add    esp,0x10
c001970c:	89 c1                	mov    ecx,eax
c001970e:	83 c8 ff             	or     eax,0xffffffff
c0019711:	85 c9                	test   ecx,ecx
c0019713:	89 c2                	mov    edx,eax
c0019715:	74 28                	je     c001973f <Sys::read(regs*)+0x61>
c0019717:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001971f:	31 ff                	xor    edi,edi
c0019721:	83 ec 0c             	sub    esp,0xc
c0019724:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019726:	8d 54 24 18          	lea    edx,[esp+0x18]
c001972a:	52                   	push   edx
c001972b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001972e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0019731:	57                   	push   edi
c0019732:	56                   	push   esi
c0019733:	51                   	push   ecx
c0019734:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019737:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001973b:	83 c4 20             	add    esp,0x20
c001973e:	99                   	cdq    
c001973f:	83 c4 10             	add    esp,0x10
c0019742:	5b                   	pop    ebx
c0019743:	5e                   	pop    esi
c0019744:	5f                   	pop    edi
c0019745:	c3                   	ret    

c0019746 <Sys::sbrk(regs*)>:
c0019746:	56                   	push   esi
c0019747:	53                   	push   ebx
c0019748:	50                   	push   eax
c0019749:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001974e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019752:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019755:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0019758:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001975e:	85 db                	test   ebx,ebx
c0019760:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0019763:	74 02                	je     c0019767 <Sys::sbrk(regs*)+0x21>
c0019765:	79 06                	jns    c001976d <Sys::sbrk(regs*)+0x27>
c0019767:	89 f0                	mov    eax,esi
c0019769:	31 d2                	xor    edx,edx
c001976b:	eb 2a                	jmp    c0019797 <Sys::sbrk(regs*)+0x51>
c001976d:	83 c8 ff             	or     eax,0xffffffff
c0019770:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0019776:	89 c2                	mov    edx,eax
c0019778:	77 1d                	ja     c0019797 <Sys::sbrk(regs*)+0x51>
c001977a:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0019780:	50                   	push   eax
c0019781:	c1 ea 0c             	shr    edx,0xc
c0019784:	68 07 04 00 00       	push   0x407
c0019789:	52                   	push   edx
c001978a:	51                   	push   ecx
c001978b:	e8 80 86 ff ff       	call   c0011e10 <VAS::allocatePages(int, int)>
c0019790:	89 f0                	mov    eax,esi
c0019792:	31 d2                	xor    edx,edx
c0019794:	83 c4 10             	add    esp,0x10
c0019797:	59                   	pop    ecx
c0019798:	5b                   	pop    ebx
c0019799:	5e                   	pop    esi
c001979a:	c3                   	ret    

c001979b <Sys::write(regs*)>:
c001979b:	57                   	push   edi
c001979c:	56                   	push   esi
c001979d:	53                   	push   ebx
c001979e:	83 ec 10             	sub    esp,0x10
c00197a1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00197a5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00197a8:	83 f8 02             	cmp    eax,0x2
c00197ab:	77 10                	ja     c00197bd <Sys::write(regs*)+0x22>
c00197ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00197b2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00197b5:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00197bb:	eb 0e                	jmp    c00197cb <Sys::write(regs*)+0x30>
c00197bd:	83 ec 0c             	sub    esp,0xc
c00197c0:	50                   	push   eax
c00197c1:	e8 29 7d ff ff       	call   c00114ef <getFromFileDescriptor(int)>
c00197c6:	83 c4 10             	add    esp,0x10
c00197c9:	89 c1                	mov    ecx,eax
c00197cb:	83 c8 ff             	or     eax,0xffffffff
c00197ce:	85 c9                	test   ecx,ecx
c00197d0:	89 c2                	mov    edx,eax
c00197d2:	74 28                	je     c00197fc <Sys::write(regs*)+0x61>
c00197d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00197dc:	31 ff                	xor    edi,edi
c00197de:	83 ec 0c             	sub    esp,0xc
c00197e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00197e3:	8d 54 24 18          	lea    edx,[esp+0x18]
c00197e7:	52                   	push   edx
c00197e8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00197eb:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00197ee:	57                   	push   edi
c00197ef:	56                   	push   esi
c00197f0:	51                   	push   ecx
c00197f1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00197f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00197f8:	83 c4 20             	add    esp,0x20
c00197fb:	99                   	cdq    
c00197fc:	83 c4 10             	add    esp,0x10
c00197ff:	5b                   	pop    ebx
c0019800:	5e                   	pop    esi
c0019801:	5f                   	pop    edi
c0019802:	c3                   	ret    

c0019803 <Sys::yield(regs*)>:
c0019803:	83 ec 0c             	sub    esp,0xc
c0019806:	e8 fa 25 00 00       	call   c001be05 <lockScheduler()>
c001980b:	e8 30 29 00 00       	call   c001c140 <schedule()>
c0019810:	e8 f2 25 00 00       	call   c001be07 <unlockScheduler()>
c0019815:	31 c0                	xor    eax,eax
c0019817:	31 d2                	xor    edx,edx
c0019819:	83 c4 0c             	add    esp,0xc
c001981c:	c3                   	ret    

c001981d <sysCallGetPID(regs*)>:
c001981d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019822:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019825:	8b 00                	mov    eax,DWORD PTR [eax]
c0019827:	99                   	cdq    
c0019828:	c3                   	ret    

c0019829 <sysCallSeekDir(regs*)>:
c0019829:	31 c0                	xor    eax,eax
c001982b:	31 d2                	xor    edx,edx
c001982d:	c3                   	ret    

c001982e <sysCallTellDir(regs*)>:
c001982e:	31 c0                	xor    eax,eax
c0019830:	31 d2                	xor    edx,edx
c0019832:	c3                   	ret    

c0019833 <sysCallVerify(regs*)>:
c0019833:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019837:	31 d2                	xor    edx,edx
c0019839:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001983c:	c3                   	ret    

c001983d <sysCallGetArgc(regs*)>:
c001983d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019842:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019845:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001984b:	99                   	cdq    
c001984c:	c3                   	ret    

c001984d <sysFormatDisk(regs*)>:
c001984d:	56                   	push   esi
c001984e:	53                   	push   ebx
c001984f:	53                   	push   ebx
c0019850:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019854:	8b 1d a8 ac 02 c0    	mov    ebx,DWORD PTR ds:0xc002aca8
c001985a:	eb 25                	jmp    c0019881 <sysFormatDisk(regs*)+0x34>
c001985c:	83 ec 0c             	sub    esp,0xc
c001985f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019862:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019864:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0019867:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001986a:	50                   	push   eax
c001986b:	ff 34 85 40 b1 02 c0 	push   DWORD PTR [eax*4-0x3ffd4ec0]
c0019872:	53                   	push   ebx
c0019873:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0019876:	83 c4 20             	add    esp,0x20
c0019879:	83 f8 08             	cmp    eax,0x8
c001987c:	75 12                	jne    c0019890 <sysFormatDisk(regs*)+0x43>
c001987e:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0019881:	85 db                	test   ebx,ebx
c0019883:	75 d7                	jne    c001985c <sysFormatDisk(regs*)+0xf>
c0019885:	59                   	pop    ecx
c0019886:	b8 03 00 00 00       	mov    eax,0x3
c001988b:	31 d2                	xor    edx,edx
c001988d:	5b                   	pop    ebx
c001988e:	5e                   	pop    esi
c001988f:	c3                   	ret    
c0019890:	85 c0                	test   eax,eax
c0019892:	74 1b                	je     c00198af <sysFormatDisk(regs*)+0x62>
c0019894:	83 f8 09             	cmp    eax,0x9
c0019897:	74 0b                	je     c00198a4 <sysFormatDisk(regs*)+0x57>
c0019899:	59                   	pop    ecx
c001989a:	b8 02 00 00 00       	mov    eax,0x2
c001989f:	31 d2                	xor    edx,edx
c00198a1:	5b                   	pop    ebx
c00198a2:	5e                   	pop    esi
c00198a3:	c3                   	ret    
c00198a4:	59                   	pop    ecx
c00198a5:	b8 01 00 00 00       	mov    eax,0x1
c00198aa:	31 d2                	xor    edx,edx
c00198ac:	5b                   	pop    ebx
c00198ad:	5e                   	pop    esi
c00198ae:	c3                   	ret    
c00198af:	59                   	pop    ecx
c00198b0:	31 c0                	xor    eax,eax
c00198b2:	31 d2                	xor    edx,edx
c00198b4:	5b                   	pop    ebx
c00198b5:	5e                   	pop    esi
c00198b6:	c3                   	ret    

c00198b7 <sysSetDiskVolumeLabel(regs*)>:
c00198b7:	56                   	push   esi
c00198b8:	53                   	push   ebx
c00198b9:	53                   	push   ebx
c00198ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00198be:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00198c1:	83 f8 19             	cmp    eax,0x19
c00198c4:	77 29                	ja     c00198ef <sysSetDiskVolumeLabel(regs*)+0x38>
c00198c6:	8b 0c 85 40 b1 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4ec0]
c00198cd:	85 c9                	test   ecx,ecx
c00198cf:	74 1e                	je     c00198ef <sysSetDiskVolumeLabel(regs*)+0x38>
c00198d1:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00198d4:	85 d2                	test   edx,edx
c00198d6:	74 17                	je     c00198ef <sysSetDiskVolumeLabel(regs*)+0x38>
c00198d8:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c00198de:	8b 33                	mov    esi,DWORD PTR [ebx]
c00198e0:	52                   	push   edx
c00198e1:	50                   	push   eax
c00198e2:	51                   	push   ecx
c00198e3:	53                   	push   ebx
c00198e4:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00198e7:	83 c4 10             	add    esp,0x10
c00198ea:	99                   	cdq    
c00198eb:	59                   	pop    ecx
c00198ec:	5b                   	pop    ebx
c00198ed:	5e                   	pop    esi
c00198ee:	c3                   	ret    
c00198ef:	59                   	pop    ecx
c00198f0:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00198f5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00198fa:	5b                   	pop    ebx
c00198fb:	5e                   	pop    esi
c00198fc:	c3                   	ret    

c00198fd <sysGetDiskVolumeLabel(regs*)>:
c00198fd:	57                   	push   edi
c00198fe:	56                   	push   esi
c00198ff:	53                   	push   ebx
c0019900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019904:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0019907:	83 fa 19             	cmp    edx,0x19
c001990a:	77 34                	ja     c0019940 <sysGetDiskVolumeLabel(regs*)+0x43>
c001990c:	8b 0c 95 40 b1 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4ec0]
c0019913:	85 c9                	test   ecx,ecx
c0019915:	74 29                	je     c0019940 <sysGetDiskVolumeLabel(regs*)+0x43>
c0019917:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001991a:	85 db                	test   ebx,ebx
c001991c:	74 22                	je     c0019940 <sysGetDiskVolumeLabel(regs*)+0x43>
c001991e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0019921:	85 c0                	test   eax,eax
c0019923:	74 1b                	je     c0019940 <sysGetDiskVolumeLabel(regs*)+0x43>
c0019925:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001992b:	83 ec 0c             	sub    esp,0xc
c001992e:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019930:	50                   	push   eax
c0019931:	53                   	push   ebx
c0019932:	52                   	push   edx
c0019933:	51                   	push   ecx
c0019934:	56                   	push   esi
c0019935:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0019938:	83 c4 20             	add    esp,0x20
c001993b:	99                   	cdq    
c001993c:	5b                   	pop    ebx
c001993d:	5e                   	pop    esi
c001993e:	5f                   	pop    edi
c001993f:	c3                   	ret    
c0019940:	5b                   	pop    ebx
c0019941:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0019946:	ba ff ff ff ff       	mov    edx,0xffffffff
c001994b:	5e                   	pop    esi
c001994c:	5f                   	pop    edi
c001994d:	c3                   	ret    

c001994e <sysShutdown(regs*)>:
c001994e:	83 ec 0c             	sub    esp,0xc
c0019951:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019955:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019958:	85 c0                	test   eax,eax
c001995a:	74 18                	je     c0019974 <sysShutdown(regs*)+0x26>
c001995c:	83 f8 01             	cmp    eax,0x1
c001995f:	74 38                	je     c0019999 <sysShutdown(regs*)+0x4b>
c0019961:	83 f8 02             	cmp    eax,0x2
c0019964:	74 24                	je     c001998a <sysShutdown(regs*)+0x3c>
c0019966:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001996b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019970:	83 c4 0c             	add    esp,0xc
c0019973:	c3                   	ret    
c0019974:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c0019979:	8b 10                	mov    edx,DWORD PTR [eax]
c001997b:	6a 00                	push   0x0
c001997d:	6a 00                	push   0x0
c001997f:	6a 00                	push   0x0
c0019981:	50                   	push   eax
c0019982:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019985:	83 c4 10             	add    esp,0x10
c0019988:	eb dc                	jmp    c0019966 <sysShutdown(regs*)+0x18>
c001998a:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c001998f:	8b 10                	mov    edx,DWORD PTR [eax]
c0019991:	6a 00                	push   0x0
c0019993:	6a 00                	push   0x0
c0019995:	6a 01                	push   0x1
c0019997:	eb e8                	jmp    c0019981 <sysShutdown(regs*)+0x33>
c0019999:	a1 c0 b1 02 c0       	mov    eax,ds:0xc002b1c0
c001999e:	85 c0                	test   eax,eax
c00199a0:	74 02                	je     c00199a4 <sysShutdown(regs*)+0x56>
c00199a2:	ff d0                	call   eax
c00199a4:	31 c0                	xor    eax,eax
c00199a6:	31 d2                	xor    edx,edx
c00199a8:	83 c4 0c             	add    esp,0xc
c00199ab:	c3                   	ret    

c00199ac <sysCallGetCwd(regs*)>:
c00199ac:	83 ec 10             	sub    esp,0x10
c00199af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00199b3:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00199b6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00199b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00199be:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00199c1:	e8 0f 95 ff ff       	call   c0012ed5 <getcwd(Process*, char*, int)>
c00199c6:	83 c4 1c             	add    esp,0x1c
c00199c9:	99                   	cdq    
c00199ca:	c3                   	ret    

c00199cb <sysCallSetCwd(regs*)>:
c00199cb:	83 ec 14             	sub    esp,0x14
c00199ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00199d2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00199d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00199da:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00199dd:	e8 1d 95 ff ff       	call   c0012eff <setcwd(Process*, char*)>
c00199e2:	83 c4 1c             	add    esp,0x1c
c00199e5:	99                   	cdq    
c00199e6:	c3                   	ret    

c00199e7 <sysCallRealpath(regs*)>:
c00199e7:	83 ec 0c             	sub    esp,0xc
c00199ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199ee:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00199f1:	85 d2                	test   edx,edx
c00199f3:	74 07                	je     c00199fc <sysCallRealpath(regs*)+0x15>
c00199f5:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00199f8:	85 c0                	test   eax,eax
c00199fa:	75 0b                	jne    c0019a07 <sysCallRealpath(regs*)+0x20>
c00199fc:	b8 01 00 00 00       	mov    eax,0x1
c0019a01:	31 d2                	xor    edx,edx
c0019a03:	83 c4 0c             	add    esp,0xc
c0019a06:	c3                   	ret    
c0019a07:	51                   	push   ecx
c0019a08:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019a0e:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0019a11:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0019a17:	51                   	push   ecx
c0019a18:	52                   	push   edx
c0019a19:	50                   	push   eax
c0019a1a:	e8 9b 8f ff ff       	call   c00129ba <standardiseFiles(char*, char const*, char const*)>
c0019a1f:	83 c4 10             	add    esp,0x10
c0019a22:	31 c0                	xor    eax,eax
c0019a24:	31 d2                	xor    edx,edx
c0019a26:	83 c4 0c             	add    esp,0xc
c0019a29:	c3                   	ret    

c0019a2a <sysCallReadDir(regs*)>:
c0019a2a:	53                   	push   ebx
c0019a2b:	83 ec 18             	sub    esp,0x18
c0019a2e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019a32:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0019a35:	83 f8 02             	cmp    eax,0x2
c0019a38:	76 53                	jbe    c0019a8d <sysCallReadDir(regs*)+0x63>
c0019a3a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0019a3d:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c0019a43:	77 4f                	ja     c0019a94 <sysCallReadDir(regs*)+0x6a>
c0019a45:	83 ec 0c             	sub    esp,0xc
c0019a48:	50                   	push   eax
c0019a49:	e8 a1 7a ff ff       	call   c00114ef <getFromFileDescriptor(int)>
c0019a4e:	83 c4 10             	add    esp,0x10
c0019a51:	85 c0                	test   eax,eax
c0019a53:	74 50                	je     c0019aa5 <sysCallReadDir(regs*)+0x7b>
c0019a55:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019a5d:	83 ec 0c             	sub    esp,0xc
c0019a60:	8b 10                	mov    edx,DWORD PTR [eax]
c0019a62:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0019a66:	51                   	push   ecx
c0019a67:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019a6a:	6a 00                	push   0x0
c0019a6c:	68 10 01 00 00       	push   0x110
c0019a71:	50                   	push   eax
c0019a72:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019a75:	83 c4 20             	add    esp,0x20
c0019a78:	85 c0                	test   eax,eax
c0019a7a:	74 38                	je     c0019ab4 <sysCallReadDir(regs*)+0x8a>
c0019a7c:	83 f8 07             	cmp    eax,0x7
c0019a7f:	74 0c                	je     c0019a8d <sysCallReadDir(regs*)+0x63>
c0019a81:	b8 02 00 00 00       	mov    eax,0x2
c0019a86:	31 d2                	xor    edx,edx
c0019a88:	83 c4 18             	add    esp,0x18
c0019a8b:	5b                   	pop    ebx
c0019a8c:	c3                   	ret    
c0019a8d:	b8 01 00 00 00       	mov    eax,0x1
c0019a92:	eb f2                	jmp    c0019a86 <sysCallReadDir(regs*)+0x5c>
c0019a94:	83 ec 08             	sub    esp,0x8
c0019a97:	52                   	push   edx
c0019a98:	68 1c 89 02 c0       	push   0xc002891c
c0019a9d:	e8 93 8b ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0019aa2:	83 c4 10             	add    esp,0x10
c0019aa5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019aaa:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019aaf:	83 c4 18             	add    esp,0x18
c0019ab2:	5b                   	pop    ebx
c0019ab3:	c3                   	ret    
c0019ab4:	31 c0                	xor    eax,eax
c0019ab6:	eb ce                	jmp    c0019a86 <sysCallReadDir(regs*)+0x5c>

c0019ab8 <sysCallIsATTY(regs*)>:
c0019ab8:	83 ec 0c             	sub    esp,0xc
c0019abb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019abf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019ac2:	83 f8 02             	cmp    eax,0x2
c0019ac5:	76 07                	jbe    c0019ace <sysCallIsATTY(regs*)+0x16>
c0019ac7:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0019acc:	75 26                	jne    c0019af4 <sysCallIsATTY(regs*)+0x3c>
c0019ace:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019ad3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019ad6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019adc:	85 c0                	test   eax,eax
c0019ade:	74 24                	je     c0019b04 <sysCallIsATTY(regs*)+0x4c>
c0019ae0:	83 ec 0c             	sub    esp,0xc
c0019ae3:	8b 10                	mov    edx,DWORD PTR [eax]
c0019ae5:	50                   	push   eax
c0019ae6:	ff 12                	call   DWORD PTR [edx]
c0019ae8:	31 d2                	xor    edx,edx
c0019aea:	0f b6 c0             	movzx  eax,al
c0019aed:	83 c4 10             	add    esp,0x10
c0019af0:	83 c4 0c             	add    esp,0xc
c0019af3:	c3                   	ret    
c0019af4:	83 ec 0c             	sub    esp,0xc
c0019af7:	50                   	push   eax
c0019af8:	e8 f2 79 ff ff       	call   c00114ef <getFromFileDescriptor(int)>
c0019afd:	83 c4 10             	add    esp,0x10
c0019b00:	85 c0                	test   eax,eax
c0019b02:	75 dc                	jne    c0019ae0 <sysCallIsATTY(regs*)+0x28>
c0019b04:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019b09:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019b0e:	83 c4 0c             	add    esp,0xc
c0019b11:	c3                   	ret    

c0019b12 <sysCallSeek(regs*)>:
c0019b12:	53                   	push   ebx
c0019b13:	83 ec 08             	sub    esp,0x8
c0019b16:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019b1a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019b1d:	83 f8 02             	cmp    eax,0x2
c0019b20:	76 4a                	jbe    c0019b6c <sysCallSeek(regs*)+0x5a>
c0019b22:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019b27:	77 32                	ja     c0019b5b <sysCallSeek(regs*)+0x49>
c0019b29:	83 ec 0c             	sub    esp,0xc
c0019b2c:	50                   	push   eax
c0019b2d:	e8 bd 79 ff ff       	call   c00114ef <getFromFileDescriptor(int)>
c0019b32:	83 c4 0c             	add    esp,0xc
c0019b35:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0019b38:	31 db                	xor    ebx,ebx
c0019b3a:	53                   	push   ebx
c0019b3b:	51                   	push   ecx
c0019b3c:	50                   	push   eax
c0019b3d:	e8 44 91 ff ff       	call   c0012c86 <File::seek(unsigned long long)>
c0019b42:	83 c4 10             	add    esp,0x10
c0019b45:	85 c0                	test   eax,eax
c0019b47:	0f 95 c0             	setne  al
c0019b4a:	31 d2                	xor    edx,edx
c0019b4c:	0f b6 c0             	movzx  eax,al
c0019b4f:	f7 d8                	neg    eax
c0019b51:	83 d2 00             	adc    edx,0x0
c0019b54:	83 c4 08             	add    esp,0x8
c0019b57:	f7 da                	neg    edx
c0019b59:	5b                   	pop    ebx
c0019b5a:	c3                   	ret    
c0019b5b:	83 ec 08             	sub    esp,0x8
c0019b5e:	50                   	push   eax
c0019b5f:	68 d8 89 02 c0       	push   0xc00289d8
c0019b64:	e8 cc 8a ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0019b69:	83 c4 10             	add    esp,0x10
c0019b6c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019b71:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019b76:	83 c4 08             	add    esp,0x8
c0019b79:	5b                   	pop    ebx
c0019b7a:	c3                   	ret    

c0019b7b <sysCallTell(regs*)>:
c0019b7b:	53                   	push   ebx
c0019b7c:	83 ec 08             	sub    esp,0x8
c0019b7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019b83:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019b86:	83 f8 02             	cmp    eax,0x2
c0019b89:	76 5e                	jbe    c0019be9 <sysCallTell(regs*)+0x6e>
c0019b8b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019b90:	77 2d                	ja     c0019bbf <sysCallTell(regs*)+0x44>
c0019b92:	83 ec 0c             	sub    esp,0xc
c0019b95:	50                   	push   eax
c0019b96:	e8 54 79 ff ff       	call   c00114ef <getFromFileDescriptor(int)>
c0019b9b:	5a                   	pop    edx
c0019b9c:	59                   	pop    ecx
c0019b9d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0019ba0:	50                   	push   eax
c0019ba1:	e8 36 91 ff ff       	call   c0012cdc <File::tell(unsigned long long*)>
c0019ba6:	83 c4 10             	add    esp,0x10
c0019ba9:	85 c0                	test   eax,eax
c0019bab:	0f 95 c0             	setne  al
c0019bae:	31 d2                	xor    edx,edx
c0019bb0:	0f b6 c0             	movzx  eax,al
c0019bb3:	f7 d8                	neg    eax
c0019bb5:	83 d2 00             	adc    edx,0x0
c0019bb8:	83 c4 08             	add    esp,0x8
c0019bbb:	f7 da                	neg    edx
c0019bbd:	5b                   	pop    ebx
c0019bbe:	c3                   	ret    
c0019bbf:	83 ec 08             	sub    esp,0x8
c0019bc2:	50                   	push   eax
c0019bc3:	68 f2 89 02 c0       	push   0xc00289f2
c0019bc8:	e8 68 8a ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0019bcd:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0019bd0:	83 c4 10             	add    esp,0x10
c0019bd3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019bd9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019be0:	31 d2                	xor    edx,edx
c0019be2:	31 c0                	xor    eax,eax
c0019be4:	83 c4 08             	add    esp,0x8
c0019be7:	5b                   	pop    ebx
c0019be8:	c3                   	ret    
c0019be9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019bee:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019bf3:	83 c4 08             	add    esp,0x8
c0019bf6:	5b                   	pop    ebx
c0019bf7:	c3                   	ret    

c0019bf8 <sysCallSize(regs*)>:
c0019bf8:	53                   	push   ebx
c0019bf9:	83 ec 18             	sub    esp,0x18
c0019bfc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019c00:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019c03:	83 f8 02             	cmp    eax,0x2
c0019c06:	76 64                	jbe    c0019c6c <sysCallSize(regs*)+0x74>
c0019c08:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019c0d:	77 33                	ja     c0019c42 <sysCallSize(regs*)+0x4a>
c0019c0f:	83 ec 0c             	sub    esp,0xc
c0019c12:	50                   	push   eax
c0019c13:	e8 d7 78 ff ff       	call   c00114ef <getFromFileDescriptor(int)>
c0019c18:	83 c4 0c             	add    esp,0xc
c0019c1b:	8d 54 24 13          	lea    edx,[esp+0x13]
c0019c1f:	52                   	push   edx
c0019c20:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0019c23:	50                   	push   eax
c0019c24:	e8 4b 92 ff ff       	call   c0012e74 <File::stat(unsigned long long*, bool*)>
c0019c29:	83 c4 10             	add    esp,0x10
c0019c2c:	85 c0                	test   eax,eax
c0019c2e:	0f 95 c0             	setne  al
c0019c31:	31 d2                	xor    edx,edx
c0019c33:	0f b6 c0             	movzx  eax,al
c0019c36:	f7 d8                	neg    eax
c0019c38:	83 d2 00             	adc    edx,0x0
c0019c3b:	83 c4 18             	add    esp,0x18
c0019c3e:	f7 da                	neg    edx
c0019c40:	5b                   	pop    ebx
c0019c41:	c3                   	ret    
c0019c42:	83 ec 08             	sub    esp,0x8
c0019c45:	50                   	push   eax
c0019c46:	68 0c 8a 02 c0       	push   0xc0028a0c
c0019c4b:	e8 e5 89 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0019c50:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0019c53:	83 c4 10             	add    esp,0x10
c0019c56:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019c5c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019c63:	31 d2                	xor    edx,edx
c0019c65:	31 c0                	xor    eax,eax
c0019c67:	83 c4 18             	add    esp,0x18
c0019c6a:	5b                   	pop    ebx
c0019c6b:	c3                   	ret    
c0019c6c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019c71:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019c76:	83 c4 18             	add    esp,0x18
c0019c79:	5b                   	pop    ebx
c0019c7a:	c3                   	ret    

c0019c7b <sysCallSizeFromFilename(regs*)>:
c0019c7b:	57                   	push   edi
c0019c7c:	56                   	push   esi
c0019c7d:	53                   	push   ebx
c0019c7e:	83 ec 20             	sub    esp,0x20
c0019c81:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019c85:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c0019c88:	83 fb 02             	cmp    ebx,0x2
c0019c8b:	0f 86 99 00 00 00    	jbe    c0019d2a <sysCallSizeFromFilename(regs*)+0xaf>
c0019c91:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0019c97:	77 65                	ja     c0019cfe <sysCallSizeFromFilename(regs*)+0x83>
c0019c99:	83 ec 0c             	sub    esp,0xc
c0019c9c:	68 14 01 00 00       	push   0x114
c0019ca1:	e8 1c 58 ff ff       	call   c000f4c2 <malloc>
c0019ca6:	83 c4 0c             	add    esp,0xc
c0019ca9:	89 c6                	mov    esi,eax
c0019cab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019cb0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019cb3:	53                   	push   ebx
c0019cb4:	56                   	push   esi
c0019cb5:	e8 aa 8e ff ff       	call   c0012b64 <File::File(char const*, Process*)>
c0019cba:	83 c4 0c             	add    esp,0xc
c0019cbd:	8d 44 24 23          	lea    eax,[esp+0x23]
c0019cc1:	50                   	push   eax
c0019cc2:	ff 77 28             	push   DWORD PTR [edi+0x28]
c0019cc5:	56                   	push   esi
c0019cc6:	e8 a9 91 ff ff       	call   c0012e74 <File::stat(unsigned long long*, bool*)>
c0019ccb:	83 c4 10             	add    esp,0x10
c0019cce:	85 f6                	test   esi,esi
c0019cd0:	74 14                	je     c0019ce6 <sysCallSizeFromFilename(regs*)+0x6b>
c0019cd2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019cd6:	8b 16                	mov    edx,DWORD PTR [esi]
c0019cd8:	83 ec 0c             	sub    esp,0xc
c0019cdb:	56                   	push   esi
c0019cdc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019cdf:	83 c4 10             	add    esp,0x10
c0019ce2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ce6:	85 c0                	test   eax,eax
c0019ce8:	0f 95 c0             	setne  al
c0019ceb:	31 d2                	xor    edx,edx
c0019ced:	0f b6 c0             	movzx  eax,al
c0019cf0:	f7 d8                	neg    eax
c0019cf2:	83 d2 00             	adc    edx,0x0
c0019cf5:	83 c4 20             	add    esp,0x20
c0019cf8:	f7 da                	neg    edx
c0019cfa:	5b                   	pop    ebx
c0019cfb:	5e                   	pop    esi
c0019cfc:	5f                   	pop    edi
c0019cfd:	c3                   	ret    
c0019cfe:	83 ec 08             	sub    esp,0x8
c0019d01:	53                   	push   ebx
c0019d02:	68 0c 8a 02 c0       	push   0xc0028a0c
c0019d07:	e8 29 89 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0019d0c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0019d0f:	83 c4 10             	add    esp,0x10
c0019d12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019d18:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019d1f:	31 d2                	xor    edx,edx
c0019d21:	83 c4 20             	add    esp,0x20
c0019d24:	31 c0                	xor    eax,eax
c0019d26:	5b                   	pop    ebx
c0019d27:	5e                   	pop    esi
c0019d28:	5f                   	pop    edi
c0019d29:	c3                   	ret    
c0019d2a:	83 c4 20             	add    esp,0x20
c0019d2d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019d32:	5b                   	pop    ebx
c0019d33:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019d38:	5e                   	pop    esi
c0019d39:	5f                   	pop    edi
c0019d3a:	c3                   	ret    

c0019d3b <sysCallClose(regs*)>:
c0019d3b:	53                   	push   ebx
c0019d3c:	83 ec 08             	sub    esp,0x8
c0019d3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d43:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019d46:	83 f8 02             	cmp    eax,0x2
c0019d49:	76 50                	jbe    c0019d9b <sysCallClose(regs*)+0x60>
c0019d4b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0019d50:	74 58                	je     c0019daa <sysCallClose(regs*)+0x6f>
c0019d52:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019d57:	74 60                	je     c0019db9 <sysCallClose(regs*)+0x7e>
c0019d59:	77 2f                	ja     c0019d8a <sysCallClose(regs*)+0x4f>
c0019d5b:	83 ec 0c             	sub    esp,0xc
c0019d5e:	50                   	push   eax
c0019d5f:	e8 8b 77 ff ff       	call   c00114ef <getFromFileDescriptor(int)>
c0019d64:	89 c3                	mov    ebx,eax
c0019d66:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d69:	e8 b8 8e ff ff       	call   c0012c26 <File::close()>
c0019d6e:	83 c4 10             	add    esp,0x10
c0019d71:	85 db                	test   ebx,ebx
c0019d73:	74 0c                	je     c0019d81 <sysCallClose(regs*)+0x46>
c0019d75:	83 ec 0c             	sub    esp,0xc
c0019d78:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d7a:	53                   	push   ebx
c0019d7b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019d7e:	83 c4 10             	add    esp,0x10
c0019d81:	31 c0                	xor    eax,eax
c0019d83:	31 d2                	xor    edx,edx
c0019d85:	83 c4 08             	add    esp,0x8
c0019d88:	5b                   	pop    ebx
c0019d89:	c3                   	ret    
c0019d8a:	83 ec 08             	sub    esp,0x8
c0019d8d:	50                   	push   eax
c0019d8e:	68 40 89 02 c0       	push   0xc0028940
c0019d93:	e8 9d 88 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0019d98:	83 c4 10             	add    esp,0x10
c0019d9b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019da0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019da5:	83 c4 08             	add    esp,0x8
c0019da8:	5b                   	pop    ebx
c0019da9:	c3                   	ret    
c0019daa:	83 ec 0c             	sub    esp,0xc
c0019dad:	68 27 8a 02 c0       	push   0xc0028a27
c0019db2:	e8 7e 88 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0019db7:	eb c5                	jmp    c0019d7e <sysCallClose(regs*)+0x43>
c0019db9:	83 ec 0c             	sub    esp,0xc
c0019dbc:	68 35 8a 02 c0       	push   0xc0028a35
c0019dc1:	eb ef                	jmp    c0019db2 <sysCallClose(regs*)+0x77>

c0019dc3 <sysCallOpenDir(regs*)>:
c0019dc3:	56                   	push   esi
c0019dc4:	53                   	push   ebx
c0019dc5:	53                   	push   ebx
c0019dc6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019dca:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0019dcd:	85 f6                	test   esi,esi
c0019dcf:	74 59                	je     c0019e2a <sysCallOpenDir(regs*)+0x67>
c0019dd1:	83 ec 0c             	sub    esp,0xc
c0019dd4:	68 14 01 00 00       	push   0x114
c0019dd9:	e8 e4 56 ff ff       	call   c000f4c2 <malloc>
c0019dde:	83 c4 0c             	add    esp,0xc
c0019de1:	89 c6                	mov    esi,eax
c0019de3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019de8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019deb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019dee:	56                   	push   esi
c0019def:	e8 46 92 ff ff       	call   c001303a <Directory::Directory(char const*, Process*)>
c0019df4:	83 c4 10             	add    esp,0x10
c0019df7:	85 f6                	test   esi,esi
c0019df9:	74 2f                	je     c0019e2a <sysCallOpenDir(regs*)+0x67>
c0019dfb:	83 ec 0c             	sub    esp,0xc
c0019dfe:	56                   	push   esi
c0019dff:	e8 9a 92 ff ff       	call   c001309e <Directory::open()>
c0019e04:	83 c4 10             	add    esp,0x10
c0019e07:	85 c0                	test   eax,eax
c0019e09:	75 1f                	jne    c0019e2a <sysCallOpenDir(regs*)+0x67>
c0019e0b:	83 ec 0c             	sub    esp,0xc
c0019e0e:	56                   	push   esi
c0019e0f:	e8 e6 73 ff ff       	call   c00111fa <UnixFile::getFileDescriptor()>
c0019e14:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0019e17:	83 c4 10             	add    esp,0x10
c0019e1a:	89 02                	mov    DWORD PTR [edx],eax
c0019e1c:	c1 f8 1f             	sar    eax,0x1f
c0019e1f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0019e22:	31 c0                	xor    eax,eax
c0019e24:	59                   	pop    ecx
c0019e25:	31 d2                	xor    edx,edx
c0019e27:	5b                   	pop    ebx
c0019e28:	5e                   	pop    esi
c0019e29:	c3                   	ret    
c0019e2a:	59                   	pop    ecx
c0019e2b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019e30:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019e35:	5b                   	pop    ebx
c0019e36:	5e                   	pop    esi
c0019e37:	c3                   	ret    

c0019e38 <sysCallCloseDir(regs*)>:
c0019e38:	53                   	push   ebx
c0019e39:	83 ec 08             	sub    esp,0x8
c0019e3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e40:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019e43:	83 f8 02             	cmp    eax,0x2
c0019e46:	76 47                	jbe    c0019e8f <sysCallCloseDir(regs*)+0x57>
c0019e48:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019e4d:	77 2f                	ja     c0019e7e <sysCallCloseDir(regs*)+0x46>
c0019e4f:	83 ec 0c             	sub    esp,0xc
c0019e52:	50                   	push   eax
c0019e53:	e8 97 76 ff ff       	call   c00114ef <getFromFileDescriptor(int)>
c0019e58:	89 c3                	mov    ebx,eax
c0019e5a:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e5d:	e8 98 92 ff ff       	call   c00130fa <Directory::close()>
c0019e62:	83 c4 10             	add    esp,0x10
c0019e65:	85 db                	test   ebx,ebx
c0019e67:	74 0c                	je     c0019e75 <sysCallCloseDir(regs*)+0x3d>
c0019e69:	83 ec 0c             	sub    esp,0xc
c0019e6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e6e:	53                   	push   ebx
c0019e6f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019e72:	83 c4 10             	add    esp,0x10
c0019e75:	31 c0                	xor    eax,eax
c0019e77:	31 d2                	xor    edx,edx
c0019e79:	83 c4 08             	add    esp,0x8
c0019e7c:	5b                   	pop    ebx
c0019e7d:	c3                   	ret    
c0019e7e:	83 ec 08             	sub    esp,0x8
c0019e81:	50                   	push   eax
c0019e82:	68 68 89 02 c0       	push   0xc0028968
c0019e87:	e8 a9 87 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0019e8c:	83 c4 10             	add    esp,0x10
c0019e8f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019e94:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019e99:	83 c4 08             	add    esp,0x8
c0019e9c:	5b                   	pop    ebx
c0019e9d:	c3                   	ret    

c0019e9e <sysCallMakeDir(regs*)>:
c0019e9e:	56                   	push   esi
c0019e9f:	53                   	push   ebx
c0019ea0:	83 ec 10             	sub    esp,0x10
c0019ea3:	68 14 01 00 00       	push   0x114
c0019ea8:	e8 15 56 ff ff       	call   c000f4c2 <malloc>
c0019ead:	83 c4 0c             	add    esp,0xc
c0019eb0:	89 c3                	mov    ebx,eax
c0019eb2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019eb7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019eba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019ebe:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019ec1:	53                   	push   ebx
c0019ec2:	e8 73 91 ff ff       	call   c001303a <Directory::Directory(char const*, Process*)>
c0019ec7:	83 c4 10             	add    esp,0x10
c0019eca:	85 db                	test   ebx,ebx
c0019ecc:	74 32                	je     c0019f00 <sysCallMakeDir(regs*)+0x62>
c0019ece:	83 ec 0c             	sub    esp,0xc
c0019ed1:	53                   	push   ebx
c0019ed2:	e8 a7 93 ff ff       	call   c001327e <Directory::create()>
c0019ed7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019eda:	89 c6                	mov    esi,eax
c0019edc:	e8 19 92 ff ff       	call   c00130fa <Directory::close()>
c0019ee1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ee3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ee6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019ee9:	83 c4 10             	add    esp,0x10
c0019eec:	31 c0                	xor    eax,eax
c0019eee:	59                   	pop    ecx
c0019eef:	85 f6                	test   esi,esi
c0019ef1:	5b                   	pop    ebx
c0019ef2:	0f 95 c0             	setne  al
c0019ef5:	5e                   	pop    esi
c0019ef6:	31 d2                	xor    edx,edx
c0019ef8:	f7 d8                	neg    eax
c0019efa:	83 d2 00             	adc    edx,0x0
c0019efd:	f7 da                	neg    edx
c0019eff:	c3                   	ret    
c0019f00:	59                   	pop    ecx
c0019f01:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019f06:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019f0b:	5b                   	pop    ebx
c0019f0c:	5e                   	pop    esi
c0019f0d:	c3                   	ret    

c0019f0e <sysCallWait(regs*)>:
c0019f0e:	83 ec 10             	sub    esp,0x10
c0019f11:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019f15:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0019f18:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019f1b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019f1e:	e8 98 23 00 00       	call   c001c2bb <waitTask(int, int*, int)>
c0019f23:	83 c4 1c             	add    esp,0x1c
c0019f26:	99                   	cdq    
c0019f27:	c3                   	ret    

c0019f28 <sysCallNotImpl(regs*)>:
c0019f28:	83 ec 18             	sub    esp,0x18
c0019f2b:	68 43 8a 02 c0       	push   0xc0028a43
c0019f30:	e8 c4 ee ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c0019f35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019f3a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019f3f:	83 c4 1c             	add    esp,0x1c
c0019f42:	c3                   	ret    

c0019f43 <sysPanic(regs*)>:
c0019f43:	83 ec 18             	sub    esp,0x18
c0019f46:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019f4a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019f4d:	e8 a7 ee ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c0019f52:	c7 04 24 5d 8a 02 c0 	mov    DWORD PTR [esp],0xc0028a5d
c0019f59:	e8 9b ee ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c0019f5e:	b8 01 00 00 00       	mov    eax,0x1
c0019f63:	31 d2                	xor    edx,edx
c0019f65:	83 c4 1c             	add    esp,0x1c
c0019f68:	c3                   	ret    

c0019f69 <sysCallRmdir(regs*)>:
c0019f69:	56                   	push   esi
c0019f6a:	53                   	push   ebx
c0019f6b:	83 ec 20             	sub    esp,0x20
c0019f6e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019f72:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0019f75:	68 14 01 00 00       	push   0x114
c0019f7a:	e8 43 55 ff ff       	call   c000f4c2 <malloc>
c0019f7f:	83 c4 0c             	add    esp,0xc
c0019f82:	89 c3                	mov    ebx,eax
c0019f84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019f89:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019f8c:	56                   	push   esi
c0019f8d:	53                   	push   ebx
c0019f8e:	e8 d1 8b ff ff       	call   c0012b64 <File::File(char const*, Process*)>
c0019f93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f96:	e8 a5 8d ff ff       	call   c0012d40 <File::unlink()>
c0019f9b:	83 c4 10             	add    esp,0x10
c0019f9e:	85 db                	test   ebx,ebx
c0019fa0:	74 14                	je     c0019fb6 <sysCallRmdir(regs*)+0x4d>
c0019fa2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019fa6:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019fa8:	83 ec 0c             	sub    esp,0xc
c0019fab:	53                   	push   ebx
c0019fac:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019faf:	83 c4 10             	add    esp,0x10
c0019fb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019fb6:	85 c0                	test   eax,eax
c0019fb8:	0f 95 c0             	setne  al
c0019fbb:	31 d2                	xor    edx,edx
c0019fbd:	0f b6 c0             	movzx  eax,al
c0019fc0:	f7 d8                	neg    eax
c0019fc2:	83 d2 00             	adc    edx,0x0
c0019fc5:	83 c4 14             	add    esp,0x14
c0019fc8:	f7 da                	neg    edx
c0019fca:	5b                   	pop    ebx
c0019fcb:	5e                   	pop    esi
c0019fcc:	c3                   	ret    

c0019fcd <sysCallUnlink(regs*)>:
c0019fcd:	56                   	push   esi
c0019fce:	53                   	push   ebx
c0019fcf:	83 ec 20             	sub    esp,0x20
c0019fd2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019fd6:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0019fd9:	68 14 01 00 00       	push   0x114
c0019fde:	e8 df 54 ff ff       	call   c000f4c2 <malloc>
c0019fe3:	83 c4 0c             	add    esp,0xc
c0019fe6:	89 c3                	mov    ebx,eax
c0019fe8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019fed:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019ff0:	56                   	push   esi
c0019ff1:	53                   	push   ebx
c0019ff2:	e8 6d 8b ff ff       	call   c0012b64 <File::File(char const*, Process*)>
c0019ff7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ffa:	e8 41 8d ff ff       	call   c0012d40 <File::unlink()>
c0019fff:	83 c4 10             	add    esp,0x10
c001a002:	85 db                	test   ebx,ebx
c001a004:	74 14                	je     c001a01a <sysCallUnlink(regs*)+0x4d>
c001a006:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a00a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a00c:	83 ec 0c             	sub    esp,0xc
c001a00f:	53                   	push   ebx
c001a010:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001a013:	83 c4 10             	add    esp,0x10
c001a016:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a01a:	85 c0                	test   eax,eax
c001a01c:	0f 95 c0             	setne  al
c001a01f:	31 d2                	xor    edx,edx
c001a021:	0f b6 c0             	movzx  eax,al
c001a024:	f7 d8                	neg    eax
c001a026:	83 d2 00             	adc    edx,0x0
c001a029:	83 c4 14             	add    esp,0x14
c001a02c:	f7 da                	neg    edx
c001a02e:	5b                   	pop    ebx
c001a02f:	5e                   	pop    esi
c001a030:	c3                   	ret    

c001a031 <sysCallGetArgv(regs*)>:
c001a031:	83 ec 0c             	sub    esp,0xc
c001a034:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a038:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001a03b:	85 c0                	test   eax,eax
c001a03d:	78 2b                	js     c001a06a <sysCallGetArgv(regs*)+0x39>
c001a03f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a045:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a048:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001a04e:	7d 1a                	jge    c001a06a <sysCallGetArgv(regs*)+0x39>
c001a050:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001a057:	85 c0                	test   eax,eax
c001a059:	74 17                	je     c001a072 <sysCallGetArgv(regs*)+0x41>
c001a05b:	83 ec 08             	sub    esp,0x8
c001a05e:	50                   	push   eax
c001a05f:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001a062:	e8 b5 66 fe ff       	call   c000071c <strcpy>
c001a067:	83 c4 10             	add    esp,0x10
c001a06a:	31 c0                	xor    eax,eax
c001a06c:	31 d2                	xor    edx,edx
c001a06e:	83 c4 0c             	add    esp,0xc
c001a071:	c3                   	ret    
c001a072:	b8 01 00 00 00       	mov    eax,0x1
c001a077:	31 d2                	xor    edx,edx
c001a079:	83 c4 0c             	add    esp,0xc
c001a07c:	c3                   	ret    

c001a07d <sysCallTTYName(regs*)>:
c001a07d:	56                   	push   esi
c001a07e:	53                   	push   ebx
c001a07f:	53                   	push   ebx
c001a080:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a084:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a087:	85 c0                	test   eax,eax
c001a089:	74 5f                	je     c001a0ea <sysCallTTYName(regs*)+0x6d>
c001a08b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a08e:	83 f8 02             	cmp    eax,0x2
c001a091:	77 3e                	ja     c001a0d1 <sysCallTTYName(regs*)+0x54>
c001a093:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a098:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a09b:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001a0a1:	85 db                	test   ebx,ebx
c001a0a3:	74 45                	je     c001a0ea <sysCallTTYName(regs*)+0x6d>
c001a0a5:	83 ec 0c             	sub    esp,0xc
c001a0a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a0aa:	53                   	push   ebx
c001a0ab:	ff 10                	call   DWORD PTR [eax]
c001a0ad:	83 c4 10             	add    esp,0x10
c001a0b0:	84 c0                	test   al,al
c001a0b2:	74 41                	je     c001a0f5 <sysCallTTYName(regs*)+0x78>
c001a0b4:	83 ec 08             	sub    esp,0x8
c001a0b7:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001a0bd:	53                   	push   ebx
c001a0be:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001a0c1:	e8 56 66 fe ff       	call   c000071c <strcpy>
c001a0c6:	83 c4 10             	add    esp,0x10
c001a0c9:	31 c0                	xor    eax,eax
c001a0cb:	59                   	pop    ecx
c001a0cc:	31 d2                	xor    edx,edx
c001a0ce:	5b                   	pop    ebx
c001a0cf:	5e                   	pop    esi
c001a0d0:	c3                   	ret    
c001a0d1:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001a0d6:	74 bb                	je     c001a093 <sysCallTTYName(regs*)+0x16>
c001a0d8:	83 ec 0c             	sub    esp,0xc
c001a0db:	50                   	push   eax
c001a0dc:	e8 0e 74 ff ff       	call   c00114ef <getFromFileDescriptor(int)>
c001a0e1:	83 c4 10             	add    esp,0x10
c001a0e4:	89 c3                	mov    ebx,eax
c001a0e6:	85 db                	test   ebx,ebx
c001a0e8:	75 bb                	jne    c001a0a5 <sysCallTTYName(regs*)+0x28>
c001a0ea:	59                   	pop    ecx
c001a0eb:	b8 01 00 00 00       	mov    eax,0x1
c001a0f0:	31 d2                	xor    edx,edx
c001a0f2:	5b                   	pop    ebx
c001a0f3:	5e                   	pop    esi
c001a0f4:	c3                   	ret    
c001a0f5:	59                   	pop    ecx
c001a0f6:	b8 02 00 00 00       	mov    eax,0x2
c001a0fb:	31 d2                	xor    edx,edx
c001a0fd:	5b                   	pop    ebx
c001a0fe:	5e                   	pop    esi
c001a0ff:	c3                   	ret    

c001a100 <sysCallGetEnv(regs*)>:
c001a100:	83 ec 0c             	sub    esp,0xc
c001a103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a107:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c001a10a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001a10d:	85 c9                	test   ecx,ecx
c001a10f:	75 22                	jne    c001a133 <sysCallGetEnv(regs*)+0x33>
c001a111:	85 d2                	test   edx,edx
c001a113:	74 08                	je     c001a11d <sysCallGetEnv(regs*)+0x1d>
c001a115:	31 c0                	xor    eax,eax
c001a117:	31 d2                	xor    edx,edx
c001a119:	83 c4 0c             	add    esp,0xc
c001a11c:	c3                   	ret    
c001a11d:	83 ec 0c             	sub    esp,0xc
c001a120:	68 8c 89 02 c0       	push   0xc002898c
c001a125:	e8 70 65 fe ff       	call   c000069a <strlen>
c001a12a:	83 c4 10             	add    esp,0x10
c001a12d:	31 d2                	xor    edx,edx
c001a12f:	83 c4 0c             	add    esp,0xc
c001a132:	c3                   	ret    
c001a133:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a136:	85 d2                	test   edx,edx
c001a138:	74 05                	je     c001a13f <sysCallGetEnv(regs*)+0x3f>
c001a13a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a13d:	eb d6                	jmp    c001a115 <sysCallGetEnv(regs*)+0x15>
c001a13f:	83 ec 08             	sub    esp,0x8
c001a142:	68 8c 89 02 c0       	push   0xc002898c
c001a147:	50                   	push   eax
c001a148:	e8 cf 65 fe ff       	call   c000071c <strcpy>
c001a14d:	83 c4 10             	add    esp,0x10
c001a150:	eb c3                	jmp    c001a115 <sysCallGetEnv(regs*)+0x15>

c001a152 <sysCallUSleep(regs*)>:
c001a152:	83 ec 14             	sub    esp,0x14
c001a155:	b8 e8 03 00 00       	mov    eax,0x3e8
c001a15a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a15e:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001a165:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001a168:	01 ca                	add    edx,ecx
c001a16a:	52                   	push   edx
c001a16b:	50                   	push   eax
c001a16c:	e8 e3 21 00 00       	call   c001c354 <nanoSleep(unsigned long long)>
c001a171:	31 c0                	xor    eax,eax
c001a173:	31 d2                	xor    edx,edx
c001a175:	83 c4 1c             	add    esp,0x1c
c001a178:	c3                   	ret    

c001a179 <sysCallSpawn(regs*)>:
c001a179:	56                   	push   esi
c001a17a:	53                   	push   ebx
c001a17b:	53                   	push   ebx
c001a17c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a180:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001a183:	85 f6                	test   esi,esi
c001a185:	75 08                	jne    c001a18f <sysCallSpawn(regs*)+0x16>
c001a187:	59                   	pop    ecx
c001a188:	31 c0                	xor    eax,eax
c001a18a:	31 d2                	xor    edx,edx
c001a18c:	5b                   	pop    ebx
c001a18d:	5e                   	pop    esi
c001a18e:	c3                   	ret    
c001a18f:	83 ec 0c             	sub    esp,0xc
c001a192:	68 3b 07 00 00       	push   0x73b
c001a197:	e8 26 53 ff ff       	call   c000f4c2 <malloc>
c001a19c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001a19f:	89 c6                	mov    esi,eax
c001a1a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a1a6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a1a9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a1ac:	56                   	push   esi
c001a1ad:	e8 da 18 00 00       	call   c001ba8c <Process::Process(char const*, Process*, char**)>
c001a1b2:	83 c4 20             	add    esp,0x20
c001a1b5:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c001a1bc:	75 c9                	jne    c001a187 <sysCallSpawn(regs*)+0xe>
c001a1be:	83 ec 0c             	sub    esp,0xc
c001a1c1:	56                   	push   esi
c001a1c2:	e8 53 1e 00 00       	call   c001c01a <Process::createUserThread()>
c001a1c7:	8b 06                	mov    eax,DWORD PTR [esi]
c001a1c9:	83 c4 10             	add    esp,0x10
c001a1cc:	99                   	cdq    
c001a1cd:	59                   	pop    ecx
c001a1ce:	5b                   	pop    ebx
c001a1cf:	5e                   	pop    esi
c001a1d0:	c3                   	ret    

c001a1d1 <sysAppSettings(regs*)>:
c001a1d1:	53                   	push   ebx
c001a1d2:	83 ec 08             	sub    esp,0x8
c001a1d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1d9:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001a1dc:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001a1e2:	25 e0 1f 00 00       	and    eax,0x1fe0
c001a1e7:	66 3d c0 09          	cmp    ax,0x9c0
c001a1eb:	75 2f                	jne    c001a21c <sysAppSettings(regs*)+0x4b>
c001a1ed:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001a1f3:	83 e0 1f             	and    eax,0x1f
c001a1f6:	3c 01                	cmp    al,0x1
c001a1f8:	74 2e                	je     c001a228 <sysAppSettings(regs*)+0x57>
c001a1fa:	3c 07                	cmp    al,0x7
c001a1fc:	0f 84 bd 00 00 00    	je     c001a2bf <sysAppSettings(regs*)+0xee>
c001a202:	84 c0                	test   al,al
c001a204:	0f 84 dc 00 00 00    	je     c001a2e6 <sysAppSettings(regs*)+0x115>
c001a20a:	3c 08                	cmp    al,0x8
c001a20c:	74 6d                	je     c001a27b <sysAppSettings(regs*)+0xaa>
c001a20e:	0f b6 c0             	movzx  eax,al
c001a211:	83 c4 08             	add    esp,0x8
c001a214:	05 e8 03 00 00       	add    eax,0x3e8
c001a219:	5b                   	pop    ebx
c001a21a:	99                   	cdq    
c001a21b:	c3                   	ret    
c001a21c:	b8 01 00 00 00       	mov    eax,0x1
c001a221:	31 d2                	xor    edx,edx
c001a223:	83 c4 08             	add    esp,0x8
c001a226:	5b                   	pop    ebx
c001a227:	c3                   	ret    
c001a228:	51                   	push   ecx
c001a229:	68 00 01 00 00       	push   0x100
c001a22e:	6a 00                	push   0x0
c001a230:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a235:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a238:	83 c0 0c             	add    eax,0xc
c001a23b:	50                   	push   eax
c001a23c:	e8 3c 64 fe ff       	call   c000067d <memset>
c001a241:	83 c4 0c             	add    esp,0xc
c001a244:	68 ff 00 00 00       	push   0xff
c001a249:	53                   	push   ebx
c001a24a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a24f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a252:	83 c0 0c             	add    eax,0xc
c001a255:	50                   	push   eax
c001a256:	e8 ec 63 fe ff       	call   c0000647 <memcpy>
c001a25b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a260:	5b                   	pop    ebx
c001a261:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a264:	5a                   	pop    edx
c001a265:	8d 50 0c             	lea    edx,[eax+0xc]
c001a268:	52                   	push   edx
c001a269:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a26f:	e8 f6 63 ff ff       	call   c001066a <VgaText::setTitle(char*)>
c001a274:	83 c4 10             	add    esp,0x10
c001a277:	31 c0                	xor    eax,eax
c001a279:	eb a6                	jmp    c001a221 <sysAppSettings(regs*)+0x50>
c001a27b:	83 ec 08             	sub    esp,0x8
c001a27e:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001a284:	83 e0 0f             	and    eax,0xf
c001a287:	50                   	push   eax
c001a288:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a28d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a290:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a296:	e8 bf 63 ff ff       	call   c001065a <VgaText::setTitleColour(VgaColour)>
c001a29b:	58                   	pop    eax
c001a29c:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001a2a2:	5a                   	pop    edx
c001a2a3:	c1 e8 04             	shr    eax,0x4
c001a2a6:	83 e0 0f             	and    eax,0xf
c001a2a9:	50                   	push   eax
c001a2aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a2af:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a2b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2b8:	e8 8d 63 ff ff       	call   c001064a <VgaText::setTitleTextColour(VgaColour)>
c001a2bd:	eb b5                	jmp    c001a274 <sysAppSettings(regs*)+0xa3>
c001a2bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a2c4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a2c7:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001a2cd:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001a2d3:	c0 e8 06             	shr    al,0x6
c001a2d6:	83 e0 01             	and    eax,0x1
c001a2d9:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001a2df:	31 c0                	xor    eax,eax
c001a2e1:	e9 3b ff ff ff       	jmp    c001a221 <sysAppSettings(regs*)+0x50>
c001a2e6:	b8 02 00 00 00       	mov    eax,0x2
c001a2eb:	e9 31 ff ff ff       	jmp    c001a221 <sysAppSettings(regs*)+0x50>

c001a2f0 <sysSetFatAttrib(regs*)>:
c001a2f0:	57                   	push   edi
c001a2f1:	56                   	push   esi
c001a2f2:	53                   	push   ebx
c001a2f3:	83 ec 1c             	sub    esp,0x1c
c001a2f6:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a2fa:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001a2fd:	68 14 01 00 00       	push   0x114
c001a302:	e8 bb 51 ff ff       	call   c000f4c2 <malloc>
c001a307:	83 c4 0c             	add    esp,0xc
c001a30a:	89 c3                	mov    ebx,eax
c001a30c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a311:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a314:	57                   	push   edi
c001a315:	53                   	push   ebx
c001a316:	e8 49 88 ff ff       	call   c0012b64 <File::File(char const*, Process*)>
c001a31b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a31e:	83 c4 0c             	add    esp,0xc
c001a321:	0f b6 d4             	movzx  edx,ah
c001a324:	0f b6 c0             	movzx  eax,al
c001a327:	52                   	push   edx
c001a328:	50                   	push   eax
c001a329:	53                   	push   ebx
c001a32a:	e8 ab 8a ff ff       	call   c0012dda <File::chfatattr(unsigned char, unsigned char)>
c001a32f:	83 c4 10             	add    esp,0x10
c001a332:	85 db                	test   ebx,ebx
c001a334:	74 14                	je     c001a34a <sysSetFatAttrib(regs*)+0x5a>
c001a336:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a33a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a33c:	83 ec 0c             	sub    esp,0xc
c001a33f:	53                   	push   ebx
c001a340:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001a343:	83 c4 10             	add    esp,0x10
c001a346:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a34a:	85 c0                	test   eax,eax
c001a34c:	0f 95 c0             	setne  al
c001a34f:	31 d2                	xor    edx,edx
c001a351:	0f b6 c0             	movzx  eax,al
c001a354:	f7 d8                	neg    eax
c001a356:	83 d2 00             	adc    edx,0x0
c001a359:	83 c4 10             	add    esp,0x10
c001a35c:	f7 da                	neg    edx
c001a35e:	5b                   	pop    ebx
c001a35f:	5e                   	pop    esi
c001a360:	5f                   	pop    edi
c001a361:	c3                   	ret    

c001a362 <sysPipe(regs*)>:
c001a362:	57                   	push   edi
c001a363:	56                   	push   esi
c001a364:	53                   	push   ebx
c001a365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a369:	83 ec 0c             	sub    esp,0xc
c001a36c:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001a36f:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001a372:	6a 20                	push   0x20
c001a374:	e8 49 51 ff ff       	call   c000f4c2 <malloc>
c001a379:	89 c3                	mov    ebx,eax
c001a37b:	58                   	pop    eax
c001a37c:	5a                   	pop    edx
c001a37d:	68 00 50 00 00       	push   0x5000
c001a382:	53                   	push   ebx
c001a383:	e8 20 5c ff ff       	call   c000ffa8 <Pipe::Pipe(int)>
c001a388:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a38b:	e8 6a 6e ff ff       	call   c00111fa <UnixFile::getFileDescriptor()>
c001a390:	89 07                	mov    DWORD PTR [edi],eax
c001a392:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a395:	e8 60 6e ff ff       	call   c00111fa <UnixFile::getFileDescriptor()>
c001a39a:	83 c4 10             	add    esp,0x10
c001a39d:	89 06                	mov    DWORD PTR [esi],eax
c001a39f:	31 d2                	xor    edx,edx
c001a3a1:	5b                   	pop    ebx
c001a3a2:	31 c0                	xor    eax,eax
c001a3a4:	5e                   	pop    esi
c001a3a5:	5f                   	pop    edi
c001a3a6:	c3                   	ret    

c001a3a7 <sysGetUnixTime(regs*)>:
c001a3a7:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c001a3ac:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a3b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a3b6:	e9 85 91 ff ff       	jmp    c0013540 <Clock::timeInSecondsLocal()>

c001a3bb <string_ends_with(char const*, char const*)>:
c001a3bb:	57                   	push   edi
c001a3bc:	56                   	push   esi
c001a3bd:	53                   	push   ebx
c001a3be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a3c2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a3c6:	83 ec 0c             	sub    esp,0xc
c001a3c9:	53                   	push   ebx
c001a3ca:	e8 cb 62 fe ff       	call   c000069a <strlen>
c001a3cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a3d2:	89 c6                	mov    esi,eax
c001a3d4:	e8 c1 62 fe ff       	call   c000069a <strlen>
c001a3d9:	83 c4 10             	add    esp,0x10
c001a3dc:	39 c6                	cmp    esi,eax
c001a3de:	7d 06                	jge    c001a3e6 <string_ends_with(char const*, char const*)+0x2b>
c001a3e0:	5b                   	pop    ebx
c001a3e1:	31 c0                	xor    eax,eax
c001a3e3:	5e                   	pop    esi
c001a3e4:	5f                   	pop    edi
c001a3e5:	c3                   	ret    
c001a3e6:	83 ec 08             	sub    esp,0x8
c001a3e9:	29 c6                	sub    esi,eax
c001a3eb:	57                   	push   edi
c001a3ec:	01 f3                	add    ebx,esi
c001a3ee:	53                   	push   ebx
c001a3ef:	e8 79 63 fe ff       	call   c000076d <strcmp>
c001a3f4:	83 c4 10             	add    esp,0x10
c001a3f7:	85 c0                	test   eax,eax
c001a3f9:	5b                   	pop    ebx
c001a3fa:	0f 94 c0             	sete   al
c001a3fd:	5e                   	pop    esi
c001a3fe:	0f b6 c0             	movzx  eax,al
c001a401:	5f                   	pop    edi
c001a402:	c3                   	ret    

c001a403 <sysCallOpen(regs*)>:
c001a403:	56                   	push   esi
c001a404:	53                   	push   ebx
c001a405:	81 ec 04 01 00 00    	sub    esp,0x104
c001a40b:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001a412:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001a415:	85 c9                	test   ecx,ecx
c001a417:	0f 84 b3 00 00 00    	je     c001a4d0 <sysCallOpen(regs*)+0xcd>
c001a41d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001a420:	85 c0                	test   eax,eax
c001a422:	0f 84 a8 00 00 00    	je     c001a4d0 <sysCallOpen(regs*)+0xcd>
c001a428:	52                   	push   edx
c001a429:	68 6c 8a 02 c0       	push   0xc0028a6c
c001a42e:	50                   	push   eax
c001a42f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a433:	56                   	push   esi
c001a434:	e8 81 85 ff ff       	call   c00129ba <standardiseFiles(char*, char const*, char const*)>
c001a439:	89 34 24             	mov    DWORD PTR [esp],esi
c001a43c:	e8 59 62 fe ff       	call   c000069a <strlen>
c001a441:	83 c4 10             	add    esp,0x10
c001a444:	48                   	dec    eax
c001a445:	74 1d                	je     c001a464 <sysCallOpen(regs*)+0x61>
c001a447:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001a44a:	eb 0f                	jmp    c001a45b <sysCallOpen(regs*)+0x58>
c001a44c:	80 fa 3a             	cmp    dl,0x3a
c001a44f:	74 0f                	je     c001a460 <sysCallOpen(regs*)+0x5d>
c001a451:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a455:	48                   	dec    eax
c001a456:	74 0c                	je     c001a464 <sysCallOpen(regs*)+0x61>
c001a458:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001a45b:	80 fa 2e             	cmp    dl,0x2e
c001a45e:	75 ec                	jne    c001a44c <sysCallOpen(regs*)+0x49>
c001a460:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001a464:	83 ec 08             	sub    esp,0x8
c001a467:	68 70 8a 02 c0       	push   0xc0028a70
c001a46c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a46f:	e8 47 ff ff ff       	call   c001a3bb <string_ends_with(char const*, char const*)>
c001a474:	83 c4 10             	add    esp,0x10
c001a477:	85 c0                	test   eax,eax
c001a479:	75 17                	jne    c001a492 <sysCallOpen(regs*)+0x8f>
c001a47b:	83 ec 08             	sub    esp,0x8
c001a47e:	68 91 8a 02 c0       	push   0xc0028a91
c001a483:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a486:	e8 30 ff ff ff       	call   c001a3bb <string_ends_with(char const*, char const*)>
c001a48b:	83 c4 10             	add    esp,0x10
c001a48e:	85 c0                	test   eax,eax
c001a490:	74 51                	je     c001a4e3 <sysCallOpen(regs*)+0xe0>
c001a492:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a495:	83 ec 08             	sub    esp,0x8
c001a498:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001a49e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a4a5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a4a8:	ff 30                	push   DWORD PTR [eax]
c001a4aa:	68 75 8a 02 c0       	push   0xc0028a75
c001a4af:	e8 81 81 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001a4b4:	c7 04 24 84 8a 02 c0 	mov    DWORD PTR [esp],0xc0028a84
c001a4bb:	e8 75 81 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001a4c0:	83 c4 10             	add    esp,0x10
c001a4c3:	81 c4 04 01 00 00    	add    esp,0x104
c001a4c9:	31 c0                	xor    eax,eax
c001a4cb:	31 d2                	xor    edx,edx
c001a4cd:	5b                   	pop    ebx
c001a4ce:	5e                   	pop    esi
c001a4cf:	c3                   	ret    
c001a4d0:	81 c4 04 01 00 00    	add    esp,0x104
c001a4d6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a4db:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a4e0:	5b                   	pop    ebx
c001a4e1:	5e                   	pop    esi
c001a4e2:	c3                   	ret    
c001a4e3:	83 ec 08             	sub    esp,0x8
c001a4e6:	68 71 8a 02 c0       	push   0xc0028a71
c001a4eb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a4ee:	e8 7a 62 fe ff       	call   c000076d <strcmp>
c001a4f3:	83 c4 10             	add    esp,0x10
c001a4f6:	85 c0                	test   eax,eax
c001a4f8:	74 98                	je     c001a492 <sysCallOpen(regs*)+0x8f>
c001a4fa:	83 ec 08             	sub    esp,0x8
c001a4fd:	68 70 8a 02 c0       	push   0xc0028a70
c001a502:	56                   	push   esi
c001a503:	e8 b3 fe ff ff       	call   c001a3bb <string_ends_with(char const*, char const*)>
c001a508:	83 c4 10             	add    esp,0x10
c001a50b:	85 c0                	test   eax,eax
c001a50d:	75 83                	jne    c001a492 <sysCallOpen(regs*)+0x8f>
c001a50f:	83 ec 08             	sub    esp,0x8
c001a512:	68 96 8a 02 c0       	push   0xc0028a96
c001a517:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a51a:	e8 9c fe ff ff       	call   c001a3bb <string_ends_with(char const*, char const*)>
c001a51f:	83 c4 10             	add    esp,0x10
c001a522:	85 c0                	test   eax,eax
c001a524:	0f 85 d9 00 00 00    	jne    c001a603 <sysCallOpen(regs*)+0x200>
c001a52a:	83 ec 08             	sub    esp,0x8
c001a52d:	68 9b 8a 02 c0       	push   0xc0028a9b
c001a532:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a535:	e8 81 fe ff ff       	call   c001a3bb <string_ends_with(char const*, char const*)>
c001a53a:	83 c4 10             	add    esp,0x10
c001a53d:	85 c0                	test   eax,eax
c001a53f:	0f 85 be 00 00 00    	jne    c001a603 <sysCallOpen(regs*)+0x200>
c001a545:	83 ec 08             	sub    esp,0x8
c001a548:	68 97 8a 02 c0       	push   0xc0028a97
c001a54d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a550:	e8 18 62 fe ff       	call   c000076d <strcmp>
c001a555:	83 c4 10             	add    esp,0x10
c001a558:	85 c0                	test   eax,eax
c001a55a:	0f 84 a3 00 00 00    	je     c001a603 <sysCallOpen(regs*)+0x200>
c001a560:	83 ec 08             	sub    esp,0x8
c001a563:	68 96 8a 02 c0       	push   0xc0028a96
c001a568:	56                   	push   esi
c001a569:	e8 4d fe ff ff       	call   c001a3bb <string_ends_with(char const*, char const*)>
c001a56e:	83 c4 10             	add    esp,0x10
c001a571:	85 c0                	test   eax,eax
c001a573:	0f 85 8a 00 00 00    	jne    c001a603 <sysCallOpen(regs*)+0x200>
c001a579:	83 ec 0c             	sub    esp,0xc
c001a57c:	68 14 01 00 00       	push   0x114
c001a581:	e8 3c 4f ff ff       	call   c000f4c2 <malloc>
c001a586:	83 c4 0c             	add    esp,0xc
c001a589:	89 c6                	mov    esi,eax
c001a58b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a590:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a593:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a596:	56                   	push   esi
c001a597:	e8 c8 85 ff ff       	call   c0012b64 <File::File(char const*, Process*)>
c001a59c:	83 c4 10             	add    esp,0x10
c001a59f:	85 f6                	test   esi,esi
c001a5a1:	0f 84 29 ff ff ff    	je     c001a4d0 <sysCallOpen(regs*)+0xcd>
c001a5a7:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001a5aa:	0f b6 c2             	movzx  eax,dl
c001a5ad:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001a5b0:	89 d0                	mov    eax,edx
c001a5b2:	83 e0 01             	and    eax,0x1
c001a5b5:	f6 c2 02             	test   dl,0x2
c001a5b8:	74 03                	je     c001a5bd <sysCallOpen(regs*)+0x1ba>
c001a5ba:	83 c8 02             	or     eax,0x2
c001a5bd:	f6 c2 04             	test   dl,0x4
c001a5c0:	74 03                	je     c001a5c5 <sysCallOpen(regs*)+0x1c2>
c001a5c2:	83 c8 04             	or     eax,0x4
c001a5c5:	f6 c2 08             	test   dl,0x8
c001a5c8:	74 03                	je     c001a5cd <sysCallOpen(regs*)+0x1ca>
c001a5ca:	83 c8 0a             	or     eax,0xa
c001a5cd:	83 e2 10             	and    edx,0x10
c001a5d0:	74 03                	je     c001a5d5 <sysCallOpen(regs*)+0x1d2>
c001a5d2:	83 c8 12             	or     eax,0x12
c001a5d5:	83 ec 08             	sub    esp,0x8
c001a5d8:	50                   	push   eax
c001a5d9:	56                   	push   esi
c001a5da:	e8 e9 85 ff ff       	call   c0012bc8 <File::open(FileOpenMode)>
c001a5df:	83 c4 10             	add    esp,0x10
c001a5e2:	85 c0                	test   eax,eax
c001a5e4:	0f 85 e6 fe ff ff    	jne    c001a4d0 <sysCallOpen(regs*)+0xcd>
c001a5ea:	83 ec 0c             	sub    esp,0xc
c001a5ed:	56                   	push   esi
c001a5ee:	e8 07 6c ff ff       	call   c00111fa <UnixFile::getFileDescriptor()>
c001a5f3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a5f6:	89 02                	mov    DWORD PTR [edx],eax
c001a5f8:	c1 f8 1f             	sar    eax,0x1f
c001a5fb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a5fe:	e9 bd fe ff ff       	jmp    c001a4c0 <sysCallOpen(regs*)+0xbd>
c001a603:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a606:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001a60c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a613:	e9 ab fe ff ff       	jmp    c001a4c3 <sysCallOpen(regs*)+0xc0>

c001a618 <setupSystemCalls()>:
c001a618:	c7 05 60 b6 02 c0 03 98 01 c0 	mov    DWORD PTR ds:0xc002b660,0xc0019803
c001a622:	c7 05 64 b6 02 c0 1e 96 01 c0 	mov    DWORD PTR ds:0xc002b664,0xc001961e
c001a62c:	c7 05 68 b6 02 c0 46 97 01 c0 	mov    DWORD PTR ds:0xc002b668,0xc0019746
c001a636:	c7 05 6c b6 02 c0 9b 97 01 c0 	mov    DWORD PTR ds:0xc002b66c,0xc001979b
c001a640:	c7 05 70 b6 02 c0 de 96 01 c0 	mov    DWORD PTR ds:0xc002b670,0xc00196de
c001a64a:	c7 05 74 b6 02 c0 1d 98 01 c0 	mov    DWORD PTR ds:0xc002b674,0xc001981d
c001a654:	c7 05 78 b6 02 c0 ac 99 01 c0 	mov    DWORD PTR ds:0xc002b678,0xc00199ac
c001a65e:	c7 05 7c b6 02 c0 cb 99 01 c0 	mov    DWORD PTR ds:0xc002b67c,0xc00199cb
c001a668:	c7 05 84 b6 02 c0 3b 9d 01 c0 	mov    DWORD PTR ds:0xc002b684,0xc0019d3b
c001a672:	c7 05 80 b6 02 c0 03 a4 01 c0 	mov    DWORD PTR ds:0xc002b680,0xc001a403
c001a67c:	c7 05 88 b6 02 c0 c3 9d 01 c0 	mov    DWORD PTR ds:0xc002b688,0xc0019dc3
c001a686:	c7 05 8c b6 02 c0 2a 9a 01 c0 	mov    DWORD PTR ds:0xc002b68c,0xc0019a2a
c001a690:	c7 05 90 b6 02 c0 29 98 01 c0 	mov    DWORD PTR ds:0xc002b690,0xc0019829
c001a69a:	c7 05 94 b6 02 c0 2e 98 01 c0 	mov    DWORD PTR ds:0xc002b694,0xc001982e
c001a6a4:	c7 05 98 b6 02 c0 9e 9e 01 c0 	mov    DWORD PTR ds:0xc002b698,0xc0019e9e
c001a6ae:	c7 05 9c b6 02 c0 38 9e 01 c0 	mov    DWORD PTR ds:0xc002b69c,0xc0019e38
c001a6b8:	c7 05 a0 b6 02 c0 12 9b 01 c0 	mov    DWORD PTR ds:0xc002b6a0,0xc0019b12
c001a6c2:	c7 05 a4 b6 02 c0 7b 9b 01 c0 	mov    DWORD PTR ds:0xc002b6a4,0xc0019b7b
c001a6cc:	c7 05 a8 b6 02 c0 f8 9b 01 c0 	mov    DWORD PTR ds:0xc002b6a8,0xc0019bf8
c001a6d6:	c7 05 ac b6 02 c0 33 98 01 c0 	mov    DWORD PTR ds:0xc002b6ac,0xc0019833
c001a6e0:	c7 05 b0 b6 02 c0 0e 9f 01 c0 	mov    DWORD PTR ds:0xc002b6b0,0xc0019f0e
c001a6ea:	c7 05 b4 b6 02 c0 28 9f 01 c0 	mov    DWORD PTR ds:0xc002b6b4,0xc0019f28
c001a6f4:	c7 05 b8 b6 02 c0 28 9f 01 c0 	mov    DWORD PTR ds:0xc002b6b8,0xc0019f28
c001a6fe:	c7 05 bc b6 02 c0 69 9f 01 c0 	mov    DWORD PTR ds:0xc002b6bc,0xc0019f69
c001a708:	c7 05 c0 b6 02 c0 cd 9f 01 c0 	mov    DWORD PTR ds:0xc002b6c0,0xc0019fcd
c001a712:	c7 05 c4 b6 02 c0 3d 98 01 c0 	mov    DWORD PTR ds:0xc002b6c4,0xc001983d
c001a71c:	c7 05 c8 b6 02 c0 31 a0 01 c0 	mov    DWORD PTR ds:0xc002b6c8,0xc001a031
c001a726:	c7 05 cc b6 02 c0 e7 99 01 c0 	mov    DWORD PTR ds:0xc002b6cc,0xc00199e7
c001a730:	c7 05 d0 b6 02 c0 7d a0 01 c0 	mov    DWORD PTR ds:0xc002b6d0,0xc001a07d
c001a73a:	c7 05 d4 b6 02 c0 b8 9a 01 c0 	mov    DWORD PTR ds:0xc002b6d4,0xc0019ab8
c001a744:	c7 05 d8 b6 02 c0 52 a1 01 c0 	mov    DWORD PTR ds:0xc002b6d8,0xc001a152
c001a74e:	c7 05 dc b6 02 c0 7b 9c 01 c0 	mov    DWORD PTR ds:0xc002b6dc,0xc0019c7b
c001a758:	c7 05 e0 b6 02 c0 79 a1 01 c0 	mov    DWORD PTR ds:0xc002b6e0,0xc001a179
c001a762:	c7 05 e4 b6 02 c0 00 a1 01 c0 	mov    DWORD PTR ds:0xc002b6e4,0xc001a100
c001a76c:	c7 05 e8 b6 02 c0 d1 a1 01 c0 	mov    DWORD PTR ds:0xc002b6e8,0xc001a1d1
c001a776:	c7 05 ec b6 02 c0 4d 98 01 c0 	mov    DWORD PTR ds:0xc002b6ec,0xc001984d
c001a780:	c7 05 f0 b6 02 c0 b7 98 01 c0 	mov    DWORD PTR ds:0xc002b6f0,0xc00198b7
c001a78a:	c7 05 f4 b6 02 c0 fd 98 01 c0 	mov    DWORD PTR ds:0xc002b6f4,0xc00198fd
c001a794:	c7 05 f8 b6 02 c0 f0 a2 01 c0 	mov    DWORD PTR ds:0xc002b6f8,0xc001a2f0
c001a79e:	c7 05 fc b6 02 c0 43 9f 01 c0 	mov    DWORD PTR ds:0xc002b6fc,0xc0019f43
c001a7a8:	c7 05 00 b7 02 c0 4e 99 01 c0 	mov    DWORD PTR ds:0xc002b700,0xc001994e
c001a7b2:	c7 05 04 b7 02 c0 62 a3 01 c0 	mov    DWORD PTR ds:0xc002b704,0xc001a362
c001a7bc:	c7 05 08 b7 02 c0 a7 a3 01 c0 	mov    DWORD PTR ds:0xc002b708,0xc001a3a7
c001a7c6:	c7 05 0c b7 02 c0 36 96 01 c0 	mov    DWORD PTR ds:0xc002b70c,0xc0019636
c001a7d0:	c3                   	ret    

c001a7d1 <systemCall(regs*, void*)>:
c001a7d1:	53                   	push   ebx
c001a7d2:	83 ec 08             	sub    esp,0x8
c001a7d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a7d9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a7dc:	83 f8 7f             	cmp    eax,0x7f
c001a7df:	77 16                	ja     c001a7f7 <systemCall(regs*, void*)+0x26>
c001a7e1:	8b 14 85 60 b6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd49a0]
c001a7e8:	85 d2                	test   edx,edx
c001a7ea:	74 0b                	je     c001a7f7 <systemCall(regs*, void*)+0x26>
c001a7ec:	83 ec 0c             	sub    esp,0xc
c001a7ef:	53                   	push   ebx
c001a7f0:	ff d2                	call   edx
c001a7f2:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a7f5:	eb 0d                	jmp    c001a804 <systemCall(regs*, void*)+0x33>
c001a7f7:	52                   	push   edx
c001a7f8:	52                   	push   edx
c001a7f9:	50                   	push   eax
c001a7fa:	68 a0 8a 02 c0       	push   0xc0028aa0
c001a7ff:	e8 31 7e ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001a804:	83 c4 10             	add    esp,0x10
c001a807:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a80c:	31 d2                	xor    edx,edx
c001a80e:	83 c4 08             	add    esp,0x8
c001a811:	5b                   	pop    ebx
c001a812:	c3                   	ret    

c001a813 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001a813:	55                   	push   ebp
c001a814:	89 e5                	mov    ebp,esp
c001a816:	57                   	push   edi
c001a817:	56                   	push   esi
c001a818:	53                   	push   ebx
c001a819:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001a81f:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001a822:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001a825:	85 c0                	test   eax,eax
c001a827:	0f 95 c1             	setne  cl
c001a82a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001a82e:	0f 94 c2             	sete   dl
c001a831:	84 d1                	test   cl,dl
c001a833:	74 26                	je     c001a85b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001a835:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001a83c:	74 1d                	je     c001a85b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001a83e:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001a841:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001a847:	89 d6                	mov    esi,edx
c001a849:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001a84f:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001a855:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001a858:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001a85b:	83 ec 0c             	sub    esp,0xc
c001a85e:	05 ff 0f 00 00       	add    eax,0xfff
c001a863:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001a866:	6a 01                	push   0x1
c001a868:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001a86e:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001a874:	e8 cc 6d ff ff       	call   c0011645 <Virt::allocateKernelVirtualPages(int)>
c001a879:	83 c4 10             	add    esp,0x10
c001a87c:	89 c6                	mov    esi,eax
c001a87e:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001a884:	0f 86 21 01 00 00    	jbe    c001a9ab <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001a88a:	c1 eb 0c             	shr    ebx,0xc
c001a88d:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001a897:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001a89d:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001a8a0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001a8a3:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001a8a9:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001a8ac:	29 d8                	sub    eax,ebx
c001a8ae:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001a8b4:	0f 83 f4 00 00 00    	jae    c001a9ae <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001a8ba:	83 ec 0c             	sub    esp,0xc
c001a8bd:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001a8c3:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001a8c6:	3d 00 10 00 00       	cmp    eax,0x1000
c001a8cb:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001a8cd:	52                   	push   edx
c001a8ce:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001a8d4:	52                   	push   edx
c001a8d5:	76 05                	jbe    c001a8dc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001a8d7:	b8 00 10 00 00       	mov    eax,0x1000
c001a8dc:	31 d2                	xor    edx,edx
c001a8de:	52                   	push   edx
c001a8df:	50                   	push   eax
c001a8e0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001a8e3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a8e6:	83 c4 20             	add    esp,0x20
c001a8e9:	85 c0                	test   eax,eax
c001a8eb:	74 1f                	je     c001a90c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001a8ed:	51                   	push   ecx
c001a8ee:	51                   	push   ecx
c001a8ef:	50                   	push   eax
c001a8f0:	68 b4 8a 02 c0       	push   0xc0028ab4
c001a8f5:	e8 3b 7d ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001a8fa:	89 34 24             	mov    DWORD PTR [esp],esi
c001a8fd:	e8 a7 70 ff ff       	call   c00119a9 <Virt::freeKernelVirtualPages(unsigned long)>
c001a902:	83 c4 10             	add    esp,0x10
c001a905:	31 c0                	xor    eax,eax
c001a907:	e9 7c 01 00 00       	jmp    c001aa88 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001a90c:	e8 f4 14 00 00       	call   c001be05 <lockScheduler()>
c001a911:	e8 56 51 ff ff       	call   c000fa6c <Phys::allocatePage()>
c001a916:	6a 07                	push   0x7
c001a918:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001a91e:	56                   	push   esi
c001a91f:	50                   	push   eax
c001a920:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a926:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a929:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001a92f:	e8 dc 73 ff ff       	call   c0011d10 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a934:	83 c4 0c             	add    esp,0xc
c001a937:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a93d:	6a 00                	push   0x0
c001a93f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a945:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a948:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001a94e:	e8 27 72 ff ff       	call   c0011b7a <VAS::mapOtherVASIn(bool, VAS*)>
c001a953:	58                   	pop    eax
c001a954:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001a95a:	5a                   	pop    edx
c001a95b:	68 07 04 00 00       	push   0x407
c001a960:	53                   	push   ebx
c001a961:	81 c3 00 10 00 00    	add    ebx,0x1000
c001a967:	50                   	push   eax
c001a968:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a96e:	6a 00                	push   0x0
c001a970:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a975:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a978:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a97e:	e8 47 77 ff ff       	call   c00120ca <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001a983:	83 c4 1c             	add    esp,0x1c
c001a986:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001a98c:	68 00 10 00 00       	push   0x1000
c001a991:	50                   	push   eax
c001a992:	56                   	push   esi
c001a993:	e8 af 5c fe ff       	call   c0000647 <memcpy>
c001a998:	e8 6a 14 00 00       	call   c001be07 <unlockScheduler()>
c001a99d:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001a9a3:	83 c4 10             	add    esp,0x10
c001a9a6:	e9 f5 fe ff ff       	jmp    c001a8a0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001a9ab:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001a9ae:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001a9b8:	0f 86 bc 00 00 00    	jbe    c001aa7a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001a9be:	e8 42 14 00 00       	call   c001be05 <lockScheduler()>
c001a9c3:	51                   	push   ecx
c001a9c4:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a9ca:	6a 00                	push   0x0
c001a9cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a9d1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a9d4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a9da:	e8 9b 71 ff ff       	call   c0011b7a <VAS::mapOtherVASIn(bool, VAS*)>
c001a9df:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001a9e5:	83 c4 10             	add    esp,0x10
c001a9e8:	c1 e8 0c             	shr    eax,0xc
c001a9eb:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001a9f5:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001a9fb:	e8 6c 50 ff ff       	call   c000fa6c <Phys::allocatePage()>
c001aa00:	6a 07                	push   0x7
c001aa02:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001aa08:	56                   	push   esi
c001aa09:	50                   	push   eax
c001aa0a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001aa10:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001aa13:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001aa19:	e8 f2 72 ff ff       	call   c0011d10 <VAS::mapPage(unsigned long, unsigned long, int)>
c001aa1e:	58                   	pop    eax
c001aa1f:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001aa25:	5a                   	pop    edx
c001aa26:	68 07 04 00 00       	push   0x407
c001aa2b:	53                   	push   ebx
c001aa2c:	81 c3 00 10 00 00    	add    ebx,0x1000
c001aa32:	50                   	push   eax
c001aa33:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001aa39:	6a 00                	push   0x0
c001aa3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa40:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aa43:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001aa49:	e8 7c 76 ff ff       	call   c00120ca <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001aa4e:	83 c4 1c             	add    esp,0x1c
c001aa51:	68 00 10 00 00       	push   0x1000
c001aa56:	6a 00                	push   0x0
c001aa58:	56                   	push   esi
c001aa59:	e8 1f 5c fe ff       	call   c000067d <memset>
c001aa5e:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001aa64:	83 c4 10             	add    esp,0x10
c001aa67:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001aa6d:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001aa73:	77 86                	ja     c001a9fb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001aa75:	e8 8d 13 00 00       	call   c001be07 <unlockScheduler()>
c001aa7a:	83 ec 0c             	sub    esp,0xc
c001aa7d:	56                   	push   esi
c001aa7e:	e8 26 6f ff ff       	call   c00119a9 <Virt::freeKernelVirtualPages(unsigned long)>
c001aa83:	83 c4 10             	add    esp,0x10
c001aa86:	b0 01                	mov    al,0x1
c001aa88:	8d 65 f4             	lea    esp,[ebp-0xc]
c001aa8b:	5b                   	pop    ebx
c001aa8c:	5e                   	pop    esi
c001aa8d:	5f                   	pop    edi
c001aa8e:	5d                   	pop    ebp
c001aa8f:	c3                   	ret    

c001aa90 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001aa90:	55                   	push   ebp
c001aa91:	57                   	push   edi
c001aa92:	56                   	push   esi
c001aa93:	53                   	push   ebx
c001aa94:	83 ec 48             	sub    esp,0x48
c001aa97:	68 14 01 00 00       	push   0x114
c001aa9c:	e8 21 4a ff ff       	call   c000f4c2 <malloc>
c001aaa1:	83 c4 0c             	add    esp,0xc
c001aaa4:	89 c6                	mov    esi,eax
c001aaa6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001aaaa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001aaae:	50                   	push   eax
c001aaaf:	e8 b0 80 ff ff       	call   c0012b64 <File::File(char const*, Process*)>
c001aab4:	58                   	pop    eax
c001aab5:	5a                   	pop    edx
c001aab6:	6a 01                	push   0x1
c001aab8:	56                   	push   esi
c001aab9:	e8 0a 81 ff ff       	call   c0012bc8 <File::open(FileOpenMode)>
c001aabe:	83 c4 10             	add    esp,0x10
c001aac1:	85 c0                	test   eax,eax
c001aac3:	0f 85 47 01 00 00    	jne    c001ac10 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001aac9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001aad1:	83 ec 0c             	sub    esp,0xc
c001aad4:	6a 34                	push   0x34
c001aad6:	e8 e7 49 ff ff       	call   c000f4c2 <malloc>
c001aadb:	89 c3                	mov    ebx,eax
c001aadd:	58                   	pop    eax
c001aade:	8b 06                	mov    eax,DWORD PTR [esi]
c001aae0:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001aae4:	57                   	push   edi
c001aae5:	53                   	push   ebx
c001aae6:	6a 00                	push   0x0
c001aae8:	6a 34                	push   0x34
c001aaea:	56                   	push   esi
c001aaeb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aaee:	83 c4 20             	add    esp,0x20
c001aaf1:	85 c0                	test   eax,eax
c001aaf3:	0f 85 17 01 00 00    	jne    c001ac10 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001aaf9:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001aaff:	0f 85 0b 01 00 00    	jne    c001ac10 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ab05:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ab08:	85 c0                	test   eax,eax
c001ab0a:	0f 84 00 01 00 00    	je     c001ac10 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ab10:	31 d2                	xor    edx,edx
c001ab12:	55                   	push   ebp
c001ab13:	52                   	push   edx
c001ab14:	50                   	push   eax
c001ab15:	56                   	push   esi
c001ab16:	e8 6b 81 ff ff       	call   c0012c86 <File::seek(unsigned long long)>
c001ab1b:	83 c4 10             	add    esp,0x10
c001ab1e:	85 c0                	test   eax,eax
c001ab20:	0f 85 ea 00 00 00    	jne    c001ac10 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ab26:	83 ec 0c             	sub    esp,0xc
c001ab29:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ab2c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ab30:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ab34:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ab38:	0f af c2             	imul   eax,edx
c001ab3b:	50                   	push   eax
c001ab3c:	e8 81 49 ff ff       	call   c000f4c2 <malloc>
c001ab41:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ab43:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ab47:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ab4a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ab4e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ab52:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ab56:	0f af c2             	imul   eax,edx
c001ab59:	99                   	cdq    
c001ab5a:	52                   	push   edx
c001ab5b:	50                   	push   eax
c001ab5c:	56                   	push   esi
c001ab5d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ab60:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001ab63:	83 c4 20             	add    esp,0x20
c001ab66:	85 c0                	test   eax,eax
c001ab68:	0f 84 a2 00 00 00    	je     c001ac10 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ab6e:	31 d2                	xor    edx,edx
c001ab70:	51                   	push   ecx
c001ab71:	52                   	push   edx
c001ab72:	50                   	push   eax
c001ab73:	56                   	push   esi
c001ab74:	e8 0d 81 ff ff       	call   c0012c86 <File::seek(unsigned long long)>
c001ab79:	83 c4 10             	add    esp,0x10
c001ab7c:	85 c0                	test   eax,eax
c001ab7e:	0f 85 8c 00 00 00    	jne    c001ac10 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ab84:	83 ec 0c             	sub    esp,0xc
c001ab87:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ab8b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ab8f:	31 ed                	xor    ebp,ebp
c001ab91:	0f af c2             	imul   eax,edx
c001ab94:	50                   	push   eax
c001ab95:	e8 28 49 ff ff       	call   c000f4c2 <malloc>
c001ab9a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ab9c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aba0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001aba3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aba7:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001abab:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001abaf:	0f af c2             	imul   eax,edx
c001abb2:	99                   	cdq    
c001abb3:	52                   	push   edx
c001abb4:	50                   	push   eax
c001abb5:	56                   	push   esi
c001abb6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001abb9:	83 c4 20             	add    esp,0x20
c001abbc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001abc4:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001abc8:	0f 86 80 00 00 00    	jbe    c001ac4e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001abce:	0f b7 fd             	movzx  edi,bp
c001abd1:	c1 e7 05             	shl    edi,0x5
c001abd4:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001abd8:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001abdb:	75 6b                	jne    c001ac48 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001abdd:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001abe0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001abe4:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001abe7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001abeb:	52                   	push   edx
c001abec:	31 d2                	xor    edx,edx
c001abee:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001abf1:	52                   	push   edx
c001abf2:	50                   	push   eax
c001abf3:	56                   	push   esi
c001abf4:	e8 8d 80 ff ff       	call   c0012c86 <File::seek(unsigned long long)>
c001abf9:	83 c4 10             	add    esp,0x10
c001abfc:	85 c0                	test   eax,eax
c001abfe:	74 17                	je     c001ac17 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001ac00:	83 ec 0c             	sub    esp,0xc
c001ac03:	68 df 8a 02 c0       	push   0xc0028adf
c001ac08:	e8 28 7a ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001ac0d:	83 c4 10             	add    esp,0x10
c001ac10:	31 c0                	xor    eax,eax
c001ac12:	e9 87 00 00 00       	jmp    c001ac9e <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001ac17:	83 ec 0c             	sub    esp,0xc
c001ac1a:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001ac1d:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001ac20:	50                   	push   eax
c001ac21:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ac25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac29:	56                   	push   esi
c001ac2a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001ac2e:	e8 e0 fb ff ff       	call   c001a813 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001ac33:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac37:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001ac3b:	83 c4 20             	add    esp,0x20
c001ac3e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001ac42:	73 04                	jae    c001ac48 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ac44:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac48:	45                   	inc    ebp
c001ac49:	e9 76 ff ff ff       	jmp    c001abc4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001ac4e:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001ac52:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ac56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac5a:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001ac60:	83 ec 0c             	sub    esp,0xc
c001ac63:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001ac69:	25 00 f0 ff ff       	and    eax,0xfffff000
c001ac6e:	05 00 10 00 00       	add    eax,0x1000
c001ac73:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ac76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac7a:	e8 53 48 ff ff       	call   c000f4d2 <free>
c001ac7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac82:	e8 4b 48 ff ff       	call   c000f4d2 <free>
c001ac87:	58                   	pop    eax
c001ac88:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ac8c:	e8 41 48 ff ff       	call   c000f4d2 <free>
c001ac91:	89 34 24             	mov    DWORD PTR [esp],esi
c001ac94:	e8 8d 7f ff ff       	call   c0012c26 <File::close()>
c001ac99:	83 c4 10             	add    esp,0x10
c001ac9c:	b0 01                	mov    al,0x1
c001ac9e:	83 c4 3c             	add    esp,0x3c
c001aca1:	5b                   	pop    ebx
c001aca2:	5e                   	pop    esi
c001aca3:	5f                   	pop    edi
c001aca4:	5d                   	pop    ebp
c001aca5:	c3                   	ret    

c001aca6 <Thr::runtimeReferenceHelper()>:
c001aca6:	83 ec 18             	sub    esp,0x18
c001aca9:	68 e7 8a 02 c0       	push   0xc0028ae7
c001acae:	e8 82 79 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001acb3:	fa                   	cli    
c001acb4:	83 c4 10             	add    esp,0x10
c001acb7:	eb fe                	jmp    c001acb7 <Thr::runtimeReferenceHelper()+0x11>

c001acb9 <Thr::getAddressOfKernelSymbol(char const*)>:
c001acb9:	57                   	push   edi
c001acba:	56                   	push   esi
c001acbb:	53                   	push   ebx
c001acbc:	31 db                	xor    ebx,ebx
c001acbe:	39 1d 00 c0 02 c0    	cmp    DWORD PTR ds:0xc002c000,ebx
c001acc4:	7e 3c                	jle    c001ad02 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001acc6:	8b 34 9d 80 bf 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd4080]
c001accd:	31 ff                	xor    edi,edi
c001accf:	39 3c 9d 80 be 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd4180],edi
c001acd6:	7e 27                	jle    c001acff <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001acd8:	50                   	push   eax
c001acd9:	50                   	push   eax
c001acda:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001acde:	8b 06                	mov    eax,DWORD PTR [esi]
c001ace0:	03 04 9d 00 bf 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd4100]
c001ace7:	50                   	push   eax
c001ace8:	e8 80 5a fe ff       	call   c000076d <strcmp>
c001aced:	83 c4 10             	add    esp,0x10
c001acf0:	85 c0                	test   eax,eax
c001acf2:	75 05                	jne    c001acf9 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001acf4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001acf7:	eb 0b                	jmp    c001ad04 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001acf9:	83 c6 10             	add    esi,0x10
c001acfc:	47                   	inc    edi
c001acfd:	eb d0                	jmp    c001accf <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001acff:	43                   	inc    ebx
c001ad00:	eb bc                	jmp    c001acbe <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001ad02:	31 c0                	xor    eax,eax
c001ad04:	5b                   	pop    ebx
c001ad05:	5e                   	pop    esi
c001ad06:	5f                   	pop    edi
c001ad07:	c3                   	ret    

c001ad08 <Thr::loadKernelSymbolTable(char const*)>:
c001ad08:	55                   	push   ebp
c001ad09:	57                   	push   edi
c001ad0a:	56                   	push   esi
c001ad0b:	53                   	push   ebx
c001ad0c:	83 ec 68             	sub    esp,0x68
c001ad0f:	8b 35 54 c0 02 c0    	mov    esi,DWORD PTR ds:0xc002c054
c001ad15:	68 14 01 00 00       	push   0x114
c001ad1a:	e8 a3 47 ff ff       	call   c000f4c2 <malloc>
c001ad1f:	83 c4 0c             	add    esp,0xc
c001ad22:	89 c3                	mov    ebx,eax
c001ad24:	56                   	push   esi
c001ad25:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001ad29:	50                   	push   eax
c001ad2a:	e8 35 7e ff ff       	call   c0012b64 <File::File(char const*, Process*)>
c001ad2f:	5e                   	pop    esi
c001ad30:	5f                   	pop    edi
c001ad31:	6a 01                	push   0x1
c001ad33:	53                   	push   ebx
c001ad34:	e8 8f 7e ff ff       	call   c0012bc8 <File::open(FileOpenMode)>
c001ad39:	83 c4 10             	add    esp,0x10
c001ad3c:	31 d2                	xor    edx,edx
c001ad3e:	85 c0                	test   eax,eax
c001ad40:	0f 85 74 02 00 00    	jne    c001afba <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001ad46:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001ad4e:	83 ec 0c             	sub    esp,0xc
c001ad51:	6a 34                	push   0x34
c001ad53:	e8 6a 47 ff ff       	call   c000f4c2 <malloc>
c001ad58:	59                   	pop    ecx
c001ad59:	89 c7                	mov    edi,eax
c001ad5b:	8d 74 24 34          	lea    esi,[esp+0x34]
c001ad5f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad61:	56                   	push   esi
c001ad62:	57                   	push   edi
c001ad63:	6a 00                	push   0x0
c001ad65:	6a 34                	push   0x34
c001ad67:	53                   	push   ebx
c001ad68:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ad6b:	83 c4 20             	add    esp,0x20
c001ad6e:	85 c0                	test   eax,eax
c001ad70:	74 17                	je     c001ad89 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001ad72:	83 ec 0c             	sub    esp,0xc
c001ad75:	68 09 8b 02 c0       	push   0xc0028b09
c001ad7a:	e8 7a e0 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c001ad7f:	83 c4 10             	add    esp,0x10
c001ad82:	31 d2                	xor    edx,edx
c001ad84:	e9 31 02 00 00       	jmp    c001afba <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001ad89:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ad8f:	75 e1                	jne    c001ad72 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001ad91:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ad94:	85 c0                	test   eax,eax
c001ad96:	74 da                	je     c001ad72 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001ad98:	52                   	push   edx
c001ad99:	31 d2                	xor    edx,edx
c001ad9b:	52                   	push   edx
c001ad9c:	50                   	push   eax
c001ad9d:	53                   	push   ebx
c001ad9e:	e8 e3 7e ff ff       	call   c0012c86 <File::seek(unsigned long long)>
c001ada3:	83 c4 10             	add    esp,0x10
c001ada6:	85 c0                	test   eax,eax
c001ada8:	75 c8                	jne    c001ad72 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001adaa:	83 ec 0c             	sub    esp,0xc
c001adad:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001adb1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001adb5:	31 ed                	xor    ebp,ebp
c001adb7:	0f af c2             	imul   eax,edx
c001adba:	50                   	push   eax
c001adbb:	e8 02 47 ff ff       	call   c000f4c2 <malloc>
c001adc0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001adc2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001adc6:	89 34 24             	mov    DWORD PTR [esp],esi
c001adc9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001adcd:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001add1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001add5:	0f af c2             	imul   eax,edx
c001add8:	99                   	cdq    
c001add9:	52                   	push   edx
c001adda:	50                   	push   eax
c001addb:	53                   	push   ebx
c001addc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001addf:	83 c4 20             	add    esp,0x20
c001ade2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001adea:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001adf2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001adfa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ae02:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ae06:	0f 86 aa 00 00 00    	jbe    c001aeb6 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001ae0c:	0f b7 f5             	movzx  esi,bp
c001ae0f:	6b f6 28             	imul   esi,esi,0x28
c001ae12:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ae16:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ae19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ae1d:	50                   	push   eax
c001ae1e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ae22:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ae26:	8b 16                	mov    edx,DWORD PTR [esi]
c001ae28:	6b c0 28             	imul   eax,eax,0x28
c001ae2b:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ae2f:	89 d0                	mov    eax,edx
c001ae31:	31 d2                	xor    edx,edx
c001ae33:	52                   	push   edx
c001ae34:	50                   	push   eax
c001ae35:	53                   	push   ebx
c001ae36:	e8 4b 7e ff ff       	call   c0012c86 <File::seek(unsigned long long)>
c001ae3b:	83 c4 0c             	add    esp,0xc
c001ae3e:	6a 20                	push   0x20
c001ae40:	6a 00                	push   0x0
c001ae42:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ae46:	52                   	push   edx
c001ae47:	e8 31 58 fe ff       	call   c000067d <memset>
c001ae4c:	58                   	pop    eax
c001ae4d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae4f:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001ae53:	51                   	push   ecx
c001ae54:	8d 54 24 40          	lea    edx,[esp+0x40]
c001ae58:	52                   	push   edx
c001ae59:	6a 00                	push   0x0
c001ae5b:	6a 1f                	push   0x1f
c001ae5d:	53                   	push   ebx
c001ae5e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae61:	83 c4 18             	add    esp,0x18
c001ae64:	68 20 8b 02 c0       	push   0xc0028b20
c001ae69:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ae6d:	52                   	push   edx
c001ae6e:	e8 fa 58 fe ff       	call   c000076d <strcmp>
c001ae73:	83 c4 10             	add    esp,0x10
c001ae76:	85 c0                	test   eax,eax
c001ae78:	75 0f                	jne    c001ae89 <Thr::loadKernelSymbolTable(char const*)+0x181>
c001ae7a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ae7d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ae81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae89:	50                   	push   eax
c001ae8a:	50                   	push   eax
c001ae8b:	68 28 8b 02 c0       	push   0xc0028b28
c001ae90:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ae94:	50                   	push   eax
c001ae95:	e8 d3 58 fe ff       	call   c000076d <strcmp>
c001ae9a:	83 c4 10             	add    esp,0x10
c001ae9d:	85 c0                	test   eax,eax
c001ae9f:	75 0f                	jne    c001aeb0 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001aea1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001aea4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aea8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aeac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001aeb0:	45                   	inc    ebp
c001aeb1:	e9 4c ff ff ff       	jmp    c001ae02 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001aeb6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001aebb:	75 10                	jne    c001aecd <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001aebd:	83 ec 0c             	sub    esp,0xc
c001aec0:	68 30 8b 02 c0       	push   0xc0028b30
c001aec5:	e8 2f df ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c001aeca:	83 c4 10             	add    esp,0x10
c001aecd:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001aed2:	75 10                	jne    c001aee4 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001aed4:	83 ec 0c             	sub    esp,0xc
c001aed7:	68 30 8b 02 c0       	push   0xc0028b30
c001aedc:	e8 18 df ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c001aee1:	83 c4 10             	add    esp,0x10
c001aee4:	31 d2                	xor    edx,edx
c001aee6:	50                   	push   eax
c001aee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeeb:	52                   	push   edx
c001aeec:	50                   	push   eax
c001aeed:	53                   	push   ebx
c001aeee:	e8 93 7d ff ff       	call   c0012c86 <File::seek(unsigned long long)>
c001aef3:	5a                   	pop    edx
c001aef4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001aef8:	e8 c5 45 ff ff       	call   c000f4c2 <malloc>
c001aefd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001af01:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001af05:	31 c9                	xor    ecx,ecx
c001af07:	5e                   	pop    esi
c001af08:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af0a:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001af0e:	55                   	push   ebp
c001af0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af13:	51                   	push   ecx
c001af14:	52                   	push   edx
c001af15:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001af19:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001af1d:	53                   	push   ebx
c001af1e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af21:	83 c4 14             	add    esp,0x14
c001af24:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001af28:	e8 95 45 ff ff       	call   c000f4c2 <malloc>
c001af2d:	89 c6                	mov    esi,eax
c001af2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af31:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001af34:	56                   	push   esi
c001af35:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001af39:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001af3d:	51                   	push   ecx
c001af3e:	52                   	push   edx
c001af3f:	53                   	push   ebx
c001af40:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af43:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001af47:	8b 15 00 c0 02 c0    	mov    edx,DWORD PTR ds:0xc002c000
c001af4d:	83 c4 1c             	add    esp,0x1c
c001af50:	c1 e8 04             	shr    eax,0x4
c001af53:	89 04 95 80 be 02 c0 	mov    DWORD PTR [edx*4-0x3ffd4180],eax
c001af5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af5e:	31 d2                	xor    edx,edx
c001af60:	52                   	push   edx
c001af61:	50                   	push   eax
c001af62:	53                   	push   ebx
c001af63:	e8 1e 7d ff ff       	call   c0012c86 <File::seek(unsigned long long)>
c001af68:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001af6a:	31 d2                	xor    edx,edx
c001af6c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001af6f:	56                   	push   esi
c001af70:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af74:	52                   	push   edx
c001af75:	50                   	push   eax
c001af76:	53                   	push   ebx
c001af77:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001af7a:	83 c4 14             	add    esp,0x14
c001af7d:	53                   	push   ebx
c001af7e:	e8 a3 7c ff ff       	call   c0012c26 <File::close()>
c001af83:	5d                   	pop    ebp
c001af84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001af88:	e8 45 45 ff ff       	call   c000f4d2 <free>
c001af8d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001af90:	e8 3d 45 ff ff       	call   c000f4d2 <free>
c001af95:	a1 00 c0 02 c0       	mov    eax,ds:0xc002c000
c001af9a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001af9e:	8d 50 01             	lea    edx,[eax+0x1]
c001afa1:	89 0c 85 80 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4080],ecx
c001afa8:	89 15 00 c0 02 c0    	mov    DWORD PTR ds:0xc002c000,edx
c001afae:	89 34 85 00 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4100],esi
c001afb5:	83 c4 10             	add    esp,0x10
c001afb8:	b2 01                	mov    dl,0x1
c001afba:	83 c4 5c             	add    esp,0x5c
c001afbd:	88 d0                	mov    al,dl
c001afbf:	5b                   	pop    ebx
c001afc0:	5e                   	pop    esi
c001afc1:	5f                   	pop    edi
c001afc2:	5d                   	pop    ebp
c001afc3:	c3                   	ret    

c001afc4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001afc4:	55                   	push   ebp
c001afc5:	57                   	push   edi
c001afc6:	56                   	push   esi
c001afc7:	53                   	push   ebx
c001afc8:	81 ec 68 03 00 00    	sub    esp,0x368
c001afce:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001afd5:	8b 1d 54 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c054
c001afdb:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001afdf:	68 14 01 00 00       	push   0x114
c001afe4:	e8 d9 44 ff ff       	call   c000f4c2 <malloc>
c001afe9:	83 c4 0c             	add    esp,0xc
c001afec:	89 c5                	mov    ebp,eax
c001afee:	53                   	push   ebx
c001afef:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001aff6:	50                   	push   eax
c001aff7:	e8 68 7b ff ff       	call   c0012b64 <File::File(char const*, Process*)>
c001affc:	58                   	pop    eax
c001affd:	5a                   	pop    edx
c001affe:	6a 01                	push   0x1
c001b000:	55                   	push   ebp
c001b001:	e8 c2 7b ff ff       	call   c0012bc8 <File::open(FileOpenMode)>
c001b006:	83 c4 10             	add    esp,0x10
c001b009:	85 c0                	test   eax,eax
c001b00b:	0f 85 f2 06 00 00    	jne    c001b703 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b011:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b019:	83 ec 0c             	sub    esp,0xc
c001b01c:	6a 34                	push   0x34
c001b01e:	e8 9f 44 ff ff       	call   c000f4c2 <malloc>
c001b023:	89 c7                	mov    edi,eax
c001b025:	58                   	pop    eax
c001b026:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b029:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001b02d:	53                   	push   ebx
c001b02e:	57                   	push   edi
c001b02f:	6a 00                	push   0x0
c001b031:	6a 34                	push   0x34
c001b033:	55                   	push   ebp
c001b034:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b037:	83 c4 20             	add    esp,0x20
c001b03a:	85 c0                	test   eax,eax
c001b03c:	0f 85 c1 06 00 00    	jne    c001b703 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b042:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001b048:	0f 85 b5 06 00 00    	jne    c001b703 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b04e:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001b051:	85 c0                	test   eax,eax
c001b053:	0f 84 aa 06 00 00    	je     c001b703 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b059:	31 d2                	xor    edx,edx
c001b05b:	56                   	push   esi
c001b05c:	52                   	push   edx
c001b05d:	50                   	push   eax
c001b05e:	55                   	push   ebp
c001b05f:	e8 22 7c ff ff       	call   c0012c86 <File::seek(unsigned long long)>
c001b064:	83 c4 10             	add    esp,0x10
c001b067:	85 c0                	test   eax,eax
c001b069:	0f 85 94 06 00 00    	jne    c001b703 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b06f:	83 ec 0c             	sub    esp,0xc
c001b072:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001b075:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001b079:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001b07d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b081:	0f af c2             	imul   eax,edx
c001b084:	50                   	push   eax
c001b085:	e8 38 44 ff ff       	call   c000f4c2 <malloc>
c001b08a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b08d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b091:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b094:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b098:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001b09c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b0a0:	0f af c2             	imul   eax,edx
c001b0a3:	99                   	cdq    
c001b0a4:	52                   	push   edx
c001b0a5:	50                   	push   eax
c001b0a6:	55                   	push   ebp
c001b0a7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b0aa:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001b0ad:	83 c4 20             	add    esp,0x20
c001b0b0:	85 c0                	test   eax,eax
c001b0b2:	0f 84 4b 06 00 00    	je     c001b703 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b0b8:	31 d2                	xor    edx,edx
c001b0ba:	51                   	push   ecx
c001b0bb:	52                   	push   edx
c001b0bc:	50                   	push   eax
c001b0bd:	55                   	push   ebp
c001b0be:	e8 c3 7b ff ff       	call   c0012c86 <File::seek(unsigned long long)>
c001b0c3:	83 c4 10             	add    esp,0x10
c001b0c6:	85 c0                	test   eax,eax
c001b0c8:	0f 85 35 06 00 00    	jne    c001b703 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b0ce:	83 ec 0c             	sub    esp,0xc
c001b0d1:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001b0d5:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001b0d9:	31 f6                	xor    esi,esi
c001b0db:	0f af c2             	imul   eax,edx
c001b0de:	50                   	push   eax
c001b0df:	e8 de 43 ff ff       	call   c000f4c2 <malloc>
c001b0e4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b0e7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b0eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b0ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0f2:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001b0f6:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001b0fa:	0f af c2             	imul   eax,edx
c001b0fd:	99                   	cdq    
c001b0fe:	52                   	push   edx
c001b0ff:	50                   	push   eax
c001b100:	55                   	push   ebp
c001b101:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b104:	83 c4 20             	add    esp,0x20
c001b107:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001b10b:	0f 86 8a 00 00 00    	jbe    c001b19b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001b111:	0f b7 de             	movzx  ebx,si
c001b114:	c1 e3 05             	shl    ebx,0x5
c001b117:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001b11b:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001b11e:	75 75                	jne    c001b195 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001b120:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b123:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b127:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b12a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b12e:	52                   	push   edx
c001b12f:	31 d2                	xor    edx,edx
c001b131:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001b134:	52                   	push   edx
c001b135:	50                   	push   eax
c001b136:	55                   	push   ebp
c001b137:	e8 4a 7b ff ff       	call   c0012c86 <File::seek(unsigned long long)>
c001b13c:	83 c4 10             	add    esp,0x10
c001b13f:	85 c0                	test   eax,eax
c001b141:	0f 85 bc 05 00 00    	jne    c001b703 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b147:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001b14e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b151:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001b155:	31 d2                	xor    edx,edx
c001b157:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001b15b:	83 ec 0c             	sub    esp,0xc
c001b15e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b162:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001b169:	50                   	push   eax
c001b16a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b16e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b172:	52                   	push   edx
c001b173:	50                   	push   eax
c001b174:	55                   	push   ebp
c001b175:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b178:	83 c4 1c             	add    esp,0x1c
c001b17b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b17e:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001b181:	50                   	push   eax
c001b182:	6a 00                	push   0x0
c001b184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b188:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001b18c:	50                   	push   eax
c001b18d:	e8 eb 54 fe ff       	call   c000067d <memset>
c001b192:	83 c4 10             	add    esp,0x10
c001b195:	46                   	inc    esi
c001b196:	e9 6c ff ff ff       	jmp    c001b107 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001b19b:	31 db                	xor    ebx,ebx
c001b19d:	50                   	push   eax
c001b19e:	68 00 01 00 00       	push   0x100
c001b1a3:	6a 00                	push   0x0
c001b1a5:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001b1a9:	50                   	push   eax
c001b1aa:	e8 ce 54 fe ff       	call   c000067d <memset>
c001b1af:	83 c4 0c             	add    esp,0xc
c001b1b2:	68 00 01 00 00       	push   0x100
c001b1b7:	6a 00                	push   0x0
c001b1b9:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001b1c0:	50                   	push   eax
c001b1c1:	e8 b7 54 fe ff       	call   c000067d <memset>
c001b1c6:	83 c4 10             	add    esp,0x10
c001b1c9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b1d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001b1d9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001b1e1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b1e9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001b1f1:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001b1f5:	0f 86 30 01 00 00    	jbe    c001b32b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001b1fb:	0f b7 f3             	movzx  esi,bx
c001b1fe:	6b f6 28             	imul   esi,esi,0x28
c001b201:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001b205:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b208:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b20c:	50                   	push   eax
c001b20d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b211:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001b215:	8b 06                	mov    eax,DWORD PTR [esi]
c001b217:	6b d2 28             	imul   edx,edx,0x28
c001b21a:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001b21e:	31 d2                	xor    edx,edx
c001b220:	52                   	push   edx
c001b221:	50                   	push   eax
c001b222:	55                   	push   ebp
c001b223:	e8 5e 7a ff ff       	call   c0012c86 <File::seek(unsigned long long)>
c001b228:	83 c4 0c             	add    esp,0xc
c001b22b:	6a 20                	push   0x20
c001b22d:	6a 00                	push   0x0
c001b22f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001b236:	51                   	push   ecx
c001b237:	e8 41 54 fe ff       	call   c000067d <memset>
c001b23c:	58                   	pop    eax
c001b23d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b240:	8d 54 24 58          	lea    edx,[esp+0x58]
c001b244:	52                   	push   edx
c001b245:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001b24c:	51                   	push   ecx
c001b24d:	6a 00                	push   0x0
c001b24f:	6a 1f                	push   0x1f
c001b251:	55                   	push   ebp
c001b252:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b255:	83 c4 1c             	add    esp,0x1c
c001b258:	6a 09                	push   0x9
c001b25a:	68 4a 8b 02 c0       	push   0xc0028b4a
c001b25f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001b266:	51                   	push   ecx
c001b267:	e8 78 53 fe ff       	call   c00005e4 <memcmp>
c001b26c:	83 c4 10             	add    esp,0x10
c001b26f:	85 c0                	test   eax,eax
c001b271:	75 21                	jne    c001b294 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001b273:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b277:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b27b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b27f:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001b283:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b286:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001b28d:	89 c8                	mov    eax,ecx
c001b28f:	40                   	inc    eax
c001b290:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b294:	50                   	push   eax
c001b295:	6a 09                	push   0x9
c001b297:	68 54 8b 02 c0       	push   0xc0028b54
c001b29c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001b2a3:	50                   	push   eax
c001b2a4:	e8 3b 53 fe ff       	call   c00005e4 <memcmp>
c001b2a9:	83 c4 10             	add    esp,0x10
c001b2ac:	85 c0                	test   eax,eax
c001b2ae:	75 21                	jne    c001b2d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001b2b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b2b4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b2b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2bc:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001b2c0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b2c3:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001b2ca:	89 c8                	mov    eax,ecx
c001b2cc:	40                   	inc    eax
c001b2cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b2d1:	50                   	push   eax
c001b2d2:	50                   	push   eax
c001b2d3:	68 20 8b 02 c0       	push   0xc0028b20
c001b2d8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001b2df:	50                   	push   eax
c001b2e0:	e8 88 54 fe ff       	call   c000076d <strcmp>
c001b2e5:	83 c4 10             	add    esp,0x10
c001b2e8:	85 c0                	test   eax,eax
c001b2ea:	75 0f                	jne    c001b2fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001b2ec:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b2ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b2f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b2f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b2fb:	50                   	push   eax
c001b2fc:	50                   	push   eax
c001b2fd:	68 28 8b 02 c0       	push   0xc0028b28
c001b302:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001b309:	50                   	push   eax
c001b30a:	e8 5e 54 fe ff       	call   c000076d <strcmp>
c001b30f:	83 c4 10             	add    esp,0x10
c001b312:	85 c0                	test   eax,eax
c001b314:	75 0f                	jne    c001b325 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001b316:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b319:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b31d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b321:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b325:	43                   	inc    ebx
c001b326:	e9 c6 fe ff ff       	jmp    c001b1f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001b32b:	31 d2                	xor    edx,edx
c001b32d:	50                   	push   eax
c001b32e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b332:	52                   	push   edx
c001b333:	50                   	push   eax
c001b334:	55                   	push   ebp
c001b335:	e8 4c 79 ff ff       	call   c0012c86 <File::seek(unsigned long long)>
c001b33a:	5a                   	pop    edx
c001b33b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b33f:	e8 7e 41 ff ff       	call   c000f4c2 <malloc>
c001b344:	31 d2                	xor    edx,edx
c001b346:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001b34a:	59                   	pop    ecx
c001b34b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b34e:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001b352:	53                   	push   ebx
c001b353:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b357:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b35b:	52                   	push   edx
c001b35c:	50                   	push   eax
c001b35d:	55                   	push   ebp
c001b35e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b361:	83 c4 14             	add    esp,0x14
c001b364:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b368:	e8 55 41 ff ff       	call   c000f4c2 <malloc>
c001b36d:	31 d2                	xor    edx,edx
c001b36f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b373:	83 c4 0c             	add    esp,0xc
c001b376:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b37a:	52                   	push   edx
c001b37b:	50                   	push   eax
c001b37c:	55                   	push   ebp
c001b37d:	e8 04 79 ff ff       	call   c0012c86 <File::seek(unsigned long long)>
c001b382:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b385:	31 d2                	xor    edx,edx
c001b387:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b38a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b38e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b392:	52                   	push   edx
c001b393:	50                   	push   eax
c001b394:	55                   	push   ebp
c001b395:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b398:	83 c4 20             	add    esp,0x20
c001b39b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001b3a3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b3a7:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001b3ab:	0f 84 56 03 00 00    	je     c001b707 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x743>
c001b3b1:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001b3b8:	31 d2                	xor    edx,edx
c001b3ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b3be:	c1 e8 03             	shr    eax,0x3
c001b3c1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001b3c5:	50                   	push   eax
c001b3c6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b3ca:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001b3ce:	52                   	push   edx
c001b3cf:	50                   	push   eax
c001b3d0:	55                   	push   ebp
c001b3d1:	e8 b0 78 ff ff       	call   c0012c86 <File::seek(unsigned long long)>
c001b3d6:	58                   	pop    eax
c001b3d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b3db:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001b3e2:	e8 db 40 ff ff       	call   c000f4c2 <malloc>
c001b3e7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b3ea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b3ee:	31 d2                	xor    edx,edx
c001b3f0:	58                   	pop    eax
c001b3f1:	8d 44 24 58          	lea    eax,[esp+0x58]
c001b3f5:	50                   	push   eax
c001b3f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b3fa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b3fe:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001b405:	52                   	push   edx
c001b406:	50                   	push   eax
c001b407:	55                   	push   ebp
c001b408:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b40b:	83 c4 20             	add    esp,0x20
c001b40e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001b416:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001b41a:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001b41e:	0f 8d c7 02 00 00    	jge    c001b6eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x727>
c001b424:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b428:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b42c:	31 db                	xor    ebx,ebx
c001b42e:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001b431:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b435:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b439:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001b43d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b441:	c1 e8 08             	shr    eax,0x8
c001b444:	89 c6                	mov    esi,eax
c001b446:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001b44a:	c1 e6 04             	shl    esi,0x4
c001b44d:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001b451:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001b454:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b458:	85 c0                	test   eax,eax
c001b45a:	0f 85 17 01 00 00    	jne    c001b577 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001b460:	83 ec 0c             	sub    esp,0xc
c001b463:	b3 01                	mov    bl,0x1
c001b465:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b469:	03 06                	add    eax,DWORD PTR [esi]
c001b46b:	50                   	push   eax
c001b46c:	e8 48 f8 ff ff       	call   c001acb9 <Thr::getAddressOfKernelSymbol(char const*)>
c001b471:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b475:	83 c4 10             	add    esp,0x10
c001b478:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b47d:	0f 85 f4 00 00 00    	jne    c001b577 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001b483:	50                   	push   eax
c001b484:	50                   	push   eax
c001b485:	68 5e 8b 02 c0       	push   0xc0028b5e
c001b48a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b48e:	03 06                	add    eax,DWORD PTR [esi]
c001b490:	50                   	push   eax
c001b491:	e8 d7 52 fe ff       	call   c000076d <strcmp>
c001b496:	83 c4 10             	add    esp,0x10
c001b499:	85 c0                	test   eax,eax
c001b49b:	75 0a                	jne    c001b4a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x4e3>
c001b49d:	b8 ac 3a 02 c0       	mov    eax,0xc0023aac
c001b4a2:	e9 ca 00 00 00       	jmp    c001b571 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001b4a7:	50                   	push   eax
c001b4a8:	50                   	push   eax
c001b4a9:	68 68 8b 02 c0       	push   0xc0028b68
c001b4ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b4b2:	03 06                	add    eax,DWORD PTR [esi]
c001b4b4:	50                   	push   eax
c001b4b5:	e8 b3 52 fe ff       	call   c000076d <strcmp>
c001b4ba:	83 c4 10             	add    esp,0x10
c001b4bd:	85 c0                	test   eax,eax
c001b4bf:	75 0a                	jne    c001b4cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x507>
c001b4c1:	b8 e0 37 02 c0       	mov    eax,0xc00237e0
c001b4c6:	e9 a6 00 00 00       	jmp    c001b571 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001b4cb:	53                   	push   ebx
c001b4cc:	53                   	push   ebx
c001b4cd:	68 71 8b 02 c0       	push   0xc0028b71
c001b4d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b4d6:	03 06                	add    eax,DWORD PTR [esi]
c001b4d8:	50                   	push   eax
c001b4d9:	e8 8f 52 fe ff       	call   c000076d <strcmp>
c001b4de:	83 c4 10             	add    esp,0x10
c001b4e1:	85 c0                	test   eax,eax
c001b4e3:	75 0a                	jne    c001b4ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52b>
c001b4e5:	b8 ac 3b 02 c0       	mov    eax,0xc0023bac
c001b4ea:	e9 82 00 00 00       	jmp    c001b571 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001b4ef:	51                   	push   ecx
c001b4f0:	51                   	push   ecx
c001b4f1:	68 7b 8b 02 c0       	push   0xc0028b7b
c001b4f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b4fa:	03 06                	add    eax,DWORD PTR [esi]
c001b4fc:	50                   	push   eax
c001b4fd:	e8 6b 52 fe ff       	call   c000076d <strcmp>
c001b502:	83 c4 10             	add    esp,0x10
c001b505:	85 c0                	test   eax,eax
c001b507:	74 63                	je     c001b56c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c001b509:	50                   	push   eax
c001b50a:	50                   	push   eax
c001b50b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b50f:	03 06                	add    eax,DWORD PTR [esi]
c001b511:	50                   	push   eax
c001b512:	68 84 8b 02 c0       	push   0xc0028b84
c001b517:	e8 19 71 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001b51c:	58                   	pop    eax
c001b51d:	5a                   	pop    edx
c001b51e:	68 9e 8b 02 c0       	push   0xc0028b9e
c001b523:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001b52a:	53                   	push   ebx
c001b52b:	e8 ec 51 fe ff       	call   c000071c <strcpy>
c001b530:	59                   	pop    ecx
c001b531:	58                   	pop    eax
c001b532:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b536:	03 06                	add    eax,DWORD PTR [esi]
c001b538:	50                   	push   eax
c001b539:	53                   	push   ebx
c001b53a:	e8 94 52 fe ff       	call   c00007d3 <strcat>
c001b53f:	58                   	pop    eax
c001b540:	5a                   	pop    edx
c001b541:	68 34 8c 02 c0       	push   0xc0028c34
c001b546:	53                   	push   ebx
c001b547:	e8 87 52 fe ff       	call   c00007d3 <strcat>
c001b54c:	83 c4 10             	add    esp,0x10
c001b54f:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b554:	0f 84 4b 01 00 00    	je     c001b6a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001b55a:	83 ec 0c             	sub    esp,0xc
c001b55d:	53                   	push   ebx
c001b55e:	e8 96 d8 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c001b563:	83 c4 10             	add    esp,0x10
c001b566:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001b56a:	eb 0b                	jmp    c001b577 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001b56c:	b8 2c 39 02 c0       	mov    eax,0xc002392c
c001b571:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b575:	b3 01                	mov    bl,0x1
c001b577:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001b57c:	0f 85 80 00 00 00    	jne    c001b602 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c001b582:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001b589:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b58d:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001b591:	01 ce                	add    esi,ecx
c001b593:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b59b:	8b 06                	mov    eax,DWORD PTR [esi]
c001b59d:	0f 94 c2             	sete   dl
c001b5a0:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b5a8:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001b5ad:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001b5b1:	84 db                	test   bl,bl
c001b5b3:	74 31                	je     c001b5e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x622>
c001b5b5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b5b9:	01 c3                	add    ebx,eax
c001b5bb:	84 d2                	test   dl,dl
c001b5bd:	75 0a                	jne    c001b5c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x605>
c001b5bf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b5c3:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b5c7:	76 32                	jbe    c001b5fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001b5c9:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b5ce:	0f 84 d1 00 00 00    	je     c001b6a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001b5d4:	83 ec 0c             	sub    esp,0xc
c001b5d7:	68 b5 8b 02 c0       	push   0xc0028bb5
c001b5dc:	e8 18 d8 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c001b5e1:	83 c4 10             	add    esp,0x10
c001b5e4:	eb 15                	jmp    c001b5fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001b5e6:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001b5e9:	84 d2                	test   dl,dl
c001b5eb:	75 0e                	jne    c001b5fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001b5ed:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b5f1:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b5f5:	77 04                	ja     c001b5fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001b5f7:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001b5fb:	89 1e                	mov    DWORD PTR [esi],ebx
c001b5fd:	e9 e0 00 00 00       	jmp    c001b6e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001b602:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001b607:	75 6e                	jne    c001b677 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b3>
c001b609:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001b610:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001b614:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001b618:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b620:	74 17                	je     c001b639 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001b622:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b62a:	74 0d                	je     c001b639 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001b62c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b630:	83 e8 04             	sub    eax,0x4
c001b633:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b637:	76 17                	jbe    c001b650 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68c>
c001b639:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b63e:	74 65                	je     c001b6a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001b640:	83 ec 0c             	sub    esp,0xc
c001b643:	68 d1 8b 02 c0       	push   0xc0028bd1
c001b648:	e8 ac d7 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c001b64d:	83 c4 10             	add    esp,0x10
c001b650:	8b 16                	mov    edx,DWORD PTR [esi]
c001b652:	84 db                	test   bl,bl
c001b654:	74 13                	je     c001b669 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c001b656:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b65a:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001b661:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001b665:	01 d0                	add    eax,edx
c001b667:	eb 06                	jmp    c001b66f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001b669:	89 d0                	mov    eax,edx
c001b66b:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001b66f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001b673:	89 06                	mov    DWORD PTR [esi],eax
c001b675:	eb 6b                	jmp    c001b6e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001b677:	50                   	push   eax
c001b678:	50                   	push   eax
c001b679:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001b67e:	50                   	push   eax
c001b67f:	68 ed 8b 02 c0       	push   0xc0028bed
c001b684:	e8 ac 6f ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001b689:	83 c4 10             	add    esp,0x10
c001b68c:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b691:	74 12                	je     c001b6a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001b693:	83 ec 0c             	sub    esp,0xc
c001b696:	68 f8 8b 02 c0       	push   0xc0028bf8
c001b69b:	e8 59 d7 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c001b6a0:	83 c4 10             	add    esp,0x10
c001b6a3:	eb 3d                	jmp    c001b6e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001b6a5:	83 ec 0c             	sub    esp,0xc
c001b6a8:	55                   	push   ebp
c001b6a9:	e8 78 75 ff ff       	call   c0012c26 <File::close()>
c001b6ae:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b6b1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b6b4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b6b7:	59                   	pop    ecx
c001b6b8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b6bc:	e8 11 3e ff ff       	call   c000f4d2 <free>
c001b6c1:	5b                   	pop    ebx
c001b6c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b6c6:	e8 07 3e ff ff       	call   c000f4d2 <free>
c001b6cb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b6ce:	e8 ff 3d ff ff       	call   c000f4d2 <free>
c001b6d3:	5e                   	pop    esi
c001b6d4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b6d8:	e8 f5 3d ff ff       	call   c000f4d2 <free>
c001b6dd:	83 c4 10             	add    esp,0x10
c001b6e0:	eb 21                	jmp    c001b703 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b6e2:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001b6e6:	e9 2b fd ff ff       	jmp    c001b416 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001b6eb:	83 ec 0c             	sub    esp,0xc
c001b6ee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b6f2:	e8 db 3d ff ff       	call   c000f4d2 <free>
c001b6f7:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001b6fb:	83 c4 10             	add    esp,0x10
c001b6fe:	e9 a0 fc ff ff       	jmp    c001b3a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001b703:	31 c0                	xor    eax,eax
c001b705:	eb 33                	jmp    c001b73a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x776>
c001b707:	83 ec 0c             	sub    esp,0xc
c001b70a:	55                   	push   ebp
c001b70b:	e8 16 75 ff ff       	call   c0012c26 <File::close()>
c001b710:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b713:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b716:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b719:	58                   	pop    eax
c001b71a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b71e:	e8 af 3d ff ff       	call   c000f4d2 <free>
c001b723:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b726:	e8 a7 3d ff ff       	call   c000f4d2 <free>
c001b72b:	5a                   	pop    edx
c001b72c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b730:	e8 9d 3d ff ff       	call   c000f4d2 <free>
c001b735:	83 c4 10             	add    esp,0x10
c001b738:	b0 01                	mov    al,0x1
c001b73a:	81 c4 5c 03 00 00    	add    esp,0x35c
c001b740:	5b                   	pop    ebx
c001b741:	5e                   	pop    esi
c001b742:	5f                   	pop    edi
c001b743:	5d                   	pop    ebp
c001b744:	c3                   	ret    

c001b745 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001b745:	56                   	push   esi
c001b746:	31 d2                	xor    edx,edx
c001b748:	53                   	push   ebx
c001b749:	8b 1d 60 b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b860
c001b74f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b753:	39 d3                	cmp    ebx,edx
c001b755:	7e 1b                	jle    c001b772 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001b757:	8b 04 95 80 ba 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd4580]
c001b75e:	39 c8                	cmp    eax,ecx
c001b760:	77 0d                	ja     c001b76f <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001b762:	8b 34 95 80 b8 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd4780]
c001b769:	01 c6                	add    esi,eax
c001b76b:	39 ce                	cmp    esi,ecx
c001b76d:	77 05                	ja     c001b774 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001b76f:	42                   	inc    edx
c001b770:	eb e1                	jmp    c001b753 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001b772:	31 c0                	xor    eax,eax
c001b774:	5b                   	pop    ebx
c001b775:	5e                   	pop    esi
c001b776:	c3                   	ret    

c001b777 <Thr::getDriverNameFromAddress(unsigned long)>:
c001b777:	53                   	push   ebx
c001b778:	31 c0                	xor    eax,eax
c001b77a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b77e:	8b 1d 60 b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b860
c001b784:	39 c3                	cmp    ebx,eax
c001b786:	7e 22                	jle    c001b7aa <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001b788:	8b 14 85 80 ba 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4580]
c001b78f:	39 ca                	cmp    edx,ecx
c001b791:	77 14                	ja     c001b7a7 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001b793:	03 14 85 80 b8 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd4780]
c001b79a:	39 ca                	cmp    edx,ecx
c001b79c:	76 09                	jbe    c001b7a7 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001b79e:	8b 04 85 80 bc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4380]
c001b7a5:	eb 05                	jmp    c001b7ac <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001b7a7:	40                   	inc    eax
c001b7a8:	eb da                	jmp    c001b784 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001b7aa:	31 c0                	xor    eax,eax
c001b7ac:	5b                   	pop    ebx
c001b7ad:	c3                   	ret    

c001b7ae <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001b7ae:	53                   	push   ebx
c001b7af:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b7b3:	53                   	push   ebx
c001b7b4:	e8 8c ff ff ff       	call   c001b745 <Thr::getDriverBaseFromAddress(unsigned long)>
c001b7b9:	5a                   	pop    edx
c001b7ba:	31 d2                	xor    edx,edx
c001b7bc:	85 c0                	test   eax,eax
c001b7be:	74 04                	je     c001b7c4 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001b7c0:	89 da                	mov    edx,ebx
c001b7c2:	29 c2                	sub    edx,eax
c001b7c4:	89 d0                	mov    eax,edx
c001b7c6:	5b                   	pop    ebx
c001b7c7:	c3                   	ret    

c001b7c8 <Thr::loadDLL(char const*, bool)>:
c001b7c8:	55                   	push   ebp
c001b7c9:	57                   	push   edi
c001b7ca:	56                   	push   esi
c001b7cb:	53                   	push   ebx
c001b7cc:	81 ec 34 01 00 00    	sub    esp,0x134
c001b7d2:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001b7d9:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001b7e0:	56                   	push   esi
c001b7e1:	68 10 8c 02 c0       	push   0xc0028c10
c001b7e6:	e8 4a 6e ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001b7eb:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b7f2:	e8 cb 3c ff ff       	call   c000f4c2 <malloc>
c001b7f7:	83 c4 0c             	add    esp,0xc
c001b7fa:	89 c3                	mov    ebx,eax
c001b7fc:	ff 35 54 c0 02 c0    	push   DWORD PTR ds:0xc002c054
c001b802:	56                   	push   esi
c001b803:	50                   	push   eax
c001b804:	e8 5b 73 ff ff       	call   c0012b64 <File::File(char const*, Process*)>
c001b809:	83 c4 10             	add    esp,0x10
c001b80c:	85 db                	test   ebx,ebx
c001b80e:	75 3c                	jne    c001b84c <Thr::loadDLL(char const*, bool)+0x84>
c001b810:	89 e8                	mov    eax,ebp
c001b812:	84 c0                	test   al,al
c001b814:	0f 84 b0 01 00 00    	je     c001b9ca <Thr::loadDLL(char const*, bool)+0x202>
c001b81a:	50                   	push   eax
c001b81b:	50                   	push   eax
c001b81c:	68 21 8c 02 c0       	push   0xc0028c21
c001b821:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001b825:	57                   	push   edi
c001b826:	e8 f1 4e fe ff       	call   c000071c <strcpy>
c001b82b:	58                   	pop    eax
c001b82c:	5a                   	pop    edx
c001b82d:	56                   	push   esi
c001b82e:	57                   	push   edi
c001b82f:	e8 9f 4f fe ff       	call   c00007d3 <strcat>
c001b834:	59                   	pop    ecx
c001b835:	58                   	pop    eax
c001b836:	68 34 8c 02 c0       	push   0xc0028c34
c001b83b:	57                   	push   edi
c001b83c:	e8 92 4f fe ff       	call   c00007d3 <strcat>
c001b841:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b844:	e8 b0 d5 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c001b849:	83 c4 10             	add    esp,0x10
c001b84c:	50                   	push   eax
c001b84d:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001b851:	50                   	push   eax
c001b852:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b856:	50                   	push   eax
c001b857:	53                   	push   ebx
c001b858:	e8 17 76 ff ff       	call   c0012e74 <File::stat(unsigned long long*, bool*)>
c001b85d:	83 c4 10             	add    esp,0x10
c001b860:	85 db                	test   ebx,ebx
c001b862:	74 0c                	je     c001b870 <Thr::loadDLL(char const*, bool)+0xa8>
c001b864:	83 ec 0c             	sub    esp,0xc
c001b867:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b869:	53                   	push   ebx
c001b86a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b86d:	83 c4 10             	add    esp,0x10
c001b870:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001b875:	75 0a                	jne    c001b881 <Thr::loadDLL(char const*, bool)+0xb9>
c001b877:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b87b:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001b87f:	75 3c                	jne    c001b8bd <Thr::loadDLL(char const*, bool)+0xf5>
c001b881:	89 e8                	mov    eax,ebp
c001b883:	84 c0                	test   al,al
c001b885:	0f 84 3d 01 00 00    	je     c001b9c8 <Thr::loadDLL(char const*, bool)+0x200>
c001b88b:	50                   	push   eax
c001b88c:	50                   	push   eax
c001b88d:	68 21 8c 02 c0       	push   0xc0028c21
c001b892:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001b896:	53                   	push   ebx
c001b897:	e8 80 4e fe ff       	call   c000071c <strcpy>
c001b89c:	58                   	pop    eax
c001b89d:	5a                   	pop    edx
c001b89e:	56                   	push   esi
c001b89f:	53                   	push   ebx
c001b8a0:	e8 2e 4f fe ff       	call   c00007d3 <strcat>
c001b8a5:	59                   	pop    ecx
c001b8a6:	5f                   	pop    edi
c001b8a7:	68 34 8c 02 c0       	push   0xc0028c34
c001b8ac:	53                   	push   ebx
c001b8ad:	e8 21 4f fe ff       	call   c00007d3 <strcat>
c001b8b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b8b5:	e8 3f d5 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c001b8ba:	83 c4 10             	add    esp,0x10
c001b8bd:	e8 13 5f ff ff       	call   c00117d5 <Virt::getAKernelVAS()>
c001b8c2:	51                   	push   ecx
c001b8c3:	6a 03                	push   0x3
c001b8c5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001b8c9:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b8cd:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001b8d3:	83 d3 00             	adc    ebx,0x0
c001b8d6:	89 ca                	mov    edx,ecx
c001b8d8:	89 d1                	mov    ecx,edx
c001b8da:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001b8de:	51                   	push   ecx
c001b8df:	50                   	push   eax
c001b8e0:	e8 2b 65 ff ff       	call   c0011e10 <VAS::allocatePages(int, int)>
c001b8e5:	89 34 24             	mov    DWORD PTR [esp],esi
c001b8e8:	89 c3                	mov    ebx,eax
c001b8ea:	e8 ab 4d fe ff       	call   c000069a <strlen>
c001b8ef:	8b 3d 60 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b860
c001b8f5:	40                   	inc    eax
c001b8f6:	89 04 24             	mov    DWORD PTR [esp],eax
c001b8f9:	e8 c4 3b ff ff       	call   c000f4c2 <malloc>
c001b8fe:	89 04 bd 80 bc 02 c0 	mov    DWORD PTR [edi*4-0x3ffd4380],eax
c001b905:	5f                   	pop    edi
c001b906:	58                   	pop    eax
c001b907:	a1 60 b8 02 c0       	mov    eax,ds:0xc002b860
c001b90c:	56                   	push   esi
c001b90d:	ff 34 85 80 bc 02 c0 	push   DWORD PTR [eax*4-0x3ffd4380]
c001b914:	e8 03 4e fe ff       	call   c000071c <strcpy>
c001b919:	a1 60 b8 02 c0       	mov    eax,ds:0xc002b860
c001b91e:	8d 50 01             	lea    edx,[eax+0x1]
c001b921:	89 1c 85 80 ba 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4580],ebx
c001b928:	89 15 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,edx
c001b92e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b932:	83 c4 0c             	add    esp,0xc
c001b935:	89 14 85 80 b8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4780],edx
c001b93c:	6a 01                	push   0x1
c001b93e:	53                   	push   ebx
c001b93f:	56                   	push   esi
c001b940:	e8 7f f6 ff ff       	call   c001afc4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001b945:	83 c4 10             	add    esp,0x10
c001b948:	89 c7                	mov    edi,eax
c001b94a:	fe c8                	dec    al
c001b94c:	74 16                	je     c001b964 <Thr::loadDLL(char const*, bool)+0x19c>
c001b94e:	89 e8                	mov    eax,ebp
c001b950:	84 c0                	test   al,al
c001b952:	74 10                	je     c001b964 <Thr::loadDLL(char const*, bool)+0x19c>
c001b954:	83 ec 0c             	sub    esp,0xc
c001b957:	68 36 8c 02 c0       	push   0xc0028c36
c001b95c:	e8 98 d4 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c001b961:	83 c4 10             	add    esp,0x10
c001b964:	31 f6                	xor    esi,esi
c001b966:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b96a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b96e:	05 ff 0f 00 00       	add    eax,0xfff
c001b973:	83 d2 00             	adc    edx,0x0
c001b976:	0f ac d0 0c          	shrd   eax,edx,0xc
c001b97a:	c1 ea 0c             	shr    edx,0xc
c001b97d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b981:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b985:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001b989:	ba 00 00 00 00       	mov    edx,0x0
c001b98e:	89 d0                	mov    eax,edx
c001b990:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001b994:	73 2c                	jae    c001b9c2 <Thr::loadDLL(char const*, bool)+0x1fa>
c001b996:	e8 3a 5e ff ff       	call   c00117d5 <Virt::getAKernelVAS()>
c001b99b:	89 f5                	mov    ebp,esi
c001b99d:	c1 e5 0c             	shl    ebp,0xc
c001b9a0:	52                   	push   edx
c001b9a1:	01 dd                	add    ebp,ebx
c001b9a3:	52                   	push   edx
c001b9a4:	55                   	push   ebp
c001b9a5:	50                   	push   eax
c001b9a6:	e8 df 5f ff ff       	call   c001198a <VAS::getPageTableEntry(unsigned long)>
c001b9ab:	83 c4 10             	add    esp,0x10
c001b9ae:	f6 00 60             	test   BYTE PTR [eax],0x60
c001b9b1:	75 0c                	jne    c001b9bf <Thr::loadDLL(char const*, bool)+0x1f7>
c001b9b3:	83 ec 0c             	sub    esp,0xc
c001b9b6:	55                   	push   ebp
c001b9b7:	e8 26 40 ff ff       	call   c000f9e2 <Phys::freePage(unsigned long)>
c001b9bc:	83 c4 10             	add    esp,0x10
c001b9bf:	46                   	inc    esi
c001b9c0:	eb a4                	jmp    c001b966 <Thr::loadDLL(char const*, bool)+0x19e>
c001b9c2:	89 f8                	mov    eax,edi
c001b9c4:	84 c0                	test   al,al
c001b9c6:	75 02                	jne    c001b9ca <Thr::loadDLL(char const*, bool)+0x202>
c001b9c8:	31 db                	xor    ebx,ebx
c001b9ca:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b9d0:	89 d8                	mov    eax,ebx
c001b9d2:	5b                   	pop    ebx
c001b9d3:	5e                   	pop    esi
c001b9d4:	5f                   	pop    edi
c001b9d5:	5d                   	pop    ebp
c001b9d6:	c3                   	ret    

c001b9d7 <Thr::executeDLL(unsigned long, void*)>:
c001b9d7:	56                   	push   esi
c001b9d8:	53                   	push   ebx
c001b9d9:	51                   	push   ecx
c001b9da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9de:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b9e2:	85 db                	test   ebx,ebx
c001b9e4:	75 10                	jne    c001b9f6 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001b9e6:	83 ec 0c             	sub    esp,0xc
c001b9e9:	68 55 8c 02 c0       	push   0xc0028c55
c001b9ee:	e8 06 d4 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c001b9f3:	83 c4 10             	add    esp,0x10
c001b9f6:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b9fa:	89 d8                	mov    eax,ebx
c001b9fc:	5a                   	pop    edx
c001b9fd:	5b                   	pop    ebx
c001b9fe:	5e                   	pop    esi
c001b9ff:	ff e0                	jmp    eax
c001ba01:	90                   	nop

c001ba02 <changeTSS>:
c001ba02:	83 ec 14             	sub    esp,0x14
c001ba05:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba0a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001ba0d:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001ba12:	c1 e2 15             	shl    edx,0x15
c001ba15:	29 d0                	sub    eax,edx
c001ba17:	50                   	push   eax
c001ba18:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c001ba1d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ba23:	05 7c 11 00 00       	add    eax,0x117c
c001ba28:	50                   	push   eax
c001ba29:	e8 56 55 ff ff       	call   c0010f84 <TSS::setESP(unsigned long)>
c001ba2e:	83 c4 1c             	add    esp,0x1c
c001ba31:	c3                   	ret    

c001ba32 <Process::addArgs(char**)>:
c001ba32:	57                   	push   edi
c001ba33:	56                   	push   esi
c001ba34:	53                   	push   ebx
c001ba35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ba39:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ba3d:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001ba47:	85 ff                	test   edi,edi
c001ba49:	74 3d                	je     c001ba88 <Process::addArgs(char**)+0x56>
c001ba4b:	8b 07                	mov    eax,DWORD PTR [edi]
c001ba4d:	85 c0                	test   eax,eax
c001ba4f:	74 37                	je     c001ba88 <Process::addArgs(char**)+0x56>
c001ba51:	31 db                	xor    ebx,ebx
c001ba53:	83 ec 0c             	sub    esp,0xc
c001ba56:	50                   	push   eax
c001ba57:	e8 3e 4c fe ff       	call   c000069a <strlen>
c001ba5c:	40                   	inc    eax
c001ba5d:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba60:	e8 5d 3a ff ff       	call   c000f4c2 <malloc>
c001ba65:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001ba6c:	5a                   	pop    edx
c001ba6d:	59                   	pop    ecx
c001ba6e:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001ba71:	43                   	inc    ebx
c001ba72:	50                   	push   eax
c001ba73:	e8 a4 4c fe ff       	call   c000071c <strcpy>
c001ba78:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001ba7e:	83 c4 10             	add    esp,0x10
c001ba81:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001ba84:	85 c0                	test   eax,eax
c001ba86:	75 cb                	jne    c001ba53 <Process::addArgs(char**)+0x21>
c001ba88:	5b                   	pop    ebx
c001ba89:	5e                   	pop    esi
c001ba8a:	5f                   	pop    edi
c001ba8b:	c3                   	ret    

c001ba8c <Process::Process(char const*, Process*, char**)>:
c001ba8c:	56                   	push   esi
c001ba8d:	53                   	push   ebx
c001ba8e:	83 ec 14             	sub    esp,0x14
c001ba91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba95:	05 0c 02 00 00       	add    eax,0x20c
c001ba9a:	bb 07 00 00 00       	mov    ebx,0x7
c001ba9f:	89 c6                	mov    esi,eax
c001baa1:	85 db                	test   ebx,ebx
c001baa3:	78 12                	js     c001bab7 <Process::Process(char const*, Process*, char**)+0x2b>
c001baa5:	83 ec 0c             	sub    esp,0xc
c001baa8:	56                   	push   esi
c001baa9:	e8 b4 a2 00 00       	call   c0025d62 <ThreadControlBlock::ThreadControlBlock()>
c001baae:	83 c4 10             	add    esp,0x10
c001bab1:	83 c6 63             	add    esi,0x63
c001bab4:	4b                   	dec    ebx
c001bab5:	eb ea                	jmp    c001baa1 <Process::Process(char const*, Process*, char**)+0x15>
c001bab7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001babb:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001bac2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bac6:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001bacf:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c001bad4:	8d 50 01             	lea    edx,[eax+0x1]
c001bad7:	89 15 e4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0e4,edx
c001badd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bae1:	89 02                	mov    DWORD PTR [edx],eax
c001bae3:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001baeb:	83 ec 0c             	sub    esp,0xc
c001baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001baf2:	e8 cb 39 ff ff       	call   c000f4c2 <malloc>
c001baf7:	83 c4 10             	add    esp,0x10
c001bafa:	89 c3                	mov    ebx,eax
c001bafc:	83 ec 08             	sub    esp,0x8
c001baff:	6a 00                	push   0x0
c001bb01:	53                   	push   ebx
c001bb02:	e8 b1 66 ff ff       	call   c00121b8 <VAS::VAS(bool)>
c001bb07:	83 c4 10             	add    esp,0x10
c001bb0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb0e:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001bb14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb18:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001bb22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb26:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bb2a:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001bb30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb34:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001bb3a:	85 c0                	test   eax,eax
c001bb3c:	74 42                	je     c001bb80 <Process::Process(char const*, Process*, char**)+0xf4>
c001bb3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb42:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001bb48:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bb4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb52:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001bb58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb5c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001bb62:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001bb68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb6c:	05 0c 01 00 00       	add    eax,0x10c
c001bb71:	83 ec 08             	sub    esp,0x8
c001bb74:	52                   	push   edx
c001bb75:	50                   	push   eax
c001bb76:	e8 a1 4b fe ff       	call   c000071c <strcpy>
c001bb7b:	83 c4 10             	add    esp,0x10
c001bb7e:	eb 63                	jmp    c001bbe3 <Process::Process(char const*, Process*, char**)+0x157>
c001bb80:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001bb88:	83 ec 0c             	sub    esp,0xc
c001bb8b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bb8f:	e8 2e 39 ff ff       	call   c000f4c2 <malloc>
c001bb94:	83 c4 10             	add    esp,0x10
c001bb97:	89 c3                	mov    ebx,eax
c001bb99:	83 ec 08             	sub    esp,0x8
c001bb9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bba0:	53                   	push   ebx
c001bba1:	e8 dc 50 ff ff       	call   c0010c82 <VgaText::VgaText(char const*)>
c001bba6:	83 c4 10             	add    esp,0x10
c001bba9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbad:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001bbb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbb7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001bbbd:	83 ec 0c             	sub    esp,0xc
c001bbc0:	50                   	push   eax
c001bbc1:	e8 bd 44 ff ff       	call   c0010083 <addToTerminalCycle(VgaText*)>
c001bbc6:	83 c4 10             	add    esp,0x10
c001bbc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbcd:	05 0c 01 00 00       	add    eax,0x10c
c001bbd2:	83 ec 08             	sub    esp,0x8
c001bbd5:	68 7f 8c 02 c0       	push   0xc0028c7f
c001bbda:	50                   	push   eax
c001bbdb:	e8 3c 4b fe ff       	call   c000071c <strcpy>
c001bbe0:	83 c4 10             	add    esp,0x10
c001bbe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbe7:	83 c0 0c             	add    eax,0xc
c001bbea:	83 ec 08             	sub    esp,0x8
c001bbed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bbf1:	50                   	push   eax
c001bbf2:	e8 25 4b fe ff       	call   c000071c <strcpy>
c001bbf7:	83 c4 10             	add    esp,0x10
c001bbfa:	83 ec 08             	sub    esp,0x8
c001bbfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bc01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc05:	e8 28 fe ff ff       	call   c001ba32 <Process::addArgs(char**)>
c001bc0a:	83 c4 10             	add    esp,0x10
c001bc0d:	83 ec 08             	sub    esp,0x8
c001bc10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc18:	e8 73 ee ff ff       	call   c001aa90 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001bc1d:	83 c4 10             	add    esp,0x10
c001bc20:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001bc24:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bc28:	83 f0 01             	xor    eax,0x1
c001bc2b:	88 c2                	mov    dl,al
c001bc2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc31:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c001bc37:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001bc3c:	83 ec 08             	sub    esp,0x8
c001bc3f:	50                   	push   eax
c001bc40:	68 7c 8d 02 c0       	push   0xc0028d7c
c001bc45:	e8 eb 69 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001bc4a:	83 c4 10             	add    esp,0x10
c001bc4d:	90                   	nop
c001bc4e:	83 c4 14             	add    esp,0x14
c001bc51:	5b                   	pop    ebx
c001bc52:	5e                   	pop    esi
c001bc53:	c3                   	ret    

c001bc54 <Process::Process(bool, char const*, Process*, char**)>:
c001bc54:	56                   	push   esi
c001bc55:	53                   	push   ebx
c001bc56:	83 ec 24             	sub    esp,0x24
c001bc59:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bc5d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bc61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bc65:	05 0c 02 00 00       	add    eax,0x20c
c001bc6a:	bb 07 00 00 00       	mov    ebx,0x7
c001bc6f:	89 c6                	mov    esi,eax
c001bc71:	85 db                	test   ebx,ebx
c001bc73:	78 12                	js     c001bc87 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001bc75:	83 ec 0c             	sub    esp,0xc
c001bc78:	56                   	push   esi
c001bc79:	e8 e4 a0 00 00       	call   c0025d62 <ThreadControlBlock::ThreadControlBlock()>
c001bc7e:	83 c4 10             	add    esp,0x10
c001bc81:	83 c6 63             	add    esi,0x63
c001bc84:	4b                   	dec    ebx
c001bc85:	eb ea                	jmp    c001bc71 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001bc87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bc8b:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001bc92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bc96:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001bc9f:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c001bca4:	8d 50 01             	lea    edx,[eax+0x1]
c001bca7:	89 15 e4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0e4,edx
c001bcad:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bcb1:	89 02                	mov    DWORD PTR [edx],eax
c001bcb3:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001bcbb:	83 ec 0c             	sub    esp,0xc
c001bcbe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001bcc2:	e8 fb 37 ff ff       	call   c000f4c2 <malloc>
c001bcc7:	83 c4 10             	add    esp,0x10
c001bcca:	89 c3                	mov    ebx,eax
c001bccc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bcd1:	83 ec 08             	sub    esp,0x8
c001bcd4:	50                   	push   eax
c001bcd5:	53                   	push   ebx
c001bcd6:	e8 dd 64 ff ff       	call   c00121b8 <VAS::VAS(bool)>
c001bcdb:	83 c4 10             	add    esp,0x10
c001bcde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bce2:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001bce8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bcec:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001bcf6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bcfa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bcfe:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001bd04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bd08:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001bd0e:	85 c0                	test   eax,eax
c001bd10:	74 42                	je     c001bd54 <Process::Process(bool, char const*, Process*, char**)+0x100>
c001bd12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bd16:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001bd1c:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bd22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bd26:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001bd2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bd30:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001bd36:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001bd3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bd40:	05 0c 01 00 00       	add    eax,0x10c
c001bd45:	83 ec 08             	sub    esp,0x8
c001bd48:	52                   	push   edx
c001bd49:	50                   	push   eax
c001bd4a:	e8 cd 49 fe ff       	call   c000071c <strcpy>
c001bd4f:	83 c4 10             	add    esp,0x10
c001bd52:	eb 63                	jmp    c001bdb7 <Process::Process(bool, char const*, Process*, char**)+0x163>
c001bd54:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001bd5c:	83 ec 0c             	sub    esp,0xc
c001bd5f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bd63:	e8 5a 37 ff ff       	call   c000f4c2 <malloc>
c001bd68:	83 c4 10             	add    esp,0x10
c001bd6b:	89 c3                	mov    ebx,eax
c001bd6d:	83 ec 08             	sub    esp,0x8
c001bd70:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001bd74:	53                   	push   ebx
c001bd75:	e8 08 4f ff ff       	call   c0010c82 <VgaText::VgaText(char const*)>
c001bd7a:	83 c4 10             	add    esp,0x10
c001bd7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bd81:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001bd87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bd8b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001bd91:	83 ec 0c             	sub    esp,0xc
c001bd94:	50                   	push   eax
c001bd95:	e8 e9 42 ff ff       	call   c0010083 <addToTerminalCycle(VgaText*)>
c001bd9a:	83 c4 10             	add    esp,0x10
c001bd9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bda1:	05 0c 01 00 00       	add    eax,0x10c
c001bda6:	83 ec 08             	sub    esp,0x8
c001bda9:	68 7f 8c 02 c0       	push   0xc0028c7f
c001bdae:	50                   	push   eax
c001bdaf:	e8 68 49 fe ff       	call   c000071c <strcpy>
c001bdb4:	83 c4 10             	add    esp,0x10
c001bdb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bdbb:	83 c0 0c             	add    eax,0xc
c001bdbe:	83 ec 08             	sub    esp,0x8
c001bdc1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001bdc5:	50                   	push   eax
c001bdc6:	e8 51 49 fe ff       	call   c000071c <strcpy>
c001bdcb:	83 c4 10             	add    esp,0x10
c001bdce:	83 ec 08             	sub    esp,0x8
c001bdd1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bdd5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bdd9:	e8 54 fc ff ff       	call   c001ba32 <Process::addArgs(char**)>
c001bdde:	83 c4 10             	add    esp,0x10
c001bde1:	90                   	nop
c001bde2:	83 c4 24             	add    esp,0x24
c001bde5:	5b                   	pop    ebx
c001bde6:	5e                   	pop    esi
c001bde7:	c3                   	ret    

c001bde8 <disableIRQs()>:
c001bde8:	fa                   	cli    
c001bde9:	ff 05 2c c0 02 c0    	inc    DWORD PTR ds:0xc002c02c
c001bdef:	c3                   	ret    

c001bdf0 <getIRQNestingLevel()>:
c001bdf0:	a1 2c c0 02 c0       	mov    eax,ds:0xc002c02c
c001bdf5:	c3                   	ret    

c001bdf6 <enableIRQs()>:
c001bdf6:	a1 2c c0 02 c0       	mov    eax,ds:0xc002c02c
c001bdfb:	48                   	dec    eax
c001bdfc:	a3 2c c0 02 c0       	mov    ds:0xc002c02c,eax
c001be01:	75 01                	jne    c001be04 <enableIRQs()+0xe>
c001be03:	fb                   	sti    
c001be04:	c3                   	ret    

c001be05 <lockScheduler()>:
c001be05:	eb e1                	jmp    c001bde8 <disableIRQs()>

c001be07 <unlockScheduler()>:
c001be07:	eb ed                	jmp    c001bdf6 <enableIRQs()>

c001be09 <userModeEntryPoint(void*)>:
c001be09:	83 ec 0c             	sub    esp,0xc
c001be0c:	e8 f6 ff ff ff       	call   c001be07 <unlockScheduler()>
c001be11:	fb                   	sti    
c001be12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be17:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be1a:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001be20:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001be24:	83 c4 0c             	add    esp,0xc
c001be27:	e9 b4 44 fe ff       	jmp    c00002e0 <goToUsermode>

c001be2c <lockStuff()>:
c001be2c:	e8 b7 ff ff ff       	call   c001bde8 <disableIRQs()>
c001be31:	ff 05 28 c0 02 c0    	inc    DWORD PTR ds:0xc002c028
c001be37:	c3                   	ret    

c001be38 <taskStartupFunction>:
c001be38:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be3d:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001be40:	c3                   	ret    

c001be41 <updateTimeUsed()>:
c001be41:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c001be46:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001be4c:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001be53:	74 50                	je     c001bea5 <updateTimeUsed()+0x64>
c001be55:	57                   	push   edi
c001be56:	56                   	push   esi
c001be57:	53                   	push   ebx
c001be58:	0f 31                	rdtsc  
c001be5a:	89 c1                	mov    ecx,eax
c001be5c:	a3 68 c0 02 c0       	mov    ds:0xc002c068,eax
c001be61:	2b 0d 58 c0 02 c0    	sub    ecx,DWORD PTR ds:0xc002c058
c001be67:	89 d3                	mov    ebx,edx
c001be69:	89 0d 60 c0 02 c0    	mov    DWORD PTR ds:0xc002c060,ecx
c001be6f:	1b 1d 5c c0 02 c0    	sbb    ebx,DWORD PTR ds:0xc002c05c
c001be75:	a3 58 c0 02 c0       	mov    ds:0xc002c058,eax
c001be7a:	89 1d 64 c0 02 c0    	mov    DWORD PTR ds:0xc002c064,ebx
c001be80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be85:	89 15 6c c0 02 c0    	mov    DWORD PTR ds:0xc002c06c,edx
c001be8b:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001be8e:	89 15 5c c0 02 c0    	mov    DWORD PTR ds:0xc002c05c,edx
c001be94:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001be97:	01 f1                	add    ecx,esi
c001be99:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001be9c:	11 fb                	adc    ebx,edi
c001be9e:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001bea1:	5b                   	pop    ebx
c001bea2:	5e                   	pop    esi
c001bea3:	5f                   	pop    edi
c001bea4:	c3                   	ret    
c001bea5:	c3                   	ret    

c001bea6 <switchToThread(ThreadControlBlock*)>:
c001bea6:	53                   	push   ebx
c001bea7:	83 ec 08             	sub    esp,0x8
c001beaa:	a1 28 c0 02 c0       	mov    eax,ds:0xc002c028
c001beaf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001beb3:	85 c0                	test   eax,eax
c001beb5:	75 30                	jne    c001bee7 <switchToThread(ThreadControlBlock*)+0x41>
c001beb7:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001beba:	3c ff                	cmp    al,0xff
c001bebc:	74 25                	je     c001bee3 <switchToThread(ThreadControlBlock*)+0x3d>
c001bebe:	0f b6 d0             	movzx  edx,al
c001bec1:	b8 84 03 00 00       	mov    eax,0x384
c001bec6:	29 d0                	sub    eax,edx
c001bec8:	c1 e0 10             	shl    eax,0x10
c001becb:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001bece:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001bed1:	e8 6b ff ff ff       	call   c001be41 <updateTimeUsed()>
c001bed6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001beda:	83 c4 08             	add    esp,0x8
c001bedd:	5b                   	pop    ebx
c001bede:	e9 36 44 fe ff       	jmp    c0000319 <switchToThreadASM>
c001bee3:	31 c0                	xor    eax,eax
c001bee5:	eb e7                	jmp    c001bece <switchToThread(ThreadControlBlock*)+0x28>
c001bee7:	c7 05 24 c0 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c024,0x1
c001bef1:	83 c4 08             	add    esp,0x8
c001bef4:	5b                   	pop    ebx
c001bef5:	c3                   	ret    

c001bef6 <Semaphore::Semaphore(int)>:
c001bef6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001befa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001befe:	89 10                	mov    DWORD PTR [eax],edx
c001bf00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf04:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001bf0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf0f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bf16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf1a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bf21:	90                   	nop
c001bf22:	c3                   	ret    
c001bf23:	90                   	nop

c001bf24 <Mutex::Mutex()>:
c001bf24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf28:	6a 01                	push   0x1
c001bf2a:	50                   	push   eax
c001bf2b:	e8 c6 ff ff ff       	call   c001bef6 <Semaphore::Semaphore(int)>
c001bf30:	83 c4 08             	add    esp,0x8
c001bf33:	90                   	nop
c001bf34:	c3                   	ret    
c001bf35:	90                   	nop

c001bf36 <Process::createThread(void (*)(void*), void*, int)>:
c001bf36:	55                   	push   ebp
c001bf37:	31 c9                	xor    ecx,ecx
c001bf39:	57                   	push   edi
c001bf3a:	56                   	push   esi
c001bf3b:	53                   	push   ebx
c001bf3c:	83 ec 1c             	sub    esp,0x1c
c001bf3f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bf43:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001bf4a:	89 f2                	mov    edx,esi
c001bf4c:	0f b7 c2             	movzx  eax,dx
c001bf4f:	83 e2 01             	and    edx,0x1
c001bf52:	74 14                	je     c001bf68 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001bf54:	d1 f8                	sar    eax,1
c001bf56:	41                   	inc    ecx
c001bf57:	89 c2                	mov    edx,eax
c001bf59:	83 f9 10             	cmp    ecx,0x10
c001bf5c:	75 ee                	jne    c001bf4c <Process::createThread(void (*)(void*), void*, int)+0x16>
c001bf5e:	83 c4 1c             	add    esp,0x1c
c001bf61:	31 c0                	xor    eax,eax
c001bf63:	5b                   	pop    ebx
c001bf64:	5e                   	pop    esi
c001bf65:	5f                   	pop    edi
c001bf66:	5d                   	pop    ebp
c001bf67:	c3                   	ret    
c001bf68:	83 ec 08             	sub    esp,0x8
c001bf6b:	b8 01 00 00 00       	mov    eax,0x1
c001bf70:	d3 e0                	shl    eax,cl
c001bf72:	09 c6                	or     esi,eax
c001bf74:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001bf7a:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001bf81:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001bf84:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001bf87:	01 ce                	add    esi,ecx
c001bf89:	89 f0                	mov    eax,esi
c001bf8b:	c1 e0 05             	shl    eax,0x5
c001bf8e:	01 c6                	add    esi,eax
c001bf90:	8d 04 33             	lea    eax,[ebx+esi*1]
c001bf93:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001bf99:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001bf9f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001bfa3:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001bfa9:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001bfaf:	89 ca                	mov    edx,ecx
c001bfb1:	f7 da                	neg    edx
c001bfb3:	c1 e2 15             	shl    edx,0x15
c001bfb6:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001bfbc:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001bfc2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001bfc6:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001bfd0:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001bfd6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bfda:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001bfe0:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001bfea:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001bff4:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001bffb:	50                   	push   eax
c001bffc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c000:	68 48 c0 02 c0       	push   0xc002c048
c001c005:	e8 e6 9b 00 00       	call   c0025bf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c00a:	83 c4 10             	add    esp,0x10
c001c00d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c011:	83 c4 1c             	add    esp,0x1c
c001c014:	5b                   	pop    ebx
c001c015:	5e                   	pop    esi
c001c016:	5f                   	pop    edi
c001c017:	5d                   	pop    ebp
c001c018:	c3                   	ret    
c001c019:	90                   	nop

c001c01a <Process::createUserThread()>:
c001c01a:	83 ec 0c             	sub    esp,0xc
c001c01d:	68 80 00 00 00       	push   0x80
c001c022:	6a 00                	push   0x0
c001c024:	68 09 be 01 c0       	push   0xc001be09
c001c029:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c02d:	e8 04 ff ff ff       	call   c001bf36 <Process::createThread(void (*)(void*), void*, int)>
c001c032:	83 c4 1c             	add    esp,0x1c
c001c035:	c3                   	ret    

c001c036 <setupMultitasking(void (*)())>:
c001c036:	56                   	push   esi
c001c037:	53                   	push   ebx
c001c038:	53                   	push   ebx
c001c039:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c03d:	eb 10                	jmp    c001c04f <setupMultitasking(void (*)())+0x19>
c001c03f:	83 ec 0c             	sub    esp,0xc
c001c042:	68 48 c0 02 c0       	push   0xc002c048
c001c047:	e8 f6 9a 00 00       	call   c0025b42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c04c:	83 c4 10             	add    esp,0x10
c001c04f:	83 ec 0c             	sub    esp,0xc
c001c052:	68 48 c0 02 c0       	push   0xc002c048
c001c057:	e8 ca 9a 00 00       	call   c0025b26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c05c:	83 c4 10             	add    esp,0x10
c001c05f:	84 c0                	test   al,al
c001c061:	74 dc                	je     c001c03f <setupMultitasking(void (*)())+0x9>
c001c063:	83 ec 0c             	sub    esp,0xc
c001c066:	68 3b 07 00 00       	push   0x73b
c001c06b:	e8 52 34 ff ff       	call   c000f4c2 <malloc>
c001c070:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001c077:	89 c3                	mov    ebx,eax
c001c079:	6a 00                	push   0x0
c001c07b:	68 83 8c 02 c0       	push   0xc0028c83
c001c080:	6a 01                	push   0x1
c001c082:	50                   	push   eax
c001c083:	e8 cc fb ff ff       	call   c001bc54 <Process::Process(bool, char const*, Process*, char**)>
c001c088:	83 c4 18             	add    esp,0x18
c001c08b:	89 1d 54 c0 02 c0    	mov    DWORD PTR ds:0xc002c054,ebx
c001c091:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001c097:	68 a4 8d 02 c0       	push   0xc0028da4
c001c09c:	e8 94 65 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001c0a1:	58                   	pop    eax
c001c0a2:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001c0a8:	e8 4a 47 ff ff       	call   c00107f7 <setActiveTerminal(VgaText*)>
c001c0ad:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001c0b5:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001c0bb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c0be:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001c0c8:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001c0ce:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001c0d4:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001c0de:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001c0e8:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001c0f2:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001c0f8:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001c0fe:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001c108:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001c10e:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001c118:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001c11e:	5a                   	pop    edx
c001c11f:	59                   	pop    ecx
c001c120:	68 7f 8c 02 c0       	push   0xc0028c7f
c001c125:	50                   	push   eax
c001c126:	e8 f1 45 fe ff       	call   c000071c <strcpy>
c001c12b:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001c132:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001c136:	83 c4 14             	add    esp,0x14
c001c139:	5b                   	pop    ebx
c001c13a:	5e                   	pop    esi
c001c13b:	e9 cb 41 fe ff       	jmp    c000030b <switchToThreadASMFirstTime>

c001c140 <schedule()>:
c001c140:	a1 28 c0 02 c0       	mov    eax,ds:0xc002c028
c001c145:	85 c0                	test   eax,eax
c001c147:	74 0b                	je     c001c154 <schedule()+0x14>
c001c149:	c7 05 24 c0 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c024,0x1
c001c153:	c3                   	ret    
c001c154:	53                   	push   ebx
c001c155:	83 ec 14             	sub    esp,0x14
c001c158:	68 48 c0 02 c0       	push   0xc002c048
c001c15d:	e8 c4 99 00 00       	call   c0025b26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c162:	83 c4 10             	add    esp,0x10
c001c165:	84 c0                	test   al,al
c001c167:	75 38                	jne    c001c1a1 <schedule()+0x61>
c001c169:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c16e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c171:	4a                   	dec    edx
c001c172:	74 32                	je     c001c1a6 <schedule()+0x66>
c001c174:	83 ec 0c             	sub    esp,0xc
c001c177:	68 48 c0 02 c0       	push   0xc002c048
c001c17c:	e8 9d 99 00 00       	call   c0025b1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c181:	c7 04 24 48 c0 02 c0 	mov    DWORD PTR [esp],0xc002c048
c001c188:	89 c3                	mov    ebx,eax
c001c18a:	e8 b3 99 00 00       	call   c0025b42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c18f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001c196:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c199:	e8 08 fd ff ff       	call   c001bea6 <switchToThread(ThreadControlBlock*)>
c001c19e:	83 c4 10             	add    esp,0x10
c001c1a1:	83 c4 08             	add    esp,0x8
c001c1a4:	5b                   	pop    ebx
c001c1a5:	c3                   	ret    
c001c1a6:	83 ec 08             	sub    esp,0x8
c001c1a9:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001c1b0:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001c1b6:	68 48 c0 02 c0       	push   0xc002c048
c001c1bb:	e8 30 9a 00 00       	call   c0025bf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c1c0:	83 c4 10             	add    esp,0x10
c001c1c3:	eb af                	jmp    c001c174 <schedule()+0x34>

c001c1c5 <unlockStuff()>:
c001c1c5:	a1 28 c0 02 c0       	mov    eax,ds:0xc002c028
c001c1ca:	48                   	dec    eax
c001c1cb:	a3 28 c0 02 c0       	mov    ds:0xc002c028,eax
c001c1d0:	75 09                	jne    c001c1db <unlockStuff()+0x16>
c001c1d2:	a1 24 c0 02 c0       	mov    eax,ds:0xc002c024
c001c1d7:	85 c0                	test   eax,eax
c001c1d9:	75 05                	jne    c001c1e0 <unlockStuff()+0x1b>
c001c1db:	e9 16 fc ff ff       	jmp    c001bdf6 <enableIRQs()>
c001c1e0:	83 ec 0c             	sub    esp,0xc
c001c1e3:	c7 05 24 c0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c024,0x0
c001c1ed:	e8 4e ff ff ff       	call   c001c140 <schedule()>
c001c1f2:	83 c4 0c             	add    esp,0xc
c001c1f5:	e9 fc fb ff ff       	jmp    c001bdf6 <enableIRQs()>

c001c1fa <Semaphore::tryAcquire()>:
c001c1fa:	83 ec 0c             	sub    esp,0xc
c001c1fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c201:	e8 26 fc ff ff       	call   c001be2c <lockStuff()>
c001c206:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001c209:	3b 10                	cmp    edx,DWORD PTR [eax]
c001c20b:	7c 0b                	jl     c001c218 <Semaphore::tryAcquire()+0x1e>
c001c20d:	e8 b3 ff ff ff       	call   c001c1c5 <unlockStuff()>
c001c212:	31 c0                	xor    eax,eax
c001c214:	83 c4 0c             	add    esp,0xc
c001c217:	c3                   	ret    
c001c218:	42                   	inc    edx
c001c219:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c21c:	e8 a4 ff ff ff       	call   c001c1c5 <unlockStuff()>
c001c221:	b0 01                	mov    al,0x1
c001c223:	83 c4 0c             	add    esp,0xc
c001c226:	c3                   	ret    
c001c227:	90                   	nop

c001c228 <Semaphore::assertLocked(char const*)>:
c001c228:	83 ec 0c             	sub    esp,0xc
c001c22b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c22f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c233:	e8 f4 fb ff ff       	call   c001be2c <lockStuff()>
c001c238:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c23a:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001c23d:	7c 05                	jl     c001c244 <Semaphore::assertLocked(char const*)+0x1c>
c001c23f:	83 c4 0c             	add    esp,0xc
c001c242:	eb 81                	jmp    c001c1c5 <unlockStuff()>
c001c244:	83 ec 0c             	sub    esp,0xc
c001c247:	52                   	push   edx
c001c248:	e8 ac cb ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c001c24d:	83 c4 10             	add    esp,0x10
c001c250:	83 c4 0c             	add    esp,0xc
c001c253:	e9 6d ff ff ff       	jmp    c001c1c5 <unlockStuff()>

c001c258 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001c258:	83 ec 0c             	sub    esp,0xc
c001c25b:	e8 90 fb ff ff       	call   c001bdf0 <getIRQNestingLevel()>
c001c260:	83 ec 08             	sub    esp,0x8
c001c263:	50                   	push   eax
c001c264:	68 d8 8d 02 c0       	push   0xc0028dd8
c001c269:	e8 c7 63 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001c26e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c272:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c277:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c27a:	e8 c1 fe ff ff       	call   c001c140 <schedule()>
c001c27f:	e8 83 fb ff ff       	call   c001be07 <unlockScheduler()>
c001c284:	e8 67 fb ff ff       	call   c001bdf0 <getIRQNestingLevel()>
c001c289:	5a                   	pop    edx
c001c28a:	59                   	pop    ecx
c001c28b:	50                   	push   eax
c001c28c:	68 0c 8e 02 c0       	push   0xc0028e0c
c001c291:	e8 9f 63 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001c296:	83 c4 1c             	add    esp,0x1c
c001c299:	c3                   	ret    

c001c29a <blockTask(TaskState)>:
c001c29a:	83 ec 0c             	sub    esp,0xc
c001c29d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c2a1:	e8 5f fb ff ff       	call   c001be05 <lockScheduler()>
c001c2a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2ab:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c2ae:	e8 8d fe ff ff       	call   c001c140 <schedule()>
c001c2b3:	83 c4 0c             	add    esp,0xc
c001c2b6:	e9 4c fb ff ff       	jmp    c001be07 <unlockScheduler()>

c001c2bb <waitTask(int, int*, int)>:
c001c2bb:	83 ec 18             	sub    esp,0x18
c001c2be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c2c7:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001c2ca:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c2ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2d3:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001c2d6:	6a 07                	push   0x7
c001c2d8:	e8 bd ff ff ff       	call   c001c29a <blockTask(TaskState)>
c001c2dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2e2:	83 c4 10             	add    esp,0x10
c001c2e5:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001c2e8:	85 d2                	test   edx,edx
c001c2ea:	74 0a                	je     c001c2f6 <waitTask(int, int*, int)+0x3b>
c001c2ec:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001c2ef:	89 02                	mov    DWORD PTR [edx],eax
c001c2f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2f6:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001c2f9:	83 c4 0c             	add    esp,0xc
c001c2fc:	c3                   	ret    

c001c2fd <nanoSleepUntil(unsigned long long)>:
c001c2fd:	83 ec 0c             	sub    esp,0xc
c001c300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c304:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c308:	3b 05 b0 b1 02 c0    	cmp    eax,DWORD PTR ds:0xc002b1b0
c001c30e:	89 d1                	mov    ecx,edx
c001c310:	1b 0d b4 b1 02 c0    	sbb    ecx,DWORD PTR ds:0xc002b1b4
c001c316:	73 04                	jae    c001c31c <nanoSleepUntil(unsigned long long)+0x1f>
c001c318:	83 c4 0c             	add    esp,0xc
c001c31b:	c3                   	ret    
c001c31c:	e8 0b fb ff ff       	call   c001be2c <lockStuff()>
c001c321:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c327:	83 ec 08             	sub    esp,0x8
c001c32a:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001c32d:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001c330:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001c336:	68 3c c0 02 c0       	push   0xc002c03c
c001c33b:	e8 b0 98 00 00       	call   c0025bf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c340:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001c347:	e8 4e ff ff ff       	call   c001c29a <blockTask(TaskState)>
c001c34c:	83 c4 1c             	add    esp,0x1c
c001c34f:	e9 71 fe ff ff       	jmp    c001c1c5 <unlockStuff()>

c001c354 <nanoSleep(unsigned long long)>:
c001c354:	a1 b0 b1 02 c0       	mov    eax,ds:0xc002b1b0
c001c359:	8b 15 b4 b1 02 c0    	mov    edx,DWORD PTR ds:0xc002b1b4
c001c35f:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001c363:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001c367:	eb 94                	jmp    c001c2fd <nanoSleepUntil(unsigned long long)>

c001c369 <sleep(unsigned long long)>:
c001c369:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001c371:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001c376:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001c37a:	01 ca                	add    edx,ecx
c001c37c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c380:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c384:	eb ce                	jmp    c001c354 <nanoSleep(unsigned long long)>

c001c386 <Semaphore::acquire()>:
c001c386:	83 ec 0c             	sub    esp,0xc
c001c389:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c38d:	e8 9a fa ff ff       	call   c001be2c <lockStuff()>
c001c392:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001c395:	3b 10                	cmp    edx,DWORD PTR [eax]
c001c397:	7d 0c                	jge    c001c3a5 <Semaphore::acquire()+0x1f>
c001c399:	42                   	inc    edx
c001c39a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c39d:	83 c4 0c             	add    esp,0xc
c001c3a0:	e9 20 fe ff ff       	jmp    c001c1c5 <unlockStuff()>
c001c3a5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c3ab:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001c3b2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c3b5:	85 d2                	test   edx,edx
c001c3b7:	74 2a                	je     c001c3e3 <Semaphore::acquire()+0x5d>
c001c3b9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c3bc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c3c2:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001c3c5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c3cb:	83 ec 0c             	sub    esp,0xc
c001c3ce:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c3d1:	6a 05                	push   0x5
c001c3d3:	e8 c2 fe ff ff       	call   c001c29a <blockTask(TaskState)>
c001c3d8:	83 c4 10             	add    esp,0x10
c001c3db:	83 c4 0c             	add    esp,0xc
c001c3de:	e9 e2 fd ff ff       	jmp    c001c1c5 <unlockStuff()>
c001c3e3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c3e9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c3ec:	eb d7                	jmp    c001c3c5 <Semaphore::acquire()+0x3f>

c001c3ee <taskReturned>:
c001c3ee:	83 ec 18             	sub    esp,0x18
c001c3f1:	68 40 8e 02 c0       	push   0xc0028e40
c001c3f6:	e8 fe c9 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c001c3fb:	83 c4 10             	add    esp,0x10
c001c3fe:	83 ec 0c             	sub    esp,0xc
c001c401:	6a 02                	push   0x2
c001c403:	e8 92 fe ff ff       	call   c001c29a <blockTask(TaskState)>
c001c408:	e8 f8 f9 ff ff       	call   c001be05 <lockScheduler()>
c001c40d:	e8 2e fd ff ff       	call   c001c140 <schedule()>
c001c412:	e8 f0 f9 ff ff       	call   c001be07 <unlockScheduler()>
c001c417:	83 c4 10             	add    esp,0x10
c001c41a:	eb e2                	jmp    c001c3fe <taskReturned+0x10>

c001c41c <unblockTask(ThreadControlBlock*)>:
c001c41c:	53                   	push   ebx
c001c41d:	83 ec 08             	sub    esp,0x8
c001c420:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c424:	e8 dc f9 ff ff       	call   c001be05 <lockScheduler()>
c001c429:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c42c:	85 c0                	test   eax,eax
c001c42e:	74 5c                	je     c001c48c <unblockTask(ThreadControlBlock*)+0x70>
c001c430:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c433:	48                   	dec    eax
c001c434:	74 31                	je     c001c467 <unblockTask(ThreadControlBlock*)+0x4b>
c001c436:	83 ec 0c             	sub    esp,0xc
c001c439:	68 48 c0 02 c0       	push   0xc002c048
c001c43e:	e8 db 96 00 00       	call   c0025b1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c443:	83 c4 10             	add    esp,0x10
c001c446:	85 c0                	test   eax,eax
c001c448:	75 17                	jne    c001c461 <unblockTask(ThreadControlBlock*)+0x45>
c001c44a:	eb 65                	jmp    c001c4b1 <unblockTask(ThreadControlBlock*)+0x95>
c001c44c:	83 ec 08             	sub    esp,0x8
c001c44f:	50                   	push   eax
c001c450:	68 48 c0 02 c0       	push   0xc002c048
c001c455:	e8 9e 99 00 00       	call   c0025df8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001c45a:	83 c4 10             	add    esp,0x10
c001c45d:	85 c0                	test   eax,eax
c001c45f:	74 50                	je     c001c4b1 <unblockTask(ThreadControlBlock*)+0x95>
c001c461:	39 c3                	cmp    ebx,eax
c001c463:	75 e7                	jne    c001c44c <unblockTask(ThreadControlBlock*)+0x30>
c001c465:	eb 1c                	jmp    c001c483 <unblockTask(ThreadControlBlock*)+0x67>
c001c467:	83 ec 0c             	sub    esp,0xc
c001c46a:	68 30 8f 02 c0       	push   0xc0028f30
c001c46f:	e8 c1 61 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001c474:	c7 04 24 bc 8e 02 c0 	mov    DWORD PTR [esp],0xc0028ebc
c001c47b:	e8 b5 61 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001c480:	83 c4 10             	add    esp,0x10
c001c483:	83 c4 08             	add    esp,0x8
c001c486:	5b                   	pop    ebx
c001c487:	e9 7b f9 ff ff       	jmp    c001be07 <unlockScheduler()>
c001c48c:	83 ec 0c             	sub    esp,0xc
c001c48f:	68 74 8e 02 c0       	push   0xc0028e74
c001c494:	e8 9c 61 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001c499:	c7 04 24 bc 8e 02 c0 	mov    DWORD PTR [esp],0xc0028ebc
c001c4a0:	e8 90 61 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001c4a5:	83 c4 10             	add    esp,0x10
c001c4a8:	83 c4 08             	add    esp,0x8
c001c4ab:	5b                   	pop    ebx
c001c4ac:	e9 56 f9 ff ff       	jmp    c001be07 <unlockScheduler()>
c001c4b1:	83 ec 08             	sub    esp,0x8
c001c4b4:	53                   	push   ebx
c001c4b5:	68 48 c0 02 c0       	push   0xc002c048
c001c4ba:	e8 31 97 00 00       	call   c0025bf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c4bf:	83 c4 10             	add    esp,0x10
c001c4c2:	83 c4 08             	add    esp,0x8
c001c4c5:	5b                   	pop    ebx
c001c4c6:	e9 3c f9 ff ff       	jmp    c001be07 <unlockScheduler()>

c001c4cb <cleanupTerminatedTask(ThreadControlBlock*)>:
c001c4cb:	55                   	push   ebp
c001c4cc:	57                   	push   edi
c001c4cd:	56                   	push   esi
c001c4ce:	53                   	push   ebx
c001c4cf:	83 ec 1c             	sub    esp,0x1c
c001c4d2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c4d6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c4d9:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c001c4df:	85 c9                	test   ecx,ecx
c001c4e1:	7e 20                	jle    c001c503 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001c4e3:	31 f6                	xor    esi,esi
c001c4e5:	83 ec 0c             	sub    esp,0xc
c001c4e8:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001c4ef:	46                   	inc    esi
c001c4f0:	e8 dd 2f ff ff       	call   c000f4d2 <free>
c001c4f5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c4f8:	83 c4 10             	add    esp,0x10
c001c4fb:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001c501:	7f e2                	jg     c001c4e5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001c503:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001c50d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001c512:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001c515:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001c518:	d3 c0                	rol    eax,cl
c001c51a:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001c521:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c524:	89 f7                	mov    edi,esi
c001c526:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001c52e:	0f 85 4f 01 00 00    	jne    c001c683 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c001c534:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c53a:	85 c0                	test   eax,eax
c001c53c:	0f 84 aa 00 00 00    	je     c001c5ec <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c542:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001c545:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c549:	31 c9                	xor    ecx,ecx
c001c54b:	eb 10                	jmp    c001c55d <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c001c54d:	41                   	inc    ecx
c001c54e:	83 f9 10             	cmp    ecx,0x10
c001c551:	0f 84 95 00 00 00    	je     c001c5ec <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c557:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c55d:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001c564:	d3 fa                	sar    edx,cl
c001c566:	83 e2 01             	and    edx,0x1
c001c569:	74 e2                	je     c001c54d <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c56b:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001c56e:	01 ca                	add    edx,ecx
c001c570:	89 d5                	mov    ebp,edx
c001c572:	c1 e5 05             	shl    ebp,0x5
c001c575:	01 ea                	add    edx,ebp
c001c577:	01 d0                	add    eax,edx
c001c579:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001c57f:	83 fd 07             	cmp    ebp,0x7
c001c582:	75 c9                	jne    c001c54d <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c584:	05 40 02 00 00       	add    eax,0x240
c001c589:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001c58c:	83 fd ff             	cmp    ebp,0xffffffff
c001c58f:	0f 8c 08 01 00 00    	jl     c001c69d <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c001c595:	0f 84 b9 01 00 00    	je     c001c754 <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c001c59b:	85 ed                	test   ebp,ebp
c001c59d:	0f 84 a0 01 00 00    	je     c001c743 <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c001c5a3:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001c5a5:	75 a6                	jne    c001c54d <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c5a7:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c5ad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c5b1:	01 d0                	add    eax,edx
c001c5b3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001c5b7:	83 ec 0c             	sub    esp,0xc
c001c5ba:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001c5c0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c5c3:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c5c9:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001c5d0:	50                   	push   eax
c001c5d1:	e8 46 fe ff ff       	call   c001c41c <unblockTask(ThreadControlBlock*)>
c001c5d6:	83 c4 10             	add    esp,0x10
c001c5d9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c5dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c5e0:	89 f7                	mov    edi,esi
c001c5e2:	41                   	inc    ecx
c001c5e3:	83 f9 10             	cmp    ecx,0x10
c001c5e6:	0f 85 6b ff ff ff    	jne    c001c557 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c001c5ec:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001c5f2:	85 c0                	test   eax,eax
c001c5f4:	74 5d                	je     c001c653 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001c5f6:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001c5fc:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001c602:	74 4f                	je     c001c653 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001c604:	83 ec 0c             	sub    esp,0xc
c001c607:	68 48 c0 02 c0       	push   0xc002c048
c001c60c:	e8 0d 95 00 00       	call   c0025b1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c611:	c7 04 24 48 c0 02 c0 	mov    DWORD PTR [esp],0xc002c048
c001c618:	89 c7                	mov    edi,eax
c001c61a:	e8 07 95 00 00       	call   c0025b26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c61f:	83 c4 10             	add    esp,0x10
c001c622:	84 c0                	test   al,al
c001c624:	0f 84 e4 00 00 00    	je     c001c70e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001c62a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c62d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c633:	85 d2                	test   edx,edx
c001c635:	74 0f                	je     c001c646 <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c001c637:	83 ec 0c             	sub    esp,0xc
c001c63a:	8b 02                	mov    eax,DWORD PTR [edx]
c001c63c:	52                   	push   edx
c001c63d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c640:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c643:	83 c4 10             	add    esp,0x10
c001c646:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001c650:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001c653:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001c659:	85 db                	test   ebx,ebx
c001c65b:	74 16                	je     c001c673 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c001c65d:	83 ec 0c             	sub    esp,0xc
c001c660:	53                   	push   ebx
c001c661:	e8 3e 55 ff ff       	call   c0011ba4 <VAS::~VAS()>
c001c666:	58                   	pop    eax
c001c667:	5a                   	pop    edx
c001c668:	6a 10                	push   0x10
c001c66a:	53                   	push   ebx
c001c66b:	e8 e5 5e ff ff       	call   c0012555 <operator delete(void*, unsigned long)>
c001c670:	83 c4 10             	add    esp,0x10
c001c673:	83 ec 0c             	sub    esp,0xc
c001c676:	68 8a 8c 02 c0       	push   0xc0028c8a
c001c67b:	e8 b5 5f ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001c680:	83 c4 10             	add    esp,0x10
c001c683:	83 ec 08             	sub    esp,0x8
c001c686:	68 3b 07 00 00       	push   0x73b
c001c68b:	68 98 8c 02 c0       	push   0xc0028c98
c001c690:	e8 a0 5f ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001c695:	83 c4 2c             	add    esp,0x2c
c001c698:	5b                   	pop    ebx
c001c699:	5e                   	pop    esi
c001c69a:	5f                   	pop    edi
c001c69b:	5d                   	pop    ebp
c001c69c:	c3                   	ret    
c001c69d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c6a1:	83 ec 0c             	sub    esp,0xc
c001c6a4:	68 74 8f 02 c0       	push   0xc0028f74
c001c6a9:	e8 4b c7 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c001c6ae:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c6b1:	83 c4 10             	add    esp,0x10
c001c6b4:	89 f7                	mov    edi,esi
c001c6b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c6ba:	e9 8e fe ff ff       	jmp    c001c54d <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c6bf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001c6c5:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001c6cb:	75 1c                	jne    c001c6e9 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c6cd:	83 ec 0c             	sub    esp,0xc
c001c6d0:	68 dc 8f 02 c0       	push   0xc0028fdc
c001c6d5:	e8 5b 5f ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001c6da:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001c6e1:	e8 b4 fb ff ff       	call   c001c29a <blockTask(TaskState)>
c001c6e6:	83 c4 10             	add    esp,0x10
c001c6e9:	83 ec 08             	sub    esp,0x8
c001c6ec:	56                   	push   esi
c001c6ed:	68 48 c0 02 c0       	push   0xc002c048
c001c6f2:	e8 f9 94 00 00       	call   c0025bf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c6f7:	c7 04 24 48 c0 02 c0 	mov    DWORD PTR [esp],0xc002c048
c001c6fe:	e8 1b 94 00 00       	call   c0025b1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c703:	83 c4 10             	add    esp,0x10
c001c706:	39 f8                	cmp    eax,edi
c001c708:	0f 84 1c ff ff ff    	je     c001c62a <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c001c70e:	83 ec 0c             	sub    esp,0xc
c001c711:	68 48 c0 02 c0       	push   0xc002c048
c001c716:	e8 03 94 00 00       	call   c0025b1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c71b:	c7 04 24 48 c0 02 c0 	mov    DWORD PTR [esp],0xc002c048
c001c722:	89 c6                	mov    esi,eax
c001c724:	e8 19 94 00 00       	call   c0025b42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c729:	83 c4 10             	add    esp,0x10
c001c72c:	39 f3                	cmp    ebx,esi
c001c72e:	74 b9                	je     c001c6e9 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c730:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001c733:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c736:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001c73c:	75 ab                	jne    c001c6e9 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c73e:	e9 7c ff ff ff       	jmp    c001c6bf <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001c743:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c747:	83 ec 0c             	sub    esp,0xc
c001c74a:	68 a8 8f 02 c0       	push   0xc0028fa8
c001c74f:	e9 55 ff ff ff       	jmp    c001c6a9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c001c754:	8b 36                	mov    esi,DWORD PTR [esi]
c001c756:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c75a:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001c75d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c760:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001c766:	01 d7                	add    edi,edx
c001c768:	89 f8                	mov    eax,edi
c001c76a:	e9 44 fe ff ff       	jmp    c001c5b3 <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c001c76f <cleanerTaskFunction(void*)>:
c001c76f:	53                   	push   ebx
c001c770:	83 ec 08             	sub    esp,0x8
c001c773:	e8 8f f6 ff ff       	call   c001be07 <unlockScheduler()>
c001c778:	e8 88 f6 ff ff       	call   c001be05 <lockScheduler()>
c001c77d:	80 3d 0c c0 02 c0 00 	cmp    BYTE PTR ds:0xc002c00c,0x0
c001c784:	0f 85 8e 00 00 00    	jne    c001c818 <cleanerTaskFunction(void*)+0xa9>
c001c78a:	83 ec 0c             	sub    esp,0xc
c001c78d:	6a 02                	push   0x2
c001c78f:	e8 c4 fa ff ff       	call   c001c258 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001c794:	83 c4 10             	add    esp,0x10
c001c797:	c6 05 0c c0 02 c0 00 	mov    BYTE PTR ds:0xc002c00c,0x0
c001c79e:	e8 89 f6 ff ff       	call   c001be2c <lockStuff()>
c001c7a3:	e8 5d f6 ff ff       	call   c001be05 <lockScheduler()>
c001c7a8:	83 ec 0c             	sub    esp,0xc
c001c7ab:	68 30 c0 02 c0       	push   0xc002c030
c001c7b0:	e8 71 93 00 00       	call   c0025b26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c7b5:	83 c4 10             	add    esp,0x10
c001c7b8:	84 c0                	test   al,al
c001c7ba:	75 40                	jne    c001c7fc <cleanerTaskFunction(void*)+0x8d>
c001c7bc:	83 ec 0c             	sub    esp,0xc
c001c7bf:	68 30 c0 02 c0       	push   0xc002c030
c001c7c4:	e8 55 93 00 00       	call   c0025b1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c7c9:	c7 04 24 30 c0 02 c0 	mov    DWORD PTR [esp],0xc002c030
c001c7d0:	89 c3                	mov    ebx,eax
c001c7d2:	e8 6b 93 00 00       	call   c0025b42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c7d7:	c7 04 24 ae 8c 02 c0 	mov    DWORD PTR [esp],0xc0028cae
c001c7de:	e8 52 5e ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001c7e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7e6:	e8 e0 fc ff ff       	call   c001c4cb <cleanupTerminatedTask(ThreadControlBlock*)>
c001c7eb:	c7 04 24 c7 8c 02 c0 	mov    DWORD PTR [esp],0xc0028cc7
c001c7f2:	e8 3e 5e ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001c7f7:	83 c4 10             	add    esp,0x10
c001c7fa:	eb ac                	jmp    c001c7a8 <cleanerTaskFunction(void*)+0x39>
c001c7fc:	e8 06 f6 ff ff       	call   c001be07 <unlockScheduler()>
c001c801:	e8 bf f9 ff ff       	call   c001c1c5 <unlockStuff()>
c001c806:	e8 fa f5 ff ff       	call   c001be05 <lockScheduler()>
c001c80b:	80 3d 0c c0 02 c0 00 	cmp    BYTE PTR ds:0xc002c00c,0x0
c001c812:	0f 84 72 ff ff ff    	je     c001c78a <cleanerTaskFunction(void*)+0x1b>
c001c818:	e8 ea f5 ff ff       	call   c001be07 <unlockScheduler()>
c001c81d:	e9 75 ff ff ff       	jmp    c001c797 <cleanerTaskFunction(void*)+0x28>

c001c822 <terminateTask(int)>:
c001c822:	83 ec 14             	sub    esp,0x14
c001c825:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c82a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c82d:	83 c0 0c             	add    eax,0xc
c001c830:	50                   	push   eax
c001c831:	68 04 90 02 c0       	push   0xc0029004
c001c836:	e8 fa 5d ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001c83b:	e8 ec f5 ff ff       	call   c001be2c <lockStuff()>
c001c840:	e8 c0 f5 ff ff       	call   c001be05 <lockScheduler()>
c001c845:	c7 04 24 da 8c 02 c0 	mov    DWORD PTR [esp],0xc0028cda
c001c84c:	e8 e4 5d ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001c851:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c855:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c85a:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001c85d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c862:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c865:	5a                   	pop    edx
c001c866:	59                   	pop    ecx
c001c867:	50                   	push   eax
c001c868:	68 30 c0 02 c0       	push   0xc002c030
c001c86d:	e8 7e 93 00 00       	call   c0025bf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c872:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c877:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001c87e:	c7 04 24 f4 8c 02 c0 	mov    DWORD PTR [esp],0xc0028cf4
c001c885:	e8 ab 5d ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001c88a:	83 c4 10             	add    esp,0x10
c001c88d:	a1 08 c0 02 c0       	mov    eax,ds:0xc002c008
c001c892:	85 c0                	test   eax,eax
c001c894:	74 5a                	je     c001c8f0 <terminateTask(int)+0xce>
c001c896:	83 ec 0c             	sub    esp,0xc
c001c899:	68 0e 8d 02 c0       	push   0xc0028d0e
c001c89e:	e8 92 5d ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001c8a3:	58                   	pop    eax
c001c8a4:	c6 05 0c c0 02 c0 01 	mov    BYTE PTR ds:0xc002c00c,0x1
c001c8ab:	ff 35 08 c0 02 c0    	push   DWORD PTR ds:0xc002c008
c001c8b1:	e8 66 fb ff ff       	call   c001c41c <unblockTask(ThreadControlBlock*)>
c001c8b6:	c7 04 24 28 8d 02 c0 	mov    DWORD PTR [esp],0xc0028d28
c001c8bd:	e8 73 5d ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001c8c2:	83 c4 10             	add    esp,0x10
c001c8c5:	e8 3d f5 ff ff       	call   c001be07 <unlockScheduler()>
c001c8ca:	e8 f6 f8 ff ff       	call   c001c1c5 <unlockStuff()>
c001c8cf:	83 ec 0c             	sub    esp,0xc
c001c8d2:	68 60 8d 02 c0       	push   0xc0028d60
c001c8d7:	e8 59 5d ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001c8dc:	83 c4 10             	add    esp,0x10
c001c8df:	e8 21 f5 ff ff       	call   c001be05 <lockScheduler()>
c001c8e4:	e8 57 f8 ff ff       	call   c001c140 <schedule()>
c001c8e9:	e8 19 f5 ff ff       	call   c001be07 <unlockScheduler()>
c001c8ee:	eb ef                	jmp    c001c8df <terminateTask(int)+0xbd>
c001c8f0:	83 ec 0c             	sub    esp,0xc
c001c8f3:	68 42 8d 02 c0       	push   0xc0028d42
c001c8f8:	e8 38 5d ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001c8fd:	83 c4 10             	add    esp,0x10
c001c900:	eb c3                	jmp    c001c8c5 <terminateTask(int)+0xa3>

c001c902 <Thr::terminateFromIRQ(int)>:
c001c902:	83 ec 18             	sub    esp,0x18
c001c905:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c909:	e8 14 ff ff ff       	call   c001c822 <terminateTask(int)>

c001c90e <Semaphore::release()>:
c001c90e:	83 ec 0c             	sub    esp,0xc
c001c911:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c915:	e8 12 f5 ff ff       	call   c001be2c <lockStuff()>
c001c91a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c91d:	85 d2                	test   edx,edx
c001c91f:	74 1a                	je     c001c93b <Semaphore::release()+0x2d>
c001c921:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001c924:	83 ec 0c             	sub    esp,0xc
c001c927:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c92a:	52                   	push   edx
c001c92b:	e8 ec fa ff ff       	call   c001c41c <unblockTask(ThreadControlBlock*)>
c001c930:	83 c4 10             	add    esp,0x10
c001c933:	83 c4 0c             	add    esp,0xc
c001c936:	e9 8a f8 ff ff       	jmp    c001c1c5 <unlockStuff()>
c001c93b:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001c93e:	83 c4 0c             	add    esp,0xc
c001c941:	e9 7f f8 ff ff       	jmp    c001c1c5 <unlockStuff()>

c001c946 <__static_initialization_and_destruction_0(int, int)>:
c001c946:	83 ec 0c             	sub    esp,0xc
c001c949:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001c94e:	0f 85 88 00 00 00    	jne    c001c9dc <__static_initialization_and_destruction_0(int, int)+0x96>
c001c954:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001c95c:	75 7e                	jne    c001c9dc <__static_initialization_and_destruction_0(int, int)+0x96>
c001c95e:	83 ec 0c             	sub    esp,0xc
c001c961:	68 48 c0 02 c0       	push   0xc002c048
c001c966:	e8 35 94 00 00       	call   c0025da0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c96b:	83 c4 10             	add    esp,0x10
c001c96e:	83 ec 04             	sub    esp,0x4
c001c971:	68 dc 9a 02 c0       	push   0xc0029adc
c001c976:	68 48 c0 02 c0       	push   0xc002c048
c001c97b:	68 60 5d 02 c0       	push   0xc0025d60
c001c980:	e8 4a 5b ff ff       	call   c00124cf <__cxa_atexit>
c001c985:	83 c4 10             	add    esp,0x10
c001c988:	83 ec 0c             	sub    esp,0xc
c001c98b:	68 3c c0 02 c0       	push   0xc002c03c
c001c990:	e8 0b 94 00 00       	call   c0025da0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c995:	83 c4 10             	add    esp,0x10
c001c998:	83 ec 04             	sub    esp,0x4
c001c99b:	68 dc 9a 02 c0       	push   0xc0029adc
c001c9a0:	68 3c c0 02 c0       	push   0xc002c03c
c001c9a5:	68 60 5d 02 c0       	push   0xc0025d60
c001c9aa:	e8 20 5b ff ff       	call   c00124cf <__cxa_atexit>
c001c9af:	83 c4 10             	add    esp,0x10
c001c9b2:	83 ec 0c             	sub    esp,0xc
c001c9b5:	68 30 c0 02 c0       	push   0xc002c030
c001c9ba:	e8 e1 93 00 00       	call   c0025da0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c9bf:	83 c4 10             	add    esp,0x10
c001c9c2:	83 ec 04             	sub    esp,0x4
c001c9c5:	68 dc 9a 02 c0       	push   0xc0029adc
c001c9ca:	68 30 c0 02 c0       	push   0xc002c030
c001c9cf:	68 60 5d 02 c0       	push   0xc0025d60
c001c9d4:	e8 f6 5a ff ff       	call   c00124cf <__cxa_atexit>
c001c9d9:	83 c4 10             	add    esp,0x10
c001c9dc:	90                   	nop
c001c9dd:	83 c4 0c             	add    esp,0xc
c001c9e0:	c3                   	ret    

c001c9e1 <_GLOBAL__sub_I_kernelProcess>:
c001c9e1:	83 ec 0c             	sub    esp,0xc
c001c9e4:	83 ec 08             	sub    esp,0x8
c001c9e7:	68 ff ff 00 00       	push   0xffff
c001c9ec:	6a 01                	push   0x1
c001c9ee:	e8 53 ff ff ff       	call   c001c946 <__static_initialization_and_destruction_0(int, int)>
c001c9f3:	83 c4 10             	add    esp,0x10
c001c9f6:	83 c4 0c             	add    esp,0xc
c001c9f9:	c3                   	ret    

c001c9fa <Vm::inbv(unsigned short)>:
c001c9fa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c9fe:	ec                   	in     al,dx
c001c9ff:	c3                   	ret    

c001ca00 <Vm::outbv(unsigned short, unsigned char)>:
c001ca00:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ca04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca08:	ee                   	out    dx,al
c001ca09:	c3                   	ret    

c001ca0a <Vm::vm8086EntryPoint(void*)>:
c001ca0a:	83 ec 0c             	sub    esp,0xc
c001ca0d:	e8 f5 f3 ff ff       	call   c001be07 <unlockScheduler()>
c001ca12:	fb                   	sti    
c001ca13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca18:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ca1c:	52                   	push   edx
c001ca1d:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001ca21:	52                   	push   edx
c001ca22:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001ca26:	52                   	push   edx
c001ca27:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001ca2b:	50                   	push   eax
c001ca2c:	e8 7e 38 fe ff       	call   c00002af <goToVM86>
c001ca31:	83 c4 1c             	add    esp,0x1c
c001ca34:	c3                   	ret    

c001ca35 <Vm::realToLinear(unsigned short, unsigned short)>:
c001ca35:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ca3a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ca3f:	c1 e0 04             	shl    eax,0x4
c001ca42:	01 d0                	add    eax,edx
c001ca44:	c3                   	ret    

c001ca45 <Vm::getSegment(unsigned int)>:
c001ca45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca49:	c1 e8 10             	shr    eax,0x10
c001ca4c:	c3                   	ret    

c001ca4d <Vm::getOffset(unsigned int)>:
c001ca4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca51:	c3                   	ret    

c001ca52 <Vm::mainloop2(void*)>:
c001ca52:	53                   	push   ebx
c001ca53:	83 ec 14             	sub    esp,0x14
c001ca56:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ca5a:	68 23 90 02 c0       	push   0xc0029023
c001ca5f:	e8 d1 5b ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001ca64:	e8 9c f3 ff ff       	call   c001be05 <lockScheduler()>
c001ca69:	89 1d 70 c0 02 c0    	mov    DWORD PTR ds:0xc002c070,ebx
c001ca6f:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001ca76:	c6 05 79 c0 02 c0 01 	mov    BYTE PTR ds:0xc002c079,0x1
c001ca7d:	e8 d6 f7 ff ff       	call   c001c258 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ca82:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001ca86:	83 c4 18             	add    esp,0x18
c001ca89:	5b                   	pop    ebx
c001ca8a:	e9 7b ff ff ff       	jmp    c001ca0a <Vm::vm8086EntryPoint(void*)>

c001ca8f <Vm::mainVm8086Loop(void*)>:
c001ca8f:	53                   	push   ebx
c001ca90:	83 ec 08             	sub    esp,0x8
c001ca93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ca97:	e8 6b f3 ff ff       	call   c001be07 <unlockScheduler()>
c001ca9c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001caa0:	83 c4 08             	add    esp,0x8
c001caa3:	5b                   	pop    ebx
c001caa4:	eb ac                	jmp    c001ca52 <Vm::mainloop2(void*)>

c001caa6 <Vm::mainloop3(unsigned long)>:
c001caa6:	53                   	push   ebx
c001caa7:	83 ec 14             	sub    esp,0x14
c001caaa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001caae:	68 3f 90 02 c0       	push   0xc002903f
c001cab3:	e8 7d 5b ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001cab8:	e8 48 f3 ff ff       	call   c001be05 <lockScheduler()>
c001cabd:	89 1d 74 c0 02 c0    	mov    DWORD PTR ds:0xc002c074,ebx
c001cac3:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001caca:	c6 05 78 c0 02 c0 01 	mov    BYTE PTR ds:0xc002c078,0x1
c001cad1:	e8 82 f7 ff ff       	call   c001c258 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001cad6:	a1 70 c0 02 c0       	mov    eax,ds:0xc002c070
c001cadb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cadf:	83 c4 18             	add    esp,0x18
c001cae2:	5b                   	pop    ebx
c001cae3:	e9 6a ff ff ff       	jmp    c001ca52 <Vm::mainloop2(void*)>

c001cae8 <Vm::initialise8086()>:
c001cae8:	83 ec 0c             	sub    esp,0xc
c001caeb:	68 80 00 00 00       	push   0x80
c001caf0:	6a 00                	push   0x0
c001caf2:	68 8f ca 01 c0       	push   0xc001ca8f
c001caf7:	ff 35 54 c0 02 c0    	push   DWORD PTR ds:0xc002c054
c001cafd:	e8 34 f4 ff ff       	call   c001bf36 <Process::createThread(void (*)(void*), void*, int)>
c001cb02:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001cb09:	a3 7c c0 02 c0       	mov    ds:0xc002c07c,eax
c001cb0e:	68 00 01 00 00       	push   0x100
c001cb13:	a1 54 c0 02 c0       	mov    eax,ds:0xc002c054
c001cb18:	6a 00                	push   0x0
c001cb1a:	6a 00                	push   0x0
c001cb1c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cb22:	e8 dd 54 ff ff       	call   c0012004 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001cb27:	83 c4 2c             	add    esp,0x2c
c001cb2a:	c3                   	ret    

c001cb2b <Vm::finish8086()>:
c001cb2b:	53                   	push   ebx
c001cb2c:	83 ec 08             	sub    esp,0x8
c001cb2f:	e8 d1 f2 ff ff       	call   c001be05 <lockScheduler()>
c001cb34:	80 3d 78 c0 02 c0 00 	cmp    BYTE PTR ds:0xc002c078,0x0
c001cb3b:	75 07                	jne    c001cb44 <Vm::finish8086()+0x19>
c001cb3d:	e8 c5 f2 ff ff       	call   c001be07 <unlockScheduler()>
c001cb42:	eb eb                	jmp    c001cb2f <Vm::finish8086()+0x4>
c001cb44:	83 ec 0c             	sub    esp,0xc
c001cb47:	8b 1d 74 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c074
c001cb4d:	ff 35 7c c0 02 c0    	push   DWORD PTR ds:0xc002c07c
c001cb53:	c6 05 78 c0 02 c0 00 	mov    BYTE PTR ds:0xc002c078,0x0
c001cb5a:	e8 bd f8 ff ff       	call   c001c41c <unblockTask(ThreadControlBlock*)>
c001cb5f:	e8 a3 f2 ff ff       	call   c001be07 <unlockScheduler()>
c001cb64:	89 d8                	mov    eax,ebx
c001cb66:	83 c4 18             	add    esp,0x18
c001cb69:	5b                   	pop    ebx
c001cb6a:	c3                   	ret    

c001cb6b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001cb6b:	55                   	push   ebp
c001cb6c:	57                   	push   edi
c001cb6d:	56                   	push   esi
c001cb6e:	53                   	push   ebx
c001cb6f:	83 ec 38             	sub    esp,0x38
c001cb72:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001cb76:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001cb7a:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c001cb7e:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c001cb82:	68 5a 90 02 c0       	push   0xc002905a
c001cb87:	e8 a9 5a ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001cb8c:	83 c4 10             	add    esp,0x10
c001cb8f:	e8 71 f2 ff ff       	call   c001be05 <lockScheduler()>
c001cb94:	a0 79 c0 02 c0       	mov    al,ds:0xc002c079
c001cb99:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cb9d:	84 c0                	test   al,al
c001cb9f:	75 07                	jne    c001cba8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x3d>
c001cba1:	e8 61 f2 ff ff       	call   c001be07 <unlockScheduler()>
c001cba6:	eb e7                	jmp    c001cb8f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x24>
c001cba8:	a1 7c c0 02 c0       	mov    eax,ds:0xc002c07c
c001cbad:	83 ec 0c             	sub    esp,0xc
c001cbb0:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001cbb4:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001cbb8:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001cbbc:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001cbc0:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001cbc4:	68 14 01 00 00       	push   0x114
c001cbc9:	e8 f4 28 ff ff       	call   c000f4c2 <malloc>
c001cbce:	83 c4 0c             	add    esp,0xc
c001cbd1:	89 c7                	mov    edi,eax
c001cbd3:	ff 35 54 c0 02 c0    	push   DWORD PTR ds:0xc002c054
c001cbd9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001cbdd:	50                   	push   eax
c001cbde:	e8 81 5f ff ff       	call   c0012b64 <File::File(char const*, Process*)>
c001cbe3:	83 c4 10             	add    esp,0x10
c001cbe6:	85 ff                	test   edi,edi
c001cbe8:	75 0a                	jne    c001cbf4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x89>
c001cbea:	83 ec 0c             	sub    esp,0xc
c001cbed:	68 6f 90 02 c0       	push   0xc002906f
c001cbf2:	eb 27                	jmp    c001cc1b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xb0>
c001cbf4:	50                   	push   eax
c001cbf5:	8d 44 24 17          	lea    eax,[esp+0x17]
c001cbf9:	50                   	push   eax
c001cbfa:	8d 44 24 20          	lea    eax,[esp+0x20]
c001cbfe:	50                   	push   eax
c001cbff:	57                   	push   edi
c001cc00:	e8 6f 62 ff ff       	call   c0012e74 <File::stat(unsigned long long*, bool*)>
c001cc05:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001cc0a:	83 c4 10             	add    esp,0x10
c001cc0d:	89 e8                	mov    eax,ebp
c001cc0f:	84 c0                	test   al,al
c001cc11:	74 1c                	je     c001cc2f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc4>
c001cc13:	83 ec 0c             	sub    esp,0xc
c001cc16:	68 83 90 02 c0       	push   0xc0029083
c001cc1b:	e8 d9 c1 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c001cc20:	31 ed                	xor    ebp,ebp
c001cc22:	e8 e0 f1 ff ff       	call   c001be07 <unlockScheduler()>
c001cc27:	83 c4 10             	add    esp,0x10
c001cc2a:	e9 8d 00 00 00       	jmp    c001ccbc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x151>
c001cc2f:	50                   	push   eax
c001cc30:	50                   	push   eax
c001cc31:	6a 01                	push   0x1
c001cc33:	57                   	push   edi
c001cc34:	e8 8f 5f ff ff       	call   c0012bc8 <File::open(FileOpenMode)>
c001cc39:	83 c4 10             	add    esp,0x10
c001cc3c:	85 c0                	test   eax,eax
c001cc3e:	74 17                	je     c001cc57 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xec>
c001cc40:	83 ec 0c             	sub    esp,0xc
c001cc43:	68 9c 90 02 c0       	push   0xc002909c
c001cc48:	e8 ac c1 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c001cc4d:	e8 b5 f1 ff ff       	call   c001be07 <unlockScheduler()>
c001cc52:	83 c4 10             	add    esp,0x10
c001cc55:	eb 65                	jmp    c001ccbc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x151>
c001cc57:	0f b7 f6             	movzx  esi,si
c001cc5a:	50                   	push   eax
c001cc5b:	0f b7 db             	movzx  ebx,bx
c001cc5e:	50                   	push   eax
c001cc5f:	56                   	push   esi
c001cc60:	53                   	push   ebx
c001cc61:	e8 cf fd ff ff       	call   c001ca35 <Vm::realToLinear(unsigned short, unsigned short)>
c001cc66:	5a                   	pop    edx
c001cc67:	8b 17                	mov    edx,DWORD PTR [edi]
c001cc69:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001cc6d:	51                   	push   ecx
c001cc6e:	50                   	push   eax
c001cc6f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001cc73:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001cc77:	57                   	push   edi
c001cc78:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001cc7b:	83 c4 14             	add    esp,0x14
c001cc7e:	57                   	push   edi
c001cc7f:	e8 a2 5f ff ff       	call   c0012c26 <File::close()>
c001cc84:	c7 04 24 b5 90 02 c0 	mov    DWORD PTR [esp],0xc00290b5
c001cc8b:	e8 a5 59 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001cc90:	59                   	pop    ecx
c001cc91:	c6 05 79 c0 02 c0 00 	mov    BYTE PTR ds:0xc002c079,0x0
c001cc98:	ff 35 7c c0 02 c0    	push   DWORD PTR ds:0xc002c07c
c001cc9e:	e8 79 f7 ff ff       	call   c001c41c <unblockTask(ThreadControlBlock*)>
c001cca3:	e8 5f f1 ff ff       	call   c001be07 <unlockScheduler()>
c001cca8:	c7 04 24 ce 90 02 c0 	mov    DWORD PTR [esp],0xc00290ce
c001ccaf:	e8 81 59 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001ccb4:	83 c4 10             	add    esp,0x10
c001ccb7:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ccbc:	83 c4 2c             	add    esp,0x2c
c001ccbf:	89 e8                	mov    eax,ebp
c001ccc1:	5b                   	pop    ebx
c001ccc2:	5e                   	pop    esi
c001ccc3:	5f                   	pop    edi
c001ccc4:	5d                   	pop    ebp
c001ccc5:	c3                   	ret    

c001ccc6 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ccc6:	57                   	push   edi
c001ccc7:	56                   	push   esi
c001ccc8:	53                   	push   ebx
c001ccc9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cccd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ccd1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ccd5:	83 e8 06             	sub    eax,0x6
c001ccd8:	0f b7 c0             	movzx  eax,ax
c001ccdb:	50                   	push   eax
c001ccdc:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001cce1:	50                   	push   eax
c001cce2:	e8 4e fd ff ff       	call   c001ca35 <Vm::realToLinear(unsigned short, unsigned short)>
c001cce7:	5a                   	pop    edx
c001cce8:	5e                   	pop    esi
c001cce9:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ccec:	8d 56 fa             	lea    edx,[esi-0x6]
c001ccef:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ccf5:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ccf8:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ccfb:	83 c2 02             	add    edx,0x2
c001ccfe:	66 89 10             	mov    WORD PTR [eax],dx
c001cd01:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001cd04:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001cd08:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001cd0b:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001cd0f:	89 d6                	mov    esi,edx
c001cd11:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001cd17:	66 81 e6 ff fd       	and    si,0xfdff
c001cd1c:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001cd20:	74 07                	je     c001cd29 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001cd22:	89 d6                	mov    esi,edx
c001cd24:	66 81 ce 00 02       	or     si,0x200
c001cd29:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001cd2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd32:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001cd36:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001cd3e:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001cd41:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001cd49:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001cd4c:	5b                   	pop    ebx
c001cd4d:	5e                   	pop    esi
c001cd4e:	5f                   	pop    edi
c001cd4f:	c3                   	ret    

c001cd50 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001cd50:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001cd55:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001cd5a:	c1 e0 04             	shl    eax,0x4
c001cd5d:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001cd60:	c3                   	ret    

c001cd61 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001cd61:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001cd66:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001cd6b:	c1 e0 04             	shl    eax,0x4
c001cd6e:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001cd72:	c3                   	ret    

c001cd73 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001cd73:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001cd78:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001cd7d:	c1 e0 04             	shl    eax,0x4
c001cd80:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001cd83:	c3                   	ret    

c001cd84 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001cd84:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001cd89:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001cd8e:	c1 e0 04             	shl    eax,0x4
c001cd91:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cd95:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001cd98:	c3                   	ret    

c001cd99 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001cd99:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001cd9e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001cda3:	c1 e0 04             	shl    eax,0x4
c001cda6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cdaa:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001cdae:	c3                   	ret    

c001cdaf <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001cdaf:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001cdb4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001cdb9:	c1 e0 04             	shl    eax,0x4
c001cdbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cdc0:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001cdc3:	c3                   	ret    

c001cdc4 <Vm::faultHandler(regs*)>:
c001cdc4:	55                   	push   ebp
c001cdc5:	57                   	push   edi
c001cdc6:	56                   	push   esi
c001cdc7:	53                   	push   ebx
c001cdc8:	83 ec 1c             	sub    esp,0x1c
c001cdcb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cdcf:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001cdd2:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001cdd6:	0f b7 f0             	movzx  esi,ax
c001cdd9:	52                   	push   edx
c001cdda:	0f b7 c0             	movzx  eax,ax
c001cddd:	50                   	push   eax
c001cdde:	e8 52 fc ff ff       	call   c001ca35 <Vm::realToLinear(unsigned short, unsigned short)>
c001cde3:	5a                   	pop    edx
c001cde4:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001cde7:	59                   	pop    ecx
c001cde8:	89 c7                	mov    edi,eax
c001cdea:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001cded:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cdf1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001cdf6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cdfa:	0f b7 c5             	movzx  eax,bp
c001cdfd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce01:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001ce05:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ce09:	e8 27 fc ff ff       	call   c001ca35 <Vm::realToLinear(unsigned short, unsigned short)>
c001ce0e:	5a                   	pop    edx
c001ce0f:	59                   	pop    ecx
c001ce10:	b1 06                	mov    cl,0x6
c001ce12:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001ce17:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001ce1c:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c001ce1f:	80 fa 9d             	cmp    dl,0x9d
c001ce22:	0f 84 1d 02 00 00    	je     c001d045 <Vm::faultHandler(regs*)+0x281>
c001ce28:	0f 87 8e 00 00 00    	ja     c001cebc <Vm::faultHandler(regs*)+0xf8>
c001ce2e:	80 fa 66             	cmp    dl,0x66
c001ce31:	0f 84 89 01 00 00    	je     c001cfc0 <Vm::faultHandler(regs*)+0x1fc>
c001ce37:	77 44                	ja     c001ce7d <Vm::faultHandler(regs*)+0xb9>
c001ce39:	80 fa 36             	cmp    dl,0x36
c001ce3c:	0f 84 74 01 00 00    	je     c001cfb6 <Vm::faultHandler(regs*)+0x1f2>
c001ce42:	77 1a                	ja     c001ce5e <Vm::faultHandler(regs*)+0x9a>
c001ce44:	80 fa 26             	cmp    dl,0x26
c001ce47:	0f 84 4b 01 00 00    	je     c001cf98 <Vm::faultHandler(regs*)+0x1d4>
c001ce4d:	80 fa 2e             	cmp    dl,0x2e
c001ce50:	0f 85 4a 05 00 00    	jne    c001d3a0 <Vm::faultHandler(regs*)+0x5dc>
c001ce56:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ce59:	31 c9                	xor    ecx,ecx
c001ce5b:	47                   	inc    edi
c001ce5c:	eb be                	jmp    c001ce1c <Vm::faultHandler(regs*)+0x58>
c001ce5e:	80 fa 64             	cmp    dl,0x64
c001ce61:	0f 84 3b 01 00 00    	je     c001cfa2 <Vm::faultHandler(regs*)+0x1de>
c001ce67:	0f 87 3f 01 00 00    	ja     c001cfac <Vm::faultHandler(regs*)+0x1e8>
c001ce6d:	80 fa 3e             	cmp    dl,0x3e
c001ce70:	0f 85 2a 05 00 00    	jne    c001d3a0 <Vm::faultHandler(regs*)+0x5dc>
c001ce76:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ce79:	b1 01                	mov    cl,0x1
c001ce7b:	eb de                	jmp    c001ce5b <Vm::faultHandler(regs*)+0x97>
c001ce7d:	80 fa 6d             	cmp    dl,0x6d
c001ce80:	0f 84 bf 02 00 00    	je     c001d145 <Vm::faultHandler(regs*)+0x381>
c001ce86:	77 17                	ja     c001ce9f <Vm::faultHandler(regs*)+0xdb>
c001ce88:	80 fa 67             	cmp    dl,0x67
c001ce8b:	0f 84 3c 01 00 00    	je     c001cfcd <Vm::faultHandler(regs*)+0x209>
c001ce91:	80 fa 6c             	cmp    dl,0x6c
c001ce94:	0f 84 5d 02 00 00    	je     c001d0f7 <Vm::faultHandler(regs*)+0x333>
c001ce9a:	e9 01 05 00 00       	jmp    c001d3a0 <Vm::faultHandler(regs*)+0x5dc>
c001ce9f:	80 fa 6f             	cmp    dl,0x6f
c001cea2:	0f 84 8b 03 00 00    	je     c001d233 <Vm::faultHandler(regs*)+0x46f>
c001cea8:	0f 82 0f 03 00 00    	jb     c001d1bd <Vm::faultHandler(regs*)+0x3f9>
c001ceae:	80 fa 9c             	cmp    dl,0x9c
c001ceb1:	0f 84 23 01 00 00    	je     c001cfda <Vm::faultHandler(regs*)+0x216>
c001ceb7:	e9 e4 04 00 00       	jmp    c001d3a0 <Vm::faultHandler(regs*)+0x5dc>
c001cebc:	80 fa ec             	cmp    dl,0xec
c001cebf:	0f 84 7f 04 00 00    	je     c001d344 <Vm::faultHandler(regs*)+0x580>
c001cec5:	77 7b                	ja     c001cf42 <Vm::faultHandler(regs*)+0x17e>
c001cec7:	80 fa e4             	cmp    dl,0xe4
c001ceca:	0f 84 fe 03 00 00    	je     c001d2ce <Vm::faultHandler(regs*)+0x50a>
c001ced0:	77 53                	ja     c001cf25 <Vm::faultHandler(regs*)+0x161>
c001ced2:	80 fa cd             	cmp    dl,0xcd
c001ced5:	0f 84 cd 01 00 00    	je     c001d0a8 <Vm::faultHandler(regs*)+0x2e4>
c001cedb:	80 fa cf             	cmp    dl,0xcf
c001cede:	0f 85 bc 04 00 00    	jne    c001d3a0 <Vm::faultHandler(regs*)+0x5dc>
c001cee4:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001cee7:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001ceea:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001ceee:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001cef1:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001cef5:	81 ca 00 02 02 00    	or     edx,0x20200
c001cefb:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001cefe:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001cf02:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001cf08:	66 c1 e8 09          	shr    ax,0x9
c001cf0c:	83 e0 01             	and    eax,0x1
c001cf0f:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001cf12:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001cf15:	83 c0 06             	add    eax,0x6
c001cf18:	25 ff ff 00 00       	and    eax,0xffff
c001cf1d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001cf20:	e9 77 04 00 00       	jmp    c001d39c <Vm::faultHandler(regs*)+0x5d8>
c001cf25:	80 fa e6             	cmp    dl,0xe6
c001cf28:	0f 84 ea 03 00 00    	je     c001d318 <Vm::faultHandler(regs*)+0x554>
c001cf2e:	0f 82 b6 03 00 00    	jb     c001d2ea <Vm::faultHandler(regs*)+0x526>
c001cf34:	80 fa e7             	cmp    dl,0xe7
c001cf37:	0f 84 f2 03 00 00    	je     c001d32f <Vm::faultHandler(regs*)+0x56b>
c001cf3d:	e9 5e 04 00 00       	jmp    c001d3a0 <Vm::faultHandler(regs*)+0x5dc>
c001cf42:	80 fa ef             	cmp    dl,0xef
c001cf45:	0f 84 3c 04 00 00    	je     c001d387 <Vm::faultHandler(regs*)+0x5c3>
c001cf4b:	77 28                	ja     c001cf75 <Vm::faultHandler(regs*)+0x1b1>
c001cf4d:	80 fa ed             	cmp    dl,0xed
c001cf50:	0f 84 0a 04 00 00    	je     c001d360 <Vm::faultHandler(regs*)+0x59c>
c001cf56:	80 fa ee             	cmp    dl,0xee
c001cf59:	0f 85 41 04 00 00    	jne    c001d3a0 <Vm::faultHandler(regs*)+0x5dc>
c001cf5f:	50                   	push   eax
c001cf60:	50                   	push   eax
c001cf61:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001cf65:	50                   	push   eax
c001cf66:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001cf6a:	50                   	push   eax
c001cf6b:	e8 90 fa ff ff       	call   c001ca00 <Vm::outbv(unsigned short, unsigned char)>
c001cf70:	e9 0a 04 00 00       	jmp    c001d37f <Vm::faultHandler(regs*)+0x5bb>
c001cf75:	80 fa fa             	cmp    dl,0xfa
c001cf78:	0f 84 5d 01 00 00    	je     c001d0db <Vm::faultHandler(regs*)+0x317>
c001cf7e:	80 fa fb             	cmp    dl,0xfb
c001cf81:	0f 84 62 01 00 00    	je     c001d0e9 <Vm::faultHandler(regs*)+0x325>
c001cf87:	80 fa f3             	cmp    dl,0xf3
c001cf8a:	0f 85 10 04 00 00    	jne    c001d3a0 <Vm::faultHandler(regs*)+0x5dc>
c001cf90:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cf93:	e9 c3 fe ff ff       	jmp    c001ce5b <Vm::faultHandler(regs*)+0x97>
c001cf98:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cf9b:	b1 02                	mov    cl,0x2
c001cf9d:	e9 b9 fe ff ff       	jmp    c001ce5b <Vm::faultHandler(regs*)+0x97>
c001cfa2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cfa5:	b1 03                	mov    cl,0x3
c001cfa7:	e9 af fe ff ff       	jmp    c001ce5b <Vm::faultHandler(regs*)+0x97>
c001cfac:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cfaf:	b1 04                	mov    cl,0x4
c001cfb1:	e9 a5 fe ff ff       	jmp    c001ce5b <Vm::faultHandler(regs*)+0x97>
c001cfb6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cfb9:	b1 05                	mov    cl,0x5
c001cfbb:	e9 9b fe ff ff       	jmp    c001ce5b <Vm::faultHandler(regs*)+0x97>
c001cfc0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cfc3:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001cfc8:	e9 8e fe ff ff       	jmp    c001ce5b <Vm::faultHandler(regs*)+0x97>
c001cfcd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cfd0:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001cfd5:	e9 81 fe ff ff       	jmp    c001ce5b <Vm::faultHandler(regs*)+0x97>
c001cfda:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001cfdd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001cfe1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cfe6:	74 30                	je     c001d018 <Vm::faultHandler(regs*)+0x254>
c001cfe8:	83 e9 04             	sub    ecx,0x4
c001cfeb:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001cff1:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001cff7:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001cffa:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001cffd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d003:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001d007:	0f 84 8c 03 00 00    	je     c001d399 <Vm::faultHandler(regs*)+0x5d5>
c001d00d:	80 ce 02             	or     dh,0x2
c001d010:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001d013:	e9 81 03 00 00       	jmp    c001d399 <Vm::faultHandler(regs*)+0x5d5>
c001d018:	83 e9 02             	sub    ecx,0x2
c001d01b:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001d021:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001d024:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001d028:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d02e:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001d032:	74 05                	je     c001d039 <Vm::faultHandler(regs*)+0x275>
c001d034:	80 ce 02             	or     dh,0x2
c001d037:	eb 03                	jmp    c001d03c <Vm::faultHandler(regs*)+0x278>
c001d039:	80 e6 fd             	and    dh,0xfd
c001d03c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001d040:	e9 54 03 00 00       	jmp    c001d399 <Vm::faultHandler(regs*)+0x5d5>
c001d045:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d04a:	74 2a                	je     c001d076 <Vm::faultHandler(regs*)+0x2b2>
c001d04c:	8b 10                	mov    edx,DWORD PTR [eax]
c001d04e:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001d054:	81 ca 00 02 02 00    	or     edx,0x20200
c001d05a:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001d05d:	8b 00                	mov    eax,DWORD PTR [eax]
c001d05f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d065:	c1 e8 09             	shr    eax,0x9
c001d068:	83 e0 01             	and    eax,0x1
c001d06b:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001d06e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001d071:	83 c0 04             	add    eax,0x4
c001d074:	eb 25                	jmp    c001d09b <Vm::faultHandler(regs*)+0x2d7>
c001d076:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001d079:	81 ca 00 02 02 00    	or     edx,0x20200
c001d07f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001d082:	66 8b 00             	mov    ax,WORD PTR [eax]
c001d085:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d08b:	66 c1 e8 09          	shr    ax,0x9
c001d08f:	83 e0 01             	and    eax,0x1
c001d092:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001d095:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001d098:	83 c0 02             	add    eax,0x2
c001d09b:	25 ff ff 00 00       	and    eax,0xffff
c001d0a0:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001d0a3:	e9 f1 02 00 00       	jmp    c001d399 <Vm::faultHandler(regs*)+0x5d5>
c001d0a8:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001d0ac:	3c ee                	cmp    al,0xee
c001d0ae:	75 10                	jne    c001d0c0 <Vm::faultHandler(regs*)+0x2fc>
c001d0b0:	83 ec 0c             	sub    esp,0xc
c001d0b3:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001d0b6:	e8 eb f9 ff ff       	call   c001caa6 <Vm::mainloop3(unsigned long)>
c001d0bb:	e9 c2 02 00 00       	jmp    c001d382 <Vm::faultHandler(regs*)+0x5be>
c001d0c0:	83 ec 0c             	sub    esp,0xc
c001d0c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d0c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0cb:	57                   	push   edi
c001d0cc:	50                   	push   eax
c001d0cd:	53                   	push   ebx
c001d0ce:	e8 f3 fb ff ff       	call   c001ccc6 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001d0d3:	83 c4 20             	add    esp,0x20
c001d0d6:	e9 c1 02 00 00       	jmp    c001d39c <Vm::faultHandler(regs*)+0x5d8>
c001d0db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d0e0:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001d0e4:	e9 b0 02 00 00       	jmp    c001d399 <Vm::faultHandler(regs*)+0x5d5>
c001d0e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d0ee:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001d0f2:	e9 a2 02 00 00       	jmp    c001d399 <Vm::faultHandler(regs*)+0x5d5>
c001d0f7:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001d0fc:	74 0d                	je     c001d10b <Vm::faultHandler(regs*)+0x347>
c001d0fe:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001d105:	0f 87 e9 02 00 00    	ja     c001d3f4 <Vm::faultHandler(regs*)+0x630>
c001d10b:	83 ec 0c             	sub    esp,0xc
c001d10e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001d111:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001d115:	50                   	push   eax
c001d116:	e8 df f8 ff ff       	call   c001c9fa <Vm::inbv(unsigned short)>
c001d11b:	83 c4 0c             	add    esp,0xc
c001d11e:	0f b6 c0             	movzx  eax,al
c001d121:	0f b7 c9             	movzx  ecx,cx
c001d124:	50                   	push   eax
c001d125:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001d129:	50                   	push   eax
c001d12a:	51                   	push   ecx
c001d12b:	e8 54 fc ff ff       	call   c001cd84 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001d130:	83 c4 10             	add    esp,0x10
c001d133:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d136:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001d13a:	74 03                	je     c001d13f <Vm::faultHandler(regs*)+0x37b>
c001d13c:	48                   	dec    eax
c001d13d:	eb 01                	jmp    c001d140 <Vm::faultHandler(regs*)+0x37c>
c001d13f:	40                   	inc    eax
c001d140:	0f b7 c0             	movzx  eax,ax
c001d143:	eb 70                	jmp    c001d1b5 <Vm::faultHandler(regs*)+0x3f1>
c001d145:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001d148:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001d14b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001d150:	74 0c                	je     c001d15e <Vm::faultHandler(regs*)+0x39a>
c001d152:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001d158:	0f 87 96 02 00 00    	ja     c001d3f4 <Vm::faultHandler(regs*)+0x630>
c001d15e:	0f b7 c9             	movzx  ecx,cx
c001d161:	0f b7 f6             	movzx  esi,si
c001d164:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001d167:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d16c:	74 20                	je     c001d18e <Vm::faultHandler(regs*)+0x3ca>
c001d16e:	ed                   	in     eax,dx
c001d16f:	55                   	push   ebp
c001d170:	50                   	push   eax
c001d171:	51                   	push   ecx
c001d172:	56                   	push   esi
c001d173:	e8 37 fc ff ff       	call   c001cdaf <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001d178:	83 c4 10             	add    esp,0x10
c001d17b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d17e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001d182:	74 05                	je     c001d189 <Vm::faultHandler(regs*)+0x3c5>
c001d184:	83 e8 04             	sub    eax,0x4
c001d187:	eb 27                	jmp    c001d1b0 <Vm::faultHandler(regs*)+0x3ec>
c001d189:	83 c0 04             	add    eax,0x4
c001d18c:	eb 22                	jmp    c001d1b0 <Vm::faultHandler(regs*)+0x3ec>
c001d18e:	66 ed                	in     ax,dx
c001d190:	0f b7 c0             	movzx  eax,ax
c001d193:	57                   	push   edi
c001d194:	50                   	push   eax
c001d195:	51                   	push   ecx
c001d196:	56                   	push   esi
c001d197:	e8 fd fb ff ff       	call   c001cd99 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001d19c:	83 c4 10             	add    esp,0x10
c001d19f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d1a2:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001d1a6:	74 05                	je     c001d1ad <Vm::faultHandler(regs*)+0x3e9>
c001d1a8:	83 e8 02             	sub    eax,0x2
c001d1ab:	eb 03                	jmp    c001d1b0 <Vm::faultHandler(regs*)+0x3ec>
c001d1ad:	83 c0 02             	add    eax,0x2
c001d1b0:	25 ff ff 00 00       	and    eax,0xffff
c001d1b5:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001d1b8:	e9 dc 01 00 00       	jmp    c001d399 <Vm::faultHandler(regs*)+0x5d5>
c001d1bd:	49                   	dec    ecx
c001d1be:	80 f9 05             	cmp    cl,0x5
c001d1c1:	77 24                	ja     c001d1e7 <Vm::faultHandler(regs*)+0x423>
c001d1c3:	0f b6 c9             	movzx  ecx,cl
c001d1c6:	ff 24 8d 10 91 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd6ef0]
c001d1cd:	0f b7 f5             	movzx  esi,bp
c001d1d0:	eb 15                	jmp    c001d1e7 <Vm::faultHandler(regs*)+0x423>
c001d1d2:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c001d1d6:	eb 0f                	jmp    c001d1e7 <Vm::faultHandler(regs*)+0x423>
c001d1d8:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c001d1dc:	eb 09                	jmp    c001d1e7 <Vm::faultHandler(regs*)+0x423>
c001d1de:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c001d1e2:	eb 03                	jmp    c001d1e7 <Vm::faultHandler(regs*)+0x423>
c001d1e4:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c001d1e7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d1ea:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001d1ef:	74 0b                	je     c001d1fc <Vm::faultHandler(regs*)+0x438>
c001d1f1:	3d ff ff 00 00       	cmp    eax,0xffff
c001d1f6:	0f 87 f8 01 00 00    	ja     c001d3f4 <Vm::faultHandler(regs*)+0x630>
c001d1fc:	0f b7 c0             	movzx  eax,ax
c001d1ff:	52                   	push   edx
c001d200:	52                   	push   edx
c001d201:	50                   	push   eax
c001d202:	56                   	push   esi
c001d203:	e8 48 fb ff ff       	call   c001cd50 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001d208:	59                   	pop    ecx
c001d209:	0f b6 c0             	movzx  eax,al
c001d20c:	5e                   	pop    esi
c001d20d:	50                   	push   eax
c001d20e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001d212:	50                   	push   eax
c001d213:	e8 e8 f7 ff ff       	call   c001ca00 <Vm::outbv(unsigned short, unsigned char)>
c001d218:	83 c4 10             	add    esp,0x10
c001d21b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d21e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001d222:	74 03                	je     c001d227 <Vm::faultHandler(regs*)+0x463>
c001d224:	48                   	dec    eax
c001d225:	eb 01                	jmp    c001d228 <Vm::faultHandler(regs*)+0x464>
c001d227:	40                   	inc    eax
c001d228:	0f b7 c0             	movzx  eax,ax
c001d22b:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001d22e:	e9 66 01 00 00       	jmp    c001d399 <Vm::faultHandler(regs*)+0x5d5>
c001d233:	49                   	dec    ecx
c001d234:	80 f9 05             	cmp    cl,0x5
c001d237:	77 1f                	ja     c001d258 <Vm::faultHandler(regs*)+0x494>
c001d239:	0f b6 c9             	movzx  ecx,cl
c001d23c:	ff 24 8d 28 91 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd6ed8]
c001d243:	89 ee                	mov    esi,ebp
c001d245:	eb 11                	jmp    c001d258 <Vm::faultHandler(regs*)+0x494>
c001d247:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001d24a:	eb 0c                	jmp    c001d258 <Vm::faultHandler(regs*)+0x494>
c001d24c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001d24f:	eb 07                	jmp    c001d258 <Vm::faultHandler(regs*)+0x494>
c001d251:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c001d254:	eb 02                	jmp    c001d258 <Vm::faultHandler(regs*)+0x494>
c001d256:	8b 33                	mov    esi,DWORD PTR [ebx]
c001d258:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001d25b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001d260:	74 0c                	je     c001d26e <Vm::faultHandler(regs*)+0x4aa>
c001d262:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001d268:	0f 87 86 01 00 00    	ja     c001d3f4 <Vm::faultHandler(regs*)+0x630>
c001d26e:	0f b7 d6             	movzx  edx,si
c001d271:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001d274:	0f b7 c1             	movzx  eax,cx
c001d277:	81 e7 00 04 00 00    	and    edi,0x400
c001d27d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001d280:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d285:	74 1d                	je     c001d2a4 <Vm::faultHandler(regs*)+0x4e0>
c001d287:	55                   	push   ebp
c001d288:	55                   	push   ebp
c001d289:	50                   	push   eax
c001d28a:	52                   	push   edx
c001d28b:	e8 e3 fa ff ff       	call   c001cd73 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001d290:	83 c4 10             	add    esp,0x10
c001d293:	89 f2                	mov    edx,esi
c001d295:	ef                   	out    dx,eax
c001d296:	85 ff                	test   edi,edi
c001d298:	74 05                	je     c001d29f <Vm::faultHandler(regs*)+0x4db>
c001d29a:	83 e9 04             	sub    ecx,0x4
c001d29d:	eb 21                	jmp    c001d2c0 <Vm::faultHandler(regs*)+0x4fc>
c001d29f:	83 c1 04             	add    ecx,0x4
c001d2a2:	eb 1c                	jmp    c001d2c0 <Vm::faultHandler(regs*)+0x4fc>
c001d2a4:	55                   	push   ebp
c001d2a5:	55                   	push   ebp
c001d2a6:	50                   	push   eax
c001d2a7:	52                   	push   edx
c001d2a8:	e8 b4 fa ff ff       	call   c001cd61 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001d2ad:	83 c4 10             	add    esp,0x10
c001d2b0:	89 f2                	mov    edx,esi
c001d2b2:	66 ef                	out    dx,ax
c001d2b4:	85 ff                	test   edi,edi
c001d2b6:	74 05                	je     c001d2bd <Vm::faultHandler(regs*)+0x4f9>
c001d2b8:	83 e9 02             	sub    ecx,0x2
c001d2bb:	eb 03                	jmp    c001d2c0 <Vm::faultHandler(regs*)+0x4fc>
c001d2bd:	83 c1 02             	add    ecx,0x2
c001d2c0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001d2c6:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c001d2c9:	e9 cb 00 00 00       	jmp    c001d399 <Vm::faultHandler(regs*)+0x5d5>
c001d2ce:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001d2d5:	83 ec 0c             	sub    esp,0xc
c001d2d8:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001d2dc:	50                   	push   eax
c001d2dd:	e8 18 f7 ff ff       	call   c001c9fa <Vm::inbv(unsigned short)>
c001d2e2:	0f b6 c0             	movzx  eax,al
c001d2e5:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001d2e8:	eb 3f                	jmp    c001d329 <Vm::faultHandler(regs*)+0x565>
c001d2ea:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d2ef:	74 07                	je     c001d2f8 <Vm::faultHandler(regs*)+0x534>
c001d2f1:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001d2f5:	ed                   	in     eax,dx
c001d2f6:	eb 14                	jmp    c001d30c <Vm::faultHandler(regs*)+0x548>
c001d2f8:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c001d2fb:	66 31 c9             	xor    cx,cx
c001d2fe:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c001d301:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001d305:	66 ed                	in     ax,dx
c001d307:	0f b7 c0             	movzx  eax,ax
c001d30a:	09 c8                	or     eax,ecx
c001d30c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001d30f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d313:	e9 84 00 00 00       	jmp    c001d39c <Vm::faultHandler(regs*)+0x5d8>
c001d318:	52                   	push   edx
c001d319:	52                   	push   edx
c001d31a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001d31e:	50                   	push   eax
c001d31f:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001d323:	50                   	push   eax
c001d324:	e8 d7 f6 ff ff       	call   c001ca00 <Vm::outbv(unsigned short, unsigned char)>
c001d329:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d32d:	eb 53                	jmp    c001d382 <Vm::faultHandler(regs*)+0x5be>
c001d32f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001d332:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001d336:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d33b:	74 03                	je     c001d340 <Vm::faultHandler(regs*)+0x57c>
c001d33d:	ef                   	out    dx,eax
c001d33e:	eb cf                	jmp    c001d30f <Vm::faultHandler(regs*)+0x54b>
c001d340:	66 ef                	out    dx,ax
c001d342:	eb cb                	jmp    c001d30f <Vm::faultHandler(regs*)+0x54b>
c001d344:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001d34b:	83 ec 0c             	sub    esp,0xc
c001d34e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001d352:	50                   	push   eax
c001d353:	e8 a2 f6 ff ff       	call   c001c9fa <Vm::inbv(unsigned short)>
c001d358:	0f b6 c0             	movzx  eax,al
c001d35b:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001d35e:	eb 1f                	jmp    c001d37f <Vm::faultHandler(regs*)+0x5bb>
c001d360:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001d363:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d368:	74 03                	je     c001d36d <Vm::faultHandler(regs*)+0x5a9>
c001d36a:	ed                   	in     eax,dx
c001d36b:	eb 0d                	jmp    c001d37a <Vm::faultHandler(regs*)+0x5b6>
c001d36d:	66 ed                	in     ax,dx
c001d36f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001d372:	0f b7 c0             	movzx  eax,ax
c001d375:	66 31 d2             	xor    dx,dx
c001d378:	09 d0                	or     eax,edx
c001d37a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001d37d:	eb 1a                	jmp    c001d399 <Vm::faultHandler(regs*)+0x5d5>
c001d37f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d382:	83 c4 10             	add    esp,0x10
c001d385:	eb 15                	jmp    c001d39c <Vm::faultHandler(regs*)+0x5d8>
c001d387:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001d38a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001d38d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d392:	74 03                	je     c001d397 <Vm::faultHandler(regs*)+0x5d3>
c001d394:	ef                   	out    dx,eax
c001d395:	eb 02                	jmp    c001d399 <Vm::faultHandler(regs*)+0x5d5>
c001d397:	66 ef                	out    dx,ax
c001d399:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d39c:	b0 01                	mov    al,0x1
c001d39e:	eb 56                	jmp    c001d3f6 <Vm::faultHandler(regs*)+0x632>
c001d3a0:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c001d3a4:	50                   	push   eax
c001d3a5:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c001d3a9:	50                   	push   eax
c001d3aa:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c001d3ae:	50                   	push   eax
c001d3af:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c001d3b3:	50                   	push   eax
c001d3b4:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001d3b8:	50                   	push   eax
c001d3b9:	52                   	push   edx
c001d3ba:	52                   	push   edx
c001d3bb:	68 e3 90 02 c0       	push   0xc00290e3
c001d3c0:	e8 70 52 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001d3c5:	83 c4 20             	add    esp,0x20
c001d3c8:	83 ec 0c             	sub    esp,0xc
c001d3cb:	6a 60                	push   0x60
c001d3cd:	e8 28 f6 ff ff       	call   c001c9fa <Vm::inbv(unsigned short)>
c001d3d2:	83 c4 10             	add    esp,0x10
c001d3d5:	3c 1c                	cmp    al,0x1c
c001d3d7:	74 04                	je     c001d3dd <Vm::faultHandler(regs*)+0x619>
c001d3d9:	3c 5a                	cmp    al,0x5a
c001d3db:	75 eb                	jne    c001d3c8 <Vm::faultHandler(regs*)+0x604>
c001d3dd:	3c 5a                	cmp    al,0x5a
c001d3df:	74 04                	je     c001d3e5 <Vm::faultHandler(regs*)+0x621>
c001d3e1:	3c 1c                	cmp    al,0x1c
c001d3e3:	75 0f                	jne    c001d3f4 <Vm::faultHandler(regs*)+0x630>
c001d3e5:	83 ec 0c             	sub    esp,0xc
c001d3e8:	6a 60                	push   0x60
c001d3ea:	e8 0b f6 ff ff       	call   c001c9fa <Vm::inbv(unsigned short)>
c001d3ef:	83 c4 10             	add    esp,0x10
c001d3f2:	eb e9                	jmp    c001d3dd <Vm::faultHandler(regs*)+0x619>
c001d3f4:	31 c0                	xor    eax,eax
c001d3f6:	83 c4 1c             	add    esp,0x1c
c001d3f9:	5b                   	pop    ebx
c001d3fa:	5e                   	pop    esi
c001d3fb:	5f                   	pop    edi
c001d3fc:	5d                   	pop    ebp
c001d3fd:	c3                   	ret    

c001d3fe <Vm::fpuInternalTo32(unsigned long long)>:
c001d3fe:	57                   	push   edi
c001d3ff:	56                   	push   esi
c001d400:	53                   	push   ebx
c001d401:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d409:	89 d6                	mov    esi,edx
c001d40b:	89 d7                	mov    edi,edx
c001d40d:	89 c1                	mov    ecx,eax
c001d40f:	c1 ef 14             	shr    edi,0x14
c001d412:	89 d3                	mov    ebx,edx
c001d414:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001d41a:	31 d2                	xor    edx,edx
c001d41c:	89 f8                	mov    eax,edi
c001d41e:	81 e6 00 00 00 80    	and    esi,0x80000000
c001d424:	bf ff 00 00 00       	mov    edi,0xff
c001d429:	05 80 fc ff ff       	add    eax,0xfffffc80
c001d42e:	83 d2 ff             	adc    edx,0xffffffff
c001d431:	39 c7                	cmp    edi,eax
c001d433:	bf 00 00 00 00       	mov    edi,0x0
c001d438:	19 d7                	sbb    edi,edx
c001d43a:	72 15                	jb     c001d451 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001d43c:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001d440:	c1 e0 17             	shl    eax,0x17
c001d443:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001d449:	09 f1                	or     ecx,esi
c001d44b:	09 c1                	or     ecx,eax
c001d44d:	89 cf                	mov    edi,ecx
c001d44f:	eb 02                	jmp    c001d453 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001d451:	31 ff                	xor    edi,edi
c001d453:	89 f8                	mov    eax,edi
c001d455:	5b                   	pop    ebx
c001d456:	5e                   	pop    esi
c001d457:	5f                   	pop    edi
c001d458:	c3                   	ret    

c001d459 <Vm::fpuInternalTo64(unsigned long long)>:
c001d459:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d45d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d461:	c3                   	ret    

c001d462 <Vm::fpu32ToInternal(unsigned int)>:
c001d462:	57                   	push   edi
c001d463:	31 ff                	xor    edi,edi
c001d465:	56                   	push   esi
c001d466:	53                   	push   ebx
c001d467:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d46b:	89 cb                	mov    ebx,ecx
c001d46d:	89 ce                	mov    esi,ecx
c001d46f:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001d475:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001d47b:	c1 e9 17             	shr    ecx,0x17
c001d47e:	89 f0                	mov    eax,esi
c001d480:	0f b6 d1             	movzx  edx,cl
c001d483:	81 c2 80 03 00 00    	add    edx,0x380
c001d489:	89 d1                	mov    ecx,edx
c001d48b:	89 fa                	mov    edx,edi
c001d48d:	c1 e1 14             	shl    ecx,0x14
c001d490:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001d494:	c1 e0 1d             	shl    eax,0x1d
c001d497:	89 d7                	mov    edi,edx
c001d499:	89 c6                	mov    esi,eax
c001d49b:	89 ca                	mov    edx,ecx
c001d49d:	89 f0                	mov    eax,esi
c001d49f:	09 fa                	or     edx,edi
c001d4a1:	09 da                	or     edx,ebx
c001d4a3:	5b                   	pop    ebx
c001d4a4:	5e                   	pop    esi
c001d4a5:	5f                   	pop    edi
c001d4a6:	c3                   	ret    

c001d4a7 <Vm::fpu64ToInternal(unsigned long long)>:
c001d4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d4ab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d4af:	c3                   	ret    

c001d4b0 <Vm::fpuFloatToLong(unsigned long long)>:
c001d4b0:	57                   	push   edi
c001d4b1:	31 c0                	xor    eax,eax
c001d4b3:	56                   	push   esi
c001d4b4:	31 d2                	xor    edx,edx
c001d4b6:	53                   	push   ebx
c001d4b7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d4bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d4bf:	89 d9                	mov    ecx,ebx
c001d4c1:	c1 e9 14             	shr    ecx,0x14
c001d4c4:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001d4ca:	89 cf                	mov    edi,ecx
c001d4cc:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001d4d2:	78 33                	js     c001d507 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001d4d4:	89 d9                	mov    ecx,ebx
c001d4d6:	89 f0                	mov    eax,esi
c001d4d8:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001d4de:	81 c9 00 00 10 00    	or     ecx,0x100000
c001d4e4:	89 ca                	mov    edx,ecx
c001d4e6:	b9 34 00 00 00       	mov    ecx,0x34
c001d4eb:	29 f9                	sub    ecx,edi
c001d4ed:	0f ad d0             	shrd   eax,edx,cl
c001d4f0:	d3 fa                	sar    edx,cl
c001d4f2:	f6 c1 20             	test   cl,0x20
c001d4f5:	74 05                	je     c001d4fc <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001d4f7:	89 d0                	mov    eax,edx
c001d4f9:	c1 fa 1f             	sar    edx,0x1f
c001d4fc:	85 db                	test   ebx,ebx
c001d4fe:	79 07                	jns    c001d507 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001d500:	f7 d8                	neg    eax
c001d502:	83 d2 00             	adc    edx,0x0
c001d505:	f7 da                	neg    edx
c001d507:	5b                   	pop    ebx
c001d508:	5e                   	pop    esi
c001d509:	5f                   	pop    edi
c001d50a:	c3                   	ret    

c001d50b <Vm::fpuULongToFloat(unsigned long long)>:
c001d50b:	57                   	push   edi
c001d50c:	31 c9                	xor    ecx,ecx
c001d50e:	56                   	push   esi
c001d50f:	53                   	push   ebx
c001d510:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d514:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d518:	0f ba e7 14          	bt     edi,0x14
c001d51c:	72 07                	jb     c001d525 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001d51e:	01 f6                	add    esi,esi
c001d520:	11 ff                	adc    edi,edi
c001d522:	41                   	inc    ecx
c001d523:	eb f3                	jmp    c001d518 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001d525:	89 fa                	mov    edx,edi
c001d527:	89 f0                	mov    eax,esi
c001d529:	bb 33 04 00 00       	mov    ebx,0x433
c001d52e:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001d534:	29 cb                	sub    ebx,ecx
c001d536:	89 d9                	mov    ecx,ebx
c001d538:	5b                   	pop    ebx
c001d539:	c1 e1 14             	shl    ecx,0x14
c001d53c:	5e                   	pop    esi
c001d53d:	09 ca                	or     edx,ecx
c001d53f:	5f                   	pop    edi
c001d540:	c3                   	ret    

c001d541 <Vm::fpuLongToFloat(long long)>:
c001d541:	56                   	push   esi
c001d542:	31 c0                	xor    eax,eax
c001d544:	53                   	push   ebx
c001d545:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d549:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d54d:	39 c8                	cmp    eax,ecx
c001d54f:	19 d8                	sbb    eax,ebx
c001d551:	7d 04                	jge    c001d557 <Vm::fpuLongToFloat(long long)+0x16>
c001d553:	31 f6                	xor    esi,esi
c001d555:	eb 0c                	jmp    c001d563 <Vm::fpuLongToFloat(long long)+0x22>
c001d557:	f7 d9                	neg    ecx
c001d559:	be 01 00 00 00       	mov    esi,0x1
c001d55e:	83 d3 00             	adc    ebx,0x0
c001d561:	f7 db                	neg    ebx
c001d563:	31 c0                	xor    eax,eax
c001d565:	0f ba e3 14          	bt     ebx,0x14
c001d569:	72 07                	jb     c001d572 <Vm::fpuLongToFloat(long long)+0x31>
c001d56b:	01 c9                	add    ecx,ecx
c001d56d:	11 db                	adc    ebx,ebx
c001d56f:	40                   	inc    eax
c001d570:	eb f3                	jmp    c001d565 <Vm::fpuLongToFloat(long long)+0x24>
c001d572:	ba 33 04 00 00       	mov    edx,0x433
c001d577:	29 c2                	sub    edx,eax
c001d579:	89 c8                	mov    eax,ecx
c001d57b:	c1 e2 14             	shl    edx,0x14
c001d57e:	89 d9                	mov    ecx,ebx
c001d580:	89 f3                	mov    ebx,esi
c001d582:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001d588:	09 ca                	or     edx,ecx
c001d58a:	84 db                	test   bl,bl
c001d58c:	74 06                	je     c001d594 <Vm::fpuLongToFloat(long long)+0x53>
c001d58e:	81 ca 00 00 00 80    	or     edx,0x80000000
c001d594:	5b                   	pop    ebx
c001d595:	5e                   	pop    esi
c001d596:	c3                   	ret    

c001d597 <Vm::fpuGet0()>:
c001d597:	31 c0                	xor    eax,eax
c001d599:	31 d2                	xor    edx,edx
c001d59b:	c3                   	ret    

c001d59c <Vm::fpuGet1()>:
c001d59c:	b8 01 00 00 00       	mov    eax,0x1
c001d5a1:	31 d2                	xor    edx,edx
c001d5a3:	c3                   	ret    

c001d5a4 <Vm::fpuGetPi()>:
c001d5a4:	b8 03 00 00 00       	mov    eax,0x3
c001d5a9:	31 d2                	xor    edx,edx
c001d5ab:	c3                   	ret    

c001d5ac <Vm::fpuGetLog2E()>:
c001d5ac:	83 ec 18             	sub    esp,0x18
c001d5af:	68 40 91 02 c0       	push   0xc0029140
c001d5b4:	e8 40 b8 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c001d5b9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001d5be:	31 d2                	xor    edx,edx
c001d5c0:	83 c4 1c             	add    esp,0x1c
c001d5c3:	c3                   	ret    

c001d5c4 <Vm::fpuGetLogE2()>:
c001d5c4:	83 ec 18             	sub    esp,0x18
c001d5c7:	68 4c 91 02 c0       	push   0xc002914c
c001d5cc:	e8 28 b8 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c001d5d1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001d5d6:	31 d2                	xor    edx,edx
c001d5d8:	83 c4 1c             	add    esp,0x1c
c001d5db:	c3                   	ret    

c001d5dc <Vm::fpuGetLog210()>:
c001d5dc:	83 ec 18             	sub    esp,0x18
c001d5df:	68 58 91 02 c0       	push   0xc0029158
c001d5e4:	e8 10 b8 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c001d5e9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001d5ee:	31 d2                	xor    edx,edx
c001d5f0:	83 c4 1c             	add    esp,0x1c
c001d5f3:	c3                   	ret    

c001d5f4 <Vm::fpuGetLog102()>:
c001d5f4:	83 ec 18             	sub    esp,0x18
c001d5f7:	68 65 91 02 c0       	push   0xc0029165
c001d5fc:	e8 f8 b7 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c001d601:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001d606:	31 d2                	xor    edx,edx
c001d608:	83 c4 1c             	add    esp,0x1c
c001d60b:	c3                   	ret    

c001d60c <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001d60c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d610:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001d614:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d618:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001d61c:	0f 92 c0             	setb   al
c001d61f:	c3                   	ret    

c001d620 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001d620:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d628:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001d62c:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001d630:	09 c2                	or     edx,eax
c001d632:	0f 94 c0             	sete   al
c001d635:	c3                   	ret    

c001d636 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001d636:	57                   	push   edi
c001d637:	56                   	push   esi
c001d638:	53                   	push   ebx
c001d639:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d63d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d641:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d645:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d649:	57                   	push   edi
c001d64a:	56                   	push   esi
c001d64b:	53                   	push   ebx
c001d64c:	51                   	push   ecx
c001d64d:	e8 ce ff ff ff       	call   c001d620 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001d652:	83 c4 10             	add    esp,0x10
c001d655:	88 c2                	mov    dl,al
c001d657:	31 c0                	xor    eax,eax
c001d659:	84 d2                	test   dl,dl
c001d65b:	75 0c                	jne    c001d669 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001d65d:	57                   	push   edi
c001d65e:	56                   	push   esi
c001d65f:	53                   	push   ebx
c001d660:	51                   	push   ecx
c001d661:	e8 a6 ff ff ff       	call   c001d60c <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001d666:	83 c4 10             	add    esp,0x10
c001d669:	83 e0 01             	and    eax,0x1
c001d66c:	5b                   	pop    ebx
c001d66d:	88 c1                	mov    cl,al
c001d66f:	83 e2 01             	and    edx,0x1
c001d672:	a0 81 c0 02 c0       	mov    al,ds:0xc002c081
c001d677:	c1 e2 06             	shl    edx,0x6
c001d67a:	83 e0 ba             	and    eax,0xffffffba
c001d67d:	5e                   	pop    esi
c001d67e:	09 c8                	or     eax,ecx
c001d680:	5f                   	pop    edi
c001d681:	09 d0                	or     eax,edx
c001d683:	a2 81 c0 02 c0       	mov    ds:0xc002c081,al
c001d688:	c3                   	ret    

c001d689 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001d689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d68d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d691:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d695:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001d699:	c3                   	ret    

c001d69a <Vm::fpuAbs(unsigned long long)>:
c001d69a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d69e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d6a2:	c3                   	ret    

c001d6a3 <Vm::fpuChs(unsigned long long)>:
c001d6a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d6a7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d6ab:	f7 d8                	neg    eax
c001d6ad:	83 d2 00             	adc    edx,0x0
c001d6b0:	f7 da                	neg    edx
c001d6b2:	c3                   	ret    

c001d6b3 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001d6b3:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001d6b7:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001d6bc:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001d6c0:	eb c7                	jmp    c001d689 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001d6c2 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001d6c2:	53                   	push   ebx
c001d6c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d6c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d6cb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d6cf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d6d3:	0f af ca             	imul   ecx,edx
c001d6d6:	0f af d8             	imul   ebx,eax
c001d6d9:	f7 e2                	mul    edx
c001d6db:	01 d9                	add    ecx,ebx
c001d6dd:	5b                   	pop    ebx
c001d6de:	01 ca                	add    edx,ecx
c001d6e0:	c3                   	ret    

c001d6e1 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001d6e1:	83 ec 0c             	sub    esp,0xc
c001d6e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6f4:	e8 b3 63 00 00       	call   c0023aac <__udivdi3>
c001d6f9:	83 c4 1c             	add    esp,0x1c
c001d6fc:	c3                   	ret    

c001d6fd <Vm::fpuSquare(unsigned long long)>:
c001d6fd:	50                   	push   eax
c001d6fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d702:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d706:	52                   	push   edx
c001d707:	50                   	push   eax
c001d708:	52                   	push   edx
c001d709:	50                   	push   eax
c001d70a:	e8 b3 ff ff ff       	call   c001d6c2 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d70f:	83 c4 14             	add    esp,0x14
c001d712:	c3                   	ret    

c001d713 <Vm::fpuGetReg(int)>:
c001d713:	83 ec 0c             	sub    esp,0xc
c001d716:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001d71b:	76 10                	jbe    c001d72d <Vm::fpuGetReg(int)+0x1a>
c001d71d:	83 ec 0c             	sub    esp,0xc
c001d720:	68 72 91 02 c0       	push   0xc0029172
c001d725:	e8 cf b6 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c001d72a:	83 c4 10             	add    esp,0x10
c001d72d:	a0 81 c0 02 c0       	mov    al,ds:0xc002c081
c001d732:	b9 08 00 00 00       	mov    ecx,0x8
c001d737:	c0 e8 03             	shr    al,0x3
c001d73a:	83 e0 07             	and    eax,0x7
c001d73d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d741:	99                   	cdq    
c001d742:	f7 f9                	idiv   ecx
c001d744:	8b 04 d5 84 c0 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd3f7c]
c001d74b:	8b 14 d5 88 c0 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd3f78]
c001d752:	83 c4 0c             	add    esp,0xc
c001d755:	c3                   	ret    

c001d756 <Vm::fpuSetReg(int, unsigned long long)>:
c001d756:	57                   	push   edi
c001d757:	56                   	push   esi
c001d758:	52                   	push   edx
c001d759:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d75d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001d761:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001d766:	76 10                	jbe    c001d778 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001d768:	83 ec 0c             	sub    esp,0xc
c001d76b:	68 85 91 02 c0       	push   0xc0029185
c001d770:	e8 84 b6 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c001d775:	83 c4 10             	add    esp,0x10
c001d778:	a0 81 c0 02 c0       	mov    al,ds:0xc002c081
c001d77d:	b9 08 00 00 00       	mov    ecx,0x8
c001d782:	c0 e8 03             	shr    al,0x3
c001d785:	83 e0 07             	and    eax,0x7
c001d788:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d78c:	99                   	cdq    
c001d78d:	f7 f9                	idiv   ecx
c001d78f:	89 34 d5 84 c0 02 c0 	mov    DWORD PTR [edx*8-0x3ffd3f7c],esi
c001d796:	89 3c d5 88 c0 02 c0 	mov    DWORD PTR [edx*8-0x3ffd3f78],edi
c001d79d:	58                   	pop    eax
c001d79e:	5e                   	pop    esi
c001d79f:	5f                   	pop    edi
c001d7a0:	c3                   	ret    

c001d7a1 <Vm::fpuPush(unsigned long long)>:
c001d7a1:	a0 81 c0 02 c0       	mov    al,ds:0xc002c081
c001d7a6:	c0 e8 03             	shr    al,0x3
c001d7a9:	83 e0 07             	and    eax,0x7
c001d7ac:	83 c0 07             	add    eax,0x7
c001d7af:	88 c2                	mov    dl,al
c001d7b1:	83 e0 07             	and    eax,0x7
c001d7b4:	83 e2 07             	and    edx,0x7
c001d7b7:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001d7be:	8a 15 81 c0 02 c0    	mov    dl,BYTE PTR ds:0xc002c081
c001d7c4:	83 e2 c7             	and    edx,0xffffffc7
c001d7c7:	09 ca                	or     edx,ecx
c001d7c9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d7cd:	88 15 81 c0 02 c0    	mov    BYTE PTR ds:0xc002c081,dl
c001d7d3:	89 0c c5 88 c0 02 c0 	mov    DWORD PTR [eax*8-0x3ffd3f78],ecx
c001d7da:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d7de:	89 14 c5 84 c0 02 c0 	mov    DWORD PTR [eax*8-0x3ffd3f7c],edx
c001d7e5:	a1 c4 c0 02 c0       	mov    eax,ds:0xc002c0c4
c001d7ea:	83 f8 08             	cmp    eax,0x8
c001d7ed:	75 08                	jne    c001d7f7 <Vm::fpuPush(unsigned long long)+0x56>
c001d7ef:	80 0d 80 c0 02 c0 40 	or     BYTE PTR ds:0xc002c080,0x40
c001d7f6:	c3                   	ret    
c001d7f7:	40                   	inc    eax
c001d7f8:	a3 c4 c0 02 c0       	mov    ds:0xc002c0c4,eax
c001d7fd:	c3                   	ret    

c001d7fe <Vm::fpuPop()>:
c001d7fe:	8a 0d 81 c0 02 c0    	mov    cl,BYTE PTR ds:0xc002c081
c001d804:	53                   	push   ebx
c001d805:	c0 e9 03             	shr    cl,0x3
c001d808:	8a 1d 81 c0 02 c0    	mov    bl,BYTE PTR ds:0xc002c081
c001d80e:	83 e1 07             	and    ecx,0x7
c001d811:	83 e3 c7             	and    ebx,0xffffffc7
c001d814:	8b 04 cd 84 c0 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd3f7c]
c001d81b:	8b 14 cd 88 c0 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd3f78]
c001d822:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001d829:	83 e1 38             	and    ecx,0x38
c001d82c:	09 d9                	or     ecx,ebx
c001d82e:	88 0d 81 c0 02 c0    	mov    BYTE PTR ds:0xc002c081,cl
c001d834:	8b 0d c4 c0 02 c0    	mov    ecx,DWORD PTR ds:0xc002c0c4
c001d83a:	85 c9                	test   ecx,ecx
c001d83c:	74 09                	je     c001d847 <Vm::fpuPop()+0x49>
c001d83e:	49                   	dec    ecx
c001d83f:	89 0d c4 c0 02 c0    	mov    DWORD PTR ds:0xc002c0c4,ecx
c001d845:	eb 07                	jmp    c001d84e <Vm::fpuPop()+0x50>
c001d847:	80 0d 80 c0 02 c0 40 	or     BYTE PTR ds:0xc002c080,0x40
c001d84e:	5b                   	pop    ebx
c001d84f:	c3                   	ret    

c001d850 <Vm::x87Handler(regs*)>:
c001d850:	55                   	push   ebp
c001d851:	57                   	push   edi
c001d852:	56                   	push   esi
c001d853:	53                   	push   ebx
c001d854:	83 ec 1c             	sub    esp,0x1c
c001d857:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d85b:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001d860:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001d863:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001d86b:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001d86f:	50                   	push   eax
c001d870:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001d874:	50                   	push   eax
c001d875:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d879:	50                   	push   eax
c001d87a:	53                   	push   ebx
c001d87b:	e8 7e b3 ff ff       	call   c0018bfe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001d880:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001d883:	83 c4 10             	add    esp,0x10
c001d886:	89 c6                	mov    esi,eax
c001d888:	80 fa d9             	cmp    dl,0xd9
c001d88b:	0f 85 52 01 00 00    	jne    c001d9e3 <Vm::x87Handler(regs*)+0x193>
c001d891:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d895:	8d 50 20             	lea    edx,[eax+0x20]
c001d898:	80 fa 0e             	cmp    dl,0xe
c001d89b:	0f 87 86 00 00 00    	ja     c001d927 <Vm::x87Handler(regs*)+0xd7>
c001d8a1:	0f b6 d2             	movzx  edx,dl
c001d8a4:	ff 24 95 98 91 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6e68]
c001d8ab:	e8 e7 fc ff ff       	call   c001d597 <Vm::fpuGet0()>
c001d8b0:	eb 05                	jmp    c001d8b7 <Vm::x87Handler(regs*)+0x67>
c001d8b2:	e8 e5 fc ff ff       	call   c001d59c <Vm::fpuGet1()>
c001d8b7:	57                   	push   edi
c001d8b8:	57                   	push   edi
c001d8b9:	52                   	push   edx
c001d8ba:	50                   	push   eax
c001d8bb:	e8 e1 fe ff ff       	call   c001d7a1 <Vm::fpuPush(unsigned long long)>
c001d8c0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d8c4:	83 c4 10             	add    esp,0x10
c001d8c7:	b0 01                	mov    al,0x1
c001d8c9:	e9 e3 09 00 00       	jmp    c001e2b1 <Vm::x87Handler(regs*)+0xa61>
c001d8ce:	83 ec 0c             	sub    esp,0xc
c001d8d1:	6a 00                	push   0x0
c001d8d3:	e8 3b fe ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001d8d8:	59                   	pop    ecx
c001d8d9:	5e                   	pop    esi
c001d8da:	52                   	push   edx
c001d8db:	50                   	push   eax
c001d8dc:	e8 c2 fd ff ff       	call   c001d6a3 <Vm::fpuChs(unsigned long long)>
c001d8e1:	eb 13                	jmp    c001d8f6 <Vm::x87Handler(regs*)+0xa6>
c001d8e3:	83 ec 0c             	sub    esp,0xc
c001d8e6:	6a 00                	push   0x0
c001d8e8:	e8 26 fe ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001d8ed:	5f                   	pop    edi
c001d8ee:	5d                   	pop    ebp
c001d8ef:	52                   	push   edx
c001d8f0:	50                   	push   eax
c001d8f1:	e8 a4 fd ff ff       	call   c001d69a <Vm::fpuAbs(unsigned long long)>
c001d8f6:	83 c4 0c             	add    esp,0xc
c001d8f9:	52                   	push   edx
c001d8fa:	50                   	push   eax
c001d8fb:	6a 00                	push   0x0
c001d8fd:	e8 54 fe ff ff       	call   c001d756 <Vm::fpuSetReg(int, unsigned long long)>
c001d902:	eb bc                	jmp    c001d8c0 <Vm::x87Handler(regs*)+0x70>
c001d904:	e8 d3 fc ff ff       	call   c001d5dc <Vm::fpuGetLog210()>
c001d909:	eb ac                	jmp    c001d8b7 <Vm::x87Handler(regs*)+0x67>
c001d90b:	e8 9c fc ff ff       	call   c001d5ac <Vm::fpuGetLog2E()>
c001d910:	eb a5                	jmp    c001d8b7 <Vm::x87Handler(regs*)+0x67>
c001d912:	e8 8d fc ff ff       	call   c001d5a4 <Vm::fpuGetPi()>
c001d917:	eb 9e                	jmp    c001d8b7 <Vm::x87Handler(regs*)+0x67>
c001d919:	e8 d6 fc ff ff       	call   c001d5f4 <Vm::fpuGetLog102()>
c001d91e:	eb 97                	jmp    c001d8b7 <Vm::x87Handler(regs*)+0x67>
c001d920:	e8 9f fc ff ff       	call   c001d5c4 <Vm::fpuGetLogE2()>
c001d925:	eb 90                	jmp    c001d8b7 <Vm::x87Handler(regs*)+0x67>
c001d927:	8d 50 40             	lea    edx,[eax+0x40]
c001d92a:	80 fa 07             	cmp    dl,0x7
c001d92d:	77 15                	ja     c001d944 <Vm::x87Handler(regs*)+0xf4>
c001d92f:	83 ec 0c             	sub    esp,0xc
c001d932:	2d c0 00 00 00       	sub    eax,0xc0
c001d937:	50                   	push   eax
c001d938:	e8 d6 fd ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001d93d:	59                   	pop    ecx
c001d93e:	5e                   	pop    esi
c001d93f:	e9 75 ff ff ff       	jmp    c001d8b9 <Vm::x87Handler(regs*)+0x69>
c001d944:	8d 50 38             	lea    edx,[eax+0x38]
c001d947:	80 fa 07             	cmp    dl,0x7
c001d94a:	77 3c                	ja     c001d988 <Vm::x87Handler(regs*)+0x138>
c001d94c:	83 ec 0c             	sub    esp,0xc
c001d94f:	2d c8 00 00 00       	sub    eax,0xc8
c001d954:	50                   	push   eax
c001d955:	e8 b9 fd ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001d95a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d961:	89 c6                	mov    esi,eax
c001d963:	89 d7                	mov    edi,edx
c001d965:	e8 a9 fd ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001d96a:	83 c4 0c             	add    esp,0xc
c001d96d:	52                   	push   edx
c001d96e:	50                   	push   eax
c001d96f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d973:	2d c8 00 00 00       	sub    eax,0xc8
c001d978:	50                   	push   eax
c001d979:	e8 d8 fd ff ff       	call   c001d756 <Vm::fpuSetReg(int, unsigned long long)>
c001d97e:	83 c4 0c             	add    esp,0xc
c001d981:	57                   	push   edi
c001d982:	56                   	push   esi
c001d983:	e9 73 ff ff ff       	jmp    c001d8fb <Vm::x87Handler(regs*)+0xab>
c001d988:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d98c:	84 d2                	test   dl,dl
c001d98e:	75 0f                	jne    c001d99f <Vm::x87Handler(regs*)+0x14f>
c001d990:	83 ec 0c             	sub    esp,0xc
c001d993:	ff 36                	push   DWORD PTR [esi]
c001d995:	e8 c8 fa ff ff       	call   c001d462 <Vm::fpu32ToInternal(unsigned int)>
c001d99a:	e9 bf 00 00 00       	jmp    c001da5e <Vm::x87Handler(regs*)+0x20e>
c001d99f:	80 fa 03             	cmp    dl,0x3
c001d9a2:	75 13                	jne    c001d9b7 <Vm::x87Handler(regs*)+0x167>
c001d9a4:	e8 55 fe ff ff       	call   c001d7fe <Vm::fpuPop()>
c001d9a9:	55                   	push   ebp
c001d9aa:	55                   	push   ebp
c001d9ab:	52                   	push   edx
c001d9ac:	50                   	push   eax
c001d9ad:	e8 4c fa ff ff       	call   c001d3fe <Vm::fpuInternalTo32(unsigned long long)>
c001d9b2:	e9 88 00 00 00       	jmp    c001da3f <Vm::x87Handler(regs*)+0x1ef>
c001d9b7:	80 fa 05             	cmp    dl,0x5
c001d9ba:	75 0e                	jne    c001d9ca <Vm::x87Handler(regs*)+0x17a>
c001d9bc:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d9bf:	66 a3 82 c0 02 c0    	mov    ds:0xc002c082,ax
c001d9c5:	e9 df 00 00 00       	jmp    c001daa9 <Vm::x87Handler(regs*)+0x259>
c001d9ca:	31 c0                	xor    eax,eax
c001d9cc:	80 fa 07             	cmp    dl,0x7
c001d9cf:	0f 85 dc 08 00 00    	jne    c001e2b1 <Vm::x87Handler(regs*)+0xa61>
c001d9d5:	66 a1 82 c0 02 c0    	mov    ax,ds:0xc002c082
c001d9db:	66 89 06             	mov    WORD PTR [esi],ax
c001d9de:	e9 c6 00 00 00       	jmp    c001daa9 <Vm::x87Handler(regs*)+0x259>
c001d9e3:	80 fa d8             	cmp    dl,0xd8
c001d9e6:	0f 84 c9 00 00 00    	je     c001dab5 <Vm::x87Handler(regs*)+0x265>
c001d9ec:	80 fa dc             	cmp    dl,0xdc
c001d9ef:	0f 84 0d 02 00 00    	je     c001dc02 <Vm::x87Handler(regs*)+0x3b2>
c001d9f5:	80 fa de             	cmp    dl,0xde
c001d9f8:	0f 84 cd 02 00 00    	je     c001dccb <Vm::x87Handler(regs*)+0x47b>
c001d9fe:	80 fa dd             	cmp    dl,0xdd
c001da01:	0f 84 5f 04 00 00    	je     c001de66 <Vm::x87Handler(regs*)+0x616>
c001da07:	80 fa da             	cmp    dl,0xda
c001da0a:	0f 84 24 05 00 00    	je     c001df34 <Vm::x87Handler(regs*)+0x6e4>
c001da10:	80 fa df             	cmp    dl,0xdf
c001da13:	0f 84 68 05 00 00    	je     c001df81 <Vm::x87Handler(regs*)+0x731>
c001da19:	31 c0                	xor    eax,eax
c001da1b:	80 fa db             	cmp    dl,0xdb
c001da1e:	0f 85 8d 08 00 00    	jne    c001e2b1 <Vm::x87Handler(regs*)+0xa61>
c001da24:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001da28:	80 fa 03             	cmp    dl,0x3
c001da2b:	0f 85 70 06 00 00    	jne    c001e0a1 <Vm::x87Handler(regs*)+0x851>
c001da31:	e8 c8 fd ff ff       	call   c001d7fe <Vm::fpuPop()>
c001da36:	55                   	push   ebp
c001da37:	55                   	push   ebp
c001da38:	52                   	push   edx
c001da39:	50                   	push   eax
c001da3a:	e8 71 fa ff ff       	call   c001d4b0 <Vm::fpuFloatToLong(unsigned long long)>
c001da3f:	83 c4 10             	add    esp,0x10
c001da42:	89 06                	mov    DWORD PTR [esi],eax
c001da44:	eb 63                	jmp    c001daa9 <Vm::x87Handler(regs*)+0x259>
c001da46:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001da4a:	84 d2                	test   dl,dl
c001da4c:	0f 85 e6 05 00 00    	jne    c001e038 <Vm::x87Handler(regs*)+0x7e8>
c001da52:	57                   	push   edi
c001da53:	57                   	push   edi
c001da54:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001da57:	ff 36                	push   DWORD PTR [esi]
c001da59:	e8 49 fa ff ff       	call   c001d4a7 <Vm::fpu64ToInternal(unsigned long long)>
c001da5e:	5e                   	pop    esi
c001da5f:	5f                   	pop    edi
c001da60:	52                   	push   edx
c001da61:	50                   	push   eax
c001da62:	e8 3a fd ff ff       	call   c001d7a1 <Vm::fpuPush(unsigned long long)>
c001da67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001da6b:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001da6e:	e9 51 fe ff ff       	jmp    c001d8c4 <Vm::x87Handler(regs*)+0x74>
c001da73:	80 fa 03             	cmp    dl,0x3
c001da76:	0f 85 d7 06 00 00    	jne    c001e153 <Vm::x87Handler(regs*)+0x903>
c001da7c:	57                   	push   edi
c001da7d:	57                   	push   edi
c001da7e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001da81:	ff 36                	push   DWORD PTR [esi]
c001da83:	e8 1f fa ff ff       	call   c001d4a7 <Vm::fpu64ToInternal(unsigned long long)>
c001da88:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001da8f:	89 c6                	mov    esi,eax
c001da91:	89 d7                	mov    edi,edx
c001da93:	e8 7b fc ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001da98:	57                   	push   edi
c001da99:	56                   	push   esi
c001da9a:	52                   	push   edx
c001da9b:	50                   	push   eax
c001da9c:	e8 95 fb ff ff       	call   c001d636 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001daa1:	83 c4 20             	add    esp,0x20
c001daa4:	e8 55 fd ff ff       	call   c001d7fe <Vm::fpuPop()>
c001daa9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001daad:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001dab0:	e9 12 fe ff ff       	jmp    c001d8c7 <Vm::x87Handler(regs*)+0x77>
c001dab5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dab9:	8d 50 40             	lea    edx,[eax+0x40]
c001dabc:	80 fa 07             	cmp    dl,0x7
c001dabf:	77 29                	ja     c001daea <Vm::x87Handler(regs*)+0x29a>
c001dac1:	83 ec 0c             	sub    esp,0xc
c001dac4:	2d c0 00 00 00       	sub    eax,0xc0
c001dac9:	50                   	push   eax
c001daca:	e8 44 fc ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001dacf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dad6:	89 c6                	mov    esi,eax
c001dad8:	89 d7                	mov    edi,edx
c001dada:	e8 34 fc ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001dadf:	57                   	push   edi
c001dae0:	56                   	push   esi
c001dae1:	52                   	push   edx
c001dae2:	50                   	push   eax
c001dae3:	e8 a1 fb ff ff       	call   c001d689 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001dae8:	eb 2f                	jmp    c001db19 <Vm::x87Handler(regs*)+0x2c9>
c001daea:	8d 50 38             	lea    edx,[eax+0x38]
c001daed:	80 fa 07             	cmp    dl,0x7
c001daf0:	77 2f                	ja     c001db21 <Vm::x87Handler(regs*)+0x2d1>
c001daf2:	83 ec 0c             	sub    esp,0xc
c001daf5:	2d c8 00 00 00       	sub    eax,0xc8
c001dafa:	50                   	push   eax
c001dafb:	e8 13 fc ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001db00:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001db07:	89 c6                	mov    esi,eax
c001db09:	89 d7                	mov    edi,edx
c001db0b:	e8 03 fc ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001db10:	57                   	push   edi
c001db11:	56                   	push   esi
c001db12:	52                   	push   edx
c001db13:	50                   	push   eax
c001db14:	e8 a9 fb ff ff       	call   c001d6c2 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001db19:	83 c4 1c             	add    esp,0x1c
c001db1c:	e9 d8 fd ff ff       	jmp    c001d8f9 <Vm::x87Handler(regs*)+0xa9>
c001db21:	8d 50 30             	lea    edx,[eax+0x30]
c001db24:	80 fa 07             	cmp    dl,0x7
c001db27:	77 0d                	ja     c001db36 <Vm::x87Handler(regs*)+0x2e6>
c001db29:	83 ec 0c             	sub    esp,0xc
c001db2c:	2d d0 00 00 00       	sub    eax,0xd0
c001db31:	e9 99 03 00 00       	jmp    c001decf <Vm::x87Handler(regs*)+0x67f>
c001db36:	8d 50 28             	lea    edx,[eax+0x28]
c001db39:	80 fa 07             	cmp    dl,0x7
c001db3c:	77 0d                	ja     c001db4b <Vm::x87Handler(regs*)+0x2fb>
c001db3e:	83 ec 0c             	sub    esp,0xc
c001db41:	2d d8 00 00 00       	sub    eax,0xd8
c001db46:	e9 c0 03 00 00       	jmp    c001df0b <Vm::x87Handler(regs*)+0x6bb>
c001db4b:	8d 50 20             	lea    edx,[eax+0x20]
c001db4e:	80 fa 07             	cmp    dl,0x7
c001db51:	77 1b                	ja     c001db6e <Vm::x87Handler(regs*)+0x31e>
c001db53:	83 ec 0c             	sub    esp,0xc
c001db56:	2d e0 00 00 00       	sub    eax,0xe0
c001db5b:	50                   	push   eax
c001db5c:	e8 b2 fb ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001db61:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001db68:	89 c6                	mov    esi,eax
c001db6a:	89 d7                	mov    edi,edx
c001db6c:	eb 22                	jmp    c001db90 <Vm::x87Handler(regs*)+0x340>
c001db6e:	8d 50 18             	lea    edx,[eax+0x18]
c001db71:	80 fa 07             	cmp    dl,0x7
c001db74:	77 2d                	ja     c001dba3 <Vm::x87Handler(regs*)+0x353>
c001db76:	83 ec 0c             	sub    esp,0xc
c001db79:	6a 00                	push   0x0
c001db7b:	e8 93 fb ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001db80:	89 c6                	mov    esi,eax
c001db82:	89 d7                	mov    edi,edx
c001db84:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001db88:	2d e8 00 00 00       	sub    eax,0xe8
c001db8d:	89 04 24             	mov    DWORD PTR [esp],eax
c001db90:	e8 7e fb ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001db95:	57                   	push   edi
c001db96:	56                   	push   esi
c001db97:	52                   	push   edx
c001db98:	50                   	push   eax
c001db99:	e8 15 fb ff ff       	call   c001d6b3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001db9e:	e9 76 ff ff ff       	jmp    c001db19 <Vm::x87Handler(regs*)+0x2c9>
c001dba3:	8d 50 10             	lea    edx,[eax+0x10]
c001dba6:	80 fa 07             	cmp    dl,0x7
c001dba9:	77 1b                	ja     c001dbc6 <Vm::x87Handler(regs*)+0x376>
c001dbab:	83 ec 0c             	sub    esp,0xc
c001dbae:	2d f0 00 00 00       	sub    eax,0xf0
c001dbb3:	50                   	push   eax
c001dbb4:	e8 5a fb ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001dbb9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dbc0:	89 c6                	mov    esi,eax
c001dbc2:	89 d7                	mov    edi,edx
c001dbc4:	eb 22                	jmp    c001dbe8 <Vm::x87Handler(regs*)+0x398>
c001dbc6:	3c f7                	cmp    al,0xf7
c001dbc8:	0f 86 d1 03 00 00    	jbe    c001df9f <Vm::x87Handler(regs*)+0x74f>
c001dbce:	83 ec 0c             	sub    esp,0xc
c001dbd1:	6a 00                	push   0x0
c001dbd3:	e8 3b fb ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001dbd8:	89 c6                	mov    esi,eax
c001dbda:	89 d7                	mov    edi,edx
c001dbdc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dbe0:	2d f8 00 00 00       	sub    eax,0xf8
c001dbe5:	89 04 24             	mov    DWORD PTR [esp],eax
c001dbe8:	e8 26 fb ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001dbed:	57                   	push   edi
c001dbee:	56                   	push   esi
c001dbef:	52                   	push   edx
c001dbf0:	50                   	push   eax
c001dbf1:	e8 eb fa ff ff       	call   c001d6e1 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001dbf6:	83 c4 1c             	add    esp,0x1c
c001dbf9:	52                   	push   edx
c001dbfa:	50                   	push   eax
c001dbfb:	6a 00                	push   0x0
c001dbfd:	e9 51 02 00 00       	jmp    c001de53 <Vm::x87Handler(regs*)+0x603>
c001dc02:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dc06:	8d 50 40             	lea    edx,[eax+0x40]
c001dc09:	80 fa 07             	cmp    dl,0x7
c001dc0c:	77 37                	ja     c001dc45 <Vm::x87Handler(regs*)+0x3f5>
c001dc0e:	83 ec 0c             	sub    esp,0xc
c001dc11:	2d c0 00 00 00       	sub    eax,0xc0
c001dc16:	50                   	push   eax
c001dc17:	e8 f7 fa ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001dc1c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dc23:	89 c6                	mov    esi,eax
c001dc25:	89 d7                	mov    edi,edx
c001dc27:	e8 e7 fa ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001dc2c:	57                   	push   edi
c001dc2d:	56                   	push   esi
c001dc2e:	52                   	push   edx
c001dc2f:	50                   	push   eax
c001dc30:	e8 54 fa ff ff       	call   c001d689 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001dc35:	83 c4 1c             	add    esp,0x1c
c001dc38:	52                   	push   edx
c001dc39:	50                   	push   eax
c001dc3a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dc3e:	2d c0 00 00 00       	sub    eax,0xc0
c001dc43:	eb 3d                	jmp    c001dc82 <Vm::x87Handler(regs*)+0x432>
c001dc45:	8d 50 38             	lea    edx,[eax+0x38]
c001dc48:	80 fa 07             	cmp    dl,0x7
c001dc4b:	77 3b                	ja     c001dc88 <Vm::x87Handler(regs*)+0x438>
c001dc4d:	83 ec 0c             	sub    esp,0xc
c001dc50:	2d c8 00 00 00       	sub    eax,0xc8
c001dc55:	50                   	push   eax
c001dc56:	e8 b8 fa ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001dc5b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dc62:	89 c6                	mov    esi,eax
c001dc64:	89 d7                	mov    edi,edx
c001dc66:	e8 a8 fa ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001dc6b:	57                   	push   edi
c001dc6c:	56                   	push   esi
c001dc6d:	52                   	push   edx
c001dc6e:	50                   	push   eax
c001dc6f:	e8 4e fa ff ff       	call   c001d6c2 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001dc74:	83 c4 1c             	add    esp,0x1c
c001dc77:	52                   	push   edx
c001dc78:	50                   	push   eax
c001dc79:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dc7d:	2d c8 00 00 00       	sub    eax,0xc8
c001dc82:	50                   	push   eax
c001dc83:	e9 75 fc ff ff       	jmp    c001d8fd <Vm::x87Handler(regs*)+0xad>
c001dc88:	83 c0 18             	add    eax,0x18
c001dc8b:	3c 07                	cmp    al,0x7
c001dc8d:	0f 87 3b 04 00 00    	ja     c001e0ce <Vm::x87Handler(regs*)+0x87e>
c001dc93:	83 ec 0c             	sub    esp,0xc
c001dc96:	6a 00                	push   0x0
c001dc98:	e8 76 fa ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001dc9d:	89 c6                	mov    esi,eax
c001dc9f:	89 d7                	mov    edi,edx
c001dca1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dca5:	2d e8 00 00 00       	sub    eax,0xe8
c001dcaa:	89 04 24             	mov    DWORD PTR [esp],eax
c001dcad:	e8 61 fa ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001dcb2:	57                   	push   edi
c001dcb3:	56                   	push   esi
c001dcb4:	52                   	push   edx
c001dcb5:	50                   	push   eax
c001dcb6:	e8 f8 f9 ff ff       	call   c001d6b3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001dcbb:	83 c4 1c             	add    esp,0x1c
c001dcbe:	52                   	push   edx
c001dcbf:	50                   	push   eax
c001dcc0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dcc4:	2d e8 00 00 00       	sub    eax,0xe8
c001dcc9:	eb b7                	jmp    c001dc82 <Vm::x87Handler(regs*)+0x432>
c001dccb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dccf:	8d 50 40             	lea    edx,[eax+0x40]
c001dcd2:	80 fa 07             	cmp    dl,0x7
c001dcd5:	77 3a                	ja     c001dd11 <Vm::x87Handler(regs*)+0x4c1>
c001dcd7:	83 ec 0c             	sub    esp,0xc
c001dcda:	2d c0 00 00 00       	sub    eax,0xc0
c001dcdf:	50                   	push   eax
c001dce0:	e8 2e fa ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001dce5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dcec:	89 c6                	mov    esi,eax
c001dcee:	89 d7                	mov    edi,edx
c001dcf0:	e8 1e fa ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001dcf5:	57                   	push   edi
c001dcf6:	56                   	push   esi
c001dcf7:	52                   	push   edx
c001dcf8:	50                   	push   eax
c001dcf9:	e8 8b f9 ff ff       	call   c001d689 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001dcfe:	83 c4 1c             	add    esp,0x1c
c001dd01:	52                   	push   edx
c001dd02:	50                   	push   eax
c001dd03:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dd07:	2d c0 00 00 00       	sub    eax,0xc0
c001dd0c:	e9 9e 01 00 00       	jmp    c001deaf <Vm::x87Handler(regs*)+0x65f>
c001dd11:	8d 50 20             	lea    edx,[eax+0x20]
c001dd14:	80 fa 07             	cmp    dl,0x7
c001dd17:	77 3a                	ja     c001dd53 <Vm::x87Handler(regs*)+0x503>
c001dd19:	83 ec 0c             	sub    esp,0xc
c001dd1c:	2d e0 00 00 00       	sub    eax,0xe0
c001dd21:	50                   	push   eax
c001dd22:	e8 ec f9 ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001dd27:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dd2e:	89 c6                	mov    esi,eax
c001dd30:	89 d7                	mov    edi,edx
c001dd32:	e8 dc f9 ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001dd37:	57                   	push   edi
c001dd38:	56                   	push   esi
c001dd39:	52                   	push   edx
c001dd3a:	50                   	push   eax
c001dd3b:	e8 73 f9 ff ff       	call   c001d6b3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001dd40:	83 c4 1c             	add    esp,0x1c
c001dd43:	52                   	push   edx
c001dd44:	50                   	push   eax
c001dd45:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dd49:	2d e0 00 00 00       	sub    eax,0xe0
c001dd4e:	e9 5c 01 00 00       	jmp    c001deaf <Vm::x87Handler(regs*)+0x65f>
c001dd53:	8d 50 18             	lea    edx,[eax+0x18]
c001dd56:	80 fa 07             	cmp    dl,0x7
c001dd59:	77 3b                	ja     c001dd96 <Vm::x87Handler(regs*)+0x546>
c001dd5b:	83 ec 0c             	sub    esp,0xc
c001dd5e:	6a 00                	push   0x0
c001dd60:	e8 ae f9 ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001dd65:	89 c6                	mov    esi,eax
c001dd67:	89 d7                	mov    edi,edx
c001dd69:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dd6d:	2d e8 00 00 00       	sub    eax,0xe8
c001dd72:	89 04 24             	mov    DWORD PTR [esp],eax
c001dd75:	e8 99 f9 ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001dd7a:	57                   	push   edi
c001dd7b:	56                   	push   esi
c001dd7c:	52                   	push   edx
c001dd7d:	50                   	push   eax
c001dd7e:	e8 30 f9 ff ff       	call   c001d6b3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001dd83:	83 c4 1c             	add    esp,0x1c
c001dd86:	52                   	push   edx
c001dd87:	50                   	push   eax
c001dd88:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dd8c:	2d e8 00 00 00       	sub    eax,0xe8
c001dd91:	e9 19 01 00 00       	jmp    c001deaf <Vm::x87Handler(regs*)+0x65f>
c001dd96:	8d 50 38             	lea    edx,[eax+0x38]
c001dd99:	80 fa 07             	cmp    dl,0x7
c001dd9c:	77 37                	ja     c001ddd5 <Vm::x87Handler(regs*)+0x585>
c001dd9e:	83 ec 0c             	sub    esp,0xc
c001dda1:	2d c8 00 00 00       	sub    eax,0xc8
c001dda6:	50                   	push   eax
c001dda7:	e8 67 f9 ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001ddac:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ddb3:	89 c6                	mov    esi,eax
c001ddb5:	89 d7                	mov    edi,edx
c001ddb7:	e8 57 f9 ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001ddbc:	57                   	push   edi
c001ddbd:	56                   	push   esi
c001ddbe:	52                   	push   edx
c001ddbf:	50                   	push   eax
c001ddc0:	e8 fd f8 ff ff       	call   c001d6c2 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ddc5:	83 c4 1c             	add    esp,0x1c
c001ddc8:	52                   	push   edx
c001ddc9:	50                   	push   eax
c001ddca:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ddce:	2d c8 00 00 00       	sub    eax,0xc8
c001ddd3:	eb 7d                	jmp    c001de52 <Vm::x87Handler(regs*)+0x602>
c001ddd5:	3c f7                	cmp    al,0xf7
c001ddd7:	76 38                	jbe    c001de11 <Vm::x87Handler(regs*)+0x5c1>
c001ddd9:	83 ec 0c             	sub    esp,0xc
c001dddc:	6a 00                	push   0x0
c001ddde:	e8 30 f9 ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001dde3:	89 c6                	mov    esi,eax
c001dde5:	89 d7                	mov    edi,edx
c001dde7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ddeb:	2d f8 00 00 00       	sub    eax,0xf8
c001ddf0:	89 04 24             	mov    DWORD PTR [esp],eax
c001ddf3:	e8 1b f9 ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001ddf8:	57                   	push   edi
c001ddf9:	56                   	push   esi
c001ddfa:	52                   	push   edx
c001ddfb:	50                   	push   eax
c001ddfc:	e8 e0 f8 ff ff       	call   c001d6e1 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001de01:	83 c4 1c             	add    esp,0x1c
c001de04:	52                   	push   edx
c001de05:	50                   	push   eax
c001de06:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001de0a:	2d f8 00 00 00       	sub    eax,0xf8
c001de0f:	eb 41                	jmp    c001de52 <Vm::x87Handler(regs*)+0x602>
c001de11:	8d 50 10             	lea    edx,[eax+0x10]
c001de14:	80 fa 07             	cmp    dl,0x7
c001de17:	0f 87 5a 01 00 00    	ja     c001df77 <Vm::x87Handler(regs*)+0x727>
c001de1d:	83 ec 0c             	sub    esp,0xc
c001de20:	2d f0 00 00 00       	sub    eax,0xf0
c001de25:	50                   	push   eax
c001de26:	e8 e8 f8 ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001de2b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001de32:	89 c6                	mov    esi,eax
c001de34:	89 d7                	mov    edi,edx
c001de36:	e8 d8 f8 ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001de3b:	57                   	push   edi
c001de3c:	56                   	push   esi
c001de3d:	52                   	push   edx
c001de3e:	50                   	push   eax
c001de3f:	e8 9d f8 ff ff       	call   c001d6e1 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001de44:	83 c4 1c             	add    esp,0x1c
c001de47:	52                   	push   edx
c001de48:	50                   	push   eax
c001de49:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001de4d:	2d f0 00 00 00       	sub    eax,0xf0
c001de52:	50                   	push   eax
c001de53:	e8 fe f8 ff ff       	call   c001d756 <Vm::fpuSetReg(int, unsigned long long)>
c001de58:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001de5c:	e8 9d f9 ff ff       	call   c001d7fe <Vm::fpuPop()>
c001de61:	e9 5e fa ff ff       	jmp    c001d8c4 <Vm::x87Handler(regs*)+0x74>
c001de66:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001de6a:	8d 50 30             	lea    edx,[eax+0x30]
c001de6d:	80 fa 07             	cmp    dl,0x7
c001de70:	77 1d                	ja     c001de8f <Vm::x87Handler(regs*)+0x63f>
c001de72:	83 ec 0c             	sub    esp,0xc
c001de75:	6a 00                	push   0x0
c001de77:	e8 97 f8 ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001de7c:	83 c4 0c             	add    esp,0xc
c001de7f:	52                   	push   edx
c001de80:	50                   	push   eax
c001de81:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001de85:	2d d0 00 00 00       	sub    eax,0xd0
c001de8a:	e9 f3 fd ff ff       	jmp    c001dc82 <Vm::x87Handler(regs*)+0x432>
c001de8f:	8d 50 28             	lea    edx,[eax+0x28]
c001de92:	80 fa 07             	cmp    dl,0x7
c001de95:	77 28                	ja     c001debf <Vm::x87Handler(regs*)+0x66f>
c001de97:	83 ec 0c             	sub    esp,0xc
c001de9a:	6a 00                	push   0x0
c001de9c:	e8 72 f8 ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001dea1:	83 c4 0c             	add    esp,0xc
c001dea4:	52                   	push   edx
c001dea5:	50                   	push   eax
c001dea6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001deaa:	2d d8 00 00 00       	sub    eax,0xd8
c001deaf:	50                   	push   eax
c001deb0:	e8 a1 f8 ff ff       	call   c001d756 <Vm::fpuSetReg(int, unsigned long long)>
c001deb5:	e8 44 f9 ff ff       	call   c001d7fe <Vm::fpuPop()>
c001deba:	e9 01 fa ff ff       	jmp    c001d8c0 <Vm::x87Handler(regs*)+0x70>
c001debf:	8d 50 20             	lea    edx,[eax+0x20]
c001dec2:	80 fa 07             	cmp    dl,0x7
c001dec5:	77 30                	ja     c001def7 <Vm::x87Handler(regs*)+0x6a7>
c001dec7:	83 ec 0c             	sub    esp,0xc
c001deca:	2d e0 00 00 00       	sub    eax,0xe0
c001decf:	50                   	push   eax
c001ded0:	e8 3e f8 ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001ded5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dedc:	89 c6                	mov    esi,eax
c001dede:	89 d7                	mov    edi,edx
c001dee0:	e8 2e f8 ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001dee5:	57                   	push   edi
c001dee6:	56                   	push   esi
c001dee7:	52                   	push   edx
c001dee8:	50                   	push   eax
c001dee9:	e8 48 f7 ff ff       	call   c001d636 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001deee:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001def2:	e9 54 02 00 00       	jmp    c001e14b <Vm::x87Handler(regs*)+0x8fb>
c001def7:	8d 50 18             	lea    edx,[eax+0x18]
c001defa:	80 fa 07             	cmp    dl,0x7
c001defd:	0f 87 43 fb ff ff    	ja     c001da46 <Vm::x87Handler(regs*)+0x1f6>
c001df03:	83 ec 0c             	sub    esp,0xc
c001df06:	2d e8 00 00 00       	sub    eax,0xe8
c001df0b:	50                   	push   eax
c001df0c:	e8 02 f8 ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001df11:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001df18:	89 c6                	mov    esi,eax
c001df1a:	89 d7                	mov    edi,edx
c001df1c:	e8 f2 f7 ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001df21:	57                   	push   edi
c001df22:	56                   	push   esi
c001df23:	52                   	push   edx
c001df24:	50                   	push   eax
c001df25:	e8 0c f7 ff ff       	call   c001d636 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001df2a:	83 c4 20             	add    esp,0x20
c001df2d:	e8 cc f8 ff ff       	call   c001d7fe <Vm::fpuPop()>
c001df32:	eb 62                	jmp    c001df96 <Vm::x87Handler(regs*)+0x746>
c001df34:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001df38:	0f 85 0f 01 00 00    	jne    c001e04d <Vm::x87Handler(regs*)+0x7fd>
c001df3e:	83 ec 0c             	sub    esp,0xc
c001df41:	6a 01                	push   0x1
c001df43:	e8 cb f7 ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001df48:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001df4f:	89 c6                	mov    esi,eax
c001df51:	89 d7                	mov    edi,edx
c001df53:	e8 bb f7 ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001df58:	57                   	push   edi
c001df59:	56                   	push   esi
c001df5a:	52                   	push   edx
c001df5b:	50                   	push   eax
c001df5c:	e8 d5 f6 ff ff       	call   c001d636 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001df61:	83 c4 20             	add    esp,0x20
c001df64:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001df68:	e8 91 f8 ff ff       	call   c001d7fe <Vm::fpuPop()>
c001df6d:	e8 8c f8 ff ff       	call   c001d7fe <Vm::fpuPop()>
c001df72:	e9 50 f9 ff ff       	jmp    c001d8c7 <Vm::x87Handler(regs*)+0x77>
c001df77:	3c d9                	cmp    al,0xd9
c001df79:	0f 85 b5 02 00 00    	jne    c001e234 <Vm::x87Handler(regs*)+0x9e4>
c001df7f:	eb bd                	jmp    c001df3e <Vm::x87Handler(regs*)+0x6ee>
c001df81:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001df85:	0f 85 ea 02 00 00    	jne    c001e275 <Vm::x87Handler(regs*)+0xa25>
c001df8b:	0f b7 05 80 c0 02 c0 	movzx  eax,WORD PTR ds:0xc002c080
c001df92:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001df96:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001df9a:	e9 28 f9 ff ff       	jmp    c001d8c7 <Vm::x87Handler(regs*)+0x77>
c001df9f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001dfa3:	84 d2                	test   dl,dl
c001dfa5:	75 0f                	jne    c001dfb6 <Vm::x87Handler(regs*)+0x766>
c001dfa7:	83 ec 0c             	sub    esp,0xc
c001dfaa:	ff 36                	push   DWORD PTR [esi]
c001dfac:	e8 b1 f4 ff ff       	call   c001d462 <Vm::fpu32ToInternal(unsigned int)>
c001dfb1:	e9 2c 01 00 00       	jmp    c001e0e2 <Vm::x87Handler(regs*)+0x892>
c001dfb6:	80 fa 01             	cmp    dl,0x1
c001dfb9:	75 0f                	jne    c001dfca <Vm::x87Handler(regs*)+0x77a>
c001dfbb:	83 ec 0c             	sub    esp,0xc
c001dfbe:	ff 36                	push   DWORD PTR [esi]
c001dfc0:	e8 9d f4 ff ff       	call   c001d462 <Vm::fpu32ToInternal(unsigned int)>
c001dfc5:	e9 81 02 00 00       	jmp    c001e24b <Vm::x87Handler(regs*)+0x9fb>
c001dfca:	80 fa 04             	cmp    dl,0x4
c001dfcd:	75 0f                	jne    c001dfde <Vm::x87Handler(regs*)+0x78e>
c001dfcf:	83 ec 0c             	sub    esp,0xc
c001dfd2:	ff 36                	push   DWORD PTR [esi]
c001dfd4:	e8 89 f4 ff ff       	call   c001d462 <Vm::fpu32ToInternal(unsigned int)>
c001dfd9:	e9 86 01 00 00       	jmp    c001e164 <Vm::x87Handler(regs*)+0x914>
c001dfde:	80 fa 05             	cmp    dl,0x5
c001dfe1:	75 1b                	jne    c001dffe <Vm::x87Handler(regs*)+0x7ae>
c001dfe3:	83 ec 0c             	sub    esp,0xc
c001dfe6:	6a 00                	push   0x0
c001dfe8:	e8 26 f7 ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001dfed:	89 c7                	mov    edi,eax
c001dfef:	89 d5                	mov    ebp,edx
c001dff1:	58                   	pop    eax
c001dff2:	ff 36                	push   DWORD PTR [esi]
c001dff4:	e8 69 f4 ff ff       	call   c001d462 <Vm::fpu32ToInternal(unsigned int)>
c001dff9:	e9 a3 01 00 00       	jmp    c001e1a1 <Vm::x87Handler(regs*)+0x951>
c001dffe:	80 fa 06             	cmp    dl,0x6
c001e001:	75 0f                	jne    c001e012 <Vm::x87Handler(regs*)+0x7c2>
c001e003:	83 ec 0c             	sub    esp,0xc
c001e006:	ff 36                	push   DWORD PTR [esi]
c001e008:	e8 55 f4 ff ff       	call   c001d462 <Vm::fpu32ToInternal(unsigned int)>
c001e00d:	e9 ae 01 00 00       	jmp    c001e1c0 <Vm::x87Handler(regs*)+0x970>
c001e012:	31 c0                	xor    eax,eax
c001e014:	80 fa 07             	cmp    dl,0x7
c001e017:	0f 85 94 02 00 00    	jne    c001e2b1 <Vm::x87Handler(regs*)+0xa61>
c001e01d:	83 ec 0c             	sub    esp,0xc
c001e020:	6a 00                	push   0x0
c001e022:	e8 ec f6 ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001e027:	89 c7                	mov    edi,eax
c001e029:	89 d5                	mov    ebp,edx
c001e02b:	58                   	pop    eax
c001e02c:	ff 36                	push   DWORD PTR [esi]
c001e02e:	e8 2f f4 ff ff       	call   c001d462 <Vm::fpu32ToInternal(unsigned int)>
c001e033:	e9 cb 01 00 00       	jmp    c001e203 <Vm::x87Handler(regs*)+0x9b3>
c001e038:	80 fa 03             	cmp    dl,0x3
c001e03b:	0f 85 d3 01 00 00    	jne    c001e214 <Vm::x87Handler(regs*)+0x9c4>
c001e041:	e8 b8 f7 ff ff       	call   c001d7fe <Vm::fpuPop()>
c001e046:	51                   	push   ecx
c001e047:	51                   	push   ecx
c001e048:	e9 de 01 00 00       	jmp    c001e22b <Vm::x87Handler(regs*)+0x9db>
c001e04d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001e051:	80 fa 01             	cmp    dl,0x1
c001e054:	75 09                	jne    c001e05f <Vm::x87Handler(regs*)+0x80f>
c001e056:	57                   	push   edi
c001e057:	57                   	push   edi
c001e058:	8b 06                	mov    eax,DWORD PTR [esi]
c001e05a:	e9 e3 01 00 00       	jmp    c001e242 <Vm::x87Handler(regs*)+0x9f2>
c001e05f:	80 fa 04             	cmp    dl,0x4
c001e062:	75 12                	jne    c001e076 <Vm::x87Handler(regs*)+0x826>
c001e064:	31 d2                	xor    edx,edx
c001e066:	51                   	push   ecx
c001e067:	51                   	push   ecx
c001e068:	8b 06                	mov    eax,DWORD PTR [esi]
c001e06a:	52                   	push   edx
c001e06b:	50                   	push   eax
c001e06c:	e8 d0 f4 ff ff       	call   c001d541 <Vm::fpuLongToFloat(long long)>
c001e071:	e9 ee 00 00 00       	jmp    c001e164 <Vm::x87Handler(regs*)+0x914>
c001e076:	31 c0                	xor    eax,eax
c001e078:	80 fa 07             	cmp    dl,0x7
c001e07b:	0f 85 30 02 00 00    	jne    c001e2b1 <Vm::x87Handler(regs*)+0xa61>
c001e081:	83 ec 0c             	sub    esp,0xc
c001e084:	6a 00                	push   0x0
c001e086:	e8 88 f6 ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001e08b:	89 c7                	mov    edi,eax
c001e08d:	89 d5                	mov    ebp,edx
c001e08f:	58                   	pop    eax
c001e090:	8b 06                	mov    eax,DWORD PTR [esi]
c001e092:	5a                   	pop    edx
c001e093:	31 d2                	xor    edx,edx
c001e095:	52                   	push   edx
c001e096:	50                   	push   eax
c001e097:	e8 a5 f4 ff ff       	call   c001d541 <Vm::fpuLongToFloat(long long)>
c001e09c:	e9 62 01 00 00       	jmp    c001e203 <Vm::x87Handler(regs*)+0x9b3>
c001e0a1:	84 d2                	test   dl,dl
c001e0a3:	75 0d                	jne    c001e0b2 <Vm::x87Handler(regs*)+0x862>
c001e0a5:	31 d2                	xor    edx,edx
c001e0a7:	55                   	push   ebp
c001e0a8:	55                   	push   ebp
c001e0a9:	8b 06                	mov    eax,DWORD PTR [esi]
c001e0ab:	52                   	push   edx
c001e0ac:	50                   	push   eax
c001e0ad:	e9 d3 01 00 00       	jmp    c001e285 <Vm::x87Handler(regs*)+0xa35>
c001e0b2:	31 c0                	xor    eax,eax
c001e0b4:	80 fa 02             	cmp    dl,0x2
c001e0b7:	0f 85 f4 01 00 00    	jne    c001e2b1 <Vm::x87Handler(regs*)+0xa61>
c001e0bd:	83 ec 0c             	sub    esp,0xc
c001e0c0:	6a 00                	push   0x0
c001e0c2:	e8 4c f6 ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001e0c7:	59                   	pop    ecx
c001e0c8:	5f                   	pop    edi
c001e0c9:	e9 6a f9 ff ff       	jmp    c001da38 <Vm::x87Handler(regs*)+0x1e8>
c001e0ce:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001e0d2:	84 d2                	test   dl,dl
c001e0d4:	75 2a                	jne    c001e100 <Vm::x87Handler(regs*)+0x8b0>
c001e0d6:	50                   	push   eax
c001e0d7:	50                   	push   eax
c001e0d8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e0db:	ff 36                	push   DWORD PTR [esi]
c001e0dd:	e8 c5 f3 ff ff       	call   c001d4a7 <Vm::fpu64ToInternal(unsigned long long)>
c001e0e2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e0e9:	89 c6                	mov    esi,eax
c001e0eb:	89 d7                	mov    edi,edx
c001e0ed:	e8 21 f6 ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001e0f2:	57                   	push   edi
c001e0f3:	56                   	push   esi
c001e0f4:	52                   	push   edx
c001e0f5:	50                   	push   eax
c001e0f6:	e8 8e f5 ff ff       	call   c001d689 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001e0fb:	e9 64 01 00 00       	jmp    c001e264 <Vm::x87Handler(regs*)+0xa14>
c001e100:	80 fa 01             	cmp    dl,0x1
c001e103:	75 11                	jne    c001e116 <Vm::x87Handler(regs*)+0x8c6>
c001e105:	50                   	push   eax
c001e106:	50                   	push   eax
c001e107:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e10a:	ff 36                	push   DWORD PTR [esi]
c001e10c:	e8 96 f3 ff ff       	call   c001d4a7 <Vm::fpu64ToInternal(unsigned long long)>
c001e111:	e9 35 01 00 00       	jmp    c001e24b <Vm::x87Handler(regs*)+0x9fb>
c001e116:	80 fa 02             	cmp    dl,0x2
c001e119:	0f 85 54 f9 ff ff    	jne    c001da73 <Vm::x87Handler(regs*)+0x223>
c001e11f:	55                   	push   ebp
c001e120:	55                   	push   ebp
c001e121:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e124:	ff 36                	push   DWORD PTR [esi]
c001e126:	e8 7c f3 ff ff       	call   c001d4a7 <Vm::fpu64ToInternal(unsigned long long)>
c001e12b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e132:	89 c6                	mov    esi,eax
c001e134:	89 d7                	mov    edi,edx
c001e136:	e8 d8 f5 ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001e13b:	57                   	push   edi
c001e13c:	56                   	push   esi
c001e13d:	52                   	push   edx
c001e13e:	50                   	push   eax
c001e13f:	e8 f2 f4 ff ff       	call   c001d636 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001e144:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e148:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001e14b:	83 c4 20             	add    esp,0x20
c001e14e:	e9 74 f7 ff ff       	jmp    c001d8c7 <Vm::x87Handler(regs*)+0x77>
c001e153:	80 fa 04             	cmp    dl,0x4
c001e156:	75 2a                	jne    c001e182 <Vm::x87Handler(regs*)+0x932>
c001e158:	51                   	push   ecx
c001e159:	51                   	push   ecx
c001e15a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e15d:	ff 36                	push   DWORD PTR [esi]
c001e15f:	e8 43 f3 ff ff       	call   c001d4a7 <Vm::fpu64ToInternal(unsigned long long)>
c001e164:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e16b:	89 c6                	mov    esi,eax
c001e16d:	89 d7                	mov    edi,edx
c001e16f:	e8 9f f5 ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001e174:	57                   	push   edi
c001e175:	56                   	push   esi
c001e176:	52                   	push   edx
c001e177:	50                   	push   eax
c001e178:	e8 36 f5 ff ff       	call   c001d6b3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001e17d:	e9 e2 00 00 00       	jmp    c001e264 <Vm::x87Handler(regs*)+0xa14>
c001e182:	80 fa 05             	cmp    dl,0x5
c001e185:	75 28                	jne    c001e1af <Vm::x87Handler(regs*)+0x95f>
c001e187:	83 ec 0c             	sub    esp,0xc
c001e18a:	6a 00                	push   0x0
c001e18c:	e8 82 f5 ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001e191:	89 c7                	mov    edi,eax
c001e193:	89 d5                	mov    ebp,edx
c001e195:	58                   	pop    eax
c001e196:	5a                   	pop    edx
c001e197:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e19a:	ff 36                	push   DWORD PTR [esi]
c001e19c:	e8 06 f3 ff ff       	call   c001d4a7 <Vm::fpu64ToInternal(unsigned long long)>
c001e1a1:	83 c4 10             	add    esp,0x10
c001e1a4:	55                   	push   ebp
c001e1a5:	57                   	push   edi
c001e1a6:	52                   	push   edx
c001e1a7:	50                   	push   eax
c001e1a8:	e8 06 f5 ff ff       	call   c001d6b3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001e1ad:	eb 60                	jmp    c001e20f <Vm::x87Handler(regs*)+0x9bf>
c001e1af:	80 fa 06             	cmp    dl,0x6
c001e1b2:	75 2a                	jne    c001e1de <Vm::x87Handler(regs*)+0x98e>
c001e1b4:	51                   	push   ecx
c001e1b5:	51                   	push   ecx
c001e1b6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e1b9:	ff 36                	push   DWORD PTR [esi]
c001e1bb:	e8 e7 f2 ff ff       	call   c001d4a7 <Vm::fpu64ToInternal(unsigned long long)>
c001e1c0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e1c7:	89 c6                	mov    esi,eax
c001e1c9:	89 d7                	mov    edi,edx
c001e1cb:	e8 43 f5 ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001e1d0:	57                   	push   edi
c001e1d1:	56                   	push   esi
c001e1d2:	52                   	push   edx
c001e1d3:	50                   	push   eax
c001e1d4:	e8 08 f5 ff ff       	call   c001d6e1 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001e1d9:	e9 86 00 00 00       	jmp    c001e264 <Vm::x87Handler(regs*)+0xa14>
c001e1de:	31 c0                	xor    eax,eax
c001e1e0:	80 fa 07             	cmp    dl,0x7
c001e1e3:	0f 85 c8 00 00 00    	jne    c001e2b1 <Vm::x87Handler(regs*)+0xa61>
c001e1e9:	83 ec 0c             	sub    esp,0xc
c001e1ec:	6a 00                	push   0x0
c001e1ee:	e8 20 f5 ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001e1f3:	89 c7                	mov    edi,eax
c001e1f5:	89 d5                	mov    ebp,edx
c001e1f7:	58                   	pop    eax
c001e1f8:	5a                   	pop    edx
c001e1f9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e1fc:	ff 36                	push   DWORD PTR [esi]
c001e1fe:	e8 a4 f2 ff ff       	call   c001d4a7 <Vm::fpu64ToInternal(unsigned long long)>
c001e203:	83 c4 10             	add    esp,0x10
c001e206:	55                   	push   ebp
c001e207:	57                   	push   edi
c001e208:	52                   	push   edx
c001e209:	50                   	push   eax
c001e20a:	e8 d2 f4 ff ff       	call   c001d6e1 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001e20f:	83 c4 0c             	add    esp,0xc
c001e212:	eb 53                	jmp    c001e267 <Vm::x87Handler(regs*)+0xa17>
c001e214:	31 c0                	xor    eax,eax
c001e216:	80 fa 02             	cmp    dl,0x2
c001e219:	0f 85 92 00 00 00    	jne    c001e2b1 <Vm::x87Handler(regs*)+0xa61>
c001e21f:	83 ec 0c             	sub    esp,0xc
c001e222:	6a 00                	push   0x0
c001e224:	e8 ea f4 ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001e229:	59                   	pop    ecx
c001e22a:	5f                   	pop    edi
c001e22b:	52                   	push   edx
c001e22c:	50                   	push   eax
c001e22d:	e8 27 f2 ff ff       	call   c001d459 <Vm::fpuInternalTo64(unsigned long long)>
c001e232:	eb 70                	jmp    c001e2a4 <Vm::x87Handler(regs*)+0xa54>
c001e234:	31 c0                	xor    eax,eax
c001e236:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001e23b:	75 74                	jne    c001e2b1 <Vm::x87Handler(regs*)+0xa61>
c001e23d:	50                   	push   eax
c001e23e:	50                   	push   eax
c001e23f:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001e242:	31 d2                	xor    edx,edx
c001e244:	52                   	push   edx
c001e245:	50                   	push   eax
c001e246:	e8 f6 f2 ff ff       	call   c001d541 <Vm::fpuLongToFloat(long long)>
c001e24b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e252:	89 c6                	mov    esi,eax
c001e254:	89 d7                	mov    edi,edx
c001e256:	e8 b8 f4 ff ff       	call   c001d713 <Vm::fpuGetReg(int)>
c001e25b:	57                   	push   edi
c001e25c:	56                   	push   esi
c001e25d:	52                   	push   edx
c001e25e:	50                   	push   eax
c001e25f:	e8 5e f4 ff ff       	call   c001d6c2 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001e264:	83 c4 1c             	add    esp,0x1c
c001e267:	52                   	push   edx
c001e268:	50                   	push   eax
c001e269:	6a 00                	push   0x0
c001e26b:	e8 e6 f4 ff ff       	call   c001d756 <Vm::fpuSetReg(int, unsigned long long)>
c001e270:	e9 f2 f7 ff ff       	jmp    c001da67 <Vm::x87Handler(regs*)+0x217>
c001e275:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001e279:	80 fa 05             	cmp    dl,0x5
c001e27c:	75 11                	jne    c001e28f <Vm::x87Handler(regs*)+0xa3f>
c001e27e:	55                   	push   ebp
c001e27f:	55                   	push   ebp
c001e280:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e283:	ff 36                	push   DWORD PTR [esi]
c001e285:	e8 81 f2 ff ff       	call   c001d50b <Vm::fpuULongToFloat(unsigned long long)>
c001e28a:	e9 cf f7 ff ff       	jmp    c001da5e <Vm::x87Handler(regs*)+0x20e>
c001e28f:	31 c0                	xor    eax,eax
c001e291:	80 fa 07             	cmp    dl,0x7
c001e294:	75 1b                	jne    c001e2b1 <Vm::x87Handler(regs*)+0xa61>
c001e296:	e8 63 f5 ff ff       	call   c001d7fe <Vm::fpuPop()>
c001e29b:	51                   	push   ecx
c001e29c:	51                   	push   ecx
c001e29d:	52                   	push   edx
c001e29e:	50                   	push   eax
c001e29f:	e8 0c f2 ff ff       	call   c001d4b0 <Vm::fpuFloatToLong(unsigned long long)>
c001e2a4:	83 c4 10             	add    esp,0x10
c001e2a7:	89 06                	mov    DWORD PTR [esi],eax
c001e2a9:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001e2ac:	e9 f8 f7 ff ff       	jmp    c001daa9 <Vm::x87Handler(regs*)+0x259>
c001e2b1:	83 c4 1c             	add    esp,0x1c
c001e2b4:	5b                   	pop    ebx
c001e2b5:	5e                   	pop    esi
c001e2b6:	5f                   	pop    edi
c001e2b7:	5d                   	pop    ebp
c001e2b8:	c3                   	ret    

c001e2b9 <__static_initialization_and_destruction_0(int, int)>:
c001e2b9:	83 ec 0c             	sub    esp,0xc
c001e2bc:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e2c1:	75 1a                	jne    c001e2dd <__static_initialization_and_destruction_0(int, int)+0x24>
c001e2c3:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e2cb:	75 10                	jne    c001e2dd <__static_initialization_and_destruction_0(int, int)+0x24>
c001e2cd:	83 ec 0c             	sub    esp,0xc
c001e2d0:	68 80 c0 02 c0       	push   0xc002c080
c001e2d5:	e8 26 7b 00 00       	call   c0025e00 <Vm::_FPUState::_FPUState()>
c001e2da:	83 c4 10             	add    esp,0x10
c001e2dd:	90                   	nop
c001e2de:	83 c4 0c             	add    esp,0xc
c001e2e1:	c3                   	ret    

c001e2e2 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001e2e2:	83 ec 0c             	sub    esp,0xc
c001e2e5:	83 ec 08             	sub    esp,0x8
c001e2e8:	68 ff ff 00 00       	push   0xffff
c001e2ed:	6a 01                	push   0x1
c001e2ef:	e8 c5 ff ff ff       	call   c001e2b9 <__static_initialization_and_destruction_0(int, int)>
c001e2f4:	83 c4 10             	add    esp,0x10
c001e2f7:	83 c4 0c             	add    esp,0xc
c001e2fa:	c3                   	ret    
c001e2fb:	90                   	nop

c001e2fc <FAT::getName()>:
c001e2fc:	b8 d4 91 02 c0       	mov    eax,0xc00291d4
c001e301:	c3                   	ret    

c001e302 <FAT::tell(void*, unsigned long long*)>:
c001e302:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001e307:	75 06                	jne    c001e30f <FAT::tell(void*, unsigned long long*)+0xd>
c001e309:	b8 04 00 00 00       	mov    eax,0x4
c001e30e:	c3                   	ret    
c001e30f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e314:	75 06                	jne    c001e31c <FAT::tell(void*, unsigned long long*)+0x1a>
c001e316:	b8 04 00 00 00       	mov    eax,0x4
c001e31b:	c3                   	ret    
c001e31c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e320:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001e323:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001e326:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e32a:	89 01                	mov    DWORD PTR [ecx],eax
c001e32c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e32f:	b8 00 00 00 00       	mov    eax,0x0
c001e334:	c3                   	ret    
c001e335:	90                   	nop

c001e336 <FAT::stat(void*, unsigned long long*)>:
c001e336:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001e33b:	75 06                	jne    c001e343 <FAT::stat(void*, unsigned long long*)+0xd>
c001e33d:	b8 04 00 00 00       	mov    eax,0x4
c001e342:	c3                   	ret    
c001e343:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e348:	75 06                	jne    c001e350 <FAT::stat(void*, unsigned long long*)+0x1a>
c001e34a:	b8 04 00 00 00       	mov    eax,0x4
c001e34f:	c3                   	ret    
c001e350:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e354:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001e357:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e35a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e35e:	89 01                	mov    DWORD PTR [ecx],eax
c001e360:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e363:	b8 00 00 00 00       	mov    eax,0x0
c001e368:	c3                   	ret    
c001e369:	90                   	nop

c001e36a <FAT::~FAT()>:
c001e36a:	83 ec 0c             	sub    esp,0xc
c001e36d:	ba 58 92 02 c0       	mov    edx,0xc0029258
c001e372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e376:	89 10                	mov    DWORD PTR [eax],edx
c001e378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e37c:	83 ec 0c             	sub    esp,0xc
c001e37f:	50                   	push   eax
c001e380:	e8 d9 45 ff ff       	call   c001295e <Filesystem::~Filesystem()>
c001e385:	83 c4 10             	add    esp,0x10
c001e388:	90                   	nop
c001e389:	83 c4 0c             	add    esp,0xc
c001e38c:	c3                   	ret    
c001e38d:	90                   	nop

c001e38e <FAT::~FAT()>:
c001e38e:	83 ec 0c             	sub    esp,0xc
c001e391:	83 ec 0c             	sub    esp,0xc
c001e394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e398:	e8 cd ff ff ff       	call   c001e36a <FAT::~FAT()>
c001e39d:	83 c4 10             	add    esp,0x10
c001e3a0:	83 ec 08             	sub    esp,0x8
c001e3a3:	6a 08                	push   0x8
c001e3a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e3a9:	e8 a7 41 ff ff       	call   c0012555 <operator delete(void*, unsigned long)>
c001e3ae:	83 c4 10             	add    esp,0x10
c001e3b1:	83 c4 0c             	add    esp,0xc
c001e3b4:	c3                   	ret    
c001e3b5:	90                   	nop

c001e3b6 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001e3b6:	83 ec 1c             	sub    esp,0x1c
c001e3b9:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001e3c0:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001e3c5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e3c9:	8b 04 85 00 c1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3f00]
c001e3d0:	83 f8 ff             	cmp    eax,0xffffffff
c001e3d3:	75 34                	jne    c001e409 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001e3d5:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e3d9:	88 c2                	mov    dl,al
c001e3db:	a1 e0 c0 02 c0       	mov    eax,ds:0xc002c0e0
c001e3e0:	01 d0                	add    eax,edx
c001e3e2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e3e6:	8b 15 e0 c0 02 c0    	mov    edx,DWORD PTR ds:0xc002c0e0
c001e3ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e3f0:	89 14 85 00 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f00],edx
c001e3f7:	a1 e0 c0 02 c0       	mov    eax,ds:0xc002c0e0
c001e3fc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e400:	89 14 85 80 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3e80],edx
c001e407:	eb 17                	jmp    c001e420 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001e409:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e40d:	88 c2                	mov    dl,al
c001e40f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e413:	8b 04 85 00 c1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3f00]
c001e41a:	01 d0                	add    eax,edx
c001e41c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e420:	83 ec 04             	sub    esp,0x4
c001e423:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e427:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e42b:	8d 44 24 15          	lea    eax,[esp+0x15]
c001e42f:	50                   	push   eax
c001e430:	e8 a5 86 fe ff       	call   c0006ada <f_getlabel>
c001e435:	83 c4 10             	add    esp,0x10
c001e438:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e43c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e441:	75 07                	jne    c001e44a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001e443:	b8 00 00 00 00       	mov    eax,0x0
c001e448:	eb 05                	jmp    c001e44f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001e44a:	b8 01 00 00 00       	mov    eax,0x1
c001e44f:	83 c4 1c             	add    esp,0x1c
c001e452:	c3                   	ret    
c001e453:	90                   	nop

c001e454 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001e454:	57                   	push   edi
c001e455:	83 ec 58             	sub    esp,0x58
c001e458:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001e460:	8d 54 24 10          	lea    edx,[esp+0x10]
c001e464:	b9 0f 00 00 00       	mov    ecx,0xf
c001e469:	b8 00 00 00 00       	mov    eax,0x0
c001e46e:	fc                   	cld    
c001e46f:	89 d7                	mov    edi,edx
c001e471:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e473:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e477:	8b 04 85 00 c1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3f00]
c001e47e:	83 f8 ff             	cmp    eax,0xffffffff
c001e481:	75 34                	jne    c001e4b7 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001e483:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e487:	88 c2                	mov    dl,al
c001e489:	a1 e0 c0 02 c0       	mov    eax,ds:0xc002c0e0
c001e48e:	01 d0                	add    eax,edx
c001e490:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e494:	8b 15 e0 c0 02 c0    	mov    edx,DWORD PTR ds:0xc002c0e0
c001e49a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e49e:	89 14 85 00 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f00],edx
c001e4a5:	a1 e0 c0 02 c0       	mov    eax,ds:0xc002c0e0
c001e4aa:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001e4ae:	89 14 85 80 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3e80],edx
c001e4b5:	eb 17                	jmp    c001e4ce <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001e4b7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e4bb:	88 c2                	mov    dl,al
c001e4bd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e4c1:	8b 04 85 00 c1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3f00]
c001e4c8:	01 d0                	add    eax,edx
c001e4ca:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e4ce:	83 ec 08             	sub    esp,0x8
c001e4d1:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001e4d5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e4d9:	50                   	push   eax
c001e4da:	e8 f4 22 fe ff       	call   c00007d3 <strcat>
c001e4df:	83 c4 10             	add    esp,0x10
c001e4e2:	83 ec 0c             	sub    esp,0xc
c001e4e5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e4e9:	50                   	push   eax
c001e4ea:	e8 d9 87 fe ff       	call   c0006cc8 <f_setlabel>
c001e4ef:	83 c4 10             	add    esp,0x10
c001e4f2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e4f6:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001e4fb:	75 07                	jne    c001e504 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001e4fd:	b8 00 00 00 00       	mov    eax,0x0
c001e502:	eb 05                	jmp    c001e509 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001e504:	b8 01 00 00 00       	mov    eax,0x1
c001e509:	83 c4 58             	add    esp,0x58
c001e50c:	5f                   	pop    edi
c001e50d:	c3                   	ret    

c001e50e <FAT::format(LogicalDisk*, int, char const*, int)>:
c001e50e:	83 ec 2c             	sub    esp,0x2c
c001e511:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001e519:	83 ec 08             	sub    esp,0x8
c001e51c:	68 f8 91 02 c0       	push   0xc00291f8
c001e521:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e525:	e8 43 22 fe ff       	call   c000076d <strcmp>
c001e52a:	83 c4 10             	add    esp,0x10
c001e52d:	85 c0                	test   eax,eax
c001e52f:	0f 94 c0             	sete   al
c001e532:	84 c0                	test   al,al
c001e534:	74 0d                	je     c001e543 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001e536:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001e53e:	e9 a6 00 00 00       	jmp    c001e5e9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e543:	83 ec 08             	sub    esp,0x8
c001e546:	68 ea 91 02 c0       	push   0xc00291ea
c001e54b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e54f:	e8 19 22 fe ff       	call   c000076d <strcmp>
c001e554:	83 c4 10             	add    esp,0x10
c001e557:	85 c0                	test   eax,eax
c001e559:	0f 94 c0             	sete   al
c001e55c:	84 c0                	test   al,al
c001e55e:	74 0a                	je     c001e56a <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001e560:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001e568:	eb 7f                	jmp    c001e5e9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e56a:	83 ec 08             	sub    esp,0x8
c001e56d:	68 f0 91 02 c0       	push   0xc00291f0
c001e572:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e576:	e8 f2 21 fe ff       	call   c000076d <strcmp>
c001e57b:	83 c4 10             	add    esp,0x10
c001e57e:	85 c0                	test   eax,eax
c001e580:	0f 94 c0             	sete   al
c001e583:	84 c0                	test   al,al
c001e585:	74 0a                	je     c001e591 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001e587:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001e58f:	eb 58                	jmp    c001e5e9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e591:	83 ec 08             	sub    esp,0x8
c001e594:	68 6c 64 02 c0       	push   0xc002646c
c001e599:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e59d:	e8 cb 21 fe ff       	call   c000076d <strcmp>
c001e5a2:	83 c4 10             	add    esp,0x10
c001e5a5:	85 c0                	test   eax,eax
c001e5a7:	0f 94 c0             	sete   al
c001e5aa:	84 c0                	test   al,al
c001e5ac:	74 0a                	je     c001e5b8 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001e5ae:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001e5b6:	eb 31                	jmp    c001e5e9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e5b8:	83 ec 08             	sub    esp,0x8
c001e5bb:	68 f6 91 02 c0       	push   0xc00291f6
c001e5c0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e5c4:	e8 a4 21 fe ff       	call   c000076d <strcmp>
c001e5c9:	83 c4 10             	add    esp,0x10
c001e5cc:	85 c0                	test   eax,eax
c001e5ce:	0f 94 c0             	sete   al
c001e5d1:	84 c0                	test   al,al
c001e5d3:	74 0a                	je     c001e5df <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001e5d5:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001e5dd:	eb 0a                	jmp    c001e5e9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e5df:	b8 08 00 00 00       	mov    eax,0x8
c001e5e4:	e9 04 01 00 00       	jmp    c001e6ed <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e5e9:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001e5f0:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001e5f5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e5f9:	8b 04 85 00 c1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3f00]
c001e600:	83 f8 ff             	cmp    eax,0xffffffff
c001e603:	75 34                	jne    c001e639 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001e605:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001e609:	88 c2                	mov    dl,al
c001e60b:	a1 e0 c0 02 c0       	mov    eax,ds:0xc002c0e0
c001e610:	01 d0                	add    eax,edx
c001e612:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001e616:	8b 15 e0 c0 02 c0    	mov    edx,DWORD PTR ds:0xc002c0e0
c001e61c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e620:	89 14 85 00 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f00],edx
c001e627:	a1 e0 c0 02 c0       	mov    eax,ds:0xc002c0e0
c001e62c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e630:	89 14 85 80 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3e80],edx
c001e637:	eb 17                	jmp    c001e650 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001e639:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001e63d:	88 c2                	mov    dl,al
c001e63f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e643:	8b 04 85 00 c1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3f00]
c001e64a:	01 d0                	add    eax,edx
c001e64c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001e650:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e654:	88 04 24             	mov    BYTE PTR [esp],al
c001e657:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e65b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e65f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001e667:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001e66c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e674:	83 ec 0c             	sub    esp,0xc
c001e677:	68 00 20 00 00       	push   0x2000
c001e67c:	e8 41 0e ff ff       	call   c000f4c2 <malloc>
c001e681:	83 c4 10             	add    esp,0x10
c001e684:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e688:	68 00 20 00 00       	push   0x2000
c001e68d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e691:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e695:	50                   	push   eax
c001e696:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001e69a:	50                   	push   eax
c001e69b:	e8 73 8a fe ff       	call   c0007113 <f_mkfs>
c001e6a0:	83 c4 10             	add    esp,0x10
c001e6a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e6a7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e6ac:	75 07                	jne    c001e6b5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001e6ae:	b8 00 00 00 00       	mov    eax,0x0
c001e6b3:	eb 38                	jmp    c001e6ed <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e6b5:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001e6ba:	75 17                	jne    c001e6d3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001e6bc:	83 ec 0c             	sub    esp,0xc
c001e6bf:	68 28 92 02 c0       	push   0xc0029228
c001e6c4:	e8 6c 3f ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001e6c9:	83 c4 10             	add    esp,0x10
c001e6cc:	b8 09 00 00 00       	mov    eax,0x9
c001e6d1:	eb 1a                	jmp    c001e6ed <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e6d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e6d7:	83 ec 08             	sub    esp,0x8
c001e6da:	50                   	push   eax
c001e6db:	68 fc 91 02 c0       	push   0xc00291fc
c001e6e0:	e8 50 3f ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001e6e5:	83 c4 10             	add    esp,0x10
c001e6e8:	b8 01 00 00 00       	mov    eax,0x1
c001e6ed:	83 c4 2c             	add    esp,0x2c
c001e6f0:	c3                   	ret    
c001e6f1:	90                   	nop

c001e6f2 <FAT::tryMount(LogicalDisk*, int)>:
c001e6f2:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001e6f8:	a1 e0 c0 02 c0       	mov    eax,ds:0xc002c0e0
c001e6fd:	83 f8 14             	cmp    eax,0x14
c001e700:	75 17                	jne    c001e719 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001e702:	83 ec 0c             	sub    esp,0xc
c001e705:	68 0e 92 02 c0       	push   0xc002920e
c001e70a:	e8 ea a6 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c001e70f:	83 c4 10             	add    esp,0x10
c001e712:	b0 00                	mov    al,0x0
c001e714:	e9 d7 01 00 00       	jmp    c001e8f0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e719:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001e720:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e726:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e72c:	3d 00 02 00 00       	cmp    eax,0x200
c001e731:	74 07                	je     c001e73a <FAT::tryMount(LogicalDisk*, int)+0x48>
c001e733:	b0 00                	mov    al,0x0
c001e735:	e9 b6 01 00 00       	jmp    c001e8f0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e73a:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001e742:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001e749:	8b 04 85 00 c1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3f00]
c001e750:	83 f8 ff             	cmp    eax,0xffffffff
c001e753:	74 07                	je     c001e75c <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001e755:	b0 01                	mov    al,0x1
c001e757:	e9 94 01 00 00       	jmp    c001e8f0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e75c:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001e766:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001e76e:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001e775:	88 c2                	mov    dl,al
c001e777:	a1 e0 c0 02 c0       	mov    eax,ds:0xc002c0e0
c001e77c:	01 d0                	add    eax,edx
c001e77e:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001e785:	8b 15 e0 c0 02 c0    	mov    edx,DWORD PTR ds:0xc002c0e0
c001e78b:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001e792:	89 14 85 00 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f00],edx
c001e799:	a1 e0 c0 02 c0       	mov    eax,ds:0xc002c0e0
c001e79e:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001e7a5:	89 14 85 80 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3e80],edx
c001e7ac:	83 ec 0c             	sub    esp,0xc
c001e7af:	68 54 02 00 00       	push   0x254
c001e7b4:	e8 09 0d ff ff       	call   c000f4c2 <malloc>
c001e7b9:	83 c4 10             	add    esp,0x10
c001e7bc:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001e7c3:	83 ec 04             	sub    esp,0x4
c001e7c6:	6a 00                	push   0x0
c001e7c8:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e7cf:	50                   	push   eax
c001e7d0:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e7d7:	e8 f5 64 fe ff       	call   c0004cd1 <f_mount>
c001e7dc:	83 c4 10             	add    esp,0x10
c001e7df:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001e7e6:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001e7ee:	74 19                	je     c001e809 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001e7f0:	83 ec 0c             	sub    esp,0xc
c001e7f3:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e7fa:	e8 e3 0c ff ff       	call   c000f4e2 <rfree>
c001e7ff:	83 c4 10             	add    esp,0x10
c001e802:	b0 00                	mov    al,0x0
c001e804:	e9 e7 00 00 00       	jmp    c001e8f0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e809:	83 ec 04             	sub    esp,0x4
c001e80c:	68 00 01 00 00       	push   0x100
c001e811:	6a 00                	push   0x0
c001e813:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e81a:	50                   	push   eax
c001e81b:	e8 5d 1e fe ff       	call   c000067d <memset>
c001e820:	83 c4 10             	add    esp,0x10
c001e823:	83 ec 08             	sub    esp,0x8
c001e826:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e82d:	50                   	push   eax
c001e82e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e835:	50                   	push   eax
c001e836:	e8 98 1f fe ff       	call   c00007d3 <strcat>
c001e83b:	83 c4 10             	add    esp,0x10
c001e83e:	83 ec 08             	sub    esp,0x8
c001e841:	68 1c 92 02 c0       	push   0xc002921c
c001e846:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e84d:	50                   	push   eax
c001e84e:	e8 80 1f fe ff       	call   c00007d3 <strcat>
c001e853:	83 c4 10             	add    esp,0x10
c001e856:	83 ec 04             	sub    esp,0x4
c001e859:	6a 01                	push   0x1
c001e85b:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001e862:	50                   	push   eax
c001e863:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e867:	50                   	push   eax
c001e868:	e8 c6 64 fe ff       	call   c0004d33 <f_open>
c001e86d:	83 c4 10             	add    esp,0x10
c001e870:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001e877:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001e87e:	85 c0                	test   eax,eax
c001e880:	74 0a                	je     c001e88c <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001e882:	78 2d                	js     c001e8b1 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001e884:	83 e8 04             	sub    eax,0x4
c001e887:	83 f8 01             	cmp    eax,0x1
c001e88a:	77 25                	ja     c001e8b1 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001e88c:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001e894:	83 ec 0c             	sub    esp,0xc
c001e897:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e89b:	50                   	push   eax
c001e89c:	e8 e4 6f fe ff       	call   c0005885 <f_close>
c001e8a1:	83 c4 10             	add    esp,0x10
c001e8a4:	90                   	nop
c001e8a5:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001e8ad:	74 3a                	je     c001e8e9 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001e8af:	eb 2d                	jmp    c001e8de <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001e8b1:	83 ec 0c             	sub    esp,0xc
c001e8b4:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e8bb:	e8 22 0c ff ff       	call   c000f4e2 <rfree>
c001e8c0:	83 c4 10             	add    esp,0x10
c001e8c3:	83 ec 04             	sub    esp,0x4
c001e8c6:	6a 00                	push   0x0
c001e8c8:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e8cf:	50                   	push   eax
c001e8d0:	6a 00                	push   0x0
c001e8d2:	e8 fa 63 fe ff       	call   c0004cd1 <f_mount>
c001e8d7:	83 c4 10             	add    esp,0x10
c001e8da:	b0 00                	mov    al,0x0
c001e8dc:	eb 12                	jmp    c001e8f0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e8de:	a1 e0 c0 02 c0       	mov    eax,ds:0xc002c0e0
c001e8e3:	40                   	inc    eax
c001e8e4:	a3 e0 c0 02 c0       	mov    ds:0xc002c0e0,eax
c001e8e9:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001e8f0:	81 c4 6c 03 00 00    	add    esp,0x36c
c001e8f6:	c3                   	ret    
c001e8f7:	90                   	nop

c001e8f8 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001e8f8:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001e8fe:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001e906:	74 0a                	je     c001e912 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001e908:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001e910:	75 0a                	jne    c001e91c <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001e912:	b8 04 00 00 00       	mov    eax,0x4
c001e917:	e9 db 00 00 00       	jmp    c001e9f7 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e91c:	83 ec 08             	sub    esp,0x8
c001e91f:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001e926:	50                   	push   eax
c001e927:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001e92e:	e8 5c 75 fe ff       	call   c0005e8f <f_readdir>
c001e933:	83 c4 10             	add    esp,0x10
c001e936:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001e93d:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001e943:	83 ec 0c             	sub    esp,0xc
c001e946:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001e94d:	83 c0 1a             	add    eax,0x1a
c001e950:	50                   	push   eax
c001e951:	e8 44 1d fe ff       	call   c000069a <strlen>
c001e956:	83 c4 10             	add    esp,0x10
c001e959:	ba 00 00 00 00       	mov    edx,0x0
c001e95e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e962:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e966:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001e96d:	0f b6 c0             	movzx  eax,al
c001e970:	83 e0 10             	and    eax,0x10
c001e973:	74 07                	je     c001e97c <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001e975:	b8 02 00 00 00       	mov    eax,0x2
c001e97a:	eb 05                	jmp    c001e981 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001e97c:	b8 01 00 00 00       	mov    eax,0x1
c001e981:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e985:	83 ec 08             	sub    esp,0x8
c001e988:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001e98f:	83 c0 1a             	add    eax,0x1a
c001e992:	50                   	push   eax
c001e993:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e997:	83 c0 10             	add    eax,0x10
c001e99a:	50                   	push   eax
c001e99b:	e8 7c 1d fe ff       	call   c000071c <strcpy>
c001e9a0:	83 c4 10             	add    esp,0x10
c001e9a3:	83 ec 04             	sub    esp,0x4
c001e9a6:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001e9ad:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e9b1:	50                   	push   eax
c001e9b2:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001e9b9:	e8 89 1c fe ff       	call   c0000647 <memcpy>
c001e9be:	83 c4 10             	add    esp,0x10
c001e9c1:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001e9c8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001e9ce:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001e9d5:	84 c0                	test   al,al
c001e9d7:	75 07                	jne    c001e9e0 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001e9d9:	b8 07 00 00 00       	mov    eax,0x7
c001e9de:	eb 17                	jmp    c001e9f7 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e9e0:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001e9e7:	85 c0                	test   eax,eax
c001e9e9:	75 07                	jne    c001e9f2 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001e9eb:	b8 00 00 00 00       	mov    eax,0x0
c001e9f0:	eb 05                	jmp    c001e9f7 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e9f2:	b8 01 00 00 00       	mov    eax,0x1
c001e9f7:	81 c4 3c 02 00 00    	add    esp,0x23c
c001e9fd:	c3                   	ret    

c001e9fe <FAT::read(void*, unsigned long, void*, int*)>:
c001e9fe:	83 ec 1c             	sub    esp,0x1c
c001ea01:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ea06:	74 07                	je     c001ea0f <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001ea08:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ea0d:	75 07                	jne    c001ea16 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001ea0f:	b8 04 00 00 00       	mov    eax,0x4
c001ea14:	eb 3d                	jmp    c001ea53 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001ea16:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ea1a:	50                   	push   eax
c001ea1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ea1f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ea23:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ea27:	e8 43 67 fe ff       	call   c000516f <f_read>
c001ea2c:	83 c4 10             	add    esp,0x10
c001ea2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ea37:	89 c2                	mov    edx,eax
c001ea39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ea3d:	89 10                	mov    DWORD PTR [eax],edx
c001ea3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea43:	85 c0                	test   eax,eax
c001ea45:	75 07                	jne    c001ea4e <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001ea47:	b8 00 00 00 00       	mov    eax,0x0
c001ea4c:	eb 05                	jmp    c001ea53 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001ea4e:	b8 01 00 00 00       	mov    eax,0x1
c001ea53:	83 c4 1c             	add    esp,0x1c
c001ea56:	c3                   	ret    
c001ea57:	90                   	nop

c001ea58 <FAT::write(void*, unsigned long, void*, int*)>:
c001ea58:	83 ec 1c             	sub    esp,0x1c
c001ea5b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ea60:	74 07                	je     c001ea69 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001ea62:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ea67:	75 07                	jne    c001ea70 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001ea69:	b8 04 00 00 00       	mov    eax,0x4
c001ea6e:	eb 3d                	jmp    c001eaad <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001ea70:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ea74:	50                   	push   eax
c001ea75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ea79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ea7d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ea81:	e8 69 69 fe ff       	call   c00053ef <f_write>
c001ea86:	83 c4 10             	add    esp,0x10
c001ea89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ea91:	89 c2                	mov    edx,eax
c001ea93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ea97:	89 10                	mov    DWORD PTR [eax],edx
c001ea99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea9d:	85 c0                	test   eax,eax
c001ea9f:	75 07                	jne    c001eaa8 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001eaa1:	b8 00 00 00 00       	mov    eax,0x0
c001eaa6:	eb 05                	jmp    c001eaad <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001eaa8:	b8 01 00 00 00       	mov    eax,0x1
c001eaad:	83 c4 1c             	add    esp,0x1c
c001eab0:	c3                   	ret    
c001eab1:	90                   	nop

c001eab2 <FAT::close(void*)>:
c001eab2:	83 ec 1c             	sub    esp,0x1c
c001eab5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001eaba:	75 07                	jne    c001eac3 <FAT::close(void*)+0x11>
c001eabc:	b8 04 00 00 00       	mov    eax,0x4
c001eac1:	eb 36                	jmp    c001eaf9 <FAT::close(void*)+0x47>
c001eac3:	83 ec 0c             	sub    esp,0xc
c001eac6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eaca:	e8 b6 6d fe ff       	call   c0005885 <f_close>
c001eacf:	83 c4 10             	add    esp,0x10
c001ead2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ead6:	83 ec 0c             	sub    esp,0xc
c001ead9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eadd:	e8 f0 09 ff ff       	call   c000f4d2 <free>
c001eae2:	83 c4 10             	add    esp,0x10
c001eae5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eae9:	85 c0                	test   eax,eax
c001eaeb:	75 07                	jne    c001eaf4 <FAT::close(void*)+0x42>
c001eaed:	b8 00 00 00 00       	mov    eax,0x0
c001eaf2:	eb 05                	jmp    c001eaf9 <FAT::close(void*)+0x47>
c001eaf4:	b8 01 00 00 00       	mov    eax,0x1
c001eaf9:	83 c4 1c             	add    esp,0x1c
c001eafc:	c3                   	ret    
c001eafd:	90                   	nop

c001eafe <FAT::closeDir(void*)>:
c001eafe:	83 ec 1c             	sub    esp,0x1c
c001eb01:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001eb06:	75 07                	jne    c001eb0f <FAT::closeDir(void*)+0x11>
c001eb08:	b8 04 00 00 00       	mov    eax,0x4
c001eb0d:	eb 36                	jmp    c001eb45 <FAT::closeDir(void*)+0x47>
c001eb0f:	83 ec 0c             	sub    esp,0xc
c001eb12:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eb16:	e8 52 73 fe ff       	call   c0005e6d <f_closedir>
c001eb1b:	83 c4 10             	add    esp,0x10
c001eb1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eb22:	83 ec 0c             	sub    esp,0xc
c001eb25:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eb29:	e8 a4 09 ff ff       	call   c000f4d2 <free>
c001eb2e:	83 c4 10             	add    esp,0x10
c001eb31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eb35:	85 c0                	test   eax,eax
c001eb37:	75 07                	jne    c001eb40 <FAT::closeDir(void*)+0x42>
c001eb39:	b8 00 00 00 00       	mov    eax,0x0
c001eb3e:	eb 05                	jmp    c001eb45 <FAT::closeDir(void*)+0x47>
c001eb40:	b8 01 00 00 00       	mov    eax,0x1
c001eb45:	83 c4 1c             	add    esp,0x1c
c001eb48:	c3                   	ret    
c001eb49:	90                   	nop

c001eb4a <FAT::seek(void*, unsigned long long)>:
c001eb4a:	83 ec 2c             	sub    esp,0x2c
c001eb4d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001eb51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001eb55:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001eb59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eb5d:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001eb62:	75 07                	jne    c001eb6b <FAT::seek(void*, unsigned long long)+0x21>
c001eb64:	b8 04 00 00 00       	mov    eax,0x4
c001eb69:	eb 2f                	jmp    c001eb9a <FAT::seek(void*, unsigned long long)+0x50>
c001eb6b:	83 ec 04             	sub    esp,0x4
c001eb6e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001eb72:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001eb76:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001eb7a:	e8 35 6d fe ff       	call   c00058b4 <f_lseek>
c001eb7f:	83 c4 10             	add    esp,0x10
c001eb82:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001eb86:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eb8a:	85 c0                	test   eax,eax
c001eb8c:	75 07                	jne    c001eb95 <FAT::seek(void*, unsigned long long)+0x4b>
c001eb8e:	b8 00 00 00 00       	mov    eax,0x0
c001eb93:	eb 05                	jmp    c001eb9a <FAT::seek(void*, unsigned long long)+0x50>
c001eb95:	b8 01 00 00 00       	mov    eax,0x1
c001eb9a:	83 c4 2c             	add    esp,0x2c
c001eb9d:	c3                   	ret    

c001eb9e <fatWrapperReadDisk>:
c001eb9e:	83 ec 1c             	sub    esp,0x1c
c001eba1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eba5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001eba9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ebad:	89 04 24             	mov    DWORD PTR [esp],eax
c001ebb0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ebb4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ebb8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ebbd:	8b 04 85 40 b1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4ec0]
c001ebc4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ebc8:	83 ec 0c             	sub    esp,0xc
c001ebcb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ebcf:	52                   	push   edx
c001ebd0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ebd4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ebd8:	50                   	push   eax
c001ebd9:	e8 6a 70 ff ff       	call   c0015c48 <LogicalDisk::read(unsigned long long, int, void*)>
c001ebde:	83 c4 20             	add    esp,0x20
c001ebe1:	83 c4 1c             	add    esp,0x1c
c001ebe4:	c3                   	ret    

c001ebe5 <fatWrapperWriteDisk>:
c001ebe5:	83 ec 1c             	sub    esp,0x1c
c001ebe8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ebec:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ebf0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ebf4:	89 04 24             	mov    DWORD PTR [esp],eax
c001ebf7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ebfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ebff:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ec04:	8b 04 85 40 b1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4ec0]
c001ec0b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ec0f:	83 ec 0c             	sub    esp,0xc
c001ec12:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ec16:	52                   	push   edx
c001ec17:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ec1b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ec1f:	50                   	push   eax
c001ec20:	e8 8f 70 ff ff       	call   c0015cb4 <LogicalDisk::write(unsigned long long, int, void*)>
c001ec25:	83 c4 20             	add    esp,0x20
c001ec28:	83 c4 1c             	add    esp,0x1c
c001ec2b:	c3                   	ret    

c001ec2c <fatWrapperIoctl>:
c001ec2c:	53                   	push   ebx
c001ec2d:	83 ec 28             	sub    esp,0x28
c001ec30:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ec34:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ec38:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001ec3c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ec40:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001ec45:	75 31                	jne    c001ec78 <fatWrapperIoctl+0x4c>
c001ec47:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ec4b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ec4f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ec54:	8b 04 85 40 b1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4ec0]
c001ec5b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ec61:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ec67:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ec6b:	66 89 02             	mov    WORD PTR [edx],ax
c001ec6e:	b8 00 00 00 00       	mov    eax,0x0
c001ec73:	e9 b2 00 00 00       	jmp    c001ed2a <fatWrapperIoctl+0xfe>
c001ec78:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001ec7d:	75 6a                	jne    c001ece9 <fatWrapperIoctl+0xbd>
c001ec7f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ec83:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ec87:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ec8c:	8b 04 85 40 b1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4ec0]
c001ec93:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ec99:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001ec9f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001eca5:	89 c8                	mov    eax,ecx
c001eca7:	89 da                	mov    edx,ebx
c001eca9:	0f a4 c2 0a          	shld   edx,eax,0xa
c001ecad:	c1 e0 0a             	shl    eax,0xa
c001ecb0:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001ecb5:	8b 0c 8d 40 b1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4ec0]
c001ecbc:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001ecc2:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001ecc8:	89 cb                	mov    ebx,ecx
c001ecca:	c1 fb 1f             	sar    ebx,0x1f
c001eccd:	53                   	push   ebx
c001ecce:	51                   	push   ecx
c001eccf:	52                   	push   edx
c001ecd0:	50                   	push   eax
c001ecd1:	e8 d6 4d 00 00       	call   c0023aac <__udivdi3>
c001ecd6:	83 c4 10             	add    esp,0x10
c001ecd9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001ecdd:	89 01                	mov    DWORD PTR [ecx],eax
c001ecdf:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ece2:	b8 00 00 00 00       	mov    eax,0x0
c001ece7:	eb 41                	jmp    c001ed2a <fatWrapperIoctl+0xfe>
c001ece9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001ecee:	75 07                	jne    c001ecf7 <fatWrapperIoctl+0xcb>
c001ecf0:	b8 00 00 00 00       	mov    eax,0x0
c001ecf5:	eb 33                	jmp    c001ed2a <fatWrapperIoctl+0xfe>
c001ecf7:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001ecfc:	75 19                	jne    c001ed17 <fatWrapperIoctl+0xeb>
c001ecfe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ed02:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ed06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ed0a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001ed10:	b8 00 00 00 00       	mov    eax,0x0
c001ed15:	eb 13                	jmp    c001ed2a <fatWrapperIoctl+0xfe>
c001ed17:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001ed1c:	75 07                	jne    c001ed25 <fatWrapperIoctl+0xf9>
c001ed1e:	b8 00 00 00 00       	mov    eax,0x0
c001ed23:	eb 05                	jmp    c001ed2a <fatWrapperIoctl+0xfe>
c001ed25:	b8 04 00 00 00       	mov    eax,0x4
c001ed2a:	83 c4 28             	add    esp,0x28
c001ed2d:	5b                   	pop    ebx
c001ed2e:	c3                   	ret    
c001ed2f:	90                   	nop

c001ed30 <FAT::FAT()>:
c001ed30:	83 ec 1c             	sub    esp,0x1c
c001ed33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed37:	83 ec 0c             	sub    esp,0xc
c001ed3a:	50                   	push   eax
c001ed3b:	e8 fa 3b ff ff       	call   c001293a <Filesystem::Filesystem()>
c001ed40:	83 c4 10             	add    esp,0x10
c001ed43:	ba 58 92 02 c0       	mov    edx,0xc0029258
c001ed48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed4c:	89 10                	mov    DWORD PTR [eax],edx
c001ed4e:	c7 05 e0 c0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c0e0,0x0
c001ed58:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ed60:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001ed65:	7f 15                	jg     c001ed7c <FAT::FAT()+0x4c>
c001ed67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ed6b:	c7 04 85 00 c1 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3f00],0xffffffff
c001ed76:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ed7a:	eb e4                	jmp    c001ed60 <FAT::FAT()+0x30>
c001ed7c:	90                   	nop
c001ed7d:	83 c4 1c             	add    esp,0x1c
c001ed80:	c3                   	ret    
c001ed81:	90                   	nop

c001ed82 <FAT::fixFilepath(char*)>:
c001ed82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed86:	8a 00                	mov    al,BYTE PTR [eax]
c001ed88:	3c 40                	cmp    al,0x40
c001ed8a:	7e 2c                	jle    c001edb8 <FAT::fixFilepath(char*)+0x36>
c001ed8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed90:	8a 00                	mov    al,BYTE PTR [eax]
c001ed92:	83 e8 41             	sub    eax,0x41
c001ed95:	88 c2                	mov    dl,al
c001ed97:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed9b:	88 10                	mov    BYTE PTR [eax],dl
c001ed9d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eda1:	8a 00                	mov    al,BYTE PTR [eax]
c001eda3:	0f be c0             	movsx  eax,al
c001eda6:	8b 04 85 00 c1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3f00]
c001edad:	83 c0 30             	add    eax,0x30
c001edb0:	88 c2                	mov    dl,al
c001edb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001edb6:	88 10                	mov    BYTE PTR [eax],dl
c001edb8:	90                   	nop
c001edb9:	c3                   	ret    

c001edba <FAT::open(char const*, void**, FileOpenMode)>:
c001edba:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001edc0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001edc8:	74 0a                	je     c001edd4 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001edca:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001edd2:	75 0a                	jne    c001edde <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001edd4:	b8 04 00 00 00       	mov    eax,0x4
c001edd9:	e9 fd 00 00 00       	jmp    c001eedb <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001edde:	83 ec 08             	sub    esp,0x8
c001ede1:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ede8:	8d 44 24 14          	lea    eax,[esp+0x14]
c001edec:	50                   	push   eax
c001eded:	e8 2a 19 fe ff       	call   c000071c <strcpy>
c001edf2:	83 c4 10             	add    esp,0x10
c001edf5:	83 ec 08             	sub    esp,0x8
c001edf8:	8d 44 24 10          	lea    eax,[esp+0x10]
c001edfc:	50                   	push   eax
c001edfd:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ee04:	e8 79 ff ff ff       	call   c001ed82 <FAT::fixFilepath(char*)>
c001ee09:	83 c4 10             	add    esp,0x10
c001ee0c:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001ee14:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ee1b:	83 e0 01             	and    eax,0x1
c001ee1e:	74 08                	je     c001ee28 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001ee20:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001ee28:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ee2f:	83 e0 04             	and    eax,0x4
c001ee32:	74 10                	je     c001ee44 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001ee34:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001ee3c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001ee44:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ee4b:	83 e0 02             	and    eax,0x2
c001ee4e:	74 08                	je     c001ee58 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001ee50:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001ee58:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ee5f:	83 e0 08             	and    eax,0x8
c001ee62:	74 08                	je     c001ee6c <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001ee64:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001ee6c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ee73:	83 e0 10             	and    eax,0x10
c001ee76:	74 08                	je     c001ee80 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001ee78:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001ee80:	83 ec 0c             	sub    esp,0xc
c001ee83:	68 50 02 00 00       	push   0x250
c001ee88:	e8 35 06 ff ff       	call   c000f4c2 <malloc>
c001ee8d:	83 c4 10             	add    esp,0x10
c001ee90:	89 c2                	mov    edx,eax
c001ee92:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ee99:	89 10                	mov    DWORD PTR [eax],edx
c001ee9b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001eea3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001eeaa:	8b 00                	mov    eax,DWORD PTR [eax]
c001eeac:	83 ec 04             	sub    esp,0x4
c001eeaf:	52                   	push   edx
c001eeb0:	8d 54 24 10          	lea    edx,[esp+0x10]
c001eeb4:	52                   	push   edx
c001eeb5:	50                   	push   eax
c001eeb6:	e8 78 5e fe ff       	call   c0004d33 <f_open>
c001eebb:	83 c4 10             	add    esp,0x10
c001eebe:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001eec5:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001eecd:	74 07                	je     c001eed6 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001eecf:	b8 01 00 00 00       	mov    eax,0x1
c001eed4:	eb 05                	jmp    c001eedb <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001eed6:	b8 00 00 00 00       	mov    eax,0x0
c001eedb:	81 c4 1c 01 00 00    	add    esp,0x11c
c001eee1:	c3                   	ret    

c001eee2 <FAT::openDir(char const*, void**)>:
c001eee2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001eee8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001eef0:	74 0a                	je     c001eefc <FAT::openDir(char const*, void**)+0x1a>
c001eef2:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001eefa:	75 07                	jne    c001ef03 <FAT::openDir(char const*, void**)+0x21>
c001eefc:	b8 04 00 00 00       	mov    eax,0x4
c001ef01:	eb 7d                	jmp    c001ef80 <FAT::openDir(char const*, void**)+0x9e>
c001ef03:	83 ec 08             	sub    esp,0x8
c001ef06:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ef0d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ef11:	50                   	push   eax
c001ef12:	e8 05 18 fe ff       	call   c000071c <strcpy>
c001ef17:	83 c4 10             	add    esp,0x10
c001ef1a:	83 ec 08             	sub    esp,0x8
c001ef1d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ef21:	50                   	push   eax
c001ef22:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ef29:	e8 54 fe ff ff       	call   c001ed82 <FAT::fixFilepath(char*)>
c001ef2e:	83 c4 10             	add    esp,0x10
c001ef31:	83 ec 0c             	sub    esp,0xc
c001ef34:	6a 4c                	push   0x4c
c001ef36:	e8 87 05 ff ff       	call   c000f4c2 <malloc>
c001ef3b:	83 c4 10             	add    esp,0x10
c001ef3e:	89 c2                	mov    edx,eax
c001ef40:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ef47:	89 10                	mov    DWORD PTR [eax],edx
c001ef49:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ef50:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef52:	83 ec 08             	sub    esp,0x8
c001ef55:	8d 54 24 14          	lea    edx,[esp+0x14]
c001ef59:	52                   	push   edx
c001ef5a:	50                   	push   eax
c001ef5b:	e8 0b 6e fe ff       	call   c0005d6b <f_opendir>
c001ef60:	83 c4 10             	add    esp,0x10
c001ef63:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ef6a:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001ef72:	74 07                	je     c001ef7b <FAT::openDir(char const*, void**)+0x99>
c001ef74:	b8 01 00 00 00       	mov    eax,0x1
c001ef79:	eb 05                	jmp    c001ef80 <FAT::openDir(char const*, void**)+0x9e>
c001ef7b:	b8 00 00 00 00       	mov    eax,0x0
c001ef80:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ef86:	c3                   	ret    
c001ef87:	90                   	nop

c001ef88 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001ef88:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ef8e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001ef96:	75 0a                	jne    c001efa2 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001ef98:	b8 04 00 00 00       	mov    eax,0x4
c001ef9d:	e9 c9 00 00 00       	jmp    c001f06b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001efa2:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001efaa:	75 0a                	jne    c001efb6 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001efac:	b8 04 00 00 00       	mov    eax,0x4
c001efb1:	e9 b5 00 00 00       	jmp    c001f06b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001efb6:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001efbe:	75 0a                	jne    c001efca <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001efc0:	b8 04 00 00 00       	mov    eax,0x4
c001efc5:	e9 a1 00 00 00       	jmp    c001f06b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001efca:	83 ec 08             	sub    esp,0x8
c001efcd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001efd4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001efdb:	50                   	push   eax
c001efdc:	e8 3b 17 fe ff       	call   c000071c <strcpy>
c001efe1:	83 c4 10             	add    esp,0x10
c001efe4:	83 ec 08             	sub    esp,0x8
c001efe7:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001efee:	50                   	push   eax
c001efef:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001eff6:	e8 87 fd ff ff       	call   c001ed82 <FAT::fixFilepath(char*)>
c001effb:	83 c4 10             	add    esp,0x10
c001effe:	83 ec 08             	sub    esp,0x8
c001f001:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f005:	50                   	push   eax
c001f006:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001f00d:	50                   	push   eax
c001f00e:	e8 17 6f fe ff       	call   c0005f2a <f_stat>
c001f013:	83 c4 10             	add    esp,0x10
c001f016:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001f01d:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001f024:	85 c0                	test   eax,eax
c001f026:	74 07                	je     c001f02f <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001f028:	83 f8 04             	cmp    eax,0x4
c001f02b:	74 32                	je     c001f05f <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c001f02d:	eb 37                	jmp    c001f066 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c001f02f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f033:	0f b6 c0             	movzx  eax,al
c001f036:	83 e0 10             	and    eax,0x10
c001f039:	0f 95 c2             	setne  dl
c001f03c:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001f043:	88 10                	mov    BYTE PTR [eax],dl
c001f045:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f048:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f04c:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001f053:	89 01                	mov    DWORD PTR [ecx],eax
c001f055:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f058:	b8 00 00 00 00       	mov    eax,0x0
c001f05d:	eb 0c                	jmp    c001f06b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001f05f:	b8 02 00 00 00       	mov    eax,0x2
c001f064:	eb 05                	jmp    c001f06b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001f066:	b8 01 00 00 00       	mov    eax,0x1
c001f06b:	81 c4 2c 02 00 00    	add    esp,0x22c
c001f071:	c3                   	ret    

c001f072 <FAT::unlink(char const*)>:
c001f072:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f078:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f080:	75 07                	jne    c001f089 <FAT::unlink(char const*)+0x17>
c001f082:	b8 04 00 00 00       	mov    eax,0x4
c001f087:	eb 5c                	jmp    c001f0e5 <FAT::unlink(char const*)+0x73>
c001f089:	83 ec 08             	sub    esp,0x8
c001f08c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f093:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f097:	50                   	push   eax
c001f098:	e8 7f 16 fe ff       	call   c000071c <strcpy>
c001f09d:	83 c4 10             	add    esp,0x10
c001f0a0:	83 ec 08             	sub    esp,0x8
c001f0a3:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f0a7:	50                   	push   eax
c001f0a8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f0af:	e8 ce fc ff ff       	call   c001ed82 <FAT::fixFilepath(char*)>
c001f0b4:	83 c4 10             	add    esp,0x10
c001f0b7:	83 ec 0c             	sub    esp,0xc
c001f0ba:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f0be:	50                   	push   eax
c001f0bf:	e8 b8 71 fe ff       	call   c000627c <f_unlink>
c001f0c4:	83 c4 10             	add    esp,0x10
c001f0c7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001f0ce:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001f0d5:	85 c0                	test   eax,eax
c001f0d7:	75 07                	jne    c001f0e0 <FAT::unlink(char const*)+0x6e>
c001f0d9:	b8 00 00 00 00       	mov    eax,0x0
c001f0de:	eb 05                	jmp    c001f0e5 <FAT::unlink(char const*)+0x73>
c001f0e0:	b8 01 00 00 00       	mov    eax,0x1
c001f0e5:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f0eb:	c3                   	ret    

c001f0ec <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001f0ec:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001f0f2:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001f0f9:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001f100:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001f104:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001f108:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001f110:	75 0a                	jne    c001f11c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001f112:	b8 04 00 00 00       	mov    eax,0x4
c001f117:	e9 1c 01 00 00       	jmp    c001f238 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001f11c:	83 ec 08             	sub    esp,0x8
c001f11f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001f126:	8d 44 24 24          	lea    eax,[esp+0x24]
c001f12a:	50                   	push   eax
c001f12b:	e8 ec 15 fe ff       	call   c000071c <strcpy>
c001f130:	83 c4 10             	add    esp,0x10
c001f133:	83 ec 08             	sub    esp,0x8
c001f136:	8d 44 24 20          	lea    eax,[esp+0x20]
c001f13a:	50                   	push   eax
c001f13b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001f142:	e8 3b fc ff ff       	call   c001ed82 <FAT::fixFilepath(char*)>
c001f147:	83 c4 10             	add    esp,0x10
c001f14a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001f152:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001f15a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f15f:	83 e0 01             	and    eax,0x1
c001f162:	74 08                	je     c001f16c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001f164:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001f16c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f171:	83 e0 02             	and    eax,0x2
c001f174:	74 08                	je     c001f17e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001f176:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001f17e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f183:	83 e0 04             	and    eax,0x4
c001f186:	74 08                	je     c001f190 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001f188:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001f190:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f195:	83 e0 08             	and    eax,0x8
c001f198:	74 08                	je     c001f1a2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001f19a:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001f1a2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f1a7:	83 e0 01             	and    eax,0x1
c001f1aa:	74 08                	je     c001f1b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001f1ac:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001f1b4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f1b9:	83 e0 02             	and    eax,0x2
c001f1bc:	74 08                	je     c001f1c6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001f1be:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001f1c6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f1cb:	83 e0 04             	and    eax,0x4
c001f1ce:	74 08                	je     c001f1d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001f1d0:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001f1d8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f1dd:	83 e0 08             	and    eax,0x8
c001f1e0:	74 08                	je     c001f1ea <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001f1e2:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001f1ea:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001f1f1:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001f1f8:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001f200:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001f208:	83 ec 04             	sub    esp,0x4
c001f20b:	52                   	push   edx
c001f20c:	50                   	push   eax
c001f20d:	8d 44 24 24          	lea    eax,[esp+0x24]
c001f211:	50                   	push   eax
c001f212:	e8 07 77 fe ff       	call   c000691e <f_chmod>
c001f217:	83 c4 10             	add    esp,0x10
c001f21a:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001f221:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001f228:	85 c0                	test   eax,eax
c001f22a:	75 07                	jne    c001f233 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001f22c:	b8 00 00 00 00       	mov    eax,0x0
c001f231:	eb 05                	jmp    c001f238 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001f233:	b8 01 00 00 00       	mov    eax,0x1
c001f238:	81 c4 2c 01 00 00    	add    esp,0x12c
c001f23e:	c3                   	ret    
c001f23f:	90                   	nop

c001f240 <FAT::rename(char const*, char const*)>:
c001f240:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001f246:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001f24e:	74 0a                	je     c001f25a <FAT::rename(char const*, char const*)+0x1a>
c001f250:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001f258:	75 0a                	jne    c001f264 <FAT::rename(char const*, char const*)+0x24>
c001f25a:	b8 04 00 00 00       	mov    eax,0x4
c001f25f:	e9 98 00 00 00       	jmp    c001f2fc <FAT::rename(char const*, char const*)+0xbc>
c001f264:	83 ec 08             	sub    esp,0x8
c001f267:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001f26e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001f275:	50                   	push   eax
c001f276:	e8 a1 14 fe ff       	call   c000071c <strcpy>
c001f27b:	83 c4 10             	add    esp,0x10
c001f27e:	83 ec 08             	sub    esp,0x8
c001f281:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001f288:	50                   	push   eax
c001f289:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001f290:	e8 ed fa ff ff       	call   c001ed82 <FAT::fixFilepath(char*)>
c001f295:	83 c4 10             	add    esp,0x10
c001f298:	83 ec 08             	sub    esp,0x8
c001f29b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001f2a2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f2a6:	50                   	push   eax
c001f2a7:	e8 70 14 fe ff       	call   c000071c <strcpy>
c001f2ac:	83 c4 10             	add    esp,0x10
c001f2af:	83 ec 08             	sub    esp,0x8
c001f2b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f2b6:	50                   	push   eax
c001f2b7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001f2be:	e8 bf fa ff ff       	call   c001ed82 <FAT::fixFilepath(char*)>
c001f2c3:	83 c4 10             	add    esp,0x10
c001f2c6:	83 ec 08             	sub    esp,0x8
c001f2c9:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f2cd:	50                   	push   eax
c001f2ce:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001f2d5:	50                   	push   eax
c001f2d6:	e8 50 73 fe ff       	call   c000662b <f_rename>
c001f2db:	83 c4 10             	add    esp,0x10
c001f2de:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001f2e5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001f2ec:	85 c0                	test   eax,eax
c001f2ee:	75 07                	jne    c001f2f7 <FAT::rename(char const*, char const*)+0xb7>
c001f2f0:	b8 00 00 00 00       	mov    eax,0x0
c001f2f5:	eb 05                	jmp    c001f2fc <FAT::rename(char const*, char const*)+0xbc>
c001f2f7:	b8 01 00 00 00       	mov    eax,0x1
c001f2fc:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f302:	c3                   	ret    
c001f303:	90                   	nop

c001f304 <FAT::mkdir(char const*)>:
c001f304:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f30a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f312:	75 07                	jne    c001f31b <FAT::mkdir(char const*)+0x17>
c001f314:	b8 04 00 00 00       	mov    eax,0x4
c001f319:	eb 5c                	jmp    c001f377 <FAT::mkdir(char const*)+0x73>
c001f31b:	83 ec 08             	sub    esp,0x8
c001f31e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f325:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f329:	50                   	push   eax
c001f32a:	e8 ed 13 fe ff       	call   c000071c <strcpy>
c001f32f:	83 c4 10             	add    esp,0x10
c001f332:	83 ec 08             	sub    esp,0x8
c001f335:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f339:	50                   	push   eax
c001f33a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f341:	e8 3c fa ff ff       	call   c001ed82 <FAT::fixFilepath(char*)>
c001f346:	83 c4 10             	add    esp,0x10
c001f349:	83 ec 0c             	sub    esp,0xc
c001f34c:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f350:	50                   	push   eax
c001f351:	e8 a9 70 fe ff       	call   c00063ff <f_mkdir>
c001f356:	83 c4 10             	add    esp,0x10
c001f359:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001f360:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001f367:	85 c0                	test   eax,eax
c001f369:	75 07                	jne    c001f372 <FAT::mkdir(char const*)+0x6e>
c001f36b:	b8 00 00 00 00       	mov    eax,0x0
c001f370:	eb 05                	jmp    c001f377 <FAT::mkdir(char const*)+0x73>
c001f372:	b8 01 00 00 00       	mov    eax,0x1
c001f377:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f37d:	c3                   	ret    

c001f37e <FAT::exists(char const*)>:
c001f37e:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001f384:	83 ec 08             	sub    esp,0x8
c001f387:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001f38e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f392:	50                   	push   eax
c001f393:	e8 84 13 fe ff       	call   c000071c <strcpy>
c001f398:	83 c4 10             	add    esp,0x10
c001f39b:	83 ec 08             	sub    esp,0x8
c001f39e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f3a2:	50                   	push   eax
c001f3a3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001f3aa:	e8 d3 f9 ff ff       	call   c001ed82 <FAT::fixFilepath(char*)>
c001f3af:	83 c4 10             	add    esp,0x10
c001f3b2:	83 ec 08             	sub    esp,0x8
c001f3b5:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001f3bc:	50                   	push   eax
c001f3bd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f3c1:	50                   	push   eax
c001f3c2:	e8 63 6b fe ff       	call   c0005f2a <f_stat>
c001f3c7:	83 c4 10             	add    esp,0x10
c001f3ca:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001f3d1:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001f3d8:	85 c0                	test   eax,eax
c001f3da:	75 04                	jne    c001f3e0 <FAT::exists(char const*)+0x62>
c001f3dc:	b0 01                	mov    al,0x1
c001f3de:	eb 02                	jmp    c001f3e2 <FAT::exists(char const*)+0x64>
c001f3e0:	b0 00                	mov    al,0x0
c001f3e2:	81 c4 2c 02 00 00    	add    esp,0x22c
c001f3e8:	c3                   	ret    
c001f3e9:	90                   	nop

c001f3ea <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001f3ea:	b8 08 00 00 00       	mov    eax,0x8
c001f3ef:	c3                   	ret    

c001f3f0 <ISO9660::seek(void*, unsigned long long)>:
c001f3f0:	53                   	push   ebx
c001f3f1:	b8 04 00 00 00       	mov    eax,0x4
c001f3f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f3fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f3fe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f402:	85 d2                	test   edx,edx
c001f404:	74 17                	je     c001f41d <ISO9660::seek(void*, unsigned long long)+0x2d>
c001f406:	89 c8                	mov    eax,ecx
c001f408:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001f40b:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001f40e:	b8 01 00 00 00       	mov    eax,0x1
c001f413:	73 08                	jae    c001f41d <ISO9660::seek(void*, unsigned long long)+0x2d>
c001f415:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001f418:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001f41b:	31 c0                	xor    eax,eax
c001f41d:	5b                   	pop    ebx
c001f41e:	c3                   	ret    
c001f41f:	90                   	nop

c001f420 <ISO9660::tell(void*, unsigned long long*)>:
c001f420:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f424:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f428:	85 d2                	test   edx,edx
c001f42a:	74 12                	je     c001f43e <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001f42c:	85 c0                	test   eax,eax
c001f42e:	74 0e                	je     c001f43e <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001f430:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001f433:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001f436:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001f439:	89 10                	mov    DWORD PTR [eax],edx
c001f43b:	31 c0                	xor    eax,eax
c001f43d:	c3                   	ret    
c001f43e:	b8 04 00 00 00       	mov    eax,0x4
c001f443:	c3                   	ret    

c001f444 <ISO9660::getName()>:
c001f444:	b8 b4 92 02 c0       	mov    eax,0xc00292b4
c001f449:	c3                   	ret    

c001f44a <ISO9660::stat(void*, unsigned long long*)>:
c001f44a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f44e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f452:	85 d2                	test   edx,edx
c001f454:	74 12                	je     c001f468 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001f456:	85 c0                	test   eax,eax
c001f458:	74 0e                	je     c001f468 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001f45a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001f45d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001f460:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001f463:	89 10                	mov    DWORD PTR [eax],edx
c001f465:	31 c0                	xor    eax,eax
c001f467:	c3                   	ret    
c001f468:	b8 04 00 00 00       	mov    eax,0x4
c001f46d:	c3                   	ret    

c001f46e <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001f46e:	b8 01 00 00 00       	mov    eax,0x1
c001f473:	c3                   	ret    

c001f474 <ISO9660::unlink(char const*)>:
c001f474:	b8 01 00 00 00       	mov    eax,0x1
c001f479:	c3                   	ret    

c001f47a <ISO9660::write(void*, unsigned long, void*, int*)>:
c001f47a:	b8 01 00 00 00       	mov    eax,0x1
c001f47f:	c3                   	ret    

c001f480 <ISO9660::rename(char const*, char const*)>:
c001f480:	b8 01 00 00 00       	mov    eax,0x1
c001f485:	c3                   	ret    

c001f486 <ISO9660::mkdir(char const*)>:
c001f486:	b8 01 00 00 00       	mov    eax,0x1
c001f48b:	c3                   	ret    

c001f48c <ISO9660::close(void*)>:
c001f48c:	83 ec 0c             	sub    esp,0xc
c001f48f:	b8 04 00 00 00       	mov    eax,0x4
c001f494:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f498:	85 d2                	test   edx,edx
c001f49a:	74 0e                	je     c001f4aa <ISO9660::close(void*)+0x1e>
c001f49c:	83 ec 0c             	sub    esp,0xc
c001f49f:	52                   	push   edx
c001f4a0:	e8 2d 00 ff ff       	call   c000f4d2 <free>
c001f4a5:	83 c4 10             	add    esp,0x10
c001f4a8:	31 c0                	xor    eax,eax
c001f4aa:	83 c4 0c             	add    esp,0xc
c001f4ad:	c3                   	ret    

c001f4ae <ISO9660::closeDir(void*)>:
c001f4ae:	83 ec 0c             	sub    esp,0xc
c001f4b1:	b8 04 00 00 00       	mov    eax,0x4
c001f4b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f4ba:	85 d2                	test   edx,edx
c001f4bc:	74 0e                	je     c001f4cc <ISO9660::closeDir(void*)+0x1e>
c001f4be:	83 ec 0c             	sub    esp,0xc
c001f4c1:	52                   	push   edx
c001f4c2:	e8 0b 00 ff ff       	call   c000f4d2 <free>
c001f4c7:	83 c4 10             	add    esp,0x10
c001f4ca:	31 c0                	xor    eax,eax
c001f4cc:	83 c4 0c             	add    esp,0xc
c001f4cf:	c3                   	ret    

c001f4d0 <ISO9660::~ISO9660()>:
c001f4d0:	83 ec 0c             	sub    esp,0xc
c001f4d3:	ba 08 93 02 c0       	mov    edx,0xc0029308
c001f4d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4dc:	89 10                	mov    DWORD PTR [eax],edx
c001f4de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4e2:	83 ec 0c             	sub    esp,0xc
c001f4e5:	50                   	push   eax
c001f4e6:	e8 73 34 ff ff       	call   c001295e <Filesystem::~Filesystem()>
c001f4eb:	83 c4 10             	add    esp,0x10
c001f4ee:	90                   	nop
c001f4ef:	83 c4 0c             	add    esp,0xc
c001f4f2:	c3                   	ret    
c001f4f3:	90                   	nop

c001f4f4 <ISO9660::~ISO9660()>:
c001f4f4:	83 ec 0c             	sub    esp,0xc
c001f4f7:	83 ec 0c             	sub    esp,0xc
c001f4fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4fe:	e8 cd ff ff ff       	call   c001f4d0 <ISO9660::~ISO9660()>
c001f503:	83 c4 10             	add    esp,0x10
c001f506:	83 ec 08             	sub    esp,0x8
c001f509:	6a 08                	push   0x8
c001f50b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f50f:	e8 41 30 ff ff       	call   c0012555 <operator delete(void*, unsigned long)>
c001f514:	83 c4 10             	add    esp,0x10
c001f517:	83 c4 0c             	add    esp,0xc
c001f51a:	c3                   	ret    

c001f51b <__memmem(unsigned char*, int, unsigned char*, int)>:
c001f51b:	55                   	push   ebp
c001f51c:	31 c9                	xor    ecx,ecx
c001f51e:	57                   	push   edi
c001f51f:	56                   	push   esi
c001f520:	53                   	push   ebx
c001f521:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001f525:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f529:	89 eb                	mov    ebx,ebp
c001f52b:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001f52f:	39 ce                	cmp    esi,ecx
c001f531:	7e 17                	jle    c001f54a <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001f533:	31 d2                	xor    edx,edx
c001f535:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001f539:	7d 13                	jge    c001f54e <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001f53b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f53f:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001f542:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001f545:	75 0d                	jne    c001f554 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001f547:	42                   	inc    edx
c001f548:	eb eb                	jmp    c001f535 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001f54a:	31 c0                	xor    eax,eax
c001f54c:	eb 0a                	jmp    c001f558 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001f54e:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001f552:	eb 04                	jmp    c001f558 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001f554:	41                   	inc    ecx
c001f555:	43                   	inc    ebx
c001f556:	eb d7                	jmp    c001f52f <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001f558:	5b                   	pop    ebx
c001f559:	5e                   	pop    esi
c001f55a:	5f                   	pop    edi
c001f55b:	5d                   	pop    ebp
c001f55c:	c3                   	ret    

c001f55d <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001f55d:	56                   	push   esi
c001f55e:	53                   	push   ebx
c001f55f:	52                   	push   edx
c001f560:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f564:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f568:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f56c:	39 0d e0 c1 02 c0    	cmp    DWORD PTR ds:0xc002c1e0,ecx
c001f572:	75 08                	jne    c001f57c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001f574:	38 05 e8 a0 02 c0    	cmp    BYTE PTR ds:0xc002a0e8,al
c001f57a:	74 2b                	je     c001f5a7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001f57c:	83 ec 0c             	sub    esp,0xc
c001f57f:	a2 e8 a0 02 c0       	mov    ds:0xc002a0e8,al
c001f584:	68 00 c2 02 c0       	push   0xc002c200
c001f589:	0f be c0             	movsx  eax,al
c001f58c:	6a 01                	push   0x1
c001f58e:	89 0d e0 c1 02 c0    	mov    DWORD PTR ds:0xc002c1e0,ecx
c001f594:	31 db                	xor    ebx,ebx
c001f596:	53                   	push   ebx
c001f597:	51                   	push   ecx
c001f598:	ff 34 85 3c b0 02 c0 	push   DWORD PTR [eax*4-0x3ffd4fc4]
c001f59f:	e8 a4 66 ff ff       	call   c0015c48 <LogicalDisk::read(unsigned long long, int, void*)>
c001f5a4:	83 c4 20             	add    esp,0x20
c001f5a7:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001f5af:	c7 44 24 14 00 c2 02 c0 	mov    DWORD PTR [esp+0x14],0xc002c200
c001f5b7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001f5bb:	58                   	pop    eax
c001f5bc:	5b                   	pop    ebx
c001f5bd:	5e                   	pop    esi
c001f5be:	e9 84 10 fe ff       	jmp    c0000647 <memcpy>
c001f5c3:	90                   	nop

c001f5c4 <ISO9660::tryMount(LogicalDisk*, int)>:
c001f5c4:	81 ec 10 08 00 00    	sub    esp,0x810
c001f5ca:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001f5d1:	83 c0 41             	add    eax,0x41
c001f5d4:	0f be c0             	movsx  eax,al
c001f5d7:	50                   	push   eax
c001f5d8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f5dc:	50                   	push   eax
c001f5dd:	6a 10                	push   0x10
c001f5df:	e8 79 ff ff ff       	call   c001f55d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f5e4:	83 c4 10             	add    esp,0x10
c001f5e7:	31 c0                	xor    eax,eax
c001f5e9:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001f5ee:	75 1d                	jne    c001f60d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f5f0:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001f5f5:	75 16                	jne    c001f60d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f5f7:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001f5fc:	75 0f                	jne    c001f60d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f5fe:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001f603:	75 08                	jne    c001f60d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f605:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001f60a:	0f 94 c0             	sete   al
c001f60d:	81 c4 0c 08 00 00    	add    esp,0x80c
c001f613:	c3                   	ret    

c001f614 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001f614:	55                   	push   ebp
c001f615:	57                   	push   edi
c001f616:	56                   	push   esi
c001f617:	53                   	push   ebx
c001f618:	81 ec 34 08 00 00    	sub    esp,0x834
c001f61e:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001f625:	55                   	push   ebp
c001f626:	68 cf 92 02 c0       	push   0xc00292cf
c001f62b:	e8 05 30 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001f630:	83 c4 10             	add    esp,0x10
c001f633:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001f63b:	0f 84 06 02 00 00    	je     c001f847 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001f641:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001f649:	0f 84 f8 01 00 00    	je     c001f847 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001f64f:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001f656:	b8 01 00 00 00       	mov    eax,0x1
c001f65b:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001f65f:	0f 85 e7 01 00 00    	jne    c001f84c <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001f665:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001f668:	31 d2                	xor    edx,edx
c001f66a:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001f66d:	89 e9                	mov    ecx,ebp
c001f66f:	89 d3                	mov    ebx,edx
c001f671:	01 f1                	add    ecx,esi
c001f673:	11 fb                	adc    ebx,edi
c001f675:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001f679:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001f67d:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001f684:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001f687:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001f68a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f68e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001f692:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f696:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f69a:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001f69e:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001f6a2:	72 19                	jb     c001f6bd <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001f6a4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f6a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6b0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001f6b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f6b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f6bb:	eb 13                	jmp    c001f6d0 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001f6bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f6c1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f6c5:	29 f0                	sub    eax,esi
c001f6c7:	19 fa                	sbb    edx,edi
c001f6c9:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6cc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f6d0:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001f6d7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001f6da:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6dc:	53                   	push   ebx
c001f6dd:	0f a4 c2 0b          	shld   edx,eax,0xb
c001f6e1:	c1 e0 0b             	shl    eax,0xb
c001f6e4:	01 c6                	add    esi,eax
c001f6e6:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f6ed:	11 d7                	adc    edi,edx
c001f6ef:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f6f3:	89 fa                	mov    edx,edi
c001f6f5:	50                   	push   eax
c001f6f6:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f6fa:	50                   	push   eax
c001f6fb:	89 f0                	mov    eax,esi
c001f6fd:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f701:	50                   	push   eax
c001f702:	e8 56 fe ff ff       	call   c001f55d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f707:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001f70e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f712:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001f715:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001f719:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001f71f:	83 c4 10             	add    esp,0x10
c001f722:	b8 00 08 00 00       	mov    eax,0x800
c001f727:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001f72b:	29 d0                	sub    eax,edx
c001f72d:	39 c1                	cmp    ecx,eax
c001f72f:	83 db 00             	sbb    ebx,0x0
c001f732:	7d 19                	jge    c001f74d <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001f734:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001f739:	75 16                	jne    c001f751 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001f73b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f742:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f748:	e9 f6 00 00 00       	jmp    c001f843 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001f74d:	89 c5                	mov    ebp,eax
c001f74f:	eb 03                	jmp    c001f754 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001f751:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001f754:	51                   	push   ecx
c001f755:	55                   	push   ebp
c001f756:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001f75a:	50                   	push   eax
c001f75b:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001f762:	e8 e0 0e fe ff       	call   c0000647 <memcpy>
c001f767:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f76b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f76f:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001f776:	01 e8                	add    eax,ebp
c001f778:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f77c:	89 e8                	mov    eax,ebp
c001f77e:	99                   	cdq    
c001f77f:	01 ee                	add    esi,ebp
c001f781:	11 d7                	adc    edi,edx
c001f783:	29 e9                	sub    ecx,ebp
c001f785:	19 d3                	sbb    ebx,edx
c001f787:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001f78b:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001f78f:	83 c4 10             	add    esp,0x10
c001f792:	b8 ff 07 00 00       	mov    eax,0x7ff
c001f797:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001f79a:	b8 00 00 00 00       	mov    eax,0x0
c001f79f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001f7a3:	7d 3f                	jge    c001f7e4 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001f7a5:	52                   	push   edx
c001f7a6:	89 fa                	mov    edx,edi
c001f7a8:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f7af:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f7b3:	50                   	push   eax
c001f7b4:	89 f0                	mov    eax,esi
c001f7b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f7ba:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f7be:	50                   	push   eax
c001f7bf:	e8 99 fd ff ff       	call   c001f55d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f7c4:	81 c6 00 08 00 00    	add    esi,0x800
c001f7ca:	83 d7 00             	adc    edi,0x0
c001f7cd:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001f7d5:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001f7dd:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001f7e2:	eb ab                	jmp    c001f78f <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001f7e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7e8:	0b 04 24             	or     eax,DWORD PTR [esp]
c001f7eb:	74 34                	je     c001f821 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001f7ed:	89 fa                	mov    edx,edi
c001f7ef:	50                   	push   eax
c001f7f0:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f7f7:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f7fb:	50                   	push   eax
c001f7fc:	89 f0                	mov    eax,esi
c001f7fe:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001f802:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f806:	55                   	push   ebp
c001f807:	50                   	push   eax
c001f808:	e8 50 fd ff ff       	call   c001f55d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f80d:	83 c4 0c             	add    esp,0xc
c001f810:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001f814:	55                   	push   ebp
c001f815:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f819:	e8 29 0e fe ff       	call   c0000647 <memcpy>
c001f81e:	83 c4 10             	add    esp,0x10
c001f821:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f828:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f82c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f830:	89 38                	mov    DWORD PTR [eax],edi
c001f832:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001f839:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f83d:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001f840:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f843:	31 c0                	xor    eax,eax
c001f845:	eb 05                	jmp    c001f84c <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001f847:	b8 04 00 00 00       	mov    eax,0x4
c001f84c:	81 c4 2c 08 00 00    	add    esp,0x82c
c001f852:	5b                   	pop    ebx
c001f853:	5e                   	pop    esi
c001f854:	5f                   	pop    edi
c001f855:	5d                   	pop    ebp
c001f856:	c3                   	ret    
c001f857:	90                   	nop

c001f858 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001f858:	55                   	push   ebp
c001f859:	57                   	push   edi
c001f85a:	56                   	push   esi
c001f85b:	53                   	push   ebx
c001f85c:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001f862:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001f869:	85 f6                	test   esi,esi
c001f86b:	0f 84 64 02 00 00    	je     c001fad5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001f871:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001f879:	0f 84 56 02 00 00    	je     c001fad5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001f87f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001f882:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001f885:	75 0a                	jne    c001f891 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001f887:	b8 07 00 00 00       	mov    eax,0x7
c001f88c:	e9 49 02 00 00       	jmp    c001fada <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001f891:	50                   	push   eax
c001f892:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001f896:	50                   	push   eax
c001f897:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001f89e:	53                   	push   ebx
c001f89f:	8b 06                	mov    eax,DWORD PTR [esi]
c001f8a1:	c1 e0 0b             	shl    eax,0xb
c001f8a4:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001f8a7:	c1 e8 0b             	shr    eax,0xb
c001f8aa:	50                   	push   eax
c001f8ab:	e8 ad fc ff ff       	call   c001f55d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f8b0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f8b3:	83 c4 10             	add    esp,0x10
c001f8b6:	89 c1                	mov    ecx,eax
c001f8b8:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001f8bb:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f8c1:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001f8c4:	84 db                	test   bl,bl
c001f8c6:	0f 85 90 00 00 00    	jne    c001f95c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001f8cc:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001f8d2:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f8d8:	29 c7                	sub    edi,eax
c001f8da:	89 fb                	mov    ebx,edi
c001f8dc:	c1 fb 1f             	sar    ebx,0x1f
c001f8df:	01 f8                	add    eax,edi
c001f8e1:	11 da                	adc    edx,ebx
c001f8e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f8e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f8eb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001f8ee:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001f8f1:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001f8f4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001f8f7:	89 04 24             	mov    DWORD PTR [esp],eax
c001f8fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f8fe:	89 d8                	mov    eax,ebx
c001f900:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f903:	ba 00 00 00 00       	mov    edx,0x0
c001f908:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001f90c:	b8 00 00 00 00       	mov    eax,0x0
c001f911:	73 0b                	jae    c001f91e <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001f913:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f916:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f91a:	29 f8                	sub    eax,edi
c001f91c:	19 da                	sbb    edx,ebx
c001f91e:	89 d3                	mov    ebx,edx
c001f920:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001f923:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001f926:	09 c3                	or     ebx,eax
c001f928:	0f 84 59 ff ff ff    	je     c001f887 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001f92e:	55                   	push   ebp
c001f92f:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001f933:	50                   	push   eax
c001f934:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001f93b:	53                   	push   ebx
c001f93c:	8b 06                	mov    eax,DWORD PTR [esi]
c001f93e:	c1 e0 0b             	shl    eax,0xb
c001f941:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001f945:	c1 e8 0b             	shr    eax,0xb
c001f948:	50                   	push   eax
c001f949:	e8 0f fc ff ff       	call   c001f55d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f94e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f951:	83 c4 10             	add    esp,0x10
c001f954:	25 ff 07 00 00       	and    eax,0x7ff
c001f959:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001f95c:	57                   	push   edi
c001f95d:	6a 28                	push   0x28
c001f95f:	6a 00                	push   0x0
c001f961:	8d 44 24 24          	lea    eax,[esp+0x24]
c001f965:	50                   	push   eax
c001f966:	e8 12 0d fe ff       	call   c000067d <memset>
c001f96b:	31 d2                	xor    edx,edx
c001f96d:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001f970:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f976:	89 f8                	mov    eax,edi
c001f978:	83 c0 21             	add    eax,0x21
c001f97b:	83 d2 00             	adc    edx,0x0
c001f97e:	89 c7                	mov    edi,eax
c001f980:	89 d5                	mov    ebp,edx
c001f982:	83 c4 10             	add    esp,0x10
c001f985:	31 c9                	xor    ecx,ecx
c001f987:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001f98e:	83 f9 28             	cmp    ecx,0x28
c001f991:	88 04 24             	mov    BYTE PTR [esp],al
c001f994:	0f 94 c2             	sete   dl
c001f997:	88 d0                	mov    al,dl
c001f999:	ba ff 07 00 00       	mov    edx,0x7ff
c001f99e:	39 fa                	cmp    edx,edi
c001f9a0:	ba 00 00 00 00       	mov    edx,0x0
c001f9a5:	19 ea                	sbb    edx,ebp
c001f9a7:	0f 92 c2             	setb   dl
c001f9aa:	09 c2                	or     edx,eax
c001f9ac:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001f9b0:	0f 94 c0             	sete   al
c001f9b3:	08 d0                	or     al,dl
c001f9b5:	75 16                	jne    c001f9cd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001f9b7:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001f9bb:	74 10                	je     c001f9cd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001f9bd:	8a 04 24             	mov    al,BYTE PTR [esp]
c001f9c0:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001f9c4:	41                   	inc    ecx
c001f9c5:	83 c7 01             	add    edi,0x1
c001f9c8:	83 d5 00             	adc    ebp,0x0
c001f9cb:	eb ba                	jmp    c001f987 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001f9cd:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001f9d4:	83 ec 0c             	sub    esp,0xc
c001f9d7:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001f9db:	57                   	push   edi
c001f9dc:	e8 b9 0c fe ff       	call   c000069a <strlen>
c001f9e1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001f9e9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001f9ed:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001f9f4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f9f7:	5a                   	pop    edx
c001f9f8:	25 ff 07 00 00       	and    eax,0x7ff
c001f9fd:	01 c8                	add    eax,ecx
c001f9ff:	59                   	pop    ecx
c001fa00:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001fa06:	83 e0 02             	and    eax,0x2
c001fa09:	3c 01                	cmp    al,0x1
c001fa0b:	19 c0                	sbb    eax,eax
c001fa0d:	83 c0 02             	add    eax,0x2
c001fa10:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001fa14:	57                   	push   edi
c001fa15:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001fa19:	50                   	push   eax
c001fa1a:	e8 fd 0c fe ff       	call   c000071c <strcpy>
c001fa1f:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001fa23:	83 c4 10             	add    esp,0x10
c001fa26:	84 c0                	test   al,al
c001fa28:	75 21                	jne    c001fa4b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001fa2a:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001fa32:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001fa3a:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001fa42:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001fa49:	eb 28                	jmp    c001fa73 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001fa4b:	fe c8                	dec    al
c001fa4d:	75 24                	jne    c001fa73 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001fa4f:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001fa57:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001fa5f:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001fa67:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001fa6e:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001fa73:	0f b6 fb             	movzx  edi,bl
c001fa76:	31 db                	xor    ebx,ebx
c001fa78:	50                   	push   eax
c001fa79:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001fa80:	8d 44 24 48          	lea    eax,[esp+0x48]
c001fa84:	50                   	push   eax
c001fa85:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001fa8c:	e8 b6 0b fe ff       	call   c0000647 <memcpy>
c001fa91:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001fa98:	89 f9                	mov    ecx,edi
c001fa9a:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001faa0:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001faa3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001faa6:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001faa9:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001faac:	83 c4 10             	add    esp,0x10
c001faaf:	39 c7                	cmp    edi,eax
c001fab1:	89 df                	mov    edi,ebx
c001fab3:	19 d7                	sbb    edi,edx
c001fab5:	72 10                	jb     c001fac7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001fab7:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001fabe:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001fac5:	eb 0a                	jmp    c001fad1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001fac7:	29 c8                	sub    eax,ecx
c001fac9:	19 da                	sbb    edx,ebx
c001facb:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001face:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001fad1:	31 c0                	xor    eax,eax
c001fad3:	eb 05                	jmp    c001fada <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001fad5:	b8 04 00 00 00       	mov    eax,0x4
c001fada:	81 c4 5c 09 00 00    	add    esp,0x95c
c001fae0:	5b                   	pop    ebx
c001fae1:	5e                   	pop    esi
c001fae2:	5f                   	pop    edi
c001fae3:	5d                   	pop    ebp
c001fae4:	c3                   	ret    

c001fae5 <readRoot(unsigned int*, unsigned int*, char)>:
c001fae5:	81 ec 40 08 00 00    	sub    esp,0x840
c001faeb:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001faf3:	50                   	push   eax
c001faf4:	8d 44 24 38          	lea    eax,[esp+0x38]
c001faf8:	50                   	push   eax
c001faf9:	6a 10                	push   0x10
c001fafb:	e8 5d fa ff ff       	call   c001f55d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001fb00:	83 c4 0c             	add    esp,0xc
c001fb03:	6a 22                	push   0x22
c001fb05:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001fb0c:	50                   	push   eax
c001fb0d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001fb11:	50                   	push   eax
c001fb12:	e8 30 0b fe ff       	call   c0000647 <memcpy>
c001fb17:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001fb1e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001fb22:	89 10                	mov    DWORD PTR [eax],edx
c001fb24:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001fb2b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fb2f:	89 10                	mov    DWORD PTR [eax],edx
c001fb31:	b0 01                	mov    al,0x1
c001fb33:	81 c4 4c 08 00 00    	add    esp,0x84c
c001fb39:	c3                   	ret    

c001fb3a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001fb3a:	55                   	push   ebp
c001fb3b:	57                   	push   edi
c001fb3c:	56                   	push   esi
c001fb3d:	53                   	push   ebx
c001fb3e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001fb44:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001fb4b:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001fb52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fb56:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001fb5a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001fb5e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fb62:	75 03                	jne    c001fb67 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001fb64:	83 c3 02             	add    ebx,0x2
c001fb67:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001fb6a:	75 03                	jne    c001fb6f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001fb6c:	43                   	inc    ebx
c001fb6d:	eb f8                	jmp    c001fb67 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001fb6f:	51                   	push   ecx
c001fb70:	68 00 01 00 00       	push   0x100
c001fb75:	6a 00                	push   0x0
c001fb77:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fb7b:	50                   	push   eax
c001fb7c:	e8 fc 0a fe ff       	call   c000067d <memset>
c001fb81:	83 c4 10             	add    esp,0x10
c001fb84:	31 d2                	xor    edx,edx
c001fb86:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001fb89:	84 c0                	test   al,al
c001fb8b:	74 21                	je     c001fbae <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001fb8d:	3c 2f                	cmp    al,0x2f
c001fb8f:	75 0b                	jne    c001fb9c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001fb91:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001fb95:	bd 01 00 00 00       	mov    ebp,0x1
c001fb9a:	eb 14                	jmp    c001fbb0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001fb9c:	8d 48 9f             	lea    ecx,[eax-0x61]
c001fb9f:	80 f9 19             	cmp    cl,0x19
c001fba2:	77 03                	ja     c001fba7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001fba4:	83 e8 20             	sub    eax,0x20
c001fba7:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001fbab:	42                   	inc    edx
c001fbac:	eb d8                	jmp    c001fb86 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001fbae:	31 ed                	xor    ebp,ebp
c001fbb0:	83 ec 0c             	sub    esp,0xc
c001fbb3:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001fbba:	e8 03 f9 fe ff       	call   c000f4c2 <malloc>
c001fbbf:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001fbc6:	89 c6                	mov    esi,eax
c001fbc8:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001fbce:	c1 ef 0b             	shr    edi,0xb
c001fbd1:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001fbd8:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001fbdc:	83 c4 10             	add    esp,0x10
c001fbdf:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001fbe4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fbe8:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001fbef:	74 28                	je     c001fc19 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001fbf1:	52                   	push   edx
c001fbf2:	57                   	push   edi
c001fbf3:	50                   	push   eax
c001fbf4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fbf8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001fbff:	e8 59 f9 ff ff       	call   c001f55d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001fc04:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fc08:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001fc0f:	05 00 08 00 00       	add    eax,0x800
c001fc14:	83 c4 10             	add    esp,0x10
c001fc17:	eb cb                	jmp    c001fbe4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001fc19:	83 ec 0c             	sub    esp,0xc
c001fc1c:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001fc20:	57                   	push   edi
c001fc21:	e8 74 0a fe ff       	call   c000069a <strlen>
c001fc26:	50                   	push   eax
c001fc27:	57                   	push   edi
c001fc28:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001fc2f:	56                   	push   esi
c001fc30:	e8 e6 f8 ff ff       	call   c001f51b <__memmem(unsigned char*, int, unsigned char*, int)>
c001fc35:	83 c4 20             	add    esp,0x20
c001fc38:	85 c0                	test   eax,eax
c001fc3a:	75 13                	jne    c001fc4f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001fc3c:	83 ec 0c             	sub    esp,0xc
c001fc3f:	56                   	push   esi
c001fc40:	e8 8d f8 fe ff       	call   c000f4d2 <free>
c001fc45:	83 c4 10             	add    esp,0x10
c001fc48:	31 c0                	xor    eax,eax
c001fc4a:	e9 b3 00 00 00       	jmp    c001fd02 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001fc4f:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001fc53:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001fc57:	c1 e7 08             	shl    edi,0x8
c001fc5a:	c1 e2 10             	shl    edx,0x10
c001fc5d:	09 d7                	or     edi,edx
c001fc5f:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001fc63:	09 d7                	or     edi,edx
c001fc65:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001fc69:	c1 e2 18             	shl    edx,0x18
c001fc6c:	09 d7                	or     edi,edx
c001fc6e:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001fc72:	89 d1                	mov    ecx,edx
c001fc74:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001fc78:	c1 e1 08             	shl    ecx,0x8
c001fc7b:	c1 e2 10             	shl    edx,0x10
c001fc7e:	09 ca                	or     edx,ecx
c001fc80:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001fc84:	09 ca                	or     edx,ecx
c001fc86:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001fc8a:	c1 e1 18             	shl    ecx,0x18
c001fc8d:	09 ca                	or     edx,ecx
c001fc8f:	89 e9                	mov    ecx,ebp
c001fc91:	84 c9                	test   cl,cl
c001fc93:	74 3c                	je     c001fcd1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001fc95:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001fc99:	83 ec 0c             	sub    esp,0xc
c001fc9c:	56                   	push   esi
c001fc9d:	e8 30 f8 fe ff       	call   c000f4d2 <free>
c001fca2:	83 c4 0c             	add    esp,0xc
c001fca5:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001fcac:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001fcb1:	50                   	push   eax
c001fcb2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001fcb9:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001fcc0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fcc4:	52                   	push   edx
c001fcc5:	57                   	push   edi
c001fcc6:	53                   	push   ebx
c001fcc7:	e8 6e fe ff ff       	call   c001fb3a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001fccc:	83 c4 20             	add    esp,0x20
c001fccf:	eb 31                	jmp    c001fd02 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001fcd1:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001fcd4:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001fcdb:	d0 e8                	shr    al,1
c001fcdd:	89 3b                	mov    DWORD PTR [ebx],edi
c001fcdf:	83 e0 01             	and    eax,0x1
c001fce2:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001fce9:	83 ec 0c             	sub    esp,0xc
c001fcec:	89 13                	mov    DWORD PTR [ebx],edx
c001fcee:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001fcf5:	89 03                	mov    DWORD PTR [ebx],eax
c001fcf7:	56                   	push   esi
c001fcf8:	e8 d5 f7 fe ff       	call   c000f4d2 <free>
c001fcfd:	83 c4 10             	add    esp,0x10
c001fd00:	b0 01                	mov    al,0x1
c001fd02:	81 c4 1c 01 00 00    	add    esp,0x11c
c001fd08:	5b                   	pop    ebx
c001fd09:	5e                   	pop    esi
c001fd0a:	5f                   	pop    edi
c001fd0b:	5d                   	pop    ebp
c001fd0c:	c3                   	ret    

c001fd0d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001fd0d:	55                   	push   ebp
c001fd0e:	57                   	push   edi
c001fd0f:	56                   	push   esi
c001fd10:	53                   	push   ebx
c001fd11:	83 ec 20             	sub    esp,0x20
c001fd14:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001fd18:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001fd1c:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001fd20:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fd28:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001fd30:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001fd35:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001fd3b:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001fd41:	57                   	push   edi
c001fd42:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fd46:	50                   	push   eax
c001fd47:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fd4b:	50                   	push   eax
c001fd4c:	e8 94 fd ff ff       	call   c001fae5 <readRoot(unsigned int*, unsigned int*, char)>
c001fd51:	5a                   	pop    edx
c001fd52:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001fd56:	e8 3f 09 fe ff       	call   c000069a <strlen>
c001fd5b:	83 c4 10             	add    esp,0x10
c001fd5e:	83 f8 03             	cmp    eax,0x3
c001fd61:	77 17                	ja     c001fd7a <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001fd63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fd67:	89 03                	mov    DWORD PTR [ebx],eax
c001fd69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd6d:	89 06                	mov    DWORD PTR [esi],eax
c001fd6f:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001fd76:	b0 01                	mov    al,0x1
c001fd78:	eb 19                	jmp    c001fd93 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001fd7a:	50                   	push   eax
c001fd7b:	55                   	push   ebp
c001fd7c:	57                   	push   edi
c001fd7d:	56                   	push   esi
c001fd7e:	53                   	push   ebx
c001fd7f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001fd83:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001fd87:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001fd8b:	e8 aa fd ff ff       	call   c001fb3a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001fd90:	83 c4 20             	add    esp,0x20
c001fd93:	83 c4 1c             	add    esp,0x1c
c001fd96:	5b                   	pop    ebx
c001fd97:	5e                   	pop    esi
c001fd98:	5f                   	pop    edi
c001fd99:	5d                   	pop    ebp
c001fd9a:	c3                   	ret    
c001fd9b:	90                   	nop

c001fd9c <ISO9660::open(char const*, void**, FileOpenMode)>:
c001fd9c:	57                   	push   edi
c001fd9d:	56                   	push   esi
c001fd9e:	53                   	push   ebx
c001fd9f:	83 ec 10             	sub    esp,0x10
c001fda2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001fda6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001fdaa:	85 ff                	test   edi,edi
c001fdac:	74 7b                	je     c001fe29 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001fdae:	85 f6                	test   esi,esi
c001fdb0:	74 77                	je     c001fe29 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001fdb2:	83 ec 0c             	sub    esp,0xc
c001fdb5:	6a 1c                	push   0x1c
c001fdb7:	e8 06 f7 fe ff       	call   c000f4c2 <malloc>
c001fdbc:	89 07                	mov    DWORD PTR [edi],eax
c001fdbe:	89 c3                	mov    ebx,eax
c001fdc0:	58                   	pop    eax
c001fdc1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fdc5:	50                   	push   eax
c001fdc6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001fdc9:	50                   	push   eax
c001fdca:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fdce:	50                   	push   eax
c001fdcf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fdd3:	50                   	push   eax
c001fdd4:	56                   	push   esi
c001fdd5:	e8 33 ff ff ff       	call   c001fd0d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001fdda:	83 c4 20             	add    esp,0x20
c001fddd:	84 c0                	test   al,al
c001fddf:	74 07                	je     c001fde8 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001fde1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fde6:	74 0b                	je     c001fdf3 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001fde8:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001fdec:	b8 01 00 00 00       	mov    eax,0x1
c001fdf1:	eb 3b                	jmp    c001fe2e <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001fdf3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdf7:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001fdfb:	89 03                	mov    DWORD PTR [ebx],eax
c001fdfd:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001fe04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe08:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001fe0f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001fe16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001fe19:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001fe20:	8a 06                	mov    al,BYTE PTR [esi]
c001fe22:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001fe25:	31 c0                	xor    eax,eax
c001fe27:	eb 05                	jmp    c001fe2e <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001fe29:	b8 04 00 00 00       	mov    eax,0x4
c001fe2e:	83 c4 10             	add    esp,0x10
c001fe31:	5b                   	pop    ebx
c001fe32:	5e                   	pop    esi
c001fe33:	5f                   	pop    edi
c001fe34:	c3                   	ret    
c001fe35:	90                   	nop

c001fe36 <ISO9660::exists(char const*)>:
c001fe36:	83 ec 28             	sub    esp,0x28
c001fe39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fe3d:	8d 54 24 18          	lea    edx,[esp+0x18]
c001fe41:	52                   	push   edx
c001fe42:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001fe45:	52                   	push   edx
c001fe46:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001fe4a:	52                   	push   edx
c001fe4b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001fe4f:	52                   	push   edx
c001fe50:	50                   	push   eax
c001fe51:	e8 b7 fe ff ff       	call   c001fd0d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001fe56:	83 c4 3c             	add    esp,0x3c
c001fe59:	c3                   	ret    

c001fe5a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001fe5a:	56                   	push   esi
c001fe5b:	53                   	push   ebx
c001fe5c:	83 ec 14             	sub    esp,0x14
c001fe5f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001fe63:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001fe67:	85 db                	test   ebx,ebx
c001fe69:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001fe6d:	0f 94 c2             	sete   dl
c001fe70:	85 f6                	test   esi,esi
c001fe72:	0f 94 c0             	sete   al
c001fe75:	08 c2                	or     dl,al
c001fe77:	75 68                	jne    c001fee1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001fe79:	85 c9                	test   ecx,ecx
c001fe7b:	74 64                	je     c001fee1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001fe7d:	83 ec 0c             	sub    esp,0xc
c001fe80:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001fe83:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fe87:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001fe8d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001fe94:	50                   	push   eax
c001fe95:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001fe98:	50                   	push   eax
c001fe99:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fe9d:	50                   	push   eax
c001fe9e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fea2:	50                   	push   eax
c001fea3:	51                   	push   ecx
c001fea4:	e8 64 fe ff ff       	call   c001fd0d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001fea9:	83 c4 20             	add    esp,0x20
c001feac:	ba 01 00 00 00       	mov    edx,0x1
c001feb1:	84 c0                	test   al,al
c001feb3:	74 31                	je     c001fee6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001feb5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001feb9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001fec0:	89 03                	mov    DWORD PTR [ebx],eax
c001fec2:	ba 00 00 00 00       	mov    edx,0x0
c001fec7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fecb:	85 c0                	test   eax,eax
c001fecd:	0f 95 06             	setne  BYTE PTR [esi]
c001fed0:	74 14                	je     c001fee6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001fed2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001fed8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001fedf:	eb 05                	jmp    c001fee6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001fee1:	ba 04 00 00 00       	mov    edx,0x4
c001fee6:	83 c4 14             	add    esp,0x14
c001fee9:	89 d0                	mov    eax,edx
c001feeb:	5b                   	pop    ebx
c001feec:	5e                   	pop    esi
c001feed:	c3                   	ret    

c001feee <ISO9660::openDir(char const*, void**)>:
c001feee:	57                   	push   edi
c001feef:	56                   	push   esi
c001fef0:	53                   	push   ebx
c001fef1:	83 ec 10             	sub    esp,0x10
c001fef4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001fef8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001fefc:	85 ff                	test   edi,edi
c001fefe:	0f 84 95 00 00 00    	je     c001ff99 <ISO9660::openDir(char const*, void**)+0xab>
c001ff04:	85 f6                	test   esi,esi
c001ff06:	0f 84 8d 00 00 00    	je     c001ff99 <ISO9660::openDir(char const*, void**)+0xab>
c001ff0c:	83 ec 0c             	sub    esp,0xc
c001ff0f:	6a 1c                	push   0x1c
c001ff11:	e8 ac f5 fe ff       	call   c000f4c2 <malloc>
c001ff16:	89 07                	mov    DWORD PTR [edi],eax
c001ff18:	89 c3                	mov    ebx,eax
c001ff1a:	59                   	pop    ecx
c001ff1b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ff1f:	50                   	push   eax
c001ff20:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ff23:	50                   	push   eax
c001ff24:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ff28:	50                   	push   eax
c001ff29:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ff2d:	50                   	push   eax
c001ff2e:	56                   	push   esi
c001ff2f:	e8 d9 fd ff ff       	call   c001fd0d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ff34:	83 c4 20             	add    esp,0x20
c001ff37:	84 c0                	test   al,al
c001ff39:	74 07                	je     c001ff42 <ISO9660::openDir(char const*, void**)+0x54>
c001ff3b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ff40:	75 21                	jne    c001ff63 <ISO9660::openDir(char const*, void**)+0x75>
c001ff42:	0f b6 c0             	movzx  eax,al
c001ff45:	52                   	push   edx
c001ff46:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ff4a:	50                   	push   eax
c001ff4b:	68 e2 92 02 c0       	push   0xc00292e2
c001ff50:	e8 e0 26 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c001ff55:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ff59:	83 c4 10             	add    esp,0x10
c001ff5c:	b8 01 00 00 00       	mov    eax,0x1
c001ff61:	eb 3b                	jmp    c001ff9e <ISO9660::openDir(char const*, void**)+0xb0>
c001ff63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff67:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001ff6b:	89 03                	mov    DWORD PTR [ebx],eax
c001ff6d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001ff74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff78:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001ff7f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ff86:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ff89:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ff90:	8a 06                	mov    al,BYTE PTR [esi]
c001ff92:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001ff95:	31 c0                	xor    eax,eax
c001ff97:	eb 05                	jmp    c001ff9e <ISO9660::openDir(char const*, void**)+0xb0>
c001ff99:	b8 04 00 00 00       	mov    eax,0x4
c001ff9e:	83 c4 10             	add    esp,0x10
c001ffa1:	5b                   	pop    ebx
c001ffa2:	5e                   	pop    esi
c001ffa3:	5f                   	pop    edi
c001ffa4:	c3                   	ret    
c001ffa5:	90                   	nop

c001ffa6 <ISO9660::ISO9660()>:
c001ffa6:	83 ec 0c             	sub    esp,0xc
c001ffa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffad:	83 ec 0c             	sub    esp,0xc
c001ffb0:	50                   	push   eax
c001ffb1:	e8 84 29 ff ff       	call   c001293a <Filesystem::Filesystem()>
c001ffb6:	83 c4 10             	add    esp,0x10
c001ffb9:	ba 08 93 02 c0       	mov    edx,0xc0029308
c001ffbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffc2:	89 10                	mov    DWORD PTR [eax],edx
c001ffc4:	90                   	nop
c001ffc5:	83 c4 0c             	add    esp,0xc
c001ffc8:	c3                   	ret    
c001ffc9:	90                   	nop

c001ffca <SoundChannel::~SoundChannel()>:
c001ffca:	83 ec 0c             	sub    esp,0xc
c001ffcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffd1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ffd4:	83 ec 0c             	sub    esp,0xc
c001ffd7:	50                   	push   eax
c001ffd8:	e8 f5 f4 fe ff       	call   c000f4d2 <free>
c001ffdd:	83 c4 10             	add    esp,0x10
c001ffe0:	90                   	nop
c001ffe1:	83 c4 0c             	add    esp,0xc
c001ffe4:	c3                   	ret    
c001ffe5:	90                   	nop

c001ffe6 <SoundChannel::setSpeed(float)>:
c001ffe6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ffee:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001fff1:	c3                   	ret    

c001fff2 <SoundChannel::getSpeed()>:
c001fff2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fff6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001fff9:	c3                   	ret    

c001fffa <SoundChannel::setVolume(int)>:
c001fffa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fffe:	83 f8 64             	cmp    eax,0x64
c0020001:	7e 05                	jle    c0020008 <SoundChannel::setVolume(int)+0xe>
c0020003:	b8 64 00 00 00       	mov    eax,0x64
c0020008:	85 c0                	test   eax,eax
c002000a:	79 02                	jns    c002000e <SoundChannel::setVolume(int)+0x14>
c002000c:	31 c0                	xor    eax,eax
c002000e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020012:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0020015:	c3                   	ret    

c0020016 <SoundChannel::getVolume()>:
c0020016:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002001a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c002001d:	c3                   	ret    

c002001e <SoundChannel::pause()>:
c002001e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020022:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0020026:	c3                   	ret    
c0020027:	90                   	nop

c0020028 <SoundChannel::SoundChannel(int, int, int, int)>:
c0020028:	83 ec 1c             	sub    esp,0x1c
c002002b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002002f:	e8 ea ff ff ff       	call   c002001e <SoundChannel::pause()>
c0020034:	83 c4 04             	add    esp,0x4
c0020037:	6a 50                	push   0x50
c0020039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002003d:	e8 b8 ff ff ff       	call   c001fffa <SoundChannel::setVolume(int)>
c0020042:	83 c4 08             	add    esp,0x8
c0020045:	a1 80 93 02 c0       	mov    eax,ds:0xc0029380
c002004a:	50                   	push   eax
c002004b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002004f:	e8 92 ff ff ff       	call   c001ffe6 <SoundChannel::setSpeed(float)>
c0020054:	83 c4 08             	add    esp,0x8
c0020057:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002005b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002005f:	89 10                	mov    DWORD PTR [eax],edx
c0020061:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020065:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020069:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002006c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020070:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020074:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020077:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c002007c:	75 23                	jne    c00200a1 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c002007e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020082:	8b 10                	mov    edx,DWORD PTR [eax]
c0020084:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020088:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002008b:	0f af c2             	imul   eax,edx
c002008e:	85 c0                	test   eax,eax
c0020090:	79 03                	jns    c0020095 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0020092:	83 c0 03             	add    eax,0x3
c0020095:	c1 f8 02             	sar    eax,0x2
c0020098:	05 a0 0f 00 00       	add    eax,0xfa0
c002009d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00200a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00200a5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00200a9:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00200ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00200b0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00200b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00200bb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00200c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00200c6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00200c9:	c1 e0 02             	shl    eax,0x2
c00200cc:	83 ec 0c             	sub    esp,0xc
c00200cf:	50                   	push   eax
c00200d0:	e8 ed f3 fe ff       	call   c000f4c2 <malloc>
c00200d5:	83 c4 10             	add    esp,0x10
c00200d8:	89 c2                	mov    edx,eax
c00200da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00200de:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00200e1:	83 ec 04             	sub    esp,0x4
c00200e4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00200e8:	50                   	push   eax
c00200e9:	6a 01                	push   0x1
c00200eb:	6a 04                	push   0x4
c00200ed:	e8 4f 88 fe ff       	call   c0008941 <src_new>
c00200f2:	83 c4 10             	add    esp,0x10
c00200f5:	89 c2                	mov    edx,eax
c00200f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00200fb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00200fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020102:	85 c0                	test   eax,eax
c0020104:	74 10                	je     c0020116 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0020106:	83 ec 0c             	sub    esp,0xc
c0020109:	68 64 93 02 c0       	push   0xc0029364
c002010e:	e8 e6 8c ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c0020113:	83 c4 10             	add    esp,0x10
c0020116:	a0 00 ce 02 c0       	mov    al,ds:0xc002ce00
c002011b:	83 f0 01             	xor    eax,0x1
c002011e:	84 c0                	test   al,al
c0020120:	74 57                	je     c0020179 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0020122:	a1 84 93 02 c0       	mov    eax,ds:0xc0029384
c0020127:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002012b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020133:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c002013b:	7f 35                	jg     c0020172 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c002013d:	83 ec 0c             	sub    esp,0xc
c0020140:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020144:	e8 8e 42 00 00       	call   c00243d7 <__floatsisf>
c0020149:	83 c4 10             	add    esp,0x10
c002014c:	8b 15 84 93 02 c0    	mov    edx,DWORD PTR ds:0xc0029384
c0020152:	83 ec 08             	sub    esp,0x8
c0020155:	52                   	push   edx
c0020156:	50                   	push   eax
c0020157:	e8 8d 3e 00 00       	call   c0023fe9 <__mulsf3>
c002015c:	83 c4 10             	add    esp,0x10
c002015f:	89 c2                	mov    edx,eax
c0020161:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020165:	89 14 85 00 ca 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3600],edx
c002016c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020170:	eb c1                	jmp    c0020133 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0020172:	c6 05 00 ce 02 c0 01 	mov    BYTE PTR ds:0xc002ce00,0x1
c0020179:	90                   	nop
c002017a:	83 c4 1c             	add    esp,0x1c
c002017d:	c3                   	ret    

c002017e <SoundChannel::play()>:
c002017e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020182:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0020186:	c3                   	ret    
c0020187:	90                   	nop

c0020188 <SoundChannel::paused()>:
c0020188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002018c:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c002018f:	c3                   	ret    

c0020190 <SoundChannel::getSampleRate()>:
c0020190:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020194:	8b 00                	mov    eax,DWORD PTR [eax]
c0020196:	c3                   	ret    
c0020197:	90                   	nop

c0020198 <SoundChannel::getBits()>:
c0020198:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002019c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002019f:	c3                   	ret    

c00201a0 <SoundChannel::getBufferUsed()>:
c00201a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201a4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00201a7:	c3                   	ret    

c00201a8 <SoundChannel::getBufferSize()>:
c00201a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201ac:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00201af:	c3                   	ret    

c00201b0 <SoundChannel::unbuffer(float*, int, int)>:
c00201b0:	56                   	push   esi
c00201b1:	53                   	push   ebx
c00201b2:	83 ec 40             	sub    esp,0x40
c00201b5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00201b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00201bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00201c0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00201c3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00201c7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00201cb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00201cf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00201d3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00201d7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00201db:	e8 f7 41 00 00       	call   c00243d7 <__floatsisf>
c00201e0:	5a                   	pop    edx
c00201e1:	89 c6                	mov    esi,eax
c00201e3:	ff 33                	push   DWORD PTR [ebx]
c00201e5:	e8 ed 41 00 00       	call   c00243d7 <__floatsisf>
c00201ea:	59                   	pop    ecx
c00201eb:	5a                   	pop    edx
c00201ec:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00201ef:	50                   	push   eax
c00201f0:	e8 f4 3d 00 00       	call   c0023fe9 <__mulsf3>
c00201f5:	59                   	pop    ecx
c00201f6:	5a                   	pop    edx
c00201f7:	50                   	push   eax
c00201f8:	56                   	push   esi
c00201f9:	e8 ae 3f 00 00       	call   c00241ac <__divsf3>
c00201fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0020201:	e8 a1 54 00 00       	call   c00256a7 <__extendsfdf2>
c0020206:	59                   	pop    ecx
c0020207:	5e                   	pop    esi
c0020208:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002020c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0020210:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0020218:	8d 44 24 14          	lea    eax,[esp+0x14]
c002021c:	50                   	push   eax
c002021d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0020220:	e8 11 83 fe ff       	call   c0008536 <src_process>
c0020225:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020229:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c002022c:	83 c4 0c             	add    esp,0xc
c002022f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0020232:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0020235:	29 d0                	sub    eax,edx
c0020237:	c1 e0 02             	shl    eax,0x2
c002023a:	50                   	push   eax
c002023b:	8d 04 91             	lea    eax,[ecx+edx*4]
c002023e:	50                   	push   eax
c002023f:	51                   	push   ecx
c0020240:	e8 ca 03 fe ff       	call   c000060f <memmove>
c0020245:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020249:	83 c4 44             	add    esp,0x44
c002024c:	5b                   	pop    ebx
c002024d:	5e                   	pop    esi
c002024e:	c3                   	ret    
c002024f:	90                   	nop

c0020250 <SoundChannel::buffer8(unsigned char*, int)>:
c0020250:	55                   	push   ebp
c0020251:	57                   	push   edi
c0020252:	56                   	push   esi
c0020253:	53                   	push   ebx
c0020254:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020258:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002025c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002025f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020263:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0020266:	74 7a                	je     c00202e2 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0020268:	85 ff                	test   edi,edi
c002026a:	7e 76                	jle    c00202e2 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002026c:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0020270:	8d 70 01             	lea    esi,[eax+0x1]
c0020273:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0020276:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0020279:	8b 1c 9d 00 ca 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3600]
c0020280:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0020283:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0020286:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0020289:	74 5e                	je     c00202e9 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c002028b:	83 ff 01             	cmp    edi,0x1
c002028e:	74 4b                	je     c00202db <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0020290:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0020294:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0020297:	8d 70 01             	lea    esi,[eax+0x1]
c002029a:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002029d:	8b 1c 9d 00 ca 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3600]
c00202a4:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00202a7:	b8 02 00 00 00       	mov    eax,0x2
c00202ac:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00202af:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00202b2:	75 23                	jne    c00202d7 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00202b4:	eb 27                	jmp    c00202dd <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00202b6:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00202bb:	8d 71 01             	lea    esi,[ecx+0x1]
c00202be:	40                   	inc    eax
c00202bf:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00202c2:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00202c5:	8b 1c 9d 00 ca 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3600]
c00202cc:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00202cf:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00202d2:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00202d5:	74 06                	je     c00202dd <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00202d7:	39 c7                	cmp    edi,eax
c00202d9:	75 db                	jne    c00202b6 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00202db:	89 f8                	mov    eax,edi
c00202dd:	5b                   	pop    ebx
c00202de:	5e                   	pop    esi
c00202df:	5f                   	pop    edi
c00202e0:	5d                   	pop    ebp
c00202e1:	c3                   	ret    
c00202e2:	5b                   	pop    ebx
c00202e3:	31 c0                	xor    eax,eax
c00202e5:	5e                   	pop    esi
c00202e6:	5f                   	pop    edi
c00202e7:	5d                   	pop    ebp
c00202e8:	c3                   	ret    
c00202e9:	b8 01 00 00 00       	mov    eax,0x1
c00202ee:	eb ed                	jmp    c00202dd <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00202f0 <SoundDevice::SoundDevice(char const*)>:
c00202f0:	83 ec 1c             	sub    esp,0x1c
c00202f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00202f7:	83 ec 08             	sub    esp,0x8
c00202fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00202fe:	50                   	push   eax
c00202ff:	e8 10 39 ff ff       	call   c0013c14 <Device::Device(char const*)>
c0020304:	83 c4 10             	add    esp,0x10
c0020307:	ba 90 93 02 c0       	mov    edx,0xc0029390
c002030c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020310:	89 10                	mov    DWORD PTR [eax],edx
c0020312:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020316:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0020320:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020324:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c002032e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020336:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002033b:	7f 19                	jg     c0020356 <SoundDevice::SoundDevice(char const*)+0x66>
c002033d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020341:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020345:	83 c2 54             	add    edx,0x54
c0020348:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0020350:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020354:	eb e0                	jmp    c0020336 <SoundDevice::SoundDevice(char const*)+0x46>
c0020356:	90                   	nop
c0020357:	83 c4 1c             	add    esp,0x1c
c002035a:	c3                   	ret    
c002035b:	90                   	nop

c002035c <SoundDevice::~SoundDevice()>:
c002035c:	53                   	push   ebx
c002035d:	83 ec 18             	sub    esp,0x18
c0020360:	ba 90 93 02 c0       	mov    edx,0xc0029390
c0020365:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020369:	89 10                	mov    DWORD PTR [eax],edx
c002036b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020373:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0020378:	7f 46                	jg     c00203c0 <SoundDevice::~SoundDevice()+0x64>
c002037a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002037e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020382:	83 c2 54             	add    edx,0x54
c0020385:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0020389:	85 c0                	test   eax,eax
c002038b:	74 2d                	je     c00203ba <SoundDevice::~SoundDevice()+0x5e>
c002038d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020391:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020395:	83 c2 54             	add    edx,0x54
c0020398:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c002039c:	85 db                	test   ebx,ebx
c002039e:	74 1a                	je     c00203ba <SoundDevice::~SoundDevice()+0x5e>
c00203a0:	83 ec 0c             	sub    esp,0xc
c00203a3:	53                   	push   ebx
c00203a4:	e8 21 fc ff ff       	call   c001ffca <SoundChannel::~SoundChannel()>
c00203a9:	83 c4 10             	add    esp,0x10
c00203ac:	83 ec 08             	sub    esp,0x8
c00203af:	6a 2c                	push   0x2c
c00203b1:	53                   	push   ebx
c00203b2:	e8 9e 21 ff ff       	call   c0012555 <operator delete(void*, unsigned long)>
c00203b7:	83 c4 10             	add    esp,0x10
c00203ba:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00203be:	eb b3                	jmp    c0020373 <SoundDevice::~SoundDevice()+0x17>
c00203c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00203c4:	83 ec 0c             	sub    esp,0xc
c00203c7:	50                   	push   eax
c00203c8:	e8 29 35 ff ff       	call   c00138f6 <Device::~Device()>
c00203cd:	83 c4 10             	add    esp,0x10
c00203d0:	90                   	nop
c00203d1:	83 c4 18             	add    esp,0x18
c00203d4:	5b                   	pop    ebx
c00203d5:	c3                   	ret    

c00203d6 <SoundDevice::~SoundDevice()>:
c00203d6:	83 ec 0c             	sub    esp,0xc
c00203d9:	83 ec 0c             	sub    esp,0xc
c00203dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203e0:	e8 77 ff ff ff       	call   c002035c <SoundDevice::~SoundDevice()>
c00203e5:	83 c4 10             	add    esp,0x10
c00203e8:	83 ec 08             	sub    esp,0x8
c00203eb:	68 e4 01 00 00       	push   0x1e4
c00203f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203f4:	e8 5c 21 ff ff       	call   c0012555 <operator delete(void*, unsigned long)>
c00203f9:	83 c4 10             	add    esp,0x10
c00203fc:	83 c4 0c             	add    esp,0xc
c00203ff:	c3                   	ret    

c0020400 <SoundDevice::getFreeChannelNum()>:
c0020400:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020404:	31 c0                	xor    eax,eax
c0020406:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c002040e:	74 09                	je     c0020419 <SoundDevice::getFreeChannelNum()+0x19>
c0020410:	40                   	inc    eax
c0020411:	83 f8 20             	cmp    eax,0x20
c0020414:	75 f0                	jne    c0020406 <SoundDevice::getFreeChannelNum()+0x6>
c0020416:	83 c8 ff             	or     eax,0xffffffff
c0020419:	c3                   	ret    

c002041a <SoundDevice::addChannel(SoundChannel*)>:
c002041a:	56                   	push   esi
c002041b:	53                   	push   ebx
c002041c:	51                   	push   ecx
c002041d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020421:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0020425:	53                   	push   ebx
c0020426:	e8 d5 ff ff ff       	call   c0020400 <SoundDevice::getFreeChannelNum()>
c002042b:	5a                   	pop    edx
c002042c:	83 f8 ff             	cmp    eax,0xffffffff
c002042f:	74 51                	je     c0020482 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0020431:	85 f6                	test   esi,esi
c0020433:	74 4d                	je     c0020482 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0020435:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c002043c:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0020443:	75 30                	jne    c0020475 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0020445:	83 ec 0c             	sub    esp,0xc
c0020448:	56                   	push   esi
c0020449:	e8 42 fd ff ff       	call   c0020190 <SoundChannel::getSampleRate()>
c002044e:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0020454:	89 34 24             	mov    DWORD PTR [esp],esi
c0020457:	e8 3c fd ff ff       	call   c0020198 <SoundChannel::getBits()>
c002045c:	83 c4 0c             	add    esp,0xc
c002045f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0020465:	8b 13                	mov    edx,DWORD PTR [ebx]
c0020467:	50                   	push   eax
c0020468:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002046e:	53                   	push   ebx
c002046f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0020472:	83 c4 10             	add    esp,0x10
c0020475:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c002047b:	b8 01 00 00 00       	mov    eax,0x1
c0020480:	eb 03                	jmp    c0020485 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0020482:	83 c8 ff             	or     eax,0xffffffff
c0020485:	5a                   	pop    edx
c0020486:	5b                   	pop    ebx
c0020487:	5e                   	pop    esi
c0020488:	c3                   	ret    
c0020489:	90                   	nop

c002048a <SoundDevice::removeChannel(int)>:
c002048a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002048e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020492:	83 fa 1f             	cmp    edx,0x1f
c0020495:	77 23                	ja     c00204ba <SoundDevice::removeChannel(int)+0x30>
c0020497:	8d 14 90             	lea    edx,[eax+edx*4]
c002049a:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00204a1:	74 17                	je     c00204ba <SoundDevice::removeChannel(int)+0x30>
c00204a3:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00204ad:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00204b3:	75 05                	jne    c00204ba <SoundDevice::removeChannel(int)+0x30>
c00204b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00204b7:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c00204ba:	c3                   	ret    
c00204bb:	90                   	nop

c00204bc <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00204bc:	57                   	push   edi
c00204bd:	56                   	push   esi
c00204be:	53                   	push   ebx
c00204bf:	31 db                	xor    ebx,ebx
c00204c1:	83 ec 10             	sub    esp,0x10
c00204c4:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00204c8:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00204cc:	0f 8d cb 00 00 00    	jge    c002059d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00204d2:	83 ec 0c             	sub    esp,0xc
c00204d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00204d9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00204dc:	e8 c6 51 00 00       	call   c00256a7 <__extendsfdf2>
c00204e1:	83 c4 10             	add    esp,0x10
c00204e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00204e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00204ec:	68 00 00 f0 3f       	push   0x3ff00000
c00204f1:	6a 00                	push   0x0
c00204f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00204f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00204fb:	e8 33 41 00 00       	call   c0024633 <__adddf3>
c0020500:	83 c4 10             	add    esp,0x10
c0020503:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002050b:	68 00 00 e0 3f       	push   0x3fe00000
c0020510:	6a 00                	push   0x0
c0020512:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020516:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002051a:	e8 91 47 00 00       	call   c0024cb0 <__muldf3>
c002051f:	83 c4 10             	add    esp,0x10
c0020522:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020526:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002052a:	68 00 00 60 40       	push   0x40600000
c002052f:	6a 00                	push   0x0
c0020531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020539:	e8 72 47 00 00       	call   c0024cb0 <__muldf3>
c002053e:	59                   	pop    ecx
c002053f:	5f                   	pop    edi
c0020540:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020544:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0020548:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002054c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020550:	e8 2e 50 00 00       	call   c0025583 <__truncdfsf2>
c0020555:	5a                   	pop    edx
c0020556:	89 c7                	mov    edi,eax
c0020558:	59                   	pop    ecx
c0020559:	68 00 00 fe 42       	push   0x42fe0000
c002055e:	50                   	push   eax
c002055f:	e8 c9 40 00 00       	call   c002462d <__gesf2>
c0020564:	83 c4 10             	add    esp,0x10
c0020567:	85 c0                	test   eax,eax
c0020569:	78 06                	js     c0020571 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c002056b:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002056f:	eb 26                	jmp    c0020597 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0020571:	50                   	push   eax
c0020572:	50                   	push   eax
c0020573:	6a 00                	push   0x0
c0020575:	57                   	push   edi
c0020576:	e8 b6 40 00 00       	call   c0024631 <__lesf2>
c002057b:	83 c4 10             	add    esp,0x10
c002057e:	85 c0                	test   eax,eax
c0020580:	7f 06                	jg     c0020588 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0020582:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0020586:	eb 0f                	jmp    c0020597 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0020588:	83 ec 0c             	sub    esp,0xc
c002058b:	57                   	push   edi
c002058c:	e8 ab 51 00 00       	call   c002573c <lrintf>
c0020591:	83 c4 10             	add    esp,0x10
c0020594:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0020597:	43                   	inc    ebx
c0020598:	e9 2b ff ff ff       	jmp    c00204c8 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002059d:	83 c4 10             	add    esp,0x10
c00205a0:	5b                   	pop    ebx
c00205a1:	5e                   	pop    esi
c00205a2:	5f                   	pop    edi
c00205a3:	c3                   	ret    

c00205a4 <SoundDevice::getAudio(int, float*, float*)>:
c00205a4:	55                   	push   ebp
c00205a5:	57                   	push   edi
c00205a6:	56                   	push   esi
c00205a7:	53                   	push   ebx
c00205a8:	31 db                	xor    ebx,ebx
c00205aa:	83 ec 20             	sub    esp,0x20
c00205ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00205b1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00205b5:	c1 e0 02             	shl    eax,0x2
c00205b8:	50                   	push   eax
c00205b9:	6a 00                	push   0x0
c00205bb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00205bf:	e8 b9 00 fe ff       	call   c000067d <memset>
c00205c4:	83 c4 10             	add    esp,0x10
c00205c7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00205cb:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00205d2:	85 c0                	test   eax,eax
c00205d4:	0f 84 d7 00 00 00    	je     c00206b1 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00205da:	83 ec 0c             	sub    esp,0xc
c00205dd:	50                   	push   eax
c00205de:	e8 a5 fb ff ff       	call   c0020188 <SoundChannel::paused()>
c00205e3:	83 c4 10             	add    esp,0x10
c00205e6:	84 c0                	test   al,al
c00205e8:	0f 85 c3 00 00 00    	jne    c00206b1 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00205ee:	83 ec 0c             	sub    esp,0xc
c00205f1:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00205f8:	e8 19 fa ff ff       	call   c0020016 <SoundChannel::getVolume()>
c00205fd:	83 c4 10             	add    esp,0x10
c0020600:	85 c0                	test   eax,eax
c0020602:	0f 84 a9 00 00 00    	je     c00206b1 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0020608:	83 ec 0c             	sub    esp,0xc
c002060b:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0020612:	e8 ff f9 ff ff       	call   c0020016 <SoundChannel::getVolume()>
c0020617:	83 ec 0c             	sub    esp,0xc
c002061a:	50                   	push   eax
c002061b:	e8 b7 3d 00 00       	call   c00243d7 <__floatsisf>
c0020620:	59                   	pop    ecx
c0020621:	5d                   	pop    ebp
c0020622:	31 ed                	xor    ebp,ebp
c0020624:	68 00 00 c8 42       	push   0x42c80000
c0020629:	50                   	push   eax
c002062a:	e8 7d 3b 00 00       	call   c00241ac <__divsf3>
c002062f:	83 c4 10             	add    esp,0x10
c0020632:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020636:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c002063a:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0020640:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0020644:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002064b:	e8 60 fb ff ff       	call   c00201b0 <SoundChannel::unbuffer(float*, int, int)>
c0020650:	83 c4 20             	add    esp,0x20
c0020653:	89 c1                	mov    ecx,eax
c0020655:	39 cd                	cmp    ebp,ecx
c0020657:	7d 52                	jge    c00206ab <SoundDevice::getAudio(int, float*, float*)+0x107>
c0020659:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002065d:	50                   	push   eax
c002065e:	50                   	push   eax
c002065f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020663:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0020666:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002066a:	e8 7a 39 00 00       	call   c0023fe9 <__mulsf3>
c002066f:	5a                   	pop    edx
c0020670:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020674:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c002067a:	e8 58 3d 00 00       	call   c00243d7 <__floatsisf>
c002067f:	59                   	pop    ecx
c0020680:	5a                   	pop    edx
c0020681:	50                   	push   eax
c0020682:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020686:	e8 21 3b 00 00       	call   c00241ac <__divsf3>
c002068b:	59                   	pop    ecx
c002068c:	5a                   	pop    edx
c002068d:	50                   	push   eax
c002068e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020692:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0020695:	e8 2c 36 00 00       	call   c0023cc6 <__addsf3>
c002069a:	83 c4 10             	add    esp,0x10
c002069d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00206a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00206a5:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00206a8:	45                   	inc    ebp
c00206a9:	eb aa                	jmp    c0020655 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00206ab:	39 cf                	cmp    edi,ecx
c00206ad:	7e 02                	jle    c00206b1 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00206af:	89 cf                	mov    edi,ecx
c00206b1:	43                   	inc    ebx
c00206b2:	83 fb 20             	cmp    ebx,0x20
c00206b5:	0f 85 10 ff ff ff    	jne    c00205cb <SoundDevice::getAudio(int, float*, float*)+0x27>
c00206bb:	83 c4 1c             	add    esp,0x1c
c00206be:	89 f8                	mov    eax,edi
c00206c0:	5b                   	pop    ebx
c00206c1:	5e                   	pop    esi
c00206c2:	5f                   	pop    edi
c00206c3:	5d                   	pop    ebp
c00206c4:	c3                   	ret    
c00206c5:	90                   	nop

c00206c6 <PCI::open(int, int, void*)>:
c00206c6:	83 ec 18             	sub    esp,0x18
c00206c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00206cd:	8b 10                	mov    edx,DWORD PTR [eax]
c00206cf:	50                   	push   eax
c00206d0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00206d3:	31 c0                	xor    eax,eax
c00206d5:	83 c4 1c             	add    esp,0x1c
c00206d8:	c3                   	ret    
c00206d9:	90                   	nop

c00206da <PCI::close(int, int, void*)>:
c00206da:	31 c0                	xor    eax,eax
c00206dc:	c3                   	ret    
c00206dd:	90                   	nop

c00206de <PCI::PCI()>:
c00206de:	83 ec 0c             	sub    esp,0xc
c00206e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206e5:	83 ec 08             	sub    esp,0x8
c00206e8:	68 c0 93 02 c0       	push   0xc00293c0
c00206ed:	50                   	push   eax
c00206ee:	e8 dd 2b ff ff       	call   c00132d0 <Bus::Bus(char const*)>
c00206f3:	83 c4 10             	add    esp,0x10
c00206f6:	ba 4c 94 02 c0       	mov    edx,0xc002944c
c00206fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206ff:	89 10                	mov    DWORD PTR [eax],edx
c0020701:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020705:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002070b:	0f b6 d0             	movzx  edx,al
c002070e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020712:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0020719:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002071d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020723:	0f b6 d0             	movzx  edx,al
c0020726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002072a:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002072f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020733:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020739:	8d 50 01             	lea    edx,[eax+0x1]
c002073c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020740:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020746:	0f b6 d0             	movzx  edx,al
c0020749:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002074d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020751:	83 c9 c0             	or     ecx,0xffffffc0
c0020754:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020758:	90                   	nop
c0020759:	83 c4 0c             	add    esp,0xc
c002075c:	c3                   	ret    
c002075d:	90                   	nop

c002075e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002075e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020762:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020767:	89 ca                	mov    edx,ecx
c0020769:	c1 e0 10             	shl    eax,0x10
c002076c:	81 e2 fc 00 00 00    	and    edx,0xfc
c0020772:	09 d0                	or     eax,edx
c0020774:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0020779:	c1 e2 08             	shl    edx,0x8
c002077c:	09 d0                	or     eax,edx
c002077e:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0020783:	c1 e2 0b             	shl    edx,0xb
c0020786:	09 d0                	or     eax,edx
c0020788:	ba f8 0c 00 00       	mov    edx,0xcf8
c002078d:	0d 00 00 00 80       	or     eax,0x80000000
c0020792:	ef                   	out    dx,eax
c0020793:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020798:	ed                   	in     eax,dx
c0020799:	83 e1 02             	and    ecx,0x2
c002079c:	0f b6 c9             	movzx  ecx,cl
c002079f:	c1 e1 03             	shl    ecx,0x3
c00207a2:	d3 e8                	shr    eax,cl
c00207a4:	c3                   	ret    
c00207a5:	90                   	nop

c00207a6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00207a6:	6a 00                	push   0x0
c00207a8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00207ad:	50                   	push   eax
c00207ae:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00207b3:	50                   	push   eax
c00207b4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00207b9:	50                   	push   eax
c00207ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00207be:	e8 9b ff ff ff       	call   c002075e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00207c3:	83 c4 14             	add    esp,0x14
c00207c6:	c3                   	ret    
c00207c7:	90                   	nop

c00207c8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00207c8:	6a 0e                	push   0xe
c00207ca:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00207cf:	50                   	push   eax
c00207d0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00207d5:	50                   	push   eax
c00207d6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00207db:	50                   	push   eax
c00207dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00207e0:	e8 79 ff ff ff       	call   c002075e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00207e5:	83 c4 14             	add    esp,0x14
c00207e8:	0f b6 c0             	movzx  eax,al
c00207eb:	c3                   	ret    

c00207ec <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00207ec:	55                   	push   ebp
c00207ed:	57                   	push   edi
c00207ee:	56                   	push   esi
c00207ef:	53                   	push   ebx
c00207f0:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00207f5:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00207fa:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00207ff:	6a 0a                	push   0xa
c0020801:	56                   	push   esi
c0020802:	55                   	push   ebp
c0020803:	57                   	push   edi
c0020804:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0020808:	e8 51 ff ff ff       	call   c002075e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002080d:	6a 0a                	push   0xa
c002080f:	89 c3                	mov    ebx,eax
c0020811:	56                   	push   esi
c0020812:	0f b6 db             	movzx  ebx,bl
c0020815:	55                   	push   ebp
c0020816:	57                   	push   edi
c0020817:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002081b:	e8 3e ff ff ff       	call   c002075e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020820:	83 c4 28             	add    esp,0x28
c0020823:	25 00 ff 00 00       	and    eax,0xff00
c0020828:	09 d8                	or     eax,ebx
c002082a:	5b                   	pop    ebx
c002082b:	5e                   	pop    esi
c002082c:	5f                   	pop    edi
c002082d:	5d                   	pop    ebp
c002082e:	c3                   	ret    
c002082f:	90                   	nop

c0020830 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0020830:	6a 08                	push   0x8
c0020832:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020837:	50                   	push   eax
c0020838:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002083d:	50                   	push   eax
c002083e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020843:	50                   	push   eax
c0020844:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020848:	e8 11 ff ff ff       	call   c002075e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002084d:	83 c4 14             	add    esp,0x14
c0020850:	0f b6 c4             	movzx  eax,ah
c0020853:	c3                   	ret    

c0020854 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0020854:	6a 08                	push   0x8
c0020856:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002085b:	50                   	push   eax
c002085c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020861:	50                   	push   eax
c0020862:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020867:	50                   	push   eax
c0020868:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002086c:	e8 ed fe ff ff       	call   c002075e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020871:	83 c4 14             	add    esp,0x14
c0020874:	c3                   	ret    
c0020875:	90                   	nop

c0020876 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0020876:	6a 3c                	push   0x3c
c0020878:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002087d:	50                   	push   eax
c002087e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020883:	50                   	push   eax
c0020884:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020889:	50                   	push   eax
c002088a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002088e:	e8 cb fe ff ff       	call   c002075e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020893:	83 c4 14             	add    esp,0x14
c0020896:	c3                   	ret    
c0020897:	90                   	nop

c0020898 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0020898:	6a 18                	push   0x18
c002089a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002089f:	50                   	push   eax
c00208a0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00208a5:	50                   	push   eax
c00208a6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00208ab:	50                   	push   eax
c00208ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00208b0:	e8 a9 fe ff ff       	call   c002075e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00208b5:	83 c4 14             	add    esp,0x14
c00208b8:	0f b6 c4             	movzx  eax,ah
c00208bb:	c3                   	ret    

c00208bc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00208bc:	55                   	push   ebp
c00208bd:	57                   	push   edi
c00208be:	56                   	push   esi
c00208bf:	53                   	push   ebx
c00208c0:	50                   	push   eax
c00208c1:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00208c5:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c00208ca:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00208cf:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c00208d4:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00208db:	8d 43 12             	lea    eax,[ebx+0x12]
c00208de:	83 c3 10             	add    ebx,0x10
c00208e1:	0f b6 c0             	movzx  eax,al
c00208e4:	0f b6 db             	movzx  ebx,bl
c00208e7:	50                   	push   eax
c00208e8:	51                   	push   ecx
c00208e9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00208ed:	57                   	push   edi
c00208ee:	55                   	push   ebp
c00208ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00208f3:	e8 66 fe ff ff       	call   c002075e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00208f8:	53                   	push   ebx
c00208f9:	89 c6                	mov    esi,eax
c00208fb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00208ff:	c1 e6 10             	shl    esi,0x10
c0020902:	51                   	push   ecx
c0020903:	57                   	push   edi
c0020904:	55                   	push   ebp
c0020905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020909:	e8 50 fe ff ff       	call   c002075e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002090e:	83 c4 2c             	add    esp,0x2c
c0020911:	0f b7 c0             	movzx  eax,ax
c0020914:	5b                   	pop    ebx
c0020915:	09 f0                	or     eax,esi
c0020917:	5e                   	pop    esi
c0020918:	5f                   	pop    edi
c0020919:	5d                   	pop    ebp
c002091a:	c3                   	ret    
c002091b:	90                   	nop

c002091c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002091c:	53                   	push   ebx
c002091d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020922:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020927:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002092b:	c1 e1 10             	shl    ecx,0x10
c002092e:	25 fc 00 00 00       	and    eax,0xfc
c0020933:	09 c1                	or     ecx,eax
c0020935:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002093a:	c1 e0 08             	shl    eax,0x8
c002093d:	09 c1                	or     ecx,eax
c002093f:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0020944:	c1 e0 0b             	shl    eax,0xb
c0020947:	09 c1                	or     ecx,eax
c0020949:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002094f:	89 c8                	mov    eax,ecx
c0020951:	ef                   	out    dx,eax
c0020952:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020957:	ed                   	in     eax,dx
c0020958:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c002095d:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0020962:	74 0a                	je     c002096e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0020964:	0f b7 d8             	movzx  ebx,ax
c0020967:	89 d0                	mov    eax,edx
c0020969:	c1 e0 10             	shl    eax,0x10
c002096c:	eb 05                	jmp    c0020973 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c002096e:	66 31 c0             	xor    ax,ax
c0020971:	89 d3                	mov    ebx,edx
c0020973:	09 c3                	or     ebx,eax
c0020975:	ba f8 0c 00 00       	mov    edx,0xcf8
c002097a:	89 c8                	mov    eax,ecx
c002097c:	ef                   	out    dx,eax
c002097d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020982:	89 d8                	mov    eax,ebx
c0020984:	ef                   	out    dx,eax
c0020985:	5b                   	pop    ebx
c0020986:	c3                   	ret    
c0020987:	90                   	nop

c0020988 <PCI::checkBus(unsigned char)>:
c0020988:	56                   	push   esi
c0020989:	53                   	push   ebx
c002098a:	31 db                	xor    ebx,ebx
c002098c:	51                   	push   ecx
c002098d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0020992:	52                   	push   edx
c0020993:	53                   	push   ebx
c0020994:	43                   	inc    ebx
c0020995:	56                   	push   esi
c0020996:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002099a:	e8 29 03 00 00       	call   c0020cc8 <PCI::checkDevice(unsigned char, unsigned char)>
c002099f:	83 c4 10             	add    esp,0x10
c00209a2:	83 fb 20             	cmp    ebx,0x20
c00209a5:	75 eb                	jne    c0020992 <PCI::checkBus(unsigned char)+0xa>
c00209a7:	58                   	pop    eax
c00209a8:	5b                   	pop    ebx
c00209a9:	5e                   	pop    esi
c00209aa:	c3                   	ret    
c00209ab:	90                   	nop

c00209ac <PCI::foundDevice(PCIDeviceInfo)>:
c00209ac:	55                   	push   ebp
c00209ad:	57                   	push   edi
c00209ae:	56                   	push   esi
c00209af:	53                   	push   ebx
c00209b0:	83 ec 1c             	sub    esp,0x1c
c00209b3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00209b7:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00209bd:	0f 84 51 01 00 00    	je     c0020b14 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c00209c3:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00209c7:	66 81 f9 06 04       	cmp    cx,0x406
c00209cc:	75 2c                	jne    c00209fa <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00209ce:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00209d3:	50                   	push   eax
c00209d4:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00209d9:	50                   	push   eax
c00209da:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00209df:	50                   	push   eax
c00209e0:	56                   	push   esi
c00209e1:	e8 b2 fe ff ff       	call   c0020898 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00209e6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00209ea:	0f b6 c0             	movzx  eax,al
c00209ed:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00209f1:	83 c4 2c             	add    esp,0x2c
c00209f4:	5b                   	pop    ebx
c00209f5:	5e                   	pop    esi
c00209f6:	5f                   	pop    edi
c00209f7:	5d                   	pop    ebp
c00209f8:	eb 8e                	jmp    c0020988 <PCI::checkBus(unsigned char)>
c00209fa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00209fe:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0020a04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020a08:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0020a0c:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0020a10:	88 d3                	mov    bl,dl
c0020a12:	85 c0                	test   eax,eax
c0020a14:	74 33                	je     c0020a49 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0020a16:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0020a19:	85 d2                	test   edx,edx
c0020a1b:	74 28                	je     c0020a45 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0020a1d:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0020a23:	31 ef                	xor    edi,ebp
c0020a25:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0020a2b:	75 18                	jne    c0020a45 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0020a2d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020a31:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0020a37:	75 0c                	jne    c0020a45 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0020a39:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0020a3f:	0f 84 cf 00 00 00    	je     c0020b14 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c0020a45:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a47:	eb c9                	jmp    c0020a12 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0020a49:	66 81 f9 01 06       	cmp    cx,0x601
c0020a4e:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0020a52:	75 18                	jne    c0020a6c <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c0020a54:	83 ec 0c             	sub    esp,0xc
c0020a57:	68 58 01 00 00       	push   0x158
c0020a5c:	e8 61 ea fe ff       	call   c000f4c2 <malloc>
c0020a61:	59                   	pop    ecx
c0020a62:	89 c5                	mov    ebp,eax
c0020a64:	5f                   	pop    edi
c0020a65:	68 c8 93 02 c0       	push   0xc00293c8
c0020a6a:	eb 7d                	jmp    c0020ae9 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c0020a6c:	66 81 f9 01 01       	cmp    cx,0x101
c0020a71:	75 60                	jne    c0020ad3 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c0020a73:	83 ec 0c             	sub    esp,0xc
c0020a76:	68 70 02 00 00       	push   0x270
c0020a7b:	e8 42 ea fe ff       	call   c000f4c2 <malloc>
c0020a80:	89 04 24             	mov    DWORD PTR [esp],eax
c0020a83:	89 c5                	mov    ebp,eax
c0020a85:	e8 02 03 00 00       	call   c0020d8c <IDE::IDE()>
c0020a8a:	58                   	pop    eax
c0020a8b:	5a                   	pop    edx
c0020a8c:	55                   	push   ebp
c0020a8d:	56                   	push   esi
c0020a8e:	e8 91 2f ff ff       	call   c0013a24 <Device::addChild(Device*)>
c0020a93:	83 ec 1c             	sub    esp,0x1c
c0020a96:	b9 09 00 00 00       	mov    ecx,0x9
c0020a9b:	fc                   	cld    
c0020a9c:	89 e7                	mov    edi,esp
c0020a9e:	89 de                	mov    esi,ebx
c0020aa0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020aa2:	55                   	push   ebp
c0020aa3:	e8 86 2e ff ff       	call   c001392e <Device::preOpenPCI(PCIDeviceInfo)>
c0020aa8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0020aab:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0020aaf:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0020ab7:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0020abf:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0020ac7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020aca:	83 c4 4c             	add    esp,0x4c
c0020acd:	5b                   	pop    ebx
c0020ace:	5e                   	pop    esi
c0020acf:	5f                   	pop    edi
c0020ad0:	5d                   	pop    ebp
c0020ad1:	ff e0                	jmp    eax
c0020ad3:	83 ec 0c             	sub    esp,0xc
c0020ad6:	68 58 01 00 00       	push   0x158
c0020adb:	e8 e2 e9 fe ff       	call   c000f4c2 <malloc>
c0020ae0:	59                   	pop    ecx
c0020ae1:	89 c5                	mov    ebp,eax
c0020ae3:	5f                   	pop    edi
c0020ae4:	68 e7 93 02 c0       	push   0xc00293e7
c0020ae9:	55                   	push   ebp
c0020aea:	e8 2b 32 ff ff       	call   c0013d1a <DriverlessDevice::DriverlessDevice(char const*)>
c0020aef:	58                   	pop    eax
c0020af0:	5a                   	pop    edx
c0020af1:	55                   	push   ebp
c0020af2:	56                   	push   esi
c0020af3:	e8 2c 2f ff ff       	call   c0013a24 <Device::addChild(Device*)>
c0020af8:	b9 09 00 00 00       	mov    ecx,0x9
c0020afd:	fc                   	cld    
c0020afe:	89 df                	mov    edi,ebx
c0020b00:	89 de                	mov    esi,ebx
c0020b02:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020b04:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0020b08:	83 c4 2c             	add    esp,0x2c
c0020b0b:	5b                   	pop    ebx
c0020b0c:	5e                   	pop    esi
c0020b0d:	5f                   	pop    edi
c0020b0e:	5d                   	pop    ebp
c0020b0f:	e9 1a 2e ff ff       	jmp    c001392e <Device::preOpenPCI(PCIDeviceInfo)>
c0020b14:	83 c4 1c             	add    esp,0x1c
c0020b17:	5b                   	pop    ebx
c0020b18:	5e                   	pop    esi
c0020b19:	5f                   	pop    edi
c0020b1a:	5d                   	pop    ebp
c0020b1b:	c3                   	ret    

c0020b1c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0020b1c:	55                   	push   ebp
c0020b1d:	57                   	push   edi
c0020b1e:	56                   	push   esi
c0020b1f:	53                   	push   ebx
c0020b20:	83 ec 5c             	sub    esp,0x5c
c0020b23:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0020b27:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020b2b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0020b2f:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0020b34:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020b38:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0020b3c:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0020b41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020b45:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0020b4a:	6a 0c                	push   0xc
c0020b4c:	55                   	push   ebp
c0020b4d:	53                   	push   ebx
c0020b4e:	57                   	push   edi
c0020b4f:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0020b56:	e8 03 fc ff ff       	call   c002075e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020b5b:	55                   	push   ebp
c0020b5c:	53                   	push   ebx
c0020b5d:	57                   	push   edi
c0020b5e:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0020b65:	e8 82 fc ff ff       	call   c00207ec <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0020b6a:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0020b6f:	83 c4 24             	add    esp,0x24
c0020b72:	55                   	push   ebp
c0020b73:	53                   	push   ebx
c0020b74:	57                   	push   edi
c0020b75:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0020b79:	e8 f8 fc ff ff       	call   c0020876 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0020b7e:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0020b82:	6a 3c                	push   0x3c
c0020b84:	55                   	push   ebp
c0020b85:	53                   	push   ebx
c0020b86:	57                   	push   edi
c0020b87:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0020b8e:	e8 cb fb ff ff       	call   c002075e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020b93:	0f b6 c4             	movzx  eax,ah
c0020b96:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0020b9a:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0020b9e:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0020ba2:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c0020ba7:	83 c4 24             	add    esp,0x24
c0020baa:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0020bb0:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c0020bb7:	74 6c                	je     c0020c25 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0020bb9:	31 f6                	xor    esi,esi
c0020bbb:	8b 15 48 ab 02 c0    	mov    edx,DWORD PTR ds:0xc002ab48
c0020bc1:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0020bc7:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c0020bcd:	7e 56                	jle    c0020c25 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0020bcf:	8d 14 f2             	lea    edx,[edx+esi*8]
c0020bd2:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0020bd9:	39 cb                	cmp    ebx,ecx
c0020bdb:	75 45                	jne    c0020c22 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0020bdd:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0020be4:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0020be8:	75 38                	jne    c0020c22 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0020bea:	83 ec 0c             	sub    esp,0xc
c0020bed:	68 01 94 02 c0       	push   0xc0029401
c0020bf2:	e8 3e 1a ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0020bf7:	8b 15 48 ab 02 c0    	mov    edx,DWORD PTR ds:0xc002ab48
c0020bfd:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0020c03:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0020c0b:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0020c0f:	52                   	push   edx
c0020c10:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020c14:	53                   	push   ebx
c0020c15:	68 26 94 02 c0       	push   0xc0029426
c0020c1a:	e8 16 1a ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0020c1f:	83 c4 20             	add    esp,0x20
c0020c22:	46                   	inc    esi
c0020c23:	eb 96                	jmp    c0020bbb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0020c25:	31 d2                	xor    edx,edx
c0020c27:	83 ec 0c             	sub    esp,0xc
c0020c2a:	55                   	push   ebp
c0020c2b:	53                   	push   ebx
c0020c2c:	57                   	push   edi
c0020c2d:	52                   	push   edx
c0020c2e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0020c32:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0020c39:	e8 7e fc ff ff       	call   c00208bc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020c3e:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0020c42:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020c46:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0020c4a:	42                   	inc    edx
c0020c4b:	83 c4 20             	add    esp,0x20
c0020c4e:	83 fa 06             	cmp    edx,0x6
c0020c51:	75 d4                	jne    c0020c27 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0020c53:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020c57:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0020c5b:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0020c5f:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0020c63:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0020c67:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0020c6b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0020c70:	86 e0                	xchg   al,ah
c0020c72:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0020c77:	55                   	push   ebp
c0020c78:	53                   	push   ebx
c0020c79:	57                   	push   edi
c0020c7a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0020c7e:	e8 ad fb ff ff       	call   c0020830 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0020c83:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0020c87:	55                   	push   ebp
c0020c88:	53                   	push   ebx
c0020c89:	57                   	push   edi
c0020c8a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0020c91:	e8 10 fb ff ff       	call   c00207a6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020c96:	83 ec 0c             	sub    esp,0xc
c0020c99:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0020c9e:	b9 09 00 00 00       	mov    ecx,0x9
c0020ca3:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0020ca7:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0020cab:	fc                   	cld    
c0020cac:	89 e7                	mov    edi,esp
c0020cae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020cb0:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0020cb7:	e8 f0 fc ff ff       	call   c00209ac <PCI::foundDevice(PCIDeviceInfo)>
c0020cbc:	81 c4 8c 00 00 00    	add    esp,0x8c
c0020cc2:	5b                   	pop    ebx
c0020cc3:	5e                   	pop    esi
c0020cc4:	5f                   	pop    edi
c0020cc5:	5d                   	pop    ebp
c0020cc6:	c3                   	ret    
c0020cc7:	90                   	nop

c0020cc8 <PCI::checkDevice(unsigned char, unsigned char)>:
c0020cc8:	55                   	push   ebp
c0020cc9:	57                   	push   edi
c0020cca:	56                   	push   esi
c0020ccb:	53                   	push   ebx
c0020ccc:	83 ec 0c             	sub    esp,0xc
c0020ccf:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0020cd3:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0020cd8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0020cdd:	6a 00                	push   0x0
c0020cdf:	56                   	push   esi
c0020ce0:	57                   	push   edi
c0020ce1:	55                   	push   ebp
c0020ce2:	e8 bf fa ff ff       	call   c00207a6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020ce7:	6a 00                	push   0x0
c0020ce9:	56                   	push   esi
c0020cea:	57                   	push   edi
c0020ceb:	55                   	push   ebp
c0020cec:	e8 2b fe ff ff       	call   c0020b1c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0020cf1:	83 c4 20             	add    esp,0x20
c0020cf4:	6a 00                	push   0x0
c0020cf6:	56                   	push   esi
c0020cf7:	57                   	push   edi
c0020cf8:	55                   	push   ebp
c0020cf9:	e8 ca fa ff ff       	call   c00207c8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0020cfe:	83 c4 10             	add    esp,0x10
c0020d01:	84 c0                	test   al,al
c0020d03:	79 27                	jns    c0020d2c <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0020d05:	bb 01 00 00 00       	mov    ebx,0x1
c0020d0a:	53                   	push   ebx
c0020d0b:	56                   	push   esi
c0020d0c:	57                   	push   edi
c0020d0d:	55                   	push   ebp
c0020d0e:	e8 93 fa ff ff       	call   c00207a6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020d13:	83 c4 10             	add    esp,0x10
c0020d16:	66 40                	inc    ax
c0020d18:	74 0c                	je     c0020d26 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0020d1a:	53                   	push   ebx
c0020d1b:	56                   	push   esi
c0020d1c:	57                   	push   edi
c0020d1d:	55                   	push   ebp
c0020d1e:	e8 f9 fd ff ff       	call   c0020b1c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0020d23:	83 c4 10             	add    esp,0x10
c0020d26:	43                   	inc    ebx
c0020d27:	83 fb 08             	cmp    ebx,0x8
c0020d2a:	75 de                	jne    c0020d0a <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0020d2c:	83 c4 0c             	add    esp,0xc
c0020d2f:	5b                   	pop    ebx
c0020d30:	5e                   	pop    esi
c0020d31:	5f                   	pop    edi
c0020d32:	5d                   	pop    ebp
c0020d33:	c3                   	ret    

c0020d34 <PCI::detect()>:
c0020d34:	56                   	push   esi
c0020d35:	53                   	push   ebx
c0020d36:	53                   	push   ebx
c0020d37:	31 db                	xor    ebx,ebx
c0020d39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020d3d:	6a 00                	push   0x0
c0020d3f:	6a 00                	push   0x0
c0020d41:	6a 00                	push   0x0
c0020d43:	56                   	push   esi
c0020d44:	e8 7f fa ff ff       	call   c00207c8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0020d49:	83 c4 10             	add    esp,0x10
c0020d4c:	a8 80                	test   al,0x80
c0020d4e:	75 21                	jne    c0020d71 <PCI::detect()+0x3d>
c0020d50:	51                   	push   ecx
c0020d51:	51                   	push   ecx
c0020d52:	6a 00                	push   0x0
c0020d54:	56                   	push   esi
c0020d55:	e8 2e fc ff ff       	call   c0020988 <PCI::checkBus(unsigned char)>
c0020d5a:	83 c4 10             	add    esp,0x10
c0020d5d:	eb 24                	jmp    c0020d83 <PCI::detect()+0x4f>
c0020d5f:	52                   	push   edx
c0020d60:	52                   	push   edx
c0020d61:	53                   	push   ebx
c0020d62:	43                   	inc    ebx
c0020d63:	56                   	push   esi
c0020d64:	e8 1f fc ff ff       	call   c0020988 <PCI::checkBus(unsigned char)>
c0020d69:	83 c4 10             	add    esp,0x10
c0020d6c:	83 fb 08             	cmp    ebx,0x8
c0020d6f:	74 12                	je     c0020d83 <PCI::detect()+0x4f>
c0020d71:	53                   	push   ebx
c0020d72:	6a 00                	push   0x0
c0020d74:	6a 00                	push   0x0
c0020d76:	56                   	push   esi
c0020d77:	e8 2a fa ff ff       	call   c00207a6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020d7c:	83 c4 10             	add    esp,0x10
c0020d7f:	66 40                	inc    ax
c0020d81:	74 dc                	je     c0020d5f <PCI::detect()+0x2b>
c0020d83:	58                   	pop    eax
c0020d84:	5b                   	pop    ebx
c0020d85:	5e                   	pop    esi
c0020d86:	c3                   	ret    
c0020d87:	90                   	nop

c0020d88 <IDE::close(int, int, void*)>:
c0020d88:	83 c8 ff             	or     eax,0xffffffff
c0020d8b:	c3                   	ret    

c0020d8c <IDE::IDE()>:
c0020d8c:	83 ec 0c             	sub    esp,0xc
c0020d8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d93:	83 ec 08             	sub    esp,0x8
c0020d96:	68 70 94 02 c0       	push   0xc0029470
c0020d9b:	50                   	push   eax
c0020d9c:	e8 0f 30 ff ff       	call   c0013db0 <HardDiskController::HardDiskController(char const*)>
c0020da1:	83 c4 10             	add    esp,0x10
c0020da4:	ba b0 96 02 c0       	mov    edx,0xc00296b0
c0020da9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020dad:	89 10                	mov    DWORD PTR [eax],edx
c0020daf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020db3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0020dba:	90                   	nop
c0020dbb:	83 c4 0c             	add    esp,0xc
c0020dbe:	c3                   	ret    
c0020dbf:	90                   	nop

c0020dc0 <IDE::prepareInterrupt(unsigned char)>:
c0020dc0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020dc5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020dc9:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0020dd1:	c3                   	ret    

c0020dd2 <selectDrive(unsigned char, unsigned char)>:
c0020dd2:	c3                   	ret    
c0020dd3:	90                   	nop

c0020dd4 <IDE::getBase(unsigned char)>:
c0020dd4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0020dd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020ddd:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0020de5:	c3                   	ret    

c0020de6 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0020de6:	55                   	push   ebp
c0020de7:	57                   	push   edi
c0020de8:	56                   	push   esi
c0020de9:	53                   	push   ebx
c0020dea:	83 ec 1c             	sub    esp,0x1c
c0020ded:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020df1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0020df5:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0020df8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0020dfc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020e00:	80 f9 03             	cmp    cl,0x3
c0020e03:	77 51                	ja     c0020e56 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0020e05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e09:	0f b6 f2             	movzx  esi,dl
c0020e0c:	0f b6 db             	movzx  ebx,bl
c0020e0f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0020e12:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0020e16:	83 ca 80             	or     edx,0xffffff80
c0020e19:	0f b6 d2             	movzx  edx,dl
c0020e1c:	52                   	push   edx
c0020e1d:	6a 0c                	push   0xc
c0020e1f:	56                   	push   esi
c0020e20:	57                   	push   edi
c0020e21:	e8 c0 ff ff ff       	call   c0020de6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020e26:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0020e2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020e2f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0020e33:	ee                   	out    dx,al
c0020e34:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0020e39:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0020e3d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0020e41:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020e45:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0020e4d:	83 c4 2c             	add    esp,0x2c
c0020e50:	5b                   	pop    ebx
c0020e51:	5e                   	pop    esi
c0020e52:	5f                   	pop    edi
c0020e53:	5d                   	pop    ebp
c0020e54:	eb 90                	jmp    c0020de6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020e56:	80 fb 07             	cmp    bl,0x7
c0020e59:	77 12                	ja     c0020e6d <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0020e5b:	0f b6 d2             	movzx  edx,dl
c0020e5e:	0f b6 db             	movzx  ebx,bl
c0020e61:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0020e69:	89 da                	mov    edx,ebx
c0020e6b:	eb 2f                	jmp    c0020e9c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0020e6d:	80 fb 0d             	cmp    bl,0xd
c0020e70:	77 13                	ja     c0020e85 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0020e72:	0f b6 d2             	movzx  edx,dl
c0020e75:	0f b6 db             	movzx  ebx,bl
c0020e78:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0020e7f:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0020e83:	eb 17                	jmp    c0020e9c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0020e85:	80 fb 15             	cmp    bl,0x15
c0020e88:	77 13                	ja     c0020e9d <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0020e8a:	0f b6 d2             	movzx  edx,dl
c0020e8d:	0f b6 db             	movzx  ebx,bl
c0020e90:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0020e98:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0020e9c:	ee                   	out    dx,al
c0020e9d:	83 c4 1c             	add    esp,0x1c
c0020ea0:	5b                   	pop    ebx
c0020ea1:	5e                   	pop    esi
c0020ea2:	5f                   	pop    edi
c0020ea3:	5d                   	pop    ebp
c0020ea4:	c3                   	ret    
c0020ea5:	90                   	nop

c0020ea6 <IDE::read(unsigned char, unsigned char)>:
c0020ea6:	55                   	push   ebp
c0020ea7:	57                   	push   edi
c0020ea8:	56                   	push   esi
c0020ea9:	53                   	push   ebx
c0020eaa:	83 ec 1c             	sub    esp,0x1c
c0020ead:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020eb1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0020eb5:	8d 43 f8             	lea    eax,[ebx-0x8]
c0020eb8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0020ebc:	3c 03                	cmp    al,0x3
c0020ebe:	77 43                	ja     c0020f03 <IDE::read(unsigned char, unsigned char)+0x5d>
c0020ec0:	0f b6 f2             	movzx  esi,dl
c0020ec3:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0020ec6:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0020eca:	83 c8 80             	or     eax,0xffffff80
c0020ecd:	0f b6 c0             	movzx  eax,al
c0020ed0:	50                   	push   eax
c0020ed1:	6a 0c                	push   0xc
c0020ed3:	56                   	push   esi
c0020ed4:	57                   	push   edi
c0020ed5:	e8 0c ff ff ff       	call   c0020de6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020eda:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0020edf:	0f b6 c3             	movzx  eax,bl
c0020ee2:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0020ee6:	ec                   	in     al,dx
c0020ee7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0020eeb:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0020ef0:	52                   	push   edx
c0020ef1:	6a 0c                	push   0xc
c0020ef3:	56                   	push   esi
c0020ef4:	57                   	push   edi
c0020ef5:	e8 ec fe ff ff       	call   c0020de6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020efa:	83 c4 20             	add    esp,0x20
c0020efd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0020f01:	eb 49                	jmp    c0020f4c <IDE::read(unsigned char, unsigned char)+0xa6>
c0020f03:	80 fb 07             	cmp    bl,0x7
c0020f06:	77 12                	ja     c0020f1a <IDE::read(unsigned char, unsigned char)+0x74>
c0020f08:	0f b6 d2             	movzx  edx,dl
c0020f0b:	0f b6 c3             	movzx  eax,bl
c0020f0e:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0020f16:	89 c2                	mov    edx,eax
c0020f18:	eb 31                	jmp    c0020f4b <IDE::read(unsigned char, unsigned char)+0xa5>
c0020f1a:	80 fb 0d             	cmp    bl,0xd
c0020f1d:	77 13                	ja     c0020f32 <IDE::read(unsigned char, unsigned char)+0x8c>
c0020f1f:	0f b6 d2             	movzx  edx,dl
c0020f22:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0020f29:	0f b6 d3             	movzx  edx,bl
c0020f2c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0020f30:	eb 19                	jmp    c0020f4b <IDE::read(unsigned char, unsigned char)+0xa5>
c0020f32:	31 c0                	xor    eax,eax
c0020f34:	80 fb 15             	cmp    bl,0x15
c0020f37:	77 13                	ja     c0020f4c <IDE::read(unsigned char, unsigned char)+0xa6>
c0020f39:	0f b6 d2             	movzx  edx,dl
c0020f3c:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0020f44:	0f b6 d3             	movzx  edx,bl
c0020f47:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0020f4b:	ec                   	in     al,dx
c0020f4c:	83 c4 1c             	add    esp,0x1c
c0020f4f:	5b                   	pop    ebx
c0020f50:	5e                   	pop    esi
c0020f51:	5f                   	pop    edi
c0020f52:	5d                   	pop    ebp
c0020f53:	c3                   	ret    

c0020f54 <IDE::waitInterrupt(unsigned char)>:
c0020f54:	55                   	push   ebp
c0020f55:	57                   	push   edi
c0020f56:	56                   	push   esi
c0020f57:	53                   	push   ebx
c0020f58:	31 db                	xor    ebx,ebx
c0020f5a:	83 ec 0c             	sub    esp,0xc
c0020f5d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0020f61:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0020f66:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0020f6e:	89 e8                	mov    eax,ebp
c0020f70:	84 c0                	test   al,al
c0020f72:	75 34                	jne    c0020fa8 <IDE::waitInterrupt(unsigned char)+0x54>
c0020f74:	52                   	push   edx
c0020f75:	6a 0c                	push   0xc
c0020f77:	56                   	push   esi
c0020f78:	57                   	push   edi
c0020f79:	e8 28 ff ff ff       	call   c0020ea6 <IDE::read(unsigned char, unsigned char)>
c0020f7e:	83 c4 10             	add    esp,0x10
c0020f81:	a8 01                	test   al,0x1
c0020f83:	75 2b                	jne    c0020fb0 <IDE::waitInterrupt(unsigned char)+0x5c>
c0020f85:	f6 c3 04             	test   bl,0x4
c0020f88:	75 16                	jne    c0020fa0 <IDE::waitInterrupt(unsigned char)+0x4c>
c0020f8a:	83 fb 32             	cmp    ebx,0x32
c0020f8d:	7e 11                	jle    c0020fa0 <IDE::waitInterrupt(unsigned char)+0x4c>
c0020f8f:	50                   	push   eax
c0020f90:	50                   	push   eax
c0020f91:	6a 00                	push   0x0
c0020f93:	68 80 96 98 00       	push   0x989680
c0020f98:	e8 b7 b3 ff ff       	call   c001c354 <nanoSleep(unsigned long long)>
c0020f9d:	83 c4 10             	add    esp,0x10
c0020fa0:	83 fb 3c             	cmp    ebx,0x3c
c0020fa3:	74 0b                	je     c0020fb0 <IDE::waitInterrupt(unsigned char)+0x5c>
c0020fa5:	43                   	inc    ebx
c0020fa6:	eb be                	jmp    c0020f66 <IDE::waitInterrupt(unsigned char)+0x12>
c0020fa8:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0020fb0:	83 c4 0c             	add    esp,0xc
c0020fb3:	89 e8                	mov    eax,ebp
c0020fb5:	5b                   	pop    ebx
c0020fb6:	5e                   	pop    esi
c0020fb7:	5f                   	pop    edi
c0020fb8:	5d                   	pop    ebp
c0020fb9:	c3                   	ret    

c0020fba <ideChannel0IRQHandler(regs*, void*)>:
c0020fba:	83 ec 10             	sub    esp,0x10
c0020fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020fc1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0020fc8:	6a 07                	push   0x7
c0020fca:	6a 00                	push   0x0
c0020fcc:	50                   	push   eax
c0020fcd:	e8 d4 fe ff ff       	call   c0020ea6 <IDE::read(unsigned char, unsigned char)>
c0020fd2:	83 c4 1c             	add    esp,0x1c
c0020fd5:	c3                   	ret    

c0020fd6 <ideChannel1IRQHandler(regs*, void*)>:
c0020fd6:	83 ec 10             	sub    esp,0x10
c0020fd9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020fdd:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0020fe4:	6a 07                	push   0x7
c0020fe6:	6a 01                	push   0x1
c0020fe8:	50                   	push   eax
c0020fe9:	e8 b8 fe ff ff       	call   c0020ea6 <IDE::read(unsigned char, unsigned char)>
c0020fee:	83 c4 1c             	add    esp,0x1c
c0020ff1:	c3                   	ret    

c0020ff2 <IDE::enableIRQs(unsigned char, bool)>:
c0020ff2:	57                   	push   edi
c0020ff3:	56                   	push   esi
c0020ff4:	be 04 00 00 00       	mov    esi,0x4
c0020ff9:	53                   	push   ebx
c0020ffa:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0020fff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021003:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0021008:	0f 94 c0             	sete   al
c002100b:	d1 e0                	shl    eax,1
c002100d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0021014:	0f b6 c0             	movzx  eax,al
c0021017:	50                   	push   eax
c0021018:	6a 0c                	push   0xc
c002101a:	57                   	push   edi
c002101b:	53                   	push   ebx
c002101c:	e8 c5 fd ff ff       	call   c0020de6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021021:	83 c4 10             	add    esp,0x10
c0021024:	50                   	push   eax
c0021025:	6a 0c                	push   0xc
c0021027:	57                   	push   edi
c0021028:	53                   	push   ebx
c0021029:	e8 78 fe ff ff       	call   c0020ea6 <IDE::read(unsigned char, unsigned char)>
c002102e:	83 c4 10             	add    esp,0x10
c0021031:	4e                   	dec    esi
c0021032:	75 f0                	jne    c0021024 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0021034:	5b                   	pop    ebx
c0021035:	5e                   	pop    esi
c0021036:	5f                   	pop    edi
c0021037:	c3                   	ret    

c0021038 <IDE::open(int, int, void*)>:
c0021038:	55                   	push   ebp
c0021039:	57                   	push   edi
c002103a:	56                   	push   esi
c002103b:	53                   	push   ebx
c002103c:	83 ec 1c             	sub    esp,0x1c
c002103f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0021043:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002104c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0021055:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002105c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0021063:	0f 85 b0 02 00 00    	jne    c0021319 <IDE::open(int, int, void*)+0x2e1>
c0021069:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002106f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0021073:	83 e0 7f             	and    eax,0x7f
c0021076:	3c 05                	cmp    al,0x5
c0021078:	74 04                	je     c002107e <IDE::open(int, int, void*)+0x46>
c002107a:	3c 0f                	cmp    al,0xf
c002107c:	75 32                	jne    c00210b0 <IDE::open(int, int, void*)+0x78>
c002107e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0021084:	83 e0 fc             	and    eax,0xfffffffc
c0021087:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002108e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0021094:	83 e0 fc             	and    eax,0xfffffffc
c0021097:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002109e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00210a4:	83 e0 fc             	and    eax,0xfffffffc
c00210a7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00210ae:	eb 14                	jmp    c00210c4 <IDE::open(int, int, void*)+0x8c>
c00210b0:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00210ba:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00210c4:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00210cb:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00210d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00210d6:	89 c6                	mov    esi,eax
c00210d8:	bf f8 0c 00 00       	mov    edi,0xcf8
c00210dd:	c1 e6 10             	shl    esi,0x10
c00210e0:	89 e8                	mov    eax,ebp
c00210e2:	89 fa                	mov    edx,edi
c00210e4:	c1 e0 0b             	shl    eax,0xb
c00210e7:	09 f0                	or     eax,esi
c00210e9:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00210f0:	c1 e6 08             	shl    esi,0x8
c00210f3:	09 c6                	or     esi,eax
c00210f5:	89 f0                	mov    eax,esi
c00210f7:	0d 08 00 00 80       	or     eax,0x80000008
c00210fc:	ef                   	out    dx,eax
c00210fd:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0021102:	89 ca                	mov    edx,ecx
c0021104:	ed                   	in     eax,dx
c0021105:	c1 e8 10             	shr    eax,0x10
c0021108:	3d ff ff 00 00       	cmp    eax,0xffff
c002110d:	0f 84 f5 00 00 00    	je     c0021208 <IDE::open(int, int, void*)+0x1d0>
c0021113:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0021119:	89 fa                	mov    edx,edi
c002111b:	89 f0                	mov    eax,esi
c002111d:	ef                   	out    dx,eax
c002111e:	b0 fe                	mov    al,0xfe
c0021120:	89 ca                	mov    edx,ecx
c0021122:	ee                   	out    dx,al
c0021123:	89 f0                	mov    eax,esi
c0021125:	89 fa                	mov    edx,edi
c0021127:	ef                   	out    dx,eax
c0021128:	89 ca                	mov    edx,ecx
c002112a:	ed                   	in     eax,dx
c002112b:	3c fe                	cmp    al,0xfe
c002112d:	0f 85 a9 00 00 00    	jne    c00211dc <IDE::open(int, int, void*)+0x1a4>
c0021133:	8b 15 48 ab 02 c0    	mov    edx,DWORD PTR ds:0xc002ab48
c0021139:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0021140:	74 33                	je     c0021175 <IDE::open(int, int, void*)+0x13d>
c0021142:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0021148:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002114c:	40                   	inc    eax
c002114d:	83 ec 0c             	sub    esp,0xc
c0021150:	0f b6 c0             	movzx  eax,al
c0021153:	50                   	push   eax
c0021154:	55                   	push   ebp
c0021155:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021159:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002115f:	51                   	push   ecx
c0021160:	e8 81 61 ff ff       	call   c00172e6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0021165:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002116a:	83 c4 1c             	add    esp,0x1c
c002116d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0021173:	eb 0a                	jmp    c002117f <IDE::open(int, int, void*)+0x147>
c0021175:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002117f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0021186:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002118d:	c1 e1 10             	shl    ecx,0x10
c0021190:	c1 e0 08             	shl    eax,0x8
c0021193:	bf f8 0c 00 00       	mov    edi,0xcf8
c0021198:	09 c1                	or     ecx,eax
c002119a:	89 fa                	mov    edx,edi
c002119c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00211a3:	c1 e0 0b             	shl    eax,0xb
c00211a6:	09 c1                	or     ecx,eax
c00211a8:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00211ae:	89 c8                	mov    eax,ecx
c00211b0:	ef                   	out    dx,eax
c00211b1:	be fc 0c 00 00       	mov    esi,0xcfc
c00211b6:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00211bc:	89 f2                	mov    edx,esi
c00211be:	ee                   	out    dx,al
c00211bf:	89 c8                	mov    eax,ecx
c00211c1:	89 fa                	mov    edx,edi
c00211c3:	ef                   	out    dx,eax
c00211c4:	89 f2                	mov    edx,esi
c00211c6:	ed                   	in     eax,dx
c00211c7:	0f b6 c0             	movzx  eax,al
c00211ca:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00211d0:	74 46                	je     c0021218 <IDE::open(int, int, void*)+0x1e0>
c00211d2:	83 ec 0c             	sub    esp,0xc
c00211d5:	68 88 94 02 c0       	push   0xc0029488
c00211da:	eb 34                	jmp    c0021210 <IDE::open(int, int, void*)+0x1d8>
c00211dc:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00211e5:	75 17                	jne    c00211fe <IDE::open(int, int, void*)+0x1c6>
c00211e7:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00211ec:	74 07                	je     c00211f5 <IDE::open(int, int, void*)+0x1bd>
c00211ee:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00211f3:	75 09                	jne    c00211fe <IDE::open(int, int, void*)+0x1c6>
c00211f5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00211fc:	eb 1a                	jmp    c0021218 <IDE::open(int, int, void*)+0x1e0>
c00211fe:	83 ec 0c             	sub    esp,0xc
c0021201:	68 90 94 02 c0       	push   0xc0029490
c0021206:	eb 08                	jmp    c0021210 <IDE::open(int, int, void*)+0x1d8>
c0021208:	83 ec 0c             	sub    esp,0xc
c002120b:	68 c1 94 02 c0       	push   0xc00294c1
c0021210:	e8 e4 7b ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c0021215:	83 c4 10             	add    esp,0x10
c0021218:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002121f:	79 1a                	jns    c002123b <IDE::open(int, int, void*)+0x203>
c0021221:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0021227:	83 e0 fc             	and    eax,0xfffffffc
c002122a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0021231:	83 c0 08             	add    eax,0x8
c0021234:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002123b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0021241:	89 c2                	mov    edx,eax
c0021243:	83 e2 0f             	and    edx,0xf
c0021246:	66 83 fa 08          	cmp    dx,0x8
c002124a:	75 0a                	jne    c0021256 <IDE::open(int, int, void*)+0x21e>
c002124c:	83 e8 02             	sub    eax,0x2
c002124f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0021256:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002125c:	89 c2                	mov    edx,eax
c002125e:	83 e2 0f             	and    edx,0xf
c0021261:	66 83 fa 08          	cmp    dx,0x8
c0021265:	75 0a                	jne    c0021271 <IDE::open(int, int, void*)+0x239>
c0021267:	83 e8 02             	sub    eax,0x2
c002126a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0021271:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0021278:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002127f:	89 d0                	mov    eax,edx
c0021281:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0021284:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0021288:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002128c:	8d 4a 01             	lea    ecx,[edx+0x1]
c002128f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0021294:	0f b6 c9             	movzx  ecx,cl
c0021297:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002129e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00212a1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00212a5:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00212a9:	8d 50 02             	lea    edx,[eax+0x2]
c00212ac:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00212b1:	0f b6 d2             	movzx  edx,dl
c00212b4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00212ba:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00212bd:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00212c1:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00212c5:	8d 48 03             	lea    ecx,[eax+0x3]
c00212c8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00212cd:	0f b6 c9             	movzx  ecx,cl
c00212d0:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00212d6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00212d9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00212dd:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00212e1:	8d 50 04             	lea    edx,[eax+0x4]
c00212e4:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00212ea:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00212ef:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00212f6:	66 85 f6             	test   si,si
c00212f9:	74 3e                	je     c0021339 <IDE::open(int, int, void*)+0x301>
c00212fb:	0f b6 d2             	movzx  edx,dl
c00212fe:	83 c0 05             	add    eax,0x5
c0021301:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0021304:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0021308:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002130c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0021312:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0021317:	eb 20                	jmp    c0021339 <IDE::open(int, int, void*)+0x301>
c0021319:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0021323:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002132d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0021334:	e9 02 ff ff ff       	jmp    c002123b <IDE::open(int, int, void*)+0x203>
c0021339:	52                   	push   edx
c002133a:	52                   	push   edx
c002133b:	6a 00                	push   0x0
c002133d:	53                   	push   ebx
c002133e:	e8 7d fa ff ff       	call   c0020dc0 <IDE::prepareInterrupt(unsigned char)>
c0021343:	59                   	pop    ecx
c0021344:	5e                   	pop    esi
c0021345:	6a 01                	push   0x1
c0021347:	53                   	push   ebx
c0021348:	e8 73 fa ff ff       	call   c0020dc0 <IDE::prepareInterrupt(unsigned char)>
c002134d:	83 c4 0c             	add    esp,0xc
c0021350:	6a 00                	push   0x0
c0021352:	6a 00                	push   0x0
c0021354:	53                   	push   ebx
c0021355:	e8 98 fc ff ff       	call   c0020ff2 <IDE::enableIRQs(unsigned char, bool)>
c002135a:	83 c4 0c             	add    esp,0xc
c002135d:	6a 00                	push   0x0
c002135f:	6a 01                	push   0x1
c0021361:	53                   	push   ebx
c0021362:	e8 8b fc ff ff       	call   c0020ff2 <IDE::enableIRQs(unsigned char, bool)>
c0021367:	83 c4 10             	add    esp,0x10
c002136a:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0021371:	74 40                	je     c00213b3 <IDE::open(int, int, void*)+0x37b>
c0021373:	83 ec 0c             	sub    esp,0xc
c0021376:	68 eb 94 02 c0       	push   0xc00294eb
c002137b:	e8 b5 12 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0021380:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021383:	6a 01                	push   0x1
c0021385:	68 ba 0f 02 c0       	push   0xc0020fba
c002138a:	6a 0e                	push   0xe
c002138c:	53                   	push   ebx
c002138d:	e8 16 26 ff ff       	call   c00139a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021392:	83 c4 14             	add    esp,0x14
c0021395:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002139b:	53                   	push   ebx
c002139c:	6a 01                	push   0x1
c002139e:	68 d6 0f 02 c0       	push   0xc0020fd6
c00213a3:	6a 0f                	push   0xf
c00213a5:	53                   	push   ebx
c00213a6:	e8 fd 25 ff ff       	call   c00139a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00213ab:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00213b1:	eb 4a                	jmp    c00213fd <IDE::open(int, int, void*)+0x3c5>
c00213b3:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00213bd:	50                   	push   eax
c00213be:	6a 0f                	push   0xf
c00213c0:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00213c6:	68 07 95 02 c0       	push   0xc0029507
c00213cb:	e8 65 12 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c00213d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00213d3:	6a 00                	push   0x0
c00213d5:	68 ba 0f 02 c0       	push   0xc0020fba
c00213da:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00213e0:	53                   	push   ebx
c00213e1:	e8 c2 25 ff ff       	call   c00139a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00213e6:	83 c4 14             	add    esp,0x14
c00213e9:	53                   	push   ebx
c00213ea:	6a 00                	push   0x0
c00213ec:	68 d6 0f 02 c0       	push   0xc0020fd6
c00213f1:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00213f7:	53                   	push   ebx
c00213f8:	e8 ab 25 ff ff       	call   c00139a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00213fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00213ff:	83 c4 20             	add    esp,0x20
c0021402:	83 ec 0c             	sub    esp,0xc
c0021405:	53                   	push   ebx
c0021406:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0021409:	83 c4 0c             	add    esp,0xc
c002140c:	6a 07                	push   0x7
c002140e:	6a 00                	push   0x0
c0021410:	53                   	push   ebx
c0021411:	e8 90 fa ff ff       	call   c0020ea6 <IDE::read(unsigned char, unsigned char)>
c0021416:	83 c4 0c             	add    esp,0xc
c0021419:	6a 07                	push   0x7
c002141b:	6a 01                	push   0x1
c002141d:	53                   	push   ebx
c002141e:	e8 83 fa ff ff       	call   c0020ea6 <IDE::read(unsigned char, unsigned char)>
c0021423:	83 c4 0c             	add    esp,0xc
c0021426:	6a 01                	push   0x1
c0021428:	6a 00                	push   0x0
c002142a:	53                   	push   ebx
c002142b:	e8 c2 fb ff ff       	call   c0020ff2 <IDE::enableIRQs(unsigned char, bool)>
c0021430:	83 c4 0c             	add    esp,0xc
c0021433:	6a 01                	push   0x1
c0021435:	6a 01                	push   0x1
c0021437:	53                   	push   ebx
c0021438:	e8 b5 fb ff ff       	call   c0020ff2 <IDE::enableIRQs(unsigned char, bool)>
c002143d:	83 c4 2c             	add    esp,0x2c
c0021440:	31 c0                	xor    eax,eax
c0021442:	5b                   	pop    ebx
c0021443:	5e                   	pop    esi
c0021444:	5f                   	pop    edi
c0021445:	5d                   	pop    ebp
c0021446:	c3                   	ret    
c0021447:	90                   	nop

c0021448 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0021448:	55                   	push   ebp
c0021449:	57                   	push   edi
c002144a:	56                   	push   esi
c002144b:	53                   	push   ebx
c002144c:	83 ec 1c             	sub    esp,0x1c
c002144f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021453:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021457:	8d 50 f8             	lea    edx,[eax-0x8]
c002145a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002145e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0021462:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0021466:	80 fa 03             	cmp    dl,0x3
c0021469:	77 5d                	ja     c00214c8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c002146b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002146f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021473:	0f b6 db             	movzx  ebx,bl
c0021476:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0021479:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c002147d:	83 ca 80             	or     edx,0xffffff80
c0021480:	0f b6 d2             	movzx  edx,dl
c0021483:	52                   	push   edx
c0021484:	6a 0c                	push   0xc
c0021486:	53                   	push   ebx
c0021487:	56                   	push   esi
c0021488:	e8 59 f9 ff ff       	call   c0020de6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002148d:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0021492:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021496:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002149a:	0f b6 c0             	movzx  eax,al
c002149d:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00214a1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00214a3:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00214a8:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00214ac:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00214b0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00214b4:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00214bc:	83 c4 2c             	add    esp,0x2c
c00214bf:	5b                   	pop    ebx
c00214c0:	5e                   	pop    esi
c00214c1:	5f                   	pop    edi
c00214c2:	5d                   	pop    ebp
c00214c3:	e9 1e f9 ff ff       	jmp    c0020de6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00214c8:	3c 07                	cmp    al,0x7
c00214ca:	77 10                	ja     c00214dc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00214cc:	0f b6 db             	movzx  ebx,bl
c00214cf:	0f b6 d0             	movzx  edx,al
c00214d2:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00214da:	eb 2d                	jmp    c0021509 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00214dc:	3c 0d                	cmp    al,0xd
c00214de:	77 13                	ja     c00214f3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00214e0:	0f b6 db             	movzx  ebx,bl
c00214e3:	0f b6 c0             	movzx  eax,al
c00214e6:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00214ed:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00214f1:	eb 16                	jmp    c0021509 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00214f3:	3c 15                	cmp    al,0x15
c00214f5:	77 14                	ja     c002150b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00214f7:	0f b6 db             	movzx  ebx,bl
c00214fa:	0f b6 c0             	movzx  eax,al
c00214fd:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0021505:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0021509:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002150b:	83 c4 1c             	add    esp,0x1c
c002150e:	5b                   	pop    ebx
c002150f:	5e                   	pop    esi
c0021510:	5f                   	pop    edi
c0021511:	5d                   	pop    ebp
c0021512:	c3                   	ret    
c0021513:	90                   	nop

c0021514 <IDE::detect()>:
c0021514:	55                   	push   ebp
c0021515:	57                   	push   edi
c0021516:	56                   	push   esi
c0021517:	53                   	push   ebx
c0021518:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002151e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0021525:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002152c:	0f 85 be 02 00 00    	jne    c00217f0 <IDE::detect()+0x2dc>
c0021532:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0021539:	31 f6                	xor    esi,esi
c002153b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0021543:	31 ed                	xor    ebp,ebp
c0021545:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021549:	c1 e0 06             	shl    eax,0x6
c002154c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0021554:	89 e8                	mov    eax,ebp
c0021556:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002155a:	c1 e0 04             	shl    eax,0x4
c002155d:	83 c8 a0             	or     eax,0xffffffa0
c0021560:	0f b6 c0             	movzx  eax,al
c0021563:	50                   	push   eax
c0021564:	6a 06                	push   0x6
c0021566:	56                   	push   esi
c0021567:	53                   	push   ebx
c0021568:	e8 79 f8 ff ff       	call   c0020de6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002156d:	83 c4 0c             	add    esp,0xc
c0021570:	6a 0c                	push   0xc
c0021572:	56                   	push   esi
c0021573:	53                   	push   ebx
c0021574:	e8 2d f9 ff ff       	call   c0020ea6 <IDE::read(unsigned char, unsigned char)>
c0021579:	83 c4 0c             	add    esp,0xc
c002157c:	6a 0c                	push   0xc
c002157e:	56                   	push   esi
c002157f:	53                   	push   ebx
c0021580:	e8 21 f9 ff ff       	call   c0020ea6 <IDE::read(unsigned char, unsigned char)>
c0021585:	83 c4 0c             	add    esp,0xc
c0021588:	6a 0c                	push   0xc
c002158a:	56                   	push   esi
c002158b:	53                   	push   ebx
c002158c:	e8 15 f9 ff ff       	call   c0020ea6 <IDE::read(unsigned char, unsigned char)>
c0021591:	83 c4 0c             	add    esp,0xc
c0021594:	6a 0c                	push   0xc
c0021596:	56                   	push   esi
c0021597:	53                   	push   ebx
c0021598:	e8 09 f9 ff ff       	call   c0020ea6 <IDE::read(unsigned char, unsigned char)>
c002159d:	68 ec 00 00 00       	push   0xec
c00215a2:	6a 07                	push   0x7
c00215a4:	56                   	push   esi
c00215a5:	53                   	push   ebx
c00215a6:	e8 3b f8 ff ff       	call   c0020de6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00215ab:	83 c4 1c             	add    esp,0x1c
c00215ae:	6a 0c                	push   0xc
c00215b0:	56                   	push   esi
c00215b1:	53                   	push   ebx
c00215b2:	e8 ef f8 ff ff       	call   c0020ea6 <IDE::read(unsigned char, unsigned char)>
c00215b7:	83 c4 0c             	add    esp,0xc
c00215ba:	6a 0c                	push   0xc
c00215bc:	56                   	push   esi
c00215bd:	53                   	push   ebx
c00215be:	e8 e3 f8 ff ff       	call   c0020ea6 <IDE::read(unsigned char, unsigned char)>
c00215c3:	83 c4 0c             	add    esp,0xc
c00215c6:	6a 0c                	push   0xc
c00215c8:	56                   	push   esi
c00215c9:	53                   	push   ebx
c00215ca:	e8 d7 f8 ff ff       	call   c0020ea6 <IDE::read(unsigned char, unsigned char)>
c00215cf:	83 c4 0c             	add    esp,0xc
c00215d2:	6a 0c                	push   0xc
c00215d4:	56                   	push   esi
c00215d5:	53                   	push   ebx
c00215d6:	e8 cb f8 ff ff       	call   c0020ea6 <IDE::read(unsigned char, unsigned char)>
c00215db:	83 c4 0c             	add    esp,0xc
c00215de:	6a 0c                	push   0xc
c00215e0:	56                   	push   esi
c00215e1:	53                   	push   ebx
c00215e2:	e8 bf f8 ff ff       	call   c0020ea6 <IDE::read(unsigned char, unsigned char)>
c00215e7:	83 c4 10             	add    esp,0x10
c00215ea:	84 c0                	test   al,al
c00215ec:	0f 84 8b 01 00 00    	je     c002177d <IDE::detect()+0x269>
c00215f2:	31 ff                	xor    edi,edi
c00215f4:	50                   	push   eax
c00215f5:	6a 0c                	push   0xc
c00215f7:	56                   	push   esi
c00215f8:	53                   	push   ebx
c00215f9:	e8 a8 f8 ff ff       	call   c0020ea6 <IDE::read(unsigned char, unsigned char)>
c00215fe:	83 c4 10             	add    esp,0x10
c0021601:	a8 01                	test   al,0x1
c0021603:	0f 85 8e 01 00 00    	jne    c0021797 <IDE::detect()+0x283>
c0021609:	84 c0                	test   al,al
c002160b:	78 04                	js     c0021611 <IDE::detect()+0xfd>
c002160d:	a8 08                	test   al,0x8
c002160f:	75 27                	jne    c0021638 <IDE::detect()+0x124>
c0021611:	47                   	inc    edi
c0021612:	81 ff 17 01 00 00    	cmp    edi,0x117
c0021618:	7e da                	jle    c00215f4 <IDE::detect()+0xe0>
c002161a:	50                   	push   eax
c002161b:	50                   	push   eax
c002161c:	6a 00                	push   0x0
c002161e:	68 40 4b 4c 00       	push   0x4c4b40
c0021623:	e8 2c ad ff ff       	call   c001c354 <nanoSleep(unsigned long long)>
c0021628:	83 c4 10             	add    esp,0x10
c002162b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0021631:	75 c1                	jne    c00215f4 <IDE::detect()+0xe0>
c0021633:	e9 5f 01 00 00       	jmp    c0021797 <IDE::detect()+0x283>
c0021638:	31 c9                	xor    ecx,ecx
c002163a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002163e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0021642:	83 ec 0c             	sub    esp,0xc
c0021645:	68 80 00 00 00       	push   0x80
c002164a:	57                   	push   edi
c002164b:	6a 00                	push   0x0
c002164d:	56                   	push   esi
c002164e:	53                   	push   ebx
c002164f:	e8 f4 fd ff ff       	call   c0021448 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0021654:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0021659:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002165d:	89 d1                	mov    ecx,edx
c002165f:	c1 e0 06             	shl    eax,0x6
c0021662:	01 d8                	add    eax,ebx
c0021664:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002166b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0021672:	89 f2                	mov    edx,esi
c0021674:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002167a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002167e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0021684:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021688:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002168f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0021697:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002169e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00216a6:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00216ac:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00216b3:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00216b9:	8d 54 24 58          	lea    edx,[esp+0x58]
c00216bd:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00216c1:	83 c4 20             	add    esp,0x20
c00216c4:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00216c7:	83 c0 02             	add    eax,0x2
c00216ca:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00216d0:	83 c7 02             	add    edi,0x2
c00216d3:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00216d6:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00216dc:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00216e0:	75 e2                	jne    c00216c4 <IDE::detect()+0x1b0>
c00216e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216e6:	c1 e0 06             	shl    eax,0x6
c00216e9:	01 d8                	add    eax,ebx
c00216eb:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00216f1:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00216f8:	66 c1 ea 09          	shr    dx,0x9
c00216fc:	83 e2 01             	and    edx,0x1
c00216ff:	84 c9                	test   cl,cl
c0021701:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0021707:	75 2f                	jne    c0021738 <IDE::detect()+0x224>
c0021709:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c002170f:	85 c0                	test   eax,eax
c0021711:	74 66                	je     c0021779 <IDE::detect()+0x265>
c0021713:	50                   	push   eax
c0021714:	55                   	push   ebp
c0021715:	56                   	push   esi
c0021716:	68 23 95 02 c0       	push   0xc0029523
c002171b:	e8 15 0f ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0021720:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0021727:	e8 96 dd fe ff       	call   c000f4c2 <malloc>
c002172c:	89 c7                	mov    edi,eax
c002172e:	89 04 24             	mov    DWORD PTR [esp],eax
c0021731:	e8 e8 02 00 00       	call   c0021a1e <ATA::ATA()>
c0021736:	eb 28                	jmp    c0021760 <IDE::detect()+0x24c>
c0021738:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c002173e:	55                   	push   ebp
c002173f:	56                   	push   esi
c0021740:	68 52 95 02 c0       	push   0xc0029552
c0021745:	e8 eb 0e ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c002174a:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0021751:	e8 6c dd fe ff       	call   c000f4c2 <malloc>
c0021756:	89 c7                	mov    edi,eax
c0021758:	89 04 24             	mov    DWORD PTR [esp],eax
c002175b:	e8 ee 08 00 00       	call   c002204e <ATAPI::ATAPI()>
c0021760:	5a                   	pop    edx
c0021761:	59                   	pop    ecx
c0021762:	57                   	push   edi
c0021763:	53                   	push   ebx
c0021764:	e8 bb 22 ff ff       	call   c0013a24 <Device::addChild(Device*)>
c0021769:	8b 07                	mov    eax,DWORD PTR [edi]
c002176b:	53                   	push   ebx
c002176c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021770:	6a 00                	push   0x0
c0021772:	57                   	push   edi
c0021773:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021776:	83 c4 20             	add    esp,0x20
c0021779:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002177d:	4d                   	dec    ebp
c002177e:	74 0a                	je     c002178a <IDE::detect()+0x276>
c0021780:	bd 01 00 00 00       	mov    ebp,0x1
c0021785:	e9 bb fd ff ff       	jmp    c0021545 <IDE::detect()+0x31>
c002178a:	4e                   	dec    esi
c002178b:	74 63                	je     c00217f0 <IDE::detect()+0x2dc>
c002178d:	be 01 00 00 00       	mov    esi,0x1
c0021792:	e9 ac fd ff ff       	jmp    c0021543 <IDE::detect()+0x2f>
c0021797:	50                   	push   eax
c0021798:	6a 04                	push   0x4
c002179a:	56                   	push   esi
c002179b:	53                   	push   ebx
c002179c:	e8 05 f7 ff ff       	call   c0020ea6 <IDE::read(unsigned char, unsigned char)>
c00217a1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00217a5:	83 c4 0c             	add    esp,0xc
c00217a8:	6a 05                	push   0x5
c00217aa:	56                   	push   esi
c00217ab:	53                   	push   ebx
c00217ac:	e8 f5 f6 ff ff       	call   c0020ea6 <IDE::read(unsigned char, unsigned char)>
c00217b1:	83 c4 10             	add    esp,0x10
c00217b4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00217b8:	80 fa 14             	cmp    dl,0x14
c00217bb:	75 04                	jne    c00217c1 <IDE::detect()+0x2ad>
c00217bd:	3c eb                	cmp    al,0xeb
c00217bf:	eb 07                	jmp    c00217c8 <IDE::detect()+0x2b4>
c00217c1:	3c 96                	cmp    al,0x96
c00217c3:	75 b8                	jne    c002177d <IDE::detect()+0x269>
c00217c5:	80 fa 69             	cmp    dl,0x69
c00217c8:	75 b3                	jne    c002177d <IDE::detect()+0x269>
c00217ca:	68 a1 00 00 00       	push   0xa1
c00217cf:	6a 07                	push   0x7
c00217d1:	56                   	push   esi
c00217d2:	53                   	push   ebx
c00217d3:	e8 0e f6 ff ff       	call   c0020de6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00217d8:	5f                   	pop    edi
c00217d9:	58                   	pop    eax
c00217da:	6a 00                	push   0x0
c00217dc:	68 40 42 0f 00       	push   0xf4240
c00217e1:	e8 6e ab ff ff       	call   c001c354 <nanoSleep(unsigned long long)>
c00217e6:	83 c4 10             	add    esp,0x10
c00217e9:	b1 01                	mov    cl,0x1
c00217eb:	e9 4a fe ff ff       	jmp    c002163a <IDE::detect()+0x126>
c00217f0:	81 c4 1c 02 00 00    	add    esp,0x21c
c00217f6:	5b                   	pop    ebx
c00217f7:	5e                   	pop    esi
c00217f8:	5f                   	pop    edi
c00217f9:	5d                   	pop    ebp
c00217fa:	c3                   	ret    
c00217fb:	90                   	nop

c00217fc <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00217fc:	55                   	push   ebp
c00217fd:	57                   	push   edi
c00217fe:	56                   	push   esi
c00217ff:	53                   	push   ebx
c0021800:	83 ec 1c             	sub    esp,0x1c
c0021803:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021807:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002180b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002180f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021813:	88 c3                	mov    bl,al
c0021815:	84 c0                	test   al,al
c0021817:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002181b:	0f 84 67 01 00 00    	je     c0021988 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0021821:	83 ec 0c             	sub    esp,0xc
c0021824:	68 83 95 02 c0       	push   0xc0029583
c0021829:	e8 07 0e ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c002182e:	83 c4 10             	add    esp,0x10
c0021831:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021835:	3c 01                	cmp    al,0x1
c0021837:	75 17                	jne    c0021850 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0021839:	83 ec 0c             	sub    esp,0xc
c002183c:	b3 13                	mov    bl,0x13
c002183e:	68 8f 95 02 c0       	push   0xc002958f
c0021843:	e8 ed 0d ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0021848:	83 c4 10             	add    esp,0x10
c002184b:	e9 25 01 00 00       	jmp    c0021975 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021850:	3c 02                	cmp    al,0x2
c0021852:	0f 85 ef 00 00 00    	jne    c0021947 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0021858:	d1 e6                	shl    esi,1
c002185a:	09 ee                	or     esi,ebp
c002185c:	52                   	push   edx
c002185d:	89 f0                	mov    eax,esi
c002185f:	6a 01                	push   0x1
c0021861:	0f b6 f0             	movzx  esi,al
c0021864:	c1 e6 06             	shl    esi,0x6
c0021867:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c002186f:	50                   	push   eax
c0021870:	57                   	push   edi
c0021871:	e8 30 f6 ff ff       	call   c0020ea6 <IDE::read(unsigned char, unsigned char)>
c0021876:	83 c4 10             	add    esp,0x10
c0021879:	89 c6                	mov    esi,eax
c002187b:	a8 01                	test   al,0x1
c002187d:	74 12                	je     c0021891 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c002187f:	83 ec 0c             	sub    esp,0xc
c0021882:	b3 07                	mov    bl,0x7
c0021884:	68 a4 95 02 c0       	push   0xc00295a4
c0021889:	e8 a7 0d ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c002188e:	83 c4 10             	add    esp,0x10
c0021891:	f7 c6 02 00 00 00    	test   esi,0x2
c0021897:	74 12                	je     c00218ab <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0021899:	83 ec 0c             	sub    esp,0xc
c002189c:	b3 03                	mov    bl,0x3
c002189e:	68 c2 95 02 c0       	push   0xc00295c2
c00218a3:	e8 8d 0d ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c00218a8:	83 c4 10             	add    esp,0x10
c00218ab:	f7 c6 04 00 00 00    	test   esi,0x4
c00218b1:	74 12                	je     c00218c5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c00218b3:	83 ec 0c             	sub    esp,0xc
c00218b6:	b3 14                	mov    bl,0x14
c00218b8:	68 e2 95 02 c0       	push   0xc00295e2
c00218bd:	e8 73 0d ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c00218c2:	83 c4 10             	add    esp,0x10
c00218c5:	f7 c6 08 00 00 00    	test   esi,0x8
c00218cb:	74 12                	je     c00218df <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c00218cd:	83 ec 0c             	sub    esp,0xc
c00218d0:	b3 03                	mov    bl,0x3
c00218d2:	68 c2 95 02 c0       	push   0xc00295c2
c00218d7:	e8 59 0d ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c00218dc:	83 c4 10             	add    esp,0x10
c00218df:	f7 c6 10 00 00 00    	test   esi,0x10
c00218e5:	74 12                	je     c00218f9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00218e7:	83 ec 0c             	sub    esp,0xc
c00218ea:	b3 15                	mov    bl,0x15
c00218ec:	68 fa 95 02 c0       	push   0xc00295fa
c00218f1:	e8 3f 0d ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c00218f6:	83 c4 10             	add    esp,0x10
c00218f9:	f7 c6 20 00 00 00    	test   esi,0x20
c00218ff:	74 12                	je     c0021913 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0021901:	83 ec 0c             	sub    esp,0xc
c0021904:	b3 03                	mov    bl,0x3
c0021906:	68 c2 95 02 c0       	push   0xc00295c2
c002190b:	e8 25 0d ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0021910:	83 c4 10             	add    esp,0x10
c0021913:	f7 c6 40 00 00 00    	test   esi,0x40
c0021919:	74 12                	je     c002192d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c002191b:	83 ec 0c             	sub    esp,0xc
c002191e:	b3 16                	mov    bl,0x16
c0021920:	68 14 96 02 c0       	push   0xc0029614
c0021925:	e8 0b 0d ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c002192a:	83 c4 10             	add    esp,0x10
c002192d:	89 f0                	mov    eax,esi
c002192f:	84 c0                	test   al,al
c0021931:	79 42                	jns    c0021975 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021933:	83 ec 0c             	sub    esp,0xc
c0021936:	b3 0d                	mov    bl,0xd
c0021938:	68 35 96 02 c0       	push   0xc0029635
c002193d:	e8 f3 0c ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0021942:	83 c4 10             	add    esp,0x10
c0021945:	eb 2e                	jmp    c0021975 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021947:	3c 03                	cmp    al,0x3
c0021949:	75 14                	jne    c002195f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c002194b:	83 ec 0c             	sub    esp,0xc
c002194e:	b3 17                	mov    bl,0x17
c0021950:	68 49 96 02 c0       	push   0xc0029649
c0021955:	e8 db 0c ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c002195a:	83 c4 10             	add    esp,0x10
c002195d:	eb 16                	jmp    c0021975 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002195f:	3c 04                	cmp    al,0x4
c0021961:	75 12                	jne    c0021975 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021963:	83 ec 0c             	sub    esp,0xc
c0021966:	b3 08                	mov    bl,0x8
c0021968:	68 5f 96 02 c0       	push   0xc002965f
c002196d:	e8 c3 0c ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0021972:	83 c4 10             	add    esp,0x10
c0021975:	50                   	push   eax
c0021976:	50                   	push   eax
c0021977:	0f b6 c3             	movzx  eax,bl
c002197a:	50                   	push   eax
c002197b:	68 77 96 02 c0       	push   0xc0029677
c0021980:	e8 b0 0c ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0021985:	83 c4 10             	add    esp,0x10
c0021988:	83 c4 1c             	add    esp,0x1c
c002198b:	88 d8                	mov    al,bl
c002198d:	5b                   	pop    ebx
c002198e:	5e                   	pop    esi
c002198f:	5f                   	pop    edi
c0021990:	5d                   	pop    ebp
c0021991:	c3                   	ret    

c0021992 <IDE::polling(unsigned char, unsigned int)>:
c0021992:	57                   	push   edi
c0021993:	56                   	push   esi
c0021994:	53                   	push   ebx
c0021995:	bb 04 00 00 00       	mov    ebx,0x4
c002199a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002199e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00219a3:	52                   	push   edx
c00219a4:	6a 0c                	push   0xc
c00219a6:	56                   	push   esi
c00219a7:	57                   	push   edi
c00219a8:	e8 f9 f4 ff ff       	call   c0020ea6 <IDE::read(unsigned char, unsigned char)>
c00219ad:	83 c4 10             	add    esp,0x10
c00219b0:	4b                   	dec    ebx
c00219b1:	75 f0                	jne    c00219a3 <IDE::polling(unsigned char, unsigned int)+0x11>
c00219b3:	bb a0 86 01 00       	mov    ebx,0x186a0
c00219b8:	50                   	push   eax
c00219b9:	6a 0c                	push   0xc
c00219bb:	56                   	push   esi
c00219bc:	57                   	push   edi
c00219bd:	e8 e4 f4 ff ff       	call   c0020ea6 <IDE::read(unsigned char, unsigned char)>
c00219c2:	83 c4 10             	add    esp,0x10
c00219c5:	a8 01                	test   al,0x1
c00219c7:	74 12                	je     c00219db <IDE::polling(unsigned char, unsigned int)+0x49>
c00219c9:	83 ec 0c             	sub    esp,0xc
c00219cc:	68 91 96 02 c0       	push   0xc0029691
c00219d1:	e8 5f 0c ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c00219d6:	83 c4 10             	add    esp,0x10
c00219d9:	eb 17                	jmp    c00219f2 <IDE::polling(unsigned char, unsigned int)+0x60>
c00219db:	a8 20                	test   al,0x20
c00219dd:	75 0f                	jne    c00219ee <IDE::polling(unsigned char, unsigned int)+0x5c>
c00219df:	4b                   	dec    ebx
c00219e0:	74 10                	je     c00219f2 <IDE::polling(unsigned char, unsigned int)+0x60>
c00219e2:	84 c0                	test   al,al
c00219e4:	78 d2                	js     c00219b8 <IDE::polling(unsigned char, unsigned int)+0x26>
c00219e6:	a8 08                	test   al,0x8
c00219e8:	74 ce                	je     c00219b8 <IDE::polling(unsigned char, unsigned int)+0x26>
c00219ea:	31 c0                	xor    eax,eax
c00219ec:	eb 06                	jmp    c00219f4 <IDE::polling(unsigned char, unsigned int)+0x62>
c00219ee:	b0 01                	mov    al,0x1
c00219f0:	eb 02                	jmp    c00219f4 <IDE::polling(unsigned char, unsigned int)+0x62>
c00219f2:	b0 02                	mov    al,0x2
c00219f4:	5b                   	pop    ebx
c00219f5:	5e                   	pop    esi
c00219f6:	5f                   	pop    edi
c00219f7:	c3                   	ret    

c00219f8 <ATA::close(int, int, void*)>:
c00219f8:	83 ec 0c             	sub    esp,0xc
c00219fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219ff:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021a05:	85 c0                	test   eax,eax
c0021a07:	74 0c                	je     c0021a15 <ATA::close(int, int, void*)+0x1d>
c0021a09:	83 ec 0c             	sub    esp,0xc
c0021a0c:	8b 10                	mov    edx,DWORD PTR [eax]
c0021a0e:	50                   	push   eax
c0021a0f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0021a12:	83 c4 10             	add    esp,0x10
c0021a15:	31 c0                	xor    eax,eax
c0021a17:	83 c4 0c             	add    esp,0xc
c0021a1a:	c3                   	ret    
c0021a1b:	90                   	nop

c0021a1c <ATA::powerSaving(PowerSavingLevel)>:
c0021a1c:	c3                   	ret    
c0021a1d:	90                   	nop

c0021a1e <ATA::ATA()>:
c0021a1e:	83 ec 0c             	sub    esp,0xc
c0021a21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a25:	83 ec 04             	sub    esp,0x4
c0021a28:	68 00 02 00 00       	push   0x200
c0021a2d:	68 d4 96 02 c0       	push   0xc00296d4
c0021a32:	50                   	push   eax
c0021a33:	e8 fc 23 ff ff       	call   c0013e34 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021a38:	83 c4 10             	add    esp,0x10
c0021a3b:	ba 00 97 02 c0       	mov    edx,0xc0029700
c0021a40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a44:	89 10                	mov    DWORD PTR [eax],edx
c0021a46:	90                   	nop
c0021a47:	83 c4 0c             	add    esp,0xc
c0021a4a:	c3                   	ret    
c0021a4b:	90                   	nop

c0021a4c <ATA::flush(bool)>:
c0021a4c:	53                   	push   ebx
c0021a4d:	83 ec 08             	sub    esp,0x8
c0021a50:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0021a55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021a59:	19 c0                	sbb    eax,eax
c0021a5b:	83 e0 fd             	and    eax,0xfffffffd
c0021a5e:	05 ea 00 00 00       	add    eax,0xea
c0021a63:	50                   	push   eax
c0021a64:	6a 07                	push   0x7
c0021a66:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021a6d:	50                   	push   eax
c0021a6e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021a74:	e8 6d f3 ff ff       	call   c0020de6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021a79:	83 c4 0c             	add    esp,0xc
c0021a7c:	6a 00                	push   0x0
c0021a7e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021a85:	50                   	push   eax
c0021a86:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021a8c:	e8 01 ff ff ff       	call   c0021992 <IDE::polling(unsigned char, unsigned int)>
c0021a91:	83 c4 18             	add    esp,0x18
c0021a94:	5b                   	pop    ebx
c0021a95:	c3                   	ret    

c0021a96 <ATA::readyForCommand()>:
c0021a96:	56                   	push   esi
c0021a97:	53                   	push   ebx
c0021a98:	31 db                	xor    ebx,ebx
c0021a9a:	50                   	push   eax
c0021a9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021a9f:	50                   	push   eax
c0021aa0:	6a 0c                	push   0xc
c0021aa2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0021aa9:	50                   	push   eax
c0021aaa:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0021ab0:	e8 f1 f3 ff ff       	call   c0020ea6 <IDE::read(unsigned char, unsigned char)>
c0021ab5:	83 c4 10             	add    esp,0x10
c0021ab8:	a8 88                	test   al,0x88
c0021aba:	74 23                	je     c0021adf <ATA::readyForCommand()+0x49>
c0021abc:	43                   	inc    ebx
c0021abd:	83 fb 63             	cmp    ebx,0x63
c0021ac0:	7e dd                	jle    c0021a9f <ATA::readyForCommand()+0x9>
c0021ac2:	51                   	push   ecx
c0021ac3:	51                   	push   ecx
c0021ac4:	6a 00                	push   0x0
c0021ac6:	68 40 42 0f 00       	push   0xf4240
c0021acb:	e8 84 a8 ff ff       	call   c001c354 <nanoSleep(unsigned long long)>
c0021ad0:	83 c4 10             	add    esp,0x10
c0021ad3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0021ad9:	75 c4                	jne    c0021a9f <ATA::readyForCommand()+0x9>
c0021adb:	31 c0                	xor    eax,eax
c0021add:	eb 02                	jmp    c0021ae1 <ATA::readyForCommand()+0x4b>
c0021adf:	b0 01                	mov    al,0x1
c0021ae1:	5a                   	pop    edx
c0021ae2:	5b                   	pop    ebx
c0021ae3:	5e                   	pop    esi
c0021ae4:	c3                   	ret    
c0021ae5:	90                   	nop

c0021ae6 <ATA::access(unsigned long long, int, void*, bool)>:
c0021ae6:	55                   	push   ebp
c0021ae7:	57                   	push   edi
c0021ae8:	56                   	push   esi
c0021ae9:	53                   	push   ebx
c0021aea:	83 ec 2c             	sub    esp,0x2c
c0021aed:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0021af1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0021af5:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0021af9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021afd:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0021b01:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021b05:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021b09:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0021b0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021b13:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0021b19:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021b1d:	c1 e0 06             	shl    eax,0x6
c0021b20:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0021b28:	74 5d                	je     c0021b87 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0021b2a:	89 fa                	mov    edx,edi
c0021b2c:	89 f0                	mov    eax,esi
c0021b2e:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0021b32:	c1 ea 1c             	shr    edx,0x1c
c0021b35:	89 d1                	mov    ecx,edx
c0021b37:	09 c1                	or     ecx,eax
c0021b39:	74 25                	je     c0021b60 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0021b3b:	31 ed                	xor    ebp,ebp
c0021b3d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0021b44:	89 fa                	mov    edx,edi
c0021b46:	89 f0                	mov    eax,esi
c0021b48:	0f ad d0             	shrd   eax,edx,cl
c0021b4b:	d3 ea                	shr    edx,cl
c0021b4d:	f6 c1 20             	test   cl,0x20
c0021b50:	74 02                	je     c0021b54 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0021b52:	89 d0                	mov    eax,edx
c0021b54:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0021b58:	45                   	inc    ebp
c0021b59:	83 fd 06             	cmp    ebp,0x6
c0021b5c:	75 df                	jne    c0021b3d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0021b5e:	eb 76                	jmp    c0021bd6 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0021b60:	89 f0                	mov    eax,esi
c0021b62:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0021b67:	89 fa                	mov    edx,edi
c0021b69:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0021b70:	0f ac d0 10          	shrd   eax,edx,0x10
c0021b74:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0021b79:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0021b7d:	c1 ee 18             	shr    esi,0x18
c0021b80:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0021b85:	eb 56                	jmp    c0021bdd <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0021b87:	6a 00                	push   0x0
c0021b89:	6a 3f                	push   0x3f
c0021b8b:	57                   	push   edi
c0021b8c:	56                   	push   esi
c0021b8d:	e8 1a 20 00 00       	call   c0023bac <__umoddi3>
c0021b92:	83 c4 10             	add    esp,0x10
c0021b95:	40                   	inc    eax
c0021b96:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0021b9a:	6a 00                	push   0x0
c0021b9c:	68 f0 03 00 00       	push   0x3f0
c0021ba1:	57                   	push   edi
c0021ba2:	56                   	push   esi
c0021ba3:	e8 04 1f 00 00       	call   c0023aac <__udivdi3>
c0021ba8:	83 c4 10             	add    esp,0x10
c0021bab:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0021bb0:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0021bb7:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0021bbc:	6a 00                	push   0x0
c0021bbe:	6a 3f                	push   0x3f
c0021bc0:	57                   	push   edi
c0021bc1:	56                   	push   esi
c0021bc2:	e8 e5 1e 00 00       	call   c0023aac <__udivdi3>
c0021bc7:	83 c4 10             	add    esp,0x10
c0021bca:	89 c6                	mov    esi,eax
c0021bcc:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0021bd1:	83 e6 0f             	and    esi,0xf
c0021bd4:	eb 07                	jmp    c0021bdd <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0021bd6:	31 f6                	xor    esi,esi
c0021bd8:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0021bdd:	bf 01 00 00 00       	mov    edi,0x1
c0021be2:	50                   	push   eax
c0021be3:	6a 00                	push   0x0
c0021be5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021bec:	50                   	push   eax
c0021bed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021bf1:	e8 fc f3 ff ff       	call   c0020ff2 <IDE::enableIRQs(unsigned char, bool)>
c0021bf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021bf9:	e8 98 fe ff ff       	call   c0021a96 <ATA::readyForCommand()>
c0021bfe:	83 c4 10             	add    esp,0x10
c0021c01:	84 c0                	test   al,al
c0021c03:	0f 84 50 02 00 00    	je     c0021e59 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0021c09:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0021c0f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0021c15:	c1 e0 04             	shl    eax,0x4
c0021c18:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0021c1f:	09 c6                	or     esi,eax
c0021c21:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0021c26:	75 05                	jne    c0021c2d <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0021c28:	83 ce a0             	or     esi,0xffffffa0
c0021c2b:	eb 03                	jmp    c0021c30 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0021c2d:	83 ce e0             	or     esi,0xffffffe0
c0021c30:	89 f0                	mov    eax,esi
c0021c32:	0f b6 f0             	movzx  esi,al
c0021c35:	56                   	push   esi
c0021c36:	6a 06                	push   0x6
c0021c38:	51                   	push   ecx
c0021c39:	52                   	push   edx
c0021c3a:	e8 a7 f1 ff ff       	call   c0020de6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021c3f:	83 c4 10             	add    esp,0x10
c0021c42:	6a 00                	push   0x0
c0021c44:	6a 01                	push   0x1
c0021c46:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021c4d:	50                   	push   eax
c0021c4e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021c54:	e8 8d f1 ff ff       	call   c0020de6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021c59:	83 c4 10             	add    esp,0x10
c0021c5c:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0021c61:	75 6e                	jne    c0021cd1 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0021c63:	6a 00                	push   0x0
c0021c65:	6a 08                	push   0x8
c0021c67:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021c6e:	50                   	push   eax
c0021c6f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021c75:	e8 6c f1 ff ff       	call   c0020de6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021c7a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0021c7f:	50                   	push   eax
c0021c80:	6a 09                	push   0x9
c0021c82:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021c89:	50                   	push   eax
c0021c8a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021c90:	e8 51 f1 ff ff       	call   c0020de6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021c95:	83 c4 20             	add    esp,0x20
c0021c98:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0021c9d:	50                   	push   eax
c0021c9e:	6a 0a                	push   0xa
c0021ca0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021ca7:	50                   	push   eax
c0021ca8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021cae:	e8 33 f1 ff ff       	call   c0020de6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021cb3:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0021cb8:	50                   	push   eax
c0021cb9:	6a 0b                	push   0xb
c0021cbb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021cc2:	50                   	push   eax
c0021cc3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021cc9:	e8 18 f1 ff ff       	call   c0020de6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021cce:	83 c4 20             	add    esp,0x20
c0021cd1:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0021cd6:	50                   	push   eax
c0021cd7:	6a 02                	push   0x2
c0021cd9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021ce0:	50                   	push   eax
c0021ce1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021ce7:	e8 fa f0 ff ff       	call   c0020de6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021cec:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0021cf1:	50                   	push   eax
c0021cf2:	6a 03                	push   0x3
c0021cf4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021cfb:	50                   	push   eax
c0021cfc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021d02:	e8 df f0 ff ff       	call   c0020de6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021d07:	83 c4 20             	add    esp,0x20
c0021d0a:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0021d0f:	50                   	push   eax
c0021d10:	6a 04                	push   0x4
c0021d12:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021d19:	50                   	push   eax
c0021d1a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021d20:	e8 c1 f0 ff ff       	call   c0020de6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021d25:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0021d2a:	50                   	push   eax
c0021d2b:	6a 05                	push   0x5
c0021d2d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021d34:	50                   	push   eax
c0021d35:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021d3b:	e8 a6 f0 ff ff       	call   c0020de6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021d40:	83 c4 20             	add    esp,0x20
c0021d43:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0021d48:	0f 94 c0             	sete   al
c0021d4b:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0021d50:	74 09                	je     c0021d5b <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0021d52:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0021d59:	eb 07                	jmp    c0021d62 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0021d5b:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0021d62:	0f b6 c0             	movzx  eax,al
c0021d65:	50                   	push   eax
c0021d66:	6a 07                	push   0x7
c0021d68:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021d6f:	50                   	push   eax
c0021d70:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021d76:	e8 6b f0 ff ff       	call   c0020de6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021d7b:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0021d7f:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0021d83:	83 c4 10             	add    esp,0x10
c0021d86:	85 f6                	test   esi,esi
c0021d88:	0f 84 ac 00 00 00    	je     c0021e3a <ATA::access(unsigned long long, int, void*, bool)+0x354>
c0021d8e:	50                   	push   eax
c0021d8f:	6a 01                	push   0x1
c0021d91:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021d98:	50                   	push   eax
c0021d99:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021d9f:	e8 ee fb ff ff       	call   c0021992 <IDE::polling(unsigned char, unsigned int)>
c0021da4:	83 c4 10             	add    esp,0x10
c0021da7:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0021dad:	84 c0                	test   al,al
c0021daf:	74 20                	je     c0021dd1 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c0021db1:	0f b6 f8             	movzx  edi,al
c0021db4:	0f b6 d2             	movzx  edx,dl
c0021db7:	57                   	push   edi
c0021db8:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0021dbf:	50                   	push   eax
c0021dc0:	52                   	push   edx
c0021dc1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021dc7:	e8 30 fa ff ff       	call   c00217fc <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0021dcc:	e9 85 00 00 00       	jmp    c0021e56 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c0021dd1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0021dd6:	74 41                	je     c0021e19 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c0021dd8:	31 c9                	xor    ecx,ecx
c0021dda:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c0021dde:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021de2:	50                   	push   eax
c0021de3:	50                   	push   eax
c0021de4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021deb:	50                   	push   eax
c0021dec:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021df2:	e8 dd ef ff ff       	call   c0020dd4 <IDE::getBase(unsigned char)>
c0021df7:	89 c2                	mov    edx,eax
c0021df9:	89 e8                	mov    eax,ebp
c0021dfb:	66 ef                	out    dx,ax
c0021dfd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021e01:	83 c4 10             	add    esp,0x10
c0021e04:	41                   	inc    ecx
c0021e05:	81 f9 00 01 00 00    	cmp    ecx,0x100
c0021e0b:	75 cd                	jne    c0021dda <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c0021e0d:	4e                   	dec    esi
c0021e0e:	81 c7 00 02 00 00    	add    edi,0x200
c0021e14:	e9 6d ff ff ff       	jmp    c0021d86 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c0021e19:	0f b6 d2             	movzx  edx,dl
c0021e1c:	51                   	push   ecx
c0021e1d:	51                   	push   ecx
c0021e1e:	52                   	push   edx
c0021e1f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021e25:	e8 aa ef ff ff       	call   c0020dd4 <IDE::getBase(unsigned char)>
c0021e2a:	b9 00 01 00 00       	mov    ecx,0x100
c0021e2f:	89 c2                	mov    edx,eax
c0021e31:	fc                   	cld    
c0021e32:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0021e35:	83 c4 10             	add    esp,0x10
c0021e38:	eb d3                	jmp    c0021e0d <ATA::access(unsigned long long, int, void*, bool)+0x327>
c0021e3a:	31 ff                	xor    edi,edi
c0021e3c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0021e41:	74 16                	je     c0021e59 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0021e43:	50                   	push   eax
c0021e44:	50                   	push   eax
c0021e45:	31 c0                	xor    eax,eax
c0021e47:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0021e4c:	0f 94 c0             	sete   al
c0021e4f:	50                   	push   eax
c0021e50:	53                   	push   ebx
c0021e51:	e8 f6 fb ff ff       	call   c0021a4c <ATA::flush(bool)>
c0021e56:	83 c4 10             	add    esp,0x10
c0021e59:	83 c4 2c             	add    esp,0x2c
c0021e5c:	89 f8                	mov    eax,edi
c0021e5e:	5b                   	pop    ebx
c0021e5f:	5e                   	pop    esi
c0021e60:	5f                   	pop    edi
c0021e61:	5d                   	pop    ebp
c0021e62:	c3                   	ret    
c0021e63:	90                   	nop

c0021e64 <ATA::read(unsigned long long, int, void*)>:
c0021e64:	57                   	push   edi
c0021e65:	b8 04 00 00 00       	mov    eax,0x4
c0021e6a:	56                   	push   esi
c0021e6b:	53                   	push   ebx
c0021e6c:	83 ec 10             	sub    esp,0x10
c0021e6f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021e73:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021e77:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0021e7a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021e7e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021e82:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0021e88:	77 3b                	ja     c0021ec5 <ATA::read(unsigned long long, int, void*)+0x61>
c0021e8a:	b8 06 00 00 00       	mov    eax,0x6
c0021e8f:	85 d2                	test   edx,edx
c0021e91:	74 32                	je     c0021ec5 <ATA::read(unsigned long long, int, void*)+0x61>
c0021e93:	50                   	push   eax
c0021e94:	50                   	push   eax
c0021e95:	6a 00                	push   0x0
c0021e97:	52                   	push   edx
c0021e98:	53                   	push   ebx
c0021e99:	57                   	push   edi
c0021e9a:	56                   	push   esi
c0021e9b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021e9f:	e8 42 fc ff ff       	call   c0021ae6 <ATA::access(unsigned long long, int, void*, bool)>
c0021ea4:	83 c4 20             	add    esp,0x20
c0021ea7:	85 c0                	test   eax,eax
c0021ea9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021ead:	75 11                	jne    c0021ec0 <ATA::read(unsigned long long, int, void*)+0x5c>
c0021eaf:	01 1d 08 ce 02 c0    	add    DWORD PTR ds:0xc002ce08,ebx
c0021eb5:	e8 e4 e5 fe ff       	call   c001049e <VgaText::updateDiskUsage()>
c0021eba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021ebe:	eb 05                	jmp    c0021ec5 <ATA::read(unsigned long long, int, void*)+0x61>
c0021ec0:	b8 01 00 00 00       	mov    eax,0x1
c0021ec5:	83 c4 10             	add    esp,0x10
c0021ec8:	5b                   	pop    ebx
c0021ec9:	5e                   	pop    esi
c0021eca:	5f                   	pop    edi
c0021ecb:	c3                   	ret    

c0021ecc <ATA::write(unsigned long long, int, void*)>:
c0021ecc:	57                   	push   edi
c0021ecd:	b8 04 00 00 00       	mov    eax,0x4
c0021ed2:	56                   	push   esi
c0021ed3:	53                   	push   ebx
c0021ed4:	83 ec 10             	sub    esp,0x10
c0021ed7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021edb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021edf:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0021ee2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021ee6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021eea:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0021ef0:	77 3b                	ja     c0021f2d <ATA::write(unsigned long long, int, void*)+0x61>
c0021ef2:	b8 06 00 00 00       	mov    eax,0x6
c0021ef7:	85 d2                	test   edx,edx
c0021ef9:	74 32                	je     c0021f2d <ATA::write(unsigned long long, int, void*)+0x61>
c0021efb:	50                   	push   eax
c0021efc:	50                   	push   eax
c0021efd:	6a 01                	push   0x1
c0021eff:	52                   	push   edx
c0021f00:	53                   	push   ebx
c0021f01:	57                   	push   edi
c0021f02:	56                   	push   esi
c0021f03:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021f07:	e8 da fb ff ff       	call   c0021ae6 <ATA::access(unsigned long long, int, void*, bool)>
c0021f0c:	83 c4 20             	add    esp,0x20
c0021f0f:	85 c0                	test   eax,eax
c0021f11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021f15:	75 11                	jne    c0021f28 <ATA::write(unsigned long long, int, void*)+0x5c>
c0021f17:	01 1d 04 ce 02 c0    	add    DWORD PTR ds:0xc002ce04,ebx
c0021f1d:	e8 7c e5 fe ff       	call   c001049e <VgaText::updateDiskUsage()>
c0021f22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f26:	eb 05                	jmp    c0021f2d <ATA::write(unsigned long long, int, void*)+0x61>
c0021f28:	b8 01 00 00 00       	mov    eax,0x1
c0021f2d:	83 c4 10             	add    esp,0x10
c0021f30:	5b                   	pop    ebx
c0021f31:	5e                   	pop    esi
c0021f32:	5f                   	pop    edi
c0021f33:	c3                   	ret    

c0021f34 <ATA::detectCHS()>:
c0021f34:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021f38:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0021f3e:	c1 e0 06             	shl    eax,0x6
c0021f41:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0021f47:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0021f51:	c7 44 24 04 e3 96 02 c0 	mov    DWORD PTR [esp+0x4],0xc00296e3
c0021f59:	e9 9b 6e ff ff       	jmp    c0018df9 <Krnl::panic(char const*)>

c0021f5e <ATA::open(int, int, void*)>:
c0021f5e:	53                   	push   ebx
c0021f5f:	83 ec 08             	sub    esp,0x8
c0021f62:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021f66:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021f6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021f6e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0021f74:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0021f7a:	c1 e0 06             	shl    eax,0x6
c0021f7d:	01 d0                	add    eax,edx
c0021f7f:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0021f86:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0021f8c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0021f93:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0021f9d:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0021fa3:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0021faa:	75 0c                	jne    c0021fb8 <ATA::open(int, int, void*)+0x5a>
c0021fac:	83 ec 0c             	sub    esp,0xc
c0021faf:	53                   	push   ebx
c0021fb0:	e8 7f ff ff ff       	call   c0021f34 <ATA::detectCHS()>
c0021fb5:	83 c4 10             	add    esp,0x10
c0021fb8:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0021fbe:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0021fc4:	c1 e0 06             	shl    eax,0x6
c0021fc7:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0021fce:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0021fd8:	d1 e8                	shr    eax,1
c0021fda:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0021fe0:	6a 04                	push   0x4
c0021fe2:	6a 0c                	push   0xc
c0021fe4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021feb:	50                   	push   eax
c0021fec:	52                   	push   edx
c0021fed:	e8 f4 ed ff ff       	call   c0020de6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021ff2:	90                   	nop
c0021ff3:	90                   	nop
c0021ff4:	6a 00                	push   0x0
c0021ff6:	6a 0c                	push   0xc
c0021ff8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021fff:	50                   	push   eax
c0022000:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022006:	e8 db ed ff ff       	call   c0020de6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002200b:	83 c4 14             	add    esp,0x14
c002200e:	53                   	push   ebx
c002200f:	e8 88 1e ff ff       	call   c0013e9c <PhysicalDisk::startCache()>
c0022014:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022017:	e8 30 3e ff ff       	call   c0015e4c <createPartitionsForDisk(PhysicalDisk*)>
c002201c:	31 c0                	xor    eax,eax
c002201e:	83 c4 18             	add    esp,0x18
c0022021:	5b                   	pop    ebx
c0022022:	c3                   	ret    
c0022023:	90                   	nop

c0022024 <ATAPI::write(unsigned long long, int, void*)>:
c0022024:	b8 03 00 00 00       	mov    eax,0x3
c0022029:	c3                   	ret    

c002202a <ATAPI::close(int, int, void*)>:
c002202a:	83 ec 0c             	sub    esp,0xc
c002202d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022031:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022037:	85 c0                	test   eax,eax
c0022039:	74 0c                	je     c0022047 <ATAPI::close(int, int, void*)+0x1d>
c002203b:	83 ec 0c             	sub    esp,0xc
c002203e:	8b 10                	mov    edx,DWORD PTR [eax]
c0022040:	50                   	push   eax
c0022041:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0022044:	83 c4 10             	add    esp,0x10
c0022047:	31 c0                	xor    eax,eax
c0022049:	83 c4 0c             	add    esp,0xc
c002204c:	c3                   	ret    
c002204d:	90                   	nop

c002204e <ATAPI::ATAPI()>:
c002204e:	83 ec 0c             	sub    esp,0xc
c0022051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022055:	83 ec 04             	sub    esp,0x4
c0022058:	68 00 08 00 00       	push   0x800
c002205d:	68 2c 97 02 c0       	push   0xc002972c
c0022062:	50                   	push   eax
c0022063:	e8 cc 1d ff ff       	call   c0013e34 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0022068:	83 c4 10             	add    esp,0x10
c002206b:	ba 6c 97 02 c0       	mov    edx,0xc002976c
c0022070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022074:	89 10                	mov    DWORD PTR [eax],edx
c0022076:	90                   	nop
c0022077:	83 c4 0c             	add    esp,0xc
c002207a:	c3                   	ret    
c002207b:	90                   	nop

c002207c <ATAPI::readyForCommand()>:
c002207c:	56                   	push   esi
c002207d:	53                   	push   ebx
c002207e:	31 db                	xor    ebx,ebx
c0022080:	50                   	push   eax
c0022081:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022085:	50                   	push   eax
c0022086:	6a 0c                	push   0xc
c0022088:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002208f:	50                   	push   eax
c0022090:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0022096:	e8 0b ee ff ff       	call   c0020ea6 <IDE::read(unsigned char, unsigned char)>
c002209b:	83 c4 10             	add    esp,0x10
c002209e:	a8 88                	test   al,0x88
c00220a0:	74 23                	je     c00220c5 <ATAPI::readyForCommand()+0x49>
c00220a2:	43                   	inc    ebx
c00220a3:	83 fb 63             	cmp    ebx,0x63
c00220a6:	7e dd                	jle    c0022085 <ATAPI::readyForCommand()+0x9>
c00220a8:	51                   	push   ecx
c00220a9:	51                   	push   ecx
c00220aa:	6a 00                	push   0x0
c00220ac:	68 40 42 0f 00       	push   0xf4240
c00220b1:	e8 9e a2 ff ff       	call   c001c354 <nanoSleep(unsigned long long)>
c00220b6:	83 c4 10             	add    esp,0x10
c00220b9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00220bf:	75 c4                	jne    c0022085 <ATAPI::readyForCommand()+0x9>
c00220c1:	31 c0                	xor    eax,eax
c00220c3:	eb 02                	jmp    c00220c7 <ATAPI::readyForCommand()+0x4b>
c00220c5:	b0 01                	mov    al,0x1
c00220c7:	5a                   	pop    edx
c00220c8:	5b                   	pop    ebx
c00220c9:	5e                   	pop    esi
c00220ca:	c3                   	ret    
c00220cb:	90                   	nop

c00220cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00220cc:	55                   	push   ebp
c00220cd:	57                   	push   edi
c00220ce:	56                   	push   esi
c00220cf:	53                   	push   ebx
c00220d0:	83 ec 20             	sub    esp,0x20
c00220d3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00220d7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00220db:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00220df:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00220e3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00220e7:	6a 01                	push   0x1
c00220e9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00220f0:	50                   	push   eax
c00220f1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00220f7:	e8 f6 ee ff ff       	call   c0020ff2 <IDE::enableIRQs(unsigned char, bool)>
c00220fc:	5e                   	pop    esi
c00220fd:	58                   	pop    eax
c00220fe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022105:	50                   	push   eax
c0022106:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002210c:	e8 af ec ff ff       	call   c0020dc0 <IDE::prepareInterrupt(unsigned char)>
c0022111:	89 3c 24             	mov    DWORD PTR [esp],edi
c0022114:	e8 63 ff ff ff       	call   c002207c <ATAPI::readyForCommand()>
c0022119:	83 c4 10             	add    esp,0x10
c002211c:	84 c0                	test   al,al
c002211e:	75 0a                	jne    c002212a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0022120:	bb 01 00 00 00       	mov    ebx,0x1
c0022125:	e9 57 02 00 00       	jmp    c0022381 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002212a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0022130:	c1 e0 04             	shl    eax,0x4
c0022133:	0f b6 c0             	movzx  eax,al
c0022136:	50                   	push   eax
c0022137:	6a 06                	push   0x6
c0022139:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022140:	50                   	push   eax
c0022141:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022147:	e8 9a ec ff ff       	call   c0020de6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002214c:	6a 00                	push   0x0
c002214e:	6a 01                	push   0x1
c0022150:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022157:	50                   	push   eax
c0022158:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002215e:	e8 83 ec ff ff       	call   c0020de6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022163:	83 c4 20             	add    esp,0x20
c0022166:	0f b6 c3             	movzx  eax,bl
c0022169:	0f b6 df             	movzx  ebx,bh
c002216c:	50                   	push   eax
c002216d:	6a 04                	push   0x4
c002216f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022176:	50                   	push   eax
c0022177:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002217d:	e8 64 ec ff ff       	call   c0020de6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022182:	53                   	push   ebx
c0022183:	6a 05                	push   0x5
c0022185:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002218c:	50                   	push   eax
c002218d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022193:	e8 4e ec ff ff       	call   c0020de6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022198:	83 c4 20             	add    esp,0x20
c002219b:	68 a0 00 00 00       	push   0xa0
c00221a0:	6a 07                	push   0x7
c00221a2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00221a9:	50                   	push   eax
c00221aa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00221b0:	e8 31 ec ff ff       	call   c0020de6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00221b5:	83 c4 0c             	add    esp,0xc
c00221b8:	6a 01                	push   0x1
c00221ba:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00221c1:	50                   	push   eax
c00221c2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00221c8:	e8 c5 f7 ff ff       	call   c0021992 <IDE::polling(unsigned char, unsigned int)>
c00221cd:	83 c4 10             	add    esp,0x10
c00221d0:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00221d6:	84 c0                	test   al,al
c00221d8:	74 23                	je     c00221fd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00221da:	0f b6 d8             	movzx  ebx,al
c00221dd:	0f b6 d2             	movzx  edx,dl
c00221e0:	53                   	push   ebx
c00221e1:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00221e8:	50                   	push   eax
c00221e9:	52                   	push   edx
c00221ea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00221f0:	e8 07 f6 ff ff       	call   c00217fc <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00221f5:	83 c4 10             	add    esp,0x10
c00221f8:	e9 84 01 00 00       	jmp    c0022381 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00221fd:	0f b6 d2             	movzx  edx,dl
c0022200:	53                   	push   ebx
c0022201:	53                   	push   ebx
c0022202:	52                   	push   edx
c0022203:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022209:	e8 c6 eb ff ff       	call   c0020dd4 <IDE::getBase(unsigned char)>
c002220e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0022212:	b9 06 00 00 00       	mov    ecx,0x6
c0022217:	89 c2                	mov    edx,eax
c0022219:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002221c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0022220:	83 c4 10             	add    esp,0x10
c0022223:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0022229:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0022230:	85 db                	test   ebx,ebx
c0022232:	0f 84 ec 00 00 00    	je     c0022324 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0022238:	51                   	push   ecx
c0022239:	51                   	push   ecx
c002223a:	52                   	push   edx
c002223b:	50                   	push   eax
c002223c:	e8 13 ed ff ff       	call   c0020f54 <IDE::waitInterrupt(unsigned char)>
c0022241:	83 c4 10             	add    esp,0x10
c0022244:	84 c0                	test   al,al
c0022246:	0f 84 d4 fe ff ff    	je     c0022120 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002224c:	56                   	push   esi
c002224d:	56                   	push   esi
c002224e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022255:	50                   	push   eax
c0022256:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002225c:	e8 5f eb ff ff       	call   c0020dc0 <IDE::prepareInterrupt(unsigned char)>
c0022261:	83 c4 0c             	add    esp,0xc
c0022264:	6a 04                	push   0x4
c0022266:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002226d:	50                   	push   eax
c002226e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022274:	e8 2d ec ff ff       	call   c0020ea6 <IDE::read(unsigned char, unsigned char)>
c0022279:	83 c4 0c             	add    esp,0xc
c002227c:	89 c6                	mov    esi,eax
c002227e:	6a 05                	push   0x5
c0022280:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022287:	50                   	push   eax
c0022288:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002228e:	e8 13 ec ff ff       	call   c0020ea6 <IDE::read(unsigned char, unsigned char)>
c0022293:	89 f1                	mov    ecx,esi
c0022295:	0f b6 c0             	movzx  eax,al
c0022298:	0f b6 f1             	movzx  esi,cl
c002229b:	c1 e0 08             	shl    eax,0x8
c002229e:	09 c6                	or     esi,eax
c00222a0:	d1 fe                	sar    esi,1
c00222a2:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00222a6:	83 c4 10             	add    esp,0x10
c00222a9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00222ae:	74 41                	je     c00222f1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00222b0:	31 c9                	xor    ecx,ecx
c00222b2:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00222b8:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00222bf:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00222c3:	75 0a                	jne    c00222cf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00222c5:	01 c9                	add    ecx,ecx
c00222c7:	01 cd                	add    ebp,ecx
c00222c9:	4b                   	dec    ebx
c00222ca:	e9 54 ff ff ff       	jmp    c0022223 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00222cf:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00222d4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00222d8:	51                   	push   ecx
c00222d9:	51                   	push   ecx
c00222da:	52                   	push   edx
c00222db:	50                   	push   eax
c00222dc:	e8 f3 ea ff ff       	call   c0020dd4 <IDE::getBase(unsigned char)>
c00222e1:	89 c2                	mov    edx,eax
c00222e3:	89 f0                	mov    eax,esi
c00222e5:	66 ef                	out    dx,ax
c00222e7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00222eb:	83 c4 10             	add    esp,0x10
c00222ee:	41                   	inc    ecx
c00222ef:	eb c1                	jmp    c00222b2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00222f1:	31 f6                	xor    esi,esi
c00222f3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00222f9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0022300:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0022304:	75 06                	jne    c002230c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0022306:	01 f6                	add    esi,esi
c0022308:	01 f5                	add    ebp,esi
c002230a:	eb bd                	jmp    c00222c9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002230c:	51                   	push   ecx
c002230d:	51                   	push   ecx
c002230e:	52                   	push   edx
c002230f:	50                   	push   eax
c0022310:	e8 bf ea ff ff       	call   c0020dd4 <IDE::getBase(unsigned char)>
c0022315:	89 c2                	mov    edx,eax
c0022317:	66 ed                	in     ax,dx
c0022319:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002231e:	83 c4 10             	add    esp,0x10
c0022321:	46                   	inc    esi
c0022322:	eb cf                	jmp    c00222f3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0022324:	51                   	push   ecx
c0022325:	51                   	push   ecx
c0022326:	52                   	push   edx
c0022327:	50                   	push   eax
c0022328:	e8 27 ec ff ff       	call   c0020f54 <IDE::waitInterrupt(unsigned char)>
c002232d:	83 c4 10             	add    esp,0x10
c0022330:	84 c0                	test   al,al
c0022332:	0f 84 e8 fd ff ff    	je     c0022120 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0022338:	bb a0 86 01 00       	mov    ebx,0x186a0
c002233d:	52                   	push   edx
c002233e:	52                   	push   edx
c002233f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022346:	50                   	push   eax
c0022347:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002234d:	e8 6e ea ff ff       	call   c0020dc0 <IDE::prepareInterrupt(unsigned char)>
c0022352:	83 c4 10             	add    esp,0x10
c0022355:	50                   	push   eax
c0022356:	50                   	push   eax
c0022357:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002235e:	50                   	push   eax
c002235f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022365:	e8 6a ea ff ff       	call   c0020dd4 <IDE::getBase(unsigned char)>
c002236a:	8d 50 07             	lea    edx,[eax+0x7]
c002236d:	ec                   	in     al,dx
c002236e:	83 c4 10             	add    esp,0x10
c0022371:	a8 88                	test   al,0x88
c0022373:	74 0a                	je     c002237f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0022375:	4b                   	dec    ebx
c0022376:	75 dd                	jne    c0022355 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0022378:	bb 02 00 00 00       	mov    ebx,0x2
c002237d:	eb 02                	jmp    c0022381 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002237f:	31 db                	xor    ebx,ebx
c0022381:	83 c4 1c             	add    esp,0x1c
c0022384:	89 d8                	mov    eax,ebx
c0022386:	5b                   	pop    ebx
c0022387:	5e                   	pop    esi
c0022388:	5f                   	pop    edi
c0022389:	5d                   	pop    ebp
c002238a:	c3                   	ret    
c002238b:	90                   	nop

c002238c <ATAPI::diskRemoved()>:
c002238c:	83 ec 18             	sub    esp,0x18
c002238f:	68 37 97 02 c0       	push   0xc0029737
c0022394:	e8 9c 02 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0022399:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002239d:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00223a4:	83 c4 1c             	add    esp,0x1c
c00223a7:	c3                   	ret    

c00223a8 <ATAPI::eject()>:
c00223a8:	57                   	push   edi
c00223a9:	b9 03 00 00 00       	mov    ecx,0x3
c00223ae:	53                   	push   ebx
c00223af:	83 ec 14             	sub    esp,0x14
c00223b2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00223b6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00223ba:	fc                   	cld    
c00223bb:	31 c0                	xor    eax,eax
c00223bd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00223bf:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00223c4:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00223c9:	50                   	push   eax
c00223ca:	50                   	push   eax
c00223cb:	6a 00                	push   0x0
c00223cd:	6a 00                	push   0x0
c00223cf:	6a 00                	push   0x0
c00223d1:	6a 02                	push   0x2
c00223d3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00223d7:	50                   	push   eax
c00223d8:	53                   	push   ebx
c00223d9:	e8 ee fc ff ff       	call   c00220cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00223de:	83 c4 14             	add    esp,0x14
c00223e1:	53                   	push   ebx
c00223e2:	e8 a5 ff ff ff       	call   c002238c <ATAPI::diskRemoved()>
c00223e7:	83 c4 24             	add    esp,0x24
c00223ea:	5b                   	pop    ebx
c00223eb:	5f                   	pop    edi
c00223ec:	c3                   	ret    
c00223ed:	90                   	nop

c00223ee <ATAPI::diskInserted()>:
c00223ee:	53                   	push   ebx
c00223ef:	83 ec 14             	sub    esp,0x14
c00223f2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00223f6:	68 4d 97 02 c0       	push   0xc002974d
c00223fb:	e8 35 02 ff ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0022400:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0022407:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002240a:	e8 8d 1a ff ff       	call   c0013e9c <PhysicalDisk::startCache()>
c002240f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0022413:	83 c4 18             	add    esp,0x18
c0022416:	5b                   	pop    ebx
c0022417:	e9 30 3a ff ff       	jmp    c0015e4c <createPartitionsForDisk(PhysicalDisk*)>

c002241c <ATAPI::detectMedia()>:
c002241c:	56                   	push   esi
c002241d:	53                   	push   ebx
c002241e:	83 ec 28             	sub    esp,0x28
c0022421:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022425:	6a 0c                	push   0xc
c0022427:	6a 00                	push   0x0
c0022429:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002242d:	56                   	push   esi
c002242e:	e8 4a e2 fd ff       	call   c000067d <memset>
c0022433:	58                   	pop    eax
c0022434:	5a                   	pop    edx
c0022435:	6a 00                	push   0x0
c0022437:	6a 00                	push   0x0
c0022439:	6a 00                	push   0x0
c002243b:	6a 00                	push   0x0
c002243d:	56                   	push   esi
c002243e:	53                   	push   ebx
c002243f:	e8 88 fc ff ff       	call   c00220cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0022444:	83 c4 1c             	add    esp,0x1c
c0022447:	6a 0c                	push   0xc
c0022449:	6a 00                	push   0x0
c002244b:	56                   	push   esi
c002244c:	e8 2c e2 fd ff       	call   c000067d <memset>
c0022451:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0022456:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002245b:	59                   	pop    ecx
c002245c:	58                   	pop    eax
c002245d:	6a 01                	push   0x1
c002245f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0022463:	50                   	push   eax
c0022464:	6a 00                	push   0x0
c0022466:	6a 12                	push   0x12
c0022468:	56                   	push   esi
c0022469:	53                   	push   ebx
c002246a:	e8 5d fc ff ff       	call   c00220cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002246f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0022473:	83 c4 20             	add    esp,0x20
c0022476:	83 e0 7f             	and    eax,0x7f
c0022479:	3c 70                	cmp    al,0x70
c002247b:	74 15                	je     c0022492 <ATAPI::detectMedia()+0x76>
c002247d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0022484:	75 0c                	jne    c0022492 <ATAPI::detectMedia()+0x76>
c0022486:	83 ec 0c             	sub    esp,0xc
c0022489:	53                   	push   ebx
c002248a:	e8 5f ff ff ff       	call   c00223ee <ATAPI::diskInserted()>
c002248f:	83 c4 10             	add    esp,0x10
c0022492:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022496:	83 e0 0f             	and    eax,0xf
c0022499:	3c 02                	cmp    al,0x2
c002249b:	75 1b                	jne    c00224b8 <ATAPI::detectMedia()+0x9c>
c002249d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00224a2:	75 2d                	jne    c00224d1 <ATAPI::detectMedia()+0xb5>
c00224a4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00224ab:	74 24                	je     c00224d1 <ATAPI::detectMedia()+0xb5>
c00224ad:	83 ec 0c             	sub    esp,0xc
c00224b0:	53                   	push   ebx
c00224b1:	e8 d6 fe ff ff       	call   c002238c <ATAPI::diskRemoved()>
c00224b6:	eb 16                	jmp    c00224ce <ATAPI::detectMedia()+0xb2>
c00224b8:	84 c0                	test   al,al
c00224ba:	75 15                	jne    c00224d1 <ATAPI::detectMedia()+0xb5>
c00224bc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00224c3:	75 0c                	jne    c00224d1 <ATAPI::detectMedia()+0xb5>
c00224c5:	83 ec 0c             	sub    esp,0xc
c00224c8:	53                   	push   ebx
c00224c9:	e8 20 ff ff ff       	call   c00223ee <ATAPI::diskInserted()>
c00224ce:	83 c4 10             	add    esp,0x10
c00224d1:	83 c4 24             	add    esp,0x24
c00224d4:	5b                   	pop    ebx
c00224d5:	5e                   	pop    esi
c00224d6:	c3                   	ret    
c00224d7:	90                   	nop

c00224d8 <ATAPI::open(int, int, void*)>:
c00224d8:	53                   	push   ebx
c00224d9:	83 ec 08             	sub    esp,0x8
c00224dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00224e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00224e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00224e8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00224ee:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00224f4:	c1 e0 06             	shl    eax,0x6
c00224f7:	01 d0                	add    eax,edx
c00224f9:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0022500:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0022506:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002250d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0022517:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002251d:	6a 04                	push   0x4
c002251f:	6a 0c                	push   0xc
c0022521:	51                   	push   ecx
c0022522:	52                   	push   edx
c0022523:	e8 be e8 ff ff       	call   c0020de6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022528:	90                   	nop
c0022529:	90                   	nop
c002252a:	6a 00                	push   0x0
c002252c:	6a 0c                	push   0xc
c002252e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022535:	50                   	push   eax
c0022536:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002253c:	e8 a5 e8 ff ff       	call   c0020de6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022541:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0022548:	83 c4 14             	add    esp,0x14
c002254b:	53                   	push   ebx
c002254c:	e8 cb fe ff ff       	call   c002241c <ATAPI::detectMedia()>
c0022551:	31 c0                	xor    eax,eax
c0022553:	83 c4 18             	add    esp,0x18
c0022556:	5b                   	pop    ebx
c0022557:	c3                   	ret    

c0022558 <ATAPI::read(unsigned long long, int, void*)>:
c0022558:	55                   	push   ebp
c0022559:	57                   	push   edi
c002255a:	56                   	push   esi
c002255b:	53                   	push   ebx
c002255c:	83 ec 1c             	sub    esp,0x1c
c002255f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022563:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022567:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002256b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0022572:	74 41                	je     c00225b5 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0022574:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0022578:	b9 03 00 00 00       	mov    ecx,0x3
c002257d:	fc                   	cld    
c002257e:	31 c0                	xor    eax,eax
c0022580:	86 fb                	xchg   bl,bh
c0022582:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0022584:	c1 c3 10             	rol    ebx,0x10
c0022587:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002258c:	89 e8                	mov    eax,ebp
c002258e:	86 fb                	xchg   bl,bh
c0022590:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022594:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0022598:	50                   	push   eax
c0022599:	50                   	push   eax
c002259a:	55                   	push   ebp
c002259b:	c1 e5 0b             	shl    ebp,0xb
c002259e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00225a2:	6a 00                	push   0x0
c00225a4:	55                   	push   ebp
c00225a5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00225a9:	50                   	push   eax
c00225aa:	56                   	push   esi
c00225ab:	e8 1c fb ff ff       	call   c00220cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00225b0:	83 c4 20             	add    esp,0x20
c00225b3:	eb 1a                	jmp    c00225cf <ATAPI::read(unsigned long long, int, void*)+0x77>
c00225b5:	83 ec 0c             	sub    esp,0xc
c00225b8:	56                   	push   esi
c00225b9:	e8 5e fe ff ff       	call   c002241c <ATAPI::detectMedia()>
c00225be:	83 c4 10             	add    esp,0x10
c00225c1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00225c8:	75 aa                	jne    c0022574 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00225ca:	b8 02 00 00 00       	mov    eax,0x2
c00225cf:	83 c4 1c             	add    esp,0x1c
c00225d2:	5b                   	pop    ebx
c00225d3:	5e                   	pop    esi
c00225d4:	5f                   	pop    edi
c00225d5:	5d                   	pop    ebp
c00225d6:	c3                   	ret    
c00225d7:	90                   	nop

c00225d8 <AVX::open(int, int, void*)>:
c00225d8:	83 ec 0c             	sub    esp,0xc
c00225db:	e8 48 11 00 00       	call   c0023728 <avxInit>
c00225e0:	b8 00 00 00 00       	mov    eax,0x0
c00225e5:	83 c4 0c             	add    esp,0xc
c00225e8:	c3                   	ret    
c00225e9:	90                   	nop

c00225ea <AVX::close(int, int, void*)>:
c00225ea:	83 ec 0c             	sub    esp,0xc
c00225ed:	e8 37 11 00 00       	call   c0023729 <avxClose>
c00225f2:	b8 00 00 00 00       	mov    eax,0x0
c00225f7:	83 c4 0c             	add    esp,0xc
c00225fa:	c3                   	ret    
c00225fb:	90                   	nop

c00225fc <AVX::available()>:
c00225fc:	83 ec 0c             	sub    esp,0xc
c00225ff:	e8 1c 11 00 00       	call   c0023720 <avxDetect>
c0022604:	85 c0                	test   eax,eax
c0022606:	0f 95 c0             	setne  al
c0022609:	83 c4 0c             	add    esp,0xc
c002260c:	c3                   	ret    
c002260d:	90                   	nop

c002260e <AVX::save(void*)>:
c002260e:	83 ec 0c             	sub    esp,0xc
c0022611:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022615:	83 ec 0c             	sub    esp,0xc
c0022618:	50                   	push   eax
c0022619:	e8 08 11 00 00       	call   c0023726 <avxSave>
c002261e:	83 c4 10             	add    esp,0x10
c0022621:	90                   	nop
c0022622:	83 c4 0c             	add    esp,0xc
c0022625:	c3                   	ret    

c0022626 <AVX::load(void*)>:
c0022626:	83 ec 0c             	sub    esp,0xc
c0022629:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002262d:	83 ec 0c             	sub    esp,0xc
c0022630:	50                   	push   eax
c0022631:	e8 f1 10 00 00       	call   c0023727 <avxLoad>
c0022636:	83 c4 10             	add    esp,0x10
c0022639:	90                   	nop
c002263a:	83 c4 0c             	add    esp,0xc
c002263d:	c3                   	ret    

c002263e <AVX::AVX()>:
c002263e:	83 ec 0c             	sub    esp,0xc
c0022641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022645:	83 ec 08             	sub    esp,0x8
c0022648:	68 98 97 02 c0       	push   0xc0029798
c002264d:	50                   	push   eax
c002264e:	e8 bf 18 ff ff       	call   c0013f12 <FPU::FPU(char const*)>
c0022653:	83 c4 10             	add    esp,0x10
c0022656:	ba a8 97 02 c0       	mov    edx,0xc00297a8
c002265b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002265f:	89 10                	mov    DWORD PTR [eax],edx
c0022661:	90                   	nop
c0022662:	83 c4 0c             	add    esp,0xc
c0022665:	c3                   	ret    

c0022666 <MMX::available()>:
c0022666:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c002266b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0022671:	83 e0 20             	and    eax,0x20
c0022674:	84 c0                	test   al,al
c0022676:	0f 95 c0             	setne  al
c0022679:	c3                   	ret    

c002267a <MMX::open(int, int, void*)>:
c002267a:	83 ec 0c             	sub    esp,0xc
c002267d:	e8 1a 11 00 00       	call   c002379c <x87Init>
c0022682:	b8 00 00 00 00       	mov    eax,0x0
c0022687:	83 c4 0c             	add    esp,0xc
c002268a:	c3                   	ret    
c002268b:	90                   	nop

c002268c <MMX::close(int, int, void*)>:
c002268c:	83 ec 0c             	sub    esp,0xc
c002268f:	e8 22 11 00 00       	call   c00237b6 <x87Close>
c0022694:	b8 00 00 00 00       	mov    eax,0x0
c0022699:	83 c4 0c             	add    esp,0xc
c002269c:	c3                   	ret    
c002269d:	90                   	nop

c002269e <MMX::save(void*)>:
c002269e:	83 ec 0c             	sub    esp,0xc
c00226a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00226a5:	83 ec 0c             	sub    esp,0xc
c00226a8:	50                   	push   eax
c00226a9:	e8 e3 10 00 00       	call   c0023791 <x87Save>
c00226ae:	83 c4 10             	add    esp,0x10
c00226b1:	90                   	nop
c00226b2:	83 c4 0c             	add    esp,0xc
c00226b5:	c3                   	ret    

c00226b6 <MMX::load(void*)>:
c00226b6:	83 ec 0c             	sub    esp,0xc
c00226b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00226bd:	83 ec 0c             	sub    esp,0xc
c00226c0:	50                   	push   eax
c00226c1:	e8 d1 10 00 00       	call   c0023797 <x87Load>
c00226c6:	83 c4 10             	add    esp,0x10
c00226c9:	90                   	nop
c00226ca:	83 c4 0c             	add    esp,0xc
c00226cd:	c3                   	ret    

c00226ce <MMX::MMX()>:
c00226ce:	83 ec 0c             	sub    esp,0xc
c00226d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226d5:	83 ec 08             	sub    esp,0x8
c00226d8:	68 d8 97 02 c0       	push   0xc00297d8
c00226dd:	50                   	push   eax
c00226de:	e8 2f 18 ff ff       	call   c0013f12 <FPU::FPU(char const*)>
c00226e3:	83 c4 10             	add    esp,0x10
c00226e6:	ba e8 97 02 c0       	mov    edx,0xc00297e8
c00226eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226ef:	89 10                	mov    DWORD PTR [eax],edx
c00226f1:	90                   	nop
c00226f2:	83 c4 0c             	add    esp,0xc
c00226f5:	c3                   	ret    

c00226f6 <SSE::open(int, int, void*)>:
c00226f6:	83 ec 0c             	sub    esp,0xc
c00226f9:	e8 59 10 00 00       	call   c0023757 <sseInit>
c00226fe:	b8 00 00 00 00       	mov    eax,0x0
c0022703:	83 c4 0c             	add    esp,0xc
c0022706:	c3                   	ret    
c0022707:	90                   	nop

c0022708 <SSE::close(int, int, void*)>:
c0022708:	83 ec 0c             	sub    esp,0xc
c002270b:	e8 57 10 00 00       	call   c0023767 <sseClose>
c0022710:	b8 00 00 00 00       	mov    eax,0x0
c0022715:	83 c4 0c             	add    esp,0xc
c0022718:	c3                   	ret    
c0022719:	90                   	nop

c002271a <SSE::available()>:
c002271a:	83 ec 1c             	sub    esp,0x1c
c002271d:	e8 0e 10 00 00       	call   c0023730 <sseDetect>
c0022722:	85 c0                	test   eax,eax
c0022724:	0f 95 c0             	setne  al
c0022727:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002272b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002272f:	83 c4 1c             	add    esp,0x1c
c0022732:	c3                   	ret    
c0022733:	90                   	nop

c0022734 <SSE::save(void*)>:
c0022734:	83 ec 0c             	sub    esp,0xc
c0022737:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002273b:	83 ec 0c             	sub    esp,0xc
c002273e:	50                   	push   eax
c002273f:	e8 07 10 00 00       	call   c002374b <sseSave>
c0022744:	83 c4 10             	add    esp,0x10
c0022747:	90                   	nop
c0022748:	83 c4 0c             	add    esp,0xc
c002274b:	c3                   	ret    

c002274c <SSE::load(void*)>:
c002274c:	83 ec 0c             	sub    esp,0xc
c002274f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022753:	83 ec 0c             	sub    esp,0xc
c0022756:	50                   	push   eax
c0022757:	e8 f5 0f 00 00       	call   c0023751 <sseLoad>
c002275c:	83 c4 10             	add    esp,0x10
c002275f:	90                   	nop
c0022760:	83 c4 0c             	add    esp,0xc
c0022763:	c3                   	ret    

c0022764 <SSE::SSE()>:
c0022764:	83 ec 0c             	sub    esp,0xc
c0022767:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002276b:	83 ec 08             	sub    esp,0x8
c002276e:	68 18 98 02 c0       	push   0xc0029818
c0022773:	50                   	push   eax
c0022774:	e8 99 17 ff ff       	call   c0013f12 <FPU::FPU(char const*)>
c0022779:	83 c4 10             	add    esp,0x10
c002277c:	ba 28 98 02 c0       	mov    edx,0xc0029828
c0022781:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022785:	89 10                	mov    DWORD PTR [eax],edx
c0022787:	90                   	nop
c0022788:	83 c4 0c             	add    esp,0xc
c002278b:	c3                   	ret    

c002278c <x87::open(int, int, void*)>:
c002278c:	83 ec 0c             	sub    esp,0xc
c002278f:	e8 08 10 00 00       	call   c002379c <x87Init>
c0022794:	b8 00 00 00 00       	mov    eax,0x0
c0022799:	83 c4 0c             	add    esp,0xc
c002279c:	c3                   	ret    
c002279d:	90                   	nop

c002279e <x87::close(int, int, void*)>:
c002279e:	83 ec 0c             	sub    esp,0xc
c00227a1:	e8 10 10 00 00       	call   c00237b6 <x87Close>
c00227a6:	b8 00 00 00 00       	mov    eax,0x0
c00227ab:	83 c4 0c             	add    esp,0xc
c00227ae:	c3                   	ret    
c00227af:	90                   	nop

c00227b0 <x87::available()>:
c00227b0:	83 ec 0c             	sub    esp,0xc
c00227b3:	e8 be 0f 00 00       	call   c0023776 <x87Detect>
c00227b8:	85 c0                	test   eax,eax
c00227ba:	0f 95 c0             	setne  al
c00227bd:	83 c4 0c             	add    esp,0xc
c00227c0:	c3                   	ret    
c00227c1:	90                   	nop

c00227c2 <x87::save(void*)>:
c00227c2:	83 ec 0c             	sub    esp,0xc
c00227c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00227c9:	83 ec 0c             	sub    esp,0xc
c00227cc:	50                   	push   eax
c00227cd:	e8 bf 0f 00 00       	call   c0023791 <x87Save>
c00227d2:	83 c4 10             	add    esp,0x10
c00227d5:	90                   	nop
c00227d6:	83 c4 0c             	add    esp,0xc
c00227d9:	c3                   	ret    

c00227da <x87::load(void*)>:
c00227da:	83 ec 0c             	sub    esp,0xc
c00227dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00227e1:	83 ec 0c             	sub    esp,0xc
c00227e4:	50                   	push   eax
c00227e5:	e8 ad 0f 00 00       	call   c0023797 <x87Load>
c00227ea:	83 c4 10             	add    esp,0x10
c00227ed:	90                   	nop
c00227ee:	83 c4 0c             	add    esp,0xc
c00227f1:	c3                   	ret    

c00227f2 <x87::x87()>:
c00227f2:	83 ec 0c             	sub    esp,0xc
c00227f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227f9:	83 ec 08             	sub    esp,0x8
c00227fc:	68 58 98 02 c0       	push   0xc0029858
c0022801:	50                   	push   eax
c0022802:	e8 0b 17 ff ff       	call   c0013f12 <FPU::FPU(char const*)>
c0022807:	83 c4 10             	add    esp,0x10
c002280a:	ba 68 98 02 c0       	mov    edx,0xc0029868
c002280f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022813:	89 10                	mov    DWORD PTR [eax],edx
c0022815:	90                   	nop
c0022816:	83 c4 0c             	add    esp,0xc
c0022819:	c3                   	ret    

c002281a <APIC::disable()>:
c002281a:	90                   	nop
c002281b:	c3                   	ret    

c002281c <APIC::close(int, int, void*)>:
c002281c:	55                   	push   ebp
c002281d:	89 e5                	mov    ebp,esp
c002281f:	83 ec 08             	sub    esp,0x8
c0022822:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022825:	8b 00                	mov    eax,DWORD PTR [eax]
c0022827:	83 c0 3c             	add    eax,0x3c
c002282a:	8b 00                	mov    eax,DWORD PTR [eax]
c002282c:	83 ec 0c             	sub    esp,0xc
c002282f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022832:	ff d0                	call   eax
c0022834:	83 c4 10             	add    esp,0x10
c0022837:	b8 00 00 00 00       	mov    eax,0x0
c002283c:	c9                   	leave  
c002283d:	c3                   	ret    

c002283e <IOAPIC::close(int, int, void*)>:
c002283e:	b8 00 00 00 00       	mov    eax,0x0
c0022843:	c3                   	ret    

c0022844 <APIC::io_wait()>:
c0022844:	eb 00                	jmp    c0022846 <APIC::io_wait()+0x2>
c0022846:	eb 00                	jmp    c0022848 <APIC::io_wait()+0x4>
c0022848:	90                   	nop
c0022849:	c3                   	ret    

c002284a <APIC::getBase()>:
c002284a:	55                   	push   ebp
c002284b:	89 e5                	mov    ebp,esp
c002284d:	83 ec 18             	sub    esp,0x18
c0022850:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c0022855:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002285b:	83 e0 08             	and    eax,0x8
c002285e:	84 c0                	test   al,al
c0022860:	75 07                	jne    c0022869 <APIC::getBase()+0x1f>
c0022862:	b8 00 00 00 00       	mov    eax,0x0
c0022867:	eb 21                	jmp    c002288a <APIC::getBase()+0x40>
c0022869:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c002286e:	83 ec 08             	sub    esp,0x8
c0022871:	6a 1b                	push   0x1b
c0022873:	50                   	push   eax
c0022874:	e8 f1 c1 fe ff       	call   c000ea6a <Computer::rdmsr(unsigned int)>
c0022879:	83 c4 10             	add    esp,0x10
c002287c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002287f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0022882:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022885:	25 00 f0 ff ff       	and    eax,0xfffff000
c002288a:	c9                   	leave  
c002288b:	c3                   	ret    

c002288c <APIC::eoi(unsigned char)>:
c002288c:	55                   	push   ebp
c002288d:	89 e5                	mov    ebp,esp
c002288f:	83 ec 28             	sub    esp,0x28
c0022892:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022895:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0022898:	83 ec 0c             	sub    esp,0xc
c002289b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002289e:	e8 a7 ff ff ff       	call   c002284a <APIC::getBase()>
c00228a3:	83 c4 10             	add    esp,0x10
c00228a6:	05 b0 00 00 00       	add    eax,0xb0
c00228ab:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00228ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00228b1:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00228b7:	90                   	nop
c00228b8:	c9                   	leave  
c00228b9:	c3                   	ret    

c00228ba <APIC::open(int, int, void*)>:
c00228ba:	55                   	push   ebp
c00228bb:	89 e5                	mov    ebp,esp
c00228bd:	57                   	push   edi
c00228be:	56                   	push   esi
c00228bf:	53                   	push   ebx
c00228c0:	83 ec 2c             	sub    esp,0x2c
c00228c3:	83 ec 0c             	sub    esp,0xc
c00228c6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00228c9:	e8 7c ff ff ff       	call   c002284a <APIC::getBase()>
c00228ce:	83 c4 10             	add    esp,0x10
c00228d1:	89 c2                	mov    edx,eax
c00228d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00228d6:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00228dc:	0f b6 f8             	movzx  edi,al
c00228df:	89 d0                	mov    eax,edx
c00228e1:	ba 00 00 00 00       	mov    edx,0x0
c00228e6:	89 c1                	mov    ecx,eax
c00228e8:	80 e5 ff             	and    ch,0xff
c00228eb:	89 cb                	mov    ebx,ecx
c00228ed:	0f b6 f2             	movzx  esi,dl
c00228f0:	89 d8                	mov    eax,ebx
c00228f2:	89 f2                	mov    edx,esi
c00228f4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00228f7:	8d 5f 08             	lea    ebx,[edi+0x8]
c00228fa:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00228fe:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022902:	83 e0 00             	and    eax,0x0
c0022905:	09 d0                	or     eax,edx
c0022907:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002290b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002290e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022914:	8d 50 01             	lea    edx,[eax+0x1]
c0022917:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002291a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022920:	0f b6 d0             	movzx  edx,al
c0022923:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022926:	83 c2 08             	add    edx,0x8
c0022929:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002292d:	0f b6 c9             	movzx  ecx,cl
c0022930:	81 c9 00 00 01 00    	or     ecx,0x10000
c0022936:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002293a:	83 ec 0c             	sub    esp,0xc
c002293d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022940:	e8 05 ff ff ff       	call   c002284a <APIC::getBase()>
c0022945:	83 c4 10             	add    esp,0x10
c0022948:	05 f0 00 00 00       	add    eax,0xf0
c002294d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0022950:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022953:	8b 00                	mov    eax,DWORD PTR [eax]
c0022955:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0022958:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002295f:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0022966:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022969:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002296c:	89 10                	mov    DWORD PTR [eax],edx
c002296e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0022975:	a1 f0 b3 02 c0       	mov    eax,ds:0xc002b3f0
c002297a:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002297d:	7d 7c                	jge    c00229fb <APIC::open(int, int, void*)+0x141>
c002297f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0022982:	8b 04 85 00 b4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4c00]
c0022989:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002298c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002298f:	8b 04 85 00 b4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4c00]
c0022996:	c1 e8 08             	shr    eax,0x8
c0022999:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002299d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00229a0:	8b 04 85 00 b4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4c00]
c00229a7:	c1 e8 18             	shr    eax,0x18
c00229aa:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00229ad:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00229b1:	75 40                	jne    c00229f3 <APIC::open(int, int, void*)+0x139>
c00229b3:	83 ec 0c             	sub    esp,0xc
c00229b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00229b9:	e8 8c fe ff ff       	call   c002284a <APIC::getBase()>
c00229be:	83 c4 10             	add    esp,0x10
c00229c1:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00229c5:	75 07                	jne    c00229ce <APIC::open(int, int, void*)+0x114>
c00229c7:	ba 60 03 00 00       	mov    edx,0x360
c00229cc:	eb 05                	jmp    c00229d3 <APIC::open(int, int, void*)+0x119>
c00229ce:	ba 50 03 00 00       	mov    edx,0x350
c00229d3:	01 d0                	add    eax,edx
c00229d5:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00229d8:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00229db:	8b 00                	mov    eax,DWORD PTR [eax]
c00229dd:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00229e0:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00229e7:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00229eb:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00229ee:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00229f1:	89 10                	mov    DWORD PTR [eax],edx
c00229f3:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00229f6:	e9 7a ff ff ff       	jmp    c0022975 <APIC::open(int, int, void*)+0xbb>
c00229fb:	b8 00 00 00 00       	mov    eax,0x0
c0022a00:	8d 65 f4             	lea    esp,[ebp-0xc]
c0022a03:	5b                   	pop    ebx
c0022a04:	5e                   	pop    esi
c0022a05:	5f                   	pop    edi
c0022a06:	5d                   	pop    ebp
c0022a07:	c3                   	ret    

c0022a08 <IOAPIC::IOAPIC()>:
c0022a08:	83 ec 0c             	sub    esp,0xc
c0022a0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a0f:	83 ec 08             	sub    esp,0x8
c0022a12:	68 98 98 02 c0       	push   0xc0029898
c0022a17:	50                   	push   eax
c0022a18:	e8 f7 11 ff ff       	call   c0013c14 <Device::Device(char const*)>
c0022a1d:	83 c4 10             	add    esp,0x10
c0022a20:	ba c0 99 02 c0       	mov    edx,0xc00299c0
c0022a25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a29:	89 10                	mov    DWORD PTR [eax],edx
c0022a2b:	90                   	nop
c0022a2c:	83 c4 0c             	add    esp,0xc
c0022a2f:	c3                   	ret    

c0022a30 <APIC::APIC()>:
c0022a30:	53                   	push   ebx
c0022a31:	83 ec 18             	sub    esp,0x18
c0022a34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a38:	83 ec 08             	sub    esp,0x8
c0022a3b:	68 a0 98 02 c0       	push   0xc00298a0
c0022a40:	50                   	push   eax
c0022a41:	e8 26 19 ff ff       	call   c001436c <InterruptController::InterruptController(char const*)>
c0022a46:	83 c4 10             	add    esp,0x10
c0022a49:	ba 78 99 02 c0       	mov    edx,0xc0029978
c0022a4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a52:	89 10                	mov    DWORD PTR [eax],edx
c0022a54:	a0 60 ce 02 c0       	mov    al,ds:0xc002ce60
c0022a59:	83 f0 01             	xor    eax,0x1
c0022a5c:	84 c0                	test   al,al
c0022a5e:	0f 84 a1 00 00 00    	je     c0022b05 <APIC::APIC()+0xd5>
c0022a64:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0022a69:	a0 a0 b4 02 c0       	mov    al,ds:0xc002b4a0
c0022a6e:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0022a72:	0f 83 86 00 00 00    	jae    c0022afe <APIC::APIC()+0xce>
c0022a78:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0022a80:	83 ec 0c             	sub    esp,0xc
c0022a83:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022a87:	e8 36 ca fe ff       	call   c000f4c2 <malloc>
c0022a8c:	83 c4 10             	add    esp,0x10
c0022a8f:	89 c3                	mov    ebx,eax
c0022a91:	83 ec 0c             	sub    esp,0xc
c0022a94:	53                   	push   ebx
c0022a95:	e8 6e ff ff ff       	call   c0022a08 <IOAPIC::IOAPIC()>
c0022a9a:	83 c4 10             	add    esp,0x10
c0022a9d:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0022aa1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0022aa6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022aaa:	89 14 85 40 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd31c0],edx
c0022ab1:	a1 20 ce 02 c0       	mov    eax,ds:0xc002ce20
c0022ab6:	40                   	inc    eax
c0022ab7:	a3 20 ce 02 c0       	mov    ds:0xc002ce20,eax
c0022abc:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c0022ac1:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022ac7:	83 ec 08             	sub    esp,0x8
c0022aca:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022ace:	50                   	push   eax
c0022acf:	e8 50 0f ff ff       	call   c0013a24 <Device::addChild(Device*)>
c0022ad4:	83 c4 10             	add    esp,0x10
c0022ad7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022adb:	8b 00                	mov    eax,DWORD PTR [eax]
c0022add:	83 c0 08             	add    eax,0x8
c0022ae0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ae2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0022ae7:	6a 00                	push   0x0
c0022ae9:	6a 00                	push   0x0
c0022aeb:	52                   	push   edx
c0022aec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022af0:	ff d0                	call   eax
c0022af2:	83 c4 10             	add    esp,0x10
c0022af5:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0022af9:	e9 6b ff ff ff       	jmp    c0022a69 <APIC::APIC()+0x39>
c0022afe:	c6 05 60 ce 02 c0 01 	mov    BYTE PTR ds:0xc002ce60,0x1
c0022b05:	90                   	nop
c0022b06:	83 c4 18             	add    esp,0x18
c0022b09:	5b                   	pop    ebx
c0022b0a:	c3                   	ret    
c0022b0b:	90                   	nop

c0022b0c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0022b0c:	55                   	push   ebp
c0022b0d:	89 e5                	mov    ebp,esp
c0022b0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022b12:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022b18:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0022b1b:	72 1d                	jb     c0022b3a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0022b1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022b20:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0022b26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022b29:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0022b2f:	01 d0                	add    eax,edx
c0022b31:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0022b34:	73 04                	jae    c0022b3a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0022b36:	b0 01                	mov    al,0x1
c0022b38:	eb 02                	jmp    c0022b3c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0022b3a:	b0 00                	mov    al,0x0
c0022b3c:	5d                   	pop    ebp
c0022b3d:	c3                   	ret    

c0022b3e <IOAPIC::read(int)>:
c0022b3e:	55                   	push   ebp
c0022b3f:	89 e5                	mov    ebp,esp
c0022b41:	83 ec 10             	sub    esp,0x10
c0022b44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022b47:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022b4d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0022b50:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022b53:	0f b6 d0             	movzx  edx,al
c0022b56:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022b59:	89 10                	mov    DWORD PTR [eax],edx
c0022b5b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022b5e:	83 c0 10             	add    eax,0x10
c0022b61:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b63:	c9                   	leave  
c0022b64:	c3                   	ret    
c0022b65:	90                   	nop

c0022b66 <IOAPIC::open(int, int, void*)>:
c0022b66:	55                   	push   ebp
c0022b67:	89 e5                	mov    ebp,esp
c0022b69:	57                   	push   edi
c0022b6a:	56                   	push   esi
c0022b6b:	53                   	push   ebx
c0022b6c:	83 ec 0c             	sub    esp,0xc
c0022b6f:	83 ec 0c             	sub    esp,0xc
c0022b72:	68 cb 98 02 c0       	push   0xc00298cb
c0022b77:	e8 b9 fa fe ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0022b7c:	83 c4 10             	add    esp,0x10
c0022b7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022b82:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022b85:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022b8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022b8e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022b94:	8b 14 85 e0 b4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4b20]
c0022b9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022b9e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022ba4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022ba7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022bad:	8b 14 85 60 b5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4aa0]
c0022bb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022bb7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0022bbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022bc0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0022bc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022bc9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022bcf:	0f b6 f8             	movzx  edi,al
c0022bd2:	89 d0                	mov    eax,edx
c0022bd4:	ba 00 00 00 00       	mov    edx,0x0
c0022bd9:	89 c1                	mov    ecx,eax
c0022bdb:	80 e5 ff             	and    ch,0xff
c0022bde:	89 cb                	mov    ebx,ecx
c0022be0:	0f b6 f2             	movzx  esi,dl
c0022be3:	89 d8                	mov    eax,ebx
c0022be5:	89 f2                	mov    edx,esi
c0022be7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0022bea:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022bed:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0022bf1:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022bf5:	83 e0 00             	and    eax,0x0
c0022bf8:	09 d0                	or     eax,edx
c0022bfa:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0022bfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022c01:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022c07:	8d 50 01             	lea    edx,[eax+0x1]
c0022c0a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0022c0d:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022c13:	0f b6 d0             	movzx  edx,al
c0022c16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022c19:	83 c2 08             	add    edx,0x8
c0022c1c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022c20:	0f b6 c9             	movzx  ecx,cl
c0022c23:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0022c29:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022c2d:	83 ec 08             	sub    esp,0x8
c0022c30:	6a 01                	push   0x1
c0022c32:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022c35:	e8 04 ff ff ff       	call   c0022b3e <IOAPIC::read(int)>
c0022c3a:	83 c4 10             	add    esp,0x10
c0022c3d:	c1 f8 10             	sar    eax,0x10
c0022c40:	0f b6 c0             	movzx  eax,al
c0022c43:	8d 50 01             	lea    edx,[eax+0x1]
c0022c46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022c49:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0022c4f:	b8 00 00 00 00       	mov    eax,0x0
c0022c54:	8d 65 f4             	lea    esp,[ebp-0xc]
c0022c57:	5b                   	pop    ebx
c0022c58:	5e                   	pop    esi
c0022c59:	5f                   	pop    edi
c0022c5a:	5d                   	pop    ebp
c0022c5b:	c3                   	ret    

c0022c5c <IOAPIC::write(int, int)>:
c0022c5c:	55                   	push   ebp
c0022c5d:	89 e5                	mov    ebp,esp
c0022c5f:	83 ec 10             	sub    esp,0x10
c0022c62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022c65:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022c6b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0022c6e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022c71:	0f b6 d0             	movzx  edx,al
c0022c74:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022c77:	89 10                	mov    DWORD PTR [eax],edx
c0022c79:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022c7c:	8d 50 10             	lea    edx,[eax+0x10]
c0022c7f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022c82:	89 02                	mov    DWORD PTR [edx],eax
c0022c84:	90                   	nop
c0022c85:	c9                   	leave  
c0022c86:	c3                   	ret    
c0022c87:	90                   	nop

c0022c88 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0022c88:	55                   	push   ebp
c0022c89:	89 e5                	mov    ebp,esp
c0022c8b:	53                   	push   ebx
c0022c8c:	83 ec 2c             	sub    esp,0x2c
c0022c8f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022c92:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0022c95:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0022c98:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0022c9b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0022c9e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022ca1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0022ca4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0022ca7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0022caa:	88 d8                	mov    al,bl
c0022cac:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0022caf:	88 c8                	mov    al,cl
c0022cb1:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0022cb4:	88 d0                	mov    al,dl
c0022cb6:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0022cb9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0022cbd:	83 c0 08             	add    eax,0x8
c0022cc0:	01 c0                	add    eax,eax
c0022cc2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0022cc5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0022cc9:	83 c0 08             	add    eax,0x8
c0022ccc:	01 c0                	add    eax,eax
c0022cce:	40                   	inc    eax
c0022ccf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0022cd2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0022cd5:	50                   	push   eax
c0022cd6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022cd9:	e8 60 fe ff ff       	call   c0022b3e <IOAPIC::read(int)>
c0022cde:	83 c4 08             	add    esp,0x8
c0022ce1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022ce4:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0022ceb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0022cee:	c1 e0 18             	shl    eax,0x18
c0022cf1:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0022cf4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0022cf7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0022cfa:	52                   	push   edx
c0022cfb:	50                   	push   eax
c0022cfc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022cff:	e8 58 ff ff ff       	call   c0022c5c <IOAPIC::write(int, int)>
c0022d04:	83 c4 0c             	add    esp,0xc
c0022d07:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022d0a:	50                   	push   eax
c0022d0b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022d0e:	e8 2b fe ff ff       	call   c0022b3e <IOAPIC::read(int)>
c0022d13:	83 c4 08             	add    esp,0x8
c0022d16:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0022d19:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0022d20:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0022d27:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0022d2e:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0022d32:	74 09                	je     c0022d3d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0022d34:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0022d3b:	eb 07                	jmp    c0022d44 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0022d3d:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0022d44:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0022d48:	74 09                	je     c0022d53 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0022d4a:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0022d51:	eb 07                	jmp    c0022d5a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0022d53:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0022d5a:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0022d61:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0022d65:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0022d68:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0022d6b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022d6e:	52                   	push   edx
c0022d6f:	50                   	push   eax
c0022d70:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022d73:	e8 e4 fe ff ff       	call   c0022c5c <IOAPIC::write(int, int)>
c0022d78:	83 c4 0c             	add    esp,0xc
c0022d7b:	90                   	nop
c0022d7c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0022d7f:	c9                   	leave  
c0022d80:	c3                   	ret    
c0022d81:	90                   	nop

c0022d82 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0022d82:	55                   	push   ebp
c0022d83:	89 e5                	mov    ebp,esp
c0022d85:	57                   	push   edi
c0022d86:	56                   	push   esi
c0022d87:	53                   	push   ebx
c0022d88:	83 ec 2c             	sub    esp,0x2c
c0022d8b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0022d8e:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0022d91:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0022d95:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0022d99:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0022d9d:	74 5a                	je     c0022df9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0022d9f:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0022da3:	7f 44                	jg     c0022de9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0022da5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022da8:	05 20 9e 02 c0       	add    eax,0xc0029e20
c0022dad:	8a 00                	mov    al,BYTE PTR [eax]
c0022daf:	0f b6 c0             	movzx  eax,al
c0022db2:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0022db5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022db8:	66 8b 84 00 80 b4 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd4b80]
c0022dc0:	0f b7 c0             	movzx  eax,ax
c0022dc3:	83 e0 02             	and    eax,0x2
c0022dc6:	85 c0                	test   eax,eax
c0022dc8:	74 04                	je     c0022dce <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0022dca:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0022dce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022dd1:	66 8b 84 00 80 b4 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd4b80]
c0022dd9:	0f b7 c0             	movzx  eax,ax
c0022ddc:	83 e0 08             	and    eax,0x8
c0022ddf:	85 c0                	test   eax,eax
c0022de1:	74 16                	je     c0022df9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0022de3:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0022de7:	eb 10                	jmp    c0022df9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0022de9:	83 ec 0c             	sub    esp,0xc
c0022dec:	68 dc 98 02 c0       	push   0xc00298dc
c0022df1:	e8 03 60 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c0022df6:	83 c4 10             	add    esp,0x10
c0022df9:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0022dfd:	a1 20 ce 02 c0       	mov    eax,ds:0xc002ce20
c0022e02:	83 ec 08             	sub    esp,0x8
c0022e05:	50                   	push   eax
c0022e06:	68 14 99 02 c0       	push   0xc0029914
c0022e0b:	e8 25 f8 fe ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0022e10:	83 c4 10             	add    esp,0x10
c0022e13:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0022e1a:	a1 20 ce 02 c0       	mov    eax,ds:0xc002ce20
c0022e1f:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0022e22:	7d 67                	jge    c0022e8b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0022e24:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022e27:	8b 04 85 40 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd31c0]
c0022e2e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022e31:	83 ec 08             	sub    esp,0x8
c0022e34:	52                   	push   edx
c0022e35:	50                   	push   eax
c0022e36:	e8 d1 fc ff ff       	call   c0022b0c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0022e3b:	83 c4 10             	add    esp,0x10
c0022e3e:	84 c0                	test   al,al
c0022e40:	74 44                	je     c0022e86 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0022e42:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022e45:	8b 1c 85 40 ce 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd31c0]
c0022e4c:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0022e50:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0022e53:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0022e57:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022e5a:	83 c0 20             	add    eax,0x20
c0022e5d:	0f b6 f0             	movzx  esi,al
c0022e60:	b8 00 00 00 00       	mov    eax,0x0
c0022e65:	99                   	cdq    
c0022e66:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0022e69:	0f b6 c9             	movzx  ecx,cl
c0022e6c:	83 ec 04             	sub    esp,0x4
c0022e6f:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0022e72:	57                   	push   edi
c0022e73:	56                   	push   esi
c0022e74:	52                   	push   edx
c0022e75:	50                   	push   eax
c0022e76:	51                   	push   ecx
c0022e77:	53                   	push   ebx
c0022e78:	e8 0b fe ff ff       	call   c0022c88 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0022e7d:	83 c4 20             	add    esp,0x20
c0022e80:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0022e84:	eb 05                	jmp    c0022e8b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0022e86:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0022e89:	eb 8f                	jmp    c0022e1a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0022e8b:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0022e8e:	83 f0 01             	xor    eax,0x1
c0022e91:	84 c0                	test   al,al
c0022e93:	74 10                	je     c0022ea5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0022e95:	83 ec 0c             	sub    esp,0xc
c0022e98:	68 2b 99 02 c0       	push   0xc002992b
c0022e9d:	e8 57 5f ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c0022ea2:	83 c4 10             	add    esp,0x10
c0022ea5:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0022ea9:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0022eb0:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0022eb4:	7f 65                	jg     c0022f1b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0022eb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022eb9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022ebc:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0022ec3:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022ec6:	01 ca                	add    edx,ecx
c0022ec8:	83 c2 54             	add    edx,0x54
c0022ecb:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0022ecf:	85 c0                	test   eax,eax
c0022ed1:	75 43                	jne    c0022f16 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0022ed3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022ed6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022ed9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0022ee0:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022ee3:	01 ca                	add    edx,ecx
c0022ee5:	8d 4a 54             	lea    ecx,[edx+0x54]
c0022ee8:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0022eeb:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0022eef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022ef2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022ef5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0022efc:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022eff:	01 ca                	add    edx,ecx
c0022f01:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0022f07:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0022f0a:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0022f0e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022f11:	83 e8 20             	sub    eax,0x20
c0022f14:	eb 1a                	jmp    c0022f30 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0022f16:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0022f19:	eb 95                	jmp    c0022eb0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0022f1b:	83 ec 0c             	sub    esp,0xc
c0022f1e:	68 38 99 02 c0       	push   0xc0029938
c0022f23:	e8 d1 5e ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c0022f28:	83 c4 10             	add    esp,0x10
c0022f2b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0022f30:	8d 65 f4             	lea    esp,[ebp-0xc]
c0022f33:	5b                   	pop    ebx
c0022f34:	5e                   	pop    esi
c0022f35:	5f                   	pop    edi
c0022f36:	5d                   	pop    ebp
c0022f37:	c3                   	ret    

c0022f38 <PIC::disable()>:
c0022f38:	55                   	push   ebp
c0022f39:	89 e5                	mov    ebp,esp
c0022f3b:	83 ec 10             	sub    esp,0x10
c0022f3e:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0022f44:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0022f48:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022f4b:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0022f4f:	ee                   	out    dx,al
c0022f50:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0022f56:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0022f5a:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0022f5d:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0022f61:	ee                   	out    dx,al
c0022f62:	90                   	nop
c0022f63:	c9                   	leave  
c0022f64:	c3                   	ret    
c0022f65:	90                   	nop

c0022f66 <PIC::close(int, int, void*)>:
c0022f66:	55                   	push   ebp
c0022f67:	89 e5                	mov    ebp,esp
c0022f69:	83 ec 08             	sub    esp,0x8
c0022f6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022f6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022f71:	83 c0 3c             	add    eax,0x3c
c0022f74:	8b 00                	mov    eax,DWORD PTR [eax]
c0022f76:	83 ec 0c             	sub    esp,0xc
c0022f79:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022f7c:	ff d0                	call   eax
c0022f7e:	83 c4 10             	add    esp,0x10
c0022f81:	b8 00 00 00 00       	mov    eax,0x0
c0022f86:	c9                   	leave  
c0022f87:	c3                   	ret    

c0022f88 <PIC::PIC()>:
c0022f88:	83 ec 0c             	sub    esp,0xc
c0022f8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f8f:	83 ec 08             	sub    esp,0x8
c0022f92:	68 e4 99 02 c0       	push   0xc00299e4
c0022f97:	50                   	push   eax
c0022f98:	e8 cf 13 ff ff       	call   c001436c <InterruptController::InterruptController(char const*)>
c0022f9d:	83 c4 10             	add    esp,0x10
c0022fa0:	ba 10 9a 02 c0       	mov    edx,0xc0029a10
c0022fa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fa9:	89 10                	mov    DWORD PTR [eax],edx
c0022fab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022faf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022fb5:	0f b6 d0             	movzx  edx,al
c0022fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fbc:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0022fc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fc7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022fcd:	0f b6 d0             	movzx  edx,al
c0022fd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fd4:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0022fd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fdd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022fe3:	8d 50 01             	lea    edx,[eax+0x1]
c0022fe6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022fea:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022ff0:	0f b6 d0             	movzx  edx,al
c0022ff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ff7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022ffb:	83 e1 3f             	and    ecx,0x3f
c0022ffe:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0023002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023006:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002300c:	0f b6 d0             	movzx  edx,al
c002300f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023013:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c002301a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002301e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023024:	0f b6 d0             	movzx  edx,al
c0023027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002302b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0023030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023034:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002303a:	8d 50 01             	lea    edx,[eax+0x1]
c002303d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023041:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0023047:	0f b6 d0             	movzx  edx,al
c002304a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002304e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0023052:	83 e1 3f             	and    ecx,0x3f
c0023055:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0023059:	90                   	nop
c002305a:	83 c4 0c             	add    esp,0xc
c002305d:	c3                   	ret    

c002305e <PIC::ioWait()>:
c002305e:	eb 00                	jmp    c0023060 <PIC::ioWait()+0x2>
c0023060:	eb 00                	jmp    c0023062 <PIC::ioWait()+0x4>
c0023062:	90                   	nop
c0023063:	c3                   	ret    

c0023064 <PIC::getIRQReg(int)>:
c0023064:	55                   	push   ebp
c0023065:	89 e5                	mov    ebp,esp
c0023067:	83 ec 10             	sub    esp,0x10
c002306a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002306d:	0f b6 c0             	movzx  eax,al
c0023070:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0023076:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0023079:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002307c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0023080:	ee                   	out    dx,al
c0023081:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023084:	0f b6 c0             	movzx  eax,al
c0023087:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002308d:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0023090:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0023093:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0023097:	ee                   	out    dx,al
c0023098:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c002309e:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00230a2:	89 c2                	mov    edx,eax
c00230a4:	ec                   	in     al,dx
c00230a5:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00230a8:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00230ab:	0f b6 c0             	movzx  eax,al
c00230ae:	c1 e0 08             	shl    eax,0x8
c00230b1:	89 c1                	mov    ecx,eax
c00230b3:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00230b9:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00230bd:	89 c2                	mov    edx,eax
c00230bf:	ec                   	in     al,dx
c00230c0:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00230c3:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00230c6:	0f b6 c0             	movzx  eax,al
c00230c9:	09 c8                	or     eax,ecx
c00230cb:	c9                   	leave  
c00230cc:	c3                   	ret    
c00230cd:	90                   	nop

c00230ce <PIC::eoi(unsigned char)>:
c00230ce:	55                   	push   ebp
c00230cf:	89 e5                	mov    ebp,esp
c00230d1:	83 ec 14             	sub    esp,0x14
c00230d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00230d7:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00230da:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00230de:	75 1e                	jne    c00230fe <PIC::eoi(unsigned char)+0x30>
c00230e0:	6a 0b                	push   0xb
c00230e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00230e5:	e8 7a ff ff ff       	call   c0023064 <PIC::getIRQReg(int)>
c00230ea:	83 c4 08             	add    esp,0x8
c00230ed:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00230f1:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00230f5:	25 80 00 00 00       	and    eax,0x80
c00230fa:	85 c0                	test   eax,eax
c00230fc:	74 5f                	je     c002315d <PIC::eoi(unsigned char)+0x8f>
c00230fe:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0023102:	75 2d                	jne    c0023131 <PIC::eoi(unsigned char)+0x63>
c0023104:	6a 0b                	push   0xb
c0023106:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023109:	e8 56 ff ff ff       	call   c0023064 <PIC::getIRQReg(int)>
c002310e:	83 c4 08             	add    esp,0x8
c0023111:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0023115:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0023118:	66 85 c0             	test   ax,ax
c002311b:	78 14                	js     c0023131 <PIC::eoi(unsigned char)+0x63>
c002311d:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0023123:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0023127:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002312a:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002312e:	ee                   	out    dx,al
c002312f:	eb 2d                	jmp    c002315e <PIC::eoi(unsigned char)+0x90>
c0023131:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0023135:	76 12                	jbe    c0023149 <PIC::eoi(unsigned char)+0x7b>
c0023137:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002313d:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0023141:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0023144:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0023148:	ee                   	out    dx,al
c0023149:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002314f:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0023153:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0023156:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002315a:	ee                   	out    dx,al
c002315b:	eb 01                	jmp    c002315e <PIC::eoi(unsigned char)+0x90>
c002315d:	90                   	nop
c002315e:	c9                   	leave  
c002315f:	c3                   	ret    

c0023160 <PIC::remap()>:
c0023160:	55                   	push   ebp
c0023161:	89 e5                	mov    ebp,esp
c0023163:	83 ec 48             	sub    esp,0x48
c0023166:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c002316d:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0023174:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c002317a:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c002317d:	89 c2                	mov    edx,eax
c002317f:	ec                   	in     al,dx
c0023180:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0023183:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0023186:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0023189:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c002318f:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0023192:	89 c2                	mov    edx,eax
c0023194:	ec                   	in     al,dx
c0023195:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0023198:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c002319b:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c002319e:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00231a4:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00231a8:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00231ab:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00231ae:	ee                   	out    dx,al
c00231af:	83 ec 0c             	sub    esp,0xc
c00231b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00231b5:	e8 a4 fe ff ff       	call   c002305e <PIC::ioWait()>
c00231ba:	83 c4 10             	add    esp,0x10
c00231bd:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00231c3:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00231c7:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00231ca:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00231cd:	ee                   	out    dx,al
c00231ce:	83 ec 0c             	sub    esp,0xc
c00231d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00231d4:	e8 85 fe ff ff       	call   c002305e <PIC::ioWait()>
c00231d9:	83 c4 10             	add    esp,0x10
c00231dc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00231df:	0f b6 c0             	movzx  eax,al
c00231e2:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00231e8:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00231eb:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00231ee:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00231f1:	ee                   	out    dx,al
c00231f2:	83 ec 0c             	sub    esp,0xc
c00231f5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00231f8:	e8 61 fe ff ff       	call   c002305e <PIC::ioWait()>
c00231fd:	83 c4 10             	add    esp,0x10
c0023200:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023203:	0f b6 c0             	movzx  eax,al
c0023206:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c002320c:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c002320f:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0023212:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0023215:	ee                   	out    dx,al
c0023216:	83 ec 0c             	sub    esp,0xc
c0023219:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002321c:	e8 3d fe ff ff       	call   c002305e <PIC::ioWait()>
c0023221:	83 c4 10             	add    esp,0x10
c0023224:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c002322a:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c002322e:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0023231:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0023234:	ee                   	out    dx,al
c0023235:	83 ec 0c             	sub    esp,0xc
c0023238:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002323b:	e8 1e fe ff ff       	call   c002305e <PIC::ioWait()>
c0023240:	83 c4 10             	add    esp,0x10
c0023243:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0023249:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c002324d:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0023250:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0023253:	ee                   	out    dx,al
c0023254:	83 ec 0c             	sub    esp,0xc
c0023257:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002325a:	e8 ff fd ff ff       	call   c002305e <PIC::ioWait()>
c002325f:	83 c4 10             	add    esp,0x10
c0023262:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0023268:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c002326c:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c002326f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0023272:	ee                   	out    dx,al
c0023273:	83 ec 0c             	sub    esp,0xc
c0023276:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023279:	e8 e0 fd ff ff       	call   c002305e <PIC::ioWait()>
c002327e:	83 c4 10             	add    esp,0x10
c0023281:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0023287:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c002328b:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002328e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0023291:	ee                   	out    dx,al
c0023292:	83 ec 0c             	sub    esp,0xc
c0023295:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023298:	e8 c1 fd ff ff       	call   c002305e <PIC::ioWait()>
c002329d:	83 c4 10             	add    esp,0x10
c00232a0:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00232a4:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00232aa:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00232ad:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00232b0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00232b3:	ee                   	out    dx,al
c00232b4:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00232b8:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00232be:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00232c1:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00232c4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00232c7:	ee                   	out    dx,al
c00232c8:	90                   	nop
c00232c9:	c9                   	leave  
c00232ca:	c3                   	ret    
c00232cb:	90                   	nop

c00232cc <PIC::open(int, int, void*)>:
c00232cc:	55                   	push   ebp
c00232cd:	89 e5                	mov    ebp,esp
c00232cf:	83 ec 18             	sub    esp,0x18
c00232d2:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00232d8:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00232dc:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00232df:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00232e3:	ee                   	out    dx,al
c00232e4:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00232ea:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00232ee:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00232f1:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00232f5:	ee                   	out    dx,al
c00232f6:	83 ec 0c             	sub    esp,0xc
c00232f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00232fc:	e8 5f fe ff ff       	call   c0023160 <PIC::remap()>
c0023301:	83 c4 10             	add    esp,0x10
c0023304:	b8 00 00 00 00       	mov    eax,0x0
c0023309:	c9                   	leave  
c002330a:	c3                   	ret    
c002330b:	90                   	nop

c002330c <APICTimer::close(int, int, void*)>:
c002330c:	b8 00 00 00 00       	mov    eax,0x0
c0023311:	c3                   	ret    

c0023312 <apicTimerHandler(regs*, void*)>:
c0023312:	83 ec 0c             	sub    esp,0xc
c0023315:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023319:	8b 00                	mov    eax,DWORD PTR [eax]
c002331b:	99                   	cdq    
c002331c:	52                   	push   edx
c002331d:	50                   	push   eax
c002331e:	6a 00                	push   0x0
c0023320:	68 00 ca 9a 3b       	push   0x3b9aca00
c0023325:	e8 82 07 00 00       	call   c0023aac <__udivdi3>
c002332a:	83 c4 10             	add    esp,0x10
c002332d:	83 ec 08             	sub    esp,0x8
c0023330:	52                   	push   edx
c0023331:	50                   	push   eax
c0023332:	e8 36 2e ff ff       	call   c001616d <timerHandler(unsigned long long)>
c0023337:	83 c4 10             	add    esp,0x10
c002333a:	90                   	nop
c002333b:	83 c4 0c             	add    esp,0xc
c002333e:	c3                   	ret    
c002333f:	90                   	nop

c0023340 <APICTimer::write(int)>:
c0023340:	53                   	push   ebx
c0023341:	83 ec 28             	sub    esp,0x28
c0023344:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023348:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002334c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023352:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c0023357:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002335d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0023363:	83 ec 0c             	sub    esp,0xc
c0023366:	50                   	push   eax
c0023367:	e8 de f4 ff ff       	call   c002284a <APIC::getBase()>
c002336c:	83 c4 10             	add    esp,0x10
c002336f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023373:	a1 b0 b1 02 c0       	mov    eax,ds:0xc002b1b0
c0023378:	8b 15 b4 b1 02 c0    	mov    edx,DWORD PTR ds:0xc002b1b4
c002337e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023382:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0023386:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002338a:	05 e0 03 00 00       	add    eax,0x3e0
c002338f:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0023395:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023399:	05 80 03 00 00       	add    eax,0x380
c002339e:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00233a4:	fb                   	sti    
c00233a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00233ad:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c00233b2:	83 d2 00             	adc    edx,0x0
c00233b5:	89 c1                	mov    ecx,eax
c00233b7:	89 d3                	mov    ebx,edx
c00233b9:	a1 b0 b1 02 c0       	mov    eax,ds:0xc002b1b0
c00233be:	8b 15 b4 b1 02 c0    	mov    edx,DWORD PTR ds:0xc002b1b4
c00233c4:	39 c8                	cmp    eax,ecx
c00233c6:	89 d0                	mov    eax,edx
c00233c8:	19 d8                	sbb    eax,ebx
c00233ca:	73 02                	jae    c00233ce <APICTimer::write(int)+0x8e>
c00233cc:	eb d7                	jmp    c00233a5 <APICTimer::write(int)+0x65>
c00233ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00233d2:	05 20 03 00 00       	add    eax,0x320
c00233d7:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00233dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00233e1:	05 90 03 00 00       	add    eax,0x390
c00233e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00233e8:	f7 d0                	not    eax
c00233ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00233ee:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00233f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00233f6:	ba 00 00 00 00       	mov    edx,0x0
c00233fb:	f7 f3                	div    ebx
c00233fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023401:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023405:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002340b:	0d 00 00 02 00       	or     eax,0x20000
c0023410:	89 c2                	mov    edx,eax
c0023412:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023416:	05 20 03 00 00       	add    eax,0x320
c002341b:	89 10                	mov    DWORD PTR [eax],edx
c002341d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023421:	05 e0 03 00 00       	add    eax,0x3e0
c0023426:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002342c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023430:	05 80 03 00 00       	add    eax,0x380
c0023435:	89 c2                	mov    edx,eax
c0023437:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002343b:	89 02                	mov    DWORD PTR [edx],eax
c002343d:	90                   	nop
c002343e:	83 c4 28             	add    esp,0x28
c0023441:	5b                   	pop    ebx
c0023442:	c3                   	ret    
c0023443:	90                   	nop

c0023444 <APICTimer::open(int, int, void*)>:
c0023444:	57                   	push   edi
c0023445:	56                   	push   esi
c0023446:	53                   	push   ebx
c0023447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002344b:	8b 00                	mov    eax,DWORD PTR [eax]
c002344d:	83 c0 24             	add    eax,0x24
c0023450:	8b 00                	mov    eax,DWORD PTR [eax]
c0023452:	83 ec 08             	sub    esp,0x8
c0023455:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023459:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002345d:	ff d0                	call   eax
c002345f:	83 c4 10             	add    esp,0x10
c0023462:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c0023467:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002346d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0023473:	83 ec 0c             	sub    esp,0xc
c0023476:	50                   	push   eax
c0023477:	e8 ce f3 ff ff       	call   c002284a <APIC::getBase()>
c002347c:	83 c4 10             	add    esp,0x10
c002347f:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0023485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023489:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002348f:	0f b6 f8             	movzx  edi,al
c0023492:	89 d0                	mov    eax,edx
c0023494:	ba 00 00 00 00       	mov    edx,0x0
c0023499:	89 c1                	mov    ecx,eax
c002349b:	80 e5 ff             	and    ch,0xff
c002349e:	89 cb                	mov    ebx,ecx
c00234a0:	0f b6 f2             	movzx  esi,dl
c00234a3:	89 d8                	mov    eax,ebx
c00234a5:	89 f2                	mov    edx,esi
c00234a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00234ab:	8d 5f 08             	lea    ebx,[edi+0x8]
c00234ae:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00234b2:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00234b6:	83 e0 00             	and    eax,0x0
c00234b9:	09 d0                	or     eax,edx
c00234bb:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00234bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234c3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00234c9:	8d 50 01             	lea    edx,[eax+0x1]
c00234cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00234d0:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00234d6:	0f b6 d0             	movzx  edx,al
c00234d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234dd:	83 c2 08             	add    edx,0x8
c00234e0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00234e4:	0f b6 c9             	movzx  ecx,cl
c00234e7:	81 c9 00 00 01 00    	or     ecx,0x10000
c00234ed:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00234f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00234f9:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00234ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023503:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023507:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002350d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023511:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023517:	83 ec 0c             	sub    esp,0xc
c002351a:	51                   	push   ecx
c002351b:	6a 01                	push   0x1
c002351d:	68 12 33 02 c0       	push   0xc0023312
c0023522:	52                   	push   edx
c0023523:	50                   	push   eax
c0023524:	e8 7f 04 ff ff       	call   c00139a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023529:	83 c4 20             	add    esp,0x20
c002352c:	89 c2                	mov    edx,eax
c002352e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023532:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0023538:	b8 00 00 00 00       	mov    eax,0x0
c002353d:	5b                   	pop    ebx
c002353e:	5e                   	pop    esi
c002353f:	5f                   	pop    edi
c0023540:	c3                   	ret    
c0023541:	90                   	nop

c0023542 <APICTimer::APICTimer()>:
c0023542:	83 ec 0c             	sub    esp,0xc
c0023545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023549:	83 ec 08             	sub    esp,0x8
c002354c:	68 50 9a 02 c0       	push   0xc0029a50
c0023551:	50                   	push   eax
c0023552:	e8 87 2b ff ff       	call   c00160de <Timer::Timer(char const*)>
c0023557:	83 c4 10             	add    esp,0x10
c002355a:	ba 64 9a 02 c0       	mov    edx,0xc0029a64
c002355f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023563:	89 10                	mov    DWORD PTR [eax],edx
c0023565:	90                   	nop
c0023566:	83 c4 0c             	add    esp,0xc
c0023569:	c3                   	ret    

c002356a <PIT::write(int)>:
c002356a:	83 ec 10             	sub    esp,0x10
c002356d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023571:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0023575:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002357b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002357f:	a3 64 ce 02 c0       	mov    ds:0xc002ce64,eax
c0023584:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0023589:	99                   	cdq    
c002358a:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002358e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023592:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0023599:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002359e:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00235a2:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00235a7:	ee                   	out    dx,al
c00235a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00235ac:	0f b6 c0             	movzx  eax,al
c00235af:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00235b6:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00235ba:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00235be:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00235c3:	ee                   	out    dx,al
c00235c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00235c8:	c1 f8 08             	sar    eax,0x8
c00235cb:	0f b6 c0             	movzx  eax,al
c00235ce:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00235d5:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00235d9:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00235dd:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00235e2:	ee                   	out    dx,al
c00235e3:	90                   	nop
c00235e4:	83 c4 10             	add    esp,0x10
c00235e7:	c3                   	ret    

c00235e8 <pitHandler(regs*, void*)>:
c00235e8:	83 ec 0c             	sub    esp,0xc
c00235eb:	a1 64 ce 02 c0       	mov    eax,ds:0xc002ce64
c00235f0:	99                   	cdq    
c00235f1:	52                   	push   edx
c00235f2:	50                   	push   eax
c00235f3:	6a 00                	push   0x0
c00235f5:	68 00 ca 9a 3b       	push   0x3b9aca00
c00235fa:	e8 ad 04 00 00       	call   c0023aac <__udivdi3>
c00235ff:	83 c4 10             	add    esp,0x10
c0023602:	83 ec 08             	sub    esp,0x8
c0023605:	52                   	push   edx
c0023606:	50                   	push   eax
c0023607:	e8 61 2b ff ff       	call   c001616d <timerHandler(unsigned long long)>
c002360c:	83 c4 10             	add    esp,0x10
c002360f:	90                   	nop
c0023610:	83 c4 0c             	add    esp,0xc
c0023613:	c3                   	ret    

c0023614 <PIT::open(int, int, void*)>:
c0023614:	83 ec 0c             	sub    esp,0xc
c0023617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002361b:	8b 00                	mov    eax,DWORD PTR [eax]
c002361d:	83 c0 24             	add    eax,0x24
c0023620:	8b 00                	mov    eax,DWORD PTR [eax]
c0023622:	83 ec 08             	sub    esp,0x8
c0023625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023629:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002362d:	ff d0                	call   eax
c002362f:	83 c4 10             	add    esp,0x10
c0023632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023636:	83 ec 0c             	sub    esp,0xc
c0023639:	6a 00                	push   0x0
c002363b:	6a 01                	push   0x1
c002363d:	68 e8 35 02 c0       	push   0xc00235e8
c0023642:	6a 00                	push   0x0
c0023644:	50                   	push   eax
c0023645:	e8 5e 03 ff ff       	call   c00139a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002364a:	83 c4 20             	add    esp,0x20
c002364d:	89 c2                	mov    edx,eax
c002364f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023653:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0023659:	b8 00 00 00 00       	mov    eax,0x0
c002365e:	83 c4 0c             	add    esp,0xc
c0023661:	c3                   	ret    

c0023662 <PIT::close(int, int, void*)>:
c0023662:	83 ec 0c             	sub    esp,0xc
c0023665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023669:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0023673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023677:	6a 01                	push   0x1
c0023679:	68 e8 35 02 c0       	push   0xc00235e8
c002367e:	6a 00                	push   0x0
c0023680:	50                   	push   eax
c0023681:	e8 60 03 ff ff       	call   c00139e6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0023686:	83 c4 10             	add    esp,0x10
c0023689:	b8 00 00 00 00       	mov    eax,0x0
c002368e:	83 c4 0c             	add    esp,0xc
c0023691:	c3                   	ret    

c0023692 <PIT::PIT()>:
c0023692:	83 ec 0c             	sub    esp,0xc
c0023695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023699:	83 ec 08             	sub    esp,0x8
c002369c:	68 8c 9a 02 c0       	push   0xc0029a8c
c00236a1:	50                   	push   eax
c00236a2:	e8 37 2a ff ff       	call   c00160de <Timer::Timer(char const*)>
c00236a7:	83 c4 10             	add    esp,0x10
c00236aa:	ba b4 9a 02 c0       	mov    edx,0xc0029ab4
c00236af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236b3:	89 10                	mov    DWORD PTR [eax],edx
c00236b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236b9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00236bf:	0f b6 d0             	movzx  edx,al
c00236c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236c6:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00236cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236d1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00236d7:	0f b6 d0             	movzx  edx,al
c00236da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236de:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00236e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00236ed:	8d 50 01             	lea    edx,[eax+0x1]
c00236f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00236f4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00236fa:	0f b6 d0             	movzx  edx,al
c00236fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023701:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0023705:	83 e1 3f             	and    ecx,0x3f
c0023708:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002370c:	90                   	nop
c002370d:	83 c4 0c             	add    esp,0xc
c0023710:	c3                   	ret    
c0023711:	66 90                	xchg   ax,ax
c0023713:	66 90                	xchg   ax,ax
c0023715:	66 90                	xchg   ax,ax
c0023717:	66 90                	xchg   ax,ax
c0023719:	66 90                	xchg   ax,ax
c002371b:	66 90                	xchg   ax,ax
c002371d:	66 90                	xchg   ax,ax
c002371f:	90                   	nop

c0023720 <avxDetect>:
c0023720:	b8 00 00 00 00       	mov    eax,0x0
c0023725:	c3                   	ret    

c0023726 <avxSave>:
c0023726:	c3                   	ret    

c0023727 <avxLoad>:
c0023727:	c3                   	ret    

c0023728 <avxInit>:
c0023728:	c3                   	ret    

c0023729 <avxClose>:
c0023729:	c3                   	ret    
c002372a:	66 90                	xchg   ax,ax
c002372c:	66 90                	xchg   ax,ax
c002372e:	66 90                	xchg   ax,ax

c0023730 <sseDetect>:
c0023730:	b8 01 00 00 00       	mov    eax,0x1
c0023735:	0f a2                	cpuid  
c0023737:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002373d:	74 06                	je     c0023745 <sseDetect.noSSE>
c002373f:	b8 01 00 00 00       	mov    eax,0x1
c0023744:	c3                   	ret    

c0023745 <sseDetect.noSSE>:
c0023745:	b8 00 00 00 00       	mov    eax,0x0
c002374a:	c3                   	ret    

c002374b <sseSave>:
c002374b:	0f ae 44 24 08       	fxsave [esp+0x8]
c0023750:	c3                   	ret    

c0023751 <sseLoad>:
c0023751:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0023756:	c3                   	ret    

c0023757 <sseInit>:
c0023757:	e8 40 00 00 00       	call   c002379c <x87Init>
c002375c:	0f 20 e0             	mov    eax,cr4
c002375f:	66 0d 00 06          	or     ax,0x600
c0023763:	0f 22 e0             	mov    cr4,eax
c0023766:	c3                   	ret    

c0023767 <sseClose>:
c0023767:	c3                   	ret    
c0023768:	66 90                	xchg   ax,ax
c002376a:	66 90                	xchg   ax,ax
c002376c:	66 90                	xchg   ax,ax
c002376e:	66 90                	xchg   ax,ax

c0023770 <value_37F>:
c0023770:	7f 03                	jg     c0023775 <value_37A+0x1>

c0023772 <value_37E>:
c0023772:	7e 03                	jle    c0023777 <x87Detect+0x1>

c0023774 <value_37A>:
c0023774:	7a 03                	jp     c0023779 <x87Detect+0x3>

c0023776 <x87Detect>:
c0023776:	b8 01 00 00 00       	mov    eax,0x1
c002377b:	0f a2                	cpuid  
c002377d:	f7 c2 01 00 00 00    	test   edx,0x1
c0023783:	74 06                	je     c002378b <x87Detect.nox87>
c0023785:	b8 01 00 00 00       	mov    eax,0x1
c002378a:	c3                   	ret    

c002378b <x87Detect.nox87>:
c002378b:	b8 00 00 00 00       	mov    eax,0x0
c0023790:	c3                   	ret    

c0023791 <x87Save>:
c0023791:	9b dd 74 24 08       	fsave  [esp+0x8]
c0023796:	c3                   	ret    

c0023797 <x87Load>:
c0023797:	dd 64 24 08          	frstor [esp+0x8]
c002379b:	c3                   	ret    

c002379c <x87Init>:
c002379c:	9b db e3             	finit  
c002379f:	0f 20 c0             	mov    eax,cr0
c00237a2:	66 25 fb ff          	and    ax,0xfffb
c00237a6:	66 0d 22 00          	or     ax,0x22
c00237aa:	0f 22 c0             	mov    cr0,eax
c00237ad:	0f 06                	clts   
c00237af:	d9 2d 74 37 02 c0    	fldcw  WORD PTR ds:0xc0023774
c00237b5:	c3                   	ret    

c00237b6 <x87Close>:
c00237b6:	c3                   	ret    
c00237b7:	90                   	nop

c00237b8 <__do_global_ctors_aux>:
c00237b8:	a1 10 62 02 c0       	mov    eax,ds:0xc0026210
c00237bd:	83 f8 ff             	cmp    eax,0xffffffff
c00237c0:	74 1a                	je     c00237dc <__do_global_ctors_aux+0x24>
c00237c2:	55                   	push   ebp
c00237c3:	89 e5                	mov    ebp,esp
c00237c5:	53                   	push   ebx
c00237c6:	52                   	push   edx
c00237c7:	bb 10 62 02 c0       	mov    ebx,0xc0026210
c00237cc:	ff d0                	call   eax
c00237ce:	83 eb 04             	sub    ebx,0x4
c00237d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00237d3:	83 f8 ff             	cmp    eax,0xffffffff
c00237d6:	75 f4                	jne    c00237cc <__do_global_ctors_aux+0x14>
c00237d8:	58                   	pop    eax
c00237d9:	5b                   	pop    ebx
c00237da:	5d                   	pop    ebp
c00237db:	c3                   	ret    
c00237dc:	c3                   	ret    
c00237dd:	66 90                	xchg   ax,ax
c00237df:	90                   	nop

c00237e0 <__divdi3>:
c00237e0:	55                   	push   ebp
c00237e1:	57                   	push   edi
c00237e2:	56                   	push   esi
c00237e3:	53                   	push   ebx
c00237e4:	83 ec 1c             	sub    esp,0x1c
c00237e7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00237eb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00237ef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00237f2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00237f6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00237fa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00237fe:	85 db                	test   ebx,ebx
c0023800:	0f 88 8e 00 00 00    	js     c0023894 <__divdi3+0xb4>
c0023806:	89 dd                	mov    ebp,ebx
c0023808:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023810:	89 d3                	mov    ebx,edx
c0023812:	85 d2                	test   edx,edx
c0023814:	79 0d                	jns    c0023823 <__divdi3+0x43>
c0023816:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002381a:	f7 d8                	neg    eax
c002381c:	83 d2 00             	adc    edx,0x0
c002381f:	f7 da                	neg    edx
c0023821:	89 d3                	mov    ebx,edx
c0023823:	89 c7                	mov    edi,eax
c0023825:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0023828:	85 db                	test   ebx,ebx
c002382a:	75 48                	jne    c0023874 <__divdi3+0x94>
c002382c:	39 ef                	cmp    edi,ebp
c002382e:	76 24                	jbe    c0023854 <__divdi3+0x74>
c0023830:	89 ea                	mov    edx,ebp
c0023832:	f7 f7                	div    edi
c0023834:	89 c1                	mov    ecx,eax
c0023836:	31 f6                	xor    esi,esi
c0023838:	89 c8                	mov    eax,ecx
c002383a:	89 f2                	mov    edx,esi
c002383c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023840:	85 c9                	test   ecx,ecx
c0023842:	74 07                	je     c002384b <__divdi3+0x6b>
c0023844:	f7 d8                	neg    eax
c0023846:	83 d2 00             	adc    edx,0x0
c0023849:	f7 da                	neg    edx
c002384b:	83 c4 1c             	add    esp,0x1c
c002384e:	5b                   	pop    ebx
c002384f:	5e                   	pop    esi
c0023850:	5f                   	pop    edi
c0023851:	5d                   	pop    ebp
c0023852:	c3                   	ret    
c0023853:	90                   	nop
c0023854:	85 ff                	test   edi,edi
c0023856:	75 0b                	jne    c0023863 <__divdi3+0x83>
c0023858:	b8 01 00 00 00       	mov    eax,0x1
c002385d:	31 d2                	xor    edx,edx
c002385f:	f7 f3                	div    ebx
c0023861:	89 c7                	mov    edi,eax
c0023863:	31 d2                	xor    edx,edx
c0023865:	89 e8                	mov    eax,ebp
c0023867:	f7 f7                	div    edi
c0023869:	89 c6                	mov    esi,eax
c002386b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002386e:	f7 f7                	div    edi
c0023870:	89 c1                	mov    ecx,eax
c0023872:	eb c4                	jmp    c0023838 <__divdi3+0x58>
c0023874:	39 eb                	cmp    ebx,ebp
c0023876:	77 3c                	ja     c00238b4 <__divdi3+0xd4>
c0023878:	0f bd f3             	bsr    esi,ebx
c002387b:	83 f6 1f             	xor    esi,0x1f
c002387e:	75 40                	jne    c00238c0 <__divdi3+0xe0>
c0023880:	39 eb                	cmp    ebx,ebp
c0023882:	72 09                	jb     c002388d <__divdi3+0xad>
c0023884:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0023887:	0f 87 97 00 00 00    	ja     c0023924 <__divdi3+0x144>
c002388d:	b9 01 00 00 00       	mov    ecx,0x1
c0023892:	eb a4                	jmp    c0023838 <__divdi3+0x58>
c0023894:	f7 d9                	neg    ecx
c0023896:	83 d3 00             	adc    ebx,0x0
c0023899:	f7 db                	neg    ebx
c002389b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002389e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00238a2:	89 dd                	mov    ebp,ebx
c00238a4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00238ac:	e9 5f ff ff ff       	jmp    c0023810 <__divdi3+0x30>
c00238b1:	8d 76 00             	lea    esi,[esi+0x0]
c00238b4:	31 f6                	xor    esi,esi
c00238b6:	31 c9                	xor    ecx,ecx
c00238b8:	e9 7b ff ff ff       	jmp    c0023838 <__divdi3+0x58>
c00238bd:	8d 76 00             	lea    esi,[esi+0x0]
c00238c0:	b8 20 00 00 00       	mov    eax,0x20
c00238c5:	29 f0                	sub    eax,esi
c00238c7:	89 f1                	mov    ecx,esi
c00238c9:	d3 e3                	shl    ebx,cl
c00238cb:	89 fa                	mov    edx,edi
c00238cd:	88 c1                	mov    cl,al
c00238cf:	d3 ea                	shr    edx,cl
c00238d1:	09 da                	or     edx,ebx
c00238d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00238d7:	89 f1                	mov    ecx,esi
c00238d9:	d3 e7                	shl    edi,cl
c00238db:	89 eb                	mov    ebx,ebp
c00238dd:	88 c1                	mov    cl,al
c00238df:	d3 eb                	shr    ebx,cl
c00238e1:	89 f1                	mov    ecx,esi
c00238e3:	d3 e5                	shl    ebp,cl
c00238e5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00238e8:	88 c1                	mov    cl,al
c00238ea:	d3 ea                	shr    edx,cl
c00238ec:	09 d5                	or     ebp,edx
c00238ee:	89 e8                	mov    eax,ebp
c00238f0:	89 da                	mov    edx,ebx
c00238f2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00238f6:	89 d3                	mov    ebx,edx
c00238f8:	89 c5                	mov    ebp,eax
c00238fa:	f7 e7                	mul    edi
c00238fc:	39 d3                	cmp    ebx,edx
c00238fe:	72 18                	jb     c0023918 <__divdi3+0x138>
c0023900:	74 0a                	je     c002390c <__divdi3+0x12c>
c0023902:	89 e9                	mov    ecx,ebp
c0023904:	31 f6                	xor    esi,esi
c0023906:	e9 2d ff ff ff       	jmp    c0023838 <__divdi3+0x58>
c002390b:	90                   	nop
c002390c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002390f:	89 f1                	mov    ecx,esi
c0023911:	d3 e7                	shl    edi,cl
c0023913:	39 c7                	cmp    edi,eax
c0023915:	73 eb                	jae    c0023902 <__divdi3+0x122>
c0023917:	90                   	nop
c0023918:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002391b:	31 f6                	xor    esi,esi
c002391d:	e9 16 ff ff ff       	jmp    c0023838 <__divdi3+0x58>
c0023922:	66 90                	xchg   ax,ax
c0023924:	31 c9                	xor    ecx,ecx
c0023926:	e9 0d ff ff ff       	jmp    c0023838 <__divdi3+0x58>
c002392b:	90                   	nop

c002392c <__moddi3>:
c002392c:	55                   	push   ebp
c002392d:	57                   	push   edi
c002392e:	56                   	push   esi
c002392f:	53                   	push   ebx
c0023930:	83 ec 2c             	sub    esp,0x2c
c0023933:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023937:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002393b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002393f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0023943:	85 db                	test   ebx,ebx
c0023945:	0f 88 85 00 00 00    	js     c00239d0 <__moddi3+0xa4>
c002394b:	89 de                	mov    esi,ebx
c002394d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0023955:	89 d7                	mov    edi,edx
c0023957:	85 d2                	test   edx,edx
c0023959:	79 09                	jns    c0023964 <__moddi3+0x38>
c002395b:	f7 d8                	neg    eax
c002395d:	83 d2 00             	adc    edx,0x0
c0023960:	f7 da                	neg    edx
c0023962:	89 d7                	mov    edi,edx
c0023964:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023968:	89 cd                	mov    ebp,ecx
c002396a:	85 ff                	test   edi,edi
c002396c:	75 52                	jne    c00239c0 <__moddi3+0x94>
c002396e:	89 c3                	mov    ebx,eax
c0023970:	39 f0                	cmp    eax,esi
c0023972:	76 24                	jbe    c0023998 <__moddi3+0x6c>
c0023974:	89 c8                	mov    eax,ecx
c0023976:	89 f2                	mov    edx,esi
c0023978:	f7 f3                	div    ebx
c002397a:	89 d6                	mov    esi,edx
c002397c:	89 f0                	mov    eax,esi
c002397e:	31 d2                	xor    edx,edx
c0023980:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023984:	85 c9                	test   ecx,ecx
c0023986:	74 07                	je     c002398f <__moddi3+0x63>
c0023988:	f7 d8                	neg    eax
c002398a:	83 d2 00             	adc    edx,0x0
c002398d:	f7 da                	neg    edx
c002398f:	83 c4 2c             	add    esp,0x2c
c0023992:	5b                   	pop    ebx
c0023993:	5e                   	pop    esi
c0023994:	5f                   	pop    edi
c0023995:	5d                   	pop    ebp
c0023996:	c3                   	ret    
c0023997:	90                   	nop
c0023998:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002399c:	85 db                	test   ebx,ebx
c002399e:	75 0d                	jne    c00239ad <__moddi3+0x81>
c00239a0:	b8 01 00 00 00       	mov    eax,0x1
c00239a5:	31 d2                	xor    edx,edx
c00239a7:	f7 f7                	div    edi
c00239a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00239ad:	89 f0                	mov    eax,esi
c00239af:	31 d2                	xor    edx,edx
c00239b1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00239b5:	f7 f7                	div    edi
c00239b7:	89 e8                	mov    eax,ebp
c00239b9:	f7 f7                	div    edi
c00239bb:	89 d6                	mov    esi,edx
c00239bd:	eb bd                	jmp    c002397c <__moddi3+0x50>
c00239bf:	90                   	nop
c00239c0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00239c4:	39 f7                	cmp    edi,esi
c00239c6:	76 20                	jbe    c00239e8 <__moddi3+0xbc>
c00239c8:	89 c8                	mov    eax,ecx
c00239ca:	89 f2                	mov    edx,esi
c00239cc:	eb b2                	jmp    c0023980 <__moddi3+0x54>
c00239ce:	66 90                	xchg   ax,ax
c00239d0:	f7 d9                	neg    ecx
c00239d2:	83 d3 00             	adc    ebx,0x0
c00239d5:	f7 db                	neg    ebx
c00239d7:	89 de                	mov    esi,ebx
c00239d9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00239e1:	e9 6f ff ff ff       	jmp    c0023955 <__moddi3+0x29>
c00239e6:	66 90                	xchg   ax,ax
c00239e8:	0f bd c7             	bsr    eax,edi
c00239eb:	83 f0 1f             	xor    eax,0x1f
c00239ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00239f2:	75 24                	jne    c0023a18 <__moddi3+0xec>
c00239f4:	39 f7                	cmp    edi,esi
c00239f6:	72 06                	jb     c00239fe <__moddi3+0xd2>
c00239f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00239fc:	77 0c                	ja     c0023a0a <__moddi3+0xde>
c00239fe:	89 e9                	mov    ecx,ebp
c0023a00:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0023a04:	19 fe                	sbb    esi,edi
c0023a06:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0023a0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023a0e:	89 f2                	mov    edx,esi
c0023a10:	e9 6b ff ff ff       	jmp    c0023980 <__moddi3+0x54>
c0023a15:	8d 76 00             	lea    esi,[esi+0x0]
c0023a18:	b8 20 00 00 00       	mov    eax,0x20
c0023a1d:	89 c2                	mov    edx,eax
c0023a1f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023a23:	29 da                	sub    edx,ebx
c0023a25:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0023a29:	88 d9                	mov    cl,bl
c0023a2b:	d3 e7                	shl    edi,cl
c0023a2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023a31:	88 d1                	mov    cl,dl
c0023a33:	d3 e8                	shr    eax,cl
c0023a35:	09 c7                	or     edi,eax
c0023a37:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0023a3b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023a3f:	89 d8                	mov    eax,ebx
c0023a41:	88 d9                	mov    cl,bl
c0023a43:	d3 e7                	shl    edi,cl
c0023a45:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0023a49:	89 f3                	mov    ebx,esi
c0023a4b:	88 d1                	mov    cl,dl
c0023a4d:	d3 eb                	shr    ebx,cl
c0023a4f:	89 c7                	mov    edi,eax
c0023a51:	88 c1                	mov    cl,al
c0023a53:	d3 e6                	shl    esi,cl
c0023a55:	89 e8                	mov    eax,ebp
c0023a57:	88 d1                	mov    cl,dl
c0023a59:	d3 e8                	shr    eax,cl
c0023a5b:	09 f0                	or     eax,esi
c0023a5d:	89 f9                	mov    ecx,edi
c0023a5f:	d3 e5                	shl    ebp,cl
c0023a61:	89 da                	mov    edx,ebx
c0023a63:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0023a67:	89 d3                	mov    ebx,edx
c0023a69:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023a6d:	89 c6                	mov    esi,eax
c0023a6f:	89 d1                	mov    ecx,edx
c0023a71:	39 d3                	cmp    ebx,edx
c0023a73:	72 27                	jb     c0023a9c <__moddi3+0x170>
c0023a75:	74 21                	je     c0023a98 <__moddi3+0x16c>
c0023a77:	29 f5                	sub    ebp,esi
c0023a79:	19 cb                	sbb    ebx,ecx
c0023a7b:	89 de                	mov    esi,ebx
c0023a7d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0023a81:	d3 e6                	shl    esi,cl
c0023a83:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0023a87:	89 f9                	mov    ecx,edi
c0023a89:	d3 ed                	shr    ebp,cl
c0023a8b:	09 ee                	or     esi,ebp
c0023a8d:	89 f0                	mov    eax,esi
c0023a8f:	d3 eb                	shr    ebx,cl
c0023a91:	89 da                	mov    edx,ebx
c0023a93:	e9 e8 fe ff ff       	jmp    c0023980 <__moddi3+0x54>
c0023a98:	39 c5                	cmp    ebp,eax
c0023a9a:	73 db                	jae    c0023a77 <__moddi3+0x14b>
c0023a9c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0023aa0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0023aa4:	89 d1                	mov    ecx,edx
c0023aa6:	89 c6                	mov    esi,eax
c0023aa8:	eb cd                	jmp    c0023a77 <__moddi3+0x14b>
c0023aaa:	66 90                	xchg   ax,ax

c0023aac <__udivdi3>:
c0023aac:	55                   	push   ebp
c0023aad:	57                   	push   edi
c0023aae:	56                   	push   esi
c0023aaf:	53                   	push   ebx
c0023ab0:	83 ec 1c             	sub    esp,0x1c
c0023ab3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0023ab7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023abb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023abf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023ac3:	85 d2                	test   edx,edx
c0023ac5:	75 41                	jne    c0023b08 <__udivdi3+0x5c>
c0023ac7:	39 f7                	cmp    edi,esi
c0023ac9:	76 15                	jbe    c0023ae0 <__udivdi3+0x34>
c0023acb:	89 e8                	mov    eax,ebp
c0023acd:	89 f2                	mov    edx,esi
c0023acf:	f7 f7                	div    edi
c0023ad1:	31 db                	xor    ebx,ebx
c0023ad3:	89 da                	mov    edx,ebx
c0023ad5:	83 c4 1c             	add    esp,0x1c
c0023ad8:	5b                   	pop    ebx
c0023ad9:	5e                   	pop    esi
c0023ada:	5f                   	pop    edi
c0023adb:	5d                   	pop    ebp
c0023adc:	c3                   	ret    
c0023add:	8d 76 00             	lea    esi,[esi+0x0]
c0023ae0:	89 f9                	mov    ecx,edi
c0023ae2:	85 ff                	test   edi,edi
c0023ae4:	75 0b                	jne    c0023af1 <__udivdi3+0x45>
c0023ae6:	b8 01 00 00 00       	mov    eax,0x1
c0023aeb:	31 d2                	xor    edx,edx
c0023aed:	f7 f7                	div    edi
c0023aef:	89 c1                	mov    ecx,eax
c0023af1:	31 d2                	xor    edx,edx
c0023af3:	89 f0                	mov    eax,esi
c0023af5:	f7 f1                	div    ecx
c0023af7:	89 c3                	mov    ebx,eax
c0023af9:	89 e8                	mov    eax,ebp
c0023afb:	f7 f1                	div    ecx
c0023afd:	89 da                	mov    edx,ebx
c0023aff:	83 c4 1c             	add    esp,0x1c
c0023b02:	5b                   	pop    ebx
c0023b03:	5e                   	pop    esi
c0023b04:	5f                   	pop    edi
c0023b05:	5d                   	pop    ebp
c0023b06:	c3                   	ret    
c0023b07:	90                   	nop
c0023b08:	39 f2                	cmp    edx,esi
c0023b0a:	77 1c                	ja     c0023b28 <__udivdi3+0x7c>
c0023b0c:	0f bd da             	bsr    ebx,edx
c0023b0f:	83 f3 1f             	xor    ebx,0x1f
c0023b12:	75 24                	jne    c0023b38 <__udivdi3+0x8c>
c0023b14:	39 f2                	cmp    edx,esi
c0023b16:	72 08                	jb     c0023b20 <__udivdi3+0x74>
c0023b18:	39 ef                	cmp    edi,ebp
c0023b1a:	0f 87 84 00 00 00    	ja     c0023ba4 <__udivdi3+0xf8>
c0023b20:	b8 01 00 00 00       	mov    eax,0x1
c0023b25:	eb ac                	jmp    c0023ad3 <__udivdi3+0x27>
c0023b27:	90                   	nop
c0023b28:	31 db                	xor    ebx,ebx
c0023b2a:	31 c0                	xor    eax,eax
c0023b2c:	89 da                	mov    edx,ebx
c0023b2e:	83 c4 1c             	add    esp,0x1c
c0023b31:	5b                   	pop    ebx
c0023b32:	5e                   	pop    esi
c0023b33:	5f                   	pop    edi
c0023b34:	5d                   	pop    ebp
c0023b35:	c3                   	ret    
c0023b36:	66 90                	xchg   ax,ax
c0023b38:	b8 20 00 00 00       	mov    eax,0x20
c0023b3d:	29 d8                	sub    eax,ebx
c0023b3f:	88 d9                	mov    cl,bl
c0023b41:	d3 e2                	shl    edx,cl
c0023b43:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0023b47:	89 fa                	mov    edx,edi
c0023b49:	88 c1                	mov    cl,al
c0023b4b:	d3 ea                	shr    edx,cl
c0023b4d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023b51:	09 d1                	or     ecx,edx
c0023b53:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023b57:	88 d9                	mov    cl,bl
c0023b59:	d3 e7                	shl    edi,cl
c0023b5b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0023b5f:	89 f7                	mov    edi,esi
c0023b61:	88 c1                	mov    cl,al
c0023b63:	d3 ef                	shr    edi,cl
c0023b65:	88 d9                	mov    cl,bl
c0023b67:	d3 e6                	shl    esi,cl
c0023b69:	89 ea                	mov    edx,ebp
c0023b6b:	88 c1                	mov    cl,al
c0023b6d:	d3 ea                	shr    edx,cl
c0023b6f:	09 d6                	or     esi,edx
c0023b71:	89 f0                	mov    eax,esi
c0023b73:	89 fa                	mov    edx,edi
c0023b75:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0023b79:	89 d7                	mov    edi,edx
c0023b7b:	89 c6                	mov    esi,eax
c0023b7d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023b81:	39 d7                	cmp    edi,edx
c0023b83:	72 13                	jb     c0023b98 <__udivdi3+0xec>
c0023b85:	74 09                	je     c0023b90 <__udivdi3+0xe4>
c0023b87:	89 f0                	mov    eax,esi
c0023b89:	31 db                	xor    ebx,ebx
c0023b8b:	e9 43 ff ff ff       	jmp    c0023ad3 <__udivdi3+0x27>
c0023b90:	88 d9                	mov    cl,bl
c0023b92:	d3 e5                	shl    ebp,cl
c0023b94:	39 c5                	cmp    ebp,eax
c0023b96:	73 ef                	jae    c0023b87 <__udivdi3+0xdb>
c0023b98:	8d 46 ff             	lea    eax,[esi-0x1]
c0023b9b:	31 db                	xor    ebx,ebx
c0023b9d:	e9 31 ff ff ff       	jmp    c0023ad3 <__udivdi3+0x27>
c0023ba2:	66 90                	xchg   ax,ax
c0023ba4:	31 c0                	xor    eax,eax
c0023ba6:	e9 28 ff ff ff       	jmp    c0023ad3 <__udivdi3+0x27>
c0023bab:	90                   	nop

c0023bac <__umoddi3>:
c0023bac:	55                   	push   ebp
c0023bad:	57                   	push   edi
c0023bae:	56                   	push   esi
c0023baf:	53                   	push   ebx
c0023bb0:	83 ec 1c             	sub    esp,0x1c
c0023bb3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023bb7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023bbb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023bbf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023bc3:	89 da                	mov    edx,ebx
c0023bc5:	85 c0                	test   eax,eax
c0023bc7:	75 37                	jne    c0023c00 <__umoddi3+0x54>
c0023bc9:	39 df                	cmp    edi,ebx
c0023bcb:	76 13                	jbe    c0023be0 <__umoddi3+0x34>
c0023bcd:	89 f0                	mov    eax,esi
c0023bcf:	f7 f7                	div    edi
c0023bd1:	89 d0                	mov    eax,edx
c0023bd3:	31 d2                	xor    edx,edx
c0023bd5:	83 c4 1c             	add    esp,0x1c
c0023bd8:	5b                   	pop    ebx
c0023bd9:	5e                   	pop    esi
c0023bda:	5f                   	pop    edi
c0023bdb:	5d                   	pop    ebp
c0023bdc:	c3                   	ret    
c0023bdd:	8d 76 00             	lea    esi,[esi+0x0]
c0023be0:	89 fd                	mov    ebp,edi
c0023be2:	85 ff                	test   edi,edi
c0023be4:	75 0b                	jne    c0023bf1 <__umoddi3+0x45>
c0023be6:	b8 01 00 00 00       	mov    eax,0x1
c0023beb:	31 d2                	xor    edx,edx
c0023bed:	f7 f7                	div    edi
c0023bef:	89 c5                	mov    ebp,eax
c0023bf1:	89 d8                	mov    eax,ebx
c0023bf3:	31 d2                	xor    edx,edx
c0023bf5:	f7 f5                	div    ebp
c0023bf7:	89 f0                	mov    eax,esi
c0023bf9:	f7 f5                	div    ebp
c0023bfb:	89 d0                	mov    eax,edx
c0023bfd:	eb d4                	jmp    c0023bd3 <__umoddi3+0x27>
c0023bff:	90                   	nop
c0023c00:	89 f1                	mov    ecx,esi
c0023c02:	39 d8                	cmp    eax,ebx
c0023c04:	76 0a                	jbe    c0023c10 <__umoddi3+0x64>
c0023c06:	89 f0                	mov    eax,esi
c0023c08:	83 c4 1c             	add    esp,0x1c
c0023c0b:	5b                   	pop    ebx
c0023c0c:	5e                   	pop    esi
c0023c0d:	5f                   	pop    edi
c0023c0e:	5d                   	pop    ebp
c0023c0f:	c3                   	ret    
c0023c10:	0f bd e8             	bsr    ebp,eax
c0023c13:	83 f5 1f             	xor    ebp,0x1f
c0023c16:	75 1c                	jne    c0023c34 <__umoddi3+0x88>
c0023c18:	39 d8                	cmp    eax,ebx
c0023c1a:	72 04                	jb     c0023c20 <__umoddi3+0x74>
c0023c1c:	39 f7                	cmp    edi,esi
c0023c1e:	77 08                	ja     c0023c28 <__umoddi3+0x7c>
c0023c20:	89 da                	mov    edx,ebx
c0023c22:	29 fe                	sub    esi,edi
c0023c24:	19 c2                	sbb    edx,eax
c0023c26:	89 f1                	mov    ecx,esi
c0023c28:	89 c8                	mov    eax,ecx
c0023c2a:	83 c4 1c             	add    esp,0x1c
c0023c2d:	5b                   	pop    ebx
c0023c2e:	5e                   	pop    esi
c0023c2f:	5f                   	pop    edi
c0023c30:	5d                   	pop    ebp
c0023c31:	c3                   	ret    
c0023c32:	66 90                	xchg   ax,ax
c0023c34:	ba 20 00 00 00       	mov    edx,0x20
c0023c39:	29 ea                	sub    edx,ebp
c0023c3b:	89 e9                	mov    ecx,ebp
c0023c3d:	d3 e0                	shl    eax,cl
c0023c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023c43:	89 f8                	mov    eax,edi
c0023c45:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0023c49:	88 d1                	mov    cl,dl
c0023c4b:	d3 e8                	shr    eax,cl
c0023c4d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023c51:	09 c1                	or     ecx,eax
c0023c53:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023c57:	89 e9                	mov    ecx,ebp
c0023c59:	d3 e7                	shl    edi,cl
c0023c5b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0023c5f:	89 d8                	mov    eax,ebx
c0023c61:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023c65:	88 d1                	mov    cl,dl
c0023c67:	d3 e8                	shr    eax,cl
c0023c69:	89 c7                	mov    edi,eax
c0023c6b:	89 e9                	mov    ecx,ebp
c0023c6d:	d3 e3                	shl    ebx,cl
c0023c6f:	89 f0                	mov    eax,esi
c0023c71:	88 d1                	mov    cl,dl
c0023c73:	d3 e8                	shr    eax,cl
c0023c75:	09 d8                	or     eax,ebx
c0023c77:	89 e9                	mov    ecx,ebp
c0023c79:	d3 e6                	shl    esi,cl
c0023c7b:	89 f3                	mov    ebx,esi
c0023c7d:	89 fa                	mov    edx,edi
c0023c7f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0023c83:	89 d1                	mov    ecx,edx
c0023c85:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023c89:	89 c6                	mov    esi,eax
c0023c8b:	89 d7                	mov    edi,edx
c0023c8d:	39 d1                	cmp    ecx,edx
c0023c8f:	72 27                	jb     c0023cb8 <__umoddi3+0x10c>
c0023c91:	74 21                	je     c0023cb4 <__umoddi3+0x108>
c0023c93:	89 ca                	mov    edx,ecx
c0023c95:	29 f3                	sub    ebx,esi
c0023c97:	19 fa                	sbb    edx,edi
c0023c99:	89 d0                	mov    eax,edx
c0023c9b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0023c9f:	d3 e0                	shl    eax,cl
c0023ca1:	89 e9                	mov    ecx,ebp
c0023ca3:	d3 eb                	shr    ebx,cl
c0023ca5:	09 d8                	or     eax,ebx
c0023ca7:	d3 ea                	shr    edx,cl
c0023ca9:	83 c4 1c             	add    esp,0x1c
c0023cac:	5b                   	pop    ebx
c0023cad:	5e                   	pop    esi
c0023cae:	5f                   	pop    edi
c0023caf:	5d                   	pop    ebp
c0023cb0:	c3                   	ret    
c0023cb1:	8d 76 00             	lea    esi,[esi+0x0]
c0023cb4:	39 c3                	cmp    ebx,eax
c0023cb6:	73 db                	jae    c0023c93 <__umoddi3+0xe7>
c0023cb8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0023cbc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0023cc0:	89 d7                	mov    edi,edx
c0023cc2:	89 c6                	mov    esi,eax
c0023cc4:	eb cd                	jmp    c0023c93 <__umoddi3+0xe7>

c0023cc6 <__addsf3>:
c0023cc6:	55                   	push   ebp
c0023cc7:	89 e5                	mov    ebp,esp
c0023cc9:	57                   	push   edi
c0023cca:	56                   	push   esi
c0023ccb:	53                   	push   ebx
c0023ccc:	83 ec 08             	sub    esp,0x8
c0023ccf:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0023cd2:	89 fa                	mov    edx,edi
c0023cd4:	89 f8                	mov    eax,edi
c0023cd6:	c1 f8 17             	sar    eax,0x17
c0023cd9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023cdc:	c1 e2 08             	shl    edx,0x8
c0023cdf:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0023ce5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0023ce8:	89 de                	mov    esi,ebx
c0023cea:	c1 fe 17             	sar    esi,0x17
c0023ced:	c1 e3 08             	shl    ebx,0x8
c0023cf0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0023cf6:	31 f0                	xor    eax,esi
c0023cf8:	0f 88 3b 01 00 00    	js     c0023e39 <__addsf3+0x173>
c0023cfe:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0023d01:	29 f1                	sub    ecx,esi
c0023d03:	85 c9                	test   ecx,ecx
c0023d05:	7e 54                	jle    c0023d5b <__addsf3+0x95>
c0023d07:	89 f0                	mov    eax,esi
c0023d09:	84 c0                	test   al,al
c0023d0b:	75 10                	jne    c0023d1d <__addsf3+0x57>
c0023d0d:	85 db                	test   ebx,ebx
c0023d0f:	0f 84 aa 02 00 00    	je     c0023fbf <__addsf3+0x2f9>
c0023d15:	49                   	dec    ecx
c0023d16:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0023d19:	74 38                	je     c0023d53 <__addsf3+0x8d>
c0023d1b:	eb 13                	jmp    c0023d30 <__addsf3+0x6a>
c0023d1d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023d20:	f7 d0                	not    eax
c0023d22:	84 c0                	test   al,al
c0023d24:	0f 84 95 02 00 00    	je     c0023fbf <__addsf3+0x2f9>
c0023d2a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0023d30:	83 f9 1f             	cmp    ecx,0x1f
c0023d33:	0f 8f 86 02 00 00    	jg     c0023fbf <__addsf3+0x2f9>
c0023d39:	89 de                	mov    esi,ebx
c0023d3b:	d3 ee                	shr    esi,cl
c0023d3d:	b8 20 00 00 00       	mov    eax,0x20
c0023d42:	29 c8                	sub    eax,ecx
c0023d44:	89 c1                	mov    ecx,eax
c0023d46:	d3 e3                	shl    ebx,cl
c0023d48:	31 c0                	xor    eax,eax
c0023d4a:	85 db                	test   ebx,ebx
c0023d4c:	0f 95 c0             	setne  al
c0023d4f:	09 f0                	or     eax,esi
c0023d51:	01 d0                	add    eax,edx
c0023d53:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023d56:	e9 b6 00 00 00       	jmp    c0023e11 <__addsf3+0x14b>
c0023d5b:	74 5c                	je     c0023db9 <__addsf3+0xf3>
c0023d5d:	89 f1                	mov    ecx,esi
c0023d5f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0023d62:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023d65:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0023d69:	75 14                	jne    c0023d7f <__addsf3+0xb9>
c0023d6b:	85 d2                	test   edx,edx
c0023d6d:	0f 84 4c 02 00 00    	je     c0023fbf <__addsf3+0x2f9>
c0023d73:	49                   	dec    ecx
c0023d74:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0023d77:	0f 84 94 00 00 00    	je     c0023e11 <__addsf3+0x14b>
c0023d7d:	eb 12                	jmp    c0023d91 <__addsf3+0xcb>
c0023d7f:	89 f0                	mov    eax,esi
c0023d81:	f7 d0                	not    eax
c0023d83:	84 c0                	test   al,al
c0023d85:	0f 84 34 02 00 00    	je     c0023fbf <__addsf3+0x2f9>
c0023d8b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023d91:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023d94:	83 f9 1f             	cmp    ecx,0x1f
c0023d97:	0f 8f 22 02 00 00    	jg     c0023fbf <__addsf3+0x2f9>
c0023d9d:	89 d7                	mov    edi,edx
c0023d9f:	d3 ef                	shr    edi,cl
c0023da1:	b8 20 00 00 00       	mov    eax,0x20
c0023da6:	29 c8                	sub    eax,ecx
c0023da8:	89 c1                	mov    ecx,eax
c0023daa:	d3 e2                	shl    edx,cl
c0023dac:	31 c0                	xor    eax,eax
c0023dae:	85 d2                	test   edx,edx
c0023db0:	0f 95 c0             	setne  al
c0023db3:	09 f8                	or     eax,edi
c0023db5:	01 d8                	add    eax,ebx
c0023db7:	eb 58                	jmp    c0023e11 <__addsf3+0x14b>
c0023db9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023dbc:	8d 70 01             	lea    esi,[eax+0x1]
c0023dbf:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0023dc5:	75 32                	jne    c0023df9 <__addsf3+0x133>
c0023dc7:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0023dcb:	75 1f                	jne    c0023dec <__addsf3+0x126>
c0023dcd:	85 d2                	test   edx,edx
c0023dcf:	0f 84 e0 01 00 00    	je     c0023fb5 <__addsf3+0x2ef>
c0023dd5:	85 db                	test   ebx,ebx
c0023dd7:	0f 84 e2 01 00 00    	je     c0023fbf <__addsf3+0x2f9>
c0023ddd:	89 d0                	mov    eax,edx
c0023ddf:	01 d8                	add    eax,ebx
c0023de1:	0f 89 a9 01 00 00    	jns    c0023f90 <__addsf3+0x2ca>
c0023de7:	e9 9d 01 00 00       	jmp    c0023f89 <__addsf3+0x2c3>
c0023dec:	85 d2                	test   edx,edx
c0023dee:	0f 85 cb 01 00 00    	jne    c0023fbf <__addsf3+0x2f9>
c0023df4:	e9 bc 01 00 00       	jmp    c0023fb5 <__addsf3+0x2ef>
c0023df9:	31 c0                	xor    eax,eax
c0023dfb:	89 f1                	mov    ecx,esi
c0023dfd:	f7 d1                	not    ecx
c0023dff:	84 c9                	test   cl,cl
c0023e01:	0f 84 90 01 00 00    	je     c0023f97 <__addsf3+0x2d1>
c0023e07:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0023e0a:	d1 e8                	shr    eax,1
c0023e0c:	e9 86 01 00 00       	jmp    c0023f97 <__addsf3+0x2d1>
c0023e11:	85 c0                	test   eax,eax
c0023e13:	0f 89 7e 01 00 00    	jns    c0023f97 <__addsf3+0x2d1>
c0023e19:	46                   	inc    esi
c0023e1a:	89 f2                	mov    edx,esi
c0023e1c:	f7 d2                	not    edx
c0023e1e:	84 d2                	test   dl,dl
c0023e20:	0f 84 6f 01 00 00    	je     c0023f95 <__addsf3+0x2cf>
c0023e26:	89 c2                	mov    edx,eax
c0023e28:	83 e2 01             	and    edx,0x1
c0023e2b:	d1 e8                	shr    eax,1
c0023e2d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0023e32:	09 d0                	or     eax,edx
c0023e34:	e9 5e 01 00 00       	jmp    c0023f97 <__addsf3+0x2d1>
c0023e39:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0023e3d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0023e40:	89 f0                	mov    eax,esi
c0023e42:	0f b6 c0             	movzx  eax,al
c0023e45:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0023e48:	29 c1                	sub    ecx,eax
c0023e4a:	85 c9                	test   ecx,ecx
c0023e4c:	7e 55                	jle    c0023ea3 <__addsf3+0x1dd>
c0023e4e:	85 c0                	test   eax,eax
c0023e50:	75 11                	jne    c0023e63 <__addsf3+0x19d>
c0023e52:	85 db                	test   ebx,ebx
c0023e54:	0f 84 65 01 00 00    	je     c0023fbf <__addsf3+0x2f9>
c0023e5a:	49                   	dec    ecx
c0023e5b:	75 19                	jne    c0023e76 <__addsf3+0x1b0>
c0023e5d:	89 d0                	mov    eax,edx
c0023e5f:	29 d8                	sub    eax,ebx
c0023e61:	eb 38                	jmp    c0023e9b <__addsf3+0x1d5>
c0023e63:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023e66:	f7 d0                	not    eax
c0023e68:	84 c0                	test   al,al
c0023e6a:	0f 84 4f 01 00 00    	je     c0023fbf <__addsf3+0x2f9>
c0023e70:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0023e76:	83 f9 1f             	cmp    ecx,0x1f
c0023e79:	0f 8f 40 01 00 00    	jg     c0023fbf <__addsf3+0x2f9>
c0023e7f:	89 de                	mov    esi,ebx
c0023e81:	d3 ee                	shr    esi,cl
c0023e83:	b8 20 00 00 00       	mov    eax,0x20
c0023e88:	29 c8                	sub    eax,ecx
c0023e8a:	89 c1                	mov    ecx,eax
c0023e8c:	d3 e3                	shl    ebx,cl
c0023e8e:	31 c0                	xor    eax,eax
c0023e90:	85 db                	test   ebx,ebx
c0023e92:	0f 95 c0             	setne  al
c0023e95:	09 f0                	or     eax,esi
c0023e97:	29 c2                	sub    edx,eax
c0023e99:	89 d0                	mov    eax,edx
c0023e9b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023e9e:	e9 af 00 00 00       	jmp    c0023f52 <__addsf3+0x28c>
c0023ea3:	74 5c                	je     c0023f01 <__addsf3+0x23b>
c0023ea5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0023ea8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023eab:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0023eaf:	75 14                	jne    c0023ec5 <__addsf3+0x1ff>
c0023eb1:	85 d2                	test   edx,edx
c0023eb3:	0f 84 06 01 00 00    	je     c0023fbf <__addsf3+0x2f9>
c0023eb9:	48                   	dec    eax
c0023eba:	75 1b                	jne    c0023ed7 <__addsf3+0x211>
c0023ebc:	89 d8                	mov    eax,ebx
c0023ebe:	29 d0                	sub    eax,edx
c0023ec0:	e9 8d 00 00 00       	jmp    c0023f52 <__addsf3+0x28c>
c0023ec5:	89 f1                	mov    ecx,esi
c0023ec7:	f7 d1                	not    ecx
c0023ec9:	84 c9                	test   cl,cl
c0023ecb:	0f 84 ee 00 00 00    	je     c0023fbf <__addsf3+0x2f9>
c0023ed1:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023ed7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023eda:	83 f8 1f             	cmp    eax,0x1f
c0023edd:	0f 8f dc 00 00 00    	jg     c0023fbf <__addsf3+0x2f9>
c0023ee3:	89 d7                	mov    edi,edx
c0023ee5:	88 c1                	mov    cl,al
c0023ee7:	d3 ef                	shr    edi,cl
c0023ee9:	b9 20 00 00 00       	mov    ecx,0x20
c0023eee:	29 c1                	sub    ecx,eax
c0023ef0:	d3 e2                	shl    edx,cl
c0023ef2:	31 c0                	xor    eax,eax
c0023ef4:	85 d2                	test   edx,edx
c0023ef6:	0f 95 c0             	setne  al
c0023ef9:	09 f8                	or     eax,edi
c0023efb:	29 c3                	sub    ebx,eax
c0023efd:	89 d8                	mov    eax,ebx
c0023eff:	eb 51                	jmp    c0023f52 <__addsf3+0x28c>
c0023f01:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023f04:	40                   	inc    eax
c0023f05:	a8 fe                	test   al,0xfe
c0023f07:	75 3d                	jne    c0023f46 <__addsf3+0x280>
c0023f09:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0023f0d:	0f 85 a7 00 00 00    	jne    c0023fba <__addsf3+0x2f4>
c0023f13:	85 d2                	test   edx,edx
c0023f15:	75 12                	jne    c0023f29 <__addsf3+0x263>
c0023f17:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023f1a:	85 db                	test   ebx,ebx
c0023f1c:	0f 85 9d 00 00 00    	jne    c0023fbf <__addsf3+0x2f9>
c0023f22:	31 ff                	xor    edi,edi
c0023f24:	e9 96 00 00 00       	jmp    c0023fbf <__addsf3+0x2f9>
c0023f29:	85 db                	test   ebx,ebx
c0023f2b:	0f 84 8e 00 00 00    	je     c0023fbf <__addsf3+0x2f9>
c0023f31:	89 d0                	mov    eax,edx
c0023f33:	29 d8                	sub    eax,ebx
c0023f35:	79 06                	jns    c0023f3d <__addsf3+0x277>
c0023f37:	89 d8                	mov    eax,ebx
c0023f39:	29 d0                	sub    eax,edx
c0023f3b:	eb 5a                	jmp    c0023f97 <__addsf3+0x2d1>
c0023f3d:	bf 00 00 00 00       	mov    edi,0x0
c0023f42:	74 7b                	je     c0023fbf <__addsf3+0x2f9>
c0023f44:	eb 4a                	jmp    c0023f90 <__addsf3+0x2ca>
c0023f46:	89 d0                	mov    eax,edx
c0023f48:	29 d8                	sub    eax,ebx
c0023f4a:	79 12                	jns    c0023f5e <__addsf3+0x298>
c0023f4c:	89 d8                	mov    eax,ebx
c0023f4e:	29 d0                	sub    eax,edx
c0023f50:	eb 09                	jmp    c0023f5b <__addsf3+0x295>
c0023f52:	85 c0                	test   eax,eax
c0023f54:	79 41                	jns    c0023f97 <__addsf3+0x2d1>
c0023f56:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023f5b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0023f5e:	31 f6                	xor    esi,esi
c0023f60:	85 c0                	test   eax,eax
c0023f62:	74 33                	je     c0023f97 <__addsf3+0x2d1>
c0023f64:	0f bd c8             	bsr    ecx,eax
c0023f67:	83 f1 1f             	xor    ecx,0x1f
c0023f6a:	d3 e0                	shl    eax,cl
c0023f6c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0023f70:	39 ca                	cmp    edx,ecx
c0023f72:	7f 10                	jg     c0023f84 <__addsf3+0x2be>
c0023f74:	29 d1                	sub    ecx,edx
c0023f76:	41                   	inc    ecx
c0023f77:	d3 e8                	shr    eax,cl
c0023f79:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023f7c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0023f82:	eb 13                	jmp    c0023f97 <__addsf3+0x2d1>
c0023f84:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023f87:	29 ce                	sub    esi,ecx
c0023f89:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023f8e:	eb 07                	jmp    c0023f97 <__addsf3+0x2d1>
c0023f90:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023f93:	eb 02                	jmp    c0023f97 <__addsf3+0x2d1>
c0023f95:	31 c0                	xor    eax,eax
c0023f97:	89 c2                	mov    edx,eax
c0023f99:	c1 ea 08             	shr    edx,0x8
c0023f9c:	a8 7f                	test   al,0x7f
c0023f9e:	0f 95 c1             	setne  cl
c0023fa1:	09 d1                	or     ecx,edx
c0023fa3:	83 e1 01             	and    ecx,0x1
c0023fa6:	c1 e8 07             	shr    eax,0x7
c0023fa9:	21 c8                	and    eax,ecx
c0023fab:	c1 e6 17             	shl    esi,0x17
c0023fae:	09 d6                	or     esi,edx
c0023fb0:	8d 3c 30             	lea    edi,[eax+esi*1]
c0023fb3:	eb 0a                	jmp    c0023fbf <__addsf3+0x2f9>
c0023fb5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023fb8:	eb 05                	jmp    c0023fbf <__addsf3+0x2f9>
c0023fba:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0023fbf:	89 f8                	mov    eax,edi
c0023fc1:	5a                   	pop    edx
c0023fc2:	59                   	pop    ecx
c0023fc3:	5b                   	pop    ebx
c0023fc4:	5e                   	pop    esi
c0023fc5:	5f                   	pop    edi
c0023fc6:	5d                   	pop    ebp
c0023fc7:	c3                   	ret    

c0023fc8 <__subsf3>:
c0023fc8:	55                   	push   ebp
c0023fc9:	89 e5                	mov    ebp,esp
c0023fcb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023fce:	05 00 00 00 80       	add    eax,0x80000000
c0023fd3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0023fd6:	5d                   	pop    ebp
c0023fd7:	e9 ea fc ff ff       	jmp    c0023cc6 <__addsf3>

c0023fdc <__negsf2>:
c0023fdc:	55                   	push   ebp
c0023fdd:	89 e5                	mov    ebp,esp
c0023fdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023fe2:	05 00 00 00 80       	add    eax,0x80000000
c0023fe7:	5d                   	pop    ebp
c0023fe8:	c3                   	ret    

c0023fe9 <__mulsf3>:
c0023fe9:	55                   	push   ebp
c0023fea:	89 e5                	mov    ebp,esp
c0023fec:	57                   	push   edi
c0023fed:	56                   	push   esi
c0023fee:	53                   	push   ebx
c0023fef:	83 ec 1c             	sub    esp,0x1c
c0023ff2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0023ff5:	89 f0                	mov    eax,esi
c0023ff7:	89 f1                	mov    ecx,esi
c0023ff9:	c1 f9 17             	sar    ecx,0x17
c0023ffc:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0023fff:	c1 e0 08             	shl    eax,0x8
c0024002:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0024007:	89 c1                	mov    ecx,eax
c0024009:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002400c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002400f:	89 c7                	mov    edi,eax
c0024011:	c1 ff 17             	sar    edi,0x17
c0024014:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0024018:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002401b:	89 f8                	mov    eax,edi
c002401d:	0f b6 c0             	movzx  eax,al
c0024020:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0024023:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0024027:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002402a:	42                   	inc    edx
c002402b:	80 e2 fe             	and    dl,0xfe
c002402e:	75 7b                	jne    c00240ab <__mulsf3+0xc2>
c0024030:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0024034:	74 54                	je     c002408a <__mulsf3+0xa1>
c0024036:	85 c9                	test   ecx,ecx
c0024038:	0f 85 64 01 00 00    	jne    c00241a2 <__mulsf3+0x1b9>
c002403e:	8d 57 01             	lea    edx,[edi+0x1]
c0024041:	80 e2 fe             	and    dl,0xfe
c0024044:	75 1f                	jne    c0024065 <__mulsf3+0x7c>
c0024046:	85 c0                	test   eax,eax
c0024048:	b8 00 00 00 00       	mov    eax,0x0
c002404d:	74 29                	je     c0024078 <__mulsf3+0x8f>
c002404f:	53                   	push   ebx
c0024050:	53                   	push   ebx
c0024051:	50                   	push   eax
c0024052:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024055:	e8 96 05 00 00       	call   c00245f0 <__nesf2>
c002405a:	83 c4 10             	add    esp,0x10
c002405d:	85 c0                	test   eax,eax
c002405f:	0f 85 3a 01 00 00    	jne    c002419f <__mulsf3+0x1b6>
c0024065:	85 ff                	test   edi,edi
c0024067:	0f 89 35 01 00 00    	jns    c00241a2 <__mulsf3+0x1b9>
c002406d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0024073:	e9 2a 01 00 00       	jmp    c00241a2 <__mulsf3+0x1b9>
c0024078:	51                   	push   ecx
c0024079:	51                   	push   ecx
c002407a:	50                   	push   eax
c002407b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002407e:	e8 6d 05 00 00       	call   c00245f0 <__nesf2>
c0024083:	83 c4 10             	add    esp,0x10
c0024086:	85 c0                	test   eax,eax
c0024088:	eb 15                	jmp    c002409f <__mulsf3+0xb6>
c002408a:	85 c9                	test   ecx,ecx
c002408c:	74 0b                	je     c0024099 <__mulsf3+0xb0>
c002408e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0024091:	01 c9                	add    ecx,ecx
c0024093:	78 16                	js     c00240ab <__mulsf3+0xc2>
c0024095:	89 d3                	mov    ebx,edx
c0024097:	eb f5                	jmp    c002408e <__mulsf3+0xa5>
c0024099:	89 f8                	mov    eax,edi
c002409b:	f7 d0                	not    eax
c002409d:	84 c0                	test   al,al
c002409f:	75 c4                	jne    c0024065 <__mulsf3+0x7c>
c00240a1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c00240a6:	e9 f7 00 00 00       	jmp    c00241a2 <__mulsf3+0x1b9>
c00240ab:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00240ae:	c1 e6 08             	shl    esi,0x8
c00240b1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00240b7:	8d 57 01             	lea    edx,[edi+0x1]
c00240ba:	80 e2 fe             	and    dl,0xfe
c00240bd:	75 63                	jne    c0024122 <__mulsf3+0x139>
c00240bf:	85 c0                	test   eax,eax
c00240c1:	74 2f                	je     c00240f2 <__mulsf3+0x109>
c00240c3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00240c7:	0f 89 d2 00 00 00    	jns    c002419f <__mulsf3+0x1b6>
c00240cd:	52                   	push   edx
c00240ce:	52                   	push   edx
c00240cf:	6a 00                	push   0x0
c00240d1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00240d4:	e8 dc 04 00 00       	call   c00245b5 <__eqsf2>
c00240d9:	83 c4 10             	add    esp,0x10
c00240dc:	85 c0                	test   eax,eax
c00240de:	0f 85 bb 00 00 00    	jne    c002419f <__mulsf3+0x1b6>
c00240e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00240e7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00240ed:	e9 b0 00 00 00       	jmp    c00241a2 <__mulsf3+0x1b9>
c00240f2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00240f5:	50                   	push   eax
c00240f6:	50                   	push   eax
c00240f7:	6a 00                	push   0x0
c00240f9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00240fc:	e8 b4 04 00 00       	call   c00245b5 <__eqsf2>
c0024101:	83 c4 10             	add    esp,0x10
c0024104:	85 c0                	test   eax,eax
c0024106:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024109:	75 0c                	jne    c0024117 <__mulsf3+0x12e>
c002410b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002410f:	0f 89 8a 00 00 00    	jns    c002419f <__mulsf3+0x1b6>
c0024115:	eb cd                	jmp    c00240e4 <__mulsf3+0xfb>
c0024117:	8d 43 ff             	lea    eax,[ebx-0x1]
c002411a:	01 f6                	add    esi,esi
c002411c:	78 04                	js     c0024122 <__mulsf3+0x139>
c002411e:	89 c3                	mov    ebx,eax
c0024120:	eb f5                	jmp    c0024117 <__mulsf3+0x12e>
c0024122:	89 c8                	mov    eax,ecx
c0024124:	0d 00 00 00 80       	or     eax,0x80000000
c0024129:	81 ce 00 00 00 80    	or     esi,0x80000000
c002412f:	f7 e6                	mul    esi
c0024131:	85 c0                	test   eax,eax
c0024133:	0f 95 c0             	setne  al
c0024136:	0f b6 c0             	movzx  eax,al
c0024139:	09 c2                	or     edx,eax
c002413b:	78 03                	js     c0024140 <__mulsf3+0x157>
c002413d:	01 d2                	add    edx,edx
c002413f:	4b                   	dec    ebx
c0024140:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0024146:	7f 22                	jg     c002416a <__mulsf3+0x181>
c0024148:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002414e:	85 db                	test   ebx,ebx
c0024150:	7f 23                	jg     c0024175 <__mulsf3+0x18c>
c0024152:	83 fb e9             	cmp    ebx,0xffffffe9
c0024155:	7c 1a                	jl     c0024171 <__mulsf3+0x188>
c0024157:	81 ca 00 00 00 80    	or     edx,0x80000000
c002415d:	b9 01 00 00 00       	mov    ecx,0x1
c0024162:	29 d9                	sub    ecx,ebx
c0024164:	d3 ea                	shr    edx,cl
c0024166:	31 db                	xor    ebx,ebx
c0024168:	eb 0b                	jmp    c0024175 <__mulsf3+0x18c>
c002416a:	bb ff 00 00 00       	mov    ebx,0xff
c002416f:	eb 02                	jmp    c0024173 <__mulsf3+0x18a>
c0024171:	31 db                	xor    ebx,ebx
c0024173:	31 d2                	xor    edx,edx
c0024175:	89 d0                	mov    eax,edx
c0024177:	c1 e8 08             	shr    eax,0x8
c002417a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002417d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0024183:	09 fb                	or     ebx,edi
c0024185:	c1 e3 17             	shl    ebx,0x17
c0024188:	09 c3                	or     ebx,eax
c002418a:	f6 c2 7f             	test   dl,0x7f
c002418d:	0f 95 c1             	setne  cl
c0024190:	09 c8                	or     eax,ecx
c0024192:	83 e0 01             	and    eax,0x1
c0024195:	c1 ea 07             	shr    edx,0x7
c0024198:	21 c2                	and    edx,eax
c002419a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002419d:	eb 03                	jmp    c00241a2 <__mulsf3+0x1b9>
c002419f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00241a2:	89 f0                	mov    eax,esi
c00241a4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00241a7:	5b                   	pop    ebx
c00241a8:	5e                   	pop    esi
c00241a9:	5f                   	pop    edi
c00241aa:	5d                   	pop    ebp
c00241ab:	c3                   	ret    

c00241ac <__divsf3>:
c00241ac:	55                   	push   ebp
c00241ad:	89 e5                	mov    ebp,esp
c00241af:	57                   	push   edi
c00241b0:	56                   	push   esi
c00241b1:	53                   	push   ebx
c00241b2:	83 ec 1c             	sub    esp,0x1c
c00241b5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00241b8:	89 d8                	mov    eax,ebx
c00241ba:	89 d9                	mov    ecx,ebx
c00241bc:	c1 f9 17             	sar    ecx,0x17
c00241bf:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00241c2:	c1 e0 08             	shl    eax,0x8
c00241c5:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00241ca:	89 c1                	mov    ecx,eax
c00241cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00241cf:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00241d2:	89 c7                	mov    edi,eax
c00241d4:	c1 ff 17             	sar    edi,0x17
c00241d7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00241db:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00241de:	89 f8                	mov    eax,edi
c00241e0:	0f b6 c0             	movzx  eax,al
c00241e3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00241e6:	29 c6                	sub    esi,eax
c00241e8:	83 c6 7f             	add    esi,0x7f
c00241eb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00241ee:	42                   	inc    edx
c00241ef:	80 e2 fe             	and    dl,0xfe
c00241f2:	0f 85 9c 00 00 00    	jne    c0024294 <__divsf3+0xe8>
c00241f8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00241fc:	74 33                	je     c0024231 <__divsf3+0x85>
c00241fe:	85 c9                	test   ecx,ecx
c0024200:	0f 85 c7 01 00 00    	jne    c00243cd <__divsf3+0x221>
c0024206:	8d 57 01             	lea    edx,[edi+0x1]
c0024209:	80 e2 fe             	and    dl,0xfe
c002420c:	75 2f                	jne    c002423d <__divsf3+0x91>
c002420e:	85 c0                	test   eax,eax
c0024210:	74 2b                	je     c002423d <__divsf3+0x91>
c0024212:	51                   	push   ecx
c0024213:	51                   	push   ecx
c0024214:	6a 00                	push   0x0
c0024216:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024219:	e8 d2 03 00 00       	call   c00245f0 <__nesf2>
c002421e:	83 c4 10             	add    esp,0x10
c0024221:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0024224:	85 c0                	test   eax,eax
c0024226:	0f 85 a1 01 00 00    	jne    c00243cd <__divsf3+0x221>
c002422c:	e9 92 01 00 00       	jmp    c00243c3 <__divsf3+0x217>
c0024231:	85 c9                	test   ecx,ecx
c0024233:	75 1b                	jne    c0024250 <__divsf3+0xa4>
c0024235:	8d 57 01             	lea    edx,[edi+0x1]
c0024238:	80 e2 fe             	and    dl,0xfe
c002423b:	74 1e                	je     c002425b <__divsf3+0xaf>
c002423d:	85 ff                	test   edi,edi
c002423f:	0f 89 88 01 00 00    	jns    c00243cd <__divsf3+0x221>
c0024245:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002424b:	e9 7d 01 00 00       	jmp    c00243cd <__divsf3+0x221>
c0024250:	8d 56 ff             	lea    edx,[esi-0x1]
c0024253:	01 c9                	add    ecx,ecx
c0024255:	78 3d                	js     c0024294 <__divsf3+0xe8>
c0024257:	89 d6                	mov    esi,edx
c0024259:	eb f5                	jmp    c0024250 <__divsf3+0xa4>
c002425b:	85 c0                	test   eax,eax
c002425d:	b8 00 00 00 00       	mov    eax,0x0
c0024262:	74 18                	je     c002427c <__divsf3+0xd0>
c0024264:	52                   	push   edx
c0024265:	52                   	push   edx
c0024266:	50                   	push   eax
c0024267:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002426a:	e8 81 03 00 00       	call   c00245f0 <__nesf2>
c002426f:	83 c4 10             	add    esp,0x10
c0024272:	85 c0                	test   eax,eax
c0024274:	0f 85 50 01 00 00    	jne    c00243ca <__divsf3+0x21e>
c002427a:	eb c1                	jmp    c002423d <__divsf3+0x91>
c002427c:	56                   	push   esi
c002427d:	56                   	push   esi
c002427e:	50                   	push   eax
c002427f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024282:	e8 69 03 00 00       	call   c00245f0 <__nesf2>
c0024287:	83 c4 10             	add    esp,0x10
c002428a:	85 c0                	test   eax,eax
c002428c:	0f 84 31 01 00 00    	je     c00243c3 <__divsf3+0x217>
c0024292:	eb a9                	jmp    c002423d <__divsf3+0x91>
c0024294:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0024297:	c1 e3 08             	shl    ebx,0x8
c002429a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00242a0:	8d 57 01             	lea    edx,[edi+0x1]
c00242a3:	80 e2 fe             	and    dl,0xfe
c00242a6:	75 71                	jne    c0024319 <__divsf3+0x16d>
c00242a8:	85 c0                	test   eax,eax
c00242aa:	ba 00 00 00 00       	mov    edx,0x0
c00242af:	74 2f                	je     c00242e0 <__divsf3+0x134>
c00242b1:	51                   	push   ecx
c00242b2:	51                   	push   ecx
c00242b3:	52                   	push   edx
c00242b4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00242b7:	e8 f9 02 00 00       	call   c00245b5 <__eqsf2>
c00242bc:	83 c4 10             	add    esp,0x10
c00242bf:	85 c0                	test   eax,eax
c00242c1:	0f 85 03 01 00 00    	jne    c00243ca <__divsf3+0x21e>
c00242c7:	31 d2                	xor    edx,edx
c00242c9:	89 d3                	mov    ebx,edx
c00242cb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00242ce:	31 f8                	xor    eax,edi
c00242d0:	0f 89 f7 00 00 00    	jns    c00243cd <__divsf3+0x221>
c00242d6:	bb 00 00 00 80       	mov    ebx,0x80000000
c00242db:	e9 ed 00 00 00       	jmp    c00243cd <__divsf3+0x221>
c00242e0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00242e3:	50                   	push   eax
c00242e4:	50                   	push   eax
c00242e5:	52                   	push   edx
c00242e6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00242e9:	e8 c7 02 00 00       	call   c00245b5 <__eqsf2>
c00242ee:	83 c4 10             	add    esp,0x10
c00242f1:	85 c0                	test   eax,eax
c00242f3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00242f6:	75 16                	jne    c002430e <__divsf3+0x162>
c00242f8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00242fb:	31 fb                	xor    ebx,edi
c00242fd:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0024303:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0024309:	e9 bf 00 00 00       	jmp    c00243cd <__divsf3+0x221>
c002430e:	8d 46 01             	lea    eax,[esi+0x1]
c0024311:	01 db                	add    ebx,ebx
c0024313:	78 04                	js     c0024319 <__divsf3+0x16d>
c0024315:	89 c6                	mov    esi,eax
c0024317:	eb f5                	jmp    c002430e <__divsf3+0x162>
c0024319:	89 c8                	mov    eax,ecx
c002431b:	0d 00 00 00 80       	or     eax,0x80000000
c0024320:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0024326:	31 d2                	xor    edx,edx
c0024328:	39 d8                	cmp    eax,ebx
c002432a:	72 07                	jb     c0024333 <__divsf3+0x187>
c002432c:	29 d8                	sub    eax,ebx
c002432e:	ba 01 00 00 00       	mov    edx,0x1
c0024333:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002433a:	01 d2                	add    edx,edx
c002433c:	89 c1                	mov    ecx,eax
c002433e:	01 c0                	add    eax,eax
c0024340:	85 c9                	test   ecx,ecx
c0024342:	78 04                	js     c0024348 <__divsf3+0x19c>
c0024344:	39 c3                	cmp    ebx,eax
c0024346:	77 05                	ja     c002434d <__divsf3+0x1a1>
c0024348:	29 d8                	sub    eax,ebx
c002434a:	83 ca 01             	or     edx,0x1
c002434d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0024350:	75 e8                	jne    c002433a <__divsf3+0x18e>
c0024352:	85 c0                	test   eax,eax
c0024354:	0f 95 c0             	setne  al
c0024357:	0f b6 c0             	movzx  eax,al
c002435a:	c1 e2 06             	shl    edx,0x6
c002435d:	09 c2                	or     edx,eax
c002435f:	78 03                	js     c0024364 <__divsf3+0x1b8>
c0024361:	01 d2                	add    edx,edx
c0024363:	4e                   	dec    esi
c0024364:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002436a:	7f 22                	jg     c002438e <__divsf3+0x1e2>
c002436c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0024372:	85 f6                	test   esi,esi
c0024374:	7f 23                	jg     c0024399 <__divsf3+0x1ed>
c0024376:	83 fe e9             	cmp    esi,0xffffffe9
c0024379:	7c 1a                	jl     c0024395 <__divsf3+0x1e9>
c002437b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024381:	b9 01 00 00 00       	mov    ecx,0x1
c0024386:	29 f1                	sub    ecx,esi
c0024388:	d3 ea                	shr    edx,cl
c002438a:	31 f6                	xor    esi,esi
c002438c:	eb 0b                	jmp    c0024399 <__divsf3+0x1ed>
c002438e:	be ff 00 00 00       	mov    esi,0xff
c0024393:	eb 02                	jmp    c0024397 <__divsf3+0x1eb>
c0024395:	31 f6                	xor    esi,esi
c0024397:	31 d2                	xor    edx,edx
c0024399:	89 d0                	mov    eax,edx
c002439b:	c1 e8 08             	shr    eax,0x8
c002439e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00243a1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00243a7:	09 fe                	or     esi,edi
c00243a9:	c1 e6 17             	shl    esi,0x17
c00243ac:	09 c6                	or     esi,eax
c00243ae:	f6 c2 7f             	test   dl,0x7f
c00243b1:	0f 95 c1             	setne  cl
c00243b4:	09 c8                	or     eax,ecx
c00243b6:	83 e0 01             	and    eax,0x1
c00243b9:	c1 ea 07             	shr    edx,0x7
c00243bc:	21 c2                	and    edx,eax
c00243be:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00243c1:	eb 0a                	jmp    c00243cd <__divsf3+0x221>
c00243c3:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00243c8:	eb 03                	jmp    c00243cd <__divsf3+0x221>
c00243ca:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00243cd:	89 d8                	mov    eax,ebx
c00243cf:	8d 65 f4             	lea    esp,[ebp-0xc]
c00243d2:	5b                   	pop    ebx
c00243d3:	5e                   	pop    esi
c00243d4:	5f                   	pop    edi
c00243d5:	5d                   	pop    ebp
c00243d6:	c3                   	ret    

c00243d7 <__floatsisf>:
c00243d7:	55                   	push   ebp
c00243d8:	89 e5                	mov    ebp,esp
c00243da:	53                   	push   ebx
c00243db:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00243de:	85 d2                	test   edx,edx
c00243e0:	7e 2b                	jle    c002440d <__floatsisf+0x36>
c00243e2:	0f bd ca             	bsr    ecx,edx
c00243e5:	83 f1 1f             	xor    ecx,0x1f
c00243e8:	d3 e2                	shl    edx,cl
c00243ea:	89 d0                	mov    eax,edx
c00243ec:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00243f1:	89 c3                	mov    ebx,eax
c00243f3:	c1 eb 08             	shr    ebx,0x8
c00243f6:	80 e2 7f             	and    dl,0x7f
c00243f9:	0f 95 c2             	setne  dl
c00243fc:	09 da                	or     edx,ebx
c00243fe:	83 e2 01             	and    edx,0x1
c0024401:	c1 e8 07             	shr    eax,0x7
c0024404:	21 c2                	and    edx,eax
c0024406:	b8 9e 00 00 00       	mov    eax,0x9e
c002440b:	eb 32                	jmp    c002443f <__floatsisf+0x68>
c002440d:	b8 00 00 00 00       	mov    eax,0x0
c0024412:	74 34                	je     c0024448 <__floatsisf+0x71>
c0024414:	f7 da                	neg    edx
c0024416:	0f bd ca             	bsr    ecx,edx
c0024419:	83 f1 1f             	xor    ecx,0x1f
c002441c:	d3 e2                	shl    edx,cl
c002441e:	89 d0                	mov    eax,edx
c0024420:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024425:	89 c3                	mov    ebx,eax
c0024427:	c1 eb 08             	shr    ebx,0x8
c002442a:	80 e2 7f             	and    dl,0x7f
c002442d:	0f 95 c2             	setne  dl
c0024430:	09 da                	or     edx,ebx
c0024432:	83 e2 01             	and    edx,0x1
c0024435:	c1 e8 07             	shr    eax,0x7
c0024438:	21 c2                	and    edx,eax
c002443a:	b8 9e 01 00 00       	mov    eax,0x19e
c002443f:	29 c8                	sub    eax,ecx
c0024441:	c1 e0 17             	shl    eax,0x17
c0024444:	09 d8                	or     eax,ebx
c0024446:	01 d0                	add    eax,edx
c0024448:	5b                   	pop    ebx
c0024449:	5d                   	pop    ebp
c002444a:	c3                   	ret    

c002444b <__floatunsisf>:
c002444b:	55                   	push   ebp
c002444c:	89 e5                	mov    ebp,esp
c002444e:	53                   	push   ebx
c002444f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0024452:	31 c0                	xor    eax,eax
c0024454:	85 d2                	test   edx,edx
c0024456:	74 32                	je     c002448a <__floatunsisf+0x3f>
c0024458:	0f bd ca             	bsr    ecx,edx
c002445b:	83 f1 1f             	xor    ecx,0x1f
c002445e:	d3 e2                	shl    edx,cl
c0024460:	89 d0                	mov    eax,edx
c0024462:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024467:	89 c3                	mov    ebx,eax
c0024469:	c1 eb 08             	shr    ebx,0x8
c002446c:	80 e2 7f             	and    dl,0x7f
c002446f:	0f 95 c2             	setne  dl
c0024472:	09 da                	or     edx,ebx
c0024474:	83 e2 01             	and    edx,0x1
c0024477:	c1 e8 07             	shr    eax,0x7
c002447a:	21 c2                	and    edx,eax
c002447c:	b8 9e 00 00 00       	mov    eax,0x9e
c0024481:	29 c8                	sub    eax,ecx
c0024483:	c1 e0 17             	shl    eax,0x17
c0024486:	09 d8                	or     eax,ebx
c0024488:	01 d0                	add    eax,edx
c002448a:	5b                   	pop    ebx
c002448b:	5d                   	pop    ebp
c002448c:	c3                   	ret    

c002448d <__fixsfsi>:
c002448d:	55                   	push   ebp
c002448e:	89 e5                	mov    ebp,esp
c0024490:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0024493:	89 d1                	mov    ecx,edx
c0024495:	c1 e1 08             	shl    ecx,0x8
c0024498:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002449e:	c1 fa 17             	sar    edx,0x17
c00244a1:	78 1c                	js     c00244bf <__fixsfsi+0x32>
c00244a3:	83 ea 7f             	sub    edx,0x7f
c00244a6:	31 c0                	xor    eax,eax
c00244a8:	83 fa 1e             	cmp    edx,0x1e
c00244ab:	77 40                	ja     c00244ed <__fixsfsi+0x60>
c00244ad:	89 c8                	mov    eax,ecx
c00244af:	0d 00 00 00 80       	or     eax,0x80000000
c00244b4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00244b9:	29 d1                	sub    ecx,edx
c00244bb:	d3 e8                	shr    eax,cl
c00244bd:	eb 2e                	jmp    c00244ed <__fixsfsi+0x60>
c00244bf:	31 c0                	xor    eax,eax
c00244c1:	81 c2 81 00 00 00    	add    edx,0x81
c00244c7:	78 24                	js     c00244ed <__fixsfsi+0x60>
c00244c9:	83 fa 1e             	cmp    edx,0x1e
c00244cc:	7e 09                	jle    c00244d7 <__fixsfsi+0x4a>
c00244ce:	83 fa 1f             	cmp    edx,0x1f
c00244d1:	75 18                	jne    c00244eb <__fixsfsi+0x5e>
c00244d3:	85 c9                	test   ecx,ecx
c00244d5:	75 14                	jne    c00244eb <__fixsfsi+0x5e>
c00244d7:	89 c8                	mov    eax,ecx
c00244d9:	0d 00 00 00 80       	or     eax,0x80000000
c00244de:	b9 1f 00 00 00       	mov    ecx,0x1f
c00244e3:	29 d1                	sub    ecx,edx
c00244e5:	d3 e8                	shr    eax,cl
c00244e7:	f7 d8                	neg    eax
c00244e9:	eb 02                	jmp    c00244ed <__fixsfsi+0x60>
c00244eb:	31 c0                	xor    eax,eax
c00244ed:	5d                   	pop    ebp
c00244ee:	c3                   	ret    

c00244ef <__fixunssfsi>:
c00244ef:	55                   	push   ebp
c00244f0:	89 e5                	mov    ebp,esp
c00244f2:	53                   	push   ebx
c00244f3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00244f6:	89 d3                	mov    ebx,edx
c00244f8:	c1 fb 17             	sar    ebx,0x17
c00244fb:	83 eb 7f             	sub    ebx,0x7f
c00244fe:	31 c0                	xor    eax,eax
c0024500:	83 fb 1f             	cmp    ebx,0x1f
c0024503:	77 18                	ja     c002451d <__fixunssfsi+0x2e>
c0024505:	89 d0                	mov    eax,edx
c0024507:	c1 e0 08             	shl    eax,0x8
c002450a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002450f:	0d 00 00 00 80       	or     eax,0x80000000
c0024514:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024519:	29 d9                	sub    ecx,ebx
c002451b:	d3 e8                	shr    eax,cl
c002451d:	5b                   	pop    ebx
c002451e:	5d                   	pop    ebp
c002451f:	c3                   	ret    

c0024520 <__cmpsf2>:
c0024520:	55                   	push   ebp
c0024521:	89 e5                	mov    ebp,esp
c0024523:	57                   	push   edi
c0024524:	56                   	push   esi
c0024525:	53                   	push   ebx
c0024526:	83 ec 24             	sub    esp,0x24
c0024529:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002452c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002452f:	e8 4f 10 00 00       	call   c0025583 <__truncdfsf2>
c0024534:	5a                   	pop    edx
c0024535:	59                   	pop    ecx
c0024536:	89 c3                	mov    ebx,eax
c0024538:	c1 e8 17             	shr    eax,0x17
c002453b:	0f b6 f0             	movzx  esi,al
c002453e:	89 d8                	mov    eax,ebx
c0024540:	c1 e8 1f             	shr    eax,0x1f
c0024543:	31 c6                	xor    esi,eax
c0024545:	c1 e3 08             	shl    ebx,0x8
c0024548:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002454b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002454e:	e8 30 10 00 00       	call   c0025583 <__truncdfsf2>
c0024553:	83 c4 10             	add    esp,0x10
c0024556:	89 c1                	mov    ecx,eax
c0024558:	c1 e9 17             	shr    ecx,0x17
c002455b:	0f b6 c9             	movzx  ecx,cl
c002455e:	89 c7                	mov    edi,eax
c0024560:	c1 ef 1f             	shr    edi,0x1f
c0024563:	89 ca                	mov    edx,ecx
c0024565:	31 fa                	xor    edx,edi
c0024567:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002456a:	c1 e0 08             	shl    eax,0x8
c002456d:	89 c2                	mov    edx,eax
c002456f:	89 d8                	mov    eax,ebx
c0024571:	09 d0                	or     eax,edx
c0024573:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0024578:	09 f0                	or     eax,esi
c002457a:	75 08                	jne    c0024584 <__cmpsf2+0x64>
c002457c:	31 c0                	xor    eax,eax
c002457e:	39 f9                	cmp    ecx,edi
c0024580:	75 0c                	jne    c002458e <__cmpsf2+0x6e>
c0024582:	eb 29                	jmp    c00245ad <__cmpsf2+0x8d>
c0024584:	b8 01 00 00 00       	mov    eax,0x1
c0024589:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002458c:	7f 1f                	jg     c00245ad <__cmpsf2+0x8d>
c002458e:	83 c8 ff             	or     eax,0xffffffff
c0024591:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0024594:	7c 17                	jl     c00245ad <__cmpsf2+0x8d>
c0024596:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002459c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00245a2:	b8 01 00 00 00       	mov    eax,0x1
c00245a7:	39 d3                	cmp    ebx,edx
c00245a9:	77 02                	ja     c00245ad <__cmpsf2+0x8d>
c00245ab:	19 c0                	sbb    eax,eax
c00245ad:	8d 65 f4             	lea    esp,[ebp-0xc]
c00245b0:	5b                   	pop    ebx
c00245b1:	5e                   	pop    esi
c00245b2:	5f                   	pop    edi
c00245b3:	5d                   	pop    ebp
c00245b4:	c3                   	ret    

c00245b5 <__eqsf2>:
c00245b5:	55                   	push   ebp
c00245b6:	89 e5                	mov    ebp,esp
c00245b8:	83 ec 24             	sub    esp,0x24
c00245bb:	6a 01                	push   0x1
c00245bd:	83 ec 0c             	sub    esp,0xc
c00245c0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00245c3:	e8 df 10 00 00       	call   c00256a7 <__extendsfdf2>
c00245c8:	83 c4 10             	add    esp,0x10
c00245cb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00245ce:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00245d1:	52                   	push   edx
c00245d2:	50                   	push   eax
c00245d3:	50                   	push   eax
c00245d4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00245d7:	e8 cb 10 00 00       	call   c00256a7 <__extendsfdf2>
c00245dc:	59                   	pop    ecx
c00245dd:	59                   	pop    ecx
c00245de:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00245e1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00245e4:	52                   	push   edx
c00245e5:	50                   	push   eax
c00245e6:	e8 35 ff ff ff       	call   c0024520 <__cmpsf2>
c00245eb:	83 c4 20             	add    esp,0x20
c00245ee:	c9                   	leave  
c00245ef:	c3                   	ret    

c00245f0 <__nesf2>:
c00245f0:	eb c3                	jmp    c00245b5 <__eqsf2>

c00245f2 <__gtsf2>:
c00245f2:	55                   	push   ebp
c00245f3:	89 e5                	mov    ebp,esp
c00245f5:	83 ec 24             	sub    esp,0x24
c00245f8:	6a ff                	push   0xffffffff
c00245fa:	83 ec 0c             	sub    esp,0xc
c00245fd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024600:	e8 a2 10 00 00       	call   c00256a7 <__extendsfdf2>
c0024605:	83 c4 10             	add    esp,0x10
c0024608:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002460b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002460e:	52                   	push   edx
c002460f:	50                   	push   eax
c0024610:	50                   	push   eax
c0024611:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024614:	e8 8e 10 00 00       	call   c00256a7 <__extendsfdf2>
c0024619:	59                   	pop    ecx
c002461a:	59                   	pop    ecx
c002461b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002461e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0024621:	52                   	push   edx
c0024622:	50                   	push   eax
c0024623:	e8 f8 fe ff ff       	call   c0024520 <__cmpsf2>
c0024628:	83 c4 20             	add    esp,0x20
c002462b:	c9                   	leave  
c002462c:	c3                   	ret    

c002462d <__gesf2>:
c002462d:	eb c3                	jmp    c00245f2 <__gtsf2>

c002462f <__ltsf2>:
c002462f:	eb 84                	jmp    c00245b5 <__eqsf2>

c0024631 <__lesf2>:
c0024631:	eb 82                	jmp    c00245b5 <__eqsf2>

c0024633 <__adddf3>:
c0024633:	55                   	push   ebp
c0024634:	89 e5                	mov    ebp,esp
c0024636:	57                   	push   edi
c0024637:	56                   	push   esi
c0024638:	53                   	push   ebx
c0024639:	83 ec 24             	sub    esp,0x24
c002463c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002463f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024642:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024645:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024648:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002464b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002464e:	89 c8                	mov    eax,ecx
c0024650:	89 ce                	mov    esi,ecx
c0024652:	c1 fe 14             	sar    esi,0x14
c0024655:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0024658:	89 fb                	mov    ebx,edi
c002465a:	89 fa                	mov    edx,edi
c002465c:	c1 e2 0b             	shl    edx,0xb
c002465f:	c1 e0 0b             	shl    eax,0xb
c0024662:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024667:	c1 eb 15             	shr    ebx,0x15
c002466a:	09 d8                	or     eax,ebx
c002466c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002466f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0024672:	c1 fe 14             	sar    esi,0x14
c0024675:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0024678:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002467b:	89 f3                	mov    ebx,esi
c002467d:	c1 e3 0b             	shl    ebx,0xb
c0024680:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0024683:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0024686:	c1 e3 0b             	shl    ebx,0xb
c0024689:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002468f:	c1 ee 15             	shr    esi,0x15
c0024692:	09 f3                	or     ebx,esi
c0024694:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0024697:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002469a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002469d:	0f 88 5f 02 00 00    	js     c0024902 <__adddf3+0x2cf>
c00246a3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00246a6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00246a9:	85 db                	test   ebx,ebx
c00246ab:	0f 8e c7 00 00 00    	jle    c0024778 <__adddf3+0x145>
c00246b1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00246b8:	75 1a                	jne    c00246d4 <__adddf3+0xa1>
c00246ba:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00246bd:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00246c0:	0f 84 b2 05 00 00    	je     c0024c78 <__adddf3+0x645>
c00246c6:	4b                   	dec    ebx
c00246c7:	75 23                	jne    c00246ec <__adddf3+0xb9>
c00246c9:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00246cc:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00246cf:	e9 99 00 00 00       	jmp    c002476d <__adddf3+0x13a>
c00246d4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00246d7:	f7 d6                	not    esi
c00246d9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00246df:	0f 84 93 05 00 00    	je     c0024c78 <__adddf3+0x645>
c00246e5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00246ec:	83 fb 1f             	cmp    ebx,0x1f
c00246ef:	7e 42                	jle    c0024733 <__adddf3+0x100>
c00246f1:	83 fb 3f             	cmp    ebx,0x3f
c00246f4:	0f 8f 7e 05 00 00    	jg     c0024c78 <__adddf3+0x645>
c00246fa:	83 e3 1f             	and    ebx,0x1f
c00246fd:	89 d9                	mov    ecx,ebx
c00246ff:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024702:	d3 ef                	shr    edi,cl
c0024704:	31 db                	xor    ebx,ebx
c0024706:	85 c9                	test   ecx,ecx
c0024708:	74 15                	je     c002471f <__adddf3+0xec>
c002470a:	be 20 00 00 00       	mov    esi,0x20
c002470f:	29 ce                	sub    esi,ecx
c0024711:	89 f1                	mov    ecx,esi
c0024713:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024716:	d3 e6                	shl    esi,cl
c0024718:	31 db                	xor    ebx,ebx
c002471a:	85 f6                	test   esi,esi
c002471c:	0f 95 c3             	setne  bl
c002471f:	31 c9                	xor    ecx,ecx
c0024721:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0024725:	0f 95 c1             	setne  cl
c0024728:	09 cf                	or     edi,ecx
c002472a:	09 fb                	or     ebx,edi
c002472c:	01 da                	add    edx,ebx
c002472e:	83 d0 00             	adc    eax,0x0
c0024731:	eb 3a                	jmp    c002476d <__adddf3+0x13a>
c0024733:	bf 20 00 00 00       	mov    edi,0x20
c0024738:	29 df                	sub    edi,ebx
c002473a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002473d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024740:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0024743:	d3 e6                	shl    esi,cl
c0024745:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024748:	88 d9                	mov    cl,bl
c002474a:	d3 ef                	shr    edi,cl
c002474c:	09 fe                	or     esi,edi
c002474e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024751:	88 d9                	mov    cl,bl
c0024753:	d3 ef                	shr    edi,cl
c0024755:	89 fb                	mov    ebx,edi
c0024757:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002475a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002475d:	d3 e7                	shl    edi,cl
c002475f:	85 ff                	test   edi,edi
c0024761:	0f 95 c1             	setne  cl
c0024764:	0f b6 c9             	movzx  ecx,cl
c0024767:	09 ce                	or     esi,ecx
c0024769:	01 f2                	add    edx,esi
c002476b:	11 d8                	adc    eax,ebx
c002476d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024770:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024773:	e9 52 01 00 00       	jmp    c00248ca <__adddf3+0x297>
c0024778:	0f 84 d5 00 00 00    	je     c0024853 <__adddf3+0x220>
c002477e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024781:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0024784:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024787:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002478a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0024791:	75 20                	jne    c00247b3 <__adddf3+0x180>
c0024793:	89 d6                	mov    esi,edx
c0024795:	09 c6                	or     esi,eax
c0024797:	0f 84 db 04 00 00    	je     c0024c78 <__adddf3+0x645>
c002479d:	4b                   	dec    ebx
c002479e:	75 29                	jne    c00247c9 <__adddf3+0x196>
c00247a0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00247a3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00247a6:	01 d1                	add    ecx,edx
c00247a8:	11 c6                	adc    esi,eax
c00247aa:	89 f0                	mov    eax,esi
c00247ac:	89 ca                	mov    edx,ecx
c00247ae:	e9 17 01 00 00       	jmp    c00248ca <__adddf3+0x297>
c00247b3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00247b6:	f7 d6                	not    esi
c00247b8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00247be:	0f 84 b4 04 00 00    	je     c0024c78 <__adddf3+0x645>
c00247c4:	0d 00 00 00 80       	or     eax,0x80000000
c00247c9:	83 fb 1f             	cmp    ebx,0x1f
c00247cc:	7e 48                	jle    c0024816 <__adddf3+0x1e3>
c00247ce:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00247d1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00247d4:	83 fb 3f             	cmp    ebx,0x3f
c00247d7:	0f 8f 9b 04 00 00    	jg     c0024c78 <__adddf3+0x645>
c00247dd:	83 e3 1f             	and    ebx,0x1f
c00247e0:	89 d9                	mov    ecx,ebx
c00247e2:	89 c7                	mov    edi,eax
c00247e4:	d3 ef                	shr    edi,cl
c00247e6:	31 db                	xor    ebx,ebx
c00247e8:	85 c9                	test   ecx,ecx
c00247ea:	74 12                	je     c00247fe <__adddf3+0x1cb>
c00247ec:	be 20 00 00 00       	mov    esi,0x20
c00247f1:	29 ce                	sub    esi,ecx
c00247f3:	89 f1                	mov    ecx,esi
c00247f5:	d3 e0                	shl    eax,cl
c00247f7:	31 db                	xor    ebx,ebx
c00247f9:	85 c0                	test   eax,eax
c00247fb:	0f 95 c3             	setne  bl
c00247fe:	31 c0                	xor    eax,eax
c0024800:	85 d2                	test   edx,edx
c0024802:	0f 95 c0             	setne  al
c0024805:	09 c7                	or     edi,eax
c0024807:	09 fb                	or     ebx,edi
c0024809:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002480c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002480f:	01 da                	add    edx,ebx
c0024811:	83 d6 00             	adc    esi,0x0
c0024814:	eb 39                	jmp    c002484f <__adddf3+0x21c>
c0024816:	be 20 00 00 00       	mov    esi,0x20
c002481b:	29 de                	sub    esi,ebx
c002481d:	89 c7                	mov    edi,eax
c002481f:	89 f1                	mov    ecx,esi
c0024821:	d3 e7                	shl    edi,cl
c0024823:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0024826:	89 d7                	mov    edi,edx
c0024828:	88 d9                	mov    cl,bl
c002482a:	d3 ef                	shr    edi,cl
c002482c:	89 f9                	mov    ecx,edi
c002482e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024831:	09 cf                	or     edi,ecx
c0024833:	88 d9                	mov    cl,bl
c0024835:	d3 e8                	shr    eax,cl
c0024837:	89 f1                	mov    ecx,esi
c0024839:	d3 e2                	shl    edx,cl
c002483b:	85 d2                	test   edx,edx
c002483d:	0f 95 c2             	setne  dl
c0024840:	0f b6 d2             	movzx  edx,dl
c0024843:	09 d7                	or     edi,edx
c0024845:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024848:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002484b:	01 fa                	add    edx,edi
c002484d:	11 c6                	adc    esi,eax
c002484f:	89 f0                	mov    eax,esi
c0024851:	eb 77                	jmp    c00248ca <__adddf3+0x297>
c0024853:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024856:	46                   	inc    esi
c0024857:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002485a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0024860:	75 41                	jne    c00248a3 <__adddf3+0x270>
c0024862:	89 d3                	mov    ebx,edx
c0024864:	09 c3                	or     ebx,eax
c0024866:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002486d:	75 27                	jne    c0024896 <__adddf3+0x263>
c002486f:	85 db                	test   ebx,ebx
c0024871:	0f 84 fb 03 00 00    	je     c0024c72 <__adddf3+0x63f>
c0024877:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002487a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002487d:	0f 84 f5 03 00 00    	je     c0024c78 <__adddf3+0x645>
c0024883:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0024886:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0024889:	85 c0                	test   eax,eax
c002488b:	0f 89 91 03 00 00    	jns    c0024c22 <__adddf3+0x5ef>
c0024891:	e9 85 03 00 00       	jmp    c0024c1b <__adddf3+0x5e8>
c0024896:	85 db                	test   ebx,ebx
c0024898:	0f 85 da 03 00 00    	jne    c0024c78 <__adddf3+0x645>
c002489e:	e9 cf 03 00 00       	jmp    c0024c72 <__adddf3+0x63f>
c00248a3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00248a6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00248a9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00248ac:	f7 d1                	not    ecx
c00248ae:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00248b4:	0f 84 70 03 00 00    	je     c0024c2a <__adddf3+0x5f7>
c00248ba:	d1 ea                	shr    edx,1
c00248bc:	89 c1                	mov    ecx,eax
c00248be:	c1 e1 1f             	shl    ecx,0x1f
c00248c1:	09 ca                	or     edx,ecx
c00248c3:	d1 e8                	shr    eax,1
c00248c5:	e9 6f 03 00 00       	jmp    c0024c39 <__adddf3+0x606>
c00248ca:	85 c0                	test   eax,eax
c00248cc:	0f 89 67 03 00 00    	jns    c0024c39 <__adddf3+0x606>
c00248d2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00248d5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00248d8:	f7 d1                	not    ecx
c00248da:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00248e0:	0f 84 44 03 00 00    	je     c0024c2a <__adddf3+0x5f7>
c00248e6:	89 d1                	mov    ecx,edx
c00248e8:	d1 e9                	shr    ecx,1
c00248ea:	83 e2 01             	and    edx,0x1
c00248ed:	09 ca                	or     edx,ecx
c00248ef:	89 c1                	mov    ecx,eax
c00248f1:	c1 e1 1f             	shl    ecx,0x1f
c00248f4:	09 ca                	or     edx,ecx
c00248f6:	d1 e8                	shr    eax,1
c00248f8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00248fd:	e9 37 03 00 00       	jmp    c0024c39 <__adddf3+0x606>
c0024902:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024905:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002490b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002490e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024911:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024917:	29 de                	sub    esi,ebx
c0024919:	85 f6                	test   esi,esi
c002491b:	0f 8e bd 00 00 00    	jle    c00249de <__adddf3+0x3ab>
c0024921:	85 db                	test   ebx,ebx
c0024923:	75 17                	jne    c002493c <__adddf3+0x309>
c0024925:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0024928:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002492b:	0f 84 47 03 00 00    	je     c0024c78 <__adddf3+0x645>
c0024931:	4e                   	dec    esi
c0024932:	75 20                	jne    c0024954 <__adddf3+0x321>
c0024934:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0024937:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002493a:	eb 5b                	jmp    c0024997 <__adddf3+0x364>
c002493c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002493f:	f7 d3                	not    ebx
c0024941:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024947:	0f 84 2b 03 00 00    	je     c0024c78 <__adddf3+0x645>
c002494d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0024954:	83 fe 1f             	cmp    esi,0x1f
c0024957:	7e 49                	jle    c00249a2 <__adddf3+0x36f>
c0024959:	83 fe 3f             	cmp    esi,0x3f
c002495c:	0f 8f 16 03 00 00    	jg     c0024c78 <__adddf3+0x645>
c0024962:	83 e6 1f             	and    esi,0x1f
c0024965:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024968:	89 f1                	mov    ecx,esi
c002496a:	d3 ef                	shr    edi,cl
c002496c:	31 db                	xor    ebx,ebx
c002496e:	85 f6                	test   esi,esi
c0024970:	74 13                	je     c0024985 <__adddf3+0x352>
c0024972:	b9 20 00 00 00       	mov    ecx,0x20
c0024977:	29 f1                	sub    ecx,esi
c0024979:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002497c:	d3 e6                	shl    esi,cl
c002497e:	31 db                	xor    ebx,ebx
c0024980:	85 f6                	test   esi,esi
c0024982:	0f 95 c3             	setne  bl
c0024985:	31 c9                	xor    ecx,ecx
c0024987:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002498b:	0f 95 c1             	setne  cl
c002498e:	09 cf                	or     edi,ecx
c0024990:	09 fb                	or     ebx,edi
c0024992:	29 da                	sub    edx,ebx
c0024994:	83 d8 00             	sbb    eax,0x0
c0024997:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002499a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002499d:	e9 aa 01 00 00       	jmp    c0024b4c <__adddf3+0x519>
c00249a2:	bf 20 00 00 00       	mov    edi,0x20
c00249a7:	29 f7                	sub    edi,esi
c00249a9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00249ac:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00249af:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00249b2:	d3 e3                	shl    ebx,cl
c00249b4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00249b7:	89 f1                	mov    ecx,esi
c00249b9:	d3 ef                	shr    edi,cl
c00249bb:	09 fb                	or     ebx,edi
c00249bd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00249c0:	89 f1                	mov    ecx,esi
c00249c2:	d3 ef                	shr    edi,cl
c00249c4:	89 fe                	mov    esi,edi
c00249c6:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00249c9:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00249cc:	d3 e7                	shl    edi,cl
c00249ce:	85 ff                	test   edi,edi
c00249d0:	0f 95 c1             	setne  cl
c00249d3:	0f b6 c9             	movzx  ecx,cl
c00249d6:	09 cb                	or     ebx,ecx
c00249d8:	29 da                	sub    edx,ebx
c00249da:	19 f0                	sbb    eax,esi
c00249dc:	eb b9                	jmp    c0024997 <__adddf3+0x364>
c00249de:	0f 84 cd 00 00 00    	je     c0024ab1 <__adddf3+0x47e>
c00249e4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00249e7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00249ea:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00249ed:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00249f1:	75 1b                	jne    c0024a0e <__adddf3+0x3db>
c00249f3:	89 d6                	mov    esi,edx
c00249f5:	09 c6                	or     esi,eax
c00249f7:	0f 84 7b 02 00 00    	je     c0024c78 <__adddf3+0x645>
c00249fd:	4b                   	dec    ebx
c00249fe:	75 24                	jne    c0024a24 <__adddf3+0x3f1>
c0024a00:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024a03:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024a06:	29 d1                	sub    ecx,edx
c0024a08:	19 c6                	sbb    esi,eax
c0024a0a:	89 ca                	mov    edx,ecx
c0024a0c:	eb 61                	jmp    c0024a6f <__adddf3+0x43c>
c0024a0e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0024a11:	f7 d6                	not    esi
c0024a13:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0024a19:	0f 84 59 02 00 00    	je     c0024c78 <__adddf3+0x645>
c0024a1f:	0d 00 00 00 80       	or     eax,0x80000000
c0024a24:	83 fb 1f             	cmp    ebx,0x1f
c0024a27:	7e 4d                	jle    c0024a76 <__adddf3+0x443>
c0024a29:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024a2c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024a2f:	83 fb 3f             	cmp    ebx,0x3f
c0024a32:	0f 8f 40 02 00 00    	jg     c0024c78 <__adddf3+0x645>
c0024a38:	83 e3 1f             	and    ebx,0x1f
c0024a3b:	89 d9                	mov    ecx,ebx
c0024a3d:	89 c7                	mov    edi,eax
c0024a3f:	d3 ef                	shr    edi,cl
c0024a41:	31 db                	xor    ebx,ebx
c0024a43:	85 c9                	test   ecx,ecx
c0024a45:	74 12                	je     c0024a59 <__adddf3+0x426>
c0024a47:	be 20 00 00 00       	mov    esi,0x20
c0024a4c:	29 ce                	sub    esi,ecx
c0024a4e:	89 f1                	mov    ecx,esi
c0024a50:	d3 e0                	shl    eax,cl
c0024a52:	31 db                	xor    ebx,ebx
c0024a54:	85 c0                	test   eax,eax
c0024a56:	0f 95 c3             	setne  bl
c0024a59:	31 c0                	xor    eax,eax
c0024a5b:	85 d2                	test   edx,edx
c0024a5d:	0f 95 c0             	setne  al
c0024a60:	09 c7                	or     edi,eax
c0024a62:	09 fb                	or     ebx,edi
c0024a64:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024a67:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0024a6a:	29 da                	sub    edx,ebx
c0024a6c:	83 de 00             	sbb    esi,0x0
c0024a6f:	89 f0                	mov    eax,esi
c0024a71:	e9 d6 00 00 00       	jmp    c0024b4c <__adddf3+0x519>
c0024a76:	be 20 00 00 00       	mov    esi,0x20
c0024a7b:	29 de                	sub    esi,ebx
c0024a7d:	89 c7                	mov    edi,eax
c0024a7f:	89 f1                	mov    ecx,esi
c0024a81:	d3 e7                	shl    edi,cl
c0024a83:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0024a86:	89 d7                	mov    edi,edx
c0024a88:	88 d9                	mov    cl,bl
c0024a8a:	d3 ef                	shr    edi,cl
c0024a8c:	89 f9                	mov    ecx,edi
c0024a8e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024a91:	09 cf                	or     edi,ecx
c0024a93:	88 d9                	mov    cl,bl
c0024a95:	d3 e8                	shr    eax,cl
c0024a97:	89 f1                	mov    ecx,esi
c0024a99:	d3 e2                	shl    edx,cl
c0024a9b:	85 d2                	test   edx,edx
c0024a9d:	0f 95 c2             	setne  dl
c0024aa0:	0f b6 d2             	movzx  edx,dl
c0024aa3:	09 d7                	or     edi,edx
c0024aa5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024aa8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0024aab:	29 fa                	sub    edx,edi
c0024aad:	19 c6                	sbb    esi,eax
c0024aaf:	eb be                	jmp    c0024a6f <__adddf3+0x43c>
c0024ab1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024ab4:	8d 5e 01             	lea    ebx,[esi+0x1]
c0024ab7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0024abd:	75 6a                	jne    c0024b29 <__adddf3+0x4f6>
c0024abf:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0024ac3:	75 58                	jne    c0024b1d <__adddf3+0x4ea>
c0024ac5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0024ac8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0024acb:	89 d6                	mov    esi,edx
c0024acd:	09 c6                	or     esi,eax
c0024acf:	75 17                	jne    c0024ae8 <__adddf3+0x4b5>
c0024ad1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024ad4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024ad7:	85 db                	test   ebx,ebx
c0024ad9:	0f 85 99 01 00 00    	jne    c0024c78 <__adddf3+0x645>
c0024adf:	31 ff                	xor    edi,edi
c0024ae1:	31 c9                	xor    ecx,ecx
c0024ae3:	e9 90 01 00 00       	jmp    c0024c78 <__adddf3+0x645>
c0024ae8:	85 db                	test   ebx,ebx
c0024aea:	0f 84 88 01 00 00    	je     c0024c78 <__adddf3+0x645>
c0024af0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0024af3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0024af6:	85 c0                	test   eax,eax
c0024af8:	79 10                	jns    c0024b0a <__adddf3+0x4d7>
c0024afa:	31 c9                	xor    ecx,ecx
c0024afc:	f7 da                	neg    edx
c0024afe:	0f 95 c1             	setne  cl
c0024b01:	01 c8                	add    eax,ecx
c0024b03:	f7 d8                	neg    eax
c0024b05:	e9 2f 01 00 00       	jmp    c0024c39 <__adddf3+0x606>
c0024b0a:	31 ff                	xor    edi,edi
c0024b0c:	31 c9                	xor    ecx,ecx
c0024b0e:	89 c3                	mov    ebx,eax
c0024b10:	09 d3                	or     ebx,edx
c0024b12:	0f 84 60 01 00 00    	je     c0024c78 <__adddf3+0x645>
c0024b18:	e9 05 01 00 00       	jmp    c0024c22 <__adddf3+0x5ef>
c0024b1d:	31 ff                	xor    edi,edi
c0024b1f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0024b24:	e9 4f 01 00 00       	jmp    c0024c78 <__adddf3+0x645>
c0024b29:	89 c1                	mov    ecx,eax
c0024b2b:	89 d0                	mov    eax,edx
c0024b2d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0024b30:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0024b33:	89 ca                	mov    edx,ecx
c0024b35:	85 c9                	test   ecx,ecx
c0024b37:	79 2c                	jns    c0024b65 <__adddf3+0x532>
c0024b39:	31 c9                	xor    ecx,ecx
c0024b3b:	f7 d8                	neg    eax
c0024b3d:	0f 95 c1             	setne  cl
c0024b40:	01 ca                	add    edx,ecx
c0024b42:	f7 da                	neg    edx
c0024b44:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0024b47:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0024b4a:	eb 19                	jmp    c0024b65 <__adddf3+0x532>
c0024b4c:	85 c0                	test   eax,eax
c0024b4e:	0f 89 e5 00 00 00    	jns    c0024c39 <__adddf3+0x606>
c0024b54:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024b59:	89 c1                	mov    ecx,eax
c0024b5b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024b5e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0024b61:	89 d0                	mov    eax,edx
c0024b63:	89 ca                	mov    edx,ecx
c0024b65:	85 d2                	test   edx,edx
c0024b67:	74 59                	je     c0024bc2 <__adddf3+0x58f>
c0024b69:	0f bd da             	bsr    ebx,edx
c0024b6c:	83 f3 1f             	xor    ebx,0x1f
c0024b6f:	88 d9                	mov    cl,bl
c0024b71:	d3 e2                	shl    edx,cl
c0024b73:	bf 20 00 00 00       	mov    edi,0x20
c0024b78:	89 f9                	mov    ecx,edi
c0024b7a:	29 d9                	sub    ecx,ebx
c0024b7c:	89 c6                	mov    esi,eax
c0024b7e:	d3 ee                	shr    esi,cl
c0024b80:	09 d6                	or     esi,edx
c0024b82:	88 d9                	mov    cl,bl
c0024b84:	d3 e0                	shl    eax,cl
c0024b86:	89 c2                	mov    edx,eax
c0024b88:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024b8b:	25 ff 07 00 00       	and    eax,0x7ff
c0024b90:	39 d8                	cmp    eax,ebx
c0024b92:	7f 22                	jg     c0024bb6 <__adddf3+0x583>
c0024b94:	29 c3                	sub    ebx,eax
c0024b96:	43                   	inc    ebx
c0024b97:	88 d9                	mov    cl,bl
c0024b99:	d3 ea                	shr    edx,cl
c0024b9b:	29 df                	sub    edi,ebx
c0024b9d:	89 f9                	mov    ecx,edi
c0024b9f:	89 f0                	mov    eax,esi
c0024ba1:	d3 e0                	shl    eax,cl
c0024ba3:	09 c2                	or     edx,eax
c0024ba5:	89 f0                	mov    eax,esi
c0024ba7:	88 d9                	mov    cl,bl
c0024ba9:	d3 e8                	shr    eax,cl
c0024bab:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024bae:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0024bb4:	eb 6f                	jmp    c0024c25 <__adddf3+0x5f2>
c0024bb6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024bb9:	29 d8                	sub    eax,ebx
c0024bbb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024bbe:	89 f0                	mov    eax,esi
c0024bc0:	eb 59                	jmp    c0024c1b <__adddf3+0x5e8>
c0024bc2:	85 c0                	test   eax,eax
c0024bc4:	74 6a                	je     c0024c30 <__adddf3+0x5fd>
c0024bc6:	0f bd c8             	bsr    ecx,eax
c0024bc9:	83 f1 1f             	xor    ecx,0x1f
c0024bcc:	d3 e0                	shl    eax,cl
c0024bce:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0024bd1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024bd7:	83 c1 20             	add    ecx,0x20
c0024bda:	39 cb                	cmp    ebx,ecx
c0024bdc:	7f 35                	jg     c0024c13 <__adddf3+0x5e0>
c0024bde:	29 d9                	sub    ecx,ebx
c0024be0:	8d 71 01             	lea    esi,[ecx+0x1]
c0024be3:	83 fe 1f             	cmp    esi,0x1f
c0024be6:	7e 09                	jle    c0024bf1 <__adddf3+0x5be>
c0024be8:	83 e9 1f             	sub    ecx,0x1f
c0024beb:	d3 e8                	shr    eax,cl
c0024bed:	89 c3                	mov    ebx,eax
c0024bef:	eb 11                	jmp    c0024c02 <__adddf3+0x5cf>
c0024bf1:	b9 20 00 00 00       	mov    ecx,0x20
c0024bf6:	29 f1                	sub    ecx,esi
c0024bf8:	89 c3                	mov    ebx,eax
c0024bfa:	d3 e3                	shl    ebx,cl
c0024bfc:	89 f1                	mov    ecx,esi
c0024bfe:	d3 e8                	shr    eax,cl
c0024c00:	89 c2                	mov    edx,eax
c0024c02:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024c05:	25 00 f8 ff ff       	and    eax,0xfffff800
c0024c0a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024c0d:	89 d0                	mov    eax,edx
c0024c0f:	89 da                	mov    edx,ebx
c0024c11:	eb 26                	jmp    c0024c39 <__adddf3+0x606>
c0024c13:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024c16:	29 cf                	sub    edi,ecx
c0024c18:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024c1b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024c20:	eb 17                	jmp    c0024c39 <__adddf3+0x606>
c0024c22:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024c25:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024c28:	eb 0f                	jmp    c0024c39 <__adddf3+0x606>
c0024c2a:	31 d2                	xor    edx,edx
c0024c2c:	31 c0                	xor    eax,eax
c0024c2e:	eb 09                	jmp    c0024c39 <__adddf3+0x606>
c0024c30:	89 c2                	mov    edx,eax
c0024c32:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0024c39:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024c3c:	c1 e1 14             	shl    ecx,0x14
c0024c3f:	89 c3                	mov    ebx,eax
c0024c41:	c1 eb 0b             	shr    ebx,0xb
c0024c44:	09 d9                	or     ecx,ebx
c0024c46:	89 d3                	mov    ebx,edx
c0024c48:	c1 eb 0b             	shr    ebx,0xb
c0024c4b:	c1 e0 15             	shl    eax,0x15
c0024c4e:	09 d8                	or     eax,ebx
c0024c50:	89 c7                	mov    edi,eax
c0024c52:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0024c58:	0f 95 c0             	setne  al
c0024c5b:	89 c6                	mov    esi,eax
c0024c5d:	09 f3                	or     ebx,esi
c0024c5f:	83 e3 01             	and    ebx,0x1
c0024c62:	c1 ea 0a             	shr    edx,0xa
c0024c65:	21 da                	and    edx,ebx
c0024c67:	89 f8                	mov    eax,edi
c0024c69:	01 d0                	add    eax,edx
c0024c6b:	83 d1 00             	adc    ecx,0x0
c0024c6e:	89 c7                	mov    edi,eax
c0024c70:	eb 06                	jmp    c0024c78 <__adddf3+0x645>
c0024c72:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024c75:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024c78:	89 f8                	mov    eax,edi
c0024c7a:	89 ca                	mov    edx,ecx
c0024c7c:	83 c4 24             	add    esp,0x24
c0024c7f:	5b                   	pop    ebx
c0024c80:	5e                   	pop    esi
c0024c81:	5f                   	pop    edi
c0024c82:	5d                   	pop    ebp
c0024c83:	c3                   	ret    

c0024c84 <__subdf3>:
c0024c84:	55                   	push   ebp
c0024c85:	89 e5                	mov    ebp,esp
c0024c87:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024c8a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0024c8d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0024c93:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0024c96:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0024c99:	5d                   	pop    ebp
c0024c9a:	e9 94 f9 ff ff       	jmp    c0024633 <__adddf3>

c0024c9f <__negdf2>:
c0024c9f:	55                   	push   ebp
c0024ca0:	89 e5                	mov    ebp,esp
c0024ca2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024ca5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024ca8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0024cae:	5d                   	pop    ebp
c0024caf:	c3                   	ret    

c0024cb0 <__muldf3>:
c0024cb0:	55                   	push   ebp
c0024cb1:	89 e5                	mov    ebp,esp
c0024cb3:	57                   	push   edi
c0024cb4:	56                   	push   esi
c0024cb5:	53                   	push   ebx
c0024cb6:	83 ec 24             	sub    esp,0x24
c0024cb9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0024cbc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024cbf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024cc2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024cc5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0024cc8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0024ccb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024cce:	89 c8                	mov    eax,ecx
c0024cd0:	c1 f8 14             	sar    eax,0x14
c0024cd3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024cd6:	89 f8                	mov    eax,edi
c0024cd8:	89 fb                	mov    ebx,edi
c0024cda:	c1 e3 0b             	shl    ebx,0xb
c0024cdd:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0024ce0:	c1 e1 0b             	shl    ecx,0xb
c0024ce3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024ce9:	c1 e8 15             	shr    eax,0x15
c0024cec:	09 c1                	or     ecx,eax
c0024cee:	89 d6                	mov    esi,edx
c0024cf0:	89 d0                	mov    eax,edx
c0024cf2:	c1 f8 14             	sar    eax,0x14
c0024cf5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024cf8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0024cfb:	89 c3                	mov    ebx,eax
c0024cfd:	c1 e3 0b             	shl    ebx,0xb
c0024d00:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0024d03:	c1 e6 0b             	shl    esi,0xb
c0024d06:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0024d0c:	c1 e8 15             	shr    eax,0x15
c0024d0f:	09 c6                	or     esi,eax
c0024d11:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024d14:	25 ff 07 00 00       	and    eax,0x7ff
c0024d19:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0024d1c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024d1f:	25 ff 07 00 00       	and    eax,0x7ff
c0024d24:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0024d27:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0024d2a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0024d2d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0024d34:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024d37:	40                   	inc    eax
c0024d38:	a9 fe 07 00 00       	test   eax,0x7fe
c0024d3d:	0f 85 8d 00 00 00    	jne    c0024dd0 <__muldf3+0x120>
c0024d43:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024d46:	09 c8                	or     eax,ecx
c0024d48:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0024d4c:	74 44                	je     c0024d92 <__muldf3+0xe2>
c0024d4e:	85 c0                	test   eax,eax
c0024d50:	0f 85 31 02 00 00    	jne    c0024f87 <__muldf3+0x2d7>
c0024d56:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024d59:	40                   	inc    eax
c0024d5a:	a9 fe 07 00 00       	test   eax,0x7fe
c0024d5f:	75 13                	jne    c0024d74 <__muldf3+0xc4>
c0024d61:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024d64:	09 f1                	or     ecx,esi
c0024d66:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0024d6a:	74 22                	je     c0024d8e <__muldf3+0xde>
c0024d6c:	85 c9                	test   ecx,ecx
c0024d6e:	0f 85 0d 02 00 00    	jne    c0024f81 <__muldf3+0x2d1>
c0024d74:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0024d78:	0f 89 09 02 00 00    	jns    c0024f87 <__muldf3+0x2d7>
c0024d7e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024d81:	05 00 00 00 80       	add    eax,0x80000000
c0024d86:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024d89:	e9 f9 01 00 00       	jmp    c0024f87 <__muldf3+0x2d7>
c0024d8e:	85 c9                	test   ecx,ecx
c0024d90:	eb 2e                	jmp    c0024dc0 <__muldf3+0x110>
c0024d92:	85 c0                	test   eax,eax
c0024d94:	74 20                	je     c0024db6 <__muldf3+0x106>
c0024d96:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0024d99:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024d9c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024d9f:	c1 ef 1f             	shr    edi,0x1f
c0024da2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0024da5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0024da8:	8d 43 ff             	lea    eax,[ebx-0x1]
c0024dab:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024dae:	09 f9                	or     ecx,edi
c0024db0:	78 1e                	js     c0024dd0 <__muldf3+0x120>
c0024db2:	89 c3                	mov    ebx,eax
c0024db4:	eb e0                	jmp    c0024d96 <__muldf3+0xe6>
c0024db6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024db9:	f7 d0                	not    eax
c0024dbb:	a9 ff 07 00 00       	test   eax,0x7ff
c0024dc0:	75 b2                	jne    c0024d74 <__muldf3+0xc4>
c0024dc2:	31 ff                	xor    edi,edi
c0024dc4:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0024dcb:	e9 b7 01 00 00       	jmp    c0024f87 <__muldf3+0x2d7>
c0024dd0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024dd3:	40                   	inc    eax
c0024dd4:	a9 fe 07 00 00       	test   eax,0x7fe
c0024dd9:	75 57                	jne    c0024e32 <__muldf3+0x182>
c0024ddb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024dde:	09 f0                	or     eax,esi
c0024de0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0024de4:	74 23                	je     c0024e09 <__muldf3+0x159>
c0024de6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0024dea:	0f 89 91 01 00 00    	jns    c0024f81 <__muldf3+0x2d1>
c0024df0:	85 c0                	test   eax,eax
c0024df2:	0f 85 89 01 00 00    	jne    c0024f81 <__muldf3+0x2d1>
c0024df8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0024dfb:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0024e01:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024e04:	e9 7e 01 00 00       	jmp    c0024f87 <__muldf3+0x2d7>
c0024e09:	85 c0                	test   eax,eax
c0024e0b:	75 0c                	jne    c0024e19 <__muldf3+0x169>
c0024e0d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0024e11:	0f 89 6a 01 00 00    	jns    c0024f81 <__muldf3+0x2d1>
c0024e17:	eb df                	jmp    c0024df8 <__muldf3+0x148>
c0024e19:	01 f6                	add    esi,esi
c0024e1b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0024e1e:	c1 ea 1f             	shr    edx,0x1f
c0024e21:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024e24:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0024e27:	8d 43 ff             	lea    eax,[ebx-0x1]
c0024e2a:	09 d6                	or     esi,edx
c0024e2c:	78 04                	js     c0024e32 <__muldf3+0x182>
c0024e2e:	89 c3                	mov    ebx,eax
c0024e30:	eb e7                	jmp    c0024e19 <__muldf3+0x169>
c0024e32:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0024e38:	81 ce 00 00 00 80    	or     esi,0x80000000
c0024e3e:	89 c8                	mov    eax,ecx
c0024e40:	f7 e6                	mul    esi
c0024e42:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0024e45:	89 c7                	mov    edi,eax
c0024e47:	89 c8                	mov    eax,ecx
c0024e49:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0024e4c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0024e4f:	89 c1                	mov    ecx,eax
c0024e51:	89 f0                	mov    eax,esi
c0024e53:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0024e56:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0024e59:	89 c6                	mov    esi,eax
c0024e5b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024e5e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0024e61:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0024e64:	31 c0                	xor    eax,eax
c0024e66:	01 f1                	add    ecx,esi
c0024e68:	0f 92 c0             	setb   al
c0024e6b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0024e6e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0024e71:	83 d6 00             	adc    esi,0x0
c0024e74:	01 c7                	add    edi,eax
c0024e76:	83 d6 00             	adc    esi,0x0
c0024e79:	01 ca                	add    edx,ecx
c0024e7b:	0f 92 c1             	setb   cl
c0024e7e:	0f b6 c9             	movzx  ecx,cl
c0024e81:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0024e84:	83 d6 00             	adc    esi,0x0
c0024e87:	01 cf                	add    edi,ecx
c0024e89:	83 d6 00             	adc    esi,0x0
c0024e8c:	31 c9                	xor    ecx,ecx
c0024e8e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0024e91:	0f 95 c1             	setne  cl
c0024e94:	09 cf                	or     edi,ecx
c0024e96:	85 f6                	test   esi,esi
c0024e98:	78 0c                	js     c0024ea6 <__muldf3+0x1f6>
c0024e9a:	01 f6                	add    esi,esi
c0024e9c:	89 f8                	mov    eax,edi
c0024e9e:	c1 e8 1f             	shr    eax,0x1f
c0024ea1:	09 c6                	or     esi,eax
c0024ea3:	01 ff                	add    edi,edi
c0024ea5:	4b                   	dec    ebx
c0024ea6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0024eac:	0f 8f 85 00 00 00    	jg     c0024f37 <__muldf3+0x287>
c0024eb2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0024eb8:	85 db                	test   ebx,ebx
c0024eba:	0f 8f 84 00 00 00    	jg     c0024f44 <__muldf3+0x294>
c0024ec0:	83 fb cc             	cmp    ebx,0xffffffcc
c0024ec3:	7c 79                	jl     c0024f3e <__muldf3+0x28e>
c0024ec5:	ba 01 00 00 00       	mov    edx,0x1
c0024eca:	29 da                	sub    edx,ebx
c0024ecc:	81 ce 00 00 00 80    	or     esi,0x80000000
c0024ed2:	83 fa 1f             	cmp    edx,0x1f
c0024ed5:	7e 30                	jle    c0024f07 <__muldf3+0x257>
c0024ed7:	83 fa 20             	cmp    edx,0x20
c0024eda:	75 0b                	jne    c0024ee7 <__muldf3+0x237>
c0024edc:	31 c0                	xor    eax,eax
c0024ede:	85 ff                	test   edi,edi
c0024ee0:	0f 95 c0             	setne  al
c0024ee3:	89 c7                	mov    edi,eax
c0024ee5:	eb 1a                	jmp    c0024f01 <__muldf3+0x251>
c0024ee7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0024eea:	89 f0                	mov    eax,esi
c0024eec:	d3 e0                	shl    eax,cl
c0024eee:	09 f8                	or     eax,edi
c0024ef0:	0f 95 c0             	setne  al
c0024ef3:	0f b6 c0             	movzx  eax,al
c0024ef6:	89 c7                	mov    edi,eax
c0024ef8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0024efd:	29 d9                	sub    ecx,ebx
c0024eff:	d3 ee                	shr    esi,cl
c0024f01:	09 f7                	or     edi,esi
c0024f03:	31 db                	xor    ebx,ebx
c0024f05:	eb 3b                	jmp    c0024f42 <__muldf3+0x292>
c0024f07:	83 c3 1f             	add    ebx,0x1f
c0024f0a:	89 f0                	mov    eax,esi
c0024f0c:	88 d9                	mov    cl,bl
c0024f0e:	d3 e0                	shl    eax,cl
c0024f10:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024f13:	89 f8                	mov    eax,edi
c0024f15:	88 d1                	mov    cl,dl
c0024f17:	d3 e8                	shr    eax,cl
c0024f19:	89 c1                	mov    ecx,eax
c0024f1b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024f1e:	09 c8                	or     eax,ecx
c0024f20:	88 d9                	mov    cl,bl
c0024f22:	d3 e7                	shl    edi,cl
c0024f24:	31 db                	xor    ebx,ebx
c0024f26:	85 ff                	test   edi,edi
c0024f28:	0f 95 c3             	setne  bl
c0024f2b:	89 df                	mov    edi,ebx
c0024f2d:	09 c7                	or     edi,eax
c0024f2f:	88 d1                	mov    cl,dl
c0024f31:	d3 ee                	shr    esi,cl
c0024f33:	31 db                	xor    ebx,ebx
c0024f35:	eb 0d                	jmp    c0024f44 <__muldf3+0x294>
c0024f37:	bb ff 07 00 00       	mov    ebx,0x7ff
c0024f3c:	eb 02                	jmp    c0024f40 <__muldf3+0x290>
c0024f3e:	31 db                	xor    ebx,ebx
c0024f40:	31 ff                	xor    edi,edi
c0024f42:	31 f6                	xor    esi,esi
c0024f44:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024f47:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0024f4a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0024f4f:	09 c3                	or     ebx,eax
c0024f51:	c1 e3 14             	shl    ebx,0x14
c0024f54:	89 f0                	mov    eax,esi
c0024f56:	c1 e8 0b             	shr    eax,0xb
c0024f59:	09 c3                	or     ebx,eax
c0024f5b:	89 f8                	mov    eax,edi
c0024f5d:	c1 e8 0b             	shr    eax,0xb
c0024f60:	c1 e6 15             	shl    esi,0x15
c0024f63:	09 c6                	or     esi,eax
c0024f65:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0024f6b:	0f 95 c1             	setne  cl
c0024f6e:	09 c8                	or     eax,ecx
c0024f70:	83 e0 01             	and    eax,0x1
c0024f73:	c1 ef 0a             	shr    edi,0xa
c0024f76:	21 c7                	and    edi,eax
c0024f78:	01 f7                	add    edi,esi
c0024f7a:	83 d3 00             	adc    ebx,0x0
c0024f7d:	89 da                	mov    edx,ebx
c0024f7f:	eb 03                	jmp    c0024f84 <__muldf3+0x2d4>
c0024f81:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0024f84:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0024f87:	89 f8                	mov    eax,edi
c0024f89:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0024f8c:	83 c4 24             	add    esp,0x24
c0024f8f:	5b                   	pop    ebx
c0024f90:	5e                   	pop    esi
c0024f91:	5f                   	pop    edi
c0024f92:	5d                   	pop    ebp
c0024f93:	c3                   	ret    

c0024f94 <__divdf3>:
c0024f94:	55                   	push   ebp
c0024f95:	89 e5                	mov    ebp,esp
c0024f97:	57                   	push   edi
c0024f98:	56                   	push   esi
c0024f99:	53                   	push   ebx
c0024f9a:	83 ec 2c             	sub    esp,0x2c
c0024f9d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0024fa0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024fa3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024fa6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0024fa9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0024fac:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0024faf:	89 ce                	mov    esi,ecx
c0024fb1:	89 c8                	mov    eax,ecx
c0024fb3:	c1 f8 14             	sar    eax,0x14
c0024fb6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024fb9:	89 f8                	mov    eax,edi
c0024fbb:	89 fb                	mov    ebx,edi
c0024fbd:	c1 e3 0b             	shl    ebx,0xb
c0024fc0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0024fc3:	c1 e6 0b             	shl    esi,0xb
c0024fc6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0024fcc:	c1 e8 15             	shr    eax,0x15
c0024fcf:	09 c6                	or     esi,eax
c0024fd1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0024fd4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0024fd7:	89 c2                	mov    edx,eax
c0024fd9:	c1 fa 14             	sar    edx,0x14
c0024fdc:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0024fdf:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0024fe2:	89 de                	mov    esi,ebx
c0024fe4:	c1 e6 0b             	shl    esi,0xb
c0024fe7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0024fea:	c1 e0 0b             	shl    eax,0xb
c0024fed:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024ff2:	c1 eb 15             	shr    ebx,0x15
c0024ff5:	09 d8                	or     eax,ebx
c0024ff7:	89 c2                	mov    edx,eax
c0024ff9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024ffc:	25 ff 07 00 00       	and    eax,0x7ff
c0025001:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025004:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025007:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002500d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0025010:	29 d8                	sub    eax,ebx
c0025012:	05 ff 03 00 00       	add    eax,0x3ff
c0025017:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002501a:	46                   	inc    esi
c002501b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0025021:	0f 85 a5 00 00 00    	jne    c00250cc <__divdf3+0x138>
c0025027:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002502a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c002502d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0025031:	74 2a                	je     c002505d <__divdf3+0xc9>
c0025033:	85 f6                	test   esi,esi
c0025035:	0f 85 cc 02 00 00    	jne    c0025307 <__divdf3+0x373>
c002503b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002503e:	40                   	inc    eax
c002503f:	a9 fe 07 00 00       	test   eax,0x7fe
c0025044:	75 26                	jne    c002506c <__divdf3+0xd8>
c0025046:	85 db                	test   ebx,ebx
c0025048:	74 22                	je     c002506c <__divdf3+0xd8>
c002504a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002504d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0025050:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0025053:	09 d0                	or     eax,edx
c0025055:	0f 85 ac 02 00 00    	jne    c0025307 <__divdf3+0x373>
c002505b:	eb 63                	jmp    c00250c0 <__divdf3+0x12c>
c002505d:	85 f6                	test   esi,esi
c002505f:	75 22                	jne    c0025083 <__divdf3+0xef>
c0025061:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025064:	40                   	inc    eax
c0025065:	a9 fe 07 00 00       	test   eax,0x7fe
c002506a:	74 36                	je     c00250a2 <__divdf3+0x10e>
c002506c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0025070:	0f 89 91 02 00 00    	jns    c0025307 <__divdf3+0x373>
c0025076:	89 f8                	mov    eax,edi
c0025078:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002507e:	e9 80 02 00 00       	jmp    c0025303 <__divdf3+0x36f>
c0025083:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025086:	01 f6                	add    esi,esi
c0025088:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002508b:	c1 ef 1f             	shr    edi,0x1f
c002508e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0025091:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0025094:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025097:	09 f7                	or     edi,esi
c0025099:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c002509c:	78 2e                	js     c00250cc <__divdf3+0x138>
c002509e:	89 c8                	mov    eax,ecx
c00250a0:	eb e1                	jmp    c0025083 <__divdf3+0xef>
c00250a2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00250a5:	09 d0                	or     eax,edx
c00250a7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00250ab:	74 0f                	je     c00250bc <__divdf3+0x128>
c00250ad:	85 c0                	test   eax,eax
c00250af:	74 bb                	je     c002506c <__divdf3+0xd8>
c00250b1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00250b4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00250b7:	e9 4b 02 00 00       	jmp    c0025307 <__divdf3+0x373>
c00250bc:	85 c0                	test   eax,eax
c00250be:	75 ac                	jne    c002506c <__divdf3+0xd8>
c00250c0:	31 ff                	xor    edi,edi
c00250c2:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00250c7:	e9 3b 02 00 00       	jmp    c0025307 <__divdf3+0x373>
c00250cc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00250cf:	8d 4f 01             	lea    ecx,[edi+0x1]
c00250d2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00250d8:	75 6b                	jne    c0025145 <__divdf3+0x1b1>
c00250da:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00250dd:	09 d6                	or     esi,edx
c00250df:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00250e3:	74 28                	je     c002510d <__divdf3+0x179>
c00250e5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00250e8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00250eb:	85 f6                	test   esi,esi
c00250ed:	0f 85 14 02 00 00    	jne    c0025307 <__divdf3+0x373>
c00250f3:	31 ff                	xor    edi,edi
c00250f5:	31 c9                	xor    ecx,ecx
c00250f7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00250fa:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00250fd:	0f 89 04 02 00 00    	jns    c0025307 <__divdf3+0x373>
c0025103:	b9 00 00 00 80       	mov    ecx,0x80000000
c0025108:	e9 fa 01 00 00       	jmp    c0025307 <__divdf3+0x373>
c002510d:	85 f6                	test   esi,esi
c002510f:	75 1b                	jne    c002512c <__divdf3+0x198>
c0025111:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0025114:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0025117:	25 00 00 00 80       	and    eax,0x80000000
c002511c:	31 c9                	xor    ecx,ecx
c002511e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0025123:	89 cf                	mov    edi,ecx
c0025125:	89 c1                	mov    ecx,eax
c0025127:	e9 db 01 00 00       	jmp    c0025307 <__divdf3+0x373>
c002512c:	01 d2                	add    edx,edx
c002512e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0025131:	c1 eb 1f             	shr    ebx,0x1f
c0025134:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025137:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002513a:	8d 48 01             	lea    ecx,[eax+0x1]
c002513d:	09 da                	or     edx,ebx
c002513f:	78 04                	js     c0025145 <__divdf3+0x1b1>
c0025141:	89 c8                	mov    eax,ecx
c0025143:	eb e7                	jmp    c002512c <__divdf3+0x198>
c0025145:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025148:	81 ce 00 00 00 80    	or     esi,0x80000000
c002514e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025154:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0025157:	39 d6                	cmp    esi,edx
c0025159:	77 0d                	ja     c0025168 <__divdf3+0x1d4>
c002515b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002515e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0025161:	72 1b                	jb     c002517e <__divdf3+0x1ea>
c0025163:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0025166:	75 16                	jne    c002517e <__divdf3+0x1ea>
c0025168:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002516b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002516e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0025171:	83 de 00             	sbb    esi,0x0
c0025174:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0025177:	ba 01 00 00 00       	mov    edx,0x1
c002517c:	eb 02                	jmp    c0025180 <__divdf3+0x1ec>
c002517e:	31 d2                	xor    edx,edx
c0025180:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0025187:	31 ff                	xor    edi,edi
c0025189:	01 ff                	add    edi,edi
c002518b:	89 d1                	mov    ecx,edx
c002518d:	c1 e9 1f             	shr    ecx,0x1f
c0025190:	09 cf                	or     edi,ecx
c0025192:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0025195:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0025198:	89 da                	mov    edx,ebx
c002519a:	89 f3                	mov    ebx,esi
c002519c:	8d 34 36             	lea    esi,[esi+esi*1]
c002519f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00251a2:	c1 e9 1f             	shr    ecx,0x1f
c00251a5:	09 ce                	or     esi,ecx
c00251a7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00251aa:	01 c9                	add    ecx,ecx
c00251ac:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00251af:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00251b2:	85 db                	test   ebx,ebx
c00251b4:	78 29                	js     c00251df <__divdf3+0x24b>
c00251b6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00251b9:	72 07                	jb     c00251c2 <__divdf3+0x22e>
c00251bb:	75 3c                	jne    c00251f9 <__divdf3+0x265>
c00251bd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00251c0:	77 37                	ja     c00251f9 <__divdf3+0x265>
c00251c2:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00251c5:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00251c8:	31 d2                	xor    edx,edx
c00251ca:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00251cd:	0f 97 c2             	seta   dl
c00251d0:	29 d6                	sub    esi,edx
c00251d2:	89 d9                	mov    ecx,ebx
c00251d4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00251d7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00251da:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00251dd:	eb 17                	jmp    c00251f6 <__divdf3+0x262>
c00251df:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00251e2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00251e5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00251e8:	0f 97 c1             	seta   cl
c00251eb:	0f b6 c9             	movzx  ecx,cl
c00251ee:	29 ce                	sub    esi,ecx
c00251f0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00251f3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00251f6:	83 ca 01             	or     edx,0x1
c00251f9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00251fc:	75 8b                	jne    c0025189 <__divdf3+0x1f5>
c00251fe:	c1 e7 09             	shl    edi,0x9
c0025201:	89 d1                	mov    ecx,edx
c0025203:	c1 e9 17             	shr    ecx,0x17
c0025206:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0025209:	09 f3                	or     ebx,esi
c002520b:	0f 95 c3             	setne  bl
c002520e:	0f b6 db             	movzx  ebx,bl
c0025211:	c1 e2 09             	shl    edx,0x9
c0025214:	09 d3                	or     ebx,edx
c0025216:	89 ca                	mov    edx,ecx
c0025218:	09 fa                	or     edx,edi
c002521a:	78 0c                	js     c0025228 <__divdf3+0x294>
c002521c:	01 d2                	add    edx,edx
c002521e:	89 d9                	mov    ecx,ebx
c0025220:	c1 e9 1f             	shr    ecx,0x1f
c0025223:	09 ca                	or     edx,ecx
c0025225:	01 db                	add    ebx,ebx
c0025227:	48                   	dec    eax
c0025228:	3d fe 07 00 00       	cmp    eax,0x7fe
c002522d:	0f 8f 83 00 00 00    	jg     c00252b6 <__divdf3+0x322>
c0025233:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025239:	85 c0                	test   eax,eax
c002523b:	0f 8f 82 00 00 00    	jg     c00252c3 <__divdf3+0x32f>
c0025241:	83 f8 cc             	cmp    eax,0xffffffcc
c0025244:	7c 77                	jl     c00252bd <__divdf3+0x329>
c0025246:	be 01 00 00 00       	mov    esi,0x1
c002524b:	29 c6                	sub    esi,eax
c002524d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025253:	83 fe 1f             	cmp    esi,0x1f
c0025256:	7e 2f                	jle    c0025287 <__divdf3+0x2f3>
c0025258:	83 fe 20             	cmp    esi,0x20
c002525b:	75 0a                	jne    c0025267 <__divdf3+0x2d3>
c002525d:	85 db                	test   ebx,ebx
c002525f:	0f 95 c3             	setne  bl
c0025262:	0f b6 db             	movzx  ebx,bl
c0025265:	eb 1a                	jmp    c0025281 <__divdf3+0x2ed>
c0025267:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002526a:	89 d7                	mov    edi,edx
c002526c:	d3 e7                	shl    edi,cl
c002526e:	89 f9                	mov    ecx,edi
c0025270:	09 d9                	or     ecx,ebx
c0025272:	0f 95 c3             	setne  bl
c0025275:	0f b6 db             	movzx  ebx,bl
c0025278:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002527d:	29 c1                	sub    ecx,eax
c002527f:	d3 ea                	shr    edx,cl
c0025281:	09 d3                	or     ebx,edx
c0025283:	31 c0                	xor    eax,eax
c0025285:	eb 3a                	jmp    c00252c1 <__divdf3+0x32d>
c0025287:	83 c0 1f             	add    eax,0x1f
c002528a:	89 d7                	mov    edi,edx
c002528c:	88 c1                	mov    cl,al
c002528e:	d3 e7                	shl    edi,cl
c0025290:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0025293:	89 df                	mov    edi,ebx
c0025295:	89 f1                	mov    ecx,esi
c0025297:	d3 ef                	shr    edi,cl
c0025299:	89 f9                	mov    ecx,edi
c002529b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002529e:	09 cf                	or     edi,ecx
c00252a0:	88 c1                	mov    cl,al
c00252a2:	d3 e3                	shl    ebx,cl
c00252a4:	85 db                	test   ebx,ebx
c00252a6:	0f 95 c3             	setne  bl
c00252a9:	0f b6 db             	movzx  ebx,bl
c00252ac:	09 fb                	or     ebx,edi
c00252ae:	89 f1                	mov    ecx,esi
c00252b0:	d3 ea                	shr    edx,cl
c00252b2:	31 c0                	xor    eax,eax
c00252b4:	eb 0d                	jmp    c00252c3 <__divdf3+0x32f>
c00252b6:	b8 ff 07 00 00       	mov    eax,0x7ff
c00252bb:	eb 02                	jmp    c00252bf <__divdf3+0x32b>
c00252bd:	31 c0                	xor    eax,eax
c00252bf:	31 db                	xor    ebx,ebx
c00252c1:	31 d2                	xor    edx,edx
c00252c3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00252c6:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00252c9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00252cf:	09 c8                	or     eax,ecx
c00252d1:	c1 e0 14             	shl    eax,0x14
c00252d4:	89 d1                	mov    ecx,edx
c00252d6:	c1 e9 0b             	shr    ecx,0xb
c00252d9:	09 c8                	or     eax,ecx
c00252db:	89 c6                	mov    esi,eax
c00252dd:	89 d9                	mov    ecx,ebx
c00252df:	c1 e9 0b             	shr    ecx,0xb
c00252e2:	c1 e2 15             	shl    edx,0x15
c00252e5:	09 ca                	or     edx,ecx
c00252e7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00252ed:	0f 95 c0             	setne  al
c00252f0:	09 c1                	or     ecx,eax
c00252f2:	83 e1 01             	and    ecx,0x1
c00252f5:	c1 eb 0a             	shr    ebx,0xa
c00252f8:	21 cb                	and    ebx,ecx
c00252fa:	01 d3                	add    ebx,edx
c00252fc:	89 d8                	mov    eax,ebx
c00252fe:	83 d6 00             	adc    esi,0x0
c0025301:	89 f2                	mov    edx,esi
c0025303:	89 c7                	mov    edi,eax
c0025305:	89 d1                	mov    ecx,edx
c0025307:	89 f8                	mov    eax,edi
c0025309:	89 ca                	mov    edx,ecx
c002530b:	83 c4 2c             	add    esp,0x2c
c002530e:	5b                   	pop    ebx
c002530f:	5e                   	pop    esi
c0025310:	5f                   	pop    edi
c0025311:	5d                   	pop    ebp
c0025312:	c3                   	ret    

c0025313 <__floatsidf>:
c0025313:	55                   	push   ebp
c0025314:	89 e5                	mov    ebp,esp
c0025316:	56                   	push   esi
c0025317:	53                   	push   ebx
c0025318:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002531b:	85 db                	test   ebx,ebx
c002531d:	7e 15                	jle    c0025334 <__floatsidf+0x21>
c002531f:	0f bd cb             	bsr    ecx,ebx
c0025322:	83 f1 1f             	xor    ecx,0x1f
c0025325:	d3 e3                	shl    ebx,cl
c0025327:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c002532d:	b8 1e 04 00 00       	mov    eax,0x41e
c0025332:	eb 21                	jmp    c0025355 <__floatsidf+0x42>
c0025334:	b8 00 00 00 00       	mov    eax,0x0
c0025339:	ba 00 00 00 00       	mov    edx,0x0
c002533e:	74 2a                	je     c002536a <__floatsidf+0x57>
c0025340:	f7 db                	neg    ebx
c0025342:	0f bd cb             	bsr    ecx,ebx
c0025345:	83 f1 1f             	xor    ecx,0x1f
c0025348:	d3 e3                	shl    ebx,cl
c002534a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0025350:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0025355:	29 c8                	sub    eax,ecx
c0025357:	c1 e0 14             	shl    eax,0x14
c002535a:	89 c1                	mov    ecx,eax
c002535c:	89 de                	mov    esi,ebx
c002535e:	c1 ee 0b             	shr    esi,0xb
c0025361:	09 f1                	or     ecx,esi
c0025363:	89 ca                	mov    edx,ecx
c0025365:	c1 e3 15             	shl    ebx,0x15
c0025368:	89 d8                	mov    eax,ebx
c002536a:	5b                   	pop    ebx
c002536b:	5e                   	pop    esi
c002536c:	5d                   	pop    ebp
c002536d:	c3                   	ret    

c002536e <__floatunsidf>:
c002536e:	55                   	push   ebp
c002536f:	89 e5                	mov    ebp,esp
c0025371:	56                   	push   esi
c0025372:	53                   	push   ebx
c0025373:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025376:	85 db                	test   ebx,ebx
c0025378:	74 2a                	je     c00253a4 <__floatunsidf+0x36>
c002537a:	0f bd cb             	bsr    ecx,ebx
c002537d:	83 f1 1f             	xor    ecx,0x1f
c0025380:	d3 e3                	shl    ebx,cl
c0025382:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0025388:	b8 1e 04 00 00       	mov    eax,0x41e
c002538d:	29 c8                	sub    eax,ecx
c002538f:	c1 e0 14             	shl    eax,0x14
c0025392:	89 c1                	mov    ecx,eax
c0025394:	89 de                	mov    esi,ebx
c0025396:	c1 ee 0b             	shr    esi,0xb
c0025399:	09 f1                	or     ecx,esi
c002539b:	89 ca                	mov    edx,ecx
c002539d:	c1 e3 15             	shl    ebx,0x15
c00253a0:	89 d8                	mov    eax,ebx
c00253a2:	eb 04                	jmp    c00253a8 <__floatunsidf+0x3a>
c00253a4:	31 c0                	xor    eax,eax
c00253a6:	31 d2                	xor    edx,edx
c00253a8:	5b                   	pop    ebx
c00253a9:	5e                   	pop    esi
c00253aa:	5d                   	pop    ebp
c00253ab:	c3                   	ret    

c00253ac <__fixdfsi>:
c00253ac:	55                   	push   ebp
c00253ad:	89 e5                	mov    ebp,esp
c00253af:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00253b2:	89 d1                	mov    ecx,edx
c00253b4:	c1 e1 0b             	shl    ecx,0xb
c00253b7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00253bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00253c0:	c1 e8 15             	shr    eax,0x15
c00253c3:	09 c1                	or     ecx,eax
c00253c5:	c1 fa 14             	sar    edx,0x14
c00253c8:	78 1f                	js     c00253e9 <__fixdfsi+0x3d>
c00253ca:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00253d0:	31 c0                	xor    eax,eax
c00253d2:	83 fa 1e             	cmp    edx,0x1e
c00253d5:	77 40                	ja     c0025417 <__fixdfsi+0x6b>
c00253d7:	89 c8                	mov    eax,ecx
c00253d9:	0d 00 00 00 80       	or     eax,0x80000000
c00253de:	b9 1f 00 00 00       	mov    ecx,0x1f
c00253e3:	29 d1                	sub    ecx,edx
c00253e5:	d3 e8                	shr    eax,cl
c00253e7:	eb 2e                	jmp    c0025417 <__fixdfsi+0x6b>
c00253e9:	31 c0                	xor    eax,eax
c00253eb:	81 c2 01 04 00 00    	add    edx,0x401
c00253f1:	78 24                	js     c0025417 <__fixdfsi+0x6b>
c00253f3:	83 fa 1e             	cmp    edx,0x1e
c00253f6:	7e 09                	jle    c0025401 <__fixdfsi+0x55>
c00253f8:	83 fa 1f             	cmp    edx,0x1f
c00253fb:	75 18                	jne    c0025415 <__fixdfsi+0x69>
c00253fd:	85 c9                	test   ecx,ecx
c00253ff:	75 14                	jne    c0025415 <__fixdfsi+0x69>
c0025401:	89 c8                	mov    eax,ecx
c0025403:	0d 00 00 00 80       	or     eax,0x80000000
c0025408:	b9 1f 00 00 00       	mov    ecx,0x1f
c002540d:	29 d1                	sub    ecx,edx
c002540f:	d3 e8                	shr    eax,cl
c0025411:	f7 d8                	neg    eax
c0025413:	eb 02                	jmp    c0025417 <__fixdfsi+0x6b>
c0025415:	31 c0                	xor    eax,eax
c0025417:	5d                   	pop    ebp
c0025418:	c3                   	ret    

c0025419 <__fixunsdfsi>:
c0025419:	55                   	push   ebp
c002541a:	89 e5                	mov    ebp,esp
c002541c:	53                   	push   ebx
c002541d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025420:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025423:	89 d3                	mov    ebx,edx
c0025425:	c1 fb 14             	sar    ebx,0x14
c0025428:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c002542e:	31 c0                	xor    eax,eax
c0025430:	83 fb 1f             	cmp    ebx,0x1f
c0025433:	77 1d                	ja     c0025452 <__fixunsdfsi+0x39>
c0025435:	89 d0                	mov    eax,edx
c0025437:	c1 e0 0b             	shl    eax,0xb
c002543a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002543f:	c1 e9 15             	shr    ecx,0x15
c0025442:	09 c8                	or     eax,ecx
c0025444:	0d 00 00 00 80       	or     eax,0x80000000
c0025449:	b9 1f 00 00 00       	mov    ecx,0x1f
c002544e:	29 d9                	sub    ecx,ebx
c0025450:	d3 e8                	shr    eax,cl
c0025452:	5b                   	pop    ebx
c0025453:	5d                   	pop    ebp
c0025454:	c3                   	ret    

c0025455 <__cmpdf2>:
c0025455:	55                   	push   ebp
c0025456:	89 e5                	mov    ebp,esp
c0025458:	57                   	push   edi
c0025459:	56                   	push   esi
c002545a:	53                   	push   ebx
c002545b:	83 ec 0c             	sub    esp,0xc
c002545e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0025461:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025464:	89 ca                	mov    edx,ecx
c0025466:	c1 ea 14             	shr    edx,0x14
c0025469:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002546f:	89 cb                	mov    ebx,ecx
c0025471:	c1 fb 1f             	sar    ebx,0x1f
c0025474:	31 da                	xor    edx,ebx
c0025476:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025479:	89 df                	mov    edi,ebx
c002547b:	c1 e7 0b             	shl    edi,0xb
c002547e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0025481:	c1 e1 0b             	shl    ecx,0xb
c0025484:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002548a:	c1 eb 15             	shr    ebx,0x15
c002548d:	09 d9                	or     ecx,ebx
c002548f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0025492:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0025495:	89 ce                	mov    esi,ecx
c0025497:	c1 ee 14             	shr    esi,0x14
c002549a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00254a0:	89 cb                	mov    ebx,ecx
c00254a2:	c1 fb 1f             	sar    ebx,0x1f
c00254a5:	31 de                	xor    esi,ebx
c00254a7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00254aa:	89 df                	mov    edi,ebx
c00254ac:	c1 e7 0b             	shl    edi,0xb
c00254af:	c1 e1 0b             	shl    ecx,0xb
c00254b2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00254b8:	c1 eb 15             	shr    ebx,0x15
c00254bb:	09 d9                	or     ecx,ebx
c00254bd:	89 d3                	mov    ebx,edx
c00254bf:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00254c5:	43                   	inc    ebx
c00254c6:	83 fb 01             	cmp    ebx,0x1
c00254c9:	77 08                	ja     c00254d3 <__cmpdf2+0x7e>
c00254cb:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00254ce:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00254d1:	75 68                	jne    c002553b <__cmpdf2+0xe6>
c00254d3:	89 f3                	mov    ebx,esi
c00254d5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00254db:	43                   	inc    ebx
c00254dc:	83 fb 01             	cmp    ebx,0x1
c00254df:	77 06                	ja     c00254e7 <__cmpdf2+0x92>
c00254e1:	89 fb                	mov    ebx,edi
c00254e3:	09 cb                	or     ebx,ecx
c00254e5:	75 54                	jne    c002553b <__cmpdf2+0xe6>
c00254e7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00254ea:	09 f8                	or     eax,edi
c00254ec:	09 c8                	or     eax,ecx
c00254ee:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00254f1:	75 12                	jne    c0025505 <__cmpdf2+0xb0>
c00254f3:	8d 42 01             	lea    eax,[edx+0x1]
c00254f6:	83 f8 01             	cmp    eax,0x1
c00254f9:	77 0a                	ja     c0025505 <__cmpdf2+0xb0>
c00254fb:	8d 5e 01             	lea    ebx,[esi+0x1]
c00254fe:	31 c0                	xor    eax,eax
c0025500:	83 fb 01             	cmp    ebx,0x1
c0025503:	76 36                	jbe    c002553b <__cmpdf2+0xe6>
c0025505:	b8 01 00 00 00       	mov    eax,0x1
c002550a:	39 f2                	cmp    edx,esi
c002550c:	7f 2d                	jg     c002553b <__cmpdf2+0xe6>
c002550e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025513:	7c 26                	jl     c002553b <__cmpdf2+0xe6>
c0025515:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0025518:	77 07                	ja     c0025521 <__cmpdf2+0xcc>
c002551a:	72 16                	jb     c0025532 <__cmpdf2+0xdd>
c002551c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002551f:	76 0a                	jbe    c002552b <__cmpdf2+0xd6>
c0025521:	89 d0                	mov    eax,edx
c0025523:	c1 f8 1f             	sar    eax,0x1f
c0025526:	83 c8 01             	or     eax,0x1
c0025529:	eb 10                	jmp    c002553b <__cmpdf2+0xe6>
c002552b:	b8 00 00 00 00       	mov    eax,0x0
c0025530:	73 09                	jae    c002553b <__cmpdf2+0xe6>
c0025532:	89 d0                	mov    eax,edx
c0025534:	c1 f8 1f             	sar    eax,0x1f
c0025537:	83 e0 02             	and    eax,0x2
c002553a:	48                   	dec    eax
c002553b:	83 c4 0c             	add    esp,0xc
c002553e:	5b                   	pop    ebx
c002553f:	5e                   	pop    esi
c0025540:	5f                   	pop    edi
c0025541:	5d                   	pop    ebp
c0025542:	c3                   	ret    

c0025543 <__eqdf2>:
c0025543:	55                   	push   ebp
c0025544:	89 e5                	mov    ebp,esp
c0025546:	50                   	push   eax
c0025547:	6a 01                	push   0x1
c0025549:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002554c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002554f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025552:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025555:	e8 fb fe ff ff       	call   c0025455 <__cmpdf2>
c002555a:	83 c4 18             	add    esp,0x18
c002555d:	c9                   	leave  
c002555e:	c3                   	ret    

c002555f <__nedf2>:
c002555f:	eb e2                	jmp    c0025543 <__eqdf2>

c0025561 <__gtdf2>:
c0025561:	55                   	push   ebp
c0025562:	89 e5                	mov    ebp,esp
c0025564:	50                   	push   eax
c0025565:	6a ff                	push   0xffffffff
c0025567:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002556a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002556d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025570:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025573:	e8 dd fe ff ff       	call   c0025455 <__cmpdf2>
c0025578:	83 c4 18             	add    esp,0x18
c002557b:	c9                   	leave  
c002557c:	c3                   	ret    

c002557d <__gedf2>:
c002557d:	eb e2                	jmp    c0025561 <__gtdf2>

c002557f <__ltdf2>:
c002557f:	eb c2                	jmp    c0025543 <__eqdf2>

c0025581 <__ledf2>:
c0025581:	eb c0                	jmp    c0025543 <__eqdf2>

c0025583 <__truncdfsf2>:
c0025583:	55                   	push   ebp
c0025584:	89 e5                	mov    ebp,esp
c0025586:	57                   	push   edi
c0025587:	56                   	push   esi
c0025588:	53                   	push   ebx
c0025589:	83 ec 0c             	sub    esp,0xc
c002558c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002558f:	89 d1                	mov    ecx,edx
c0025591:	c1 f9 14             	sar    ecx,0x14
c0025594:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025597:	89 df                	mov    edi,ebx
c0025599:	c1 e7 0b             	shl    edi,0xb
c002559c:	89 d0                	mov    eax,edx
c002559e:	c1 e0 0b             	shl    eax,0xb
c00255a1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00255a6:	c1 eb 15             	shr    ebx,0x15
c00255a9:	09 d8                	or     eax,ebx
c00255ab:	89 cb                	mov    ebx,ecx
c00255ad:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00255b3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00255b9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00255bf:	0f 86 9e 00 00 00    	jbe    c0025663 <__truncdfsf2+0xe0>
c00255c5:	85 db                	test   ebx,ebx
c00255c7:	75 0a                	jne    c00255d3 <__truncdfsf2+0x50>
c00255c9:	c1 fa 17             	sar    edx,0x17
c00255cc:	30 d2                	xor    dl,dl
c00255ce:	e9 84 00 00 00       	jmp    c0025657 <__truncdfsf2+0xd4>
c00255d3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00255d9:	83 fe 83             	cmp    esi,0xffffff83
c00255dc:	7d 4b                	jge    c0025629 <__truncdfsf2+0xa6>
c00255de:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00255e3:	29 f1                	sub    ecx,esi
c00255e5:	83 f9 1f             	cmp    ecx,0x1f
c00255e8:	7f 6b                	jg     c0025655 <__truncdfsf2+0xd2>
c00255ea:	0d 00 00 00 80       	or     eax,0x80000000
c00255ef:	89 c3                	mov    ebx,eax
c00255f1:	d3 eb                	shr    ebx,cl
c00255f3:	be 01 00 00 00       	mov    esi,0x1
c00255f8:	d3 e6                	shl    esi,cl
c00255fa:	4e                   	dec    esi
c00255fb:	21 f0                	and    eax,esi
c00255fd:	09 f8                	or     eax,edi
c00255ff:	0f 95 c0             	setne  al
c0025602:	0f b6 c0             	movzx  eax,al
c0025605:	09 c3                	or     ebx,eax
c0025607:	89 d9                	mov    ecx,ebx
c0025609:	c1 e9 08             	shr    ecx,0x8
c002560c:	f6 c3 7f             	test   bl,0x7f
c002560f:	0f 95 c0             	setne  al
c0025612:	09 c8                	or     eax,ecx
c0025614:	83 e0 01             	and    eax,0x1
c0025617:	c1 eb 07             	shr    ebx,0x7
c002561a:	21 c3                	and    ebx,eax
c002561c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0025622:	09 d1                	or     ecx,edx
c0025624:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0025627:	eb 76                	jmp    c002569f <__truncdfsf2+0x11c>
c0025629:	83 c6 80             	add    esi,0xffffff80
c002562c:	7e 1d                	jle    c002564b <__truncdfsf2+0xc8>
c002562e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0025634:	75 0b                	jne    c0025641 <__truncdfsf2+0xbe>
c0025636:	09 f8                	or     eax,edi
c0025638:	74 09                	je     c0025643 <__truncdfsf2+0xc0>
c002563a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002563f:	eb 02                	jmp    c0025643 <__truncdfsf2+0xc0>
c0025641:	31 c0                	xor    eax,eax
c0025643:	c1 fa 17             	sar    edx,0x17
c0025646:	80 ca ff             	or     dl,0xff
c0025649:	eb 0e                	jmp    c0025659 <__truncdfsf2+0xd6>
c002564b:	c1 fa 1f             	sar    edx,0x1f
c002564e:	c1 e2 08             	shl    edx,0x8
c0025651:	09 ca                	or     edx,ecx
c0025653:	eb 04                	jmp    c0025659 <__truncdfsf2+0xd6>
c0025655:	31 d2                	xor    edx,edx
c0025657:	31 c0                	xor    eax,eax
c0025659:	c1 e2 17             	shl    edx,0x17
c002565c:	c1 e8 08             	shr    eax,0x8
c002565f:	09 d0                	or     eax,edx
c0025661:	eb 3c                	jmp    c002569f <__truncdfsf2+0x11c>
c0025663:	81 e9 80 03 00 00    	sub    ecx,0x380
c0025669:	89 ca                	mov    edx,ecx
c002566b:	c1 fa 0b             	sar    edx,0xb
c002566e:	c1 e2 08             	shl    edx,0x8
c0025671:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0025674:	31 db                	xor    ebx,ebx
c0025676:	85 ff                	test   edi,edi
c0025678:	0f 95 c3             	setne  bl
c002567b:	09 d8                	or     eax,ebx
c002567d:	89 c3                	mov    ebx,eax
c002567f:	c1 eb 08             	shr    ebx,0x8
c0025682:	a8 7f                	test   al,0x7f
c0025684:	0f 95 c2             	setne  dl
c0025687:	89 d6                	mov    esi,edx
c0025689:	09 de                	or     esi,ebx
c002568b:	83 e6 01             	and    esi,0x1
c002568e:	c1 e8 07             	shr    eax,0x7
c0025691:	21 f0                	and    eax,esi
c0025693:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025696:	09 ca                	or     edx,ecx
c0025698:	c1 e2 17             	shl    edx,0x17
c002569b:	09 da                	or     edx,ebx
c002569d:	01 d0                	add    eax,edx
c002569f:	83 c4 0c             	add    esp,0xc
c00256a2:	5b                   	pop    ebx
c00256a3:	5e                   	pop    esi
c00256a4:	5f                   	pop    edi
c00256a5:	5d                   	pop    ebp
c00256a6:	c3                   	ret    

c00256a7 <__extendsfdf2>:
c00256a7:	55                   	push   ebp
c00256a8:	89 e5                	mov    ebp,esp
c00256aa:	57                   	push   edi
c00256ab:	56                   	push   esi
c00256ac:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00256af:	89 d1                	mov    ecx,edx
c00256b1:	c1 f9 17             	sar    ecx,0x17
c00256b4:	c1 e2 08             	shl    edx,0x8
c00256b7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00256bd:	89 c8                	mov    eax,ecx
c00256bf:	80 e4 f8             	and    ah,0xf8
c00256c2:	8d 71 01             	lea    esi,[ecx+0x1]
c00256c5:	81 e6 fe 00 00 00    	and    esi,0xfe
c00256cb:	75 27                	jne    c00256f4 <__extendsfdf2+0x4d>
c00256cd:	81 e1 ff 00 00 00    	and    ecx,0xff
c00256d3:	75 18                	jne    c00256ed <__extendsfdf2+0x46>
c00256d5:	85 d2                	test   edx,edx
c00256d7:	74 20                	je     c00256f9 <__extendsfdf2+0x52>
c00256d9:	41                   	inc    ecx
c00256da:	01 d2                	add    edx,edx
c00256dc:	79 fb                	jns    c00256d9 <__extendsfdf2+0x32>
c00256de:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00256e4:	29 c8                	sub    eax,ecx
c00256e6:	05 81 03 00 00       	add    eax,0x381
c00256eb:	eb 0c                	jmp    c00256f9 <__extendsfdf2+0x52>
c00256ed:	05 00 07 00 00       	add    eax,0x700
c00256f2:	eb 05                	jmp    c00256f9 <__extendsfdf2+0x52>
c00256f4:	05 80 03 00 00       	add    eax,0x380
c00256f9:	c1 e0 14             	shl    eax,0x14
c00256fc:	89 c1                	mov    ecx,eax
c00256fe:	89 d0                	mov    eax,edx
c0025700:	c1 e8 0b             	shr    eax,0xb
c0025703:	09 c1                	or     ecx,eax
c0025705:	c1 e2 15             	shl    edx,0x15
c0025708:	89 d0                	mov    eax,edx
c002570a:	89 ca                	mov    edx,ecx
c002570c:	5e                   	pop    esi
c002570d:	5f                   	pop    edi
c002570e:	5d                   	pop    ebp
c002570f:	c3                   	ret    

c0025710 <fabs>:
c0025710:	83 ec 0c             	sub    esp,0xc
c0025713:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025717:	89 04 24             	mov    DWORD PTR [esp],eax
c002571a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002571e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025723:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0025727:	dd 04 24             	fld    QWORD PTR [esp]
c002572a:	83 c4 0c             	add    esp,0xc
c002572d:	c3                   	ret    
c002572e:	66 90                	xchg   ax,ax

c0025730 <lrint>:
c0025730:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0025734:	83 ec 04             	sub    esp,0x4
c0025737:	db 1c 24             	fistp  DWORD PTR [esp]
c002573a:	58                   	pop    eax
c002573b:	c3                   	ret    

c002573c <lrintf>:
c002573c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0025740:	83 ec 04             	sub    esp,0x4
c0025743:	db 1c 24             	fistp  DWORD PTR [esp]
c0025746:	58                   	pop    eax
c0025747:	c3                   	ret    

Disassembly of section .init:

c0025748 <_init>:
c0025748:	55                   	push   ebp
c0025749:	89 e5                	mov    ebp,esp
c002574b:	e8 c8 a9 fd ff       	call   c0000118 <frame_dummy>
c0025750:	e8 63 e0 ff ff       	call   c00237b8 <__do_global_ctors_aux>
c0025755:	5d                   	pop    ebp
c0025756:	c3                   	ret    

Disassembly of section .fini:

c0025757 <_fini>:
c0025757:	55                   	push   ebp
c0025758:	89 e5                	mov    ebp,esp
c002575a:	e8 49 a9 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002575f:	5d                   	pop    ebp
c0025760:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0025762 <Computer::~Computer()>:
c0025762:	83 ec 0c             	sub    esp,0xc
c0025765:	ba 50 71 02 c0       	mov    edx,0xc0027150
c002576a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002576e:	89 10                	mov    DWORD PTR [eax],edx
c0025770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025774:	83 ec 0c             	sub    esp,0xc
c0025777:	50                   	push   eax
c0025778:	e8 79 e1 fe ff       	call   c00138f6 <Device::~Device()>
c002577d:	83 c4 10             	add    esp,0x10
c0025780:	90                   	nop
c0025781:	83 c4 0c             	add    esp,0xc
c0025784:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0025786 <Computer::~Computer()>:
c0025786:	83 ec 0c             	sub    esp,0xc
c0025789:	83 ec 0c             	sub    esp,0xc
c002578c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025790:	e8 cd ff ff ff       	call   c0025762 <Computer::~Computer()>
c0025795:	83 c4 10             	add    esp,0x10
c0025798:	83 ec 08             	sub    esp,0x8
c002579b:	68 ec 01 00 00       	push   0x1ec
c00257a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00257a4:	e8 ac cd fe ff       	call   c0012555 <operator delete(void*, unsigned long)>
c00257a9:	83 c4 10             	add    esp,0x10
c00257ac:	83 c4 0c             	add    esp,0xc
c00257af:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00257b0 <idleCommon()>:
c00257b0:	83 ec 0c             	sub    esp,0xc
c00257b3:	e8 4d 66 ff ff       	call   c001be05 <lockScheduler()>
c00257b8:	e8 83 69 ff ff       	call   c001c140 <schedule()>
c00257bd:	83 c4 0c             	add    esp,0xc
c00257c0:	e9 42 66 ff ff       	jmp    c001be07 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00257c6 <LinkedList<UnixFile>::~LinkedList()>:
c00257c6:	90                   	nop
c00257c7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00257c8 <LinkedList<UnixFile>::LinkedList()>:
c00257c8:	83 ec 0c             	sub    esp,0xc
c00257cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00257d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257d9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00257e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257e4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00257eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257ef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00257f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025804:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002580b:	83 ec 0c             	sub    esp,0xc
c002580e:	68 c6 73 02 c0       	push   0xc00273c6
c0025813:	e8 1d ce fe ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0025818:	83 c4 10             	add    esp,0x10
c002581b:	90                   	nop
c002581c:	83 c4 0c             	add    esp,0xc
c002581f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0025820 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0025820:	83 ec 0c             	sub    esp,0xc
c0025823:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0025828:	75 10                	jne    c002583a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002582a:	83 ec 0c             	sub    esp,0xc
c002582d:	68 e0 73 02 c0       	push   0xc00273e0
c0025832:	e8 c2 35 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c0025837:	83 c4 10             	add    esp,0x10
c002583a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002583e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025840:	85 c0                	test   eax,eax
c0025842:	74 34                	je     c0025878 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0025844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025848:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002584b:	85 c0                	test   eax,eax
c002584d:	74 29                	je     c0025878 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002584f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025853:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025856:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002585a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002585d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025861:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025865:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002586c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002586f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025876:	eb 65                	jmp    c00258dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002587c:	8b 00                	mov    eax,DWORD PTR [eax]
c002587e:	85 c0                	test   eax,eax
c0025880:	75 4b                	jne    c00258cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0025882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025886:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025889:	85 c0                	test   eax,eax
c002588b:	75 40                	jne    c00258cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002588d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025891:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025895:	89 10                	mov    DWORD PTR [eax],edx
c0025897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002589b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002589f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00258a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00258a9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00258b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00258b7:	85 c0                	test   eax,eax
c00258b9:	74 22                	je     c00258dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00258bb:	83 ec 0c             	sub    esp,0xc
c00258be:	68 02 74 02 c0       	push   0xc0027402
c00258c3:	e8 31 35 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c00258c8:	83 c4 10             	add    esp,0x10
c00258cb:	eb 10                	jmp    c00258dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00258cd:	83 ec 0c             	sub    esp,0xc
c00258d0:	68 0c 74 02 c0       	push   0xc002740c
c00258d5:	e8 1f 35 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c00258da:	83 c4 10             	add    esp,0x10
c00258dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258e1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00258e4:	8d 50 01             	lea    edx,[eax+0x1]
c00258e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258eb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00258ee:	90                   	nop
c00258ef:	83 c4 0c             	add    esp,0xc
c00258f2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00258f4 <LinkedList<UnixFile>::getFirstElement()>:
c00258f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00258f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00258fa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00258fc <LinkedList<UnixFile>::removeFirst()>:
c00258fc:	83 ec 0c             	sub    esp,0xc
c00258ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025903:	8b 00                	mov    eax,DWORD PTR [eax]
c0025905:	85 c0                	test   eax,eax
c0025907:	75 12                	jne    c002591b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0025909:	83 ec 0c             	sub    esp,0xc
c002590c:	68 18 74 02 c0       	push   0xc0027418
c0025911:	e8 e3 34 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c0025916:	83 c4 10             	add    esp,0x10
c0025919:	eb 7e                	jmp    c0025999 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002591b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002591f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025922:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025925:	85 c0                	test   eax,eax
c0025927:	74 10                	je     c0025939 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0025929:	83 ec 0c             	sub    esp,0xc
c002592c:	68 63 74 02 c0       	push   0xc0027463
c0025931:	e8 c3 34 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c0025936:	83 c4 10             	add    esp,0x10
c0025939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002593d:	8b 00                	mov    eax,DWORD PTR [eax]
c002593f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025942:	85 c0                	test   eax,eax
c0025944:	75 33                	jne    c0025979 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0025946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002594a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025954:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002595b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002595f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025962:	83 f8 01             	cmp    eax,0x1
c0025965:	74 21                	je     c0025988 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0025967:	83 ec 0c             	sub    esp,0xc
c002596a:	68 3c 74 02 c0       	push   0xc002743c
c002596f:	e8 85 34 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c0025974:	83 c4 10             	add    esp,0x10
c0025977:	eb 0f                	jmp    c0025988 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0025979:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002597d:	8b 00                	mov    eax,DWORD PTR [eax]
c002597f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0025982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025986:	89 10                	mov    DWORD PTR [eax],edx
c0025988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002598c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002598f:	8d 50 ff             	lea    edx,[eax-0x1]
c0025992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025996:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025999:	83 c4 0c             	add    esp,0xc
c002599c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002599e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002599e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00259a2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00259a5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00259a6 <DriverlessDevice::~DriverlessDevice()>:
c00259a6:	ba 24 7b 02 c0       	mov    edx,0xc0027b24
c00259ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00259af:	89 10                	mov    DWORD PTR [eax],edx
c00259b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00259b5:	50                   	push   eax
c00259b6:	e8 3b df fe ff       	call   c00138f6 <Device::~Device()>
c00259bb:	83 c4 04             	add    esp,0x4
c00259be:	90                   	nop
c00259bf:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00259c0 <DriverlessDevice::~DriverlessDevice()>:
c00259c0:	83 ec 0c             	sub    esp,0xc
c00259c3:	83 ec 0c             	sub    esp,0xc
c00259c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00259ca:	e8 d7 ff ff ff       	call   c00259a6 <DriverlessDevice::~DriverlessDevice()>
c00259cf:	83 c4 10             	add    esp,0x10
c00259d2:	83 ec 08             	sub    esp,0x8
c00259d5:	68 58 01 00 00       	push   0x158
c00259da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00259de:	e8 72 cb fe ff       	call   c0012555 <operator delete(void*, unsigned long)>
c00259e3:	83 c4 10             	add    esp,0x10
c00259e6:	83 c4 0c             	add    esp,0xc
c00259e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00259ea <LinkedList<Device>::addElement(Device*)>:
c00259ea:	83 ec 0c             	sub    esp,0xc
c00259ed:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00259f2:	75 10                	jne    c0025a04 <LinkedList<Device>::addElement(Device*)+0x1a>
c00259f4:	83 ec 0c             	sub    esp,0xc
c00259f7:	68 e0 73 02 c0       	push   0xc00273e0
c00259fc:	e8 f8 33 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c0025a01:	83 c4 10             	add    esp,0x10
c0025a04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a08:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a0a:	85 c0                	test   eax,eax
c0025a0c:	74 3a                	je     c0025a48 <LinkedList<Device>::addElement(Device*)+0x5e>
c0025a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a12:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025a15:	85 c0                	test   eax,eax
c0025a17:	74 2f                	je     c0025a48 <LinkedList<Device>::addElement(Device*)+0x5e>
c0025a19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a1d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025a20:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025a24:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0025a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a2e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025a32:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025a35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a39:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025a3c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0025a46:	eb 68                	jmp    c0025ab0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0025a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a4e:	85 c0                	test   eax,eax
c0025a50:	75 4e                	jne    c0025aa0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0025a52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025a59:	85 c0                	test   eax,eax
c0025a5b:	75 43                	jne    c0025aa0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0025a5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a61:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025a65:	89 10                	mov    DWORD PTR [eax],edx
c0025a67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a6b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025a6f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025a72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025a79:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0025a83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a87:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025a8a:	85 c0                	test   eax,eax
c0025a8c:	74 22                	je     c0025ab0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0025a8e:	83 ec 0c             	sub    esp,0xc
c0025a91:	68 02 74 02 c0       	push   0xc0027402
c0025a96:	e8 5e 33 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c0025a9b:	83 c4 10             	add    esp,0x10
c0025a9e:	eb 10                	jmp    c0025ab0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0025aa0:	83 ec 0c             	sub    esp,0xc
c0025aa3:	68 0c 74 02 c0       	push   0xc002740c
c0025aa8:	e8 4c 33 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c0025aad:	83 c4 10             	add    esp,0x10
c0025ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ab4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025ab7:	8d 50 01             	lea    edx,[eax+0x1]
c0025aba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025abe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025ac1:	90                   	nop
c0025ac2:	83 c4 0c             	add    esp,0xc
c0025ac5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0025ac6 <LinkedList<Device>::LinkedList()>:
c0025ac6:	83 ec 0c             	sub    esp,0xc
c0025ac9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025acd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025ad3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ad7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025ade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ae2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025ae9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025af3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025af7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b02:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025b09:	83 ec 0c             	sub    esp,0xc
c0025b0c:	68 c6 73 02 c0       	push   0xc00273c6
c0025b11:	e8 1f cb fe ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0025b16:	83 c4 10             	add    esp,0x10
c0025b19:	90                   	nop
c0025b1a:	83 c4 0c             	add    esp,0xc
c0025b1d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0025b1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0025b1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025b22:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b24:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0025b26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0025b26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025b2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b2c:	85 c0                	test   eax,eax
c0025b2e:	75 0e                	jne    c0025b3e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0025b30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025b34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025b37:	85 c0                	test   eax,eax
c0025b39:	75 03                	jne    c0025b3e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0025b3b:	b0 01                	mov    al,0x1
c0025b3d:	c3                   	ret    
c0025b3e:	b0 00                	mov    al,0x0
c0025b40:	90                   	nop
c0025b41:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0025b42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0025b42:	83 ec 0c             	sub    esp,0xc
c0025b45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b49:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b4b:	85 c0                	test   eax,eax
c0025b4d:	75 15                	jne    c0025b64 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0025b4f:	83 ec 0c             	sub    esp,0xc
c0025b52:	68 18 74 02 c0       	push   0xc0027418
c0025b57:	e8 9d 32 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c0025b5c:	83 c4 10             	add    esp,0x10
c0025b5f:	e9 88 00 00 00       	jmp    c0025bec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0025b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025b6b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0025b6e:	85 c0                	test   eax,eax
c0025b70:	0f 95 c0             	setne  al
c0025b73:	84 c0                	test   al,al
c0025b75:	74 10                	je     c0025b87 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0025b77:	83 ec 0c             	sub    esp,0xc
c0025b7a:	68 63 74 02 c0       	push   0xc0027463
c0025b7f:	e8 75 32 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c0025b84:	83 c4 10             	add    esp,0x10
c0025b87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b8d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0025b90:	85 c0                	test   eax,eax
c0025b92:	0f 94 c0             	sete   al
c0025b95:	84 c0                	test   al,al
c0025b97:	74 33                	je     c0025bcc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0025b99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b9d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025ba3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ba7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025bae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bb2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025bb5:	83 f8 01             	cmp    eax,0x1
c0025bb8:	74 21                	je     c0025bdb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0025bba:	83 ec 0c             	sub    esp,0xc
c0025bbd:	68 3c 74 02 c0       	push   0xc002743c
c0025bc2:	e8 32 32 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c0025bc7:	83 c4 10             	add    esp,0x10
c0025bca:	eb 0f                	jmp    c0025bdb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0025bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0025bd2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0025bd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bd9:	89 10                	mov    DWORD PTR [eax],edx
c0025bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bdf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025be2:	8d 50 ff             	lea    edx,[eax-0x1]
c0025be5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025be9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025bec:	83 c4 0c             	add    esp,0xc
c0025bef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0025bf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0025bf0:	83 ec 0c             	sub    esp,0xc
c0025bf3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0025bf8:	75 10                	jne    c0025c0a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0025bfa:	83 ec 0c             	sub    esp,0xc
c0025bfd:	68 e0 73 02 c0       	push   0xc00273e0
c0025c02:	e8 f2 31 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c0025c07:	83 c4 10             	add    esp,0x10
c0025c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025c10:	85 c0                	test   eax,eax
c0025c12:	74 34                	je     c0025c48 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0025c14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025c1b:	85 c0                	test   eax,eax
c0025c1d:	74 29                	je     c0025c48 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0025c1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025c26:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025c2a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0025c2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c31:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025c35:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025c3f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0025c46:	eb 65                	jmp    c0025cad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0025c48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0025c4e:	85 c0                	test   eax,eax
c0025c50:	75 4b                	jne    c0025c9d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0025c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025c59:	85 c0                	test   eax,eax
c0025c5b:	75 40                	jne    c0025c9d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0025c5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c61:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025c65:	89 10                	mov    DWORD PTR [eax],edx
c0025c67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c6b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025c6f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025c79:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0025c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025c87:	85 c0                	test   eax,eax
c0025c89:	74 22                	je     c0025cad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0025c8b:	83 ec 0c             	sub    esp,0xc
c0025c8e:	68 02 74 02 c0       	push   0xc0027402
c0025c93:	e8 61 31 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c0025c98:	83 c4 10             	add    esp,0x10
c0025c9b:	eb 10                	jmp    c0025cad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0025c9d:	83 ec 0c             	sub    esp,0xc
c0025ca0:	68 0c 74 02 c0       	push   0xc002740c
c0025ca5:	e8 4f 31 ff ff       	call   c0018df9 <Krnl::panic(char const*)>
c0025caa:	83 c4 10             	add    esp,0x10
c0025cad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cb1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025cb4:	8d 50 01             	lea    edx,[eax+0x1]
c0025cb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cbb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025cbe:	90                   	nop
c0025cbf:	83 c4 0c             	add    esp,0xc
c0025cc2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0025cc4 <ACPI::~ACPI()>:
c0025cc4:	83 ec 0c             	sub    esp,0xc
c0025cc7:	ba f0 82 02 c0       	mov    edx,0xc00282f0
c0025ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cd0:	89 10                	mov    DWORD PTR [eax],edx
c0025cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cd6:	83 ec 0c             	sub    esp,0xc
c0025cd9:	50                   	push   eax
c0025cda:	e8 17 dc fe ff       	call   c00138f6 <Device::~Device()>
c0025cdf:	83 c4 10             	add    esp,0x10
c0025ce2:	90                   	nop
c0025ce3:	83 c4 0c             	add    esp,0xc
c0025ce6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0025ce8 <ACPI::~ACPI()>:
c0025ce8:	83 ec 0c             	sub    esp,0xc
c0025ceb:	83 ec 0c             	sub    esp,0xc
c0025cee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025cf2:	e8 cd ff ff ff       	call   c0025cc4 <ACPI::~ACPI()>
c0025cf7:	83 c4 10             	add    esp,0x10
c0025cfa:	83 ec 08             	sub    esp,0x8
c0025cfd:	68 68 22 00 00       	push   0x2268
c0025d02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025d06:	e8 4a c8 fe ff       	call   c0012555 <operator delete(void*, unsigned long)>
c0025d0b:	83 c4 10             	add    esp,0x10
c0025d0e:	83 c4 0c             	add    esp,0xc
c0025d11:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0025d12 <CPU::~CPU()>:
c0025d12:	83 ec 0c             	sub    esp,0xc
c0025d15:	ba e0 86 02 c0       	mov    edx,0xc00286e0
c0025d1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d1e:	89 10                	mov    DWORD PTR [eax],edx
c0025d20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d24:	83 ec 0c             	sub    esp,0xc
c0025d27:	50                   	push   eax
c0025d28:	e8 c9 db fe ff       	call   c00138f6 <Device::~Device()>
c0025d2d:	83 c4 10             	add    esp,0x10
c0025d30:	90                   	nop
c0025d31:	83 c4 0c             	add    esp,0xc
c0025d34:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0025d36 <CPU::~CPU()>:
c0025d36:	83 ec 0c             	sub    esp,0xc
c0025d39:	83 ec 0c             	sub    esp,0xc
c0025d3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025d40:	e8 cd ff ff ff       	call   c0025d12 <CPU::~CPU()>
c0025d45:	83 c4 10             	add    esp,0x10
c0025d48:	83 ec 08             	sub    esp,0x8
c0025d4b:	68 98 11 00 00       	push   0x1198
c0025d50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025d54:	e8 fc c7 fe ff       	call   c0012555 <operator delete(void*, unsigned long)>
c0025d59:	83 c4 10             	add    esp,0x10
c0025d5c:	83 c4 0c             	add    esp,0xc
c0025d5f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0025d60 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0025d60:	90                   	nop
c0025d61:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0025d62 <ThreadControlBlock::ThreadControlBlock()>:
c0025d62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025d66:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0025d6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025d71:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0025d78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025d7c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0025d83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025d87:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0025d8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025d92:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0025d96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025d9a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0025d9e:	90                   	nop
c0025d9f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0025da0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0025da0:	83 ec 0c             	sub    esp,0xc
c0025da3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025da7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025dad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025db1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025db8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dbc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025dc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dc7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025dcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dd1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025dd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ddc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025de3:	83 ec 0c             	sub    esp,0xc
c0025de6:	68 c6 73 02 c0       	push   0xc00273c6
c0025deb:	e8 45 c8 fe ff       	call   c0012635 <Dbg::kprintf(char const*, ...)>
c0025df0:	83 c4 10             	add    esp,0x10
c0025df3:	90                   	nop
c0025df4:	83 c4 0c             	add    esp,0xc
c0025df7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0025df8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0025df8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025dfc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0025dff:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0025e00 <Vm::_FPUState::_FPUState()>:
c0025e00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025e04:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0025e0b:	90                   	nop
c0025e0c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0025e0e <PCI::~PCI()>:
c0025e0e:	83 ec 0c             	sub    esp,0xc
c0025e11:	ba 4c 94 02 c0       	mov    edx,0xc002944c
c0025e16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e1a:	89 10                	mov    DWORD PTR [eax],edx
c0025e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e20:	83 ec 0c             	sub    esp,0xc
c0025e23:	50                   	push   eax
c0025e24:	e8 dd d4 fe ff       	call   c0013306 <Bus::~Bus()>
c0025e29:	83 c4 10             	add    esp,0x10
c0025e2c:	90                   	nop
c0025e2d:	83 c4 0c             	add    esp,0xc
c0025e30:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0025e32 <PCI::~PCI()>:
c0025e32:	83 ec 0c             	sub    esp,0xc
c0025e35:	83 ec 0c             	sub    esp,0xc
c0025e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025e3c:	e8 cd ff ff ff       	call   c0025e0e <PCI::~PCI()>
c0025e41:	83 c4 10             	add    esp,0x10
c0025e44:	83 ec 08             	sub    esp,0x8
c0025e47:	68 58 01 00 00       	push   0x158
c0025e4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025e50:	e8 00 c7 fe ff       	call   c0012555 <operator delete(void*, unsigned long)>
c0025e55:	83 c4 10             	add    esp,0x10
c0025e58:	83 c4 0c             	add    esp,0xc
c0025e5b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0025e5c <IDE::~IDE()>:
c0025e5c:	83 ec 0c             	sub    esp,0xc
c0025e5f:	ba b0 96 02 c0       	mov    edx,0xc00296b0
c0025e64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e68:	89 10                	mov    DWORD PTR [eax],edx
c0025e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e6e:	83 ec 0c             	sub    esp,0xc
c0025e71:	50                   	push   eax
c0025e72:	e8 6f df fe ff       	call   c0013de6 <HardDiskController::~HardDiskController()>
c0025e77:	83 c4 10             	add    esp,0x10
c0025e7a:	90                   	nop
c0025e7b:	83 c4 0c             	add    esp,0xc
c0025e7e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0025e80 <IDE::~IDE()>:
c0025e80:	83 ec 0c             	sub    esp,0xc
c0025e83:	83 ec 0c             	sub    esp,0xc
c0025e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025e8a:	e8 cd ff ff ff       	call   c0025e5c <IDE::~IDE()>
c0025e8f:	83 c4 10             	add    esp,0x10
c0025e92:	83 ec 08             	sub    esp,0x8
c0025e95:	68 70 02 00 00       	push   0x270
c0025e9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025e9e:	e8 b2 c6 fe ff       	call   c0012555 <operator delete(void*, unsigned long)>
c0025ea3:	83 c4 10             	add    esp,0x10
c0025ea6:	83 c4 0c             	add    esp,0xc
c0025ea9:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0025eaa <ATA::~ATA()>:
c0025eaa:	83 ec 0c             	sub    esp,0xc
c0025ead:	ba 00 97 02 c0       	mov    edx,0xc0029700
c0025eb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eb6:	89 10                	mov    DWORD PTR [eax],edx
c0025eb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ebc:	83 ec 0c             	sub    esp,0xc
c0025ebf:	50                   	push   eax
c0025ec0:	e8 ff df fe ff       	call   c0013ec4 <PhysicalDisk::~PhysicalDisk()>
c0025ec5:	83 c4 10             	add    esp,0x10
c0025ec8:	90                   	nop
c0025ec9:	83 c4 0c             	add    esp,0xc
c0025ecc:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0025ece <ATA::~ATA()>:
c0025ece:	83 ec 0c             	sub    esp,0xc
c0025ed1:	83 ec 0c             	sub    esp,0xc
c0025ed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025ed8:	e8 cd ff ff ff       	call   c0025eaa <ATA::~ATA()>
c0025edd:	83 c4 10             	add    esp,0x10
c0025ee0:	83 ec 08             	sub    esp,0x8
c0025ee3:	68 7c 01 00 00       	push   0x17c
c0025ee8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025eec:	e8 64 c6 fe ff       	call   c0012555 <operator delete(void*, unsigned long)>
c0025ef1:	83 c4 10             	add    esp,0x10
c0025ef4:	83 c4 0c             	add    esp,0xc
c0025ef7:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0025ef8 <ATAPI::~ATAPI()>:
c0025ef8:	83 ec 0c             	sub    esp,0xc
c0025efb:	ba 6c 97 02 c0       	mov    edx,0xc002976c
c0025f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f04:	89 10                	mov    DWORD PTR [eax],edx
c0025f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f0a:	83 ec 0c             	sub    esp,0xc
c0025f0d:	50                   	push   eax
c0025f0e:	e8 b1 df fe ff       	call   c0013ec4 <PhysicalDisk::~PhysicalDisk()>
c0025f13:	83 c4 10             	add    esp,0x10
c0025f16:	90                   	nop
c0025f17:	83 c4 0c             	add    esp,0xc
c0025f1a:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0025f1c <ATAPI::~ATAPI()>:
c0025f1c:	83 ec 0c             	sub    esp,0xc
c0025f1f:	83 ec 0c             	sub    esp,0xc
c0025f22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025f26:	e8 cd ff ff ff       	call   c0025ef8 <ATAPI::~ATAPI()>
c0025f2b:	83 c4 10             	add    esp,0x10
c0025f2e:	83 ec 08             	sub    esp,0x8
c0025f31:	68 80 01 00 00       	push   0x180
c0025f36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025f3a:	e8 16 c6 fe ff       	call   c0012555 <operator delete(void*, unsigned long)>
c0025f3f:	83 c4 10             	add    esp,0x10
c0025f42:	83 c4 0c             	add    esp,0xc
c0025f45:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0025f46 <AVX::~AVX()>:
c0025f46:	83 ec 0c             	sub    esp,0xc
c0025f49:	ba a8 97 02 c0       	mov    edx,0xc00297a8
c0025f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f52:	89 10                	mov    DWORD PTR [eax],edx
c0025f54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f58:	83 ec 0c             	sub    esp,0xc
c0025f5b:	50                   	push   eax
c0025f5c:	e8 e7 df fe ff       	call   c0013f48 <FPU::~FPU()>
c0025f61:	83 c4 10             	add    esp,0x10
c0025f64:	90                   	nop
c0025f65:	83 c4 0c             	add    esp,0xc
c0025f68:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0025f6a <AVX::~AVX()>:
c0025f6a:	83 ec 0c             	sub    esp,0xc
c0025f6d:	83 ec 0c             	sub    esp,0xc
c0025f70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025f74:	e8 cd ff ff ff       	call   c0025f46 <AVX::~AVX()>
c0025f79:	83 c4 10             	add    esp,0x10
c0025f7c:	83 ec 08             	sub    esp,0x8
c0025f7f:	68 58 01 00 00       	push   0x158
c0025f84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025f88:	e8 c8 c5 fe ff       	call   c0012555 <operator delete(void*, unsigned long)>
c0025f8d:	83 c4 10             	add    esp,0x10
c0025f90:	83 c4 0c             	add    esp,0xc
c0025f93:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0025f94 <MMX::~MMX()>:
c0025f94:	83 ec 0c             	sub    esp,0xc
c0025f97:	ba e8 97 02 c0       	mov    edx,0xc00297e8
c0025f9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fa0:	89 10                	mov    DWORD PTR [eax],edx
c0025fa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fa6:	83 ec 0c             	sub    esp,0xc
c0025fa9:	50                   	push   eax
c0025faa:	e8 99 df fe ff       	call   c0013f48 <FPU::~FPU()>
c0025faf:	83 c4 10             	add    esp,0x10
c0025fb2:	90                   	nop
c0025fb3:	83 c4 0c             	add    esp,0xc
c0025fb6:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0025fb8 <MMX::~MMX()>:
c0025fb8:	83 ec 0c             	sub    esp,0xc
c0025fbb:	83 ec 0c             	sub    esp,0xc
c0025fbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025fc2:	e8 cd ff ff ff       	call   c0025f94 <MMX::~MMX()>
c0025fc7:	83 c4 10             	add    esp,0x10
c0025fca:	83 ec 08             	sub    esp,0x8
c0025fcd:	68 58 01 00 00       	push   0x158
c0025fd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025fd6:	e8 7a c5 fe ff       	call   c0012555 <operator delete(void*, unsigned long)>
c0025fdb:	83 c4 10             	add    esp,0x10
c0025fde:	83 c4 0c             	add    esp,0xc
c0025fe1:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0025fe2 <SSE::~SSE()>:
c0025fe2:	83 ec 0c             	sub    esp,0xc
c0025fe5:	ba 28 98 02 c0       	mov    edx,0xc0029828
c0025fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fee:	89 10                	mov    DWORD PTR [eax],edx
c0025ff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ff4:	83 ec 0c             	sub    esp,0xc
c0025ff7:	50                   	push   eax
c0025ff8:	e8 4b df fe ff       	call   c0013f48 <FPU::~FPU()>
c0025ffd:	83 c4 10             	add    esp,0x10
c0026000:	90                   	nop
c0026001:	83 c4 0c             	add    esp,0xc
c0026004:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0026006 <SSE::~SSE()>:
c0026006:	83 ec 0c             	sub    esp,0xc
c0026009:	83 ec 0c             	sub    esp,0xc
c002600c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026010:	e8 cd ff ff ff       	call   c0025fe2 <SSE::~SSE()>
c0026015:	83 c4 10             	add    esp,0x10
c0026018:	83 ec 08             	sub    esp,0x8
c002601b:	68 58 01 00 00       	push   0x158
c0026020:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026024:	e8 2c c5 fe ff       	call   c0012555 <operator delete(void*, unsigned long)>
c0026029:	83 c4 10             	add    esp,0x10
c002602c:	83 c4 0c             	add    esp,0xc
c002602f:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0026030 <x87::~x87()>:
c0026030:	83 ec 0c             	sub    esp,0xc
c0026033:	ba 68 98 02 c0       	mov    edx,0xc0029868
c0026038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002603c:	89 10                	mov    DWORD PTR [eax],edx
c002603e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026042:	83 ec 0c             	sub    esp,0xc
c0026045:	50                   	push   eax
c0026046:	e8 fd de fe ff       	call   c0013f48 <FPU::~FPU()>
c002604b:	83 c4 10             	add    esp,0x10
c002604e:	90                   	nop
c002604f:	83 c4 0c             	add    esp,0xc
c0026052:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0026054 <x87::~x87()>:
c0026054:	83 ec 0c             	sub    esp,0xc
c0026057:	83 ec 0c             	sub    esp,0xc
c002605a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002605e:	e8 cd ff ff ff       	call   c0026030 <x87::~x87()>
c0026063:	83 c4 10             	add    esp,0x10
c0026066:	83 ec 08             	sub    esp,0x8
c0026069:	68 58 01 00 00       	push   0x158
c002606e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026072:	e8 de c4 fe ff       	call   c0012555 <operator delete(void*, unsigned long)>
c0026077:	83 c4 10             	add    esp,0x10
c002607a:	83 c4 0c             	add    esp,0xc
c002607d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002607e <IOAPIC::~IOAPIC()>:
c002607e:	83 ec 0c             	sub    esp,0xc
c0026081:	ba c0 99 02 c0       	mov    edx,0xc00299c0
c0026086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002608a:	89 10                	mov    DWORD PTR [eax],edx
c002608c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026090:	83 ec 0c             	sub    esp,0xc
c0026093:	50                   	push   eax
c0026094:	e8 5d d8 fe ff       	call   c00138f6 <Device::~Device()>
c0026099:	83 c4 10             	add    esp,0x10
c002609c:	90                   	nop
c002609d:	83 c4 0c             	add    esp,0xc
c00260a0:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00260a2 <IOAPIC::~IOAPIC()>:
c00260a2:	83 ec 0c             	sub    esp,0xc
c00260a5:	83 ec 0c             	sub    esp,0xc
c00260a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260ac:	e8 cd ff ff ff       	call   c002607e <IOAPIC::~IOAPIC()>
c00260b1:	83 c4 10             	add    esp,0x10
c00260b4:	83 ec 08             	sub    esp,0x8
c00260b7:	68 68 01 00 00       	push   0x168
c00260bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260c0:	e8 90 c4 fe ff       	call   c0012555 <operator delete(void*, unsigned long)>
c00260c5:	83 c4 10             	add    esp,0x10
c00260c8:	83 c4 0c             	add    esp,0xc
c00260cb:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00260cc <APIC::~APIC()>:
c00260cc:	83 ec 0c             	sub    esp,0xc
c00260cf:	ba 78 99 02 c0       	mov    edx,0xc0029978
c00260d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260d8:	89 10                	mov    DWORD PTR [eax],edx
c00260da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260de:	83 ec 0c             	sub    esp,0xc
c00260e1:	50                   	push   eax
c00260e2:	e8 2b e3 fe ff       	call   c0014412 <InterruptController::~InterruptController()>
c00260e7:	83 c4 10             	add    esp,0x10
c00260ea:	90                   	nop
c00260eb:	83 c4 0c             	add    esp,0xc
c00260ee:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00260f0 <APIC::~APIC()>:
c00260f0:	83 ec 0c             	sub    esp,0xc
c00260f3:	83 ec 0c             	sub    esp,0xc
c00260f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260fa:	e8 cd ff ff ff       	call   c00260cc <APIC::~APIC()>
c00260ff:	83 c4 10             	add    esp,0x10
c0026102:	83 ec 08             	sub    esp,0x8
c0026105:	68 58 21 00 00       	push   0x2158
c002610a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002610e:	e8 42 c4 fe ff       	call   c0012555 <operator delete(void*, unsigned long)>
c0026113:	83 c4 10             	add    esp,0x10
c0026116:	83 c4 0c             	add    esp,0xc
c0026119:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c002611a <PIC::~PIC()>:
c002611a:	83 ec 0c             	sub    esp,0xc
c002611d:	ba 10 9a 02 c0       	mov    edx,0xc0029a10
c0026122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026126:	89 10                	mov    DWORD PTR [eax],edx
c0026128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002612c:	83 ec 0c             	sub    esp,0xc
c002612f:	50                   	push   eax
c0026130:	e8 dd e2 fe ff       	call   c0014412 <InterruptController::~InterruptController()>
c0026135:	83 c4 10             	add    esp,0x10
c0026138:	90                   	nop
c0026139:	83 c4 0c             	add    esp,0xc
c002613c:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c002613e <PIC::~PIC()>:
c002613e:	83 ec 0c             	sub    esp,0xc
c0026141:	83 ec 0c             	sub    esp,0xc
c0026144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026148:	e8 cd ff ff ff       	call   c002611a <PIC::~PIC()>
c002614d:	83 c4 10             	add    esp,0x10
c0026150:	83 ec 08             	sub    esp,0x8
c0026153:	68 58 21 00 00       	push   0x2158
c0026158:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002615c:	e8 f4 c3 fe ff       	call   c0012555 <operator delete(void*, unsigned long)>
c0026161:	83 c4 10             	add    esp,0x10
c0026164:	83 c4 0c             	add    esp,0xc
c0026167:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0026168 <APICTimer::~APICTimer()>:
c0026168:	83 ec 0c             	sub    esp,0xc
c002616b:	ba 64 9a 02 c0       	mov    edx,0xc0029a64
c0026170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026174:	89 10                	mov    DWORD PTR [eax],edx
c0026176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002617a:	83 ec 0c             	sub    esp,0xc
c002617d:	50                   	push   eax
c002617e:	e8 91 ff fe ff       	call   c0016114 <Timer::~Timer()>
c0026183:	83 c4 10             	add    esp,0x10
c0026186:	90                   	nop
c0026187:	83 c4 0c             	add    esp,0xc
c002618a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002618c <APICTimer::~APICTimer()>:
c002618c:	83 ec 0c             	sub    esp,0xc
c002618f:	83 ec 0c             	sub    esp,0xc
c0026192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026196:	e8 cd ff ff ff       	call   c0026168 <APICTimer::~APICTimer()>
c002619b:	83 c4 10             	add    esp,0x10
c002619e:	83 ec 08             	sub    esp,0x8
c00261a1:	68 60 01 00 00       	push   0x160
c00261a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00261aa:	e8 a6 c3 fe ff       	call   c0012555 <operator delete(void*, unsigned long)>
c00261af:	83 c4 10             	add    esp,0x10
c00261b2:	83 c4 0c             	add    esp,0xc
c00261b5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00261b6 <PIT::~PIT()>:
c00261b6:	83 ec 0c             	sub    esp,0xc
c00261b9:	ba b4 9a 02 c0       	mov    edx,0xc0029ab4
c00261be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261c2:	89 10                	mov    DWORD PTR [eax],edx
c00261c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261c8:	83 ec 0c             	sub    esp,0xc
c00261cb:	50                   	push   eax
c00261cc:	e8 43 ff fe ff       	call   c0016114 <Timer::~Timer()>
c00261d1:	83 c4 10             	add    esp,0x10
c00261d4:	90                   	nop
c00261d5:	83 c4 0c             	add    esp,0xc
c00261d8:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00261da <PIT::~PIT()>:
c00261da:	83 ec 0c             	sub    esp,0xc
c00261dd:	83 ec 0c             	sub    esp,0xc
c00261e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00261e4:	e8 cd ff ff ff       	call   c00261b6 <PIT::~PIT()>
c00261e9:	83 c4 10             	add    esp,0x10
c00261ec:	83 ec 08             	sub    esp,0x8
c00261ef:	68 5c 01 00 00       	push   0x15c
c00261f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00261f8:	e8 58 c3 fe ff       	call   c0012555 <operator delete(void*, unsigned long)>
c00261fd:	83 c4 10             	add    esp,0x10
c0026200:	83 c4 0c             	add    esp,0xc
c0026203:	c3                   	ret    
