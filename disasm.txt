
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 e8 7a 00 00       	call   c0007b08 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 28 24 02 c0       	mov    eax,0xc0022428
c0000025:	3d 28 24 02 c0       	cmp    eax,0xc0022428
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 28 24 02 c0       	push   0xc0022428
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 28 24 02 c0       	mov    eax,0xc0022428
c0000051:	2d 28 24 02 c0       	sub    eax,0xc0022428
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 28 24 02 c0       	push   0xc0022428
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 2c f3 01 c0       	mov    ebx,0xc001f32c
c0000097:	81 eb 28 f3 01 c0    	sub    ebx,0xc001f328
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 28 f3 01 c0       	mov    esi,0xc001f328
c00000a6:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 40 02 c0       	mov    ds:0xc00240c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 28 24 02 c0       	push   0xc0022428
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 40 02 c0 01 	mov    BYTE PTR ds:0xc00240c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 40 02 c0       	push   0xc00240c8
c0000108:	68 28 24 02 c0       	push   0xc0022428
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 53 46 01 00       	call   c0014900 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 ad a4 00 00       	call   c000a772 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 31 46 01 00       	call   c0014900 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 3e 4b 01 00       	call   c0014e2c <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 fd 51 01 00       	call   c00154f4 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 4e 02 c0 	lgdtd  ds:0xc0024ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 83 05 01 00       	jmp    c0010902 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 40 02 c0       	mov    ds:0xc00240e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 40 02 c0    	mov    DWORD PTR ds:0xc00240e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 40 02 c0    	mov    ebx,DWORD PTR ds:0xc00240e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 40 f3 01 c0 02 	test   BYTE PTR [edx-0x3ffe0cc0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 40 f3 01 c0 01 	test   BYTE PTR [edx-0x3ffe0cc0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 40 f3 01 c0 08 	test   BYTE PTR [edx-0x3ffe0cc0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 40 f3 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0cc0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 40 f3 01 c0 01 	test   BYTE PTR [edx-0x3ffe0cc0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 41 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbefc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbefc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 41 02 c0    	mov    ecx,DWORD PTR ds:0xc002413c
c0000df7:	c7 42 0c 34 41 02 c0 	mov    DWORD PTR [edx+0xc],0xc0024134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 41 02 c0 02 	test   BYTE PTR ds:0xc0024100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 a8 6a 00 00       	call   c0007980 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 ed 69 00 00       	call   c0007980 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 d7 69 00 00       	call   c0007980 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 b3 69 00 00       	call   c0007980 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 41 02 c0    	mov    edi,DWORD PTR ds:0xc0024100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 41 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbefc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 41 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbefc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 41 02 c0 	lea    edx,[eax*8-0x3ffdbecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024140
c0001176:	81 fb 34 41 02 c0    	cmp    ebx,0xc0024134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 41 02 c0       	cmp    eax,0xc0024134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 41 02 c0    	cmp    DWORD PTR ds:0xc0024130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 41 02 c0       	mov    ds:0xc002413c,eax
c00011b2:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00011b7:	a3 30 41 02 c0       	mov    ds:0xc0024130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c00011c5:	c7 40 0c 34 41 02 c0 	mov    DWORD PTR [eax+0xc],0xc0024134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 40 02 c0 	lea    ebp,[edx*4-0x3ffdbf08]
c0001216:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 41 02 c0 	lea    ecx,[edx*4-0x3ffdbf00]
c0001231:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 44 02 c0 	or     DWORD PTR [edi*4-0x3ffdbbcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 41 02 c0 	lea    eax,[eax*8-0x3ffdbecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,ecx
c00012eb:	89 0d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,ecx
c00012f1:	c7 41 08 34 41 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0024134
c00012f8:	c7 41 0c 34 41 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0024134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 41 02 c0 	lea    edx,[ecx*8-0x3ffdbed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 41 02 c0 	lea    edx,[eax*4-0x3ffdbed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 44 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbbcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edi
c00013be:	89 3d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,edi
c00013c4:	c7 47 08 34 41 02 c0 	mov    DWORD PTR [edi+0x8],0xc0024134
c00013cb:	c7 47 0c 34 41 02 c0 	mov    DWORD PTR [edi+0xc],0xc0024134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 41 02 c0    	mov    DWORD PTR ds:0xc0024130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 41 02 c0       	mov    edx,0xc0024100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 44 02 c0    	mov    DWORD PTR ds:0xc0024454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 41 02 c0       	mov    eax,0xc0024100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 44 02 c0    	push   DWORD PTR ds:0xc002445c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 44 02 c0       	mov    eax,ds:0xc002445c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 41 02 c0 00 	cmp    DWORD PTR ds:0xc002412c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbefc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 41 02 c0       	mov    eax,0xc0024134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 44 02 c0       	cmp    eax,0xc002442c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 44 02 c0       	mov    eax,ds:0xc0024468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 44 f4 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0bbc]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 41 02 c0       	mov    eax,ds:0xc0024100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 41 02 c0       	mov    ds:0xc0024100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 44 02 c0    	mov    DWORD PTR ds:0xc0024444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 44 02 c0    	mov    DWORD PTR ds:0xc0024448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 44 02 c0    	mov    DWORD PTR ds:0xc002444c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 1e 6c 01 00       	jmp    c00189c0 <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 48 6c 01 00       	jmp    c0018a00 <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 69 6c 01 00       	jmp    c0018a40 <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 a0 f5 01 c0 	movzx  eax,BYTE PTR [esi-0x3ffe0a60]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 a0 f5 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0a60]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba 20 17 02 c0       	mov    edx,0xc0021720
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba 5c f4 01 c0       	mov    edx,0xc001f45c
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 44 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbb60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 44 02 c0    	mov    ax,ds:0xc0024480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 44 02 c0    	mov    ds:0xc0024480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 62 f4 01 c0       	mov    eax,0xc001f462
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf 20 f5 01 c0 	movzx  edi,BYTE PTR [edi-0x3ffe0ae0]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 6b f4 01 c0       	mov    eax,0xc001f46b
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 a0 f5 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0a60]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbb60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 44 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbb60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 f0 f4 01 c0       	mov    eax,0xc001f4f0
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 44 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbb60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb e0 f4 01 c0       	mov    ebx,0xc001f4e0
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 c0 f4 01 c0       	mov    eax,0xc001f4c0
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 d0 f4 01 c0       	mov    eax,0xc001f4d0
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba 72 f4 01 c0       	mov    edx,0xc001f472
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba 7e f4 01 c0       	mov    edx,0xc001f47e
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba 92 f4 01 c0       	mov    edx,0xc001f492
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 7f 1e 00 00       	call   c0007aae <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 77 1e 00 00       	call   c0007abe <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c c0 f8 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f8c0
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 c0 f8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f8c0
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 c0 f6 01 c0       	mov    eax,0xc001f6c0
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 00 f6 01 c0       	mov    eax,0xc001f600
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 c0 f5 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0a40]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 c0 f9 01 c0       	push   0xc001f9c0
c000611b:	e8 3c 32 01 00       	call   c001935c <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbfe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 ce f9 01 c0       	push   0xc001f9ce
c0006153:	e8 04 32 01 00       	call   c001935c <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 45 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdba30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 40 02 c0 	movsx  eax,BYTE PTR ds:0xc0024060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 6d 31 01 00       	call   c0019300 <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 40 02 c0       	mov    eax,0xc0024080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 40 02 c0       	mov    eax,0xc0024020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 4e 02 c0    	mov    ebp,DWORD PTR ds:0xc0024eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 dd f9 01 c0       	push   0xc001f9dd
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 4e 02 c0       	mov    ecx,0xc0024e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 45 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdbac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdbac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbabc],esi
c000655e:	89 87 40 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbac0],eax
c0006564:	c7 87 48 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdbab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdba30],0x0
c0006580:	89 87 4c 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 45 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 45 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdba30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c00065f9:	8b 8d 4c 45 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdbab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 45 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdbac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 40 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbfe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 45 02 c0    	add    DWORD PTR [ebp-0x3ffdbab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 45 02 c0    	lea    ecx,[ebp-0x3ffdbac0]
c00066f1:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 45 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdbab4]
c000672f:	05 40 45 02 c0       	add    eax,0xc0024540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdbac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdba30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 45 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdbab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdbac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdba30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 45 02 c0    	lea    edi,[eax-0x3ffdbac0]
c00067ee:	83 b8 40 45 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdbac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 e0 f9 01 c0       	push   0xc001f9e0
c0006812:	e8 45 2b 01 00       	call   c001935c <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 59 2b 01 00       	call   c0019378 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 e5 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9e5
c000682c:	e8 2b 2b 01 00       	call   c001935c <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbac0]
c0006838:	e8 3b 2b 01 00       	call   c0019378 <iso_kprintfd>
c000683d:	c7 04 24 eb f9 01 c0 	mov    DWORD PTR [esp],0xc001f9eb
c0006844:	e8 13 2b 01 00       	call   c001935c <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbabc]
c0006850:	e8 23 2b 01 00       	call   c0019378 <iso_kprintfd>
c0006855:	c7 04 24 f1 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9f1
c000685c:	e8 fb 2a 01 00       	call   c001935c <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 45 02 c0    	push   DWORD PTR [ebx-0x3ffdba30]
c0006868:	e8 0b 2b 01 00       	call   c0019378 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 45 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdbab8]
c00068ce:	81 c2 40 45 02 c0    	add    edx,0xc0024540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 45 02 c0    	lea    ebp,[eax-0x3ffdbaa8]
c000692a:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 45 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdbaa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 dd f9 01 c0       	push   0xc001f9dd
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 45 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdbaad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbab0],eax
c0006a06:	89 93 54 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbaac],edx
c0006a0c:	81 c3 40 45 02 c0    	add    ebx,0xc0024540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 45 02 c0       	add    eax,0xc0024550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 fa f9 01 c0       	push   0xc001f9fa
c0006a31:	e8 26 29 01 00       	call   c001935c <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 40 02 c0       	mov    ds:0xc0024060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb4,0x0
c0006a66:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 05 fa 01 c0       	push   0xc001fa05
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 4e 02 c0       	mov    ds:0xc0024eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 0c fa 01 c0       	push   0xc001fa0c
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 40 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdbf80]
c0006b04:	bf 80 4e 02 c0       	mov    edi,0xc0024e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 4e 02 c0       	mov    eax,0xc0024e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 4e 02 c0       	mov    ds:0xc0024ea8,eax
c0006b27:	b8 8a 4e 02 c0       	mov    eax,0xc0024e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 4e 02 c0       	mov    ds:0xc0024ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 13 fa 01 c0       	push   0xc001fa13
c0006b48:	e8 0f 28 01 00       	call   c001935c <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 1e fa 01 c0       	push   0xc001fa1e
c0006b63:	e8 f4 27 01 00       	call   c001935c <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 45 02 c0       	push   0xc0024540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0024540,0xffffffff
c0006b8d:	e8 1c 0f 00 00       	call   c0007aae <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 4e 02 c0       	mov    ds:0xc0024eb0,eax
c0006b9e:	e8 0b 0f 00 00       	call   c0007aae <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 45 02 c0       	mov    ds:0xc0024520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 f6 0e 00 00       	call   c0007aae <malloc>
c0006bb8:	89 04 9d 80 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbf80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 dd 0e 00 00       	call   c0007aae <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbfe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbf80]
c0006bfe:	e8 bb 0e 00 00       	call   c0007abe <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbfe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 ad 0e 00 00       	call   c0007abe <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 4e 02 c0       	mov    eax,ds:0xc0024eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 93 0e 00 00       	call   c0007abe <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 45 02 c0       	mov    eax,ds:0xc0024520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 7e 0e 00 00       	call   c0007abe <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024520,0x0
c0006c4d:	c7 05 b0 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c73:	83 ec 0c             	sub    esp,0xc
c0006c76:	50                   	push   eax
c0006c77:	e8 c0 52 00 00       	call   c000bf3c <Device::closeAll()>
c0006c7c:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c82:	83 c4 10             	add    esp,0x10
c0006c85:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c87:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c8b:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c93:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006c9b:	5b                   	pop    ebx
c0006c9c:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006c9f:	5e                   	pop    esi
c0006ca0:	5f                   	pop    edi
c0006ca1:	ff e0                	jmp    eax

c0006ca3 <Krnl::firstTask()>:
c0006ca3:	53                   	push   ebx
c0006ca4:	83 ec 14             	sub    esp,0x14
c0006ca7:	fb                   	sti    
c0006ca8:	68 2f fa 01 c0       	push   0xc001fa2f
c0006cad:	e8 e8 95 00 00       	call   c001029a <KeSetBootMessage(char const*)>
c0006cb2:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cb9:	e8 f0 0d 00 00       	call   c0007aae <malloc>
c0006cbe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cc5:	89 c3                	mov    ebx,eax
c0006cc7:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0006ccc:	50                   	push   eax
c0006ccd:	68 48 fa 01 c0       	push   0xc001fa48
c0006cd2:	6a 01                	push   0x1
c0006cd4:	53                   	push   ebx
c0006cd5:	e8 7e df 00 00       	call   c0014c58 <Process::Process(bool, char const*, Process*, char**)>
c0006cda:	83 c4 20             	add    esp,0x20
c0006cdd:	68 ff 00 00 00       	push   0xff
c0006ce2:	6a 00                	push   0x0
c0006ce4:	68 f5 74 00 c0       	push   0xc00074f5
c0006ce9:	53                   	push   ebx
c0006cea:	e8 8d e1 00 00       	call   c0014e7c <Process::createThread(void (*)(void*), void*, int)>
c0006cef:	8b 15 90 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028190
c0006cf5:	6a 7a                	push   0x7a
c0006cf7:	6a 00                	push   0x0
c0006cf9:	68 64 59 01 c0       	push   0xc0015964
c0006cfe:	52                   	push   edx
c0006cff:	e8 78 e1 00 00       	call   c0014e7c <Process::createThread(void (*)(void*), void*, int)>
c0006d04:	83 c4 20             	add    esp,0x20
c0006d07:	a3 48 81 02 c0       	mov    ds:0xc0028148,eax
c0006d0c:	c6 05 bd 4e 02 c0 01 	mov    BYTE PTR ds:0xc0024ebd,0x1
c0006d13:	e8 b8 9d 00 00       	call   c0010ad0 <KeInitRand()>
c0006d18:	83 ec 0c             	sub    esp,0xc
c0006d1b:	68 44 fb 01 c0       	push   0xc001fb44
c0006d20:	e8 75 95 00 00       	call   c001029a <KeSetBootMessage(char const*)>
c0006d25:	e8 5d f0 00 00       	call   c0015d87 <Vm::initialise8086()>
c0006d2a:	e8 5d 40 00 00       	call   c000ad8c <Fs::initVFS()>
c0006d2f:	c7 04 24 55 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa55
c0006d36:	e8 5f 95 00 00       	call   c001029a <KeSetBootMessage(char const*)>
c0006d3b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d40:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d46:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d48:	6a 00                	push   0x0
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	50                   	push   eax
c0006d4f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d52:	83 c4 14             	add    esp,0x14
c0006d55:	68 44 fb 01 c0       	push   0xc001fb44
c0006d5a:	e8 3b 95 00 00       	call   c001029a <KeSetBootMessage(char const*)>
c0006d5f:	e8 16 9a 00 00       	call   c001077a <Krnl::loadSystemEnv()>
c0006d64:	e8 73 9c 00 00       	call   c00109dc <Krnl::setupPowerManager()>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	6a 3a                	push   0x3a
c0006d6e:	68 6f fa 01 c0       	push   0xc001fa6f
c0006d73:	68 78 fa 01 c0       	push   0xc001fa78
c0006d78:	e8 23 c2 00 00       	call   c0012fa0 <Reg::readIntWithDefault(char*, char*, int)>
c0006d7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d80:	e8 17 4b 00 00       	call   c000b89c <User::loadClockSettings(int)>
c0006d85:	c7 04 24 68 fb 01 c0 	mov    DWORD PTR [esp],0xc001fb68
c0006d8c:	e8 09 95 00 00       	call   c001029a <KeSetBootMessage(char const*)>
c0006d91:	59                   	pop    ecx
c0006d92:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d97:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006d9d:	53                   	push   ebx
c0006d9e:	e8 97 51 00 00       	call   c000bf3a <Device::loadDriversForAll()>
c0006da3:	c7 04 24 80 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa80
c0006daa:	e8 eb 94 00 00       	call   c001029a <KeSetBootMessage(char const*)>
c0006daf:	58                   	pop    eax
c0006db0:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c0006db6:	5a                   	pop    edx
c0006db7:	6a 01                	push   0x1
c0006db9:	68 91 fa 01 c0       	push   0xc001fa91
c0006dbe:	e8 ab d8 00 00       	call   c001466e <Thr::loadDLL(char const*, bool)>
c0006dc3:	59                   	pop    ecx
c0006dc4:	5a                   	pop    edx
c0006dc5:	53                   	push   ebx
c0006dc6:	50                   	push   eax
c0006dc7:	e8 d3 da 00 00       	call   c001489f <Thr::executeDLL(unsigned long, void*)>
c0006dcc:	83 c4 10             	add    esp,0x10
c0006dcf:	83 ec 0c             	sub    esp,0xc
c0006dd2:	6a 02                	push   0x2
c0006dd4:	e8 07 e5 00 00       	call   c00152e0 <blockTask(TaskState)>
c0006dd9:	83 c4 10             	add    esp,0x10
c0006ddc:	eb f1                	jmp    c0006dcf <Krnl::firstTask()+0x12c>

c0006dde <Computer::Computer()>:
c0006dde:	83 ec 0c             	sub    esp,0xc
c0006de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006de5:	83 ec 08             	sub    esp,0x8
c0006de8:	68 ad fa 01 c0       	push   0xc001faad
c0006ded:	50                   	push   eax
c0006dee:	e8 c3 51 00 00       	call   c000bfb6 <Device::Device(char const*)>
c0006df3:	83 c4 10             	add    esp,0x10
c0006df6:	ba b4 fb 01 c0       	mov    edx,0xc001fbb4
c0006dfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dff:	89 10                	mov    DWORD PTR [eax],edx
c0006e01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e05:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e13:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e21:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e27:	83 ca 04             	or     edx,0x4
c0006e2a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e34:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e3a:	0f b6 d0             	movzx  edx,al
c0006e3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e41:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e52:	0f b6 d0             	movzx  edx,al
c0006e55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e59:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e62:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e68:	8d 50 01             	lea    edx,[eax+0x1]
c0006e6b:	88 d1                	mov    cl,dl
c0006e6d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e71:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e77:	0f b6 d0             	movzx  edx,al
c0006e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e7e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e82:	83 e1 3f             	and    ecx,0x3f
c0006e85:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e89:	90                   	nop
c0006e8a:	83 c4 0c             	add    esp,0xc
c0006e8d:	c3                   	ret    

c0006e8e <Computer::setBootMessage(char const*)>:
c0006e8e:	c3                   	ret    
c0006e8f:	90                   	nop

c0006e90 <Computer::detectFeatures()>:
c0006e90:	55                   	push   ebp
c0006e91:	57                   	push   edi
c0006e92:	56                   	push   esi
c0006e93:	53                   	push   ebx
c0006e94:	83 ec 1c             	sub    esp,0x1c
c0006e97:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006e9b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea1:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ea7:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ead:	e8 47 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eb2:	31 d2                	xor    edx,edx
c0006eb4:	85 c0                	test   eax,eax
c0006eb6:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ebc:	0f 95 c2             	setne  dl
c0006ebf:	83 e0 fd             	and    eax,0xfffffffd
c0006ec2:	d1 e2                	shl    edx,1
c0006ec4:	09 d0                	or     eax,edx
c0006ec6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ecc:	a8 02                	test   al,0x2
c0006ece:	75 51                	jne    c0006f21 <Computer::detectFeatures()+0x91>
c0006ed0:	f6 05 d1 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed1,0x4
c0006ed7:	74 0f                	je     c0006ee8 <Computer::detectFeatures()+0x58>
c0006ed9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006edf:	83 e0 fb             	and    eax,0xfffffffb
c0006ee2:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ee8:	e8 39 74 01 00       	call   c001e326 <x87Detect>
c0006eed:	83 e0 01             	and    eax,0x1
c0006ef0:	c1 e0 04             	shl    eax,0x4
c0006ef3:	89 c2                	mov    edx,eax
c0006ef5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006efb:	83 e0 ef             	and    eax,0xffffffef
c0006efe:	09 d0                	or     eax,edx
c0006f00:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f06:	88 c2                	mov    dl,al
c0006f08:	a8 10                	test   al,0x10
c0006f0a:	0f 85 33 01 00 00    	jne    c0007043 <Computer::detectFeatures()+0x1b3>
c0006f10:	80 e2 80             	and    dl,0x80
c0006f13:	0f 85 4c 01 00 00    	jne    c0007065 <Computer::detectFeatures()+0x1d5>
c0006f19:	83 c4 1c             	add    esp,0x1c
c0006f1c:	5b                   	pop    ebx
c0006f1d:	5e                   	pop    esi
c0006f1e:	5f                   	pop    edi
c0006f1f:	5d                   	pop    ebp
c0006f20:	c3                   	ret    
c0006f21:	83 ec 0c             	sub    esp,0xc
c0006f24:	6a 20                	push   0x20
c0006f26:	e8 85 88 00 00       	call   c000f7b0 <CPU::cpuidCheckEDX(unsigned int)>
c0006f2b:	83 e0 01             	and    eax,0x1
c0006f2e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f35:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f3b:	83 e0 f7             	and    eax,0xfffffff7
c0006f3e:	09 d0                	or     eax,edx
c0006f40:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f46:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f4d:	e8 5e 88 00 00       	call   c000f7b0 <CPU::cpuidCheckEDX(unsigned int)>
c0006f52:	89 c2                	mov    edx,eax
c0006f54:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f5a:	83 e2 01             	and    edx,0x1
c0006f5d:	83 e0 fe             	and    eax,0xfffffffe
c0006f60:	09 d0                	or     eax,edx
c0006f62:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f68:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f6f:	e8 3c 88 00 00       	call   c000f7b0 <CPU::cpuidCheckEDX(unsigned int)>
c0006f74:	89 c2                	mov    edx,eax
c0006f76:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f7c:	c1 e2 07             	shl    edx,0x7
c0006f7f:	83 e0 7f             	and    eax,0x7f
c0006f82:	09 d0                	or     eax,edx
c0006f84:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f8a:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f91:	e8 1a 88 00 00       	call   c000f7b0 <CPU::cpuidCheckEDX(unsigned int)>
c0006f96:	83 c4 10             	add    esp,0x10
c0006f99:	83 e0 01             	and    eax,0x1
c0006f9c:	c1 e0 05             	shl    eax,0x5
c0006f9f:	89 c2                	mov    edx,eax
c0006fa1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fa7:	83 e0 df             	and    eax,0xffffffdf
c0006faa:	09 d0                	or     eax,edx
c0006fac:	f7 05 d0 4e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0024ed0,0x401
c0006fb6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fbc:	0f 84 c9 00 00 00    	je     c000708b <Computer::detectFeatures()+0x1fb>
c0006fc2:	83 e0 fe             	and    eax,0xfffffffe
c0006fc5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	89 c2                	mov    edx,eax
c0006fd3:	83 e2 09             	and    edx,0x9
c0006fd6:	83 fa 01             	cmp    edx,0x1
c0006fd9:	75 09                	jne    c0006fe4 <Computer::detectFeatures()+0x154>
c0006fdb:	83 e0 fe             	and    eax,0xfffffffe
c0006fde:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe4:	83 ec 0c             	sub    esp,0xc
c0006fe7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006feb:	50                   	push   eax
c0006fec:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff0:	55                   	push   ebp
c0006ff1:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ff5:	57                   	push   edi
c0006ff6:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006ffa:	56                   	push   esi
c0006ffb:	68 00 00 00 80       	push   0x80000000
c0007000:	e8 27 87 00 00       	call   c000f72c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007005:	83 c4 20             	add    esp,0x20
c0007008:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000700f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0007013:	0f 86 b7 fe ff ff    	jbe    c0006ed0 <Computer::detectFeatures()+0x40>
c0007019:	83 ec 0c             	sub    esp,0xc
c000701c:	50                   	push   eax
c000701d:	55                   	push   ebp
c000701e:	57                   	push   edi
c000701f:	56                   	push   esi
c0007020:	68 01 00 00 80       	push   0x80000001
c0007025:	e8 02 87 00 00       	call   c000f72c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702a:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007030:	83 c4 20             	add    esp,0x20
c0007033:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007038:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000703e:	e9 8d fe ff ff       	jmp    c0006ed0 <Computer::detectFeatures()+0x40>
c0007043:	e8 98 72 01 00       	call   c001e2e0 <absolutelyNoChanceInHell>
c0007048:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c000704e:	c1 e0 07             	shl    eax,0x7
c0007051:	83 e2 7f             	and    edx,0x7f
c0007054:	09 c2                	or     edx,eax
c0007056:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c000705c:	80 e2 80             	and    dl,0x80
c000705f:	0f 84 b4 fe ff ff    	je     c0006f19 <Computer::detectFeatures()+0x89>
c0007065:	e8 e6 6e 01 00       	call   c001df50 <avxDetect>
c000706a:	83 e0 01             	and    eax,0x1
c000706d:	c1 e0 05             	shl    eax,0x5
c0007070:	89 c2                	mov    edx,eax
c0007072:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007078:	83 e0 df             	and    eax,0xffffffdf
c000707b:	09 d0                	or     eax,edx
c000707d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007083:	83 c4 1c             	add    esp,0x1c
c0007086:	5b                   	pop    ebx
c0007087:	5e                   	pop    esi
c0007088:	5f                   	pop    edi
c0007089:	5d                   	pop    ebp
c000708a:	c3                   	ret    
c000708b:	83 ec 0c             	sub    esp,0xc
c000708e:	68 00 02 00 00       	push   0x200
c0007093:	e8 18 87 00 00       	call   c000f7b0 <CPU::cpuidCheckEDX(unsigned int)>
c0007098:	83 c4 10             	add    esp,0x10
c000709b:	89 c2                	mov    edx,eax
c000709d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070a3:	83 e2 01             	and    edx,0x1
c00070a6:	83 e0 fe             	and    eax,0xfffffffe
c00070a9:	09 d0                	or     eax,edx
c00070ab:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b1:	e9 15 ff ff ff       	jmp    c0006fcb <Computer::detectFeatures()+0x13b>

c00070b6 <Computer::displayFeatures()>:
c00070b6:	c3                   	ret    
c00070b7:	90                   	nop

c00070b8 <Computer::rdmsr(unsigned int)>:
c00070b8:	83 ec 0c             	sub    esp,0xc
c00070bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070bf:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070c6:	74 0a                	je     c00070d2 <Computer::rdmsr(unsigned int)+0x1a>
c00070c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070cc:	0f 32                	rdmsr  
c00070ce:	83 c4 0c             	add    esp,0xc
c00070d1:	c3                   	ret    
c00070d2:	83 ec 0c             	sub    esp,0xc
c00070d5:	68 b6 fa 01 c0       	push   0xc001fab6
c00070da:	e8 38 98 00 00       	call   c0010917 <KePanic(char const*)>
c00070df:	83 c4 10             	add    esp,0x10
c00070e2:	eb e4                	jmp    c00070c8 <Computer::rdmsr(unsigned int)+0x10>

c00070e4 <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070e4:	57                   	push   edi
c00070e5:	56                   	push   esi
c00070e6:	83 ec 04             	sub    esp,0x4
c00070e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070ed:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070f5:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070fc:	74 10                	je     c000710e <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c00070fe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007102:	89 f0                	mov    eax,esi
c0007104:	89 fa                	mov    edx,edi
c0007106:	0f 30                	wrmsr  
c0007108:	83 c4 04             	add    esp,0x4
c000710b:	5e                   	pop    esi
c000710c:	5f                   	pop    edi
c000710d:	c3                   	ret    
c000710e:	83 ec 0c             	sub    esp,0xc
c0007111:	68 bc fa 01 c0       	push   0xc001fabc
c0007116:	e8 fc 97 00 00       	call   c0010917 <KePanic(char const*)>
c000711b:	83 c4 10             	add    esp,0x10
c000711e:	eb de                	jmp    c00070fe <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007120 <Computer::shutdown()>:
c0007120:	83 ec 0c             	sub    esp,0xc
c0007123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007127:	8b 10                	mov    edx,DWORD PTR [eax]
c0007129:	6a 00                	push   0x0
c000712b:	6a 00                	push   0x0
c000712d:	6a 00                	push   0x0
c000712f:	50                   	push   eax
c0007130:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007133:	83 c4 1c             	add    esp,0x1c
c0007136:	c3                   	ret    
c0007137:	90                   	nop

c0007138 <Computer::restart()>:
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000713f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007141:	6a 00                	push   0x0
c0007143:	6a 00                	push   0x0
c0007145:	6a 01                	push   0x1
c0007147:	50                   	push   eax
c0007148:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000714b:	83 c4 1c             	add    esp,0x1c
c000714e:	c3                   	ret    
c000714f:	90                   	nop

c0007150 <Computer::sleep()>:
c0007150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007154:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000715a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000715e:	e9 65 80 00 00       	jmp    c000f1c8 <ACPI::sleep()>
c0007163:	90                   	nop

c0007164 <Computer::nmiEnabled()>:
c0007164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007168:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000716e:	c3                   	ret    
c000716f:	90                   	nop

c0007170 <Computer::readCMOS(unsigned char)>:
c0007170:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007174:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007178:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c000717f:	75 09                	jne    c000718a <Computer::readCMOS(unsigned char)+0x1a>
c0007181:	b2 80                	mov    dl,0x80
c0007183:	09 d0                	or     eax,edx
c0007185:	e6 70                	out    0x70,al
c0007187:	e4 71                	in     al,0x71
c0007189:	c3                   	ret    
c000718a:	31 d2                	xor    edx,edx
c000718c:	eb f5                	jmp    c0007183 <Computer::readCMOS(unsigned char)+0x13>

c000718e <Computer::enableNMI(bool)>:
c000718e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007196:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000719c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071a4:	eb ca                	jmp    c0007170 <Computer::readCMOS(unsigned char)>

c00071a6 <Computer::open(int, int, void*)>:
c00071a6:	56                   	push   esi
c00071a7:	53                   	push   ebx
c00071a8:	83 ec 10             	sub    esp,0x10
c00071ab:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071af:	f6 05 d0 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed0,0x4
c00071b6:	68 c2 fa 01 c0       	push   0xc001fac2
c00071bb:	0f 94 05 60 1f 02 c0 	sete   BYTE PTR ds:0xc0021f60
c00071c2:	e8 d3 90 00 00       	call   c001029a <KeSetBootMessage(char const*)>
c00071c7:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071ce:	e8 db 08 00 00       	call   c0007aae <malloc>
c00071d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00071d6:	89 c6                	mov    esi,eax
c00071d8:	e8 5f 7b 00 00       	call   c000ed3c <ACPI::ACPI()>
c00071dd:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071e3:	58                   	pop    eax
c00071e4:	5a                   	pop    edx
c00071e5:	56                   	push   esi
c00071e6:	53                   	push   ebx
c00071e7:	e8 32 4c 00 00       	call   c000be1e <Device::addChild(Device*)>
c00071ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071ef:	e8 9c fc ff ff       	call   c0006e90 <Computer::detectFeatures()>
c00071f4:	59                   	pop    ecx
c00071f5:	5e                   	pop    esi
c00071f6:	6a 01                	push   0x1
c00071f8:	53                   	push   ebx
c00071f9:	e8 90 ff ff ff       	call   c000718e <Computer::enableNMI(bool)>
c00071fe:	c7 04 24 da fa 01 c0 	mov    DWORD PTR [esp],0xc001fada
c0007205:	e8 90 90 00 00       	call   c001029a <KeSetBootMessage(char const*)>
c000720a:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007211:	e8 98 08 00 00       	call   c0007aae <malloc>
c0007216:	89 04 24             	mov    DWORD PTR [esp],eax
c0007219:	89 c6                	mov    esi,eax
c000721b:	e8 48 86 00 00       	call   c000f868 <CPU::CPU()>
c0007220:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007226:	58                   	pop    eax
c0007227:	5a                   	pop    edx
c0007228:	56                   	push   esi
c0007229:	53                   	push   ebx
c000722a:	e8 ef 4b 00 00       	call   c000be1e <Device::addChild(Device*)>
c000722f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007235:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007239:	8b 10                	mov    edx,DWORD PTR [eax]
c000723b:	51                   	push   ecx
c000723c:	6a 00                	push   0x0
c000723e:	6a 00                	push   0x0
c0007240:	50                   	push   eax
c0007241:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007244:	83 c4 14             	add    esp,0x14
c0007247:	68 88 fb 01 c0       	push   0xc001fb88
c000724c:	e8 49 90 00 00       	call   c001029a <KeSetBootMessage(char const*)>
c0007251:	e8 06 fd 00 00       	call   c0016f5c <HalInitialiseCoprocessor()>
c0007256:	c7 04 24 f4 fa 01 c0 	mov    DWORD PTR [esp],0xc001faf4
c000725d:	e8 38 90 00 00       	call   c001029a <KeSetBootMessage(char const*)>
c0007262:	c7 04 24 a3 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca3
c0007269:	e8 3a dd 00 00       	call   c0014fa8 <setupMultitasking(void (*)())>
c000726e:	83 c4 14             	add    esp,0x14
c0007271:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007276:	5b                   	pop    ebx
c0007277:	5e                   	pop    esi
c0007278:	c3                   	ret    
c0007279:	90                   	nop

c000727a <Computer::disableNMI()>:
c000727a:	6a 00                	push   0x0
c000727c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007280:	50                   	push   eax
c0007281:	e8 08 ff ff ff       	call   c000718e <Computer::enableNMI(bool)>
c0007286:	5a                   	pop    edx
c0007287:	59                   	pop    ecx
c0007288:	c3                   	ret    
c0007289:	90                   	nop

c000728a <Computer::writeCMOS(unsigned char, unsigned char)>:
c000728a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000728e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007292:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007296:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c000729d:	75 0b                	jne    c00072aa <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c000729f:	b1 80                	mov    cl,0x80
c00072a1:	09 c8                	or     eax,ecx
c00072a3:	e6 70                	out    0x70,al
c00072a5:	88 d0                	mov    al,dl
c00072a7:	e6 71                	out    0x71,al
c00072a9:	c3                   	ret    
c00072aa:	31 c9                	xor    ecx,ecx
c00072ac:	eb f3                	jmp    c00072a1 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072ae <Computer::handleNMI()>:
c00072ae:	56                   	push   esi
c00072af:	53                   	push   ebx
c00072b0:	83 ec 10             	sub    esp,0x10
c00072b3:	e4 92                	in     al,0x92
c00072b5:	89 c6                	mov    esi,eax
c00072b7:	e4 61                	in     al,0x61
c00072b9:	68 0f fb 01 c0       	push   0xc001fb0f
c00072be:	88 c3                	mov    bl,al
c00072c0:	e8 25 37 00 00       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c00072c5:	83 c4 10             	add    esp,0x10
c00072c8:	83 e6 10             	and    esi,0x10
c00072cb:	75 10                	jne    c00072dd <Computer::handleNMI()+0x2f>
c00072cd:	f6 c3 40             	test   bl,0x40
c00072d0:	75 20                	jne    c00072f2 <Computer::handleNMI()+0x44>
c00072d2:	80 e3 80             	and    bl,0x80
c00072d5:	75 30                	jne    c0007307 <Computer::handleNMI()+0x59>
c00072d7:	83 c4 04             	add    esp,0x4
c00072da:	5b                   	pop    ebx
c00072db:	5e                   	pop    esi
c00072dc:	c3                   	ret    
c00072dd:	83 ec 0c             	sub    esp,0xc
c00072e0:	68 20 fb 01 c0       	push   0xc001fb20
c00072e5:	e8 2d 96 00 00       	call   c0010917 <KePanic(char const*)>
c00072ea:	83 c4 10             	add    esp,0x10
c00072ed:	f6 c3 40             	test   bl,0x40
c00072f0:	74 e0                	je     c00072d2 <Computer::handleNMI()+0x24>
c00072f2:	83 ec 0c             	sub    esp,0xc
c00072f5:	68 2d fb 01 c0       	push   0xc001fb2d
c00072fa:	e8 18 96 00 00       	call   c0010917 <KePanic(char const*)>
c00072ff:	83 c4 10             	add    esp,0x10
c0007302:	80 e3 80             	and    bl,0x80
c0007305:	74 d0                	je     c00072d7 <Computer::handleNMI()+0x29>
c0007307:	c7 44 24 10 37 fb 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fb37
c000730f:	83 c4 04             	add    esp,0x4
c0007312:	5b                   	pop    ebx
c0007313:	5e                   	pop    esi
c0007314:	e9 fe 95 00 00       	jmp    c0010917 <KePanic(char const*)>
c0007319:	90                   	nop

c000731a <GDTEntry::setBase(unsigned int)>:
c000731a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000731e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007322:	89 c1                	mov    ecx,eax
c0007324:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007328:	c1 e9 10             	shr    ecx,0x10
c000732b:	c1 e8 18             	shr    eax,0x18
c000732e:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007331:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007334:	c3                   	ret    
c0007335:	90                   	nop

c0007336 <GDTEntry::setLimit(unsigned int)>:
c0007336:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000733a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000733e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007341:	66 89 01             	mov    WORD PTR [ecx],ax
c0007344:	83 e2 f0             	and    edx,0xfffffff0
c0007347:	c1 e8 10             	shr    eax,0x10
c000734a:	83 e0 0f             	and    eax,0xf
c000734d:	09 d0                	or     eax,edx
c000734f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007352:	c3                   	ret    
c0007353:	90                   	nop

c0007354 <GDT::GDT()>:
c0007354:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007358:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000735e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007362:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007368:	90                   	nop
c0007369:	c3                   	ret    

c000736a <GDT::addEntry(GDTEntry)>:
c000736a:	53                   	push   ebx
c000736b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000736f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007373:	8b 02                	mov    eax,DWORD PTR [edx]
c0007375:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007379:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000737d:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007381:	8d 48 01             	lea    ecx,[eax+0x1]
c0007384:	c1 e0 03             	shl    eax,0x3
c0007387:	89 0a                	mov    DWORD PTR [edx],ecx
c0007389:	5b                   	pop    ebx
c000738a:	c3                   	ret    
c000738b:	90                   	nop

c000738c <GDT::getNumberOfEntries()>:
c000738c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007390:	8b 00                	mov    eax,DWORD PTR [eax]
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::flush()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 10                	mov    edx,DWORD PTR [eax]
c000739a:	83 c0 04             	add    eax,0x4
c000739d:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073a4:	a3 c2 4e 02 c0       	mov    ds:0xc0024ec2,eax
c00073a9:	66 89 15 c0 4e 02 c0 	mov    WORD PTR ds:0xc0024ec0,dx
c00073b0:	e9 a5 8f ff ff       	jmp    c000035a <loadGDT>
c00073b5:	90                   	nop

c00073b6 <GDT::setup()>:
c00073b6:	57                   	push   edi
c00073b7:	56                   	push   esi
c00073b8:	53                   	push   ebx
c00073b9:	83 ec 30             	sub    esp,0x30
c00073bc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c0:	6a 00                	push   0x0
c00073c2:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073c6:	56                   	push   esi
c00073c7:	e8 4e ff ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c00073cc:	6a 00                	push   0x0
c00073ce:	56                   	push   esi
c00073cf:	e8 62 ff ff ff       	call   c0007336 <GDTEntry::setLimit(unsigned int)>
c00073d4:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073dc:	6a 00                	push   0x0
c00073de:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073e2:	56                   	push   esi
c00073e3:	e8 32 ff ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c00073e8:	68 ff ff ff 00       	push   0xffffff
c00073ed:	56                   	push   esi
c00073ee:	e8 43 ff ff ff       	call   c0007336 <GDTEntry::setLimit(unsigned int)>
c00073f3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00073fb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00073ff:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007403:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007408:	0d 00 9a c0 00       	or     eax,0xc09a00
c000740d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007411:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0007415:	89 f8                	mov    eax,edi
c0007417:	89 fa                	mov    edx,edi
c0007419:	80 e4 f7             	and    ah,0xf7
c000741c:	80 ce 60             	or     dh,0x60
c000741f:	89 c7                	mov    edi,eax
c0007421:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007425:	80 cc 60             	or     ah,0x60
c0007428:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000742c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007430:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007434:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007438:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000743c:	83 c4 20             	add    esp,0x20
c000743f:	6a 00                	push   0x0
c0007441:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007445:	50                   	push   eax
c0007446:	e8 cf fe ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c000744b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000744f:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007453:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007457:	83 e0 3f             	and    eax,0x3f
c000745a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000745e:	6a 00                	push   0x0
c0007460:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007464:	50                   	push   eax
c0007465:	e8 b0 fe ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c000746a:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000746e:	83 e0 3f             	and    eax,0x3f
c0007471:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0007475:	83 c4 0c             	add    esp,0xc
c0007478:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000747c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007480:	53                   	push   ebx
c0007481:	e8 e4 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c0007486:	83 c4 0c             	add    esp,0xc
c0007489:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000748d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007491:	53                   	push   ebx
c0007492:	e8 d3 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c0007497:	83 c4 0c             	add    esp,0xc
c000749a:	57                   	push   edi
c000749b:	56                   	push   esi
c000749c:	53                   	push   ebx
c000749d:	e8 c8 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074a2:	83 c4 0c             	add    esp,0xc
c00074a5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074a9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074ad:	53                   	push   ebx
c00074ae:	e8 b7 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074b3:	83 c4 0c             	add    esp,0xc
c00074b6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074ba:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074be:	53                   	push   ebx
c00074bf:	e8 a6 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074c4:	83 c4 0c             	add    esp,0xc
c00074c7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074cf:	53                   	push   ebx
c00074d0:	e8 95 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074d5:	83 c4 0c             	add    esp,0xc
c00074d8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074dc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e0:	53                   	push   ebx
c00074e1:	e8 84 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074e9:	e8 a6 fe ff ff       	call   c0007394 <GDT::flush()>
c00074ee:	83 c4 40             	add    esp,0x40
c00074f1:	5b                   	pop    ebx
c00074f2:	5e                   	pop    esi
c00074f3:	5f                   	pop    edi
c00074f4:	c3                   	ret    

c00074f5 <idleFunction(void*)>:
c00074f5:	83 ec 0c             	sub    esp,0xc
c00074f8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00074fd:	48                   	dec    eax
c00074fe:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007503:	75 01                	jne    c0007506 <idleFunction(void*)+0x11>
c0007505:	fb                   	sti    
c0007506:	e8 1d f7 00 00       	call   c0016c28 <HalSystemIdle()>
c000750b:	e8 d2 73 01 00       	call   c001e8e2 <idleCommon()>
c0007510:	eb f4                	jmp    c0007506 <idleFunction(void*)+0x11>
c0007512:	66 90                	xchg   ax,ax

c0007514 <IDTEntry::IDTEntry(bool)>:
c0007514:	53                   	push   ebx
c0007515:	83 ec 04             	sub    esp,0x4
c0007518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000751c:	88 04 24             	mov    BYTE PTR [esp],al
c000751f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007523:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007529:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007538:	83 e2 f0             	and    edx,0xfffffff0
c000753b:	83 ca 0e             	or     edx,0xe
c000753e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007541:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007545:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007548:	83 e2 ef             	and    edx,0xffffffef
c000754b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000754e:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0007552:	85 c0                	test   eax,eax
c0007554:	74 06                	je     c000755c <IDTEntry::IDTEntry(bool)+0x48>
c0007556:	b2 03                	mov    dl,0x3
c0007558:	eb 06                	jmp    c0007560 <IDTEntry::IDTEntry(bool)+0x4c>
c000755a:	66 90                	xchg   ax,ax
c000755c:	b2 00                	mov    dl,0x0
c000755e:	66 90                	xchg   ax,ax
c0007560:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007564:	83 e2 03             	and    edx,0x3
c0007567:	89 d3                	mov    ebx,edx
c0007569:	c1 e3 05             	shl    ebx,0x5
c000756c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000756f:	83 e2 9f             	and    edx,0xffffff9f
c0007572:	88 d1                	mov    cl,dl
c0007574:	88 da                	mov    dl,bl
c0007576:	09 ca                	or     edx,ecx
c0007578:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000757b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000757f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007582:	83 ca 80             	or     edx,0xffffff80
c0007585:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007588:	90                   	nop
c0007589:	83 c4 04             	add    esp,0x4
c000758c:	5b                   	pop    ebx
c000758d:	c3                   	ret    

c000758e <IDTEntry::setOffset(unsigned int)>:
c000758e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007592:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007596:	66 89 02             	mov    WORD PTR [edx],ax
c0007599:	c1 e8 10             	shr    eax,0x10
c000759c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a0:	c3                   	ret    
c00075a1:	90                   	nop
c00075a2:	66 90                	xchg   ax,ax

c00075a4 <IDT::IDT()>:
c00075a4:	90                   	nop
c00075a5:	c3                   	ret    

c00075a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075aa:	83 c0 30             	add    eax,0x30
c00075ad:	c3                   	ret    

c00075ae <IDT::addEntry(IDTEntry, int)>:
c00075ae:	53                   	push   ebx
c00075af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075bf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075c2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075c6:	5b                   	pop    ebx
c00075c7:	c3                   	ret    

c00075c8 <IDT::addEntry(int, void (*)(), bool)>:
c00075c8:	53                   	push   ebx
c00075c9:	83 ec 10             	sub    esp,0x10
c00075cc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d1:	50                   	push   eax
c00075d2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075d6:	53                   	push   ebx
c00075d7:	e8 38 ff ff ff       	call   c0007514 <IDTEntry::IDTEntry(bool)>
c00075dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e0:	53                   	push   ebx
c00075e1:	e8 a8 ff ff ff       	call   c000758e <IDTEntry::setOffset(unsigned int)>
c00075e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075ee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075f6:	e8 b3 ff ff ff       	call   c00075ae <IDT::addEntry(IDTEntry, int)>
c00075fb:	83 c4 30             	add    esp,0x30
c00075fe:	5b                   	pop    ebx
c00075ff:	c3                   	ret    

c0007600 <IDT::flush()>:
c0007600:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007604:	66 c7 05 c8 4e 02 c0 ff 07 	mov    WORD PTR ds:0xc0024ec8,0x7ff
c000760d:	a3 ca 4e 02 c0       	mov    ds:0xc0024eca,eax
c0007612:	0f 01 1d c8 4e 02 c0 	lidtd  ds:0xc0024ec8
c0007619:	c3                   	ret    

c000761a <IDT::setup()>:
c000761a:	57                   	push   edi
c000761b:	56                   	push   esi
c000761c:	53                   	push   ebx
c000761d:	83 ec 10             	sub    esp,0x10
c0007620:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007624:	6a 00                	push   0x0
c0007626:	68 e0 df 01 c0       	push   0xc001dfe0
c000762b:	6a 00                	push   0x0
c000762d:	53                   	push   ebx
c000762e:	e8 95 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007633:	6a 00                	push   0x0
c0007635:	68 f0 df 01 c0       	push   0xc001dff0
c000763a:	6a 01                	push   0x1
c000763c:	53                   	push   ebx
c000763d:	e8 86 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007642:	83 c4 20             	add    esp,0x20
c0007645:	6a 00                	push   0x0
c0007647:	68 fa df 01 c0       	push   0xc001dffa
c000764c:	6a 02                	push   0x2
c000764e:	53                   	push   ebx
c000764f:	e8 74 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007654:	6a 00                	push   0x0
c0007656:	68 04 e0 01 c0       	push   0xc001e004
c000765b:	6a 03                	push   0x3
c000765d:	53                   	push   ebx
c000765e:	e8 65 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007663:	83 c4 20             	add    esp,0x20
c0007666:	6a 00                	push   0x0
c0007668:	68 0e e0 01 c0       	push   0xc001e00e
c000766d:	6a 04                	push   0x4
c000766f:	53                   	push   ebx
c0007670:	e8 53 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007675:	6a 00                	push   0x0
c0007677:	68 18 e0 01 c0       	push   0xc001e018
c000767c:	6a 05                	push   0x5
c000767e:	53                   	push   ebx
c000767f:	e8 44 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007684:	83 c4 20             	add    esp,0x20
c0007687:	6a 00                	push   0x0
c0007689:	68 22 e0 01 c0       	push   0xc001e022
c000768e:	6a 06                	push   0x6
c0007690:	53                   	push   ebx
c0007691:	e8 32 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007696:	6a 00                	push   0x0
c0007698:	68 2c e0 01 c0       	push   0xc001e02c
c000769d:	6a 07                	push   0x7
c000769f:	53                   	push   ebx
c00076a0:	e8 23 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076a5:	83 c4 20             	add    esp,0x20
c00076a8:	6a 00                	push   0x0
c00076aa:	68 36 e0 01 c0       	push   0xc001e036
c00076af:	6a 08                	push   0x8
c00076b1:	53                   	push   ebx
c00076b2:	e8 11 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076b7:	6a 00                	push   0x0
c00076b9:	68 3e e0 01 c0       	push   0xc001e03e
c00076be:	6a 09                	push   0x9
c00076c0:	53                   	push   ebx
c00076c1:	e8 02 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076c6:	83 c4 20             	add    esp,0x20
c00076c9:	6a 00                	push   0x0
c00076cb:	68 48 e0 01 c0       	push   0xc001e048
c00076d0:	6a 0a                	push   0xa
c00076d2:	53                   	push   ebx
c00076d3:	e8 f0 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076d8:	6a 00                	push   0x0
c00076da:	68 50 e0 01 c0       	push   0xc001e050
c00076df:	6a 0b                	push   0xb
c00076e1:	53                   	push   ebx
c00076e2:	e8 e1 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076e7:	83 c4 20             	add    esp,0x20
c00076ea:	6a 00                	push   0x0
c00076ec:	68 58 e0 01 c0       	push   0xc001e058
c00076f1:	6a 0c                	push   0xc
c00076f3:	53                   	push   ebx
c00076f4:	e8 cf fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076f9:	6a 00                	push   0x0
c00076fb:	68 60 e0 01 c0       	push   0xc001e060
c0007700:	6a 0d                	push   0xd
c0007702:	53                   	push   ebx
c0007703:	e8 c0 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007708:	83 c4 20             	add    esp,0x20
c000770b:	6a 00                	push   0x0
c000770d:	68 7a e0 01 c0       	push   0xc001e07a
c0007712:	6a 0e                	push   0xe
c0007714:	53                   	push   ebx
c0007715:	e8 ae fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000771a:	6a 00                	push   0x0
c000771c:	68 82 e0 01 c0       	push   0xc001e082
c0007721:	6a 0f                	push   0xf
c0007723:	53                   	push   ebx
c0007724:	e8 9f fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007729:	83 c4 20             	add    esp,0x20
c000772c:	6a 00                	push   0x0
c000772e:	68 8c e0 01 c0       	push   0xc001e08c
c0007733:	6a 10                	push   0x10
c0007735:	53                   	push   ebx
c0007736:	e8 8d fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000773b:	6a 00                	push   0x0
c000773d:	68 96 e0 01 c0       	push   0xc001e096
c0007742:	6a 11                	push   0x11
c0007744:	53                   	push   ebx
c0007745:	e8 7e fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000774a:	83 c4 20             	add    esp,0x20
c000774d:	6a 00                	push   0x0
c000774f:	68 a0 e0 01 c0       	push   0xc001e0a0
c0007754:	6a 12                	push   0x12
c0007756:	53                   	push   ebx
c0007757:	e8 6c fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000775c:	6a 01                	push   0x1
c000775e:	68 3a e1 01 c0       	push   0xc001e13a
c0007763:	6a 60                	push   0x60
c0007765:	53                   	push   ebx
c0007766:	e8 5d fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000776b:	83 c4 20             	add    esp,0x20
c000776e:	6a 00                	push   0x0
c0007770:	68 41 e1 01 c0       	push   0xc001e141
c0007775:	6a 20                	push   0x20
c0007777:	53                   	push   ebx
c0007778:	e8 4b fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000777d:	6a 00                	push   0x0
c000777f:	68 2c e1 01 c0       	push   0xc001e12c
c0007784:	6a 21                	push   0x21
c0007786:	53                   	push   ebx
c0007787:	e8 3c fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000778c:	83 c4 20             	add    esp,0x20
c000778f:	6a 00                	push   0x0
c0007791:	68 33 e1 01 c0       	push   0xc001e133
c0007796:	6a 22                	push   0x22
c0007798:	53                   	push   ebx
c0007799:	e8 2a fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000779e:	6a 00                	push   0x0
c00077a0:	68 aa e0 01 c0       	push   0xc001e0aa
c00077a5:	6a 23                	push   0x23
c00077a7:	53                   	push   ebx
c00077a8:	e8 1b fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077ad:	83 c4 20             	add    esp,0x20
c00077b0:	6a 00                	push   0x0
c00077b2:	68 b4 e0 01 c0       	push   0xc001e0b4
c00077b7:	6a 24                	push   0x24
c00077b9:	53                   	push   ebx
c00077ba:	e8 09 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077bf:	6a 00                	push   0x0
c00077c1:	68 be e0 01 c0       	push   0xc001e0be
c00077c6:	6a 25                	push   0x25
c00077c8:	53                   	push   ebx
c00077c9:	e8 fa fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077ce:	83 c4 20             	add    esp,0x20
c00077d1:	6a 00                	push   0x0
c00077d3:	68 c8 e0 01 c0       	push   0xc001e0c8
c00077d8:	6a 26                	push   0x26
c00077da:	53                   	push   ebx
c00077db:	e8 e8 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077e0:	6a 00                	push   0x0
c00077e2:	68 d2 e0 01 c0       	push   0xc001e0d2
c00077e7:	6a 27                	push   0x27
c00077e9:	53                   	push   ebx
c00077ea:	e8 d9 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077ef:	83 c4 20             	add    esp,0x20
c00077f2:	6a 00                	push   0x0
c00077f4:	68 dc e0 01 c0       	push   0xc001e0dc
c00077f9:	6a 28                	push   0x28
c00077fb:	53                   	push   ebx
c00077fc:	e8 c7 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007801:	6a 00                	push   0x0
c0007803:	68 e6 e0 01 c0       	push   0xc001e0e6
c0007808:	6a 29                	push   0x29
c000780a:	53                   	push   ebx
c000780b:	e8 b8 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007810:	83 c4 20             	add    esp,0x20
c0007813:	6a 00                	push   0x0
c0007815:	68 f0 e0 01 c0       	push   0xc001e0f0
c000781a:	6a 2a                	push   0x2a
c000781c:	53                   	push   ebx
c000781d:	e8 a6 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007822:	6a 00                	push   0x0
c0007824:	68 fa e0 01 c0       	push   0xc001e0fa
c0007829:	6a 2b                	push   0x2b
c000782b:	53                   	push   ebx
c000782c:	e8 97 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007831:	83 c4 20             	add    esp,0x20
c0007834:	6a 00                	push   0x0
c0007836:	68 04 e1 01 c0       	push   0xc001e104
c000783b:	6a 2c                	push   0x2c
c000783d:	53                   	push   ebx
c000783e:	e8 85 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007843:	6a 00                	push   0x0
c0007845:	68 0e e1 01 c0       	push   0xc001e10e
c000784a:	6a 2d                	push   0x2d
c000784c:	53                   	push   ebx
c000784d:	e8 76 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007852:	83 c4 20             	add    esp,0x20
c0007855:	6a 00                	push   0x0
c0007857:	68 18 e1 01 c0       	push   0xc001e118
c000785c:	6a 2e                	push   0x2e
c000785e:	53                   	push   ebx
c000785f:	e8 64 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007864:	6a 00                	push   0x0
c0007866:	68 22 e1 01 c0       	push   0xc001e122
c000786b:	6a 2f                	push   0x2f
c000786d:	53                   	push   ebx
c000786e:	e8 55 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007873:	83 c4 20             	add    esp,0x20
c0007876:	6a 00                	push   0x0
c0007878:	68 7c e2 01 c0       	push   0xc001e27c
c000787d:	6a 30                	push   0x30
c000787f:	53                   	push   ebx
c0007880:	e8 43 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007885:	6a 00                	push   0x0
c0007887:	68 86 e2 01 c0       	push   0xc001e286
c000788c:	6a 31                	push   0x31
c000788e:	53                   	push   ebx
c000788f:	e8 34 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007894:	83 c4 20             	add    esp,0x20
c0007897:	6a 00                	push   0x0
c0007899:	68 90 e2 01 c0       	push   0xc001e290
c000789e:	6a 32                	push   0x32
c00078a0:	53                   	push   ebx
c00078a1:	e8 22 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078a6:	6a 00                	push   0x0
c00078a8:	68 9a e2 01 c0       	push   0xc001e29a
c00078ad:	6a 33                	push   0x33
c00078af:	53                   	push   ebx
c00078b0:	e8 13 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078b5:	83 c4 20             	add    esp,0x20
c00078b8:	6a 00                	push   0x0
c00078ba:	68 a4 e2 01 c0       	push   0xc001e2a4
c00078bf:	6a 34                	push   0x34
c00078c1:	53                   	push   ebx
c00078c2:	e8 01 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078c7:	6a 00                	push   0x0
c00078c9:	68 ae e2 01 c0       	push   0xc001e2ae
c00078ce:	6a 35                	push   0x35
c00078d0:	53                   	push   ebx
c00078d1:	e8 f2 fc ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078d6:	83 c4 20             	add    esp,0x20
c00078d9:	6a 00                	push   0x0
c00078db:	68 b8 e2 01 c0       	push   0xc001e2b8
c00078e0:	6a 36                	push   0x36
c00078e2:	53                   	push   ebx
c00078e3:	e8 e0 fc ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078e8:	6a 00                	push   0x0
c00078ea:	68 c2 e2 01 c0       	push   0xc001e2c2
c00078ef:	6a 37                	push   0x37
c00078f1:	53                   	push   ebx
c00078f2:	e8 d1 fc ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078f7:	83 c4 1c             	add    esp,0x1c
c00078fa:	6a 03                	push   0x3
c00078fc:	6a 02                	push   0x2
c00078fe:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007904:	e8 01 25 00 00       	call   c0009e0a <VAS::allocatePages(int, int)>
c0007909:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007910:	89 c6                	mov    esi,eax
c0007912:	e8 97 01 00 00       	call   c0007aae <malloc>
c0007917:	81 c6 00 20 00 00    	add    esi,0x2000
c000791d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007920:	89 c7                	mov    edi,eax
c0007922:	e8 2d 16 00 00       	call   c0008f54 <TSS::TSS()>
c0007927:	83 c4 0c             	add    esp,0xc
c000792a:	68 36 e0 01 c0       	push   0xc001e036
c000792f:	56                   	push   esi
c0007930:	57                   	push   edi
c0007931:	e8 62 16 00 00       	call   c0008f98 <TSS::setup(unsigned long, unsigned long)>
c0007936:	89 c6                	mov    esi,eax
c0007938:	58                   	pop    eax
c0007939:	5a                   	pop    edx
c000793a:	6a 00                	push   0x0
c000793c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007940:	50                   	push   eax
c0007941:	e8 ce fb ff ff       	call   c0007514 <IDTEntry::IDTEntry(bool)>
c0007946:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000794a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000794f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007956:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000795c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007960:	80 ce 05             	or     dh,0x5
c0007963:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007966:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000796a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000796e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007971:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007974:	e8 87 fc ff ff       	call   c0007600 <IDT::flush()>
c0007979:	83 c4 20             	add    esp,0x20
c000797c:	5b                   	pop    ebx
c000797d:	5e                   	pop    esi
c000797e:	5f                   	pop    edi
c000797f:	c3                   	ret    

c0007980 <sbrk>:
c0007980:	55                   	push   ebp
c0007981:	57                   	push   edi
c0007982:	56                   	push   esi
c0007983:	53                   	push   ebx
c0007984:	83 ec 1c             	sub    esp,0x1c
c0007987:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000798b:	85 c0                	test   eax,eax
c000798d:	74 61                	je     c00079f0 <sbrk+0x70>
c000798f:	78 66                	js     c00079f7 <sbrk+0x77>
c0007991:	8b 15 48 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f48
c0007997:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000799b:	05 ff 0f 00 00       	add    eax,0xfff
c00079a0:	89 c5                	mov    ebp,eax
c00079a2:	78 6b                	js     c0007a0f <sbrk+0x8f>
c00079a4:	c1 fd 0c             	sar    ebp,0xc
c00079a7:	bb 00 00 00 00       	mov    ebx,0x0
c00079ac:	8b 35 b0 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fb0
c00079b2:	8b 3d 48 1f 02 c0    	mov    edi,DWORD PTR ds:0xc0021f48
c00079b8:	e8 f6 03 00 00       	call   c0007db3 <Phys::allocatePage()>
c00079bd:	68 01 04 00 00       	push   0x401
c00079c2:	57                   	push   edi
c00079c3:	50                   	push   eax
c00079c4:	56                   	push   esi
c00079c5:	e8 3a 23 00 00       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079ca:	81 05 48 1f 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0021f48,0x1000
c00079d4:	83 c3 01             	add    ebx,0x1
c00079d7:	83 c4 10             	add    esp,0x10
c00079da:	39 dd                	cmp    ebp,ebx
c00079dc:	75 ce                	jne    c00079ac <sbrk+0x2c>
c00079de:	0f 20 d8             	mov    eax,cr3
c00079e1:	0f 22 d8             	mov    cr3,eax
c00079e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079e8:	83 c4 1c             	add    esp,0x1c
c00079eb:	5b                   	pop    ebx
c00079ec:	5e                   	pop    esi
c00079ed:	5f                   	pop    edi
c00079ee:	5d                   	pop    ebp
c00079ef:	c3                   	ret    
c00079f0:	a1 48 1f 02 c0       	mov    eax,ds:0xc0021f48
c00079f5:	eb f1                	jmp    c00079e8 <sbrk+0x68>
c00079f7:	83 ec 08             	sub    esp,0x8
c00079fa:	50                   	push   eax
c00079fb:	68 d8 fb 01 c0       	push   0xc001fbd8
c0007a00:	e8 e5 2f 00 00       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0007a05:	83 c4 10             	add    esp,0x10
c0007a08:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a0d:	eb d9                	jmp    c00079e8 <sbrk+0x68>
c0007a0f:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a15:	eb 8d                	jmp    c00079a4 <sbrk+0x24>

c0007a17 <mmap>:
c0007a17:	83 ec 18             	sub    esp,0x18
c0007a1a:	68 08 fc 01 c0       	push   0xc001fc08
c0007a1f:	e8 f3 8e 00 00       	call   c0010917 <KePanic(char const*)>
c0007a24:	b8 00 00 00 00       	mov    eax,0x0
c0007a29:	83 c4 1c             	add    esp,0x1c
c0007a2c:	c3                   	ret    

c0007a2d <munmap>:
c0007a2d:	83 ec 18             	sub    esp,0x18
c0007a30:	68 0d fc 01 c0       	push   0xc001fc0d
c0007a35:	e8 dd 8e 00 00       	call   c0010917 <KePanic(char const*)>
c0007a3a:	b8 00 00 00 00       	mov    eax,0x0
c0007a3f:	83 c4 1c             	add    esp,0x1c
c0007a42:	c3                   	ret    

c0007a43 <liballoc_lock()>:
c0007a43:	fa                   	cli    
c0007a44:	83 05 68 81 02 c0 01 	add    DWORD PTR ds:0xc0028168,0x1
c0007a4b:	b8 00 00 00 00       	mov    eax,0x0
c0007a50:	c3                   	ret    

c0007a51 <liballoc_unlock()>:
c0007a51:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007a56:	83 e8 01             	sub    eax,0x1
c0007a59:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007a5e:	75 01                	jne    c0007a61 <liballoc_unlock()+0x10>
c0007a60:	fb                   	sti    
c0007a61:	b8 00 00 00 00       	mov    eax,0x0
c0007a66:	c3                   	ret    

c0007a67 <liballoc_alloc(int)>:
c0007a67:	83 ec 10             	sub    esp,0x10
c0007a6a:	6a 01                	push   0x1
c0007a6c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a70:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007a76:	e8 8f 23 00 00       	call   c0009e0a <VAS::allocatePages(int, int)>
c0007a7b:	83 c4 1c             	add    esp,0x1c
c0007a7e:	c3                   	ret    

c0007a7f <liballoc_free(void*, int)>:
c0007a7f:	83 ec 14             	sub    esp,0x14
c0007a82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a86:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007a8c:	e8 bb 1f 00 00       	call   c0009a4c <VAS::freeAllocatedPages(unsigned long)>
c0007a91:	b8 00 00 00 00       	mov    eax,0x0
c0007a96:	83 c4 1c             	add    esp,0x1c
c0007a99:	c3                   	ret    

c0007a9a <realloc>:
c0007a9a:	83 ec 14             	sub    esp,0x14
c0007a9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa5:	e8 3e 9b ff ff       	call   c00015e8 <dlrealloc>
c0007aaa:	83 c4 1c             	add    esp,0x1c
c0007aad:	c3                   	ret    

c0007aae <malloc>:
c0007aae:	83 ec 18             	sub    esp,0x18
c0007ab1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ab5:	e8 f1 95 ff ff       	call   c00010ab <dlmalloc>
c0007aba:	83 c4 1c             	add    esp,0x1c
c0007abd:	c3                   	ret    

c0007abe <free>:
c0007abe:	83 ec 18             	sub    esp,0x18
c0007ac1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac5:	e8 89 92 ff ff       	call   c0000d53 <dlfree>
c0007aca:	83 c4 1c             	add    esp,0x1c
c0007acd:	c3                   	ret    

c0007ace <rfree>:
c0007ace:	83 ec 18             	sub    esp,0x18
c0007ad1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ad5:	e8 79 92 ff ff       	call   c0000d53 <dlfree>
c0007ada:	83 c4 1c             	add    esp,0x1c
c0007add:	c3                   	ret    

c0007ade <calloc>:
c0007ade:	56                   	push   esi
c0007adf:	53                   	push   ebx
c0007ae0:	83 ec 10             	sub    esp,0x10
c0007ae3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007ae7:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007aec:	53                   	push   ebx
c0007aed:	e8 bc ff ff ff       	call   c0007aae <malloc>
c0007af2:	89 c6                	mov    esi,eax
c0007af4:	83 c4 0c             	add    esp,0xc
c0007af7:	53                   	push   ebx
c0007af8:	6a 00                	push   0x0
c0007afa:	50                   	push   eax
c0007afb:	e8 f0 89 ff ff       	call   c00004f0 <memset>
c0007b00:	89 f0                	mov    eax,esi
c0007b02:	83 c4 14             	add    esp,0x14
c0007b05:	5b                   	pop    ebx
c0007b06:	5e                   	pop    esi
c0007b07:	c3                   	ret    

c0007b08 <KeEntryPoint>:
c0007b08:	57                   	push   edi
c0007b09:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b0e:	56                   	push   esi
c0007b0f:	89 fa                	mov    edx,edi
c0007b11:	53                   	push   ebx
c0007b12:	31 f6                	xor    esi,esi
c0007b14:	83 ec 2c             	sub    esp,0x2c
c0007b17:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b1c:	a3 d0 4e 02 c0       	mov    ds:0xc0024ed0,eax
c0007b21:	89 f0                	mov    eax,esi
c0007b23:	ee                   	out    dx,al
c0007b24:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b29:	b0 80                	mov    al,0x80
c0007b2b:	89 da                	mov    edx,ebx
c0007b2d:	ee                   	out    dx,al
c0007b2e:	b1 03                	mov    cl,0x3
c0007b30:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b35:	88 c8                	mov    al,cl
c0007b37:	ee                   	out    dx,al
c0007b38:	89 f0                	mov    eax,esi
c0007b3a:	89 fa                	mov    edx,edi
c0007b3c:	ee                   	out    dx,al
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	89 da                	mov    edx,ebx
c0007b41:	ee                   	out    dx,al
c0007b42:	b0 c7                	mov    al,0xc7
c0007b44:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 0b                	mov    al,0xb
c0007b4c:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b51:	ee                   	out    dx,al
c0007b52:	68 14 fc 01 c0       	push   0xc001fc14
c0007b57:	e8 8e 2e 00 00       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0007b5c:	e8 c4 86 00 00       	call   c0010225 <KeDisplaySplashScreen()>
c0007b61:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b66:	05 ff 0f 00 00       	add    eax,0xfff
c0007b6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b70:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b73:	e8 a9 03 00 00       	call   c0007f21 <Phys::physicalMemorySetup(unsigned int)>
c0007b78:	e8 7e 1c 00 00       	call   c00097fb <Virt::virtualMemorySetup()>
c0007b7d:	58                   	pop    eax
c0007b7e:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b82:	53                   	push   ebx
c0007b83:	e8 44 1f 00 00       	call   c0009acc <VAS::VAS()>
c0007b88:	89 1d b0 4f 02 c0    	mov    DWORD PTR ds:0xc0024fb0,ebx
c0007b8e:	e8 e7 6c 01 00       	call   c001e87a <_init>
c0007b93:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007b9a:	e8 0f ff ff ff       	call   c0007aae <malloc>
c0007b9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ba2:	89 c6                	mov    esi,eax
c0007ba4:	e8 35 f2 ff ff       	call   c0006dde <Computer::Computer()>
c0007ba9:	6a 00                	push   0x0
c0007bab:	89 35 b8 4e 02 c0    	mov    DWORD PTR ds:0xc0024eb8,esi
c0007bb1:	6a 00                	push   0x0
c0007bb3:	6a 00                	push   0x0
c0007bb5:	56                   	push   esi
c0007bb6:	e8 eb f5 ff ff       	call   c00071a6 <Computer::open(int, int, void*)>
c0007bbb:	83 c4 14             	add    esp,0x14
c0007bbe:	53                   	push   ebx
c0007bbf:	e8 d2 1f 00 00       	call   c0009b96 <VAS::~VAS()>
c0007bc4:	83 c4 30             	add    esp,0x30
c0007bc7:	5b                   	pop    ebx
c0007bc8:	5e                   	pop    esi
c0007bc9:	5f                   	pop    edi
c0007bca:	c3                   	ret    

c0007bcb <Phys::allocateDMA(unsigned long)>:
c0007bcb:	55                   	push   ebp
c0007bcc:	31 ed                	xor    ebp,ebp
c0007bce:	57                   	push   edi
c0007bcf:	56                   	push   esi
c0007bd0:	53                   	push   ebx
c0007bd1:	31 db                	xor    ebx,ebx
c0007bd3:	83 ec 1c             	sub    esp,0x1c
c0007bd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007bda:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007be2:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007be8:	31 c0                	xor    eax,eax
c0007bea:	c1 ef 0c             	shr    edi,0xc
c0007bed:	eb 1b                	jmp    c0007c0a <Phys::allocateDMA(unsigned long)+0x3f>
c0007bef:	85 c0                	test   eax,eax
c0007bf1:	75 06                	jne    c0007bf9 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bf3:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007bf7:	89 dd                	mov    ebp,ebx
c0007bf9:	8d 70 01             	lea    esi,[eax+0x1]
c0007bfc:	39 f7                	cmp    edi,esi
c0007bfe:	74 37                	je     c0007c37 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c00:	89 f0                	mov    eax,esi
c0007c02:	83 c3 01             	add    ebx,0x1
c0007c05:	83 fb 0f             	cmp    ebx,0xf
c0007c08:	7f 13                	jg     c0007c1d <Phys::allocateDMA(unsigned long)+0x52>
c0007c0a:	80 bb ec 4e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdb114],0x0
c0007c11:	74 dc                	je     c0007bef <Phys::allocateDMA(unsigned long)+0x24>
c0007c13:	31 c0                	xor    eax,eax
c0007c15:	83 c3 01             	add    ebx,0x1
c0007c18:	83 fb 0f             	cmp    ebx,0xf
c0007c1b:	7e ed                	jle    c0007c0a <Phys::allocateDMA(unsigned long)+0x3f>
c0007c1d:	83 ec 0c             	sub    esp,0xc
c0007c20:	68 2c fc 01 c0       	push   0xc001fc2c
c0007c25:	e8 ed 8c 00 00       	call   c0010917 <KePanic(char const*)>
c0007c2a:	83 c4 10             	add    esp,0x10
c0007c2d:	31 c0                	xor    eax,eax
c0007c2f:	83 c4 1c             	add    esp,0x1c
c0007c32:	5b                   	pop    ebx
c0007c33:	5e                   	pop    esi
c0007c34:	5f                   	pop    edi
c0007c35:	5d                   	pop    ebp
c0007c36:	c3                   	ret    
c0007c37:	89 e9                	mov    ecx,ebp
c0007c39:	c1 f9 04             	sar    ecx,0x4
c0007c3c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c40:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c44:	89 ca                	mov    edx,ecx
c0007c46:	83 ea 01             	sub    edx,0x1
c0007c49:	79 03                	jns    c0007c4e <Phys::allocateDMA(unsigned long)+0x83>
c0007c4b:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c4e:	c1 fa 04             	sar    edx,0x4
c0007c51:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c55:	74 08                	je     c0007c5f <Phys::allocateDMA(unsigned long)+0x94>
c0007c57:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c5b:	31 c0                	xor    eax,eax
c0007c5d:	eb b6                	jmp    c0007c15 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c5f:	85 f6                	test   esi,esi
c0007c61:	74 17                	je     c0007c7a <Phys::allocateDMA(unsigned long)+0xaf>
c0007c63:	8d 95 ec 4e 02 c0    	lea    edx,[ebp-0x3ffdb114]
c0007c69:	8d 84 05 ed 4e 02 c0 	lea    eax,[ebp+eax*1-0x3ffdb113]
c0007c70:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c73:	83 c2 01             	add    edx,0x1
c0007c76:	39 d0                	cmp    eax,edx
c0007c78:	75 f6                	jne    c0007c70 <Phys::allocateDMA(unsigned long)+0xa5>
c0007c7a:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007c7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c83:	01 f8                	add    eax,edi
c0007c85:	85 d2                	test   edx,edx
c0007c87:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007c8c:	74 17                	je     c0007ca5 <Phys::allocateDMA(unsigned long)+0xda>
c0007c8e:	83 ec 0c             	sub    esp,0xc
c0007c91:	68 2c fc 01 c0       	push   0xc001fc2c
c0007c96:	e8 7c 8c 00 00       	call   c0010917 <KePanic(char const*)>
c0007c9b:	83 c4 10             	add    esp,0x10
c0007c9e:	89 f0                	mov    eax,esi
c0007ca0:	e9 5d ff ff ff       	jmp    c0007c02 <Phys::allocateDMA(unsigned long)+0x37>
c0007ca5:	c1 e5 0c             	shl    ebp,0xc
c0007ca8:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cae:	e9 7c ff ff ff       	jmp    c0007c2f <Phys::allocateDMA(unsigned long)+0x64>

c0007cb3 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cb3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cb7:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cbd:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007cc2:	c1 ea 0c             	shr    edx,0xc
c0007cc5:	29 d0                	sub    eax,edx
c0007cc7:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007ccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd0:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007cd5:	c1 e8 0c             	shr    eax,0xc
c0007cd8:	85 d2                	test   edx,edx
c0007cda:	74 11                	je     c0007ced <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007cdc:	05 ec 4e 02 c0       	add    eax,0xc0024eec
c0007ce1:	01 c2                	add    edx,eax
c0007ce3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007ce6:	83 c0 01             	add    eax,0x1
c0007ce9:	39 d0                	cmp    eax,edx
c0007ceb:	75 f6                	jne    c0007ce3 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007ced:	c3                   	ret    

c0007cee <Phys::setPageState(unsigned long, bool)>:
c0007cee:	57                   	push   edi
c0007cef:	56                   	push   esi
c0007cf0:	8b 35 4c 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021f4c
c0007cf6:	53                   	push   ebx
c0007cf7:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007cfc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d00:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d04:	0f b6 c0             	movzx  eax,al
c0007d07:	89 ca                	mov    edx,ecx
c0007d09:	83 e1 07             	and    ecx,0x7
c0007d0c:	c1 ea 03             	shr    edx,0x3
c0007d0f:	d3 c3                	rol    ebx,cl
c0007d11:	01 d6                	add    esi,edx
c0007d13:	d3 e0                	shl    eax,cl
c0007d15:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d18:	21 fb                	and    ebx,edi
c0007d1a:	88 1e                	mov    BYTE PTR [esi],bl
c0007d1c:	8b 1d 4c 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021f4c
c0007d22:	01 da                	add    edx,ebx
c0007d24:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d26:	09 c8                	or     eax,ecx
c0007d28:	88 02                	mov    BYTE PTR [edx],al
c0007d2a:	5b                   	pop    ebx
c0007d2b:	5e                   	pop    esi
c0007d2c:	5f                   	pop    edi
c0007d2d:	c3                   	ret    

c0007d2e <Phys::getPageState(unsigned long)>:
c0007d2e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d32:	8b 15 4c 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f4c
c0007d38:	89 c8                	mov    eax,ecx
c0007d3a:	83 e1 07             	and    ecx,0x7
c0007d3d:	c1 e8 03             	shr    eax,0x3
c0007d40:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d44:	d3 f8                	sar    eax,cl
c0007d46:	83 e0 01             	and    eax,0x1
c0007d49:	c3                   	ret    

c0007d4a <Phys::freePage(unsigned long)>:
c0007d4a:	53                   	push   ebx
c0007d4b:	83 ec 08             	sub    esp,0x8
c0007d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d52:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d58:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d5e:	76 41                	jbe    c0007da1 <Phys::freePage(unsigned long)+0x57>
c0007d60:	c1 e8 0c             	shr    eax,0xc
c0007d63:	50                   	push   eax
c0007d64:	89 c3                	mov    ebx,eax
c0007d66:	e8 c3 ff ff ff       	call   c0007d2e <Phys::getPageState(unsigned long)>
c0007d6b:	5a                   	pop    edx
c0007d6c:	84 c0                	test   al,al
c0007d6e:	74 20                	je     c0007d90 <Phys::freePage(unsigned long)+0x46>
c0007d70:	83 ec 08             	sub    esp,0x8
c0007d73:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007d78:	6a 00                	push   0x0
c0007d7a:	83 e8 01             	sub    eax,0x1
c0007d7d:	53                   	push   ebx
c0007d7e:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007d83:	e8 66 ff ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c0007d88:	83 c4 10             	add    esp,0x10
c0007d8b:	83 c4 08             	add    esp,0x8
c0007d8e:	5b                   	pop    ebx
c0007d8f:	c3                   	ret    
c0007d90:	c7 44 24 10 d1 fc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fcd1
c0007d98:	83 c4 08             	add    esp,0x8
c0007d9b:	5b                   	pop    ebx
c0007d9c:	e9 76 8b 00 00       	jmp    c0010917 <KePanic(char const*)>
c0007da1:	68 00 10 00 00       	push   0x1000
c0007da6:	50                   	push   eax
c0007da7:	e8 07 ff ff ff       	call   c0007cb3 <Phys::freeDMA(unsigned long, unsigned long)>
c0007dac:	59                   	pop    ecx
c0007dad:	5b                   	pop    ebx
c0007dae:	83 c4 08             	add    esp,0x8
c0007db1:	5b                   	pop    ebx
c0007db2:	c3                   	ret    

c0007db3 <Phys::allocatePage()>:
c0007db3:	56                   	push   esi
c0007db4:	53                   	push   ebx
c0007db5:	83 ec 14             	sub    esp,0x14
c0007db8:	8b 35 d8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ed8
c0007dbe:	89 f3                	mov    ebx,esi
c0007dc0:	eb 0a                	jmp    c0007dcc <Phys::allocatePage()+0x19>
c0007dc2:	89 1d d8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ed8,ebx
c0007dc8:	39 de                	cmp    esi,ebx
c0007dca:	74 26                	je     c0007df2 <Phys::allocatePage()+0x3f>
c0007dcc:	53                   	push   ebx
c0007dcd:	e8 5c ff ff ff       	call   c0007d2e <Phys::getPageState(unsigned long)>
c0007dd2:	5a                   	pop    edx
c0007dd3:	84 c0                	test   al,al
c0007dd5:	74 67                	je     c0007e3e <Phys::allocatePage()+0x8b>
c0007dd7:	83 c3 01             	add    ebx,0x1
c0007dda:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007de0:	75 e0                	jne    c0007dc2 <Phys::allocatePage()+0xf>
c0007de2:	31 db                	xor    ebx,ebx
c0007de4:	c7 05 d8 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024ed8,0x0
c0007dee:	39 de                	cmp    esi,ebx
c0007df0:	75 da                	jne    c0007dcc <Phys::allocatePage()+0x19>
c0007df2:	83 ec 0c             	sub    esp,0xc
c0007df5:	a0 fc 4e 02 c0       	mov    al,ds:0xc0024efc
c0007dfa:	83 f0 01             	xor    eax,0x1
c0007dfd:	a2 fc 4e 02 c0       	mov    ds:0xc0024efc,al
c0007e02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e07:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e0a:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e10:	50                   	push   eax
c0007e11:	e8 60 28 00 00       	call   c000a676 <VAS::scanForEviction()>
c0007e16:	83 c4 10             	add    esp,0x10
c0007e19:	85 c0                	test   eax,eax
c0007e1b:	75 48                	jne    c0007e65 <Phys::allocatePage()+0xb2>
c0007e1d:	83 ec 0c             	sub    esp,0xc
c0007e20:	68 54 fc 01 c0       	push   0xc001fc54
c0007e25:	e8 ed 8a 00 00       	call   c0010917 <KePanic(char const*)>
c0007e2a:	83 c4 10             	add    esp,0x10
c0007e2d:	8b 1d d8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024ed8
c0007e33:	53                   	push   ebx
c0007e34:	e8 f5 fe ff ff       	call   c0007d2e <Phys::getPageState(unsigned long)>
c0007e39:	5a                   	pop    edx
c0007e3a:	84 c0                	test   al,al
c0007e3c:	75 99                	jne    c0007dd7 <Phys::allocatePage()+0x24>
c0007e3e:	6a 01                	push   0x1
c0007e40:	53                   	push   ebx
c0007e41:	e8 a8 fe ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c0007e46:	8b 15 e4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee4
c0007e4c:	a1 d8 4e 02 c0       	mov    eax,ds:0xc0024ed8
c0007e51:	83 c2 01             	add    edx,0x1
c0007e54:	59                   	pop    ecx
c0007e55:	89 15 e4 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee4,edx
c0007e5b:	c1 e0 0c             	shl    eax,0xc
c0007e5e:	5b                   	pop    ebx
c0007e5f:	83 c4 14             	add    esp,0x14
c0007e62:	5b                   	pop    ebx
c0007e63:	5e                   	pop    esi
c0007e64:	c3                   	ret    
c0007e65:	83 ec 08             	sub    esp,0x8
c0007e68:	89 c2                	mov    edx,eax
c0007e6a:	6a 01                	push   0x1
c0007e6c:	c1 ea 0c             	shr    edx,0xc
c0007e6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e73:	52                   	push   edx
c0007e74:	e8 75 fe ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c0007e79:	83 c4 10             	add    esp,0x10
c0007e7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e80:	eb dd                	jmp    c0007e5f <Phys::allocatePage()+0xac>

c0007e82 <Phys::allocateContiguousPages(int)>:
c0007e82:	57                   	push   edi
c0007e83:	56                   	push   esi
c0007e84:	53                   	push   ebx
c0007e85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e89:	fa                   	cli    
c0007e8a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007e8f:	31 db                	xor    ebx,ebx
c0007e91:	83 c0 01             	add    eax,0x1
c0007e94:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007e99:	85 db                	test   ebx,ebx
c0007e9b:	75 11                	jne    c0007eae <Phys::allocateContiguousPages(int)+0x2c>
c0007e9d:	e8 11 ff ff ff       	call   c0007db3 <Phys::allocatePage()>
c0007ea2:	83 fe 01             	cmp    esi,0x1
c0007ea5:	89 c7                	mov    edi,eax
c0007ea7:	74 21                	je     c0007eca <Phys::allocateContiguousPages(int)+0x48>
c0007ea9:	bb 01 00 00 00       	mov    ebx,0x1
c0007eae:	e8 00 ff ff ff       	call   c0007db3 <Phys::allocatePage()>
c0007eb3:	89 da                	mov    edx,ebx
c0007eb5:	c1 e2 0c             	shl    edx,0xc
c0007eb8:	01 fa                	add    edx,edi
c0007eba:	39 c2                	cmp    edx,eax
c0007ebc:	74 22                	je     c0007ee0 <Phys::allocateContiguousPages(int)+0x5e>
c0007ebe:	bb 01 00 00 00       	mov    ebx,0x1
c0007ec3:	89 c7                	mov    edi,eax
c0007ec5:	83 fe 01             	cmp    esi,0x1
c0007ec8:	75 e4                	jne    c0007eae <Phys::allocateContiguousPages(int)+0x2c>
c0007eca:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007ecf:	83 e8 01             	sub    eax,0x1
c0007ed2:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007ed7:	75 01                	jne    c0007eda <Phys::allocateContiguousPages(int)+0x58>
c0007ed9:	fb                   	sti    
c0007eda:	89 f8                	mov    eax,edi
c0007edc:	5b                   	pop    ebx
c0007edd:	5e                   	pop    esi
c0007ede:	5f                   	pop    edi
c0007edf:	c3                   	ret    
c0007ee0:	83 c3 01             	add    ebx,0x1
c0007ee3:	39 f3                	cmp    ebx,esi
c0007ee5:	75 b2                	jne    c0007e99 <Phys::allocateContiguousPages(int)+0x17>
c0007ee7:	eb e1                	jmp    c0007eca <Phys::allocateContiguousPages(int)+0x48>

c0007ee9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ee9:	56                   	push   esi
c0007eea:	53                   	push   ebx
c0007eeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007eef:	39 1d dc 4e 02 c0    	cmp    DWORD PTR ds:0xc0024edc,ebx
c0007ef5:	73 06                	jae    c0007efd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007ef7:	89 1d dc 4e 02 c0    	mov    DWORD PTR ds:0xc0024edc,ebx
c0007efd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f01:	c1 eb 0c             	shr    ebx,0xc
c0007f04:	c1 e8 0c             	shr    eax,0xc
c0007f07:	39 d8                	cmp    eax,ebx
c0007f09:	73 13                	jae    c0007f1e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f0b:	6a 00                	push   0x0
c0007f0d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f10:	50                   	push   eax
c0007f11:	e8 d8 fd ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c0007f16:	5a                   	pop    edx
c0007f17:	89 f0                	mov    eax,esi
c0007f19:	59                   	pop    ecx
c0007f1a:	39 f3                	cmp    ebx,esi
c0007f1c:	75 ed                	jne    c0007f0b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f1e:	5b                   	pop    ebx
c0007f1f:	5e                   	pop    esi
c0007f20:	c3                   	ret    

c0007f21 <Phys::physicalMemorySetup(unsigned int)>:
c0007f21:	55                   	push   ebp
c0007f22:	57                   	push   edi
c0007f23:	56                   	push   esi
c0007f24:	53                   	push   ebx
c0007f25:	83 ec 40             	sub    esp,0x40
c0007f28:	6a 10                	push   0x10
c0007f2a:	6a 00                	push   0x0
c0007f2c:	68 ec 4e 02 c0       	push   0xc0024eec
c0007f31:	e8 ba 85 ff ff       	call   c00004f0 <memset>
c0007f36:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f3a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f3f:	05 00 10 00 00       	add    eax,0x1000
c0007f44:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f48:	5b                   	pop    ebx
c0007f49:	31 db                	xor    ebx,ebx
c0007f4b:	5e                   	pop    esi
c0007f4c:	50                   	push   eax
c0007f4d:	68 e7 fc 01 c0       	push   0xc001fce7
c0007f52:	e8 93 2a 00 00       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0007f57:	83 c4 10             	add    esp,0x10
c0007f5a:	83 ec 08             	sub    esp,0x8
c0007f5d:	6a 01                	push   0x1
c0007f5f:	53                   	push   ebx
c0007f60:	83 c3 01             	add    ebx,0x1
c0007f63:	e8 86 fd ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c0007f68:	83 c4 10             	add    esp,0x10
c0007f6b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f71:	75 e7                	jne    c0007f5a <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f73:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0007f7a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007f7e:	85 c0                	test   eax,eax
c0007f80:	0f 84 98 01 00 00    	je     c000811e <Phys::physicalMemorySetup(unsigned int)+0x1fd>
c0007f86:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007f8a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007f92:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007f97:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007f9b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fa3:	eb 1c                	jmp    c0007fc1 <Phys::physicalMemorySetup(unsigned int)+0xa0>
c0007fa5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fa9:	83 c3 18             	add    ebx,0x18
c0007fac:	83 c6 01             	add    esi,0x1
c0007faf:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fb7:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fbb:	0f 84 6d 01 00 00    	je     c000812e <Phys::physicalMemorySetup(unsigned int)+0x20d>
c0007fc1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fc4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fc7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fd2:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fd4:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fd7:	01 f0                	add    eax,esi
c0007fd9:	55                   	push   ebp
c0007fda:	11 fa                	adc    edx,edi
c0007fdc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007fe0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007fe4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fe8:	51                   	push   ecx
c0007fe9:	56                   	push   esi
c0007fea:	68 84 fc 01 c0       	push   0xc001fc84
c0007fef:	e8 f6 29 00 00       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0007ff4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007ff8:	83 c4 10             	add    esp,0x10
c0007ffb:	09 f8                	or     eax,edi
c0007ffd:	0f 85 2b 01 00 00    	jne    c000812e <Phys::physicalMemorySetup(unsigned int)+0x20d>
c0008003:	83 fd 01             	cmp    ebp,0x1
c0008006:	75 9d                	jne    c0007fa5 <Phys::physicalMemorySetup(unsigned int)+0x84>
c0008008:	ba 00 00 08 00       	mov    edx,0x80000
c000800d:	89 c1                	mov    ecx,eax
c000800f:	39 f2                	cmp    edx,esi
c0008011:	19 f9                	sbb    ecx,edi
c0008013:	0f 82 ab 00 00 00    	jb     c00080c4 <Phys::physicalMemorySetup(unsigned int)+0x1a3>
c0008019:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000801d:	89 c1                	mov    ecx,eax
c000801f:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008023:	0f 83 9b 00 00 00    	jae    c00080c4 <Phys::physicalMemorySetup(unsigned int)+0x1a3>
c0008029:	ba 00 00 0a 00       	mov    edx,0xa0000
c000802e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008032:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0008036:	39 fa                	cmp    edx,edi
c0008038:	19 e8                	sbb    eax,ebp
c000803a:	0f 82 b0 01 00 00    	jb     c00081f0 <Phys::physicalMemorySetup(unsigned int)+0x2cf>
c0008040:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008044:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0008048:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000804e:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008053:	83 d5 ff             	adc    ebp,0xffffffff
c0008056:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000805a:	31 c0                	xor    eax,eax
c000805c:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008060:	39 fa                	cmp    edx,edi
c0008062:	89 c1                	mov    ecx,eax
c0008064:	19 e9                	sbb    ecx,ebp
c0008066:	0f 83 39 ff ff ff    	jae    c0007fa5 <Phys::physicalMemorySetup(unsigned int)+0x84>
c000806c:	be 00 00 08 00       	mov    esi,0x80000
c0008071:	83 ec 04             	sub    esp,0x4
c0008074:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0008078:	57                   	push   edi
c0008079:	56                   	push   esi
c000807a:	68 a8 fc 01 c0       	push   0xc001fca8
c000807f:	e8 66 29 00 00       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0008084:	5d                   	pop    ebp
c0008085:	58                   	pop    eax
c0008086:	57                   	push   edi
c0008087:	56                   	push   esi
c0008088:	e8 5c fe ff ff       	call   c0007ee9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000808d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008091:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008095:	83 c4 0c             	add    esp,0xc
c0008098:	0f ac d0 0c          	shrd   eax,edx,0xc
c000809c:	8b 15 e8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee8
c00080a2:	01 d0                	add    eax,edx
c00080a4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080ab:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00080b0:	52                   	push   edx
c00080b1:	50                   	push   eax
c00080b2:	68 0d fd 01 c0       	push   0xc001fd0d
c00080b7:	e8 2e 29 00 00       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c00080bc:	83 c4 10             	add    esp,0x10
c00080bf:	e9 e1 fe ff ff       	jmp    c0007fa5 <Phys::physicalMemorySetup(unsigned int)+0x84>
c00080c4:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080d0:	39 ea                	cmp    edx,ebp
c00080d2:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080d6:	0f 82 c9 fe ff ff    	jb     c0007fa5 <Phys::physicalMemorySetup(unsigned int)+0x84>
c00080dc:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080e1:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080e5:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080e9:	0f 83 b6 fe ff ff    	jae    c0007fa5 <Phys::physicalMemorySetup(unsigned int)+0x84>
c00080ef:	39 ee                	cmp    esi,ebp
c00080f1:	89 f8                	mov    eax,edi
c00080f3:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00080f7:	0f 83 74 ff ff ff    	jae    c0008071 <Phys::physicalMemorySetup(unsigned int)+0x150>
c00080fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008101:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008105:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0008109:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000810d:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008111:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008115:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008119:	e9 53 ff ff ff       	jmp    c0008071 <Phys::physicalMemorySetup(unsigned int)+0x150>
c000811e:	83 ec 0c             	sub    esp,0xc
c0008121:	68 ff fc 01 c0       	push   0xc001fcff
c0008126:	e8 ec 87 00 00       	call   c0010917 <KePanic(char const*)>
c000812b:	83 c4 10             	add    esp,0x10
c000812e:	83 ec 08             	sub    esp,0x8
c0008131:	bb 60 00 00 00       	mov    ebx,0x60
c0008136:	6a 00                	push   0x0
c0008138:	6a 06                	push   0x6
c000813a:	e8 af fb ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c000813f:	58                   	pop    eax
c0008140:	5a                   	pop    edx
c0008141:	6a 00                	push   0x0
c0008143:	6a 07                	push   0x7
c0008145:	e8 a4 fb ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c000814a:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c0008150:	83 c4 10             	add    esp,0x10
c0008153:	83 c1 02             	add    ecx,0x2
c0008156:	89 0d e8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee8,ecx
c000815c:	83 ec 08             	sub    esp,0x8
c000815f:	6a 00                	push   0x0
c0008161:	53                   	push   ebx
c0008162:	83 c3 01             	add    ebx,0x1
c0008165:	e8 84 fb ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c000816a:	83 c4 10             	add    esp,0x10
c000816d:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008173:	75 e7                	jne    c000815c <Phys::physicalMemorySetup(unsigned int)+0x23b>
c0008175:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000817a:	bb 40 01 00 00       	mov    ebx,0x140
c000817f:	83 c0 20             	add    eax,0x20
c0008182:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008187:	eb 26                	jmp    c00081af <Phys::physicalMemorySetup(unsigned int)+0x28e>
c0008189:	83 ec 08             	sub    esp,0x8
c000818c:	6a 00                	push   0x0
c000818e:	53                   	push   ebx
c000818f:	83 c3 01             	add    ebx,0x1
c0008192:	e8 57 fb ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c0008197:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000819c:	83 c4 10             	add    esp,0x10
c000819f:	83 c0 01             	add    eax,0x1
c00081a2:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081a8:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00081ad:	74 07                	je     c00081b6 <Phys::physicalMemorySetup(unsigned int)+0x295>
c00081af:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081b4:	7e d3                	jle    c0008189 <Phys::physicalMemorySetup(unsigned int)+0x268>
c00081b6:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081bb:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081c0:	7f 26                	jg     c00081e8 <Phys::physicalMemorySetup(unsigned int)+0x2c7>
c00081c2:	83 ec 08             	sub    esp,0x8
c00081c5:	6a 00                	push   0x0
c00081c7:	53                   	push   ebx
c00081c8:	83 c3 01             	add    ebx,0x1
c00081cb:	e8 1e fb ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c00081d0:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c00081d5:	83 c4 10             	add    esp,0x10
c00081d8:	83 c0 01             	add    eax,0x1
c00081db:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081e1:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00081e6:	75 d3                	jne    c00081bb <Phys::physicalMemorySetup(unsigned int)+0x29a>
c00081e8:	83 c4 3c             	add    esp,0x3c
c00081eb:	5b                   	pop    ebx
c00081ec:	5e                   	pop    esi
c00081ed:	5f                   	pop    edi
c00081ee:	5d                   	pop    ebp
c00081ef:	c3                   	ret    
c00081f0:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00081f8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008200:	e9 3b fe ff ff       	jmp    c0008040 <Phys::physicalMemorySetup(unsigned int)+0x11f>
c0008205:	90                   	nop

c0008206 <Pipe::isAtty()>:
c0008206:	31 c0                	xor    eax,eax
c0008208:	c3                   	ret    
c0008209:	90                   	nop

c000820a <Pipe::~Pipe()>:
c000820a:	83 ec 0c             	sub    esp,0xc
c000820d:	ba 6c fd 01 c0       	mov    edx,0xc001fd6c
c0008212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008216:	89 10                	mov    DWORD PTR [eax],edx
c0008218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000821c:	83 ec 0c             	sub    esp,0xc
c000821f:	50                   	push   eax
c0008220:	e8 8f 11 00 00       	call   c00093b4 <UnixFile::~UnixFile()>
c0008225:	83 c4 10             	add    esp,0x10
c0008228:	90                   	nop
c0008229:	83 c4 0c             	add    esp,0xc
c000822c:	c3                   	ret    
c000822d:	90                   	nop

c000822e <Pipe::~Pipe()>:
c000822e:	83 ec 0c             	sub    esp,0xc
c0008231:	83 ec 0c             	sub    esp,0xc
c0008234:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008238:	e8 cd ff ff ff       	call   c000820a <Pipe::~Pipe()>
c000823d:	83 c4 10             	add    esp,0x10
c0008240:	83 ec 08             	sub    esp,0x8
c0008243:	6a 20                	push   0x20
c0008245:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008249:	e8 6f 26 00 00       	call   c000a8bd <operator delete(void*, unsigned long)>
c000824e:	83 c4 10             	add    esp,0x10
c0008251:	83 c4 0c             	add    esp,0xc
c0008254:	c3                   	ret    
c0008255:	90                   	nop

c0008256 <Pipe::write(unsigned long long, void*, int*)>:
c0008256:	55                   	push   ebp
c0008257:	57                   	push   edi
c0008258:	56                   	push   esi
c0008259:	53                   	push   ebx
c000825a:	83 ec 1c             	sub    esp,0x1c
c000825d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008261:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008265:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0008268:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000826c:	89 04 24             	mov    DWORD PTR [esp],eax
c000826f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008273:	89 d8                	mov    eax,ebx
c0008275:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0008278:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000827c:	89 d6                	mov    esi,edx
c000827e:	89 d7                	mov    edi,edx
c0008280:	c1 ff 1f             	sar    edi,0x1f
c0008283:	03 34 24             	add    esi,DWORD PTR [esp]
c0008286:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000828a:	c1 f8 1f             	sar    eax,0x1f
c000828d:	39 f3                	cmp    ebx,esi
c000828f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008297:	19 f8                	sbb    eax,edi
c0008299:	b8 01 00 00 00       	mov    eax,0x1
c000829e:	72 6e                	jb     c000830e <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082a0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082a3:	01 d0                	add    eax,edx
c00082a5:	99                   	cdq    
c00082a6:	f7 fb                	idiv   ebx
c00082a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ac:	29 d3                	sub    ebx,edx
c00082ae:	89 d7                	mov    edi,edx
c00082b0:	89 de                	mov    esi,ebx
c00082b2:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082b5:	c1 fb 1f             	sar    ebx,0x1f
c00082b8:	39 f2                	cmp    edx,esi
c00082ba:	19 d8                	sbb    eax,ebx
c00082bc:	b8 00 00 00 00       	mov    eax,0x0
c00082c1:	72 04                	jb     c00082c7 <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082c3:	89 d0                	mov    eax,edx
c00082c5:	29 f0                	sub    eax,esi
c00082c7:	89 d3                	mov    ebx,edx
c00082c9:	29 c3                	sub    ebx,eax
c00082cb:	74 0b                	je     c00082d8 <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082cd:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082d0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082d4:	89 d9                	mov    ecx,ebx
c00082d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082d8:	85 c0                	test   eax,eax
c00082da:	74 0d                	je     c00082e9 <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082dc:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082e0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082e3:	89 de                	mov    esi,ebx
c00082e5:	89 c1                	mov    ecx,eax
c00082e7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082e9:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c00082ec:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00082f1:	75 10                	jne    c0008303 <Pipe::write(unsigned long long, void*, int*)+0xad>
c00082f3:	83 ec 0c             	sub    esp,0xc
c00082f6:	68 29 fd 01 c0       	push   0xc001fd29
c00082fb:	e8 17 86 00 00       	call   c0010917 <KePanic(char const*)>
c0008300:	83 c4 10             	add    esp,0x10
c0008303:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008307:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000830a:	89 08                	mov    DWORD PTR [eax],ecx
c000830c:	31 c0                	xor    eax,eax
c000830e:	83 c4 1c             	add    esp,0x1c
c0008311:	5b                   	pop    ebx
c0008312:	5e                   	pop    esi
c0008313:	5f                   	pop    edi
c0008314:	5d                   	pop    ebp
c0008315:	c3                   	ret    

c0008316 <Pipe::read(unsigned long long, void*, int*)>:
c0008316:	55                   	push   ebp
c0008317:	57                   	push   edi
c0008318:	56                   	push   esi
c0008319:	53                   	push   ebx
c000831a:	83 ec 1c             	sub    esp,0x1c
c000831d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008321:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008325:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008329:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000832c:	89 c8                	mov    eax,ecx
c000832e:	99                   	cdq    
c000832f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008333:	74 24                	je     c0008359 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008335:	39 f9                	cmp    ecx,edi
c0008337:	89 d1                	mov    ecx,edx
c0008339:	19 f1                	sbb    ecx,esi
c000833b:	73 1c                	jae    c0008359 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000833d:	fa                   	cli    
c000833e:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0008344:	e8 83 cd 00 00       	call   c00150cc <schedule()>
c0008349:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000834e:	48                   	dec    eax
c000834f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0008354:	75 d3                	jne    c0008329 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008356:	fb                   	sti    
c0008357:	eb d0                	jmp    c0008329 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008359:	39 f8                	cmp    eax,edi
c000835b:	89 d1                	mov    ecx,edx
c000835d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008360:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008364:	19 f1                	sbb    ecx,esi
c0008366:	73 07                	jae    c000836f <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008368:	89 04 24             	mov    DWORD PTR [esp],eax
c000836b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000836f:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008372:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008375:	29 f7                	sub    edi,esi
c0008377:	89 f8                	mov    eax,edi
c0008379:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000837d:	99                   	cdq    
c000837e:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008381:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008385:	19 d0                	sbb    eax,edx
c0008387:	73 07                	jae    c0008390 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008389:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000838c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008390:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0008393:	89 ea                	mov    edx,ebp
c0008395:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008399:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000839e:	74 0d                	je     c00083ad <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083a0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083a3:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083a7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ad:	85 d2                	test   edx,edx
c00083af:	74 11                	je     c00083c2 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083b5:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083b8:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083bc:	89 d1                	mov    ecx,edx
c00083be:	89 c7                	mov    edi,eax
c00083c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083c5:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083c8:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083cb:	99                   	cdq    
c00083cc:	89 f7                	mov    edi,esi
c00083ce:	03 04 24             	add    eax,DWORD PTR [esp]
c00083d1:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083d5:	c1 ff 1f             	sar    edi,0x1f
c00083d8:	57                   	push   edi
c00083d9:	56                   	push   esi
c00083da:	52                   	push   edx
c00083db:	50                   	push   eax
c00083dc:	e8 7f 63 01 00       	call   c001e760 <__umoddi3>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083e7:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00083ec:	75 10                	jne    c00083fe <Pipe::read(unsigned long long, void*, int*)+0xe8>
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	68 46 fd 01 c0       	push   0xc001fd46
c00083f6:	e8 1c 85 00 00       	call   c0010917 <KePanic(char const*)>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008402:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008405:	89 10                	mov    DWORD PTR [eax],edx
c0008407:	83 c4 1c             	add    esp,0x1c
c000840a:	31 c0                	xor    eax,eax
c000840c:	5b                   	pop    ebx
c000840d:	5e                   	pop    esi
c000840e:	5f                   	pop    edi
c000840f:	5d                   	pop    ebp
c0008410:	c3                   	ret    
c0008411:	90                   	nop

c0008412 <Pipe::Pipe(int)>:
c0008412:	83 ec 0c             	sub    esp,0xc
c0008415:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008419:	83 ec 08             	sub    esp,0x8
c000841c:	6a 00                	push   0x0
c000841e:	50                   	push   eax
c000841f:	e8 aa 0d 00 00       	call   c00091ce <UnixFile::UnixFile(int)>
c0008424:	83 c4 10             	add    esp,0x10
c0008427:	ba 6c fd 01 c0       	mov    edx,0xc001fd6c
c000842c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008430:	89 10                	mov    DWORD PTR [eax],edx
c0008432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008436:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000843a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000843d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008441:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008453:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008457:	83 ec 0c             	sub    esp,0xc
c000845a:	50                   	push   eax
c000845b:	e8 4e f6 ff ff       	call   c0007aae <malloc>
c0008460:	83 c4 10             	add    esp,0x10
c0008463:	89 c2                	mov    edx,eax
c0008465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008469:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000846c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008470:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008474:	90                   	nop
c0008475:	83 c4 0c             	add    esp,0xc
c0008478:	c3                   	ret    
c0008479:	90                   	nop

c000847a <VgaText::isAtty()>:
c000847a:	b0 01                	mov    al,0x1
c000847c:	c3                   	ret    
c000847d:	90                   	nop

c000847e <VgaText::~VgaText()>:
c000847e:	83 ec 0c             	sub    esp,0xc
c0008481:	ba b4 fd 01 c0       	mov    edx,0xc001fdb4
c0008486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000848a:	89 10                	mov    DWORD PTR [eax],edx
c000848c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008490:	83 ec 0c             	sub    esp,0xc
c0008493:	50                   	push   eax
c0008494:	e8 1b 0f 00 00       	call   c00093b4 <UnixFile::~UnixFile()>
c0008499:	83 c4 10             	add    esp,0x10
c000849c:	90                   	nop
c000849d:	83 c4 0c             	add    esp,0xc
c00084a0:	c3                   	ret    
c00084a1:	90                   	nop

c00084a2 <VgaText::~VgaText()>:
c00084a2:	83 ec 0c             	sub    esp,0xc
c00084a5:	83 ec 0c             	sub    esp,0xc
c00084a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ac:	e8 cd ff ff ff       	call   c000847e <VgaText::~VgaText()>
c00084b1:	83 c4 10             	add    esp,0x10
c00084b4:	83 ec 08             	sub    esp,0x8
c00084b7:	68 84 01 00 00       	push   0x184
c00084bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c0:	e8 f8 23 00 00       	call   c000a8bd <operator delete(void*, unsigned long)>
c00084c5:	83 c4 10             	add    esp,0x10
c00084c8:	83 c4 0c             	add    esp,0xc
c00084cb:	c3                   	ret    

c00084cc <VgaText::read(unsigned long long, void*, int*)>:
c00084cc:	83 ec 10             	sub    esp,0x10
c00084cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084db:	e8 18 48 00 00       	call   c000ccf8 <readKeyboard(VgaText*, char*, unsigned long)>
c00084e0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084e4:	89 02                	mov    DWORD PTR [edx],eax
c00084e6:	31 c0                	xor    eax,eax
c00084e8:	83 c4 1c             	add    esp,0x1c
c00084eb:	c3                   	ret    

c00084ec <setTerminalScrollLock(bool)>:
c00084ec:	c3                   	ret    

c00084ed <doTerminalCycle()>:
c00084ed:	c3                   	ret    

c00084ee <addToTerminalCycle(VgaText*)>:
c00084ee:	c3                   	ret    

c00084ef <scrollTerminalScrollLock(int)>:
c00084ef:	c3                   	ret    

c00084f0 <VgaText::updateTitle()>:
c00084f0:	c3                   	ret    
c00084f1:	90                   	nop

c00084f2 <VgaText::load()>:
c00084f2:	c3                   	ret    
c00084f3:	90                   	nop

c00084f4 <VgaText::updateCursor()>:
c00084f4:	83 ec 14             	sub    esp,0x14
c00084f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084fb:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00084fe:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008501:	e8 0e f9 00 00       	call   c0017e14 <HalConsoleCursorUpdate(int, int)>
c0008506:	83 c4 1c             	add    esp,0x1c
c0008509:	c3                   	ret    

c000850a <VgaText::doANSI_SGR(int)>:
c000850a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000850e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008512:	85 d2                	test   edx,edx
c0008514:	75 0b                	jne    c0008521 <VgaText::doANSI_SGR(int)+0x17>
c0008516:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008519:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000851c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000851f:	eb 59                	jmp    c000857a <VgaText::doANSI_SGR(int)+0x70>
c0008521:	83 fa 07             	cmp    edx,0x7
c0008524:	75 0b                	jne    c0008531 <VgaText::doANSI_SGR(int)+0x27>
c0008526:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008529:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000852c:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000852f:	eb 49                	jmp    c000857a <VgaText::doANSI_SGR(int)+0x70>
c0008531:	83 fa 1b             	cmp    edx,0x1b
c0008534:	74 e0                	je     c0008516 <VgaText::doANSI_SGR(int)+0xc>
c0008536:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008539:	83 f9 07             	cmp    ecx,0x7
c000853c:	77 09                	ja     c0008547 <VgaText::doANSI_SGR(int)+0x3d>
c000853e:	8b 14 8d 80 1f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde080]
c0008545:	eb 20                	jmp    c0008567 <VgaText::doANSI_SGR(int)+0x5d>
c0008547:	8d 4a d8             	lea    ecx,[edx-0x28]
c000854a:	83 f9 07             	cmp    ecx,0x7
c000854d:	77 09                	ja     c0008558 <VgaText::doANSI_SGR(int)+0x4e>
c000854f:	8b 14 8d 80 1f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde080]
c0008556:	eb 22                	jmp    c000857a <VgaText::doANSI_SGR(int)+0x70>
c0008558:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000855b:	83 f9 07             	cmp    ecx,0x7
c000855e:	77 0b                	ja     c000856b <VgaText::doANSI_SGR(int)+0x61>
c0008560:	8b 14 95 38 1e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde1c8]
c0008567:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000856a:	c3                   	ret    
c000856b:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000856e:	83 f9 07             	cmp    ecx,0x7
c0008571:	77 0a                	ja     c000857d <VgaText::doANSI_SGR(int)+0x73>
c0008573:	8b 14 95 10 1e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde1f0]
c000857a:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000857d:	c3                   	ret    

c000857e <VgaText::setDefaultBgColour(VgaColour)>:
c000857e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008582:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008586:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008589:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000858c:	c3                   	ret    
c000858d:	90                   	nop

c000858e <VgaText::setDefaultFgColour(VgaColour)>:
c000858e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008592:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008596:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008599:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000859c:	c3                   	ret    
c000859d:	90                   	nop

c000859e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000859e:	53                   	push   ebx
c000859f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085a3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085a7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085ab:	51                   	push   ecx
c00085ac:	e8 cd ff ff ff       	call   c000857e <VgaText::setDefaultBgColour(VgaColour)>
c00085b1:	58                   	pop    eax
c00085b2:	5a                   	pop    edx
c00085b3:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085bb:	5b                   	pop    ebx
c00085bc:	eb d0                	jmp    c000858e <VgaText::setDefaultFgColour(VgaColour)>

c00085be <VgaText::setTitleTextColour(VgaColour)>:
c00085be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c6:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085c9:	c3                   	ret    

c00085ca <VgaText::setTitleColour(VgaColour)>:
c00085ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085d2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085d5:	c3                   	ret    

c00085d6 <VgaText::setTitle(char*)>:
c00085d6:	c3                   	ret    
c00085d7:	90                   	nop

c00085d8 <VgaText::combineColours(unsigned char, unsigned char)>:
c00085d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085dc:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085e1:	83 e0 0f             	and    eax,0xf
c00085e4:	c1 e2 04             	shl    edx,0x4
c00085e7:	09 d0                	or     eax,edx
c00085e9:	c3                   	ret    

c00085ea <VgaText::scrollScreen()>:
c00085ea:	55                   	push   ebp
c00085eb:	57                   	push   edi
c00085ec:	56                   	push   esi
c00085ed:	be 01 00 00 00       	mov    esi,0x1
c00085f2:	53                   	push   ebx
c00085f3:	83 ec 0c             	sub    esp,0xc
c00085f6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00085fa:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00085fd:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008603:	31 ff                	xor    edi,edi
c0008605:	01 e9                	add    ecx,ebp
c0008607:	8a 01                	mov    al,BYTE PTR [ecx]
c0008609:	83 fe 18             	cmp    esi,0x18
c000860c:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008612:	75 20                	jne    c0008634 <VgaText::scrollScreen()+0x4a>
c0008614:	f7 c7 01 00 00 00    	test   edi,0x1
c000861a:	74 15                	je     c0008631 <VgaText::scrollScreen()+0x47>
c000861c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008620:	50                   	push   eax
c0008621:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008625:	50                   	push   eax
c0008626:	e8 ad ff ff ff       	call   c00085d8 <VgaText::combineColours(unsigned char, unsigned char)>
c000862b:	5a                   	pop    edx
c000862c:	5a                   	pop    edx
c000862d:	88 01                	mov    BYTE PTR [ecx],al
c000862f:	eb 03                	jmp    c0008634 <VgaText::scrollScreen()+0x4a>
c0008631:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008634:	47                   	inc    edi
c0008635:	41                   	inc    ecx
c0008636:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000863c:	75 c9                	jne    c0008607 <VgaText::scrollScreen()+0x1d>
c000863e:	46                   	inc    esi
c000863f:	83 fe 19             	cmp    esi,0x19
c0008642:	75 b9                	jne    c00085fd <VgaText::scrollScreen()+0x13>
c0008644:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c000864a:	75 1f                	jne    c000866b <VgaText::scrollScreen()+0x81>
c000864c:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008650:	74 05                	je     c0008657 <VgaText::scrollScreen()+0x6d>
c0008652:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008655:	eb 14                	jmp    c000866b <VgaText::scrollScreen()+0x81>
c0008657:	50                   	push   eax
c0008658:	50                   	push   eax
c0008659:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000865d:	50                   	push   eax
c000865e:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008662:	50                   	push   eax
c0008663:	e8 40 f6 00 00       	call   c0017ca8 <HalConsoleScroll(int, int)>
c0008668:	83 c4 10             	add    esp,0x10
c000866b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000866f:	83 c4 0c             	add    esp,0xc
c0008672:	5b                   	pop    ebx
c0008673:	5e                   	pop    esi
c0008674:	5f                   	pop    edi
c0008675:	5d                   	pop    ebp
c0008676:	e9 79 fe ff ff       	jmp    c00084f4 <VgaText::updateCursor()>
c000867b:	90                   	nop

c000867c <VgaText::combineCharAndColour(char, unsigned char)>:
c000867c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008681:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0008686:	c1 e0 08             	shl    eax,0x8
c0008689:	09 d0                	or     eax,edx
c000868b:	c3                   	ret    

c000868c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000868c:	55                   	push   ebp
c000868d:	57                   	push   edi
c000868e:	56                   	push   esi
c000868f:	53                   	push   ebx
c0008690:	83 ec 1c             	sub    esp,0x1c
c0008693:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008697:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000869b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000869f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086a3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086a7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086ab:	0f b6 c3             	movzx  eax,bl
c00086ae:	50                   	push   eax
c00086af:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086b4:	50                   	push   eax
c00086b5:	e8 1e ff ff ff       	call   c00085d8 <VgaText::combineColours(unsigned char, unsigned char)>
c00086ba:	5a                   	pop    edx
c00086bb:	0f b6 c0             	movzx  eax,al
c00086be:	59                   	pop    ecx
c00086bf:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086c4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086c8:	50                   	push   eax
c00086c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086cd:	e8 aa ff ff ff       	call   c000867c <VgaText::combineCharAndColour(char, unsigned char)>
c00086d2:	5a                   	pop    edx
c00086d3:	6b d7 50             	imul   edx,edi,0x50
c00086d6:	59                   	pop    ecx
c00086d7:	01 f2                	add    edx,esi
c00086d9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086dc:	0f b7 d2             	movzx  edx,dx
c00086df:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086e3:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c00086e9:	75 28                	jne    c0008713 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c00086eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00086ef:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00086f3:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00086f7:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00086fb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00086ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008703:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008707:	83 c4 1c             	add    esp,0x1c
c000870a:	5b                   	pop    ebx
c000870b:	5e                   	pop    esi
c000870c:	5f                   	pop    edi
c000870d:	5d                   	pop    ebp
c000870e:	e9 9d f6 00 00       	jmp    c0017db0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008713:	83 c4 1c             	add    esp,0x1c
c0008716:	5b                   	pop    ebx
c0008717:	5e                   	pop    esi
c0008718:	5f                   	pop    edi
c0008719:	5d                   	pop    ebp
c000871a:	c3                   	ret    
c000871b:	90                   	nop

c000871c <VgaText::getCursorX()>:
c000871c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008720:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008723:	c3                   	ret    

c0008724 <VgaText::getCursorY()>:
c0008724:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008728:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000872b:	c3                   	ret    

c000872c <VgaText::setCursor(int, int)>:
c000872c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008730:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008734:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008737:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000873b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000873e:	e9 b1 fd ff ff       	jmp    c00084f4 <VgaText::updateCursor()>

c0008743 <setActiveTerminal(VgaText*)>:
c0008743:	53                   	push   ebx
c0008744:	83 ec 08             	sub    esp,0x8
c0008747:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000874b:	85 db                	test   ebx,ebx
c000874d:	75 11                	jne    c0008760 <setActiveTerminal(VgaText*)+0x1d>
c000874f:	c7 44 24 10 80 fd 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fd80
c0008757:	83 c4 08             	add    esp,0x8
c000875a:	5b                   	pop    ebx
c000875b:	e9 b7 81 00 00       	jmp    c0010917 <KePanic(char const*)>
c0008760:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c0008765:	85 c0                	test   eax,eax
c0008767:	74 0c                	je     c0008775 <setActiveTerminal(VgaText*)+0x32>
c0008769:	83 ec 0c             	sub    esp,0xc
c000876c:	50                   	push   eax
c000876d:	e8 82 fd ff ff       	call   c00084f4 <VgaText::updateCursor()>
c0008772:	83 c4 10             	add    esp,0x10
c0008775:	89 1d 04 4f 02 c0    	mov    DWORD PTR ds:0xc0024f04,ebx
c000877b:	50                   	push   eax
c000877c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000877f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008782:	53                   	push   ebx
c0008783:	e8 a4 ff ff ff       	call   c000872c <VgaText::setCursor(int, int)>
c0008788:	83 c4 18             	add    esp,0x18
c000878b:	5b                   	pop    ebx
c000878c:	c3                   	ret    
c000878d:	90                   	nop

c000878e <VgaText::clearScreen()>:
c000878e:	57                   	push   edi
c000878f:	56                   	push   esi
c0008790:	31 f6                	xor    esi,esi
c0008792:	53                   	push   ebx
c0008793:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008797:	52                   	push   edx
c0008798:	6a 00                	push   0x0
c000879a:	6a 00                	push   0x0
c000879c:	53                   	push   ebx
c000879d:	e8 8a ff ff ff       	call   c000872c <VgaText::setCursor(int, int)>
c00087a2:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087a9:	83 c4 10             	add    esp,0x10
c00087ac:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087af:	7e 20                	jle    c00087d1 <VgaText::clearScreen()+0x43>
c00087b1:	31 ff                	xor    edi,edi
c00087b3:	50                   	push   eax
c00087b4:	50                   	push   eax
c00087b5:	56                   	push   esi
c00087b6:	57                   	push   edi
c00087b7:	47                   	inc    edi
c00087b8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087bb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087be:	6a 20                	push   0x20
c00087c0:	53                   	push   ebx
c00087c1:	e8 c6 fe ff ff       	call   c000868c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087c6:	83 c4 20             	add    esp,0x20
c00087c9:	83 ff 50             	cmp    edi,0x50
c00087cc:	75 e5                	jne    c00087b3 <VgaText::clearScreen()+0x25>
c00087ce:	46                   	inc    esi
c00087cf:	eb db                	jmp    c00087ac <VgaText::clearScreen()+0x1e>
c00087d1:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087d8:	5b                   	pop    ebx
c00087d9:	5e                   	pop    esi
c00087da:	5f                   	pop    edi
c00087db:	c3                   	ret    

c00087dc <VgaText::setCursorX(int)>:
c00087dc:	83 ec 10             	sub    esp,0x10
c00087df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087e3:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087ea:	50                   	push   eax
c00087eb:	e8 3c ff ff ff       	call   c000872c <VgaText::setCursor(int, int)>
c00087f0:	83 c4 1c             	add    esp,0x1c
c00087f3:	c3                   	ret    

c00087f4 <VgaText::setCursorY(int)>:
c00087f4:	83 ec 10             	sub    esp,0x10
c00087f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00087ff:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008802:	50                   	push   eax
c0008803:	e8 24 ff ff ff       	call   c000872c <VgaText::setCursor(int, int)>
c0008808:	83 c4 1c             	add    esp,0x1c
c000880b:	c3                   	ret    

c000880c <VgaText::incrementCursor(bool)>:
c000880c:	56                   	push   esi
c000880d:	53                   	push   ebx
c000880e:	51                   	push   ecx
c000880f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008813:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008817:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000881a:	40                   	inc    eax
c000881b:	83 f8 50             	cmp    eax,0x50
c000881e:	74 05                	je     c0008825 <VgaText::incrementCursor(bool)+0x19>
c0008820:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008823:	eb 24                	jmp    c0008849 <VgaText::incrementCursor(bool)+0x3d>
c0008825:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008828:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000882f:	8d 50 01             	lea    edx,[eax+0x1]
c0008832:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008835:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008838:	75 0f                	jne    c0008849 <VgaText::incrementCursor(bool)+0x3d>
c000883a:	83 ec 0c             	sub    esp,0xc
c000883d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008840:	53                   	push   ebx
c0008841:	e8 a4 fd ff ff       	call   c00085ea <VgaText::scrollScreen()>
c0008846:	83 c4 10             	add    esp,0x10
c0008849:	89 f0                	mov    eax,esi
c000884b:	84 c0                	test   al,al
c000884d:	74 0c                	je     c000885b <VgaText::incrementCursor(bool)+0x4f>
c000884f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008853:	5a                   	pop    edx
c0008854:	5b                   	pop    ebx
c0008855:	5e                   	pop    esi
c0008856:	e9 99 fc ff ff       	jmp    c00084f4 <VgaText::updateCursor()>
c000885b:	58                   	pop    eax
c000885c:	5b                   	pop    ebx
c000885d:	5e                   	pop    esi
c000885e:	c3                   	ret    
c000885f:	90                   	nop

c0008860 <VgaText::decrementCursor(bool)>:
c0008860:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008864:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008868:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000886b:	85 c0                	test   eax,eax
c000886d:	74 04                	je     c0008873 <VgaText::decrementCursor(bool)+0x13>
c000886f:	48                   	dec    eax
c0008870:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008873:	84 c9                	test   cl,cl
c0008875:	74 09                	je     c0008880 <VgaText::decrementCursor(bool)+0x20>
c0008877:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000887b:	e9 74 fc ff ff       	jmp    c00084f4 <VgaText::updateCursor()>
c0008880:	c3                   	ret    
c0008881:	90                   	nop

c0008882 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008882:	53                   	push   ebx
c0008883:	83 ec 08             	sub    esp,0x8
c0008886:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c000888b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000888f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008893:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008897:	83 f8 07             	cmp    eax,0x7
c000889a:	75 21                	jne    c00088bd <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c000889c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088a4:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088ac:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088b4:	83 c4 08             	add    esp,0x8
c00088b7:	5b                   	pop    ebx
c00088b8:	e9 86 2f 00 00       	jmp    c000b843 <Krnl::beep(int, int, bool)>
c00088bd:	83 f8 0d             	cmp    eax,0xd
c00088c0:	75 09                	jne    c00088cb <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088c9:	eb 2d                	jmp    c00088f8 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088cb:	83 f8 0a             	cmp    eax,0xa
c00088ce:	75 31                	jne    c0008901 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088d0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088d3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088da:	8d 50 01             	lea    edx,[eax+0x1]
c00088dd:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088e0:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088e3:	75 0f                	jne    c00088f4 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088e5:	83 ec 0c             	sub    esp,0xc
c00088e8:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00088eb:	53                   	push   ebx
c00088ec:	e8 f9 fc ff ff       	call   c00085ea <VgaText::scrollScreen()>
c00088f1:	83 c4 10             	add    esp,0x10
c00088f4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00088f8:	83 c4 08             	add    esp,0x8
c00088fb:	5b                   	pop    ebx
c00088fc:	e9 f3 fb ff ff       	jmp    c00084f4 <VgaText::updateCursor()>
c0008901:	83 f8 08             	cmp    eax,0x8
c0008904:	75 25                	jne    c000892b <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008906:	50                   	push   eax
c0008907:	50                   	push   eax
c0008908:	6a 01                	push   0x1
c000890a:	53                   	push   ebx
c000890b:	e8 50 ff ff ff       	call   c0008860 <VgaText::decrementCursor(bool)>
c0008910:	5a                   	pop    edx
c0008911:	59                   	pop    ecx
c0008912:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008915:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008918:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000891b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000891e:	6a 20                	push   0x20
c0008920:	53                   	push   ebx
c0008921:	e8 66 fd ff ff       	call   c000868c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008926:	83 c4 28             	add    esp,0x28
c0008929:	5b                   	pop    ebx
c000892a:	c3                   	ret    
c000892b:	83 ec 08             	sub    esp,0x8
c000892e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008931:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008934:	51                   	push   ecx
c0008935:	52                   	push   edx
c0008936:	50                   	push   eax
c0008937:	53                   	push   ebx
c0008938:	e8 4f fd ff ff       	call   c000868c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893d:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008941:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008949:	83 c4 28             	add    esp,0x28
c000894c:	5b                   	pop    ebx
c000894d:	e9 ba fe ff ff       	jmp    c000880c <VgaText::incrementCursor(bool)>

c0008952 <VgaText::putchar(char)>:
c0008952:	57                   	push   edi
c0008953:	56                   	push   esi
c0008954:	53                   	push   ebx
c0008955:	83 ec 10             	sub    esp,0x10
c0008958:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000895c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008960:	89 f8                	mov    eax,edi
c0008962:	0f be c0             	movsx  eax,al
c0008965:	83 f8 5b             	cmp    eax,0x5b
c0008968:	75 18                	jne    c0008982 <VgaText::putchar(char)+0x30>
c000896a:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000896e:	74 20                	je     c0008990 <VgaText::putchar(char)+0x3e>
c0008970:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008976:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000897d:	e9 c1 00 00 00       	jmp    c0008a43 <VgaText::putchar(char)+0xf1>
c0008982:	83 f8 1b             	cmp    eax,0x1b
c0008985:	75 09                	jne    c0008990 <VgaText::putchar(char)+0x3e>
c0008987:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000898b:	e9 b3 00 00 00       	jmp    c0008a43 <VgaText::putchar(char)+0xf1>
c0008990:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0008993:	84 c9                	test   cl,cl
c0008995:	0f 84 98 00 00 00    	je     c0008a33 <VgaText::putchar(char)+0xe1>
c000899b:	8d 77 c0             	lea    esi,[edi-0x40]
c000899e:	89 f2                	mov    edx,esi
c00089a0:	80 fa 3e             	cmp    dl,0x3e
c00089a3:	77 78                	ja     c0008a1d <VgaText::putchar(char)+0xcb>
c00089a5:	83 f8 6d             	cmp    eax,0x6d
c00089a8:	75 47                	jne    c00089f1 <VgaText::putchar(char)+0x9f>
c00089aa:	31 f6                	xor    esi,esi
c00089ac:	31 d2                	xor    edx,edx
c00089ae:	31 c0                	xor    eax,eax
c00089b0:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089b3:	7e 2d                	jle    c00089e2 <VgaText::putchar(char)+0x90>
c00089b5:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089ba:	83 fa 3b             	cmp    edx,0x3b
c00089bd:	75 17                	jne    c00089d6 <VgaText::putchar(char)+0x84>
c00089bf:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089c3:	50                   	push   eax
c00089c4:	53                   	push   ebx
c00089c5:	e8 40 fb ff ff       	call   c000850a <VgaText::doANSI_SGR(int)>
c00089ca:	59                   	pop    ecx
c00089cb:	31 d2                	xor    edx,edx
c00089cd:	5f                   	pop    edi
c00089ce:	31 c0                	xor    eax,eax
c00089d0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089d4:	eb 09                	jmp    c00089df <VgaText::putchar(char)+0x8d>
c00089d6:	6b c0 0a             	imul   eax,eax,0xa
c00089d9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089dd:	88 ca                	mov    dl,cl
c00089df:	46                   	inc    esi
c00089e0:	eb ce                	jmp    c00089b0 <VgaText::putchar(char)+0x5e>
c00089e2:	84 d2                	test   dl,dl
c00089e4:	74 2f                	je     c0008a15 <VgaText::putchar(char)+0xc3>
c00089e6:	50                   	push   eax
c00089e7:	53                   	push   ebx
c00089e8:	e8 1d fb ff ff       	call   c000850a <VgaText::doANSI_SGR(int)>
c00089ed:	58                   	pop    eax
c00089ee:	5a                   	pop    edx
c00089ef:	eb 24                	jmp    c0008a15 <VgaText::putchar(char)+0xc3>
c00089f1:	83 f8 4a             	cmp    eax,0x4a
c00089f4:	75 1f                	jne    c0008a15 <VgaText::putchar(char)+0xc3>
c00089f6:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00089fa:	75 19                	jne    c0008a15 <VgaText::putchar(char)+0xc3>
c00089fc:	83 ec 0c             	sub    esp,0xc
c00089ff:	53                   	push   ebx
c0008a00:	e8 89 fd ff ff       	call   c000878e <VgaText::clearScreen()>
c0008a05:	83 c4 0c             	add    esp,0xc
c0008a08:	6a 00                	push   0x0
c0008a0a:	6a 00                	push   0x0
c0008a0c:	53                   	push   ebx
c0008a0d:	e8 1a fd ff ff       	call   c000872c <VgaText::setCursor(int, int)>
c0008a12:	83 c4 10             	add    esp,0x10
c0008a15:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a1b:	eb 26                	jmp    c0008a43 <VgaText::putchar(char)+0xf1>
c0008a1d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a20:	83 f8 0e             	cmp    eax,0xe
c0008a23:	7f 1e                	jg     c0008a43 <VgaText::putchar(char)+0xf1>
c0008a25:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a28:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a2b:	89 f9                	mov    ecx,edi
c0008a2d:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a31:	eb 10                	jmp    c0008a43 <VgaText::putchar(char)+0xf1>
c0008a33:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a36:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a39:	50                   	push   eax
c0008a3a:	53                   	push   ebx
c0008a3b:	e8 42 fe ff ff       	call   c0008882 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a40:	83 c4 10             	add    esp,0x10
c0008a43:	83 c4 10             	add    esp,0x10
c0008a46:	5b                   	pop    ebx
c0008a47:	5e                   	pop    esi
c0008a48:	5f                   	pop    edi
c0008a49:	c3                   	ret    

c0008a4a <VgaText::putx(unsigned int)>:
c0008a4a:	57                   	push   edi
c0008a4b:	b9 11 00 00 00       	mov    ecx,0x11
c0008a50:	56                   	push   esi
c0008a51:	be 8e fd 01 c0       	mov    esi,0xc001fd8e
c0008a56:	53                   	push   ebx
c0008a57:	83 ec 20             	sub    esp,0x20
c0008a5a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a5e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a62:	fc                   	cld    
c0008a63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a65:	be 08 00 00 00       	mov    esi,0x8
c0008a6a:	50                   	push   eax
c0008a6b:	50                   	push   eax
c0008a6c:	89 d8                	mov    eax,ebx
c0008a6e:	c1 e3 04             	shl    ebx,0x4
c0008a71:	c1 e8 1c             	shr    eax,0x1c
c0008a74:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a79:	50                   	push   eax
c0008a7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a7e:	e8 cf fe ff ff       	call   c0008952 <VgaText::putchar(char)>
c0008a83:	83 c4 10             	add    esp,0x10
c0008a86:	4e                   	dec    esi
c0008a87:	75 e1                	jne    c0008a6a <VgaText::putx(unsigned int)+0x20>
c0008a89:	83 c4 20             	add    esp,0x20
c0008a8c:	5b                   	pop    ebx
c0008a8d:	5e                   	pop    esi
c0008a8e:	5f                   	pop    edi
c0008a8f:	c3                   	ret    

c0008a90 <VgaText::puts(char const*)>:
c0008a90:	53                   	push   ebx
c0008a91:	83 ec 08             	sub    esp,0x8
c0008a94:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008a98:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008a9b:	85 c0                	test   eax,eax
c0008a9d:	74 12                	je     c0008ab1 <VgaText::puts(char const*)+0x21>
c0008a9f:	43                   	inc    ebx
c0008aa0:	51                   	push   ecx
c0008aa1:	51                   	push   ecx
c0008aa2:	50                   	push   eax
c0008aa3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008aa7:	e8 a6 fe ff ff       	call   c0008952 <VgaText::putchar(char)>
c0008aac:	83 c4 10             	add    esp,0x10
c0008aaf:	eb e7                	jmp    c0008a98 <VgaText::puts(char const*)+0x8>
c0008ab1:	83 c4 08             	add    esp,0x8
c0008ab4:	5b                   	pop    ebx
c0008ab5:	c3                   	ret    

c0008ab6 <VgaText::write(unsigned long long, void*, int*)>:
c0008ab6:	55                   	push   ebp
c0008ab7:	57                   	push   edi
c0008ab8:	56                   	push   esi
c0008ab9:	53                   	push   ebx
c0008aba:	83 ec 0c             	sub    esp,0xc
c0008abd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ac1:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ac5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ac9:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ad0:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ad3:	39 eb                	cmp    ebx,ebp
c0008ad5:	74 13                	je     c0008aea <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008ad7:	43                   	inc    ebx
c0008ad8:	50                   	push   eax
c0008ad9:	50                   	push   eax
c0008ada:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008ade:	50                   	push   eax
c0008adf:	56                   	push   esi
c0008ae0:	e8 6d fe ff ff       	call   c0008952 <VgaText::putchar(char)>
c0008ae5:	83 c4 10             	add    esp,0x10
c0008ae8:	eb e9                	jmp    c0008ad3 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008aea:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008af1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008af5:	89 38                	mov    DWORD PTR [eax],edi
c0008af7:	83 c4 0c             	add    esp,0xc
c0008afa:	31 c0                	xor    eax,eax
c0008afc:	5b                   	pop    ebx
c0008afd:	5e                   	pop    esi
c0008afe:	5f                   	pop    edi
c0008aff:	5d                   	pop    ebp
c0008b00:	c3                   	ret    
c0008b01:	90                   	nop

c0008b02 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b02:	55                   	push   ebp
c0008b03:	57                   	push   edi
c0008b04:	56                   	push   esi
c0008b05:	53                   	push   ebx
c0008b06:	83 ec 0c             	sub    esp,0xc
c0008b09:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b0d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b12:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b19:	50                   	push   eax
c0008b1a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b1f:	50                   	push   eax
c0008b20:	e8 b3 fa ff ff       	call   c00085d8 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b25:	5a                   	pop    edx
c0008b26:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b2a:	59                   	pop    ecx
c0008b2b:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b2e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b32:	0f b7 f6             	movzx  esi,si
c0008b35:	0f b6 e8             	movzx  ebp,al
c0008b38:	01 f6                	add    esi,esi
c0008b3a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b3d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b40:	85 c0                	test   eax,eax
c0008b42:	0f 84 ef 00 00 00    	je     c0008c37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b48:	83 f8 0d             	cmp    eax,0xd
c0008b4b:	75 0c                	jne    c0008b59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b4d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b54:	e9 d8 00 00 00       	jmp    c0008c31 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b59:	83 f8 0a             	cmp    eax,0xa
c0008b5c:	75 44                	jne    c0008ba2 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b5e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b61:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b68:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b6b:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b6e:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b71:	75 0f                	jne    c0008b82 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b73:	83 ec 0c             	sub    esp,0xc
c0008b76:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b79:	53                   	push   ebx
c0008b7a:	e8 6b fa ff ff       	call   c00085ea <VgaText::scrollScreen()>
c0008b7f:	83 c4 10             	add    esp,0x10
c0008b82:	83 ec 0c             	sub    esp,0xc
c0008b85:	53                   	push   ebx
c0008b86:	e8 69 f9 ff ff       	call   c00084f4 <VgaText::updateCursor()>
c0008b8b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b8f:	83 c4 10             	add    esp,0x10
c0008b92:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b95:	0f b7 f6             	movzx  esi,si
c0008b98:	01 f6                	add    esi,esi
c0008b9a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b9d:	e9 8f 00 00 00       	jmp    c0008c31 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008ba2:	83 f8 08             	cmp    eax,0x8
c0008ba5:	75 34                	jne    c0008bdb <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008ba7:	51                   	push   ecx
c0008ba8:	51                   	push   ecx
c0008ba9:	6a 01                	push   0x1
c0008bab:	53                   	push   ebx
c0008bac:	e8 af fc ff ff       	call   c0008860 <VgaText::decrementCursor(bool)>
c0008bb1:	5e                   	pop    esi
c0008bb2:	58                   	pop    eax
c0008bb3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bb6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bb9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bbc:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bbf:	6a 20                	push   0x20
c0008bc1:	53                   	push   ebx
c0008bc2:	e8 c5 fa ff ff       	call   c000868c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bc7:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008bcb:	83 c4 20             	add    esp,0x20
c0008bce:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bd1:	0f b7 f6             	movzx  esi,si
c0008bd4:	01 f6                	add    esi,esi
c0008bd6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bd9:	eb 56                	jmp    c0008c31 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bdb:	52                   	push   edx
c0008bdc:	52                   	push   edx
c0008bdd:	55                   	push   ebp
c0008bde:	50                   	push   eax
c0008bdf:	e8 98 fa ff ff       	call   c000867c <VgaText::combineCharAndColour(char, unsigned char)>
c0008be4:	83 c4 10             	add    esp,0x10
c0008be7:	66 89 06             	mov    WORD PTR [esi],ax
c0008bea:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c0008bf0:	75 1d                	jne    c0008c0f <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008bf2:	83 ec 0c             	sub    esp,0xc
c0008bf5:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bf8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bfb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008bff:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c03:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c06:	50                   	push   eax
c0008c07:	e8 a4 f1 00 00       	call   c0017db0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c0c:	83 c4 20             	add    esp,0x20
c0008c0f:	83 c6 02             	add    esi,0x2
c0008c12:	50                   	push   eax
c0008c13:	50                   	push   eax
c0008c14:	6a 00                	push   0x0
c0008c16:	53                   	push   ebx
c0008c17:	e8 f0 fb ff ff       	call   c000880c <VgaText::incrementCursor(bool)>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c23:	75 0c                	jne    c0008c31 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c25:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c29:	0f b7 f6             	movzx  esi,si
c0008c2c:	01 f6                	add    esi,esi
c0008c2e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c31:	47                   	inc    edi
c0008c32:	e9 06 ff ff ff       	jmp    c0008b3d <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c37:	83 ec 0c             	sub    esp,0xc
c0008c3a:	53                   	push   ebx
c0008c3b:	e8 b4 f8 ff ff       	call   c00084f4 <VgaText::updateCursor()>
c0008c40:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c47:	83 c4 1c             	add    esp,0x1c
c0008c4a:	5b                   	pop    ebx
c0008c4b:	5e                   	pop    esi
c0008c4c:	5f                   	pop    edi
c0008c4d:	5d                   	pop    ebp
c0008c4e:	c3                   	ret    
c0008c4f:	90                   	nop

c0008c50 <VgaText::VgaText(char const*)>:
c0008c50:	56                   	push   esi
c0008c51:	53                   	push   ebx
c0008c52:	83 ec 04             	sub    esp,0x4
c0008c55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c59:	83 ec 08             	sub    esp,0x8
c0008c5c:	6a 00                	push   0x0
c0008c5e:	50                   	push   eax
c0008c5f:	e8 6a 05 00 00       	call   c00091ce <UnixFile::UnixFile(int)>
c0008c64:	83 c4 10             	add    esp,0x10
c0008c67:	ba b4 fd 01 c0       	mov    edx,0xc001fdb4
c0008c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c70:	89 10                	mov    DWORD PTR [eax],edx
c0008c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c76:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c81:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c94:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9c:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008ca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca7:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb2:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbd:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc8:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ccf:	83 ec 0c             	sub    esp,0xc
c0008cd2:	6a 01                	push   0x1
c0008cd4:	e8 44 09 00 00       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c0008cd9:	83 c4 10             	add    esp,0x10
c0008cdc:	89 c2                	mov    edx,eax
c0008cde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008ce5:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c0008ceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008cf2:	89 c6                	mov    esi,eax
c0008cf4:	e8 ba f0 ff ff       	call   c0007db3 <Phys::allocatePage()>
c0008cf9:	68 05 0c 00 00       	push   0xc05
c0008cfe:	56                   	push   esi
c0008cff:	50                   	push   eax
c0008d00:	53                   	push   ebx
c0008d01:	e8 fe 0f 00 00       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d06:	83 c4 10             	add    esp,0x10
c0008d09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d10:	83 ec 04             	sub    esp,0x4
c0008d13:	68 a0 0f 00 00       	push   0xfa0
c0008d18:	6a 00                	push   0x0
c0008d1a:	50                   	push   eax
c0008d1b:	e8 d0 77 ff ff       	call   c00004f0 <memset>
c0008d20:	83 c4 10             	add    esp,0x10
c0008d23:	83 ec 04             	sub    esp,0x4
c0008d26:	6a 00                	push   0x0
c0008d28:	6a 07                	push   0x7
c0008d2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d2e:	e8 6b f8 ff ff       	call   c000859e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d33:	83 c4 10             	add    esp,0x10
c0008d36:	83 ec 04             	sub    esp,0x4
c0008d39:	6a 00                	push   0x0
c0008d3b:	6a 00                	push   0x0
c0008d3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d41:	e8 e6 f9 ff ff       	call   c000872c <VgaText::setCursor(int, int)>
c0008d46:	83 c4 10             	add    esp,0x10
c0008d49:	83 ec 0c             	sub    esp,0xc
c0008d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d50:	e8 39 fa ff ff       	call   c000878e <VgaText::clearScreen()>
c0008d55:	83 c4 10             	add    esp,0x10
c0008d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d5c:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d64:	05 82 00 00 00       	add    eax,0x82
c0008d69:	83 ec 04             	sub    esp,0x4
c0008d6c:	68 80 00 00 00       	push   0x80
c0008d71:	6a 00                	push   0x0
c0008d73:	50                   	push   eax
c0008d74:	e8 77 77 ff ff       	call   c00004f0 <memset>
c0008d79:	83 c4 10             	add    esp,0x10
c0008d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d80:	05 02 01 00 00       	add    eax,0x102
c0008d85:	83 ec 04             	sub    esp,0x4
c0008d88:	68 80 00 00 00       	push   0x80
c0008d8d:	6a 00                	push   0x0
c0008d8f:	50                   	push   eax
c0008d90:	e8 5b 77 ff ff       	call   c00004f0 <memset>
c0008d95:	83 c4 10             	add    esp,0x10
c0008d98:	90                   	nop
c0008d99:	83 c4 04             	add    esp,0x4
c0008d9c:	5b                   	pop    ebx
c0008d9d:	5e                   	pop    esi
c0008d9e:	c3                   	ret    
c0008d9f:	90                   	nop

c0008da0 <VgaText::receiveKey(unsigned char)>:
c0008da0:	55                   	push   ebp
c0008da1:	57                   	push   edi
c0008da2:	56                   	push   esi
c0008da3:	53                   	push   ebx
c0008da4:	83 ec 2c             	sub    esp,0x2c
c0008da7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008dab:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008daf:	89 ef                	mov    edi,ebp
c0008db1:	81 e7 ff 00 00 00    	and    edi,0xff
c0008db7:	0f 84 66 01 00 00    	je     c0008f23 <VgaText::receiveKey(unsigned char)+0x183>
c0008dbd:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dc3:	83 ff 08             	cmp    edi,0x8
c0008dc6:	75 73                	jne    c0008e3b <VgaText::receiveKey(unsigned char)+0x9b>
c0008dc8:	83 ec 0c             	sub    esp,0xc
c0008dcb:	56                   	push   esi
c0008dcc:	e8 9f 77 ff ff       	call   c0000570 <strlen>
c0008dd1:	83 c4 10             	add    esp,0x10
c0008dd4:	85 c0                	test   eax,eax
c0008dd6:	0f 84 02 01 00 00    	je     c0008ede <VgaText::receiveKey(unsigned char)+0x13e>
c0008ddc:	50                   	push   eax
c0008ddd:	50                   	push   eax
c0008dde:	6a 08                	push   0x8
c0008de0:	53                   	push   ebx
c0008de1:	e8 6c fb ff ff       	call   c0008952 <VgaText::putchar(char)>
c0008de6:	89 34 24             	mov    DWORD PTR [esp],esi
c0008de9:	e8 82 77 ff ff       	call   c0000570 <strlen>
c0008dee:	83 c4 10             	add    esp,0x10
c0008df1:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008df9:	83 fa 0d             	cmp    edx,0xd
c0008dfc:	89 d0                	mov    eax,edx
c0008dfe:	0f 95 c1             	setne  cl
c0008e01:	83 fa 1f             	cmp    edx,0x1f
c0008e04:	0f 9e c2             	setle  dl
c0008e07:	0f b6 d2             	movzx  edx,dl
c0008e0a:	85 ca                	test   edx,ecx
c0008e0c:	74 17                	je     c0008e25 <VgaText::receiveKey(unsigned char)+0x85>
c0008e0e:	83 e8 08             	sub    eax,0x8
c0008e11:	3c 02                	cmp    al,0x2
c0008e13:	76 10                	jbe    c0008e25 <VgaText::receiveKey(unsigned char)+0x85>
c0008e15:	55                   	push   ebp
c0008e16:	55                   	push   ebp
c0008e17:	68 9f fd 01 c0       	push   0xc001fd9f
c0008e1c:	53                   	push   ebx
c0008e1d:	e8 6e fc ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0008e22:	83 c4 10             	add    esp,0x10
c0008e25:	83 ec 0c             	sub    esp,0xc
c0008e28:	56                   	push   esi
c0008e29:	e8 42 77 ff ff       	call   c0000570 <strlen>
c0008e2e:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e36:	e9 a0 00 00 00       	jmp    c0008edb <VgaText::receiveKey(unsigned char)+0x13b>
c0008e3b:	83 ec 0c             	sub    esp,0xc
c0008e3e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e44:	50                   	push   eax
c0008e45:	e8 26 77 ff ff       	call   c0000570 <strlen>
c0008e4a:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e4d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e51:	e8 1a 77 ff ff       	call   c0000570 <strlen>
c0008e56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e5a:	83 c4 10             	add    esp,0x10
c0008e5d:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e61:	3d 80 00 00 00       	cmp    eax,0x80
c0008e66:	0f 87 b7 00 00 00    	ja     c0008f23 <VgaText::receiveKey(unsigned char)+0x183>
c0008e6c:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e6f:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e72:	3c 1e                	cmp    al,0x1e
c0008e74:	0f 96 c0             	setbe  al
c0008e77:	80 fa 01             	cmp    dl,0x1
c0008e7a:	0f 97 c2             	seta   dl
c0008e7d:	0f b6 d2             	movzx  edx,dl
c0008e80:	85 c2                	test   edx,eax
c0008e82:	74 2e                	je     c0008eb2 <VgaText::receiveKey(unsigned char)+0x112>
c0008e84:	83 ff 0d             	cmp    edi,0xd
c0008e87:	74 29                	je     c0008eb2 <VgaText::receiveKey(unsigned char)+0x112>
c0008e89:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e8c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e8f:	68 a5 fd 01 c0       	push   0xc001fda5
c0008e94:	53                   	push   ebx
c0008e95:	e8 68 fc ff ff       	call   c0008b02 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008e9a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e9d:	8d 45 40             	lea    eax,[ebp+0x40]
c0008ea0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea3:	0f b6 c0             	movzx  eax,al
c0008ea6:	50                   	push   eax
c0008ea7:	53                   	push   ebx
c0008ea8:	e8 d5 f9 ff ff       	call   c0008882 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ead:	83 c4 20             	add    esp,0x20
c0008eb0:	eb 11                	jmp    c0008ec3 <VgaText::receiveKey(unsigned char)+0x123>
c0008eb2:	89 e8                	mov    eax,ebp
c0008eb4:	51                   	push   ecx
c0008eb5:	0f be c0             	movsx  eax,al
c0008eb8:	51                   	push   ecx
c0008eb9:	50                   	push   eax
c0008eba:	53                   	push   ebx
c0008ebb:	e8 92 fa ff ff       	call   c0008952 <VgaText::putchar(char)>
c0008ec0:	83 c4 10             	add    esp,0x10
c0008ec3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ec8:	89 e8                	mov    eax,ebp
c0008eca:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ece:	52                   	push   edx
c0008ecf:	52                   	push   edx
c0008ed0:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008ed4:	50                   	push   eax
c0008ed5:	56                   	push   esi
c0008ed6:	e8 65 79 ff ff       	call   c0000840 <strcat>
c0008edb:	83 c4 10             	add    esp,0x10
c0008ede:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008ee4:	b0 01                	mov    al,0x1
c0008ee6:	83 ff 1c             	cmp    edi,0x1c
c0008ee9:	77 0e                	ja     c0008ef9 <VgaText::receiveKey(unsigned char)+0x159>
c0008eeb:	b8 08 04 00 10       	mov    eax,0x10000408
c0008ef0:	89 f9                	mov    ecx,edi
c0008ef2:	d3 e8                	shr    eax,cl
c0008ef4:	f7 d0                	not    eax
c0008ef6:	83 e0 01             	and    eax,0x1
c0008ef9:	84 c0                	test   al,al
c0008efb:	74 04                	je     c0008f01 <VgaText::receiveKey(unsigned char)+0x161>
c0008efd:	84 d2                	test   dl,dl
c0008eff:	74 22                	je     c0008f23 <VgaText::receiveKey(unsigned char)+0x183>
c0008f01:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f07:	50                   	push   eax
c0008f08:	50                   	push   eax
c0008f09:	56                   	push   esi
c0008f0a:	53                   	push   ebx
c0008f0b:	e8 30 79 ff ff       	call   c0000840 <strcat>
c0008f10:	83 c4 0c             	add    esp,0xc
c0008f13:	68 80 00 00 00       	push   0x80
c0008f18:	6a 00                	push   0x0
c0008f1a:	56                   	push   esi
c0008f1b:	e8 d0 75 ff ff       	call   c00004f0 <memset>
c0008f20:	83 c4 10             	add    esp,0x10
c0008f23:	83 c4 2c             	add    esp,0x2c
c0008f26:	5b                   	pop    ebx
c0008f27:	5e                   	pop    esi
c0008f28:	5f                   	pop    edi
c0008f29:	5d                   	pop    ebp
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <VgaText::doUpdate()>:
c0008f2c:	c3                   	ret    

c0008f2d <newTerminal(char*)>:
c0008f2d:	83 ec 28             	sub    esp,0x28
c0008f30:	68 84 01 00 00       	push   0x184
c0008f35:	e8 74 eb ff ff       	call   c0007aae <malloc>
c0008f3a:	5a                   	pop    edx
c0008f3b:	59                   	pop    ecx
c0008f3c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008f40:	50                   	push   eax
c0008f41:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008f45:	e8 06 fd ff ff       	call   c0008c50 <VgaText::VgaText(char const*)>
c0008f4a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f4e:	83 c4 2c             	add    esp,0x2c
c0008f51:	c3                   	ret    
c0008f52:	66 90                	xchg   ax,ax

c0008f54 <TSS::TSS()>:
c0008f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f58:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f5f:	90                   	nop
c0008f60:	c3                   	ret    
c0008f61:	90                   	nop
c0008f62:	66 90                	xchg   ax,ax

c0008f64 <TSS::setESP(unsigned long)>:
c0008f64:	55                   	push   ebp
c0008f65:	89 e5                	mov    ebp,esp
c0008f67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f6d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f70:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f73:	90                   	nop
c0008f74:	5d                   	pop    ebp
c0008f75:	c3                   	ret    
c0008f76:	66 90                	xchg   ax,ax

c0008f78 <TSS::flush()>:
c0008f78:	55                   	push   ebp
c0008f79:	89 e5                	mov    ebp,esp
c0008f7b:	83 ec 10             	sub    esp,0x10
c0008f7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f81:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f83:	83 c8 03             	or     eax,0x3
c0008f86:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f8a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f8e:	66 89 d0             	mov    ax,dx
c0008f91:	0f 00 d8             	ltr    ax
c0008f94:	90                   	nop
c0008f95:	c9                   	leave  
c0008f96:	c3                   	ret    
c0008f97:	90                   	nop

c0008f98 <TSS::setup(unsigned long, unsigned long)>:
c0008f98:	55                   	push   ebp
c0008f99:	89 e5                	mov    ebp,esp
c0008f9b:	83 ec 18             	sub    esp,0x18
c0008f9e:	83 ec 0c             	sub    esp,0xc
c0008fa1:	6a 68                	push   0x68
c0008fa3:	e8 06 eb ff ff       	call   c0007aae <malloc>
c0008fa8:	83 c4 10             	add    esp,0x10
c0008fab:	89 c2                	mov    edx,eax
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb9:	83 ec 04             	sub    esp,0x4
c0008fbc:	6a 68                	push   0x68
c0008fbe:	6a 00                	push   0x0
c0008fc0:	50                   	push   eax
c0008fc1:	e8 2a 75 ff ff       	call   c00004f0 <memset>
c0008fc6:	83 c4 10             	add    esp,0x10
c0008fc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fdb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fea:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ff3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008ff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ffc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fff:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0009005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000900b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009014:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009017:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000901d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009020:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009023:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009029:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000902c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009038:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000903b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000903e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009041:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009044:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009047:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000904a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000904d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009050:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009053:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000905a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009060:	0f 20 da             	mov    edx,cr3
c0009063:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009066:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009069:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000906c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000906f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009072:	83 ec 08             	sub    esp,0x8
c0009075:	50                   	push   eax
c0009076:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009079:	50                   	push   eax
c000907a:	e8 9b e2 ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c000907f:	83 c4 10             	add    esp,0x10
c0009082:	83 ec 08             	sub    esp,0x8
c0009085:	6a 68                	push   0x68
c0009087:	8d 45 ec             	lea    eax,[ebp-0x14]
c000908a:	50                   	push   eax
c000908b:	e8 a6 e2 ff ff       	call   c0007336 <GDTEntry::setLimit(unsigned int)>
c0009090:	83 c4 10             	add    esp,0x10
c0009093:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009097:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000909a:	83 e0 0f             	and    eax,0xf
c000909d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090a0:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00090a3:	83 c8 40             	or     eax,0x40
c00090a6:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090a9:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00090ae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090b4:	05 78 01 00 00       	add    eax,0x178
c00090b9:	83 ec 04             	sub    esp,0x4
c00090bc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090bf:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090c2:	50                   	push   eax
c00090c3:	e8 a2 e2 ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00090c8:	83 c4 10             	add    esp,0x10
c00090cb:	89 c2                	mov    edx,eax
c00090cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090d0:	89 10                	mov    DWORD PTR [eax],edx
c00090d2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00090d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090dd:	05 78 01 00 00       	add    eax,0x178
c00090e2:	83 ec 0c             	sub    esp,0xc
c00090e5:	50                   	push   eax
c00090e6:	e8 a9 e2 ff ff       	call   c0007394 <GDT::flush()>
c00090eb:	83 c4 10             	add    esp,0x10
c00090ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090f3:	c9                   	leave  
c00090f4:	c3                   	ret    
c00090f5:	90                   	nop

c00090f6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090fa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009101:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009106:	75 08                	jne    c0009110 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0009108:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000910e:	eb 38                	jmp    c0009148 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009110:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009115:	75 17                	jne    c000912e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009117:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000911c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000911f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009125:	8b 10                	mov    edx,DWORD PTR [eax]
c0009127:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000912b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000912e:	89 c1                	mov    ecx,eax
c0009130:	83 e1 fd             	and    ecx,0xfffffffd
c0009133:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009139:	74 cd                	je     c0009108 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000913b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009140:	83 e0 ef             	and    eax,0xffffffef
c0009143:	83 f8 08             	cmp    eax,0x8
c0009146:	76 c0                	jbe    c0009108 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009148:	31 c0                	xor    eax,eax
c000914a:	c3                   	ret    
c000914b:	90                   	nop

c000914c <ReservedFilename::isAtty()>:
c000914c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009150:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009153:	31 c0                	xor    eax,eax
c0009155:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000915b:	74 09                	je     c0009166 <ReservedFilename::isAtty()+0x1a>
c000915d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009163:	0f 94 c0             	sete   al
c0009166:	c3                   	ret    
c0009167:	90                   	nop

c0009168 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009168:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000916c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009170:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009173:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009177:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000917c:	75 08                	jne    c0009186 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000917e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009184:	eb 3d                	jmp    c00091c3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009186:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000918b:	75 17                	jne    c00091a4 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000918d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009192:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009195:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000919b:	8b 10                	mov    edx,DWORD PTR [eax]
c000919d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00091a1:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00091a4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00091a9:	75 04                	jne    c00091af <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00091ab:	89 0a                	mov    DWORD PTR [edx],ecx
c00091ad:	eb 14                	jmp    c00091c3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00091af:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091b4:	74 c8                	je     c000917e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091b6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091bb:	83 e0 ef             	and    eax,0xffffffef
c00091be:	83 f8 08             	cmp    eax,0x8
c00091c1:	76 bb                	jbe    c000917e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091c3:	31 c0                	xor    eax,eax
c00091c5:	c3                   	ret    

c00091c6 <UnixFile::getFileDescriptor()>:
c00091c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091cd:	c3                   	ret    

c00091ce <UnixFile::UnixFile(int)>:
c00091ce:	53                   	push   ebx
c00091cf:	83 ec 28             	sub    esp,0x28
c00091d2:	ba 7c fe 01 c0       	mov    edx,0xc001fe7c
c00091d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091db:	89 10                	mov    DWORD PTR [eax],edx
c00091dd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091e5:	0f 8f 90 01 00 00    	jg     c000937b <UnixFile::UnixFile(int)+0x1ad>
c00091eb:	a1 c0 1f 02 c0       	mov    eax,ds:0xc0021fc0
c00091f0:	8d 50 01             	lea    edx,[eax+0x1]
c00091f3:	89 15 c0 1f 02 c0    	mov    DWORD PTR ds:0xc0021fc0,edx
c00091f9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091fd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009200:	83 ec 08             	sub    esp,0x8
c0009203:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009207:	68 98 4f 02 c0       	push   0xc0024f98
c000920c:	e8 37 57 01 00       	call   c001e948 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009211:	83 c4 10             	add    esp,0x10
c0009214:	a0 94 4f 02 c0       	mov    al,ds:0xc0024f94
c0009219:	83 f0 01             	xor    eax,0x1
c000921c:	0f b6 c0             	movzx  eax,al
c000921f:	85 c0                	test   eax,eax
c0009221:	0f 84 55 01 00 00    	je     c000937c <UnixFile::UnixFile(int)+0x1ae>
c0009227:	c6 05 94 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024f94,0x1
c000922e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009236:	83 ec 0c             	sub    esp,0xc
c0009239:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000923d:	e8 6c e8 ff ff       	call   c0007aae <malloc>
c0009242:	83 c4 10             	add    esp,0x10
c0009245:	89 c3                	mov    ebx,eax
c0009247:	83 ec 08             	sub    esp,0x8
c000924a:	68 03 ff ff 0f       	push   0xfffff03
c000924f:	53                   	push   ebx
c0009250:	e8 2d 01 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c0009255:	83 c4 10             	add    esp,0x10
c0009258:	89 1d 8c 4f 02 c0    	mov    DWORD PTR ds:0xc0024f8c,ebx
c000925e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009266:	83 ec 0c             	sub    esp,0xc
c0009269:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000926d:	e8 3c e8 ff ff       	call   c0007aae <malloc>
c0009272:	83 c4 10             	add    esp,0x10
c0009275:	89 c3                	mov    ebx,eax
c0009277:	83 ec 08             	sub    esp,0x8
c000927a:	68 01 ff ff 0f       	push   0xfffff01
c000927f:	53                   	push   ebx
c0009280:	e8 fd 00 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 1d 90 4f 02 c0    	mov    DWORD PTR ds:0xc0024f90,ebx
c000928e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009296:	83 ec 0c             	sub    esp,0xc
c0009299:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000929d:	e8 0c e8 ff ff       	call   c0007aae <malloc>
c00092a2:	83 c4 10             	add    esp,0x10
c00092a5:	89 c3                	mov    ebx,eax
c00092a7:	83 ec 08             	sub    esp,0x8
c00092aa:	68 00 ff ff 0f       	push   0xfffff00
c00092af:	53                   	push   ebx
c00092b0:	e8 cd 00 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c00092b5:	83 c4 10             	add    esp,0x10
c00092b8:	89 1d 84 4f 02 c0    	mov    DWORD PTR ds:0xc0024f84,ebx
c00092be:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092c6:	83 ec 0c             	sub    esp,0xc
c00092c9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092cd:	e8 dc e7 ff ff       	call   c0007aae <malloc>
c00092d2:	83 c4 10             	add    esp,0x10
c00092d5:	89 c3                	mov    ebx,eax
c00092d7:	83 ec 08             	sub    esp,0x8
c00092da:	68 02 ff ff 0f       	push   0xfffff02
c00092df:	53                   	push   ebx
c00092e0:	e8 9d 00 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c00092e5:	83 c4 10             	add    esp,0x10
c00092e8:	89 1d 88 4f 02 c0    	mov    DWORD PTR ds:0xc0024f88,ebx
c00092ee:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092f6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092fb:	7f 7f                	jg     c000937c <UnixFile::UnixFile(int)+0x1ae>
c00092fd:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0009305:	83 ec 0c             	sub    esp,0xc
c0009308:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000930c:	e8 9d e7 ff ff       	call   c0007aae <malloc>
c0009311:	83 c4 10             	add    esp,0x10
c0009314:	89 c3                	mov    ebx,eax
c0009316:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000931a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000931f:	83 ec 08             	sub    esp,0x8
c0009322:	50                   	push   eax
c0009323:	53                   	push   ebx
c0009324:	e8 59 00 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c0009329:	83 c4 10             	add    esp,0x10
c000932c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009330:	89 1c 85 60 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0a0],ebx
c0009337:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000933f:	83 ec 0c             	sub    esp,0xc
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 63 e7 ff ff       	call   c0007aae <malloc>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	89 c3                	mov    ebx,eax
c0009350:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009354:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009359:	83 ec 08             	sub    esp,0x8
c000935c:	50                   	push   eax
c000935d:	53                   	push   ebx
c000935e:	e8 1f 00 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c0009363:	83 c4 10             	add    esp,0x10
c0009366:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000936a:	89 1c 85 20 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0e0],ebx
c0009371:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009376:	e9 7b ff ff ff       	jmp    c00092f6 <UnixFile::UnixFile(int)+0x128>
c000937b:	90                   	nop
c000937c:	83 c4 28             	add    esp,0x28
c000937f:	5b                   	pop    ebx
c0009380:	c3                   	ret    
c0009381:	90                   	nop

c0009382 <ReservedFilename::ReservedFilename(int)>:
c0009382:	83 ec 0c             	sub    esp,0xc
c0009385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009389:	83 ec 08             	sub    esp,0x8
c000938c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009390:	50                   	push   eax
c0009391:	e8 38 fe ff ff       	call   c00091ce <UnixFile::UnixFile(int)>
c0009396:	83 c4 10             	add    esp,0x10
c0009399:	ba 98 fe 01 c0       	mov    edx,0xc001fe98
c000939e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093a2:	89 10                	mov    DWORD PTR [eax],edx
c00093a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00093ac:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00093af:	90                   	nop
c00093b0:	83 c4 0c             	add    esp,0xc
c00093b3:	c3                   	ret    

c00093b4 <UnixFile::~UnixFile()>:
c00093b4:	83 ec 1c             	sub    esp,0x1c
c00093b7:	ba 7c fe 01 c0       	mov    edx,0xc001fe7c
c00093bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093c0:	89 10                	mov    DWORD PTR [eax],edx
c00093c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093c9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093ce:	7f 76                	jg     c0009446 <UnixFile::~UnixFile()+0x92>
c00093d0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093d8:	83 ec 0c             	sub    esp,0xc
c00093db:	68 98 4f 02 c0       	push   0xc0024f98
c00093e0:	e8 37 56 01 00       	call   c001ea1c <LinkedList<UnixFile>::getFirstElement()>
c00093e5:	83 c4 10             	add    esp,0x10
c00093e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093ec:	83 ec 0c             	sub    esp,0xc
c00093ef:	68 98 4f 02 c0       	push   0xc0024f98
c00093f4:	e8 2b 56 01 00       	call   c001ea24 <LinkedList<UnixFile>::removeFirst()>
c00093f9:	83 c4 10             	add    esp,0x10
c00093fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009400:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009404:	74 43                	je     c0009449 <UnixFile::~UnixFile()+0x95>
c0009406:	83 ec 08             	sub    esp,0x8
c0009409:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000940d:	68 98 4f 02 c0       	push   0xc0024f98
c0009412:	e8 31 55 01 00       	call   c001e948 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009417:	83 c4 10             	add    esp,0x10
c000941a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000941e:	8d 50 01             	lea    edx,[eax+0x1]
c0009421:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009425:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000942a:	0f 94 c0             	sete   al
c000942d:	0f b6 c0             	movzx  eax,al
c0009430:	85 c0                	test   eax,eax
c0009432:	74 a4                	je     c00093d8 <UnixFile::~UnixFile()+0x24>
c0009434:	83 ec 0c             	sub    esp,0xc
c0009437:	68 54 fe 01 c0       	push   0xc001fe54
c000943c:	e8 d6 74 00 00       	call   c0010917 <KePanic(char const*)>
c0009441:	83 c4 10             	add    esp,0x10
c0009444:	eb 92                	jmp    c00093d8 <UnixFile::~UnixFile()+0x24>
c0009446:	90                   	nop
c0009447:	eb 01                	jmp    c000944a <UnixFile::~UnixFile()+0x96>
c0009449:	90                   	nop
c000944a:	90                   	nop
c000944b:	83 c4 1c             	add    esp,0x1c
c000944e:	c3                   	ret    
c000944f:	90                   	nop

c0009450 <UnixFile::~UnixFile()>:
c0009450:	83 ec 0c             	sub    esp,0xc
c0009453:	83 ec 0c             	sub    esp,0xc
c0009456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000945a:	e8 55 ff ff ff       	call   c00093b4 <UnixFile::~UnixFile()>
c000945f:	83 c4 10             	add    esp,0x10
c0009462:	83 ec 08             	sub    esp,0x8
c0009465:	6a 0c                	push   0xc
c0009467:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000946b:	e8 4d 14 00 00       	call   c000a8bd <operator delete(void*, unsigned long)>
c0009470:	83 c4 10             	add    esp,0x10
c0009473:	83 c4 0c             	add    esp,0xc
c0009476:	c3                   	ret    
c0009477:	90                   	nop

c0009478 <ReservedFilename::~ReservedFilename()>:
c0009478:	83 ec 0c             	sub    esp,0xc
c000947b:	ba 98 fe 01 c0       	mov    edx,0xc001fe98
c0009480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009484:	89 10                	mov    DWORD PTR [eax],edx
c0009486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000948a:	83 ec 0c             	sub    esp,0xc
c000948d:	50                   	push   eax
c000948e:	e8 21 ff ff ff       	call   c00093b4 <UnixFile::~UnixFile()>
c0009493:	83 c4 10             	add    esp,0x10
c0009496:	90                   	nop
c0009497:	83 c4 0c             	add    esp,0xc
c000949a:	c3                   	ret    
c000949b:	90                   	nop

c000949c <ReservedFilename::~ReservedFilename()>:
c000949c:	83 ec 0c             	sub    esp,0xc
c000949f:	83 ec 0c             	sub    esp,0xc
c00094a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094a6:	e8 cd ff ff ff       	call   c0009478 <ReservedFilename::~ReservedFilename()>
c00094ab:	83 c4 10             	add    esp,0x10
c00094ae:	83 ec 08             	sub    esp,0x8
c00094b1:	6a 0c                	push   0xc
c00094b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094b7:	e8 01 14 00 00       	call   c000a8bd <operator delete(void*, unsigned long)>
c00094bc:	83 c4 10             	add    esp,0x10
c00094bf:	83 c4 0c             	add    esp,0xc
c00094c2:	c3                   	ret    

c00094c3 <getFromFileDescriptor(int)>:
c00094c3:	53                   	push   ebx
c00094c4:	83 ec 08             	sub    esp,0x8
c00094c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094cb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094d1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094d7:	7f 2c                	jg     c0009505 <getFromFileDescriptor(int)+0x42>
c00094d9:	83 ec 0c             	sub    esp,0xc
c00094dc:	68 98 4f 02 c0       	push   0xc0024f98
c00094e1:	e8 36 55 01 00       	call   c001ea1c <LinkedList<UnixFile>::getFirstElement()>
c00094e6:	83 c4 10             	add    esp,0x10
c00094e9:	85 c0                	test   eax,eax
c00094eb:	75 04                	jne    c00094f1 <getFromFileDescriptor(int)+0x2e>
c00094ed:	31 c0                	xor    eax,eax
c00094ef:	eb 6e                	jmp    c000955f <getFromFileDescriptor(int)+0x9c>
c00094f1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094f4:	74 69                	je     c000955f <getFromFileDescriptor(int)+0x9c>
c00094f6:	52                   	push   edx
c00094f7:	52                   	push   edx
c00094f8:	50                   	push   eax
c00094f9:	68 98 4f 02 c0       	push   0xc0024f98
c00094fe:	e8 c3 55 01 00       	call   c001eac6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0009503:	eb e1                	jmp    c00094e6 <getFromFileDescriptor(int)+0x23>
c0009505:	a1 8c 4f 02 c0       	mov    eax,ds:0xc0024f8c
c000950a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009510:	74 4d                	je     c000955f <getFromFileDescriptor(int)+0x9c>
c0009512:	a1 90 4f 02 c0       	mov    eax,ds:0xc0024f90
c0009517:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000951d:	74 40                	je     c000955f <getFromFileDescriptor(int)+0x9c>
c000951f:	a1 88 4f 02 c0       	mov    eax,ds:0xc0024f88
c0009524:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000952a:	74 33                	je     c000955f <getFromFileDescriptor(int)+0x9c>
c000952c:	a1 84 4f 02 c0       	mov    eax,ds:0xc0024f84
c0009531:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009537:	74 26                	je     c000955f <getFromFileDescriptor(int)+0x9c>
c0009539:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000953f:	83 f8 08             	cmp    eax,0x8
c0009542:	77 09                	ja     c000954d <getFromFileDescriptor(int)+0x8a>
c0009544:	8b 04 85 60 4f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb0a0]
c000954b:	eb 12                	jmp    c000955f <getFromFileDescriptor(int)+0x9c>
c000954d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009553:	83 fb 08             	cmp    ebx,0x8
c0009556:	77 95                	ja     c00094ed <getFromFileDescriptor(int)+0x2a>
c0009558:	8b 04 9d 20 4f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb0e0]
c000955f:	83 c4 08             	add    esp,0x8
c0009562:	5b                   	pop    ebx
c0009563:	c3                   	ret    

c0009564 <__static_initialization_and_destruction_0(int, int)>:
c0009564:	83 ec 0c             	sub    esp,0xc
c0009567:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000956c:	75 34                	jne    c00095a2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000956e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009576:	75 2a                	jne    c00095a2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009578:	83 ec 0c             	sub    esp,0xc
c000957b:	68 98 4f 02 c0       	push   0xc0024f98
c0009580:	e8 81 53 01 00       	call   c001e906 <LinkedList<UnixFile>::LinkedList()>
c0009585:	83 c4 10             	add    esp,0x10
c0009588:	83 ec 04             	sub    esp,0x4
c000958b:	68 44 1f 02 c0       	push   0xc0021f44
c0009590:	68 98 4f 02 c0       	push   0xc0024f98
c0009595:	68 04 e9 01 c0       	push   0xc001e904
c000959a:	e8 ce 12 00 00       	call   c000a86d <__cxa_atexit>
c000959f:	83 c4 10             	add    esp,0x10
c00095a2:	90                   	nop
c00095a3:	83 c4 0c             	add    esp,0xc
c00095a6:	c3                   	ret    

c00095a7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00095a7:	83 ec 0c             	sub    esp,0xc
c00095aa:	83 ec 08             	sub    esp,0x8
c00095ad:	68 ff ff 00 00       	push   0xffff
c00095b2:	6a 01                	push   0x1
c00095b4:	e8 ab ff ff ff       	call   c0009564 <__static_initialization_and_destruction_0(int, int)>
c00095b9:	83 c4 10             	add    esp,0x10
c00095bc:	83 c4 0c             	add    esp,0xc
c00095bf:	c3                   	ret    

c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095c0:	53                   	push   ebx
c00095c1:	8b 15 c8 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fc8
c00095c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095cb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095cf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095d5:	89 d8                	mov    eax,ebx
c00095d7:	d1 e8                	shr    eax,1
c00095d9:	01 d0                	add    eax,edx
c00095db:	80 e3 01             	and    bl,0x1
c00095de:	8a 10                	mov    dl,BYTE PTR [eax]
c00095e0:	75 09                	jne    c00095eb <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095e2:	83 e2 f0             	and    edx,0xfffffff0
c00095e5:	09 ca                	or     edx,ecx
c00095e7:	88 10                	mov    BYTE PTR [eax],dl
c00095e9:	5b                   	pop    ebx
c00095ea:	c3                   	ret    
c00095eb:	83 e2 0f             	and    edx,0xf
c00095ee:	0f b6 c9             	movzx  ecx,cl
c00095f1:	c1 e1 04             	shl    ecx,0x4
c00095f4:	09 ca                	or     edx,ecx
c00095f6:	88 10                	mov    BYTE PTR [eax],dl
c00095f8:	5b                   	pop    ebx
c00095f9:	c3                   	ret    

c00095fa <Virt::getPageState(unsigned long)>:
c00095fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095fe:	8b 0d c8 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fc8
c0009604:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000960a:	89 d0                	mov    eax,edx
c000960c:	d1 e8                	shr    eax,1
c000960e:	80 e2 01             	and    dl,0x1
c0009611:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009614:	74 03                	je     c0009619 <Virt::getPageState(unsigned long)+0x1f>
c0009616:	c1 e8 04             	shr    eax,0x4
c0009619:	83 e0 0f             	and    eax,0xf
c000961c:	c3                   	ret    

c000961d <Virt::allocateKernelVirtualPages(int)>:
c000961d:	55                   	push   ebp
c000961e:	31 ed                	xor    ebp,ebp
c0009620:	57                   	push   edi
c0009621:	31 ff                	xor    edi,edi
c0009623:	56                   	push   esi
c0009624:	53                   	push   ebx
c0009625:	31 db                	xor    ebx,ebx
c0009627:	83 ec 0c             	sub    esp,0xc
c000962a:	8b 35 c4 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021fc4
c0009630:	56                   	push   esi
c0009631:	e8 c4 ff ff ff       	call   c00095fa <Virt::getPageState(unsigned long)>
c0009636:	5a                   	pop    edx
c0009637:	84 c0                	test   al,al
c0009639:	75 41                	jne    c000967c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000963b:	85 db                	test   ebx,ebx
c000963d:	75 02                	jne    c0009641 <Virt::allocateKernelVirtualPages(int)+0x24>
c000963f:	89 f5                	mov    ebp,esi
c0009641:	83 c3 01             	add    ebx,0x1
c0009644:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009648:	74 5f                	je     c00096a9 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000964a:	83 c6 01             	add    esi,0x1
c000964d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009653:	76 34                	jbe    c0009689 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009655:	c7 05 c4 1f 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0021fc4,0xc8000
c000965f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009665:	75 2a                	jne    c0009691 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009667:	be 00 80 0c 00       	mov    esi,0xc8000
c000966c:	bf 01 00 00 00       	mov    edi,0x1
c0009671:	56                   	push   esi
c0009672:	e8 83 ff ff ff       	call   c00095fa <Virt::getPageState(unsigned long)>
c0009677:	5a                   	pop    edx
c0009678:	84 c0                	test   al,al
c000967a:	74 bf                	je     c000963b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000967c:	31 db                	xor    ebx,ebx
c000967e:	83 c6 01             	add    esi,0x1
c0009681:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009687:	77 cc                	ja     c0009655 <Virt::allocateKernelVirtualPages(int)+0x38>
c0009689:	89 35 c4 1f 02 c0    	mov    DWORD PTR ds:0xc0021fc4,esi
c000968f:	eb 9f                	jmp    c0009630 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009691:	83 ec 0c             	sub    esp,0xc
c0009694:	68 ac fe 01 c0       	push   0xc001feac
c0009699:	e8 79 72 00 00       	call   c0010917 <KePanic(char const*)>
c000969e:	8b 35 c4 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021fc4
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	eb 87                	jmp    c0009630 <Virt::allocateKernelVirtualPages(int)+0x13>
c00096a9:	89 2d c4 1f 02 c0    	mov    DWORD PTR ds:0xc0021fc4,ebp
c00096af:	83 fb 01             	cmp    ebx,0x1
c00096b2:	74 6f                	je     c0009723 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096b8:	85 c9                	test   ecx,ecx
c00096ba:	74 49                	je     c0009705 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096bc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096c0:	89 e8                	mov    eax,ebp
c00096c2:	31 db                	xor    ebx,ebx
c00096c4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096c7:	eb 18                	jmp    c00096e1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096c9:	6a 01                	push   0x1
c00096cb:	83 c3 01             	add    ebx,0x1
c00096ce:	50                   	push   eax
c00096cf:	e8 ec fe ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096d4:	58                   	pop    eax
c00096d5:	5a                   	pop    edx
c00096d6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096da:	74 29                	je     c0009705 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096dc:	a1 c4 1f 02 c0       	mov    eax,ds:0xc0021fc4
c00096e1:	8d 50 01             	lea    edx,[eax+0x1]
c00096e4:	85 db                	test   ebx,ebx
c00096e6:	89 15 c4 1f 02 c0    	mov    DWORD PTR ds:0xc0021fc4,edx
c00096ec:	74 24                	je     c0009712 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096ee:	39 df                	cmp    edi,ebx
c00096f0:	75 d7                	jne    c00096c9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00096f2:	6a 03                	push   0x3
c00096f4:	83 c3 01             	add    ebx,0x1
c00096f7:	50                   	push   eax
c00096f8:	e8 c3 fe ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096fd:	59                   	pop    ecx
c00096fe:	5e                   	pop    esi
c00096ff:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009703:	75 d7                	jne    c00096dc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009705:	83 c4 0c             	add    esp,0xc
c0009708:	89 e8                	mov    eax,ebp
c000970a:	5b                   	pop    ebx
c000970b:	c1 e0 0c             	shl    eax,0xc
c000970e:	5e                   	pop    esi
c000970f:	5f                   	pop    edi
c0009710:	5d                   	pop    ebp
c0009711:	c3                   	ret    
c0009712:	6a 02                	push   0x2
c0009714:	bb 01 00 00 00       	mov    ebx,0x1
c0009719:	50                   	push   eax
c000971a:	e8 a1 fe ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000971f:	58                   	pop    eax
c0009720:	5a                   	pop    edx
c0009721:	eb b9                	jmp    c00096dc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009723:	6a 04                	push   0x4
c0009725:	8d 45 01             	lea    eax,[ebp+0x1]
c0009728:	55                   	push   ebp
c0009729:	a3 c4 1f 02 c0       	mov    ds:0xc0021fc4,eax
c000972e:	e8 8d fe ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009733:	5b                   	pop    ebx
c0009734:	89 e8                	mov    eax,ebp
c0009736:	5e                   	pop    esi
c0009737:	c1 e0 0c             	shl    eax,0xc
c000973a:	83 c4 0c             	add    esp,0xc
c000973d:	5b                   	pop    ebx
c000973e:	5e                   	pop    esi
c000973f:	5f                   	pop    edi
c0009740:	5d                   	pop    ebp
c0009741:	c3                   	ret    

c0009742 <Virt::freeSwapfilePage(unsigned long)>:
c0009742:	53                   	push   ebx
c0009743:	8b 15 ac 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fac
c0009749:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000974d:	b8 01 00 00 00       	mov    eax,0x1
c0009752:	89 cb                	mov    ebx,ecx
c0009754:	d3 e0                	shl    eax,cl
c0009756:	c1 eb 05             	shr    ebx,0x5
c0009759:	f7 d0                	not    eax
c000975b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000975e:	21 c1                	and    ecx,eax
c0009760:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009763:	5b                   	pop    ebx
c0009764:	c3                   	ret    

c0009765 <Virt::swapIDToSector(unsigned long)>:
c0009765:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009769:	8b 15 cc 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fcc
c000976f:	8b 0d d4 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fd4
c0009775:	0f af c2             	imul   eax,edx
c0009778:	01 c8                	add    eax,ecx
c000977a:	c3                   	ret    

c000977b <Virt::allocateSwapfilePage()>:
c000977b:	55                   	push   ebp
c000977c:	31 d2                	xor    edx,edx
c000977e:	57                   	push   edi
c000977f:	56                   	push   esi
c0009780:	53                   	push   ebx
c0009781:	83 ec 0c             	sub    esp,0xc
c0009784:	8b 0d cc 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fcc
c000978a:	a1 d0 1f 02 c0       	mov    eax,ds:0xc0021fd0
c000978f:	f7 f1                	div    ecx
c0009791:	39 0d d0 1f 02 c0    	cmp    DWORD PTR ds:0xc0021fd0,ecx
c0009797:	72 2f                	jb     c00097c8 <Virt::allocateSwapfilePage()+0x4d>
c0009799:	8b 35 ac 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fac
c000979f:	8b 16                	mov    edx,DWORD PTR [esi]
c00097a1:	f6 c2 01             	test   dl,0x1
c00097a4:	74 3e                	je     c00097e4 <Virt::allocateSwapfilePage()+0x69>
c00097a6:	31 c9                	xor    ecx,ecx
c00097a8:	bf 01 00 00 00       	mov    edi,0x1
c00097ad:	eb 12                	jmp    c00097c1 <Virt::allocateSwapfilePage()+0x46>
c00097af:	89 fd                	mov    ebp,edi
c00097b1:	89 ca                	mov    edx,ecx
c00097b3:	d3 e5                	shl    ebp,cl
c00097b5:	c1 ea 05             	shr    edx,0x5
c00097b8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097bb:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097bd:	85 ea                	test   edx,ebp
c00097bf:	74 2c                	je     c00097ed <Virt::allocateSwapfilePage()+0x72>
c00097c1:	83 c1 01             	add    ecx,0x1
c00097c4:	39 c8                	cmp    eax,ecx
c00097c6:	77 e7                	ja     c00097af <Virt::allocateSwapfilePage()+0x34>
c00097c8:	83 ec 0c             	sub    esp,0xc
c00097cb:	68 44 00 02 c0       	push   0xc0020044
c00097d0:	e8 42 71 00 00       	call   c0010917 <KePanic(char const*)>
c00097d5:	83 c4 10             	add    esp,0x10
c00097d8:	31 c9                	xor    ecx,ecx
c00097da:	83 c4 0c             	add    esp,0xc
c00097dd:	89 c8                	mov    eax,ecx
c00097df:	5b                   	pop    ebx
c00097e0:	5e                   	pop    esi
c00097e1:	5f                   	pop    edi
c00097e2:	5d                   	pop    ebp
c00097e3:	c3                   	ret    
c00097e4:	89 f3                	mov    ebx,esi
c00097e6:	bd 01 00 00 00       	mov    ebp,0x1
c00097eb:	31 c9                	xor    ecx,ecx
c00097ed:	09 ea                	or     edx,ebp
c00097ef:	89 c8                	mov    eax,ecx
c00097f1:	89 13                	mov    DWORD PTR [ebx],edx
c00097f3:	83 c4 0c             	add    esp,0xc
c00097f6:	5b                   	pop    ebx
c00097f7:	5e                   	pop    esi
c00097f8:	5f                   	pop    edi
c00097f9:	5d                   	pop    ebp
c00097fa:	c3                   	ret    

c00097fb <Virt::virtualMemorySetup()>:
c00097fb:	53                   	push   ebx
c00097fc:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009801:	6a 0f                	push   0xf
c0009803:	53                   	push   ebx
c0009804:	83 c3 01             	add    ebx,0x1
c0009807:	e8 b4 fd ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980c:	58                   	pop    eax
c000980d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009813:	5a                   	pop    edx
c0009814:	75 eb                	jne    c0009801 <Virt::virtualMemorySetup()+0x6>
c0009816:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000981b:	6a 00                	push   0x0
c000981d:	53                   	push   ebx
c000981e:	83 c3 01             	add    ebx,0x1
c0009821:	e8 9a fd ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009826:	59                   	pop    ecx
c0009827:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000982d:	58                   	pop    eax
c000982e:	75 eb                	jne    c000981b <Virt::virtualMemorySetup()+0x20>
c0009830:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009835:	6a 0f                	push   0xf
c0009837:	53                   	push   ebx
c0009838:	83 c3 01             	add    ebx,0x1
c000983b:	e8 80 fd ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009840:	58                   	pop    eax
c0009841:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009847:	5a                   	pop    edx
c0009848:	75 eb                	jne    c0009835 <Virt::virtualMemorySetup()+0x3a>
c000984a:	5b                   	pop    ebx
c000984b:	c3                   	ret    

c000984c <Virt::setupPageSwapping(int)>:
c000984c:	53                   	push   ebx
c000984d:	83 ec 0c             	sub    esp,0xc
c0009850:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009854:	a1 28 74 02 c0       	mov    eax,ds:0xc0027428
c0009859:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000985f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009861:	53                   	push   ebx
c0009862:	c1 e3 0b             	shl    ebx,0xb
c0009865:	68 5b 00 02 c0       	push   0xc002005b
c000986a:	50                   	push   eax
c000986b:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000986e:	89 1d d0 1f 02 c0    	mov    DWORD PTR ds:0xc0021fd0,ebx
c0009874:	c6 05 d8 1f 02 c0 43 	mov    BYTE PTR ds:0xc0021fd8,0x43
c000987b:	c1 eb 08             	shr    ebx,0x8
c000987e:	a3 d4 1f 02 c0       	mov    ds:0xc0021fd4,eax
c0009883:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009886:	c7 05 cc 1f 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0021fcc,0x8
c0009890:	e8 19 e2 ff ff       	call   c0007aae <malloc>
c0009895:	83 c4 0c             	add    esp,0xc
c0009898:	89 c1                	mov    ecx,eax
c000989a:	a3 ac 4f 02 c0       	mov    ds:0xc0024fac,eax
c000989f:	31 d2                	xor    edx,edx
c00098a1:	a1 d0 1f 02 c0       	mov    eax,ds:0xc0021fd0
c00098a6:	f7 35 cc 1f 02 c0    	div    DWORD PTR ds:0xc0021fcc
c00098ac:	c1 e8 05             	shr    eax,0x5
c00098af:	50                   	push   eax
c00098b0:	6a 00                	push   0x0
c00098b2:	51                   	push   ecx
c00098b3:	e8 38 6c ff ff       	call   c00004f0 <memset>
c00098b8:	83 c4 18             	add    esp,0x18
c00098bb:	5b                   	pop    ebx
c00098bc:	c3                   	ret    
c00098bd:	90                   	nop

c00098be <VAS::VAS(VAS*)>:
c00098be:	83 ec 0c             	sub    esp,0xc
c00098c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098d0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098d7:	83 ec 0c             	sub    esp,0xc
c00098da:	68 cc fe 01 c0       	push   0xc001fecc
c00098df:	e8 33 70 00 00       	call   c0010917 <KePanic(char const*)>
c00098e4:	83 c4 10             	add    esp,0x10
c00098e7:	90                   	nop
c00098e8:	83 c4 0c             	add    esp,0xc
c00098eb:	c3                   	ret    

c00098ec <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098f0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098f5:	89 c2                	mov    edx,eax
c00098f7:	c1 e8 0a             	shr    eax,0xa
c00098fa:	c1 ea 16             	shr    edx,0x16
c00098fd:	83 f9 01             	cmp    ecx,0x1
c0009900:	19 c9                	sbb    ecx,ecx
c0009902:	c1 e2 0c             	shl    edx,0xc
c0009905:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000990b:	25 fc 0f 00 00       	and    eax,0xffc
c0009910:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009917:	01 d0                	add    eax,edx
c0009919:	c3                   	ret    

c000991a <VAS::getPageTableEntry(unsigned long)>:
c000991a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000991e:	89 ca                	mov    edx,ecx
c0009920:	c1 e9 0a             	shr    ecx,0xa
c0009923:	c1 ea 16             	shr    edx,0x16
c0009926:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000992c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009932:	c1 e0 0c             	shl    eax,0xc
c0009935:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009938:	c3                   	ret    

c0009939 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009939:	55                   	push   ebp
c000993a:	57                   	push   edi
c000993b:	bf 01 00 00 00       	mov    edi,0x1
c0009940:	56                   	push   esi
c0009941:	53                   	push   ebx
c0009942:	83 ec 0c             	sub    esp,0xc
c0009945:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0009949:	c1 ee 0c             	shr    esi,0xc
c000994c:	eb 3a                	jmp    c0009988 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000994e:	83 ec 08             	sub    esp,0x8
c0009951:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0009956:	55                   	push   ebp
c0009957:	50                   	push   eax
c0009958:	e8 bd ff ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000995d:	83 c4 10             	add    esp,0x10
c0009960:	8b 00                	mov    eax,DWORD PTR [eax]
c0009962:	f6 c4 04             	test   ah,0x4
c0009965:	75 5a                	jne    c00099c1 <Virt::freeKernelVirtualPages(unsigned long)+0x88>
c0009967:	83 fb 04             	cmp    ebx,0x4
c000996a:	74 6b                	je     c00099d7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000996c:	83 fb 02             	cmp    ebx,0x2
c000996f:	74 7f                	je     c00099f0 <Virt::freeKernelVirtualPages(unsigned long)+0xb7>
c0009971:	83 fb 03             	cmp    ebx,0x3
c0009974:	0f 84 a3 00 00 00    	je     c0009a1d <Virt::freeKernelVirtualPages(unsigned long)+0xe4>
c000997a:	83 fb 01             	cmp    ebx,0x1
c000997d:	0f 84 87 00 00 00    	je     c0009a0a <Virt::freeKernelVirtualPages(unsigned long)+0xd1>
c0009983:	83 c6 01             	add    esi,0x1
c0009986:	31 ff                	xor    edi,edi
c0009988:	56                   	push   esi
c0009989:	89 f5                	mov    ebp,esi
c000998b:	e8 6a fc ff ff       	call   c00095fa <Virt::getPageState(unsigned long)>
c0009990:	c1 e5 0c             	shl    ebp,0xc
c0009993:	0f b6 d8             	movzx  ebx,al
c0009996:	5a                   	pop    edx
c0009997:	85 db                	test   ebx,ebx
c0009999:	75 b3                	jne    c000994e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000999b:	83 ec 0c             	sub    esp,0xc
c000999e:	68 72 00 02 c0       	push   0xc0020072
c00099a3:	e8 6f 6f 00 00       	call   c0010917 <KePanic(char const*)>
c00099a8:	5a                   	pop    edx
c00099a9:	59                   	pop    ecx
c00099aa:	55                   	push   ebp
c00099ab:	8b 2d b0 4f 02 c0    	mov    ebp,DWORD PTR ds:0xc0024fb0
c00099b1:	55                   	push   ebp
c00099b2:	e8 63 ff ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c00099b7:	83 c4 10             	add    esp,0x10
c00099ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00099bc:	f6 c4 04             	test   ah,0x4
c00099bf:	74 c2                	je     c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c00099c1:	83 ec 0c             	sub    esp,0xc
c00099c4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00099c9:	50                   	push   eax
c00099ca:	e8 7b e3 ff ff       	call   c0007d4a <Phys::freePage(unsigned long)>
c00099cf:	83 c4 10             	add    esp,0x10
c00099d2:	83 fb 04             	cmp    ebx,0x4
c00099d5:	75 95                	jne    c000996c <Virt::freeKernelVirtualPages(unsigned long)+0x33>
c00099d7:	83 e7 01             	and    edi,0x1
c00099da:	75 46                	jne    c0009a22 <Virt::freeKernelVirtualPages(unsigned long)+0xe9>
c00099dc:	c7 44 24 20 f0 fe 01 c0 	mov    DWORD PTR [esp+0x20],0xc001fef0
c00099e4:	83 c4 0c             	add    esp,0xc
c00099e7:	5b                   	pop    ebx
c00099e8:	5e                   	pop    esi
c00099e9:	5f                   	pop    edi
c00099ea:	5d                   	pop    ebp
c00099eb:	e9 27 6f 00 00       	jmp    c0010917 <KePanic(char const*)>
c00099f0:	83 e7 01             	and    edi,0x1
c00099f3:	75 15                	jne    c0009a0a <Virt::freeKernelVirtualPages(unsigned long)+0xd1>
c00099f5:	83 ec 0c             	sub    esp,0xc
c00099f8:	68 8e 00 02 c0       	push   0xc002008e
c00099fd:	e8 15 6f 00 00       	call   c0010917 <KePanic(char const*)>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	e9 79 ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c0009a0a:	83 ec 08             	sub    esp,0x8
c0009a0d:	6a 00                	push   0x0
c0009a0f:	56                   	push   esi
c0009a10:	e8 ab fb ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a15:	83 c4 10             	add    esp,0x10
c0009a18:	e9 66 ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c0009a1d:	83 e7 01             	and    edi,0x1
c0009a20:	75 16                	jne    c0009a38 <Virt::freeKernelVirtualPages(unsigned long)+0xff>
c0009a22:	83 ec 08             	sub    esp,0x8
c0009a25:	6a 00                	push   0x0
c0009a27:	56                   	push   esi
c0009a28:	e8 93 fb ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a2d:	83 c4 10             	add    esp,0x10
c0009a30:	83 c4 0c             	add    esp,0xc
c0009a33:	5b                   	pop    ebx
c0009a34:	5e                   	pop    esi
c0009a35:	5f                   	pop    edi
c0009a36:	5d                   	pop    ebp
c0009a37:	c3                   	ret    
c0009a38:	c7 44 24 20 aa 00 02 c0 	mov    DWORD PTR [esp+0x20],0xc00200aa
c0009a40:	83 c4 0c             	add    esp,0xc
c0009a43:	5b                   	pop    ebx
c0009a44:	5e                   	pop    esi
c0009a45:	5f                   	pop    edi
c0009a46:	5d                   	pop    ebp
c0009a47:	e9 cb 6e 00 00       	jmp    c0010917 <KePanic(char const*)>

c0009a4c <VAS::freeAllocatedPages(unsigned long)>:
c0009a4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a54:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a58:	74 09                	je     c0009a63 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a5a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a5e:	e9 d6 fe ff ff       	jmp    c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a63:	c7 44 24 04 14 ff 01 c0 	mov    DWORD PTR [esp+0x4],0xc001ff14
c0009a6b:	e9 7a 0f 00 00       	jmp    c000a9ea <Dbg::kprintf(char const*, ...)>

c0009a70 <VAS::virtualToPhysical(unsigned long)>:
c0009a70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a74:	50                   	push   eax
c0009a75:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a79:	52                   	push   edx
c0009a7a:	e8 9b fe ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c0009a7f:	59                   	pop    ecx
c0009a80:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a82:	5a                   	pop    edx
c0009a83:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a88:	c3                   	ret    
c0009a89:	90                   	nop

c0009a8a <VAS::reflagRange(unsigned long, int, int, int)>:
c0009a8a:	55                   	push   ebp
c0009a8b:	57                   	push   edi
c0009a8c:	56                   	push   esi
c0009a8d:	53                   	push   ebx
c0009a8e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a92:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a96:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a9a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a9e:	85 db                	test   ebx,ebx
c0009aa0:	7e 24                	jle    c0009ac6 <VAS::reflagRange(unsigned long, int, int, int)+0x3c>
c0009aa2:	c1 e3 0c             	shl    ebx,0xc
c0009aa5:	01 f3                	add    ebx,esi
c0009aa7:	56                   	push   esi
c0009aa8:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aae:	55                   	push   ebp
c0009aaf:	e8 66 fe ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c0009ab4:	5a                   	pop    edx
c0009ab5:	59                   	pop    ecx
c0009ab6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ab8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009abc:	21 f9                	and    ecx,edi
c0009abe:	09 d1                	or     ecx,edx
c0009ac0:	39 f3                	cmp    ebx,esi
c0009ac2:	89 08                	mov    DWORD PTR [eax],ecx
c0009ac4:	75 e1                	jne    c0009aa7 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0009ac6:	5b                   	pop    ebx
c0009ac7:	5e                   	pop    esi
c0009ac8:	5f                   	pop    edi
c0009ac9:	5d                   	pop    ebp
c0009aca:	c3                   	ret    
c0009acb:	90                   	nop

c0009acc <VAS::VAS()>:
c0009acc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ad7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009adb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009ae2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae6:	a3 b0 4f 02 c0       	mov    ds:0xc0024fb0,eax
c0009aeb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aef:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009af3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af7:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009afa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009afe:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b05:	ba 7d 30 02 c0       	mov    edx,0xc002307d
c0009b0a:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009b0f:	29 c2                	sub    edx,eax
c0009b11:	89 d0                	mov    eax,edx
c0009b13:	05 ff 0f 00 00       	add    eax,0xfff
c0009b18:	c1 e8 0c             	shr    eax,0xc
c0009b1b:	89 c2                	mov    edx,eax
c0009b1d:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009b22:	6a 04                	push   0x4
c0009b24:	6a ff                	push   0xffffffff
c0009b26:	52                   	push   edx
c0009b27:	50                   	push   eax
c0009b28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2c:	e8 59 ff ff ff       	call   c0009a8a <VAS::reflagRange(unsigned long, int, int, int)>
c0009b31:	83 c4 14             	add    esp,0x14
c0009b34:	90                   	nop
c0009b35:	c3                   	ret    

c0009b36 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b36:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009b3b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b41:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b48:	75 01                	jne    c0009b4b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b4a:	c3                   	ret    
c0009b4b:	68 80 00 00 00       	push   0x80
c0009b50:	6a ff                	push   0xffffffff
c0009b52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b56:	50                   	push   eax
c0009b57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b5b:	52                   	push   edx
c0009b5c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b60:	51                   	push   ecx
c0009b61:	e8 24 ff ff ff       	call   c0009a8a <VAS::reflagRange(unsigned long, int, int, int)>
c0009b66:	83 c4 14             	add    esp,0x14
c0009b69:	c3                   	ret    

c0009b6a <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b6e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b75:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b78:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b7d:	83 f8 01             	cmp    eax,0x1
c0009b80:	19 c0                	sbb    eax,eax
c0009b82:	83 ca 03             	or     edx,0x3
c0009b85:	83 e0 fc             	and    eax,0xfffffffc
c0009b88:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b8f:	0f 20 d8             	mov    eax,cr3
c0009b92:	0f 22 d8             	mov    cr3,eax
c0009b95:	c3                   	ret    

c0009b96 <VAS::~VAS()>:
c0009b96:	83 ec 2c             	sub    esp,0x2c
c0009b99:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009ba1:	fa                   	cli    
c0009ba2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009ba7:	83 c0 01             	add    eax,0x1
c0009baa:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009baf:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bb6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bb9:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bbf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bc3:	6a 01                	push   0x1
c0009bc5:	50                   	push   eax
c0009bc6:	e8 9f ff ff ff       	call   c0009b6a <VAS::mapOtherVASIn(bool, VAS*)>
c0009bcb:	83 c4 0c             	add    esp,0xc
c0009bce:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bd6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bde:	0f 8f d8 00 00 00    	jg     c0009cbc <VAS::~VAS()+0x126>
c0009be4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009be8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009beb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009bef:	c1 e2 02             	shl    edx,0x2
c0009bf2:	01 d0                	add    eax,edx
c0009bf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bfe:	83 e0 01             	and    eax,0x1
c0009c01:	0f 84 ab 00 00 00    	je     c0009cb2 <VAS::~VAS()+0x11c>
c0009c07:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c0f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c17:	7f 74                	jg     c0009c8d <VAS::~VAS()+0xf7>
c0009c19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c1d:	c1 e0 0a             	shl    eax,0xa
c0009c20:	89 c2                	mov    edx,eax
c0009c22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c26:	01 d0                	add    eax,edx
c0009c28:	c1 e0 0c             	shl    eax,0xc
c0009c2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c2f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c34:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c39:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c3f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c43:	6a 01                	push   0x1
c0009c45:	50                   	push   eax
c0009c46:	e8 a1 fc ff ff       	call   c00098ec <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c4b:	83 c4 0c             	add    esp,0xc
c0009c4e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c56:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c60:	25 01 04 00 00       	and    eax,0x401
c0009c65:	3d 01 04 00 00       	cmp    eax,0x401
c0009c6a:	75 1a                	jne    c0009c86 <VAS::~VAS()+0xf0>
c0009c6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c70:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c75:	83 ec 0c             	sub    esp,0xc
c0009c78:	50                   	push   eax
c0009c79:	e8 cc e0 ff ff       	call   c0007d4a <Phys::freePage(unsigned long)>
c0009c7e:	83 c4 10             	add    esp,0x10
c0009c81:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c86:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c8b:	eb 82                	jmp    c0009c0f <VAS::~VAS()+0x79>
c0009c8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c91:	25 00 04 00 00       	and    eax,0x400
c0009c96:	74 1a                	je     c0009cb2 <VAS::~VAS()+0x11c>
c0009c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c9c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ca1:	83 ec 0c             	sub    esp,0xc
c0009ca4:	50                   	push   eax
c0009ca5:	e8 a0 e0 ff ff       	call   c0007d4a <Phys::freePage(unsigned long)>
c0009caa:	83 c4 10             	add    esp,0x10
c0009cad:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cb2:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cb7:	e9 1a ff ff ff       	jmp    c0009bd6 <VAS::~VAS()+0x40>
c0009cbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cc0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cc3:	83 ec 0c             	sub    esp,0xc
c0009cc6:	50                   	push   eax
c0009cc7:	e8 6d fc ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0009ccc:	83 c4 10             	add    esp,0x10
c0009ccf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cd3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cd6:	83 ec 0c             	sub    esp,0xc
c0009cd9:	50                   	push   eax
c0009cda:	e8 6b e0 ff ff       	call   c0007d4a <Phys::freePage(unsigned long)>
c0009cdf:	83 c4 10             	add    esp,0x10
c0009ce2:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ce7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009cec:	83 e8 01             	sub    eax,0x1
c0009cef:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009cf4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009cf9:	85 c0                	test   eax,eax
c0009cfb:	75 01                	jne    c0009cfe <VAS::~VAS()+0x168>
c0009cfd:	fb                   	sti    
c0009cfe:	90                   	nop
c0009cff:	83 c4 2c             	add    esp,0x2c
c0009d02:	c3                   	ret    
c0009d03:	90                   	nop

c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d04:	55                   	push   ebp
c0009d05:	57                   	push   edi
c0009d06:	56                   	push   esi
c0009d07:	53                   	push   ebx
c0009d08:	83 ec 1c             	sub    esp,0x1c
c0009d0b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d0f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d13:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d19:	77 0b                	ja     c0009d26 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009d1b:	0f 20 d8             	mov    eax,cr3
c0009d1e:	0f 20 d8             	mov    eax,cr3
c0009d21:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d24:	75 49                	jne    c0009d6f <VAS::mapPage(unsigned long, unsigned long, int)+0x6b>
c0009d26:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d2a:	09 d8                	or     eax,ebx
c0009d2c:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d31:	75 59                	jne    c0009d8c <VAS::mapPage(unsigned long, unsigned long, int)+0x88>
c0009d33:	89 de                	mov    esi,ebx
c0009d35:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d38:	c1 ee 16             	shr    esi,0x16
c0009d3b:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d42:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d46:	74 56                	je     c0009d9e <VAS::mapPage(unsigned long, unsigned long, int)+0x9a>
c0009d48:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d4c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d50:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d56:	c1 eb 0a             	shr    ebx,0xa
c0009d59:	c1 e6 0c             	shl    esi,0xc
c0009d5c:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d62:	09 d0                	or     eax,edx
c0009d64:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d67:	83 c4 1c             	add    esp,0x1c
c0009d6a:	5b                   	pop    ebx
c0009d6b:	5e                   	pop    esi
c0009d6c:	5f                   	pop    edi
c0009d6d:	5d                   	pop    ebp
c0009d6e:	c3                   	ret    
c0009d6f:	83 ec 0c             	sub    esp,0xc
c0009d72:	68 38 ff 01 c0       	push   0xc001ff38
c0009d77:	e8 6e 0c 00 00       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0009d7c:	83 c4 10             	add    esp,0x10
c0009d7f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d83:	09 d8                	or     eax,ebx
c0009d85:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d8a:	74 a7                	je     c0009d33 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009d8c:	83 ec 0c             	sub    esp,0xc
c0009d8f:	68 a0 ff 01 c0       	push   0xc001ffa0
c0009d94:	e8 7e 6b 00 00       	call   c0010917 <KePanic(char const*)>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	eb 95                	jmp    c0009d33 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009d9e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009da2:	e8 0c e0 ff ff       	call   c0007db3 <Phys::allocatePage()>
c0009da7:	83 ec 0c             	sub    esp,0xc
c0009daa:	89 c5                	mov    ebp,eax
c0009dac:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c0009db2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009db6:	6a 01                	push   0x1
c0009db8:	e8 60 f8 ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c0009dbd:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009dc4:	6a 01                	push   0x1
c0009dc6:	50                   	push   eax
c0009dc7:	55                   	push   ebp
c0009dc8:	81 cd 07 04 00 00    	or     ebp,0x407
c0009dce:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dd2:	51                   	push   ecx
c0009dd3:	e8 40 02 00 00       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dd8:	83 c4 1c             	add    esp,0x1c
c0009ddb:	68 00 10 00 00       	push   0x1000
c0009de0:	6a 00                	push   0x0
c0009de2:	50                   	push   eax
c0009de3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009de7:	e8 04 67 ff ff       	call   c00004f0 <memset>
c0009dec:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009df0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009df3:	e8 41 fb ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0009df8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dfc:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009dff:	83 c4 10             	add    esp,0x10
c0009e02:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e05:	e9 3e ff ff ff       	jmp    c0009d48 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009e0a <VAS::allocatePages(int, int)>:
c0009e0a:	55                   	push   ebp
c0009e0b:	57                   	push   edi
c0009e0c:	56                   	push   esi
c0009e0d:	53                   	push   ebx
c0009e0e:	83 ec 1c             	sub    esp,0x1c
c0009e11:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009e15:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009e1a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e20:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009e26:	83 e0 01             	and    eax,0x1
c0009e29:	80 7d 01 00          	cmp    BYTE PTR [ebp+0x1],0x0
c0009e2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e31:	89 c7                	mov    edi,eax
c0009e33:	0f 85 d6 00 00 00    	jne    c0009f0f <VAS::allocatePages(int, int)+0x105>
c0009e39:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0009e3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e40:	85 c0                	test   eax,eax
c0009e42:	0f 84 ab 00 00 00    	je     c0009ef3 <VAS::allocatePages(int, int)+0xe9>
c0009e48:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009e4c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e50:	c1 e6 0c             	shl    esi,0xc
c0009e53:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e57:	01 de                	add    esi,ebx
c0009e59:	85 c0                	test   eax,eax
c0009e5b:	89 75 04             	mov    DWORD PTR [ebp+0x4],esi
c0009e5e:	7e 3a                	jle    c0009e9a <VAS::allocatePages(int, int)+0x90>
c0009e60:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009e64:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e68:	80 cc 04             	or     ah,0x4
c0009e6b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009e6f:	89 f8                	mov    eax,edi
c0009e71:	0f b6 f8             	movzx  edi,al
c0009e74:	e8 3a df ff ff       	call   c0007db3 <Phys::allocatePage()>
c0009e79:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009e7d:	52                   	push   edx
c0009e7e:	53                   	push   ebx
c0009e7f:	50                   	push   eax
c0009e80:	55                   	push   ebp
c0009e81:	e8 7e fe ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e86:	83 c4 10             	add    esp,0x10
c0009e89:	85 ff                	test   edi,edi
c0009e8b:	74 03                	je     c0009e90 <VAS::allocatePages(int, int)+0x86>
c0009e8d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009e90:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e96:	39 de                	cmp    esi,ebx
c0009e98:	75 da                	jne    c0009e74 <VAS::allocatePages(int, int)+0x6a>
c0009e9a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009e9e:	85 c9                	test   ecx,ecx
c0009ea0:	75 12                	jne    c0009eb4 <VAS::allocatePages(int, int)+0xaa>
c0009ea2:	0f 20 d8             	mov    eax,cr3
c0009ea5:	0f 22 d8             	mov    cr3,eax
c0009ea8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009eac:	83 c4 1c             	add    esp,0x1c
c0009eaf:	5b                   	pop    ebx
c0009eb0:	5e                   	pop    esi
c0009eb1:	5f                   	pop    edi
c0009eb2:	5d                   	pop    ebp
c0009eb3:	c3                   	ret    
c0009eb4:	c1 ee 0a             	shr    esi,0xa
c0009eb7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009ebb:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009ec1:	c1 eb 0a             	shr    ebx,0xa
c0009ec4:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009eca:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ed0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ed6:	39 c3                	cmp    ebx,eax
c0009ed8:	77 ce                	ja     c0009ea8 <VAS::allocatePages(int, int)+0x9e>
c0009eda:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009edd:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ee3:	39 d8                	cmp    eax,ebx
c0009ee5:	73 f3                	jae    c0009eda <VAS::allocatePages(int, int)+0xd0>
c0009ee7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009eeb:	83 c4 1c             	add    esp,0x1c
c0009eee:	5b                   	pop    ebx
c0009eef:	5e                   	pop    esi
c0009ef0:	5f                   	pop    edi
c0009ef1:	5d                   	pop    ebp
c0009ef2:	c3                   	ret    
c0009ef3:	83 ec 0c             	sub    esp,0xc
c0009ef6:	68 c4 ff 01 c0       	push   0xc001ffc4
c0009efb:	e8 17 6a 00 00       	call   c0010917 <KePanic(char const*)>
c0009f00:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0009f03:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f07:	83 c4 10             	add    esp,0x10
c0009f0a:	e9 39 ff ff ff       	jmp    c0009e48 <VAS::allocatePages(int, int)+0x3e>
c0009f0f:	83 ec 0c             	sub    esp,0xc
c0009f12:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f16:	50                   	push   eax
c0009f17:	e8 01 f7 ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c0009f1c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f20:	83 c4 10             	add    esp,0x10
c0009f23:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009f28:	0f 87 a4 00 00 00    	ja     c0009fd2 <VAS::allocatePages(int, int)+0x1c8>
c0009f2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f32:	85 c0                	test   eax,eax
c0009f34:	7e 44                	jle    c0009f7a <VAS::allocatePages(int, int)+0x170>
c0009f36:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f3a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f3e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f42:	c1 e0 0c             	shl    eax,0xc
c0009f45:	81 ce 00 04 00 00    	or     esi,0x400
c0009f4b:	01 d8                	add    eax,ebx
c0009f4d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f51:	89 f8                	mov    eax,edi
c0009f53:	0f b6 f8             	movzx  edi,al
c0009f56:	e8 58 de ff ff       	call   c0007db3 <Phys::allocatePage()>
c0009f5b:	56                   	push   esi
c0009f5c:	53                   	push   ebx
c0009f5d:	50                   	push   eax
c0009f5e:	55                   	push   ebp
c0009f5f:	e8 a0 fd ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f64:	83 c4 10             	add    esp,0x10
c0009f67:	85 ff                	test   edi,edi
c0009f69:	74 03                	je     c0009f6e <VAS::allocatePages(int, int)+0x164>
c0009f6b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009f6e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f74:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0009f78:	75 dc                	jne    c0009f56 <VAS::allocatePages(int, int)+0x14c>
c0009f7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f7e:	85 c0                	test   eax,eax
c0009f80:	0f 84 1c ff ff ff    	je     c0009ea2 <VAS::allocatePages(int, int)+0x98>
c0009f86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009f8a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f8e:	89 d3                	mov    ebx,edx
c0009f90:	c1 e0 0c             	shl    eax,0xc
c0009f93:	c1 eb 0a             	shr    ebx,0xa
c0009f96:	01 d0                	add    eax,edx
c0009f98:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009f9e:	c1 e8 0a             	shr    eax,0xa
c0009fa1:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009fa7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fac:	2d 00 00 40 00       	sub    eax,0x400000
c0009fb1:	39 c3                	cmp    ebx,eax
c0009fb3:	0f 87 ef fe ff ff    	ja     c0009ea8 <VAS::allocatePages(int, int)+0x9e>
c0009fb9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009fbc:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009fc2:	39 d8                	cmp    eax,ebx
c0009fc4:	73 f3                	jae    c0009fb9 <VAS::allocatePages(int, int)+0x1af>
c0009fc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009fca:	83 c4 1c             	add    esp,0x1c
c0009fcd:	5b                   	pop    ebx
c0009fce:	5e                   	pop    esi
c0009fcf:	5f                   	pop    edi
c0009fd0:	5d                   	pop    ebp
c0009fd1:	c3                   	ret    
c0009fd2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009fd7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fdd:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009fe4:	0f 84 44 ff ff ff    	je     c0009f2e <VAS::allocatePages(int, int)+0x124>
c0009fea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009fee:	80 cc 01             	or     ah,0x1
c0009ff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009ff5:	e9 34 ff ff ff       	jmp    c0009f2e <VAS::allocatePages(int, int)+0x124>

c0009ffa <VAS::setCPUSpecific(unsigned long)>:
c0009ffa:	83 ec 0c             	sub    esp,0xc
c0009ffd:	6a 05                	push   0x5
c0009fff:	68 00 00 40 c2       	push   0xc2400000
c000a004:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a008:	50                   	push   eax
c000a009:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a00d:	52                   	push   edx
c000a00e:	e8 f1 fc ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a013:	83 c4 1c             	add    esp,0x1c
c000a016:	c3                   	ret    
c000a017:	90                   	nop

c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000a018:	55                   	push   ebp
c000a019:	57                   	push   edi
c000a01a:	56                   	push   esi
c000a01b:	53                   	push   ebx
c000a01c:	83 ec 1c             	sub    esp,0x1c
c000a01f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a024:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a028:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a02e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a032:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a038:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000a03c:	83 e0 01             	and    eax,0x1
c000a03f:	85 db                	test   ebx,ebx
c000a041:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a045:	7e 43                	jle    c000a08a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x72>
c000a047:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a04b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a04f:	c1 e2 0c             	shl    edx,0xc
c000a052:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000a056:	01 ca                	add    edx,ecx
c000a058:	0f b6 f0             	movzx  esi,al
c000a05b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a05f:	55                   	push   ebp
c000a060:	53                   	push   ebx
c000a061:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a065:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000a069:	29 d0                	sub    eax,edx
c000a06b:	01 d8                	add    eax,ebx
c000a06d:	50                   	push   eax
c000a06e:	57                   	push   edi
c000a06f:	e8 90 fc ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a074:	83 c4 10             	add    esp,0x10
c000a077:	85 f6                	test   esi,esi
c000a079:	74 03                	je     c000a07e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000a07b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a07e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a084:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c000a088:	75 d5                	jne    c000a05f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c000a08a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a08e:	85 c9                	test   ecx,ecx
c000a090:	75 12                	jne    c000a0a4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x8c>
c000a092:	0f 20 d8             	mov    eax,cr3
c000a095:	0f 22 d8             	mov    cr3,eax
c000a098:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a09c:	83 c4 1c             	add    esp,0x1c
c000a09f:	5b                   	pop    ebx
c000a0a0:	5e                   	pop    esi
c000a0a1:	5f                   	pop    edi
c000a0a2:	5d                   	pop    ebp
c000a0a3:	c3                   	ret    
c000a0a4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000a0a8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a0ac:	c1 eb 0a             	shr    ebx,0xa
c000a0af:	c1 e0 0c             	shl    eax,0xc
c000a0b2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a0b8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a0bc:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a0c2:	01 d0                	add    eax,edx
c000a0c4:	c1 e8 0a             	shr    eax,0xa
c000a0c7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a0cc:	2d 00 00 40 00       	sub    eax,0x400000
c000a0d1:	39 c3                	cmp    ebx,eax
c000a0d3:	77 c3                	ja     c000a098 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x80>
c000a0d5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a0d8:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a0de:	39 d8                	cmp    eax,ebx
c000a0e0:	73 f3                	jae    c000a0d5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xbd>
c000a0e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a0e6:	83 c4 1c             	add    esp,0x1c
c000a0e9:	5b                   	pop    ebx
c000a0ea:	5e                   	pop    esi
c000a0eb:	5f                   	pop    edi
c000a0ec:	5d                   	pop    ebp
c000a0ed:	c3                   	ret    

c000a0ee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a0ee:	55                   	push   ebp
c000a0ef:	57                   	push   edi
c000a0f0:	56                   	push   esi
c000a0f1:	53                   	push   ebx
c000a0f2:	83 ec 1c             	sub    esp,0x1c
c000a0f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a0f9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a0fd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a101:	09 f8                	or     eax,edi
c000a103:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a107:	a9 ff 0f 00 00       	test   eax,0xfff
c000a10c:	75 4f                	jne    c000a15d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c000a10e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000a112:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a115:	c1 eb 16             	shr    ebx,0x16
c000a118:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c000a11f:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c000a123:	74 52                	je     c000a177 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c000a125:	0f b6 f2             	movzx  esi,dl
c000a128:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a12c:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000a130:	c1 e8 0a             	shr    eax,0xa
c000a133:	83 fe 01             	cmp    esi,0x1
c000a136:	19 d2                	sbb    edx,edx
c000a138:	c1 e3 0c             	shl    ebx,0xc
c000a13b:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000a141:	25 fc 0f 00 00       	and    eax,0xffc
c000a146:	01 d8                	add    eax,ebx
c000a148:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a14c:	09 d9                	or     ecx,ebx
c000a14e:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000a155:	83 c4 1c             	add    esp,0x1c
c000a158:	5b                   	pop    ebx
c000a159:	5e                   	pop    esi
c000a15a:	5f                   	pop    edi
c000a15b:	5d                   	pop    ebp
c000a15c:	c3                   	ret    
c000a15d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a161:	83 ec 0c             	sub    esp,0xc
c000a164:	68 f0 ff 01 c0       	push   0xc001fff0
c000a169:	e8 a9 67 00 00       	call   c0010917 <KePanic(char const*)>
c000a16e:	83 c4 10             	add    esp,0x10
c000a171:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a175:	eb 97                	jmp    c000a10e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c000a177:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a17b:	e8 33 dc ff ff       	call   c0007db3 <Phys::allocatePage()>
c000a180:	83 ec 0c             	sub    esp,0xc
c000a183:	89 c5                	mov    ebp,eax
c000a185:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c000a18b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a18f:	6a 01                	push   0x1
c000a191:	e8 87 f4 ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c000a196:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a19d:	6a 01                	push   0x1
c000a19f:	50                   	push   eax
c000a1a0:	55                   	push   ebp
c000a1a1:	81 cd 07 04 00 00    	or     ebp,0x407
c000a1a7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a1ab:	51                   	push   ecx
c000a1ac:	e8 67 fe ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a1b1:	83 c4 1c             	add    esp,0x1c
c000a1b4:	68 00 10 00 00       	push   0x1000
c000a1b9:	6a 00                	push   0x0
c000a1bb:	50                   	push   eax
c000a1bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1c0:	e8 2b 63 ff ff       	call   c00004f0 <memset>
c000a1c5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a1c9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a1cc:	e8 68 f7 ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c000a1d1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a1d4:	83 c4 10             	add    esp,0x10
c000a1d7:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a1da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a1de:	e9 42 ff ff ff       	jmp    c000a125 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a1e3:	90                   	nop

c000a1e4 <VAS::VAS(bool)>:
c000a1e4:	53                   	push   ebx
c000a1e5:	83 ec 28             	sub    esp,0x28
c000a1e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a1ec:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a1f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a1fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a206:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a20a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a20e:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a211:	e8 9d db ff ff       	call   c0007db3 <Phys::allocatePage()>
c000a216:	89 c2                	mov    edx,eax
c000a218:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a21c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a21f:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000a225:	83 ec 0c             	sub    esp,0xc
c000a228:	6a 01                	push   0x1
c000a22a:	e8 ee f3 ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c000a22f:	83 c4 10             	add    esp,0x10
c000a232:	89 c2                	mov    edx,eax
c000a234:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a238:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a23b:	83 ec 0c             	sub    esp,0xc
c000a23e:	6a 03                	push   0x3
c000a240:	6a 01                	push   0x1
c000a242:	52                   	push   edx
c000a243:	50                   	push   eax
c000a244:	53                   	push   ebx
c000a245:	e8 ce fd ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a24a:	83 c4 20             	add    esp,0x20
c000a24d:	89 c2                	mov    edx,eax
c000a24f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a253:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a256:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a25e:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a266:	7f 1d                	jg     c000a285 <VAS::VAS(bool)+0xa1>
c000a268:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a26c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a26f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a273:	c1 e2 02             	shl    edx,0x2
c000a276:	01 d0                	add    eax,edx
c000a278:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a27e:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a283:	eb d9                	jmp    c000a25e <VAS::VAS(bool)+0x7a>
c000a285:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a28d:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a295:	7f 7e                	jg     c000a315 <VAS::VAS(bool)+0x131>
c000a297:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a29b:	2d 00 02 00 00       	sub    eax,0x200
c000a2a0:	c1 e0 0c             	shl    eax,0xc
c000a2a3:	83 c8 05             	or     eax,0x5
c000a2a6:	89 c2                	mov    edx,eax
c000a2a8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a2ad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2b3:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a2b9:	83 e0 10             	and    eax,0x10
c000a2bc:	0f b6 c0             	movzx  eax,al
c000a2bf:	85 c0                	test   eax,eax
c000a2c1:	74 07                	je     c000a2ca <VAS::VAS(bool)+0xe6>
c000a2c3:	b8 00 01 00 00       	mov    eax,0x100
c000a2c8:	eb 05                	jmp    c000a2cf <VAS::VAS(bool)+0xeb>
c000a2ca:	b8 00 00 00 00       	mov    eax,0x0
c000a2cf:	09 d0                	or     eax,edx
c000a2d1:	89 c1                	mov    ecx,eax
c000a2d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2d7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2da:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a2de:	c1 e2 02             	shl    edx,0x2
c000a2e1:	01 d0                	add    eax,edx
c000a2e3:	89 ca                	mov    edx,ecx
c000a2e5:	89 10                	mov    DWORD PTR [eax],edx
c000a2e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a2eb:	2d 40 03 00 00       	sub    eax,0x340
c000a2f0:	83 f8 7f             	cmp    eax,0x7f
c000a2f3:	77 16                	ja     c000a30b <VAS::VAS(bool)+0x127>
c000a2f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2f9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2fc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a300:	c1 e2 02             	shl    edx,0x2
c000a303:	01 d0                	add    eax,edx
c000a305:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a30b:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a310:	e9 78 ff ff ff       	jmp    c000a28d <VAS::VAS(bool)+0xa9>
c000a315:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a31a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a320:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a326:	83 e0 10             	and    eax,0x10
c000a329:	0f b6 c0             	movzx  eax,al
c000a32c:	85 c0                	test   eax,eax
c000a32e:	74 07                	je     c000a337 <VAS::VAS(bool)+0x153>
c000a330:	b8 03 41 00 00       	mov    eax,0x4103
c000a335:	eb 05                	jmp    c000a33c <VAS::VAS(bool)+0x158>
c000a337:	b8 03 40 00 00       	mov    eax,0x4003
c000a33c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a340:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a343:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a349:	89 02                	mov    DWORD PTR [edx],eax
c000a34b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a350:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a356:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a35c:	83 ec 08             	sub    esp,0x8
c000a35f:	50                   	push   eax
c000a360:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a364:	e8 91 fc ff ff       	call   c0009ffa <VAS::setCPUSpecific(unsigned long)>
c000a369:	83 c4 10             	add    esp,0x10
c000a36c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a370:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a373:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a378:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a37e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a384:	83 e0 10             	and    eax,0x10
c000a387:	0f b6 c0             	movzx  eax,al
c000a38a:	85 c0                	test   eax,eax
c000a38c:	74 07                	je     c000a395 <VAS::VAS(bool)+0x1b1>
c000a38e:	b8 00 01 00 00       	mov    eax,0x100
c000a393:	eb 05                	jmp    c000a39a <VAS::VAS(bool)+0x1b6>
c000a395:	b8 00 00 00 00       	mov    eax,0x0
c000a39a:	09 c2                	or     edx,eax
c000a39c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a3a0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a3a3:	05 fc 0f 00 00       	add    eax,0xffc
c000a3a8:	83 ca 03             	or     edx,0x3
c000a3ab:	89 10                	mov    DWORD PTR [eax],edx
c000a3ad:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3b2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3b8:	83 ec 0c             	sub    esp,0xc
c000a3bb:	50                   	push   eax
c000a3bc:	e8 f1 1c 00 00       	call   c000c0b2 <Device::getName()>
c000a3c1:	83 c4 10             	add    esp,0x10
c000a3c4:	83 ec 08             	sub    esp,0x8
c000a3c7:	68 c4 00 02 c0       	push   0xc00200c4
c000a3cc:	50                   	push   eax
c000a3cd:	e8 7e 63 ff ff       	call   c0000750 <strcmp>
c000a3d2:	83 c4 10             	add    esp,0x10
c000a3d5:	85 c0                	test   eax,eax
c000a3d7:	0f 94 c0             	sete   al
c000a3da:	0f b6 c0             	movzx  eax,al
c000a3dd:	85 c0                	test   eax,eax
c000a3df:	0f 84 8b 00 00 00    	je     c000a470 <VAS::VAS(bool)+0x28c>
c000a3e5:	fa                   	cli    
c000a3e6:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a3eb:	83 c0 01             	add    eax,0x1
c000a3ee:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a3f3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3f8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3fe:	05 7c 09 00 00       	add    eax,0x97c
c000a403:	83 ec 0c             	sub    esp,0xc
c000a406:	50                   	push   eax
c000a407:	e8 9a d1 ff ff       	call   c00075a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a40c:	83 c4 10             	add    esp,0x10
c000a40f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a414:	89 c3                	mov    ebx,eax
c000a416:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a41b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a421:	05 7c 09 00 00       	add    eax,0x97c
c000a426:	83 ec 0c             	sub    esp,0xc
c000a429:	50                   	push   eax
c000a42a:	e8 77 d1 ff ff       	call   c00075a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a42f:	83 c4 10             	add    esp,0x10
c000a432:	83 ec 08             	sub    esp,0x8
c000a435:	50                   	push   eax
c000a436:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a43a:	e8 db f4 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a43f:	83 c4 10             	add    esp,0x10
c000a442:	8b 00                	mov    eax,DWORD PTR [eax]
c000a444:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a449:	6a 11                	push   0x11
c000a44b:	53                   	push   ebx
c000a44c:	50                   	push   eax
c000a44d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a451:	e8 ae f8 ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a456:	83 c4 10             	add    esp,0x10
c000a459:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a45e:	83 e8 01             	sub    eax,0x1
c000a461:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a466:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a46b:	85 c0                	test   eax,eax
c000a46d:	75 01                	jne    c000a470 <VAS::VAS(bool)+0x28c>
c000a46f:	fb                   	sti    
c000a470:	90                   	nop
c000a471:	83 c4 28             	add    esp,0x28
c000a474:	5b                   	pop    ebx
c000a475:	c3                   	ret    

c000a476 <VAS::evict(unsigned long)>:
c000a476:	55                   	push   ebp
c000a477:	57                   	push   edi
c000a478:	56                   	push   esi
c000a479:	53                   	push   ebx
c000a47a:	83 ec 1c             	sub    esp,0x1c
c000a47d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a481:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a485:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a489:	e8 ed f2 ff ff       	call   c000977b <Virt::allocateSwapfilePage()>
c000a48e:	89 c7                	mov    edi,eax
c000a490:	a1 cc 1f 02 c0       	mov    eax,ds:0xc0021fcc
c000a495:	85 c0                	test   eax,eax
c000a497:	7e 40                	jle    c000a4d9 <VAS::evict(unsigned long)+0x63>
c000a499:	89 ee                	mov    esi,ebp
c000a49b:	31 db                	xor    ebx,ebx
c000a49d:	83 ec 0c             	sub    esp,0xc
c000a4a0:	57                   	push   edi
c000a4a1:	e8 bf f2 ff ff       	call   c0009765 <Virt::swapIDToSector(unsigned long)>
c000a4a6:	89 34 24             	mov    DWORD PTR [esp],esi
c000a4a9:	01 d8                	add    eax,ebx
c000a4ab:	6a 01                	push   0x1
c000a4ad:	31 d2                	xor    edx,edx
c000a4af:	83 c3 01             	add    ebx,0x1
c000a4b2:	52                   	push   edx
c000a4b3:	81 c6 00 02 00 00    	add    esi,0x200
c000a4b9:	50                   	push   eax
c000a4ba:	0f be 05 d8 1f 02 c0 	movsx  eax,BYTE PTR ds:0xc0021fd8
c000a4c1:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a4c8:	50                   	push   eax
c000a4c9:	e8 9e 2d 00 00       	call   c000d26c <LogicalDisk::write(unsigned long long, int, void*)>
c000a4ce:	83 c4 20             	add    esp,0x20
c000a4d1:	39 1d cc 1f 02 c0    	cmp    DWORD PTR ds:0xc0021fcc,ebx
c000a4d7:	7f c4                	jg     c000a49d <VAS::evict(unsigned long)+0x27>
c000a4d9:	83 ec 08             	sub    esp,0x8
c000a4dc:	c1 e7 0b             	shl    edi,0xb
c000a4df:	55                   	push   ebp
c000a4e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a4e4:	50                   	push   eax
c000a4e5:	e8 30 f4 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a4ea:	8b 10                	mov    edx,DWORD PTR [eax]
c000a4ec:	89 d3                	mov    ebx,edx
c000a4ee:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a4f4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a4fa:	09 d7                	or     edi,edx
c000a4fc:	89 38                	mov    DWORD PTR [eax],edi
c000a4fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a501:	8b 15 a8 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fa8
c000a507:	83 c2 01             	add    edx,0x1
c000a50a:	89 15 a8 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa8,edx
c000a510:	e8 35 d8 ff ff       	call   c0007d4a <Phys::freePage(unsigned long)>
c000a515:	0f 20 d8             	mov    eax,cr3
c000a518:	0f 22 d8             	mov    cr3,eax
c000a51b:	8b 0d a8 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fa8
c000a521:	51                   	push   ecx
c000a522:	55                   	push   ebp
c000a523:	53                   	push   ebx
c000a524:	68 14 00 02 c0       	push   0xc0020014
c000a529:	e8 bc 04 00 00       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c000a52e:	a1 a4 4f 02 c0       	mov    eax,ds:0xc0024fa4
c000a533:	c7 44 24 50 d2 00 02 c0 	mov    DWORD PTR [esp+0x50],0xc00200d2
c000a53b:	8d 50 01             	lea    edx,[eax+0x1]
c000a53e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a542:	89 15 a4 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa4,edx
c000a548:	83 c4 3c             	add    esp,0x3c
c000a54b:	5b                   	pop    ebx
c000a54c:	5e                   	pop    esi
c000a54d:	5f                   	pop    edi
c000a54e:	5d                   	pop    ebp
c000a54f:	e9 96 04 00 00       	jmp    c000a9ea <Dbg::kprintf(char const*, ...)>

c000a554 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a554:	55                   	push   ebp
c000a555:	57                   	push   edi
c000a556:	56                   	push   esi
c000a557:	53                   	push   ebx
c000a558:	83 ec 0c             	sub    esp,0xc
c000a55b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a55f:	89 de                	mov    esi,ebx
c000a561:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000a567:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a56d:	77 1f                	ja     c000a58e <VAS::tryLoadBackOffDisk(unsigned long)+0x3a>
c000a56f:	83 ec 08             	sub    esp,0x8
c000a572:	53                   	push   ebx
c000a573:	68 f5 00 02 c0       	push   0xc00200f5
c000a578:	e8 6d 04 00 00       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c000a57d:	83 c4 10             	add    esp,0x10
c000a580:	85 f6                	test   esi,esi
c000a582:	75 27                	jne    c000a5ab <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c000a584:	31 c0                	xor    eax,eax
c000a586:	83 c4 0c             	add    esp,0xc
c000a589:	5b                   	pop    ebx
c000a58a:	5e                   	pop    esi
c000a58b:	5f                   	pop    edi
c000a58c:	5d                   	pop    ebp
c000a58d:	c3                   	ret    
c000a58e:	83 ec 0c             	sub    esp,0xc
c000a591:	68 e3 00 02 c0       	push   0xc00200e3
c000a596:	e8 7c 63 00 00       	call   c0010917 <KePanic(char const*)>
c000a59b:	5f                   	pop    edi
c000a59c:	5d                   	pop    ebp
c000a59d:	53                   	push   ebx
c000a59e:	68 f5 00 02 c0       	push   0xc00200f5
c000a5a3:	e8 42 04 00 00       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c000a5a8:	83 c4 10             	add    esp,0x10
c000a5ab:	83 ec 08             	sub    esp,0x8
c000a5ae:	56                   	push   esi
c000a5af:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000a5b3:	51                   	push   ecx
c000a5b4:	e8 61 f3 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a5b9:	83 c4 10             	add    esp,0x10
c000a5bc:	89 c3                	mov    ebx,eax
c000a5be:	85 c0                	test   eax,eax
c000a5c0:	74 c2                	je     c000a584 <VAS::tryLoadBackOffDisk(unsigned long)+0x30>
c000a5c2:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a5c4:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a5ca:	75 b8                	jne    c000a584 <VAS::tryLoadBackOffDisk(unsigned long)+0x30>
c000a5cc:	e8 e2 d7 ff ff       	call   c0007db3 <Phys::allocatePage()>
c000a5d1:	c1 ed 0b             	shr    ebp,0xb
c000a5d4:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a5d6:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a5dc:	09 c2                	or     edx,eax
c000a5de:	81 ca 01 08 00 00    	or     edx,0x801
c000a5e4:	89 13                	mov    DWORD PTR [ebx],edx
c000a5e6:	8b 15 cc 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fcc
c000a5ec:	85 d2                	test   edx,edx
c000a5ee:	7e 40                	jle    c000a630 <VAS::tryLoadBackOffDisk(unsigned long)+0xdc>
c000a5f0:	89 f7                	mov    edi,esi
c000a5f2:	31 db                	xor    ebx,ebx
c000a5f4:	83 ec 0c             	sub    esp,0xc
c000a5f7:	55                   	push   ebp
c000a5f8:	e8 68 f1 ff ff       	call   c0009765 <Virt::swapIDToSector(unsigned long)>
c000a5fd:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a600:	01 d8                	add    eax,ebx
c000a602:	6a 01                	push   0x1
c000a604:	31 d2                	xor    edx,edx
c000a606:	83 c3 01             	add    ebx,0x1
c000a609:	52                   	push   edx
c000a60a:	81 c7 00 02 00 00    	add    edi,0x200
c000a610:	50                   	push   eax
c000a611:	0f be 05 d8 1f 02 c0 	movsx  eax,BYTE PTR ds:0xc0021fd8
c000a618:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a61f:	50                   	push   eax
c000a620:	e8 db 2b 00 00       	call   c000d200 <LogicalDisk::read(unsigned long long, int, void*)>
c000a625:	83 c4 20             	add    esp,0x20
c000a628:	39 1d cc 1f 02 c0    	cmp    DWORD PTR ds:0xc0021fcc,ebx
c000a62e:	7f c4                	jg     c000a5f4 <VAS::tryLoadBackOffDisk(unsigned long)+0xa0>
c000a630:	83 ec 04             	sub    esp,0x4
c000a633:	a1 a8 4f 02 c0       	mov    eax,ds:0xc0024fa8
c000a638:	83 e8 01             	sub    eax,0x1
c000a63b:	50                   	push   eax
c000a63c:	a3 a8 4f 02 c0       	mov    ds:0xc0024fa8,eax
c000a641:	56                   	push   esi
c000a642:	68 08 01 02 c0       	push   0xc0020108
c000a647:	e8 9e 03 00 00       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c000a64c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a64f:	e8 ee f0 ff ff       	call   c0009742 <Virt::freeSwapfilePage(unsigned long)>
c000a654:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a659:	83 c4 10             	add    esp,0x10
c000a65c:	83 e8 01             	sub    eax,0x1
c000a65f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a664:	85 c0                	test   eax,eax
c000a666:	75 01                	jne    c000a669 <VAS::tryLoadBackOffDisk(unsigned long)+0x115>
c000a668:	fb                   	sti    
c000a669:	0f 20 d8             	mov    eax,cr3
c000a66c:	0f 22 d8             	mov    cr3,eax
c000a66f:	b0 01                	mov    al,0x1
c000a671:	e9 10 ff ff ff       	jmp    c000a586 <VAS::tryLoadBackOffDisk(unsigned long)+0x32>

c000a676 <VAS::scanForEviction()>:
c000a676:	57                   	push   edi
c000a677:	31 ff                	xor    edi,edi
c000a679:	56                   	push   esi
c000a67a:	53                   	push   ebx
c000a67b:	83 ec 10             	sub    esp,0x10
c000a67e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a682:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a685:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a68b:	75 0e                	jne    c000a69b <VAS::scanForEviction()+0x25>
c000a68d:	89 da                	mov    edx,ebx
c000a68f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a692:	c1 ea 16             	shr    edx,0x16
c000a695:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a699:	74 50                	je     c000a6eb <VAS::scanForEviction()+0x75>
c000a69b:	53                   	push   ebx
c000a69c:	56                   	push   esi
c000a69d:	e8 78 f2 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a6a2:	5a                   	pop    edx
c000a6a3:	8b 10                	mov    edx,DWORD PTR [eax]
c000a6a5:	59                   	pop    ecx
c000a6a6:	89 d1                	mov    ecx,edx
c000a6a8:	81 e1 01 08 00 00    	and    ecx,0x801
c000a6ae:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a6b4:	74 40                	je     c000a6f6 <VAS::scanForEviction()+0x80>
c000a6b6:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a6bc:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a6c2:	76 2d                	jbe    c000a6f1 <VAS::scanForEviction()+0x7b>
c000a6c4:	83 c7 01             	add    edi,0x1
c000a6c7:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a6ce:	83 ff 03             	cmp    edi,0x3
c000a6d1:	74 32                	je     c000a705 <VAS::scanForEviction()+0x8f>
c000a6d3:	31 db                	xor    ebx,ebx
c000a6d5:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a6db:	75 be                	jne    c000a69b <VAS::scanForEviction()+0x25>
c000a6dd:	89 da                	mov    edx,ebx
c000a6df:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a6e2:	c1 ea 16             	shr    edx,0x16
c000a6e5:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a6e9:	75 b0                	jne    c000a69b <VAS::scanForEviction()+0x25>
c000a6eb:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a6f1:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a6f4:	eb 8f                	jmp    c000a685 <VAS::scanForEviction()+0xf>
c000a6f6:	f6 c2 20             	test   dl,0x20
c000a6f9:	74 13                	je     c000a70e <VAS::scanForEviction()+0x98>
c000a6fb:	83 e2 df             	and    edx,0xffffffdf
c000a6fe:	89 10                	mov    DWORD PTR [eax],edx
c000a700:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a703:	eb b1                	jmp    c000a6b6 <VAS::scanForEviction()+0x40>
c000a705:	83 c4 10             	add    esp,0x10
c000a708:	31 c0                	xor    eax,eax
c000a70a:	5b                   	pop    ebx
c000a70b:	5e                   	pop    esi
c000a70c:	5f                   	pop    edi
c000a70d:	c3                   	ret    
c000a70e:	83 ec 08             	sub    esp,0x8
c000a711:	89 d0                	mov    eax,edx
c000a713:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a718:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a71c:	53                   	push   ebx
c000a71d:	68 1d 01 02 c0       	push   0xc002011d
c000a722:	e8 c3 02 00 00       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c000a727:	58                   	pop    eax
c000a728:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a72b:	5a                   	pop    edx
c000a72c:	51                   	push   ecx
c000a72d:	56                   	push   esi
c000a72e:	e8 43 fd ff ff       	call   c000a476 <VAS::evict(unsigned long)>
c000a733:	5b                   	pop    ebx
c000a734:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a737:	5f                   	pop    edi
c000a738:	50                   	push   eax
c000a739:	68 31 01 02 c0       	push   0xc0020131
c000a73e:	e8 a7 02 00 00       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c000a743:	58                   	pop    eax
c000a744:	5a                   	pop    edx
c000a745:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a749:	50                   	push   eax
c000a74a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a74e:	68 44 01 02 c0       	push   0xc0020144
c000a753:	e8 92 02 00 00       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c000a758:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a75b:	83 c4 10             	add    esp,0x10
c000a75e:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a764:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a768:	89 4e 08             	mov    DWORD PTR [esi+0x8],ecx
c000a76b:	83 c4 10             	add    esp,0x10
c000a76e:	5b                   	pop    ebx
c000a76f:	5e                   	pop    esi
c000a770:	5f                   	pop    edi
c000a771:	c3                   	ret    

c000a772 <mapVASFirstTime>:
c000a772:	55                   	push   ebp
c000a773:	57                   	push   edi
c000a774:	56                   	push   esi
c000a775:	53                   	push   ebx
c000a776:	83 ec 0c             	sub    esp,0xc
c000a779:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a77e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a781:	83 fa 01             	cmp    edx,0x1
c000a784:	0f 84 cb 00 00 00    	je     c000a855 <mapVASFirstTime+0xe3>
c000a78a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a78d:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a790:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a795:	c1 e5 15             	shl    ebp,0x15
c000a798:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a79d:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a7a3:	29 eb                	sub    ebx,ebp
c000a7a5:	29 ef                	sub    edi,ebp
c000a7a7:	e8 07 d6 ff ff       	call   c0007db3 <Phys::allocatePage()>
c000a7ac:	83 ec 0c             	sub    esp,0xc
c000a7af:	68 03 04 00 00       	push   0x403
c000a7b4:	6a 01                	push   0x1
c000a7b6:	53                   	push   ebx
c000a7b7:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a7bd:	50                   	push   eax
c000a7be:	56                   	push   esi
c000a7bf:	e8 54 f8 ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a7c4:	83 c4 20             	add    esp,0x20
c000a7c7:	39 fb                	cmp    ebx,edi
c000a7c9:	75 dc                	jne    c000a7a7 <mapVASFirstTime+0x35>
c000a7cb:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a7d0:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a7d5:	29 eb                	sub    ebx,ebp
c000a7d7:	29 ef                	sub    edi,ebp
c000a7d9:	e8 d5 d5 ff ff       	call   c0007db3 <Phys::allocatePage()>
c000a7de:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a7e2:	83 fa 01             	cmp    edx,0x1
c000a7e5:	19 d2                	sbb    edx,edx
c000a7e7:	83 ec 0c             	sub    esp,0xc
c000a7ea:	83 e2 04             	and    edx,0x4
c000a7ed:	81 c2 03 04 00 00    	add    edx,0x403
c000a7f3:	52                   	push   edx
c000a7f4:	6a 01                	push   0x1
c000a7f6:	53                   	push   ebx
c000a7f7:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a7fd:	50                   	push   eax
c000a7fe:	56                   	push   esi
c000a7ff:	e8 14 f8 ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a804:	83 c4 20             	add    esp,0x20
c000a807:	39 df                	cmp    edi,ebx
c000a809:	75 ce                	jne    c000a7d9 <mapVASFirstTime+0x67>
c000a80b:	83 ec 0c             	sub    esp,0xc
c000a80e:	bb 7c 40 02 c0       	mov    ebx,0xc002407c
c000a813:	6a 04                	push   0x4
c000a815:	81 eb 00 30 02 c0    	sub    ebx,0xc0023000
c000a81b:	6a ff                	push   0xffffffff
c000a81d:	c1 eb 0c             	shr    ebx,0xc
c000a820:	53                   	push   ebx
c000a821:	68 00 30 02 c0       	push   0xc0023000
c000a826:	56                   	push   esi
c000a827:	e8 5e f2 ff ff       	call   c0009a8a <VAS::reflagRange(unsigned long, int, int, int)>
c000a82c:	83 c4 14             	add    esp,0x14
c000a82f:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c000a834:	6a 04                	push   0x4
c000a836:	6a ff                	push   0xffffffff
c000a838:	53                   	push   ebx
c000a839:	68 00 30 02 c0       	push   0xc0023000
c000a83e:	50                   	push   eax
c000a83f:	e8 46 f2 ff ff       	call   c0009a8a <VAS::reflagRange(unsigned long, int, int, int)>
c000a844:	0f 20 d8             	mov    eax,cr3
c000a847:	0f 22 d8             	mov    cr3,eax
c000a84a:	83 c4 20             	add    esp,0x20
c000a84d:	83 c4 0c             	add    esp,0xc
c000a850:	5b                   	pop    ebx
c000a851:	5e                   	pop    esi
c000a852:	5f                   	pop    edi
c000a853:	5d                   	pop    ebp
c000a854:	c3                   	ret    
c000a855:	83 ec 0c             	sub    esp,0xc
c000a858:	68 51 01 02 c0       	push   0xc0020151
c000a85d:	e8 88 01 00 00       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c000a862:	83 c4 10             	add    esp,0x10
c000a865:	83 c4 0c             	add    esp,0xc
c000a868:	5b                   	pop    ebx
c000a869:	5e                   	pop    esi
c000a86a:	5f                   	pop    edi
c000a86b:	5d                   	pop    ebp
c000a86c:	c3                   	ret    

c000a86d <__cxa_atexit>:
c000a86d:	31 c0                	xor    eax,eax
c000a86f:	c3                   	ret    

c000a870 <__cxa_finalize>:
c000a870:	c3                   	ret    

c000a871 <__stack_chk_fail>:
c000a871:	55                   	push   ebp
c000a872:	89 e5                	mov    ebp,esp
c000a874:	83 ec 10             	sub    esp,0x10
c000a877:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a87a:	68 6a 01 02 c0       	push   0xc002016a
c000a87f:	e8 66 01 00 00       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c000a884:	58                   	pop    eax
c000a885:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a888:	5a                   	pop    edx
c000a889:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a88c:	68 6a 01 02 c0       	push   0xc002016a
c000a891:	e8 54 01 00 00       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c000a896:	c7 04 24 72 01 02 c0 	mov    DWORD PTR [esp],0xc0020172
c000a89d:	e8 75 60 00 00       	call   c0010917 <KePanic(char const*)>
c000a8a2:	83 c4 10             	add    esp,0x10
c000a8a5:	c9                   	leave  
c000a8a6:	c3                   	ret    

c000a8a7 <__cxa_pure_virtual>:
c000a8a7:	83 ec 18             	sub    esp,0x18
c000a8aa:	68 8a 01 02 c0       	push   0xc002018a
c000a8af:	e8 63 60 00 00       	call   c0010917 <KePanic(char const*)>
c000a8b4:	83 c4 1c             	add    esp,0x1c
c000a8b7:	c3                   	ret    

c000a8b8 <operator new[](unsigned long)>:
c000a8b8:	e9 f1 d1 ff ff       	jmp    c0007aae <malloc>

c000a8bd <operator delete(void*, unsigned long)>:
c000a8bd:	e9 0c d2 ff ff       	jmp    c0007ace <rfree>

c000a8c2 <operator delete[](void*)>:
c000a8c2:	e9 07 d2 ff ff       	jmp    c0007ace <rfree>

c000a8c7 <operator delete[](void*, unsigned long)>:
c000a8c7:	e9 02 d2 ff ff       	jmp    c0007ace <rfree>

c000a8cc <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a8cc:	55                   	push   ebp
c000a8cd:	57                   	push   edi
c000a8ce:	56                   	push   esi
c000a8cf:	be 8f fd 01 c0       	mov    esi,0xc001fd8f
c000a8d4:	53                   	push   ebx
c000a8d5:	83 ec 20             	sub    esp,0x20
c000a8d8:	a0 8e fd 01 c0       	mov    al,ds:0xc001fd8e
c000a8dd:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a8e1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a8e5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a8e9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a8ed:	b8 10 00 00 00       	mov    eax,0x10
c000a8f2:	f7 c7 02 00 00 00    	test   edi,0x2
c000a8f8:	75 60                	jne    c000a95a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a8fa:	89 c1                	mov    ecx,eax
c000a8fc:	c1 e9 02             	shr    ecx,0x2
c000a8ff:	fc                   	cld    
c000a900:	31 d2                	xor    edx,edx
c000a902:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a904:	a8 02                	test   al,0x2
c000a906:	74 0b                	je     c000a913 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a908:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a90b:	66 89 17             	mov    WORD PTR [edi],dx
c000a90e:	ba 02 00 00 00       	mov    edx,0x2
c000a913:	a8 01                	test   al,0x1
c000a915:	74 06                	je     c000a91d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a917:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a91a:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a91d:	89 ee                	mov    esi,ebp
c000a91f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a923:	eb 02                	jmp    c000a927 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a925:	89 c6                	mov    esi,eax
c000a927:	31 d2                	xor    edx,edx
c000a929:	83 c1 01             	add    ecx,0x1
c000a92c:	89 f0                	mov    eax,esi
c000a92e:	f7 f3                	div    ebx
c000a930:	39 de                	cmp    esi,ebx
c000a932:	73 f1                	jae    c000a925 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a934:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a937:	eb 02                	jmp    c000a93b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a939:	89 c5                	mov    ebp,eax
c000a93b:	31 d2                	xor    edx,edx
c000a93d:	83 e9 01             	sub    ecx,0x1
c000a940:	89 e8                	mov    eax,ebp
c000a942:	f7 f3                	div    ebx
c000a944:	39 dd                	cmp    ebp,ebx
c000a946:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a94a:	88 11                	mov    BYTE PTR [ecx],dl
c000a94c:	73 eb                	jae    c000a939 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a94e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a952:	83 c4 20             	add    esp,0x20
c000a955:	5b                   	pop    ebx
c000a956:	5e                   	pop    esi
c000a957:	5f                   	pop    edi
c000a958:	5d                   	pop    ebp
c000a959:	c3                   	ret    
c000a95a:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a95d:	83 c7 02             	add    edi,0x2
c000a960:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a964:	83 c6 02             	add    esi,0x2
c000a967:	83 e8 02             	sub    eax,0x2
c000a96a:	eb 8e                	jmp    c000a8fa <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a96c <Dbg::logc(char)>:
c000a96c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a970:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a977:	75 12                	jne    c000a98b <Dbg::logc(char)+0x1f>
c000a979:	ba fd 03 00 00       	mov    edx,0x3fd
c000a97e:	ec                   	in     al,dx
c000a97f:	a8 20                	test   al,0x20
c000a981:	74 fb                	je     c000a97e <Dbg::logc(char)+0x12>
c000a983:	ba f8 03 00 00       	mov    edx,0x3f8
c000a988:	88 c8                	mov    al,cl
c000a98a:	ee                   	out    dx,al
c000a98b:	c3                   	ret    

c000a98c <Dbg::logs(char*)>:
c000a98c:	53                   	push   ebx
c000a98d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a991:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a994:	85 c0                	test   eax,eax
c000a996:	74 11                	je     c000a9a9 <Dbg::logs(char*)+0x1d>
c000a998:	83 c3 01             	add    ebx,0x1
c000a99b:	50                   	push   eax
c000a99c:	e8 cb ff ff ff       	call   c000a96c <Dbg::logc(char)>
c000a9a1:	58                   	pop    eax
c000a9a2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a9a5:	85 c0                	test   eax,eax
c000a9a7:	75 ef                	jne    c000a998 <Dbg::logs(char*)+0xc>
c000a9a9:	5b                   	pop    ebx
c000a9aa:	c3                   	ret    

c000a9ab <Dbg::logWriteInt(unsigned int)>:
c000a9ab:	83 ec 10             	sub    esp,0x10
c000a9ae:	6a 0a                	push   0xa
c000a9b0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a9b4:	50                   	push   eax
c000a9b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a9b9:	50                   	push   eax
c000a9ba:	e8 0d ff ff ff       	call   c000a8cc <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a9bf:	50                   	push   eax
c000a9c0:	e8 c7 ff ff ff       	call   c000a98c <Dbg::logs(char*)>
c000a9c5:	83 c4 20             	add    esp,0x20
c000a9c8:	c3                   	ret    

c000a9c9 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a9c9:	83 ec 10             	sub    esp,0x10
c000a9cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9d0:	50                   	push   eax
c000a9d1:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a9d5:	50                   	push   eax
c000a9d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a9da:	52                   	push   edx
c000a9db:	e8 ec fe ff ff       	call   c000a8cc <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a9e0:	50                   	push   eax
c000a9e1:	e8 a6 ff ff ff       	call   c000a98c <Dbg::logs(char*)>
c000a9e6:	83 c4 20             	add    esp,0x20
c000a9e9:	c3                   	ret    

c000a9ea <Dbg::kprintf(char const*, ...)>:
c000a9ea:	55                   	push   ebp
c000a9eb:	57                   	push   edi
c000a9ec:	56                   	push   esi
c000a9ed:	53                   	push   ebx
c000a9ee:	83 ec 0c             	sub    esp,0xc
c000a9f1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a9f5:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a9fc:	74 08                	je     c000aa06 <Dbg::kprintf(char const*, ...)+0x1c>
c000a9fe:	83 c4 0c             	add    esp,0xc
c000aa01:	5b                   	pop    ebx
c000aa02:	5e                   	pop    esi
c000aa03:	5f                   	pop    edi
c000aa04:	5d                   	pop    ebp
c000aa05:	c3                   	ret    
c000aa06:	8d 44 24 24          	lea    eax,[esp+0x24]
c000aa0a:	31 ff                	xor    edi,edi
c000aa0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa10:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000aa13:	85 c0                	test   eax,eax
c000aa15:	74 e7                	je     c000a9fe <Dbg::kprintf(char const*, ...)+0x14>
c000aa17:	8d 77 01             	lea    esi,[edi+0x1]
c000aa1a:	83 f8 25             	cmp    eax,0x25
c000aa1d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000aa20:	75 47                	jne    c000aa69 <Dbg::kprintf(char const*, ...)+0x7f>
c000aa22:	83 c7 02             	add    edi,0x2
c000aa25:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000aa28:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000aa2b:	83 e8 25             	sub    eax,0x25
c000aa2e:	0f b6 c0             	movzx  eax,al
c000aa31:	83 f8 53             	cmp    eax,0x53
c000aa34:	0f 87 ce 00 00 00    	ja     c000ab08 <Dbg::kprintf(char const*, ...)+0x11e>
c000aa3a:	ff 24 85 a0 01 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfe60]
c000aa41:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa45:	89 c8                	mov    eax,ecx
c000aa47:	83 c1 04             	add    ecx,0x4
c000aa4a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa4e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000aa50:	55                   	push   ebp
c000aa51:	e8 55 ff ff ff       	call   c000a9ab <Dbg::logWriteInt(unsigned int)>
c000aa56:	58                   	pop    eax
c000aa57:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000aa5a:	85 c0                	test   eax,eax
c000aa5c:	74 a0                	je     c000a9fe <Dbg::kprintf(char const*, ...)+0x14>
c000aa5e:	8d 77 01             	lea    esi,[edi+0x1]
c000aa61:	83 f8 25             	cmp    eax,0x25
c000aa64:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000aa67:	74 b9                	je     c000aa22 <Dbg::kprintf(char const*, ...)+0x38>
c000aa69:	50                   	push   eax
c000aa6a:	89 f7                	mov    edi,esi
c000aa6c:	e8 fb fe ff ff       	call   c000a96c <Dbg::logc(char)>
c000aa71:	89 ee                	mov    esi,ebp
c000aa73:	58                   	pop    eax
c000aa74:	eb e1                	jmp    c000aa57 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa76:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa7a:	89 c8                	mov    eax,ecx
c000aa7c:	83 c1 04             	add    ecx,0x4
c000aa7f:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa81:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa85:	50                   	push   eax
c000aa86:	e8 01 ff ff ff       	call   c000a98c <Dbg::logs(char*)>
c000aa8b:	58                   	pop    eax
c000aa8c:	eb c9                	jmp    c000aa57 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa8e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa92:	89 d0                	mov    eax,edx
c000aa94:	83 c2 04             	add    edx,0x4
c000aa97:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa9b:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa9d:	50                   	push   eax
c000aa9e:	e8 08 ff ff ff       	call   c000a9ab <Dbg::logWriteInt(unsigned int)>
c000aaa3:	58                   	pop    eax
c000aaa4:	eb b1                	jmp    c000aa57 <Dbg::kprintf(char const*, ...)+0x6d>
c000aaa6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aaaa:	89 d0                	mov    eax,edx
c000aaac:	83 c2 04             	add    edx,0x4
c000aaaf:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aab2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aab6:	50                   	push   eax
c000aab7:	e8 b0 fe ff ff       	call   c000a96c <Dbg::logc(char)>
c000aabc:	58                   	pop    eax
c000aabd:	eb 98                	jmp    c000aa57 <Dbg::kprintf(char const*, ...)+0x6d>
c000aabf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aac3:	89 c8                	mov    eax,ecx
c000aac5:	83 c1 04             	add    ecx,0x4
c000aac8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aacc:	6a 10                	push   0x10
c000aace:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aad0:	51                   	push   ecx
c000aad1:	e8 f3 fe ff ff       	call   c000a9c9 <Dbg::logWriteIntBase(unsigned int, int)>
c000aad6:	5d                   	pop    ebp
c000aad7:	58                   	pop    eax
c000aad8:	e9 7a ff ff ff       	jmp    c000aa57 <Dbg::kprintf(char const*, ...)+0x6d>
c000aadd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aae1:	89 d0                	mov    eax,edx
c000aae3:	83 c2 08             	add    edx,0x8
c000aae6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaea:	6a 10                	push   0x10
c000aaec:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaee:	50                   	push   eax
c000aaef:	e8 d5 fe ff ff       	call   c000a9c9 <Dbg::logWriteIntBase(unsigned int, int)>
c000aaf4:	58                   	pop    eax
c000aaf5:	5a                   	pop    edx
c000aaf6:	e9 5c ff ff ff       	jmp    c000aa57 <Dbg::kprintf(char const*, ...)+0x6d>
c000aafb:	6a 25                	push   0x25
c000aafd:	e8 6a fe ff ff       	call   c000a96c <Dbg::logc(char)>
c000ab02:	5a                   	pop    edx
c000ab03:	e9 4f ff ff ff       	jmp    c000aa57 <Dbg::kprintf(char const*, ...)+0x6d>
c000ab08:	6a 25                	push   0x25
c000ab0a:	e8 5d fe ff ff       	call   c000a96c <Dbg::logc(char)>
c000ab0f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000ab13:	50                   	push   eax
c000ab14:	e8 53 fe ff ff       	call   c000a96c <Dbg::logc(char)>
c000ab19:	5a                   	pop    edx
c000ab1a:	59                   	pop    ecx
c000ab1b:	e9 37 ff ff ff       	jmp    c000aa57 <Dbg::kprintf(char const*, ...)+0x6d>

c000ab20 <File::read(unsigned long long, void*, int*)>:
c000ab20:	53                   	push   ebx
c000ab21:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab25:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ab29:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ab30:	83 f8 19             	cmp    eax,0x19
c000ab33:	77 35                	ja     c000ab6a <File::read(unsigned long long, void*, int*)+0x4a>
c000ab35:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ab3c:	85 c0                	test   eax,eax
c000ab3e:	74 2a                	je     c000ab6a <File::read(unsigned long long, void*, int*)+0x4a>
c000ab40:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ab46:	85 c0                	test   eax,eax
c000ab48:	74 20                	je     c000ab6a <File::read(unsigned long long, void*, int*)+0x4a>
c000ab4a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ab4e:	74 21                	je     c000ab71 <File::read(unsigned long long, void*, int*)+0x51>
c000ab50:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ab52:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab56:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ab5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab60:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab64:	5b                   	pop    ebx
c000ab65:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ab68:	ff e0                	jmp    eax
c000ab6a:	b8 0b 00 00 00       	mov    eax,0xb
c000ab6f:	eb 05                	jmp    c000ab76 <File::read(unsigned long long, void*, int*)+0x56>
c000ab71:	b8 05 00 00 00       	mov    eax,0x5
c000ab76:	5b                   	pop    ebx
c000ab77:	c3                   	ret    

c000ab78 <File::write(unsigned long long, void*, int*)>:
c000ab78:	53                   	push   ebx
c000ab79:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab7d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ab81:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ab88:	83 f8 19             	cmp    eax,0x19
c000ab8b:	77 35                	ja     c000abc2 <File::write(unsigned long long, void*, int*)+0x4a>
c000ab8d:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ab94:	85 c0                	test   eax,eax
c000ab96:	74 2a                	je     c000abc2 <File::write(unsigned long long, void*, int*)+0x4a>
c000ab98:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ab9e:	85 c0                	test   eax,eax
c000aba0:	74 20                	je     c000abc2 <File::write(unsigned long long, void*, int*)+0x4a>
c000aba2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000aba6:	74 21                	je     c000abc9 <File::write(unsigned long long, void*, int*)+0x51>
c000aba8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000abaa:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000abae:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000abb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abbc:	5b                   	pop    ebx
c000abbd:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000abc0:	ff e0                	jmp    eax
c000abc2:	b8 0b 00 00 00       	mov    eax,0xb
c000abc7:	eb 05                	jmp    c000abce <File::write(unsigned long long, void*, int*)+0x56>
c000abc9:	b8 05 00 00 00       	mov    eax,0x5
c000abce:	5b                   	pop    ebx
c000abcf:	c3                   	ret    

c000abd0 <Directory::read(unsigned long long, void*, int*)>:
c000abd0:	53                   	push   ebx
c000abd1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000abd5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000abd9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000abe0:	83 f8 19             	cmp    eax,0x19
c000abe3:	77 35                	ja     c000ac1a <Directory::read(unsigned long long, void*, int*)+0x4a>
c000abe5:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000abec:	85 c0                	test   eax,eax
c000abee:	74 2a                	je     c000ac1a <Directory::read(unsigned long long, void*, int*)+0x4a>
c000abf0:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000abf6:	85 c0                	test   eax,eax
c000abf8:	74 20                	je     c000ac1a <Directory::read(unsigned long long, void*, int*)+0x4a>
c000abfa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000abfe:	74 21                	je     c000ac21 <Directory::read(unsigned long long, void*, int*)+0x51>
c000ac00:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ac02:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ac06:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ac0c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac10:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac14:	5b                   	pop    ebx
c000ac15:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ac18:	ff e0                	jmp    eax
c000ac1a:	b8 0b 00 00 00       	mov    eax,0xb
c000ac1f:	eb 05                	jmp    c000ac26 <Directory::read(unsigned long long, void*, int*)+0x56>
c000ac21:	b8 05 00 00 00       	mov    eax,0x5
c000ac26:	5b                   	pop    ebx
c000ac27:	c3                   	ret    

c000ac28 <Directory::write(unsigned long long, void*, int*)>:
c000ac28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac2c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ac33:	b8 0b 00 00 00       	mov    eax,0xb
c000ac38:	83 fa 19             	cmp    edx,0x19
c000ac3b:	77 18                	ja     c000ac55 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ac3d:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000ac44:	85 d2                	test   edx,edx
c000ac46:	74 0d                	je     c000ac55 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ac48:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000ac4f:	19 c0                	sbb    eax,eax
c000ac51:	83 e0 0a             	and    eax,0xa
c000ac54:	40                   	inc    eax
c000ac55:	c3                   	ret    

c000ac56 <File::isAtty()>:
c000ac56:	31 c0                	xor    eax,eax
c000ac58:	c3                   	ret    
c000ac59:	90                   	nop

c000ac5a <Directory::isAtty()>:
c000ac5a:	31 c0                	xor    eax,eax
c000ac5c:	c3                   	ret    
c000ac5d:	90                   	nop

c000ac5e <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ac5e:	b8 0a 00 00 00       	mov    eax,0xa
c000ac63:	c3                   	ret    

c000ac64 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ac64:	b8 0a 00 00 00       	mov    eax,0xa
c000ac69:	c3                   	ret    

c000ac6a <Filesystem::allocateSwapfile(char const*, int)>:
c000ac6a:	31 c0                	xor    eax,eax
c000ac6c:	31 d2                	xor    edx,edx
c000ac6e:	c3                   	ret    
c000ac6f:	90                   	nop

c000ac70 <File::~File()>:
c000ac70:	83 ec 0c             	sub    esp,0xc
c000ac73:	ba 60 03 02 c0       	mov    edx,0xc0020360
c000ac78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac7c:	89 10                	mov    DWORD PTR [eax],edx
c000ac7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac82:	83 ec 0c             	sub    esp,0xc
c000ac85:	50                   	push   eax
c000ac86:	e8 29 e7 ff ff       	call   c00093b4 <UnixFile::~UnixFile()>
c000ac8b:	83 c4 10             	add    esp,0x10
c000ac8e:	90                   	nop
c000ac8f:	83 c4 0c             	add    esp,0xc
c000ac92:	c3                   	ret    
c000ac93:	90                   	nop

c000ac94 <File::~File()>:
c000ac94:	83 ec 0c             	sub    esp,0xc
c000ac97:	83 ec 0c             	sub    esp,0xc
c000ac9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac9e:	e8 cd ff ff ff       	call   c000ac70 <File::~File()>
c000aca3:	83 c4 10             	add    esp,0x10
c000aca6:	83 ec 08             	sub    esp,0x8
c000aca9:	68 14 01 00 00       	push   0x114
c000acae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acb2:	e8 06 fc ff ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c000acb7:	83 c4 10             	add    esp,0x10
c000acba:	83 c4 0c             	add    esp,0xc
c000acbd:	c3                   	ret    

c000acbe <Directory::~Directory()>:
c000acbe:	83 ec 0c             	sub    esp,0xc
c000acc1:	ba 7c 03 02 c0       	mov    edx,0xc002037c
c000acc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acca:	89 10                	mov    DWORD PTR [eax],edx
c000accc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acd0:	83 ec 0c             	sub    esp,0xc
c000acd3:	50                   	push   eax
c000acd4:	e8 db e6 ff ff       	call   c00093b4 <UnixFile::~UnixFile()>
c000acd9:	83 c4 10             	add    esp,0x10
c000acdc:	90                   	nop
c000acdd:	83 c4 0c             	add    esp,0xc
c000ace0:	c3                   	ret    
c000ace1:	90                   	nop

c000ace2 <Directory::~Directory()>:
c000ace2:	83 ec 0c             	sub    esp,0xc
c000ace5:	83 ec 0c             	sub    esp,0xc
c000ace8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acec:	e8 cd ff ff ff       	call   c000acbe <Directory::~Directory()>
c000acf1:	83 c4 10             	add    esp,0x10
c000acf4:	83 ec 08             	sub    esp,0x8
c000acf7:	68 14 01 00 00       	push   0x114
c000acfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad00:	e8 b8 fb ff ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c000ad05:	83 c4 10             	add    esp,0x10
c000ad08:	83 c4 0c             	add    esp,0xc
c000ad0b:	c3                   	ret    

c000ad0c <Filesystem::Filesystem()>:
c000ad0c:	ba f8 02 02 c0       	mov    edx,0xc00202f8
c000ad11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad15:	89 10                	mov    DWORD PTR [eax],edx
c000ad17:	8b 15 b4 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fb4
c000ad1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad21:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ad24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad28:	a3 b4 4f 02 c0       	mov    ds:0xc0024fb4,eax
c000ad2d:	90                   	nop
c000ad2e:	c3                   	ret    
c000ad2f:	90                   	nop

c000ad30 <Filesystem::~Filesystem()>:
c000ad30:	ba f8 02 02 c0       	mov    edx,0xc00202f8
c000ad35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad39:	89 10                	mov    DWORD PTR [eax],edx
c000ad3b:	90                   	nop
c000ad3c:	c3                   	ret    
c000ad3d:	90                   	nop

c000ad3e <Filesystem::~Filesystem()>:
c000ad3e:	83 ec 0c             	sub    esp,0xc
c000ad41:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ad45:	e8 e6 ff ff ff       	call   c000ad30 <Filesystem::~Filesystem()>
c000ad4a:	83 c4 04             	add    esp,0x4
c000ad4d:	83 ec 08             	sub    esp,0x8
c000ad50:	6a 08                	push   0x8
c000ad52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad56:	e8 62 fb ff ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c000ad5b:	83 c4 10             	add    esp,0x10
c000ad5e:	83 c4 0c             	add    esp,0xc
c000ad61:	c3                   	ret    

c000ad62 <Fs::getcwd(Process*, char*, int)>:
c000ad62:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad66:	31 c0                	xor    eax,eax
c000ad68:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ad6b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ad6f:	7d 15                	jge    c000ad86 <Fs::getcwd(Process*, char*, int)+0x24>
c000ad71:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ad75:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000ad7c:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ad7f:	84 c9                	test   cl,cl
c000ad81:	74 06                	je     c000ad89 <Fs::getcwd(Process*, char*, int)+0x27>
c000ad83:	40                   	inc    eax
c000ad84:	eb e2                	jmp    c000ad68 <Fs::getcwd(Process*, char*, int)+0x6>
c000ad86:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ad89:	31 c0                	xor    eax,eax
c000ad8b:	c3                   	ret    

c000ad8c <Fs::initVFS()>:
c000ad8c:	83 ec 18             	sub    esp,0x18
c000ad8f:	6a 08                	push   0x8
c000ad91:	e8 18 cd ff ff       	call   c0007aae <malloc>
c000ad96:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad99:	e8 be dd 00 00       	call   c0018b5c <FAT::FAT()>
c000ad9e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ada5:	e8 04 cd ff ff       	call   c0007aae <malloc>
c000adaa:	89 04 24             	mov    DWORD PTR [esp],eax
c000adad:	e8 d0 ec 00 00       	call   c0019a82 <ISO9660::ISO9660()>
c000adb2:	83 c4 1c             	add    esp,0x1c
c000adb5:	c3                   	ret    

c000adb6 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000adb6:	55                   	push   ebp
c000adb7:	57                   	push   edi
c000adb8:	56                   	push   esi
c000adb9:	53                   	push   ebx
c000adba:	81 ec 10 04 00 00    	sub    esp,0x410
c000adc0:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000adc7:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000adce:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000add5:	68 00 04 00 00       	push   0x400
c000adda:	6a 00                	push   0x0
c000addc:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000ade0:	56                   	push   esi
c000ade1:	e8 0a 57 ff ff       	call   c00004f0 <memset>
c000ade6:	83 c4 10             	add    esp,0x10
c000ade9:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000aded:	75 0b                	jne    c000adfa <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000adef:	50                   	push   eax
c000adf0:	50                   	push   eax
c000adf1:	57                   	push   edi
c000adf2:	56                   	push   esi
c000adf3:	e8 48 58 ff ff       	call   c0000640 <strcpy>
c000adf8:	eb 44                	jmp    c000ae3e <Fs::standardiseFiles(char*, char const*, char const*)+0x88>
c000adfa:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000adfd:	83 f8 5c             	cmp    eax,0x5c
c000ae00:	74 05                	je     c000ae07 <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000ae02:	83 f8 2f             	cmp    eax,0x2f
c000ae05:	75 18                	jne    c000ae1f <Fs::standardiseFiles(char*, char const*, char const*)+0x69>
c000ae07:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ae0a:	3c 60                	cmp    al,0x60
c000ae0c:	7e 03                	jle    c000ae11 <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000ae0e:	83 e8 20             	sub    eax,0x20
c000ae11:	88 04 24             	mov    BYTE PTR [esp],al
c000ae14:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ae1b:	50                   	push   eax
c000ae1c:	50                   	push   eax
c000ae1d:	eb 18                	jmp    c000ae37 <Fs::standardiseFiles(char*, char const*, char const*)+0x81>
c000ae1f:	50                   	push   eax
c000ae20:	50                   	push   eax
c000ae21:	55                   	push   ebp
c000ae22:	56                   	push   esi
c000ae23:	e8 18 58 ff ff       	call   c0000640 <strcpy>
c000ae28:	5a                   	pop    edx
c000ae29:	59                   	pop    ecx
c000ae2a:	68 73 12 02 c0       	push   0xc0021273
c000ae2f:	56                   	push   esi
c000ae30:	e8 0b 5a ff ff       	call   c0000840 <strcat>
c000ae35:	5d                   	pop    ebp
c000ae36:	58                   	pop    eax
c000ae37:	57                   	push   edi
c000ae38:	56                   	push   esi
c000ae39:	e8 02 5a ff ff       	call   c0000840 <strcat>
c000ae3e:	83 c4 10             	add    esp,0x10
c000ae41:	8a 04 24             	mov    al,BYTE PTR [esp]
c000ae44:	3c 60                	cmp    al,0x60
c000ae46:	7e 03                	jle    c000ae4b <Fs::standardiseFiles(char*, char const*, char const*)+0x95>
c000ae48:	83 e8 20             	sub    eax,0x20
c000ae4b:	88 04 24             	mov    BYTE PTR [esp],al
c000ae4e:	88 03                	mov    BYTE PTR [ebx],al
c000ae50:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ae57:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000ae5d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000ae61:	bf 03 00 00 00       	mov    edi,0x3
c000ae66:	b8 03 00 00 00       	mov    eax,0x3
c000ae6b:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000ae6f:	89 ea                	mov    edx,ebp
c000ae71:	85 ed                	test   ebp,ebp
c000ae73:	0f 84 97 00 00 00    	je     c000af10 <Fs::standardiseFiles(char*, char const*, char const*)+0x15a>
c000ae79:	8d 4f 01             	lea    ecx,[edi+0x1]
c000ae7c:	83 fd 5c             	cmp    ebp,0x5c
c000ae7f:	74 05                	je     c000ae86 <Fs::standardiseFiles(char*, char const*, char const*)+0xd0>
c000ae81:	83 fd 2f             	cmp    ebp,0x2f
c000ae84:	75 12                	jne    c000ae98 <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000ae86:	89 c5                	mov    ebp,eax
c000ae88:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ae8d:	74 09                	je     c000ae98 <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000ae8f:	40                   	inc    eax
c000ae90:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000ae94:	89 cf                	mov    edi,ecx
c000ae96:	eb d3                	jmp    c000ae6b <Fs::standardiseFiles(char*, char const*, char const*)+0xb5>
c000ae98:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000ae9d:	0f be ea             	movsx  ebp,dl
c000aea0:	75 5e                	jne    c000af00 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000aea2:	83 fd 2e             	cmp    ebp,0x2e
c000aea5:	75 59                	jne    c000af00 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000aea7:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000aeab:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000aeb0:	74 18                	je     c000aeca <Fs::standardiseFiles(char*, char const*, char const*)+0x114>
c000aeb2:	83 fd 2e             	cmp    ebp,0x2e
c000aeb5:	74 53                	je     c000af0a <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000aeb7:	89 f9                	mov    ecx,edi
c000aeb9:	41                   	inc    ecx
c000aeba:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000aebe:	83 fa 2f             	cmp    edx,0x2f
c000aec1:	74 f6                	je     c000aeb9 <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000aec3:	83 fa 5c             	cmp    edx,0x5c
c000aec6:	74 f1                	je     c000aeb9 <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000aec8:	eb ca                	jmp    c000ae94 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000aeca:	83 fd 2e             	cmp    ebp,0x2e
c000aecd:	74 3b                	je     c000af0a <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000aecf:	83 f8 03             	cmp    eax,0x3
c000aed2:	74 c0                	je     c000ae94 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000aed4:	41                   	inc    ecx
c000aed5:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000aed9:	83 fa 2f             	cmp    edx,0x2f
c000aedc:	74 f6                	je     c000aed4 <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000aede:	83 fa 5c             	cmp    edx,0x5c
c000aee1:	74 f1                	je     c000aed4 <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000aee3:	48                   	dec    eax
c000aee4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aee8:	75 06                	jne    c000aef0 <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000aeea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aeee:	eb f3                	jmp    c000aee3 <Fs::standardiseFiles(char*, char const*, char const*)+0x12d>
c000aef0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aef4:	74 07                	je     c000aefd <Fs::standardiseFiles(char*, char const*, char const*)+0x147>
c000aef6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aefa:	48                   	dec    eax
c000aefb:	eb f3                	jmp    c000aef0 <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000aefd:	40                   	inc    eax
c000aefe:	eb 94                	jmp    c000ae94 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000af00:	83 fd 2f             	cmp    ebp,0x2f
c000af03:	74 8f                	je     c000ae94 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000af05:	83 fd 5c             	cmp    ebp,0x5c
c000af08:	74 8a                	je     c000ae94 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000af0a:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000af0d:	40                   	inc    eax
c000af0e:	eb 84                	jmp    c000ae94 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000af10:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000af14:	83 ec 0c             	sub    esp,0xc
c000af17:	53                   	push   ebx
c000af18:	e8 53 56 ff ff       	call   c0000570 <strlen>
c000af1d:	83 c4 10             	add    esp,0x10
c000af20:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000af25:	75 26                	jne    c000af4d <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000af27:	83 ec 0c             	sub    esp,0xc
c000af2a:	53                   	push   ebx
c000af2b:	e8 40 56 ff ff       	call   c0000570 <strlen>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000af38:	74 26                	je     c000af60 <Fs::standardiseFiles(char*, char const*, char const*)+0x1aa>
c000af3a:	83 ec 0c             	sub    esp,0xc
c000af3d:	53                   	push   ebx
c000af3e:	e8 2d 56 ff ff       	call   c0000570 <strlen>
c000af43:	83 c4 10             	add    esp,0x10
c000af46:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000af4b:	eb c7                	jmp    c000af14 <Fs::standardiseFiles(char*, char const*, char const*)+0x15e>
c000af4d:	83 ec 0c             	sub    esp,0xc
c000af50:	53                   	push   ebx
c000af51:	e8 1a 56 ff ff       	call   c0000570 <strlen>
c000af56:	83 c4 10             	add    esp,0x10
c000af59:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000af5e:	74 c7                	je     c000af27 <Fs::standardiseFiles(char*, char const*, char const*)+0x171>
c000af60:	81 c4 0c 04 00 00    	add    esp,0x40c
c000af66:	5b                   	pop    ebx
c000af67:	5e                   	pop    esi
c000af68:	5f                   	pop    edi
c000af69:	5d                   	pop    ebp
c000af6a:	c3                   	ret    
c000af6b:	90                   	nop

c000af6c <File::File(char const*, Process*)>:
c000af6c:	83 ec 0c             	sub    esp,0xc
c000af6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af73:	83 ec 08             	sub    esp,0x8
c000af76:	6a 00                	push   0x0
c000af78:	50                   	push   eax
c000af79:	e8 50 e2 ff ff       	call   c00091ce <UnixFile::UnixFile(int)>
c000af7e:	83 c4 10             	add    esp,0x10
c000af81:	ba 60 03 02 c0       	mov    edx,0xc0020360
c000af86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af8a:	89 10                	mov    DWORD PTR [eax],edx
c000af8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000af90:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000af96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af9a:	83 c0 0d             	add    eax,0xd
c000af9d:	83 ec 04             	sub    esp,0x4
c000afa0:	52                   	push   edx
c000afa1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afa5:	50                   	push   eax
c000afa6:	e8 0b fe ff ff       	call   c000adb6 <Fs::standardiseFiles(char*, char const*, char const*)>
c000afab:	83 c4 10             	add    esp,0x10
c000afae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afb2:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000afb5:	83 e8 41             	sub    eax,0x41
c000afb8:	88 c2                	mov    dl,al
c000afba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afbe:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000afc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000afcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afd0:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000afd6:	0f b6 c0             	movzx  eax,al
c000afd9:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000afe0:	85 c0                	test   eax,eax
c000afe2:	74 3e                	je     c000b022 <File::File(char const*, Process*)+0xb6>
c000afe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afe8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000afee:	0f b6 c0             	movzx  eax,al
c000aff1:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000aff8:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000affe:	85 c0                	test   eax,eax
c000b000:	75 20                	jne    c000b022 <File::File(char const*, Process*)+0xb6>
c000b002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b006:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b00c:	0f b6 c0             	movzx  eax,al
c000b00f:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b016:	83 ec 0c             	sub    esp,0xc
c000b019:	50                   	push   eax
c000b01a:	e8 1f 21 00 00       	call   c000d13e <LogicalDisk::mount()>
c000b01f:	83 c4 10             	add    esp,0x10
c000b022:	90                   	nop
c000b023:	83 c4 0c             	add    esp,0xc
c000b026:	c3                   	ret    
c000b027:	90                   	nop

c000b028 <File::open(FileOpenMode)>:
c000b028:	53                   	push   ebx
c000b029:	b8 0b 00 00 00       	mov    eax,0xb
c000b02e:	83 ec 08             	sub    esp,0x8
c000b031:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b035:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b03c:	83 fa 19             	cmp    edx,0x19
c000b03f:	77 40                	ja     c000b081 <File::open(FileOpenMode)+0x59>
c000b041:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b048:	85 d2                	test   edx,edx
c000b04a:	74 35                	je     c000b081 <File::open(FileOpenMode)+0x59>
c000b04c:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b052:	85 d2                	test   edx,edx
c000b054:	74 2b                	je     c000b081 <File::open(FileOpenMode)+0x59>
c000b056:	b8 06 00 00 00       	mov    eax,0x6
c000b05b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b05f:	75 20                	jne    c000b081 <File::open(FileOpenMode)+0x59>
c000b061:	8b 02                	mov    eax,DWORD PTR [edx]
c000b063:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b069:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b06d:	51                   	push   ecx
c000b06e:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b071:	51                   	push   ecx
c000b072:	52                   	push   edx
c000b073:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b076:	83 c4 10             	add    esp,0x10
c000b079:	85 c0                	test   eax,eax
c000b07b:	75 04                	jne    c000b081 <File::open(FileOpenMode)+0x59>
c000b07d:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b081:	83 c4 08             	add    esp,0x8
c000b084:	5b                   	pop    ebx
c000b085:	c3                   	ret    

c000b086 <File::close()>:
c000b086:	53                   	push   ebx
c000b087:	b8 0b 00 00 00       	mov    eax,0xb
c000b08c:	83 ec 08             	sub    esp,0x8
c000b08f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b093:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b09a:	83 f9 19             	cmp    ecx,0x19
c000b09d:	77 41                	ja     c000b0e0 <File::close()+0x5a>
c000b09f:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b0a6:	85 db                	test   ebx,ebx
c000b0a8:	74 36                	je     c000b0e0 <File::close()+0x5a>
c000b0aa:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b0b1:	74 2d                	je     c000b0e0 <File::close()+0x5a>
c000b0b3:	b8 05 00 00 00       	mov    eax,0x5
c000b0b8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b0bc:	74 22                	je     c000b0e0 <File::close()+0x5a>
c000b0be:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b0c2:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b0c9:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b0cf:	53                   	push   ebx
c000b0d0:	53                   	push   ebx
c000b0d1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b0d3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b0d9:	50                   	push   eax
c000b0da:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b0dd:	83 c4 10             	add    esp,0x10
c000b0e0:	83 c4 08             	add    esp,0x8
c000b0e3:	5b                   	pop    ebx
c000b0e4:	c3                   	ret    
c000b0e5:	90                   	nop

c000b0e6 <File::seek(unsigned long long)>:
c000b0e6:	56                   	push   esi
c000b0e7:	53                   	push   ebx
c000b0e8:	b8 0b 00 00 00       	mov    eax,0xb
c000b0ed:	51                   	push   ecx
c000b0ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b0f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b0f6:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b0fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b101:	83 fa 19             	cmp    edx,0x19
c000b104:	77 31                	ja     c000b137 <File::seek(unsigned long long)+0x51>
c000b106:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b10d:	85 d2                	test   edx,edx
c000b10f:	74 26                	je     c000b137 <File::seek(unsigned long long)+0x51>
c000b111:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b117:	85 d2                	test   edx,edx
c000b119:	74 1c                	je     c000b137 <File::seek(unsigned long long)+0x51>
c000b11b:	b8 05 00 00 00       	mov    eax,0x5
c000b120:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b124:	74 11                	je     c000b137 <File::seek(unsigned long long)+0x51>
c000b126:	8b 02                	mov    eax,DWORD PTR [edx]
c000b128:	53                   	push   ebx
c000b129:	51                   	push   ecx
c000b12a:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b130:	52                   	push   edx
c000b131:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b134:	83 c4 10             	add    esp,0x10
c000b137:	5a                   	pop    edx
c000b138:	5b                   	pop    ebx
c000b139:	5e                   	pop    esi
c000b13a:	c3                   	ret    
c000b13b:	90                   	nop

c000b13c <File::tell(unsigned long long*)>:
c000b13c:	83 ec 0c             	sub    esp,0xc
c000b13f:	b8 0b 00 00 00       	mov    eax,0xb
c000b144:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b148:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b14f:	83 fa 19             	cmp    edx,0x19
c000b152:	77 34                	ja     c000b188 <File::tell(unsigned long long*)+0x4c>
c000b154:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b15b:	85 d2                	test   edx,edx
c000b15d:	74 29                	je     c000b188 <File::tell(unsigned long long*)+0x4c>
c000b15f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b165:	85 d2                	test   edx,edx
c000b167:	74 1f                	je     c000b188 <File::tell(unsigned long long*)+0x4c>
c000b169:	b8 05 00 00 00       	mov    eax,0x5
c000b16e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b172:	74 14                	je     c000b188 <File::tell(unsigned long long*)+0x4c>
c000b174:	50                   	push   eax
c000b175:	8b 02                	mov    eax,DWORD PTR [edx]
c000b177:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b17b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b181:	52                   	push   edx
c000b182:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b185:	83 c4 10             	add    esp,0x10
c000b188:	83 c4 0c             	add    esp,0xc
c000b18b:	c3                   	ret    

c000b18c <File::rewind()>:
c000b18c:	83 ec 10             	sub    esp,0x10
c000b18f:	6a 00                	push   0x0
c000b191:	6a 00                	push   0x0
c000b193:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b197:	e8 4a ff ff ff       	call   c000b0e6 <File::seek(unsigned long long)>
c000b19c:	83 c4 1c             	add    esp,0x1c
c000b19f:	c3                   	ret    

c000b1a0 <File::unlink()>:
c000b1a0:	83 ec 0c             	sub    esp,0xc
c000b1a3:	b8 0b 00 00 00       	mov    eax,0xb
c000b1a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1ac:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1b3:	83 f9 19             	cmp    ecx,0x19
c000b1b6:	77 2f                	ja     c000b1e7 <File::unlink()+0x47>
c000b1b8:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b1bf:	85 c9                	test   ecx,ecx
c000b1c1:	74 24                	je     c000b1e7 <File::unlink()+0x47>
c000b1c3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b1c9:	85 c9                	test   ecx,ecx
c000b1cb:	74 1a                	je     c000b1e7 <File::unlink()+0x47>
c000b1cd:	b8 06 00 00 00       	mov    eax,0x6
c000b1d2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1d6:	75 0f                	jne    c000b1e7 <File::unlink()+0x47>
c000b1d8:	83 c2 0d             	add    edx,0xd
c000b1db:	50                   	push   eax
c000b1dc:	50                   	push   eax
c000b1dd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1df:	52                   	push   edx
c000b1e0:	51                   	push   ecx
c000b1e1:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b1e4:	83 c4 10             	add    esp,0x10
c000b1e7:	83 c4 0c             	add    esp,0xc
c000b1ea:	c3                   	ret    
c000b1eb:	90                   	nop

c000b1ec <File::rename(char const*)>:
c000b1ec:	83 ec 0c             	sub    esp,0xc
c000b1ef:	b8 0b 00 00 00       	mov    eax,0xb
c000b1f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1f8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1ff:	83 f9 19             	cmp    ecx,0x19
c000b202:	77 32                	ja     c000b236 <File::rename(char const*)+0x4a>
c000b204:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b20b:	85 c9                	test   ecx,ecx
c000b20d:	74 27                	je     c000b236 <File::rename(char const*)+0x4a>
c000b20f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b215:	85 c9                	test   ecx,ecx
c000b217:	74 1d                	je     c000b236 <File::rename(char const*)+0x4a>
c000b219:	b8 06 00 00 00       	mov    eax,0x6
c000b21e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b222:	75 12                	jne    c000b236 <File::rename(char const*)+0x4a>
c000b224:	83 c2 0d             	add    edx,0xd
c000b227:	50                   	push   eax
c000b228:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b22a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b22e:	52                   	push   edx
c000b22f:	51                   	push   ecx
c000b230:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b233:	83 c4 10             	add    esp,0x10
c000b236:	83 c4 0c             	add    esp,0xc
c000b239:	c3                   	ret    

c000b23a <File::chfatattr(unsigned char, unsigned char)>:
c000b23a:	57                   	push   edi
c000b23b:	b8 0b 00 00 00       	mov    eax,0xb
c000b240:	56                   	push   esi
c000b241:	53                   	push   ebx
c000b242:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b246:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b24a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b251:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b255:	83 f9 19             	cmp    ecx,0x19
c000b258:	77 37                	ja     c000b291 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b25a:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b261:	85 c9                	test   ecx,ecx
c000b263:	74 2c                	je     c000b291 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b265:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b26b:	85 c9                	test   ecx,ecx
c000b26d:	74 22                	je     c000b291 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b26f:	b8 06 00 00 00       	mov    eax,0x6
c000b274:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b278:	75 17                	jne    c000b291 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b27a:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b27c:	89 f0                	mov    eax,esi
c000b27e:	83 c2 0d             	add    edx,0xd
c000b281:	0f b6 f0             	movzx  esi,al
c000b284:	0f b6 db             	movzx  ebx,bl
c000b287:	56                   	push   esi
c000b288:	53                   	push   ebx
c000b289:	52                   	push   edx
c000b28a:	51                   	push   ecx
c000b28b:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b28e:	83 c4 10             	add    esp,0x10
c000b291:	5b                   	pop    ebx
c000b292:	5e                   	pop    esi
c000b293:	5f                   	pop    edi
c000b294:	c3                   	ret    
c000b295:	90                   	nop

c000b296 <File::exists()>:
c000b296:	83 ec 0c             	sub    esp,0xc
c000b299:	31 c0                	xor    eax,eax
c000b29b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b29f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2a6:	83 f9 19             	cmp    ecx,0x19
c000b2a9:	77 24                	ja     c000b2cf <File::exists()+0x39>
c000b2ab:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b2b2:	85 c9                	test   ecx,ecx
c000b2b4:	74 19                	je     c000b2cf <File::exists()+0x39>
c000b2b6:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b2bc:	85 c9                	test   ecx,ecx
c000b2be:	74 0f                	je     c000b2cf <File::exists()+0x39>
c000b2c0:	83 c2 0d             	add    edx,0xd
c000b2c3:	50                   	push   eax
c000b2c4:	50                   	push   eax
c000b2c5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2c7:	52                   	push   edx
c000b2c8:	51                   	push   ecx
c000b2c9:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b2cc:	83 c4 10             	add    esp,0x10
c000b2cf:	83 c4 0c             	add    esp,0xc
c000b2d2:	c3                   	ret    
c000b2d3:	90                   	nop

c000b2d4 <File::stat(unsigned long long*, bool*)>:
c000b2d4:	56                   	push   esi
c000b2d5:	53                   	push   ebx
c000b2d6:	50                   	push   eax
c000b2d7:	b8 0b 00 00 00       	mov    eax,0xb
c000b2dc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2e0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b2e4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2eb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b2ef:	83 f9 19             	cmp    ecx,0x19
c000b2f2:	77 3d                	ja     c000b331 <File::stat(unsigned long long*, bool*)+0x5d>
c000b2f4:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b2fb:	85 c9                	test   ecx,ecx
c000b2fd:	74 32                	je     c000b331 <File::stat(unsigned long long*, bool*)+0x5d>
c000b2ff:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b305:	85 c9                	test   ecx,ecx
c000b307:	74 28                	je     c000b331 <File::stat(unsigned long long*, bool*)+0x5d>
c000b309:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b30b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b30f:	74 13                	je     c000b324 <File::stat(unsigned long long*, bool*)+0x50>
c000b311:	83 ec 04             	sub    esp,0x4
c000b314:	56                   	push   esi
c000b315:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b31b:	51                   	push   ecx
c000b31c:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b31f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b322:	eb 0a                	jmp    c000b32e <File::stat(unsigned long long*, bool*)+0x5a>
c000b324:	53                   	push   ebx
c000b325:	83 c2 0d             	add    edx,0xd
c000b328:	56                   	push   esi
c000b329:	52                   	push   edx
c000b32a:	51                   	push   ecx
c000b32b:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b32e:	83 c4 10             	add    esp,0x10
c000b331:	5a                   	pop    edx
c000b332:	5b                   	pop    ebx
c000b333:	5e                   	pop    esi
c000b334:	c3                   	ret    

c000b335 <Fs::setcwd(Process*, char*)>:
c000b335:	55                   	push   ebp
c000b336:	57                   	push   edi
c000b337:	56                   	push   esi
c000b338:	53                   	push   ebx
c000b339:	81 ec 20 02 00 00    	sub    esp,0x220
c000b33f:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b346:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b34c:	57                   	push   edi
c000b34d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b354:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b358:	56                   	push   esi
c000b359:	e8 58 fa ff ff       	call   c000adb6 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b35e:	89 34 24             	mov    DWORD PTR [esp],esi
c000b361:	e8 0a 52 ff ff       	call   c0000570 <strlen>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	83 f8 02             	cmp    eax,0x2
c000b36c:	77 15                	ja     c000b383 <Fs::setcwd(Process*, char*)+0x4e>
c000b36e:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b373:	83 eb 41             	sub    ebx,0x41
c000b376:	8b 04 9d 20 74 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8be0]
c000b37d:	85 c0                	test   eax,eax
c000b37f:	75 1c                	jne    c000b39d <Fs::setcwd(Process*, char*)+0x68>
c000b381:	eb 2f                	jmp    c000b3b2 <Fs::setcwd(Process*, char*)+0x7d>
c000b383:	83 ec 0c             	sub    esp,0xc
c000b386:	56                   	push   esi
c000b387:	e8 e4 51 ff ff       	call   c0000570 <strlen>
c000b38c:	83 c4 10             	add    esp,0x10
c000b38f:	83 f8 03             	cmp    eax,0x3
c000b392:	75 57                	jne    c000b3eb <Fs::setcwd(Process*, char*)+0xb6>
c000b394:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b399:	75 50                	jne    c000b3eb <Fs::setcwd(Process*, char*)+0xb6>
c000b39b:	eb d1                	jmp    c000b36e <Fs::setcwd(Process*, char*)+0x39>
c000b39d:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000b3a4:	75 0c                	jne    c000b3b2 <Fs::setcwd(Process*, char*)+0x7d>
c000b3a6:	83 ec 0c             	sub    esp,0xc
c000b3a9:	50                   	push   eax
c000b3aa:	e8 8f 1d 00 00       	call   c000d13e <LogicalDisk::mount()>
c000b3af:	83 c4 10             	add    esp,0x10
c000b3b2:	b8 03 00 00 00       	mov    eax,0x3
c000b3b7:	83 fb 19             	cmp    ebx,0x19
c000b3ba:	0f 87 c6 00 00 00    	ja     c000b486 <Fs::setcwd(Process*, char*)+0x151>
c000b3c0:	8b 14 9d 20 74 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd8be0]
c000b3c7:	b8 05 00 00 00       	mov    eax,0x5
c000b3cc:	85 d2                	test   edx,edx
c000b3ce:	0f 84 b2 00 00 00    	je     c000b486 <Fs::setcwd(Process*, char*)+0x151>
c000b3d4:	b8 06 00 00 00       	mov    eax,0x6
c000b3d9:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b3e0:	0f 85 92 00 00 00    	jne    c000b478 <Fs::setcwd(Process*, char*)+0x143>
c000b3e6:	e9 9b 00 00 00       	jmp    c000b486 <Fs::setcwd(Process*, char*)+0x151>
c000b3eb:	83 ec 0c             	sub    esp,0xc
c000b3ee:	68 14 01 00 00       	push   0x114
c000b3f3:	e8 b6 c6 ff ff       	call   c0007aae <malloc>
c000b3f8:	83 c4 0c             	add    esp,0xc
c000b3fb:	89 c3                	mov    ebx,eax
c000b3fd:	55                   	push   ebp
c000b3fe:	56                   	push   esi
c000b3ff:	50                   	push   eax
c000b400:	e8 67 fb ff ff       	call   c000af6c <File::File(char const*, Process*)>
c000b405:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b40a:	83 c4 0c             	add    esp,0xc
c000b40d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b411:	50                   	push   eax
c000b412:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b416:	50                   	push   eax
c000b417:	53                   	push   ebx
c000b418:	e8 b7 fe ff ff       	call   c000b2d4 <File::stat(unsigned long long*, bool*)>
c000b41d:	83 c4 10             	add    esp,0x10
c000b420:	83 f8 02             	cmp    eax,0x2
c000b423:	74 27                	je     c000b44c <Fs::setcwd(Process*, char*)+0x117>
c000b425:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b42a:	75 1c                	jne    c000b448 <Fs::setcwd(Process*, char*)+0x113>
c000b42c:	b8 02 00 00 00       	mov    eax,0x2
c000b431:	85 db                	test   ebx,ebx
c000b433:	74 51                	je     c000b486 <Fs::setcwd(Process*, char*)+0x151>
c000b435:	83 ec 0c             	sub    esp,0xc
c000b438:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b43a:	53                   	push   ebx
c000b43b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	b8 02 00 00 00       	mov    eax,0x2
c000b446:	eb 3e                	jmp    c000b486 <Fs::setcwd(Process*, char*)+0x151>
c000b448:	85 c0                	test   eax,eax
c000b44a:	74 1c                	je     c000b468 <Fs::setcwd(Process*, char*)+0x133>
c000b44c:	b8 01 00 00 00       	mov    eax,0x1
c000b451:	85 db                	test   ebx,ebx
c000b453:	74 31                	je     c000b486 <Fs::setcwd(Process*, char*)+0x151>
c000b455:	83 ec 0c             	sub    esp,0xc
c000b458:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b45a:	53                   	push   ebx
c000b45b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b45e:	83 c4 10             	add    esp,0x10
c000b461:	b8 01 00 00 00       	mov    eax,0x1
c000b466:	eb 1e                	jmp    c000b486 <Fs::setcwd(Process*, char*)+0x151>
c000b468:	85 db                	test   ebx,ebx
c000b46a:	74 0c                	je     c000b478 <Fs::setcwd(Process*, char*)+0x143>
c000b46c:	83 ec 0c             	sub    esp,0xc
c000b46f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b471:	53                   	push   ebx
c000b472:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b475:	83 c4 10             	add    esp,0x10
c000b478:	50                   	push   eax
c000b479:	50                   	push   eax
c000b47a:	56                   	push   esi
c000b47b:	57                   	push   edi
c000b47c:	e8 bf 51 ff ff       	call   c0000640 <strcpy>
c000b481:	83 c4 10             	add    esp,0x10
c000b484:	31 c0                	xor    eax,eax
c000b486:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b48c:	5b                   	pop    ebx
c000b48d:	5e                   	pop    esi
c000b48e:	5f                   	pop    edi
c000b48f:	5d                   	pop    ebp
c000b490:	c3                   	ret    
c000b491:	90                   	nop

c000b492 <Directory::Directory(char const*, Process*)>:
c000b492:	83 ec 0c             	sub    esp,0xc
c000b495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b499:	83 ec 08             	sub    esp,0x8
c000b49c:	6a 00                	push   0x0
c000b49e:	50                   	push   eax
c000b49f:	e8 2a dd ff ff       	call   c00091ce <UnixFile::UnixFile(int)>
c000b4a4:	83 c4 10             	add    esp,0x10
c000b4a7:	ba 7c 03 02 c0       	mov    edx,0xc002037c
c000b4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4b0:	89 10                	mov    DWORD PTR [eax],edx
c000b4b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b4b6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b4bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c0:	83 c0 0d             	add    eax,0xd
c000b4c3:	83 ec 04             	sub    esp,0x4
c000b4c6:	52                   	push   edx
c000b4c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4cb:	50                   	push   eax
c000b4cc:	e8 e5 f8 ff ff       	call   c000adb6 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b4d1:	83 c4 10             	add    esp,0x10
c000b4d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4d8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b4db:	83 e8 41             	sub    eax,0x41
c000b4de:	88 c2                	mov    dl,al
c000b4e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4e4:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b4ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4ee:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b4f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4f6:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b4fc:	0f b6 c0             	movzx  eax,al
c000b4ff:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b506:	85 c0                	test   eax,eax
c000b508:	74 3e                	je     c000b548 <Directory::Directory(char const*, Process*)+0xb6>
c000b50a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b50e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b514:	0f b6 c0             	movzx  eax,al
c000b517:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b51e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b524:	85 c0                	test   eax,eax
c000b526:	75 20                	jne    c000b548 <Directory::Directory(char const*, Process*)+0xb6>
c000b528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b52c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b532:	0f b6 c0             	movzx  eax,al
c000b535:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b53c:	83 ec 0c             	sub    esp,0xc
c000b53f:	50                   	push   eax
c000b540:	e8 f9 1b 00 00       	call   c000d13e <LogicalDisk::mount()>
c000b545:	83 c4 10             	add    esp,0x10
c000b548:	90                   	nop
c000b549:	83 c4 0c             	add    esp,0xc
c000b54c:	c3                   	ret    
c000b54d:	90                   	nop

c000b54e <Directory::open()>:
c000b54e:	53                   	push   ebx
c000b54f:	b8 0b 00 00 00       	mov    eax,0xb
c000b554:	83 ec 08             	sub    esp,0x8
c000b557:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b55b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b562:	83 fa 19             	cmp    edx,0x19
c000b565:	77 3d                	ja     c000b5a4 <Directory::open()+0x56>
c000b567:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b56e:	85 d2                	test   edx,edx
c000b570:	74 32                	je     c000b5a4 <Directory::open()+0x56>
c000b572:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b578:	85 d2                	test   edx,edx
c000b57a:	74 28                	je     c000b5a4 <Directory::open()+0x56>
c000b57c:	b8 06 00 00 00       	mov    eax,0x6
c000b581:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b585:	75 1d                	jne    c000b5a4 <Directory::open()+0x56>
c000b587:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b58d:	50                   	push   eax
c000b58e:	8b 02                	mov    eax,DWORD PTR [edx]
c000b590:	51                   	push   ecx
c000b591:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b594:	51                   	push   ecx
c000b595:	52                   	push   edx
c000b596:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b599:	83 c4 10             	add    esp,0x10
c000b59c:	85 c0                	test   eax,eax
c000b59e:	75 04                	jne    c000b5a4 <Directory::open()+0x56>
c000b5a0:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b5a4:	83 c4 08             	add    esp,0x8
c000b5a7:	5b                   	pop    ebx
c000b5a8:	c3                   	ret    
c000b5a9:	90                   	nop

c000b5aa <Directory::close()>:
c000b5aa:	53                   	push   ebx
c000b5ab:	b8 0b 00 00 00       	mov    eax,0xb
c000b5b0:	83 ec 08             	sub    esp,0x8
c000b5b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b5b7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b5be:	83 f9 19             	cmp    ecx,0x19
c000b5c1:	77 41                	ja     c000b604 <Directory::close()+0x5a>
c000b5c3:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b5ca:	85 db                	test   ebx,ebx
c000b5cc:	74 36                	je     c000b604 <Directory::close()+0x5a>
c000b5ce:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b5d5:	74 2d                	je     c000b604 <Directory::close()+0x5a>
c000b5d7:	b8 05 00 00 00       	mov    eax,0x5
c000b5dc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5e0:	74 22                	je     c000b604 <Directory::close()+0x5a>
c000b5e2:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b5e6:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b5ed:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b5f3:	53                   	push   ebx
c000b5f4:	53                   	push   ebx
c000b5f5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b5f7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b5fd:	50                   	push   eax
c000b5fe:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000b601:	83 c4 10             	add    esp,0x10
c000b604:	83 c4 08             	add    esp,0x8
c000b607:	5b                   	pop    ebx
c000b608:	c3                   	ret    
c000b609:	90                   	nop

c000b60a <Directory::unlink()>:
c000b60a:	83 ec 0c             	sub    esp,0xc
c000b60d:	b8 0b 00 00 00       	mov    eax,0xb
c000b612:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b616:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b61d:	83 f9 19             	cmp    ecx,0x19
c000b620:	77 2f                	ja     c000b651 <Directory::unlink()+0x47>
c000b622:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b629:	85 c9                	test   ecx,ecx
c000b62b:	74 24                	je     c000b651 <Directory::unlink()+0x47>
c000b62d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b633:	85 c9                	test   ecx,ecx
c000b635:	74 1a                	je     c000b651 <Directory::unlink()+0x47>
c000b637:	b8 06 00 00 00       	mov    eax,0x6
c000b63c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b640:	75 0f                	jne    c000b651 <Directory::unlink()+0x47>
c000b642:	83 c2 0d             	add    edx,0xd
c000b645:	50                   	push   eax
c000b646:	50                   	push   eax
c000b647:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b649:	52                   	push   edx
c000b64a:	51                   	push   ecx
c000b64b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b64e:	83 c4 10             	add    esp,0x10
c000b651:	83 c4 0c             	add    esp,0xc
c000b654:	c3                   	ret    
c000b655:	90                   	nop

c000b656 <Directory::rename(char const*)>:
c000b656:	83 ec 0c             	sub    esp,0xc
c000b659:	b8 0b 00 00 00       	mov    eax,0xb
c000b65e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b662:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b669:	83 f9 19             	cmp    ecx,0x19
c000b66c:	77 32                	ja     c000b6a0 <Directory::rename(char const*)+0x4a>
c000b66e:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b675:	85 c9                	test   ecx,ecx
c000b677:	74 27                	je     c000b6a0 <Directory::rename(char const*)+0x4a>
c000b679:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b67f:	85 c9                	test   ecx,ecx
c000b681:	74 1d                	je     c000b6a0 <Directory::rename(char const*)+0x4a>
c000b683:	b8 06 00 00 00       	mov    eax,0x6
c000b688:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b68c:	75 12                	jne    c000b6a0 <Directory::rename(char const*)+0x4a>
c000b68e:	83 c2 0d             	add    edx,0xd
c000b691:	50                   	push   eax
c000b692:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b694:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b698:	52                   	push   edx
c000b699:	51                   	push   ecx
c000b69a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b69d:	83 c4 10             	add    esp,0x10
c000b6a0:	83 c4 0c             	add    esp,0xc
c000b6a3:	c3                   	ret    

c000b6a4 <Directory::exists()>:
c000b6a4:	83 ec 0c             	sub    esp,0xc
c000b6a7:	31 c0                	xor    eax,eax
c000b6a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b6ad:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b6b4:	83 f9 19             	cmp    ecx,0x19
c000b6b7:	77 24                	ja     c000b6dd <Directory::exists()+0x39>
c000b6b9:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b6c0:	85 c9                	test   ecx,ecx
c000b6c2:	74 19                	je     c000b6dd <Directory::exists()+0x39>
c000b6c4:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b6ca:	85 c9                	test   ecx,ecx
c000b6cc:	74 0f                	je     c000b6dd <Directory::exists()+0x39>
c000b6ce:	83 c2 0d             	add    edx,0xd
c000b6d1:	50                   	push   eax
c000b6d2:	50                   	push   eax
c000b6d3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b6d5:	52                   	push   edx
c000b6d6:	51                   	push   ecx
c000b6d7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b6da:	83 c4 10             	add    esp,0x10
c000b6dd:	83 c4 0c             	add    esp,0xc
c000b6e0:	c3                   	ret    
c000b6e1:	90                   	nop

c000b6e2 <Directory::read(dirent*)>:
c000b6e2:	83 ec 1c             	sub    esp,0x1c
c000b6e5:	b8 0b 00 00 00       	mov    eax,0xb
c000b6ea:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b6ee:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b6f5:	83 f9 19             	cmp    ecx,0x19
c000b6f8:	77 30                	ja     c000b72a <Directory::read(dirent*)+0x48>
c000b6fa:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b701:	85 c9                	test   ecx,ecx
c000b703:	74 25                	je     c000b72a <Directory::read(dirent*)+0x48>
c000b705:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000b70c:	74 1c                	je     c000b72a <Directory::read(dirent*)+0x48>
c000b70e:	83 ec 0c             	sub    esp,0xc
c000b711:	8b 02                	mov    eax,DWORD PTR [edx]
c000b713:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000b717:	51                   	push   ecx
c000b718:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b71c:	6a 00                	push   0x0
c000b71e:	68 10 01 00 00       	push   0x110
c000b723:	52                   	push   edx
c000b724:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b727:	83 c4 20             	add    esp,0x20
c000b72a:	83 c4 1c             	add    esp,0x1c
c000b72d:	c3                   	ret    

c000b72e <Directory::create()>:
c000b72e:	83 ec 0c             	sub    esp,0xc
c000b731:	b8 0b 00 00 00       	mov    eax,0xb
c000b736:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b73a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b741:	83 f9 19             	cmp    ecx,0x19
c000b744:	77 2f                	ja     c000b775 <Directory::create()+0x47>
c000b746:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b74d:	85 c9                	test   ecx,ecx
c000b74f:	74 24                	je     c000b775 <Directory::create()+0x47>
c000b751:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b757:	85 c9                	test   ecx,ecx
c000b759:	74 1a                	je     c000b775 <Directory::create()+0x47>
c000b75b:	b8 06 00 00 00       	mov    eax,0x6
c000b760:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b764:	75 0f                	jne    c000b775 <Directory::create()+0x47>
c000b766:	83 c2 0d             	add    edx,0xd
c000b769:	50                   	push   eax
c000b76a:	50                   	push   eax
c000b76b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b76d:	52                   	push   edx
c000b76e:	51                   	push   ecx
c000b76f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b772:	83 c4 10             	add    esp,0x10
c000b775:	83 c4 0c             	add    esp,0xc
c000b778:	c3                   	ret    
c000b779:	90                   	nop

c000b77a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b77a:	b8 0a 00 00 00       	mov    eax,0xa
c000b77f:	c3                   	ret    

c000b780 <Bus::Bus(char const*)>:
c000b780:	83 ec 0c             	sub    esp,0xc
c000b783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b787:	83 ec 08             	sub    esp,0x8
c000b78a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b78e:	50                   	push   eax
c000b78f:	e8 22 08 00 00       	call   c000bfb6 <Device::Device(char const*)>
c000b794:	83 c4 10             	add    esp,0x10
c000b797:	ba 98 03 02 c0       	mov    edx,0xc0020398
c000b79c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7a0:	89 10                	mov    DWORD PTR [eax],edx
c000b7a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7a6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b7b0:	90                   	nop
c000b7b1:	83 c4 0c             	add    esp,0xc
c000b7b4:	c3                   	ret    
c000b7b5:	90                   	nop
c000b7b6:	66 90                	xchg   ax,ax

c000b7b8 <Bus::~Bus()>:
c000b7b8:	83 ec 0c             	sub    esp,0xc
c000b7bb:	ba 98 03 02 c0       	mov    edx,0xc0020398
c000b7c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7c4:	89 10                	mov    DWORD PTR [eax],edx
c000b7c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7ca:	83 ec 0c             	sub    esp,0xc
c000b7cd:	50                   	push   eax
c000b7ce:	e8 4d 05 00 00       	call   c000bd20 <Device::~Device()>
c000b7d3:	83 c4 10             	add    esp,0x10
c000b7d6:	90                   	nop
c000b7d7:	83 c4 0c             	add    esp,0xc
c000b7da:	c3                   	ret    
c000b7db:	90                   	nop

c000b7dc <Bus::~Bus()>:
c000b7dc:	83 ec 0c             	sub    esp,0xc
c000b7df:	83 ec 0c             	sub    esp,0xc
c000b7e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7e6:	e8 cd ff ff ff       	call   c000b7b8 <Bus::~Bus()>
c000b7eb:	83 c4 10             	add    esp,0x10
c000b7ee:	83 ec 08             	sub    esp,0x8
c000b7f1:	68 58 01 00 00       	push   0x158
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	e8 be f0 ff ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c000b7ff:	83 c4 10             	add    esp,0x10
c000b802:	83 c4 0c             	add    esp,0xc
c000b805:	c3                   	ret    

c000b806 <beepThread(void*)>:
c000b806:	83 ec 0c             	sub    esp,0xc
c000b809:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000b80e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b812:	48                   	dec    eax
c000b813:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000b818:	75 01                	jne    c000b81b <beepThread(void*)+0x15>
c000b81a:	fb                   	sti    
c000b81b:	83 ec 0c             	sub    esp,0xc
c000b81e:	6b c2 0a             	imul   eax,edx,0xa
c000b821:	50                   	push   eax
c000b822:	e8 d5 9b 00 00       	call   c00153fc <milliTenthSleep(unsigned int)>
c000b827:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b82e:	e8 b4 ba 00 00       	call   c00172e7 <HalMakeBeep(int)>
c000b833:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b83b:	83 c4 1c             	add    esp,0x1c
c000b83e:	e9 9d 9a 00 00       	jmp    c00152e0 <blockTask(TaskState)>

c000b843 <Krnl::beep(int, int, bool)>:
c000b843:	56                   	push   esi
c000b844:	53                   	push   ebx
c000b845:	83 ec 10             	sub    esp,0x10
c000b848:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b84c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b854:	e8 8e ba 00 00       	call   c00172e7 <HalMakeBeep(int)>
c000b859:	83 c4 10             	add    esp,0x10
c000b85c:	89 f0                	mov    eax,esi
c000b85e:	84 c0                	test   al,al
c000b860:	74 1e                	je     c000b880 <Krnl::beep(int, int, bool)+0x3d>
c000b862:	83 ec 0c             	sub    esp,0xc
c000b865:	6b db 0a             	imul   ebx,ebx,0xa
c000b868:	53                   	push   ebx
c000b869:	e8 8e 9b 00 00       	call   c00153fc <milliTenthSleep(unsigned int)>
c000b86e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b876:	83 c4 14             	add    esp,0x14
c000b879:	5b                   	pop    ebx
c000b87a:	5e                   	pop    esi
c000b87b:	e9 67 ba 00 00       	jmp    c00172e7 <HalMakeBeep(int)>
c000b880:	68 e6 00 00 00       	push   0xe6
c000b885:	53                   	push   ebx
c000b886:	68 06 b8 00 c0       	push   0xc000b806
c000b88b:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b891:	e8 e6 95 00 00       	call   c0014e7c <Process::createThread(void (*)(void*), void*, int)>
c000b896:	83 c4 14             	add    esp,0x14
c000b899:	5b                   	pop    ebx
c000b89a:	5e                   	pop    esi
c000b89b:	c3                   	ret    

c000b89c <User::loadClockSettings(int)>:
c000b89c:	53                   	push   ebx
c000b89d:	83 ec 14             	sub    esp,0x14
c000b8a0:	68 14 01 00 00       	push   0x114
c000b8a5:	e8 04 c2 ff ff       	call   c0007aae <malloc>
c000b8aa:	83 c4 0c             	add    esp,0xc
c000b8ad:	89 c3                	mov    ebx,eax
c000b8af:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b8b5:	68 bc 03 02 c0       	push   0xc00203bc
c000b8ba:	50                   	push   eax
c000b8bb:	e8 ac f6 ff ff       	call   c000af6c <File::File(char const*, Process*)>
c000b8c0:	58                   	pop    eax
c000b8c1:	5a                   	pop    edx
c000b8c2:	6a 01                	push   0x1
c000b8c4:	53                   	push   ebx
c000b8c5:	e8 5e f7 ff ff       	call   c000b028 <File::open(FileOpenMode)>
c000b8ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b8cd:	e8 b4 f7 ff ff       	call   c000b086 <File::close()>
c000b8d2:	83 c4 10             	add    esp,0x10
c000b8d5:	85 db                	test   ebx,ebx
c000b8d7:	74 0f                	je     c000b8e8 <User::loadClockSettings(int)+0x4c>
c000b8d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b8db:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b8df:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b8e2:	83 c4 08             	add    esp,0x8
c000b8e5:	5b                   	pop    ebx
c000b8e6:	ff e0                	jmp    eax
c000b8e8:	83 c4 08             	add    esp,0x8
c000b8eb:	5b                   	pop    ebx
c000b8ec:	c3                   	ret    
c000b8ed:	90                   	nop

c000b8ee <Clock::Clock(char const*)>:
c000b8ee:	83 ec 0c             	sub    esp,0xc
c000b8f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8f5:	83 ec 08             	sub    esp,0x8
c000b8f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8fc:	50                   	push   eax
c000b8fd:	e8 b4 06 00 00       	call   c000bfb6 <Device::Device(char const*)>
c000b902:	83 c4 10             	add    esp,0x10
c000b905:	ba e4 03 02 c0       	mov    edx,0xc00203e4
c000b90a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b90e:	89 10                	mov    DWORD PTR [eax],edx
c000b910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b914:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b91e:	90                   	nop
c000b91f:	83 c4 0c             	add    esp,0xc
c000b922:	c3                   	ret    
c000b923:	90                   	nop

c000b924 <Clock::~Clock()>:
c000b924:	83 ec 0c             	sub    esp,0xc
c000b927:	ba e4 03 02 c0       	mov    edx,0xc00203e4
c000b92c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b930:	89 10                	mov    DWORD PTR [eax],edx
c000b932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b936:	83 ec 0c             	sub    esp,0xc
c000b939:	50                   	push   eax
c000b93a:	e8 e1 03 00 00       	call   c000bd20 <Device::~Device()>
c000b93f:	83 c4 10             	add    esp,0x10
c000b942:	90                   	nop
c000b943:	83 c4 0c             	add    esp,0xc
c000b946:	c3                   	ret    
c000b947:	90                   	nop

c000b948 <Clock::~Clock()>:
c000b948:	83 ec 0c             	sub    esp,0xc
c000b94b:	83 ec 0c             	sub    esp,0xc
c000b94e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b952:	e8 cd ff ff ff       	call   c000b924 <Clock::~Clock()>
c000b957:	83 c4 10             	add    esp,0x10
c000b95a:	83 ec 08             	sub    esp,0x8
c000b95d:	68 58 01 00 00       	push   0x158
c000b962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b966:	e8 52 ef ff ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c000b96b:	83 c4 10             	add    esp,0x10
c000b96e:	83 c4 0c             	add    esp,0xc
c000b971:	c3                   	ret    

c000b972 <Clock::timeInSecondsLocal()>:
c000b972:	53                   	push   ebx
c000b973:	83 ec 14             	sub    esp,0x14
c000b976:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b97a:	8b 10                	mov    edx,DWORD PTR [eax]
c000b97c:	50                   	push   eax
c000b97d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b980:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000b987:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000b98d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b993:	89 cb                	mov    ebx,ecx
c000b995:	c1 fb 1f             	sar    ebx,0x1f
c000b998:	01 c8                	add    eax,ecx
c000b99a:	11 da                	adc    edx,ebx
c000b99c:	83 c4 10             	add    esp,0x10
c000b99f:	31 c9                	xor    ecx,ecx
c000b9a1:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b9a8:	74 05                	je     c000b9af <Clock::timeInSecondsLocal()+0x3d>
c000b9aa:	b9 08 07 00 00       	mov    ecx,0x708
c000b9af:	31 db                	xor    ebx,ebx
c000b9b1:	01 c8                	add    eax,ecx
c000b9b3:	11 da                	adc    edx,ebx
c000b9b5:	83 c4 08             	add    esp,0x8
c000b9b8:	5b                   	pop    ebx
c000b9b9:	c3                   	ret    

c000b9ba <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b9ba:	57                   	push   edi
c000b9bb:	56                   	push   esi
c000b9bc:	53                   	push   ebx
c000b9bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b9c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b9c5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b9c7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b9cb:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b9ce:	0f b6 05 b8 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024fb8
c000b9d5:	03 05 bc 4f 02 c0    	add    eax,DWORD PTR ds:0xc0024fbc
c000b9db:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b9e1:	99                   	cdq    
c000b9e2:	29 c6                	sub    esi,eax
c000b9e4:	19 d7                	sbb    edi,edx
c000b9e6:	89 f0                	mov    eax,esi
c000b9e8:	89 fa                	mov    edx,edi
c000b9ea:	31 f6                	xor    esi,esi
c000b9ec:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b9f3:	74 05                	je     c000b9fa <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b9f5:	be 08 07 00 00       	mov    esi,0x708
c000b9fa:	31 ff                	xor    edi,edi
c000b9fc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000ba00:	29 f0                	sub    eax,esi
c000ba02:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ba06:	19 fa                	sbb    edx,edi
c000ba08:	89 d8                	mov    eax,ebx
c000ba0a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ba0e:	5b                   	pop    ebx
c000ba0f:	5e                   	pop    esi
c000ba10:	5f                   	pop    edi
c000ba11:	ff e0                	jmp    eax

c000ba13 <datetimeToSeconds(datetime_t)>:
c000ba13:	55                   	push   ebp
c000ba14:	57                   	push   edi
c000ba15:	56                   	push   esi
c000ba16:	53                   	push   ebx
c000ba17:	83 ec 0c             	sub    esp,0xc
c000ba1a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ba1e:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000ba22:	89 d6                	mov    esi,edx
c000ba24:	0f b6 c7             	movzx  eax,bh
c000ba27:	c1 ee 10             	shr    esi,0x10
c000ba2a:	6b e8 3c             	imul   ebp,eax,0x3c
c000ba2d:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000ba33:	0f b6 ce             	movzx  ecx,dh
c000ba36:	89 df                	mov    edi,ebx
c000ba38:	49                   	dec    ecx
c000ba39:	c1 ef 10             	shr    edi,0x10
c000ba3c:	0f b6 db             	movzx  ebx,bl
c000ba3f:	89 f8                	mov    eax,edi
c000ba41:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000ba47:	0f b6 f8             	movzx  edi,al
c000ba4a:	0f b6 d2             	movzx  edx,dl
c000ba4d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000ba51:	01 d8                	add    eax,ebx
c000ba53:	0f b7 de             	movzx  ebx,si
c000ba56:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba59:	c1 f8 1f             	sar    eax,0x1f
c000ba5c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ba60:	0f b6 c1             	movzx  eax,cl
c000ba63:	8b 0c 85 20 04 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdfbe0]
c000ba6a:	83 f8 01             	cmp    eax,0x1
c000ba6d:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000ba71:	76 27                	jbe    c000ba9a <datetimeToSeconds(datetime_t)+0x87>
c000ba73:	83 e6 03             	and    esi,0x3
c000ba76:	75 22                	jne    c000ba9a <datetimeToSeconds(datetime_t)+0x87>
c000ba78:	31 d2                	xor    edx,edx
c000ba7a:	be 64 00 00 00       	mov    esi,0x64
c000ba7f:	89 d8                	mov    eax,ebx
c000ba81:	f7 f6                	div    esi
c000ba83:	85 d2                	test   edx,edx
c000ba85:	75 12                	jne    c000ba99 <datetimeToSeconds(datetime_t)+0x86>
c000ba87:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000ba8d:	be 90 01 00 00       	mov    esi,0x190
c000ba92:	99                   	cdq    
c000ba93:	f7 fe                	idiv   esi
c000ba95:	85 d2                	test   edx,edx
c000ba97:	75 01                	jne    c000ba9a <datetimeToSeconds(datetime_t)+0x87>
c000ba99:	41                   	inc    ecx
c000ba9a:	83 fb 46             	cmp    ebx,0x46
c000ba9d:	76 48                	jbe    c000bae7 <datetimeToSeconds(datetime_t)+0xd4>
c000ba9f:	be 46 00 00 00       	mov    esi,0x46
c000baa4:	bf 64 00 00 00       	mov    edi,0x64
c000baa9:	bd 90 01 00 00       	mov    ebp,0x190
c000baae:	b8 6d 01 00 00       	mov    eax,0x16d
c000bab3:	f7 c6 03 00 00 00    	test   esi,0x3
c000bab9:	75 23                	jne    c000bade <datetimeToSeconds(datetime_t)+0xcb>
c000babb:	89 f0                	mov    eax,esi
c000babd:	99                   	cdq    
c000babe:	f7 ff                	idiv   edi
c000bac0:	b8 6e 01 00 00       	mov    eax,0x16e
c000bac5:	85 d2                	test   edx,edx
c000bac7:	75 15                	jne    c000bade <datetimeToSeconds(datetime_t)+0xcb>
c000bac9:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000bacf:	99                   	cdq    
c000bad0:	f7 fd                	idiv   ebp
c000bad2:	83 fa 01             	cmp    edx,0x1
c000bad5:	19 c0                	sbb    eax,eax
c000bad7:	f7 d0                	not    eax
c000bad9:	05 6e 01 00 00       	add    eax,0x16e
c000bade:	01 c1                	add    ecx,eax
c000bae0:	46                   	inc    esi
c000bae1:	39 de                	cmp    esi,ebx
c000bae3:	7c c9                	jl     c000baae <datetimeToSeconds(datetime_t)+0x9b>
c000bae5:	eb 34                	jmp    c000bb1b <datetimeToSeconds(datetime_t)+0x108>
c000bae7:	74 32                	je     c000bb1b <datetimeToSeconds(datetime_t)+0x108>
c000bae9:	b8 45 00 00 00       	mov    eax,0x45
c000baee:	89 c2                	mov    edx,eax
c000baf0:	83 e2 03             	and    edx,0x3
c000baf3:	39 d8                	cmp    eax,ebx
c000baf5:	7e 0f                	jle    c000bb06 <datetimeToSeconds(datetime_t)+0xf3>
c000baf7:	83 fa 01             	cmp    edx,0x1
c000bafa:	19 d2                	sbb    edx,edx
c000bafc:	48                   	dec    eax
c000bafd:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000bb04:	eb e8                	jmp    c000baee <datetimeToSeconds(datetime_t)+0xdb>
c000bb06:	b8 6d 01 00 00       	mov    eax,0x16d
c000bb0b:	85 d2                	test   edx,edx
c000bb0d:	75 0a                	jne    c000bb19 <datetimeToSeconds(datetime_t)+0x106>
c000bb0f:	83 fb 01             	cmp    ebx,0x1
c000bb12:	19 c0                	sbb    eax,eax
c000bb14:	05 6e 01 00 00       	add    eax,0x16e
c000bb19:	29 c1                	sub    ecx,eax
c000bb1b:	b8 80 51 01 00       	mov    eax,0x15180
c000bb20:	f7 e9                	imul   ecx
c000bb22:	03 04 24             	add    eax,DWORD PTR [esp]
c000bb25:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000bb29:	83 c4 0c             	add    esp,0xc
c000bb2c:	5b                   	pop    ebx
c000bb2d:	5e                   	pop    esi
c000bb2e:	5f                   	pop    edi
c000bb2f:	5d                   	pop    ebp
c000bb30:	c3                   	ret    
c000bb31:	90                   	nop

c000bb32 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bb32:	57                   	push   edi
c000bb33:	56                   	push   esi
c000bb34:	53                   	push   ebx
c000bb35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bb39:	8b 06                	mov    eax,DWORD PTR [esi]
c000bb3b:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000bb3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb46:	e8 c8 fe ff ff       	call   c000ba13 <datetimeToSeconds(datetime_t)>
c000bb4b:	59                   	pop    ecx
c000bb4c:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000bb53:	5b                   	pop    ebx
c000bb54:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000bb5a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bb60:	89 cb                	mov    ebx,ecx
c000bb62:	c1 fb 1f             	sar    ebx,0x1f
c000bb65:	29 c8                	sub    eax,ecx
c000bb67:	19 da                	sbb    edx,ebx
c000bb69:	31 c9                	xor    ecx,ecx
c000bb6b:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000bb72:	74 05                	je     c000bb79 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bb74:	b9 08 07 00 00       	mov    ecx,0x708
c000bb79:	31 db                	xor    ebx,ebx
c000bb7b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bb7f:	29 c8                	sub    eax,ecx
c000bb81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb85:	19 da                	sbb    edx,ebx
c000bb87:	89 f8                	mov    eax,edi
c000bb89:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb8d:	5b                   	pop    ebx
c000bb8e:	5e                   	pop    esi
c000bb8f:	5f                   	pop    edi
c000bb90:	ff e0                	jmp    eax

c000bb92 <secondsToDatetime(unsigned long long)>:
c000bb92:	55                   	push   ebp
c000bb93:	57                   	push   edi
c000bb94:	56                   	push   esi
c000bb95:	53                   	push   ebx
c000bb96:	83 ec 1c             	sub    esp,0x1c
c000bb99:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bb9d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bba1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bba5:	6a 00                	push   0x0
c000bba7:	68 80 51 01 00       	push   0x15180
c000bbac:	55                   	push   ebp
c000bbad:	57                   	push   edi
c000bbae:	e8 ad 2a 01 00       	call   c001e660 <__udivdi3>
c000bbb3:	83 c4 10             	add    esp,0x10
c000bbb6:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bbbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbc0:	6a 00                	push   0x0
c000bbc2:	68 80 51 01 00       	push   0x15180
c000bbc7:	55                   	push   ebp
c000bbc8:	57                   	push   edi
c000bbc9:	bf 10 0e 00 00       	mov    edi,0xe10
c000bbce:	e8 8d 2b 01 00       	call   c001e760 <__umoddi3>
c000bbd3:	83 c4 10             	add    esp,0x10
c000bbd6:	99                   	cdq    
c000bbd7:	f7 ff                	idiv   edi
c000bbd9:	bf 3c 00 00 00       	mov    edi,0x3c
c000bbde:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bbe1:	89 d0                	mov    eax,edx
c000bbe3:	99                   	cdq    
c000bbe4:	f7 ff                	idiv   edi
c000bbe6:	85 db                	test   ebx,ebx
c000bbe8:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000bbeb:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000bbee:	79 11                	jns    c000bc01 <secondsToDatetime(unsigned long long)+0x6f>
c000bbf0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bbf4:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000bbfa:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bbff:	eb 07                	jmp    c000bc08 <secondsToDatetime(unsigned long long)+0x76>
c000bc01:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bc06:	89 d8                	mov    eax,ebx
c000bc08:	bf b4 05 00 00       	mov    edi,0x5b4
c000bc0d:	99                   	cdq    
c000bc0e:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000bc13:	f7 f9                	idiv   ecx
c000bc15:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000bc1a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc1e:	31 d2                	xor    edx,edx
c000bc20:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000bc28:	01 c3                	add    ebx,eax
c000bc2a:	89 d8                	mov    eax,ebx
c000bc2c:	f7 f1                	div    ecx
c000bc2e:	31 d2                	xor    edx,edx
c000bc30:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000bc33:	89 d8                	mov    eax,ebx
c000bc35:	f7 f7                	div    edi
c000bc37:	31 d2                	xor    edx,edx
c000bc39:	29 c1                	sub    ecx,eax
c000bc3b:	89 d8                	mov    eax,ebx
c000bc3d:	f7 f5                	div    ebp
c000bc3f:	bd 6d 01 00 00       	mov    ebp,0x16d
c000bc44:	29 c1                	sub    ecx,eax
c000bc46:	31 d2                	xor    edx,edx
c000bc48:	89 c8                	mov    eax,ecx
c000bc4a:	f7 f5                	div    ebp
c000bc4c:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000bc51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc55:	31 d2                	xor    edx,edx
c000bc57:	89 c8                	mov    eax,ecx
c000bc59:	f7 f5                	div    ebp
c000bc5b:	31 d2                	xor    edx,edx
c000bc5d:	01 c3                	add    ebx,eax
c000bc5f:	89 c8                	mov    eax,ecx
c000bc61:	f7 f7                	div    edi
c000bc63:	bf 99 00 00 00       	mov    edi,0x99
c000bc68:	29 c3                	sub    ebx,eax
c000bc6a:	31 d2                	xor    edx,edx
c000bc6c:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000bc74:	29 c3                	sub    ebx,eax
c000bc76:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000bc79:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000bc7c:	bb 05 00 00 00       	mov    ebx,0x5
c000bc81:	83 c1 02             	add    ecx,0x2
c000bc84:	89 c8                	mov    eax,ecx
c000bc86:	f7 f7                	div    edi
c000bc88:	31 d2                	xor    edx,edx
c000bc8a:	89 c7                	mov    edi,eax
c000bc8c:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000bc92:	83 c0 02             	add    eax,0x2
c000bc95:	f7 f3                	div    ebx
c000bc97:	89 eb                	mov    ebx,ebp
c000bc99:	29 c3                	sub    ebx,eax
c000bc9b:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000bca1:	88 1e                	mov    BYTE PTR [esi],bl
c000bca3:	19 c0                	sbb    eax,eax
c000bca5:	31 d2                	xor    edx,edx
c000bca7:	83 e0 0c             	and    eax,0xc
c000bcaa:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bcae:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bcb6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bcba:	83 f9 01             	cmp    ecx,0x1
c000bcbd:	0f 96 c2             	setbe  dl
c000bcc0:	41                   	inc    ecx
c000bcc1:	01 d0                	add    eax,edx
c000bcc3:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bcc6:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bcca:	83 c4 1c             	add    esp,0x1c
c000bccd:	89 f0                	mov    eax,esi
c000bccf:	5b                   	pop    ebx
c000bcd0:	5e                   	pop    esi
c000bcd1:	5f                   	pop    edi
c000bcd2:	5d                   	pop    ebp
c000bcd3:	c2 04 00             	ret    0x4

c000bcd6 <Clock::timeInDatetimeLocal()>:
c000bcd6:	53                   	push   ebx
c000bcd7:	83 ec 14             	sub    esp,0x14
c000bcda:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bcde:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bce2:	e8 8b fc ff ff       	call   c000b972 <Clock::timeInSecondsLocal()>
c000bce7:	83 c4 0c             	add    esp,0xc
c000bcea:	52                   	push   edx
c000bceb:	50                   	push   eax
c000bcec:	53                   	push   ebx
c000bced:	e8 a0 fe ff ff       	call   c000bb92 <secondsToDatetime(unsigned long long)>
c000bcf2:	89 d8                	mov    eax,ebx
c000bcf4:	83 c4 14             	add    esp,0x14
c000bcf7:	5b                   	pop    ebx
c000bcf8:	c2 04 00             	ret    0x4
c000bcfb:	90                   	nop

c000bcfc <Device::hibernate()>:
c000bcfc:	c3                   	ret    
c000bcfd:	90                   	nop

c000bcfe <Device::wake()>:
c000bcfe:	c3                   	ret    
c000bcff:	90                   	nop

c000bd00 <Device::detect()>:
c000bd00:	c3                   	ret    
c000bd01:	90                   	nop

c000bd02 <Device::disableLegacy()>:
c000bd02:	c3                   	ret    
c000bd03:	90                   	nop

c000bd04 <Device::powerSaving(PowerSavingLevel)>:
c000bd04:	c3                   	ret    
c000bd05:	90                   	nop

c000bd06 <DriverlessDevice::close(int, int, void*)>:
c000bd06:	31 c0                	xor    eax,eax
c000bd08:	c3                   	ret    
c000bd09:	90                   	nop

c000bd0a <DriverlessDevice::detect()>:
c000bd0a:	c3                   	ret    
c000bd0b:	90                   	nop

c000bd0c <DriverlessDevice::open(int, int, void*)>:
c000bd0c:	83 ec 18             	sub    esp,0x18
c000bd0f:	68 50 04 02 c0       	push   0xc0020450
c000bd14:	e8 fe 4b 00 00       	call   c0010917 <KePanic(char const*)>
c000bd19:	83 c8 ff             	or     eax,0xffffffff
c000bd1c:	83 c4 1c             	add    esp,0x1c
c000bd1f:	c3                   	ret    

c000bd20 <Device::~Device()>:
c000bd20:	ba b0 04 02 c0       	mov    edx,0xc00204b0
c000bd25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd29:	89 10                	mov    DWORD PTR [eax],edx
c000bd2b:	90                   	nop
c000bd2c:	c3                   	ret    
c000bd2d:	90                   	nop

c000bd2e <Device::~Device()>:
c000bd2e:	83 ec 0c             	sub    esp,0xc
c000bd31:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bd35:	e8 e6 ff ff ff       	call   c000bd20 <Device::~Device()>
c000bd3a:	83 c4 04             	add    esp,0x4
c000bd3d:	83 ec 08             	sub    esp,0x8
c000bd40:	68 58 01 00 00       	push   0x158
c000bd45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd49:	e8 6f eb ff ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c000bd4e:	83 c4 10             	add    esp,0x10
c000bd51:	83 c4 0c             	add    esp,0xc
c000bd54:	c3                   	ret    
c000bd55:	90                   	nop

c000bd56 <Device::findAndLoadDriver()>:
c000bd56:	c7 44 24 04 6e 04 02 c0 	mov    DWORD PTR [esp+0x4],0xc002046e
c000bd5e:	e9 87 ec ff ff       	jmp    c000a9ea <Dbg::kprintf(char const*, ...)>
c000bd63:	90                   	nop

c000bd64 <Device::preOpenPCI(PCIDeviceInfo)>:
c000bd64:	57                   	push   edi
c000bd65:	b9 09 00 00 00       	mov    ecx,0x9
c000bd6a:	56                   	push   esi
c000bd6b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bd6f:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bd73:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bd7d:	81 c7 18 01 00 00    	add    edi,0x118
c000bd83:	fc                   	cld    
c000bd84:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bd86:	5e                   	pop    esi
c000bd87:	5f                   	pop    edi
c000bd88:	c3                   	ret    
c000bd89:	90                   	nop

c000bd8a <Device::preOpenACPI(void*, char*, char*)>:
c000bd8a:	57                   	push   edi
c000bd8b:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bd90:	56                   	push   esi
c000bd91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bd95:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd99:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bda3:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bda9:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bdaf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bdb3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bdb5:	b9 0e 00 00 00       	mov    ecx,0xe
c000bdba:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bdc0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bdc4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bdc6:	5e                   	pop    esi
c000bdc7:	5f                   	pop    edi
c000bdc8:	c3                   	ret    
c000bdc9:	90                   	nop

c000bdca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bdca:	53                   	push   ebx
c000bdcb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bdcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bdd3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bdd7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bddb:	0f b6 c0             	movzx  eax,al
c000bdde:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000bde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bde6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bdea:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bdee:	5b                   	pop    ebx
c000bdef:	e9 a8 05 00 00       	jmp    c000c39c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000bdf4 <Device::getParent()>:
c000bdf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bdf8:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000bdfe:	c3                   	ret    
c000bdff:	90                   	nop

c000be00 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000be00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000be04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000be08:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000be0d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000be11:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000be15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000be19:	e9 e6 06 00 00       	jmp    c000c504 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000be1e <Device::addChild(Device*)>:
c000be1e:	53                   	push   ebx
c000be1f:	83 ec 08             	sub    esp,0x8
c000be22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000be2a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000be30:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000be36:	8b 13                	mov    edx,DWORD PTR [ebx]
c000be38:	85 d2                	test   edx,edx
c000be3a:	74 04                	je     c000be40 <Device::addChild(Device*)+0x22>
c000be3c:	89 d3                	mov    ebx,edx
c000be3e:	eb f6                	jmp    c000be36 <Device::addChild(Device*)+0x18>
c000be40:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000be43:	83 ec 0c             	sub    esp,0xc
c000be46:	6a 08                	push   0x8
c000be48:	e8 61 bc ff ff       	call   c0007aae <malloc>
c000be4d:	89 03                	mov    DWORD PTR [ebx],eax
c000be4f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000be55:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000be5c:	83 c4 18             	add    esp,0x18
c000be5f:	5b                   	pop    ebx
c000be60:	c3                   	ret    
c000be61:	90                   	nop

c000be62 <Device::removeAllChildren()>:
c000be62:	56                   	push   esi
c000be63:	53                   	push   ebx
c000be64:	52                   	push   edx
c000be65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000be69:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000be6f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be72:	74 17                	je     c000be8b <Device::removeAllChildren()+0x29>
c000be74:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000be77:	85 c0                	test   eax,eax
c000be79:	74 0c                	je     c000be87 <Device::removeAllChildren()+0x25>
c000be7b:	83 ec 0c             	sub    esp,0xc
c000be7e:	8b 10                	mov    edx,DWORD PTR [eax]
c000be80:	50                   	push   eax
c000be81:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000be84:	83 c4 10             	add    esp,0x10
c000be87:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be89:	eb e4                	jmp    c000be6f <Device::removeAllChildren()+0xd>
c000be8b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000be91:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000be97:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000be9d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bea4:	58                   	pop    eax
c000bea5:	5b                   	pop    ebx
c000bea6:	5e                   	pop    esi
c000bea7:	c3                   	ret    

c000bea8 <Device::hibernateAll()>:
c000bea8:	53                   	push   ebx
c000bea9:	83 ec 14             	sub    esp,0x14
c000beac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000beb0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000beb2:	53                   	push   ebx
c000beb3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000beb6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bec2:	74 0f                	je     c000bed3 <Device::hibernateAll()+0x2b>
c000bec4:	83 ec 0c             	sub    esp,0xc
c000bec7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000beca:	e8 d9 ff ff ff       	call   c000bea8 <Device::hibernateAll()>
c000becf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bed1:	eb e9                	jmp    c000bebc <Device::hibernateAll()+0x14>
c000bed3:	83 c4 08             	add    esp,0x8
c000bed6:	5b                   	pop    ebx
c000bed7:	c3                   	ret    

c000bed8 <Device::wakeAll()>:
c000bed8:	53                   	push   ebx
c000bed9:	83 ec 14             	sub    esp,0x14
c000bedc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bee0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bee2:	53                   	push   ebx
c000bee3:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000bee6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000beec:	83 c4 10             	add    esp,0x10
c000beef:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bef2:	74 0f                	je     c000bf03 <Device::wakeAll()+0x2b>
c000bef4:	83 ec 0c             	sub    esp,0xc
c000bef7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000befa:	e8 d9 ff ff ff       	call   c000bed8 <Device::wakeAll()>
c000beff:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf01:	eb e9                	jmp    c000beec <Device::wakeAll()+0x14>
c000bf03:	83 c4 08             	add    esp,0x8
c000bf06:	5b                   	pop    ebx
c000bf07:	c3                   	ret    

c000bf08 <Device::detectAll()>:
c000bf08:	53                   	push   ebx
c000bf09:	83 ec 14             	sub    esp,0x14
c000bf0c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bf10:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf12:	53                   	push   ebx
c000bf13:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bf16:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf1c:	83 c4 10             	add    esp,0x10
c000bf1f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf22:	74 0f                	je     c000bf33 <Device::detectAll()+0x2b>
c000bf24:	83 ec 0c             	sub    esp,0xc
c000bf27:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf2a:	e8 d9 ff ff ff       	call   c000bf08 <Device::detectAll()>
c000bf2f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf31:	eb e9                	jmp    c000bf1c <Device::detectAll()+0x14>
c000bf33:	83 c4 08             	add    esp,0x8
c000bf36:	5b                   	pop    ebx
c000bf37:	c3                   	ret    

c000bf38 <Device::disableLegacyAll()>:
c000bf38:	c3                   	ret    
c000bf39:	90                   	nop

c000bf3a <Device::loadDriversForAll()>:
c000bf3a:	c3                   	ret    
c000bf3b:	90                   	nop

c000bf3c <Device::closeAll()>:
c000bf3c:	53                   	push   ebx
c000bf3d:	83 ec 08             	sub    esp,0x8
c000bf40:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf44:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf46:	6a 00                	push   0x0
c000bf48:	6a 00                	push   0x0
c000bf4a:	6a 00                	push   0x0
c000bf4c:	53                   	push   ebx
c000bf4d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf50:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf56:	83 c4 10             	add    esp,0x10
c000bf59:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf5c:	74 0f                	je     c000bf6d <Device::closeAll()+0x31>
c000bf5e:	83 ec 0c             	sub    esp,0xc
c000bf61:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf64:	e8 d3 ff ff ff       	call   c000bf3c <Device::closeAll()>
c000bf69:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf6b:	eb e9                	jmp    c000bf56 <Device::closeAll()+0x1a>
c000bf6d:	83 c4 08             	add    esp,0x8
c000bf70:	5b                   	pop    ebx
c000bf71:	c3                   	ret    

c000bf72 <Device::powerSavingAll(PowerSavingLevel)>:
c000bf72:	56                   	push   esi
c000bf73:	53                   	push   ebx
c000bf74:	83 ec 0c             	sub    esp,0xc
c000bf77:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bf7b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bf7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf81:	56                   	push   esi
c000bf82:	53                   	push   ebx
c000bf83:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bf86:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf8c:	83 c4 10             	add    esp,0x10
c000bf8f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf92:	74 0f                	je     c000bfa3 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bf94:	52                   	push   edx
c000bf95:	52                   	push   edx
c000bf96:	56                   	push   esi
c000bf97:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf9a:	e8 d3 ff ff ff       	call   c000bf72 <Device::powerSavingAll(PowerSavingLevel)>
c000bf9f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bfa1:	eb e9                	jmp    c000bf8c <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bfa3:	58                   	pop    eax
c000bfa4:	5b                   	pop    ebx
c000bfa5:	5e                   	pop    esi
c000bfa6:	c3                   	ret    
c000bfa7:	90                   	nop

c000bfa8 <Device::setName(char const*)>:
c000bfa8:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bfb0:	e9 8b 46 ff ff       	jmp    c0000640 <strcpy>
c000bfb5:	90                   	nop

c000bfb6 <Device::Device(char const*)>:
c000bfb6:	83 ec 1c             	sub    esp,0x1c
c000bfb9:	ba b0 04 02 c0       	mov    edx,0xc00204b0
c000bfbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfc2:	89 10                	mov    DWORD PTR [eax],edx
c000bfc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfc8:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bfd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfd6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bfe0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfe4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bfee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bff2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bffc:	83 ec 08             	sub    esp,0x8
c000bfff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c003:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c007:	e8 9c ff ff ff       	call   c000bfa8 <Device::setName(char const*)>
c000c00c:	83 c4 10             	add    esp,0x10
c000c00f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c017:	83 ec 0c             	sub    esp,0xc
c000c01a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c01e:	e8 8b ba ff ff       	call   c0007aae <malloc>
c000c023:	83 c4 10             	add    esp,0x10
c000c026:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c02c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c033:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c037:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c03d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c041:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c047:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c04d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c051:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c057:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c05e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c062:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c069:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c06d:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c074:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c078:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c082:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c086:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c094:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c09e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c0a2:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c0ac:	90                   	nop
c000c0ad:	83 c4 1c             	add    esp,0x1c
c000c0b0:	c3                   	ret    
c000c0b1:	90                   	nop

c000c0b2 <Device::getName()>:
c000c0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c0b6:	05 d0 00 00 00       	add    eax,0xd0
c000c0bb:	c3                   	ret    

c000c0bc <DriverlessDevice::DriverlessDevice(char const*)>:
c000c0bc:	83 ec 0c             	sub    esp,0xc
c000c0bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0c3:	83 ec 08             	sub    esp,0x8
c000c0c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ca:	50                   	push   eax
c000c0cb:	e8 e6 fe ff ff       	call   c000bfb6 <Device::Device(char const*)>
c000c0d0:	83 c4 10             	add    esp,0x10
c000c0d3:	ba dc 04 02 c0       	mov    edx,0xc00204dc
c000c0d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0dc:	89 10                	mov    DWORD PTR [eax],edx
c000c0de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0e2:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c0ec:	90                   	nop
c000c0ed:	83 c4 0c             	add    esp,0xc
c000c0f0:	c3                   	ret    
c000c0f1:	90                   	nop

c000c0f2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c0f2:	57                   	push   edi
c000c0f3:	56                   	push   esi
c000c0f4:	53                   	push   ebx
c000c0f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c0f9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c0fd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c101:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c107:	75 0c                	jne    c000c115 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c109:	52                   	push   edx
c000c10a:	52                   	push   edx
c000c10b:	53                   	push   ebx
c000c10c:	56                   	push   esi
c000c10d:	e8 00 2a 01 00       	call   c001eb12 <LinkedList<Device>::addElement(Device*)>
c000c112:	83 c4 10             	add    esp,0x10
c000c115:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c11b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c11e:	74 12                	je     c000c132 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c120:	50                   	push   eax
c000c121:	57                   	push   edi
c000c122:	56                   	push   esi
c000c123:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c126:	e8 c7 ff ff ff       	call   c000c0f2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c12b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c12d:	83 c4 10             	add    esp,0x10
c000c130:	eb e9                	jmp    c000c11b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c132:	5b                   	pop    ebx
c000c133:	5e                   	pop    esi
c000c134:	5f                   	pop    edi
c000c135:	c3                   	ret    

c000c136 <getDevicesOfType(DeviceType)>:
c000c136:	53                   	push   ebx
c000c137:	83 ec 14             	sub    esp,0x14
c000c13a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c13e:	53                   	push   ebx
c000c13f:	e8 aa 2a 01 00       	call   c001ebee <LinkedList<Device>::LinkedList()>
c000c144:	83 c4 0c             	add    esp,0xc
c000c147:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c14b:	53                   	push   ebx
c000c14c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000c152:	e8 9b ff ff ff       	call   c000c0f2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c157:	89 d8                	mov    eax,ebx
c000c159:	83 c4 18             	add    esp,0x18
c000c15c:	5b                   	pop    ebx
c000c15d:	c2 04 00             	ret    0x4

c000c160 <HardDiskController::HardDiskController(char const*)>:
c000c160:	83 ec 0c             	sub    esp,0xc
c000c163:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c167:	83 ec 08             	sub    esp,0x8
c000c16a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c16e:	50                   	push   eax
c000c16f:	e8 42 fe ff ff       	call   c000bfb6 <Device::Device(char const*)>
c000c174:	83 c4 10             	add    esp,0x10
c000c177:	ba 08 05 02 c0       	mov    edx,0xc0020508
c000c17c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c180:	89 10                	mov    DWORD PTR [eax],edx
c000c182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c186:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c190:	90                   	nop
c000c191:	83 c4 0c             	add    esp,0xc
c000c194:	c3                   	ret    
c000c195:	90                   	nop
c000c196:	66 90                	xchg   ax,ax

c000c198 <HardDiskController::~HardDiskController()>:
c000c198:	83 ec 0c             	sub    esp,0xc
c000c19b:	ba 08 05 02 c0       	mov    edx,0xc0020508
c000c1a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1a4:	89 10                	mov    DWORD PTR [eax],edx
c000c1a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1aa:	83 ec 0c             	sub    esp,0xc
c000c1ad:	50                   	push   eax
c000c1ae:	e8 6d fb ff ff       	call   c000bd20 <Device::~Device()>
c000c1b3:	83 c4 10             	add    esp,0x10
c000c1b6:	90                   	nop
c000c1b7:	83 c4 0c             	add    esp,0xc
c000c1ba:	c3                   	ret    
c000c1bb:	90                   	nop

c000c1bc <HardDiskController::~HardDiskController()>:
c000c1bc:	83 ec 0c             	sub    esp,0xc
c000c1bf:	83 ec 0c             	sub    esp,0xc
c000c1c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1c6:	e8 cd ff ff ff       	call   c000c198 <HardDiskController::~HardDiskController()>
c000c1cb:	83 c4 10             	add    esp,0x10
c000c1ce:	83 ec 08             	sub    esp,0x8
c000c1d1:	68 58 01 00 00       	push   0x158
c000c1d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1da:	e8 de e6 ff ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c000c1df:	83 c4 10             	add    esp,0x10
c000c1e2:	83 c4 0c             	add    esp,0xc
c000c1e5:	c3                   	ret    

c000c1e6 <PhysicalDisk::eject()>:
c000c1e6:	83 c8 ff             	or     eax,0xffffffff
c000c1e9:	c3                   	ret    

c000c1ea <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c1ea:	83 ec 0c             	sub    esp,0xc
c000c1ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1f1:	83 ec 08             	sub    esp,0x8
c000c1f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1f8:	50                   	push   eax
c000c1f9:	e8 b8 fd ff ff       	call   c000bfb6 <Device::Device(char const*)>
c000c1fe:	83 c4 10             	add    esp,0x10
c000c201:	ba 34 05 02 c0       	mov    edx,0xc0020534
c000c206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c20a:	89 10                	mov    DWORD PTR [eax],edx
c000c20c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c210:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c21b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c226:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c234:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c238:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c23e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c242:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c24c:	90                   	nop
c000c24d:	83 c4 0c             	add    esp,0xc
c000c250:	c3                   	ret    
c000c251:	90                   	nop

c000c252 <PhysicalDisk::startCache()>:
c000c252:	56                   	push   esi
c000c253:	53                   	push   ebx
c000c254:	83 ec 10             	sub    esp,0x10
c000c257:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c25b:	6a 44                	push   0x44
c000c25d:	e8 4c b8 ff ff       	call   c0007aae <malloc>
c000c262:	89 c6                	mov    esi,eax
c000c264:	58                   	pop    eax
c000c265:	5a                   	pop    edx
c000c266:	53                   	push   ebx
c000c267:	56                   	push   esi
c000c268:	e8 7b 17 00 00       	call   c000d9e8 <VCache::VCache(PhysicalDisk*)>
c000c26d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c273:	83 c4 14             	add    esp,0x14
c000c276:	5b                   	pop    ebx
c000c277:	5e                   	pop    esi
c000c278:	c3                   	ret    
c000c279:	90                   	nop

c000c27a <PhysicalDisk::~PhysicalDisk()>:
c000c27a:	83 ec 0c             	sub    esp,0xc
c000c27d:	ba 34 05 02 c0       	mov    edx,0xc0020534
c000c282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c286:	89 10                	mov    DWORD PTR [eax],edx
c000c288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c28c:	83 ec 0c             	sub    esp,0xc
c000c28f:	50                   	push   eax
c000c290:	e8 8b fa ff ff       	call   c000bd20 <Device::~Device()>
c000c295:	83 c4 10             	add    esp,0x10
c000c298:	90                   	nop
c000c299:	83 c4 0c             	add    esp,0xc
c000c29c:	c3                   	ret    
c000c29d:	90                   	nop

c000c29e <PhysicalDisk::~PhysicalDisk()>:
c000c29e:	83 ec 0c             	sub    esp,0xc
c000c2a1:	83 ec 0c             	sub    esp,0xc
c000c2a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2a8:	e8 cd ff ff ff       	call   c000c27a <PhysicalDisk::~PhysicalDisk()>
c000c2ad:	83 c4 10             	add    esp,0x10
c000c2b0:	83 ec 08             	sub    esp,0x8
c000c2b3:	68 6c 01 00 00       	push   0x16c
c000c2b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2bc:	e8 fc e5 ff ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	83 c4 0c             	add    esp,0xc
c000c2c7:	c3                   	ret    

c000c2c8 <int_handler>:
c000c2c8:	55                   	push   ebp
c000c2c9:	57                   	push   edi
c000c2ca:	56                   	push   esi
c000c2cb:	53                   	push   ebx
c000c2cc:	83 ec 0c             	sub    esp,0xc
c000c2cf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c2d3:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c2da:	74 0b                	je     c000c2e7 <int_handler+0x1f>
c000c2dc:	fa                   	cli    
c000c2dd:	f4                   	hlt    
c000c2de:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c2e5:	75 f5                	jne    c000c2dc <int_handler+0x14>
c000c2e7:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c2ea:	8d 46 e0             	lea    eax,[esi-0x20]
c000c2ed:	83 f8 17             	cmp    eax,0x17
c000c2f0:	76 40                	jbe    c000c332 <int_handler+0x6a>
c000c2f2:	c1 e6 04             	shl    esi,0x4
c000c2f5:	31 db                	xor    ebx,ebx
c000c2f7:	8d ae c0 5f 02 c0    	lea    ebp,[esi-0x3ffda040]
c000c2fd:	81 c6 c0 4f 02 c0    	add    esi,0xc0024fc0
c000c303:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c307:	85 c0                	test   eax,eax
c000c309:	74 13                	je     c000c31e <int_handler+0x56>
c000c30b:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c30e:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c312:	74 2c                	je     c000c340 <int_handler+0x78>
c000c314:	83 ec 08             	sub    esp,0x8
c000c317:	52                   	push   edx
c000c318:	57                   	push   edi
c000c319:	ff d0                	call   eax
c000c31b:	83 c4 10             	add    esp,0x10
c000c31e:	83 c3 01             	add    ebx,0x1
c000c321:	83 fb 04             	cmp    ebx,0x4
c000c324:	75 dd                	jne    c000c303 <int_handler+0x3b>
c000c326:	83 c4 0c             	add    esp,0xc
c000c329:	31 c0                	xor    eax,eax
c000c32b:	5b                   	pop    ebx
c000c32c:	31 d2                	xor    edx,edx
c000c32e:	5e                   	pop    esi
c000c32f:	5f                   	pop    edi
c000c330:	5d                   	pop    ebp
c000c331:	c3                   	ret    
c000c332:	83 ec 0c             	sub    esp,0xc
c000c335:	50                   	push   eax
c000c336:	e8 e9 af 00 00       	call   c0017324 <HalEndOfInterrupt(int)>
c000c33b:	83 c4 10             	add    esp,0x10
c000c33e:	eb b2                	jmp    c000c2f2 <int_handler+0x2a>
c000c340:	83 ec 08             	sub    esp,0x8
c000c343:	52                   	push   edx
c000c344:	57                   	push   edi
c000c345:	ff d0                	call   eax
c000c347:	83 c4 10             	add    esp,0x10
c000c34a:	83 c4 0c             	add    esp,0xc
c000c34d:	5b                   	pop    ebx
c000c34e:	5e                   	pop    esi
c000c34f:	5f                   	pop    edi
c000c350:	5d                   	pop    ebp
c000c351:	c3                   	ret    

c000c352 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c352:	56                   	push   esi
c000c353:	31 c0                	xor    eax,eax
c000c355:	53                   	push   ebx
c000c356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c35a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c35e:	89 ca                	mov    edx,ecx
c000c360:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c364:	c1 e2 04             	shl    edx,0x4
c000c367:	83 bc 82 c0 5f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffda040],0x0
c000c36f:	74 17                	je     c000c388 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000c371:	83 c0 01             	add    eax,0x1
c000c374:	83 f8 04             	cmp    eax,0x4
c000c377:	75 ee                	jne    c000c367 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c379:	c7 44 24 0c 64 05 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020564
c000c381:	5b                   	pop    ebx
c000c382:	5e                   	pop    esi
c000c383:	e9 8f 45 00 00       	jmp    c0010917 <KePanic(char const*)>
c000c388:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c38b:	89 1c 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],ebx
c000c392:	89 34 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],esi
c000c399:	5b                   	pop    ebx
c000c39a:	5e                   	pop    esi
c000c39b:	c3                   	ret    

c000c39c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c39c:	57                   	push   edi
c000c39d:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c3a3:	56                   	push   esi
c000c3a4:	53                   	push   ebx
c000c3a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c3a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c3ad:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c3b4:	74 54                	je     c000c40a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000c3b6:	89 c7                	mov    edi,eax
c000c3b8:	84 c0                	test   al,al
c000c3ba:	74 1d                	je     c000c3d9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000c3bc:	83 fe 0f             	cmp    esi,0xf
c000c3bf:	0f 8f d5 00 00 00    	jg     c000c49a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000c3c5:	0f b6 b6 e0 1f 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffde020]
c000c3cc:	0f b7 bc 36 60 77 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd88a0]
c000c3d4:	d1 ef                	shr    edi,1
c000c3d6:	83 e7 01             	and    edi,0x1
c000c3d9:	83 ec 08             	sub    esp,0x8
c000c3dc:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c3e1:	31 db                	xor    ebx,ebx
c000c3e3:	50                   	push   eax
c000c3e4:	68 71 05 02 c0       	push   0xc0020571
c000c3e9:	e8 fc e5 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c000c3ee:	83 c4 10             	add    esp,0x10
c000c3f1:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c3f6:	85 c0                	test   eax,eax
c000c3f8:	7f 55                	jg     c000c44f <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000c3fa:	83 ec 0c             	sub    esp,0xc
c000c3fd:	68 88 05 02 c0       	push   0xc0020588
c000c402:	e8 10 45 00 00       	call   c0010917 <KePanic(char const*)>
c000c407:	83 c4 10             	add    esp,0x10
c000c40a:	8d 7e 20             	lea    edi,[esi+0x20]
c000c40d:	89 f8                	mov    eax,edi
c000c40f:	31 d2                	xor    edx,edx
c000c411:	c1 e0 04             	shl    eax,0x4
c000c414:	8b 8c 90 c0 5f 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffda040]
c000c41b:	85 c9                	test   ecx,ecx
c000c41d:	0f 84 8e 00 00 00    	je     c000c4b1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000c423:	83 c2 01             	add    edx,0x1
c000c426:	83 fa 04             	cmp    edx,0x4
c000c429:	75 e9                	jne    c000c414 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c42b:	83 ec 0c             	sub    esp,0xc
c000c42e:	68 dc 05 02 c0       	push   0xc00205dc
c000c433:	e8 df 44 00 00       	call   c0010917 <KePanic(char const*)>
c000c438:	83 c4 10             	add    esp,0x10
c000c43b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c440:	5b                   	pop    ebx
c000c441:	5e                   	pop    esi
c000c442:	5f                   	pop    edi
c000c443:	c3                   	ret    
c000c444:	83 c3 01             	add    ebx,0x1
c000c447:	39 1d 60 8b 02 c0    	cmp    DWORD PTR ds:0xc0028b60,ebx
c000c44d:	7e ab                	jle    c000c3fa <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000c44f:	83 ec 08             	sub    esp,0x8
c000c452:	8b 04 9d 80 8b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7480]
c000c459:	56                   	push   esi
c000c45a:	50                   	push   eax
c000c45b:	e8 de 15 01 00       	call   c001da3e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c460:	83 c4 10             	add    esp,0x10
c000c463:	84 c0                	test   al,al
c000c465:	74 dd                	je     c000c444 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000c467:	83 ec 04             	sub    esp,0x4
c000c46a:	89 f8                	mov    eax,edi
c000c46c:	8b 1c 9d 80 8b 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd7480]
c000c473:	0f b6 f8             	movzx  edi,al
c000c476:	57                   	push   edi
c000c477:	8d 7e 20             	lea    edi,[esi+0x20]
c000c47a:	6a 00                	push   0x0
c000c47c:	89 f8                	mov    eax,edi
c000c47e:	0f b6 c0             	movzx  eax,al
c000c481:	50                   	push   eax
c000c482:	89 f0                	mov    eax,esi
c000c484:	6a 00                	push   0x0
c000c486:	0f b6 c0             	movzx  eax,al
c000c489:	6a 00                	push   0x0
c000c48b:	50                   	push   eax
c000c48c:	53                   	push   ebx
c000c48d:	e8 18 17 01 00       	call   c001dbaa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c492:	83 c4 20             	add    esp,0x20
c000c495:	e9 73 ff ff ff       	jmp    c000c40d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000c49a:	83 ec 0c             	sub    esp,0xc
c000c49d:	31 ff                	xor    edi,edi
c000c49f:	68 a4 05 02 c0       	push   0xc00205a4
c000c4a4:	e8 6e 44 00 00       	call   c0010917 <KePanic(char const*)>
c000c4a9:	83 c4 10             	add    esp,0x10
c000c4ac:	e9 28 ff ff ff       	jmp    c000c3d9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000c4b1:	8d 04 ba             	lea    eax,[edx+edi*4]
c000c4b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c4b8:	89 14 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],edx
c000c4bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c4c3:	5b                   	pop    ebx
c000c4c4:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c4cb:	89 f0                	mov    eax,esi
c000c4cd:	5e                   	pop    esi
c000c4ce:	5f                   	pop    edi
c000c4cf:	c3                   	ret    

c000c4d0 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c4d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c4d4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c4d8:	c1 e0 04             	shl    eax,0x4
c000c4db:	8d 50 10             	lea    edx,[eax+0x10]
c000c4de:	39 88 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ecx
c000c4e4:	74 08                	je     c000c4ee <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c4e6:	83 c0 04             	add    eax,0x4
c000c4e9:	39 d0                	cmp    eax,edx
c000c4eb:	75 f1                	jne    c000c4de <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c4ed:	c3                   	ret    
c000c4ee:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c4f8:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c502:	eb e2                	jmp    c000c4e6 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c504 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c504:	53                   	push   ebx
c000c505:	83 ec 08             	sub    esp,0x8
c000c508:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c50c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c511:	74 0e                	je     c000c521 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c513:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000c518:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c51f:	75 37                	jne    c000c558 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c525:	83 c0 20             	add    eax,0x20
c000c528:	c1 e0 04             	shl    eax,0x4
c000c52b:	8d 50 10             	lea    edx,[eax+0x10]
c000c52e:	39 98 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ebx
c000c534:	74 0c                	je     c000c542 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c536:	83 c0 04             	add    eax,0x4
c000c539:	39 d0                	cmp    eax,edx
c000c53b:	75 f1                	jne    c000c52e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c53d:	83 c4 08             	add    esp,0x8
c000c540:	5b                   	pop    ebx
c000c541:	c3                   	ret    
c000c542:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c54c:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c556:	eb de                	jmp    c000c536 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c558:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c55d:	7f 11                	jg     c000c570 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000c55f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c563:	0f b6 80 e0 1f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde020]
c000c56a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c56e:	eb b1                	jmp    c000c521 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c570:	83 ec 0c             	sub    esp,0xc
c000c573:	68 95 05 02 c0       	push   0xc0020595
c000c578:	e8 9a 43 00 00       	call   c0010917 <KePanic(char const*)>
c000c57d:	83 c4 10             	add    esp,0x10
c000c580:	eb 9f                	jmp    c000c521 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c582 <setupINTS()>:
c000c582:	31 c0                	xor    eax,eax
c000c584:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c58e:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c598:	c7 80 c4 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda03c],0x0
c000c5a2:	c7 80 c4 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb03c],0x0
c000c5ac:	c7 80 c8 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda038],0x0
c000c5b6:	c7 80 c8 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb038],0x0
c000c5c0:	c7 80 cc 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda034],0x0
c000c5ca:	c7 80 cc 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb034],0x0
c000c5d4:	83 c0 10             	add    eax,0x10
c000c5d7:	3d 00 10 00 00       	cmp    eax,0x1000
c000c5dc:	75 a6                	jne    c000c584 <setupINTS()+0x2>
c000c5de:	c3                   	ret    

c000c5df <convertLegacyIRQNumber(int)>:
c000c5df:	83 ec 0c             	sub    esp,0xc
c000c5e2:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c5e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5ec:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c5f3:	74 0c                	je     c000c601 <convertLegacyIRQNumber(int)+0x22>
c000c5f5:	83 f8 0f             	cmp    eax,0xf
c000c5f8:	7f 0b                	jg     c000c605 <convertLegacyIRQNumber(int)+0x26>
c000c5fa:	0f b6 80 e0 1f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde020]
c000c601:	83 c4 0c             	add    esp,0xc
c000c604:	c3                   	ret    
c000c605:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c609:	83 ec 0c             	sub    esp,0xc
c000c60c:	68 a4 05 02 c0       	push   0xc00205a4
c000c611:	e8 01 43 00 00       	call   c0010917 <KePanic(char const*)>
c000c616:	83 c4 10             	add    esp,0x10
c000c619:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c61d:	83 c4 0c             	add    esp,0xc
c000c620:	c3                   	ret    
c000c621:	90                   	nop

c000c622 <startGUI(void*)>:
c000c622:	55                   	push   ebp
c000c623:	89 e5                	mov    ebp,esp
c000c625:	53                   	push   ebx
c000c626:	83 ec 04             	sub    esp,0x4
c000c629:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c62e:	83 e8 01             	sub    eax,0x1
c000c631:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c636:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c63b:	85 c0                	test   eax,eax
c000c63d:	75 01                	jne    c000c640 <startGUI(void*)+0x1e>
c000c63f:	fb                   	sti    
c000c640:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c646:	83 ec 08             	sub    esp,0x8
c000c649:	6a 01                	push   0x1
c000c64b:	68 01 06 02 c0       	push   0xc0020601
c000c650:	e8 19 80 00 00       	call   c001466e <Thr::loadDLL(char const*, bool)>
c000c655:	83 c4 10             	add    esp,0x10
c000c658:	83 ec 08             	sub    esp,0x8
c000c65b:	53                   	push   ebx
c000c65c:	50                   	push   eax
c000c65d:	e8 3d 82 00 00       	call   c001489f <Thr::executeDLL(unsigned long, void*)>
c000c662:	83 c4 10             	add    esp,0x10
c000c665:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c66b:	83 ec 08             	sub    esp,0x8
c000c66e:	6a 01                	push   0x1
c000c670:	68 1b 06 02 c0       	push   0xc002061b
c000c675:	e8 f4 7f 00 00       	call   c001466e <Thr::loadDLL(char const*, bool)>
c000c67a:	83 c4 10             	add    esp,0x10
c000c67d:	83 ec 08             	sub    esp,0x8
c000c680:	53                   	push   ebx
c000c681:	50                   	push   eax
c000c682:	e8 18 82 00 00       	call   c001489f <Thr::executeDLL(unsigned long, void*)>
c000c687:	83 c4 10             	add    esp,0x10
c000c68a:	90                   	nop
c000c68b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c68e:	c9                   	leave  
c000c68f:	c3                   	ret    

c000c690 <startGUIVESA(void*)>:
c000c690:	55                   	push   ebp
c000c691:	89 e5                	mov    ebp,esp
c000c693:	53                   	push   ebx
c000c694:	83 ec 04             	sub    esp,0x4
c000c697:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c69c:	83 e8 01             	sub    eax,0x1
c000c69f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c6a4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c6a9:	85 c0                	test   eax,eax
c000c6ab:	75 01                	jne    c000c6ae <startGUIVESA(void*)+0x1e>
c000c6ad:	fb                   	sti    
c000c6ae:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c6b4:	83 ec 08             	sub    esp,0x8
c000c6b7:	6a 01                	push   0x1
c000c6b9:	68 39 06 02 c0       	push   0xc0020639
c000c6be:	e8 ab 7f 00 00       	call   c001466e <Thr::loadDLL(char const*, bool)>
c000c6c3:	83 c4 10             	add    esp,0x10
c000c6c6:	83 ec 08             	sub    esp,0x8
c000c6c9:	53                   	push   ebx
c000c6ca:	50                   	push   eax
c000c6cb:	e8 cf 81 00 00       	call   c001489f <Thr::executeDLL(unsigned long, void*)>
c000c6d0:	83 c4 10             	add    esp,0x10
c000c6d3:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c6d9:	83 ec 08             	sub    esp,0x8
c000c6dc:	6a 01                	push   0x1
c000c6de:	68 1b 06 02 c0       	push   0xc002061b
c000c6e3:	e8 86 7f 00 00       	call   c001466e <Thr::loadDLL(char const*, bool)>
c000c6e8:	83 c4 10             	add    esp,0x10
c000c6eb:	83 ec 08             	sub    esp,0x8
c000c6ee:	53                   	push   ebx
c000c6ef:	50                   	push   eax
c000c6f0:	e8 aa 81 00 00       	call   c001489f <Thr::executeDLL(unsigned long, void*)>
c000c6f5:	83 c4 10             	add    esp,0x10
c000c6f8:	90                   	nop
c000c6f9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c6fc:	c9                   	leave  
c000c6fd:	c3                   	ret    

c000c6fe <sendKeyToTerminal(unsigned char)>:
c000c6fe:	55                   	push   ebp
c000c6ff:	89 e5                	mov    ebp,esp
c000c701:	83 ec 28             	sub    esp,0x28
c000c704:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c707:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c70a:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000c70f:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000c713:	83 ec 08             	sub    esp,0x8
c000c716:	52                   	push   edx
c000c717:	50                   	push   eax
c000c718:	e8 83 c6 ff ff       	call   c0008da0 <VgaText::receiveKey(unsigned char)>
c000c71d:	83 c4 10             	add    esp,0x10
c000c720:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c724:	83 f8 0a             	cmp    eax,0xa
c000c727:	74 16                	je     c000c73f <sendKeyToTerminal(unsigned char)+0x41>
c000c729:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c72d:	83 f8 03             	cmp    eax,0x3
c000c730:	74 0d                	je     c000c73f <sendKeyToTerminal(unsigned char)+0x41>
c000c732:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c736:	83 f8 1c             	cmp    eax,0x1c
c000c739:	0f 85 97 00 00 00    	jne    c000c7d6 <sendKeyToTerminal(unsigned char)+0xd8>
c000c73f:	fa                   	cli    
c000c740:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c745:	83 c0 01             	add    eax,0x1
c000c748:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c74d:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c752:	83 c0 01             	add    eax,0x1
c000c755:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c75a:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000c75f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c762:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000c76c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c770:	74 1f                	je     c000c791 <sendKeyToTerminal(unsigned char)+0x93>
c000c772:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c775:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c778:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c77b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c77e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c781:	83 ec 0c             	sub    esp,0xc
c000c784:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c787:	e8 58 8e 00 00       	call   c00155e4 <unblockTask(ThreadControlBlock*)>
c000c78c:	83 c4 10             	add    esp,0x10
c000c78f:	eb db                	jmp    c000c76c <sendKeyToTerminal(unsigned char)+0x6e>
c000c791:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c796:	83 e8 01             	sub    eax,0x1
c000c799:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c79e:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c7a3:	85 c0                	test   eax,eax
c000c7a5:	75 18                	jne    c000c7bf <sendKeyToTerminal(unsigned char)+0xc1>
c000c7a7:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c000c7ac:	85 c0                	test   eax,eax
c000c7ae:	74 0f                	je     c000c7bf <sendKeyToTerminal(unsigned char)+0xc1>
c000c7b0:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000c7ba:	e8 0d 89 00 00       	call   c00150cc <schedule()>
c000c7bf:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c7c4:	83 e8 01             	sub    eax,0x1
c000c7c7:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c7cc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c7d1:	85 c0                	test   eax,eax
c000c7d3:	75 01                	jne    c000c7d6 <sendKeyToTerminal(unsigned char)+0xd8>
c000c7d5:	fb                   	sti    
c000c7d6:	90                   	nop
c000c7d7:	c9                   	leave  
c000c7d8:	c3                   	ret    

c000c7d9 <sendKeyboardToken(KeyboardToken)>:
c000c7d9:	55                   	push   ebp
c000c7da:	89 e5                	mov    ebp,esp
c000c7dc:	83 ec 18             	sub    esp,0x18
c000c7df:	e8 83 41 00 00       	call   c0010967 <Krnl::userIOReceived()>
c000c7e4:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c7e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7ea:	0f b7 c0             	movzx  eax,ax
c000c7ed:	83 f2 01             	xor    edx,0x1
c000c7f0:	88 90 e0 6f 02 c0    	mov    BYTE PTR [eax-0x3ffd9020],dl
c000c7f6:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000c7fb:	85 c0                	test   eax,eax
c000c7fd:	74 24                	je     c000c823 <sendKeyboardToken(KeyboardToken)+0x4a>
c000c7ff:	8b 0d c8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fc8
c000c805:	83 ec 04             	sub    esp,0x4
c000c808:	68 e0 6f 02 c0       	push   0xc0026fe0
c000c80d:	83 ec 08             	sub    esp,0x8
c000c810:	89 e2                	mov    edx,esp
c000c812:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c815:	89 02                	mov    DWORD PTR [edx],eax
c000c817:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c81a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c81e:	ff d1                	call   ecx
c000c820:	83 c4 10             	add    esp,0x10
c000c823:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c827:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c82a:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000c82f:	0f b6 d2             	movzx  edx,dl
c000c832:	0f b6 c0             	movzx  eax,al
c000c835:	39 c2                	cmp    edx,eax
c000c837:	74 1c                	je     c000c855 <sendKeyboardToken(KeyboardToken)+0x7c>
c000c839:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c83c:	a2 e8 73 02 c0       	mov    ds:0xc00273e8,al
c000c841:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000c846:	0f b6 c0             	movzx  eax,al
c000c849:	83 ec 0c             	sub    esp,0xc
c000c84c:	50                   	push   eax
c000c84d:	e8 9a bc ff ff       	call   c00084ec <setTerminalScrollLock(bool)>
c000c852:	83 c4 10             	add    esp,0x10
c000c855:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c858:	0f b6 c0             	movzx  eax,al
c000c85b:	85 c0                	test   eax,eax
c000c85d:	0f 84 da 00 00 00    	je     c000c93d <sendKeyboardToken(KeyboardToken)+0x164>
c000c863:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c866:	0f b7 c0             	movzx  eax,ax
c000c869:	3d 18 03 00 00       	cmp    eax,0x318
c000c86e:	75 06                	jne    c000c876 <sendKeyboardToken(KeyboardToken)+0x9d>
c000c870:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c876:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c879:	0f b7 c0             	movzx  eax,ax
c000c87c:	3d 19 03 00 00       	cmp    eax,0x319
c000c881:	75 06                	jne    c000c889 <sendKeyboardToken(KeyboardToken)+0xb0>
c000c883:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c889:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c88c:	0f b7 c0             	movzx  eax,ax
c000c88f:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c894:	75 06                	jne    c000c89c <sendKeyboardToken(KeyboardToken)+0xc3>
c000c896:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c89c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c89f:	0f b7 c0             	movzx  eax,ax
c000c8a2:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c8a7:	75 06                	jne    c000c8af <sendKeyboardToken(KeyboardToken)+0xd6>
c000c8a9:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c8af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8b2:	0f b7 c0             	movzx  eax,ax
c000c8b5:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c8ba:	75 06                	jne    c000c8c2 <sendKeyboardToken(KeyboardToken)+0xe9>
c000c8bc:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c8c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8c5:	0f b7 c0             	movzx  eax,ax
c000c8c8:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c8cd:	75 06                	jne    c000c8d5 <sendKeyboardToken(KeyboardToken)+0xfc>
c000c8cf:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c8d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8d8:	0f b7 c0             	movzx  eax,ax
c000c8db:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c8e0:	75 06                	jne    c000c8e8 <sendKeyboardToken(KeyboardToken)+0x10f>
c000c8e2:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c8e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8eb:	0f b7 c0             	movzx  eax,ax
c000c8ee:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c8f3:	75 06                	jne    c000c8fb <sendKeyboardToken(KeyboardToken)+0x122>
c000c8f5:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c8fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8fe:	0f b7 c0             	movzx  eax,ax
c000c901:	3d 20 03 00 00       	cmp    eax,0x320
c000c906:	75 06                	jne    c000c90e <sendKeyboardToken(KeyboardToken)+0x135>
c000c908:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c90e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c911:	0f b7 c0             	movzx  eax,ax
c000c914:	3d 21 03 00 00       	cmp    eax,0x321
c000c919:	75 06                	jne    c000c921 <sendKeyboardToken(KeyboardToken)+0x148>
c000c91b:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c921:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c924:	0f b7 c0             	movzx  eax,ax
c000c927:	3d 22 03 00 00       	cmp    eax,0x322
c000c92c:	0f 85 f1 00 00 00    	jne    c000ca23 <sendKeyboardToken(KeyboardToken)+0x24a>
c000c932:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c938:	e9 e6 00 00 00       	jmp    c000ca23 <sendKeyboardToken(KeyboardToken)+0x24a>
c000c93d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c940:	0f b7 c0             	movzx  eax,ax
c000c943:	3d 18 03 00 00       	cmp    eax,0x318
c000c948:	75 0a                	jne    c000c954 <sendKeyboardToken(KeyboardToken)+0x17b>
c000c94a:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c950:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c954:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c957:	0f b7 c0             	movzx  eax,ax
c000c95a:	3d 19 03 00 00       	cmp    eax,0x319
c000c95f:	75 0a                	jne    c000c96b <sendKeyboardToken(KeyboardToken)+0x192>
c000c961:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c967:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c96b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96e:	0f b7 c0             	movzx  eax,ax
c000c971:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c976:	75 0a                	jne    c000c982 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000c978:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c97e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c982:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c985:	0f b7 c0             	movzx  eax,ax
c000c988:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c98d:	75 0a                	jne    c000c999 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000c98f:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c995:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c999:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c99c:	0f b7 c0             	movzx  eax,ax
c000c99f:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c9a4:	75 0a                	jne    c000c9b0 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000c9a6:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c9ac:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9b3:	0f b7 c0             	movzx  eax,ax
c000c9b6:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c9bb:	75 0a                	jne    c000c9c7 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000c9bd:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c9c3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9ca:	0f b7 c0             	movzx  eax,ax
c000c9cd:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c9d2:	75 0a                	jne    c000c9de <sendKeyboardToken(KeyboardToken)+0x205>
c000c9d4:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c9da:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9e1:	0f b7 c0             	movzx  eax,ax
c000c9e4:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c9e9:	75 0a                	jne    c000c9f5 <sendKeyboardToken(KeyboardToken)+0x21c>
c000c9eb:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c9f1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9f8:	0f b7 c0             	movzx  eax,ax
c000c9fb:	3d 20 03 00 00       	cmp    eax,0x320
c000ca00:	75 0a                	jne    c000ca0c <sendKeyboardToken(KeyboardToken)+0x233>
c000ca02:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000ca08:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca0f:	0f b7 c0             	movzx  eax,ax
c000ca12:	3d 21 03 00 00       	cmp    eax,0x321
c000ca17:	75 0a                	jne    c000ca23 <sendKeyboardToken(KeyboardToken)+0x24a>
c000ca19:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000ca1f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca26:	0f b7 c0             	movzx  eax,ax
c000ca29:	3d 00 02 00 00       	cmp    eax,0x200
c000ca2e:	75 2f                	jne    c000ca5f <sendKeyboardToken(KeyboardToken)+0x286>
c000ca30:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000ca35:	83 f0 01             	xor    eax,0x1
c000ca38:	0f b6 c0             	movzx  eax,al
c000ca3b:	85 c0                	test   eax,eax
c000ca3d:	74 20                	je     c000ca5f <sendKeyboardToken(KeyboardToken)+0x286>
c000ca3f:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000ca44:	6a 01                	push   0x1
c000ca46:	6a 00                	push   0x0
c000ca48:	68 22 c6 00 c0       	push   0xc000c622
c000ca4d:	50                   	push   eax
c000ca4e:	e8 29 84 00 00       	call   c0014e7c <Process::createThread(void (*)(void*), void*, int)>
c000ca53:	83 c4 10             	add    esp,0x10
c000ca56:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000ca5d:	eb 3a                	jmp    c000ca99 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca62:	0f b7 c0             	movzx  eax,ax
c000ca65:	3d 01 02 00 00       	cmp    eax,0x201
c000ca6a:	75 2d                	jne    c000ca99 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca6c:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000ca71:	83 f0 01             	xor    eax,0x1
c000ca74:	0f b6 c0             	movzx  eax,al
c000ca77:	85 c0                	test   eax,eax
c000ca79:	74 1e                	je     c000ca99 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca7b:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000ca80:	6a 01                	push   0x1
c000ca82:	6a 00                	push   0x0
c000ca84:	68 90 c6 00 c0       	push   0xc000c690
c000ca89:	50                   	push   eax
c000ca8a:	e8 ed 83 00 00       	call   c0014e7c <Process::createThread(void (*)(void*), void*, int)>
c000ca8f:	83 c4 10             	add    esp,0x10
c000ca92:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000ca99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca9c:	0f b7 c0             	movzx  eax,ax
c000ca9f:	3d 25 03 00 00       	cmp    eax,0x325
c000caa4:	75 06                	jne    c000caac <sendKeyboardToken(KeyboardToken)+0x2d3>
c000caa6:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000caac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caaf:	0f b7 c0             	movzx  eax,ax
c000cab2:	3d 24 03 00 00       	cmp    eax,0x324
c000cab7:	75 06                	jne    c000cabf <sendKeyboardToken(KeyboardToken)+0x2e6>
c000cab9:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000cabf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cac2:	0f b7 c0             	movzx  eax,ax
c000cac5:	3d 23 03 00 00       	cmp    eax,0x323
c000caca:	75 06                	jne    c000cad2 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000cacc:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000cad2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cad5:	0f b7 c0             	movzx  eax,ax
c000cad8:	3d 26 03 00 00       	cmp    eax,0x326
c000cadd:	75 06                	jne    c000cae5 <sendKeyboardToken(KeyboardToken)+0x30c>
c000cadf:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000cae5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cae8:	0f b7 c0             	movzx  eax,ax
c000caeb:	3d 27 03 00 00       	cmp    eax,0x327
c000caf0:	75 06                	jne    c000caf8 <sendKeyboardToken(KeyboardToken)+0x31f>
c000caf2:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000caf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cafb:	0f b7 c0             	movzx  eax,ax
c000cafe:	3d 22 03 00 00       	cmp    eax,0x322
c000cb03:	75 06                	jne    c000cb0b <sendKeyboardToken(KeyboardToken)+0x332>
c000cb05:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000cb0b:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000cb0f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cb12:	83 f0 01             	xor    eax,0x1
c000cb15:	0f b6 c0             	movzx  eax,al
c000cb18:	85 c0                	test   eax,eax
c000cb1a:	74 7c                	je     c000cb98 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000cb1c:	a0 e1 70 02 c0       	mov    al,ds:0xc00270e1
c000cb21:	0f b6 c0             	movzx  eax,al
c000cb24:	85 c0                	test   eax,eax
c000cb26:	74 43                	je     c000cb6b <sendKeyboardToken(KeyboardToken)+0x392>
c000cb28:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb2c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000cb30:	85 c0                	test   eax,eax
c000cb32:	74 2b                	je     c000cb5f <sendKeyboardToken(KeyboardToken)+0x386>
c000cb34:	8b 15 e4 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273e4
c000cb3a:	89 d0                	mov    eax,edx
c000cb3c:	c1 e0 02             	shl    eax,0x2
c000cb3f:	01 d0                	add    eax,edx
c000cb41:	01 c0                	add    eax,eax
c000cb43:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cb48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb4b:	0f b7 c0             	movzx  eax,ax
c000cb4e:	8d 50 d0             	lea    edx,[eax-0x30]
c000cb51:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb56:	01 d0                	add    eax,edx
c000cb58:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cb5d:	eb 71                	jmp    c000cbd0 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb5f:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb69:	eb 65                	jmp    c000cbd0 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb6b:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb70:	85 c0                	test   eax,eax
c000cb72:	74 18                	je     c000cb8c <sendKeyboardToken(KeyboardToken)+0x3b3>
c000cb74:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb79:	0f b6 c0             	movzx  eax,al
c000cb7c:	83 ec 0c             	sub    esp,0xc
c000cb7f:	50                   	push   eax
c000cb80:	e8 79 fb ff ff       	call   c000c6fe <sendKeyToTerminal(unsigned char)>
c000cb85:	83 c4 10             	add    esp,0x10
c000cb88:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb8c:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb96:	eb 38                	jmp    c000cbd0 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb9b:	0f b7 c0             	movzx  eax,ax
c000cb9e:	3d 01 01 00 00       	cmp    eax,0x101
c000cba3:	75 2b                	jne    c000cbd0 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cba5:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cbaa:	85 c0                	test   eax,eax
c000cbac:	74 18                	je     c000cbc6 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000cbae:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cbb3:	0f b6 c0             	movzx  eax,al
c000cbb6:	83 ec 0c             	sub    esp,0xc
c000cbb9:	50                   	push   eax
c000cbba:	e8 3f fb ff ff       	call   c000c6fe <sendKeyToTerminal(unsigned char)>
c000cbbf:	83 c4 10             	add    esp,0x10
c000cbc2:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cbc6:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cbd0:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cbd3:	83 f0 01             	xor    eax,0x1
c000cbd6:	0f b6 c0             	movzx  eax,al
c000cbd9:	85 c0                	test   eax,eax
c000cbdb:	74 5a                	je     c000cc37 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cbdd:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cbe0:	83 f0 01             	xor    eax,0x1
c000cbe3:	0f b6 c0             	movzx  eax,al
c000cbe6:	85 c0                	test   eax,eax
c000cbe8:	74 4d                	je     c000cc37 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cbea:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000cbef:	83 f0 01             	xor    eax,0x1
c000cbf2:	0f b6 c0             	movzx  eax,al
c000cbf5:	85 c0                	test   eax,eax
c000cbf7:	74 3e                	je     c000cc37 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cbf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbfc:	0f b7 c0             	movzx  eax,ax
c000cbff:	83 f8 1f             	cmp    eax,0x1f
c000cc02:	76 0b                	jbe    c000cc0f <sendKeyboardToken(KeyboardToken)+0x436>
c000cc04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc07:	0f b7 c0             	movzx  eax,ax
c000cc0a:	83 f8 7e             	cmp    eax,0x7e
c000cc0d:	76 16                	jbe    c000cc25 <sendKeyboardToken(KeyboardToken)+0x44c>
c000cc0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc12:	0f b7 c0             	movzx  eax,ax
c000cc15:	83 f8 0a             	cmp    eax,0xa
c000cc18:	74 0b                	je     c000cc25 <sendKeyboardToken(KeyboardToken)+0x44c>
c000cc1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc1d:	0f b7 c0             	movzx  eax,ax
c000cc20:	83 f8 08             	cmp    eax,0x8
c000cc23:	75 12                	jne    c000cc37 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cc25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc28:	0f b6 c0             	movzx  eax,al
c000cc2b:	83 ec 0c             	sub    esp,0xc
c000cc2e:	50                   	push   eax
c000cc2f:	e8 ca fa ff ff       	call   c000c6fe <sendKeyToTerminal(unsigned char)>
c000cc34:	83 c4 10             	add    esp,0x10
c000cc37:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cc3a:	83 f0 01             	xor    eax,0x1
c000cc3d:	0f b6 c0             	movzx  eax,al
c000cc40:	85 c0                	test   eax,eax
c000cc42:	74 5d                	je     c000cca1 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc44:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cc47:	83 f0 01             	xor    eax,0x1
c000cc4a:	0f b6 c0             	movzx  eax,al
c000cc4d:	85 c0                	test   eax,eax
c000cc4f:	74 50                	je     c000cca1 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc51:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000cc56:	0f b6 c0             	movzx  eax,al
c000cc59:	85 c0                	test   eax,eax
c000cc5b:	74 44                	je     c000cca1 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc60:	0f b7 c0             	movzx  eax,ax
c000cc63:	83 f8 3f             	cmp    eax,0x3f
c000cc66:	76 39                	jbe    c000cca1 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc6b:	0f b7 c0             	movzx  eax,ax
c000cc6e:	83 f8 7f             	cmp    eax,0x7f
c000cc71:	77 2e                	ja     c000cca1 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc76:	88 c2                	mov    dl,al
c000cc78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc7b:	0f b7 c0             	movzx  eax,ax
c000cc7e:	83 f8 5f             	cmp    eax,0x5f
c000cc81:	76 04                	jbe    c000cc87 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000cc83:	b0 20                	mov    al,0x20
c000cc85:	eb 02                	jmp    c000cc89 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000cc87:	b0 00                	mov    al,0x0
c000cc89:	89 d1                	mov    ecx,edx
c000cc8b:	29 c1                	sub    ecx,eax
c000cc8d:	89 c8                	mov    eax,ecx
c000cc8f:	83 e8 40             	sub    eax,0x40
c000cc92:	0f b6 c0             	movzx  eax,al
c000cc95:	83 ec 0c             	sub    esp,0xc
c000cc98:	50                   	push   eax
c000cc99:	e8 60 fa ff ff       	call   c000c6fe <sendKeyToTerminal(unsigned char)>
c000cc9e:	83 c4 10             	add    esp,0x10
c000cca1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cca4:	0f b7 c0             	movzx  eax,ax
c000cca7:	3d 00 03 00 00       	cmp    eax,0x300
c000ccac:	75 12                	jne    c000ccc0 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000ccae:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ccb1:	83 f0 01             	xor    eax,0x1
c000ccb4:	0f b6 c0             	movzx  eax,al
c000ccb7:	85 c0                	test   eax,eax
c000ccb9:	74 05                	je     c000ccc0 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000ccbb:	e8 2d b8 ff ff       	call   c00084ed <doTerminalCycle()>
c000ccc0:	90                   	nop
c000ccc1:	c9                   	leave  
c000ccc2:	c3                   	ret    

c000ccc3 <clearInternalKeybuffer(VgaText*)>:
c000ccc3:	55                   	push   ebp
c000ccc4:	89 e5                	mov    ebp,esp
c000ccc6:	83 ec 08             	sub    esp,0x8
c000ccc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cccc:	05 02 01 00 00       	add    eax,0x102
c000ccd1:	83 ec 0c             	sub    esp,0xc
c000ccd4:	50                   	push   eax
c000ccd5:	e8 96 38 ff ff       	call   c0000570 <strlen>
c000ccda:	83 c4 10             	add    esp,0x10
c000ccdd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cce0:	81 c2 02 01 00 00    	add    edx,0x102
c000cce6:	83 ec 04             	sub    esp,0x4
c000cce9:	50                   	push   eax
c000ccea:	6a 00                	push   0x0
c000ccec:	52                   	push   edx
c000cced:	e8 fe 37 ff ff       	call   c00004f0 <memset>
c000ccf2:	83 c4 10             	add    esp,0x10
c000ccf5:	90                   	nop
c000ccf6:	c9                   	leave  
c000ccf7:	c3                   	ret    

c000ccf8 <readKeyboard(VgaText*, char*, unsigned long)>:
c000ccf8:	55                   	push   ebp
c000ccf9:	89 e5                	mov    ebp,esp
c000ccfb:	83 ec 18             	sub    esp,0x18
c000ccfe:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000cd03:	85 c0                	test   eax,eax
c000cd05:	74 2a                	je     c000cd31 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000cd07:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000cd0d:	8b 0d c8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fc8
c000cd13:	83 ec 04             	sub    esp,0x4
c000cd16:	68 e0 6f 02 c0       	push   0xc0026fe0
c000cd1b:	83 ec 08             	sub    esp,0x8
c000cd1e:	89 e2                	mov    edx,esp
c000cd20:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000cd23:	89 02                	mov    DWORD PTR [edx],eax
c000cd25:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cd28:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000cd2c:	ff d1                	call   ecx
c000cd2e:	83 c4 10             	add    esp,0x10
c000cd31:	fb                   	sti    
c000cd32:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000cd39:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000cd3d:	0f 84 0d 01 00 00    	je     c000ce50 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000cd43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd46:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cd4c:	0f be c0             	movsx  eax,al
c000cd4f:	85 c0                	test   eax,eax
c000cd51:	75 2c                	jne    c000cd7f <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000cd53:	fa                   	cli    
c000cd54:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd59:	83 c0 01             	add    eax,0x1
c000cd5c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cd61:	e8 66 83 00 00       	call   c00150cc <schedule()>
c000cd66:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd6b:	83 e8 01             	sub    eax,0x1
c000cd6e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cd73:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd78:	85 c0                	test   eax,eax
c000cd7a:	75 c7                	jne    c000cd43 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cd7c:	fb                   	sti    
c000cd7d:	eb c4                	jmp    c000cd43 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cd7f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cd82:	8d 50 01             	lea    edx,[eax+0x1]
c000cd85:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd88:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cd8b:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000cd91:	88 10                	mov    BYTE PTR [eax],dl
c000cd93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd96:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cd9c:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000cd9f:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cda3:	83 f8 03             	cmp    eax,0x3
c000cda6:	75 1e                	jne    c000cdc6 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000cda8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cdad:	8b 00                	mov    eax,DWORD PTR [eax]
c000cdaf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cdb2:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cdb8:	83 ec 08             	sub    esp,0x8
c000cdbb:	6a 02                	push   0x2
c000cdbd:	50                   	push   eax
c000cdbe:	e8 f0 3f 00 00       	call   c0010db3 <KeRaiseSignal(SigHandlerBlock*, int)>
c000cdc3:	83 c4 10             	add    esp,0x10
c000cdc6:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cdca:	83 f8 1c             	cmp    eax,0x1c
c000cdcd:	75 1e                	jne    c000cded <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000cdcf:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cdd4:	8b 00                	mov    eax,DWORD PTR [eax]
c000cdd6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cdd9:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cddf:	83 ec 08             	sub    esp,0x8
c000cde2:	6a 09                	push   0x9
c000cde4:	50                   	push   eax
c000cde5:	e8 c9 3f 00 00       	call   c0010db3 <KeRaiseSignal(SigHandlerBlock*, int)>
c000cdea:	83 c4 10             	add    esp,0x10
c000cded:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdf0:	05 02 01 00 00       	add    eax,0x102
c000cdf5:	83 ec 0c             	sub    esp,0xc
c000cdf8:	50                   	push   eax
c000cdf9:	e8 72 37 ff ff       	call   c0000570 <strlen>
c000cdfe:	83 c4 10             	add    esp,0x10
c000ce01:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ce04:	81 c2 02 01 00 00    	add    edx,0x102
c000ce0a:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ce0d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ce10:	81 c2 02 01 00 00    	add    edx,0x102
c000ce16:	83 ec 04             	sub    esp,0x4
c000ce19:	50                   	push   eax
c000ce1a:	51                   	push   ecx
c000ce1b:	52                   	push   edx
c000ce1c:	e8 af 35 ff ff       	call   c00003d0 <memmove>
c000ce21:	83 c4 10             	add    esp,0x10
c000ce24:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000ce28:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000ce2c:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ce30:	83 f8 0a             	cmp    eax,0xa
c000ce33:	74 16                	je     c000ce4b <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000ce35:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ce39:	83 f8 03             	cmp    eax,0x3
c000ce3c:	74 0d                	je     c000ce4b <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000ce3e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ce42:	83 f8 1c             	cmp    eax,0x1c
c000ce45:	0f 85 ee fe ff ff    	jne    c000cd39 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000ce4b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ce4e:	eb 03                	jmp    c000ce53 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000ce50:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ce53:	c9                   	leave  
c000ce54:	c3                   	ret    
c000ce55:	90                   	nop

c000ce56 <Keyboard::Keyboard(char const*)>:
c000ce56:	83 ec 0c             	sub    esp,0xc
c000ce59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce5d:	83 ec 08             	sub    esp,0x8
c000ce60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce64:	50                   	push   eax
c000ce65:	e8 4c f1 ff ff       	call   c000bfb6 <Device::Device(char const*)>
c000ce6a:	83 c4 10             	add    esp,0x10
c000ce6d:	ba 5c 06 02 c0       	mov    edx,0xc002065c
c000ce72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce76:	89 10                	mov    DWORD PTR [eax],edx
c000ce78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce7c:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000ce86:	c6 05 c4 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026fc4,0x1
c000ce8d:	90                   	nop
c000ce8e:	83 c4 0c             	add    esp,0xc
c000ce91:	c3                   	ret    

c000ce92 <Keyboard::~Keyboard()>:
c000ce92:	83 ec 0c             	sub    esp,0xc
c000ce95:	ba 5c 06 02 c0       	mov    edx,0xc002065c
c000ce9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce9e:	89 10                	mov    DWORD PTR [eax],edx
c000cea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cea4:	83 ec 0c             	sub    esp,0xc
c000cea7:	50                   	push   eax
c000cea8:	e8 73 ee ff ff       	call   c000bd20 <Device::~Device()>
c000cead:	83 c4 10             	add    esp,0x10
c000ceb0:	90                   	nop
c000ceb1:	83 c4 0c             	add    esp,0xc
c000ceb4:	c3                   	ret    
c000ceb5:	90                   	nop

c000ceb6 <Keyboard::~Keyboard()>:
c000ceb6:	83 ec 0c             	sub    esp,0xc
c000ceb9:	83 ec 0c             	sub    esp,0xc
c000cebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cec0:	e8 cd ff ff ff       	call   c000ce92 <Keyboard::~Keyboard()>
c000cec5:	83 c4 10             	add    esp,0x10
c000cec8:	83 ec 08             	sub    esp,0x8
c000cecb:	68 5c 01 00 00       	push   0x15c
c000ced0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced4:	e8 e4 d9 ff ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c000ced9:	83 c4 10             	add    esp,0x10
c000cedc:	83 c4 0c             	add    esp,0xc
c000cedf:	c3                   	ret    

c000cee0 <LogicalDisk::close(int, int, void*)>:
c000cee0:	83 c8 ff             	or     eax,0xffffffff
c000cee3:	c3                   	ret    

c000cee4 <LogicalDisk::~LogicalDisk()>:
c000cee4:	83 ec 0c             	sub    esp,0xc
c000cee7:	ba d4 06 02 c0       	mov    edx,0xc00206d4
c000ceec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cef0:	89 10                	mov    DWORD PTR [eax],edx
c000cef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cef6:	83 ec 0c             	sub    esp,0xc
c000cef9:	50                   	push   eax
c000cefa:	e8 21 ee ff ff       	call   c000bd20 <Device::~Device()>
c000ceff:	83 c4 10             	add    esp,0x10
c000cf02:	90                   	nop
c000cf03:	83 c4 0c             	add    esp,0xc
c000cf06:	c3                   	ret    
c000cf07:	90                   	nop

c000cf08 <LogicalDisk::~LogicalDisk()>:
c000cf08:	83 ec 0c             	sub    esp,0xc
c000cf0b:	83 ec 0c             	sub    esp,0xc
c000cf0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf12:	e8 cd ff ff ff       	call   c000cee4 <LogicalDisk::~LogicalDisk()>
c000cf17:	83 c4 10             	add    esp,0x10
c000cf1a:	83 ec 08             	sub    esp,0x8
c000cf1d:	68 78 01 00 00       	push   0x178
c000cf22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf26:	e8 92 d9 ff ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c000cf2b:	83 c4 10             	add    esp,0x10
c000cf2e:	83 c4 0c             	add    esp,0xc
c000cf31:	c3                   	ret    

c000cf32 <LogicalDisk::open(int, int, void*)>:
c000cf32:	83 ec 18             	sub    esp,0x18
c000cf35:	68 88 06 02 c0       	push   0xc0020688
c000cf3a:	e8 d8 39 00 00       	call   c0010917 <KePanic(char const*)>
c000cf3f:	83 c8 ff             	or     eax,0xffffffff
c000cf42:	83 c4 1c             	add    esp,0x1c
c000cf45:	c3                   	ret    

c000cf46 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000cf46:	53                   	push   ebx
c000cf47:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cf4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cf4f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cf53:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000cf59:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000cf5f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000cf65:	77 10                	ja     c000cf77 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000cf67:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000cf6d:	89 d3                	mov    ebx,edx
c000cf6f:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000cf75:	72 05                	jb     c000cf7c <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000cf77:	83 c8 ff             	or     eax,0xffffffff
c000cf7a:	89 c2                	mov    edx,eax
c000cf7c:	5b                   	pop    ebx
c000cf7d:	c3                   	ret    

c000cf7e <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cf7e:	56                   	push   esi
c000cf7f:	83 c8 ff             	or     eax,0xffffffff
c000cf82:	53                   	push   ebx
c000cf83:	89 c2                	mov    edx,eax
c000cf85:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cf89:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cf8d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cf91:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cf97:	77 27                	ja     c000cfc0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cf99:	89 d8                	mov    eax,ebx
c000cf9b:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cfa1:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cfa7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cfac:	89 c2                	mov    edx,eax
c000cfae:	73 10                	jae    c000cfc0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cfb0:	89 c8                	mov    eax,ecx
c000cfb2:	89 da                	mov    edx,ebx
c000cfb4:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cfba:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000cfc0:	5b                   	pop    ebx
c000cfc1:	5e                   	pop    esi
c000cfc2:	c3                   	ret    
c000cfc3:	90                   	nop

c000cfc4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cfc4:	83 ec 1c             	sub    esp,0x1c
c000cfc7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cfd3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cfd7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cfdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000cfde:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cfe2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cfe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfea:	83 ec 08             	sub    esp,0x8
c000cfed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff1:	50                   	push   eax
c000cff2:	e8 bf ef ff ff       	call   c000bfb6 <Device::Device(char const*)>
c000cff7:	83 c4 10             	add    esp,0x10
c000cffa:	ba d4 06 02 c0       	mov    edx,0xc00206d4
c000cfff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d003:	89 10                	mov    DWORD PTR [eax],edx
c000d005:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d009:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d014:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d01b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d01f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d026:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d02a:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d034:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d038:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d03c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d040:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d046:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d04c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d050:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d053:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d057:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d05d:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d063:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d067:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d06b:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d075:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d07f:	90                   	nop
c000d080:	83 c4 1c             	add    esp,0x1c
c000d083:	c3                   	ret    

c000d084 <LogicalDisk::assignDriveLetter()>:
c000d084:	55                   	push   ebp
c000d085:	57                   	push   edi
c000d086:	56                   	push   esi
c000d087:	53                   	push   ebx
c000d088:	83 ec 14             	sub    esp,0x14
c000d08b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d08f:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d095:	b0 41                	mov    al,0x41
c000d097:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d09d:	84 d2                	test   dl,dl
c000d09f:	75 02                	jne    c000d0a3 <LogicalDisk::assignDriveLetter()+0x1f>
c000d0a1:	b0 43                	mov    al,0x43
c000d0a3:	8b 3d 00 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027400
c000d0a9:	0f b6 ca             	movzx  ecx,dl
c000d0ac:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d0b0:	0f be e8             	movsx  ebp,al
c000d0b3:	8b 3d 04 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027404
c000d0b9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d0bd:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d0c1:	3c 43                	cmp    al,0x43
c000d0c3:	75 10                	jne    c000d0d5 <LogicalDisk::assignDriveLetter()+0x51>
c000d0c5:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d0cc:	75 5a                	jne    c000d128 <LogicalDisk::assignDriveLetter()+0xa4>
c000d0ce:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d0d3:	75 53                	jne    c000d128 <LogicalDisk::assignDriveLetter()+0xa4>
c000d0d5:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d0d8:	ba 01 00 00 00       	mov    edx,0x1
c000d0dd:	89 34 24             	mov    DWORD PTR [esp],esi
c000d0e0:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d0e3:	d3 e2                	shl    edx,cl
c000d0e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d0e9:	89 d7                	mov    edi,edx
c000d0eb:	89 d6                	mov    esi,edx
c000d0ed:	c1 ff 1f             	sar    edi,0x1f
c000d0f0:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d0f4:	21 f9                	and    ecx,edi
c000d0f6:	09 d1                	or     ecx,edx
c000d0f8:	75 2e                	jne    c000d128 <LogicalDisk::assignDriveLetter()+0xa4>
c000d0fa:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d0fe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d102:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d108:	09 f2                	or     edx,esi
c000d10a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d10d:	89 15 00 74 02 c0    	mov    DWORD PTR ds:0xc0027400,edx
c000d113:	89 1c b5 20 74 02 c0 	mov    DWORD PTR [esi*4-0x3ffd8be0],ebx
c000d11a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d11e:	09 fa                	or     edx,edi
c000d120:	89 15 04 74 02 c0    	mov    DWORD PTR ds:0xc0027404,edx
c000d126:	eb 0d                	jmp    c000d135 <LogicalDisk::assignDriveLetter()+0xb1>
c000d128:	8d 50 01             	lea    edx,[eax+0x1]
c000d12b:	45                   	inc    ebp
c000d12c:	88 d0                	mov    al,dl
c000d12e:	80 fa 5b             	cmp    dl,0x5b
c000d131:	75 8e                	jne    c000d0c1 <LogicalDisk::assignDriveLetter()+0x3d>
c000d133:	31 c0                	xor    eax,eax
c000d135:	83 c4 14             	add    esp,0x14
c000d138:	5b                   	pop    ebx
c000d139:	5e                   	pop    esi
c000d13a:	5f                   	pop    edi
c000d13b:	5d                   	pop    ebp
c000d13c:	c3                   	ret    
c000d13d:	90                   	nop

c000d13e <LogicalDisk::mount()>:
c000d13e:	56                   	push   esi
c000d13f:	53                   	push   ebx
c000d140:	53                   	push   ebx
c000d141:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d145:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c000d14b:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d155:	85 db                	test   ebx,ebx
c000d157:	74 27                	je     c000d180 <LogicalDisk::mount()+0x42>
c000d159:	51                   	push   ecx
c000d15a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d161:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d163:	83 e8 41             	sub    eax,0x41
c000d166:	50                   	push   eax
c000d167:	56                   	push   esi
c000d168:	53                   	push   ebx
c000d169:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d16c:	83 c4 10             	add    esp,0x10
c000d16f:	84 c0                	test   al,al
c000d171:	74 08                	je     c000d17b <LogicalDisk::mount()+0x3d>
c000d173:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d179:	eb 07                	jmp    c000d182 <LogicalDisk::mount()+0x44>
c000d17b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d17e:	eb d5                	jmp    c000d155 <LogicalDisk::mount()+0x17>
c000d180:	31 c0                	xor    eax,eax
c000d182:	5a                   	pop    edx
c000d183:	5b                   	pop    ebx
c000d184:	5e                   	pop    esi
c000d185:	c3                   	ret    

c000d186 <LogicalDisk::unmount()>:
c000d186:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d18a:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d194:	c3                   	ret    
c000d195:	90                   	nop

c000d196 <LogicalDisk::eject()>:
c000d196:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d19a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d1a0:	8b 10                	mov    edx,DWORD PTR [eax]
c000d1a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d1a6:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d1a9:	90                   	nop

c000d1aa <LogicalDisk::unassignDriveLetter()>:
c000d1aa:	57                   	push   edi
c000d1ab:	56                   	push   esi
c000d1ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1b0:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d1b7:	85 c9                	test   ecx,ecx
c000d1b9:	75 0f                	jne    c000d1ca <LogicalDisk::unassignDriveLetter()+0x20>
c000d1bb:	c7 44 24 0c ac 06 02 c0 	mov    DWORD PTR [esp+0xc],0xc00206ac
c000d1c3:	5e                   	pop    esi
c000d1c4:	5f                   	pop    edi
c000d1c5:	e9 4d 37 00 00       	jmp    c0010917 <KePanic(char const*)>
c000d1ca:	83 e9 41             	sub    ecx,0x41
c000d1cd:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d1d4:	b8 01 00 00 00       	mov    eax,0x1
c000d1d9:	c7 04 8d 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd8be0],0x0
c000d1e4:	d3 e0                	shl    eax,cl
c000d1e6:	89 c7                	mov    edi,eax
c000d1e8:	f7 d0                	not    eax
c000d1ea:	c1 ff 1f             	sar    edi,0x1f
c000d1ed:	21 05 00 74 02 c0    	and    DWORD PTR ds:0xc0027400,eax
c000d1f3:	89 fe                	mov    esi,edi
c000d1f5:	f7 d6                	not    esi
c000d1f7:	21 35 04 74 02 c0    	and    DWORD PTR ds:0xc0027404,esi
c000d1fd:	5e                   	pop    esi
c000d1fe:	5f                   	pop    edi
c000d1ff:	c3                   	ret    

c000d200 <LogicalDisk::read(unsigned long long, int, void*)>:
c000d200:	57                   	push   edi
c000d201:	56                   	push   esi
c000d202:	53                   	push   ebx
c000d203:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d207:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d20b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d20f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d213:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d219:	77 41                	ja     c000d25c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d21b:	99                   	cdq    
c000d21c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d222:	01 c8                	add    eax,ecx
c000d224:	11 da                	adc    edx,ebx
c000d226:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d22c:	19 d7                	sbb    edi,edx
c000d22e:	72 33                	jb     c000d263 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d230:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d236:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d23c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d240:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d244:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d24a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d250:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d254:	5b                   	pop    ebx
c000d255:	5e                   	pop    esi
c000d256:	5f                   	pop    edi
c000d257:	e9 c6 0a 00 00       	jmp    c000dd22 <VCache::read(unsigned long long, int, void*)>
c000d25c:	b8 05 00 00 00       	mov    eax,0x5
c000d261:	eb 05                	jmp    c000d268 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d263:	b8 07 00 00 00       	mov    eax,0x7
c000d268:	5b                   	pop    ebx
c000d269:	5e                   	pop    esi
c000d26a:	5f                   	pop    edi
c000d26b:	c3                   	ret    

c000d26c <LogicalDisk::write(unsigned long long, int, void*)>:
c000d26c:	57                   	push   edi
c000d26d:	56                   	push   esi
c000d26e:	53                   	push   ebx
c000d26f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d273:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d277:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d27b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d27f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d285:	77 41                	ja     c000d2c8 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d287:	99                   	cdq    
c000d288:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d28e:	01 c8                	add    eax,ecx
c000d290:	11 da                	adc    edx,ebx
c000d292:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d298:	19 d7                	sbb    edi,edx
c000d29a:	72 33                	jb     c000d2cf <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d29c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d2a2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d2a8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d2ac:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d2b0:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d2b6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d2bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2c0:	5b                   	pop    ebx
c000d2c1:	5e                   	pop    esi
c000d2c2:	5f                   	pop    edi
c000d2c3:	e9 6c 09 00 00       	jmp    c000dc34 <VCache::write(unsigned long long, int, void*)>
c000d2c8:	b8 05 00 00 00       	mov    eax,0x5
c000d2cd:	eb 05                	jmp    c000d2d4 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d2cf:	b8 07 00 00 00       	mov    eax,0x7
c000d2d4:	5b                   	pop    ebx
c000d2d5:	5e                   	pop    esi
c000d2d6:	5f                   	pop    edi
c000d2d7:	c3                   	ret    

c000d2d8 <Mouse::Mouse(char const*)>:
c000d2d8:	83 ec 0c             	sub    esp,0xc
c000d2db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2df:	83 ec 08             	sub    esp,0x8
c000d2e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2e6:	50                   	push   eax
c000d2e7:	e8 ca ec ff ff       	call   c000bfb6 <Device::Device(char const*)>
c000d2ec:	83 c4 10             	add    esp,0x10
c000d2ef:	ba 00 07 02 c0       	mov    edx,0xc0020700
c000d2f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2f8:	89 10                	mov    DWORD PTR [eax],edx
c000d2fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2fe:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d308:	90                   	nop
c000d309:	83 c4 0c             	add    esp,0xc
c000d30c:	c3                   	ret    
c000d30d:	90                   	nop
c000d30e:	66 90                	xchg   ax,ax

c000d310 <Mouse::~Mouse()>:
c000d310:	83 ec 0c             	sub    esp,0xc
c000d313:	ba 00 07 02 c0       	mov    edx,0xc0020700
c000d318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d31c:	89 10                	mov    DWORD PTR [eax],edx
c000d31e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d322:	83 ec 0c             	sub    esp,0xc
c000d325:	50                   	push   eax
c000d326:	e8 f5 e9 ff ff       	call   c000bd20 <Device::~Device()>
c000d32b:	83 c4 10             	add    esp,0x10
c000d32e:	90                   	nop
c000d32f:	83 c4 0c             	add    esp,0xc
c000d332:	c3                   	ret    
c000d333:	90                   	nop

c000d334 <Mouse::~Mouse()>:
c000d334:	83 ec 0c             	sub    esp,0xc
c000d337:	83 ec 0c             	sub    esp,0xc
c000d33a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d33e:	e8 cd ff ff ff       	call   c000d310 <Mouse::~Mouse()>
c000d343:	83 c4 10             	add    esp,0x10
c000d346:	83 ec 08             	sub    esp,0x8
c000d349:	68 58 01 00 00       	push   0x158
c000d34e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d352:	e8 66 d5 ff ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c000d357:	83 c4 10             	add    esp,0x10
c000d35a:	83 c4 0c             	add    esp,0xc
c000d35d:	c3                   	ret    

c000d35e <NIC::getMAC()>:
c000d35e:	31 c0                	xor    eax,eax
c000d360:	31 d2                	xor    edx,edx
c000d362:	c3                   	ret    
c000d363:	90                   	nop

c000d364 <NIC::write(int, unsigned char*, int*)>:
c000d364:	b8 01 00 00 00       	mov    eax,0x1
c000d369:	c3                   	ret    

c000d36a <NIC::NIC(char const*)>:
c000d36a:	83 ec 0c             	sub    esp,0xc
c000d36d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d371:	83 ec 08             	sub    esp,0x8
c000d374:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d378:	50                   	push   eax
c000d379:	e8 38 ec ff ff       	call   c000bfb6 <Device::Device(char const*)>
c000d37e:	83 c4 10             	add    esp,0x10
c000d381:	ba 2c 07 02 c0       	mov    edx,0xc002072c
c000d386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d38a:	89 10                	mov    DWORD PTR [eax],edx
c000d38c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d390:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000d39a:	90                   	nop
c000d39b:	83 c4 0c             	add    esp,0xc
c000d39e:	c3                   	ret    
c000d39f:	90                   	nop

c000d3a0 <NIC::~NIC()>:
c000d3a0:	83 ec 0c             	sub    esp,0xc
c000d3a3:	ba 2c 07 02 c0       	mov    edx,0xc002072c
c000d3a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3ac:	89 10                	mov    DWORD PTR [eax],edx
c000d3ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3b2:	83 ec 0c             	sub    esp,0xc
c000d3b5:	50                   	push   eax
c000d3b6:	e8 65 e9 ff ff       	call   c000bd20 <Device::~Device()>
c000d3bb:	83 c4 10             	add    esp,0x10
c000d3be:	90                   	nop
c000d3bf:	83 c4 0c             	add    esp,0xc
c000d3c2:	c3                   	ret    
c000d3c3:	90                   	nop

c000d3c4 <NIC::~NIC()>:
c000d3c4:	83 ec 0c             	sub    esp,0xc
c000d3c7:	83 ec 0c             	sub    esp,0xc
c000d3ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ce:	e8 cd ff ff ff       	call   c000d3a0 <NIC::~NIC()>
c000d3d3:	83 c4 10             	add    esp,0x10
c000d3d6:	83 ec 08             	sub    esp,0x8
c000d3d9:	68 58 01 00 00       	push   0x158
c000d3de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3e2:	e8 d6 d4 ff ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c000d3e7:	83 c4 10             	add    esp,0x10
c000d3ea:	83 c4 0c             	add    esp,0xc
c000d3ed:	c3                   	ret    

c000d3ee <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d3ee:	55                   	push   ebp
c000d3ef:	57                   	push   edi
c000d3f0:	56                   	push   esi
c000d3f1:	53                   	push   ebx
c000d3f2:	81 ec 28 01 00 00    	sub    esp,0x128
c000d3f8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000d3ff:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000d406:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000d40d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000d414:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d418:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d41c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d423:	e8 8a ec ff ff       	call   c000c0b2 <Device::getName()>
c000d428:	5a                   	pop    edx
c000d429:	59                   	pop    ecx
c000d42a:	50                   	push   eax
c000d42b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d42f:	55                   	push   ebp
c000d430:	e8 0b 32 ff ff       	call   c0000640 <strcpy>
c000d435:	5b                   	pop    ebx
c000d436:	58                   	pop    eax
c000d437:	68 58 07 02 c0       	push   0xc0020758
c000d43c:	55                   	push   ebp
c000d43d:	e8 fe 33 ff ff       	call   c0000840 <strcat>
c000d442:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000d449:	e8 60 a6 ff ff       	call   c0007aae <malloc>
c000d44e:	83 c4 0c             	add    esp,0xc
c000d451:	89 c3                	mov    ebx,eax
c000d453:	57                   	push   edi
c000d454:	56                   	push   esi
c000d455:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d459:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d45d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d464:	55                   	push   ebp
c000d465:	50                   	push   eax
c000d466:	e8 59 fb ff ff       	call   c000cfc4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d46b:	83 c4 14             	add    esp,0x14
c000d46e:	53                   	push   ebx
c000d46f:	e8 10 fc ff ff       	call   c000d084 <LogicalDisk::assignDriveLetter()>
c000d474:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d477:	e8 c2 fc ff ff       	call   c000d13e <LogicalDisk::mount()>
c000d47c:	58                   	pop    eax
c000d47d:	5a                   	pop    edx
c000d47e:	53                   	push   ebx
c000d47f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d486:	e8 93 e9 ff ff       	call   c000be1e <Device::addChild(Device*)>
c000d48b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d491:	5b                   	pop    ebx
c000d492:	5e                   	pop    esi
c000d493:	5f                   	pop    edi
c000d494:	5d                   	pop    ebp
c000d495:	c3                   	ret    

c000d496 <createPartitionsForDisk(PhysicalDisk*)>:
c000d496:	55                   	push   ebp
c000d497:	57                   	push   edi
c000d498:	56                   	push   esi
c000d499:	53                   	push   ebx
c000d49a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d4a0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d4a7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d4ad:	3d 00 02 00 00       	cmp    eax,0x200
c000d4b2:	74 27                	je     c000d4db <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d4b4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d4ba:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d4c0:	83 ec 10             	sub    esp,0x10
c000d4c3:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d4c7:	99                   	cdq    
c000d4c8:	c1 e6 0a             	shl    esi,0xa
c000d4cb:	52                   	push   edx
c000d4cc:	89 fd                	mov    ebp,edi
c000d4ce:	50                   	push   eax
c000d4cf:	55                   	push   ebp
c000d4d0:	56                   	push   esi
c000d4d1:	e8 8a 11 01 00       	call   c001e660 <__udivdi3>
c000d4d6:	e9 b9 00 00 00       	jmp    c000d594 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d4db:	83 ec 0c             	sub    esp,0xc
c000d4de:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d4e0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d4e4:	56                   	push   esi
c000d4e5:	6a 01                	push   0x1
c000d4e7:	6a 00                	push   0x0
c000d4e9:	6a 00                	push   0x0
c000d4eb:	53                   	push   ebx
c000d4ec:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d4ef:	83 c4 20             	add    esp,0x20
c000d4f2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d4fa:	75 0a                	jne    c000d506 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d4fc:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d504:	74 2c                	je     c000d532 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d506:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d50c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d512:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d518:	83 ec 10             	sub    esp,0x10
c000d51b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d51f:	89 f7                	mov    edi,esi
c000d521:	c1 e0 0a             	shl    eax,0xa
c000d524:	c1 ff 1f             	sar    edi,0x1f
c000d527:	57                   	push   edi
c000d528:	56                   	push   esi
c000d529:	52                   	push   edx
c000d52a:	50                   	push   eax
c000d52b:	e8 30 11 01 00       	call   c001e660 <__udivdi3>
c000d530:	eb 62                	jmp    c000d594 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d532:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d539:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000d540:	89 cf                	mov    edi,ecx
c000d542:	83 e2 7f             	and    edx,0x7f
c000d545:	83 e7 7f             	and    edi,0x7f
c000d548:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d54f:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000d552:	83 e0 7f             	and    eax,0x7f
c000d555:	8d 14 01             	lea    edx,[ecx+eax*1]
c000d558:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d55f:	83 e0 7f             	and    eax,0x7f
c000d562:	01 d0                	add    eax,edx
c000d564:	89 c5                	mov    ebp,eax
c000d566:	84 c0                	test   al,al
c000d568:	74 41                	je     c000d5ab <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000d56a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d570:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d576:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d57c:	83 ec 10             	sub    esp,0x10
c000d57f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d583:	89 f7                	mov    edi,esi
c000d585:	c1 e0 0a             	shl    eax,0xa
c000d588:	c1 ff 1f             	sar    edi,0x1f
c000d58b:	57                   	push   edi
c000d58c:	56                   	push   esi
c000d58d:	52                   	push   edx
c000d58e:	50                   	push   eax
c000d58f:	e8 cc 10 01 00       	call   c001e660 <__udivdi3>
c000d594:	83 c4 14             	add    esp,0x14
c000d597:	52                   	push   edx
c000d598:	50                   	push   eax
c000d599:	6a 00                	push   0x0
c000d59b:	6a 00                	push   0x0
c000d59d:	53                   	push   ebx
c000d59e:	e8 4b fe ff ff       	call   c000d3ee <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d5a3:	83 c4 20             	add    esp,0x20
c000d5a6:	e9 73 01 00 00       	jmp    c000d71e <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000d5ab:	89 f0                	mov    eax,esi
c000d5ad:	31 c9                	xor    ecx,ecx
c000d5af:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d5b6:	75 02                	jne    c000d5ba <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000d5b8:	89 cd                	mov    ebp,ecx
c000d5ba:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d5c1:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000d5c8:	c1 e2 08             	shl    edx,0x8
c000d5cb:	c1 e6 10             	shl    esi,0x10
c000d5ce:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000d5d6:	09 f2                	or     edx,esi
c000d5d8:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000d5e0:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000d5e7:	83 c0 10             	add    eax,0x10
c000d5ea:	09 f2                	or     edx,esi
c000d5ec:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000d5f3:	c1 e6 18             	shl    esi,0x18
c000d5f6:	09 f2                	or     edx,esi
c000d5f8:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000d5ff:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000d603:	c1 e6 10             	shl    esi,0x10
c000d606:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d60d:	c1 e2 08             	shl    edx,0x8
c000d610:	09 f2                	or     edx,esi
c000d612:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000d619:	09 f2                	or     edx,esi
c000d61b:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000d622:	c1 e6 18             	shl    esi,0x18
c000d625:	09 f2                	or     edx,esi
c000d627:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000d62b:	41                   	inc    ecx
c000d62c:	83 f9 04             	cmp    ecx,0x4
c000d62f:	0f 85 7a ff ff ff    	jne    c000d5af <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000d635:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d639:	83 f0 01             	xor    eax,0x1
c000d63c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d640:	75 4f                	jne    c000d691 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d642:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d646:	83 f0 01             	xor    eax,0x1
c000d649:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d64d:	75 42                	jne    c000d691 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d64f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d657:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d65f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d665:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d66b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d671:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d675:	89 f7                	mov    edi,esi
c000d677:	c1 e0 0a             	shl    eax,0xa
c000d67a:	c1 ff 1f             	sar    edi,0x1f
c000d67d:	57                   	push   edi
c000d67e:	56                   	push   esi
c000d67f:	52                   	push   edx
c000d680:	50                   	push   eax
c000d681:	e8 da 0f 01 00       	call   c001e660 <__udivdi3>
c000d686:	83 c4 10             	add    esp,0x10
c000d689:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d68d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d691:	89 e8                	mov    eax,ebp
c000d693:	0f b6 e8             	movzx  ebp,al
c000d696:	85 ed                	test   ebp,ebp
c000d698:	74 50                	je     c000d6ea <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d69a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d69e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d6a2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d6a6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d6aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6ae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6b2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d6b6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d6ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d6be:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d6c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d6c6:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000d6ca:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000d6ce:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d6d2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d6d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d6da:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000d6de:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000d6e2:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000d6e6:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000d6ea:	31 ed                	xor    ebp,ebp
c000d6ec:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d6f0:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d6f4:	89 f8                	mov    eax,edi
c000d6f6:	09 f0                	or     eax,esi
c000d6f8:	74 1e                	je     c000d718 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d6fa:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d6fe:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d702:	89 d1                	mov    ecx,edx
c000d704:	09 c1                	or     ecx,eax
c000d706:	74 10                	je     c000d718 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d708:	83 ec 0c             	sub    esp,0xc
c000d70b:	57                   	push   edi
c000d70c:	56                   	push   esi
c000d70d:	52                   	push   edx
c000d70e:	50                   	push   eax
c000d70f:	53                   	push   ebx
c000d710:	e8 d9 fc ff ff       	call   c000d3ee <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d715:	83 c4 20             	add    esp,0x20
c000d718:	45                   	inc    ebp
c000d719:	83 fd 04             	cmp    ebp,0x4
c000d71c:	75 ce                	jne    c000d6ec <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000d71e:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d724:	5b                   	pop    ebx
c000d725:	5e                   	pop    esi
c000d726:	5f                   	pop    edi
c000d727:	5d                   	pop    ebp
c000d728:	c3                   	ret    
c000d729:	66 90                	xchg   ax,ax
c000d72b:	90                   	nop

c000d72c <Serial::Serial(char const*)>:
c000d72c:	83 ec 0c             	sub    esp,0xc
c000d72f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d733:	83 ec 08             	sub    esp,0x8
c000d736:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d73a:	50                   	push   eax
c000d73b:	e8 76 e8 ff ff       	call   c000bfb6 <Device::Device(char const*)>
c000d740:	83 c4 10             	add    esp,0x10
c000d743:	ba 6c 07 02 c0       	mov    edx,0xc002076c
c000d748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d74c:	89 10                	mov    DWORD PTR [eax],edx
c000d74e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d752:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d75c:	90                   	nop
c000d75d:	83 c4 0c             	add    esp,0xc
c000d760:	c3                   	ret    
c000d761:	90                   	nop
c000d762:	66 90                	xchg   ax,ax

c000d764 <Serial::~Serial()>:
c000d764:	83 ec 0c             	sub    esp,0xc
c000d767:	ba 6c 07 02 c0       	mov    edx,0xc002076c
c000d76c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d770:	89 10                	mov    DWORD PTR [eax],edx
c000d772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d776:	83 ec 0c             	sub    esp,0xc
c000d779:	50                   	push   eax
c000d77a:	e8 a1 e5 ff ff       	call   c000bd20 <Device::~Device()>
c000d77f:	83 c4 10             	add    esp,0x10
c000d782:	90                   	nop
c000d783:	83 c4 0c             	add    esp,0xc
c000d786:	c3                   	ret    
c000d787:	90                   	nop

c000d788 <Serial::~Serial()>:
c000d788:	83 ec 0c             	sub    esp,0xc
c000d78b:	83 ec 0c             	sub    esp,0xc
c000d78e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d792:	e8 cd ff ff ff       	call   c000d764 <Serial::~Serial()>
c000d797:	83 c4 10             	add    esp,0x10
c000d79a:	83 ec 08             	sub    esp,0x8
c000d79d:	68 58 01 00 00       	push   0x158
c000d7a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7a6:	e8 12 d1 ff ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c000d7ab:	83 c4 10             	add    esp,0x10
c000d7ae:	83 c4 0c             	add    esp,0xc
c000d7b1:	c3                   	ret    
c000d7b2:	66 90                	xchg   ax,ax

c000d7b4 <Timer::Timer(char const*)>:
c000d7b4:	83 ec 0c             	sub    esp,0xc
c000d7b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7bb:	83 ec 08             	sub    esp,0x8
c000d7be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7c2:	50                   	push   eax
c000d7c3:	e8 ee e7 ff ff       	call   c000bfb6 <Device::Device(char const*)>
c000d7c8:	83 c4 10             	add    esp,0x10
c000d7cb:	ba b0 07 02 c0       	mov    edx,0xc00207b0
c000d7d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7d4:	89 10                	mov    DWORD PTR [eax],edx
c000d7d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7da:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000d7e4:	90                   	nop
c000d7e5:	83 c4 0c             	add    esp,0xc
c000d7e8:	c3                   	ret    
c000d7e9:	90                   	nop
c000d7ea:	66 90                	xchg   ax,ax

c000d7ec <Timer::~Timer()>:
c000d7ec:	83 ec 0c             	sub    esp,0xc
c000d7ef:	ba b0 07 02 c0       	mov    edx,0xc00207b0
c000d7f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f8:	89 10                	mov    DWORD PTR [eax],edx
c000d7fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7fe:	83 ec 0c             	sub    esp,0xc
c000d801:	50                   	push   eax
c000d802:	e8 19 e5 ff ff       	call   c000bd20 <Device::~Device()>
c000d807:	83 c4 10             	add    esp,0x10
c000d80a:	90                   	nop
c000d80b:	83 c4 0c             	add    esp,0xc
c000d80e:	c3                   	ret    
c000d80f:	90                   	nop

c000d810 <Timer::~Timer()>:
c000d810:	83 ec 0c             	sub    esp,0xc
c000d813:	83 ec 0c             	sub    esp,0xc
c000d816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d81a:	e8 cd ff ff ff       	call   c000d7ec <Timer::~Timer()>
c000d81f:	83 c4 10             	add    esp,0x10
c000d822:	83 ec 08             	sub    esp,0x8
c000d825:	68 5c 01 00 00       	push   0x15c
c000d82a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d82e:	e8 8a d0 ff ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c000d833:	83 c4 10             	add    esp,0x10
c000d836:	83 c4 0c             	add    esp,0xc
c000d839:	c3                   	ret    

c000d83a <Timer::read()>:
c000d83a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d83e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d844:	c3                   	ret    

c000d845 <setupTimer(int)>:
c000d845:	53                   	push   ebx
c000d846:	83 ec 14             	sub    esp,0x14
c000d849:	68 5c 01 00 00       	push   0x15c
c000d84e:	e8 5b a2 ff ff       	call   c0007aae <malloc>
c000d853:	89 04 24             	mov    DWORD PTR [esp],eax
c000d856:	89 c3                	mov    ebx,eax
c000d858:	e8 6b 06 01 00       	call   c001dec8 <PIT::PIT()>
c000d85d:	58                   	pop    eax
c000d85e:	5a                   	pop    edx
c000d85f:	53                   	push   ebx
c000d860:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000d866:	e8 b3 e5 ff ff       	call   c000be1e <Device::addChild(Device*)>
c000d86b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d86d:	6a 00                	push   0x0
c000d86f:	6a 00                	push   0x0
c000d871:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d875:	53                   	push   ebx
c000d876:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d879:	89 d8                	mov    eax,ebx
c000d87b:	83 c4 28             	add    esp,0x28
c000d87e:	5b                   	pop    ebx
c000d87f:	c3                   	ret    

c000d880 <timerHandler(unsigned int)>:
c000d880:	56                   	push   esi
c000d881:	53                   	push   ebx
c000d882:	51                   	push   ecx
c000d883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d887:	01 05 8c 74 02 c0    	add    DWORD PTR ds:0xc002748c,eax
c000d88d:	80 3d bd 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebd,0x0
c000d894:	0f 84 4a 01 00 00    	je     c000d9e4 <timerHandler(unsigned int)+0x164>
c000d89a:	fa                   	cli    
c000d89b:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d8a1:	83 ec 0c             	sub    esp,0xc
c000d8a4:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c000d8aa:	68 78 81 02 c0       	push   0xc0028178
c000d8af:	e8 7c 13 01 00       	call   c001ec30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d8b4:	83 c4 10             	add    esp,0x10
c000d8b7:	84 c0                	test   al,al
c000d8b9:	0f 85 a1 00 00 00    	jne    c000d960 <timerHandler(unsigned int)+0xe0>
c000d8bf:	83 ec 0c             	sub    esp,0xc
c000d8c2:	68 78 81 02 c0       	push   0xc0028178
c000d8c7:	e8 80 13 01 00       	call   c001ec4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8cc:	83 c4 10             	add    esp,0x10
c000d8cf:	89 c6                	mov    esi,eax
c000d8d1:	8d 76 00             	lea    esi,[esi+0x0]
c000d8d4:	83 ec 0c             	sub    esp,0xc
c000d8d7:	68 78 81 02 c0       	push   0xc0028178
c000d8dc:	e8 6b 13 01 00       	call   c001ec4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8e1:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c000d8e8:	89 c3                	mov    ebx,eax
c000d8ea:	e8 65 13 01 00       	call   c001ec54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d8ef:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d8f2:	83 c4 10             	add    esp,0x10
c000d8f5:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c000d8fb:	77 23                	ja     c000d920 <timerHandler(unsigned int)+0xa0>
c000d8fd:	83 ec 0c             	sub    esp,0xc
c000d900:	53                   	push   ebx
c000d901:	e8 de 7c 00 00       	call   c00155e4 <unblockTask(ThreadControlBlock*)>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	39 de                	cmp    esi,ebx
c000d90b:	75 27                	jne    c000d934 <timerHandler(unsigned int)+0xb4>
c000d90d:	83 ec 0c             	sub    esp,0xc
c000d910:	68 78 81 02 c0       	push   0xc0028178
c000d915:	e8 32 13 01 00       	call   c001ec4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d91a:	89 c6                	mov    esi,eax
c000d91c:	eb 12                	jmp    c000d930 <timerHandler(unsigned int)+0xb0>
c000d91e:	66 90                	xchg   ax,ax
c000d920:	52                   	push   edx
c000d921:	52                   	push   edx
c000d922:	53                   	push   ebx
c000d923:	68 78 81 02 c0       	push   0xc0028178
c000d928:	e8 e3 13 01 00       	call   c001ed10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d92d:	8d 76 00             	lea    esi,[esi+0x0]
c000d930:	83 c4 10             	add    esp,0x10
c000d933:	90                   	nop
c000d934:	83 ec 0c             	sub    esp,0xc
c000d937:	68 78 81 02 c0       	push   0xc0028178
c000d93c:	e8 ef 12 01 00       	call   c001ec30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d941:	83 c4 10             	add    esp,0x10
c000d944:	84 c0                	test   al,al
c000d946:	75 18                	jne    c000d960 <timerHandler(unsigned int)+0xe0>
c000d948:	83 ec 0c             	sub    esp,0xc
c000d94b:	68 78 81 02 c0       	push   0xc0028178
c000d950:	e8 f7 12 01 00       	call   c001ec4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d955:	83 c4 10             	add    esp,0x10
c000d958:	39 f0                	cmp    eax,esi
c000d95a:	0f 85 74 ff ff ff    	jne    c000d8d4 <timerHandler(unsigned int)+0x54>
c000d960:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d965:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d969:	74 41                	je     c000d9ac <timerHandler(unsigned int)+0x12c>
c000d96b:	80 3d bc 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebc,0x0
c000d972:	74 38                	je     c000d9ac <timerHandler(unsigned int)+0x12c>
c000d974:	fa                   	cli    
c000d975:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d97b:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c000d980:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d986:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d989:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d98f:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d992:	72 08                	jb     c000d99c <timerHandler(unsigned int)+0x11c>
c000d994:	e8 33 77 00 00       	call   c00150cc <schedule()>
c000d999:	8d 76 00             	lea    esi,[esi+0x0]
c000d99c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d9a1:	48                   	dec    eax
c000d9a2:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d9a7:	75 03                	jne    c000d9ac <timerHandler(unsigned int)+0x12c>
c000d9a9:	fb                   	sti    
c000d9aa:	66 90                	xchg   ax,ax
c000d9ac:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000d9b1:	48                   	dec    eax
c000d9b2:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000d9b7:	75 1b                	jne    c000d9d4 <timerHandler(unsigned int)+0x154>
c000d9b9:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c000d9c0:	74 12                	je     c000d9d4 <timerHandler(unsigned int)+0x154>
c000d9c2:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000d9cc:	e8 fb 76 00 00       	call   c00150cc <schedule()>
c000d9d1:	8d 76 00             	lea    esi,[esi+0x0]
c000d9d4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d9d9:	48                   	dec    eax
c000d9da:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d9df:	75 03                	jne    c000d9e4 <timerHandler(unsigned int)+0x164>
c000d9e1:	fb                   	sti    
c000d9e2:	66 90                	xchg   ax,ax
c000d9e4:	58                   	pop    eax
c000d9e5:	5b                   	pop    ebx
c000d9e6:	5e                   	pop    esi
c000d9e7:	c3                   	ret    

c000d9e8 <VCache::VCache(PhysicalDisk*)>:
c000d9e8:	53                   	push   ebx
c000d9e9:	83 ec 18             	sub    esp,0x18
c000d9ec:	ba e0 07 02 c0       	mov    edx,0xc00207e0
c000d9f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9f5:	89 10                	mov    DWORD PTR [eax],edx
c000d9f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9fb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000da02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da06:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000da0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da11:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000da18:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000da1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da23:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000da2a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000da31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da35:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000da3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da40:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000da44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da48:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000da4f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000da56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da5a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000da5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da62:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000da66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da6a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000da6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da72:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000da79:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000da81:	83 ec 0c             	sub    esp,0xc
c000da84:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000da88:	e8 21 a0 ff ff       	call   c0007aae <malloc>
c000da8d:	83 c4 10             	add    esp,0x10
c000da90:	89 c3                	mov    ebx,eax
c000da92:	83 ec 0c             	sub    esp,0xc
c000da95:	53                   	push   ebx
c000da96:	e8 cd 73 00 00       	call   c0014e68 <Mutex::Mutex()>
c000da9b:	83 c4 10             	add    esp,0x10
c000da9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daa2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000daa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daa9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000daad:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000dab0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dab4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000dabb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dabf:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000dac5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dac9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dacc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dad0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000dad6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000dadc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dae0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000dae3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000dae6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daea:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000daee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000daf2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000daf8:	05 00 02 00 00       	add    eax,0x200
c000dafd:	c1 e0 03             	shl    eax,0x3
c000db00:	83 ec 0c             	sub    esp,0xc
c000db03:	50                   	push   eax
c000db04:	e8 a5 9f ff ff       	call   c0007aae <malloc>
c000db09:	83 c4 10             	add    esp,0x10
c000db0c:	89 c2                	mov    edx,eax
c000db0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db12:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000db15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db19:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000db20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db24:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000db28:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db2c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000db32:	89 d0                	mov    eax,edx
c000db34:	c1 e0 02             	shl    eax,0x2
c000db37:	01 d0                	add    eax,edx
c000db39:	c1 e0 04             	shl    eax,0x4
c000db3c:	83 ec 0c             	sub    esp,0xc
c000db3f:	50                   	push   eax
c000db40:	e8 69 9f ff ff       	call   c0007aae <malloc>
c000db45:	83 c4 10             	add    esp,0x10
c000db48:	89 c2                	mov    edx,eax
c000db4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db4e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000db51:	90                   	nop
c000db52:	83 c4 18             	add    esp,0x18
c000db55:	5b                   	pop    ebx
c000db56:	c3                   	ret    
c000db57:	90                   	nop

c000db58 <VCache::invalidateReadBuffer()>:
c000db58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db5c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000db62:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000db66:	c3                   	ret    
c000db67:	90                   	nop

c000db68 <VCache::writeWriteBuffer()>:
c000db68:	53                   	push   ebx
c000db69:	83 ec 08             	sub    esp,0x8
c000db6c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000db70:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000db74:	74 1e                	je     c000db94 <VCache::writeWriteBuffer()+0x2c>
c000db76:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000db79:	83 ec 0c             	sub    esp,0xc
c000db7c:	8b 10                	mov    edx,DWORD PTR [eax]
c000db7e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000db81:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000db84:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000db87:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000db8a:	50                   	push   eax
c000db8b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000db8e:	83 c4 20             	add    esp,0x20
c000db91:	8d 76 00             	lea    esi,[esi+0x0]
c000db94:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000db9b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000dba2:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000dba6:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000dbad:	83 c4 08             	add    esp,0x8
c000dbb0:	5b                   	pop    ebx
c000dbb1:	c3                   	ret    
c000dbb2:	66 90                	xchg   ax,ax

c000dbb4 <VCache::~VCache()>:
c000dbb4:	83 ec 0c             	sub    esp,0xc
c000dbb7:	ba e0 07 02 c0       	mov    edx,0xc00207e0
c000dbbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbc0:	89 10                	mov    DWORD PTR [eax],edx
c000dbc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbc6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000dbc9:	0f b6 c0             	movzx  eax,al
c000dbcc:	85 c0                	test   eax,eax
c000dbce:	74 10                	je     c000dbe0 <VCache::~VCache()+0x2c>
c000dbd0:	83 ec 0c             	sub    esp,0xc
c000dbd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbd7:	e8 8c ff ff ff       	call   c000db68 <VCache::writeWriteBuffer()>
c000dbdc:	83 c4 10             	add    esp,0x10
c000dbdf:	90                   	nop
c000dbe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbe4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000dbe7:	83 ec 0c             	sub    esp,0xc
c000dbea:	50                   	push   eax
c000dbeb:	e8 ce 9e ff ff       	call   c0007abe <free>
c000dbf0:	83 c4 10             	add    esp,0x10
c000dbf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbf7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000dbfa:	83 ec 0c             	sub    esp,0xc
c000dbfd:	50                   	push   eax
c000dbfe:	e8 bb 9e ff ff       	call   c0007abe <free>
c000dc03:	83 c4 10             	add    esp,0x10
c000dc06:	90                   	nop
c000dc07:	83 c4 0c             	add    esp,0xc
c000dc0a:	c3                   	ret    
c000dc0b:	90                   	nop

c000dc0c <VCache::~VCache()>:
c000dc0c:	83 ec 0c             	sub    esp,0xc
c000dc0f:	83 ec 0c             	sub    esp,0xc
c000dc12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc16:	e8 99 ff ff ff       	call   c000dbb4 <VCache::~VCache()>
c000dc1b:	83 c4 10             	add    esp,0x10
c000dc1e:	83 ec 08             	sub    esp,0x8
c000dc21:	6a 44                	push   0x44
c000dc23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc27:	e8 91 cc ff ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c000dc2c:	83 c4 10             	add    esp,0x10
c000dc2f:	83 c4 0c             	add    esp,0xc
c000dc32:	c3                   	ret    
c000dc33:	90                   	nop

c000dc34 <VCache::write(unsigned long long, int, void*)>:
c000dc34:	55                   	push   ebp
c000dc35:	57                   	push   edi
c000dc36:	56                   	push   esi
c000dc37:	53                   	push   ebx
c000dc38:	83 ec 1c             	sub    esp,0x1c
c000dc3b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dc3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc43:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dc47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc4b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000dc4f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dc53:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dc57:	74 07                	je     c000dc60 <VCache::write(unsigned long long, int, void*)+0x2c>
c000dc59:	53                   	push   ebx
c000dc5a:	e8 f9 fe ff ff       	call   c000db58 <VCache::invalidateReadBuffer()>
c000dc5f:	58                   	pop    eax
c000dc60:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dc64:	74 62                	je     c000dcc8 <VCache::write(unsigned long long, int, void*)+0x94>
c000dc66:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dc69:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dc6d:	99                   	cdq    
c000dc6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc72:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000dc75:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000dc78:	31 c1                	xor    ecx,eax
c000dc7a:	89 d0                	mov    eax,edx
c000dc7c:	89 ca                	mov    edx,ecx
c000dc7e:	31 e8                	xor    eax,ebp
c000dc80:	09 c2                	or     edx,eax
c000dc82:	75 38                	jne    c000dcbc <VCache::write(unsigned long long, int, void*)+0x88>
c000dc84:	83 ff 01             	cmp    edi,0x1
c000dc87:	75 33                	jne    c000dcbc <VCache::write(unsigned long long, int, void*)+0x88>
c000dc89:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dc8c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dc90:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dc96:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dc99:	0f af c8             	imul   ecx,eax
c000dc9c:	01 cf                	add    edi,ecx
c000dc9e:	89 c1                	mov    ecx,eax
c000dca0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dca2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dca5:	40                   	inc    eax
c000dca6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000dca9:	83 f8 50             	cmp    eax,0x50
c000dcac:	75 6a                	jne    c000dd18 <VCache::write(unsigned long long, int, void*)+0xe4>
c000dcae:	83 ec 0c             	sub    esp,0xc
c000dcb1:	53                   	push   ebx
c000dcb2:	e8 b1 fe ff ff       	call   c000db68 <VCache::writeWriteBuffer()>
c000dcb7:	83 c4 10             	add    esp,0x10
c000dcba:	eb 5c                	jmp    c000dd18 <VCache::write(unsigned long long, int, void*)+0xe4>
c000dcbc:	83 ec 0c             	sub    esp,0xc
c000dcbf:	53                   	push   ebx
c000dcc0:	e8 a3 fe ff ff       	call   c000db68 <VCache::writeWriteBuffer()>
c000dcc5:	83 c4 10             	add    esp,0x10
c000dcc8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dccb:	83 ff 4f             	cmp    edi,0x4f
c000dcce:	7f 20                	jg     c000dcf0 <VCache::write(unsigned long long, int, void*)+0xbc>
c000dcd0:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000dcd3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dcd7:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000dcda:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000dcdd:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000dce1:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dce4:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dcea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dcec:	eb 2a                	jmp    c000dd18 <VCache::write(unsigned long long, int, void*)+0xe4>
c000dcee:	66 90                	xchg   ax,ax
c000dcf0:	8b 10                	mov    edx,DWORD PTR [eax]
c000dcf2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000dcf6:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000dcfa:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dcfe:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000dd02:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dd06:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dd0a:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000dd0d:	83 c4 1c             	add    esp,0x1c
c000dd10:	5b                   	pop    ebx
c000dd11:	5e                   	pop    esi
c000dd12:	5f                   	pop    edi
c000dd13:	5d                   	pop    ebp
c000dd14:	ff e0                	jmp    eax
c000dd16:	66 90                	xchg   ax,ax
c000dd18:	83 c4 1c             	add    esp,0x1c
c000dd1b:	31 c0                	xor    eax,eax
c000dd1d:	5b                   	pop    ebx
c000dd1e:	5e                   	pop    esi
c000dd1f:	5f                   	pop    edi
c000dd20:	5d                   	pop    ebp
c000dd21:	c3                   	ret    

c000dd22 <VCache::read(unsigned long long, int, void*)>:
c000dd22:	55                   	push   ebp
c000dd23:	57                   	push   edi
c000dd24:	56                   	push   esi
c000dd25:	53                   	push   ebx
c000dd26:	83 ec 1c             	sub    esp,0x1c
c000dd29:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000dd2d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dd31:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000dd35:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000dd39:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dd3d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd41:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000dd45:	74 0d                	je     c000dd54 <VCache::read(unsigned long long, int, void*)+0x32>
c000dd47:	83 ec 0c             	sub    esp,0xc
c000dd4a:	57                   	push   edi
c000dd4b:	e8 18 fe ff ff       	call   c000db68 <VCache::writeWriteBuffer()>
c000dd50:	83 c4 10             	add    esp,0x10
c000dd53:	90                   	nop
c000dd54:	83 fd 01             	cmp    ebp,0x1
c000dd57:	0f 85 93 00 00 00    	jne    c000ddf0 <VCache::read(unsigned long long, int, void*)+0xce>
c000dd5d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dd60:	89 04 24             	mov    DWORD PTR [esp],eax
c000dd63:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000dd6a:	0f 85 80 00 00 00    	jne    c000ddf0 <VCache::read(unsigned long long, int, void*)+0xce>
c000dd70:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000dd73:	89 e9                	mov    ecx,ebp
c000dd75:	f7 d9                	neg    ecx
c000dd77:	89 c8                	mov    eax,ecx
c000dd79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000dd7d:	c1 f8 1f             	sar    eax,0x1f
c000dd80:	21 d9                	and    ecx,ebx
c000dd82:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dd86:	89 c8                	mov    eax,ecx
c000dd88:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dd8c:	21 f1                	and    ecx,esi
c000dd8e:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000dd92:	89 ca                	mov    edx,ecx
c000dd94:	74 2e                	je     c000ddc4 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd96:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000dd99:	75 29                	jne    c000ddc4 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd9b:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000dd9e:	75 24                	jne    c000ddc4 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dda0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dda3:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dda9:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000ddac:	8d 70 ff             	lea    esi,[eax-0x1]
c000ddaf:	21 f3                	and    ebx,esi
c000ddb1:	0f af d9             	imul   ebx,ecx
c000ddb4:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000ddb7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000ddbb:	89 de                	mov    esi,ebx
c000ddbd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ddbf:	31 c0                	xor    eax,eax
c000ddc1:	eb 61                	jmp    c000de24 <VCache::read(unsigned long long, int, void*)+0x102>
c000ddc3:	90                   	nop
c000ddc4:	83 ec 0c             	sub    esp,0xc
c000ddc7:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000ddcb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000ddcf:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000ddd2:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000ddd5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ddd7:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000ddda:	55                   	push   ebp
c000dddb:	52                   	push   edx
c000dddc:	50                   	push   eax
c000dddd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dde1:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000dde4:	83 c4 20             	add    esp,0x20
c000dde7:	85 c0                	test   eax,eax
c000dde9:	75 39                	jne    c000de24 <VCache::read(unsigned long long, int, void*)+0x102>
c000ddeb:	eb b3                	jmp    c000dda0 <VCache::read(unsigned long long, int, void*)+0x7e>
c000dded:	8d 76 00             	lea    esi,[esi+0x0]
c000ddf0:	83 ec 0c             	sub    esp,0xc
c000ddf3:	57                   	push   edi
c000ddf4:	e8 5f fd ff ff       	call   c000db58 <VCache::invalidateReadBuffer()>
c000ddf9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ddfc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de00:	8b 10                	mov    edx,DWORD PTR [eax]
c000de02:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000de06:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000de0a:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000de0e:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000de12:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000de16:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000de19:	83 c4 2c             	add    esp,0x2c
c000de1c:	5b                   	pop    ebx
c000de1d:	5e                   	pop    esi
c000de1e:	5f                   	pop    edi
c000de1f:	5d                   	pop    ebp
c000de20:	ff e0                	jmp    eax
c000de22:	66 90                	xchg   ax,ax
c000de24:	83 c4 1c             	add    esp,0x1c
c000de27:	5b                   	pop    ebx
c000de28:	5e                   	pop    esi
c000de29:	5f                   	pop    edi
c000de2a:	5d                   	pop    ebp
c000de2b:	c3                   	ret    

c000de2c <Video::putrect(int, int, int, int, unsigned int)>:
c000de2c:	55                   	push   ebp
c000de2d:	57                   	push   edi
c000de2e:	56                   	push   esi
c000de2f:	53                   	push   ebx
c000de30:	83 ec 1c             	sub    esp,0x1c
c000de33:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000de37:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de3b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000de3f:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000de43:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000de47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de4b:	01 df                	add    edi,ebx
c000de4d:	39 fb                	cmp    ebx,edi
c000de4f:	7d 1f                	jge    c000de70 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000de51:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de55:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000de59:	7d 12                	jge    c000de6d <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000de5b:	8b 16                	mov    edx,DWORD PTR [esi]
c000de5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de61:	53                   	push   ebx
c000de62:	55                   	push   ebp
c000de63:	45                   	inc    ebp
c000de64:	56                   	push   esi
c000de65:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000de68:	83 c4 10             	add    esp,0x10
c000de6b:	eb e8                	jmp    c000de55 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000de6d:	43                   	inc    ebx
c000de6e:	eb dd                	jmp    c000de4d <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000de70:	83 c4 1c             	add    esp,0x1c
c000de73:	5b                   	pop    ebx
c000de74:	5e                   	pop    esi
c000de75:	5f                   	pop    edi
c000de76:	5d                   	pop    ebp
c000de77:	c3                   	ret    

c000de78 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000de78:	55                   	push   ebp
c000de79:	57                   	push   edi
c000de7a:	31 ff                	xor    edi,edi
c000de7c:	56                   	push   esi
c000de7d:	53                   	push   ebx
c000de7e:	83 ec 1c             	sub    esp,0x1c
c000de81:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000de85:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000de89:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000de90:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000de95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de99:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000de9d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dea1:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000dea4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000dea8:	01 f9                	add    ecx,edi
c000deaa:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000deae:	7d 2f                	jge    c000dedf <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000deb0:	31 f6                	xor    esi,esi
c000deb2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000deb6:	01 f2                	add    edx,esi
c000deb8:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000debc:	7d 1a                	jge    c000ded8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000debe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dec1:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000dec4:	46                   	inc    esi
c000dec5:	51                   	push   ecx
c000dec6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000deca:	52                   	push   edx
c000decb:	55                   	push   ebp
c000decc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ded6:	eb da                	jmp    c000deb2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000ded8:	47                   	inc    edi
c000ded9:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000dedd:	eb c5                	jmp    c000dea4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000dedf:	83 c4 1c             	add    esp,0x1c
c000dee2:	5b                   	pop    ebx
c000dee3:	5e                   	pop    esi
c000dee4:	5f                   	pop    edi
c000dee5:	5d                   	pop    ebp
c000dee6:	c3                   	ret    
c000dee7:	90                   	nop

c000dee8 <Video::blit(unsigned int*, int, int, int, int)>:
c000dee8:	55                   	push   ebp
c000dee9:	57                   	push   edi
c000deea:	56                   	push   esi
c000deeb:	53                   	push   ebx
c000deec:	83 ec 1c             	sub    esp,0x1c
c000deef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000def3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000def7:	85 c0                	test   eax,eax
c000def9:	79 02                	jns    c000defd <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000defb:	31 c0                	xor    eax,eax
c000defd:	c1 e0 02             	shl    eax,0x2
c000df00:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000df04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000df08:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000df0c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000df10:	39 d8                	cmp    eax,ebx
c000df12:	7e 49                	jle    c000df5d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000df14:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000df1a:	7c 41                	jl     c000df5d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000df1c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000df20:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000df24:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000df28:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000df2c:	39 f9                	cmp    ecx,edi
c000df2e:	7e 22                	jle    c000df52 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000df30:	83 c5 04             	add    ebp,0x4
c000df33:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df39:	7c 14                	jl     c000df4f <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000df3b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000df3d:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000df40:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000df44:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000df48:	56                   	push   esi
c000df49:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000df4c:	83 c4 10             	add    esp,0x10
c000df4f:	47                   	inc    edi
c000df50:	eb d2                	jmp    c000df24 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000df52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df56:	43                   	inc    ebx
c000df57:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000df5b:	eb ab                	jmp    c000df08 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000df5d:	83 c4 1c             	add    esp,0x1c
c000df60:	5b                   	pop    ebx
c000df61:	5e                   	pop    esi
c000df62:	5f                   	pop    edi
c000df63:	5d                   	pop    ebp
c000df64:	c3                   	ret    
c000df65:	90                   	nop

c000df66 <Video::clearScreen(unsigned int)>:
c000df66:	57                   	push   edi
c000df67:	56                   	push   esi
c000df68:	53                   	push   ebx
c000df69:	31 db                	xor    ebx,ebx
c000df6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df6f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000df75:	7e 1f                	jle    c000df96 <Video::clearScreen(unsigned int)+0x30>
c000df77:	31 ff                	xor    edi,edi
c000df79:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df7f:	7e 12                	jle    c000df93 <Video::clearScreen(unsigned int)+0x2d>
c000df81:	8b 06                	mov    eax,DWORD PTR [esi]
c000df83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df87:	53                   	push   ebx
c000df88:	57                   	push   edi
c000df89:	47                   	inc    edi
c000df8a:	56                   	push   esi
c000df8b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000df8e:	83 c4 10             	add    esp,0x10
c000df91:	eb e6                	jmp    c000df79 <Video::clearScreen(unsigned int)+0x13>
c000df93:	43                   	inc    ebx
c000df94:	eb d9                	jmp    c000df6f <Video::clearScreen(unsigned int)+0x9>
c000df96:	5b                   	pop    ebx
c000df97:	5e                   	pop    esi
c000df98:	5f                   	pop    edi
c000df99:	c3                   	ret    

c000df9a <Video::putpixel(int, int, unsigned int)>:
c000df9a:	c7 44 24 04 e8 07 02 c0 	mov    DWORD PTR [esp+0x4],0xc00207e8
c000dfa2:	e9 70 29 00 00       	jmp    c0010917 <KePanic(char const*)>
c000dfa7:	90                   	nop

c000dfa8 <Video::readPixelApprox(int, int)>:
c000dfa8:	83 ec 18             	sub    esp,0x18
c000dfab:	68 09 08 02 c0       	push   0xc0020809
c000dfb0:	e8 62 29 00 00       	call   c0010917 <KePanic(char const*)>
c000dfb5:	31 c0                	xor    eax,eax
c000dfb7:	83 c4 1c             	add    esp,0x1c
c000dfba:	c3                   	ret    
c000dfbb:	90                   	nop

c000dfbc <Video::Video(char const*)>:
c000dfbc:	83 ec 0c             	sub    esp,0xc
c000dfbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfc3:	83 ec 08             	sub    esp,0x8
c000dfc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfca:	50                   	push   eax
c000dfcb:	e8 e6 df ff ff       	call   c000bfb6 <Device::Device(char const*)>
c000dfd0:	83 c4 10             	add    esp,0x10
c000dfd3:	ba 84 08 02 c0       	mov    edx,0xc0020884
c000dfd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfdc:	89 10                	mov    DWORD PTR [eax],edx
c000dfde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfe2:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000dfec:	90                   	nop
c000dfed:	83 c4 0c             	add    esp,0xc
c000dff0:	c3                   	ret    
c000dff1:	90                   	nop

c000dff2 <Video::~Video()>:
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	ba 84 08 02 c0       	mov    edx,0xc0020884
c000dffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dffe:	89 10                	mov    DWORD PTR [eax],edx
c000e000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e004:	83 ec 0c             	sub    esp,0xc
c000e007:	50                   	push   eax
c000e008:	e8 13 dd ff ff       	call   c000bd20 <Device::~Device()>
c000e00d:	83 c4 10             	add    esp,0x10
c000e010:	90                   	nop
c000e011:	83 c4 0c             	add    esp,0xc
c000e014:	c3                   	ret    
c000e015:	90                   	nop

c000e016 <Video::~Video()>:
c000e016:	83 ec 0c             	sub    esp,0xc
c000e019:	83 ec 0c             	sub    esp,0xc
c000e01c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e020:	e8 cd ff ff ff       	call   c000dff2 <Video::~Video()>
c000e025:	83 c4 10             	add    esp,0x10
c000e028:	83 ec 08             	sub    esp,0x8
c000e02b:	68 64 01 00 00       	push   0x164
c000e030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e034:	e8 84 c8 ff ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c000e039:	83 c4 10             	add    esp,0x10
c000e03c:	83 c4 0c             	add    esp,0xc
c000e03f:	c3                   	ret    

c000e040 <Video::isMonochrome()>:
c000e040:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e044:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e04a:	c3                   	ret    
c000e04b:	90                   	nop

c000e04c <Video::getWidth()>:
c000e04c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e050:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e056:	c3                   	ret    
c000e057:	90                   	nop

c000e058 <Video::getHeight()>:
c000e058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e05c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e062:	c3                   	ret    
c000e063:	90                   	nop

c000e064 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e064:	55                   	push   ebp
c000e065:	57                   	push   edi
c000e066:	56                   	push   esi
c000e067:	53                   	push   ebx
c000e068:	83 ec 2c             	sub    esp,0x2c
c000e06b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e06f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e073:	83 f8 01             	cmp    eax,0x1
c000e076:	19 c9                	sbb    ecx,ecx
c000e078:	31 db                	xor    ebx,ebx
c000e07a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e07e:	89 cd                	mov    ebp,ecx
c000e080:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e088:	f7 d5                	not    ebp
c000e08a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e090:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e094:	01 d8                	add    eax,ebx
c000e096:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e09a:	56                   	push   esi
c000e09b:	e8 b8 ff ff ff       	call   c000e058 <Video::getHeight()>
c000e0a0:	59                   	pop    ecx
c000e0a1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e0a5:	7e 70                	jle    c000e117 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e0a7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e0ab:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e0af:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e0b2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e0b6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e0ba:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e0c1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0c5:	89 f8                	mov    eax,edi
c000e0c7:	83 c0 20             	add    eax,0x20
c000e0ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e0ce:	56                   	push   esi
c000e0cf:	e8 78 ff ff ff       	call   c000e04c <Video::getWidth()>
c000e0d4:	5a                   	pop    edx
c000e0d5:	39 c7                	cmp    edi,eax
c000e0d7:	7d 34                	jge    c000e10d <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e0d9:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e0de:	74 05                	je     c000e0e5 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e0e0:	8b 06                	mov    eax,DWORD PTR [esi]
c000e0e2:	55                   	push   ebp
c000e0e3:	eb 0d                	jmp    c000e0f2 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e0e5:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e0ea:	74 12                	je     c000e0fe <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e0ec:	8b 06                	mov    eax,DWORD PTR [esi]
c000e0ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e0f2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e0f6:	57                   	push   edi
c000e0f7:	56                   	push   esi
c000e0f8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e0fb:	83 c4 10             	add    esp,0x10
c000e0fe:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e102:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e106:	47                   	inc    edi
c000e107:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000e10b:	75 c1                	jne    c000e0ce <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e10d:	43                   	inc    ebx
c000e10e:	83 fb 20             	cmp    ebx,0x20
c000e111:	0f 85 79 ff ff ff    	jne    c000e090 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e117:	83 c4 2c             	add    esp,0x2c
c000e11a:	5b                   	pop    ebx
c000e11b:	5e                   	pop    esi
c000e11c:	5f                   	pop    edi
c000e11d:	5d                   	pop    ebp
c000e11e:	c3                   	ret    
c000e11f:	90                   	nop

c000e120 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e120:	55                   	push   ebp
c000e121:	57                   	push   edi
c000e122:	56                   	push   esi
c000e123:	53                   	push   ebx
c000e124:	83 ec 28             	sub    esp,0x28
c000e127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e12b:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e12f:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e133:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000e137:	c1 e6 08             	shl    esi,0x8
c000e13a:	01 c6                	add    esi,eax
c000e13c:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000e140:	c1 e0 08             	shl    eax,0x8
c000e143:	01 d0                	add    eax,edx
c000e145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e149:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e14d:	0f af c6             	imul   eax,esi
c000e150:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e157:	50                   	push   eax
c000e158:	e8 51 99 ff ff       	call   c0007aae <malloc>
c000e15d:	83 c4 10             	add    esp,0x10
c000e160:	89 c7                	mov    edi,eax
c000e162:	85 c0                	test   eax,eax
c000e164:	75 10                	jne    c000e176 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e166:	83 ec 0c             	sub    esp,0xc
c000e169:	68 34 08 02 c0       	push   0xc0020834
c000e16e:	e8 a4 27 00 00       	call   c0010917 <KePanic(char const*)>
c000e173:	83 c4 10             	add    esp,0x10
c000e176:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e17a:	ba 12 00 00 00       	mov    edx,0x12
c000e17f:	85 c0                	test   eax,eax
c000e181:	74 11                	je     c000e194 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e183:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e187:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e18b:	c1 fa 03             	sar    edx,0x3
c000e18e:	0f af d1             	imul   edx,ecx
c000e191:	83 c2 12             	add    edx,0x12
c000e194:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e198:	74 04                	je     c000e19e <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e19a:	85 f6                	test   esi,esi
c000e19c:	75 12                	jne    c000e1b0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e19e:	83 ec 0c             	sub    esp,0xc
c000e1a1:	68 44 08 02 c0       	push   0xc0020844
c000e1a6:	e8 3f c8 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c000e1ab:	e9 b8 00 00 00       	jmp    c000e268 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e1b0:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e1b4:	83 f9 02             	cmp    ecx,0x2
c000e1b7:	0f 85 96 00 00 00    	jne    c000e253 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e1bd:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e1c2:	75 0e                	jne    c000e1d2 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e1c4:	85 c0                	test   eax,eax
c000e1c6:	75 0a                	jne    c000e1d2 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e1c8:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e1cb:	83 e8 18             	sub    eax,0x18
c000e1ce:	a8 f7                	test   al,0xf7
c000e1d0:	74 0a                	je     c000e1dc <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e1d2:	83 ec 0c             	sub    esp,0xc
c000e1d5:	68 59 08 02 c0       	push   0xc0020859
c000e1da:	eb 7f                	jmp    c000e25b <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e1dc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e1e4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e1ec:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000e1f0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e1f8:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e1fc:	75 0c                	jne    c000e20a <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000e1fe:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e203:	c1 e0 18             	shl    eax,0x18
c000e206:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e20a:	45                   	inc    ebp
c000e20b:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e210:	c1 e1 10             	shl    ecx,0x10
c000e213:	89 c8                	mov    eax,ecx
c000e215:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e21a:	c1 e1 08             	shl    ecx,0x8
c000e21d:	09 c1                	or     ecx,eax
c000e21f:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e223:	09 c1                	or     ecx,eax
c000e225:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e229:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000e22d:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e231:	c1 f8 03             	sar    eax,0x3
c000e234:	01 c2                	add    edx,eax
c000e236:	89 e8                	mov    eax,ebp
c000e238:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e23c:	39 c6                	cmp    esi,eax
c000e23e:	7f b0                	jg     c000e1f0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000e240:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e244:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e248:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e24b:	7e 22                	jle    c000e26f <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000e24d:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000e251:	eb 99                	jmp    c000e1ec <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000e253:	50                   	push   eax
c000e254:	50                   	push   eax
c000e255:	51                   	push   ecx
c000e256:	68 67 08 02 c0       	push   0xc0020867
c000e25b:	e8 8a c7 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c000e260:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e263:	e8 56 98 ff ff       	call   c0007abe <free>
c000e268:	83 c4 10             	add    esp,0x10
c000e26b:	31 ff                	xor    edi,edi
c000e26d:	eb 0f                	jmp    c000e27e <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000e26f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e273:	89 30                	mov    DWORD PTR [eax],esi
c000e275:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e279:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000e27c:	89 30                	mov    DWORD PTR [eax],esi
c000e27e:	83 c4 1c             	add    esp,0x1c
c000e281:	89 f8                	mov    eax,edi
c000e283:	5b                   	pop    ebx
c000e284:	5e                   	pop    esi
c000e285:	5f                   	pop    edi
c000e286:	5d                   	pop    ebp
c000e287:	c3                   	ret    

c000e288 <Video::putTGA(int, int, unsigned char*, int)>:
c000e288:	55                   	push   ebp
c000e289:	57                   	push   edi
c000e28a:	56                   	push   esi
c000e28b:	53                   	push   ebx
c000e28c:	83 ec 28             	sub    esp,0x28
c000e28f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000e293:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e297:	50                   	push   eax
c000e298:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e29c:	50                   	push   eax
c000e29d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e2a1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e2a5:	56                   	push   esi
c000e2a6:	e8 75 fe ff ff       	call   c000e120 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e2ab:	83 c4 20             	add    esp,0x20
c000e2ae:	85 c0                	test   eax,eax
c000e2b0:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e2b4:	74 35                	je     c000e2eb <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e2b6:	89 c7                	mov    edi,eax
c000e2b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e2bc:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e2c0:	39 d8                	cmp    eax,ebx
c000e2c2:	7e 27                	jle    c000e2eb <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e2c4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e2c8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e2cc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e2d0:	39 e8                	cmp    eax,ebp
c000e2d2:	7e 14                	jle    c000e2e8 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e2d4:	8b 06                	mov    eax,DWORD PTR [esi]
c000e2d6:	83 c7 04             	add    edi,0x4
c000e2d9:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000e2dc:	53                   	push   ebx
c000e2dd:	55                   	push   ebp
c000e2de:	45                   	inc    ebp
c000e2df:	56                   	push   esi
c000e2e0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e2e3:	83 c4 10             	add    esp,0x10
c000e2e6:	eb e0                	jmp    c000e2c8 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e2e8:	43                   	inc    ebx
c000e2e9:	eb cd                	jmp    c000e2b8 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e2eb:	83 c4 1c             	add    esp,0x1c
c000e2ee:	5b                   	pop    ebx
c000e2ef:	5e                   	pop    esi
c000e2f0:	5f                   	pop    edi
c000e2f1:	5d                   	pop    ebp
c000e2f2:	c3                   	ret    
c000e2f3:	90                   	nop

c000e2f4 <ACPI::close(int, int, void*)>:
c000e2f4:	83 ec 1c             	sub    esp,0x1c
c000e2f7:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e2ff:	74 0b                	je     c000e30c <ACPI::close(int, int, void*)+0x18>
c000e301:	b8 00 00 00 00       	mov    eax,0x0
c000e306:	e9 99 00 00 00       	jmp    c000e3a4 <ACPI::close(int, int, void*)+0xb0>
c000e30b:	90                   	nop
c000e30c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e311:	75 29                	jne    c000e33c <ACPI::close(int, int, void*)+0x48>
c000e313:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e318:	85 c0                	test   eax,eax
c000e31a:	74 08                	je     c000e324 <ACPI::close(int, int, void*)+0x30>
c000e31c:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e321:	ff d0                	call   eax
c000e323:	90                   	nop
c000e324:	83 ec 0c             	sub    esp,0xc
c000e327:	68 c8 08 02 c0       	push   0xc00208c8
c000e32c:	e8 e6 25 00 00       	call   c0010917 <KePanic(char const*)>
c000e331:	83 c4 10             	add    esp,0x10
c000e334:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e339:	eb 69                	jmp    c000e3a4 <ACPI::close(int, int, void*)+0xb0>
c000e33b:	90                   	nop
c000e33c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e341:	75 59                	jne    c000e39c <ACPI::close(int, int, void*)+0xa8>
c000e343:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e348:	85 c0                	test   eax,eax
c000e34a:	74 08                	je     c000e354 <ACPI::close(int, int, void*)+0x60>
c000e34c:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e351:	ff d0                	call   eax
c000e353:	90                   	nop
c000e354:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e359:	8d 76 00             	lea    esi,[esi+0x0]
c000e35c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000e361:	83 e0 02             	and    eax,0x2
c000e364:	74 1e                	je     c000e384 <ACPI::close(int, int, void*)+0x90>
c000e366:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e36d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e371:	89 c2                	mov    edx,eax
c000e373:	ec                   	in     al,dx
c000e374:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e378:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e37c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e380:	eb da                	jmp    c000e35c <ACPI::close(int, int, void*)+0x68>
c000e382:	66 90                	xchg   ax,ax
c000e384:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e38b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e390:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e394:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e398:	ee                   	out    dx,al
c000e399:	8d 76 00             	lea    esi,[esi+0x0]
c000e39c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e3a1:	8d 76 00             	lea    esi,[esi+0x0]
c000e3a4:	83 c4 1c             	add    esp,0x1c
c000e3a7:	c3                   	ret    

c000e3a8 <findRSDP()>:
c000e3a8:	83 ec 1c             	sub    esp,0x1c
c000e3ab:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e3b0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e3b6:	83 e0 04             	and    eax,0x4
c000e3b9:	0f b6 c0             	movzx  eax,al
c000e3bc:	85 c0                	test   eax,eax
c000e3be:	75 08                	jne    c000e3c8 <findRSDP()+0x20>
c000e3c0:	b8 00 00 00 00       	mov    eax,0x0
c000e3c5:	eb 75                	jmp    c000e43c <findRSDP()+0x94>
c000e3c7:	90                   	nop
c000e3c8:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000e3cd:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e3d2:	7f 1c                	jg     c000e3f0 <findRSDP()+0x48>
c000e3d4:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e3d9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e3df:	83 e2 fb             	and    edx,0xfffffffb
c000e3e2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e3e8:	b8 00 00 00 00       	mov    eax,0x0
c000e3ed:	eb 4d                	jmp    c000e43c <findRSDP()+0x94>
c000e3ef:	90                   	nop
c000e3f0:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e3f8:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e400:	77 32                	ja     c000e434 <findRSDP()+0x8c>
c000e402:	83 ec 04             	sub    esp,0x4
c000e405:	6a 08                	push   0x8
c000e407:	68 63 09 02 c0       	push   0xc0020963
c000e40c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e410:	e8 6b 1f ff ff       	call   c0000380 <memcmp>
c000e415:	83 c4 10             	add    esp,0x10
c000e418:	85 c0                	test   eax,eax
c000e41a:	0f 94 c0             	sete   al
c000e41d:	0f b6 c0             	movzx  eax,al
c000e420:	85 c0                	test   eax,eax
c000e422:	74 08                	je     c000e42c <findRSDP()+0x84>
c000e424:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e428:	eb 12                	jmp    c000e43c <findRSDP()+0x94>
c000e42a:	66 90                	xchg   ax,ax
c000e42c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e431:	eb c5                	jmp    c000e3f8 <findRSDP()+0x50>
c000e433:	90                   	nop
c000e434:	b8 00 00 00 00       	mov    eax,0x0
c000e439:	8d 76 00             	lea    esi,[esi+0x0]
c000e43c:	83 c4 1c             	add    esp,0x1c
c000e43f:	c3                   	ret    

c000e440 <loadACPITables(unsigned char*)>:
c000e440:	57                   	push   edi
c000e441:	56                   	push   esi
c000e442:	53                   	push   ebx
c000e443:	83 ec 60             	sub    esp,0x60
c000e446:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e44b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e451:	83 e0 04             	and    eax,0x4
c000e454:	0f b6 c0             	movzx  eax,al
c000e457:	85 c0                	test   eax,eax
c000e459:	0f 84 41 02 00 00    	je     c000e6a0 <loadACPITables(unsigned char*)+0x260>
c000e45f:	a0 c0 76 02 c0       	mov    al,ds:0xc00276c0
c000e464:	0f b6 c0             	movzx  eax,al
c000e467:	85 c0                	test   eax,eax
c000e469:	74 79                	je     c000e4e4 <loadACPITables(unsigned char*)+0xa4>
c000e46b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e46f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e473:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e477:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e47a:	83 e8 24             	sub    eax,0x24
c000e47d:	c1 e8 03             	shr    eax,0x3
c000e480:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e484:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e48c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e490:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e494:	0f 8d ba 00 00 00    	jge    c000e554 <loadACPITables(unsigned char*)+0x114>
c000e49a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e49e:	83 c0 24             	add    eax,0x24
c000e4a1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e4a5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e4a9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e4ad:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e4b1:	c1 e0 03             	shl    eax,0x3
c000e4b4:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e4b8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e4bc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e4bf:	8b 00                	mov    eax,DWORD PTR [eax]
c000e4c1:	89 c1                	mov    ecx,eax
c000e4c3:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e4c8:	8d 50 01             	lea    edx,[eax+0x1]
c000e4cb:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e4d1:	89 ca                	mov    edx,ecx
c000e4d3:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e4da:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000e4df:	eb ab                	jmp    c000e48c <loadACPITables(unsigned char*)+0x4c>
c000e4e1:	8d 76 00             	lea    esi,[esi+0x0]
c000e4e4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4e8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e4ec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e4f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e4f3:	83 e8 24             	sub    eax,0x24
c000e4f6:	c1 e8 02             	shr    eax,0x2
c000e4f9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e4fd:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e505:	8d 76 00             	lea    esi,[esi+0x0]
c000e508:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e50c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e510:	7d 42                	jge    c000e554 <loadACPITables(unsigned char*)+0x114>
c000e512:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e516:	83 c0 24             	add    eax,0x24
c000e519:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e51d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e521:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e525:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e529:	c1 e0 02             	shl    eax,0x2
c000e52c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e530:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e534:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e536:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e53b:	8d 50 01             	lea    edx,[eax+0x1]
c000e53e:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e544:	89 ca                	mov    edx,ecx
c000e546:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e54d:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000e552:	eb b4                	jmp    c000e508 <loadACPITables(unsigned char*)+0xc8>
c000e554:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e55c:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e561:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e565:	0f 8d 39 01 00 00    	jge    c000e6a4 <loadACPITables(unsigned char*)+0x264>
c000e56b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e56f:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e576:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e57a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e57e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e582:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e586:	25 ff 0f 00 00       	and    eax,0xfff
c000e58b:	89 c6                	mov    esi,eax
c000e58d:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e593:	83 ec 0c             	sub    esp,0xc
c000e596:	6a 01                	push   0x1
c000e598:	e8 80 b0 ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c000e59d:	83 c4 10             	add    esp,0x10
c000e5a0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e5a4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e5aa:	83 ec 0c             	sub    esp,0xc
c000e5ad:	6a 01                	push   0x1
c000e5af:	6a 01                	push   0x1
c000e5b1:	50                   	push   eax
c000e5b2:	52                   	push   edx
c000e5b3:	53                   	push   ebx
c000e5b4:	e8 5f ba ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e5b9:	83 c4 20             	add    esp,0x20
c000e5bc:	09 f0                	or     eax,esi
c000e5be:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e5c2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e5c6:	c1 e0 03             	shl    eax,0x3
c000e5c9:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e5ce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e5d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e5da:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e5e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e5e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e5ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e5ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e5f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e5f6:	89 c6                	mov    esi,eax
c000e5f8:	89 d7                	mov    edi,edx
c000e5fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5fc:	89 c8                	mov    eax,ecx
c000e5fe:	89 fa                	mov    edx,edi
c000e600:	89 f3                	mov    ebx,esi
c000e602:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e606:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e60a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e60e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e612:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e615:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e619:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e61d:	05 00 10 00 00       	add    eax,0x1000
c000e622:	c1 e8 0c             	shr    eax,0xc
c000e625:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e629:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e62d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e631:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e635:	25 ff 0f 00 00       	and    eax,0xfff
c000e63a:	89 c6                	mov    esi,eax
c000e63c:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e642:	83 ec 0c             	sub    esp,0xc
c000e645:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e649:	e8 cf af ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c000e64e:	83 c4 10             	add    esp,0x10
c000e651:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e655:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e65b:	83 ec 0c             	sub    esp,0xc
c000e65e:	6a 01                	push   0x1
c000e660:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e664:	50                   	push   eax
c000e665:	52                   	push   edx
c000e666:	53                   	push   ebx
c000e667:	e8 ac b9 ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e66c:	83 c4 20             	add    esp,0x20
c000e66f:	09 f0                	or     eax,esi
c000e671:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e675:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e679:	83 ec 0c             	sub    esp,0xc
c000e67c:	50                   	push   eax
c000e67d:	e8 b7 b2 ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c000e682:	83 c4 10             	add    esp,0x10
c000e685:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e689:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e68d:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e694:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000e699:	e9 be fe ff ff       	jmp    c000e55c <loadACPITables(unsigned char*)+0x11c>
c000e69e:	66 90                	xchg   ax,ax
c000e6a0:	90                   	nop
c000e6a1:	8d 76 00             	lea    esi,[esi+0x0]
c000e6a4:	83 c4 60             	add    esp,0x60
c000e6a7:	5b                   	pop    ebx
c000e6a8:	5e                   	pop    esi
c000e6a9:	5f                   	pop    edi
c000e6aa:	c3                   	ret    
c000e6ab:	90                   	nop

c000e6ac <findRSDT(unsigned char*)>:
c000e6ac:	57                   	push   edi
c000e6ad:	56                   	push   esi
c000e6ae:	53                   	push   ebx
c000e6af:	83 ec 50             	sub    esp,0x50
c000e6b2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e6b7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e6bd:	83 e0 04             	and    eax,0x4
c000e6c0:	0f b6 c0             	movzx  eax,al
c000e6c3:	85 c0                	test   eax,eax
c000e6c5:	75 0d                	jne    c000e6d4 <findRSDT(unsigned char*)+0x28>
c000e6c7:	b8 00 00 00 00       	mov    eax,0x0
c000e6cc:	e9 2b 01 00 00       	jmp    c000e7fc <findRSDT(unsigned char*)+0x150>
c000e6d1:	8d 76 00             	lea    esi,[esi+0x0]
c000e6d4:	89 e0                	mov    eax,esp
c000e6d6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e6da:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e6de:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e6e2:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e6ea:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6ee:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e6f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e6f6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e6fa:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e6fe:	89 c6                	mov    esi,eax
c000e700:	89 d7                	mov    edi,edx
c000e702:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e704:	89 c8                	mov    eax,ecx
c000e706:	89 fa                	mov    edx,edi
c000e708:	89 f3                	mov    ebx,esi
c000e70a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e70e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e712:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e716:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e71a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e71e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e726:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e72a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e72e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e736:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e73a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e73e:	25 ff 0f 00 00       	and    eax,0xfff
c000e743:	89 c6                	mov    esi,eax
c000e745:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e74b:	83 ec 0c             	sub    esp,0xc
c000e74e:	6a 02                	push   0x2
c000e750:	e8 c8 ae ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c000e755:	83 c4 10             	add    esp,0x10
c000e758:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e75c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e762:	83 ec 0c             	sub    esp,0xc
c000e765:	6a 01                	push   0x1
c000e767:	6a 02                	push   0x2
c000e769:	50                   	push   eax
c000e76a:	52                   	push   edx
c000e76b:	53                   	push   ebx
c000e76c:	e8 a7 b8 ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e771:	83 c4 20             	add    esp,0x20
c000e774:	09 f0                	or     eax,esi
c000e776:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e77a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e77e:	25 ff 0f 00 00       	and    eax,0xfff
c000e783:	89 c6                	mov    esi,eax
c000e785:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e78b:	83 ec 0c             	sub    esp,0xc
c000e78e:	6a 02                	push   0x2
c000e790:	e8 88 ae ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c000e795:	83 c4 10             	add    esp,0x10
c000e798:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e79c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e7a2:	83 ec 0c             	sub    esp,0xc
c000e7a5:	6a 01                	push   0x1
c000e7a7:	6a 02                	push   0x2
c000e7a9:	50                   	push   eax
c000e7aa:	52                   	push   edx
c000e7ab:	53                   	push   ebx
c000e7ac:	e8 67 b8 ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e7b1:	83 c4 20             	add    esp,0x20
c000e7b4:	09 f0                	or     eax,esi
c000e7b6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e7ba:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e7bf:	85 c0                	test   eax,eax
c000e7c1:	75 11                	jne    c000e7d4 <findRSDT(unsigned char*)+0x128>
c000e7c3:	c6 05 c0 76 02 c0 00 	mov    BYTE PTR ds:0xc00276c0,0x0
c000e7ca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7ce:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e7d2:	eb 24                	jmp    c000e7f8 <findRSDT(unsigned char*)+0x14c>
c000e7d4:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e7d9:	83 f8 02             	cmp    eax,0x2
c000e7dc:	75 12                	jne    c000e7f0 <findRSDT(unsigned char*)+0x144>
c000e7de:	c6 05 c0 76 02 c0 01 	mov    BYTE PTR ds:0xc00276c0,0x1
c000e7e5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e7e9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e7ed:	eb 09                	jmp    c000e7f8 <findRSDT(unsigned char*)+0x14c>
c000e7ef:	90                   	nop
c000e7f0:	b8 00 00 00 00       	mov    eax,0x0
c000e7f5:	eb 05                	jmp    c000e7fc <findRSDT(unsigned char*)+0x150>
c000e7f7:	90                   	nop
c000e7f8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e7fc:	83 c4 50             	add    esp,0x50
c000e7ff:	5b                   	pop    ebx
c000e800:	5e                   	pop    esi
c000e801:	5f                   	pop    edi
c000e802:	c3                   	ret    
c000e803:	90                   	nop

c000e804 <findDataTable(unsigned char*, char*)>:
c000e804:	83 ec 1c             	sub    esp,0x1c
c000e807:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e80c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e812:	83 e0 04             	and    eax,0x4
c000e815:	0f b6 c0             	movzx  eax,al
c000e818:	85 c0                	test   eax,eax
c000e81a:	75 08                	jne    c000e824 <findDataTable(unsigned char*, char*)+0x20>
c000e81c:	b8 00 00 00 00       	mov    eax,0x0
c000e821:	eb 5d                	jmp    c000e880 <findDataTable(unsigned char*, char*)+0x7c>
c000e823:	90                   	nop
c000e824:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e82c:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e831:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e835:	7d 41                	jge    c000e878 <findDataTable(unsigned char*, char*)+0x74>
c000e837:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e83b:	c1 e0 03             	shl    eax,0x3
c000e83e:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e843:	83 ec 04             	sub    esp,0x4
c000e846:	6a 04                	push   0x4
c000e848:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e84c:	50                   	push   eax
c000e84d:	e8 2e 1b ff ff       	call   c0000380 <memcmp>
c000e852:	83 c4 10             	add    esp,0x10
c000e855:	85 c0                	test   eax,eax
c000e857:	0f 94 c0             	sete   al
c000e85a:	0f b6 c0             	movzx  eax,al
c000e85d:	85 c0                	test   eax,eax
c000e85f:	74 0f                	je     c000e870 <findDataTable(unsigned char*, char*)+0x6c>
c000e861:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e865:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e86c:	eb 12                	jmp    c000e880 <findDataTable(unsigned char*, char*)+0x7c>
c000e86e:	66 90                	xchg   ax,ax
c000e870:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000e875:	eb b5                	jmp    c000e82c <findDataTable(unsigned char*, char*)+0x28>
c000e877:	90                   	nop
c000e878:	b8 00 00 00 00       	mov    eax,0x0
c000e87d:	8d 76 00             	lea    esi,[esi+0x0]
c000e880:	83 c4 1c             	add    esp,0x1c
c000e883:	c3                   	ret    

c000e884 <scanMADT()>:
c000e884:	53                   	push   ebx
c000e885:	83 ec 38             	sub    esp,0x38
c000e888:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c000e88d:	25 00 04 00 00       	and    eax,0x400
c000e892:	74 14                	je     c000e8a8 <scanMADT()+0x24>
c000e894:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e899:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e89f:	83 e2 fb             	and    edx,0xfffffffb
c000e8a2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8a8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8ad:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e8b3:	83 e0 04             	and    eax,0x4
c000e8b6:	0f b6 c0             	movzx  eax,al
c000e8b9:	85 c0                	test   eax,eax
c000e8bb:	0f 84 6b 04 00 00    	je     c000ed2c <scanMADT()+0x4a8>
c000e8c1:	e8 e2 fa ff ff       	call   c000e3a8 <findRSDP()>
c000e8c6:	a3 cc 76 02 c0       	mov    ds:0xc00276cc,eax
c000e8cb:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e8d0:	85 c0                	test   eax,eax
c000e8d2:	75 1c                	jne    c000e8f0 <scanMADT()+0x6c>
c000e8d4:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8d9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8df:	83 e2 fb             	and    edx,0xfffffffb
c000e8e2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8e8:	e9 47 04 00 00       	jmp    c000ed34 <scanMADT()+0x4b0>
c000e8ed:	8d 76 00             	lea    esi,[esi+0x0]
c000e8f0:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e8f5:	83 ec 0c             	sub    esp,0xc
c000e8f8:	50                   	push   eax
c000e8f9:	e8 ae fd ff ff       	call   c000e6ac <findRSDT(unsigned char*)>
c000e8fe:	83 c4 10             	add    esp,0x10
c000e901:	a3 c8 76 02 c0       	mov    ds:0xc00276c8,eax
c000e906:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e90b:	85 c0                	test   eax,eax
c000e90d:	75 19                	jne    c000e928 <scanMADT()+0xa4>
c000e90f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e914:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e91a:	83 e2 fb             	and    edx,0xfffffffb
c000e91d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e923:	e9 0c 04 00 00       	jmp    c000ed34 <scanMADT()+0x4b0>
c000e928:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e92d:	83 ec 0c             	sub    esp,0xc
c000e930:	50                   	push   eax
c000e931:	e8 0a fb ff ff       	call   c000e440 <loadACPITables(unsigned char*)>
c000e936:	83 c4 10             	add    esp,0x10
c000e939:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e93e:	83 ec 08             	sub    esp,0x8
c000e941:	68 6c 09 02 c0       	push   0xc002096c
c000e946:	50                   	push   eax
c000e947:	e8 b8 fe ff ff       	call   c000e804 <findDataTable(unsigned char*, char*)>
c000e94c:	83 c4 10             	add    esp,0x10
c000e94f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e953:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e958:	75 1a                	jne    c000e974 <scanMADT()+0xf0>
c000e95a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e95f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e965:	83 e2 fe             	and    edx,0xfffffffe
c000e968:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e96e:	e9 c1 03 00 00       	jmp    c000ed34 <scanMADT()+0x4b0>
c000e973:	90                   	nop
c000e974:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e97c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e980:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e983:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e987:	0f 87 a7 03 00 00    	ja     c000ed34 <scanMADT()+0x4b0>
c000e98d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e995:	0f 87 99 03 00 00    	ja     c000ed34 <scanMADT()+0x4b0>
c000e99b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e99f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e9a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9a7:	8d 50 01             	lea    edx,[eax+0x1]
c000e9aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9ae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e9b2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e9b6:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e9ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9be:	8d 50 01             	lea    edx,[eax+0x1]
c000e9c1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e9c9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e9cd:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e9d1:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000e9d6:	83 f8 02             	cmp    eax,0x2
c000e9d9:	0f 86 51 03 00 00    	jbe    c000ed30 <scanMADT()+0x4ac>
c000e9df:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000e9e4:	85 c0                	test   eax,eax
c000e9e6:	75 58                	jne    c000ea40 <scanMADT()+0x1bc>
c000e9e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9ec:	8d 50 01             	lea    edx,[eax+0x1]
c000e9ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9f3:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000e9f9:	0f b6 d2             	movzx  edx,dl
c000e9fc:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea00:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea04:	88 82 00 79 02 c0    	mov    BYTE PTR [edx-0x3ffd8700],al
c000ea0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea0e:	8d 50 01             	lea    edx,[eax+0x1]
c000ea11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea15:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000ea1b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ea1e:	88 0d c0 78 02 c0    	mov    BYTE PTR ds:0xc00278c0,cl
c000ea24:	0f b6 d2             	movzx  edx,dl
c000ea27:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea2b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea2f:	88 82 e0 78 02 c0    	mov    BYTE PTR [edx-0x3ffd8720],al
c000ea35:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ea3a:	e9 d9 02 00 00       	jmp    c000ed18 <scanMADT()+0x494>
c000ea3f:	90                   	nop
c000ea40:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ea45:	83 f8 01             	cmp    eax,0x1
c000ea48:	0f 85 1a 01 00 00    	jne    c000eb68 <scanMADT()+0x2e4>
c000ea4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea52:	8d 50 01             	lea    edx,[eax+0x1]
c000ea55:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea59:	8a 15 80 77 02 c0    	mov    dl,BYTE PTR ds:0xc0027780
c000ea5f:	0f b6 d2             	movzx  edx,dl
c000ea62:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea66:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea6a:	88 82 a0 77 02 c0    	mov    BYTE PTR [edx-0x3ffd8860],al
c000ea70:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000ea75:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea79:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea7d:	01 d0                	add    eax,edx
c000ea7f:	83 c0 2c             	add    eax,0x2c
c000ea82:	8a 00                	mov    al,BYTE PTR [eax]
c000ea84:	0f b6 d0             	movzx  edx,al
c000ea87:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea8b:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea8e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea92:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ea96:	0f b6 c0             	movzx  eax,al
c000ea99:	c1 e0 08             	shl    eax,0x8
c000ea9c:	89 d1                	mov    ecx,edx
c000ea9e:	09 c1                	or     ecx,eax
c000eaa0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaa4:	8d 50 02             	lea    edx,[eax+0x2]
c000eaa7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eaab:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eaaf:	0f b6 c0             	movzx  eax,al
c000eab2:	c1 e0 10             	shl    eax,0x10
c000eab5:	09 c1                	or     ecx,eax
c000eab7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eabb:	8d 50 03             	lea    edx,[eax+0x3]
c000eabe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eac2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eac6:	0f b6 c0             	movzx  eax,al
c000eac9:	c1 e0 18             	shl    eax,0x18
c000eacc:	09 c1                	or     ecx,eax
c000eace:	89 ca                	mov    edx,ecx
c000ead0:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000ead5:	0f b6 c0             	movzx  eax,al
c000ead8:	89 14 85 c0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8840],edx
c000eadf:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eae4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eae8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaec:	01 d0                	add    eax,edx
c000eaee:	83 c0 2c             	add    eax,0x2c
c000eaf1:	8a 00                	mov    al,BYTE PTR [eax]
c000eaf3:	0f b6 d0             	movzx  edx,al
c000eaf6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eafa:	8d 48 01             	lea    ecx,[eax+0x1]
c000eafd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb01:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eb05:	0f b6 c0             	movzx  eax,al
c000eb08:	c1 e0 08             	shl    eax,0x8
c000eb0b:	89 d1                	mov    ecx,edx
c000eb0d:	09 c1                	or     ecx,eax
c000eb0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb13:	8d 50 02             	lea    edx,[eax+0x2]
c000eb16:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb1a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb1e:	0f b6 c0             	movzx  eax,al
c000eb21:	c1 e0 10             	shl    eax,0x10
c000eb24:	09 c1                	or     ecx,eax
c000eb26:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb2a:	8d 50 03             	lea    edx,[eax+0x3]
c000eb2d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb31:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb35:	0f b6 c0             	movzx  eax,al
c000eb38:	c1 e0 18             	shl    eax,0x18
c000eb3b:	09 c1                	or     ecx,eax
c000eb3d:	89 ca                	mov    edx,ecx
c000eb3f:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eb44:	0f b6 c0             	movzx  eax,al
c000eb47:	89 14 85 40 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd87c0],edx
c000eb4e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eb53:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eb58:	83 c0 01             	add    eax,0x1
c000eb5b:	a2 80 77 02 c0       	mov    ds:0xc0027780,al
c000eb60:	e9 b3 01 00 00       	jmp    c000ed18 <scanMADT()+0x494>
c000eb65:	8d 76 00             	lea    esi,[esi+0x0]
c000eb68:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000eb6d:	83 f8 02             	cmp    eax,0x2
c000eb70:	0f 85 ea 00 00 00    	jne    c000ec60 <scanMADT()+0x3dc>
c000eb76:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb7a:	8d 50 01             	lea    edx,[eax+0x1]
c000eb7d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb81:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb85:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb89:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000eb8d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb91:	8d 50 01             	lea    edx,[eax+0x1]
c000eb94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb98:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb9c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eba0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000eba4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eba8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebac:	01 d0                	add    eax,edx
c000ebae:	83 c0 2c             	add    eax,0x2c
c000ebb1:	8a 00                	mov    al,BYTE PTR [eax]
c000ebb3:	0f b6 d0             	movzx  edx,al
c000ebb6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebba:	8d 48 01             	lea    ecx,[eax+0x1]
c000ebbd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebc1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ebc5:	0f b6 c0             	movzx  eax,al
c000ebc8:	c1 e0 08             	shl    eax,0x8
c000ebcb:	89 d1                	mov    ecx,edx
c000ebcd:	09 c1                	or     ecx,eax
c000ebcf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebd3:	8d 50 02             	lea    edx,[eax+0x2]
c000ebd6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebda:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ebde:	0f b6 c0             	movzx  eax,al
c000ebe1:	c1 e0 10             	shl    eax,0x10
c000ebe4:	09 c1                	or     ecx,eax
c000ebe6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebea:	8d 50 03             	lea    edx,[eax+0x3]
c000ebed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebf1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ebf5:	0f b6 c0             	movzx  eax,al
c000ebf8:	c1 e0 18             	shl    eax,0x18
c000ebfb:	09 c8                	or     eax,ecx
c000ebfd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ec01:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ec06:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec0e:	01 d0                	add    eax,edx
c000ec10:	83 c0 2c             	add    eax,0x2c
c000ec13:	8a 00                	mov    al,BYTE PTR [eax]
c000ec15:	0f b6 c0             	movzx  eax,al
c000ec18:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ec1c:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ec1f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec23:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000ec27:	0f b6 d2             	movzx  edx,dl
c000ec2a:	c1 e2 08             	shl    edx,0x8
c000ec2d:	09 d0                	or     eax,edx
c000ec2f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000ec34:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ec39:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000ec3e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ec42:	88 90 e0 1f 02 c0    	mov    BYTE PTR [eax-0x3ffde020],dl
c000ec48:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000ec4d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000ec52:	66 89 84 12 60 77 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd88a0],ax
c000ec5a:	e9 b9 00 00 00       	jmp    c000ed18 <scanMADT()+0x494>
c000ec5f:	90                   	nop
c000ec60:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ec65:	83 f8 04             	cmp    eax,0x4
c000ec68:	0f 85 9a 00 00 00    	jne    c000ed08 <scanMADT()+0x484>
c000ec6e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec72:	8d 50 01             	lea    edx,[eax+0x1]
c000ec75:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec79:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec7d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec81:	0f b6 c0             	movzx  eax,al
c000ec84:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec88:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec8c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec90:	01 d0                	add    eax,edx
c000ec92:	83 c0 2c             	add    eax,0x2c
c000ec95:	8a 00                	mov    al,BYTE PTR [eax]
c000ec97:	0f b6 d0             	movzx  edx,al
c000ec9a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec9e:	8d 48 01             	lea    ecx,[eax+0x1]
c000eca1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eca5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eca9:	0f b6 c0             	movzx  eax,al
c000ecac:	c1 e0 08             	shl    eax,0x8
c000ecaf:	09 d0                	or     eax,edx
c000ecb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ecb5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ecba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecbe:	8d 50 01             	lea    edx,[eax+0x1]
c000ecc1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ecc5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ecc9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eccd:	0f b6 c0             	movzx  eax,al
c000ecd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ecd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ecd8:	c1 e0 08             	shl    eax,0x8
c000ecdb:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ecdf:	89 c1                	mov    ecx,eax
c000ece1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ece5:	c1 e0 18             	shl    eax,0x18
c000ece8:	89 c3                	mov    ebx,eax
c000ecea:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c000ecef:	8d 50 01             	lea    edx,[eax+0x1]
c000ecf2:	89 15 d0 76 02 c0    	mov    DWORD PTR ds:0xc00276d0,edx
c000ecf8:	09 d9                	or     ecx,ebx
c000ecfa:	89 ca                	mov    edx,ecx
c000ecfc:	89 14 85 e0 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8920],edx
c000ed03:	eb 13                	jmp    c000ed18 <scanMADT()+0x494>
c000ed05:	8d 76 00             	lea    esi,[esi+0x0]
c000ed08:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ed0d:	83 f8 05             	cmp    eax,0x5
c000ed10:	75 06                	jne    c000ed18 <scanMADT()+0x494>
c000ed12:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ed17:	90                   	nop
c000ed18:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000ed1d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ed21:	01 d0                	add    eax,edx
c000ed23:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ed27:	e9 50 fc ff ff       	jmp    c000e97c <scanMADT()+0xf8>
c000ed2c:	90                   	nop
c000ed2d:	eb 05                	jmp    c000ed34 <scanMADT()+0x4b0>
c000ed2f:	90                   	nop
c000ed30:	90                   	nop
c000ed31:	8d 76 00             	lea    esi,[esi+0x0]
c000ed34:	83 c4 38             	add    esp,0x38
c000ed37:	5b                   	pop    ebx
c000ed38:	c3                   	ret    
c000ed39:	90                   	nop
c000ed3a:	66 90                	xchg   ax,ax

c000ed3c <ACPI::ACPI()>:
c000ed3c:	83 ec 0c             	sub    esp,0xc
c000ed3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed43:	83 ec 08             	sub    esp,0x8
c000ed46:	68 71 09 02 c0       	push   0xc0020971
c000ed4b:	50                   	push   eax
c000ed4c:	e8 65 d2 ff ff       	call   c000bfb6 <Device::Device(char const*)>
c000ed51:	83 c4 10             	add    esp,0x10
c000ed54:	ba e0 0a 02 c0       	mov    edx,0xc0020ae0
c000ed59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed5d:	89 10                	mov    DWORD PTR [eax],edx
c000ed5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed63:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ed6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed6e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ed78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed7c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000ed86:	e8 f9 fa ff ff       	call   c000e884 <scanMADT()>
c000ed8b:	90                   	nop
c000ed8c:	83 c4 0c             	add    esp,0xc
c000ed8f:	c3                   	ret    

c000ed90 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000ed90:	83 ec 2c             	sub    esp,0x2c
c000ed93:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ed97:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ed9b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ed9f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000eda3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000eda8:	88 d0                	mov    al,dl
c000edaa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000edae:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000edb3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000edbb:	90                   	nop
c000edbc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edc0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000edc6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000edca:	0f 8d b0 00 00 00    	jge    c000ee80 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000edd0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edd4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edd8:	83 c2 2a             	add    edx,0x2a
c000eddb:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000eddf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000ede4:	0f b7 c0             	movzx  eax,ax
c000ede7:	39 c2                	cmp    edx,eax
c000ede9:	0f 85 85 00 00 00    	jne    c000ee74 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000edef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edf3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edf7:	83 c2 2a             	add    edx,0x2a
c000edfa:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000edfe:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000ee03:	0f b6 c0             	movzx  eax,al
c000ee06:	39 c2                	cmp    edx,eax
c000ee08:	75 6a                	jne    c000ee74 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000ee0a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ee0f:	85 c0                	test   eax,eax
c000ee11:	74 3d                	je     c000ee50 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000ee13:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee17:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee1b:	83 c2 2a             	add    edx,0x2a
c000ee1e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000ee22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee29:	39 c2                	cmp    edx,eax
c000ee2b:	74 13                	je     c000ee40 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000ee2d:	83 ec 0c             	sub    esp,0xc
c000ee30:	68 ec 08 02 c0       	push   0xc00208ec
c000ee35:	e8 dd 1a 00 00       	call   c0010917 <KePanic(char const*)>
c000ee3a:	83 c4 10             	add    esp,0x10
c000ee3d:	8d 76 00             	lea    esi,[esi+0x0]
c000ee40:	83 ec 0c             	sub    esp,0xc
c000ee43:	68 76 09 02 c0       	push   0xc0020976
c000ee48:	e8 ca 1a 00 00       	call   c0010917 <KePanic(char const*)>
c000ee4d:	83 c4 10             	add    esp,0x10
c000ee50:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee54:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee58:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee5c:	83 c2 2a             	add    edx,0x2a
c000ee5f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000ee63:	8b 02                	mov    eax,DWORD PTR [edx]
c000ee65:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ee68:	89 01                	mov    DWORD PTR [ecx],eax
c000ee6a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ee6d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ee72:	66 90                	xchg   ax,ax
c000ee74:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000ee79:	e9 3e ff ff ff       	jmp    c000edbc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000ee7e:	66 90                	xchg   ax,ax
c000ee80:	90                   	nop
c000ee81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee85:	83 c4 2c             	add    esp,0x2c
c000ee88:	c2 04 00             	ret    0x4
c000ee8b:	90                   	nop

c000ee8c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000ee8c:	83 ec 1c             	sub    esp,0x1c
c000ee8f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee93:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ee97:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ee9b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000eea0:	88 c8                	mov    al,cl
c000eea2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000eea6:	88 d0                	mov    al,dl
c000eea8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000eeac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeb0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eeb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeba:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000eebd:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000eec1:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000eec5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eec9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eecf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000eed3:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000eed6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eeda:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000eedf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eee3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eee9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000eeed:	83 c0 01             	add    eax,0x1
c000eef0:	88 c1                	mov    cl,al
c000eef2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eef6:	83 c2 2a             	add    edx,0x2a
c000eef9:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000eefd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef01:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ef07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef0b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ef0e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ef12:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ef16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef1a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ef20:	8d 50 01             	lea    edx,[eax+0x1]
c000ef23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef27:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ef2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef31:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ef37:	3d 00 02 00 00       	cmp    eax,0x200
c000ef3c:	75 12                	jne    c000ef50 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000ef3e:	83 ec 0c             	sub    esp,0xc
c000ef41:	68 85 09 02 c0       	push   0xc0020985
c000ef46:	e8 cc 19 00 00       	call   c0010917 <KePanic(char const*)>
c000ef4b:	83 c4 10             	add    esp,0x10
c000ef4e:	66 90                	xchg   ax,ax
c000ef50:	90                   	nop
c000ef51:	83 c4 1c             	add    esp,0x1c
c000ef54:	c3                   	ret    
c000ef55:	90                   	nop
c000ef56:	66 90                	xchg   ax,ax

c000ef58 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ef58:	b8 00 00 00 00       	mov    eax,0x0
c000ef5d:	c3                   	ret    
c000ef5e:	66 90                	xchg   ax,ax

c000ef60 <ACPI::detectPCI()>:
c000ef60:	53                   	push   ebx
c000ef61:	83 ec 28             	sub    esp,0x28
c000ef64:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ef69:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ef6e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ef73:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef79:	83 e0 04             	and    eax,0x4
c000ef7c:	0f b6 c0             	movzx  eax,al
c000ef7f:	85 c0                	test   eax,eax
c000ef81:	74 2d                	je     c000efb0 <ACPI::detectPCI()+0x50>
c000ef83:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000ef88:	83 ec 08             	sub    esp,0x8
c000ef8b:	68 a2 09 02 c0       	push   0xc00209a2
c000ef90:	50                   	push   eax
c000ef91:	e8 6e f8 ff ff       	call   c000e804 <findDataTable(unsigned char*, char*)>
c000ef96:	83 c4 10             	add    esp,0x10
c000ef99:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef9d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000efa2:	74 0c                	je     c000efb0 <ACPI::detectPCI()+0x50>
c000efa4:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efa9:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000efae:	66 90                	xchg   ax,ax
c000efb0:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000efb8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efbc:	8a 00                	mov    al,BYTE PTR [eax]
c000efbe:	0f b6 c0             	movzx  eax,al
c000efc1:	83 f8 01             	cmp    eax,0x1
c000efc4:	75 0e                	jne    c000efd4 <ACPI::detectPCI()+0x74>
c000efc6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efcb:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000efd0:	eb 2e                	jmp    c000f000 <ACPI::detectPCI()+0xa0>
c000efd2:	66 90                	xchg   ax,ax
c000efd4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efd8:	8a 00                	mov    al,BYTE PTR [eax]
c000efda:	0f b6 c0             	movzx  eax,al
c000efdd:	83 f8 02             	cmp    eax,0x2
c000efe0:	75 1e                	jne    c000f000 <ACPI::detectPCI()+0xa0>
c000efe2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efe7:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000efec:	85 c0                	test   eax,eax
c000efee:	74 10                	je     c000f000 <ACPI::detectPCI()+0xa0>
c000eff0:	83 ec 0c             	sub    esp,0xc
c000eff3:	68 1c 09 02 c0       	push   0xc002091c
c000eff8:	e8 1a 19 00 00       	call   c0010917 <KePanic(char const*)>
c000effd:	83 c4 10             	add    esp,0x10
c000f000:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f004:	83 f0 01             	xor    eax,0x1
c000f007:	0f b6 c0             	movzx  eax,al
c000f00a:	85 c0                	test   eax,eax
c000f00c:	74 46                	je     c000f054 <ACPI::detectPCI()+0xf4>
c000f00e:	e8 1d 11 ff ff       	call   c0000130 <manualPCIProbe>
c000f013:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f017:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f01c:	75 0e                	jne    c000f02c <ACPI::detectPCI()+0xcc>
c000f01e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f023:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f028:	eb 2a                	jmp    c000f054 <ACPI::detectPCI()+0xf4>
c000f02a:	66 90                	xchg   ax,ax
c000f02c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f031:	75 21                	jne    c000f054 <ACPI::detectPCI()+0xf4>
c000f033:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f038:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f03d:	85 c0                	test   eax,eax
c000f03f:	74 13                	je     c000f054 <ACPI::detectPCI()+0xf4>
c000f041:	83 ec 0c             	sub    esp,0xc
c000f044:	68 1c 09 02 c0       	push   0xc002091c
c000f049:	e8 c9 18 00 00       	call   c0010917 <KePanic(char const*)>
c000f04e:	83 c4 10             	add    esp,0x10
c000f051:	8d 76 00             	lea    esi,[esi+0x0]
c000f054:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f059:	85 c0                	test   eax,eax
c000f05b:	0f 84 87 00 00 00    	je     c000f0e8 <ACPI::detectPCI()+0x188>
c000f061:	83 ec 0c             	sub    esp,0xc
c000f064:	68 a7 09 02 c0       	push   0xc00209a7
c000f069:	e8 2c 12 00 00       	call   c001029a <KeSetBootMessage(char const*)>
c000f06e:	83 c4 10             	add    esp,0x10
c000f071:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f079:	83 ec 0c             	sub    esp,0xc
c000f07c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f080:	e8 29 8a ff ff       	call   c0007aae <malloc>
c000f085:	83 c4 10             	add    esp,0x10
c000f088:	89 c3                	mov    ebx,eax
c000f08a:	83 ec 0c             	sub    esp,0xc
c000f08d:	53                   	push   ebx
c000f08e:	e8 31 b0 00 00       	call   c001a0c4 <PCI::PCI()>
c000f093:	83 c4 10             	add    esp,0x10
c000f096:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f09a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f09e:	83 ec 08             	sub    esp,0x8
c000f0a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f0a5:	50                   	push   eax
c000f0a6:	e8 73 cd ff ff       	call   c000be1e <Device::addChild(Device*)>
c000f0ab:	83 c4 10             	add    esp,0x10
c000f0ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b4:	83 c0 08             	add    eax,0x8
c000f0b7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b9:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f0be:	85 d2                	test   edx,edx
c000f0c0:	74 0a                	je     c000f0cc <ACPI::detectPCI()+0x16c>
c000f0c2:	ba 01 00 00 00       	mov    edx,0x1
c000f0c7:	eb 0b                	jmp    c000f0d4 <ACPI::detectPCI()+0x174>
c000f0c9:	8d 76 00             	lea    esi,[esi+0x0]
c000f0cc:	ba 02 00 00 00       	mov    edx,0x2
c000f0d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f0d4:	6a 00                	push   0x0
c000f0d6:	6a 00                	push   0x0
c000f0d8:	52                   	push   edx
c000f0d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f0dd:	ff d0                	call   eax
c000f0df:	83 c4 10             	add    esp,0x10
c000f0e2:	e9 91 00 00 00       	jmp    c000f178 <ACPI::detectPCI()+0x218>
c000f0e7:	90                   	nop
c000f0e8:	83 ec 0c             	sub    esp,0xc
c000f0eb:	68 bf 09 02 c0       	push   0xc00209bf
c000f0f0:	e8 a5 11 00 00       	call   c001029a <KeSetBootMessage(char const*)>
c000f0f5:	83 c4 10             	add    esp,0x10
c000f0f8:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f0ff:	83 ec 0c             	sub    esp,0xc
c000f102:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f106:	e8 a3 89 ff ff       	call   c0007aae <malloc>
c000f10b:	83 c4 10             	add    esp,0x10
c000f10e:	89 c3                	mov    ebx,eax
c000f110:	83 ec 0c             	sub    esp,0xc
c000f113:	53                   	push   ebx
c000f114:	e8 45 bb 00 00       	call   c001ac5e <IDE::IDE()>
c000f119:	83 c4 10             	add    esp,0x10
c000f11c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f120:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f124:	83 ec 08             	sub    esp,0x8
c000f127:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f12b:	50                   	push   eax
c000f12c:	e8 ed cc ff ff       	call   c000be1e <Device::addChild(Device*)>
c000f131:	83 c4 10             	add    esp,0x10
c000f134:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f138:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f142:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f146:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f14f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f153:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f15c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f160:	8b 00                	mov    eax,DWORD PTR [eax]
c000f162:	83 c0 08             	add    eax,0x8
c000f165:	8b 00                	mov    eax,DWORD PTR [eax]
c000f167:	6a 00                	push   0x0
c000f169:	6a 00                	push   0x0
c000f16b:	6a 00                	push   0x0
c000f16d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f171:	ff d0                	call   eax
c000f173:	83 c4 10             	add    esp,0x10
c000f176:	66 90                	xchg   ax,ax
c000f178:	90                   	nop
c000f179:	83 c4 28             	add    esp,0x28
c000f17c:	5b                   	pop    ebx
c000f17d:	c3                   	ret    
c000f17e:	66 90                	xchg   ax,ax

c000f180 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f180:	83 ec 1c             	sub    esp,0x1c
c000f183:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f187:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f18a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f18e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f193:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f198:	83 ec 08             	sub    esp,0x8
c000f19b:	52                   	push   edx
c000f19c:	50                   	push   eax
c000f19d:	e8 ce 7f ff ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c000f1a2:	83 c4 10             	add    esp,0x10
c000f1a5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f1a9:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f1ae:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f1b3:	83 ec 04             	sub    esp,0x4
c000f1b6:	6a 01                	push   0x1
c000f1b8:	52                   	push   edx
c000f1b9:	50                   	push   eax
c000f1ba:	e8 cb 80 ff ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c000f1bf:	83 c4 10             	add    esp,0x10
c000f1c2:	90                   	nop
c000f1c3:	83 c4 1c             	add    esp,0x1c
c000f1c6:	c3                   	ret    
c000f1c7:	90                   	nop

c000f1c8 <ACPI::sleep()>:
c000f1c8:	83 ec 0c             	sub    esp,0xc
c000f1cb:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f1d0:	85 c0                	test   eax,eax
c000f1d2:	74 08                	je     c000f1dc <ACPI::sleep()+0x14>
c000f1d4:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f1d9:	ff d0                	call   eax
c000f1db:	90                   	nop
c000f1dc:	90                   	nop
c000f1dd:	83 c4 0c             	add    esp,0xc
c000f1e0:	c3                   	ret    
c000f1e1:	90                   	nop
c000f1e2:	66 90                	xchg   ax,ax

c000f1e4 <ACPI::open(int, int, void*)>:
c000f1e4:	57                   	push   edi
c000f1e5:	56                   	push   esi
c000f1e6:	53                   	push   ebx
c000f1e7:	81 ec 70 01 00 00    	sub    esp,0x170
c000f1ed:	83 ec 0c             	sub    esp,0xc
c000f1f0:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f1f7:	e8 64 fd ff ff       	call   c000ef60 <ACPI::detectPCI()>
c000f1fc:	83 c4 10             	add    esp,0x10
c000f1ff:	83 ec 0c             	sub    esp,0xc
c000f202:	68 44 09 02 c0       	push   0xc0020944
c000f207:	e8 8e 10 00 00       	call   c001029a <KeSetBootMessage(char const*)>
c000f20c:	83 c4 10             	add    esp,0x10
c000f20f:	b8 4c 05 00 00       	mov    eax,0x54c
c000f214:	8a 00                	mov    al,BYTE PTR [eax]
c000f216:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000f21d:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000f225:	83 f8 01             	cmp    eax,0x1
c000f228:	75 12                	jne    c000f23c <ACPI::open(int, int, void*)+0x58>
c000f22a:	83 ec 0c             	sub    esp,0xc
c000f22d:	68 d4 09 02 c0       	push   0xc00209d4
c000f232:	e8 bd 49 00 00       	call   c0013bf4 <Thr::loadKernelSymbolTable(char const*)>
c000f237:	83 c4 10             	add    esp,0x10
c000f23a:	eb 34                	jmp    c000f270 <ACPI::open(int, int, void*)+0x8c>
c000f23c:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000f244:	3d bb 00 00 00       	cmp    eax,0xbb
c000f249:	75 15                	jne    c000f260 <ACPI::open(int, int, void*)+0x7c>
c000f24b:	83 ec 0c             	sub    esp,0xc
c000f24e:	68 f2 09 02 c0       	push   0xc00209f2
c000f253:	e8 9c 49 00 00       	call   c0013bf4 <Thr::loadKernelSymbolTable(char const*)>
c000f258:	83 c4 10             	add    esp,0x10
c000f25b:	eb 13                	jmp    c000f270 <ACPI::open(int, int, void*)+0x8c>
c000f25d:	8d 76 00             	lea    esi,[esi+0x0]
c000f260:	83 ec 0c             	sub    esp,0xc
c000f263:	68 10 0a 02 c0       	push   0xc0020a10
c000f268:	e8 aa 16 00 00       	call   c0010917 <KePanic(char const*)>
c000f26d:	83 c4 10             	add    esp,0x10
c000f270:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000f278:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000f283:	83 ec 0c             	sub    esp,0xc
c000f286:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f28d:	e8 1c 88 ff ff       	call   c0007aae <malloc>
c000f292:	83 c4 10             	add    esp,0x10
c000f295:	89 c3                	mov    ebx,eax
c000f297:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f29c:	83 ec 04             	sub    esp,0x4
c000f29f:	50                   	push   eax
c000f2a0:	68 2a 0a 02 c0       	push   0xc0020a2a
c000f2a5:	53                   	push   ebx
c000f2a6:	e8 c1 bc ff ff       	call   c000af6c <File::File(char const*, Process*)>
c000f2ab:	83 c4 10             	add    esp,0x10
c000f2ae:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000f2b5:	83 ec 08             	sub    esp,0x8
c000f2b8:	6a 01                	push   0x1
c000f2ba:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f2c1:	e8 62 bd ff ff       	call   c000b028 <File::open(FileOpenMode)>
c000f2c6:	83 c4 10             	add    esp,0x10
c000f2c9:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000f2d0:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000f2d8:	75 16                	jne    c000f2f0 <ACPI::open(int, int, void*)+0x10c>
c000f2da:	83 ec 0c             	sub    esp,0xc
c000f2dd:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f2e4:	e8 9d bd ff ff       	call   c000b086 <File::close()>
c000f2e9:	83 c4 10             	add    esp,0x10
c000f2ec:	eb 0a                	jmp    c000f2f8 <ACPI::open(int, int, void*)+0x114>
c000f2ee:	66 90                	xchg   ax,ax
c000f2f0:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000f2f8:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000f300:	74 1e                	je     c000f320 <ACPI::open(int, int, void*)+0x13c>
c000f302:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000f309:	8b 00                	mov    eax,DWORD PTR [eax]
c000f30b:	83 c0 08             	add    eax,0x8
c000f30e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f310:	83 ec 0c             	sub    esp,0xc
c000f313:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f31a:	ff d0                	call   eax
c000f31c:	83 c4 10             	add    esp,0x10
c000f31f:	90                   	nop
c000f320:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000f327:	83 f0 01             	xor    eax,0x1
c000f32a:	0f b6 c0             	movzx  eax,al
c000f32d:	85 c0                	test   eax,eax
c000f32f:	74 43                	je     c000f374 <ACPI::open(int, int, void*)+0x190>
c000f331:	83 ec 0c             	sub    esp,0xc
c000f334:	68 48 0a 02 c0       	push   0xc0020a48
c000f339:	e8 5c 0f 00 00       	call   c001029a <KeSetBootMessage(char const*)>
c000f33e:	83 c4 10             	add    esp,0x10
c000f341:	83 ec 04             	sub    esp,0x4
c000f344:	6a 0c                	push   0xc
c000f346:	68 63 0a 02 c0       	push   0xc0020a63
c000f34b:	68 74 0a 02 c0       	push   0xc0020a74
c000f350:	e8 4b 3c 00 00       	call   c0012fa0 <Reg::readIntWithDefault(char*, char*, int)>
c000f355:	83 c4 10             	add    esp,0x10
c000f358:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000f35f:	83 ec 0c             	sub    esp,0xc
c000f362:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000f369:	e8 de a4 ff ff       	call   c000984c <Virt::setupPageSwapping(int)>
c000f36e:	83 c4 10             	add    esp,0x10
c000f371:	8d 76 00             	lea    esi,[esi+0x0]
c000f374:	83 ec 0c             	sub    esp,0xc
c000f377:	68 55 fa 01 c0       	push   0xc001fa55
c000f37c:	e8 19 0f 00 00       	call   c001029a <KeSetBootMessage(char const*)>
c000f381:	83 c4 10             	add    esp,0x10
c000f384:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000f38b:	83 ec 08             	sub    esp,0x8
c000f38e:	6a 13                	push   0x13
c000f390:	50                   	push   eax
c000f391:	e8 a0 cd ff ff       	call   c000c136 <getDevicesOfType(DeviceType)>
c000f396:	83 c4 0c             	add    esp,0xc
c000f399:	8d 76 00             	lea    esi,[esi+0x0]
c000f39c:	83 ec 0c             	sub    esp,0xc
c000f39f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f3a6:	50                   	push   eax
c000f3a7:	e8 94 fa 00 00       	call   c001ee40 <LinkedList<Device>::isEmpty()>
c000f3ac:	83 c4 10             	add    esp,0x10
c000f3af:	83 f0 01             	xor    eax,0x1
c000f3b2:	0f b6 c0             	movzx  eax,al
c000f3b5:	85 c0                	test   eax,eax
c000f3b7:	0f 84 47 01 00 00    	je     c000f504 <ACPI::open(int, int, void*)+0x320>
c000f3bd:	83 ec 0c             	sub    esp,0xc
c000f3c0:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f3c7:	50                   	push   eax
c000f3c8:	e8 8f fa 00 00       	call   c001ee5c <LinkedList<Device>::getFirstElement()>
c000f3cd:	83 c4 10             	add    esp,0x10
c000f3d0:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000f3d7:	83 ec 0c             	sub    esp,0xc
c000f3da:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f3e1:	50                   	push   eax
c000f3e2:	e8 7d fa 00 00       	call   c001ee64 <LinkedList<Device>::removeFirst()>
c000f3e7:	83 c4 10             	add    esp,0x10
c000f3ea:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000f3f1:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000f3f8:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000f3ff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f403:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000f409:	ba 09 00 00 00       	mov    edx,0x9
c000f40e:	fc                   	cld    
c000f40f:	89 c7                	mov    edi,eax
c000f411:	89 de                	mov    esi,ebx
c000f413:	89 d1                	mov    ecx,edx
c000f415:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f417:	83 ec 08             	sub    esp,0x8
c000f41a:	8d 44 24 38          	lea    eax,[esp+0x38]
c000f41e:	50                   	push   eax
c000f41f:	83 ec 24             	sub    esp,0x24
c000f422:	89 e0                	mov    eax,esp
c000f424:	89 c3                	mov    ebx,eax
c000f426:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000f42a:	ba 09 00 00 00       	mov    edx,0x9
c000f42f:	89 df                	mov    edi,ebx
c000f431:	89 c6                	mov    esi,eax
c000f433:	89 d1                	mov    ecx,edx
c000f435:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f437:	e8 72 b1 00 00       	call   c001a5ae <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f43c:	83 c4 30             	add    esp,0x30
c000f43f:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000f446:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000f44e:	0f 84 48 ff ff ff    	je     c000f39c <ACPI::open(int, int, void*)+0x1b8>
c000f454:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000f45f:	83 ec 0c             	sub    esp,0xc
c000f462:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f469:	e8 40 86 ff ff       	call   c0007aae <malloc>
c000f46e:	83 c4 10             	add    esp,0x10
c000f471:	89 c3                	mov    ebx,eax
c000f473:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f478:	83 ec 04             	sub    esp,0x4
c000f47b:	50                   	push   eax
c000f47c:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f483:	53                   	push   ebx
c000f484:	e8 e3 ba ff ff       	call   c000af6c <File::File(char const*, Process*)>
c000f489:	83 c4 10             	add    esp,0x10
c000f48c:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000f493:	83 ec 0c             	sub    esp,0xc
c000f496:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f49d:	e8 f4 bd ff ff       	call   c000b296 <File::exists()>
c000f4a2:	83 c4 10             	add    esp,0x10
c000f4a5:	0f b6 c0             	movzx  eax,al
c000f4a8:	85 c0                	test   eax,eax
c000f4aa:	74 28                	je     c000f4d4 <ACPI::open(int, int, void*)+0x2f0>
c000f4ac:	83 ec 08             	sub    esp,0x8
c000f4af:	6a 01                	push   0x1
c000f4b1:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f4b8:	e8 b1 51 00 00       	call   c001466e <Thr::loadDLL(char const*, bool)>
c000f4bd:	83 c4 10             	add    esp,0x10
c000f4c0:	83 ec 08             	sub    esp,0x8
c000f4c3:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f4ca:	50                   	push   eax
c000f4cb:	e8 cf 53 00 00       	call   c001489f <Thr::executeDLL(unsigned long, void*)>
c000f4d0:	83 c4 10             	add    esp,0x10
c000f4d3:	90                   	nop
c000f4d4:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000f4dc:	0f 84 ba fe ff ff    	je     c000f39c <ACPI::open(int, int, void*)+0x1b8>
c000f4e2:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000f4e9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4eb:	83 c0 08             	add    eax,0x8
c000f4ee:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4f0:	83 ec 0c             	sub    esp,0xc
c000f4f3:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f4fa:	ff d0                	call   eax
c000f4fc:	83 c4 10             	add    esp,0x10
c000f4ff:	e9 98 fe ff ff       	jmp    c000f39c <ACPI::open(int, int, void*)+0x1b8>
c000f504:	83 ec 0c             	sub    esp,0xc
c000f507:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f50e:	50                   	push   eax
c000f50f:	e8 28 f9 00 00       	call   c001ee3c <LinkedList<Device>::~LinkedList()>
c000f514:	83 c4 10             	add    esp,0x10
c000f517:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000f51d:	83 ec 08             	sub    esp,0x8
c000f520:	6a 01                	push   0x1
c000f522:	68 7b 0a 02 c0       	push   0xc0020a7b
c000f527:	e8 42 51 00 00       	call   c001466e <Thr::loadDLL(char const*, bool)>
c000f52c:	83 c4 10             	add    esp,0x10
c000f52f:	83 ec 08             	sub    esp,0x8
c000f532:	53                   	push   ebx
c000f533:	50                   	push   eax
c000f534:	e8 66 53 00 00       	call   c001489f <Thr::executeDLL(unsigned long, void*)>
c000f539:	83 c4 10             	add    esp,0x10
c000f53c:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f541:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f547:	83 e0 04             	and    eax,0x4
c000f54a:	0f b6 c0             	movzx  eax,al
c000f54d:	85 c0                	test   eax,eax
c000f54f:	0f 84 1b 01 00 00    	je     c000f670 <ACPI::open(int, int, void*)+0x48c>
c000f555:	83 ec 0c             	sub    esp,0xc
c000f558:	68 98 0a 02 c0       	push   0xc0020a98
c000f55d:	e8 38 0d 00 00       	call   c001029a <KeSetBootMessage(char const*)>
c000f562:	83 c4 10             	add    esp,0x10
c000f565:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f570:	83 ec 0c             	sub    esp,0xc
c000f573:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f57a:	e8 2f 85 ff ff       	call   c0007aae <malloc>
c000f57f:	83 c4 10             	add    esp,0x10
c000f582:	89 c3                	mov    ebx,eax
c000f584:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f589:	83 ec 04             	sub    esp,0x4
c000f58c:	50                   	push   eax
c000f58d:	68 b5 0a 02 c0       	push   0xc0020ab5
c000f592:	53                   	push   ebx
c000f593:	e8 d4 b9 ff ff       	call   c000af6c <File::File(char const*, Process*)>
c000f598:	83 c4 10             	add    esp,0x10
c000f59b:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f5a2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f5aa:	74 20                	je     c000f5cc <ACPI::open(int, int, void*)+0x3e8>
c000f5ac:	83 ec 0c             	sub    esp,0xc
c000f5af:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f5b6:	e8 db bc ff ff       	call   c000b296 <File::exists()>
c000f5bb:	83 c4 10             	add    esp,0x10
c000f5be:	0f b6 c0             	movzx  eax,al
c000f5c1:	85 c0                	test   eax,eax
c000f5c3:	74 07                	je     c000f5cc <ACPI::open(int, int, void*)+0x3e8>
c000f5c5:	b0 01                	mov    al,0x1
c000f5c7:	eb 07                	jmp    c000f5d0 <ACPI::open(int, int, void*)+0x3ec>
c000f5c9:	8d 76 00             	lea    esi,[esi+0x0]
c000f5cc:	b0 00                	mov    al,0x0
c000f5ce:	66 90                	xchg   ax,ax
c000f5d0:	0f b6 c0             	movzx  eax,al
c000f5d3:	85 c0                	test   eax,eax
c000f5d5:	74 25                	je     c000f5fc <ACPI::open(int, int, void*)+0x418>
c000f5d7:	83 ec 08             	sub    esp,0x8
c000f5da:	6a 01                	push   0x1
c000f5dc:	68 b5 0a 02 c0       	push   0xc0020ab5
c000f5e1:	e8 88 50 00 00       	call   c001466e <Thr::loadDLL(char const*, bool)>
c000f5e6:	83 c4 10             	add    esp,0x10
c000f5e9:	83 ec 08             	sub    esp,0x8
c000f5ec:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f5f3:	50                   	push   eax
c000f5f4:	e8 a6 52 00 00       	call   c001489f <Thr::executeDLL(unsigned long, void*)>
c000f5f9:	83 c4 10             	add    esp,0x10
c000f5fc:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f604:	74 2a                	je     c000f630 <ACPI::open(int, int, void*)+0x44c>
c000f606:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f60e:	74 20                	je     c000f630 <ACPI::open(int, int, void*)+0x44c>
c000f610:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f617:	8b 00                	mov    eax,DWORD PTR [eax]
c000f619:	83 c0 08             	add    eax,0x8
c000f61c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f61e:	83 ec 0c             	sub    esp,0xc
c000f621:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f628:	ff d0                	call   eax
c000f62a:	83 c4 10             	add    esp,0x10
c000f62d:	8d 76 00             	lea    esi,[esi+0x0]
c000f630:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000f635:	83 ec 08             	sub    esp,0x8
c000f638:	68 d2 0a 02 c0       	push   0xc0020ad2
c000f63d:	50                   	push   eax
c000f63e:	e8 c1 f1 ff ff       	call   c000e804 <findDataTable(unsigned char*, char*)>
c000f643:	83 c4 10             	add    esp,0x10
c000f646:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f64d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f655:	74 19                	je     c000f670 <ACPI::open(int, int, void*)+0x48c>
c000f657:	83 ec 08             	sub    esp,0x8
c000f65a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f661:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f668:	e8 13 fb ff ff       	call   c000f180 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f66d:	83 c4 10             	add    esp,0x10
c000f670:	b8 00 00 00 00       	mov    eax,0x0
c000f675:	81 c4 70 01 00 00    	add    esp,0x170
c000f67b:	5b                   	pop    ebx
c000f67c:	5e                   	pop    esi
c000f67d:	5f                   	pop    edi
c000f67e:	c3                   	ret    
c000f67f:	90                   	nop

c000f680 <CPU::close(int, int, void*)>:
c000f680:	31 c0                	xor    eax,eax
c000f682:	c3                   	ret    
c000f683:	90                   	nop

c000f684 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f684:	60                   	pusha  
c000f685:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f689:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f68d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f691:	9c                   	pushf  
c000f692:	fa                   	cli    
c000f693:	0f 09                	wbinvd 
c000f695:	0f 30                	wrmsr  
c000f697:	9d                   	popf   
c000f698:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f69c:	89 02                	mov    DWORD PTR [edx],eax
c000f69e:	61                   	popa   
c000f69f:	c3                   	ret    

c000f6a0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f6a0:	60                   	pusha  
c000f6a1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f6a5:	9c                   	pushf  
c000f6a6:	fa                   	cli    
c000f6a7:	0f 09                	wbinvd 
c000f6a9:	31 c0                	xor    eax,eax
c000f6ab:	31 d2                	xor    edx,edx
c000f6ad:	0f 32                	rdmsr  
c000f6af:	9d                   	popf   
c000f6b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f6b4:	89 02                	mov    DWORD PTR [edx],eax
c000f6b6:	61                   	popa   
c000f6b7:	c3                   	ret    

c000f6b8 <CPU::AMD_K6_writeback(int, int, int)>:
c000f6b8:	56                   	push   esi
c000f6b9:	53                   	push   ebx
c000f6ba:	83 ec 10             	sub    esp,0x10
c000f6bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6c1:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f6c6:	75 5d                	jne    c000f725 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f6c8:	83 f8 08             	cmp    eax,0x8
c000f6cb:	75 09                	jne    c000f6d6 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f6cd:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f6d2:	7e 13                	jle    c000f6e7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f6d4:	eb 30                	jmp    c000f706 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f6d6:	83 f8 06             	cmp    eax,0x6
c000f6d9:	7c 4a                	jl     c000f725 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f6db:	83 f8 07             	cmp    eax,0x7
c000f6de:	7e 07                	jle    c000f6e7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f6e0:	83 f8 09             	cmp    eax,0x9
c000f6e3:	74 21                	je     c000f706 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f6e5:	eb 3e                	jmp    c000f725 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f6e7:	89 e6                	mov    esi,esp
c000f6e9:	8b 1d dc 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024edc
c000f6ef:	56                   	push   esi
c000f6f0:	c1 eb 15             	shr    ebx,0x15
c000f6f3:	68 82 00 00 c0       	push   0xc0000082
c000f6f8:	83 e3 7e             	and    ebx,0x7e
c000f6fb:	e8 a0 ff ff ff       	call   c000f6a0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f700:	56                   	push   esi
c000f701:	6a 00                	push   0x0
c000f703:	53                   	push   ebx
c000f704:	eb 12                	jmp    c000f718 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f706:	89 e3                	mov    ebx,esp
c000f708:	53                   	push   ebx
c000f709:	68 82 00 00 c0       	push   0xc0000082
c000f70e:	e8 8d ff ff ff       	call   c000f6a0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f713:	53                   	push   ebx
c000f714:	6a 00                	push   0x0
c000f716:	6a 00                	push   0x0
c000f718:	68 82 00 00 c0       	push   0xc0000082
c000f71d:	e8 62 ff ff ff       	call   c000f684 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f722:	83 c4 18             	add    esp,0x18
c000f725:	83 c4 10             	add    esp,0x10
c000f728:	5b                   	pop    ebx
c000f729:	5e                   	pop    esi
c000f72a:	c3                   	ret    
c000f72b:	90                   	nop

c000f72c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f72c:	55                   	push   ebp
c000f72d:	57                   	push   edi
c000f72e:	56                   	push   esi
c000f72f:	53                   	push   ebx
c000f730:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f734:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f738:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f73c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f740:	39 05 f0 1f 02 c0    	cmp    DWORD PTR ds:0xc0021ff0,eax
c000f746:	75 23                	jne    c000f76b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f748:	a1 2c 79 02 c0       	mov    eax,ds:0xc002792c
c000f74d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f751:	89 06                	mov    DWORD PTR [esi],eax
c000f753:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f758:	89 07                	mov    DWORD PTR [edi],eax
c000f75a:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c000f75f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f762:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c000f767:	89 02                	mov    DWORD PTR [edx],eax
c000f769:	eb 3f                	jmp    c000f7aa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f76b:	31 c9                	xor    ecx,ecx
c000f76d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f771:	0f a2                	cpuid  
c000f773:	89 06                	mov    DWORD PTR [esi],eax
c000f775:	89 1f                	mov    DWORD PTR [edi],ebx
c000f777:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f77b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f77e:	89 10                	mov    DWORD PTR [eax],edx
c000f780:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f784:	a3 f0 1f 02 c0       	mov    ds:0xc0021ff0,eax
c000f789:	8b 06                	mov    eax,DWORD PTR [esi]
c000f78b:	a3 2c 79 02 c0       	mov    ds:0xc002792c,eax
c000f790:	8b 07                	mov    eax,DWORD PTR [edi]
c000f792:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f797:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f79a:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c000f79f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f7a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7a5:	a3 20 79 02 c0       	mov    ds:0xc0027920,eax
c000f7aa:	5b                   	pop    ebx
c000f7ab:	5e                   	pop    esi
c000f7ac:	5f                   	pop    edi
c000f7ad:	5d                   	pop    ebp
c000f7ae:	c3                   	ret    
c000f7af:	90                   	nop

c000f7b0 <CPU::cpuidCheckEDX(unsigned int)>:
c000f7b0:	83 ec 10             	sub    esp,0x10
c000f7b3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7b7:	50                   	push   eax
c000f7b8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7bc:	50                   	push   eax
c000f7bd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7c1:	50                   	push   eax
c000f7c2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7c6:	50                   	push   eax
c000f7c7:	6a 01                	push   0x1
c000f7c9:	e8 5e ff ff ff       	call   c000f72c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7d2:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f7d6:	0f 95 c0             	setne  al
c000f7d9:	83 c4 24             	add    esp,0x24
c000f7dc:	c3                   	ret    
c000f7dd:	90                   	nop

c000f7de <CPU::cpuidCheckECX(unsigned int)>:
c000f7de:	83 ec 10             	sub    esp,0x10
c000f7e1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7e5:	50                   	push   eax
c000f7e6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7ea:	50                   	push   eax
c000f7eb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7ef:	50                   	push   eax
c000f7f0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7f4:	50                   	push   eax
c000f7f5:	6a 01                	push   0x1
c000f7f7:	e8 30 ff ff ff       	call   c000f72c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f800:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f804:	0f 95 c0             	setne  al
c000f807:	83 c4 24             	add    esp,0x24
c000f80a:	c3                   	ret    
c000f80b:	90                   	nop

c000f80c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f80c:	83 ec 10             	sub    esp,0x10
c000f80f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f813:	50                   	push   eax
c000f814:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f818:	50                   	push   eax
c000f819:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f81d:	50                   	push   eax
c000f81e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f822:	50                   	push   eax
c000f823:	6a 07                	push   0x7
c000f825:	e8 02 ff ff ff       	call   c000f72c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f82a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f82e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f832:	0f 95 c0             	setne  al
c000f835:	83 c4 24             	add    esp,0x24
c000f838:	c3                   	ret    
c000f839:	90                   	nop

c000f83a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f83a:	83 ec 10             	sub    esp,0x10
c000f83d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f841:	50                   	push   eax
c000f842:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f846:	50                   	push   eax
c000f847:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f84b:	50                   	push   eax
c000f84c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f850:	50                   	push   eax
c000f851:	6a 07                	push   0x7
c000f853:	e8 d4 fe ff ff       	call   c000f72c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f858:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f85c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f860:	0f 95 c0             	setne  al
c000f863:	83 c4 24             	add    esp,0x24
c000f866:	c3                   	ret    
c000f867:	90                   	nop

c000f868 <CPU::CPU()>:
c000f868:	83 ec 0c             	sub    esp,0xc
c000f86b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f86f:	83 ec 08             	sub    esp,0x8
c000f872:	68 f5 0b 02 c0       	push   0xc0020bf5
c000f877:	50                   	push   eax
c000f878:	e8 39 c7 ff ff       	call   c000bfb6 <Device::Device(char const*)>
c000f87d:	83 c4 10             	add    esp,0x10
c000f880:	ba 7c 0c 02 c0       	mov    edx,0xc0020c7c
c000f885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f889:	89 10                	mov    DWORD PTR [eax],edx
c000f88b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f88f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f89d:	05 78 01 00 00       	add    eax,0x178
c000f8a2:	83 ec 0c             	sub    esp,0xc
c000f8a5:	50                   	push   eax
c000f8a6:	e8 a9 7a ff ff       	call   c0007354 <GDT::GDT()>
c000f8ab:	83 c4 10             	add    esp,0x10
c000f8ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8b2:	05 7c 09 00 00       	add    eax,0x97c
c000f8b7:	83 ec 0c             	sub    esp,0xc
c000f8ba:	50                   	push   eax
c000f8bb:	e8 e4 7c ff ff       	call   c00075a4 <IDT::IDT()>
c000f8c0:	83 c4 10             	add    esp,0x10
c000f8c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8c7:	05 7c 11 00 00       	add    eax,0x117c
c000f8cc:	83 ec 0c             	sub    esp,0xc
c000f8cf:	50                   	push   eax
c000f8d0:	e8 7f 96 ff ff       	call   c0008f54 <TSS::TSS()>
c000f8d5:	83 c4 10             	add    esp,0x10
c000f8d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8dc:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8e7:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000f8f1:	90                   	nop
c000f8f2:	83 c4 0c             	add    esp,0xc
c000f8f5:	c3                   	ret    

c000f8f6 <CPU::displayFeatures()>:
c000f8f6:	c3                   	ret    
c000f8f7:	90                   	nop

c000f8f8 <CPU::detectFeatures()>:
c000f8f8:	55                   	push   ebp
c000f8f9:	57                   	push   edi
c000f8fa:	56                   	push   esi
c000f8fb:	53                   	push   ebx
c000f8fc:	83 ec 30             	sub    esp,0x30
c000f8ff:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f903:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f90d:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f914:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f91a:	6a 0d                	push   0xd
c000f91c:	6a 00                	push   0x0
c000f91e:	55                   	push   ebp
c000f91f:	e8 cc 0b ff ff       	call   c00004f0 <memset>
c000f924:	83 c4 10             	add    esp,0x10
c000f927:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f92c:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f933:	0f 84 db 05 00 00    	je     c000ff14 <CPU::detectFeatures()+0x61c>
c000f939:	83 ec 0c             	sub    esp,0xc
c000f93c:	89 ef                	mov    edi,ebp
c000f93e:	6a 10                	push   0x10
c000f940:	e8 6b fe ff ff       	call   c000f7b0 <CPU::cpuidCheckEDX(unsigned int)>
c000f945:	83 e0 01             	and    eax,0x1
c000f948:	8d 14 00             	lea    edx,[eax+eax*1]
c000f94b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f951:	83 e0 fd             	and    eax,0xfffffffd
c000f954:	09 d0                	or     eax,edx
c000f956:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f95c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f963:	e8 48 fe ff ff       	call   c000f7b0 <CPU::cpuidCheckEDX(unsigned int)>
c000f968:	83 e0 01             	and    eax,0x1
c000f96b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f972:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f978:	83 e0 fb             	and    eax,0xfffffffb
c000f97b:	09 d0                	or     eax,edx
c000f97d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f983:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f98a:	e8 21 fe ff ff       	call   c000f7b0 <CPU::cpuidCheckEDX(unsigned int)>
c000f98f:	83 e0 01             	and    eax,0x1
c000f992:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f999:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f99f:	83 e0 f7             	and    eax,0xfffffff7
c000f9a2:	09 d0                	or     eax,edx
c000f9a4:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f9aa:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f9b1:	e8 fa fd ff ff       	call   c000f7b0 <CPU::cpuidCheckEDX(unsigned int)>
c000f9b6:	83 e0 01             	and    eax,0x1
c000f9b9:	c1 e0 04             	shl    eax,0x4
c000f9bc:	89 c2                	mov    edx,eax
c000f9be:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f9c4:	83 e0 ef             	and    eax,0xffffffef
c000f9c7:	09 d0                	or     eax,edx
c000f9c9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f9cf:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f9d6:	e8 d5 fd ff ff       	call   c000f7b0 <CPU::cpuidCheckEDX(unsigned int)>
c000f9db:	83 e0 01             	and    eax,0x1
c000f9de:	c1 e0 05             	shl    eax,0x5
c000f9e1:	89 c2                	mov    edx,eax
c000f9e3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f9e9:	83 e0 df             	and    eax,0xffffffdf
c000f9ec:	09 d0                	or     eax,edx
c000f9ee:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f9f4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f9fb:	e8 b0 fd ff ff       	call   c000f7b0 <CPU::cpuidCheckEDX(unsigned int)>
c000fa00:	83 e0 01             	and    eax,0x1
c000fa03:	8d 14 00             	lea    edx,[eax+eax*1]
c000fa06:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fa0c:	83 e0 fd             	and    eax,0xfffffffd
c000fa0f:	09 d0                	or     eax,edx
c000fa11:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fa17:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000fa1e:	e8 8d fd ff ff       	call   c000f7b0 <CPU::cpuidCheckEDX(unsigned int)>
c000fa23:	83 e0 01             	and    eax,0x1
c000fa26:	c1 e0 06             	shl    eax,0x6
c000fa29:	89 c2                	mov    edx,eax
c000fa2b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fa31:	83 e0 bf             	and    eax,0xffffffbf
c000fa34:	09 d0                	or     eax,edx
c000fa36:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fa3c:	58                   	pop    eax
c000fa3d:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fa41:	50                   	push   eax
c000fa42:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fa46:	50                   	push   eax
c000fa47:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fa4b:	56                   	push   esi
c000fa4c:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fa50:	50                   	push   eax
c000fa51:	6a 00                	push   0x0
c000fa53:	e8 d4 fc ff ff       	call   c000f72c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fa58:	b8 04 00 00 00       	mov    eax,0x4
c000fa5d:	89 c1                	mov    ecx,eax
c000fa5f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa61:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000fa67:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000fa6b:	89 c1                	mov    ecx,eax
c000fa6d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa6f:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000fa75:	8d 74 24 38          	lea    esi,[esp+0x38]
c000fa79:	89 c1                	mov    ecx,eax
c000fa7b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa7d:	83 c4 18             	add    esp,0x18
c000fa80:	68 04 0b 02 c0       	push   0xc0020b04
c000fa85:	55                   	push   ebp
c000fa86:	e8 c5 0c ff ff       	call   c0000750 <strcmp>
c000fa8b:	83 c4 10             	add    esp,0x10
c000fa8e:	85 c0                	test   eax,eax
c000fa90:	75 0f                	jne    c000faa1 <CPU::detectFeatures()+0x1a9>
c000fa92:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000fa9c:	e9 22 02 00 00       	jmp    c000fcc3 <CPU::detectFeatures()+0x3cb>
c000faa1:	50                   	push   eax
c000faa2:	50                   	push   eax
c000faa3:	68 11 0b 02 c0       	push   0xc0020b11
c000faa8:	55                   	push   ebp
c000faa9:	e8 a2 0c ff ff       	call   c0000750 <strcmp>
c000faae:	83 c4 10             	add    esp,0x10
c000fab1:	85 c0                	test   eax,eax
c000fab3:	74 dd                	je     c000fa92 <CPU::detectFeatures()+0x19a>
c000fab5:	50                   	push   eax
c000fab6:	50                   	push   eax
c000fab7:	68 1e 0b 02 c0       	push   0xc0020b1e
c000fabc:	55                   	push   ebp
c000fabd:	e8 8e 0c ff ff       	call   c0000750 <strcmp>
c000fac2:	83 c4 10             	add    esp,0x10
c000fac5:	85 c0                	test   eax,eax
c000fac7:	74 2a                	je     c000faf3 <CPU::detectFeatures()+0x1fb>
c000fac9:	50                   	push   eax
c000faca:	50                   	push   eax
c000facb:	68 2b 0b 02 c0       	push   0xc0020b2b
c000fad0:	55                   	push   ebp
c000fad1:	e8 7a 0c ff ff       	call   c0000750 <strcmp>
c000fad6:	83 c4 10             	add    esp,0x10
c000fad9:	85 c0                	test   eax,eax
c000fadb:	74 16                	je     c000faf3 <CPU::detectFeatures()+0x1fb>
c000fadd:	50                   	push   eax
c000fade:	50                   	push   eax
c000fadf:	68 38 0b 02 c0       	push   0xc0020b38
c000fae4:	55                   	push   ebp
c000fae5:	e8 66 0c ff ff       	call   c0000750 <strcmp>
c000faea:	83 c4 10             	add    esp,0x10
c000faed:	85 c0                	test   eax,eax
c000faef:	74 48                	je     c000fb39 <CPU::detectFeatures()+0x241>
c000faf1:	eb 0f                	jmp    c000fb02 <CPU::detectFeatures()+0x20a>
c000faf3:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000fafd:	e9 c1 01 00 00       	jmp    c000fcc3 <CPU::detectFeatures()+0x3cb>
c000fb02:	50                   	push   eax
c000fb03:	50                   	push   eax
c000fb04:	68 45 0b 02 c0       	push   0xc0020b45
c000fb09:	55                   	push   ebp
c000fb0a:	e8 41 0c ff ff       	call   c0000750 <strcmp>
c000fb0f:	83 c4 10             	add    esp,0x10
c000fb12:	85 c0                	test   eax,eax
c000fb14:	74 23                	je     c000fb39 <CPU::detectFeatures()+0x241>
c000fb16:	57                   	push   edi
c000fb17:	57                   	push   edi
c000fb18:	68 52 0b 02 c0       	push   0xc0020b52
c000fb1d:	55                   	push   ebp
c000fb1e:	e8 2d 0c ff ff       	call   c0000750 <strcmp>
c000fb23:	83 c4 10             	add    esp,0x10
c000fb26:	85 c0                	test   eax,eax
c000fb28:	75 1e                	jne    c000fb48 <CPU::detectFeatures()+0x250>
c000fb2a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fb34:	e9 8a 01 00 00       	jmp    c000fcc3 <CPU::detectFeatures()+0x3cb>
c000fb39:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000fb43:	e9 7b 01 00 00       	jmp    c000fcc3 <CPU::detectFeatures()+0x3cb>
c000fb48:	56                   	push   esi
c000fb49:	56                   	push   esi
c000fb4a:	68 5f 0b 02 c0       	push   0xc0020b5f
c000fb4f:	55                   	push   ebp
c000fb50:	e8 fb 0b ff ff       	call   c0000750 <strcmp>
c000fb55:	83 c4 10             	add    esp,0x10
c000fb58:	85 c0                	test   eax,eax
c000fb5a:	75 0f                	jne    c000fb6b <CPU::detectFeatures()+0x273>
c000fb5c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000fb66:	e9 58 01 00 00       	jmp    c000fcc3 <CPU::detectFeatures()+0x3cb>
c000fb6b:	51                   	push   ecx
c000fb6c:	51                   	push   ecx
c000fb6d:	68 1e 0b 02 c0       	push   0xc0020b1e
c000fb72:	55                   	push   ebp
c000fb73:	e8 d8 0b ff ff       	call   c0000750 <strcmp>
c000fb78:	83 c4 10             	add    esp,0x10
c000fb7b:	85 c0                	test   eax,eax
c000fb7d:	75 0f                	jne    c000fb8e <CPU::detectFeatures()+0x296>
c000fb7f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fb89:	e9 35 01 00 00       	jmp    c000fcc3 <CPU::detectFeatures()+0x3cb>
c000fb8e:	52                   	push   edx
c000fb8f:	52                   	push   edx
c000fb90:	68 6c 0b 02 c0       	push   0xc0020b6c
c000fb95:	55                   	push   ebp
c000fb96:	e8 b5 0b ff ff       	call   c0000750 <strcmp>
c000fb9b:	83 c4 10             	add    esp,0x10
c000fb9e:	85 c0                	test   eax,eax
c000fba0:	75 0f                	jne    c000fbb1 <CPU::detectFeatures()+0x2b9>
c000fba2:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fbac:	e9 12 01 00 00       	jmp    c000fcc3 <CPU::detectFeatures()+0x3cb>
c000fbb1:	50                   	push   eax
c000fbb2:	50                   	push   eax
c000fbb3:	68 79 0b 02 c0       	push   0xc0020b79
c000fbb8:	55                   	push   ebp
c000fbb9:	e8 92 0b ff ff       	call   c0000750 <strcmp>
c000fbbe:	83 c4 10             	add    esp,0x10
c000fbc1:	85 c0                	test   eax,eax
c000fbc3:	75 0f                	jne    c000fbd4 <CPU::detectFeatures()+0x2dc>
c000fbc5:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fbcf:	e9 ef 00 00 00       	jmp    c000fcc3 <CPU::detectFeatures()+0x3cb>
c000fbd4:	50                   	push   eax
c000fbd5:	50                   	push   eax
c000fbd6:	68 86 0b 02 c0       	push   0xc0020b86
c000fbdb:	55                   	push   ebp
c000fbdc:	e8 6f 0b ff ff       	call   c0000750 <strcmp>
c000fbe1:	83 c4 10             	add    esp,0x10
c000fbe4:	85 c0                	test   eax,eax
c000fbe6:	75 0f                	jne    c000fbf7 <CPU::detectFeatures()+0x2ff>
c000fbe8:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fbf2:	e9 cc 00 00 00       	jmp    c000fcc3 <CPU::detectFeatures()+0x3cb>
c000fbf7:	50                   	push   eax
c000fbf8:	50                   	push   eax
c000fbf9:	68 93 0b 02 c0       	push   0xc0020b93
c000fbfe:	55                   	push   ebp
c000fbff:	e8 4c 0b ff ff       	call   c0000750 <strcmp>
c000fc04:	83 c4 10             	add    esp,0x10
c000fc07:	85 c0                	test   eax,eax
c000fc09:	75 0f                	jne    c000fc1a <CPU::detectFeatures()+0x322>
c000fc0b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fc15:	e9 a9 00 00 00       	jmp    c000fcc3 <CPU::detectFeatures()+0x3cb>
c000fc1a:	50                   	push   eax
c000fc1b:	50                   	push   eax
c000fc1c:	68 a0 0b 02 c0       	push   0xc0020ba0
c000fc21:	55                   	push   ebp
c000fc22:	e8 29 0b ff ff       	call   c0000750 <strcmp>
c000fc27:	83 c4 10             	add    esp,0x10
c000fc2a:	85 c0                	test   eax,eax
c000fc2c:	75 0f                	jne    c000fc3d <CPU::detectFeatures()+0x345>
c000fc2e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fc38:	e9 86 00 00 00       	jmp    c000fcc3 <CPU::detectFeatures()+0x3cb>
c000fc3d:	50                   	push   eax
c000fc3e:	50                   	push   eax
c000fc3f:	68 ad 0b 02 c0       	push   0xc0020bad
c000fc44:	55                   	push   ebp
c000fc45:	e8 06 0b ff ff       	call   c0000750 <strcmp>
c000fc4a:	83 c4 10             	add    esp,0x10
c000fc4d:	85 c0                	test   eax,eax
c000fc4f:	75 0c                	jne    c000fc5d <CPU::detectFeatures()+0x365>
c000fc51:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fc5b:	eb 66                	jmp    c000fcc3 <CPU::detectFeatures()+0x3cb>
c000fc5d:	50                   	push   eax
c000fc5e:	50                   	push   eax
c000fc5f:	68 ba 0b 02 c0       	push   0xc0020bba
c000fc64:	55                   	push   ebp
c000fc65:	e8 e6 0a ff ff       	call   c0000750 <strcmp>
c000fc6a:	83 c4 10             	add    esp,0x10
c000fc6d:	85 c0                	test   eax,eax
c000fc6f:	75 0c                	jne    c000fc7d <CPU::detectFeatures()+0x385>
c000fc71:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fc7b:	eb 46                	jmp    c000fcc3 <CPU::detectFeatures()+0x3cb>
c000fc7d:	57                   	push   edi
c000fc7e:	57                   	push   edi
c000fc7f:	68 c7 0b 02 c0       	push   0xc0020bc7
c000fc84:	55                   	push   ebp
c000fc85:	e8 c6 0a ff ff       	call   c0000750 <strcmp>
c000fc8a:	83 c4 10             	add    esp,0x10
c000fc8d:	85 c0                	test   eax,eax
c000fc8f:	74 e0                	je     c000fc71 <CPU::detectFeatures()+0x379>
c000fc91:	56                   	push   esi
c000fc92:	56                   	push   esi
c000fc93:	68 d4 0b 02 c0       	push   0xc0020bd4
c000fc98:	55                   	push   ebp
c000fc99:	e8 b2 0a ff ff       	call   c0000750 <strcmp>
c000fc9e:	83 c4 10             	add    esp,0x10
c000fca1:	85 c0                	test   eax,eax
c000fca3:	74 cc                	je     c000fc71 <CPU::detectFeatures()+0x379>
c000fca5:	51                   	push   ecx
c000fca6:	51                   	push   ecx
c000fca7:	68 e1 0b 02 c0       	push   0xc0020be1
c000fcac:	55                   	push   ebp
c000fcad:	e8 9e 0a ff ff       	call   c0000750 <strcmp>
c000fcb2:	83 c4 10             	add    esp,0x10
c000fcb5:	85 c0                	test   eax,eax
c000fcb7:	74 b8                	je     c000fc71 <CPU::detectFeatures()+0x379>
c000fcb9:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fcc3:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fcc8:	0f 86 be 00 00 00    	jbe    c000fd8c <CPU::detectFeatures()+0x494>
c000fcce:	83 ec 0c             	sub    esp,0xc
c000fcd1:	68 80 00 00 00       	push   0x80
c000fcd6:	e8 31 fb ff ff       	call   c000f80c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fcdb:	83 e0 01             	and    eax,0x1
c000fcde:	c1 e0 06             	shl    eax,0x6
c000fce1:	89 c2                	mov    edx,eax
c000fce3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fce9:	83 e0 bf             	and    eax,0xffffffbf
c000fcec:	09 d0                	or     eax,edx
c000fcee:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fcf4:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fcfb:	e8 0c fb ff ff       	call   c000f80c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fd00:	83 e0 01             	and    eax,0x1
c000fd03:	c1 e0 04             	shl    eax,0x4
c000fd06:	89 c2                	mov    edx,eax
c000fd08:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fd0e:	83 e0 ef             	and    eax,0xffffffef
c000fd11:	09 d0                	or     eax,edx
c000fd13:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fd19:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fd20:	e8 e7 fa ff ff       	call   c000f80c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fd25:	89 c2                	mov    edx,eax
c000fd27:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fd2d:	c1 e2 07             	shl    edx,0x7
c000fd30:	83 e0 7f             	and    eax,0x7f
c000fd33:	09 d0                	or     eax,edx
c000fd35:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fd3b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fd42:	e8 f3 fa ff ff       	call   c000f83a <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fd47:	83 e0 01             	and    eax,0x1
c000fd4a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fd51:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fd57:	83 e0 f7             	and    eax,0xfffffff7
c000fd5a:	09 d0                	or     eax,edx
c000fd5c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fd62:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000fd69:	e8 cc fa ff ff       	call   c000f83a <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fd6e:	83 c4 10             	add    esp,0x10
c000fd71:	83 e0 01             	and    eax,0x1
c000fd74:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fd7b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fd81:	83 e0 fb             	and    eax,0xfffffffb
c000fd84:	09 d0                	or     eax,edx
c000fd86:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fd8c:	83 ec 0c             	sub    esp,0xc
c000fd8f:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fd93:	50                   	push   eax
c000fd94:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fd98:	50                   	push   eax
c000fd99:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fd9d:	57                   	push   edi
c000fd9e:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fda2:	56                   	push   esi
c000fda3:	6a 01                	push   0x1
c000fda5:	e8 82 f9 ff ff       	call   c000f72c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fdaa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fdae:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c000fdb4:	89 c1                	mov    ecx,eax
c000fdb6:	83 e2 f0             	and    edx,0xfffffff0
c000fdb9:	83 e1 0f             	and    ecx,0xf
c000fdbc:	09 ca                	or     edx,ecx
c000fdbe:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fdc4:	89 c2                	mov    edx,eax
c000fdc6:	c1 ea 04             	shr    edx,0x4
c000fdc9:	83 e2 0f             	and    edx,0xf
c000fdcc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000fdd0:	89 d1                	mov    ecx,edx
c000fdd2:	83 c4 20             	add    esp,0x20
c000fdd5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c000fddb:	c1 e1 06             	shl    ecx,0x6
c000fdde:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c000fde4:	09 ca                	or     edx,ecx
c000fde6:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fded:	89 c2                	mov    edx,eax
c000fdef:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c000fdf5:	c1 ea 08             	shr    edx,0x8
c000fdf8:	83 e1 3f             	and    ecx,0x3f
c000fdfb:	83 e2 0f             	and    edx,0xf
c000fdfe:	89 d5                	mov    ebp,edx
c000fe00:	83 e5 03             	and    ebp,0x3
c000fe03:	c1 e5 06             	shl    ebp,0x6
c000fe06:	09 e9                	or     ecx,ebp
c000fe08:	89 d5                	mov    ebp,edx
c000fe0a:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c000fe10:	c1 ed 02             	shr    ebp,0x2
c000fe13:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c000fe19:	83 e1 c0             	and    ecx,0xffffffc0
c000fe1c:	09 e9                	or     ecx,ebp
c000fe1e:	89 c5                	mov    ebp,eax
c000fe20:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000fe26:	c1 ed 08             	shr    ebp,0x8
c000fe29:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c000fe2f:	83 e5 30             	and    ebp,0x30
c000fe32:	83 e1 cf             	and    ecx,0xffffffcf
c000fe35:	09 e9                	or     ecx,ebp
c000fe37:	83 fa 06             	cmp    edx,0x6
c000fe3a:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c000fe40:	74 05                	je     c000fe47 <CPU::detectFeatures()+0x54f>
c000fe42:	83 fa 0f             	cmp    edx,0xf
c000fe45:	75 64                	jne    c000feab <CPU::detectFeatures()+0x5b3>
c000fe47:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000fe4d:	89 c1                	mov    ecx,eax
c000fe4f:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c000fe55:	c1 e9 10             	shr    ecx,0x10
c000fe58:	c1 e1 04             	shl    ecx,0x4
c000fe5b:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000fe5f:	0f b6 c9             	movzx  ecx,cl
c000fe62:	c1 e1 06             	shl    ecx,0x6
c000fe65:	09 e9                	or     ecx,ebp
c000fe67:	83 fa 0f             	cmp    edx,0xf
c000fe6a:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c000fe71:	75 38                	jne    c000feab <CPU::detectFeatures()+0x5b3>
c000fe73:	c1 e8 14             	shr    eax,0x14
c000fe76:	83 c0 0f             	add    eax,0xf
c000fe79:	0f b6 c0             	movzx  eax,al
c000fe7c:	89 c2                	mov    edx,eax
c000fe7e:	c1 e8 02             	shr    eax,0x2
c000fe81:	83 e2 03             	and    edx,0x3
c000fe84:	89 d1                	mov    ecx,edx
c000fe86:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c000fe8c:	c1 e1 06             	shl    ecx,0x6
c000fe8f:	83 e2 3f             	and    edx,0x3f
c000fe92:	09 ca                	or     edx,ecx
c000fe94:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fe9a:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c000fea0:	83 e2 c0             	and    edx,0xffffffc0
c000fea3:	09 d0                	or     eax,edx
c000fea5:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c000feab:	83 ec 0c             	sub    esp,0xc
c000feae:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000feb4:	83 c8 07             	or     eax,0x7
c000feb7:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000febd:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fec1:	50                   	push   eax
c000fec2:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fec6:	55                   	push   ebp
c000fec7:	57                   	push   edi
c000fec8:	56                   	push   esi
c000fec9:	68 00 00 00 80       	push   0x80000000
c000fece:	e8 59 f8 ff ff       	call   c000f72c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fed3:	83 c4 20             	add    esp,0x20
c000fed6:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000fede:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000fee2:	76 1e                	jbe    c000ff02 <CPU::detectFeatures()+0x60a>
c000fee4:	83 ec 0c             	sub    esp,0xc
c000fee7:	50                   	push   eax
c000fee8:	55                   	push   ebp
c000fee9:	57                   	push   edi
c000feea:	56                   	push   esi
c000feeb:	68 01 00 00 80       	push   0x80000001
c000fef0:	e8 37 f8 ff ff       	call   c000f72c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fef5:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000feff:	83 c4 20             	add    esp,0x20
c000ff02:	52                   	push   edx
c000ff03:	52                   	push   edx
c000ff04:	68 ed 0b 02 c0       	push   0xc0020bed
c000ff09:	53                   	push   ebx
c000ff0a:	e8 99 c0 ff ff       	call   c000bfa8 <Device::setName(char const*)>
c000ff0f:	83 c4 10             	add    esp,0x10
c000ff12:	eb 69                	jmp    c000ff7d <CPU::detectFeatures()+0x685>
c000ff14:	50                   	push   eax
c000ff15:	50                   	push   eax
c000ff16:	68 52 0b 02 c0       	push   0xc0020b52
c000ff1b:	55                   	push   ebp
c000ff1c:	e8 1f 07 ff ff       	call   c0000640 <strcpy>
c000ff21:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000ff2b:	e8 93 02 ff ff       	call   c00001c3 <is486>
c000ff30:	83 c4 10             	add    esp,0x10
c000ff33:	85 c0                	test   eax,eax
c000ff35:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000ff3b:	74 1f                	je     c000ff5c <CPU::detectFeatures()+0x664>
c000ff3d:	83 c8 07             	or     eax,0x7
c000ff40:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000ff46:	0f 20 c0             	mov    eax,cr0
c000ff49:	83 e0 14             	and    eax,0x14
c000ff4c:	83 f8 04             	cmp    eax,0x4
c000ff4f:	75 10                	jne    c000ff61 <CPU::detectFeatures()+0x669>
c000ff51:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ff57:	83 e0 fd             	and    eax,0xfffffffd
c000ff5a:	eb 1b                	jmp    c000ff77 <CPU::detectFeatures()+0x67f>
c000ff5c:	83 e0 f8             	and    eax,0xfffffff8
c000ff5f:	eb df                	jmp    c000ff40 <CPU::detectFeatures()+0x648>
c000ff61:	e8 38 02 ff ff       	call   c000019e <hasLegacyFPU>
c000ff66:	83 e0 01             	and    eax,0x1
c000ff69:	8d 14 00             	lea    edx,[eax+eax*1]
c000ff6c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ff72:	83 e0 fd             	and    eax,0xfffffffd
c000ff75:	09 d0                	or     eax,edx
c000ff77:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ff7d:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000ff84:	74 17                	je     c000ff9d <CPU::detectFeatures()+0x6a5>
c000ff86:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000ff8c:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c000ff92:	83 c8 10             	or     eax,0x10
c000ff95:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c000ff9b:	eb 20                	jmp    c000ffbd <CPU::detectFeatures()+0x6c5>
c000ff9d:	e8 fc 01 ff ff       	call   c000019e <hasLegacyFPU>
c000ffa2:	83 e0 01             	and    eax,0x1
c000ffa5:	8d 14 00             	lea    edx,[eax+eax*1]
c000ffa8:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ffae:	83 e0 fd             	and    eax,0xfffffffd
c000ffb1:	09 d0                	or     eax,edx
c000ffb3:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ffb9:	a8 02                	test   al,0x2
c000ffbb:	75 c9                	jne    c000ff86 <CPU::detectFeatures()+0x68e>
c000ffbd:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000ffc4:	83 c4 2c             	add    esp,0x2c
c000ffc7:	5b                   	pop    ebx
c000ffc8:	5e                   	pop    esi
c000ffc9:	5f                   	pop    edi
c000ffca:	5d                   	pop    ebp
c000ffcb:	c3                   	ret    

c000ffcc <CPU::setupSMEP()>:
c000ffcc:	0f 20 e0             	mov    eax,cr4
c000ffcf:	0d 00 00 10 00       	or     eax,0x100000
c000ffd4:	0f 22 e0             	mov    cr4,eax
c000ffd7:	c3                   	ret    

c000ffd8 <CPU::setupUMIP()>:
c000ffd8:	0f 20 e0             	mov    eax,cr4
c000ffdb:	80 cc 08             	or     ah,0x8
c000ffde:	0f 22 e0             	mov    cr4,eax
c000ffe1:	c3                   	ret    

c000ffe2 <CPU::setupTSC()>:
c000ffe2:	0f 20 e0             	mov    eax,cr4
c000ffe5:	83 c8 04             	or     eax,0x4
c000ffe8:	0f 22 e0             	mov    cr4,eax
c000ffeb:	c3                   	ret    

c000ffec <CPU::setupLargePages()>:
c000ffec:	0f 20 e0             	mov    eax,cr4
c000ffef:	83 c8 10             	or     eax,0x10
c000fff2:	0f 22 e0             	mov    cr4,eax
c000fff5:	c3                   	ret    

c000fff6 <CPU::setupPAT()>:
c000fff6:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000fffb:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010002:	74 2c                	je     c0010030 <CPU::setupPAT()+0x3a>
c0010004:	53                   	push   ebx
c0010005:	83 ec 10             	sub    esp,0x10
c0010008:	68 77 02 00 00       	push   0x277
c001000d:	50                   	push   eax
c001000e:	e8 a5 70 ff ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c0010013:	83 e2 f8             	and    edx,0xfffffff8
c0010016:	83 ca 01             	or     edx,0x1
c0010019:	52                   	push   edx
c001001a:	50                   	push   eax
c001001b:	68 77 02 00 00       	push   0x277
c0010020:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010026:	e8 b9 70 ff ff       	call   c00070e4 <Computer::wrmsr(unsigned int, unsigned long long)>
c001002b:	83 c4 28             	add    esp,0x28
c001002e:	5b                   	pop    ebx
c001002f:	c3                   	ret    
c0010030:	c3                   	ret    
c0010031:	90                   	nop

c0010032 <CPU::setupMTRR()>:
c0010032:	c3                   	ret    
c0010033:	90                   	nop

c0010034 <CPU::setupGlobalPages()>:
c0010034:	0f 20 e0             	mov    eax,cr4
c0010037:	0c 80                	or     al,0x80
c0010039:	0f 22 e0             	mov    cr4,eax
c001003c:	c3                   	ret    
c001003d:	90                   	nop

c001003e <CPU::allowUsermodeDataAccess()>:
c001003e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010042:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010049:	74 03                	je     c001004e <CPU::allowUsermodeDataAccess()+0x10>
c001004b:	0f 01 cb             	stac   
c001004e:	c3                   	ret    
c001004f:	90                   	nop

c0010050 <CPU::prohibitUsermodeDataAccess()>:
c0010050:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010054:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001005b:	74 03                	je     c0010060 <CPU::prohibitUsermodeDataAccess()+0x10>
c001005d:	0f 01 ca             	clac   
c0010060:	c3                   	ret    
c0010061:	90                   	nop

c0010062 <CPU::setupSMAP()>:
c0010062:	0f 20 e0             	mov    eax,cr4
c0010065:	0d 00 00 20 00       	or     eax,0x200000
c001006a:	0f 22 e0             	mov    cr4,eax
c001006d:	eb e1                	jmp    c0010050 <CPU::prohibitUsermodeDataAccess()>
c001006f:	90                   	nop

c0010070 <CPU::setupFeatures()>:
c0010070:	53                   	push   ebx
c0010071:	83 ec 08             	sub    esp,0x8
c0010074:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010078:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c001007f:	74 18                	je     c0010099 <CPU::setupFeatures()+0x29>
c0010081:	83 ec 0c             	sub    esp,0xc
c0010084:	68 f9 0b 02 c0       	push   0xc0020bf9
c0010089:	e8 5c a9 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c001008e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010091:	e8 42 ff ff ff       	call   c000ffd8 <CPU::setupUMIP()>
c0010096:	83 c4 10             	add    esp,0x10
c0010099:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c00100a0:	74 18                	je     c00100ba <CPU::setupFeatures()+0x4a>
c00100a2:	83 ec 0c             	sub    esp,0xc
c00100a5:	68 03 0c 02 c0       	push   0xc0020c03
c00100aa:	e8 3b a9 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c00100af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00100b2:	e8 2b ff ff ff       	call   c000ffe2 <CPU::setupTSC()>
c00100b7:	83 c4 10             	add    esp,0x10
c00100ba:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c00100c1:	74 18                	je     c00100db <CPU::setupFeatures()+0x6b>
c00100c3:	83 ec 0c             	sub    esp,0xc
c00100c6:	68 0c 0c 02 c0       	push   0xc0020c0c
c00100cb:	e8 1a a9 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c00100d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00100d3:	e8 14 ff ff ff       	call   c000ffec <CPU::setupLargePages()>
c00100d8:	83 c4 10             	add    esp,0x10
c00100db:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c00100e2:	74 18                	je     c00100fc <CPU::setupFeatures()+0x8c>
c00100e4:	83 ec 0c             	sub    esp,0xc
c00100e7:	68 15 0c 02 c0       	push   0xc0020c15
c00100ec:	e8 f9 a8 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c00100f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00100f4:	e8 3b ff ff ff       	call   c0010034 <CPU::setupGlobalPages()>
c00100f9:	83 c4 10             	add    esp,0x10
c00100fc:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010103:	74 18                	je     c001011d <CPU::setupFeatures()+0xad>
c0010105:	83 ec 0c             	sub    esp,0xc
c0010108:	68 27 0c 02 c0       	push   0xc0020c27
c001010d:	e8 d8 a8 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0010112:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010115:	e8 dc fe ff ff       	call   c000fff6 <CPU::setupPAT()>
c001011a:	83 c4 10             	add    esp,0x10
c001011d:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010124:	74 11                	je     c0010137 <CPU::setupFeatures()+0xc7>
c0010126:	c7 44 24 10 30 0c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020c30
c001012e:	83 c4 08             	add    esp,0x8
c0010131:	5b                   	pop    ebx
c0010132:	e9 b3 a8 ff ff       	jmp    c000a9ea <Dbg::kprintf(char const*, ...)>
c0010137:	83 c4 08             	add    esp,0x8
c001013a:	5b                   	pop    ebx
c001013b:	c3                   	ret    

c001013c <CPU::open(int, int, void*)>:
c001013c:	57                   	push   edi
c001013d:	56                   	push   esi
c001013e:	53                   	push   ebx
c001013f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010143:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010147:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001014d:	83 ec 0c             	sub    esp,0xc
c0010150:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0010156:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001015c:	50                   	push   eax
c001015d:	e8 54 72 ff ff       	call   c00073b6 <GDT::setup()>
c0010162:	83 c4 0c             	add    esp,0xc
c0010165:	6a 00                	push   0x0
c0010167:	68 ef be ad de       	push   0xdeadbeef
c001016c:	57                   	push   edi
c001016d:	e8 26 8e ff ff       	call   c0008f98 <TSS::setup(unsigned long, unsigned long)>
c0010172:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010175:	e8 fe 8d ff ff       	call   c0008f78 <TSS::flush()>
c001017a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010180:	89 04 24             	mov    DWORD PTR [esp],eax
c0010183:	e8 92 74 ff ff       	call   c000761a <IDT::setup()>
c0010188:	b8 00 04 00 00       	mov    eax,0x400
c001018d:	0f 23 f8             	mov    db7,eax
c0010190:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001019a:	e8 14 7c ff ff       	call   c0007db3 <Phys::allocatePage()>
c001019f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00101a5:	89 30                	mov    DWORD PTR [eax],esi
c00101a7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00101ad:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00101b0:	58                   	pop    eax
c00101b1:	5a                   	pop    edx
c00101b2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00101b8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00101bc:	e8 39 9e ff ff       	call   c0009ffa <VAS::setCPUSpecific(unsigned long)>
c00101c1:	c7 04 24 3a 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c3a
c00101c8:	e8 cd 00 00 00       	call   c001029a <KeSetBootMessage(char const*)>
c00101cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00101d0:	e8 23 f7 ff ff       	call   c000f8f8 <CPU::detectFeatures()>
c00101d5:	c7 04 24 5d 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c5d
c00101dc:	e8 b9 00 00 00       	call   c001029a <KeSetBootMessage(char const*)>
c00101e1:	e8 4b 6f 00 00       	call   c0017131 <HalInitialise()>
c00101e6:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c00101eb:	83 e0 10             	and    eax,0x10
c00101ee:	83 f8 01             	cmp    eax,0x1
c00101f1:	19 c0                	sbb    eax,eax
c00101f3:	83 e0 46             	and    eax,0x46
c00101f6:	83 c0 1e             	add    eax,0x1e
c00101f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00101fc:	e8 44 d6 ff ff       	call   c000d845 <setupTimer(int)>
c0010201:	83 c4 10             	add    esp,0x10
c0010204:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001020a:	f6 05 d0 4e 02 c0 20 	test   BYTE PTR ds:0xc0024ed0,0x20
c0010211:	74 0c                	je     c001021f <CPU::open(int, int, void*)+0xe3>
c0010213:	83 ec 0c             	sub    esp,0xc
c0010216:	53                   	push   ebx
c0010217:	e8 54 fe ff ff       	call   c0010070 <CPU::setupFeatures()>
c001021c:	83 c4 10             	add    esp,0x10
c001021f:	5b                   	pop    ebx
c0010220:	31 c0                	xor    eax,eax
c0010222:	5e                   	pop    esi
c0010223:	5f                   	pop    edi
c0010224:	c3                   	ret    

c0010225 <KeDisplaySplashScreen()>:
c0010225:	55                   	push   ebp
c0010226:	bd 05 00 00 00       	mov    ebp,0x5
c001022b:	57                   	push   edi
c001022c:	bf 00 20 02 c0       	mov    edi,0xc0022000
c0010231:	56                   	push   esi
c0010232:	be 0a 00 00 00       	mov    esi,0xa
c0010237:	53                   	push   ebx
c0010238:	31 db                	xor    ebx,ebx
c001023a:	83 ec 0c             	sub    esp,0xc
c001023d:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0010240:	89 d0                	mov    eax,edx
c0010242:	85 d2                	test   edx,edx
c0010244:	74 4c                	je     c0010292 <KeDisplaySplashScreen()+0x6d>
c0010246:	80 bb 36 20 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffddfca],0xdb
c001024d:	75 13                	jne    c0010262 <KeDisplaySplashScreen()+0x3d>
c001024f:	0f b6 8b 35 20 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffddfcb]
c0010256:	83 e1 fe             	and    ecx,0xfffffffe
c0010259:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c001025f:	75 01                	jne    c0010262 <KeDisplaySplashScreen()+0x3d>
c0010261:	46                   	inc    esi
c0010262:	83 fa 0d             	cmp    edx,0xd
c0010265:	74 28                	je     c001028f <KeDisplaySplashScreen()+0x6a>
c0010267:	83 fa 0a             	cmp    edx,0xa
c001026a:	75 0a                	jne    c0010276 <KeDisplaySplashScreen()+0x51>
c001026c:	45                   	inc    ebp
c001026d:	be 0a 00 00 00       	mov    esi,0xa
c0010272:	31 db                	xor    ebx,ebx
c0010274:	eb 19                	jmp    c001028f <KeDisplaySplashScreen()+0x6a>
c0010276:	83 ec 0c             	sub    esp,0xc
c0010279:	8d 14 33             	lea    edx,[ebx+esi*1]
c001027c:	55                   	push   ebp
c001027d:	0f be c0             	movsx  eax,al
c0010280:	52                   	push   edx
c0010281:	43                   	inc    ebx
c0010282:	6a 00                	push   0x0
c0010284:	6a 0e                	push   0xe
c0010286:	50                   	push   eax
c0010287:	e8 24 7b 00 00       	call   c0017db0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001028c:	83 c4 20             	add    esp,0x20
c001028f:	47                   	inc    edi
c0010290:	eb ab                	jmp    c001023d <KeDisplaySplashScreen()+0x18>
c0010292:	83 c4 0c             	add    esp,0xc
c0010295:	5b                   	pop    ebx
c0010296:	5e                   	pop    esi
c0010297:	5f                   	pop    edi
c0010298:	5d                   	pop    ebp
c0010299:	c3                   	ret    

c001029a <KeSetBootMessage(char const*)>:
c001029a:	57                   	push   edi
c001029b:	56                   	push   esi
c001029c:	53                   	push   ebx
c001029d:	81 ec a4 00 00 00    	sub    esp,0xa4
c00102a3:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c00102aa:	68 9e 00 00 00       	push   0x9e
c00102af:	6a 00                	push   0x0
c00102b1:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00102b5:	56                   	push   esi
c00102b6:	e8 35 02 ff ff       	call   c00004f0 <memset>
c00102bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102be:	e8 ad 02 ff ff       	call   c0000570 <strlen>
c00102c3:	ba 50 00 00 00       	mov    edx,0x50
c00102c8:	83 c4 10             	add    esp,0x10
c00102cb:	29 c2                	sub    edx,eax
c00102cd:	31 c9                	xor    ecx,ecx
c00102cf:	83 e2 fe             	and    edx,0xfffffffe
c00102d2:	01 f2                	add    edx,esi
c00102d4:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c00102d9:	84 c0                	test   al,al
c00102db:	74 0a                	je     c00102e7 <KeSetBootMessage(char const*)+0x4d>
c00102dd:	80 cc 0f             	or     ah,0xf
c00102e0:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c00102e4:	41                   	inc    ecx
c00102e5:	eb ed                	jmp    c00102d4 <KeSetBootMessage(char const*)+0x3a>
c00102e7:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c00102ec:	b9 9e 00 00 00       	mov    ecx,0x9e
c00102f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102f3:	81 c4 a0 00 00 00    	add    esp,0xa0
c00102f9:	5b                   	pop    ebx
c00102fa:	5e                   	pop    esi
c00102fb:	5f                   	pop    edi
c00102fc:	c3                   	ret    
c00102fd:	90                   	nop

c00102fe <EnvVarContainer::getEnv(char const*)>:
c00102fe:	57                   	push   edi
c00102ff:	56                   	push   esi
c0010300:	53                   	push   ebx
c0010301:	31 db                	xor    ebx,ebx
c0010303:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010307:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010309:	7e 2b                	jle    c0010336 <EnvVarContainer::getEnv(char const*)+0x38>
c001030b:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010312:	50                   	push   eax
c0010313:	50                   	push   eax
c0010314:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010317:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001031a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001031e:	e8 2d 04 ff ff       	call   c0000750 <strcmp>
c0010323:	83 c4 10             	add    esp,0x10
c0010326:	85 c0                	test   eax,eax
c0010328:	75 09                	jne    c0010333 <EnvVarContainer::getEnv(char const*)+0x35>
c001032a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001032d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010331:	eb 05                	jmp    c0010338 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010333:	43                   	inc    ebx
c0010334:	eb d1                	jmp    c0010307 <EnvVarContainer::getEnv(char const*)+0x9>
c0010336:	31 c0                	xor    eax,eax
c0010338:	5b                   	pop    ebx
c0010339:	5e                   	pop    esi
c001033a:	5f                   	pop    edi
c001033b:	c3                   	ret    

c001033c <EnvVarContainer::setEnv(char const*, char const*)>:
c001033c:	55                   	push   ebp
c001033d:	57                   	push   edi
c001033e:	56                   	push   esi
c001033f:	53                   	push   ebx
c0010340:	83 ec 28             	sub    esp,0x28
c0010343:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010347:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001034b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001034f:	56                   	push   esi
c0010350:	e8 1b 02 ff ff       	call   c0000570 <strlen>
c0010355:	40                   	inc    eax
c0010356:	89 04 24             	mov    DWORD PTR [esp],eax
c0010359:	e8 50 77 ff ff       	call   c0007aae <malloc>
c001035e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010361:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010365:	e8 06 02 ff ff       	call   c0000570 <strlen>
c001036a:	40                   	inc    eax
c001036b:	89 04 24             	mov    DWORD PTR [esp],eax
c001036e:	e8 3b 77 ff ff       	call   c0007aae <malloc>
c0010373:	89 34 24             	mov    DWORD PTR [esp],esi
c0010376:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001037a:	e8 f1 01 ff ff       	call   c0000570 <strlen>
c001037f:	83 c4 0c             	add    esp,0xc
c0010382:	40                   	inc    eax
c0010383:	50                   	push   eax
c0010384:	6a 00                	push   0x0
c0010386:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001038a:	e8 61 01 ff ff       	call   c00004f0 <memset>
c001038f:	89 34 24             	mov    DWORD PTR [esp],esi
c0010392:	e8 d9 01 ff ff       	call   c0000570 <strlen>
c0010397:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001039b:	8d 48 01             	lea    ecx,[eax+0x1]
c001039e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00103a3:	89 de                	mov    esi,ebx
c00103a5:	e8 c6 01 ff ff       	call   c0000570 <strlen>
c00103aa:	83 c4 0c             	add    esp,0xc
c00103ad:	40                   	inc    eax
c00103ae:	50                   	push   eax
c00103af:	6a 00                	push   0x0
c00103b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103b5:	e8 36 01 ff ff       	call   c00004f0 <memset>
c00103ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00103bd:	e8 ae 01 ff ff       	call   c0000570 <strlen>
c00103c2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00103c6:	8d 48 01             	lea    ecx,[eax+0x1]
c00103c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00103ce:	40                   	inc    eax
c00103cf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00103d2:	c1 e0 03             	shl    eax,0x3
c00103d5:	5a                   	pop    edx
c00103d6:	59                   	pop    ecx
c00103d7:	50                   	push   eax
c00103d8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00103db:	e8 ba 76 ff ff       	call   c0007a9a <realloc>
c00103e0:	8d 74 24 18          	lea    esi,[esp+0x18]
c00103e4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00103e7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00103ea:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00103ee:	b9 08 00 00 00       	mov    ecx,0x8
c00103f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103f5:	83 c4 2c             	add    esp,0x2c
c00103f8:	5b                   	pop    ebx
c00103f9:	5e                   	pop    esi
c00103fa:	5f                   	pop    edi
c00103fb:	5d                   	pop    ebp
c00103fc:	c3                   	ret    
c00103fd:	90                   	nop

c00103fe <EnvVarContainer::deleteEnv(char const*)>:
c00103fe:	c3                   	ret    
c00103ff:	90                   	nop

c0010400 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010400:	55                   	push   ebp
c0010401:	57                   	push   edi
c0010402:	56                   	push   esi
c0010403:	53                   	push   ebx
c0010404:	81 ec 38 01 00 00    	sub    esp,0x138
c001040a:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010411:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010418:	68 14 01 00 00       	push   0x114
c001041d:	e8 8c 76 ff ff       	call   c0007aae <malloc>
c0010422:	83 c4 0c             	add    esp,0xc
c0010425:	89 c3                	mov    ebx,eax
c0010427:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001042a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010431:	50                   	push   eax
c0010432:	e8 35 ab ff ff       	call   c000af6c <File::File(char const*, Process*)>
c0010437:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001043a:	e8 57 ae ff ff       	call   c000b296 <File::exists()>
c001043f:	83 c4 10             	add    esp,0x10
c0010442:	84 c0                	test   al,al
c0010444:	75 31                	jne    c0010477 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010446:	50                   	push   eax
c0010447:	50                   	push   eax
c0010448:	6a 12                	push   0x12
c001044a:	53                   	push   ebx
c001044b:	e8 d8 ab ff ff       	call   c000b028 <File::open(FileOpenMode)>
c0010450:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010452:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010455:	89 34 24             	mov    DWORD PTR [esp],esi
c0010458:	e8 13 01 ff ff       	call   c0000570 <strlen>
c001045d:	5a                   	pop    edx
c001045e:	31 d2                	xor    edx,edx
c0010460:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010464:	51                   	push   ecx
c0010465:	56                   	push   esi
c0010466:	52                   	push   edx
c0010467:	50                   	push   eax
c0010468:	53                   	push   ebx
c0010469:	ff d7                	call   edi
c001046b:	83 c4 14             	add    esp,0x14
c001046e:	53                   	push   ebx
c001046f:	e8 12 ac ff ff       	call   c000b086 <File::close()>
c0010474:	83 c4 10             	add    esp,0x10
c0010477:	56                   	push   esi
c0010478:	31 f6                	xor    esi,esi
c001047a:	68 00 01 00 00       	push   0x100
c001047f:	6a 00                	push   0x0
c0010481:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010485:	50                   	push   eax
c0010486:	e8 65 00 ff ff       	call   c00004f0 <memset>
c001048b:	5f                   	pop    edi
c001048c:	58                   	pop    eax
c001048d:	6a 01                	push   0x1
c001048f:	53                   	push   ebx
c0010490:	e8 93 ab ff ff       	call   c000b028 <File::open(FileOpenMode)>
c0010495:	83 c4 10             	add    esp,0x10
c0010498:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00104a0:	83 ec 0c             	sub    esp,0xc
c00104a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00104a5:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00104a9:	51                   	push   ecx
c00104aa:	8d 54 24 23          	lea    edx,[esp+0x23]
c00104ae:	52                   	push   edx
c00104af:	6a 00                	push   0x0
c00104b1:	6a 01                	push   0x1
c00104b3:	53                   	push   ebx
c00104b4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00104b7:	0f be 54 24 33       	movsx  edx,BYTE PTR [esp+0x33]
c00104bc:	83 c4 20             	add    esp,0x20
c00104bf:	89 d0                	mov    eax,edx
c00104c1:	83 fa 0d             	cmp    edx,0xd
c00104c4:	0f 84 0a 01 00 00    	je     c00105d4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c00104ca:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00104cf:	0f 84 f0 00 00 00    	je     c00105c5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00104d5:	83 fa 0a             	cmp    edx,0xa
c00104d8:	74 13                	je     c00104ed <EnvVarContainer::loadFrom(char const*, char const*)+0xed>
c00104da:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00104df:	74 0c                	je     c00104ed <EnvVarContainer::loadFrom(char const*, char const*)+0xed>
c00104e1:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00104e7:	0f 8e d8 00 00 00    	jle    c00105c5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00104ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00104f1:	83 ec 0c             	sub    esp,0xc
c00104f4:	8d 78 01             	lea    edi,[eax+0x1]
c00104f7:	57                   	push   edi
c00104f8:	e8 b1 75 ff ff       	call   c0007aae <malloc>
c00104fd:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010501:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010505:	8d 56 04             	lea    edx,[esi+0x4]
c0010508:	89 14 24             	mov    DWORD PTR [esp],edx
c001050b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001050f:	e8 9a 75 ff ff       	call   c0007aae <malloc>
c0010514:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010518:	83 c4 0c             	add    esp,0xc
c001051b:	57                   	push   edi
c001051c:	6a 00                	push   0x0
c001051e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010522:	e8 c9 ff fe ff       	call   c00004f0 <memset>
c0010527:	8d 74 24 30          	lea    esi,[esp+0x30]
c001052b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001052f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010533:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010535:	83 c4 0c             	add    esp,0xc
c0010538:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001053c:	52                   	push   edx
c001053d:	6a 00                	push   0x0
c001053f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010543:	e8 a8 ff fe ff       	call   c00004f0 <memset>
c0010548:	8d 74 24 30          	lea    esi,[esp+0x30]
c001054c:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010550:	89 34 24             	mov    DWORD PTR [esp],esi
c0010553:	e8 18 00 ff ff       	call   c0000570 <strlen>
c0010558:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001055c:	89 c1                	mov    ecx,eax
c001055e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010560:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010563:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010566:	40                   	inc    eax
c0010567:	83 c4 10             	add    esp,0x10
c001056a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001056d:	85 d2                	test   edx,edx
c001056f:	75 0c                	jne    c001057d <EnvVarContainer::loadFrom(char const*, char const*)+0x17d>
c0010571:	83 ec 0c             	sub    esp,0xc
c0010574:	6a 08                	push   0x8
c0010576:	e8 33 75 ff ff       	call   c0007aae <malloc>
c001057b:	eb 0c                	jmp    c0010589 <EnvVarContainer::loadFrom(char const*, char const*)+0x189>
c001057d:	c1 e0 03             	shl    eax,0x3
c0010580:	51                   	push   ecx
c0010581:	51                   	push   ecx
c0010582:	50                   	push   eax
c0010583:	52                   	push   edx
c0010584:	e8 11 75 ff ff       	call   c0007a9a <realloc>
c0010589:	83 c4 10             	add    esp,0x10
c001058c:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001058f:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010592:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010595:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010599:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001059d:	b9 08 00 00 00       	mov    ecx,0x8
c00105a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105a4:	31 f6                	xor    esi,esi
c00105a6:	50                   	push   eax
c00105a7:	68 00 01 00 00       	push   0x100
c00105ac:	6a 00                	push   0x0
c00105ae:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00105b2:	50                   	push   eax
c00105b3:	e8 38 ff fe ff       	call   c00004f0 <memset>
c00105b8:	83 c4 10             	add    esp,0x10
c00105bb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00105c3:	eb 0f                	jmp    c00105d4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c00105c5:	3c 3d                	cmp    al,0x3d
c00105c7:	74 07                	je     c00105d0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c00105c9:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c00105cd:	46                   	inc    esi
c00105ce:	eb 04                	jmp    c00105d4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c00105d0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00105d4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00105d9:	0f 85 c1 fe ff ff    	jne    c00104a0 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00105df:	81 c4 2c 01 00 00    	add    esp,0x12c
c00105e5:	5b                   	pop    ebx
c00105e6:	5e                   	pop    esi
c00105e7:	5f                   	pop    edi
c00105e8:	5d                   	pop    ebp
c00105e9:	c3                   	ret    

c00105ea <EnvVarContainer::__loadSystem()>:
c00105ea:	83 ec 10             	sub    esp,0x10
c00105ed:	68 60 21 02 c0       	push   0xc0022160
c00105f2:	68 a0 0c 02 c0       	push   0xc0020ca0
c00105f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105fb:	e8 00 fe ff ff       	call   c0010400 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010600:	83 c4 1c             	add    esp,0x1c
c0010603:	c3                   	ret    

c0010604 <EnvVarContainer::__loadUser()>:
c0010604:	c3                   	ret    
c0010605:	90                   	nop

c0010606 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010606:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001060a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010610:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010614:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010618:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001061b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001061f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010626:	90                   	nop
c0010627:	c3                   	ret    

c0010628 <EnvVarContainer::~EnvVarContainer()>:
c0010628:	83 ec 0c             	sub    esp,0xc
c001062b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001062f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010632:	85 c0                	test   eax,eax
c0010634:	74 1d                	je     c0010653 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001063a:	8b 00                	mov    eax,DWORD PTR [eax]
c001063c:	85 c0                	test   eax,eax
c001063e:	74 13                	je     c0010653 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010644:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010647:	83 ec 0c             	sub    esp,0xc
c001064a:	50                   	push   eax
c001064b:	e8 6e 74 ff ff       	call   c0007abe <free>
c0010650:	83 c4 10             	add    esp,0x10
c0010653:	90                   	nop
c0010654:	83 c4 0c             	add    esp,0xc
c0010657:	c3                   	ret    

c0010658 <Krnl::getEnv(Process*, char const*)>:
c0010658:	53                   	push   ebx
c0010659:	83 ec 08             	sub    esp,0x8
c001065c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010660:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010664:	39 05 90 81 02 c0    	cmp    DWORD PTR ds:0xc0028190,eax
c001066a:	74 04                	je     c0010670 <Krnl::getEnv(Process*, char const*)+0x18>
c001066c:	85 c0                	test   eax,eax
c001066e:	75 0b                	jne    c001067b <Krnl::getEnv(Process*, char const*)+0x23>
c0010670:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c0010675:	85 c0                	test   eax,eax
c0010677:	75 19                	jne    c0010692 <Krnl::getEnv(Process*, char const*)+0x3a>
c0010679:	eb 27                	jmp    c00106a2 <Krnl::getEnv(Process*, char const*)+0x4a>
c001067b:	52                   	push   edx
c001067c:	52                   	push   edx
c001067d:	53                   	push   ebx
c001067e:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010684:	e8 75 fc ff ff       	call   c00102fe <EnvVarContainer::getEnv(char const*)>
c0010689:	83 c4 10             	add    esp,0x10
c001068c:	85 c0                	test   eax,eax
c001068e:	75 28                	jne    c00106b8 <Krnl::getEnv(Process*, char const*)+0x60>
c0010690:	eb de                	jmp    c0010670 <Krnl::getEnv(Process*, char const*)+0x18>
c0010692:	52                   	push   edx
c0010693:	52                   	push   edx
c0010694:	53                   	push   ebx
c0010695:	50                   	push   eax
c0010696:	e8 63 fc ff ff       	call   c00102fe <EnvVarContainer::getEnv(char const*)>
c001069b:	83 c4 10             	add    esp,0x10
c001069e:	85 c0                	test   eax,eax
c00106a0:	75 16                	jne    c00106b8 <Krnl::getEnv(Process*, char const*)+0x60>
c00106a2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00106a6:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c00106ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00106af:	83 c4 08             	add    esp,0x8
c00106b2:	5b                   	pop    ebx
c00106b3:	e9 46 fc ff ff       	jmp    c00102fe <EnvVarContainer::getEnv(char const*)>
c00106b8:	83 c4 08             	add    esp,0x8
c00106bb:	5b                   	pop    ebx
c00106bc:	c3                   	ret    

c00106bd <Krnl::setEnvSystem(char const*, char const*)>:
c00106bd:	83 ec 10             	sub    esp,0x10
c00106c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00106c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00106c8:	ff 35 34 79 02 c0    	push   DWORD PTR ds:0xc0027934
c00106ce:	e8 69 fc ff ff       	call   c001033c <EnvVarContainer::setEnv(char const*, char const*)>
c00106d3:	83 c4 1c             	add    esp,0x1c
c00106d6:	c3                   	ret    

c00106d7 <Krnl::setEnvUser(char const*, char const*)>:
c00106d7:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c00106dc:	85 c0                	test   eax,eax
c00106de:	74 15                	je     c00106f5 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00106e0:	83 ec 10             	sub    esp,0x10
c00106e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00106e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00106eb:	50                   	push   eax
c00106ec:	e8 4b fc ff ff       	call   c001033c <EnvVarContainer::setEnv(char const*, char const*)>
c00106f1:	83 c4 1c             	add    esp,0x1c
c00106f4:	c3                   	ret    
c00106f5:	c3                   	ret    

c00106f6 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00106f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106fa:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010700:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010704:	e9 33 fc ff ff       	jmp    c001033c <EnvVarContainer::setEnv(char const*, char const*)>

c0010709 <Krnl::deleteEnvSystem(char const*)>:
c0010709:	c3                   	ret    

c001070a <Krnl::deleteEnvUser(char const*)>:
c001070a:	c3                   	ret    

c001070b <Krnl::deleteEnvProcess(Process*, char const*)>:
c001070b:	c3                   	ret    

c001070c <Krnl::newProcessEnv(Process*)>:
c001070c:	83 ec 28             	sub    esp,0x28
c001070f:	6a 0c                	push   0xc
c0010711:	e8 98 73 ff ff       	call   c0007aae <malloc>
c0010716:	5a                   	pop    edx
c0010717:	59                   	pop    ecx
c0010718:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001071c:	50                   	push   eax
c001071d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010721:	e8 e0 fe ff ff       	call   c0010606 <EnvVarContainer::EnvVarContainer(Process*)>
c0010726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001072a:	83 c4 2c             	add    esp,0x2c
c001072d:	c3                   	ret    

c001072e <Krnl::copyProcessEnv(Process*, Process*)>:
c001072e:	57                   	push   edi
c001072f:	56                   	push   esi
c0010730:	53                   	push   ebx
c0010731:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010735:	83 ec 0c             	sub    esp,0xc
c0010738:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001073e:	6a 0c                	push   0xc
c0010740:	e8 69 73 ff ff       	call   c0007aae <malloc>
c0010745:	89 c3                	mov    ebx,eax
c0010747:	58                   	pop    eax
c0010748:	5a                   	pop    edx
c0010749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001074d:	53                   	push   ebx
c001074e:	e8 b3 fe ff ff       	call   c0010606 <EnvVarContainer::EnvVarContainer(Process*)>
c0010753:	8b 07                	mov    eax,DWORD PTR [edi]
c0010755:	89 03                	mov    DWORD PTR [ebx],eax
c0010757:	c1 e0 03             	shl    eax,0x3
c001075a:	89 04 24             	mov    DWORD PTR [esp],eax
c001075d:	e8 4c 73 ff ff       	call   c0007aae <malloc>
c0010762:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010765:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0010767:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001076a:	c1 e1 03             	shl    ecx,0x3
c001076d:	89 c7                	mov    edi,eax
c001076f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010771:	83 c4 10             	add    esp,0x10
c0010774:	89 d8                	mov    eax,ebx
c0010776:	5b                   	pop    ebx
c0010777:	5e                   	pop    esi
c0010778:	5f                   	pop    edi
c0010779:	c3                   	ret    

c001077a <Krnl::loadSystemEnv()>:
c001077a:	53                   	push   ebx
c001077b:	83 ec 14             	sub    esp,0x14
c001077e:	6a 0c                	push   0xc
c0010780:	e8 29 73 ff ff       	call   c0007aae <malloc>
c0010785:	89 c3                	mov    ebx,eax
c0010787:	58                   	pop    eax
c0010788:	5a                   	pop    edx
c0010789:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001078f:	53                   	push   ebx
c0010790:	e8 71 fe ff ff       	call   c0010606 <EnvVarContainer::EnvVarContainer(Process*)>
c0010795:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010798:	89 1d 34 79 02 c0    	mov    DWORD PTR ds:0xc0027934,ebx
c001079e:	e8 47 fe ff ff       	call   c00105ea <EnvVarContainer::__loadSystem()>
c00107a3:	83 c4 18             	add    esp,0x18
c00107a6:	5b                   	pop    ebx
c00107a7:	c3                   	ret    

c00107a8 <Krnl::loadUserEnv()>:
c00107a8:	53                   	push   ebx
c00107a9:	83 ec 14             	sub    esp,0x14
c00107ac:	6a 0c                	push   0xc
c00107ae:	e8 fb 72 ff ff       	call   c0007aae <malloc>
c00107b3:	89 c3                	mov    ebx,eax
c00107b5:	58                   	pop    eax
c00107b6:	5a                   	pop    edx
c00107b7:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00107bd:	53                   	push   ebx
c00107be:	e8 43 fe ff ff       	call   c0010606 <EnvVarContainer::EnvVarContainer(Process*)>
c00107c3:	89 1d 30 79 02 c0    	mov    DWORD PTR ds:0xc0027930,ebx
c00107c9:	83 c4 18             	add    esp,0x18
c00107cc:	5b                   	pop    ebx
c00107cd:	c3                   	ret    

c00107ce <Krnl::flushEnv()>:
c00107ce:	c3                   	ret    

c00107cf <Krnl::getProcessTotalEnvCount(Process*)>:
c00107cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107d3:	8b 15 30 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027930
c00107d9:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00107df:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c00107e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00107e6:	03 01                	add    eax,DWORD PTR [ecx]
c00107e8:	85 d2                	test   edx,edx
c00107ea:	74 02                	je     c00107ee <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00107ec:	03 02                	add    eax,DWORD PTR [edx]
c00107ee:	c3                   	ret    

c00107ef <Krnl::getProcessEnvPair(Process*, int)>:
c00107ef:	57                   	push   edi
c00107f0:	56                   	push   esi
c00107f1:	8b 35 30 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027930
c00107f7:	53                   	push   ebx
c00107f8:	85 f6                	test   esi,esi
c00107fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00107fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010802:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010808:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001080c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001080e:	75 16                	jne    c0010826 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010810:	39 c2                	cmp    edx,eax
c0010812:	7c 16                	jl     c001082a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010814:	8b 0d 34 79 02 c0    	mov    ecx,DWORD PTR ds:0xc0027934
c001081a:	8b 31                	mov    esi,DWORD PTR [ecx]
c001081c:	01 c6                	add    esi,eax
c001081e:	39 d6                	cmp    esi,edx
c0010820:	7e 3c                	jle    c001085e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010822:	29 c2                	sub    edx,eax
c0010824:	eb 04                	jmp    c001082a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010826:	39 c2                	cmp    edx,eax
c0010828:	7d 05                	jge    c001082f <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001082a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001082d:	eb 20                	jmp    c001084f <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001082f:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010831:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010834:	39 d1                	cmp    ecx,edx
c0010836:	7e 04                	jle    c001083c <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010838:	29 c2                	sub    edx,eax
c001083a:	eb 10                	jmp    c001084c <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001083c:	8b 35 34 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027934
c0010842:	03 0e                	add    ecx,DWORD PTR [esi]
c0010844:	39 d1                	cmp    ecx,edx
c0010846:	7e 16                	jle    c001085e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010848:	29 c2                	sub    edx,eax
c001084a:	29 fa                	sub    edx,edi
c001084c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001084f:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010852:	8b 02                	mov    eax,DWORD PTR [edx]
c0010854:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010857:	89 03                	mov    DWORD PTR [ebx],eax
c0010859:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001085c:	eb 1d                	jmp    c001087b <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001085e:	83 ec 0c             	sub    esp,0xc
c0010861:	68 c2 0c 02 c0       	push   0xc0020cc2
c0010866:	e8 ac 00 00 00       	call   c0010917 <KePanic(char const*)>
c001086b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010871:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010878:	83 c4 10             	add    esp,0x10
c001087b:	89 d8                	mov    eax,ebx
c001087d:	5b                   	pop    ebx
c001087e:	5e                   	pop    esi
c001087f:	5f                   	pop    edi
c0010880:	c2 04 00             	ret    0x4

c0010883 <CPU::current()>:
c0010883:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0010888:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001088e:	c3                   	ret    

c001088f <operator new(unsigned long)>:
c001088f:	e9 1a 72 ff ff       	jmp    c0007aae <malloc>

c0010894 <operator delete(void*)>:
c0010894:	e9 35 72 ff ff       	jmp    c0007ace <rfree>

c0010899 <disableIRQs()>:
c0010899:	fa                   	cli    
c001089a:	c3                   	ret    

c001089b <enableIRQs()>:
c001089b:	fb                   	sti    
c001089c:	c3                   	ret    

c001089d <lockScheduler()>:
c001089d:	fa                   	cli    
c001089e:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00108a4:	c3                   	ret    

c00108a5 <unlockScheduler()>:
c00108a5:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00108aa:	48                   	dec    eax
c00108ab:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00108b0:	75 01                	jne    c00108b3 <unlockScheduler()+0xe>
c00108b2:	fb                   	sti    
c00108b3:	c3                   	ret    

c00108b4 <lockStuff()>:
c00108b4:	fa                   	cli    
c00108b5:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00108bb:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c00108c1:	c3                   	ret    

c00108c2 <unlockStuff()>:
c00108c2:	83 ec 0c             	sub    esp,0xc
c00108c5:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00108ca:	48                   	dec    eax
c00108cb:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00108d0:	75 18                	jne    c00108ea <unlockStuff()+0x28>
c00108d2:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c00108d9:	74 0f                	je     c00108ea <unlockStuff()+0x28>
c00108db:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00108e5:	e8 e2 47 00 00       	call   c00150cc <schedule()>
c00108ea:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00108ef:	48                   	dec    eax
c00108f0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00108f5:	75 01                	jne    c00108f8 <unlockStuff()+0x36>
c00108f7:	fb                   	sti    
c00108f8:	83 c4 0c             	add    esp,0xc
c00108fb:	c3                   	ret    

c00108fc <Virt::getAKernelVAS()>:
c00108fc:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0010901:	c3                   	ret    

c0010902 <__not_memcpy>:
c0010902:	57                   	push   edi
c0010903:	56                   	push   esi
c0010904:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010908:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001090c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010910:	89 c7                	mov    edi,eax
c0010912:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010914:	5e                   	pop    esi
c0010915:	5f                   	pop    edi
c0010916:	c3                   	ret    

c0010917 <KePanic(char const*)>:
c0010917:	c6 05 38 79 02 c0 01 	mov    BYTE PTR ds:0xc0027938,0x1
c001091e:	e9 e7 66 00 00       	jmp    c001700a <HalPanic(char const*)>

c0010923 <Krnl::powerThread(void*)>:
c0010923:	83 ec 0c             	sub    esp,0xc
c0010926:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001092b:	48                   	dec    eax
c001092c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010931:	75 01                	jne    c0010934 <Krnl::powerThread(void*)+0x11>
c0010933:	fb                   	sti    
c0010934:	83 ec 0c             	sub    esp,0xc
c0010937:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c001093e:	6a 0a                	push   0xa
c0010940:	e8 cb 4a 00 00       	call   c0015410 <sleep(unsigned int)>
c0010945:	83 05 84 79 02 c0 0a 	add    DWORD PTR ds:0xc0027984,0xa
c001094c:	83 c4 10             	add    esp,0x10
c001094f:	eb e3                	jmp    c0010934 <Krnl::powerThread(void*)+0x11>

c0010951 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010951:	57                   	push   edi
c0010952:	b9 09 00 00 00       	mov    ecx,0x9
c0010957:	56                   	push   esi
c0010958:	bf 60 79 02 c0       	mov    edi,0xc0027960
c001095d:	fc                   	cld    
c001095e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010962:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010964:	5e                   	pop    esi
c0010965:	5f                   	pop    edi
c0010966:	c3                   	ret    

c0010967 <Krnl::userIOReceived()>:
c0010967:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c0010971:	c3                   	ret    

c0010972 <Krnl::handlePowerButton()>:
c0010972:	83 ec 0c             	sub    esp,0xc
c0010975:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c001097a:	83 f8 02             	cmp    eax,0x2
c001097d:	75 10                	jne    c001098f <Krnl::handlePowerButton()+0x1d>
c001097f:	83 ec 0c             	sub    esp,0xc
c0010982:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010988:	e8 93 67 ff ff       	call   c0007120 <Computer::shutdown()>
c001098d:	eb 11                	jmp    c00109a0 <Krnl::handlePowerButton()+0x2e>
c001098f:	48                   	dec    eax
c0010990:	75 11                	jne    c00109a3 <Krnl::handlePowerButton()+0x31>
c0010992:	83 ec 0c             	sub    esp,0xc
c0010995:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001099b:	e8 b0 67 ff ff       	call   c0007150 <Computer::sleep()>
c00109a0:	83 c4 10             	add    esp,0x10
c00109a3:	83 c4 0c             	add    esp,0xc
c00109a6:	c3                   	ret    

c00109a7 <Krnl::handleSleepButton()>:
c00109a7:	83 ec 0c             	sub    esp,0xc
c00109aa:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c00109af:	83 f8 02             	cmp    eax,0x2
c00109b2:	75 10                	jne    c00109c4 <Krnl::handleSleepButton()+0x1d>
c00109b4:	83 ec 0c             	sub    esp,0xc
c00109b7:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00109bd:	e8 5e 67 ff ff       	call   c0007120 <Computer::shutdown()>
c00109c2:	eb 11                	jmp    c00109d5 <Krnl::handleSleepButton()+0x2e>
c00109c4:	48                   	dec    eax
c00109c5:	75 11                	jne    c00109d8 <Krnl::handleSleepButton()+0x31>
c00109c7:	83 ec 0c             	sub    esp,0xc
c00109ca:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00109d0:	e8 7b 67 ff ff       	call   c0007150 <Computer::sleep()>
c00109d5:	83 c4 10             	add    esp,0x10
c00109d8:	83 c4 0c             	add    esp,0xc
c00109db:	c3                   	ret    

c00109dc <Krnl::setupPowerManager()>:
c00109dc:	83 ec 0c             	sub    esp,0xc
c00109df:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c00109e9:	68 f0 00 00 00       	push   0xf0
c00109ee:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c00109f5:	6a 00                	push   0x0
c00109f7:	68 23 09 01 c0       	push   0xc0010923
c00109fc:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0010a02:	e8 75 44 00 00       	call   c0014e7c <Process::createThread(void (*)(void*), void*, int)>
c0010a07:	c7 05 60 79 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x2
c0010a11:	c7 05 64 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027964,0x1
c0010a1b:	c7 05 68 79 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0027968,0x3
c0010a25:	c7 05 6c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002796c,0x0
c0010a2f:	c7 05 78 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027978,0x0
c0010a39:	c7 05 70 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027970,0x0
c0010a43:	c7 05 7c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002797c,0x0
c0010a4d:	c7 05 74 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027974,0x3c
c0010a57:	c7 05 80 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027980,0x3c
c0010a61:	83 c4 1c             	add    esp,0x1c
c0010a64:	c3                   	ret    

c0010a65 <KeRand()>:
c0010a65:	69 05 88 79 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0027988,0x2875
c0010a6f:	69 0d 8c 79 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002798c,0xa2e7b175
c0010a79:	53                   	push   ebx
c0010a7a:	01 c1                	add    ecx,eax
c0010a7c:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010a81:	f7 25 88 79 02 c0    	mul    DWORD PTR ds:0xc0027988
c0010a87:	01 ca                	add    edx,ecx
c0010a89:	05 ef 04 b5 00       	add    eax,0xb504ef
c0010a8e:	83 d2 00             	adc    edx,0x0
c0010a91:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c0010a96:	0f b7 da             	movzx  ebx,dx
c0010a99:	89 da                	mov    edx,ebx
c0010a9b:	89 1d 8c 79 02 c0    	mov    DWORD PTR ds:0xc002798c,ebx
c0010aa1:	0f ac d0 0e          	shrd   eax,edx,0xe
c0010aa5:	5b                   	pop    ebx
c0010aa6:	c3                   	ret    

c0010aa7 <KeSeedRand(unsigned int)>:
c0010aa7:	53                   	push   ebx
c0010aa8:	83 ec 08             	sub    esp,0x8
c0010aab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010aaf:	e8 6d 68 00 00       	call   c0017321 <HalGetRand()>
c0010ab4:	c7 05 8c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002798c,0x0
c0010abe:	31 d8                	xor    eax,ebx
c0010ac0:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c0010ac5:	e8 9b ff ff ff       	call   c0010a65 <KeRand()>
c0010aca:	83 c4 08             	add    esp,0x8
c0010acd:	5b                   	pop    ebx
c0010ace:	eb 95                	jmp    c0010a65 <KeRand()>

c0010ad0 <KeInitRand()>:
c0010ad0:	83 ec 0c             	sub    esp,0xc
c0010ad3:	e8 3e 66 00 00       	call   c0017116 <HalQueryPerformanceCounter()>
c0010ad8:	0f 20 da             	mov    edx,cr3
c0010adb:	0f 22 da             	mov    cr3,edx
c0010ade:	0f 20 da             	mov    edx,cr3
c0010ae1:	0f 22 da             	mov    cr3,edx
c0010ae4:	0f 20 da             	mov    edx,cr3
c0010ae7:	0f 22 da             	mov    cr3,edx
c0010aea:	0f 20 da             	mov    edx,cr3
c0010aed:	0f 22 da             	mov    cr3,edx
c0010af0:	83 ec 0c             	sub    esp,0xc
c0010af3:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010af8:	50                   	push   eax
c0010af9:	e8 a9 ff ff ff       	call   c0010aa7 <KeSeedRand(unsigned int)>
c0010afe:	83 c4 1c             	add    esp,0x1c
c0010b01:	c3                   	ret    
c0010b02:	66 90                	xchg   ax,ax

c0010b04 <KeResolveCompatibilitySymbol(char*)>:
c0010b04:	83 ec 0c             	sub    esp,0xc
c0010b07:	83 ec 08             	sub    esp,0x8
c0010b0a:	68 dc 0c 02 c0       	push   0xc0020cdc
c0010b0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b13:	e8 38 fc fe ff       	call   c0000750 <strcmp>
c0010b18:	83 c4 10             	add    esp,0x10
c0010b1b:	85 c0                	test   eax,eax
c0010b1d:	0f 94 c0             	sete   al
c0010b20:	0f b6 c0             	movzx  eax,al
c0010b23:	85 c0                	test   eax,eax
c0010b25:	74 0d                	je     c0010b34 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010b27:	b8 b8 4e 02 c0       	mov    eax,0xc0024eb8
c0010b2c:	e9 8b 01 00 00       	jmp    c0010cbc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b31:	8d 76 00             	lea    esi,[esi+0x0]
c0010b34:	83 ec 08             	sub    esp,0x8
c0010b37:	68 e5 0c 02 c0       	push   0xc0020ce5
c0010b3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b40:	e8 0b fc fe ff       	call   c0000750 <strcmp>
c0010b45:	83 c4 10             	add    esp,0x10
c0010b48:	85 c0                	test   eax,eax
c0010b4a:	0f 94 c0             	sete   al
c0010b4d:	0f b6 c0             	movzx  eax,al
c0010b50:	85 c0                	test   eax,eax
c0010b52:	74 0c                	je     c0010b60 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010b54:	b8 60 e6 01 c0       	mov    eax,0xc001e660
c0010b59:	e9 5e 01 00 00       	jmp    c0010cbc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b5e:	66 90                	xchg   ax,ax
c0010b60:	83 ec 08             	sub    esp,0x8
c0010b63:	68 ef 0c 02 c0       	push   0xc0020cef
c0010b68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b6c:	e8 df fb fe ff       	call   c0000750 <strcmp>
c0010b71:	83 c4 10             	add    esp,0x10
c0010b74:	85 c0                	test   eax,eax
c0010b76:	0f 94 c0             	sete   al
c0010b79:	0f b6 c0             	movzx  eax,al
c0010b7c:	85 c0                	test   eax,eax
c0010b7e:	74 0c                	je     c0010b8c <KeResolveCompatibilitySymbol(char*)+0x88>
c0010b80:	b8 94 e3 01 c0       	mov    eax,0xc001e394
c0010b85:	e9 32 01 00 00       	jmp    c0010cbc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b8a:	66 90                	xchg   ax,ax
c0010b8c:	83 ec 08             	sub    esp,0x8
c0010b8f:	68 f8 0c 02 c0       	push   0xc0020cf8
c0010b94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b98:	e8 b3 fb fe ff       	call   c0000750 <strcmp>
c0010b9d:	83 c4 10             	add    esp,0x10
c0010ba0:	85 c0                	test   eax,eax
c0010ba2:	0f 94 c0             	sete   al
c0010ba5:	0f b6 c0             	movzx  eax,al
c0010ba8:	85 c0                	test   eax,eax
c0010baa:	74 0c                	je     c0010bb8 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010bac:	b8 17 09 01 c0       	mov    eax,0xc0010917
c0010bb1:	e9 06 01 00 00       	jmp    c0010cbc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010bb6:	66 90                	xchg   ax,ax
c0010bb8:	83 ec 08             	sub    esp,0x8
c0010bbb:	68 0b 0d 02 c0       	push   0xc0020d0b
c0010bc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bc4:	e8 87 fb fe ff       	call   c0000750 <strcmp>
c0010bc9:	83 c4 10             	add    esp,0x10
c0010bcc:	85 c0                	test   eax,eax
c0010bce:	0f 94 c0             	sete   al
c0010bd1:	0f b6 c0             	movzx  eax,al
c0010bd4:	85 c0                	test   eax,eax
c0010bd6:	74 0c                	je     c0010be4 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010bd8:	b8 9a 02 01 c0       	mov    eax,0xc001029a
c0010bdd:	e9 da 00 00 00       	jmp    c0010cbc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010be2:	66 90                	xchg   ax,ax
c0010be4:	83 ec 08             	sub    esp,0x8
c0010be7:	68 28 0d 02 c0       	push   0xc0020d28
c0010bec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bf0:	e8 5b fb fe ff       	call   c0000750 <strcmp>
c0010bf5:	83 c4 10             	add    esp,0x10
c0010bf8:	85 c0                	test   eax,eax
c0010bfa:	0f 94 c0             	sete   al
c0010bfd:	0f b6 c0             	movzx  eax,al
c0010c00:	85 c0                	test   eax,eax
c0010c02:	74 0c                	je     c0010c10 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010c04:	b8 60 e7 01 c0       	mov    eax,0xc001e760
c0010c09:	e9 ae 00 00 00       	jmp    c0010cbc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010c0e:	66 90                	xchg   ax,ax
c0010c10:	83 ec 08             	sub    esp,0x8
c0010c13:	68 32 0d 02 c0       	push   0xc0020d32
c0010c18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c1c:	e8 2f fb fe ff       	call   c0000750 <strcmp>
c0010c21:	83 c4 10             	add    esp,0x10
c0010c24:	85 c0                	test   eax,eax
c0010c26:	0f 94 c0             	sete   al
c0010c29:	0f b6 c0             	movzx  eax,al
c0010c2c:	85 c0                	test   eax,eax
c0010c2e:	74 0c                	je     c0010c3c <KeResolveCompatibilitySymbol(char*)+0x138>
c0010c30:	b8 e0 e4 01 c0       	mov    eax,0xc001e4e0
c0010c35:	e9 82 00 00 00       	jmp    c0010cbc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010c3a:	66 90                	xchg   ax,ax
c0010c3c:	83 ec 08             	sub    esp,0x8
c0010c3f:	68 3b 0d 02 c0       	push   0xc0020d3b
c0010c44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c48:	e8 03 fb fe ff       	call   c0000750 <strcmp>
c0010c4d:	83 c4 10             	add    esp,0x10
c0010c50:	85 c0                	test   eax,eax
c0010c52:	0f 94 c0             	sete   al
c0010c55:	0f b6 c0             	movzx  eax,al
c0010c58:	85 c0                	test   eax,eax
c0010c5a:	74 08                	je     c0010c64 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010c5c:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010c61:	eb 59                	jmp    c0010cbc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010c63:	90                   	nop
c0010c64:	83 ec 08             	sub    esp,0x8
c0010c67:	68 53 0d 02 c0       	push   0xc0020d53
c0010c6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c70:	e8 db fa fe ff       	call   c0000750 <strcmp>
c0010c75:	83 c4 10             	add    esp,0x10
c0010c78:	85 c0                	test   eax,eax
c0010c7a:	0f 94 c0             	sete   al
c0010c7d:	0f b6 c0             	movzx  eax,al
c0010c80:	85 c0                	test   eax,eax
c0010c82:	74 08                	je     c0010c8c <KeResolveCompatibilitySymbol(char*)+0x188>
c0010c84:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010c89:	eb 31                	jmp    c0010cbc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010c8b:	90                   	nop
c0010c8c:	83 ec 08             	sub    esp,0x8
c0010c8f:	68 60 0d 02 c0       	push   0xc0020d60
c0010c94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c98:	e8 b3 fa fe ff       	call   c0000750 <strcmp>
c0010c9d:	83 c4 10             	add    esp,0x10
c0010ca0:	85 c0                	test   eax,eax
c0010ca2:	0f 94 c0             	sete   al
c0010ca5:	0f b6 c0             	movzx  eax,al
c0010ca8:	85 c0                	test   eax,eax
c0010caa:	74 08                	je     c0010cb4 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010cac:	b8 bd 4e 02 c0       	mov    eax,0xc0024ebd
c0010cb1:	eb 09                	jmp    c0010cbc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010cb3:	90                   	nop
c0010cb4:	b8 00 00 00 00       	mov    eax,0x0
c0010cb9:	8d 76 00             	lea    esi,[esi+0x0]
c0010cbc:	83 c4 0c             	add    esp,0xc
c0010cbf:	c3                   	ret    

c0010cc0 <KiSigKill(int)>:
c0010cc0:	83 ec 0c             	sub    esp,0xc
c0010cc3:	6a 00                	push   0x0
c0010cc5:	6a 00                	push   0x0
c0010cc7:	6a ff                	push   0xffffffff
c0010cc9:	6a 01                	push   0x1
c0010ccb:	e8 82 23 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010cd0:	83 c4 1c             	add    esp,0x1c
c0010cd3:	c3                   	ret    

c0010cd4 <KiDefaultSignalHandlerIgnore(int)>:
c0010cd4:	c3                   	ret    

c0010cd5 <KiDefaultSignalHandlerPause(int)>:
c0010cd5:	57                   	push   edi
c0010cd6:	b9 07 00 00 00       	mov    ecx,0x7
c0010cdb:	56                   	push   esi
c0010cdc:	be a9 0d 02 c0       	mov    esi,0xc0020da9
c0010ce1:	83 ec 24             	sub    esp,0x24
c0010ce4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010ce8:	fc                   	cld    
c0010ce9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010ceb:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010cef:	50                   	push   eax
c0010cf0:	6a 00                	push   0x0
c0010cf2:	6a 00                	push   0x0
c0010cf4:	6a 27                	push   0x27
c0010cf6:	e8 57 23 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010cfb:	83 c4 34             	add    esp,0x34
c0010cfe:	5e                   	pop    esi
c0010cff:	5f                   	pop    edi
c0010d00:	c3                   	ret    

c0010d01 <KiDefaultSignalHandlerResume(int)>:
c0010d01:	57                   	push   edi
c0010d02:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010d07:	56                   	push   esi
c0010d08:	be c5 0d 02 c0       	mov    esi,0xc0020dc5
c0010d0d:	83 ec 24             	sub    esp,0x24
c0010d10:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010d14:	fc                   	cld    
c0010d15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d17:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010d1b:	50                   	push   eax
c0010d1c:	6a 00                	push   0x0
c0010d1e:	6a 00                	push   0x0
c0010d20:	6a 27                	push   0x27
c0010d22:	e8 2b 23 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010d27:	83 c4 34             	add    esp,0x34
c0010d2a:	5e                   	pop    esi
c0010d2b:	5f                   	pop    edi
c0010d2c:	c3                   	ret    

c0010d2d <KeDeinitSignals(SigHandlerBlock*)>:
c0010d2d:	e9 8c 6d ff ff       	jmp    c0007abe <free>

c0010d32 <KeInitSignals()>:
c0010d32:	53                   	push   ebx
c0010d33:	83 ec 14             	sub    esp,0x14
c0010d36:	68 c8 00 00 00       	push   0xc8
c0010d3b:	e8 6e 6d ff ff       	call   c0007aae <malloc>
c0010d40:	83 c4 0c             	add    esp,0xc
c0010d43:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010d4d:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010d57:	89 c3                	mov    ebx,eax
c0010d59:	6a 20                	push   0x20
c0010d5b:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010d61:	6a 00                	push   0x0
c0010d63:	50                   	push   eax
c0010d64:	e8 87 f7 fe ff       	call   c00004f0 <memset>
c0010d69:	83 c4 0c             	add    esp,0xc
c0010d6c:	6a 44                	push   0x44
c0010d6e:	6a 00                	push   0x0
c0010d70:	53                   	push   ebx
c0010d71:	e8 7a f7 fe ff       	call   c00004f0 <memset>
c0010d76:	89 d8                	mov    eax,ebx
c0010d78:	83 c4 18             	add    esp,0x18
c0010d7b:	5b                   	pop    ebx
c0010d7c:	c3                   	ret    

c0010d7d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010d7d:	53                   	push   ebx
c0010d7e:	b8 01 00 00 00       	mov    eax,0x1
c0010d83:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010d87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d8b:	83 f9 10             	cmp    ecx,0x10
c0010d8e:	7f 21                	jg     c0010db1 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010d90:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010d93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d97:	89 03                	mov    DWORD PTR [ebx],eax
c0010d99:	b8 01 00 00 00       	mov    eax,0x1
c0010d9e:	d3 e0                	shl    eax,cl
c0010da0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010da4:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010da7:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010daf:	31 c0                	xor    eax,eax
c0010db1:	5b                   	pop    ebx
c0010db2:	c3                   	ret    

c0010db3 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010db3:	55                   	push   ebp
c0010db4:	57                   	push   edi
c0010db5:	bf 08 00 00 00       	mov    edi,0x8
c0010dba:	56                   	push   esi
c0010dbb:	53                   	push   ebx
c0010dbc:	83 ec 18             	sub    esp,0x18
c0010dbf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010dc3:	68 e2 0d 02 c0       	push   0xc0020de2
c0010dc8:	e8 1d 9c ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0010dcd:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010dd4:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010dda:	83 c4 10             	add    esp,0x10
c0010ddd:	31 c9                	xor    ecx,ecx
c0010ddf:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010de3:	99                   	cdq    
c0010de4:	f7 ff                	idiv   edi
c0010de6:	8d 42 24             	lea    eax,[edx+0x24]
c0010de9:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010ded:	85 f6                	test   esi,esi
c0010def:	75 1a                	jne    c0010e0b <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0010df1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0010df5:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0010df9:	50                   	push   eax
c0010dfa:	50                   	push   eax
c0010dfb:	52                   	push   edx
c0010dfc:	68 f3 0d 02 c0       	push   0xc0020df3
c0010e01:	e8 e4 9b ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0010e06:	83 c4 10             	add    esp,0x10
c0010e09:	eb 1b                	jmp    c0010e26 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010e0b:	41                   	inc    ecx
c0010e0c:	83 f9 08             	cmp    ecx,0x8
c0010e0f:	75 ce                	jne    c0010ddf <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010e11:	83 ec 0c             	sub    esp,0xc
c0010e14:	be 01 00 00 00       	mov    esi,0x1
c0010e19:	68 14 0e 02 c0       	push   0xc0020e14
c0010e1e:	e8 c7 9b ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0010e23:	83 c4 10             	add    esp,0x10
c0010e26:	83 c4 0c             	add    esp,0xc
c0010e29:	89 f0                	mov    eax,esi
c0010e2b:	5b                   	pop    ebx
c0010e2c:	5e                   	pop    esi
c0010e2d:	5f                   	pop    edi
c0010e2e:	5d                   	pop    ebp
c0010e2f:	c3                   	ret    

c0010e30 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010e30:	55                   	push   ebp
c0010e31:	57                   	push   edi
c0010e32:	56                   	push   esi
c0010e33:	53                   	push   ebx
c0010e34:	51                   	push   ecx
c0010e35:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010e39:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010e40:	0f 84 af 00 00 00    	je     c0010ef5 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010e46:	31 c9                	xor    ecx,ecx
c0010e48:	bf 08 00 00 00       	mov    edi,0x8
c0010e4d:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010e53:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010e56:	99                   	cdq    
c0010e57:	f7 ff                	idiv   edi
c0010e59:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0010e60:	85 ed                	test   ebp,ebp
c0010e62:	0f 84 9e 00 00 00    	je     c0010f06 <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0010e68:	89 e9                	mov    ecx,ebp
c0010e6a:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010e70:	bf 01 00 00 00       	mov    edi,0x1
c0010e75:	89 04 24             	mov    DWORD PTR [esp],eax
c0010e78:	d3 e7                	shl    edi,cl
c0010e7a:	31 c9                	xor    ecx,ecx
c0010e7c:	b8 01 00 00 00       	mov    eax,0x1
c0010e81:	d3 e0                	shl    eax,cl
c0010e83:	85 04 24             	test   DWORD PTR [esp],eax
c0010e86:	74 06                	je     c0010e8e <KeCheckSignal(SigHandlerBlock*, int*)+0x5e>
c0010e88:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010e8c:	75 67                	jne    c0010ef5 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010e8e:	41                   	inc    ecx
c0010e8f:	83 f9 11             	cmp    ecx,0x11
c0010e92:	75 e8                	jne    c0010e7c <KeCheckSignal(SigHandlerBlock*, int*)+0x4c>
c0010e94:	46                   	inc    esi
c0010e95:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010e98:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010e9e:	09 f8                	or     eax,edi
c0010ea0:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0010eab:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010eb1:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010eb8:	31 c0                	xor    eax,eax
c0010eba:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010ec2:	74 09                	je     c0010ecd <KeCheckSignal(SigHandlerBlock*, int*)+0x9d>
c0010ec4:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010ecb:	eb 06                	jmp    c0010ed3 <KeCheckSignal(SigHandlerBlock*, int*)+0xa3>
c0010ecd:	40                   	inc    eax
c0010ece:	83 f8 08             	cmp    eax,0x8
c0010ed1:	75 e7                	jne    c0010eba <KeCheckSignal(SigHandlerBlock*, int*)+0x8a>
c0010ed3:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0010ed6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010eda:	83 fd 09             	cmp    ebp,0x9
c0010edd:	89 2a                	mov    DWORD PTR [edx],ebp
c0010edf:	75 07                	jne    c0010ee8 <KeCheckSignal(SigHandlerBlock*, int*)+0xb8>
c0010ee1:	b8 c0 0c 01 c0       	mov    eax,0xc0010cc0
c0010ee6:	eb 31                	jmp    c0010f19 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010ee8:	83 f8 01             	cmp    eax,0x1
c0010eeb:	75 0c                	jne    c0010ef9 <KeCheckSignal(SigHandlerBlock*, int*)+0xc9>
c0010eed:	f7 d7                	not    edi
c0010eef:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0010ef5:	31 c0                	xor    eax,eax
c0010ef7:	eb 20                	jmp    c0010f19 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010ef9:	85 c0                	test   eax,eax
c0010efb:	75 1c                	jne    c0010f19 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010efd:	8b 04 ad c0 21 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdde40]
c0010f04:	eb 13                	jmp    c0010f19 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010f06:	46                   	inc    esi
c0010f07:	41                   	inc    ecx
c0010f08:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010f0e:	83 f9 08             	cmp    ecx,0x8
c0010f11:	0f 85 36 ff ff ff    	jne    c0010e4d <KeCheckSignal(SigHandlerBlock*, int*)+0x1d>
c0010f17:	eb dc                	jmp    c0010ef5 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010f19:	5a                   	pop    edx
c0010f1a:	5b                   	pop    ebx
c0010f1b:	5e                   	pop    esi
c0010f1c:	5f                   	pop    edi
c0010f1d:	5d                   	pop    ebp
c0010f1e:	c3                   	ret    

c0010f1f <KiCheckSignalZ>:
c0010f1f:	83 ec 10             	sub    esp,0x10
c0010f22:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010f26:	50                   	push   eax
c0010f27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f2c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f2f:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010f35:	e8 f6 fe ff ff       	call   c0010e30 <KeCheckSignal(SigHandlerBlock*, int*)>
c0010f3a:	5a                   	pop    edx
c0010f3b:	31 d2                	xor    edx,edx
c0010f3d:	59                   	pop    ecx
c0010f3e:	85 c0                	test   eax,eax
c0010f40:	74 19                	je     c0010f5b <KiCheckSignalZ+0x3c>
c0010f42:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010f48:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010f4b:	89 02                	mov    DWORD PTR [edx],eax
c0010f4d:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0010f54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f58:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010f5b:	89 d0                	mov    eax,edx
c0010f5d:	83 c4 10             	add    esp,0x10
c0010f60:	c3                   	ret    

c0010f61 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010f61:	56                   	push   esi
c0010f62:	53                   	push   ebx
c0010f63:	bb 01 00 00 00       	mov    ebx,0x1
c0010f68:	52                   	push   edx
c0010f69:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010f6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f71:	d3 e3                	shl    ebx,cl
c0010f73:	83 f9 10             	cmp    ecx,0x10
c0010f76:	7f 08                	jg     c0010f80 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010f78:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010f7e:	75 10                	jne    c0010f90 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010f80:	83 ec 0c             	sub    esp,0xc
c0010f83:	68 25 0e 02 c0       	push   0xc0020e25
c0010f88:	e8 8a f9 ff ff       	call   c0010917 <KePanic(char const*)>
c0010f8d:	83 c4 10             	add    esp,0x10
c0010f90:	f7 d3                	not    ebx
c0010f92:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010f98:	58                   	pop    eax
c0010f99:	5b                   	pop    ebx
c0010f9a:	5e                   	pop    esi
c0010f9b:	c3                   	ret    

c0010f9c <KiFinishSignalZ>:
c0010f9c:	53                   	push   ebx
c0010f9d:	83 ec 10             	sub    esp,0x10
c0010fa0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010fa4:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010fa7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010faf:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010fb5:	e8 a7 ff ff ff       	call   c0010f61 <KeCompleteSignal(SigHandlerBlock*, int)>
c0010fba:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010fc0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010fc7:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010fce:	83 c4 18             	add    esp,0x18
c0010fd1:	5b                   	pop    ebx
c0010fd2:	c3                   	ret    

c0010fd3 <SysSeekDir(regs*)>:
c0010fd3:	31 c0                	xor    eax,eax
c0010fd5:	31 d2                	xor    edx,edx
c0010fd7:	c3                   	ret    

c0010fd8 <SysTellDir(regs*)>:
c0010fd8:	31 c0                	xor    eax,eax
c0010fda:	31 d2                	xor    edx,edx
c0010fdc:	c3                   	ret    

c0010fdd <SysVerify(regs*)>:
c0010fdd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fe1:	31 d2                	xor    edx,edx
c0010fe3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010fe6:	c3                   	ret    

c0010fe7 <SysGetArgc(regs*)>:
c0010fe7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010fef:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010ff5:	89 c2                	mov    edx,eax
c0010ff7:	c1 fa 1f             	sar    edx,0x1f
c0010ffa:	c3                   	ret    

c0010ffb <SysTTYName(regs*)>:
c0010ffb:	b8 01 00 00 00       	mov    eax,0x1
c0011000:	31 d2                	xor    edx,edx
c0011002:	c3                   	ret    

c0011003 <SysFormatDisk(regs*)>:
c0011003:	56                   	push   esi
c0011004:	53                   	push   ebx
c0011005:	83 ec 04             	sub    esp,0x4
c0011008:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001100c:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c0011012:	eb 28                	jmp    c001103c <SysFormatDisk(regs*)+0x39>
c0011014:	83 ec 0c             	sub    esp,0xc
c0011017:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001101a:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001101d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001101f:	51                   	push   ecx
c0011020:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011023:	51                   	push   ecx
c0011024:	50                   	push   eax
c0011025:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c001102c:	50                   	push   eax
c001102d:	53                   	push   ebx
c001102e:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0011031:	83 c4 20             	add    esp,0x20
c0011034:	83 f8 08             	cmp    eax,0x8
c0011037:	75 14                	jne    c001104d <SysFormatDisk(regs*)+0x4a>
c0011039:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001103c:	85 db                	test   ebx,ebx
c001103e:	75 d4                	jne    c0011014 <SysFormatDisk(regs*)+0x11>
c0011040:	83 c4 04             	add    esp,0x4
c0011043:	b8 03 00 00 00       	mov    eax,0x3
c0011048:	31 d2                	xor    edx,edx
c001104a:	5b                   	pop    ebx
c001104b:	5e                   	pop    esi
c001104c:	c3                   	ret    
c001104d:	85 c0                	test   eax,eax
c001104f:	74 1f                	je     c0011070 <SysFormatDisk(regs*)+0x6d>
c0011051:	83 f8 09             	cmp    eax,0x9
c0011054:	74 0d                	je     c0011063 <SysFormatDisk(regs*)+0x60>
c0011056:	83 c4 04             	add    esp,0x4
c0011059:	b8 02 00 00 00       	mov    eax,0x2
c001105e:	31 d2                	xor    edx,edx
c0011060:	5b                   	pop    ebx
c0011061:	5e                   	pop    esi
c0011062:	c3                   	ret    
c0011063:	83 c4 04             	add    esp,0x4
c0011066:	b8 01 00 00 00       	mov    eax,0x1
c001106b:	31 d2                	xor    edx,edx
c001106d:	5b                   	pop    ebx
c001106e:	5e                   	pop    esi
c001106f:	c3                   	ret    
c0011070:	83 c4 04             	add    esp,0x4
c0011073:	31 c0                	xor    eax,eax
c0011075:	31 d2                	xor    edx,edx
c0011077:	5b                   	pop    ebx
c0011078:	5e                   	pop    esi
c0011079:	c3                   	ret    

c001107a <SysSetDiskVolumeLabel(regs*)>:
c001107a:	56                   	push   esi
c001107b:	53                   	push   ebx
c001107c:	83 ec 04             	sub    esp,0x4
c001107f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011083:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011086:	83 f8 19             	cmp    eax,0x19
c0011089:	77 33                	ja     c00110be <SysSetDiskVolumeLabel(regs*)+0x44>
c001108b:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0011092:	85 c9                	test   ecx,ecx
c0011094:	74 28                	je     c00110be <SysSetDiskVolumeLabel(regs*)+0x44>
c0011096:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011099:	85 db                	test   ebx,ebx
c001109b:	74 21                	je     c00110be <SysSetDiskVolumeLabel(regs*)+0x44>
c001109d:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c00110a3:	85 d2                	test   edx,edx
c00110a5:	74 17                	je     c00110be <SysSetDiskVolumeLabel(regs*)+0x44>
c00110a7:	8b 32                	mov    esi,DWORD PTR [edx]
c00110a9:	53                   	push   ebx
c00110aa:	50                   	push   eax
c00110ab:	51                   	push   ecx
c00110ac:	52                   	push   edx
c00110ad:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00110b0:	83 c4 10             	add    esp,0x10
c00110b3:	89 c2                	mov    edx,eax
c00110b5:	83 c4 04             	add    esp,0x4
c00110b8:	c1 fa 1f             	sar    edx,0x1f
c00110bb:	5b                   	pop    ebx
c00110bc:	5e                   	pop    esi
c00110bd:	c3                   	ret    
c00110be:	83 c4 04             	add    esp,0x4
c00110c1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00110c6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00110cb:	5b                   	pop    ebx
c00110cc:	5e                   	pop    esi
c00110cd:	c3                   	ret    

c00110ce <SysGetDiskVolumeLabel(regs*)>:
c00110ce:	57                   	push   edi
c00110cf:	56                   	push   esi
c00110d0:	53                   	push   ebx
c00110d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00110d8:	83 fa 19             	cmp    edx,0x19
c00110db:	77 3c                	ja     c0011119 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00110dd:	8b 0c 95 20 74 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd8be0]
c00110e4:	85 c9                	test   ecx,ecx
c00110e6:	74 31                	je     c0011119 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00110e8:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00110eb:	85 db                	test   ebx,ebx
c00110ed:	74 2a                	je     c0011119 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00110ef:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00110f2:	85 f6                	test   esi,esi
c00110f4:	74 23                	je     c0011119 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00110f6:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c00110fc:	85 c0                	test   eax,eax
c00110fe:	74 19                	je     c0011119 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011100:	83 ec 0c             	sub    esp,0xc
c0011103:	8b 38                	mov    edi,DWORD PTR [eax]
c0011105:	56                   	push   esi
c0011106:	53                   	push   ebx
c0011107:	52                   	push   edx
c0011108:	51                   	push   ecx
c0011109:	50                   	push   eax
c001110a:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001110d:	83 c4 20             	add    esp,0x20
c0011110:	89 c2                	mov    edx,eax
c0011112:	5b                   	pop    ebx
c0011113:	c1 fa 1f             	sar    edx,0x1f
c0011116:	5e                   	pop    esi
c0011117:	5f                   	pop    edi
c0011118:	c3                   	ret    
c0011119:	5b                   	pop    ebx
c001111a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001111f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011124:	5e                   	pop    esi
c0011125:	5f                   	pop    edi
c0011126:	c3                   	ret    

c0011127 <SysShutdown(regs*)>:
c0011127:	83 ec 0c             	sub    esp,0xc
c001112a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001112e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011131:	85 c0                	test   eax,eax
c0011133:	74 18                	je     c001114d <SysShutdown(regs*)+0x26>
c0011135:	83 f8 01             	cmp    eax,0x1
c0011138:	74 38                	je     c0011172 <SysShutdown(regs*)+0x4b>
c001113a:	83 f8 02             	cmp    eax,0x2
c001113d:	74 24                	je     c0011163 <SysShutdown(regs*)+0x3c>
c001113f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011144:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011149:	83 c4 0c             	add    esp,0xc
c001114c:	c3                   	ret    
c001114d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0011152:	8b 10                	mov    edx,DWORD PTR [eax]
c0011154:	6a 00                	push   0x0
c0011156:	6a 00                	push   0x0
c0011158:	6a 00                	push   0x0
c001115a:	50                   	push   eax
c001115b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001115e:	83 c4 10             	add    esp,0x10
c0011161:	eb dc                	jmp    c001113f <SysShutdown(regs*)+0x18>
c0011163:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0011168:	8b 10                	mov    edx,DWORD PTR [eax]
c001116a:	6a 00                	push   0x0
c001116c:	6a 00                	push   0x0
c001116e:	6a 01                	push   0x1
c0011170:	eb e8                	jmp    c001115a <SysShutdown(regs*)+0x33>
c0011172:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c0011177:	85 c0                	test   eax,eax
c0011179:	74 02                	je     c001117d <SysShutdown(regs*)+0x56>
c001117b:	ff d0                	call   eax
c001117d:	31 c0                	xor    eax,eax
c001117f:	31 d2                	xor    edx,edx
c0011181:	83 c4 0c             	add    esp,0xc
c0011184:	c3                   	ret    

c0011185 <SysRealpath(regs*)>:
c0011185:	83 ec 0c             	sub    esp,0xc
c0011188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001118c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001118f:	85 d2                	test   edx,edx
c0011191:	74 07                	je     c001119a <SysRealpath(regs*)+0x15>
c0011193:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011196:	85 c0                	test   eax,eax
c0011198:	75 0b                	jne    c00111a5 <SysRealpath(regs*)+0x20>
c001119a:	b8 01 00 00 00       	mov    eax,0x1
c001119f:	31 d2                	xor    edx,edx
c00111a1:	83 c4 0c             	add    esp,0xc
c00111a4:	c3                   	ret    
c00111a5:	83 ec 04             	sub    esp,0x4
c00111a8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00111ae:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00111b1:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00111b7:	51                   	push   ecx
c00111b8:	52                   	push   edx
c00111b9:	50                   	push   eax
c00111ba:	e8 f7 9b ff ff       	call   c000adb6 <Fs::standardiseFiles(char*, char const*, char const*)>
c00111bf:	83 c4 10             	add    esp,0x10
c00111c2:	31 c0                	xor    eax,eax
c00111c4:	31 d2                	xor    edx,edx
c00111c6:	83 c4 0c             	add    esp,0xc
c00111c9:	c3                   	ret    

c00111ca <SysReadDir(regs*)>:
c00111ca:	53                   	push   ebx
c00111cb:	83 ec 18             	sub    esp,0x18
c00111ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00111d2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00111d5:	83 f8 02             	cmp    eax,0x2
c00111d8:	76 61                	jbe    c001123b <SysReadDir(regs*)+0x71>
c00111da:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00111e1:	77 49                	ja     c001122c <SysReadDir(regs*)+0x62>
c00111e3:	83 ec 0c             	sub    esp,0xc
c00111e6:	50                   	push   eax
c00111e7:	e8 d7 82 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c00111ec:	83 c4 10             	add    esp,0x10
c00111ef:	85 c0                	test   eax,eax
c00111f1:	74 39                	je     c001122c <SysReadDir(regs*)+0x62>
c00111f3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00111fb:	83 ec 0c             	sub    esp,0xc
c00111fe:	8b 10                	mov    edx,DWORD PTR [eax]
c0011200:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011204:	51                   	push   ecx
c0011205:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011208:	51                   	push   ecx
c0011209:	6a 00                	push   0x0
c001120b:	68 10 01 00 00       	push   0x110
c0011210:	50                   	push   eax
c0011211:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011214:	83 c4 20             	add    esp,0x20
c0011217:	85 c0                	test   eax,eax
c0011219:	74 29                	je     c0011244 <SysReadDir(regs*)+0x7a>
c001121b:	83 f8 07             	cmp    eax,0x7
c001121e:	74 1b                	je     c001123b <SysReadDir(regs*)+0x71>
c0011220:	b8 02 00 00 00       	mov    eax,0x2
c0011225:	31 d2                	xor    edx,edx
c0011227:	83 c4 18             	add    esp,0x18
c001122a:	5b                   	pop    ebx
c001122b:	c3                   	ret    
c001122c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011231:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011236:	83 c4 18             	add    esp,0x18
c0011239:	5b                   	pop    ebx
c001123a:	c3                   	ret    
c001123b:	b8 01 00 00 00       	mov    eax,0x1
c0011240:	31 d2                	xor    edx,edx
c0011242:	eb e3                	jmp    c0011227 <SysReadDir(regs*)+0x5d>
c0011244:	31 c0                	xor    eax,eax
c0011246:	31 d2                	xor    edx,edx
c0011248:	eb dd                	jmp    c0011227 <SysReadDir(regs*)+0x5d>

c001124a <SysIsATTY(regs*)>:
c001124a:	83 ec 0c             	sub    esp,0xc
c001124d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011251:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011254:	83 f8 02             	cmp    eax,0x2
c0011257:	76 07                	jbe    c0011260 <SysIsATTY(regs*)+0x16>
c0011259:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001125e:	75 26                	jne    c0011286 <SysIsATTY(regs*)+0x3c>
c0011260:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011265:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011268:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001126e:	85 c0                	test   eax,eax
c0011270:	74 24                	je     c0011296 <SysIsATTY(regs*)+0x4c>
c0011272:	83 ec 0c             	sub    esp,0xc
c0011275:	8b 10                	mov    edx,DWORD PTR [eax]
c0011277:	50                   	push   eax
c0011278:	ff 12                	call   DWORD PTR [edx]
c001127a:	31 d2                	xor    edx,edx
c001127c:	0f b6 c0             	movzx  eax,al
c001127f:	83 c4 10             	add    esp,0x10
c0011282:	83 c4 0c             	add    esp,0xc
c0011285:	c3                   	ret    
c0011286:	83 ec 0c             	sub    esp,0xc
c0011289:	50                   	push   eax
c001128a:	e8 34 82 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c001128f:	83 c4 10             	add    esp,0x10
c0011292:	85 c0                	test   eax,eax
c0011294:	75 dc                	jne    c0011272 <SysIsATTY(regs*)+0x28>
c0011296:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001129b:	ba ff ff ff ff       	mov    edx,0xffffffff
c00112a0:	83 c4 0c             	add    esp,0xc
c00112a3:	c3                   	ret    

c00112a4 <SysSeek(regs*)>:
c00112a4:	53                   	push   ebx
c00112a5:	83 ec 08             	sub    esp,0x8
c00112a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00112ac:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00112af:	8d 50 fd             	lea    edx,[eax-0x3]
c00112b2:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00112b8:	77 32                	ja     c00112ec <SysSeek(regs*)+0x48>
c00112ba:	83 ec 0c             	sub    esp,0xc
c00112bd:	50                   	push   eax
c00112be:	e8 00 82 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c00112c3:	83 c4 0c             	add    esp,0xc
c00112c6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00112c9:	31 db                	xor    ebx,ebx
c00112cb:	53                   	push   ebx
c00112cc:	51                   	push   ecx
c00112cd:	50                   	push   eax
c00112ce:	e8 13 9e ff ff       	call   c000b0e6 <File::seek(unsigned long long)>
c00112d3:	83 c4 10             	add    esp,0x10
c00112d6:	85 c0                	test   eax,eax
c00112d8:	0f 95 c0             	setne  al
c00112db:	31 d2                	xor    edx,edx
c00112dd:	0f b6 c0             	movzx  eax,al
c00112e0:	f7 d8                	neg    eax
c00112e2:	83 d2 00             	adc    edx,0x0
c00112e5:	83 c4 08             	add    esp,0x8
c00112e8:	f7 da                	neg    edx
c00112ea:	5b                   	pop    ebx
c00112eb:	c3                   	ret    
c00112ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00112f1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00112f6:	83 c4 08             	add    esp,0x8
c00112f9:	5b                   	pop    ebx
c00112fa:	c3                   	ret    

c00112fb <SysTell(regs*)>:
c00112fb:	53                   	push   ebx
c00112fc:	83 ec 08             	sub    esp,0x8
c00112ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011303:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011306:	83 f8 02             	cmp    eax,0x2
c0011309:	76 4e                	jbe    c0011359 <SysTell(regs*)+0x5e>
c001130b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011310:	76 19                	jbe    c001132b <SysTell(regs*)+0x30>
c0011312:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011315:	31 d2                	xor    edx,edx
c0011317:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001131d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011324:	31 c0                	xor    eax,eax
c0011326:	83 c4 08             	add    esp,0x8
c0011329:	5b                   	pop    ebx
c001132a:	c3                   	ret    
c001132b:	83 ec 0c             	sub    esp,0xc
c001132e:	50                   	push   eax
c001132f:	e8 8f 81 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c0011334:	5a                   	pop    edx
c0011335:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011338:	59                   	pop    ecx
c0011339:	53                   	push   ebx
c001133a:	50                   	push   eax
c001133b:	e8 fc 9d ff ff       	call   c000b13c <File::tell(unsigned long long*)>
c0011340:	83 c4 10             	add    esp,0x10
c0011343:	85 c0                	test   eax,eax
c0011345:	0f 95 c0             	setne  al
c0011348:	31 d2                	xor    edx,edx
c001134a:	0f b6 c0             	movzx  eax,al
c001134d:	f7 d8                	neg    eax
c001134f:	83 d2 00             	adc    edx,0x0
c0011352:	83 c4 08             	add    esp,0x8
c0011355:	f7 da                	neg    edx
c0011357:	5b                   	pop    ebx
c0011358:	c3                   	ret    
c0011359:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001135e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011363:	83 c4 08             	add    esp,0x8
c0011366:	5b                   	pop    ebx
c0011367:	c3                   	ret    

c0011368 <SysSize(regs*)>:
c0011368:	53                   	push   ebx
c0011369:	83 ec 18             	sub    esp,0x18
c001136c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011370:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011373:	83 f8 02             	cmp    eax,0x2
c0011376:	76 54                	jbe    c00113cc <SysSize(regs*)+0x64>
c0011378:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001137d:	76 19                	jbe    c0011398 <SysSize(regs*)+0x30>
c001137f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011382:	31 d2                	xor    edx,edx
c0011384:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001138a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011391:	31 c0                	xor    eax,eax
c0011393:	83 c4 18             	add    esp,0x18
c0011396:	5b                   	pop    ebx
c0011397:	c3                   	ret    
c0011398:	83 ec 0c             	sub    esp,0xc
c001139b:	50                   	push   eax
c001139c:	e8 22 81 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c00113a1:	83 c4 0c             	add    esp,0xc
c00113a4:	8d 54 24 13          	lea    edx,[esp+0x13]
c00113a8:	52                   	push   edx
c00113a9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00113ac:	52                   	push   edx
c00113ad:	50                   	push   eax
c00113ae:	e8 21 9f ff ff       	call   c000b2d4 <File::stat(unsigned long long*, bool*)>
c00113b3:	83 c4 10             	add    esp,0x10
c00113b6:	85 c0                	test   eax,eax
c00113b8:	0f 95 c0             	setne  al
c00113bb:	31 d2                	xor    edx,edx
c00113bd:	0f b6 c0             	movzx  eax,al
c00113c0:	f7 d8                	neg    eax
c00113c2:	83 d2 00             	adc    edx,0x0
c00113c5:	83 c4 18             	add    esp,0x18
c00113c8:	f7 da                	neg    edx
c00113ca:	5b                   	pop    ebx
c00113cb:	c3                   	ret    
c00113cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113d1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113d6:	83 c4 18             	add    esp,0x18
c00113d9:	5b                   	pop    ebx
c00113da:	c3                   	ret    

c00113db <SysSizeFromFilename(regs*)>:
c00113db:	57                   	push   edi
c00113dc:	56                   	push   esi
c00113dd:	53                   	push   ebx
c00113de:	83 ec 20             	sub    esp,0x20
c00113e1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00113e5:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00113e8:	83 fb 02             	cmp    ebx,0x2
c00113eb:	0f 86 8a 00 00 00    	jbe    c001147b <SysSizeFromFilename(regs*)+0xa0>
c00113f1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00113f7:	76 1b                	jbe    c0011414 <SysSizeFromFilename(regs*)+0x39>
c00113f9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00113fc:	31 d2                	xor    edx,edx
c00113fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011404:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001140b:	83 c4 20             	add    esp,0x20
c001140e:	31 c0                	xor    eax,eax
c0011410:	5b                   	pop    ebx
c0011411:	5e                   	pop    esi
c0011412:	5f                   	pop    edi
c0011413:	c3                   	ret    
c0011414:	83 ec 0c             	sub    esp,0xc
c0011417:	68 14 01 00 00       	push   0x114
c001141c:	e8 8d 66 ff ff       	call   c0007aae <malloc>
c0011421:	83 c4 0c             	add    esp,0xc
c0011424:	89 c7                	mov    edi,eax
c0011426:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001142b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001142e:	50                   	push   eax
c001142f:	53                   	push   ebx
c0011430:	57                   	push   edi
c0011431:	e8 36 9b ff ff       	call   c000af6c <File::File(char const*, Process*)>
c0011436:	83 c4 0c             	add    esp,0xc
c0011439:	8d 44 24 23          	lea    eax,[esp+0x23]
c001143d:	50                   	push   eax
c001143e:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011441:	52                   	push   edx
c0011442:	57                   	push   edi
c0011443:	e8 8c 9e ff ff       	call   c000b2d4 <File::stat(unsigned long long*, bool*)>
c0011448:	83 c4 10             	add    esp,0x10
c001144b:	85 ff                	test   edi,edi
c001144d:	74 14                	je     c0011463 <SysSizeFromFilename(regs*)+0x88>
c001144f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011453:	8b 17                	mov    edx,DWORD PTR [edi]
c0011455:	83 ec 0c             	sub    esp,0xc
c0011458:	57                   	push   edi
c0011459:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001145c:	83 c4 10             	add    esp,0x10
c001145f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011463:	85 c0                	test   eax,eax
c0011465:	0f 95 c0             	setne  al
c0011468:	31 d2                	xor    edx,edx
c001146a:	0f b6 c0             	movzx  eax,al
c001146d:	f7 d8                	neg    eax
c001146f:	83 d2 00             	adc    edx,0x0
c0011472:	83 c4 20             	add    esp,0x20
c0011475:	f7 da                	neg    edx
c0011477:	5b                   	pop    ebx
c0011478:	5e                   	pop    esi
c0011479:	5f                   	pop    edi
c001147a:	c3                   	ret    
c001147b:	83 c4 20             	add    esp,0x20
c001147e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011483:	5b                   	pop    ebx
c0011484:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011489:	5e                   	pop    esi
c001148a:	5f                   	pop    edi
c001148b:	c3                   	ret    

c001148c <SysClose(regs*)>:
c001148c:	53                   	push   ebx
c001148d:	83 ec 08             	sub    esp,0x8
c0011490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011494:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011497:	83 f8 02             	cmp    eax,0x2
c001149a:	76 41                	jbe    c00114dd <SysClose(regs*)+0x51>
c001149c:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00114a2:	83 fa 01             	cmp    edx,0x1
c00114a5:	76 2d                	jbe    c00114d4 <SysClose(regs*)+0x48>
c00114a7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00114ac:	77 2f                	ja     c00114dd <SysClose(regs*)+0x51>
c00114ae:	83 ec 0c             	sub    esp,0xc
c00114b1:	50                   	push   eax
c00114b2:	e8 0c 80 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c00114b7:	89 c3                	mov    ebx,eax
c00114b9:	89 04 24             	mov    DWORD PTR [esp],eax
c00114bc:	e8 c5 9b ff ff       	call   c000b086 <File::close()>
c00114c1:	83 c4 10             	add    esp,0x10
c00114c4:	85 db                	test   ebx,ebx
c00114c6:	74 0c                	je     c00114d4 <SysClose(regs*)+0x48>
c00114c8:	83 ec 0c             	sub    esp,0xc
c00114cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114cd:	53                   	push   ebx
c00114ce:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114d1:	83 c4 10             	add    esp,0x10
c00114d4:	31 c0                	xor    eax,eax
c00114d6:	31 d2                	xor    edx,edx
c00114d8:	83 c4 08             	add    esp,0x8
c00114db:	5b                   	pop    ebx
c00114dc:	c3                   	ret    
c00114dd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114e2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114e7:	83 c4 08             	add    esp,0x8
c00114ea:	5b                   	pop    ebx
c00114eb:	c3                   	ret    

c00114ec <SysOpenDir(regs*)>:
c00114ec:	56                   	push   esi
c00114ed:	53                   	push   ebx
c00114ee:	83 ec 04             	sub    esp,0x4
c00114f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00114f5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00114f8:	85 c9                	test   ecx,ecx
c00114fa:	74 5d                	je     c0011559 <SysOpenDir(regs*)+0x6d>
c00114fc:	83 ec 0c             	sub    esp,0xc
c00114ff:	68 14 01 00 00       	push   0x114
c0011504:	e8 a5 65 ff ff       	call   c0007aae <malloc>
c0011509:	83 c4 0c             	add    esp,0xc
c001150c:	89 c6                	mov    esi,eax
c001150e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011513:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011516:	50                   	push   eax
c0011517:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001151a:	52                   	push   edx
c001151b:	56                   	push   esi
c001151c:	e8 71 9f ff ff       	call   c000b492 <Directory::Directory(char const*, Process*)>
c0011521:	83 c4 10             	add    esp,0x10
c0011524:	85 f6                	test   esi,esi
c0011526:	74 31                	je     c0011559 <SysOpenDir(regs*)+0x6d>
c0011528:	83 ec 0c             	sub    esp,0xc
c001152b:	56                   	push   esi
c001152c:	e8 1d a0 ff ff       	call   c000b54e <Directory::open()>
c0011531:	83 c4 10             	add    esp,0x10
c0011534:	85 c0                	test   eax,eax
c0011536:	75 21                	jne    c0011559 <SysOpenDir(regs*)+0x6d>
c0011538:	83 ec 0c             	sub    esp,0xc
c001153b:	56                   	push   esi
c001153c:	e8 85 7c ff ff       	call   c00091c6 <UnixFile::getFileDescriptor()>
c0011541:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011544:	83 c4 10             	add    esp,0x10
c0011547:	89 02                	mov    DWORD PTR [edx],eax
c0011549:	c1 f8 1f             	sar    eax,0x1f
c001154c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001154f:	83 c4 04             	add    esp,0x4
c0011552:	31 c0                	xor    eax,eax
c0011554:	31 d2                	xor    edx,edx
c0011556:	5b                   	pop    ebx
c0011557:	5e                   	pop    esi
c0011558:	c3                   	ret    
c0011559:	83 c4 04             	add    esp,0x4
c001155c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011561:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011566:	5b                   	pop    ebx
c0011567:	5e                   	pop    esi
c0011568:	c3                   	ret    

c0011569 <SysMakeDir(regs*)>:
c0011569:	56                   	push   esi
c001156a:	53                   	push   ebx
c001156b:	83 ec 10             	sub    esp,0x10
c001156e:	68 14 01 00 00       	push   0x114
c0011573:	e8 36 65 ff ff       	call   c0007aae <malloc>
c0011578:	83 c4 0c             	add    esp,0xc
c001157b:	89 c3                	mov    ebx,eax
c001157d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011582:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011585:	50                   	push   eax
c0011586:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001158a:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001158d:	52                   	push   edx
c001158e:	53                   	push   ebx
c001158f:	e8 fe 9e ff ff       	call   c000b492 <Directory::Directory(char const*, Process*)>
c0011594:	83 c4 10             	add    esp,0x10
c0011597:	85 db                	test   ebx,ebx
c0011599:	74 2c                	je     c00115c7 <SysMakeDir(regs*)+0x5e>
c001159b:	83 ec 0c             	sub    esp,0xc
c001159e:	53                   	push   ebx
c001159f:	e8 8a a1 ff ff       	call   c000b72e <Directory::create()>
c00115a4:	89 c6                	mov    esi,eax
c00115a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00115ab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00115ae:	83 c4 10             	add    esp,0x10
c00115b1:	31 c0                	xor    eax,eax
c00115b3:	85 f6                	test   esi,esi
c00115b5:	0f 95 c0             	setne  al
c00115b8:	31 d2                	xor    edx,edx
c00115ba:	f7 d8                	neg    eax
c00115bc:	83 d2 00             	adc    edx,0x0
c00115bf:	83 c4 04             	add    esp,0x4
c00115c2:	f7 da                	neg    edx
c00115c4:	5b                   	pop    ebx
c00115c5:	5e                   	pop    esi
c00115c6:	c3                   	ret    
c00115c7:	83 c4 04             	add    esp,0x4
c00115ca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115cf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115d4:	5b                   	pop    ebx
c00115d5:	5e                   	pop    esi
c00115d6:	c3                   	ret    

c00115d7 <SysCloseDir(regs*)>:
c00115d7:	53                   	push   ebx
c00115d8:	83 ec 08             	sub    esp,0x8
c00115db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115df:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00115e2:	8d 50 fd             	lea    edx,[eax-0x3]
c00115e5:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00115eb:	77 2f                	ja     c001161c <SysCloseDir(regs*)+0x45>
c00115ed:	83 ec 0c             	sub    esp,0xc
c00115f0:	50                   	push   eax
c00115f1:	e8 cd 7e ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c00115f6:	89 c3                	mov    ebx,eax
c00115f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00115fb:	e8 aa 9f ff ff       	call   c000b5aa <Directory::close()>
c0011600:	83 c4 10             	add    esp,0x10
c0011603:	85 db                	test   ebx,ebx
c0011605:	74 0c                	je     c0011613 <SysCloseDir(regs*)+0x3c>
c0011607:	83 ec 0c             	sub    esp,0xc
c001160a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001160c:	53                   	push   ebx
c001160d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011610:	83 c4 10             	add    esp,0x10
c0011613:	31 c0                	xor    eax,eax
c0011615:	31 d2                	xor    edx,edx
c0011617:	83 c4 08             	add    esp,0x8
c001161a:	5b                   	pop    ebx
c001161b:	c3                   	ret    
c001161c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011621:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011626:	83 c4 08             	add    esp,0x8
c0011629:	5b                   	pop    ebx
c001162a:	c3                   	ret    

c001162b <SysWait(regs*)>:
c001162b:	83 ec 10             	sub    esp,0x10
c001162e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011632:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011635:	52                   	push   edx
c0011636:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011639:	51                   	push   ecx
c001163a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001163d:	50                   	push   eax
c001163e:	e8 d5 3c 00 00       	call   c0015318 <waitTask(int, int*, int)>
c0011643:	83 c4 1c             	add    esp,0x1c
c0011646:	89 c2                	mov    edx,eax
c0011648:	c1 fa 1f             	sar    edx,0x1f
c001164b:	c3                   	ret    

c001164c <SysNotImpl(regs*)>:
c001164c:	83 ec 18             	sub    esp,0x18
c001164f:	68 36 0e 02 c0       	push   0xc0020e36
c0011654:	e8 be f2 ff ff       	call   c0010917 <KePanic(char const*)>
c0011659:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001165e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011663:	83 c4 1c             	add    esp,0x1c
c0011666:	c3                   	ret    

c0011667 <SysPanic(regs*)>:
c0011667:	83 ec 18             	sub    esp,0x18
c001166a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001166e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011671:	50                   	push   eax
c0011672:	e8 a0 f2 ff ff       	call   c0010917 <KePanic(char const*)>
c0011677:	b8 01 00 00 00       	mov    eax,0x1
c001167c:	31 d2                	xor    edx,edx
c001167e:	83 c4 1c             	add    esp,0x1c
c0011681:	c3                   	ret    

c0011682 <SysRmdir(regs*)>:
c0011682:	56                   	push   esi
c0011683:	53                   	push   ebx
c0011684:	83 ec 20             	sub    esp,0x20
c0011687:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001168b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001168e:	68 14 01 00 00       	push   0x114
c0011693:	e8 16 64 ff ff       	call   c0007aae <malloc>
c0011698:	83 c4 0c             	add    esp,0xc
c001169b:	89 c3                	mov    ebx,eax
c001169d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116a2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00116a5:	50                   	push   eax
c00116a6:	56                   	push   esi
c00116a7:	53                   	push   ebx
c00116a8:	e8 bf 98 ff ff       	call   c000af6c <File::File(char const*, Process*)>
c00116ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116b0:	e8 eb 9a ff ff       	call   c000b1a0 <File::unlink()>
c00116b5:	83 c4 10             	add    esp,0x10
c00116b8:	85 db                	test   ebx,ebx
c00116ba:	74 14                	je     c00116d0 <SysRmdir(regs*)+0x4e>
c00116bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00116c0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00116c2:	83 ec 0c             	sub    esp,0xc
c00116c5:	53                   	push   ebx
c00116c6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00116c9:	83 c4 10             	add    esp,0x10
c00116cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00116d0:	85 c0                	test   eax,eax
c00116d2:	0f 95 c0             	setne  al
c00116d5:	31 d2                	xor    edx,edx
c00116d7:	0f b6 c0             	movzx  eax,al
c00116da:	f7 d8                	neg    eax
c00116dc:	83 d2 00             	adc    edx,0x0
c00116df:	83 c4 14             	add    esp,0x14
c00116e2:	f7 da                	neg    edx
c00116e4:	5b                   	pop    ebx
c00116e5:	5e                   	pop    esi
c00116e6:	c3                   	ret    

c00116e7 <SysUnlink(regs*)>:
c00116e7:	56                   	push   esi
c00116e8:	53                   	push   ebx
c00116e9:	83 ec 20             	sub    esp,0x20
c00116ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00116f0:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00116f3:	68 14 01 00 00       	push   0x114
c00116f8:	e8 b1 63 ff ff       	call   c0007aae <malloc>
c00116fd:	83 c4 0c             	add    esp,0xc
c0011700:	89 c3                	mov    ebx,eax
c0011702:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011707:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001170a:	50                   	push   eax
c001170b:	56                   	push   esi
c001170c:	53                   	push   ebx
c001170d:	e8 5a 98 ff ff       	call   c000af6c <File::File(char const*, Process*)>
c0011712:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011715:	e8 86 9a ff ff       	call   c000b1a0 <File::unlink()>
c001171a:	83 c4 10             	add    esp,0x10
c001171d:	85 db                	test   ebx,ebx
c001171f:	74 14                	je     c0011735 <SysUnlink(regs*)+0x4e>
c0011721:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011725:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011727:	83 ec 0c             	sub    esp,0xc
c001172a:	53                   	push   ebx
c001172b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001172e:	83 c4 10             	add    esp,0x10
c0011731:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011735:	85 c0                	test   eax,eax
c0011737:	0f 95 c0             	setne  al
c001173a:	31 d2                	xor    edx,edx
c001173c:	0f b6 c0             	movzx  eax,al
c001173f:	f7 d8                	neg    eax
c0011741:	83 d2 00             	adc    edx,0x0
c0011744:	83 c4 14             	add    esp,0x14
c0011747:	f7 da                	neg    edx
c0011749:	5b                   	pop    ebx
c001174a:	5e                   	pop    esi
c001174b:	c3                   	ret    

c001174c <SysGetArgv(regs*)>:
c001174c:	83 ec 0c             	sub    esp,0xc
c001174f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011753:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011756:	85 c0                	test   eax,eax
c0011758:	78 2c                	js     c0011786 <SysGetArgv(regs*)+0x3a>
c001175a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011760:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011763:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011769:	7d 1b                	jge    c0011786 <SysGetArgv(regs*)+0x3a>
c001176b:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0011772:	85 c0                	test   eax,eax
c0011774:	74 18                	je     c001178e <SysGetArgv(regs*)+0x42>
c0011776:	83 ec 08             	sub    esp,0x8
c0011779:	50                   	push   eax
c001177a:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001177d:	50                   	push   eax
c001177e:	e8 bd ee fe ff       	call   c0000640 <strcpy>
c0011783:	83 c4 10             	add    esp,0x10
c0011786:	31 c0                	xor    eax,eax
c0011788:	31 d2                	xor    edx,edx
c001178a:	83 c4 0c             	add    esp,0xc
c001178d:	c3                   	ret    
c001178e:	b8 01 00 00 00       	mov    eax,0x1
c0011793:	31 d2                	xor    edx,edx
c0011795:	83 c4 0c             	add    esp,0xc
c0011798:	c3                   	ret    

c0011799 <SysUSleep(regs*)>:
c0011799:	83 ec 1c             	sub    esp,0x1c
c001179c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00117a0:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00117a3:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00117a6:	6a 00                	push   0x0
c00117a8:	6a 64                	push   0x64
c00117aa:	52                   	push   edx
c00117ab:	50                   	push   eax
c00117ac:	e8 af ce 00 00       	call   c001e660 <__udivdi3>
c00117b1:	83 c4 14             	add    esp,0x14
c00117b4:	50                   	push   eax
c00117b5:	e8 42 3c 00 00       	call   c00153fc <milliTenthSleep(unsigned int)>
c00117ba:	31 c0                	xor    eax,eax
c00117bc:	31 d2                	xor    edx,edx
c00117be:	83 c4 1c             	add    esp,0x1c
c00117c1:	c3                   	ret    

c00117c2 <SysSpawn(regs*)>:
c00117c2:	56                   	push   esi
c00117c3:	53                   	push   ebx
c00117c4:	83 ec 04             	sub    esp,0x4
c00117c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117cb:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00117ce:	85 f6                	test   esi,esi
c00117d0:	75 0a                	jne    c00117dc <SysSpawn(regs*)+0x1a>
c00117d2:	83 c4 04             	add    esp,0x4
c00117d5:	31 c0                	xor    eax,eax
c00117d7:	31 d2                	xor    edx,edx
c00117d9:	5b                   	pop    ebx
c00117da:	5e                   	pop    esi
c00117db:	c3                   	ret    
c00117dc:	83 ec 0c             	sub    esp,0xc
c00117df:	68 24 07 00 00       	push   0x724
c00117e4:	e8 c5 62 ff ff       	call   c0007aae <malloc>
c00117e9:	83 c4 10             	add    esp,0x10
c00117ec:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00117ef:	89 c6                	mov    esi,eax
c00117f1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00117f4:	85 c9                	test   ecx,ecx
c00117f6:	75 39                	jne    c0011831 <SysSpawn(regs*)+0x6f>
c00117f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117fd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011800:	52                   	push   edx
c0011801:	50                   	push   eax
c0011802:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011805:	50                   	push   eax
c0011806:	56                   	push   esi
c0011807:	e8 40 32 00 00       	call   c0014a4c <Process::Process(char const*, Process*, char**)>
c001180c:	83 c4 10             	add    esp,0x10
c001180f:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011816:	75 ba                	jne    c00117d2 <SysSpawn(regs*)+0x10>
c0011818:	83 ec 0c             	sub    esp,0xc
c001181b:	56                   	push   esi
c001181c:	e8 67 37 00 00       	call   c0014f88 <Process::createUserThread()>
c0011821:	8b 06                	mov    eax,DWORD PTR [esi]
c0011823:	83 c4 10             	add    esp,0x10
c0011826:	89 c2                	mov    edx,eax
c0011828:	83 c4 04             	add    esp,0x4
c001182b:	c1 fa 1f             	sar    edx,0x1f
c001182e:	5b                   	pop    ebx
c001182f:	5e                   	pop    esi
c0011830:	c3                   	ret    
c0011831:	31 c0                	xor    eax,eax
c0011833:	eb cb                	jmp    c0011800 <SysSpawn(regs*)+0x3e>

c0011835 <SysGetEnv(regs*)>:
c0011835:	57                   	push   edi
c0011836:	56                   	push   esi
c0011837:	53                   	push   ebx
c0011838:	83 ec 1c             	sub    esp,0x1c
c001183b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001183f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011844:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011847:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001184a:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001184d:	51                   	push   ecx
c001184e:	e8 7c ef ff ff       	call   c00107cf <Krnl::getProcessTotalEnvCount(Process*)>
c0011853:	83 c4 10             	add    esp,0x10
c0011856:	39 c7                	cmp    edi,eax
c0011858:	7c 14                	jl     c001186e <SysGetEnv(regs*)+0x39>
c001185a:	85 f6                	test   esi,esi
c001185c:	75 0b                	jne    c0011869 <SysGetEnv(regs*)+0x34>
c001185e:	83 c4 10             	add    esp,0x10
c0011861:	31 c0                	xor    eax,eax
c0011863:	5b                   	pop    ebx
c0011864:	31 d2                	xor    edx,edx
c0011866:	5e                   	pop    esi
c0011867:	5f                   	pop    edi
c0011868:	c3                   	ret    
c0011869:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001186c:	eb f0                	jmp    c001185e <SysGetEnv(regs*)+0x29>
c001186e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011872:	83 ec 04             	sub    esp,0x4
c0011875:	57                   	push   edi
c0011876:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001187c:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c001187f:	57                   	push   edi
c0011880:	50                   	push   eax
c0011881:	e8 69 ef ff ff       	call   c00107ef <Krnl::getProcessEnvPair(Process*, int)>
c0011886:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011889:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001188d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011891:	83 c4 0c             	add    esp,0xc
c0011894:	85 d2                	test   edx,edx
c0011896:	75 23                	jne    c00118bb <SysGetEnv(regs*)+0x86>
c0011898:	83 ec 0c             	sub    esp,0xc
c001189b:	50                   	push   eax
c001189c:	e8 cf ec fe ff       	call   c0000570 <strlen>
c00118a1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00118a4:	89 c3                	mov    ebx,eax
c00118a6:	e8 c5 ec fe ff       	call   c0000570 <strlen>
c00118ab:	83 c4 10             	add    esp,0x10
c00118ae:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00118b2:	83 c4 10             	add    esp,0x10
c00118b5:	31 d2                	xor    edx,edx
c00118b7:	5b                   	pop    ebx
c00118b8:	5e                   	pop    esi
c00118b9:	5f                   	pop    edi
c00118ba:	c3                   	ret    
c00118bb:	83 ec 08             	sub    esp,0x8
c00118be:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00118c1:	50                   	push   eax
c00118c2:	56                   	push   esi
c00118c3:	e8 78 ed fe ff       	call   c0000640 <strcpy>
c00118c8:	58                   	pop    eax
c00118c9:	5a                   	pop    edx
c00118ca:	68 50 0e 02 c0       	push   0xc0020e50
c00118cf:	56                   	push   esi
c00118d0:	e8 6b ef fe ff       	call   c0000840 <strcat>
c00118d5:	59                   	pop    ecx
c00118d6:	5b                   	pop    ebx
c00118d7:	57                   	push   edi
c00118d8:	56                   	push   esi
c00118d9:	e8 62 ef fe ff       	call   c0000840 <strcat>
c00118de:	83 c4 10             	add    esp,0x10
c00118e1:	e9 78 ff ff ff       	jmp    c001185e <SysGetEnv(regs*)+0x29>

c00118e6 <SysSetFatAttrib(regs*)>:
c00118e6:	57                   	push   edi
c00118e7:	56                   	push   esi
c00118e8:	53                   	push   ebx
c00118e9:	83 ec 1c             	sub    esp,0x1c
c00118ec:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00118f0:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00118f3:	68 14 01 00 00       	push   0x114
c00118f8:	e8 b1 61 ff ff       	call   c0007aae <malloc>
c00118fd:	83 c4 0c             	add    esp,0xc
c0011900:	89 c3                	mov    ebx,eax
c0011902:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011907:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001190a:	50                   	push   eax
c001190b:	57                   	push   edi
c001190c:	53                   	push   ebx
c001190d:	e8 5a 96 ff ff       	call   c000af6c <File::File(char const*, Process*)>
c0011912:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011915:	83 c4 0c             	add    esp,0xc
c0011918:	0f b6 d4             	movzx  edx,ah
c001191b:	0f b6 c0             	movzx  eax,al
c001191e:	52                   	push   edx
c001191f:	50                   	push   eax
c0011920:	53                   	push   ebx
c0011921:	e8 14 99 ff ff       	call   c000b23a <File::chfatattr(unsigned char, unsigned char)>
c0011926:	83 c4 10             	add    esp,0x10
c0011929:	85 db                	test   ebx,ebx
c001192b:	74 14                	je     c0011941 <SysSetFatAttrib(regs*)+0x5b>
c001192d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011931:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011933:	83 ec 0c             	sub    esp,0xc
c0011936:	53                   	push   ebx
c0011937:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001193a:	83 c4 10             	add    esp,0x10
c001193d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011941:	85 c0                	test   eax,eax
c0011943:	0f 95 c0             	setne  al
c0011946:	31 d2                	xor    edx,edx
c0011948:	0f b6 c0             	movzx  eax,al
c001194b:	f7 d8                	neg    eax
c001194d:	83 d2 00             	adc    edx,0x0
c0011950:	83 c4 10             	add    esp,0x10
c0011953:	f7 da                	neg    edx
c0011955:	5b                   	pop    ebx
c0011956:	5e                   	pop    esi
c0011957:	5f                   	pop    edi
c0011958:	c3                   	ret    

c0011959 <SysPipe(regs*)>:
c0011959:	57                   	push   edi
c001195a:	56                   	push   esi
c001195b:	53                   	push   ebx
c001195c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011960:	83 ec 0c             	sub    esp,0xc
c0011963:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011966:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011969:	6a 20                	push   0x20
c001196b:	e8 3e 61 ff ff       	call   c0007aae <malloc>
c0011970:	89 c3                	mov    ebx,eax
c0011972:	58                   	pop    eax
c0011973:	5a                   	pop    edx
c0011974:	68 00 50 00 00       	push   0x5000
c0011979:	53                   	push   ebx
c001197a:	e8 93 6a ff ff       	call   c0008412 <Pipe::Pipe(int)>
c001197f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011982:	e8 3f 78 ff ff       	call   c00091c6 <UnixFile::getFileDescriptor()>
c0011987:	89 07                	mov    DWORD PTR [edi],eax
c0011989:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001198c:	e8 35 78 ff ff       	call   c00091c6 <UnixFile::getFileDescriptor()>
c0011991:	83 c4 10             	add    esp,0x10
c0011994:	89 06                	mov    DWORD PTR [esi],eax
c0011996:	31 d2                	xor    edx,edx
c0011998:	5b                   	pop    ebx
c0011999:	31 c0                	xor    eax,eax
c001199b:	5e                   	pop    esi
c001199c:	5f                   	pop    edi
c001199d:	c3                   	ret    

c001199e <SysGetUnixTime(regs*)>:
c001199e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00119a3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00119a9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00119ad:	e9 c0 9f ff ff       	jmp    c000b972 <Clock::timeInSecondsLocal()>

c00119b2 <string_ends_with(char const*, char const*)>:
c00119b2:	57                   	push   edi
c00119b3:	56                   	push   esi
c00119b4:	53                   	push   ebx
c00119b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00119b9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00119bd:	83 ec 0c             	sub    esp,0xc
c00119c0:	53                   	push   ebx
c00119c1:	e8 aa eb fe ff       	call   c0000570 <strlen>
c00119c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00119c9:	89 c6                	mov    esi,eax
c00119cb:	e8 a0 eb fe ff       	call   c0000570 <strlen>
c00119d0:	83 c4 10             	add    esp,0x10
c00119d3:	39 c6                	cmp    esi,eax
c00119d5:	7d 06                	jge    c00119dd <string_ends_with(char const*, char const*)+0x2b>
c00119d7:	5b                   	pop    ebx
c00119d8:	31 c0                	xor    eax,eax
c00119da:	5e                   	pop    esi
c00119db:	5f                   	pop    edi
c00119dc:	c3                   	ret    
c00119dd:	83 ec 08             	sub    esp,0x8
c00119e0:	29 c6                	sub    esi,eax
c00119e2:	57                   	push   edi
c00119e3:	01 f3                	add    ebx,esi
c00119e5:	53                   	push   ebx
c00119e6:	e8 65 ed fe ff       	call   c0000750 <strcmp>
c00119eb:	83 c4 10             	add    esp,0x10
c00119ee:	85 c0                	test   eax,eax
c00119f0:	5b                   	pop    ebx
c00119f1:	0f 94 c0             	sete   al
c00119f4:	5e                   	pop    esi
c00119f5:	0f b6 c0             	movzx  eax,al
c00119f8:	5f                   	pop    edi
c00119f9:	c3                   	ret    

c00119fa <SysOpen(regs*)>:
c00119fa:	56                   	push   esi
c00119fb:	53                   	push   ebx
c00119fc:	81 ec 04 01 00 00    	sub    esp,0x104
c0011a02:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011a09:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a0c:	85 c0                	test   eax,eax
c0011a0e:	0f 84 bd 01 00 00    	je     c0011bd1 <SysOpen(regs*)+0x1d7>
c0011a14:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a17:	85 c0                	test   eax,eax
c0011a19:	0f 84 b2 01 00 00    	je     c0011bd1 <SysOpen(regs*)+0x1d7>
c0011a1f:	83 ec 04             	sub    esp,0x4
c0011a22:	68 52 0e 02 c0       	push   0xc0020e52
c0011a27:	50                   	push   eax
c0011a28:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011a2c:	56                   	push   esi
c0011a2d:	e8 84 93 ff ff       	call   c000adb6 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011a32:	89 34 24             	mov    DWORD PTR [esp],esi
c0011a35:	e8 36 eb fe ff       	call   c0000570 <strlen>
c0011a3a:	83 c4 10             	add    esp,0x10
c0011a3d:	83 e8 01             	sub    eax,0x1
c0011a40:	74 21                	je     c0011a63 <SysOpen(regs*)+0x69>
c0011a42:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0011a46:	eb 12                	jmp    c0011a5a <SysOpen(regs*)+0x60>
c0011a48:	83 fa 3a             	cmp    edx,0x3a
c0011a4b:	74 12                	je     c0011a5f <SysOpen(regs*)+0x65>
c0011a4d:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011a51:	83 e8 01             	sub    eax,0x1
c0011a54:	74 0d                	je     c0011a63 <SysOpen(regs*)+0x69>
c0011a56:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011a5a:	83 fa 2e             	cmp    edx,0x2e
c0011a5d:	75 e9                	jne    c0011a48 <SysOpen(regs*)+0x4e>
c0011a5f:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011a63:	83 ec 08             	sub    esp,0x8
c0011a66:	68 56 0e 02 c0       	push   0xc0020e56
c0011a6b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a6e:	50                   	push   eax
c0011a6f:	e8 3e ff ff ff       	call   c00119b2 <string_ends_with(char const*, char const*)>
c0011a74:	83 c4 10             	add    esp,0x10
c0011a77:	85 c0                	test   eax,eax
c0011a79:	74 1d                	je     c0011a98 <SysOpen(regs*)+0x9e>
c0011a7b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a7e:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011a84:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011a8b:	81 c4 04 01 00 00    	add    esp,0x104
c0011a91:	31 c0                	xor    eax,eax
c0011a93:	31 d2                	xor    edx,edx
c0011a95:	5b                   	pop    ebx
c0011a96:	5e                   	pop    esi
c0011a97:	c3                   	ret    
c0011a98:	83 ec 08             	sub    esp,0x8
c0011a9b:	68 5b 0e 02 c0       	push   0xc0020e5b
c0011aa0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011aa3:	50                   	push   eax
c0011aa4:	e8 09 ff ff ff       	call   c00119b2 <string_ends_with(char const*, char const*)>
c0011aa9:	83 c4 10             	add    esp,0x10
c0011aac:	85 c0                	test   eax,eax
c0011aae:	75 cb                	jne    c0011a7b <SysOpen(regs*)+0x81>
c0011ab0:	83 ec 08             	sub    esp,0x8
c0011ab3:	68 57 0e 02 c0       	push   0xc0020e57
c0011ab8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011abb:	50                   	push   eax
c0011abc:	e8 8f ec fe ff       	call   c0000750 <strcmp>
c0011ac1:	83 c4 10             	add    esp,0x10
c0011ac4:	85 c0                	test   eax,eax
c0011ac6:	74 b3                	je     c0011a7b <SysOpen(regs*)+0x81>
c0011ac8:	83 ec 08             	sub    esp,0x8
c0011acb:	68 56 0e 02 c0       	push   0xc0020e56
c0011ad0:	56                   	push   esi
c0011ad1:	e8 dc fe ff ff       	call   c00119b2 <string_ends_with(char const*, char const*)>
c0011ad6:	83 c4 10             	add    esp,0x10
c0011ad9:	85 c0                	test   eax,eax
c0011adb:	75 9e                	jne    c0011a7b <SysOpen(regs*)+0x81>
c0011add:	83 ec 08             	sub    esp,0x8
c0011ae0:	68 60 0e 02 c0       	push   0xc0020e60
c0011ae5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ae8:	50                   	push   eax
c0011ae9:	e8 c4 fe ff ff       	call   c00119b2 <string_ends_with(char const*, char const*)>
c0011aee:	83 c4 10             	add    esp,0x10
c0011af1:	85 c0                	test   eax,eax
c0011af3:	0f 85 eb 00 00 00    	jne    c0011be4 <SysOpen(regs*)+0x1ea>
c0011af9:	83 ec 08             	sub    esp,0x8
c0011afc:	68 65 0e 02 c0       	push   0xc0020e65
c0011b01:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011b04:	50                   	push   eax
c0011b05:	e8 a8 fe ff ff       	call   c00119b2 <string_ends_with(char const*, char const*)>
c0011b0a:	83 c4 10             	add    esp,0x10
c0011b0d:	85 c0                	test   eax,eax
c0011b0f:	0f 85 cf 00 00 00    	jne    c0011be4 <SysOpen(regs*)+0x1ea>
c0011b15:	83 ec 08             	sub    esp,0x8
c0011b18:	68 61 0e 02 c0       	push   0xc0020e61
c0011b1d:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011b20:	51                   	push   ecx
c0011b21:	e8 2a ec fe ff       	call   c0000750 <strcmp>
c0011b26:	83 c4 10             	add    esp,0x10
c0011b29:	85 c0                	test   eax,eax
c0011b2b:	0f 84 b3 00 00 00    	je     c0011be4 <SysOpen(regs*)+0x1ea>
c0011b31:	83 ec 08             	sub    esp,0x8
c0011b34:	68 60 0e 02 c0       	push   0xc0020e60
c0011b39:	56                   	push   esi
c0011b3a:	e8 73 fe ff ff       	call   c00119b2 <string_ends_with(char const*, char const*)>
c0011b3f:	83 c4 10             	add    esp,0x10
c0011b42:	85 c0                	test   eax,eax
c0011b44:	0f 85 9a 00 00 00    	jne    c0011be4 <SysOpen(regs*)+0x1ea>
c0011b4a:	83 ec 0c             	sub    esp,0xc
c0011b4d:	68 14 01 00 00       	push   0x114
c0011b52:	e8 57 5f ff ff       	call   c0007aae <malloc>
c0011b57:	83 c4 0c             	add    esp,0xc
c0011b5a:	89 c6                	mov    esi,eax
c0011b5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b61:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b64:	50                   	push   eax
c0011b65:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011b68:	52                   	push   edx
c0011b69:	56                   	push   esi
c0011b6a:	e8 fd 93 ff ff       	call   c000af6c <File::File(char const*, Process*)>
c0011b6f:	83 c4 10             	add    esp,0x10
c0011b72:	85 f6                	test   esi,esi
c0011b74:	74 5b                	je     c0011bd1 <SysOpen(regs*)+0x1d7>
c0011b76:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011b79:	0f b6 c2             	movzx  eax,dl
c0011b7c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011b7f:	89 d0                	mov    eax,edx
c0011b81:	83 e0 01             	and    eax,0x1
c0011b84:	f6 c2 02             	test   dl,0x2
c0011b87:	74 03                	je     c0011b8c <SysOpen(regs*)+0x192>
c0011b89:	83 c8 02             	or     eax,0x2
c0011b8c:	f6 c2 04             	test   dl,0x4
c0011b8f:	74 03                	je     c0011b94 <SysOpen(regs*)+0x19a>
c0011b91:	83 c8 04             	or     eax,0x4
c0011b94:	f6 c2 08             	test   dl,0x8
c0011b97:	74 03                	je     c0011b9c <SysOpen(regs*)+0x1a2>
c0011b99:	83 c8 0a             	or     eax,0xa
c0011b9c:	80 e2 10             	and    dl,0x10
c0011b9f:	74 03                	je     c0011ba4 <SysOpen(regs*)+0x1aa>
c0011ba1:	83 c8 12             	or     eax,0x12
c0011ba4:	83 ec 08             	sub    esp,0x8
c0011ba7:	50                   	push   eax
c0011ba8:	56                   	push   esi
c0011ba9:	e8 7a 94 ff ff       	call   c000b028 <File::open(FileOpenMode)>
c0011bae:	83 c4 10             	add    esp,0x10
c0011bb1:	85 c0                	test   eax,eax
c0011bb3:	75 1c                	jne    c0011bd1 <SysOpen(regs*)+0x1d7>
c0011bb5:	83 ec 0c             	sub    esp,0xc
c0011bb8:	56                   	push   esi
c0011bb9:	e8 08 76 ff ff       	call   c00091c6 <UnixFile::getFileDescriptor()>
c0011bbe:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011bc1:	83 c4 10             	add    esp,0x10
c0011bc4:	89 02                	mov    DWORD PTR [edx],eax
c0011bc6:	c1 f8 1f             	sar    eax,0x1f
c0011bc9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011bcc:	e9 ba fe ff ff       	jmp    c0011a8b <SysOpen(regs*)+0x91>
c0011bd1:	81 c4 04 01 00 00    	add    esp,0x104
c0011bd7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011bdc:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011be1:	5b                   	pop    ebx
c0011be2:	5e                   	pop    esi
c0011be3:	c3                   	ret    
c0011be4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011be7:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011bed:	e9 92 fe ff ff       	jmp    c0011a84 <SysOpen(regs*)+0x8a>

c0011bf2 <KeSystemCall(regs*, void*)>:
c0011bf2:	53                   	push   ebx
c0011bf3:	83 ec 08             	sub    esp,0x8
c0011bf6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011bfa:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011bfd:	83 f8 3b             	cmp    eax,0x3b
c0011c00:	77 16                	ja     c0011c18 <KeSystemCall(regs*, void*)+0x26>
c0011c02:	8b 14 85 20 22 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddde0]
c0011c09:	85 d2                	test   edx,edx
c0011c0b:	74 0b                	je     c0011c18 <KeSystemCall(regs*, void*)+0x26>
c0011c0d:	83 ec 0c             	sub    esp,0xc
c0011c10:	53                   	push   ebx
c0011c11:	ff d2                	call   edx
c0011c13:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011c16:	eb 0d                	jmp    c0011c25 <KeSystemCall(regs*, void*)+0x33>
c0011c18:	52                   	push   edx
c0011c19:	52                   	push   edx
c0011c1a:	50                   	push   eax
c0011c1b:	68 6a 0e 02 c0       	push   0xc0020e6a
c0011c20:	e8 c5 8d ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0011c25:	83 c4 10             	add    esp,0x10
c0011c28:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011c2d:	31 d2                	xor    edx,edx
c0011c2f:	83 c4 08             	add    esp,0x8
c0011c32:	5b                   	pop    ebx
c0011c33:	c3                   	ret    

c0011c34 <KeSwitchEndian16(unsigned short)>:
c0011c34:	83 ec 04             	sub    esp,0x4
c0011c37:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c3b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0011c3f:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011c43:	c1 f8 08             	sar    eax,0x8
c0011c46:	89 c2                	mov    edx,eax
c0011c48:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011c4c:	c1 e0 08             	shl    eax,0x8
c0011c4f:	09 d0                	or     eax,edx
c0011c51:	83 c4 04             	add    esp,0x4
c0011c54:	c3                   	ret    
c0011c55:	8d 76 00             	lea    esi,[esi+0x0]

c0011c58 <KeSwitchEndian32(unsigned int)>:
c0011c58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c5c:	c1 e8 18             	shr    eax,0x18
c0011c5f:	89 c2                	mov    edx,eax
c0011c61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c65:	c1 e0 08             	shl    eax,0x8
c0011c68:	25 00 00 ff 00       	and    eax,0xff0000
c0011c6d:	09 c2                	or     edx,eax
c0011c6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c73:	c1 e8 08             	shr    eax,0x8
c0011c76:	25 00 ff 00 00       	and    eax,0xff00
c0011c7b:	09 c2                	or     edx,eax
c0011c7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c81:	c1 e0 18             	shl    eax,0x18
c0011c84:	09 d0                	or     eax,edx
c0011c86:	c3                   	ret    
c0011c87:	90                   	nop

c0011c88 <EthernetCRC32(unsigned char*, int)>:
c0011c88:	83 ec 10             	sub    esp,0x10
c0011c8b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011c90:	75 0a                	jne    c0011c9c <EthernetCRC32(unsigned char*, int)+0x14>
c0011c92:	b8 00 00 00 00       	mov    eax,0x0
c0011c97:	e9 8c 00 00 00       	jmp    c0011d28 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011c9c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011ca1:	7f 09                	jg     c0011cac <EthernetCRC32(unsigned char*, int)+0x24>
c0011ca3:	b8 00 00 00 00       	mov    eax,0x0
c0011ca8:	eb 7e                	jmp    c0011d28 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011caa:	66 90                	xchg   ax,ax
c0011cac:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0011cb4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011cbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011cc0:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0011cc4:	7d 5a                	jge    c0011d20 <EthernetCRC32(unsigned char*, int)+0x98>
c0011cc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011cca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011cce:	01 d0                	add    eax,edx
c0011cd0:	8a 00                	mov    al,BYTE PTR [eax]
c0011cd2:	0f b6 c0             	movzx  eax,al
c0011cd5:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0011cd9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011ce1:	8d 76 00             	lea    esi,[esi+0x0]
c0011ce4:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0011ce9:	7f 2d                	jg     c0011d18 <EthernetCRC32(unsigned char*, int)+0x90>
c0011ceb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cef:	83 e0 01             	and    eax,0x1
c0011cf2:	74 10                	je     c0011d04 <EthernetCRC32(unsigned char*, int)+0x7c>
c0011cf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cf8:	d1 e8                	shr    eax,1
c0011cfa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0011cff:	eb 0b                	jmp    c0011d0c <EthernetCRC32(unsigned char*, int)+0x84>
c0011d01:	8d 76 00             	lea    esi,[esi+0x0]
c0011d04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d08:	d1 e8                	shr    eax,1
c0011d0a:	66 90                	xchg   ax,ax
c0011d0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011d10:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0011d15:	eb cd                	jmp    c0011ce4 <EthernetCRC32(unsigned char*, int)+0x5c>
c0011d17:	90                   	nop
c0011d18:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0011d1d:	eb 9d                	jmp    c0011cbc <EthernetCRC32(unsigned char*, int)+0x34>
c0011d1f:	90                   	nop
c0011d20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d24:	f7 d0                	not    eax
c0011d26:	66 90                	xchg   ax,ax
c0011d28:	83 c4 10             	add    esp,0x10
c0011d2b:	c3                   	ret    

c0011d2c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0011d2c:	83 ec 2c             	sub    esp,0x2c
c0011d2f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d33:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011d38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d3c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011d40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d44:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011d47:	0f b7 c0             	movzx  eax,ax
c0011d4a:	3d 06 08 00 00       	cmp    eax,0x806
c0011d4f:	75 13                	jne    c0011d64 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0011d51:	83 ec 0c             	sub    esp,0xc
c0011d54:	68 7e 0e 02 c0       	push   0xc0020e7e
c0011d59:	e8 8c 8c ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0011d5e:	83 c4 10             	add    esp,0x10
c0011d61:	eb 25                	jmp    c0011d88 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011d63:	90                   	nop
c0011d64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d68:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011d6b:	0f b7 c0             	movzx  eax,ax
c0011d6e:	3d 00 08 00 00       	cmp    eax,0x800
c0011d73:	75 13                	jne    c0011d88 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011d75:	83 ec 0c             	sub    esp,0xc
c0011d78:	68 94 0e 02 c0       	push   0xc0020e94
c0011d7d:	e8 68 8c ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0011d82:	83 c4 10             	add    esp,0x10
c0011d85:	8d 76 00             	lea    esi,[esi+0x0]
c0011d88:	90                   	nop
c0011d89:	83 c4 2c             	add    esp,0x2c
c0011d8c:	c3                   	ret    

c0011d8d <CmOpen(char const*)>:
c0011d8d:	57                   	push   edi
c0011d8e:	56                   	push   esi
c0011d8f:	53                   	push   ebx
c0011d90:	83 ec 1c             	sub    esp,0x1c
c0011d93:	6a 30                	push   0x30
c0011d95:	e8 14 5d ff ff       	call   c0007aae <malloc>
c0011d9a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011da1:	89 c3                	mov    ebx,eax
c0011da3:	e8 06 5d ff ff       	call   c0007aae <malloc>
c0011da8:	83 c4 0c             	add    esp,0xc
c0011dab:	89 c6                	mov    esi,eax
c0011dad:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0011db3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011db7:	50                   	push   eax
c0011db8:	e8 af 91 ff ff       	call   c000af6c <File::File(char const*, Process*)>
c0011dbd:	83 c4 0c             	add    esp,0xc
c0011dc0:	89 33                	mov    DWORD PTR [ebx],esi
c0011dc2:	8d 44 24 07          	lea    eax,[esp+0x7]
c0011dc6:	50                   	push   eax
c0011dc7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011dcb:	50                   	push   eax
c0011dcc:	56                   	push   esi
c0011dcd:	e8 02 95 ff ff       	call   c000b2d4 <File::stat(unsigned long long*, bool*)>
c0011dd2:	5a                   	pop    edx
c0011dd3:	59                   	pop    ecx
c0011dd4:	6a 01                	push   0x1
c0011dd6:	ff 33                	push   DWORD PTR [ebx]
c0011dd8:	e8 4b 92 ff ff       	call   c000b028 <File::open(FileOpenMode)>
c0011ddd:	5e                   	pop    esi
c0011dde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011de2:	e8 c7 5c ff ff       	call   c0007aae <malloc>
c0011de7:	5a                   	pop    edx
c0011de8:	89 c7                	mov    edi,eax
c0011dea:	8d 74 24 10          	lea    esi,[esp+0x10]
c0011dee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011df0:	8b 10                	mov    edx,DWORD PTR [eax]
c0011df2:	56                   	push   esi
c0011df3:	57                   	push   edi
c0011df4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011df8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011dfc:	50                   	push   eax
c0011dfd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e00:	83 c4 14             	add    esp,0x14
c0011e03:	ff 33                	push   DWORD PTR [ebx]
c0011e05:	e8 7c 92 ff ff       	call   c000b086 <File::close()>
c0011e0a:	59                   	pop    ecx
c0011e0b:	58                   	pop    eax
c0011e0c:	6a 13                	push   0x13
c0011e0e:	ff 33                	push   DWORD PTR [ebx]
c0011e10:	e8 13 92 ff ff       	call   c000b028 <File::open(FileOpenMode)>
c0011e15:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e17:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e19:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e1c:	57                   	push   edi
c0011e1d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011e21:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011e25:	50                   	push   eax
c0011e26:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011e29:	83 c4 14             	add    esp,0x14
c0011e2c:	57                   	push   edi
c0011e2d:	e8 8c 5c ff ff       	call   c0007abe <free>
c0011e32:	83 c4 10             	add    esp,0x10
c0011e35:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0011e38:	75 10                	jne    c0011e4a <CmOpen(char const*)+0xbd>
c0011e3a:	83 ec 0c             	sub    esp,0xc
c0011e3d:	68 a9 0e 02 c0       	push   0xc0020ea9
c0011e42:	e8 d0 ea ff ff       	call   c0010917 <KePanic(char const*)>
c0011e47:	83 c4 10             	add    esp,0x10
c0011e4a:	8d 7b 05             	lea    edi,[ebx+0x5]
c0011e4d:	50                   	push   eax
c0011e4e:	6a 00                	push   0x0
c0011e50:	6a 00                	push   0x0
c0011e52:	ff 33                	push   DWORD PTR [ebx]
c0011e54:	e8 8d 92 ff ff       	call   c000b0e6 <File::seek(unsigned long long)>
c0011e59:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e5b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e5d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e60:	57                   	push   edi
c0011e61:	6a 00                	push   0x0
c0011e63:	6a 2b                	push   0x2b
c0011e65:	50                   	push   eax
c0011e66:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e69:	83 c4 1c             	add    esp,0x1c
c0011e6c:	6a 00                	push   0x0
c0011e6e:	6a 00                	push   0x0
c0011e70:	ff 33                	push   DWORD PTR [ebx]
c0011e72:	e8 6f 92 ff ff       	call   c000b0e6 <File::seek(unsigned long long)>
c0011e77:	83 c4 0c             	add    esp,0xc
c0011e7a:	6a 08                	push   0x8
c0011e7c:	68 ba 0e 02 c0       	push   0xc0020eba
c0011e81:	57                   	push   edi
c0011e82:	e8 f9 e4 fe ff       	call   c0000380 <memcmp>
c0011e87:	83 c4 10             	add    esp,0x10
c0011e8a:	85 c0                	test   eax,eax
c0011e8c:	74 10                	je     c0011e9e <CmOpen(char const*)+0x111>
c0011e8e:	83 ec 0c             	sub    esp,0xc
c0011e91:	68 c3 0e 02 c0       	push   0xc0020ec3
c0011e96:	e8 7c ea ff ff       	call   c0010917 <KePanic(char const*)>
c0011e9b:	83 c4 10             	add    esp,0x10
c0011e9e:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0011ea2:	89 d8                	mov    eax,ebx
c0011ea4:	83 c4 10             	add    esp,0x10
c0011ea7:	5b                   	pop    ebx
c0011ea8:	5e                   	pop    esi
c0011ea9:	5f                   	pop    edi
c0011eaa:	c3                   	ret    

c0011eab <CmClose(Reghive_Tag*)>:
c0011eab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011eaf:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011eb3:	74 0b                	je     c0011ec0 <CmClose(Reghive_Tag*)+0x15>
c0011eb5:	8b 00                	mov    eax,DWORD PTR [eax]
c0011eb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ebb:	e9 c6 91 ff ff       	jmp    c000b086 <File::close()>
c0011ec0:	c3                   	ret    

c0011ec1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0011ec1:	53                   	push   ebx
c0011ec2:	83 ec 18             	sub    esp,0x18
c0011ec5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ec9:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011ecd:	74 29                	je     c0011ef8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011ecf:	50                   	push   eax
c0011ed0:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011ed5:	99                   	cdq    
c0011ed6:	52                   	push   edx
c0011ed7:	50                   	push   eax
c0011ed8:	ff 33                	push   DWORD PTR [ebx]
c0011eda:	e8 07 92 ff ff       	call   c000b0e6 <File::seek(unsigned long long)>
c0011edf:	5a                   	pop    edx
c0011ee0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ee2:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011ee6:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ee8:	51                   	push   ecx
c0011ee9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011eed:	6a 00                	push   0x0
c0011eef:	6a 2b                	push   0x2b
c0011ef1:	50                   	push   eax
c0011ef2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011ef5:	83 c4 20             	add    esp,0x20
c0011ef8:	83 c4 18             	add    esp,0x18
c0011efb:	5b                   	pop    ebx
c0011efc:	c3                   	ret    

c0011efd <CmGetString(Reghive_Tag*, int, char*)>:
c0011efd:	55                   	push   ebp
c0011efe:	57                   	push   edi
c0011eff:	56                   	push   esi
c0011f00:	53                   	push   ebx
c0011f01:	31 db                	xor    ebx,ebx
c0011f03:	83 ec 70             	sub    esp,0x70
c0011f06:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0011f0d:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0011f11:	50                   	push   eax
c0011f12:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0011f19:	55                   	push   ebp
c0011f1a:	e8 a2 ff ff ff       	call   c0011ec1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f1f:	83 c4 10             	add    esp,0x10
c0011f22:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0011f27:	c1 e0 08             	shl    eax,0x8
c0011f2a:	89 c2                	mov    edx,eax
c0011f2c:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0011f31:	09 d0                	or     eax,edx
c0011f33:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0011f38:	c1 e0 08             	shl    eax,0x8
c0011f3b:	09 d0                	or     eax,edx
c0011f3d:	74 25                	je     c0011f64 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0011f3f:	6b fb 0d             	imul   edi,ebx,0xd
c0011f42:	52                   	push   edx
c0011f43:	8d 54 24 39          	lea    edx,[esp+0x39]
c0011f47:	52                   	push   edx
c0011f48:	50                   	push   eax
c0011f49:	55                   	push   ebp
c0011f4a:	e8 72 ff ff ff       	call   c0011ec1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f4f:	8d 74 24 49          	lea    esi,[esp+0x49]
c0011f53:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0011f5a:	b9 27 00 00 00       	mov    ecx,0x27
c0011f5f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011f61:	83 c4 10             	add    esp,0x10
c0011f64:	83 c3 03             	add    ebx,0x3
c0011f67:	83 fb 15             	cmp    ebx,0x15
c0011f6a:	75 b6                	jne    c0011f22 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0011f6c:	83 c4 6c             	add    esp,0x6c
c0011f6f:	5b                   	pop    ebx
c0011f70:	5e                   	pop    esi
c0011f71:	5f                   	pop    edi
c0011f72:	5d                   	pop    ebp
c0011f73:	c3                   	ret    

c0011f74 <CmEnterDirectory(Reghive_Tag*, int)>:
c0011f74:	83 ec 40             	sub    esp,0x40
c0011f77:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011f7b:	50                   	push   eax
c0011f7c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f80:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f84:	e8 38 ff ff ff       	call   c0011ec1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f89:	83 c4 10             	add    esp,0x10
c0011f8c:	83 c8 ff             	or     eax,0xffffffff
c0011f8f:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0011f94:	75 19                	jne    c0011faf <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0011f96:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011f9b:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011fa0:	c1 e0 08             	shl    eax,0x8
c0011fa3:	09 c2                	or     edx,eax
c0011fa5:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0011faa:	c1 e0 10             	shl    eax,0x10
c0011fad:	09 d0                	or     eax,edx
c0011faf:	83 c4 3c             	add    esp,0x3c
c0011fb2:	c3                   	ret    

c0011fb3 <CmGetNext(Reghive_Tag*, int)>:
c0011fb3:	83 ec 40             	sub    esp,0x40
c0011fb6:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011fba:	50                   	push   eax
c0011fbb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011fbf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011fc3:	e8 f9 fe ff ff       	call   c0011ec1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011fc8:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0011fcd:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011fd2:	c1 e0 08             	shl    eax,0x8
c0011fd5:	09 c2                	or     edx,eax
c0011fd7:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0011fdc:	83 c4 4c             	add    esp,0x4c
c0011fdf:	c1 e0 10             	shl    eax,0x10
c0011fe2:	09 d0                	or     eax,edx
c0011fe4:	c3                   	ret    

c0011fe5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0011fe5:	53                   	push   ebx
c0011fe6:	83 ec 18             	sub    esp,0x18
c0011fe9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011fed:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011ff1:	74 29                	je     c001201c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011ff3:	50                   	push   eax
c0011ff4:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011ff9:	99                   	cdq    
c0011ffa:	52                   	push   edx
c0011ffb:	50                   	push   eax
c0011ffc:	ff 33                	push   DWORD PTR [ebx]
c0011ffe:	e8 e3 90 ff ff       	call   c000b0e6 <File::seek(unsigned long long)>
c0012003:	5a                   	pop    edx
c0012004:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012006:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001200a:	8b 10                	mov    edx,DWORD PTR [eax]
c001200c:	51                   	push   ecx
c001200d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012011:	6a 00                	push   0x0
c0012013:	6a 2b                	push   0x2b
c0012015:	50                   	push   eax
c0012016:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012019:	83 c4 20             	add    esp,0x20
c001201c:	83 c4 18             	add    esp,0x18
c001201f:	5b                   	pop    ebx
c0012020:	c3                   	ret    

c0012021 <CmFreeExtent(Reghive_Tag*, int)>:
c0012021:	53                   	push   ebx
c0012022:	83 ec 3c             	sub    esp,0x3c
c0012025:	6a 2b                	push   0x2b
c0012027:	6a 00                	push   0x0
c0012029:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001202d:	53                   	push   ebx
c001202e:	e8 bd e4 fe ff       	call   c00004f0 <memset>
c0012033:	83 c4 0c             	add    esp,0xc
c0012036:	53                   	push   ebx
c0012037:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001203b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001203f:	e8 a1 ff ff ff       	call   c0011fe5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012044:	83 c4 48             	add    esp,0x48
c0012047:	5b                   	pop    ebx
c0012048:	c3                   	ret    

c0012049 <CmUpdateHeader(Reghive_Tag*)>:
c0012049:	83 ec 0c             	sub    esp,0xc
c001204c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012050:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012054:	74 10                	je     c0012066 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012056:	52                   	push   edx
c0012057:	8d 50 05             	lea    edx,[eax+0x5]
c001205a:	52                   	push   edx
c001205b:	6a 00                	push   0x0
c001205d:	50                   	push   eax
c001205e:	e8 82 ff ff ff       	call   c0011fe5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012063:	83 c4 10             	add    esp,0x10
c0012066:	83 c4 0c             	add    esp,0xc
c0012069:	c3                   	ret    

c001206a <CmExpand(Reghive_Tag*, int)>:
c001206a:	57                   	push   edi
c001206b:	56                   	push   esi
c001206c:	83 ce ff             	or     esi,0xffffffff
c001206f:	53                   	push   ebx
c0012070:	83 ec 30             	sub    esp,0x30
c0012073:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012077:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c001207b:	74 5f                	je     c00120dc <CmExpand(Reghive_Tag*, int)+0x72>
c001207d:	31 d2                	xor    edx,edx
c001207f:	31 f6                	xor    esi,esi
c0012081:	50                   	push   eax
c0012082:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012086:	52                   	push   edx
c0012087:	50                   	push   eax
c0012088:	ff 33                	push   DWORD PTR [ebx]
c001208a:	e8 57 90 ff ff       	call   c000b0e6 <File::seek(unsigned long long)>
c001208f:	83 c4 0c             	add    esp,0xc
c0012092:	6a 2b                	push   0x2b
c0012094:	6a 00                	push   0x0
c0012096:	8d 7c 24 11          	lea    edi,[esp+0x11]
c001209a:	57                   	push   edi
c001209b:	e8 50 e4 fe ff       	call   c00004f0 <memset>
c00120a0:	83 c4 10             	add    esp,0x10
c00120a3:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00120a7:	7d 1b                	jge    c00120c4 <CmExpand(Reghive_Tag*, int)+0x5a>
c00120a9:	83 ec 0c             	sub    esp,0xc
c00120ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120ae:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c00120b2:	8b 10                	mov    edx,DWORD PTR [eax]
c00120b4:	46                   	inc    esi
c00120b5:	51                   	push   ecx
c00120b6:	57                   	push   edi
c00120b7:	6a 00                	push   0x0
c00120b9:	6a 2b                	push   0x2b
c00120bb:	50                   	push   eax
c00120bc:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00120bf:	83 c4 20             	add    esp,0x20
c00120c2:	eb df                	jmp    c00120a3 <CmExpand(Reghive_Tag*, int)+0x39>
c00120c4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00120c8:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c00120cb:	83 ec 0c             	sub    esp,0xc
c00120ce:	01 f2                	add    edx,esi
c00120d0:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c00120d3:	53                   	push   ebx
c00120d4:	e8 70 ff ff ff       	call   c0012049 <CmUpdateHeader(Reghive_Tag*)>
c00120d9:	83 c4 10             	add    esp,0x10
c00120dc:	83 c4 30             	add    esp,0x30
c00120df:	89 f0                	mov    eax,esi
c00120e1:	5b                   	pop    ebx
c00120e2:	5e                   	pop    esi
c00120e3:	5f                   	pop    edi
c00120e4:	c3                   	ret    

c00120e5 <CmFindUnusedExtent(Reghive_Tag*)>:
c00120e5:	55                   	push   ebp
c00120e6:	57                   	push   edi
c00120e7:	56                   	push   esi
c00120e8:	53                   	push   ebx
c00120e9:	83 cb ff             	or     ebx,0xffffffff
c00120ec:	83 ec 1c             	sub    esp,0x1c
c00120ef:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00120f3:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c00120f7:	74 68                	je     c0012161 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00120f9:	be 2b 00 00 00       	mov    esi,0x2b
c00120fe:	51                   	push   ecx
c00120ff:	31 ff                	xor    edi,edi
c0012101:	6a 00                	push   0x0
c0012103:	31 db                	xor    ebx,ebx
c0012105:	6a 00                	push   0x0
c0012107:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c001210a:	e8 d7 8f ff ff       	call   c000b0e6 <File::seek(unsigned long long)>
c001210f:	83 c4 10             	add    esp,0x10
c0012112:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012115:	76 3b                	jbe    c0012152 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012117:	83 ec 0c             	sub    esp,0xc
c001211a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001211d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012121:	8b 10                	mov    edx,DWORD PTR [eax]
c0012123:	51                   	push   ecx
c0012124:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012128:	51                   	push   ecx
c0012129:	6a 00                	push   0x0
c001212b:	6a 01                	push   0x1
c001212d:	50                   	push   eax
c001212e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012131:	83 c4 20             	add    esp,0x20
c0012134:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012139:	74 26                	je     c0012161 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c001213b:	43                   	inc    ebx
c001213c:	52                   	push   edx
c001213d:	57                   	push   edi
c001213e:	56                   	push   esi
c001213f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012142:	e8 9f 8f ff ff       	call   c000b0e6 <File::seek(unsigned long long)>
c0012147:	83 c6 2b             	add    esi,0x2b
c001214a:	83 d7 00             	adc    edi,0x0
c001214d:	83 c4 10             	add    esp,0x10
c0012150:	eb c0                	jmp    c0012112 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012152:	50                   	push   eax
c0012153:	50                   	push   eax
c0012154:	6a 40                	push   0x40
c0012156:	55                   	push   ebp
c0012157:	e8 0e ff ff ff       	call   c001206a <CmExpand(Reghive_Tag*, int)>
c001215c:	83 c4 10             	add    esp,0x10
c001215f:	89 c3                	mov    ebx,eax
c0012161:	83 c4 1c             	add    esp,0x1c
c0012164:	89 d8                	mov    eax,ebx
c0012166:	5b                   	pop    ebx
c0012167:	5e                   	pop    esi
c0012168:	5f                   	pop    edi
c0012169:	5d                   	pop    ebp
c001216a:	c3                   	ret    

c001216b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c001216b:	55                   	push   ebp
c001216c:	57                   	push   edi
c001216d:	56                   	push   esi
c001216e:	53                   	push   ebx
c001216f:	81 ec 88 00 00 00    	sub    esp,0x88
c0012175:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c001217c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012183:	e8 5d ff ff ff       	call   c00120e5 <CmFindUnusedExtent(Reghive_Tag*)>
c0012188:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001218c:	83 c4 0c             	add    esp,0xc
c001218f:	6a 2b                	push   0x2b
c0012191:	6a 00                	push   0x0
c0012193:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012197:	55                   	push   ebp
c0012198:	e8 53 e3 fe ff       	call   c00004f0 <memset>
c001219d:	83 c4 10             	add    esp,0x10
c00121a0:	85 db                	test   ebx,ebx
c00121a2:	74 12                	je     c00121b6 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00121a4:	51                   	push   ecx
c00121a5:	55                   	push   ebp
c00121a6:	53                   	push   ebx
c00121a7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00121ae:	e8 0e fd ff ff       	call   c0011ec1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00121b3:	83 c4 10             	add    esp,0x10
c00121b6:	8d 7c 24 45          	lea    edi,[esp+0x45]
c00121ba:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00121c1:	b9 2b 00 00 00       	mov    ecx,0x2b
c00121c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00121c8:	85 db                	test   ebx,ebx
c00121ca:	74 49                	je     c0012215 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c00121cc:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c00121d1:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00121d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00121da:	c1 e0 08             	shl    eax,0x8
c00121dd:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00121e3:	09 c8                	or     eax,ecx
c00121e5:	74 11                	je     c00121f8 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c00121e7:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00121eb:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c00121ef:	c1 e8 10             	shr    eax,0x10
c00121f2:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00121f6:	eb 0f                	jmp    c0012207 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c00121f8:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00121fd:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012202:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012207:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c001220b:	c1 ea 08             	shr    edx,0x8
c001220e:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012213:	eb 0f                	jmp    c0012224 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012215:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c001221a:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001221f:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012224:	52                   	push   edx
c0012225:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012229:	50                   	push   eax
c001222a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001222e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012235:	e8 ab fd ff ff       	call   c0011fe5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001223a:	83 c4 10             	add    esp,0x10
c001223d:	85 db                	test   ebx,ebx
c001223f:	74 12                	je     c0012253 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012241:	50                   	push   eax
c0012242:	55                   	push   ebp
c0012243:	53                   	push   ebx
c0012244:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001224b:	e8 95 fd ff ff       	call   c0011fe5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012250:	83 c4 10             	add    esp,0x10
c0012253:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012257:	83 c4 7c             	add    esp,0x7c
c001225a:	5b                   	pop    ebx
c001225b:	5e                   	pop    esi
c001225c:	5f                   	pop    edi
c001225d:	5d                   	pop    ebp
c001225e:	c3                   	ret    

c001225f <CmSetString(Reghive_Tag*, int, char const*)>:
c001225f:	55                   	push   ebp
c0012260:	57                   	push   edi
c0012261:	56                   	push   esi
c0012262:	53                   	push   ebx
c0012263:	bb 27 00 00 00       	mov    ebx,0x27
c0012268:	81 ec 88 00 00 00    	sub    esp,0x88
c001226e:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012275:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c001227c:	e8 ef e2 fe ff       	call   c0000570 <strlen>
c0012281:	8d 48 26             	lea    ecx,[eax+0x26]
c0012284:	89 c8                	mov    eax,ecx
c0012286:	99                   	cdq    
c0012287:	f7 fb                	idiv   ebx
c0012289:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001228d:	83 c4 10             	add    esp,0x10
c0012290:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012296:	7e 10                	jle    c00122a8 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012298:	83 ec 0c             	sub    esp,0xc
c001229b:	68 d4 0e 02 c0       	push   0xc0020ed4
c00122a0:	e8 72 e6 ff ff       	call   c0010917 <KePanic(char const*)>
c00122a5:	83 c4 10             	add    esp,0x10
c00122a8:	31 ff                	xor    edi,edi
c00122aa:	50                   	push   eax
c00122ab:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00122af:	53                   	push   ebx
c00122b0:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00122b7:	56                   	push   esi
c00122b8:	e8 04 fc ff ff       	call   c0011ec1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00122bd:	83 c4 10             	add    esp,0x10
c00122c0:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c00122c4:	89 d0                	mov    eax,edx
c00122c6:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c00122ca:	c1 e0 08             	shl    eax,0x8
c00122cd:	09 c2                	or     edx,eax
c00122cf:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c00122d3:	c1 e2 08             	shl    edx,0x8
c00122d6:	09 c2                	or     edx,eax
c00122d8:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00122dc:	7e 76                	jle    c0012354 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c00122de:	85 d2                	test   edx,edx
c00122e0:	75 25                	jne    c0012307 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c00122e2:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c00122e7:	8d 44 24 45          	lea    eax,[esp+0x45]
c00122eb:	50                   	push   eax
c00122ec:	6a 00                	push   0x0
c00122ee:	6a 00                	push   0x0
c00122f0:	56                   	push   esi
c00122f1:	e8 75 fe ff ff       	call   c001216b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00122f6:	83 c4 10             	add    esp,0x10
c00122f9:	89 c2                	mov    edx,eax
c00122fb:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c00122fe:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012301:	c1 f8 10             	sar    eax,0x10
c0012304:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012307:	55                   	push   ebp
c0012308:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c001230c:	55                   	push   ebp
c001230d:	52                   	push   edx
c001230e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012312:	56                   	push   esi
c0012313:	e8 a9 fb ff ff       	call   c0011ec1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012318:	83 c4 0c             	add    esp,0xc
c001231b:	6a 27                	push   0x27
c001231d:	6a 00                	push   0x0
c001231f:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012323:	51                   	push   ecx
c0012324:	e8 c7 e1 fe ff       	call   c00004f0 <memset>
c0012329:	83 c4 0c             	add    esp,0xc
c001232c:	6b c7 27             	imul   eax,edi,0x27
c001232f:	6a 27                	push   0x27
c0012331:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012338:	50                   	push   eax
c0012339:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c001233d:	51                   	push   ecx
c001233e:	e8 3d e3 fe ff       	call   c0000680 <strncpy>
c0012343:	83 c4 0c             	add    esp,0xc
c0012346:	55                   	push   ebp
c0012347:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001234b:	52                   	push   edx
c001234c:	56                   	push   esi
c001234d:	e8 93 fc ff ff       	call   c0011fe5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012352:	eb 19                	jmp    c001236d <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0012354:	85 d2                	test   edx,edx
c0012356:	74 18                	je     c0012370 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0012358:	51                   	push   ecx
c0012359:	51                   	push   ecx
c001235a:	52                   	push   edx
c001235b:	56                   	push   esi
c001235c:	e8 c0 fc ff ff       	call   c0012021 <CmFreeExtent(Reghive_Tag*, int)>
c0012361:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012365:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012369:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001236d:	83 c4 10             	add    esp,0x10
c0012370:	47                   	inc    edi
c0012371:	83 c3 03             	add    ebx,0x3
c0012374:	83 ff 07             	cmp    edi,0x7
c0012377:	0f 85 43 ff ff ff    	jne    c00122c0 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c001237d:	50                   	push   eax
c001237e:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012382:	50                   	push   eax
c0012383:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001238a:	56                   	push   esi
c001238b:	e8 55 fc ff ff       	call   c0011fe5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012390:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012396:	5b                   	pop    ebx
c0012397:	5e                   	pop    esi
c0012398:	5f                   	pop    edi
c0012399:	5d                   	pop    ebp
c001239a:	c3                   	ret    

c001239b <CmGetMatch(char*, char*, bool, bool*)>:
c001239b:	56                   	push   esi
c001239c:	53                   	push   ebx
c001239d:	50                   	push   eax
c001239e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00123a2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00123a7:	74 25                	je     c00123ce <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00123a9:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00123ac:	31 db                	xor    ebx,ebx
c00123ae:	50                   	push   eax
c00123af:	50                   	push   eax
c00123b0:	8d 04 9d 20 23 02 c0 	lea    eax,[ebx*4-0x3ffddce0]
c00123b7:	50                   	push   eax
c00123b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00123bc:	e8 8f e3 fe ff       	call   c0000750 <strcmp>
c00123c1:	83 c4 10             	add    esp,0x10
c00123c4:	85 c0                	test   eax,eax
c00123c6:	74 2e                	je     c00123f6 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00123c8:	43                   	inc    ebx
c00123c9:	83 fb 3f             	cmp    ebx,0x3f
c00123cc:	75 e0                	jne    c00123ae <CmGetMatch(char*, char*, bool, bool*)+0x13>
c00123ce:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00123d1:	31 db                	xor    ebx,ebx
c00123d3:	8d 04 9d 20 23 02 c0 	lea    eax,[ebx*4-0x3ffddce0]
c00123da:	51                   	push   ecx
c00123db:	51                   	push   ecx
c00123dc:	50                   	push   eax
c00123dd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00123e1:	e8 6a e3 fe ff       	call   c0000750 <strcmp>
c00123e6:	83 c4 10             	add    esp,0x10
c00123e9:	85 c0                	test   eax,eax
c00123eb:	74 09                	je     c00123f6 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00123ed:	43                   	inc    ebx
c00123ee:	83 fb 3f             	cmp    ebx,0x3f
c00123f1:	75 e0                	jne    c00123d3 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c00123f3:	83 cb ff             	or     ebx,0xffffffff
c00123f6:	89 d8                	mov    eax,ebx
c00123f8:	5a                   	pop    edx
c00123f9:	5b                   	pop    ebx
c00123fa:	5e                   	pop    esi
c00123fb:	c3                   	ret    

c00123fc <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c00123fc:	55                   	push   ebp
c00123fd:	31 c0                	xor    eax,eax
c00123ff:	57                   	push   edi
c0012400:	56                   	push   esi
c0012401:	53                   	push   ebx
c0012402:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012406:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001240a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001240c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012410:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012413:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012417:	83 fd 1f             	cmp    ebp,0x1f
c001241a:	7f 0b                	jg     c0012427 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c001241c:	0f b6 c2             	movzx  eax,dl
c001241f:	d3 e0                	shl    eax,cl
c0012421:	09 07                	or     DWORD PTR [edi],eax
c0012423:	b0 01                	mov    al,0x1
c0012425:	01 33                	add    DWORD PTR [ebx],esi
c0012427:	5b                   	pop    ebx
c0012428:	5e                   	pop    esi
c0012429:	5f                   	pop    edi
c001242a:	5d                   	pop    ebp
c001242b:	c3                   	ret    

c001242c <CmGetShift(unsigned int*, int*, int, bool*)>:
c001242c:	57                   	push   edi
c001242d:	56                   	push   esi
c001242e:	53                   	push   ebx
c001242f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012433:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012437:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001243b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001243f:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012441:	7c 17                	jl     c001245a <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012443:	8b 17                	mov    edx,DWORD PTR [edi]
c0012445:	b8 01 00 00 00       	mov    eax,0x1
c001244a:	d3 e0                	shl    eax,cl
c001244c:	48                   	dec    eax
c001244d:	21 d0                	and    eax,edx
c001244f:	d3 ea                	shr    edx,cl
c0012451:	89 17                	mov    DWORD PTR [edi],edx
c0012453:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012455:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012458:	eb 05                	jmp    c001245f <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c001245a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001245d:	31 c0                	xor    eax,eax
c001245f:	5b                   	pop    ebx
c0012460:	5e                   	pop    esi
c0012461:	5f                   	pop    edi
c0012462:	c3                   	ret    

c0012463 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012463:	83 ec 40             	sub    esp,0x40
c0012466:	8d 44 24 09          	lea    eax,[esp+0x9]
c001246a:	50                   	push   eax
c001246b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001246f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012473:	e8 49 fa ff ff       	call   c0011ec1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012478:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001247c:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012480:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012484:	89 10                	mov    DWORD PTR [eax],edx
c0012486:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012489:	83 c4 4c             	add    esp,0x4c
c001248c:	c3                   	ret    

c001248d <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c001248d:	55                   	push   ebp
c001248e:	57                   	push   edi
c001248f:	56                   	push   esi
c0012490:	53                   	push   ebx
c0012491:	83 ec 40             	sub    esp,0x40
c0012494:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012498:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c001249c:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00124a0:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00124a4:	53                   	push   ebx
c00124a5:	56                   	push   esi
c00124a6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00124aa:	e8 12 fa ff ff       	call   c0011ec1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00124af:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00124b3:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00124b7:	83 c4 0c             	add    esp,0xc
c00124ba:	53                   	push   ebx
c00124bb:	56                   	push   esi
c00124bc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00124c0:	e8 20 fb ff ff       	call   c0011fe5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00124c5:	83 c4 4c             	add    esp,0x4c
c00124c8:	5b                   	pop    ebx
c00124c9:	5e                   	pop    esi
c00124ca:	5f                   	pop    edi
c00124cb:	5d                   	pop    ebp
c00124cc:	c3                   	ret    

c00124cd <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c00124cd:	55                   	push   ebp
c00124ce:	57                   	push   edi
c00124cf:	56                   	push   esi
c00124d0:	31 f6                	xor    esi,esi
c00124d2:	53                   	push   ebx
c00124d3:	31 db                	xor    ebx,ebx
c00124d5:	83 ec 40             	sub    esp,0x40
c00124d8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00124e0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00124e8:	6a 12                	push   0x12
c00124ea:	68 ee 00 00 00       	push   0xee
c00124ef:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00124f3:	e8 f8 df fe ff       	call   c00004f0 <memset>
c00124f8:	83 c4 10             	add    esp,0x10
c00124fb:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00124ff:	6a 08                	push   0x8
c0012501:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012505:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012509:	50                   	push   eax
c001250a:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001250e:	55                   	push   ebp
c001250f:	57                   	push   edi
c0012510:	e8 e7 fe ff ff       	call   c00123fc <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012515:	83 c4 10             	add    esp,0x10
c0012518:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001251c:	50                   	push   eax
c001251d:	6a 06                	push   0x6
c001251f:	55                   	push   ebp
c0012520:	57                   	push   edi
c0012521:	e8 06 ff ff ff       	call   c001242c <CmGetShift(unsigned int*, int*, int, bool*)>
c0012526:	83 c4 10             	add    esp,0x10
c0012529:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001252e:	74 07                	je     c0012537 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012530:	46                   	inc    esi
c0012531:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012535:	eb e1                	jmp    c0012518 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0012537:	43                   	inc    ebx
c0012538:	83 fb 12             	cmp    ebx,0x12
c001253b:	75 c2                	jne    c00124ff <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c001253d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012541:	31 db                	xor    ebx,ebx
c0012543:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012546:	50                   	push   eax
c0012547:	50                   	push   eax
c0012548:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c001254d:	43                   	inc    ebx
c001254e:	8d 04 85 20 23 02 c0 	lea    eax,[eax*4-0x3ffddce0]
c0012555:	50                   	push   eax
c0012556:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001255a:	e8 e1 e2 fe ff       	call   c0000840 <strcat>
c001255f:	83 c4 10             	add    esp,0x10
c0012562:	83 fb 18             	cmp    ebx,0x18
c0012565:	75 df                	jne    c0012546 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0012567:	83 c4 3c             	add    esp,0x3c
c001256a:	31 c0                	xor    eax,eax
c001256c:	5b                   	pop    ebx
c001256d:	5e                   	pop    esi
c001256e:	5f                   	pop    edi
c001256f:	5d                   	pop    ebp
c0012570:	c3                   	ret    

c0012571 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012571:	83 ec 40             	sub    esp,0x40
c0012574:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012578:	50                   	push   eax
c0012579:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001257d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012581:	e8 3b f9 ff ff       	call   c0011ec1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012586:	58                   	pop    eax
c0012587:	5a                   	pop    edx
c0012588:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001258c:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012590:	50                   	push   eax
c0012591:	e8 37 ff ff ff       	call   c00124cd <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0012596:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c001259b:	83 c4 4c             	add    esp,0x4c
c001259e:	c3                   	ret    

c001259f <CmConvertToInternalFilename(char const*, unsigned char*)>:
c001259f:	55                   	push   ebp
c00125a0:	57                   	push   edi
c00125a1:	56                   	push   esi
c00125a2:	53                   	push   ebx
c00125a3:	31 db                	xor    ebx,ebx
c00125a5:	83 ec 70             	sub    esp,0x70
c00125a8:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00125af:	6a 30                	push   0x30
c00125b1:	6a 00                	push   0x0
c00125b3:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00125b7:	56                   	push   esi
c00125b8:	e8 33 df fe ff       	call   c00004f0 <memset>
c00125bd:	83 c4 10             	add    esp,0x10
c00125c0:	83 ec 0c             	sub    esp,0xc
c00125c3:	57                   	push   edi
c00125c4:	e8 a7 df fe ff       	call   c0000570 <strlen>
c00125c9:	83 c4 10             	add    esp,0x10
c00125cc:	39 d8                	cmp    eax,ebx
c00125ce:	76 16                	jbe    c00125e6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00125d0:	83 ec 0c             	sub    esp,0xc
c00125d3:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00125d7:	50                   	push   eax
c00125d8:	e8 53 e3 fe ff       	call   c0000930 <toupper>
c00125dd:	83 c4 10             	add    esp,0x10
c00125e0:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00125e3:	43                   	inc    ebx
c00125e4:	eb da                	jmp    c00125c0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00125e6:	31 f6                	xor    esi,esi
c00125e8:	52                   	push   edx
c00125e9:	31 ff                	xor    edi,edi
c00125eb:	6a 18                	push   0x18
c00125ed:	6a 3f                	push   0x3f
c00125ef:	8d 44 24 24          	lea    eax,[esp+0x24]
c00125f3:	50                   	push   eax
c00125f4:	e8 f7 de fe ff       	call   c00004f0 <memset>
c00125f9:	83 c4 10             	add    esp,0x10
c00125fc:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0012600:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0012604:	84 c0                	test   al,al
c0012606:	0f 84 b0 00 00 00    	je     c00126bc <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c001260c:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012610:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0012615:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0012619:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c001261e:	8d 6e 01             	lea    ebp,[esi+0x1]
c0012621:	83 ec 0c             	sub    esp,0xc
c0012624:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012628:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c001262c:	53                   	push   ebx
c001262d:	e8 3e df fe ff       	call   c0000570 <strlen>
c0012632:	83 c4 10             	add    esp,0x10
c0012635:	85 c0                	test   eax,eax
c0012637:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001263b:	74 0b                	je     c0012648 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c001263d:	50                   	push   eax
c001263e:	6a 01                	push   0x1
c0012640:	53                   	push   ebx
c0012641:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012645:	50                   	push   eax
c0012646:	eb 0a                	jmp    c0012652 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0012648:	50                   	push   eax
c0012649:	6a 00                	push   0x0
c001264b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001264f:	50                   	push   eax
c0012650:	6a 00                	push   0x0
c0012652:	e8 44 fd ff ff       	call   c001239b <CmGetMatch(char*, char*, bool, bool*)>
c0012657:	83 c4 10             	add    esp,0x10
c001265a:	83 f8 ff             	cmp    eax,0xffffffff
c001265d:	75 1a                	jne    c0012679 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c001265f:	83 ec 0c             	sub    esp,0xc
c0012662:	68 e9 0e 02 c0       	push   0xc0020ee9
c0012667:	e8 ab e2 ff ff       	call   c0010917 <KePanic(char const*)>
c001266c:	83 c4 10             	add    esp,0x10
c001266f:	b8 02 00 00 00       	mov    eax,0x2
c0012674:	e9 bc 00 00 00       	jmp    c0012735 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012679:	83 ff 18             	cmp    edi,0x18
c001267c:	75 1a                	jne    c0012698 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c001267e:	83 ec 0c             	sub    esp,0xc
c0012681:	68 fe 0e 02 c0       	push   0xc0020efe
c0012686:	e8 8c e2 ff ff       	call   c0010917 <KePanic(char const*)>
c001268b:	83 c4 10             	add    esp,0x10
c001268e:	b8 01 00 00 00       	mov    eax,0x1
c0012693:	e9 9d 00 00 00       	jmp    c0012735 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012698:	47                   	inc    edi
c0012699:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001269e:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00126a2:	74 02                	je     c00126a6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c00126a4:	89 ee                	mov    esi,ebp
c00126a6:	83 ec 0c             	sub    esp,0xc
c00126a9:	53                   	push   ebx
c00126aa:	e8 c1 de fe ff       	call   c0000570 <strlen>
c00126af:	83 c4 10             	add    esp,0x10
c00126b2:	85 c0                	test   eax,eax
c00126b4:	74 06                	je     c00126bc <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00126b6:	46                   	inc    esi
c00126b7:	e9 40 ff ff ff       	jmp    c00125fc <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00126bc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00126c4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00126cc:	31 f6                	xor    esi,esi
c00126ce:	50                   	push   eax
c00126cf:	31 ff                	xor    edi,edi
c00126d1:	6a 12                	push   0x12
c00126d3:	68 ee 00 00 00       	push   0xee
c00126d8:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00126df:	e8 0c de fe ff       	call   c00004f0 <memset>
c00126e4:	83 c4 10             	add    esp,0x10
c00126e7:	83 fe 17             	cmp    esi,0x17
c00126ea:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00126ee:	7e 26                	jle    c0012716 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c00126f0:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00126f4:	50                   	push   eax
c00126f5:	6a 08                	push   0x8
c00126f7:	55                   	push   ebp
c00126f8:	53                   	push   ebx
c00126f9:	e8 2e fd ff ff       	call   c001242c <CmGetShift(unsigned int*, int*, int, bool*)>
c00126fe:	83 c4 10             	add    esp,0x10
c0012701:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012706:	74 26                	je     c001272e <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0012708:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c001270f:	4e                   	dec    esi
c0012710:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0012713:	47                   	inc    edi
c0012714:	eb 1c                	jmp    c0012732 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0012716:	6a 06                	push   0x6
c0012718:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c001271d:	50                   	push   eax
c001271e:	55                   	push   ebp
c001271f:	53                   	push   ebx
c0012720:	e8 d7 fc ff ff       	call   c00123fc <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012725:	83 c4 10             	add    esp,0x10
c0012728:	84 c0                	test   al,al
c001272a:	75 06                	jne    c0012732 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c001272c:	eb c2                	jmp    c00126f0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c001272e:	31 c0                	xor    eax,eax
c0012730:	eb 03                	jmp    c0012735 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012732:	46                   	inc    esi
c0012733:	eb b2                	jmp    c00126e7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c0012735:	83 c4 6c             	add    esp,0x6c
c0012738:	5b                   	pop    ebx
c0012739:	5e                   	pop    esi
c001273a:	5f                   	pop    edi
c001273b:	5d                   	pop    ebp
c001273c:	c3                   	ret    

c001273d <CmCreateString(Reghive_Tag*, int, char const*)>:
c001273d:	53                   	push   ebx
c001273e:	83 ec 3c             	sub    esp,0x3c
c0012741:	6a 2b                	push   0x2b
c0012743:	6a 00                	push   0x0
c0012745:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012749:	53                   	push   ebx
c001274a:	e8 a1 dd fe ff       	call   c00004f0 <memset>
c001274f:	58                   	pop    eax
c0012750:	5a                   	pop    edx
c0012751:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012755:	50                   	push   eax
c0012756:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001275a:	e8 40 fe ff ff       	call   c001259f <CmConvertToInternalFilename(char const*, unsigned char*)>
c001275f:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0012764:	83 c4 0c             	add    esp,0xc
c0012767:	6a 15                	push   0x15
c0012769:	6a 00                	push   0x0
c001276b:	8d 44 24 27          	lea    eax,[esp+0x27]
c001276f:	50                   	push   eax
c0012770:	e8 7b dd fe ff       	call   c00004f0 <memset>
c0012775:	53                   	push   ebx
c0012776:	6a 00                	push   0x0
c0012778:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001277c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012780:	e8 e6 f9 ff ff       	call   c001216b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012785:	83 c4 58             	add    esp,0x58
c0012788:	5b                   	pop    ebx
c0012789:	c3                   	ret    

c001278a <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c001278a:	56                   	push   esi
c001278b:	53                   	push   ebx
c001278c:	83 ec 48             	sub    esp,0x48
c001278f:	6a 12                	push   0x12
c0012791:	68 ff 00 00 00       	push   0xff
c0012796:	8d 74 24 0f          	lea    esi,[esp+0xf]
c001279a:	56                   	push   esi
c001279b:	e8 50 dd fe ff       	call   c00004f0 <memset>
c00127a0:	5a                   	pop    edx
c00127a1:	59                   	pop    ecx
c00127a2:	56                   	push   esi
c00127a3:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00127a7:	e8 f3 fd ff ff       	call   c001259f <CmConvertToInternalFilename(char const*, unsigned char*)>
c00127ac:	83 c4 10             	add    esp,0x10
c00127af:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00127b3:	85 db                	test   ebx,ebx
c00127b5:	74 42                	je     c00127f9 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00127b7:	50                   	push   eax
c00127b8:	8d 44 24 19          	lea    eax,[esp+0x19]
c00127bc:	50                   	push   eax
c00127bd:	53                   	push   ebx
c00127be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00127c2:	e8 fa f6 ff ff       	call   c0011ec1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00127c7:	83 c4 0c             	add    esp,0xc
c00127ca:	6a 12                	push   0x12
c00127cc:	8d 44 24 21          	lea    eax,[esp+0x21]
c00127d0:	50                   	push   eax
c00127d1:	56                   	push   esi
c00127d2:	e8 a9 db fe ff       	call   c0000380 <memcmp>
c00127d7:	83 c4 10             	add    esp,0x10
c00127da:	85 c0                	test   eax,eax
c00127dc:	74 1e                	je     c00127fc <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00127de:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00127e3:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00127e8:	c1 e3 08             	shl    ebx,0x8
c00127eb:	09 d8                	or     eax,ebx
c00127ed:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00127f2:	c1 e3 10             	shl    ebx,0x10
c00127f5:	09 c3                	or     ebx,eax
c00127f7:	eb ba                	jmp    c00127b3 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00127f9:	83 cb ff             	or     ebx,0xffffffff
c00127fc:	89 d8                	mov    eax,ebx
c00127fe:	83 c4 44             	add    esp,0x44
c0012801:	5b                   	pop    ebx
c0012802:	5e                   	pop    esi
c0012803:	c3                   	ret    

c0012804 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0012804:	57                   	push   edi
c0012805:	56                   	push   esi
c0012806:	53                   	push   ebx
c0012807:	83 ec 34             	sub    esp,0x34
c001280a:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001280e:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0012812:	6a 2b                	push   0x2b
c0012814:	6a 00                	push   0x0
c0012816:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001281a:	53                   	push   ebx
c001281b:	e8 d0 dc fe ff       	call   c00004f0 <memset>
c0012820:	58                   	pop    eax
c0012821:	5a                   	pop    edx
c0012822:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012826:	50                   	push   eax
c0012827:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001282b:	e8 6f fd ff ff       	call   c001259f <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012830:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0012834:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0012838:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c001283c:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012840:	53                   	push   ebx
c0012841:	6a 00                	push   0x0
c0012843:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012847:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001284b:	e8 1b f9 ff ff       	call   c001216b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012850:	83 c4 50             	add    esp,0x50
c0012853:	5b                   	pop    ebx
c0012854:	5e                   	pop    esi
c0012855:	5f                   	pop    edi
c0012856:	c3                   	ret    

c0012857 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0012857:	55                   	push   ebp
c0012858:	57                   	push   edi
c0012859:	56                   	push   esi
c001285a:	53                   	push   ebx
c001285b:	83 ec 40             	sub    esp,0x40
c001285e:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0012862:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012866:	6a 2b                	push   0x2b
c0012868:	6a 00                	push   0x0
c001286a:	8d 74 24 11          	lea    esi,[esp+0x11]
c001286e:	56                   	push   esi
c001286f:	e8 7c dc fe ff       	call   c00004f0 <memset>
c0012874:	5f                   	pop    edi
c0012875:	89 ef                	mov    edi,ebp
c0012877:	58                   	pop    eax
c0012878:	8d 44 24 11          	lea    eax,[esp+0x11]
c001287c:	50                   	push   eax
c001287d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012881:	e8 19 fd ff ff       	call   c001259f <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012886:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c001288b:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0012890:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0012895:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c001289a:	83 c4 10             	add    esp,0x10
c001289d:	85 ed                	test   ebp,ebp
c001289f:	74 14                	je     c00128b5 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00128a1:	51                   	push   ecx
c00128a2:	51                   	push   ecx
c00128a3:	57                   	push   edi
c00128a4:	53                   	push   ebx
c00128a5:	e8 09 f7 ff ff       	call   c0011fb3 <CmGetNext(Reghive_Tag*, int)>
c00128aa:	83 c4 10             	add    esp,0x10
c00128ad:	85 c0                	test   eax,eax
c00128af:	74 04                	je     c00128b5 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00128b1:	89 c7                	mov    edi,eax
c00128b3:	eb e8                	jmp    c001289d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00128b5:	56                   	push   esi
c00128b6:	6a 00                	push   0x0
c00128b8:	57                   	push   edi
c00128b9:	53                   	push   ebx
c00128ba:	e8 ac f8 ff ff       	call   c001216b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00128bf:	83 c4 0c             	add    esp,0xc
c00128c2:	89 c7                	mov    edi,eax
c00128c4:	56                   	push   esi
c00128c5:	50                   	push   eax
c00128c6:	53                   	push   ebx
c00128c7:	e8 f5 f5 ff ff       	call   c0011ec1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00128cc:	58                   	pop    eax
c00128cd:	5a                   	pop    edx
c00128ce:	6a 6c                	push   0x6c
c00128d0:	6a 00                	push   0x0
c00128d2:	6a 00                	push   0x0
c00128d4:	68 0f 0f 02 c0       	push   0xc0020f0f
c00128d9:	57                   	push   edi
c00128da:	53                   	push   ebx
c00128db:	e8 24 ff ff ff       	call   c0012804 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00128e0:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00128e4:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00128e8:	c1 e8 10             	shr    eax,0x10
c00128eb:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00128ef:	83 c4 1c             	add    esp,0x1c
c00128f2:	56                   	push   esi
c00128f3:	57                   	push   edi
c00128f4:	53                   	push   ebx
c00128f5:	e8 eb f6 ff ff       	call   c0011fe5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00128fa:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00128ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0012904:	c1 e0 08             	shl    eax,0x8
c0012907:	09 c2                	or     edx,eax
c0012909:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001290e:	83 c4 4c             	add    esp,0x4c
c0012911:	c1 e0 10             	shl    eax,0x10
c0012914:	5b                   	pop    ebx
c0012915:	09 d0                	or     eax,edx
c0012917:	5e                   	pop    esi
c0012918:	5f                   	pop    edi
c0012919:	5d                   	pop    ebp
c001291a:	c3                   	ret    

c001291b <zStrtok(char*, char const*)>:
c001291b:	55                   	push   ebp
c001291c:	57                   	push   edi
c001291d:	56                   	push   esi
c001291e:	53                   	push   ebx
c001291f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012923:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012927:	85 db                	test   ebx,ebx
c0012929:	74 2f                	je     c001295a <zStrtok(char*, char const*)+0x3f>
c001292b:	85 c0                	test   eax,eax
c001292d:	75 09                	jne    c0012938 <zStrtok(char*, char const*)+0x1d>
c001292f:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0012934:	85 c0                	test   eax,eax
c0012936:	74 50                	je     c0012988 <zStrtok(char*, char const*)+0x6d>
c0012938:	31 c9                	xor    ecx,ecx
c001293a:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c001293e:	74 03                	je     c0012943 <zStrtok(char*, char const*)+0x28>
c0012940:	41                   	inc    ecx
c0012941:	eb f7                	jmp    c001293a <zStrtok(char*, char const*)+0x1f>
c0012943:	31 d2                	xor    edx,edx
c0012945:	39 ca                	cmp    edx,ecx
c0012947:	74 15                	je     c001295e <zStrtok(char*, char const*)+0x43>
c0012949:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c001294d:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0012950:	8d 3c 10             	lea    edi,[eax+edx*1]
c0012953:	39 ee                	cmp    esi,ebp
c0012955:	74 13                	je     c001296a <zStrtok(char*, char const*)+0x4f>
c0012957:	42                   	inc    edx
c0012958:	eb eb                	jmp    c0012945 <zStrtok(char*, char const*)+0x2a>
c001295a:	31 c0                	xor    eax,eax
c001295c:	eb 2a                	jmp    c0012988 <zStrtok(char*, char const*)+0x6d>
c001295e:	c7 05 90 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027990,0x0
c0012968:	eb 1e                	jmp    c0012988 <zStrtok(char*, char const*)+0x6d>
c001296a:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c001296d:	39 ce                	cmp    esi,ecx
c001296f:	75 0a                	jne    c001297b <zStrtok(char*, char const*)+0x60>
c0012971:	40                   	inc    eax
c0012972:	a3 90 79 02 c0       	mov    ds:0xc0027990,eax
c0012977:	89 d8                	mov    eax,ebx
c0012979:	eb 0d                	jmp    c0012988 <zStrtok(char*, char const*)+0x6d>
c001297b:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c001297f:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0012982:	89 15 90 79 02 c0    	mov    DWORD PTR ds:0xc0027990,edx
c0012988:	5b                   	pop    ebx
c0012989:	5e                   	pop    esi
c001298a:	5f                   	pop    edi
c001298b:	5d                   	pop    ebp
c001298c:	c3                   	ret    

c001298d <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c001298d:	57                   	push   edi
c001298e:	56                   	push   esi
c001298f:	53                   	push   ebx
c0012990:	81 ec 08 01 00 00    	sub    esp,0x108
c0012996:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c001299d:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00129a4:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00129a8:	53                   	push   ebx
c00129a9:	e8 92 dc fe ff       	call   c0000640 <strcpy>
c00129ae:	59                   	pop    ecx
c00129af:	5e                   	pop    esi
c00129b0:	68 73 12 02 c0       	push   0xc0021273
c00129b5:	53                   	push   ebx
c00129b6:	bb 01 00 00 00       	mov    ebx,0x1
c00129bb:	e8 5b ff ff ff       	call   c001291b <zStrtok(char*, char const*)>
c00129c0:	83 c4 10             	add    esp,0x10
c00129c3:	85 c0                	test   eax,eax
c00129c5:	74 3b                	je     c0012a02 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00129c7:	52                   	push   edx
c00129c8:	50                   	push   eax
c00129c9:	6a 01                	push   0x1
c00129cb:	57                   	push   edi
c00129cc:	e8 b9 fd ff ff       	call   c001278a <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00129d1:	59                   	pop    ecx
c00129d2:	89 c3                	mov    ebx,eax
c00129d4:	5e                   	pop    esi
c00129d5:	68 73 12 02 c0       	push   0xc0021273
c00129da:	6a 00                	push   0x0
c00129dc:	e8 3a ff ff ff       	call   c001291b <zStrtok(char*, char const*)>
c00129e1:	83 c4 10             	add    esp,0x10
c00129e4:	89 c6                	mov    esi,eax
c00129e6:	85 c0                	test   eax,eax
c00129e8:	74 18                	je     c0012a02 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00129ea:	52                   	push   edx
c00129eb:	52                   	push   edx
c00129ec:	53                   	push   ebx
c00129ed:	57                   	push   edi
c00129ee:	e8 81 f5 ff ff       	call   c0011f74 <CmEnterDirectory(Reghive_Tag*, int)>
c00129f3:	83 c4 10             	add    esp,0x10
c00129f6:	89 c3                	mov    ebx,eax
c00129f8:	83 f8 ff             	cmp    eax,0xffffffff
c00129fb:	74 05                	je     c0012a02 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00129fd:	50                   	push   eax
c00129fe:	56                   	push   esi
c00129ff:	53                   	push   ebx
c0012a00:	eb c9                	jmp    c00129cb <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0012a02:	81 c4 00 01 00 00    	add    esp,0x100
c0012a08:	89 d8                	mov    eax,ebx
c0012a0a:	5b                   	pop    ebx
c0012a0b:	5e                   	pop    esi
c0012a0c:	5f                   	pop    edi
c0012a0d:	c3                   	ret    

c0012a0e <CmDisplayTree(Reghive_Tag*, int, int)>:
c0012a0e:	55                   	push   ebp
c0012a0f:	57                   	push   edi
c0012a10:	56                   	push   esi
c0012a11:	53                   	push   ebx
c0012a12:	83 ec 5c             	sub    esp,0x5c
c0012a15:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0012a19:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0012a1d:	85 db                	test   ebx,ebx
c0012a1f:	0f 8e 84 00 00 00    	jle    c0012aa9 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0012a25:	31 ed                	xor    ebp,ebp
c0012a27:	57                   	push   edi
c0012a28:	6a 32                	push   0x32
c0012a2a:	6a 00                	push   0x0
c0012a2c:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0012a30:	57                   	push   edi
c0012a31:	e8 ba da fe ff       	call   c00004f0 <memset>
c0012a36:	83 c4 0c             	add    esp,0xc
c0012a39:	57                   	push   edi
c0012a3a:	53                   	push   ebx
c0012a3b:	56                   	push   esi
c0012a3c:	e8 30 fb ff ff       	call   c0012571 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012a41:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a45:	83 c4 10             	add    esp,0x10
c0012a48:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0012a4c:	7d 13                	jge    c0012a61 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0012a4e:	83 ec 0c             	sub    esp,0xc
c0012a51:	45                   	inc    ebp
c0012a52:	68 e4 15 02 c0       	push   0xc00215e4
c0012a57:	e8 8e 7f ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0012a5c:	83 c4 10             	add    esp,0x10
c0012a5f:	eb e7                	jmp    c0012a48 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0012a61:	51                   	push   ecx
c0012a62:	57                   	push   edi
c0012a63:	53                   	push   ebx
c0012a64:	68 15 0f 02 c0       	push   0xc0020f15
c0012a69:	e8 7c 7f ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0012a6e:	83 c4 10             	add    esp,0x10
c0012a71:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0012a76:	75 1e                	jne    c0012a96 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0012a78:	52                   	push   edx
c0012a79:	52                   	push   edx
c0012a7a:	53                   	push   ebx
c0012a7b:	56                   	push   esi
c0012a7c:	e8 f3 f4 ff ff       	call   c0011f74 <CmEnterDirectory(Reghive_Tag*, int)>
c0012a81:	83 c4 0c             	add    esp,0xc
c0012a84:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0012a88:	8d 51 04             	lea    edx,[ecx+0x4]
c0012a8b:	52                   	push   edx
c0012a8c:	50                   	push   eax
c0012a8d:	56                   	push   esi
c0012a8e:	e8 7b ff ff ff       	call   c0012a0e <CmDisplayTree(Reghive_Tag*, int, int)>
c0012a93:	83 c4 10             	add    esp,0x10
c0012a96:	50                   	push   eax
c0012a97:	50                   	push   eax
c0012a98:	53                   	push   ebx
c0012a99:	56                   	push   esi
c0012a9a:	e8 14 f5 ff ff       	call   c0011fb3 <CmGetNext(Reghive_Tag*, int)>
c0012a9f:	83 c4 10             	add    esp,0x10
c0012aa2:	89 c3                	mov    ebx,eax
c0012aa4:	e9 74 ff ff ff       	jmp    c0012a1d <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0012aa9:	83 c4 5c             	add    esp,0x5c
c0012aac:	5b                   	pop    ebx
c0012aad:	5e                   	pop    esi
c0012aae:	5f                   	pop    edi
c0012aaf:	5d                   	pop    ebp
c0012ab0:	c3                   	ret    

c0012ab1 <CmSplitFinalSlashInPlace(char*)>:
c0012ab1:	53                   	push   ebx
c0012ab2:	83 ec 14             	sub    esp,0x14
c0012ab5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012ab9:	53                   	push   ebx
c0012aba:	e8 b1 da fe ff       	call   c0000570 <strlen>
c0012abf:	83 c4 10             	add    esp,0x10
c0012ac2:	48                   	dec    eax
c0012ac3:	85 c0                	test   eax,eax
c0012ac5:	74 15                	je     c0012adc <CmSplitFinalSlashInPlace(char*)+0x2b>
c0012ac7:	8d 14 03             	lea    edx,[ebx+eax*1]
c0012aca:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012ace:	75 09                	jne    c0012ad9 <CmSplitFinalSlashInPlace(char*)+0x28>
c0012ad0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012ad3:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012ad7:	eb 05                	jmp    c0012ade <CmSplitFinalSlashInPlace(char*)+0x2d>
c0012ad9:	48                   	dec    eax
c0012ada:	eb e7                	jmp    c0012ac3 <CmSplitFinalSlashInPlace(char*)+0x12>
c0012adc:	31 c0                	xor    eax,eax
c0012ade:	83 c4 08             	add    esp,0x8
c0012ae1:	5b                   	pop    ebx
c0012ae2:	c3                   	ret    

c0012ae3 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0012ae3:	55                   	push   ebp
c0012ae4:	57                   	push   edi
c0012ae5:	56                   	push   esi
c0012ae6:	53                   	push   ebx
c0012ae7:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012aed:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0012af4:	8a 13                	mov    dl,BYTE PTR [ebx]
c0012af6:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012af9:	80 fa 40             	cmp    dl,0x40
c0012afc:	75 1c                	jne    c0012b1a <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0012afe:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0012b01:	85 c9                	test   ecx,ecx
c0012b03:	0f 84 09 01 00 00    	je     c0012c12 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012b09:	8d 43 01             	lea    eax,[ebx+0x1]
c0012b0c:	83 f9 3a             	cmp    ecx,0x3a
c0012b0f:	74 04                	je     c0012b15 <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0012b11:	89 c3                	mov    ebx,eax
c0012b13:	eb e9                	jmp    c0012afe <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0012b15:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012b18:	89 c3                	mov    ebx,eax
c0012b1a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0012b1e:	50                   	push   eax
c0012b1f:	6a 40                	push   0x40
c0012b21:	6a 00                	push   0x0
c0012b23:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012b27:	50                   	push   eax
c0012b28:	e8 c3 d9 fe ff       	call   c00004f0 <memset>
c0012b2d:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012b34:	31 c0                	xor    eax,eax
c0012b36:	83 c4 10             	add    esp,0x10
c0012b39:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0012b3e:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0012b41:	89 d1                	mov    ecx,edx
c0012b43:	85 d2                	test   edx,edx
c0012b45:	0f 84 c7 00 00 00    	je     c0012c12 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012b4b:	3d c7 00 00 00       	cmp    eax,0xc7
c0012b50:	0f 8f bc 00 00 00    	jg     c0012c12 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012b56:	83 fa 0a             	cmp    edx,0xa
c0012b59:	0f 85 a4 00 00 00    	jne    c0012c03 <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0012b5f:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0012b64:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0012b69:	89 c8                	mov    eax,ecx
c0012b6b:	a8 df                	test   al,0xdf
c0012b6d:	0f 94 c2             	sete   dl
c0012b70:	83 f9 23             	cmp    ecx,0x23
c0012b73:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012b78:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0012b7c:	80 e2 01             	and    dl,0x1
c0012b7f:	75 4a                	jne    c0012bcb <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012b81:	83 e8 09             	sub    eax,0x9
c0012b84:	3c 01                	cmp    al,0x1
c0012b86:	76 43                	jbe    c0012bcb <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012b88:	83 f9 5b             	cmp    ecx,0x5b
c0012b8b:	75 42                	jne    c0012bcf <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0012b8d:	83 fe 40             	cmp    esi,0x40
c0012b90:	75 39                	jne    c0012bcb <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012b92:	83 ec 0c             	sub    esp,0xc
c0012b95:	8d 54 24 65          	lea    edx,[esp+0x65]
c0012b99:	52                   	push   edx
c0012b9a:	e8 d1 d9 fe ff       	call   c0000570 <strlen>
c0012b9f:	83 c4 10             	add    esp,0x10
c0012ba2:	83 f8 3f             	cmp    eax,0x3f
c0012ba5:	77 6b                	ja     c0012c12 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012ba7:	50                   	push   eax
c0012ba8:	50                   	push   eax
c0012ba9:	8d 54 24 61          	lea    edx,[esp+0x61]
c0012bad:	52                   	push   edx
c0012bae:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012bb2:	52                   	push   edx
c0012bb3:	e8 88 da fe ff       	call   c0000640 <strcpy>
c0012bb8:	58                   	pop    eax
c0012bb9:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012bbd:	52                   	push   edx
c0012bbe:	e8 ad d9 fe ff       	call   c0000570 <strlen>
c0012bc3:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012bc8:	83 c4 10             	add    esp,0x10
c0012bcb:	31 d2                	xor    edx,edx
c0012bcd:	eb 3b                	jmp    c0012c0a <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0012bcf:	83 fe 40             	cmp    esi,0x40
c0012bd2:	74 06                	je     c0012bda <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0012bd4:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012bd8:	eb 20                	jmp    c0012bfa <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0012bda:	50                   	push   eax
c0012bdb:	50                   	push   eax
c0012bdc:	55                   	push   ebp
c0012bdd:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012be1:	50                   	push   eax
c0012be2:	e8 69 db fe ff       	call   c0000750 <strcmp>
c0012be7:	83 c4 10             	add    esp,0x10
c0012bea:	85 c0                	test   eax,eax
c0012bec:	75 dd                	jne    c0012bcb <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012bee:	eb e4                	jmp    c0012bd4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0012bf0:	8d 50 01             	lea    edx,[eax+0x1]
c0012bf3:	83 f9 3d             	cmp    ecx,0x3d
c0012bf6:	74 1e                	je     c0012c16 <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0012bf8:	89 d0                	mov    eax,edx
c0012bfa:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0012bfd:	85 c9                	test   ecx,ecx
c0012bff:	75 ef                	jne    c0012bf0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0012c01:	eb 0f                	jmp    c0012c12 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012c03:	8d 50 01             	lea    edx,[eax+0x1]
c0012c06:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0012c0a:	47                   	inc    edi
c0012c0b:	89 d0                	mov    eax,edx
c0012c0d:	e9 2c ff ff ff       	jmp    c0012b3e <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0012c12:	31 c0                	xor    eax,eax
c0012c14:	eb 33                	jmp    c0012c49 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0012c16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012c1a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012c1d:	50                   	push   eax
c0012c1e:	50                   	push   eax
c0012c1f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012c23:	50                   	push   eax
c0012c24:	53                   	push   ebx
c0012c25:	e8 26 db fe ff       	call   c0000750 <strcmp>
c0012c2a:	83 c4 10             	add    esp,0x10
c0012c2d:	85 c0                	test   eax,eax
c0012c2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012c33:	75 96                	jne    c0012bcb <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012c35:	51                   	push   ecx
c0012c36:	51                   	push   ecx
c0012c37:	52                   	push   edx
c0012c38:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012c3f:	e8 fc d9 fe ff       	call   c0000640 <strcpy>
c0012c44:	83 c4 10             	add    esp,0x10
c0012c47:	b0 01                	mov    al,0x1
c0012c49:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012c4f:	5b                   	pop    ebx
c0012c50:	5e                   	pop    esi
c0012c51:	5f                   	pop    edi
c0012c52:	5d                   	pop    ebp
c0012c53:	c3                   	ret    

c0012c54 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012c54:	57                   	push   edi
c0012c55:	56                   	push   esi
c0012c56:	53                   	push   ebx
c0012c57:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012c5d:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012c64:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012c6b:	53                   	push   ebx
c0012c6c:	e8 ff d8 fe ff       	call   c0000570 <strlen>
c0012c71:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c74:	89 c7                	mov    edi,eax
c0012c76:	e8 f5 d8 fe ff       	call   c0000570 <strlen>
c0012c7b:	83 c4 10             	add    esp,0x10
c0012c7e:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012c82:	3d ff 00 00 00       	cmp    eax,0xff
c0012c87:	0f 87 d3 00 00 00    	ja     c0012d60 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012c8d:	57                   	push   edi
c0012c8e:	57                   	push   edi
c0012c8f:	56                   	push   esi
c0012c90:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012c94:	56                   	push   esi
c0012c95:	e8 a6 d9 fe ff       	call   c0000640 <strcpy>
c0012c9a:	58                   	pop    eax
c0012c9b:	5a                   	pop    edx
c0012c9c:	68 73 12 02 c0       	push   0xc0021273
c0012ca1:	56                   	push   esi
c0012ca2:	e8 99 db fe ff       	call   c0000840 <strcat>
c0012ca7:	59                   	pop    ecx
c0012ca8:	5f                   	pop    edi
c0012ca9:	53                   	push   ebx
c0012caa:	56                   	push   esi
c0012cab:	e8 90 db fe ff       	call   c0000840 <strcat>
c0012cb0:	58                   	pop    eax
c0012cb1:	5a                   	pop    edx
c0012cb2:	68 1f 0f 02 c0       	push   0xc0020f1f
c0012cb7:	56                   	push   esi
c0012cb8:	e8 83 db fe ff       	call   c0000840 <strcat>
c0012cbd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012cc4:	e8 e5 4d ff ff       	call   c0007aae <malloc>
c0012cc9:	83 c4 0c             	add    esp,0xc
c0012ccc:	89 c3                	mov    ebx,eax
c0012cce:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0012cd4:	56                   	push   esi
c0012cd5:	50                   	push   eax
c0012cd6:	e8 91 82 ff ff       	call   c000af6c <File::File(char const*, Process*)>
c0012cdb:	83 c4 10             	add    esp,0x10
c0012cde:	85 db                	test   ebx,ebx
c0012ce0:	74 7e                	je     c0012d60 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012ce2:	51                   	push   ecx
c0012ce3:	51                   	push   ecx
c0012ce4:	6a 01                	push   0x1
c0012ce6:	53                   	push   ebx
c0012ce7:	e8 3c 83 ff ff       	call   c000b028 <File::open(FileOpenMode)>
c0012cec:	83 c4 10             	add    esp,0x10
c0012cef:	85 c0                	test   eax,eax
c0012cf1:	74 08                	je     c0012cfb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012cf3:	83 ec 0c             	sub    esp,0xc
c0012cf6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cf8:	53                   	push   ebx
c0012cf9:	eb 5f                	jmp    c0012d5a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012cfb:	52                   	push   edx
c0012cfc:	8d 44 24 17          	lea    eax,[esp+0x17]
c0012d00:	50                   	push   eax
c0012d01:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012d05:	50                   	push   eax
c0012d06:	53                   	push   ebx
c0012d07:	e8 c8 85 ff ff       	call   c000b2d4 <File::stat(unsigned long long*, bool*)>
c0012d0c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d10:	83 c4 10             	add    esp,0x10
c0012d13:	89 c1                	mov    ecx,eax
c0012d15:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0012d19:	74 31                	je     c0012d4c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012d1b:	83 ec 0c             	sub    esp,0xc
c0012d1e:	50                   	push   eax
c0012d1f:	e8 8a 4d ff ff       	call   c0007aae <malloc>
c0012d24:	89 c6                	mov    esi,eax
c0012d26:	58                   	pop    eax
c0012d27:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d29:	8d 54 24 20          	lea    edx,[esp+0x20]
c0012d2d:	52                   	push   edx
c0012d2e:	56                   	push   esi
c0012d2f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012d33:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012d37:	53                   	push   ebx
c0012d38:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012d3b:	83 c4 20             	add    esp,0x20
c0012d3e:	85 c0                	test   eax,eax
c0012d40:	75 0a                	jne    c0012d4c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012d42:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012d46:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012d4a:	74 18                	je     c0012d64 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012d4c:	83 ec 0c             	sub    esp,0xc
c0012d4f:	53                   	push   ebx
c0012d50:	e8 31 83 ff ff       	call   c000b086 <File::close()>
c0012d55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d57:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012d5a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012d5d:	83 c4 10             	add    esp,0x10
c0012d60:	31 c0                	xor    eax,eax
c0012d62:	eb 3b                	jmp    c0012d9f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0012d64:	83 ec 0c             	sub    esp,0xc
c0012d67:	53                   	push   ebx
c0012d68:	e8 19 83 ff ff       	call   c000b086 <File::close()>
c0012d6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d6f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012d72:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012d75:	83 c4 0c             	add    esp,0xc
c0012d78:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012d7f:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012d86:	56                   	push   esi
c0012d87:	e8 57 fd ff ff       	call   c0012ae3 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0012d8c:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d8f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012d93:	e8 26 4d ff ff       	call   c0007abe <free>
c0012d98:	83 c4 10             	add    esp,0x10
c0012d9b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012d9f:	81 c4 20 01 00 00    	add    esp,0x120
c0012da5:	5b                   	pop    ebx
c0012da6:	5e                   	pop    esi
c0012da7:	5f                   	pop    edi
c0012da8:	c3                   	ret    

c0012da9 <Reg::getLine(char*, char*, char*)>:
c0012da9:	57                   	push   edi
c0012daa:	56                   	push   esi
c0012dab:	53                   	push   ebx
c0012dac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012db0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012db4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012db8:	57                   	push   edi
c0012db9:	56                   	push   esi
c0012dba:	53                   	push   ebx
c0012dbb:	68 24 0f 02 c0       	push   0xc0020f24
c0012dc0:	e8 8f fe ff ff       	call   c0012c54 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012dc5:	83 c4 10             	add    esp,0x10
c0012dc8:	84 c0                	test   al,al
c0012dca:	75 10                	jne    c0012ddc <Reg::getLine(char*, char*, char*)+0x33>
c0012dcc:	57                   	push   edi
c0012dcd:	56                   	push   esi
c0012dce:	53                   	push   ebx
c0012dcf:	68 49 0f 02 c0       	push   0xc0020f49
c0012dd4:	e8 7b fe ff ff       	call   c0012c54 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012dd9:	83 c4 10             	add    esp,0x10
c0012ddc:	5b                   	pop    ebx
c0012ddd:	5e                   	pop    esi
c0012dde:	5f                   	pop    edi
c0012ddf:	c3                   	ret    

c0012de0 <Reg::readInt(char*, char*, int*)>:
c0012de0:	55                   	push   ebp
c0012de1:	57                   	push   edi
c0012de2:	56                   	push   esi
c0012de3:	53                   	push   ebx
c0012de4:	81 ec f0 00 00 00    	sub    esp,0xf0
c0012dea:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012dee:	55                   	push   ebp
c0012def:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012df6:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012dfd:	e8 a7 ff ff ff       	call   c0012da9 <Reg::getLine(char*, char*, char*)>
c0012e02:	83 c4 10             	add    esp,0x10
c0012e05:	84 c0                	test   al,al
c0012e07:	0f 84 b6 00 00 00    	je     c0012ec3 <Reg::readInt(char*, char*, int*)+0xe3>
c0012e0d:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0012e12:	83 fa 2b             	cmp    edx,0x2b
c0012e15:	74 0c                	je     c0012e23 <Reg::readInt(char*, char*, int*)+0x43>
c0012e17:	83 fa 2d             	cmp    edx,0x2d
c0012e1a:	75 0e                	jne    c0012e2a <Reg::readInt(char*, char*, int*)+0x4a>
c0012e1c:	ba 01 00 00 00       	mov    edx,0x1
c0012e21:	eb 0b                	jmp    c0012e2e <Reg::readInt(char*, char*, int*)+0x4e>
c0012e23:	ba 01 00 00 00       	mov    edx,0x1
c0012e28:	eb 02                	jmp    c0012e2c <Reg::readInt(char*, char*, int*)+0x4c>
c0012e2a:	31 d2                	xor    edx,edx
c0012e2c:	31 c0                	xor    eax,eax
c0012e2e:	be 0a 00 00 00       	mov    esi,0xa
c0012e33:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0012e38:	75 21                	jne    c0012e5b <Reg::readInt(char*, char*, int*)+0x7b>
c0012e3a:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0012e3f:	83 f9 78             	cmp    ecx,0x78
c0012e42:	75 0a                	jne    c0012e4e <Reg::readInt(char*, char*, int*)+0x6e>
c0012e44:	83 c2 02             	add    edx,0x2
c0012e47:	be 10 00 00 00       	mov    esi,0x10
c0012e4c:	eb 0d                	jmp    c0012e5b <Reg::readInt(char*, char*, int*)+0x7b>
c0012e4e:	83 f9 62             	cmp    ecx,0x62
c0012e51:	75 08                	jne    c0012e5b <Reg::readInt(char*, char*, int*)+0x7b>
c0012e53:	83 c2 02             	add    edx,0x2
c0012e56:	be 02 00 00 00       	mov    esi,0x2
c0012e5b:	01 d5                	add    ebp,edx
c0012e5d:	31 d2                	xor    edx,edx
c0012e5f:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0012e63:	83 f9 0d             	cmp    ecx,0xd
c0012e66:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0012e6a:	0f 94 c3             	sete   bl
c0012e6d:	85 c9                	test   ecx,ecx
c0012e6f:	89 df                	mov    edi,ebx
c0012e71:	0f 94 c3             	sete   bl
c0012e74:	09 df                	or     edi,ebx
c0012e76:	89 fb                	mov    ebx,edi
c0012e78:	83 e7 01             	and    edi,0x1
c0012e7b:	75 35                	jne    c0012eb2 <Reg::readInt(char*, char*, int*)+0xd2>
c0012e7d:	0f af d6             	imul   edx,esi
c0012e80:	83 fe 10             	cmp    esi,0x10
c0012e83:	75 26                	jne    c0012eab <Reg::readInt(char*, char*, int*)+0xcb>
c0012e85:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0012e89:	83 ef 41             	sub    edi,0x41
c0012e8c:	89 fb                	mov    ebx,edi
c0012e8e:	80 fb 05             	cmp    bl,0x5
c0012e91:	77 06                	ja     c0012e99 <Reg::readInt(char*, char*, int*)+0xb9>
c0012e93:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0012e97:	eb 16                	jmp    c0012eaf <Reg::readInt(char*, char*, int*)+0xcf>
c0012e99:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012e9d:	83 eb 61             	sub    ebx,0x61
c0012ea0:	80 fb 05             	cmp    bl,0x5
c0012ea3:	77 06                	ja     c0012eab <Reg::readInt(char*, char*, int*)+0xcb>
c0012ea5:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0012ea9:	eb 04                	jmp    c0012eaf <Reg::readInt(char*, char*, int*)+0xcf>
c0012eab:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0012eaf:	45                   	inc    ebp
c0012eb0:	eb ad                	jmp    c0012e5f <Reg::readInt(char*, char*, int*)+0x7f>
c0012eb2:	84 c0                	test   al,al
c0012eb4:	74 02                	je     c0012eb8 <Reg::readInt(char*, char*, int*)+0xd8>
c0012eb6:	f7 da                	neg    edx
c0012eb8:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0012ebf:	89 10                	mov    DWORD PTR [eax],edx
c0012ec1:	88 d8                	mov    al,bl
c0012ec3:	81 c4 ec 00 00 00    	add    esp,0xec
c0012ec9:	5b                   	pop    ebx
c0012eca:	5e                   	pop    esi
c0012ecb:	5f                   	pop    edi
c0012ecc:	5d                   	pop    ebp
c0012ecd:	c3                   	ret    

c0012ece <Reg::readString(char*, char*, char*, int)>:
c0012ece:	57                   	push   edi
c0012ecf:	56                   	push   esi
c0012ed0:	53                   	push   ebx
c0012ed1:	81 ec d4 00 00 00    	sub    esp,0xd4
c0012ed7:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0012ede:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0012ee2:	57                   	push   edi
c0012ee3:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012eea:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012ef1:	e8 b3 fe ff ff       	call   c0012da9 <Reg::getLine(char*, char*, char*)>
c0012ef6:	83 c4 10             	add    esp,0x10
c0012ef9:	89 c6                	mov    esi,eax
c0012efb:	84 c0                	test   al,al
c0012efd:	74 44                	je     c0012f43 <Reg::readString(char*, char*, char*, int)+0x75>
c0012eff:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0012f06:	31 c0                	xor    eax,eax
c0012f08:	4a                   	dec    edx
c0012f09:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0012f0c:	84 c9                	test   cl,cl
c0012f0e:	74 0f                	je     c0012f1f <Reg::readString(char*, char*, char*, int)+0x51>
c0012f10:	39 c2                	cmp    edx,eax
c0012f12:	7e 0b                	jle    c0012f1f <Reg::readString(char*, char*, char*, int)+0x51>
c0012f14:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0012f17:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0012f1c:	40                   	inc    eax
c0012f1d:	eb ea                	jmp    c0012f09 <Reg::readString(char*, char*, char*, int)+0x3b>
c0012f1f:	83 ec 0c             	sub    esp,0xc
c0012f22:	53                   	push   ebx
c0012f23:	e8 48 d6 fe ff       	call   c0000570 <strlen>
c0012f28:	83 c4 10             	add    esp,0x10
c0012f2b:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0012f30:	75 11                	jne    c0012f43 <Reg::readString(char*, char*, char*, int)+0x75>
c0012f32:	83 ec 0c             	sub    esp,0xc
c0012f35:	53                   	push   ebx
c0012f36:	e8 35 d6 fe ff       	call   c0000570 <strlen>
c0012f3b:	83 c4 10             	add    esp,0x10
c0012f3e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012f43:	81 c4 d0 00 00 00    	add    esp,0xd0
c0012f49:	89 f0                	mov    eax,esi
c0012f4b:	5b                   	pop    ebx
c0012f4c:	5e                   	pop    esi
c0012f4d:	5f                   	pop    edi
c0012f4e:	c3                   	ret    

c0012f4f <Reg::readBool(char*, char*, bool*)>:
c0012f4f:	83 ec 20             	sub    esp,0x20
c0012f52:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012f56:	50                   	push   eax
c0012f57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f5b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f5f:	e8 7c fe ff ff       	call   c0012de0 <Reg::readInt(char*, char*, int*)>
c0012f64:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012f69:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012f6d:	0f 95 02             	setne  BYTE PTR [edx]
c0012f70:	83 c4 2c             	add    esp,0x2c
c0012f73:	c3                   	ret    

c0012f74 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0012f74:	53                   	push   ebx
c0012f75:	83 ec 1c             	sub    esp,0x1c
c0012f78:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0012f7c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0012f80:	50                   	push   eax
c0012f81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f89:	e8 c1 ff ff ff       	call   c0012f4f <Reg::readBool(char*, char*, bool*)>
c0012f8e:	83 c4 10             	add    esp,0x10
c0012f91:	84 c0                	test   al,al
c0012f93:	74 04                	je     c0012f99 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0012f95:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0012f99:	88 d8                	mov    al,bl
c0012f9b:	83 c4 18             	add    esp,0x18
c0012f9e:	5b                   	pop    ebx
c0012f9f:	c3                   	ret    

c0012fa0 <Reg::readIntWithDefault(char*, char*, int)>:
c0012fa0:	53                   	push   ebx
c0012fa1:	83 ec 1c             	sub    esp,0x1c
c0012fa4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012fa8:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012fac:	50                   	push   eax
c0012fad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012fb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012fb5:	e8 26 fe ff ff       	call   c0012de0 <Reg::readInt(char*, char*, int*)>
c0012fba:	83 c4 10             	add    esp,0x10
c0012fbd:	84 c0                	test   al,al
c0012fbf:	74 04                	je     c0012fc5 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0012fc1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012fc5:	89 d8                	mov    eax,ebx
c0012fc7:	83 c4 18             	add    esp,0x18
c0012fca:	5b                   	pop    ebx
c0012fcb:	c3                   	ret    

c0012fcc <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0012fcc:	57                   	push   edi
c0012fcd:	56                   	push   esi
c0012fce:	56                   	push   esi
c0012fcf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012fd3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012fd7:	56                   	push   esi
c0012fd8:	57                   	push   edi
c0012fd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fe1:	e8 e8 fe ff ff       	call   c0012ece <Reg::readString(char*, char*, char*, int)>
c0012fe6:	83 c4 10             	add    esp,0x10
c0012fe9:	84 c0                	test   al,al
c0012feb:	75 1a                	jne    c0013007 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0012fed:	51                   	push   ecx
c0012fee:	56                   	push   esi
c0012fef:	6a 00                	push   0x0
c0012ff1:	57                   	push   edi
c0012ff2:	e8 f9 d4 fe ff       	call   c00004f0 <memset>
c0012ff7:	8d 4e ff             	lea    ecx,[esi-0x1]
c0012ffa:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012ffe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013000:	83 c4 10             	add    esp,0x10
c0013003:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013007:	89 f8                	mov    eax,edi
c0013009:	5a                   	pop    edx
c001300a:	5e                   	pop    esi
c001300b:	5f                   	pop    edi
c001300c:	c3                   	ret    

c001300d <SysEject(regs*)>:
c001300d:	83 ec 0c             	sub    esp,0xc
c0013010:	83 ca ff             	or     edx,0xffffffff
c0013013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013017:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001301a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001301f:	83 e9 41             	sub    ecx,0x41
c0013022:	83 f9 19             	cmp    ecx,0x19
c0013025:	77 18                	ja     c001303f <SysEject(regs*)+0x32>
c0013027:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c001302e:	85 c9                	test   ecx,ecx
c0013030:	74 0d                	je     c001303f <SysEject(regs*)+0x32>
c0013032:	83 ec 0c             	sub    esp,0xc
c0013035:	51                   	push   ecx
c0013036:	e8 5b a1 ff ff       	call   c000d196 <LogicalDisk::eject()>
c001303b:	83 c4 10             	add    esp,0x10
c001303e:	99                   	cdq    
c001303f:	83 c4 0c             	add    esp,0xc
c0013042:	c3                   	ret    

c0013043 <SysExit(regs*)>:
c0013043:	83 ec 18             	sub    esp,0x18
c0013046:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001304a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001304d:	e8 1a 2a 00 00       	call   c0015a6c <terminateTask(int)>
c0013052:	83 c8 ff             	or     eax,0xffffffff
c0013055:	83 c4 1c             	add    esp,0x1c
c0013058:	89 c2                	mov    edx,eax
c001305a:	c3                   	ret    

c001305b <SysGetCwd(regs*)>:
c001305b:	83 ec 10             	sub    esp,0x10
c001305e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013062:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013065:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013068:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001306d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013070:	e8 ed 7c ff ff       	call   c000ad62 <Fs::getcwd(Process*, char*, int)>
c0013075:	83 c4 1c             	add    esp,0x1c
c0013078:	99                   	cdq    
c0013079:	c3                   	ret    

c001307a <SysGetPID(regs*)>:
c001307a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001307f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013082:	8b 00                	mov    eax,DWORD PTR [eax]
c0013084:	99                   	cdq    
c0013085:	c3                   	ret    

c0013086 <SysGetRAMData(regs*)>:
c0013086:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c001308c:	69 05 e4 4e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0024ee4,0xc8
c0013096:	99                   	cdq    
c0013097:	f7 f9                	idiv   ecx
c0013099:	c1 e0 18             	shl    eax,0x18
c001309c:	09 c8                	or     eax,ecx
c001309e:	99                   	cdq    
c001309f:	c3                   	ret    

c00130a0 <SysGetVGAPtr(regs*)>:
c00130a0:	55                   	push   ebp
c00130a1:	57                   	push   edi
c00130a2:	56                   	push   esi
c00130a3:	53                   	push   ebx
c00130a4:	83 ec 18             	sub    esp,0x18
c00130a7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00130ab:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00130ae:	e8 85 24 00 00       	call   c0015538 <Thr::processFromPID(int)>
c00130b3:	83 c4 10             	add    esp,0x10
c00130b6:	89 c1                	mov    ecx,eax
c00130b8:	b8 01 00 00 00       	mov    eax,0x1
c00130bd:	85 c9                	test   ecx,ecx
c00130bf:	74 57                	je     c0013118 <SysGetVGAPtr(regs*)+0x78>
c00130c1:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00130c7:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00130cb:	74 0c                	je     c00130d9 <SysGetVGAPtr(regs*)+0x39>
c00130cd:	83 ec 0c             	sub    esp,0xc
c00130d0:	55                   	push   ebp
c00130d1:	e8 6d 56 ff ff       	call   c0008743 <setActiveTerminal(VgaText*)>
c00130d6:	83 c4 10             	add    esp,0x10
c00130d9:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00130dc:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00130df:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00130e4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00130e6:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00130e9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00130ec:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00130f2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00130f5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00130f8:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00130fe:	50                   	push   eax
c00130ff:	50                   	push   eax
c0013100:	68 64 0f 02 c0       	push   0xc0020f64
c0013105:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013108:	05 a8 0f 00 00       	add    eax,0xfa8
c001310d:	50                   	push   eax
c001310e:	e8 2d d5 fe ff       	call   c0000640 <strcpy>
c0013113:	83 c4 10             	add    esp,0x10
c0013116:	31 c0                	xor    eax,eax
c0013118:	83 c4 0c             	add    esp,0xc
c001311b:	31 d2                	xor    edx,edx
c001311d:	5b                   	pop    ebx
c001311e:	5e                   	pop    esi
c001311f:	5f                   	pop    edi
c0013120:	5d                   	pop    ebp
c0013121:	c3                   	ret    
c0013122:	66 90                	xchg   ax,ax

c0013124 <SysKill(regs*)>:
c0013124:	53                   	push   ebx
c0013125:	83 ec 08             	sub    esp,0x8
c0013128:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001312c:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013130:	75 16                	jne    c0013148 <SysKill(regs*)+0x24>
c0013132:	83 ec 0c             	sub    esp,0xc
c0013135:	68 6e 0f 02 c0       	push   0xc0020f6e
c001313a:	e8 d8 d7 ff ff       	call   c0010917 <KePanic(char const*)>
c001313f:	83 c4 10             	add    esp,0x10
c0013142:	e9 89 00 00 00       	jmp    c00131d0 <SysKill(regs*)+0xac>
c0013147:	90                   	nop
c0013148:	83 ec 0c             	sub    esp,0xc
c001314b:	68 84 81 02 c0       	push   0xc0028184
c0013150:	e8 f7 ba 00 00       	call   c001ec4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013155:	8d 76 00             	lea    esi,[esi+0x0]
c0013158:	83 c4 10             	add    esp,0x10
c001315b:	85 c0                	test   eax,eax
c001315d:	74 19                	je     c0013178 <SysKill(regs*)+0x54>
c001315f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013162:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013165:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013167:	74 33                	je     c001319c <SysKill(regs*)+0x78>
c0013169:	52                   	push   edx
c001316a:	52                   	push   edx
c001316b:	50                   	push   eax
c001316c:	68 84 81 02 c0       	push   0xc0028184
c0013171:	e8 f6 bd 00 00       	call   c001ef6c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013176:	eb e0                	jmp    c0013158 <SysKill(regs*)+0x34>
c0013178:	83 ec 0c             	sub    esp,0xc
c001317b:	68 78 81 02 c0       	push   0xc0028178
c0013180:	e8 c7 ba 00 00       	call   c001ec4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013185:	8d 76 00             	lea    esi,[esi+0x0]
c0013188:	83 c4 10             	add    esp,0x10
c001318b:	85 c0                	test   eax,eax
c001318d:	74 41                	je     c00131d0 <SysKill(regs*)+0xac>
c001318f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013192:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013195:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013197:	75 27                	jne    c00131c0 <SysKill(regs*)+0x9c>
c0013199:	8d 76 00             	lea    esi,[esi+0x0]
c001319c:	51                   	push   ecx
c001319d:	51                   	push   ecx
c001319e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00131a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131a6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00131a9:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00131af:	e8 ff db ff ff       	call   c0010db3 <KeRaiseSignal(SigHandlerBlock*, int)>
c00131b4:	83 c4 10             	add    esp,0x10
c00131b7:	31 c0                	xor    eax,eax
c00131b9:	31 d2                	xor    edx,edx
c00131bb:	eb 1b                	jmp    c00131d8 <SysKill(regs*)+0xb4>
c00131bd:	8d 76 00             	lea    esi,[esi+0x0]
c00131c0:	52                   	push   edx
c00131c1:	52                   	push   edx
c00131c2:	50                   	push   eax
c00131c3:	68 78 81 02 c0       	push   0xc0028178
c00131c8:	e8 9f bd 00 00       	call   c001ef6c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00131cd:	eb b9                	jmp    c0013188 <SysKill(regs*)+0x64>
c00131cf:	90                   	nop
c00131d0:	83 c8 ff             	or     eax,0xffffffff
c00131d3:	89 c2                	mov    edx,eax
c00131d5:	8d 76 00             	lea    esi,[esi+0x0]
c00131d8:	83 c4 08             	add    esp,0x8
c00131db:	5b                   	pop    ebx
c00131dc:	c3                   	ret    

c00131dd <SysLoadDLL(regs*)>:
c00131dd:	56                   	push   esi
c00131de:	53                   	push   ebx
c00131df:	31 d2                	xor    edx,edx
c00131e1:	51                   	push   ecx
c00131e2:	b8 01 00 00 00       	mov    eax,0x1
c00131e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00131eb:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00131ef:	0f 84 8c 00 00 00    	je     c0013281 <SysLoadDLL(regs*)+0xa4>
c00131f5:	83 ec 0c             	sub    esp,0xc
c00131f8:	68 14 01 00 00       	push   0x114
c00131fd:	e8 ac 48 ff ff       	call   c0007aae <malloc>
c0013202:	83 c4 0c             	add    esp,0xc
c0013205:	89 c3                	mov    ebx,eax
c0013207:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001320c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001320f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013212:	53                   	push   ebx
c0013213:	e8 54 7d ff ff       	call   c000af6c <File::File(char const*, Process*)>
c0013218:	83 c4 10             	add    esp,0x10
c001321b:	31 d2                	xor    edx,edx
c001321d:	b8 02 00 00 00       	mov    eax,0x2
c0013222:	85 db                	test   ebx,ebx
c0013224:	74 5b                	je     c0013281 <SysLoadDLL(regs*)+0xa4>
c0013226:	83 ec 0c             	sub    esp,0xc
c0013229:	53                   	push   ebx
c001322a:	e8 67 80 ff ff       	call   c000b296 <File::exists()>
c001322f:	83 c4 10             	add    esp,0x10
c0013232:	84 c0                	test   al,al
c0013234:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013236:	75 11                	jne    c0013249 <SysLoadDLL(regs*)+0x6c>
c0013238:	83 ec 0c             	sub    esp,0xc
c001323b:	53                   	push   ebx
c001323c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001323f:	83 c4 10             	add    esp,0x10
c0013242:	b8 03 00 00 00       	mov    eax,0x3
c0013247:	eb 36                	jmp    c001327f <SysLoadDLL(regs*)+0xa2>
c0013249:	83 ec 0c             	sub    esp,0xc
c001324c:	53                   	push   ebx
c001324d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013250:	58                   	pop    eax
c0013251:	5a                   	pop    edx
c0013252:	6a 00                	push   0x0
c0013254:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013257:	e8 12 14 00 00       	call   c001466e <Thr::loadDLL(char const*, bool)>
c001325c:	83 c4 10             	add    esp,0x10
c001325f:	89 c1                	mov    ecx,eax
c0013261:	31 d2                	xor    edx,edx
c0013263:	b8 04 00 00 00       	mov    eax,0x4
c0013268:	85 c9                	test   ecx,ecx
c001326a:	74 15                	je     c0013281 <SysLoadDLL(regs*)+0xa4>
c001326c:	53                   	push   ebx
c001326d:	53                   	push   ebx
c001326e:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0013274:	51                   	push   ecx
c0013275:	e8 25 16 00 00       	call   c001489f <Thr::executeDLL(unsigned long, void*)>
c001327a:	83 c4 10             	add    esp,0x10
c001327d:	31 c0                	xor    eax,eax
c001327f:	31 d2                	xor    edx,edx
c0013281:	59                   	pop    ecx
c0013282:	5b                   	pop    ebx
c0013283:	5e                   	pop    esi
c0013284:	c3                   	ret    

c0013285 <SysRead(regs*)>:
c0013285:	57                   	push   edi
c0013286:	56                   	push   esi
c0013287:	53                   	push   ebx
c0013288:	83 ec 10             	sub    esp,0x10
c001328b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001328f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013292:	83 f8 02             	cmp    eax,0x2
c0013295:	77 10                	ja     c00132a7 <SysRead(regs*)+0x22>
c0013297:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001329c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001329f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00132a5:	eb 0e                	jmp    c00132b5 <SysRead(regs*)+0x30>
c00132a7:	83 ec 0c             	sub    esp,0xc
c00132aa:	50                   	push   eax
c00132ab:	e8 13 62 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c00132b0:	83 c4 10             	add    esp,0x10
c00132b3:	89 c1                	mov    ecx,eax
c00132b5:	83 c8 ff             	or     eax,0xffffffff
c00132b8:	85 c9                	test   ecx,ecx
c00132ba:	89 c2                	mov    edx,eax
c00132bc:	74 28                	je     c00132e6 <SysRead(regs*)+0x61>
c00132be:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00132c6:	31 ff                	xor    edi,edi
c00132c8:	83 ec 0c             	sub    esp,0xc
c00132cb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132cd:	8d 54 24 18          	lea    edx,[esp+0x18]
c00132d1:	52                   	push   edx
c00132d2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00132d5:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00132d8:	57                   	push   edi
c00132d9:	56                   	push   esi
c00132da:	51                   	push   ecx
c00132db:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00132de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00132e2:	83 c4 20             	add    esp,0x20
c00132e5:	99                   	cdq    
c00132e6:	83 c4 10             	add    esp,0x10
c00132e9:	5b                   	pop    ebx
c00132ea:	5e                   	pop    esi
c00132eb:	5f                   	pop    edi
c00132ec:	c3                   	ret    

c00132ed <SysRegisterSignal(regs*)>:
c00132ed:	83 ec 18             	sub    esp,0x18
c00132f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132f4:	6a 00                	push   0x0
c00132f6:	6a 00                	push   0x0
c00132f8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00132fb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00132fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013303:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013306:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001330c:	e8 6c da ff ff       	call   c0010d7d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013311:	83 c4 2c             	add    esp,0x2c
c0013314:	99                   	cdq    
c0013315:	c3                   	ret    

c0013316 <SysRegistryGetTypeFromPath(regs*)>:
c0013316:	57                   	push   edi
c0013317:	56                   	push   esi
c0013318:	53                   	push   ebx
c0013319:	81 ec 38 01 00 00    	sub    esp,0x138
c001331f:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013326:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013329:	68 8f 0f 02 c0       	push   0xc0020f8f
c001332e:	e8 b7 76 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0013333:	5a                   	pop    edx
c0013334:	59                   	pop    ecx
c0013335:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013338:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001333b:	e8 4d f6 ff ff       	call   c001298d <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013340:	5f                   	pop    edi
c0013341:	89 c6                	mov    esi,eax
c0013343:	5a                   	pop    edx
c0013344:	50                   	push   eax
c0013345:	68 af 0f 02 c0       	push   0xc0020faf
c001334a:	e8 9b 76 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c001334f:	83 c4 10             	add    esp,0x10
c0013352:	85 f6                	test   esi,esi
c0013354:	74 28                	je     c001337e <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013356:	50                   	push   eax
c0013357:	8d 7c 24 08          	lea    edi,[esp+0x8]
c001335b:	57                   	push   edi
c001335c:	56                   	push   esi
c001335d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013360:	e8 0c f2 ff ff       	call   c0012571 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013365:	83 c4 0c             	add    esp,0xc
c0013368:	89 c3                	mov    ebx,eax
c001336a:	57                   	push   edi
c001336b:	50                   	push   eax
c001336c:	68 b7 0f 02 c0       	push   0xc0020fb7
c0013371:	e8 74 76 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0013376:	89 d8                	mov    eax,ebx
c0013378:	83 c4 10             	add    esp,0x10
c001337b:	99                   	cdq    
c001337c:	eb 05                	jmp    c0013383 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c001337e:	83 c8 ff             	or     eax,0xffffffff
c0013381:	89 c2                	mov    edx,eax
c0013383:	81 c4 30 01 00 00    	add    esp,0x130
c0013389:	5b                   	pop    ebx
c001338a:	5e                   	pop    esi
c001338b:	5f                   	pop    edi
c001338c:	c3                   	ret    

c001338d <SysRegistryReadExtent(regs*)>:
c001338d:	83 ec 1c             	sub    esp,0x1c
c0013390:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013394:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013397:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001339a:	85 c0                	test   eax,eax
c001339c:	79 1f                	jns    c00133bd <SysRegistryReadExtent(regs*)+0x30>
c001339e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00133a3:	52                   	push   edx
c00133a4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00133a8:	52                   	push   edx
c00133a9:	50                   	push   eax
c00133aa:	51                   	push   ecx
c00133ab:	e8 b3 f0 ff ff       	call   c0012463 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00133b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00133b8:	83 c4 10             	add    esp,0x10
c00133bb:	eb 14                	jmp    c00133d1 <SysRegistryReadExtent(regs*)+0x44>
c00133bd:	83 ec 04             	sub    esp,0x4
c00133c0:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00133c3:	50                   	push   eax
c00133c4:	51                   	push   ecx
c00133c5:	e8 33 eb ff ff       	call   c0011efd <CmGetString(Reghive_Tag*, int, char*)>
c00133ca:	83 c4 10             	add    esp,0x10
c00133cd:	31 c0                	xor    eax,eax
c00133cf:	31 d2                	xor    edx,edx
c00133d1:	83 c4 1c             	add    esp,0x1c
c00133d4:	c3                   	ret    

c00133d5 <SysRegistryPathToExtentLookup(regs*)>:
c00133d5:	53                   	push   ebx
c00133d6:	83 ec 10             	sub    esp,0x10
c00133d9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00133dd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00133e0:	68 cd 0f 02 c0       	push   0xc0020fcd
c00133e5:	e8 00 76 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c00133ea:	58                   	pop    eax
c00133eb:	5a                   	pop    edx
c00133ec:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00133ef:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00133f2:	e8 96 f5 ff ff       	call   c001298d <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00133f7:	83 c4 18             	add    esp,0x18
c00133fa:	99                   	cdq    
c00133fb:	5b                   	pop    ebx
c00133fc:	c3                   	ret    

c00133fd <SysRegistryEnterDirectory(regs*)>:
c00133fd:	53                   	push   ebx
c00133fe:	83 ec 10             	sub    esp,0x10
c0013401:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013405:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013408:	68 f0 0f 02 c0       	push   0xc0020ff0
c001340d:	e8 d8 75 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0013412:	58                   	pop    eax
c0013413:	5a                   	pop    edx
c0013414:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013417:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001341a:	e8 55 eb ff ff       	call   c0011f74 <CmEnterDirectory(Reghive_Tag*, int)>
c001341f:	83 c4 18             	add    esp,0x18
c0013422:	99                   	cdq    
c0013423:	5b                   	pop    ebx
c0013424:	c3                   	ret    

c0013425 <SysRegistryGetNext(regs*)>:
c0013425:	53                   	push   ebx
c0013426:	83 ec 10             	sub    esp,0x10
c0013429:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001342d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013430:	68 0e 10 02 c0       	push   0xc002100e
c0013435:	e8 b0 75 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c001343a:	58                   	pop    eax
c001343b:	5a                   	pop    edx
c001343c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001343f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013442:	e8 6c eb ff ff       	call   c0011fb3 <CmGetNext(Reghive_Tag*, int)>
c0013447:	83 c4 18             	add    esp,0x18
c001344a:	99                   	cdq    
c001344b:	5b                   	pop    ebx
c001344c:	c3                   	ret    

c001344d <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c001344d:	57                   	push   edi
c001344e:	56                   	push   esi
c001344f:	53                   	push   ebx
c0013450:	81 ec 34 01 00 00    	sub    esp,0x134
c0013456:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001345d:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013461:	57                   	push   edi
c0013462:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013465:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013468:	e8 04 f1 ff ff       	call   c0012571 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001346d:	89 c3                	mov    ebx,eax
c001346f:	58                   	pop    eax
c0013470:	5a                   	pop    edx
c0013471:	57                   	push   edi
c0013472:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013475:	e8 c6 d1 fe ff       	call   c0000640 <strcpy>
c001347a:	89 d8                	mov    eax,ebx
c001347c:	81 c4 40 01 00 00    	add    esp,0x140
c0013482:	99                   	cdq    
c0013483:	5b                   	pop    ebx
c0013484:	5e                   	pop    esi
c0013485:	5f                   	pop    edi
c0013486:	c3                   	ret    

c0013487 <SysRegistryOpen(regs*)>:
c0013487:	83 ec 18             	sub    esp,0x18
c001348a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001348e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013491:	e8 f7 e8 ff ff       	call   c0011d8d <CmOpen(char const*)>
c0013496:	83 c4 1c             	add    esp,0x1c
c0013499:	99                   	cdq    
c001349a:	c3                   	ret    

c001349b <SysRegistryClose(regs*)>:
c001349b:	83 ec 18             	sub    esp,0x18
c001349e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134a2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00134a5:	e8 01 ea ff ff       	call   c0011eab <CmClose(Reghive_Tag*)>
c00134aa:	31 c0                	xor    eax,eax
c00134ac:	31 d2                	xor    edx,edx
c00134ae:	83 c4 1c             	add    esp,0x1c
c00134b1:	c3                   	ret    

c00134b2 <SysSbrk(regs*)>:
c00134b2:	56                   	push   esi
c00134b3:	53                   	push   ebx
c00134b4:	50                   	push   eax
c00134b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00134ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134be:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00134c1:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00134c4:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00134ca:	85 db                	test   ebx,ebx
c00134cc:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00134cf:	74 02                	je     c00134d3 <SysSbrk(regs*)+0x21>
c00134d1:	79 06                	jns    c00134d9 <SysSbrk(regs*)+0x27>
c00134d3:	89 f0                	mov    eax,esi
c00134d5:	31 d2                	xor    edx,edx
c00134d7:	eb 2a                	jmp    c0013503 <SysSbrk(regs*)+0x51>
c00134d9:	83 c8 ff             	or     eax,0xffffffff
c00134dc:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00134e2:	89 c2                	mov    edx,eax
c00134e4:	77 1d                	ja     c0013503 <SysSbrk(regs*)+0x51>
c00134e6:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00134ec:	50                   	push   eax
c00134ed:	c1 ea 0c             	shr    edx,0xc
c00134f0:	68 07 0c 00 00       	push   0xc07
c00134f5:	52                   	push   edx
c00134f6:	51                   	push   ecx
c00134f7:	e8 0e 69 ff ff       	call   c0009e0a <VAS::allocatePages(int, int)>
c00134fc:	89 f0                	mov    eax,esi
c00134fe:	31 d2                	xor    edx,edx
c0013500:	83 c4 10             	add    esp,0x10
c0013503:	59                   	pop    ecx
c0013504:	5b                   	pop    ebx
c0013505:	5e                   	pop    esi
c0013506:	c3                   	ret    

c0013507 <SysSetCwd(regs*)>:
c0013507:	83 ec 14             	sub    esp,0x14
c001350a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001350e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013511:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013516:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013519:	e8 17 7e ff ff       	call   c000b335 <Fs::setcwd(Process*, char*)>
c001351e:	83 c4 1c             	add    esp,0x1c
c0013521:	99                   	cdq    
c0013522:	c3                   	ret    

c0013523 <SysSetTime(regs*)>:
c0013523:	55                   	push   ebp
c0013524:	31 c9                	xor    ecx,ecx
c0013526:	57                   	push   edi
c0013527:	bd 0c 00 00 00       	mov    ebp,0xc
c001352c:	56                   	push   esi
c001352d:	53                   	push   ebx
c001352e:	31 db                	xor    ebx,ebx
c0013530:	83 ec 10             	sub    esp,0x10
c0013533:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013537:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001353a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001353d:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013540:	89 c2                	mov    edx,eax
c0013542:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013548:	83 e2 1f             	and    edx,0x1f
c001354b:	c1 e7 10             	shl    edi,0x10
c001354e:	42                   	inc    edx
c001354f:	c1 e8 05             	shr    eax,0x5
c0013552:	88 d1                	mov    cl,dl
c0013554:	31 d2                	xor    edx,edx
c0013556:	f7 f5                	div    ebp
c0013558:	89 dd                	mov    ebp,ebx
c001355a:	88 d5                	mov    ch,dl
c001355c:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013562:	0f b7 c1             	movzx  eax,cx
c0013565:	31 d2                	xor    edx,edx
c0013567:	09 f8                	or     eax,edi
c0013569:	bf 3c 00 00 00       	mov    edi,0x3c
c001356e:	89 c1                	mov    ecx,eax
c0013570:	89 f0                	mov    eax,esi
c0013572:	f7 f7                	div    edi
c0013574:	c1 e2 10             	shl    edx,0x10
c0013577:	09 d5                	or     ebp,edx
c0013579:	31 d2                	xor    edx,edx
c001357b:	89 eb                	mov    ebx,ebp
c001357d:	f7 f7                	div    edi
c001357f:	bf 10 0e 00 00       	mov    edi,0xe10
c0013584:	88 d7                	mov    bh,dl
c0013586:	89 f0                	mov    eax,esi
c0013588:	31 d2                	xor    edx,edx
c001358a:	f7 f7                	div    edi
c001358c:	bf 18 00 00 00       	mov    edi,0x18
c0013591:	31 d2                	xor    edx,edx
c0013593:	f7 f7                	div    edi
c0013595:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001359a:	88 d3                	mov    bl,dl
c001359c:	53                   	push   ebx
c001359d:	51                   	push   ecx
c001359e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00135a4:	e8 89 85 ff ff       	call   c000bb32 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00135a9:	83 c4 1c             	add    esp,0x1c
c00135ac:	83 f0 01             	xor    eax,0x1
c00135af:	5b                   	pop    ebx
c00135b0:	0f b6 c0             	movzx  eax,al
c00135b3:	5e                   	pop    esi
c00135b4:	31 d2                	xor    edx,edx
c00135b6:	5f                   	pop    edi
c00135b7:	5d                   	pop    ebp
c00135b8:	c3                   	ret    

c00135b9 <SysTimezone(regs*)>:
c00135b9:	53                   	push   ebx
c00135ba:	83 ec 08             	sub    esp,0x8
c00135bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00135c1:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00135c5:	75 17                	jne    c00135de <SysTimezone(regs*)+0x25>
c00135c7:	83 ec 0c             	sub    esp,0xc
c00135ca:	68 25 10 02 c0       	push   0xc0021025
c00135cf:	e8 16 74 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c00135d4:	83 c8 ff             	or     eax,0xffffffff
c00135d7:	83 c4 10             	add    esp,0x10
c00135da:	89 c2                	mov    edx,eax
c00135dc:	eb 20                	jmp    c00135fe <SysTimezone(regs*)+0x45>
c00135de:	83 ec 0c             	sub    esp,0xc
c00135e1:	68 3a 10 02 c0       	push   0xc002103a
c00135e6:	e8 ff 73 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c00135eb:	58                   	pop    eax
c00135ec:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00135ef:	e8 a8 82 ff ff       	call   c000b89c <User::loadClockSettings(int)>
c00135f4:	83 c4 10             	add    esp,0x10
c00135f7:	b8 01 00 00 00       	mov    eax,0x1
c00135fc:	31 d2                	xor    edx,edx
c00135fe:	83 c4 08             	add    esp,0x8
c0013601:	5b                   	pop    ebx
c0013602:	c3                   	ret    

c0013603 <SysWrite(regs*)>:
c0013603:	57                   	push   edi
c0013604:	56                   	push   esi
c0013605:	53                   	push   ebx
c0013606:	83 ec 10             	sub    esp,0x10
c0013609:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001360d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013610:	83 f8 02             	cmp    eax,0x2
c0013613:	77 10                	ja     c0013625 <SysWrite(regs*)+0x22>
c0013615:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001361a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001361d:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013623:	eb 0e                	jmp    c0013633 <SysWrite(regs*)+0x30>
c0013625:	83 ec 0c             	sub    esp,0xc
c0013628:	50                   	push   eax
c0013629:	e8 95 5e ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c001362e:	83 c4 10             	add    esp,0x10
c0013631:	89 c1                	mov    ecx,eax
c0013633:	83 c8 ff             	or     eax,0xffffffff
c0013636:	85 c9                	test   ecx,ecx
c0013638:	89 c2                	mov    edx,eax
c001363a:	74 28                	je     c0013664 <SysWrite(regs*)+0x61>
c001363c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013644:	31 ff                	xor    edi,edi
c0013646:	83 ec 0c             	sub    esp,0xc
c0013649:	8b 01                	mov    eax,DWORD PTR [ecx]
c001364b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001364f:	52                   	push   edx
c0013650:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013653:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013656:	57                   	push   edi
c0013657:	56                   	push   esi
c0013658:	51                   	push   ecx
c0013659:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001365c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013660:	83 c4 20             	add    esp,0x20
c0013663:	99                   	cdq    
c0013664:	83 c4 10             	add    esp,0x10
c0013667:	5b                   	pop    ebx
c0013668:	5e                   	pop    esi
c0013669:	5f                   	pop    edi
c001366a:	c3                   	ret    

c001366b <SysWsbe(regs*)>:
c001366b:	57                   	push   edi
c001366c:	b9 0b 00 00 00       	mov    ecx,0xb
c0013671:	56                   	push   esi
c0013672:	be 79 10 02 c0       	mov    esi,0xc0021079
c0013677:	53                   	push   ebx
c0013678:	83 ec 30             	sub    esp,0x30
c001367b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001367f:	fc                   	cld    
c0013680:	83 ec 0c             	sub    esp,0xc
c0013683:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013685:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013689:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001368e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013691:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0013697:	8b 06                	mov    eax,DWORD PTR [esi]
c0013699:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001369c:	57                   	push   edi
c001369d:	e8 ce ce fe ff       	call   c0000570 <strlen>
c00136a2:	5a                   	pop    edx
c00136a3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00136a7:	52                   	push   edx
c00136a8:	31 d2                	xor    edx,edx
c00136aa:	57                   	push   edi
c00136ab:	52                   	push   edx
c00136ac:	50                   	push   eax
c00136ad:	56                   	push   esi
c00136ae:	ff d3                	call   ebx
c00136b0:	83 c4 14             	add    esp,0x14
c00136b3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00136b7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00136ba:	e8 ad 23 00 00       	call   c0015a6c <terminateTask(int)>
c00136bf:	83 c4 40             	add    esp,0x40
c00136c2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00136c7:	5b                   	pop    ebx
c00136c8:	31 d2                	xor    edx,edx
c00136ca:	5e                   	pop    esi
c00136cb:	5f                   	pop    edi
c00136cc:	c3                   	ret    

c00136cd <SysYield(regs*)>:
c00136cd:	83 ec 0c             	sub    esp,0xc
c00136d0:	fa                   	cli    
c00136d1:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00136d7:	e8 f0 19 00 00       	call   c00150cc <schedule()>
c00136dc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00136e1:	48                   	dec    eax
c00136e2:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00136e7:	75 01                	jne    c00136ea <SysYield(regs*)+0x1d>
c00136e9:	fb                   	sti    
c00136ea:	31 c0                	xor    eax,eax
c00136ec:	31 d2                	xor    edx,edx
c00136ee:	83 c4 0c             	add    esp,0xc
c00136f1:	c3                   	ret    

c00136f2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00136f2:	55                   	push   ebp
c00136f3:	57                   	push   edi
c00136f4:	56                   	push   esi
c00136f5:	53                   	push   ebx
c00136f6:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00136fc:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013704:	0f 95 c0             	setne  al
c0013707:	31 d2                	xor    edx,edx
c0013709:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0013711:	0f 94 c2             	sete   dl
c0013714:	85 c2                	test   edx,eax
c0013716:	74 34                	je     c001374c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0013718:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013723:	74 27                	je     c001374c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0013725:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001372c:	05 00 10 00 00       	add    eax,0x1000
c0013731:	89 c1                	mov    ecx,eax
c0013733:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013738:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c001373e:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0013745:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c001374c:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0013753:	83 ec 0c             	sub    esp,0xc
c0013756:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001375c:	6a 01                	push   0x1
c001375e:	e8 ba 5e ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c0013763:	83 c4 10             	add    esp,0x10
c0013766:	89 c3                	mov    ebx,eax
c0013768:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001376e:	0f 86 25 01 00 00    	jbe    c0013899 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0013774:	c1 ee 0c             	shr    esi,0xc
c0013777:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001377e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0013782:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001378a:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0013791:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013795:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c001379c:	29 ef                	sub    edi,ebp
c001379e:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00137a2:	0f 83 f8 00 00 00    	jae    c00138a0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c00137a8:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00137ae:	76 05                	jbe    c00137b5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c00137b0:	bf 00 10 00 00       	mov    edi,0x1000
c00137b5:	83 ec 0c             	sub    esp,0xc
c00137b8:	31 d2                	xor    edx,edx
c00137ba:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00137c1:	8b 08                	mov    ecx,DWORD PTR [eax]
c00137c3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00137c7:	50                   	push   eax
c00137c8:	8d 74 24 30          	lea    esi,[esp+0x30]
c00137cc:	56                   	push   esi
c00137cd:	52                   	push   edx
c00137ce:	57                   	push   edi
c00137cf:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00137d6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00137d9:	83 c4 20             	add    esp,0x20
c00137dc:	85 c0                	test   eax,eax
c00137de:	75 06                	jne    c00137e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c00137e0:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00137e4:	74 13                	je     c00137f9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c00137e6:	83 ec 0c             	sub    esp,0xc
c00137e9:	53                   	push   ebx
c00137ea:	e8 4a 61 ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c00137ef:	83 c4 10             	add    esp,0x10
c00137f2:	31 c0                	xor    eax,eax
c00137f4:	e9 7c 01 00 00       	jmp    c0013975 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c00137f9:	fa                   	cli    
c00137fa:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013800:	e8 ae 45 ff ff       	call   c0007db3 <Phys::allocatePage()>
c0013805:	6a 07                	push   0x7
c0013807:	89 c7                	mov    edi,eax
c0013809:	53                   	push   ebx
c001380a:	50                   	push   eax
c001380b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013810:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013813:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013819:	e8 e6 64 ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c001381e:	83 c4 0c             	add    esp,0xc
c0013821:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013828:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001382e:	6a 00                	push   0x0
c0013830:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013835:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013838:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001383e:	e8 27 63 ff ff       	call   c0009b6a <VAS::mapOtherVASIn(bool, VAS*)>
c0013843:	58                   	pop    eax
c0013844:	5a                   	pop    edx
c0013845:	68 07 0c 00 00       	push   0xc07
c001384a:	55                   	push   ebp
c001384b:	57                   	push   edi
c001384c:	89 df                	mov    edi,ebx
c001384e:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013855:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001385b:	6a 00                	push   0x0
c001385d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013862:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013865:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001386b:	e8 7e 68 ff ff       	call   c000a0ee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013870:	b9 00 10 00 00       	mov    ecx,0x1000
c0013875:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013877:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001387c:	83 c4 20             	add    esp,0x20
c001387f:	48                   	dec    eax
c0013880:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013885:	85 c0                	test   eax,eax
c0013887:	75 01                	jne    c001388a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0013889:	fb                   	sti    
c001388a:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013890:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013894:	e9 f1 fe ff ff       	jmp    c001378a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0013899:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00138a0:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00138a7:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00138ad:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00138b3:	0f 86 ae 00 00 00    	jbe    c0013967 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00138b9:	fa                   	cli    
c00138ba:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00138c0:	c1 ee 0c             	shr    esi,0xc
c00138c3:	51                   	push   ecx
c00138c4:	31 ff                	xor    edi,edi
c00138c6:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00138cd:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00138d3:	6a 00                	push   0x0
c00138d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00138dd:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00138e3:	e8 82 62 ff ff       	call   c0009b6a <VAS::mapOtherVASIn(bool, VAS*)>
c00138e8:	83 c4 10             	add    esp,0x10
c00138eb:	e8 c3 44 ff ff       	call   c0007db3 <Phys::allocatePage()>
c00138f0:	47                   	inc    edi
c00138f1:	6a 07                	push   0x7
c00138f3:	53                   	push   ebx
c00138f4:	50                   	push   eax
c00138f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00138f9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00138ff:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013902:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013908:	e8 f7 63 ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c001390d:	58                   	pop    eax
c001390e:	5a                   	pop    edx
c001390f:	68 07 0c 00 00       	push   0xc07
c0013914:	55                   	push   ebp
c0013915:	81 c5 00 10 00 00    	add    ebp,0x1000
c001391b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001391f:	50                   	push   eax
c0013920:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013927:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001392d:	6a 00                	push   0x0
c001392f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013934:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013937:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001393d:	e8 ac 67 ff ff       	call   c000a0ee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013942:	83 c4 1c             	add    esp,0x1c
c0013945:	68 00 10 00 00       	push   0x1000
c001394a:	6a 00                	push   0x0
c001394c:	53                   	push   ebx
c001394d:	e8 9e cb fe ff       	call   c00004f0 <memset>
c0013952:	83 c4 10             	add    esp,0x10
c0013955:	39 fe                	cmp    esi,edi
c0013957:	77 92                	ja     c00138eb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c0013959:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001395e:	48                   	dec    eax
c001395f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013964:	75 01                	jne    c0013967 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0013966:	fb                   	sti    
c0013967:	83 ec 0c             	sub    esp,0xc
c001396a:	53                   	push   ebx
c001396b:	e8 c9 5f ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0013970:	83 c4 10             	add    esp,0x10
c0013973:	b0 01                	mov    al,0x1
c0013975:	81 c4 2c 10 00 00    	add    esp,0x102c
c001397b:	5b                   	pop    ebx
c001397c:	5e                   	pop    esi
c001397d:	5f                   	pop    edi
c001397e:	5d                   	pop    ebp
c001397f:	c3                   	ret    

c0013980 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0013980:	55                   	push   ebp
c0013981:	57                   	push   edi
c0013982:	56                   	push   esi
c0013983:	53                   	push   ebx
c0013984:	83 ec 48             	sub    esp,0x48
c0013987:	68 14 01 00 00       	push   0x114
c001398c:	e8 1d 41 ff ff       	call   c0007aae <malloc>
c0013991:	83 c4 0c             	add    esp,0xc
c0013994:	89 c6                	mov    esi,eax
c0013996:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001399a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001399e:	50                   	push   eax
c001399f:	e8 c8 75 ff ff       	call   c000af6c <File::File(char const*, Process*)>
c00139a4:	58                   	pop    eax
c00139a5:	5a                   	pop    edx
c00139a6:	6a 01                	push   0x1
c00139a8:	56                   	push   esi
c00139a9:	e8 7a 76 ff ff       	call   c000b028 <File::open(FileOpenMode)>
c00139ae:	83 c4 10             	add    esp,0x10
c00139b1:	85 c0                	test   eax,eax
c00139b3:	0f 85 43 01 00 00    	jne    c0013afc <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00139b9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00139c1:	83 ec 0c             	sub    esp,0xc
c00139c4:	6a 34                	push   0x34
c00139c6:	e8 e3 40 ff ff       	call   c0007aae <malloc>
c00139cb:	89 c3                	mov    ebx,eax
c00139cd:	58                   	pop    eax
c00139ce:	8b 06                	mov    eax,DWORD PTR [esi]
c00139d0:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00139d4:	57                   	push   edi
c00139d5:	53                   	push   ebx
c00139d6:	6a 00                	push   0x0
c00139d8:	6a 34                	push   0x34
c00139da:	56                   	push   esi
c00139db:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00139de:	83 c4 20             	add    esp,0x20
c00139e1:	85 c0                	test   eax,eax
c00139e3:	0f 85 13 01 00 00    	jne    c0013afc <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00139e9:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00139ef:	0f 85 07 01 00 00    	jne    c0013afc <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00139f5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00139f8:	85 c0                	test   eax,eax
c00139fa:	0f 84 fc 00 00 00    	je     c0013afc <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013a00:	31 d2                	xor    edx,edx
c0013a02:	55                   	push   ebp
c0013a03:	52                   	push   edx
c0013a04:	50                   	push   eax
c0013a05:	56                   	push   esi
c0013a06:	e8 db 76 ff ff       	call   c000b0e6 <File::seek(unsigned long long)>
c0013a0b:	83 c4 10             	add    esp,0x10
c0013a0e:	85 c0                	test   eax,eax
c0013a10:	0f 85 e6 00 00 00    	jne    c0013afc <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013a16:	83 ec 0c             	sub    esp,0xc
c0013a19:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013a1c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013a20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013a24:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013a28:	0f af c2             	imul   eax,edx
c0013a2b:	50                   	push   eax
c0013a2c:	e8 7d 40 ff ff       	call   c0007aae <malloc>
c0013a31:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013a33:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013a37:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013a3a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013a3e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013a42:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013a46:	0f af c2             	imul   eax,edx
c0013a49:	99                   	cdq    
c0013a4a:	52                   	push   edx
c0013a4b:	50                   	push   eax
c0013a4c:	56                   	push   esi
c0013a4d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013a50:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0013a53:	83 c4 20             	add    esp,0x20
c0013a56:	85 c0                	test   eax,eax
c0013a58:	0f 84 9e 00 00 00    	je     c0013afc <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013a5e:	31 d2                	xor    edx,edx
c0013a60:	51                   	push   ecx
c0013a61:	52                   	push   edx
c0013a62:	50                   	push   eax
c0013a63:	56                   	push   esi
c0013a64:	e8 7d 76 ff ff       	call   c000b0e6 <File::seek(unsigned long long)>
c0013a69:	83 c4 10             	add    esp,0x10
c0013a6c:	85 c0                	test   eax,eax
c0013a6e:	0f 85 88 00 00 00    	jne    c0013afc <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013a74:	83 ec 0c             	sub    esp,0xc
c0013a77:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013a7b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013a7f:	31 ed                	xor    ebp,ebp
c0013a81:	0f af c2             	imul   eax,edx
c0013a84:	50                   	push   eax
c0013a85:	e8 24 40 ff ff       	call   c0007aae <malloc>
c0013a8a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013a8c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013a90:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013a93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a97:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013a9b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013a9f:	0f af c2             	imul   eax,edx
c0013aa2:	99                   	cdq    
c0013aa3:	52                   	push   edx
c0013aa4:	50                   	push   eax
c0013aa5:	56                   	push   esi
c0013aa6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013aa9:	83 c4 20             	add    esp,0x20
c0013aac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013ab4:	0f b7 fd             	movzx  edi,bp
c0013ab7:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0013abb:	73 7d                	jae    c0013b3a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0013abd:	c1 e7 05             	shl    edi,0x5
c0013ac0:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0013ac4:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0013ac7:	75 6b                	jne    c0013b34 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0013ac9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0013acc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ad0:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013ad3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013ad7:	52                   	push   edx
c0013ad8:	31 d2                	xor    edx,edx
c0013ada:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0013add:	52                   	push   edx
c0013ade:	50                   	push   eax
c0013adf:	56                   	push   esi
c0013ae0:	e8 01 76 ff ff       	call   c000b0e6 <File::seek(unsigned long long)>
c0013ae5:	83 c4 10             	add    esp,0x10
c0013ae8:	85 c0                	test   eax,eax
c0013aea:	74 17                	je     c0013b03 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0013aec:	83 ec 0c             	sub    esp,0xc
c0013aef:	68 a5 10 02 c0       	push   0xc00210a5
c0013af4:	e8 f1 6e ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0013af9:	83 c4 10             	add    esp,0x10
c0013afc:	31 c0                	xor    eax,eax
c0013afe:	e9 87 00 00 00       	jmp    c0013b8a <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0013b03:	83 ec 0c             	sub    esp,0xc
c0013b06:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0013b09:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0013b0c:	50                   	push   eax
c0013b0d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013b11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b15:	56                   	push   esi
c0013b16:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013b1a:	e8 d3 fb ff ff       	call   c00136f2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013b1f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013b23:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0013b27:	83 c4 20             	add    esp,0x20
c0013b2a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0013b2e:	73 04                	jae    c0013b34 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0013b30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013b34:	45                   	inc    ebp
c0013b35:	e9 7a ff ff ff       	jmp    c0013ab4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013b3a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0013b3e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013b42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013b46:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0013b4c:	83 ec 0c             	sub    esp,0xc
c0013b4f:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0013b55:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013b5a:	05 00 10 00 00       	add    eax,0x1000
c0013b5f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013b62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b66:	e8 53 3f ff ff       	call   c0007abe <free>
c0013b6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b6e:	e8 4b 3f ff ff       	call   c0007abe <free>
c0013b73:	58                   	pop    eax
c0013b74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b78:	e8 41 3f ff ff       	call   c0007abe <free>
c0013b7d:	89 34 24             	mov    DWORD PTR [esp],esi
c0013b80:	e8 01 75 ff ff       	call   c000b086 <File::close()>
c0013b85:	83 c4 10             	add    esp,0x10
c0013b88:	b0 01                	mov    al,0x1
c0013b8a:	83 c4 3c             	add    esp,0x3c
c0013b8d:	5b                   	pop    ebx
c0013b8e:	5e                   	pop    esi
c0013b8f:	5f                   	pop    edi
c0013b90:	5d                   	pop    ebp
c0013b91:	c3                   	ret    

c0013b92 <Thr::runtimeReferenceHelper()>:
c0013b92:	83 ec 18             	sub    esp,0x18
c0013b95:	68 ad 10 02 c0       	push   0xc00210ad
c0013b9a:	e8 4b 6e ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0013b9f:	fa                   	cli    
c0013ba0:	83 c4 10             	add    esp,0x10
c0013ba3:	eb fe                	jmp    c0013ba3 <Thr::runtimeReferenceHelper()+0x11>

c0013ba5 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013ba5:	57                   	push   edi
c0013ba6:	56                   	push   esi
c0013ba7:	53                   	push   ebx
c0013ba8:	31 db                	xor    ebx,ebx
c0013baa:	39 1d 40 81 02 c0    	cmp    DWORD PTR ds:0xc0028140,ebx
c0013bb0:	7e 3c                	jle    c0013bee <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013bb2:	8b 34 9d c0 80 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd7f40]
c0013bb9:	31 ff                	xor    edi,edi
c0013bbb:	39 3c 9d c0 7f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8040],edi
c0013bc2:	7e 27                	jle    c0013beb <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013bc4:	50                   	push   eax
c0013bc5:	50                   	push   eax
c0013bc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013bca:	8b 06                	mov    eax,DWORD PTR [esi]
c0013bcc:	03 04 9d 40 80 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd7fc0]
c0013bd3:	50                   	push   eax
c0013bd4:	e8 77 cb fe ff       	call   c0000750 <strcmp>
c0013bd9:	83 c4 10             	add    esp,0x10
c0013bdc:	85 c0                	test   eax,eax
c0013bde:	75 05                	jne    c0013be5 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013be0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013be3:	eb 0b                	jmp    c0013bf0 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013be5:	83 c6 10             	add    esi,0x10
c0013be8:	47                   	inc    edi
c0013be9:	eb d0                	jmp    c0013bbb <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013beb:	43                   	inc    ebx
c0013bec:	eb bc                	jmp    c0013baa <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013bee:	31 c0                	xor    eax,eax
c0013bf0:	5b                   	pop    ebx
c0013bf1:	5e                   	pop    esi
c0013bf2:	5f                   	pop    edi
c0013bf3:	c3                   	ret    

c0013bf4 <Thr::loadKernelSymbolTable(char const*)>:
c0013bf4:	55                   	push   ebp
c0013bf5:	57                   	push   edi
c0013bf6:	56                   	push   esi
c0013bf7:	53                   	push   ebx
c0013bf8:	83 ec 68             	sub    esp,0x68
c0013bfb:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c0013c01:	68 14 01 00 00       	push   0x114
c0013c06:	e8 a3 3e ff ff       	call   c0007aae <malloc>
c0013c0b:	83 c4 0c             	add    esp,0xc
c0013c0e:	89 c3                	mov    ebx,eax
c0013c10:	56                   	push   esi
c0013c11:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013c15:	50                   	push   eax
c0013c16:	e8 51 73 ff ff       	call   c000af6c <File::File(char const*, Process*)>
c0013c1b:	5e                   	pop    esi
c0013c1c:	5f                   	pop    edi
c0013c1d:	6a 01                	push   0x1
c0013c1f:	53                   	push   ebx
c0013c20:	e8 03 74 ff ff       	call   c000b028 <File::open(FileOpenMode)>
c0013c25:	83 c4 10             	add    esp,0x10
c0013c28:	85 c0                	test   eax,eax
c0013c2a:	74 0a                	je     c0013c36 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013c2c:	83 ec 0c             	sub    esp,0xc
c0013c2f:	68 cf 10 02 c0       	push   0xc00210cf
c0013c34:	eb 34                	jmp    c0013c6a <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013c36:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013c3e:	83 ec 0c             	sub    esp,0xc
c0013c41:	6a 34                	push   0x34
c0013c43:	e8 66 3e ff ff       	call   c0007aae <malloc>
c0013c48:	59                   	pop    ecx
c0013c49:	89 c7                	mov    edi,eax
c0013c4b:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013c4f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c51:	56                   	push   esi
c0013c52:	57                   	push   edi
c0013c53:	6a 00                	push   0x0
c0013c55:	6a 34                	push   0x34
c0013c57:	53                   	push   ebx
c0013c58:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c5b:	83 c4 20             	add    esp,0x20
c0013c5e:	85 c0                	test   eax,eax
c0013c60:	74 17                	je     c0013c79 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013c62:	83 ec 0c             	sub    esp,0xc
c0013c65:	68 e6 10 02 c0       	push   0xc00210e6
c0013c6a:	e8 a8 cc ff ff       	call   c0010917 <KePanic(char const*)>
c0013c6f:	83 c4 10             	add    esp,0x10
c0013c72:	31 c0                	xor    eax,eax
c0013c74:	e9 31 02 00 00       	jmp    c0013eaa <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013c79:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013c7f:	75 e1                	jne    c0013c62 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013c81:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013c84:	85 c0                	test   eax,eax
c0013c86:	74 da                	je     c0013c62 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013c88:	52                   	push   edx
c0013c89:	31 d2                	xor    edx,edx
c0013c8b:	52                   	push   edx
c0013c8c:	50                   	push   eax
c0013c8d:	53                   	push   ebx
c0013c8e:	e8 53 74 ff ff       	call   c000b0e6 <File::seek(unsigned long long)>
c0013c93:	83 c4 10             	add    esp,0x10
c0013c96:	85 c0                	test   eax,eax
c0013c98:	75 c8                	jne    c0013c62 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013c9a:	83 ec 0c             	sub    esp,0xc
c0013c9d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013ca1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013ca5:	31 ed                	xor    ebp,ebp
c0013ca7:	0f af c2             	imul   eax,edx
c0013caa:	50                   	push   eax
c0013cab:	e8 fe 3d ff ff       	call   c0007aae <malloc>
c0013cb0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013cb2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013cb6:	89 34 24             	mov    DWORD PTR [esp],esi
c0013cb9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013cbd:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013cc1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013cc5:	0f af c2             	imul   eax,edx
c0013cc8:	99                   	cdq    
c0013cc9:	52                   	push   edx
c0013cca:	50                   	push   eax
c0013ccb:	53                   	push   ebx
c0013ccc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013ccf:	83 c4 20             	add    esp,0x20
c0013cd2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013cda:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013ce2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013cea:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013cf2:	0f b7 f5             	movzx  esi,bp
c0013cf5:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0013cf9:	0f 83 a7 00 00 00    	jae    c0013da6 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0013cff:	6b f6 28             	imul   esi,esi,0x28
c0013d02:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013d06:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013d09:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013d0d:	50                   	push   eax
c0013d0e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013d12:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013d16:	8b 16                	mov    edx,DWORD PTR [esi]
c0013d18:	6b c0 28             	imul   eax,eax,0x28
c0013d1b:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013d1f:	89 d0                	mov    eax,edx
c0013d21:	31 d2                	xor    edx,edx
c0013d23:	52                   	push   edx
c0013d24:	50                   	push   eax
c0013d25:	53                   	push   ebx
c0013d26:	e8 bb 73 ff ff       	call   c000b0e6 <File::seek(unsigned long long)>
c0013d2b:	83 c4 0c             	add    esp,0xc
c0013d2e:	6a 20                	push   0x20
c0013d30:	6a 00                	push   0x0
c0013d32:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013d36:	52                   	push   edx
c0013d37:	e8 b4 c7 fe ff       	call   c00004f0 <memset>
c0013d3c:	58                   	pop    eax
c0013d3d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d3f:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0013d43:	51                   	push   ecx
c0013d44:	8d 54 24 40          	lea    edx,[esp+0x40]
c0013d48:	52                   	push   edx
c0013d49:	6a 00                	push   0x0
c0013d4b:	6a 1f                	push   0x1f
c0013d4d:	53                   	push   ebx
c0013d4e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d51:	83 c4 18             	add    esp,0x18
c0013d54:	68 fd 10 02 c0       	push   0xc00210fd
c0013d59:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013d5d:	52                   	push   edx
c0013d5e:	e8 ed c9 fe ff       	call   c0000750 <strcmp>
c0013d63:	83 c4 10             	add    esp,0x10
c0013d66:	85 c0                	test   eax,eax
c0013d68:	75 0f                	jne    c0013d79 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0013d6a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013d6d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013d71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013d79:	50                   	push   eax
c0013d7a:	50                   	push   eax
c0013d7b:	68 05 11 02 c0       	push   0xc0021105
c0013d80:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0013d84:	50                   	push   eax
c0013d85:	e8 c6 c9 fe ff       	call   c0000750 <strcmp>
c0013d8a:	83 c4 10             	add    esp,0x10
c0013d8d:	85 c0                	test   eax,eax
c0013d8f:	75 0f                	jne    c0013da0 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0013d91:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013d94:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013da0:	45                   	inc    ebp
c0013da1:	e9 4c ff ff ff       	jmp    c0013cf2 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0013da6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013dab:	75 10                	jne    c0013dbd <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0013dad:	83 ec 0c             	sub    esp,0xc
c0013db0:	68 0d 11 02 c0       	push   0xc002110d
c0013db5:	e8 5d cb ff ff       	call   c0010917 <KePanic(char const*)>
c0013dba:	83 c4 10             	add    esp,0x10
c0013dbd:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013dc2:	75 10                	jne    c0013dd4 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0013dc4:	83 ec 0c             	sub    esp,0xc
c0013dc7:	68 0d 11 02 c0       	push   0xc002110d
c0013dcc:	e8 46 cb ff ff       	call   c0010917 <KePanic(char const*)>
c0013dd1:	83 c4 10             	add    esp,0x10
c0013dd4:	31 d2                	xor    edx,edx
c0013dd6:	50                   	push   eax
c0013dd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ddb:	52                   	push   edx
c0013ddc:	50                   	push   eax
c0013ddd:	53                   	push   ebx
c0013dde:	e8 03 73 ff ff       	call   c000b0e6 <File::seek(unsigned long long)>
c0013de3:	5a                   	pop    edx
c0013de4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013de8:	e8 c1 3c ff ff       	call   c0007aae <malloc>
c0013ded:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013df1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013df5:	31 c9                	xor    ecx,ecx
c0013df7:	5e                   	pop    esi
c0013df8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dfa:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0013dfe:	55                   	push   ebp
c0013dff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e03:	51                   	push   ecx
c0013e04:	52                   	push   edx
c0013e05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013e09:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013e0d:	53                   	push   ebx
c0013e0e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e11:	83 c4 14             	add    esp,0x14
c0013e14:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013e18:	e8 91 3c ff ff       	call   c0007aae <malloc>
c0013e1d:	89 c6                	mov    esi,eax
c0013e1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e21:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013e24:	56                   	push   esi
c0013e25:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013e29:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013e2d:	51                   	push   ecx
c0013e2e:	52                   	push   edx
c0013e2f:	53                   	push   ebx
c0013e30:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013e37:	8b 15 40 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028140
c0013e3d:	83 c4 1c             	add    esp,0x1c
c0013e40:	c1 e8 04             	shr    eax,0x4
c0013e43:	89 04 95 c0 7f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8040],eax
c0013e4a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e4e:	31 d2                	xor    edx,edx
c0013e50:	52                   	push   edx
c0013e51:	50                   	push   eax
c0013e52:	53                   	push   ebx
c0013e53:	e8 8e 72 ff ff       	call   c000b0e6 <File::seek(unsigned long long)>
c0013e58:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013e5a:	31 d2                	xor    edx,edx
c0013e5c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013e5f:	56                   	push   esi
c0013e60:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013e64:	52                   	push   edx
c0013e65:	50                   	push   eax
c0013e66:	53                   	push   ebx
c0013e67:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013e6a:	83 c4 14             	add    esp,0x14
c0013e6d:	53                   	push   ebx
c0013e6e:	e8 13 72 ff ff       	call   c000b086 <File::close()>
c0013e73:	5d                   	pop    ebp
c0013e74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013e78:	e8 41 3c ff ff       	call   c0007abe <free>
c0013e7d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013e80:	e8 39 3c ff ff       	call   c0007abe <free>
c0013e85:	a1 40 81 02 c0       	mov    eax,ds:0xc0028140
c0013e8a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013e8e:	8d 50 01             	lea    edx,[eax+0x1]
c0013e91:	89 0c 85 c0 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f40],ecx
c0013e98:	89 34 85 40 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7fc0],esi
c0013e9f:	89 15 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edx
c0013ea5:	83 c4 10             	add    esp,0x10
c0013ea8:	b0 01                	mov    al,0x1
c0013eaa:	83 c4 5c             	add    esp,0x5c
c0013ead:	5b                   	pop    ebx
c0013eae:	5e                   	pop    esi
c0013eaf:	5f                   	pop    edi
c0013eb0:	5d                   	pop    ebp
c0013eb1:	c3                   	ret    

c0013eb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0013eb2:	55                   	push   ebp
c0013eb3:	57                   	push   edi
c0013eb4:	56                   	push   esi
c0013eb5:	53                   	push   ebx
c0013eb6:	81 ec 68 03 00 00    	sub    esp,0x368
c0013ebc:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0013ec3:	8b 1d 90 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028190
c0013ec9:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0013ecd:	68 14 01 00 00       	push   0x114
c0013ed2:	e8 d7 3b ff ff       	call   c0007aae <malloc>
c0013ed7:	83 c4 0c             	add    esp,0xc
c0013eda:	89 c5                	mov    ebp,eax
c0013edc:	53                   	push   ebx
c0013edd:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0013ee4:	50                   	push   eax
c0013ee5:	e8 82 70 ff ff       	call   c000af6c <File::File(char const*, Process*)>
c0013eea:	5e                   	pop    esi
c0013eeb:	5f                   	pop    edi
c0013eec:	6a 01                	push   0x1
c0013eee:	55                   	push   ebp
c0013eef:	e8 34 71 ff ff       	call   c000b028 <File::open(FileOpenMode)>
c0013ef4:	83 c4 10             	add    esp,0x10
c0013ef7:	85 c0                	test   eax,eax
c0013ef9:	0f 85 aa 06 00 00    	jne    c00145a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013eff:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0013f07:	83 ec 0c             	sub    esp,0xc
c0013f0a:	6a 34                	push   0x34
c0013f0c:	e8 9d 3b ff ff       	call   c0007aae <malloc>
c0013f11:	5b                   	pop    ebx
c0013f12:	89 c7                	mov    edi,eax
c0013f14:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0013f18:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013f1b:	53                   	push   ebx
c0013f1c:	57                   	push   edi
c0013f1d:	6a 00                	push   0x0
c0013f1f:	6a 34                	push   0x34
c0013f21:	55                   	push   ebp
c0013f22:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013f25:	83 c4 20             	add    esp,0x20
c0013f28:	85 c0                	test   eax,eax
c0013f2a:	0f 85 79 06 00 00    	jne    c00145a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013f30:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013f36:	0f 85 6d 06 00 00    	jne    c00145a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013f3c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013f3f:	85 c0                	test   eax,eax
c0013f41:	0f 84 62 06 00 00    	je     c00145a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013f47:	31 d2                	xor    edx,edx
c0013f49:	51                   	push   ecx
c0013f4a:	52                   	push   edx
c0013f4b:	50                   	push   eax
c0013f4c:	55                   	push   ebp
c0013f4d:	e8 94 71 ff ff       	call   c000b0e6 <File::seek(unsigned long long)>
c0013f52:	83 c4 10             	add    esp,0x10
c0013f55:	85 c0                	test   eax,eax
c0013f57:	0f 85 4c 06 00 00    	jne    c00145a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013f5d:	83 ec 0c             	sub    esp,0xc
c0013f60:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0013f63:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013f67:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013f6b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013f6f:	0f af c2             	imul   eax,edx
c0013f72:	50                   	push   eax
c0013f73:	e8 36 3b ff ff       	call   c0007aae <malloc>
c0013f78:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013f7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013f7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f86:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013f8a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013f8e:	0f af c2             	imul   eax,edx
c0013f91:	99                   	cdq    
c0013f92:	52                   	push   edx
c0013f93:	50                   	push   eax
c0013f94:	55                   	push   ebp
c0013f95:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f98:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0013f9b:	83 c4 20             	add    esp,0x20
c0013f9e:	85 c0                	test   eax,eax
c0013fa0:	0f 84 03 06 00 00    	je     c00145a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013fa6:	52                   	push   edx
c0013fa7:	31 d2                	xor    edx,edx
c0013fa9:	52                   	push   edx
c0013faa:	50                   	push   eax
c0013fab:	55                   	push   ebp
c0013fac:	e8 35 71 ff ff       	call   c000b0e6 <File::seek(unsigned long long)>
c0013fb1:	83 c4 10             	add    esp,0x10
c0013fb4:	85 c0                	test   eax,eax
c0013fb6:	0f 85 ed 05 00 00    	jne    c00145a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013fbc:	83 ec 0c             	sub    esp,0xc
c0013fbf:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0013fc3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0013fc7:	31 f6                	xor    esi,esi
c0013fc9:	0f af c2             	imul   eax,edx
c0013fcc:	50                   	push   eax
c0013fcd:	e8 dc 3a ff ff       	call   c0007aae <malloc>
c0013fd2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013fd5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013fd9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013fdc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013fe0:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0013fe4:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0013fe8:	0f af c2             	imul   eax,edx
c0013feb:	99                   	cdq    
c0013fec:	52                   	push   edx
c0013fed:	50                   	push   eax
c0013fee:	55                   	push   ebp
c0013fef:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013ff2:	83 c4 20             	add    esp,0x20
c0013ff5:	0f b7 de             	movzx  ebx,si
c0013ff8:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0013ffc:	0f 83 87 00 00 00    	jae    c0014089 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0014002:	c1 e3 05             	shl    ebx,0x5
c0014005:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0014009:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001400c:	75 75                	jne    c0014083 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001400e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0014011:	31 d2                	xor    edx,edx
c0014013:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014017:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001401a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001401e:	50                   	push   eax
c001401f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014022:	52                   	push   edx
c0014023:	50                   	push   eax
c0014024:	55                   	push   ebp
c0014025:	e8 bc 70 ff ff       	call   c000b0e6 <File::seek(unsigned long long)>
c001402a:	83 c4 10             	add    esp,0x10
c001402d:	85 c0                	test   eax,eax
c001402f:	0f 85 74 05 00 00    	jne    c00145a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014035:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001403c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001403f:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0014043:	31 d2                	xor    edx,edx
c0014045:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014049:	83 ec 0c             	sub    esp,0xc
c001404c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014050:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014057:	50                   	push   eax
c0014058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001405c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014060:	52                   	push   edx
c0014061:	50                   	push   eax
c0014062:	55                   	push   ebp
c0014063:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014066:	83 c4 1c             	add    esp,0x1c
c0014069:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001406c:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001406f:	50                   	push   eax
c0014070:	6a 00                	push   0x0
c0014072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014076:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001407a:	50                   	push   eax
c001407b:	e8 70 c4 fe ff       	call   c00004f0 <memset>
c0014080:	83 c4 10             	add    esp,0x10
c0014083:	46                   	inc    esi
c0014084:	e9 6c ff ff ff       	jmp    c0013ff5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0014089:	53                   	push   ebx
c001408a:	31 db                	xor    ebx,ebx
c001408c:	68 00 01 00 00       	push   0x100
c0014091:	6a 00                	push   0x0
c0014093:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014097:	50                   	push   eax
c0014098:	e8 53 c4 fe ff       	call   c00004f0 <memset>
c001409d:	83 c4 0c             	add    esp,0xc
c00140a0:	68 00 01 00 00       	push   0x100
c00140a5:	6a 00                	push   0x0
c00140a7:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00140ae:	50                   	push   eax
c00140af:	e8 3c c4 fe ff       	call   c00004f0 <memset>
c00140b4:	83 c4 10             	add    esp,0x10
c00140b7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00140bf:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00140c7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00140cf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00140d7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00140df:	0f b7 f3             	movzx  esi,bx
c00140e2:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c00140e6:	0f 83 2d 01 00 00    	jae    c0014219 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00140ec:	6b f6 28             	imul   esi,esi,0x28
c00140ef:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00140f3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00140f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00140fa:	52                   	push   edx
c00140fb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00140ff:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0014103:	8b 06                	mov    eax,DWORD PTR [esi]
c0014105:	6b d2 28             	imul   edx,edx,0x28
c0014108:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001410c:	31 d2                	xor    edx,edx
c001410e:	52                   	push   edx
c001410f:	50                   	push   eax
c0014110:	55                   	push   ebp
c0014111:	e8 d0 6f ff ff       	call   c000b0e6 <File::seek(unsigned long long)>
c0014116:	83 c4 0c             	add    esp,0xc
c0014119:	6a 20                	push   0x20
c001411b:	6a 00                	push   0x0
c001411d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014124:	51                   	push   ecx
c0014125:	e8 c6 c3 fe ff       	call   c00004f0 <memset>
c001412a:	59                   	pop    ecx
c001412b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001412e:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014132:	52                   	push   edx
c0014133:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001413a:	51                   	push   ecx
c001413b:	6a 00                	push   0x0
c001413d:	6a 1f                	push   0x1f
c001413f:	55                   	push   ebp
c0014140:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014143:	83 c4 1c             	add    esp,0x1c
c0014146:	6a 09                	push   0x9
c0014148:	68 27 11 02 c0       	push   0xc0021127
c001414d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014154:	51                   	push   ecx
c0014155:	e8 26 c2 fe ff       	call   c0000380 <memcmp>
c001415a:	83 c4 10             	add    esp,0x10
c001415d:	85 c0                	test   eax,eax
c001415f:	75 21                	jne    c0014182 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0014161:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014165:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014169:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001416d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014171:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014174:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001417b:	89 d0                	mov    eax,edx
c001417d:	40                   	inc    eax
c001417e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014182:	50                   	push   eax
c0014183:	6a 09                	push   0x9
c0014185:	68 31 11 02 c0       	push   0xc0021131
c001418a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014191:	50                   	push   eax
c0014192:	e8 e9 c1 fe ff       	call   c0000380 <memcmp>
c0014197:	83 c4 10             	add    esp,0x10
c001419a:	85 c0                	test   eax,eax
c001419c:	75 21                	jne    c00141bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001419e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00141a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00141aa:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c00141ae:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00141b1:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00141b8:	89 d0                	mov    eax,edx
c00141ba:	40                   	inc    eax
c00141bb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00141bf:	50                   	push   eax
c00141c0:	50                   	push   eax
c00141c1:	68 fd 10 02 c0       	push   0xc00210fd
c00141c6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00141cd:	50                   	push   eax
c00141ce:	e8 7d c5 fe ff       	call   c0000750 <strcmp>
c00141d3:	83 c4 10             	add    esp,0x10
c00141d6:	85 c0                	test   eax,eax
c00141d8:	75 0f                	jne    c00141e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00141da:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00141dd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00141e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00141e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00141e9:	50                   	push   eax
c00141ea:	50                   	push   eax
c00141eb:	68 05 11 02 c0       	push   0xc0021105
c00141f0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00141f7:	50                   	push   eax
c00141f8:	e8 53 c5 fe ff       	call   c0000750 <strcmp>
c00141fd:	83 c4 10             	add    esp,0x10
c0014200:	85 c0                	test   eax,eax
c0014202:	75 0f                	jne    c0014213 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0014204:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014207:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001420b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001420f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014213:	43                   	inc    ebx
c0014214:	e9 c6 fe ff ff       	jmp    c00140df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0014219:	31 d2                	xor    edx,edx
c001421b:	50                   	push   eax
c001421c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014220:	52                   	push   edx
c0014221:	50                   	push   eax
c0014222:	55                   	push   ebp
c0014223:	e8 be 6e ff ff       	call   c000b0e6 <File::seek(unsigned long long)>
c0014228:	58                   	pop    eax
c0014229:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001422d:	e8 7c 38 ff ff       	call   c0007aae <malloc>
c0014232:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014235:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014239:	31 d2                	xor    edx,edx
c001423b:	58                   	pop    eax
c001423c:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014240:	53                   	push   ebx
c0014241:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0014245:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014249:	52                   	push   edx
c001424a:	50                   	push   eax
c001424b:	55                   	push   ebp
c001424c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001424f:	83 c4 14             	add    esp,0x14
c0014252:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014256:	e8 53 38 ff ff       	call   c0007aae <malloc>
c001425b:	31 d2                	xor    edx,edx
c001425d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014261:	83 c4 0c             	add    esp,0xc
c0014264:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014268:	52                   	push   edx
c0014269:	50                   	push   eax
c001426a:	55                   	push   ebp
c001426b:	e8 76 6e ff ff       	call   c000b0e6 <File::seek(unsigned long long)>
c0014270:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014273:	31 d2                	xor    edx,edx
c0014275:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014278:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001427c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014280:	52                   	push   edx
c0014281:	50                   	push   eax
c0014282:	55                   	push   ebp
c0014283:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014286:	83 c4 20             	add    esp,0x20
c0014289:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c001428e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014296:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001429a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001429e:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00142a2:	0f 84 05 03 00 00    	je     c00145ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c00142a8:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00142af:	31 d2                	xor    edx,edx
c00142b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00142b5:	c1 e8 03             	shr    eax,0x3
c00142b8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00142bc:	51                   	push   ecx
c00142bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142c1:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00142c5:	52                   	push   edx
c00142c6:	50                   	push   eax
c00142c7:	55                   	push   ebp
c00142c8:	e8 19 6e ff ff       	call   c000b0e6 <File::seek(unsigned long long)>
c00142cd:	5b                   	pop    ebx
c00142ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142d2:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00142d9:	e8 d0 37 ff ff       	call   c0007aae <malloc>
c00142de:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00142e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00142e5:	31 d2                	xor    edx,edx
c00142e7:	5e                   	pop    esi
c00142e8:	8d 44 24 58          	lea    eax,[esp+0x58]
c00142ec:	50                   	push   eax
c00142ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00142f5:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00142fc:	52                   	push   edx
c00142fd:	50                   	push   eax
c00142fe:	55                   	push   ebp
c00142ff:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014302:	83 c4 20             	add    esp,0x20
c0014305:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001430d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0014311:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0014315:	0f 8d 76 02 00 00    	jge    c0014591 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c001431b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001431f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014323:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0014328:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c001432b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001432f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014333:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0014337:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001433b:	c1 e8 08             	shr    eax,0x8
c001433e:	89 c6                	mov    esi,eax
c0014340:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014344:	c1 e6 04             	shl    esi,0x4
c0014347:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001434b:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c001434e:	85 db                	test   ebx,ebx
c0014350:	0f 85 b3 00 00 00    	jne    c0014409 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014356:	83 ec 0c             	sub    esp,0xc
c0014359:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001435d:	03 06                	add    eax,DWORD PTR [esi]
c001435f:	50                   	push   eax
c0014360:	e8 40 f8 ff ff       	call   c0013ba5 <Thr::getAddressOfKernelSymbol(char const*)>
c0014365:	83 c4 10             	add    esp,0x10
c0014368:	89 c3                	mov    ebx,eax
c001436a:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c001436f:	85 c0                	test   eax,eax
c0014371:	0f 85 92 00 00 00    	jne    c0014409 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014377:	83 ec 0c             	sub    esp,0xc
c001437a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001437e:	03 06                	add    eax,DWORD PTR [esi]
c0014380:	50                   	push   eax
c0014381:	e8 7e c7 ff ff       	call   c0010b04 <KeResolveCompatibilitySymbol(char*)>
c0014386:	83 c4 10             	add    esp,0x10
c0014389:	89 c3                	mov    ebx,eax
c001438b:	85 c0                	test   eax,eax
c001438d:	75 7a                	jne    c0014409 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c001438f:	51                   	push   ecx
c0014390:	51                   	push   ecx
c0014391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014395:	03 06                	add    eax,DWORD PTR [esi]
c0014397:	50                   	push   eax
c0014398:	68 3b 11 02 c0       	push   0xc002113b
c001439d:	e8 48 66 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c00143a2:	58                   	pop    eax
c00143a3:	5a                   	pop    edx
c00143a4:	68 55 11 02 c0       	push   0xc0021155
c00143a9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00143b0:	50                   	push   eax
c00143b1:	e8 8a c2 fe ff       	call   c0000640 <strcpy>
c00143b6:	59                   	pop    ecx
c00143b7:	58                   	pop    eax
c00143b8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00143bc:	03 06                	add    eax,DWORD PTR [esi]
c00143be:	50                   	push   eax
c00143bf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00143c6:	50                   	push   eax
c00143c7:	e8 74 c4 fe ff       	call   c0000840 <strcat>
c00143cc:	58                   	pop    eax
c00143cd:	5a                   	pop    edx
c00143ce:	68 eb 11 02 c0       	push   0xc00211eb
c00143d3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00143da:	50                   	push   eax
c00143db:	e8 60 c4 fe ff       	call   c0000840 <strcat>
c00143e0:	83 c4 10             	add    esp,0x10
c00143e3:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00143e8:	0f 84 5d 01 00 00    	je     c001454b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00143ee:	83 ec 0c             	sub    esp,0xc
c00143f1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00143f8:	50                   	push   eax
c00143f9:	e8 19 c5 ff ff       	call   c0010917 <KePanic(char const*)>
c00143fe:	83 c4 10             	add    esp,0x10
c0014401:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0014405:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0014409:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001440e:	83 f8 01             	cmp    eax,0x1
c0014411:	0f 85 8f 00 00 00    	jne    c00144a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0014417:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001441e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0014422:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014426:	01 ce                	add    esi,ecx
c0014428:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014430:	0f 94 c0             	sete   al
c0014433:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001443b:	0f 94 c2             	sete   dl
c001443e:	09 c2                	or     edx,eax
c0014440:	8b 06                	mov    eax,DWORD PTR [esi]
c0014442:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014447:	0f b6 d2             	movzx  edx,dl
c001444a:	74 41                	je     c001448d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c001444c:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c001444f:	85 d2                	test   edx,edx
c0014451:	75 15                	jne    c0014468 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0014453:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014457:	66 83 f8 0c          	cmp    ax,0xc
c001445b:	76 05                	jbe    c0014462 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c001445d:	b8 0c 00 00 00       	mov    eax,0xc
c0014462:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014466:	76 37                	jbe    c001449f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014468:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001446c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014471:	0f 84 d4 00 00 00    	je     c001454b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014477:	83 ec 0c             	sub    esp,0xc
c001447a:	68 6c 11 02 c0       	push   0xc002116c
c001447f:	e8 93 c4 ff ff       	call   c0010917 <KePanic(char const*)>
c0014484:	83 c4 10             	add    esp,0x10
c0014487:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001448b:	eb 12                	jmp    c001449f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001448d:	01 c1                	add    ecx,eax
c001448f:	85 d2                	test   edx,edx
c0014491:	75 0c                	jne    c001449f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014493:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014497:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001449b:	77 02                	ja     c001449f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001449d:	01 d9                	add    ecx,ebx
c001449f:	89 0e                	mov    DWORD PTR [esi],ecx
c00144a1:	e9 e2 00 00 00       	jmp    c0014588 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00144a6:	83 f8 02             	cmp    eax,0x2
c00144a9:	75 77                	jne    c0014522 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c00144ab:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00144b2:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c00144b6:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c00144ba:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00144c2:	74 21                	je     c00144e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00144c4:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00144cc:	74 17                	je     c00144e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00144ce:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c00144d2:	b8 0a 00 00 00       	mov    eax,0xa
c00144d7:	83 fa 0e             	cmp    edx,0xe
c00144da:	77 03                	ja     c00144df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c00144dc:	8d 42 fc             	lea    eax,[edx-0x4]
c00144df:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00144e3:	76 17                	jbe    c00144fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c00144e5:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00144ea:	74 5f                	je     c001454b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00144ec:	83 ec 0c             	sub    esp,0xc
c00144ef:	68 88 11 02 c0       	push   0xc0021188
c00144f4:	e8 1e c4 ff ff       	call   c0010917 <KePanic(char const*)>
c00144f9:	83 c4 10             	add    esp,0x10
c00144fc:	8b 06                	mov    eax,DWORD PTR [esi]
c00144fe:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014503:	74 13                	je     c0014518 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0014505:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014509:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0014510:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0014514:	01 d0                	add    eax,edx
c0014516:	eb 04                	jmp    c001451c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0014518:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001451c:	01 c3                	add    ebx,eax
c001451e:	89 1e                	mov    DWORD PTR [esi],ebx
c0014520:	eb 66                	jmp    c0014588 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014522:	52                   	push   edx
c0014523:	52                   	push   edx
c0014524:	50                   	push   eax
c0014525:	68 a4 11 02 c0       	push   0xc00211a4
c001452a:	e8 bb 64 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c001452f:	83 c4 10             	add    esp,0x10
c0014532:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014537:	74 12                	je     c001454b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014539:	83 ec 0c             	sub    esp,0xc
c001453c:	68 af 11 02 c0       	push   0xc00211af
c0014541:	e8 d1 c3 ff ff       	call   c0010917 <KePanic(char const*)>
c0014546:	83 c4 10             	add    esp,0x10
c0014549:	eb 3d                	jmp    c0014588 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c001454b:	83 ec 0c             	sub    esp,0xc
c001454e:	55                   	push   ebp
c001454f:	e8 32 6b ff ff       	call   c000b086 <File::close()>
c0014554:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014557:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001455a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001455d:	59                   	pop    ecx
c001455e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014562:	e8 57 35 ff ff       	call   c0007abe <free>
c0014567:	5b                   	pop    ebx
c0014568:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001456c:	e8 4d 35 ff ff       	call   c0007abe <free>
c0014571:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014574:	e8 45 35 ff ff       	call   c0007abe <free>
c0014579:	5e                   	pop    esi
c001457a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001457e:	e8 3b 35 ff ff       	call   c0007abe <free>
c0014583:	83 c4 10             	add    esp,0x10
c0014586:	eb 21                	jmp    c00145a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014588:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001458c:	e9 7c fd ff ff       	jmp    c001430d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0014591:	83 ec 0c             	sub    esp,0xc
c0014594:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014598:	e8 21 35 ff ff       	call   c0007abe <free>
c001459d:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00145a1:	83 c4 10             	add    esp,0x10
c00145a4:	e9 f1 fc ff ff       	jmp    c001429a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c00145a9:	31 c0                	xor    eax,eax
c00145ab:	eb 33                	jmp    c00145e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c00145ad:	83 ec 0c             	sub    esp,0xc
c00145b0:	55                   	push   ebp
c00145b1:	e8 d0 6a ff ff       	call   c000b086 <File::close()>
c00145b6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00145b9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00145bc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00145bf:	58                   	pop    eax
c00145c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00145c4:	e8 f5 34 ff ff       	call   c0007abe <free>
c00145c9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00145cc:	e8 ed 34 ff ff       	call   c0007abe <free>
c00145d1:	5a                   	pop    edx
c00145d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145d6:	e8 e3 34 ff ff       	call   c0007abe <free>
c00145db:	83 c4 10             	add    esp,0x10
c00145de:	b0 01                	mov    al,0x1
c00145e0:	81 c4 5c 03 00 00    	add    esp,0x35c
c00145e6:	5b                   	pop    ebx
c00145e7:	5e                   	pop    esi
c00145e8:	5f                   	pop    edi
c00145e9:	5d                   	pop    ebp
c00145ea:	c3                   	ret    

c00145eb <Thr::getDriverBaseFromAddress(unsigned long)>:
c00145eb:	56                   	push   esi
c00145ec:	31 d2                	xor    edx,edx
c00145ee:	53                   	push   ebx
c00145ef:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c00145f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00145f9:	39 d3                	cmp    ebx,edx
c00145fb:	7e 1b                	jle    c0014618 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00145fd:	8b 04 95 c0 7b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8440]
c0014604:	39 c8                	cmp    eax,ecx
c0014606:	77 0d                	ja     c0014615 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014608:	8b 34 95 c0 79 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8640]
c001460f:	01 c6                	add    esi,eax
c0014611:	39 ce                	cmp    esi,ecx
c0014613:	77 05                	ja     c001461a <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014615:	42                   	inc    edx
c0014616:	eb e1                	jmp    c00145f9 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014618:	31 c0                	xor    eax,eax
c001461a:	5b                   	pop    ebx
c001461b:	5e                   	pop    esi
c001461c:	c3                   	ret    

c001461d <Thr::getDriverNameFromAddress(unsigned long)>:
c001461d:	53                   	push   ebx
c001461e:	31 c0                	xor    eax,eax
c0014620:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014624:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c001462a:	39 c3                	cmp    ebx,eax
c001462c:	7e 22                	jle    c0014650 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001462e:	8b 14 85 c0 7b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8440]
c0014635:	39 ca                	cmp    edx,ecx
c0014637:	77 14                	ja     c001464d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014639:	03 14 85 c0 79 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8640]
c0014640:	39 ca                	cmp    edx,ecx
c0014642:	76 09                	jbe    c001464d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014644:	8b 04 85 c0 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8240]
c001464b:	eb 05                	jmp    c0014652 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001464d:	40                   	inc    eax
c001464e:	eb da                	jmp    c001462a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0014650:	31 c0                	xor    eax,eax
c0014652:	5b                   	pop    ebx
c0014653:	c3                   	ret    

c0014654 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0014654:	53                   	push   ebx
c0014655:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0014659:	53                   	push   ebx
c001465a:	e8 8c ff ff ff       	call   c00145eb <Thr::getDriverBaseFromAddress(unsigned long)>
c001465f:	5a                   	pop    edx
c0014660:	31 d2                	xor    edx,edx
c0014662:	85 c0                	test   eax,eax
c0014664:	74 04                	je     c001466a <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0014666:	89 da                	mov    edx,ebx
c0014668:	29 c2                	sub    edx,eax
c001466a:	89 d0                	mov    eax,edx
c001466c:	5b                   	pop    ebx
c001466d:	c3                   	ret    

c001466e <Thr::loadDLL(char const*, bool)>:
c001466e:	55                   	push   ebp
c001466f:	57                   	push   edi
c0014670:	56                   	push   esi
c0014671:	53                   	push   ebx
c0014672:	81 ec 34 01 00 00    	sub    esp,0x134
c0014678:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001467f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0014686:	56                   	push   esi
c0014687:	68 c7 11 02 c0       	push   0xc00211c7
c001468c:	e8 59 63 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0014691:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014698:	e8 11 34 ff ff       	call   c0007aae <malloc>
c001469d:	83 c4 0c             	add    esp,0xc
c00146a0:	89 c3                	mov    ebx,eax
c00146a2:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00146a8:	56                   	push   esi
c00146a9:	50                   	push   eax
c00146aa:	e8 bd 68 ff ff       	call   c000af6c <File::File(char const*, Process*)>
c00146af:	83 c4 10             	add    esp,0x10
c00146b2:	85 db                	test   ebx,ebx
c00146b4:	75 3c                	jne    c00146f2 <Thr::loadDLL(char const*, bool)+0x84>
c00146b6:	89 f8                	mov    eax,edi
c00146b8:	84 c0                	test   al,al
c00146ba:	0f 84 d2 01 00 00    	je     c0014892 <Thr::loadDLL(char const*, bool)+0x224>
c00146c0:	55                   	push   ebp
c00146c1:	55                   	push   ebp
c00146c2:	68 d8 11 02 c0       	push   0xc00211d8
c00146c7:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00146cb:	55                   	push   ebp
c00146cc:	e8 6f bf fe ff       	call   c0000640 <strcpy>
c00146d1:	58                   	pop    eax
c00146d2:	5a                   	pop    edx
c00146d3:	56                   	push   esi
c00146d4:	55                   	push   ebp
c00146d5:	e8 66 c1 fe ff       	call   c0000840 <strcat>
c00146da:	59                   	pop    ecx
c00146db:	58                   	pop    eax
c00146dc:	68 eb 11 02 c0       	push   0xc00211eb
c00146e1:	55                   	push   ebp
c00146e2:	e8 59 c1 fe ff       	call   c0000840 <strcat>
c00146e7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00146ea:	e8 28 c2 ff ff       	call   c0010917 <KePanic(char const*)>
c00146ef:	83 c4 10             	add    esp,0x10
c00146f2:	51                   	push   ecx
c00146f3:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00146f7:	50                   	push   eax
c00146f8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00146fc:	50                   	push   eax
c00146fd:	53                   	push   ebx
c00146fe:	e8 d1 6b ff ff       	call   c000b2d4 <File::stat(unsigned long long*, bool*)>
c0014703:	83 c4 10             	add    esp,0x10
c0014706:	85 db                	test   ebx,ebx
c0014708:	74 0c                	je     c0014716 <Thr::loadDLL(char const*, bool)+0xa8>
c001470a:	83 ec 0c             	sub    esp,0xc
c001470d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001470f:	53                   	push   ebx
c0014710:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014713:	83 c4 10             	add    esp,0x10
c0014716:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001471b:	75 0a                	jne    c0014727 <Thr::loadDLL(char const*, bool)+0xb9>
c001471d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014721:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0014725:	75 3c                	jne    c0014763 <Thr::loadDLL(char const*, bool)+0xf5>
c0014727:	89 f8                	mov    eax,edi
c0014729:	84 c0                	test   al,al
c001472b:	0f 84 49 01 00 00    	je     c001487a <Thr::loadDLL(char const*, bool)+0x20c>
c0014731:	51                   	push   ecx
c0014732:	51                   	push   ecx
c0014733:	68 d8 11 02 c0       	push   0xc00211d8
c0014738:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001473c:	53                   	push   ebx
c001473d:	e8 fe be fe ff       	call   c0000640 <strcpy>
c0014742:	5d                   	pop    ebp
c0014743:	58                   	pop    eax
c0014744:	56                   	push   esi
c0014745:	53                   	push   ebx
c0014746:	e8 f5 c0 fe ff       	call   c0000840 <strcat>
c001474b:	58                   	pop    eax
c001474c:	5a                   	pop    edx
c001474d:	68 eb 11 02 c0       	push   0xc00211eb
c0014752:	53                   	push   ebx
c0014753:	e8 e8 c0 fe ff       	call   c0000840 <strcat>
c0014758:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001475b:	e8 b7 c1 ff ff       	call   c0010917 <KePanic(char const*)>
c0014760:	83 c4 10             	add    esp,0x10
c0014763:	52                   	push   edx
c0014764:	6a 03                	push   0x3
c0014766:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001476a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001476e:	05 ff 0f 00 00       	add    eax,0xfff
c0014773:	83 d2 00             	adc    edx,0x0
c0014776:	0f ac d0 0c          	shrd   eax,edx,0xc
c001477a:	50                   	push   eax
c001477b:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0014781:	e8 84 56 ff ff       	call   c0009e0a <VAS::allocatePages(int, int)>
c0014786:	59                   	pop    ecx
c0014787:	89 c3                	mov    ebx,eax
c0014789:	5d                   	pop    ebp
c001478a:	50                   	push   eax
c001478b:	68 f2 fc 01 c0       	push   0xc001fcf2
c0014790:	e8 55 62 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0014795:	89 34 24             	mov    DWORD PTR [esp],esi
c0014798:	e8 d3 bd fe ff       	call   c0000570 <strlen>
c001479d:	8b 2d a0 79 02 c0    	mov    ebp,DWORD PTR ds:0xc00279a0
c00147a3:	40                   	inc    eax
c00147a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00147a7:	e8 02 33 ff ff       	call   c0007aae <malloc>
c00147ac:	89 04 ad c0 7d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd8240],eax
c00147b3:	58                   	pop    eax
c00147b4:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c00147b9:	5a                   	pop    edx
c00147ba:	56                   	push   esi
c00147bb:	ff 34 85 c0 7d 02 c0 	push   DWORD PTR [eax*4-0x3ffd8240]
c00147c2:	e8 79 be fe ff       	call   c0000640 <strcpy>
c00147c7:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c00147cc:	8d 50 01             	lea    edx,[eax+0x1]
c00147cf:	89 1c 85 c0 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8440],ebx
c00147d6:	89 15 a0 79 02 c0    	mov    DWORD PTR ds:0xc00279a0,edx
c00147dc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00147e0:	83 c4 0c             	add    esp,0xc
c00147e3:	89 14 85 c0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8640],edx
c00147ea:	6a 01                	push   0x1
c00147ec:	53                   	push   ebx
c00147ed:	56                   	push   esi
c00147ee:	e8 bf f6 ff ff       	call   c0013eb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00147f3:	83 c4 10             	add    esp,0x10
c00147f6:	0f b6 c0             	movzx  eax,al
c00147f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00147fd:	85 c0                	test   eax,eax
c00147ff:	0f 85 89 00 00 00    	jne    c001488e <Thr::loadDLL(char const*, bool)+0x220>
c0014805:	89 f8                	mov    eax,edi
c0014807:	84 c0                	test   al,al
c0014809:	74 73                	je     c001487e <Thr::loadDLL(char const*, bool)+0x210>
c001480b:	83 ec 0c             	sub    esp,0xc
c001480e:	68 ed 11 02 c0       	push   0xc00211ed
c0014813:	e8 ff c0 ff ff       	call   c0010917 <KePanic(char const*)>
c0014818:	83 c4 10             	add    esp,0x10
c001481b:	eb 61                	jmp    c001487e <Thr::loadDLL(char const*, bool)+0x210>
c001481d:	50                   	push   eax
c001481e:	50                   	push   eax
c001481f:	89 e8                	mov    eax,ebp
c0014821:	c1 e0 0c             	shl    eax,0xc
c0014824:	01 d8                	add    eax,ebx
c0014826:	50                   	push   eax
c0014827:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001482d:	e8 e8 50 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c0014832:	83 c4 10             	add    esp,0x10
c0014835:	8b 00                	mov    eax,DWORD PTR [eax]
c0014837:	a8 60                	test   al,0x60
c0014839:	75 11                	jne    c001484c <Thr::loadDLL(char const*, bool)+0x1de>
c001483b:	83 ec 0c             	sub    esp,0xc
c001483e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014843:	50                   	push   eax
c0014844:	e8 01 35 ff ff       	call   c0007d4a <Phys::freePage(unsigned long)>
c0014849:	83 c4 10             	add    esp,0x10
c001484c:	45                   	inc    ebp
c001484d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014851:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014855:	05 ff 0f 00 00       	add    eax,0xfff
c001485a:	bf 00 00 00 00       	mov    edi,0x0
c001485f:	83 d2 00             	adc    edx,0x0
c0014862:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014866:	c1 ea 0c             	shr    edx,0xc
c0014869:	39 c5                	cmp    ebp,eax
c001486b:	89 d1                	mov    ecx,edx
c001486d:	89 f8                	mov    eax,edi
c001486f:	19 c8                	sbb    eax,ecx
c0014871:	72 aa                	jb     c001481d <Thr::loadDLL(char const*, bool)+0x1af>
c0014873:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014878:	75 18                	jne    c0014892 <Thr::loadDLL(char const*, bool)+0x224>
c001487a:	31 db                	xor    ebx,ebx
c001487c:	eb 14                	jmp    c0014892 <Thr::loadDLL(char const*, bool)+0x224>
c001487e:	83 ec 0c             	sub    esp,0xc
c0014881:	68 0c 12 02 c0       	push   0xc002120c
c0014886:	e8 8c c0 ff ff       	call   c0010917 <KePanic(char const*)>
c001488b:	83 c4 10             	add    esp,0x10
c001488e:	31 ed                	xor    ebp,ebp
c0014890:	eb bb                	jmp    c001484d <Thr::loadDLL(char const*, bool)+0x1df>
c0014892:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014898:	89 d8                	mov    eax,ebx
c001489a:	5b                   	pop    ebx
c001489b:	5e                   	pop    esi
c001489c:	5f                   	pop    edi
c001489d:	5d                   	pop    ebp
c001489e:	c3                   	ret    

c001489f <Thr::executeDLL(unsigned long, void*)>:
c001489f:	56                   	push   esi
c00148a0:	53                   	push   ebx
c00148a1:	52                   	push   edx
c00148a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00148a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00148aa:	85 db                	test   ebx,ebx
c00148ac:	75 10                	jne    c00148be <Thr::executeDLL(unsigned long, void*)+0x1f>
c00148ae:	83 ec 0c             	sub    esp,0xc
c00148b1:	68 28 12 02 c0       	push   0xc0021228
c00148b6:	e8 5c c0 ff ff       	call   c0010917 <KePanic(char const*)>
c00148bb:	83 c4 10             	add    esp,0x10
c00148be:	50                   	push   eax
c00148bf:	50                   	push   eax
c00148c0:	53                   	push   ebx
c00148c1:	68 52 12 02 c0       	push   0xc0021252
c00148c6:	e8 1f 61 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c00148cb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00148cf:	89 d8                	mov    eax,ebx
c00148d1:	83 c4 14             	add    esp,0x14
c00148d4:	5b                   	pop    ebx
c00148d5:	5e                   	pop    esi
c00148d6:	ff e0                	jmp    eax

c00148d8 <userModeEntryPoint(void*)>:
c00148d8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00148dd:	83 e8 01             	sub    eax,0x1
c00148e0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00148e5:	75 01                	jne    c00148e8 <userModeEntryPoint(void*)+0x10>
c00148e7:	fb                   	sti    
c00148e8:	fb                   	sti    
c00148e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148ee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148f1:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00148f7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00148fb:	e9 3f b9 fe ff       	jmp    c000023f <goToUsermode>

c0014900 <changeTSS>:
c0014900:	83 ec 14             	sub    esp,0x14
c0014903:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014908:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001490b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014910:	c1 e2 15             	shl    edx,0x15
c0014913:	29 d0                	sub    eax,edx
c0014915:	50                   	push   eax
c0014916:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001491b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014921:	05 7c 11 00 00       	add    eax,0x117c
c0014926:	50                   	push   eax
c0014927:	e8 38 46 ff ff       	call   c0008f64 <TSS::setESP(unsigned long)>
c001492c:	83 c4 1c             	add    esp,0x1c
c001492f:	c3                   	ret    

c0014930 <switchToThread(ThreadControlBlock*)>:
c0014930:	57                   	push   edi
c0014931:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0014937:	56                   	push   esi
c0014938:	85 c9                	test   ecx,ecx
c001493a:	53                   	push   ebx
c001493b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001493f:	0f 85 8b 00 00 00    	jne    c00149d0 <switchToThread(ThreadControlBlock*)+0xa0>
c0014945:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0014949:	81 fa ff 00 00 00    	cmp    edx,0xff
c001494f:	74 7b                	je     c00149cc <switchToThread(ThreadControlBlock*)+0x9c>
c0014951:	b8 00 04 00 00       	mov    eax,0x400
c0014956:	29 d0                	sub    eax,edx
c0014958:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c001495b:	d1 f8                	sar    eax,1
c001495d:	01 d0                	add    eax,edx
c001495f:	90                   	nop
c0014960:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0014963:	e8 ae 27 00 00       	call   c0017116 <HalQueryPerformanceCounter()>
c0014968:	a3 a8 81 02 c0       	mov    ds:0xc00281a8,eax
c001496d:	89 15 ac 81 02 c0    	mov    DWORD PTR ds:0xc00281ac,edx
c0014973:	89 c6                	mov    esi,eax
c0014975:	89 d7                	mov    edi,edx
c0014977:	2b 35 98 81 02 c0    	sub    esi,DWORD PTR ds:0xc0028198
c001497d:	a3 98 81 02 c0       	mov    ds:0xc0028198,eax
c0014982:	1b 3d 9c 81 02 c0    	sbb    edi,DWORD PTR ds:0xc002819c
c0014988:	89 35 a0 81 02 c0    	mov    DWORD PTR ds:0xc00281a0,esi
c001498e:	89 3d a4 81 02 c0    	mov    DWORD PTR ds:0xc00281a4,edi
c0014994:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001499a:	89 15 9c 81 02 c0    	mov    DWORD PTR ds:0xc002819c,edx
c00149a0:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00149a3:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00149a6:	01 c6                	add    esi,eax
c00149a8:	11 d7                	adc    edi,edx
c00149aa:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00149ad:	83 ec 0c             	sub    esp,0xc
c00149b0:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00149b3:	53                   	push   ebx
c00149b4:	e8 be b8 fe ff       	call   c0000277 <switchToThreadASM>
c00149b9:	0f 20 c0             	mov    eax,cr0
c00149bc:	83 c8 08             	or     eax,0x8
c00149bf:	0f 22 c0             	mov    cr0,eax
c00149c2:	83 c4 10             	add    esp,0x10
c00149c5:	5b                   	pop    ebx
c00149c6:	5e                   	pop    esi
c00149c7:	5f                   	pop    edi
c00149c8:	c3                   	ret    
c00149c9:	8d 76 00             	lea    esi,[esi+0x0]
c00149cc:	31 c0                	xor    eax,eax
c00149ce:	eb 90                	jmp    c0014960 <switchToThread(ThreadControlBlock*)+0x30>
c00149d0:	5b                   	pop    ebx
c00149d1:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c00149db:	5e                   	pop    esi
c00149dc:	5f                   	pop    edi
c00149dd:	c3                   	ret    
c00149de:	66 90                	xchg   ax,ax

c00149e0 <Process::addArgs(char**)>:
c00149e0:	57                   	push   edi
c00149e1:	56                   	push   esi
c00149e2:	53                   	push   ebx
c00149e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00149e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00149eb:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00149f5:	85 ff                	test   edi,edi
c00149f7:	74 4f                	je     c0014a48 <Process::addArgs(char**)+0x68>
c00149f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00149fb:	85 c0                	test   eax,eax
c00149fd:	74 49                	je     c0014a48 <Process::addArgs(char**)+0x68>
c00149ff:	31 db                	xor    ebx,ebx
c0014a01:	8d 76 00             	lea    esi,[esi+0x0]
c0014a04:	83 ec 0c             	sub    esp,0xc
c0014a07:	50                   	push   eax
c0014a08:	e8 63 bb fe ff       	call   c0000570 <strlen>
c0014a0d:	83 c0 01             	add    eax,0x1
c0014a10:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a13:	e8 96 30 ff ff       	call   c0007aae <malloc>
c0014a18:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0014a1f:	5a                   	pop    edx
c0014a20:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014a23:	59                   	pop    ecx
c0014a24:	83 c3 01             	add    ebx,0x1
c0014a27:	52                   	push   edx
c0014a28:	50                   	push   eax
c0014a29:	e8 12 bc fe ff       	call   c0000640 <strcpy>
c0014a2e:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0014a34:	83 c4 10             	add    esp,0x10
c0014a37:	83 c1 01             	add    ecx,0x1
c0014a3a:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0014a40:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0014a43:	85 c0                	test   eax,eax
c0014a45:	75 bd                	jne    c0014a04 <Process::addArgs(char**)+0x24>
c0014a47:	90                   	nop
c0014a48:	5b                   	pop    ebx
c0014a49:	5e                   	pop    esi
c0014a4a:	5f                   	pop    edi
c0014a4b:	c3                   	ret    

c0014a4c <Process::Process(char const*, Process*, char**)>:
c0014a4c:	56                   	push   esi
c0014a4d:	53                   	push   ebx
c0014a4e:	83 ec 14             	sub    esp,0x14
c0014a51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a55:	05 0c 02 00 00       	add    eax,0x20c
c0014a5a:	bb 07 00 00 00       	mov    ebx,0x7
c0014a5f:	89 c6                	mov    esi,eax
c0014a61:	8d 76 00             	lea    esi,[esi+0x0]
c0014a64:	85 db                	test   ebx,ebx
c0014a66:	78 14                	js     c0014a7c <Process::Process(char const*, Process*, char**)+0x30>
c0014a68:	83 ec 0c             	sub    esp,0xc
c0014a6b:	56                   	push   esi
c0014a6c:	e8 07 a5 00 00       	call   c001ef78 <ThreadControlBlock::ThreadControlBlock()>
c0014a71:	83 c4 10             	add    esp,0x10
c0014a74:	83 c6 5f             	add    esi,0x5f
c0014a77:	83 eb 01             	sub    ebx,0x1
c0014a7a:	eb e8                	jmp    c0014a64 <Process::Process(char const*, Process*, char**)+0x18>
c0014a7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a80:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014a87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a8b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014a92:	83 ec 0c             	sub    esp,0xc
c0014a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014a99:	e8 6e bc ff ff       	call   c001070c <Krnl::newProcessEnv(Process*)>
c0014a9e:	83 c4 10             	add    esp,0x10
c0014aa1:	89 c2                	mov    edx,eax
c0014aa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014aa7:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014aad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ab1:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014aba:	a1 20 24 02 c0       	mov    eax,ds:0xc0022420
c0014abf:	8d 50 01             	lea    edx,[eax+0x1]
c0014ac2:	89 15 20 24 02 c0    	mov    DWORD PTR ds:0xc0022420,edx
c0014ac8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014acc:	89 02                	mov    DWORD PTR [edx],eax
c0014ace:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0014ad6:	83 ec 0c             	sub    esp,0xc
c0014ad9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014add:	e8 cc 2f ff ff       	call   c0007aae <malloc>
c0014ae2:	83 c4 10             	add    esp,0x10
c0014ae5:	89 c3                	mov    ebx,eax
c0014ae7:	83 ec 08             	sub    esp,0x8
c0014aea:	6a 00                	push   0x0
c0014aec:	53                   	push   ebx
c0014aed:	e8 f2 56 ff ff       	call   c000a1e4 <VAS::VAS(bool)>
c0014af2:	83 c4 10             	add    esp,0x10
c0014af5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014af9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014aff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b03:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014b0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b11:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014b15:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014b1b:	e8 12 c2 ff ff       	call   c0010d32 <KeInitSignals()>
c0014b20:	89 c2                	mov    edx,eax
c0014b22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b26:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014b2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b30:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014b36:	85 c0                	test   eax,eax
c0014b38:	74 42                	je     c0014b7c <Process::Process(char const*, Process*, char**)+0x130>
c0014b3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b3e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014b44:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014b4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b4e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014b54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b58:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014b5e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b68:	05 0c 01 00 00       	add    eax,0x10c
c0014b6d:	83 ec 08             	sub    esp,0x8
c0014b70:	52                   	push   edx
c0014b71:	50                   	push   eax
c0014b72:	e8 c9 ba fe ff       	call   c0000640 <strcpy>
c0014b77:	83 c4 10             	add    esp,0x10
c0014b7a:	eb 64                	jmp    c0014be0 <Process::Process(char const*, Process*, char**)+0x194>
c0014b7c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014b84:	83 ec 0c             	sub    esp,0xc
c0014b87:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014b8b:	e8 1e 2f ff ff       	call   c0007aae <malloc>
c0014b90:	83 c4 10             	add    esp,0x10
c0014b93:	89 c3                	mov    ebx,eax
c0014b95:	83 ec 08             	sub    esp,0x8
c0014b98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b9c:	53                   	push   ebx
c0014b9d:	e8 ae 40 ff ff       	call   c0008c50 <VgaText::VgaText(char const*)>
c0014ba2:	83 c4 10             	add    esp,0x10
c0014ba5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ba9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014baf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bb3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014bb9:	83 ec 0c             	sub    esp,0xc
c0014bbc:	50                   	push   eax
c0014bbd:	e8 2c 39 ff ff       	call   c00084ee <addToTerminalCycle(VgaText*)>
c0014bc2:	83 c4 10             	add    esp,0x10
c0014bc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bc9:	05 0c 01 00 00       	add    eax,0x10c
c0014bce:	83 ec 08             	sub    esp,0x8
c0014bd1:	68 71 12 02 c0       	push   0xc0021271
c0014bd6:	50                   	push   eax
c0014bd7:	e8 64 ba fe ff       	call   c0000640 <strcpy>
c0014bdc:	83 c4 10             	add    esp,0x10
c0014bdf:	90                   	nop
c0014be0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014be4:	83 c0 0c             	add    eax,0xc
c0014be7:	83 ec 08             	sub    esp,0x8
c0014bea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014bee:	50                   	push   eax
c0014bef:	e8 4c ba fe ff       	call   c0000640 <strcpy>
c0014bf4:	83 c4 10             	add    esp,0x10
c0014bf7:	83 ec 08             	sub    esp,0x8
c0014bfa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014bfe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c02:	e8 d9 fd ff ff       	call   c00149e0 <Process::addArgs(char**)>
c0014c07:	83 c4 10             	add    esp,0x10
c0014c0a:	83 ec 08             	sub    esp,0x8
c0014c0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c15:	e8 66 ed ff ff       	call   c0013980 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014c1a:	83 c4 10             	add    esp,0x10
c0014c1d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014c21:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014c25:	83 f0 01             	xor    eax,0x1
c0014c28:	88 c2                	mov    dl,al
c0014c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c2e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014c34:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0014c39:	83 ec 04             	sub    esp,0x4
c0014c3c:	50                   	push   eax
c0014c3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c41:	68 c8 12 02 c0       	push   0xc00212c8
c0014c46:	e8 9f 5d ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0014c4b:	83 c4 10             	add    esp,0x10
c0014c4e:	90                   	nop
c0014c4f:	83 c4 14             	add    esp,0x14
c0014c52:	5b                   	pop    ebx
c0014c53:	5e                   	pop    esi
c0014c54:	c3                   	ret    
c0014c55:	90                   	nop
c0014c56:	66 90                	xchg   ax,ax

c0014c58 <Process::Process(bool, char const*, Process*, char**)>:
c0014c58:	56                   	push   esi
c0014c59:	53                   	push   ebx
c0014c5a:	83 ec 24             	sub    esp,0x24
c0014c5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014c61:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014c65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c69:	05 0c 02 00 00       	add    eax,0x20c
c0014c6e:	bb 07 00 00 00       	mov    ebx,0x7
c0014c73:	89 c6                	mov    esi,eax
c0014c75:	8d 76 00             	lea    esi,[esi+0x0]
c0014c78:	85 db                	test   ebx,ebx
c0014c7a:	78 14                	js     c0014c90 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0014c7c:	83 ec 0c             	sub    esp,0xc
c0014c7f:	56                   	push   esi
c0014c80:	e8 f3 a2 00 00       	call   c001ef78 <ThreadControlBlock::ThreadControlBlock()>
c0014c85:	83 c4 10             	add    esp,0x10
c0014c88:	83 c6 5f             	add    esi,0x5f
c0014c8b:	83 eb 01             	sub    ebx,0x1
c0014c8e:	eb e8                	jmp    c0014c78 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014c90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c94:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014c9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c9f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014ca6:	83 ec 0c             	sub    esp,0xc
c0014ca9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014cad:	e8 5a ba ff ff       	call   c001070c <Krnl::newProcessEnv(Process*)>
c0014cb2:	83 c4 10             	add    esp,0x10
c0014cb5:	89 c2                	mov    edx,eax
c0014cb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cbb:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014cc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cc5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014cce:	a1 20 24 02 c0       	mov    eax,ds:0xc0022420
c0014cd3:	8d 50 01             	lea    edx,[eax+0x1]
c0014cd6:	89 15 20 24 02 c0    	mov    DWORD PTR ds:0xc0022420,edx
c0014cdc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014ce0:	89 02                	mov    DWORD PTR [edx],eax
c0014ce2:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0014cea:	83 ec 0c             	sub    esp,0xc
c0014ced:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014cf1:	e8 b8 2d ff ff       	call   c0007aae <malloc>
c0014cf6:	83 c4 10             	add    esp,0x10
c0014cf9:	89 c3                	mov    ebx,eax
c0014cfb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0014d00:	83 ec 08             	sub    esp,0x8
c0014d03:	50                   	push   eax
c0014d04:	53                   	push   ebx
c0014d05:	e8 da 54 ff ff       	call   c000a1e4 <VAS::VAS(bool)>
c0014d0a:	83 c4 10             	add    esp,0x10
c0014d0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d11:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014d17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d1b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014d25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d29:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014d2d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014d33:	e8 fa bf ff ff       	call   c0010d32 <KeInitSignals()>
c0014d38:	89 c2                	mov    edx,eax
c0014d3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d3e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014d44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d48:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014d4e:	85 c0                	test   eax,eax
c0014d50:	74 42                	je     c0014d94 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0014d52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d56:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014d5c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014d62:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d66:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014d6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d70:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014d76:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014d7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d80:	05 0c 01 00 00       	add    eax,0x10c
c0014d85:	83 ec 08             	sub    esp,0x8
c0014d88:	52                   	push   edx
c0014d89:	50                   	push   eax
c0014d8a:	e8 b1 b8 fe ff       	call   c0000640 <strcpy>
c0014d8f:	83 c4 10             	add    esp,0x10
c0014d92:	eb 64                	jmp    c0014df8 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0014d94:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0014d9c:	83 ec 0c             	sub    esp,0xc
c0014d9f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014da3:	e8 06 2d ff ff       	call   c0007aae <malloc>
c0014da8:	83 c4 10             	add    esp,0x10
c0014dab:	89 c3                	mov    ebx,eax
c0014dad:	83 ec 08             	sub    esp,0x8
c0014db0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014db4:	53                   	push   ebx
c0014db5:	e8 96 3e ff ff       	call   c0008c50 <VgaText::VgaText(char const*)>
c0014dba:	83 c4 10             	add    esp,0x10
c0014dbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014dc1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014dc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014dcb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014dd1:	83 ec 0c             	sub    esp,0xc
c0014dd4:	50                   	push   eax
c0014dd5:	e8 14 37 ff ff       	call   c00084ee <addToTerminalCycle(VgaText*)>
c0014dda:	83 c4 10             	add    esp,0x10
c0014ddd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014de1:	05 0c 01 00 00       	add    eax,0x10c
c0014de6:	83 ec 08             	sub    esp,0x8
c0014de9:	68 71 12 02 c0       	push   0xc0021271
c0014dee:	50                   	push   eax
c0014def:	e8 4c b8 fe ff       	call   c0000640 <strcpy>
c0014df4:	83 c4 10             	add    esp,0x10
c0014df7:	90                   	nop
c0014df8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014dfc:	83 c0 0c             	add    eax,0xc
c0014dff:	83 ec 08             	sub    esp,0x8
c0014e02:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014e06:	50                   	push   eax
c0014e07:	e8 34 b8 fe ff       	call   c0000640 <strcpy>
c0014e0c:	83 c4 10             	add    esp,0x10
c0014e0f:	83 ec 08             	sub    esp,0x8
c0014e12:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014e16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014e1a:	e8 c1 fb ff ff       	call   c00149e0 <Process::addArgs(char**)>
c0014e1f:	83 c4 10             	add    esp,0x10
c0014e22:	90                   	nop
c0014e23:	83 c4 24             	add    esp,0x24
c0014e26:	5b                   	pop    ebx
c0014e27:	5e                   	pop    esi
c0014e28:	c3                   	ret    
c0014e29:	8d 76 00             	lea    esi,[esi+0x0]

c0014e2c <taskStartupFunction>:
c0014e2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e31:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0014e34:	c3                   	ret    
c0014e35:	90                   	nop
c0014e36:	66 90                	xchg   ax,ax

c0014e38 <Semaphore::Semaphore(int)>:
c0014e38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014e40:	89 10                	mov    DWORD PTR [eax],edx
c0014e42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e46:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0014e4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e51:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014e58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e5c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0014e63:	90                   	nop
c0014e64:	c3                   	ret    
c0014e65:	90                   	nop
c0014e66:	66 90                	xchg   ax,ax

c0014e68 <Mutex::Mutex()>:
c0014e68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e6c:	6a 01                	push   0x1
c0014e6e:	50                   	push   eax
c0014e6f:	e8 c4 ff ff ff       	call   c0014e38 <Semaphore::Semaphore(int)>
c0014e74:	83 c4 08             	add    esp,0x8
c0014e77:	90                   	nop
c0014e78:	c3                   	ret    
c0014e79:	90                   	nop
c0014e7a:	66 90                	xchg   ax,ax

c0014e7c <Process::createThread(void (*)(void*), void*, int)>:
c0014e7c:	57                   	push   edi
c0014e7d:	31 c9                	xor    ecx,ecx
c0014e7f:	56                   	push   esi
c0014e80:	53                   	push   ebx
c0014e81:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014e85:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0014e8c:	89 f2                	mov    edx,esi
c0014e8e:	66 90                	xchg   ax,ax
c0014e90:	0f b7 c2             	movzx  eax,dx
c0014e93:	80 e2 01             	and    dl,0x1
c0014e96:	74 14                	je     c0014eac <Process::createThread(void (*)(void*), void*, int)+0x30>
c0014e98:	d1 f8                	sar    eax,1
c0014e9a:	83 c1 01             	add    ecx,0x1
c0014e9d:	89 c2                	mov    edx,eax
c0014e9f:	83 f9 10             	cmp    ecx,0x10
c0014ea2:	75 ec                	jne    c0014e90 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0014ea4:	31 db                	xor    ebx,ebx
c0014ea6:	89 d8                	mov    eax,ebx
c0014ea8:	5b                   	pop    ebx
c0014ea9:	5e                   	pop    esi
c0014eaa:	5f                   	pop    edi
c0014eab:	c3                   	ret    
c0014eac:	b8 01 00 00 00       	mov    eax,0x1
c0014eb1:	d3 e0                	shl    eax,cl
c0014eb3:	09 c6                	or     esi,eax
c0014eb5:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0014eb8:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0014ebf:	01 c0                	add    eax,eax
c0014ec1:	01 c8                	add    eax,ecx
c0014ec3:	8d 04 80             	lea    eax,[eax+eax*4]
c0014ec6:	01 d8                	add    eax,ebx
c0014ec8:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0014ecf:	75 0b                	jne    c0014edc <Process::createThread(void (*)(void*), void*, int)+0x60>
c0014ed1:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0014edb:	90                   	nop
c0014edc:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014ee2:	83 ec 0c             	sub    esp,0xc
c0014ee5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014ee8:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0014eeb:	01 c0                	add    eax,eax
c0014eed:	01 c8                	add    eax,ecx
c0014eef:	8d 3c 80             	lea    edi,[eax+eax*4]
c0014ef2:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0014ef5:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0014efb:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0014f01:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014f05:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0014f0b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0014f11:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0014f17:	89 ca                	mov    edx,ecx
c0014f19:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0014f20:	f7 da                	neg    edx
c0014f22:	c1 e2 15             	shl    edx,0x15
c0014f25:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0014f2b:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0014f31:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014f35:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0014f3f:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0014f45:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014f49:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0014f4f:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0014f59:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0014f63:	68 00 01 00 00       	push   0x100
c0014f68:	e8 41 2b ff ff       	call   c0007aae <malloc>
c0014f6d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0014f70:	58                   	pop    eax
c0014f71:	5a                   	pop    edx
c0014f72:	53                   	push   ebx
c0014f73:	68 84 81 02 c0       	push   0xc0028184
c0014f78:	e8 93 9d 00 00       	call   c001ed10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014f7d:	83 c4 10             	add    esp,0x10
c0014f80:	89 d8                	mov    eax,ebx
c0014f82:	5b                   	pop    ebx
c0014f83:	5e                   	pop    esi
c0014f84:	5f                   	pop    edi
c0014f85:	c3                   	ret    
c0014f86:	66 90                	xchg   ax,ax

c0014f88 <Process::createUserThread()>:
c0014f88:	83 ec 0c             	sub    esp,0xc
c0014f8b:	68 80 00 00 00       	push   0x80
c0014f90:	6a 00                	push   0x0
c0014f92:	68 d8 48 01 c0       	push   0xc00148d8
c0014f97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014f9b:	50                   	push   eax
c0014f9c:	e8 db fe ff ff       	call   c0014e7c <Process::createThread(void (*)(void*), void*, int)>
c0014fa1:	83 c4 1c             	add    esp,0x1c
c0014fa4:	c3                   	ret    
c0014fa5:	8d 76 00             	lea    esi,[esi+0x0]

c0014fa8 <setupMultitasking(void (*)())>:
c0014fa8:	56                   	push   esi
c0014fa9:	53                   	push   ebx
c0014faa:	83 ec 04             	sub    esp,0x4
c0014fad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014fb1:	eb 11                	jmp    c0014fc4 <setupMultitasking(void (*)())+0x1c>
c0014fb3:	90                   	nop
c0014fb4:	83 ec 0c             	sub    esp,0xc
c0014fb7:	68 84 81 02 c0       	push   0xc0028184
c0014fbc:	e8 93 9c 00 00       	call   c001ec54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014fc1:	83 c4 10             	add    esp,0x10
c0014fc4:	83 ec 0c             	sub    esp,0xc
c0014fc7:	68 84 81 02 c0       	push   0xc0028184
c0014fcc:	e8 5f 9c 00 00       	call   c001ec30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014fd1:	83 c4 10             	add    esp,0x10
c0014fd4:	84 c0                	test   al,al
c0014fd6:	74 dc                	je     c0014fb4 <setupMultitasking(void (*)())+0xc>
c0014fd8:	83 ec 0c             	sub    esp,0xc
c0014fdb:	68 24 07 00 00       	push   0x724
c0014fe0:	e8 c9 2a ff ff       	call   c0007aae <malloc>
c0014fe5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014fec:	89 c3                	mov    ebx,eax
c0014fee:	6a 00                	push   0x0
c0014ff0:	68 75 12 02 c0       	push   0xc0021275
c0014ff5:	6a 01                	push   0x1
c0014ff7:	50                   	push   eax
c0014ff8:	e8 5b fc ff ff       	call   c0014c58 <Process::Process(bool, char const*, Process*, char**)>
c0014ffd:	83 c4 14             	add    esp,0x14
c0015000:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015006:	89 1d 90 81 02 c0    	mov    DWORD PTR ds:0xc0028190,ebx
c001500c:	50                   	push   eax
c001500d:	e8 31 37 ff ff       	call   c0008743 <setActiveTerminal(VgaText*)>
c0015012:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015019:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015023:	83 c8 01             	or     eax,0x1
c0015026:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c001502d:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015033:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015036:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015040:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015046:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001504c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015056:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015060:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001506a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015070:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001507a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015080:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001508a:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015091:	e8 18 2a ff ff       	call   c0007aae <malloc>
c0015096:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c001509c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00150a2:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00150a8:	5a                   	pop    edx
c00150a9:	59                   	pop    ecx
c00150aa:	68 71 12 02 c0       	push   0xc0021271
c00150af:	50                   	push   eax
c00150b0:	e8 8b b5 fe ff       	call   c0000640 <strcpy>
c00150b5:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00150bc:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00150c0:	83 c4 14             	add    esp,0x14
c00150c3:	5b                   	pop    ebx
c00150c4:	5e                   	pop    esi
c00150c5:	e9 9f b1 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00150ca:	66 90                	xchg   ax,ax

c00150cc <schedule()>:
c00150cc:	8b 15 64 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028164
c00150d2:	85 d2                	test   edx,edx
c00150d4:	74 0e                	je     c00150e4 <schedule()+0x18>
c00150d6:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c00150e0:	c3                   	ret    
c00150e1:	8d 76 00             	lea    esi,[esi+0x0]
c00150e4:	53                   	push   ebx
c00150e5:	83 ec 14             	sub    esp,0x14
c00150e8:	68 84 81 02 c0       	push   0xc0028184
c00150ed:	e8 3e 9b 00 00       	call   c001ec30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00150f2:	83 c4 10             	add    esp,0x10
c00150f5:	84 c0                	test   al,al
c00150f7:	75 3f                	jne    c0015138 <schedule()+0x6c>
c00150f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150fe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015101:	83 fa 01             	cmp    edx,0x1
c0015104:	74 3a                	je     c0015140 <schedule()+0x74>
c0015106:	66 90                	xchg   ax,ax
c0015108:	83 ec 0c             	sub    esp,0xc
c001510b:	68 84 81 02 c0       	push   0xc0028184
c0015110:	e8 37 9b 00 00       	call   c001ec4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015115:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001511c:	89 c3                	mov    ebx,eax
c001511e:	e8 31 9b 00 00       	call   c001ec54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015123:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001512a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001512d:	e8 fe f7 ff ff       	call   c0014930 <switchToThread(ThreadControlBlock*)>
c0015132:	83 c4 10             	add    esp,0x10
c0015135:	8d 76 00             	lea    esi,[esi+0x0]
c0015138:	83 c4 08             	add    esp,0x8
c001513b:	5b                   	pop    ebx
c001513c:	c3                   	ret    
c001513d:	8d 76 00             	lea    esi,[esi+0x0]
c0015140:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015147:	83 ec 08             	sub    esp,0x8
c001514a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001514f:	50                   	push   eax
c0015150:	68 84 81 02 c0       	push   0xc0028184
c0015155:	e8 b6 9b 00 00       	call   c001ed10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001515a:	83 c4 10             	add    esp,0x10
c001515d:	eb a9                	jmp    c0015108 <schedule()+0x3c>
c001515f:	90                   	nop

c0015160 <Semaphore::tryAcquire()>:
c0015160:	53                   	push   ebx
c0015161:	83 ec 08             	sub    esp,0x8
c0015164:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015168:	fa                   	cli    
c0015169:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001516e:	8d 50 01             	lea    edx,[eax+0x1]
c0015171:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015177:	8b 15 64 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028164
c001517d:	8d 5a 01             	lea    ebx,[edx+0x1]
c0015180:	89 1d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ebx
c0015186:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015189:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001518b:	7c 33                	jl     c00151c0 <Semaphore::tryAcquire()+0x60>
c001518d:	89 15 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,edx
c0015193:	85 d2                	test   edx,edx
c0015195:	75 0d                	jne    c00151a4 <Semaphore::tryAcquire()+0x44>
c0015197:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c001519d:	85 d2                	test   edx,edx
c001519f:	75 6f                	jne    c0015210 <Semaphore::tryAcquire()+0xb0>
c00151a1:	8d 76 00             	lea    esi,[esi+0x0]
c00151a4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00151a9:	85 c0                	test   eax,eax
c00151ab:	74 0b                	je     c00151b8 <Semaphore::tryAcquire()+0x58>
c00151ad:	8d 76 00             	lea    esi,[esi+0x0]
c00151b0:	31 c0                	xor    eax,eax
c00151b2:	83 c4 08             	add    esp,0x8
c00151b5:	5b                   	pop    ebx
c00151b6:	c3                   	ret    
c00151b7:	90                   	nop
c00151b8:	fb                   	sti    
c00151b9:	83 c4 08             	add    esp,0x8
c00151bc:	5b                   	pop    ebx
c00151bd:	c3                   	ret    
c00151be:	66 90                	xchg   ax,ax
c00151c0:	83 c3 01             	add    ebx,0x1
c00151c3:	89 15 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,edx
c00151c9:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00151cc:	85 d2                	test   edx,edx
c00151ce:	75 24                	jne    c00151f4 <Semaphore::tryAcquire()+0x94>
c00151d0:	8b 0d 60 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028160
c00151d6:	85 c9                	test   ecx,ecx
c00151d8:	74 1a                	je     c00151f4 <Semaphore::tryAcquire()+0x94>
c00151da:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00151e4:	e8 e3 fe ff ff       	call   c00150cc <schedule()>
c00151e9:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00151ee:	83 e8 01             	sub    eax,0x1
c00151f1:	8d 76 00             	lea    esi,[esi+0x0]
c00151f4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00151f9:	85 c0                	test   eax,eax
c00151fb:	75 0b                	jne    c0015208 <Semaphore::tryAcquire()+0xa8>
c00151fd:	fb                   	sti    
c00151fe:	b0 01                	mov    al,0x1
c0015200:	83 c4 08             	add    esp,0x8
c0015203:	5b                   	pop    ebx
c0015204:	c3                   	ret    
c0015205:	8d 76 00             	lea    esi,[esi+0x0]
c0015208:	b0 01                	mov    al,0x1
c001520a:	83 c4 08             	add    esp,0x8
c001520d:	5b                   	pop    ebx
c001520e:	c3                   	ret    
c001520f:	90                   	nop
c0015210:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001521a:	e8 ad fe ff ff       	call   c00150cc <schedule()>
c001521f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015224:	83 e8 01             	sub    eax,0x1
c0015227:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001522c:	85 c0                	test   eax,eax
c001522e:	75 80                	jne    c00151b0 <Semaphore::tryAcquire()+0x50>
c0015230:	eb 86                	jmp    c00151b8 <Semaphore::tryAcquire()+0x58>
c0015232:	66 90                	xchg   ax,ax

c0015234 <Semaphore::assertLocked(char const*)>:
c0015234:	83 ec 0c             	sub    esp,0xc
c0015237:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001523b:	fa                   	cli    
c001523c:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c0015242:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015247:	83 c1 01             	add    ecx,0x1
c001524a:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c0015250:	8d 48 01             	lea    ecx,[eax+0x1]
c0015253:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015259:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001525b:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001525e:	7c 28                	jl     c0015288 <Semaphore::assertLocked(char const*)+0x54>
c0015260:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015265:	85 c0                	test   eax,eax
c0015267:	75 0b                	jne    c0015274 <Semaphore::assertLocked(char const*)+0x40>
c0015269:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c001526e:	85 c0                	test   eax,eax
c0015270:	75 32                	jne    c00152a4 <Semaphore::assertLocked(char const*)+0x70>
c0015272:	66 90                	xchg   ax,ax
c0015274:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015279:	83 e8 01             	sub    eax,0x1
c001527c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015281:	75 01                	jne    c0015284 <Semaphore::assertLocked(char const*)+0x50>
c0015283:	fb                   	sti    
c0015284:	83 c4 0c             	add    esp,0xc
c0015287:	c3                   	ret    
c0015288:	83 ec 0c             	sub    esp,0xc
c001528b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001528f:	52                   	push   edx
c0015290:	e8 82 b6 ff ff       	call   c0010917 <KePanic(char const*)>
c0015295:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001529a:	83 c4 10             	add    esp,0x10
c001529d:	83 e8 01             	sub    eax,0x1
c00152a0:	eb be                	jmp    c0015260 <Semaphore::assertLocked(char const*)+0x2c>
c00152a2:	66 90                	xchg   ax,ax
c00152a4:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00152ae:	e8 19 fe ff ff       	call   c00150cc <schedule()>
c00152b3:	eb bf                	jmp    c0015274 <Semaphore::assertLocked(char const*)+0x40>
c00152b5:	8d 76 00             	lea    esi,[esi+0x0]

c00152b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00152b8:	83 ec 0c             	sub    esp,0xc
c00152bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00152c4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00152c7:	e8 00 fe ff ff       	call   c00150cc <schedule()>
c00152cc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00152d1:	83 e8 01             	sub    eax,0x1
c00152d4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00152d9:	75 01                	jne    c00152dc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00152db:	fb                   	sti    
c00152dc:	83 c4 0c             	add    esp,0xc
c00152df:	c3                   	ret    

c00152e0 <blockTask(TaskState)>:
c00152e0:	83 ec 0c             	sub    esp,0xc
c00152e3:	fa                   	cli    
c00152e4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00152e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00152ed:	83 c0 01             	add    eax,0x1
c00152f0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00152f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152fa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00152fd:	e8 ca fd ff ff       	call   c00150cc <schedule()>
c0015302:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015307:	83 e8 01             	sub    eax,0x1
c001530a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001530f:	75 03                	jne    c0015314 <blockTask(TaskState)+0x34>
c0015311:	fb                   	sti    
c0015312:	66 90                	xchg   ax,ax
c0015314:	83 c4 0c             	add    esp,0xc
c0015317:	c3                   	ret    

c0015318 <waitTask(int, int*, int)>:
c0015318:	83 ec 18             	sub    esp,0x18
c001531b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015320:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015324:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015327:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001532b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015330:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015333:	6a 07                	push   0x7
c0015335:	e8 a6 ff ff ff       	call   c00152e0 <blockTask(TaskState)>
c001533a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001533f:	83 c4 10             	add    esp,0x10
c0015342:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015345:	85 d2                	test   edx,edx
c0015347:	74 0b                	je     c0015354 <waitTask(int, int*, int)+0x3c>
c0015349:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c001534c:	89 02                	mov    DWORD PTR [edx],eax
c001534e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015353:	90                   	nop
c0015354:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015357:	83 c4 0c             	add    esp,0xc
c001535a:	c3                   	ret    
c001535b:	90                   	nop

c001535c <milliTenthSleepUntil(unsigned int)>:
c001535c:	83 ec 0c             	sub    esp,0xc
c001535f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015363:	39 05 8c 74 02 c0    	cmp    DWORD PTR ds:0xc002748c,eax
c0015369:	76 05                	jbe    c0015370 <milliTenthSleepUntil(unsigned int)+0x14>
c001536b:	90                   	nop
c001536c:	83 c4 0c             	add    esp,0xc
c001536f:	c3                   	ret    
c0015370:	fa                   	cli    
c0015371:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c0015377:	83 ec 08             	sub    esp,0x8
c001537a:	83 c2 01             	add    edx,0x1
c001537d:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0015383:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015389:	83 c1 01             	add    ecx,0x1
c001538c:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015392:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015398:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001539b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153a0:	50                   	push   eax
c00153a1:	68 78 81 02 c0       	push   0xc0028178
c00153a6:	e8 65 99 00 00       	call   c001ed10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00153ab:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00153b2:	e8 29 ff ff ff       	call   c00152e0 <blockTask(TaskState)>
c00153b7:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00153bc:	83 c4 10             	add    esp,0x10
c00153bf:	83 e8 01             	sub    eax,0x1
c00153c2:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00153c7:	85 c0                	test   eax,eax
c00153c9:	75 09                	jne    c00153d4 <milliTenthSleepUntil(unsigned int)+0x78>
c00153cb:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00153d0:	85 c0                	test   eax,eax
c00153d2:	75 14                	jne    c00153e8 <milliTenthSleepUntil(unsigned int)+0x8c>
c00153d4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00153d9:	83 e8 01             	sub    eax,0x1
c00153dc:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00153e1:	75 89                	jne    c001536c <milliTenthSleepUntil(unsigned int)+0x10>
c00153e3:	fb                   	sti    
c00153e4:	83 c4 0c             	add    esp,0xc
c00153e7:	c3                   	ret    
c00153e8:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00153f2:	e8 d5 fc ff ff       	call   c00150cc <schedule()>
c00153f7:	eb db                	jmp    c00153d4 <milliTenthSleepUntil(unsigned int)+0x78>
c00153f9:	8d 76 00             	lea    esi,[esi+0x0]

c00153fc <milliTenthSleep(unsigned int)>:
c00153fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015400:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c0015405:	01 c2                	add    edx,eax
c0015407:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001540b:	e9 4c ff ff ff       	jmp    c001535c <milliTenthSleepUntil(unsigned int)>

c0015410 <sleep(unsigned int)>:
c0015410:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015414:	8d 04 80             	lea    eax,[eax+eax*4]
c0015417:	8d 04 80             	lea    eax,[eax+eax*4]
c001541a:	8d 04 80             	lea    eax,[eax+eax*4]
c001541d:	8d 04 80             	lea    eax,[eax+eax*4]
c0015420:	c1 e0 04             	shl    eax,0x4
c0015423:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015427:	eb d3                	jmp    c00153fc <milliTenthSleep(unsigned int)>
c0015429:	90                   	nop
c001542a:	66 90                	xchg   ax,ax

c001542c <Semaphore::acquire()>:
c001542c:	83 ec 0c             	sub    esp,0xc
c001542f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015433:	fa                   	cli    
c0015434:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015439:	83 c0 01             	add    eax,0x1
c001543c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015441:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015446:	8d 48 01             	lea    ecx,[eax+0x1]
c0015449:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c001544f:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015452:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015454:	7d 2e                	jge    c0015484 <Semaphore::acquire()+0x58>
c0015456:	83 c1 01             	add    ecx,0x1
c0015459:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001545c:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015461:	85 c0                	test   eax,eax
c0015463:	75 0b                	jne    c0015470 <Semaphore::acquire()+0x44>
c0015465:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c001546a:	85 c0                	test   eax,eax
c001546c:	75 66                	jne    c00154d4 <Semaphore::acquire()+0xa8>
c001546e:	66 90                	xchg   ax,ax
c0015470:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015475:	83 e8 01             	sub    eax,0x1
c0015478:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001547d:	75 01                	jne    c0015480 <Semaphore::acquire()+0x54>
c001547f:	fb                   	sti    
c0015480:	83 c4 0c             	add    esp,0xc
c0015483:	c3                   	ret    
c0015484:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015489:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015490:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015493:	85 c9                	test   ecx,ecx
c0015495:	74 51                	je     c00154e8 <Semaphore::acquire()+0xbc>
c0015497:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001549a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00154a0:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00154a3:	90                   	nop
c00154a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154a9:	83 ec 0c             	sub    esp,0xc
c00154ac:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00154af:	68 f4 12 02 c0       	push   0xc00212f4
c00154b4:	e8 31 55 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c00154b9:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00154c0:	e8 1b fe ff ff       	call   c00152e0 <blockTask(TaskState)>
c00154c5:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00154ca:	83 c4 10             	add    esp,0x10
c00154cd:	83 e8 01             	sub    eax,0x1
c00154d0:	eb 8a                	jmp    c001545c <Semaphore::acquire()+0x30>
c00154d2:	66 90                	xchg   ax,ax
c00154d4:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00154de:	e8 e9 fb ff ff       	call   c00150cc <schedule()>
c00154e3:	eb 8b                	jmp    c0015470 <Semaphore::acquire()+0x44>
c00154e5:	8d 76 00             	lea    esi,[esi+0x0]
c00154e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00154f0:	eb b2                	jmp    c00154a4 <Semaphore::acquire()+0x78>
c00154f2:	66 90                	xchg   ax,ax

c00154f4 <taskReturned>:
c00154f4:	83 ec 18             	sub    esp,0x18
c00154f7:	68 14 13 02 c0       	push   0xc0021314
c00154fc:	e8 16 b4 ff ff       	call   c0010917 <KePanic(char const*)>
c0015501:	83 c4 10             	add    esp,0x10
c0015504:	83 ec 0c             	sub    esp,0xc
c0015507:	6a 02                	push   0x2
c0015509:	e8 d2 fd ff ff       	call   c00152e0 <blockTask(TaskState)>
c001550e:	fa                   	cli    
c001550f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015514:	83 c0 01             	add    eax,0x1
c0015517:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001551c:	e8 ab fb ff ff       	call   c00150cc <schedule()>
c0015521:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015526:	83 c4 10             	add    esp,0x10
c0015529:	83 e8 01             	sub    eax,0x1
c001552c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015531:	85 c0                	test   eax,eax
c0015533:	75 cf                	jne    c0015504 <taskReturned+0x10>
c0015535:	fb                   	sti    
c0015536:	eb cc                	jmp    c0015504 <taskReturned+0x10>

c0015538 <Thr::processFromPID(int)>:
c0015538:	57                   	push   edi
c0015539:	56                   	push   esi
c001553a:	53                   	push   ebx
c001553b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001553f:	fa                   	cli    
c0015540:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c0015546:	83 ec 0c             	sub    esp,0xc
c0015549:	83 c1 01             	add    ecx,0x1
c001554c:	68 84 81 02 c0       	push   0xc0028184
c0015551:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c0015557:	e8 f0 96 00 00       	call   c001ec4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001555c:	83 c4 10             	add    esp,0x10
c001555f:	89 c7                	mov    edi,eax
c0015561:	eb 15                	jmp    c0015578 <Thr::processFromPID(int)+0x40>
c0015563:	90                   	nop
c0015564:	83 ec 0c             	sub    esp,0xc
c0015567:	68 84 81 02 c0       	push   0xc0028184
c001556c:	e8 db 96 00 00       	call   c001ec4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015571:	83 c4 10             	add    esp,0x10
c0015574:	39 f8                	cmp    eax,edi
c0015576:	74 50                	je     c00155c8 <Thr::processFromPID(int)+0x90>
c0015578:	83 ec 0c             	sub    esp,0xc
c001557b:	68 84 81 02 c0       	push   0xc0028184
c0015580:	e8 c7 96 00 00       	call   c001ec4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015585:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001558c:	89 c3                	mov    ebx,eax
c001558e:	e8 c1 96 00 00       	call   c001ec54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015593:	58                   	pop    eax
c0015594:	5a                   	pop    edx
c0015595:	53                   	push   ebx
c0015596:	68 84 81 02 c0       	push   0xc0028184
c001559b:	e8 70 97 00 00       	call   c001ed10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00155a0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00155a3:	83 c4 10             	add    esp,0x10
c00155a6:	39 30                	cmp    DWORD PTR [eax],esi
c00155a8:	75 ba                	jne    c0015564 <Thr::processFromPID(int)+0x2c>
c00155aa:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00155af:	83 e8 01             	sub    eax,0x1
c00155b2:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00155b7:	74 0b                	je     c00155c4 <Thr::processFromPID(int)+0x8c>
c00155b9:	8d 76 00             	lea    esi,[esi+0x0]
c00155bc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00155bf:	5b                   	pop    ebx
c00155c0:	5e                   	pop    esi
c00155c1:	5f                   	pop    edi
c00155c2:	c3                   	ret    
c00155c3:	90                   	nop
c00155c4:	fb                   	sti    
c00155c5:	eb f5                	jmp    c00155bc <Thr::processFromPID(int)+0x84>
c00155c7:	90                   	nop
c00155c8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00155cd:	83 e8 01             	sub    eax,0x1
c00155d0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00155d5:	75 05                	jne    c00155dc <Thr::processFromPID(int)+0xa4>
c00155d7:	fb                   	sti    
c00155d8:	5b                   	pop    ebx
c00155d9:	5e                   	pop    esi
c00155da:	5f                   	pop    edi
c00155db:	c3                   	ret    
c00155dc:	5b                   	pop    ebx
c00155dd:	31 c0                	xor    eax,eax
c00155df:	5e                   	pop    esi
c00155e0:	5f                   	pop    edi
c00155e1:	c3                   	ret    
c00155e2:	66 90                	xchg   ax,ax

c00155e4 <unblockTask(ThreadControlBlock*)>:
c00155e4:	53                   	push   ebx
c00155e5:	83 ec 08             	sub    esp,0x8
c00155e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00155ec:	fa                   	cli    
c00155ed:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00155f2:	83 c0 01             	add    eax,0x1
c00155f5:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00155fa:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00155fd:	85 c0                	test   eax,eax
c00155ff:	74 67                	je     c0015668 <unblockTask(ThreadControlBlock*)+0x84>
c0015601:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015604:	83 f8 01             	cmp    eax,0x1
c0015607:	74 37                	je     c0015640 <unblockTask(ThreadControlBlock*)+0x5c>
c0015609:	83 ec 0c             	sub    esp,0xc
c001560c:	68 84 81 02 c0       	push   0xc0028184
c0015611:	e8 36 96 00 00       	call   c001ec4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015616:	83 c4 10             	add    esp,0x10
c0015619:	85 c0                	test   eax,eax
c001561b:	75 1b                	jne    c0015638 <unblockTask(ThreadControlBlock*)+0x54>
c001561d:	eb 5d                	jmp    c001567c <unblockTask(ThreadControlBlock*)+0x98>
c001561f:	90                   	nop
c0015620:	83 ec 08             	sub    esp,0x8
c0015623:	50                   	push   eax
c0015624:	68 84 81 02 c0       	push   0xc0028184
c0015629:	e8 3e 99 00 00       	call   c001ef6c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001562e:	83 c4 10             	add    esp,0x10
c0015631:	85 c0                	test   eax,eax
c0015633:	74 47                	je     c001567c <unblockTask(ThreadControlBlock*)+0x98>
c0015635:	8d 76 00             	lea    esi,[esi+0x0]
c0015638:	39 c3                	cmp    ebx,eax
c001563a:	75 e4                	jne    c0015620 <unblockTask(ThreadControlBlock*)+0x3c>
c001563c:	eb 12                	jmp    c0015650 <unblockTask(ThreadControlBlock*)+0x6c>
c001563e:	66 90                	xchg   ax,ax
c0015640:	83 ec 0c             	sub    esp,0xc
c0015643:	68 93 12 02 c0       	push   0xc0021293
c0015648:	e8 9d 53 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c001564d:	83 c4 10             	add    esp,0x10
c0015650:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015655:	83 e8 01             	sub    eax,0x1
c0015658:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001565d:	75 01                	jne    c0015660 <unblockTask(ThreadControlBlock*)+0x7c>
c001565f:	fb                   	sti    
c0015660:	83 c4 08             	add    esp,0x8
c0015663:	5b                   	pop    ebx
c0015664:	c3                   	ret    
c0015665:	8d 76 00             	lea    esi,[esi+0x0]
c0015668:	83 ec 0c             	sub    esp,0xc
c001566b:	68 7c 12 02 c0       	push   0xc002127c
c0015670:	e8 75 53 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0015675:	83 c4 10             	add    esp,0x10
c0015678:	eb d6                	jmp    c0015650 <unblockTask(ThreadControlBlock*)+0x6c>
c001567a:	66 90                	xchg   ax,ax
c001567c:	83 ec 08             	sub    esp,0x8
c001567f:	53                   	push   ebx
c0015680:	68 84 81 02 c0       	push   0xc0028184
c0015685:	e8 86 96 00 00       	call   c001ed10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001568a:	83 c4 10             	add    esp,0x10
c001568d:	eb c1                	jmp    c0015650 <unblockTask(ThreadControlBlock*)+0x6c>
c001568f:	90                   	nop

c0015690 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0015690:	55                   	push   ebp
c0015691:	57                   	push   edi
c0015692:	56                   	push   esi
c0015693:	53                   	push   ebx
c0015694:	83 ec 1c             	sub    esp,0x1c
c0015697:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001569b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001569e:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00156a4:	85 ed                	test   ebp,ebp
c00156a6:	7e 28                	jle    c00156d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00156a8:	31 f6                	xor    esi,esi
c00156aa:	66 90                	xchg   ax,ax
c00156ac:	83 ec 0c             	sub    esp,0xc
c00156af:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00156b6:	83 c6 01             	add    esi,0x1
c00156b9:	57                   	push   edi
c00156ba:	e8 ff 23 ff ff       	call   c0007abe <free>
c00156bf:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00156c2:	83 c4 10             	add    esp,0x10
c00156c5:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00156cb:	7f df                	jg     c00156ac <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00156cd:	8d 76 00             	lea    esi,[esi+0x0]
c00156d0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00156da:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00156df:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00156e2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00156e5:	d3 c0                	rol    eax,cl
c00156e7:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00156ee:	21 c8                	and    eax,ecx
c00156f0:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00156f7:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00156fa:	89 f7                	mov    edi,esi
c00156fc:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0015704:	0f 85 72 01 00 00    	jne    c001587c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001570a:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0015710:	85 ed                	test   ebp,ebp
c0015712:	74 1c                	je     c0015730 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0015714:	83 ec 0c             	sub    esp,0xc
c0015717:	55                   	push   ebp
c0015718:	e8 0b af ff ff       	call   c0010628 <EnvVarContainer::~EnvVarContainer()>
c001571d:	59                   	pop    ecx
c001571e:	5e                   	pop    esi
c001571f:	6a 0c                	push   0xc
c0015721:	55                   	push   ebp
c0015722:	e8 96 51 ff ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c0015727:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001572a:	83 c4 10             	add    esp,0x10
c001572d:	89 f7                	mov    edi,esi
c001572f:	90                   	nop
c0015730:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015736:	85 c0                	test   eax,eax
c0015738:	0f 84 b2 00 00 00    	je     c00157f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001573e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015741:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0015745:	31 c9                	xor    ecx,ecx
c0015747:	eb 17                	jmp    c0015760 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0015749:	8d 76 00             	lea    esi,[esi+0x0]
c001574c:	83 c1 01             	add    ecx,0x1
c001574f:	83 f9 10             	cmp    ecx,0x10
c0015752:	0f 84 98 00 00 00    	je     c00157f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015758:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001575e:	66 90                	xchg   ax,ax
c0015760:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0015767:	d3 fa                	sar    edx,cl
c0015769:	80 e2 01             	and    dl,0x1
c001576c:	74 de                	je     c001574c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001576e:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0015771:	01 d2                	add    edx,edx
c0015773:	01 ca                	add    edx,ecx
c0015775:	8d 14 92             	lea    edx,[edx+edx*4]
c0015778:	01 d0                	add    eax,edx
c001577a:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0015780:	83 fd 07             	cmp    ebp,0x7
c0015783:	75 c7                	jne    c001574c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015785:	05 40 02 00 00       	add    eax,0x240
c001578a:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001578d:	83 fd ff             	cmp    ebp,0xffffffff
c0015790:	0f 8c ee 00 00 00    	jl     c0015884 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0015796:	0f 84 ac 01 00 00    	je     c0015948 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c001579c:	85 ed                	test   ebp,ebp
c001579e:	0f 84 90 01 00 00    	je     c0015934 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00157a4:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00157a6:	75 a4                	jne    c001574c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00157a8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00157ae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00157b2:	01 d0                	add    eax,edx
c00157b4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00157b8:	83 ec 0c             	sub    esp,0xc
c00157bb:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00157c1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00157c4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00157ca:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00157d1:	50                   	push   eax
c00157d2:	e8 0d fe ff ff       	call   c00155e4 <unblockTask(ThreadControlBlock*)>
c00157d7:	83 c4 10             	add    esp,0x10
c00157da:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00157dd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00157e1:	89 f7                	mov    edi,esi
c00157e3:	83 c1 01             	add    ecx,0x1
c00157e6:	83 f9 10             	cmp    ecx,0x10
c00157e9:	0f 85 69 ff ff ff    	jne    c0015758 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00157ef:	90                   	nop
c00157f0:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00157f6:	85 c0                	test   eax,eax
c00157f8:	74 62                	je     c001585c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00157fa:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0015800:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0015806:	74 54                	je     c001585c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015808:	83 ec 0c             	sub    esp,0xc
c001580b:	68 84 81 02 c0       	push   0xc0028184
c0015810:	e8 37 94 00 00       	call   c001ec4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015815:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001581c:	89 c7                	mov    edi,eax
c001581e:	e8 0d 94 00 00       	call   c001ec30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015823:	83 c4 10             	add    esp,0x10
c0015826:	84 c0                	test   al,al
c0015828:	0f 84 ce 00 00 00    	je     c00158fc <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c001582e:	66 90                	xchg   ax,ax
c0015830:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015833:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015839:	85 d2                	test   edx,edx
c001583b:	74 0f                	je     c001584c <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c001583d:	83 ec 0c             	sub    esp,0xc
c0015840:	8b 02                	mov    eax,DWORD PTR [edx]
c0015842:	52                   	push   edx
c0015843:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015846:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015849:	83 c4 10             	add    esp,0x10
c001584c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0015856:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0015859:	8d 76 00             	lea    esi,[esi+0x0]
c001585c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0015862:	85 db                	test   ebx,ebx
c0015864:	74 16                	je     c001587c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015866:	83 ec 0c             	sub    esp,0xc
c0015869:	53                   	push   ebx
c001586a:	e8 27 43 ff ff       	call   c0009b96 <VAS::~VAS()>
c001586f:	58                   	pop    eax
c0015870:	5a                   	pop    edx
c0015871:	6a 14                	push   0x14
c0015873:	53                   	push   ebx
c0015874:	e8 44 50 ff ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c0015879:	83 c4 10             	add    esp,0x10
c001587c:	83 c4 1c             	add    esp,0x1c
c001587f:	5b                   	pop    ebx
c0015880:	5e                   	pop    esi
c0015881:	5f                   	pop    edi
c0015882:	5d                   	pop    ebp
c0015883:	c3                   	ret    
c0015884:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015888:	83 ec 0c             	sub    esp,0xc
c001588b:	68 48 13 02 c0       	push   0xc0021348
c0015890:	e8 82 b0 ff ff       	call   c0010917 <KePanic(char const*)>
c0015895:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015898:	83 c4 10             	add    esp,0x10
c001589b:	89 f7                	mov    edi,esi
c001589d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00158a1:	e9 a6 fe ff ff       	jmp    c001574c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00158a6:	66 90                	xchg   ax,ax
c00158a8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00158ae:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00158b4:	75 1e                	jne    c00158d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00158b6:	83 ec 0c             	sub    esp,0xc
c00158b9:	68 b0 13 02 c0       	push   0xc00213b0
c00158be:	e8 27 51 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c00158c3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00158ca:	e8 11 fa ff ff       	call   c00152e0 <blockTask(TaskState)>
c00158cf:	83 c4 10             	add    esp,0x10
c00158d2:	66 90                	xchg   ax,ax
c00158d4:	83 ec 08             	sub    esp,0x8
c00158d7:	56                   	push   esi
c00158d8:	68 84 81 02 c0       	push   0xc0028184
c00158dd:	e8 2e 94 00 00       	call   c001ed10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00158e2:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00158e9:	e8 5e 93 00 00       	call   c001ec4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00158ee:	83 c4 10             	add    esp,0x10
c00158f1:	39 f8                	cmp    eax,edi
c00158f3:	0f 84 37 ff ff ff    	je     c0015830 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00158f9:	8d 76 00             	lea    esi,[esi+0x0]
c00158fc:	83 ec 0c             	sub    esp,0xc
c00158ff:	68 84 81 02 c0       	push   0xc0028184
c0015904:	e8 43 93 00 00       	call   c001ec4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015909:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015910:	89 c6                	mov    esi,eax
c0015912:	e8 3d 93 00 00       	call   c001ec54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015917:	83 c4 10             	add    esp,0x10
c001591a:	39 f3                	cmp    ebx,esi
c001591c:	74 b6                	je     c00158d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001591e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015921:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015924:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001592a:	75 a8                	jne    c00158d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001592c:	e9 77 ff ff ff       	jmp    c00158a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0015931:	8d 76 00             	lea    esi,[esi+0x0]
c0015934:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015938:	83 ec 0c             	sub    esp,0xc
c001593b:	68 7c 13 02 c0       	push   0xc002137c
c0015940:	e9 4b ff ff ff       	jmp    c0015890 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0015945:	8d 76 00             	lea    esi,[esi+0x0]
c0015948:	8b 36                	mov    esi,DWORD PTR [esi]
c001594a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001594e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015951:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015954:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001595a:	01 d7                	add    edi,edx
c001595c:	89 f8                	mov    eax,edi
c001595e:	e9 51 fe ff ff       	jmp    c00157b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0015963:	90                   	nop

c0015964 <cleanerTaskFunction(void*)>:
c0015964:	53                   	push   ebx
c0015965:	83 ec 08             	sub    esp,0x8
c0015968:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001596d:	83 e8 01             	sub    eax,0x1
c0015970:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015975:	75 01                	jne    c0015978 <cleanerTaskFunction(void*)+0x14>
c0015977:	fb                   	sti    
c0015978:	fa                   	cli    
c0015979:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001597e:	80 3d 4c 81 02 c0 00 	cmp    BYTE PTR ds:0xc002814c,0x0
c0015985:	8d 50 01             	lea    edx,[eax+0x1]
c0015988:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001598e:	0f 84 c4 00 00 00    	je     c0015a58 <cleanerTaskFunction(void*)+0xf4>
c0015994:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015999:	85 c0                	test   eax,eax
c001599b:	75 03                	jne    c00159a0 <cleanerTaskFunction(void*)+0x3c>
c001599d:	fb                   	sti    
c001599e:	66 90                	xchg   ax,ax
c00159a0:	c6 05 4c 81 02 c0 00 	mov    BYTE PTR ds:0xc002814c,0x0
c00159a7:	fa                   	cli    
c00159a8:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00159ae:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c00159b4:	83 c2 01             	add    edx,0x1
c00159b7:	83 c1 01             	add    ecx,0x1
c00159ba:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00159c0:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00159c6:	fa                   	cli    
c00159c7:	8b 1d 68 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028168
c00159cd:	83 c3 01             	add    ebx,0x1
c00159d0:	89 1d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ebx
c00159d6:	eb 28                	jmp    c0015a00 <cleanerTaskFunction(void*)+0x9c>
c00159d8:	83 ec 0c             	sub    esp,0xc
c00159db:	68 6c 81 02 c0       	push   0xc002816c
c00159e0:	e8 67 92 00 00       	call   c001ec4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00159e5:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c00159ec:	89 c3                	mov    ebx,eax
c00159ee:	e8 61 92 00 00       	call   c001ec54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00159f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00159f6:	e8 95 fc ff ff       	call   c0015690 <cleanupTerminatedTask(ThreadControlBlock*)>
c00159fb:	83 c4 10             	add    esp,0x10
c00159fe:	66 90                	xchg   ax,ax
c0015a00:	83 ec 0c             	sub    esp,0xc
c0015a03:	68 6c 81 02 c0       	push   0xc002816c
c0015a08:	e8 23 92 00 00       	call   c001ec30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015a0d:	83 c4 10             	add    esp,0x10
c0015a10:	84 c0                	test   al,al
c0015a12:	74 c4                	je     c00159d8 <cleanerTaskFunction(void*)+0x74>
c0015a14:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a19:	83 e8 01             	sub    eax,0x1
c0015a1c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a21:	75 01                	jne    c0015a24 <cleanerTaskFunction(void*)+0xc0>
c0015a23:	fb                   	sti    
c0015a24:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015a29:	83 e8 01             	sub    eax,0x1
c0015a2c:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015a31:	0f 85 31 ff ff ff    	jne    c0015968 <cleanerTaskFunction(void*)+0x4>
c0015a37:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015a3c:	85 c0                	test   eax,eax
c0015a3e:	0f 84 24 ff ff ff    	je     c0015968 <cleanerTaskFunction(void*)+0x4>
c0015a44:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015a4e:	e8 79 f6 ff ff       	call   c00150cc <schedule()>
c0015a53:	e9 10 ff ff ff       	jmp    c0015968 <cleanerTaskFunction(void*)+0x4>
c0015a58:	83 ec 0c             	sub    esp,0xc
c0015a5b:	6a 02                	push   0x2
c0015a5d:	e8 56 f8 ff ff       	call   c00152b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015a62:	83 c4 10             	add    esp,0x10
c0015a65:	e9 36 ff ff ff       	jmp    c00159a0 <cleanerTaskFunction(void*)+0x3c>
c0015a6a:	66 90                	xchg   ax,ax

c0015a6c <terminateTask(int)>:
c0015a6c:	83 ec 14             	sub    esp,0x14
c0015a6f:	fa                   	cli    
c0015a70:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c0015a76:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0015a7c:	83 c2 01             	add    edx,0x1
c0015a7f:	83 c1 01             	add    ecx,0x1
c0015a82:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015a88:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015a8e:	fa                   	cli    
c0015a8f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a94:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015a98:	83 c0 01             	add    eax,0x1
c0015a9b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015aa0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015aa5:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015aa8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015aad:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015ab0:	50                   	push   eax
c0015ab1:	68 6c 81 02 c0       	push   0xc002816c
c0015ab6:	e8 55 92 00 00       	call   c001ed10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015abb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ac0:	83 c4 10             	add    esp,0x10
c0015ac3:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015aca:	a1 48 81 02 c0       	mov    eax,ds:0xc0028148
c0015acf:	85 c0                	test   eax,eax
c0015ad1:	74 65                	je     c0015b38 <terminateTask(int)+0xcc>
c0015ad3:	83 ec 0c             	sub    esp,0xc
c0015ad6:	c6 05 4c 81 02 c0 01 	mov    BYTE PTR ds:0xc002814c,0x1
c0015add:	50                   	push   eax
c0015ade:	e8 01 fb ff ff       	call   c00155e4 <unblockTask(ThreadControlBlock*)>
c0015ae3:	83 c4 10             	add    esp,0x10
c0015ae6:	66 90                	xchg   ax,ax
c0015ae8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015aed:	83 e8 01             	sub    eax,0x1
c0015af0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015af5:	75 01                	jne    c0015af8 <terminateTask(int)+0x8c>
c0015af7:	fb                   	sti    
c0015af8:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015afd:	83 e8 01             	sub    eax,0x1
c0015b00:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015b05:	75 09                	jne    c0015b10 <terminateTask(int)+0xa4>
c0015b07:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c0015b0e:	75 3c                	jne    c0015b4c <terminateTask(int)+0xe0>
c0015b10:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015b15:	83 e8 01             	sub    eax,0x1
c0015b18:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015b1d:	75 01                	jne    c0015b20 <terminateTask(int)+0xb4>
c0015b1f:	fb                   	sti    
c0015b20:	fa                   	cli    
c0015b21:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015b26:	83 c0 01             	add    eax,0x1
c0015b29:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015b2e:	66 90                	xchg   ax,ax
c0015b30:	e8 97 f5 ff ff       	call   c00150cc <schedule()>
c0015b35:	eb d9                	jmp    c0015b10 <terminateTask(int)+0xa4>
c0015b37:	90                   	nop
c0015b38:	83 ec 0c             	sub    esp,0xc
c0015b3b:	68 aa 12 02 c0       	push   0xc00212aa
c0015b40:	e8 a5 4e ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0015b45:	83 c4 10             	add    esp,0x10
c0015b48:	eb 9e                	jmp    c0015ae8 <terminateTask(int)+0x7c>
c0015b4a:	66 90                	xchg   ax,ax
c0015b4c:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015b56:	eb d8                	jmp    c0015b30 <terminateTask(int)+0xc4>

c0015b58 <Thr::terminateFromIRQ(int)>:
c0015b58:	83 ec 18             	sub    esp,0x18
c0015b5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015b5f:	50                   	push   eax
c0015b60:	e8 07 ff ff ff       	call   c0015a6c <terminateTask(int)>
c0015b65:	90                   	nop
c0015b66:	66 90                	xchg   ax,ax

c0015b68 <Semaphore::release()>:
c0015b68:	83 ec 0c             	sub    esp,0xc
c0015b6b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b6f:	fa                   	cli    
c0015b70:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015b75:	83 c0 01             	add    eax,0x1
c0015b78:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015b7d:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015b82:	8d 48 01             	lea    ecx,[eax+0x1]
c0015b85:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015b8b:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015b8e:	85 c9                	test   ecx,ecx
c0015b90:	74 42                	je     c0015bd4 <Semaphore::release()+0x6c>
c0015b92:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015b95:	83 ec 0c             	sub    esp,0xc
c0015b98:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015b9b:	51                   	push   ecx
c0015b9c:	e8 43 fa ff ff       	call   c00155e4 <unblockTask(ThreadControlBlock*)>
c0015ba1:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015ba6:	83 c4 10             	add    esp,0x10
c0015ba9:	83 e8 01             	sub    eax,0x1
c0015bac:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015bb1:	85 c0                	test   eax,eax
c0015bb3:	75 0b                	jne    c0015bc0 <Semaphore::release()+0x58>
c0015bb5:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015bba:	85 c0                	test   eax,eax
c0015bbc:	75 22                	jne    c0015be0 <Semaphore::release()+0x78>
c0015bbe:	66 90                	xchg   ax,ax
c0015bc0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015bc5:	83 e8 01             	sub    eax,0x1
c0015bc8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015bcd:	75 01                	jne    c0015bd0 <Semaphore::release()+0x68>
c0015bcf:	fb                   	sti    
c0015bd0:	83 c4 0c             	add    esp,0xc
c0015bd3:	c3                   	ret    
c0015bd4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015bd7:	83 e9 01             	sub    ecx,0x1
c0015bda:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015bdd:	eb cd                	jmp    c0015bac <Semaphore::release()+0x44>
c0015bdf:	90                   	nop
c0015be0:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015bea:	e8 dd f4 ff ff       	call   c00150cc <schedule()>
c0015bef:	eb cf                	jmp    c0015bc0 <Semaphore::release()+0x58>
c0015bf1:	8d 76 00             	lea    esi,[esi+0x0]

c0015bf4 <__static_initialization_and_destruction_0(int, int)>:
c0015bf4:	83 ec 0c             	sub    esp,0xc
c0015bf7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015bfc:	0f 85 8e 00 00 00    	jne    c0015c90 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015c02:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015c0a:	0f 85 80 00 00 00    	jne    c0015c90 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015c10:	83 ec 0c             	sub    esp,0xc
c0015c13:	68 84 81 02 c0       	push   0xc0028184
c0015c18:	e8 a7 93 00 00       	call   c001efc4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015c1d:	83 c4 10             	add    esp,0x10
c0015c20:	83 ec 04             	sub    esp,0x4
c0015c23:	68 44 1f 02 c0       	push   0xc0021f44
c0015c28:	68 84 81 02 c0       	push   0xc0028184
c0015c2d:	68 74 ef 01 c0       	push   0xc001ef74
c0015c32:	e8 36 4c ff ff       	call   c000a86d <__cxa_atexit>
c0015c37:	83 c4 10             	add    esp,0x10
c0015c3a:	83 ec 0c             	sub    esp,0xc
c0015c3d:	68 78 81 02 c0       	push   0xc0028178
c0015c42:	e8 7d 93 00 00       	call   c001efc4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015c47:	83 c4 10             	add    esp,0x10
c0015c4a:	83 ec 04             	sub    esp,0x4
c0015c4d:	68 44 1f 02 c0       	push   0xc0021f44
c0015c52:	68 78 81 02 c0       	push   0xc0028178
c0015c57:	68 74 ef 01 c0       	push   0xc001ef74
c0015c5c:	e8 0c 4c ff ff       	call   c000a86d <__cxa_atexit>
c0015c61:	83 c4 10             	add    esp,0x10
c0015c64:	83 ec 0c             	sub    esp,0xc
c0015c67:	68 6c 81 02 c0       	push   0xc002816c
c0015c6c:	e8 53 93 00 00       	call   c001efc4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015c71:	83 c4 10             	add    esp,0x10
c0015c74:	83 ec 04             	sub    esp,0x4
c0015c77:	68 44 1f 02 c0       	push   0xc0021f44
c0015c7c:	68 6c 81 02 c0       	push   0xc002816c
c0015c81:	68 74 ef 01 c0       	push   0xc001ef74
c0015c86:	e8 e2 4b ff ff       	call   c000a86d <__cxa_atexit>
c0015c8b:	83 c4 10             	add    esp,0x10
c0015c8e:	66 90                	xchg   ax,ax
c0015c90:	90                   	nop
c0015c91:	83 c4 0c             	add    esp,0xc
c0015c94:	c3                   	ret    
c0015c95:	8d 76 00             	lea    esi,[esi+0x0]

c0015c98 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015c98:	83 ec 0c             	sub    esp,0xc
c0015c9b:	83 ec 08             	sub    esp,0x8
c0015c9e:	68 ff ff 00 00       	push   0xffff
c0015ca3:	6a 01                	push   0x1
c0015ca5:	e8 4a ff ff ff       	call   c0015bf4 <__static_initialization_and_destruction_0(int, int)>
c0015caa:	83 c4 10             	add    esp,0x10
c0015cad:	83 c4 0c             	add    esp,0xc
c0015cb0:	c3                   	ret    

c0015cb1 <Vm::inbv(unsigned short)>:
c0015cb1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015cb5:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015cba:	75 06                	jne    c0015cc2 <Vm::inbv(unsigned short)+0x11>
c0015cbc:	a0 cc 81 02 c0       	mov    al,ds:0xc00281cc
c0015cc1:	c3                   	ret    
c0015cc2:	ec                   	in     al,dx
c0015cc3:	c3                   	ret    

c0015cc4 <Vm::outbv(unsigned short, unsigned char)>:
c0015cc4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015cc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ccc:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015cd1:	75 25                	jne    c0015cf8 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0015cd3:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015cd9:	8d 51 01             	lea    edx,[ecx+0x1]
c0015cdc:	88 81 e0 81 02 c0    	mov    BYTE PTR [ecx-0x3ffd7e20],al
c0015ce2:	89 15 cc 81 02 c0    	mov    DWORD PTR ds:0xc00281cc,edx
c0015ce8:	83 fa 20             	cmp    edx,0x20
c0015ceb:	75 0c                	jne    c0015cf9 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015ced:	c7 05 cc 81 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x1f
c0015cf7:	c3                   	ret    
c0015cf8:	ee                   	out    dx,al
c0015cf9:	c3                   	ret    

c0015cfa <Vm::realToLinear(unsigned short, unsigned short)>:
c0015cfa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015cff:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015d04:	c1 e0 04             	shl    eax,0x4
c0015d07:	01 d0                	add    eax,edx
c0015d09:	c3                   	ret    

c0015d0a <Vm::getSegment(unsigned int)>:
c0015d0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d0e:	c1 e8 10             	shr    eax,0x10
c0015d11:	c3                   	ret    

c0015d12 <Vm::getOffset(unsigned int)>:
c0015d12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d16:	c3                   	ret    

c0015d17 <Vm::mainloop2()>:
c0015d17:	83 ec 18             	sub    esp,0x18
c0015d1a:	fa                   	cli    
c0015d1b:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015d21:	6a 02                	push   0x2
c0015d23:	c6 05 c5 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c5,0x1
c0015d2a:	e8 89 f5 ff ff       	call   c00152b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015d2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d34:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015d38:	52                   	push   edx
c0015d39:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015d3d:	52                   	push   edx
c0015d3e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015d42:	52                   	push   edx
c0015d43:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015d47:	50                   	push   eax
c0015d48:	e8 c2 a4 fe ff       	call   c000020f <goToVM86>
c0015d4d:	83 c4 2c             	add    esp,0x2c
c0015d50:	c3                   	ret    

c0015d51 <Vm::mainVm8086Loop(void*)>:
c0015d51:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d56:	48                   	dec    eax
c0015d57:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015d5c:	75 01                	jne    c0015d5f <Vm::mainVm8086Loop(void*)+0xe>
c0015d5e:	fb                   	sti    
c0015d5f:	eb b6                	jmp    c0015d17 <Vm::mainloop2()>

c0015d61 <Vm::mainloop3(unsigned long)>:
c0015d61:	83 ec 18             	sub    esp,0x18
c0015d64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015d68:	fa                   	cli    
c0015d69:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015d6f:	6a 02                	push   0x2
c0015d71:	c6 05 c4 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c4,0x1
c0015d78:	a3 c0 81 02 c0       	mov    ds:0xc00281c0,eax
c0015d7d:	e8 36 f5 ff ff       	call   c00152b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015d82:	83 c4 1c             	add    esp,0x1c
c0015d85:	eb 90                	jmp    c0015d17 <Vm::mainloop2()>

c0015d87 <Vm::initialise8086()>:
c0015d87:	83 ec 0c             	sub    esp,0xc
c0015d8a:	68 80 00 00 00       	push   0x80
c0015d8f:	6a 00                	push   0x0
c0015d91:	68 51 5d 01 c0       	push   0xc0015d51
c0015d96:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015d9c:	e8 db f0 ff ff       	call   c0014e7c <Process::createThread(void (*)(void*), void*, int)>
c0015da1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015da8:	a3 c8 81 02 c0       	mov    ds:0xc00281c8,eax
c0015dad:	68 00 01 00 00       	push   0x100
c0015db2:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0015db7:	6a 00                	push   0x0
c0015db9:	6a 00                	push   0x0
c0015dbb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015dc1:	e8 52 42 ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015dc6:	83 c4 2c             	add    esp,0x2c
c0015dc9:	c3                   	ret    

c0015dca <Vm::finish8086()>:
c0015dca:	53                   	push   ebx
c0015dcb:	83 ec 08             	sub    esp,0x8
c0015dce:	fa                   	cli    
c0015dcf:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015dd5:	80 3d c4 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c4,0x0
c0015ddc:	75 15                	jne    c0015df3 <Vm::finish8086()+0x29>
c0015dde:	e8 e9 f2 ff ff       	call   c00150cc <schedule()>
c0015de3:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015de8:	48                   	dec    eax
c0015de9:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015dee:	75 de                	jne    c0015dce <Vm::finish8086()+0x4>
c0015df0:	fb                   	sti    
c0015df1:	eb db                	jmp    c0015dce <Vm::finish8086()+0x4>
c0015df3:	83 ec 0c             	sub    esp,0xc
c0015df6:	8b 1d c0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281c0
c0015dfc:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015e02:	c6 05 c4 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c4,0x0
c0015e09:	e8 d6 f7 ff ff       	call   c00155e4 <unblockTask(ThreadControlBlock*)>
c0015e0e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e13:	83 c4 10             	add    esp,0x10
c0015e16:	8d 50 ff             	lea    edx,[eax-0x1]
c0015e19:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015e1f:	85 d2                	test   edx,edx
c0015e21:	75 01                	jne    c0015e24 <Vm::finish8086()+0x5a>
c0015e23:	fb                   	sti    
c0015e24:	89 d8                	mov    eax,ebx
c0015e26:	83 c4 08             	add    esp,0x8
c0015e29:	5b                   	pop    ebx
c0015e2a:	c3                   	ret    

c0015e2b <Vm::getOutput8086(unsigned char*)>:
c0015e2b:	57                   	push   edi
c0015e2c:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015e32:	56                   	push   esi
c0015e33:	be e0 81 02 c0       	mov    esi,0xc00281e0
c0015e38:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015e3c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015e3e:	a1 cc 81 02 c0       	mov    eax,ds:0xc00281cc
c0015e43:	5e                   	pop    esi
c0015e44:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015e4e:	5f                   	pop    edi
c0015e4f:	c3                   	ret    

c0015e50 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015e50:	55                   	push   ebp
c0015e51:	57                   	push   edi
c0015e52:	56                   	push   esi
c0015e53:	53                   	push   ebx
c0015e54:	83 ec 0c             	sub    esp,0xc
c0015e57:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0015e5b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0015e5f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0015e63:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0015e67:	fa                   	cli    
c0015e68:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015e6e:	80 3d c5 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c5,0x0
c0015e75:	75 15                	jne    c0015e8c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0015e77:	e8 50 f2 ff ff       	call   c00150cc <schedule()>
c0015e7c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e81:	48                   	dec    eax
c0015e82:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015e87:	75 de                	jne    c0015e67 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015e89:	fb                   	sti    
c0015e8a:	eb db                	jmp    c0015e67 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015e8c:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015e91:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015e9b:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015e9f:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015ea3:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015ea7:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015eab:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015eaf:	0f b7 ff             	movzx  edi,di
c0015eb2:	0f b7 f6             	movzx  esi,si
c0015eb5:	50                   	push   eax
c0015eb6:	6a 20                	push   0x20
c0015eb8:	6a 00                	push   0x0
c0015eba:	68 e0 81 02 c0       	push   0xc00281e0
c0015ebf:	e8 2c a6 fe ff       	call   c00004f0 <memset>
c0015ec4:	5a                   	pop    edx
c0015ec5:	59                   	pop    ecx
c0015ec6:	57                   	push   edi
c0015ec7:	56                   	push   esi
c0015ec8:	e8 2d fe ff ff       	call   c0015cfa <Vm::realToLinear(unsigned short, unsigned short)>
c0015ecd:	83 c4 10             	add    esp,0x10
c0015ed0:	89 c7                	mov    edi,eax
c0015ed2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015ed6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0015eda:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015edc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015ee1:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015ee8:	48                   	dec    eax
c0015ee9:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015eee:	75 01                	jne    c0015ef1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0015ef0:	fb                   	sti    
c0015ef1:	83 ec 0c             	sub    esp,0xc
c0015ef4:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015efa:	e8 e5 f6 ff ff       	call   c00155e4 <unblockTask(ThreadControlBlock*)>
c0015eff:	83 c4 1c             	add    esp,0x1c
c0015f02:	b0 01                	mov    al,0x1
c0015f04:	5b                   	pop    ebx
c0015f05:	5e                   	pop    esi
c0015f06:	5f                   	pop    edi
c0015f07:	5d                   	pop    ebp
c0015f08:	c3                   	ret    

c0015f09 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015f09:	55                   	push   ebp
c0015f0a:	57                   	push   edi
c0015f0b:	56                   	push   esi
c0015f0c:	53                   	push   ebx
c0015f0d:	83 ec 2c             	sub    esp,0x2c
c0015f10:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0015f14:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0015f18:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0015f1c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0015f20:	fa                   	cli    
c0015f21:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015f27:	0f b6 35 c5 81 02 c0 	movzx  esi,BYTE PTR ds:0xc00281c5
c0015f2e:	89 f0                	mov    eax,esi
c0015f30:	84 c0                	test   al,al
c0015f32:	75 1d                	jne    c0015f51 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0015f34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015f38:	e8 8f f1 ff ff       	call   c00150cc <schedule()>
c0015f3d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f42:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f46:	48                   	dec    eax
c0015f47:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015f4c:	75 d2                	jne    c0015f20 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015f4e:	fb                   	sti    
c0015f4f:	eb cf                	jmp    c0015f20 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015f51:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015f56:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015f60:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0015f64:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015f68:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0015f6c:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0015f70:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015f74:	50                   	push   eax
c0015f75:	6a 20                	push   0x20
c0015f77:	6a 00                	push   0x0
c0015f79:	68 e0 81 02 c0       	push   0xc00281e0
c0015f7e:	e8 6d a5 fe ff       	call   c00004f0 <memset>
c0015f83:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015f8a:	e8 1f 1b ff ff       	call   c0007aae <malloc>
c0015f8f:	83 c4 0c             	add    esp,0xc
c0015f92:	89 c3                	mov    ebx,eax
c0015f94:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015f9a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015f9e:	50                   	push   eax
c0015f9f:	e8 c8 4f ff ff       	call   c000af6c <File::File(char const*, Process*)>
c0015fa4:	83 c4 10             	add    esp,0x10
c0015fa7:	85 db                	test   ebx,ebx
c0015fa9:	75 0a                	jne    c0015fb5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0015fab:	83 ec 0c             	sub    esp,0xc
c0015fae:	68 d8 13 02 c0       	push   0xc00213d8
c0015fb3:	eb 2b                	jmp    c0015fe0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd7>
c0015fb5:	50                   	push   eax
c0015fb6:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015fba:	50                   	push   eax
c0015fbb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015fbf:	50                   	push   eax
c0015fc0:	53                   	push   ebx
c0015fc1:	e8 0e 53 ff ff       	call   c000b2d4 <File::stat(unsigned long long*, bool*)>
c0015fc6:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015fca:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015fce:	83 c4 10             	add    esp,0x10
c0015fd1:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0015fd6:	74 27                	je     c0015fff <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf6>
c0015fd8:	83 ec 0c             	sub    esp,0xc
c0015fdb:	68 ec 13 02 c0       	push   0xc00213ec
c0015fe0:	e8 32 a9 ff ff       	call   c0010917 <KePanic(char const*)>
c0015fe5:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015fea:	83 c4 10             	add    esp,0x10
c0015fed:	48                   	dec    eax
c0015fee:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015ff3:	85 c0                	test   eax,eax
c0015ff5:	75 01                	jne    c0015ff8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xef>
c0015ff7:	fb                   	sti    
c0015ff8:	31 f6                	xor    esi,esi
c0015ffa:	e9 8f 00 00 00       	jmp    c001608e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x185>
c0015fff:	51                   	push   ecx
c0016000:	51                   	push   ecx
c0016001:	6a 01                	push   0x1
c0016003:	53                   	push   ebx
c0016004:	e8 1f 50 ff ff       	call   c000b028 <File::open(FileOpenMode)>
c0016009:	83 c4 10             	add    esp,0x10
c001600c:	85 c0                	test   eax,eax
c001600e:	74 26                	je     c0016036 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x12d>
c0016010:	83 ec 0c             	sub    esp,0xc
c0016013:	68 05 14 02 c0       	push   0xc0021405
c0016018:	e8 fa a8 ff ff       	call   c0010917 <KePanic(char const*)>
c001601d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0016022:	83 c4 10             	add    esp,0x10
c0016025:	48                   	dec    eax
c0016026:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001602b:	85 c0                	test   eax,eax
c001602d:	75 c9                	jne    c0015ff8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xef>
c001602f:	fb                   	sti    
c0016030:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016034:	eb 58                	jmp    c001608e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x185>
c0016036:	0f b7 ed             	movzx  ebp,bp
c0016039:	50                   	push   eax
c001603a:	0f b7 ff             	movzx  edi,di
c001603d:	50                   	push   eax
c001603e:	55                   	push   ebp
c001603f:	57                   	push   edi
c0016040:	e8 b5 fc ff ff       	call   c0015cfa <Vm::realToLinear(unsigned short, unsigned short)>
c0016045:	5a                   	pop    edx
c0016046:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016048:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001604c:	51                   	push   ecx
c001604d:	50                   	push   eax
c001604e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016052:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016056:	53                   	push   ebx
c0016057:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001605a:	83 c4 14             	add    esp,0x14
c001605d:	53                   	push   ebx
c001605e:	e8 23 50 ff ff       	call   c000b086 <File::close()>
c0016063:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0016068:	83 c4 10             	add    esp,0x10
c001606b:	48                   	dec    eax
c001606c:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0016073:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0016078:	85 c0                	test   eax,eax
c001607a:	75 01                	jne    c001607d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x174>
c001607c:	fb                   	sti    
c001607d:	83 ec 0c             	sub    esp,0xc
c0016080:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0016086:	e8 59 f5 ff ff       	call   c00155e4 <unblockTask(ThreadControlBlock*)>
c001608b:	83 c4 10             	add    esp,0x10
c001608e:	83 c4 2c             	add    esp,0x2c
c0016091:	89 f0                	mov    eax,esi
c0016093:	5b                   	pop    ebx
c0016094:	5e                   	pop    esi
c0016095:	5f                   	pop    edi
c0016096:	5d                   	pop    ebp
c0016097:	c3                   	ret    

c0016098 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016098:	57                   	push   edi
c0016099:	56                   	push   esi
c001609a:	53                   	push   ebx
c001609b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001609f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160a3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00160a7:	83 e8 06             	sub    eax,0x6
c00160aa:	0f b7 c0             	movzx  eax,ax
c00160ad:	50                   	push   eax
c00160ae:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00160b3:	50                   	push   eax
c00160b4:	e8 41 fc ff ff       	call   c0015cfa <Vm::realToLinear(unsigned short, unsigned short)>
c00160b9:	5a                   	pop    edx
c00160ba:	5e                   	pop    esi
c00160bb:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00160be:	8d 56 fa             	lea    edx,[esi-0x6]
c00160c1:	8b 71 38             	mov    esi,DWORD PTR [ecx+0x38]
c00160c4:	81 e2 ff ff 00 00    	and    edx,0xffff
c00160ca:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00160cd:	8d 56 02             	lea    edx,[esi+0x2]
c00160d0:	66 89 10             	mov    WORD PTR [eax],dx
c00160d3:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00160d6:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00160da:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00160dd:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00160e1:	89 d6                	mov    esi,edx
c00160e3:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00160e9:	81 e6 ff fd ff ff    	and    esi,0xfffffdff
c00160ef:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00160f3:	74 05                	je     c00160fa <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x62>
c00160f5:	80 ce 02             	or     dh,0x2
c00160f8:	89 d6                	mov    esi,edx
c00160fa:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00160fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016103:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016107:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001610f:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0016112:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001611a:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001611d:	5b                   	pop    ebx
c001611e:	5e                   	pop    esi
c001611f:	5f                   	pop    edi
c0016120:	c3                   	ret    

c0016121 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016121:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016126:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001612b:	c1 e0 04             	shl    eax,0x4
c001612e:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016131:	c3                   	ret    

c0016132 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016132:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016137:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001613c:	c1 e0 04             	shl    eax,0x4
c001613f:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016143:	c3                   	ret    

c0016144 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016144:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016149:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001614e:	c1 e0 04             	shl    eax,0x4
c0016151:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016154:	c3                   	ret    

c0016155 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016155:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001615a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001615f:	c1 e0 04             	shl    eax,0x4
c0016162:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016166:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016169:	c3                   	ret    

c001616a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001616a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001616f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016174:	c1 e0 04             	shl    eax,0x4
c0016177:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001617b:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001617f:	c3                   	ret    

c0016180 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016180:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016185:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001618a:	c1 e0 04             	shl    eax,0x4
c001618d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016191:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016194:	c3                   	ret    

c0016195 <Vm::faultHandler(regs*)>:
c0016195:	55                   	push   ebp
c0016196:	57                   	push   edi
c0016197:	56                   	push   esi
c0016198:	53                   	push   ebx
c0016199:	83 ec 2c             	sub    esp,0x2c
c001619c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00161a0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00161a3:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00161a7:	0f b7 f8             	movzx  edi,ax
c00161aa:	52                   	push   edx
c00161ab:	0f b7 c0             	movzx  eax,ax
c00161ae:	50                   	push   eax
c00161af:	e8 46 fb ff ff       	call   c0015cfa <Vm::realToLinear(unsigned short, unsigned short)>
c00161b4:	5a                   	pop    edx
c00161b5:	59                   	pop    ecx
c00161b6:	89 c1                	mov    ecx,eax
c00161b8:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00161bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00161bf:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00161c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00161c8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00161cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00161cf:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00161d4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00161d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00161dc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00161e0:	e8 15 fb ff ff       	call   c0015cfa <Vm::realToLinear(unsigned short, unsigned short)>
c00161e5:	5e                   	pop    esi
c00161e6:	be 06 00 00 00       	mov    esi,0x6
c00161eb:	5d                   	pop    ebp
c00161ec:	31 ed                	xor    ebp,ebp
c00161ee:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00161f3:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00161f6:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c00161fc:	0f 84 54 02 00 00    	je     c0016456 <Vm::faultHandler(regs*)+0x2c1>
c0016202:	0f 87 94 00 00 00    	ja     c001629c <Vm::faultHandler(regs*)+0x107>
c0016208:	83 fa 66             	cmp    edx,0x66
c001620b:	0f 84 c2 01 00 00    	je     c00163d3 <Vm::faultHandler(regs*)+0x23e>
c0016211:	77 47                	ja     c001625a <Vm::faultHandler(regs*)+0xc5>
c0016213:	83 fa 36             	cmp    edx,0x36
c0016216:	0f 84 aa 01 00 00    	je     c00163c6 <Vm::faultHandler(regs*)+0x231>
c001621c:	77 1a                	ja     c0016238 <Vm::faultHandler(regs*)+0xa3>
c001621e:	83 fa 26             	cmp    edx,0x26
c0016221:	0f 84 78 01 00 00    	je     c001639f <Vm::faultHandler(regs*)+0x20a>
c0016227:	83 fa 2e             	cmp    edx,0x2e
c001622a:	0f 85 01 06 00 00    	jne    c0016831 <Vm::faultHandler(regs*)+0x69c>
c0016230:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016233:	31 f6                	xor    esi,esi
c0016235:	41                   	inc    ecx
c0016236:	eb bb                	jmp    c00161f3 <Vm::faultHandler(regs*)+0x5e>
c0016238:	83 fa 64             	cmp    edx,0x64
c001623b:	0f 84 6b 01 00 00    	je     c00163ac <Vm::faultHandler(regs*)+0x217>
c0016241:	0f 87 72 01 00 00    	ja     c00163b9 <Vm::faultHandler(regs*)+0x224>
c0016247:	83 fa 3e             	cmp    edx,0x3e
c001624a:	0f 85 e1 05 00 00    	jne    c0016831 <Vm::faultHandler(regs*)+0x69c>
c0016250:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016253:	be 01 00 00 00       	mov    esi,0x1
c0016258:	eb db                	jmp    c0016235 <Vm::faultHandler(regs*)+0xa0>
c001625a:	83 fa 6d             	cmp    edx,0x6d
c001625d:	0f 84 14 03 00 00    	je     c0016577 <Vm::faultHandler(regs*)+0x3e2>
c0016263:	77 17                	ja     c001627c <Vm::faultHandler(regs*)+0xe7>
c0016265:	83 fa 67             	cmp    edx,0x67
c0016268:	0f 84 72 01 00 00    	je     c00163e0 <Vm::faultHandler(regs*)+0x24b>
c001626e:	83 fa 6c             	cmp    edx,0x6c
c0016271:	0f 84 91 02 00 00    	je     c0016508 <Vm::faultHandler(regs*)+0x373>
c0016277:	e9 b5 05 00 00       	jmp    c0016831 <Vm::faultHandler(regs*)+0x69c>
c001627c:	83 fa 6f             	cmp    edx,0x6f
c001627f:	0f 84 1d 04 00 00    	je     c00166a2 <Vm::faultHandler(regs*)+0x50d>
c0016285:	0f 82 7f 03 00 00    	jb     c001660a <Vm::faultHandler(regs*)+0x475>
c001628b:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016291:	0f 84 56 01 00 00    	je     c00163ed <Vm::faultHandler(regs*)+0x258>
c0016297:	e9 95 05 00 00       	jmp    c0016831 <Vm::faultHandler(regs*)+0x69c>
c001629c:	81 fa ec 00 00 00    	cmp    edx,0xec
c00162a2:	0f 84 31 05 00 00    	je     c00167d9 <Vm::faultHandler(regs*)+0x644>
c00162a8:	0f 87 89 00 00 00    	ja     c0016337 <Vm::faultHandler(regs*)+0x1a2>
c00162ae:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00162b4:	0f 84 b0 04 00 00    	je     c001676a <Vm::faultHandler(regs*)+0x5d5>
c00162ba:	77 58                	ja     c0016314 <Vm::faultHandler(regs*)+0x17f>
c00162bc:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00162c2:	0f 84 ee 01 00 00    	je     c00164b6 <Vm::faultHandler(regs*)+0x321>
c00162c8:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00162ce:	0f 85 5d 05 00 00    	jne    c0016831 <Vm::faultHandler(regs*)+0x69c>
c00162d4:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00162d7:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00162da:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00162de:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00162e1:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00162e5:	81 ca 00 02 02 00    	or     edx,0x20200
c00162eb:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00162ee:	0f b7 40 04          	movzx  eax,WORD PTR [eax+0x4]
c00162f2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00162f8:	c1 e8 09             	shr    eax,0x9
c00162fb:	83 e0 01             	and    eax,0x1
c00162fe:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016301:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016304:	83 c0 06             	add    eax,0x6
c0016307:	25 ff ff 00 00       	and    eax,0xffff
c001630c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001630f:	e9 19 05 00 00       	jmp    c001682d <Vm::faultHandler(regs*)+0x698>
c0016314:	81 fa e6 00 00 00    	cmp    edx,0xe6
c001631a:	0f 84 8f 04 00 00    	je     c00167af <Vm::faultHandler(regs*)+0x61a>
c0016320:	0f 82 60 04 00 00    	jb     c0016786 <Vm::faultHandler(regs*)+0x5f1>
c0016326:	81 fa e7 00 00 00    	cmp    edx,0xe7
c001632c:	0f 84 94 04 00 00    	je     c00167c6 <Vm::faultHandler(regs*)+0x631>
c0016332:	e9 fa 04 00 00       	jmp    c0016831 <Vm::faultHandler(regs*)+0x69c>
c0016337:	81 fa ef 00 00 00    	cmp    edx,0xef
c001633d:	0f 84 d7 04 00 00    	je     c001681a <Vm::faultHandler(regs*)+0x685>
c0016343:	77 2e                	ja     c0016373 <Vm::faultHandler(regs*)+0x1de>
c0016345:	81 fa ed 00 00 00    	cmp    edx,0xed
c001634b:	0f 84 a4 04 00 00    	je     c00167f5 <Vm::faultHandler(regs*)+0x660>
c0016351:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016357:	0f 85 d4 04 00 00    	jne    c0016831 <Vm::faultHandler(regs*)+0x69c>
c001635d:	50                   	push   eax
c001635e:	50                   	push   eax
c001635f:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016363:	50                   	push   eax
c0016364:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016368:	50                   	push   eax
c0016369:	e8 56 f9 ff ff       	call   c0015cc4 <Vm::outbv(unsigned short, unsigned char)>
c001636e:	e9 9f 04 00 00       	jmp    c0016812 <Vm::faultHandler(regs*)+0x67d>
c0016373:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016379:	0f 84 6d 01 00 00    	je     c00164ec <Vm::faultHandler(regs*)+0x357>
c001637f:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016385:	0f 84 6f 01 00 00    	je     c00164fa <Vm::faultHandler(regs*)+0x365>
c001638b:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016391:	0f 85 9a 04 00 00    	jne    c0016831 <Vm::faultHandler(regs*)+0x69c>
c0016397:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001639a:	e9 96 fe ff ff       	jmp    c0016235 <Vm::faultHandler(regs*)+0xa0>
c001639f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00163a2:	be 02 00 00 00       	mov    esi,0x2
c00163a7:	e9 89 fe ff ff       	jmp    c0016235 <Vm::faultHandler(regs*)+0xa0>
c00163ac:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00163af:	be 03 00 00 00       	mov    esi,0x3
c00163b4:	e9 7c fe ff ff       	jmp    c0016235 <Vm::faultHandler(regs*)+0xa0>
c00163b9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00163bc:	be 04 00 00 00       	mov    esi,0x4
c00163c1:	e9 6f fe ff ff       	jmp    c0016235 <Vm::faultHandler(regs*)+0xa0>
c00163c6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00163c9:	be 05 00 00 00       	mov    esi,0x5
c00163ce:	e9 62 fe ff ff       	jmp    c0016235 <Vm::faultHandler(regs*)+0xa0>
c00163d3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00163d6:	bd 01 00 00 00       	mov    ebp,0x1
c00163db:	e9 55 fe ff ff       	jmp    c0016235 <Vm::faultHandler(regs*)+0xa0>
c00163e0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00163e3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00163e8:	e9 48 fe ff ff       	jmp    c0016235 <Vm::faultHandler(regs*)+0xa0>
c00163ed:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00163f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00163f4:	83 e5 01             	and    ebp,0x1
c00163f7:	74 30                	je     c0016429 <Vm::faultHandler(regs*)+0x294>
c00163f9:	83 e9 04             	sub    ecx,0x4
c00163fc:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016402:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016408:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001640b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001640e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016414:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016418:	0f 84 0c 04 00 00    	je     c001682a <Vm::faultHandler(regs*)+0x695>
c001641e:	80 ce 02             	or     dh,0x2
c0016421:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016424:	e9 01 04 00 00       	jmp    c001682a <Vm::faultHandler(regs*)+0x695>
c0016429:	83 e9 02             	sub    ecx,0x2
c001642c:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016432:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016435:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016439:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001643f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016443:	74 05                	je     c001644a <Vm::faultHandler(regs*)+0x2b5>
c0016445:	80 ce 02             	or     dh,0x2
c0016448:	eb 03                	jmp    c001644d <Vm::faultHandler(regs*)+0x2b8>
c001644a:	80 e6 fd             	and    dh,0xfd
c001644d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016451:	e9 d4 03 00 00       	jmp    c001682a <Vm::faultHandler(regs*)+0x695>
c0016456:	83 e5 01             	and    ebp,0x1
c0016459:	74 2a                	je     c0016485 <Vm::faultHandler(regs*)+0x2f0>
c001645b:	8b 10                	mov    edx,DWORD PTR [eax]
c001645d:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016463:	81 ca 00 02 02 00    	or     edx,0x20200
c0016469:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001646c:	8b 00                	mov    eax,DWORD PTR [eax]
c001646e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016474:	c1 e8 09             	shr    eax,0x9
c0016477:	83 e0 01             	and    eax,0x1
c001647a:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001647d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016480:	83 c0 04             	add    eax,0x4
c0016483:	eb 24                	jmp    c00164a9 <Vm::faultHandler(regs*)+0x314>
c0016485:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016488:	81 ca 00 02 02 00    	or     edx,0x20200
c001648e:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016491:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016494:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001649a:	c1 e8 09             	shr    eax,0x9
c001649d:	83 e0 01             	and    eax,0x1
c00164a0:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00164a3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00164a6:	83 c0 02             	add    eax,0x2
c00164a9:	25 ff ff 00 00       	and    eax,0xffff
c00164ae:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00164b1:	e9 74 03 00 00       	jmp    c001682a <Vm::faultHandler(regs*)+0x695>
c00164b6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00164ba:	3d ee 00 00 00       	cmp    eax,0xee
c00164bf:	75 10                	jne    c00164d1 <Vm::faultHandler(regs*)+0x33c>
c00164c1:	83 ec 0c             	sub    esp,0xc
c00164c4:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00164c7:	e8 95 f8 ff ff       	call   c0015d61 <Vm::mainloop3(unsigned long)>
c00164cc:	e9 44 03 00 00       	jmp    c0016815 <Vm::faultHandler(regs*)+0x680>
c00164d1:	83 ec 0c             	sub    esp,0xc
c00164d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00164d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00164dc:	51                   	push   ecx
c00164dd:	50                   	push   eax
c00164de:	53                   	push   ebx
c00164df:	e8 b4 fb ff ff       	call   c0016098 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00164e4:	83 c4 20             	add    esp,0x20
c00164e7:	e9 41 03 00 00       	jmp    c001682d <Vm::faultHandler(regs*)+0x698>
c00164ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164f1:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00164f5:	e9 30 03 00 00       	jmp    c001682a <Vm::faultHandler(regs*)+0x695>
c00164fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164ff:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016503:	e9 22 03 00 00       	jmp    c001682a <Vm::faultHandler(regs*)+0x695>
c0016508:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001650b:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016510:	74 2b                	je     c001653d <Vm::faultHandler(regs*)+0x3a8>
c0016512:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016519:	76 22                	jbe    c001653d <Vm::faultHandler(regs*)+0x3a8>
c001651b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001651f:	50                   	push   eax
c0016520:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016524:	50                   	push   eax
c0016525:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016529:	50                   	push   eax
c001652a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001652e:	50                   	push   eax
c001652f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016533:	50                   	push   eax
c0016534:	6a 6c                	push   0x6c
c0016536:	6a 6c                	push   0x6c
c0016538:	e9 bd 01 00 00       	jmp    c00166fa <Vm::faultHandler(regs*)+0x565>
c001653d:	83 ec 0c             	sub    esp,0xc
c0016540:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016544:	0f b7 f6             	movzx  esi,si
c0016547:	50                   	push   eax
c0016548:	e8 64 f7 ff ff       	call   c0015cb1 <Vm::inbv(unsigned short)>
c001654d:	83 c4 0c             	add    esp,0xc
c0016550:	0f b6 c0             	movzx  eax,al
c0016553:	50                   	push   eax
c0016554:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0016558:	50                   	push   eax
c0016559:	56                   	push   esi
c001655a:	e8 f6 fb ff ff       	call   c0016155 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001655f:	83 c4 10             	add    esp,0x10
c0016562:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016565:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016569:	74 03                	je     c001656e <Vm::faultHandler(regs*)+0x3d9>
c001656b:	48                   	dec    eax
c001656c:	eb 01                	jmp    c001656f <Vm::faultHandler(regs*)+0x3da>
c001656e:	40                   	inc    eax
c001656f:	0f b7 c0             	movzx  eax,ax
c0016572:	e9 8b 00 00 00       	jmp    c0016602 <Vm::faultHandler(regs*)+0x46d>
c0016577:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001657a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001657d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016582:	74 29                	je     c00165ad <Vm::faultHandler(regs*)+0x418>
c0016584:	3d ff ff 00 00       	cmp    eax,0xffff
c0016589:	76 22                	jbe    c00165ad <Vm::faultHandler(regs*)+0x418>
c001658b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001658f:	50                   	push   eax
c0016590:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016594:	50                   	push   eax
c0016595:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016599:	50                   	push   eax
c001659a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001659e:	50                   	push   eax
c001659f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00165a3:	50                   	push   eax
c00165a4:	6a 6d                	push   0x6d
c00165a6:	6a 6d                	push   0x6d
c00165a8:	e9 4d 01 00 00       	jmp    c00166fa <Vm::faultHandler(regs*)+0x565>
c00165ad:	0f b7 c8             	movzx  ecx,ax
c00165b0:	0f b7 f6             	movzx  esi,si
c00165b3:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00165b6:	83 e5 01             	and    ebp,0x1
c00165b9:	74 20                	je     c00165db <Vm::faultHandler(regs*)+0x446>
c00165bb:	ed                   	in     eax,dx
c00165bc:	55                   	push   ebp
c00165bd:	50                   	push   eax
c00165be:	51                   	push   ecx
c00165bf:	56                   	push   esi
c00165c0:	e8 bb fb ff ff       	call   c0016180 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00165c5:	83 c4 10             	add    esp,0x10
c00165c8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00165cb:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00165cf:	74 05                	je     c00165d6 <Vm::faultHandler(regs*)+0x441>
c00165d1:	83 e8 04             	sub    eax,0x4
c00165d4:	eb 27                	jmp    c00165fd <Vm::faultHandler(regs*)+0x468>
c00165d6:	83 c0 04             	add    eax,0x4
c00165d9:	eb 22                	jmp    c00165fd <Vm::faultHandler(regs*)+0x468>
c00165db:	66 ed                	in     ax,dx
c00165dd:	0f b7 c0             	movzx  eax,ax
c00165e0:	57                   	push   edi
c00165e1:	50                   	push   eax
c00165e2:	51                   	push   ecx
c00165e3:	56                   	push   esi
c00165e4:	e8 81 fb ff ff       	call   c001616a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00165e9:	83 c4 10             	add    esp,0x10
c00165ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00165ef:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00165f3:	74 05                	je     c00165fa <Vm::faultHandler(regs*)+0x465>
c00165f5:	83 e8 02             	sub    eax,0x2
c00165f8:	eb 03                	jmp    c00165fd <Vm::faultHandler(regs*)+0x468>
c00165fa:	83 c0 02             	add    eax,0x2
c00165fd:	25 ff ff 00 00       	and    eax,0xffff
c0016602:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016605:	e9 20 02 00 00       	jmp    c001682a <Vm::faultHandler(regs*)+0x695>
c001660a:	8d 46 ff             	lea    eax,[esi-0x1]
c001660d:	0f b6 f0             	movzx  esi,al
c0016610:	83 fe 05             	cmp    esi,0x5
c0016613:	77 23                	ja     c0016638 <Vm::faultHandler(regs*)+0x4a3>
c0016615:	ff 24 b5 78 14 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdeb88]
c001661c:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0016621:	eb 15                	jmp    c0016638 <Vm::faultHandler(regs*)+0x4a3>
c0016623:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0016627:	eb 0f                	jmp    c0016638 <Vm::faultHandler(regs*)+0x4a3>
c0016629:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001662d:	eb 09                	jmp    c0016638 <Vm::faultHandler(regs*)+0x4a3>
c001662f:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0016633:	eb 03                	jmp    c0016638 <Vm::faultHandler(regs*)+0x4a3>
c0016635:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016638:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001663b:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016640:	74 29                	je     c001666b <Vm::faultHandler(regs*)+0x4d6>
c0016642:	3d ff ff 00 00       	cmp    eax,0xffff
c0016647:	76 22                	jbe    c001666b <Vm::faultHandler(regs*)+0x4d6>
c0016649:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001664d:	50                   	push   eax
c001664e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016652:	50                   	push   eax
c0016653:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016657:	50                   	push   eax
c0016658:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001665c:	50                   	push   eax
c001665d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016661:	50                   	push   eax
c0016662:	6a 6e                	push   0x6e
c0016664:	6a 6e                	push   0x6e
c0016666:	e9 8f 00 00 00       	jmp    c00166fa <Vm::faultHandler(regs*)+0x565>
c001666b:	0f b7 c0             	movzx  eax,ax
c001666e:	52                   	push   edx
c001666f:	52                   	push   edx
c0016670:	50                   	push   eax
c0016671:	57                   	push   edi
c0016672:	e8 aa fa ff ff       	call   c0016121 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0016677:	59                   	pop    ecx
c0016678:	0f b6 c0             	movzx  eax,al
c001667b:	5e                   	pop    esi
c001667c:	50                   	push   eax
c001667d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016681:	50                   	push   eax
c0016682:	e8 3d f6 ff ff       	call   c0015cc4 <Vm::outbv(unsigned short, unsigned char)>
c0016687:	83 c4 10             	add    esp,0x10
c001668a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001668d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016691:	74 03                	je     c0016696 <Vm::faultHandler(regs*)+0x501>
c0016693:	48                   	dec    eax
c0016694:	eb 01                	jmp    c0016697 <Vm::faultHandler(regs*)+0x502>
c0016696:	40                   	inc    eax
c0016697:	0f b7 c0             	movzx  eax,ax
c001669a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001669d:	e9 88 01 00 00       	jmp    c001682a <Vm::faultHandler(regs*)+0x695>
c00166a2:	8d 46 ff             	lea    eax,[esi-0x1]
c00166a5:	0f b6 f0             	movzx  esi,al
c00166a8:	83 fe 05             	cmp    esi,0x5
c00166ab:	77 1e                	ja     c00166cb <Vm::faultHandler(regs*)+0x536>
c00166ad:	ff 24 b5 90 14 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdeb70]
c00166b4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00166b8:	eb 11                	jmp    c00166cb <Vm::faultHandler(regs*)+0x536>
c00166ba:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00166bd:	eb 0c                	jmp    c00166cb <Vm::faultHandler(regs*)+0x536>
c00166bf:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00166c2:	eb 07                	jmp    c00166cb <Vm::faultHandler(regs*)+0x536>
c00166c4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00166c7:	eb 02                	jmp    c00166cb <Vm::faultHandler(regs*)+0x536>
c00166c9:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00166cb:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00166ce:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00166d3:	74 37                	je     c001670c <Vm::faultHandler(regs*)+0x577>
c00166d5:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00166db:	76 2f                	jbe    c001670c <Vm::faultHandler(regs*)+0x577>
c00166dd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00166e1:	50                   	push   eax
c00166e2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00166e6:	50                   	push   eax
c00166e7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00166eb:	50                   	push   eax
c00166ec:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00166f0:	50                   	push   eax
c00166f1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00166f5:	50                   	push   eax
c00166f6:	6a 6f                	push   0x6f
c00166f8:	6a 6f                	push   0x6f
c00166fa:	68 1e 14 02 c0       	push   0xc002141e
c00166ff:	e8 e6 42 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0016704:	83 c4 20             	add    esp,0x20
c0016707:	e9 83 01 00 00       	jmp    c001688f <Vm::faultHandler(regs*)+0x6fa>
c001670c:	0f b7 d7             	movzx  edx,di
c001670f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016712:	0f b7 c6             	movzx  eax,si
c0016715:	81 e1 00 04 00 00    	and    ecx,0x400
c001671b:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001671e:	83 e5 01             	and    ebp,0x1
c0016721:	74 1d                	je     c0016740 <Vm::faultHandler(regs*)+0x5ab>
c0016723:	55                   	push   ebp
c0016724:	55                   	push   ebp
c0016725:	50                   	push   eax
c0016726:	52                   	push   edx
c0016727:	e8 18 fa ff ff       	call   c0016144 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001672c:	83 c4 10             	add    esp,0x10
c001672f:	89 fa                	mov    edx,edi
c0016731:	ef                   	out    dx,eax
c0016732:	85 c9                	test   ecx,ecx
c0016734:	74 05                	je     c001673b <Vm::faultHandler(regs*)+0x5a6>
c0016736:	83 ee 04             	sub    esi,0x4
c0016739:	eb 21                	jmp    c001675c <Vm::faultHandler(regs*)+0x5c7>
c001673b:	83 c6 04             	add    esi,0x4
c001673e:	eb 1c                	jmp    c001675c <Vm::faultHandler(regs*)+0x5c7>
c0016740:	55                   	push   ebp
c0016741:	55                   	push   ebp
c0016742:	50                   	push   eax
c0016743:	52                   	push   edx
c0016744:	e8 e9 f9 ff ff       	call   c0016132 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0016749:	83 c4 10             	add    esp,0x10
c001674c:	89 fa                	mov    edx,edi
c001674e:	66 ef                	out    dx,ax
c0016750:	85 c9                	test   ecx,ecx
c0016752:	74 05                	je     c0016759 <Vm::faultHandler(regs*)+0x5c4>
c0016754:	83 ee 02             	sub    esi,0x2
c0016757:	eb 03                	jmp    c001675c <Vm::faultHandler(regs*)+0x5c7>
c0016759:	83 c6 02             	add    esi,0x2
c001675c:	81 e6 ff ff 00 00    	and    esi,0xffff
c0016762:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0016765:	e9 c0 00 00 00       	jmp    c001682a <Vm::faultHandler(regs*)+0x695>
c001676a:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016771:	83 ec 0c             	sub    esp,0xc
c0016774:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016778:	50                   	push   eax
c0016779:	e8 33 f5 ff ff       	call   c0015cb1 <Vm::inbv(unsigned short)>
c001677e:	0f b6 c0             	movzx  eax,al
c0016781:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016784:	eb 3a                	jmp    c00167c0 <Vm::faultHandler(regs*)+0x62b>
c0016786:	83 e5 01             	and    ebp,0x1
c0016789:	74 07                	je     c0016792 <Vm::faultHandler(regs*)+0x5fd>
c001678b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001678f:	ed                   	in     eax,dx
c0016790:	eb 14                	jmp    c00167a6 <Vm::faultHandler(regs*)+0x611>
c0016792:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0016795:	66 31 f6             	xor    si,si
c0016798:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001679b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001679f:	66 ed                	in     ax,dx
c00167a1:	0f b7 c0             	movzx  eax,ax
c00167a4:	09 f0                	or     eax,esi
c00167a6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00167a9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00167ad:	eb 7e                	jmp    c001682d <Vm::faultHandler(regs*)+0x698>
c00167af:	52                   	push   edx
c00167b0:	52                   	push   edx
c00167b1:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00167b5:	50                   	push   eax
c00167b6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00167ba:	50                   	push   eax
c00167bb:	e8 04 f5 ff ff       	call   c0015cc4 <Vm::outbv(unsigned short, unsigned char)>
c00167c0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00167c4:	eb 4f                	jmp    c0016815 <Vm::faultHandler(regs*)+0x680>
c00167c6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00167c9:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00167cd:	83 e5 01             	and    ebp,0x1
c00167d0:	74 03                	je     c00167d5 <Vm::faultHandler(regs*)+0x640>
c00167d2:	ef                   	out    dx,eax
c00167d3:	eb d4                	jmp    c00167a9 <Vm::faultHandler(regs*)+0x614>
c00167d5:	66 ef                	out    dx,ax
c00167d7:	eb d0                	jmp    c00167a9 <Vm::faultHandler(regs*)+0x614>
c00167d9:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00167e0:	83 ec 0c             	sub    esp,0xc
c00167e3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00167e7:	50                   	push   eax
c00167e8:	e8 c4 f4 ff ff       	call   c0015cb1 <Vm::inbv(unsigned short)>
c00167ed:	0f b6 c0             	movzx  eax,al
c00167f0:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00167f3:	eb 1d                	jmp    c0016812 <Vm::faultHandler(regs*)+0x67d>
c00167f5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00167f8:	83 e5 01             	and    ebp,0x1
c00167fb:	74 03                	je     c0016800 <Vm::faultHandler(regs*)+0x66b>
c00167fd:	ed                   	in     eax,dx
c00167fe:	eb 0d                	jmp    c001680d <Vm::faultHandler(regs*)+0x678>
c0016800:	66 ed                	in     ax,dx
c0016802:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0016805:	0f b7 c0             	movzx  eax,ax
c0016808:	66 31 d2             	xor    dx,dx
c001680b:	09 d0                	or     eax,edx
c001680d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016810:	eb 18                	jmp    c001682a <Vm::faultHandler(regs*)+0x695>
c0016812:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016815:	83 c4 10             	add    esp,0x10
c0016818:	eb 13                	jmp    c001682d <Vm::faultHandler(regs*)+0x698>
c001681a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001681d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016820:	83 e5 01             	and    ebp,0x1
c0016823:	74 03                	je     c0016828 <Vm::faultHandler(regs*)+0x693>
c0016825:	ef                   	out    dx,eax
c0016826:	eb 02                	jmp    c001682a <Vm::faultHandler(regs*)+0x695>
c0016828:	66 ef                	out    dx,ax
c001682a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001682d:	b0 01                	mov    al,0x1
c001682f:	eb 60                	jmp    c0016891 <Vm::faultHandler(regs*)+0x6fc>
c0016831:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016835:	50                   	push   eax
c0016836:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001683a:	50                   	push   eax
c001683b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001683f:	50                   	push   eax
c0016840:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016844:	50                   	push   eax
c0016845:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016849:	50                   	push   eax
c001684a:	52                   	push   edx
c001684b:	52                   	push   edx
c001684c:	68 4b 14 02 c0       	push   0xc002144b
c0016851:	e8 94 41 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0016856:	83 c4 20             	add    esp,0x20
c0016859:	83 ec 0c             	sub    esp,0xc
c001685c:	6a 60                	push   0x60
c001685e:	e8 4e f4 ff ff       	call   c0015cb1 <Vm::inbv(unsigned short)>
c0016863:	83 c4 10             	add    esp,0x10
c0016866:	0f b6 d0             	movzx  edx,al
c0016869:	83 fa 1c             	cmp    edx,0x1c
c001686c:	74 05                	je     c0016873 <Vm::faultHandler(regs*)+0x6de>
c001686e:	83 fa 5a             	cmp    edx,0x5a
c0016871:	75 e6                	jne    c0016859 <Vm::faultHandler(regs*)+0x6c4>
c0016873:	0f b6 c0             	movzx  eax,al
c0016876:	83 f8 1c             	cmp    eax,0x1c
c0016879:	74 05                	je     c0016880 <Vm::faultHandler(regs*)+0x6eb>
c001687b:	83 f8 5a             	cmp    eax,0x5a
c001687e:	75 0f                	jne    c001688f <Vm::faultHandler(regs*)+0x6fa>
c0016880:	83 ec 0c             	sub    esp,0xc
c0016883:	6a 60                	push   0x60
c0016885:	e8 27 f4 ff ff       	call   c0015cb1 <Vm::inbv(unsigned short)>
c001688a:	83 c4 10             	add    esp,0x10
c001688d:	eb e4                	jmp    c0016873 <Vm::faultHandler(regs*)+0x6de>
c001688f:	31 c0                	xor    eax,eax
c0016891:	83 c4 2c             	add    esp,0x2c
c0016894:	5b                   	pop    ebx
c0016895:	5e                   	pop    esi
c0016896:	5f                   	pop    edi
c0016897:	5d                   	pop    ebp
c0016898:	c3                   	ret    

c0016899 <noCopro(unsigned long)>:
c0016899:	c3                   	ret    

c001689a <nmiHandler(regs*, void*)>:
c001689a:	83 ec 0c             	sub    esp,0xc
c001689d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00168a2:	83 ec 0c             	sub    esp,0xc
c00168a5:	50                   	push   eax
c00168a6:	e8 03 0a ff ff       	call   c00072ae <Computer::handleNMI()>
c00168ab:	83 c4 10             	add    esp,0x10
c00168ae:	90                   	nop
c00168af:	83 c4 0c             	add    esp,0xc
c00168b2:	c3                   	ret    

c00168b3 <doubleFault(regs*, void*)>:
c00168b3:	55                   	push   ebp
c00168b4:	89 e5                	mov    ebp,esp
c00168b6:	83 ec 08             	sub    esp,0x8
c00168b9:	83 ec 0c             	sub    esp,0xc
c00168bc:	68 a8 14 02 c0       	push   0xc00214a8
c00168c1:	e8 51 a0 ff ff       	call   c0010917 <KePanic(char const*)>
c00168c6:	83 c4 10             	add    esp,0x10
c00168c9:	90                   	nop
c00168ca:	c9                   	leave  
c00168cb:	c3                   	ret    

c00168cc <displayDebugInfo(regs*)>:
c00168cc:	83 ec 1c             	sub    esp,0x1c
c00168cf:	0f 20 c0             	mov    eax,cr0
c00168d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00168d6:	0f 20 d0             	mov    eax,cr2
c00168d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00168dd:	0f 20 d8             	mov    eax,cr3
c00168e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00168e4:	0f 20 e0             	mov    eax,cr4
c00168e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00168ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168ee:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00168f1:	83 ec 08             	sub    esp,0x8
c00168f4:	50                   	push   eax
c00168f5:	68 c4 14 02 c0       	push   0xc00214c4
c00168fa:	e8 eb 40 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c00168ff:	83 c4 10             	add    esp,0x10
c0016902:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016906:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0016909:	83 ec 08             	sub    esp,0x8
c001690c:	50                   	push   eax
c001690d:	68 b5 14 02 c0       	push   0xc00214b5
c0016912:	e8 d3 40 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0016917:	83 c4 10             	add    esp,0x10
c001691a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001691e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0016921:	83 ec 08             	sub    esp,0x8
c0016924:	50                   	push   eax
c0016925:	68 c0 14 02 c0       	push   0xc00214c0
c001692a:	e8 bb 40 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c001692f:	83 c4 10             	add    esp,0x10
c0016932:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016936:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016939:	83 ec 08             	sub    esp,0x8
c001693c:	50                   	push   eax
c001693d:	68 cf 14 02 c0       	push   0xc00214cf
c0016942:	e8 a3 40 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0016947:	83 c4 10             	add    esp,0x10
c001694a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001694e:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0016951:	83 ec 08             	sub    esp,0x8
c0016954:	50                   	push   eax
c0016955:	68 da 14 02 c0       	push   0xc00214da
c001695a:	e8 8b 40 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c001695f:	83 c4 10             	add    esp,0x10
c0016962:	83 ec 08             	sub    esp,0x8
c0016965:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016969:	68 e5 14 02 c0       	push   0xc00214e5
c001696e:	e8 77 40 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0016973:	83 c4 10             	add    esp,0x10
c0016976:	83 ec 08             	sub    esp,0x8
c0016979:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001697d:	68 f0 14 02 c0       	push   0xc00214f0
c0016982:	e8 63 40 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0016987:	83 c4 10             	add    esp,0x10
c001698a:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001698f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016995:	83 ec 0c             	sub    esp,0xc
c0016998:	50                   	push   eax
c0016999:	e8 a5 1d ff ff       	call   c0008743 <setActiveTerminal(VgaText*)>
c001699e:	83 c4 10             	add    esp,0x10
c00169a1:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169a6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169ac:	83 ec 08             	sub    esp,0x8
c00169af:	68 fb 14 02 c0       	push   0xc00214fb
c00169b4:	50                   	push   eax
c00169b5:	e8 d6 20 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c00169ba:	83 c4 10             	add    esp,0x10
c00169bd:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169c2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169c8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00169cc:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00169cf:	83 ec 08             	sub    esp,0x8
c00169d2:	52                   	push   edx
c00169d3:	50                   	push   eax
c00169d4:	e8 71 20 ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c00169d9:	83 c4 10             	add    esp,0x10
c00169dc:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169e1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169e7:	83 ec 08             	sub    esp,0x8
c00169ea:	68 09 15 02 c0       	push   0xc0021509
c00169ef:	50                   	push   eax
c00169f0:	e8 9b 20 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c00169f5:	83 c4 10             	add    esp,0x10
c00169f8:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169fd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a03:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0016a08:	8b 12                	mov    edx,DWORD PTR [edx]
c0016a0a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016a0d:	83 c2 0c             	add    edx,0xc
c0016a10:	83 ec 08             	sub    esp,0x8
c0016a13:	52                   	push   edx
c0016a14:	50                   	push   eax
c0016a15:	e8 76 20 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016a1a:	83 c4 10             	add    esp,0x10
c0016a1d:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a22:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a28:	83 ec 08             	sub    esp,0x8
c0016a2b:	68 12 15 02 c0       	push   0xc0021512
c0016a30:	50                   	push   eax
c0016a31:	e8 5a 20 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016a36:	83 c4 10             	add    esp,0x10
c0016a39:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a3e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a44:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a48:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0016a4b:	83 ec 08             	sub    esp,0x8
c0016a4e:	52                   	push   edx
c0016a4f:	50                   	push   eax
c0016a50:	e8 f5 1f ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016a55:	83 c4 10             	add    esp,0x10
c0016a58:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a5d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a63:	83 ec 08             	sub    esp,0x8
c0016a66:	68 1a 15 02 c0       	push   0xc002151a
c0016a6b:	50                   	push   eax
c0016a6c:	e8 1f 20 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016a71:	83 c4 10             	add    esp,0x10
c0016a74:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a79:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a7f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a83:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0016a86:	83 ec 08             	sub    esp,0x8
c0016a89:	52                   	push   edx
c0016a8a:	50                   	push   eax
c0016a8b:	e8 ba 1f ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016a90:	83 c4 10             	add    esp,0x10
c0016a93:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a98:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a9e:	83 ec 08             	sub    esp,0x8
c0016aa1:	68 22 15 02 c0       	push   0xc0021522
c0016aa6:	50                   	push   eax
c0016aa7:	e8 e4 1f ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016aac:	83 c4 10             	add    esp,0x10
c0016aaf:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ab4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016aba:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016abe:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0016ac1:	83 ec 08             	sub    esp,0x8
c0016ac4:	52                   	push   edx
c0016ac5:	50                   	push   eax
c0016ac6:	e8 7f 1f ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016acb:	83 c4 10             	add    esp,0x10
c0016ace:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ad3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ad9:	83 ec 08             	sub    esp,0x8
c0016adc:	68 2a 15 02 c0       	push   0xc002152a
c0016ae1:	50                   	push   eax
c0016ae2:	e8 a9 1f ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016ae7:	83 c4 10             	add    esp,0x10
c0016aea:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016aef:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016af5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016af9:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016afc:	83 ec 08             	sub    esp,0x8
c0016aff:	52                   	push   edx
c0016b00:	50                   	push   eax
c0016b01:	e8 44 1f ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016b06:	83 c4 10             	add    esp,0x10
c0016b09:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b0e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b14:	83 ec 08             	sub    esp,0x8
c0016b17:	68 32 15 02 c0       	push   0xc0021532
c0016b1c:	50                   	push   eax
c0016b1d:	e8 6e 1f ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016b22:	83 c4 10             	add    esp,0x10
c0016b25:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b2a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b30:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016b34:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0016b37:	83 ec 08             	sub    esp,0x8
c0016b3a:	52                   	push   edx
c0016b3b:	50                   	push   eax
c0016b3c:	e8 09 1f ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016b41:	83 c4 10             	add    esp,0x10
c0016b44:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b49:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b4f:	83 ec 08             	sub    esp,0x8
c0016b52:	68 3a 15 02 c0       	push   0xc002153a
c0016b57:	50                   	push   eax
c0016b58:	e8 33 1f ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016b5d:	83 c4 10             	add    esp,0x10
c0016b60:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b65:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b6b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016b6f:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016b72:	83 ec 08             	sub    esp,0x8
c0016b75:	52                   	push   edx
c0016b76:	50                   	push   eax
c0016b77:	e8 ce 1e ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016b7c:	83 c4 10             	add    esp,0x10
c0016b7f:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b84:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b8a:	83 ec 08             	sub    esp,0x8
c0016b8d:	68 42 15 02 c0       	push   0xc0021542
c0016b92:	50                   	push   eax
c0016b93:	e8 f8 1e ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016b98:	83 c4 10             	add    esp,0x10
c0016b9b:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ba0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ba6:	83 ec 08             	sub    esp,0x8
c0016ba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016bad:	50                   	push   eax
c0016bae:	e8 97 1e ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016bb3:	83 c4 10             	add    esp,0x10
c0016bb6:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016bbb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016bc1:	83 ec 08             	sub    esp,0x8
c0016bc4:	68 4b 15 02 c0       	push   0xc002154b
c0016bc9:	50                   	push   eax
c0016bca:	e8 c1 1e ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016bcf:	83 c4 10             	add    esp,0x10
c0016bd2:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016bd7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016bdd:	83 ec 08             	sub    esp,0x8
c0016be0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016be4:	50                   	push   eax
c0016be5:	e8 60 1e ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016bea:	83 c4 10             	add    esp,0x10
c0016bed:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016bf2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016bf8:	83 ec 08             	sub    esp,0x8
c0016bfb:	68 53 15 02 c0       	push   0xc0021553
c0016c00:	50                   	push   eax
c0016c01:	e8 8a 1e ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016c06:	83 c4 10             	add    esp,0x10
c0016c09:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016c0e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016c14:	83 ec 08             	sub    esp,0x8
c0016c17:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016c1b:	50                   	push   eax
c0016c1c:	e8 29 1e ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016c21:	83 c4 10             	add    esp,0x10
c0016c24:	fa                   	cli    
c0016c25:	f4                   	hlt    
c0016c26:	eb fe                	jmp    c0016c26 <displayDebugInfo(regs*)+0x35a>

c0016c28 <HalSystemIdle()>:
c0016c28:	56                   	push   esi
c0016c29:	53                   	push   ebx
c0016c2a:	83 ec 14             	sub    esp,0x14
c0016c2d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016c32:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016c38:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0016c3e:	83 e0 04             	and    eax,0x4
c0016c41:	0f b6 c0             	movzx  eax,al
c0016c44:	85 c0                	test   eax,eax
c0016c46:	0f 95 c0             	setne  al
c0016c49:	0f b6 c0             	movzx  eax,al
c0016c4c:	85 c0                	test   eax,eax
c0016c4e:	74 4c                	je     c0016c9c <HalSystemIdle()+0x74>
c0016c50:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016c55:	83 ec 08             	sub    esp,0x8
c0016c58:	68 e1 00 00 00       	push   0xe1
c0016c5d:	50                   	push   eax
c0016c5e:	e8 55 04 ff ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c0016c63:	83 c4 10             	add    esp,0x10
c0016c66:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c6a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016c6e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016c73:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016c77:	83 e2 02             	and    edx,0x2
c0016c7a:	89 d3                	mov    ebx,edx
c0016c7c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c80:	83 e2 00             	and    edx,0x0
c0016c83:	89 d6                	mov    esi,edx
c0016c85:	56                   	push   esi
c0016c86:	53                   	push   ebx
c0016c87:	68 e1 00 00 00       	push   0xe1
c0016c8c:	50                   	push   eax
c0016c8d:	e8 52 04 ff ff       	call   c00070e4 <Computer::wrmsr(unsigned int, unsigned long long)>
c0016c92:	83 c4 10             	add    esp,0x10
c0016c95:	e8 fa 94 fe ff       	call   c0000194 <doTPAUSE>
c0016c9a:	eb 01                	jmp    c0016c9d <HalSystemIdle()+0x75>
c0016c9c:	f4                   	hlt    
c0016c9d:	90                   	nop
c0016c9e:	83 c4 14             	add    esp,0x14
c0016ca1:	5b                   	pop    ebx
c0016ca2:	5e                   	pop    esi
c0016ca3:	c3                   	ret    

c0016ca4 <displayProgramFault(char const*)>:
c0016ca4:	83 ec 0c             	sub    esp,0xc
c0016ca7:	83 ec 0c             	sub    esp,0xc
c0016caa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cae:	e8 37 3d ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0016cb3:	83 c4 10             	add    esp,0x10
c0016cb6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016cbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cbd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016cc0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016cc6:	85 c0                	test   eax,eax
c0016cc8:	74 21                	je     c0016ceb <displayProgramFault(char const*)+0x47>
c0016cca:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016ccf:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cd1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016cd4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016cda:	6a 04                	push   0x4
c0016cdc:	6a 0f                	push   0xf
c0016cde:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ce2:	50                   	push   eax
c0016ce3:	e8 1a 1e ff ff       	call   c0008b02 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0016ce8:	83 c4 10             	add    esp,0x10
c0016ceb:	90                   	nop
c0016cec:	83 c4 0c             	add    esp,0xc
c0016cef:	c3                   	ret    

c0016cf0 <gpFault(regs*, void*)>:
c0016cf0:	83 ec 1c             	sub    esp,0x1c
c0016cf3:	c7 05 14 82 02 c0 95 61 01 c0 	mov    DWORD PTR ds:0xc0028214,0xc0016195
c0016cfd:	a1 14 82 02 c0       	mov    eax,ds:0xc0028214
c0016d02:	85 c0                	test   eax,eax
c0016d04:	74 1e                	je     c0016d24 <gpFault(regs*, void*)+0x34>
c0016d06:	a1 14 82 02 c0       	mov    eax,ds:0xc0028214
c0016d0b:	83 ec 0c             	sub    esp,0xc
c0016d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d12:	ff d0                	call   eax
c0016d14:	83 c4 10             	add    esp,0x10
c0016d17:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016d1b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016d20:	85 c0                	test   eax,eax
c0016d22:	75 2e                	jne    c0016d52 <gpFault(regs*, void*)+0x62>
c0016d24:	83 ec 0c             	sub    esp,0xc
c0016d27:	68 5b 15 02 c0       	push   0xc002155b
c0016d2c:	e8 73 ff ff ff       	call   c0016ca4 <displayProgramFault(char const*)>
c0016d31:	83 c4 10             	add    esp,0x10
c0016d34:	83 ec 0c             	sub    esp,0xc
c0016d37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d3b:	e8 8c fb ff ff       	call   c00168cc <displayDebugInfo(regs*)>
c0016d40:	83 c4 10             	add    esp,0x10
c0016d43:	83 ec 0c             	sub    esp,0xc
c0016d46:	6a 00                	push   0x0
c0016d48:	e8 0b ee ff ff       	call   c0015b58 <Thr::terminateFromIRQ(int)>
c0016d4d:	83 c4 10             	add    esp,0x10
c0016d50:	eb 01                	jmp    c0016d53 <gpFault(regs*, void*)+0x63>
c0016d52:	90                   	nop
c0016d53:	83 c4 1c             	add    esp,0x1c
c0016d56:	c3                   	ret    

c0016d57 <pgFault(regs*, void*)>:
c0016d57:	83 ec 1c             	sub    esp,0x1c
c0016d5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d5e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0016d61:	0f 20 d0             	mov    eax,cr2
c0016d64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016d68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d6c:	83 ec 04             	sub    esp,0x4
c0016d6f:	52                   	push   edx
c0016d70:	50                   	push   eax
c0016d71:	68 38 16 02 c0       	push   0xc0021638
c0016d76:	e8 6f 3c ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0016d7b:	83 c4 10             	add    esp,0x10
c0016d7e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016d83:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d85:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016d88:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016d8e:	0f 20 d2             	mov    edx,cr2
c0016d91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016d95:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016d99:	83 ec 08             	sub    esp,0x8
c0016d9c:	52                   	push   edx
c0016d9d:	50                   	push   eax
c0016d9e:	e8 b1 37 ff ff       	call   c000a554 <VAS::tryLoadBackOffDisk(unsigned long)>
c0016da3:	83 c4 10             	add    esp,0x10
c0016da6:	0f b6 c0             	movzx  eax,al
c0016da9:	85 c0                	test   eax,eax
c0016dab:	75 2e                	jne    c0016ddb <pgFault(regs*, void*)+0x84>
c0016dad:	83 ec 0c             	sub    esp,0xc
c0016db0:	68 74 15 02 c0       	push   0xc0021574
c0016db5:	e8 ea fe ff ff       	call   c0016ca4 <displayProgramFault(char const*)>
c0016dba:	83 c4 10             	add    esp,0x10
c0016dbd:	83 ec 0c             	sub    esp,0xc
c0016dc0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016dc4:	e8 03 fb ff ff       	call   c00168cc <displayDebugInfo(regs*)>
c0016dc9:	83 c4 10             	add    esp,0x10
c0016dcc:	83 ec 0c             	sub    esp,0xc
c0016dcf:	6a 00                	push   0x0
c0016dd1:	e8 82 ed ff ff       	call   c0015b58 <Thr::terminateFromIRQ(int)>
c0016dd6:	83 c4 10             	add    esp,0x10
c0016dd9:	eb 01                	jmp    c0016ddc <pgFault(regs*, void*)+0x85>
c0016ddb:	90                   	nop
c0016ddc:	83 c4 1c             	add    esp,0x1c
c0016ddf:	c3                   	ret    

c0016de0 <otherISRHandler(regs*, void*)>:
c0016de0:	83 ec 0c             	sub    esp,0xc
c0016de3:	83 ec 0c             	sub    esp,0xc
c0016de6:	68 60 16 02 c0       	push   0xc0021660
c0016deb:	e8 b4 fe ff ff       	call   c0016ca4 <displayProgramFault(char const*)>
c0016df0:	83 c4 10             	add    esp,0x10
c0016df3:	83 ec 0c             	sub    esp,0xc
c0016df6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dfa:	e8 cd fa ff ff       	call   c00168cc <displayDebugInfo(regs*)>
c0016dff:	83 c4 10             	add    esp,0x10
c0016e02:	83 ec 0c             	sub    esp,0xc
c0016e05:	6a 00                	push   0x0
c0016e07:	e8 4c ed ff ff       	call   c0015b58 <Thr::terminateFromIRQ(int)>
c0016e0c:	83 c4 10             	add    esp,0x10
c0016e0f:	90                   	nop
c0016e10:	83 c4 0c             	add    esp,0xc
c0016e13:	c3                   	ret    

c0016e14 <opcodeFault(regs*, void*)>:
c0016e14:	55                   	push   ebp
c0016e15:	89 e5                	mov    ebp,esp
c0016e17:	83 ec 08             	sub    esp,0x8
c0016e1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016e1d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016e20:	83 ec 08             	sub    esp,0x8
c0016e23:	50                   	push   eax
c0016e24:	68 7f 15 02 c0       	push   0xc002157f
c0016e29:	e8 bc 3b ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0016e2e:	83 c4 10             	add    esp,0x10
c0016e31:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016e36:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016e3c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0016e42:	0f b6 c0             	movzx  eax,al
c0016e45:	85 c0                	test   eax,eax
c0016e47:	74 21                	je     c0016e6a <opcodeFault(regs*, void*)+0x56>
c0016e49:	83 ec 0c             	sub    esp,0xc
c0016e4c:	68 88 16 02 c0       	push   0xc0021688
c0016e51:	e8 94 3b ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0016e56:	83 c4 10             	add    esp,0x10
c0016e59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016e5c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016e5f:	8d 50 19             	lea    edx,[eax+0x19]
c0016e62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016e65:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016e68:	eb 2b                	jmp    c0016e95 <opcodeFault(regs*, void*)+0x81>
c0016e6a:	83 ec 0c             	sub    esp,0xc
c0016e6d:	68 8d 15 02 c0       	push   0xc002158d
c0016e72:	e8 2d fe ff ff       	call   c0016ca4 <displayProgramFault(char const*)>
c0016e77:	83 c4 10             	add    esp,0x10
c0016e7a:	83 ec 0c             	sub    esp,0xc
c0016e7d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0016e80:	e8 47 fa ff ff       	call   c00168cc <displayDebugInfo(regs*)>
c0016e85:	83 c4 10             	add    esp,0x10
c0016e88:	83 ec 0c             	sub    esp,0xc
c0016e8b:	6a 00                	push   0x0
c0016e8d:	e8 c6 ec ff ff       	call   c0015b58 <Thr::terminateFromIRQ(int)>
c0016e92:	83 c4 10             	add    esp,0x10
c0016e95:	c9                   	leave  
c0016e96:	c3                   	ret    

c0016e97 <i386SaveCoprocessor(void*)>:
c0016e97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e9b:	83 c0 3f             	add    eax,0x3f
c0016e9e:	83 e0 c0             	and    eax,0xffffffc0
c0016ea1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016ea5:	ff 25 10 82 02 c0    	jmp    DWORD PTR ds:0xc0028210

c0016eab <i386LoadCoprocessor(void*)>:
c0016eab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016eaf:	83 c0 3f             	add    eax,0x3f
c0016eb2:	83 e0 c0             	and    eax,0xffffffc0
c0016eb5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016eb9:	ff 25 0c 82 02 c0    	jmp    DWORD PTR ds:0xc002820c

c0016ebf <x87EmulHandler(regs*, void*)>:
c0016ebf:	53                   	push   ebx
c0016ec0:	83 ec 08             	sub    esp,0x8
c0016ec3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ec8:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0016ecc:	74 10                	je     c0016ede <x87EmulHandler(regs*, void*)+0x1f>
c0016ece:	83 ec 0c             	sub    esp,0xc
c0016ed1:	68 9a 15 02 c0       	push   0xc002159a
c0016ed6:	e8 3c 9a ff ff       	call   c0010917 <KePanic(char const*)>
c0016edb:	83 c4 10             	add    esp,0x10
c0016ede:	0f 20 c0             	mov    eax,cr0
c0016ee1:	a8 08                	test   al,0x8
c0016ee3:	74 59                	je     c0016f3e <x87EmulHandler(regs*, void*)+0x7f>
c0016ee5:	0f 06                	clts   
c0016ee7:	a1 08 82 02 c0       	mov    eax,ds:0xc0028208
c0016eec:	85 c0                	test   eax,eax
c0016eee:	74 0e                	je     c0016efe <x87EmulHandler(regs*, void*)+0x3f>
c0016ef0:	83 ec 0c             	sub    esp,0xc
c0016ef3:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016ef6:	e8 9c ff ff ff       	call   c0016e97 <i386SaveCoprocessor(void*)>
c0016efb:	83 c4 10             	add    esp,0x10
c0016efe:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0016f04:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0016f08:	75 12                	jne    c0016f1c <x87EmulHandler(regs*, void*)+0x5d>
c0016f0a:	83 ec 0c             	sub    esp,0xc
c0016f0d:	68 40 02 00 00       	push   0x240
c0016f12:	e8 97 0b ff ff       	call   c0007aae <malloc>
c0016f17:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0016f1a:	eb 10                	jmp    c0016f2c <x87EmulHandler(regs*, void*)+0x6d>
c0016f1c:	83 ec 0c             	sub    esp,0xc
c0016f1f:	a1 08 82 02 c0       	mov    eax,ds:0xc0028208
c0016f24:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016f27:	e8 7f ff ff ff       	call   c0016eab <i386LoadCoprocessor(void*)>
c0016f2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f31:	83 c4 10             	add    esp,0x10
c0016f34:	a3 08 82 02 c0       	mov    ds:0xc0028208,eax
c0016f39:	83 c4 08             	add    esp,0x8
c0016f3c:	5b                   	pop    ebx
c0016f3d:	c3                   	ret    
c0016f3e:	83 ec 0c             	sub    esp,0xc
c0016f41:	68 ae 15 02 c0       	push   0xc00215ae
c0016f46:	e8 9f 3a ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0016f4b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016f53:	83 c4 18             	add    esp,0x18
c0016f56:	5b                   	pop    ebx
c0016f57:	e9 fc eb ff ff       	jmp    c0015b58 <Thr::terminateFromIRQ(int)>

c0016f5c <HalInitialiseCoprocessor()>:
c0016f5c:	83 ec 10             	sub    esp,0x10
c0016f5f:	c7 05 08 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028208,0x0
c0016f69:	6a 00                	push   0x0
c0016f6b:	68 bf 6e 01 c0       	push   0xc0016ebf
c0016f70:	6a 07                	push   0x7
c0016f72:	e8 db 53 ff ff       	call   c000c352 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016f77:	e8 d4 6f 00 00       	call   c001df50 <avxDetect>
c0016f7c:	83 c4 10             	add    esp,0x10
c0016f7f:	85 c0                	test   eax,eax
c0016f81:	74 1c                	je     c0016f9f <HalInitialiseCoprocessor()+0x43>
c0016f83:	c7 05 10 82 02 c0 7a df 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001df7a
c0016f8d:	c7 05 0c 82 02 c0 8b df 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001df8b
c0016f97:	83 c4 0c             	add    esp,0xc
c0016f9a:	e9 fd 6f 00 00       	jmp    c001df9c <avxInit>
c0016f9f:	e8 3c 73 00 00       	call   c001e2e0 <absolutelyNoChanceInHell>
c0016fa4:	85 c0                	test   eax,eax
c0016fa6:	74 1c                	je     c0016fc4 <HalInitialiseCoprocessor()+0x68>
c0016fa8:	c7 05 10 82 02 c0 f8 e2 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001e2f8
c0016fb2:	c7 05 0c 82 02 c0 00 e3 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e300
c0016fbc:	83 c4 0c             	add    esp,0xc
c0016fbf:	e9 44 73 00 00       	jmp    c001e308 <sseInit>
c0016fc4:	e8 5d 73 00 00       	call   c001e326 <x87Detect>
c0016fc9:	85 c0                	test   eax,eax
c0016fcb:	74 1c                	je     c0016fe9 <HalInitialiseCoprocessor()+0x8d>
c0016fcd:	c7 05 10 82 02 c0 41 e3 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001e341
c0016fd7:	c7 05 0c 82 02 c0 48 e3 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e348
c0016fe1:	83 c4 0c             	add    esp,0xc
c0016fe4:	e9 66 73 00 00       	jmp    c001e34f <x87Init>
c0016fe9:	c7 05 10 82 02 c0 99 68 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc0016899
c0016ff3:	c7 05 0c 82 02 c0 99 68 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc0016899
c0016ffd:	0f 20 c0             	mov    eax,cr0
c0017000:	83 c8 04             	or     eax,0x4
c0017003:	0f 22 c0             	mov    cr0,eax
c0017006:	83 c4 0c             	add    esp,0xc
c0017009:	c3                   	ret    

c001700a <HalPanic(char const*)>:
c001700a:	53                   	push   ebx
c001700b:	83 ec 10             	sub    esp,0x10
c001700e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017012:	fa                   	cli    
c0017013:	53                   	push   ebx
c0017014:	68 c4 15 02 c0       	push   0xc00215c4
c0017019:	e8 cc 39 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c001701e:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0017023:	83 c4 10             	add    esp,0x10
c0017026:	85 c0                	test   eax,eax
c0017028:	74 09                	je     c0017033 <HalPanic(char const*)+0x29>
c001702a:	83 ec 0c             	sub    esp,0xc
c001702d:	53                   	push   ebx
c001702e:	ff d0                	call   eax
c0017030:	83 c4 10             	add    esp,0x10
c0017033:	50                   	push   eax
c0017034:	6a 01                	push   0x1
c0017036:	6a 0f                	push   0xf
c0017038:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001703e:	e8 5b 15 ff ff       	call   c000859e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017043:	5a                   	pop    edx
c0017044:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001704a:	e8 3f 17 ff ff       	call   c000878e <VgaText::clearScreen()>
c001704f:	59                   	pop    ecx
c0017050:	58                   	pop    eax
c0017051:	68 a4 fd 01 c0       	push   0xc001fda4
c0017056:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001705c:	e8 75 15 ff ff       	call   c00085d6 <VgaText::setTitle(char*)>
c0017061:	83 c4 0c             	add    esp,0xc
c0017064:	6a 01                	push   0x1
c0017066:	6a 0f                	push   0xf
c0017068:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001706e:	e8 2b 15 ff ff       	call   c000859e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017073:	58                   	pop    eax
c0017074:	5a                   	pop    edx
c0017075:	68 dd 15 02 c0       	push   0xc00215dd
c001707a:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017080:	e8 0b 1a ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0017085:	83 c4 0c             	add    esp,0xc
c0017088:	6a 0f                	push   0xf
c001708a:	6a 01                	push   0x1
c001708c:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017092:	e8 07 15 ff ff       	call   c000859e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017097:	59                   	pop    ecx
c0017098:	58                   	pop    eax
c0017099:	68 e6 15 02 c0       	push   0xc00215e6
c001709e:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00170a4:	e8 e7 19 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c00170a9:	83 c4 0c             	add    esp,0xc
c00170ac:	6a 01                	push   0x1
c00170ae:	6a 0f                	push   0xf
c00170b0:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00170b6:	e8 e3 14 ff ff       	call   c000859e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00170bb:	58                   	pop    eax
c00170bc:	5a                   	pop    edx
c00170bd:	68 2a 16 02 c0       	push   0xc002162a
c00170c2:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00170c8:	e8 c3 19 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c00170cd:	59                   	pop    ecx
c00170ce:	58                   	pop    eax
c00170cf:	68 f3 15 02 c0       	push   0xc00215f3
c00170d4:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00170da:	e8 b1 19 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c00170df:	58                   	pop    eax
c00170e0:	5a                   	pop    edx
c00170e1:	68 2d 16 02 c0       	push   0xc002162d
c00170e6:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00170ec:	e8 9f 19 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c00170f1:	59                   	pop    ecx
c00170f2:	58                   	pop    eax
c00170f3:	53                   	push   ebx
c00170f4:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00170fa:	e8 91 19 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c00170ff:	58                   	pop    eax
c0017100:	5a                   	pop    edx
c0017101:	68 2a 16 02 c0       	push   0xc002162a
c0017106:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001710c:	e8 7f 19 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0017111:	83 c4 10             	add    esp,0x10
c0017114:	eb fe                	jmp    c0017114 <HalPanic(char const*)+0x10a>

c0017116 <HalQueryPerformanceCounter()>:
c0017116:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001711b:	31 d2                	xor    edx,edx
c001711d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017123:	31 c0                	xor    eax,eax
c0017125:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c001712c:	74 02                	je     c0017130 <HalQueryPerformanceCounter()+0x1a>
c001712e:	0f 31                	rdtsc  
c0017130:	c3                   	ret    

c0017131 <HalInitialise()>:
c0017131:	53                   	push   ebx
c0017132:	83 ec 08             	sub    esp,0x8
c0017135:	e8 48 54 ff ff       	call   c000c582 <setupINTS()>
c001713a:	80 3d 80 77 02 c0 00 	cmp    BYTE PTR ds:0xc0027780,0x0
c0017141:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017146:	75 0f                	jne    c0017157 <HalInitialise()+0x26>
c0017148:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001714e:	83 e2 fe             	and    edx,0xfffffffe
c0017151:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017157:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001715d:	c6 05 00 82 02 c0 00 	mov    BYTE PTR ds:0xc0028200,0x0
c0017164:	83 e2 fe             	and    edx,0xfffffffe
c0017167:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001716d:	e8 9e 02 00 00       	call   c0017410 <picOpen()>
c0017172:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c0017179:	74 0a                	je     c0017185 <HalInitialise()+0x54>
c001717b:	e8 e0 01 00 00       	call   c0017360 <picDisable()>
c0017180:	e8 3d 67 00 00       	call   c001d8c2 <apicOpen()>
c0017185:	bb 0f 00 00 00       	mov    ebx,0xf
c001718a:	50                   	push   eax
c001718b:	6a 00                	push   0x0
c001718d:	68 e0 6d 01 c0       	push   0xc0016de0
c0017192:	6a 00                	push   0x0
c0017194:	e8 b9 51 ff ff       	call   c000c352 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017199:	83 c4 0c             	add    esp,0xc
c001719c:	6a 00                	push   0x0
c001719e:	68 e0 6d 01 c0       	push   0xc0016de0
c00171a3:	6a 01                	push   0x1
c00171a5:	e8 a8 51 ff ff       	call   c000c352 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171aa:	83 c4 0c             	add    esp,0xc
c00171ad:	6a 00                	push   0x0
c00171af:	68 9a 68 01 c0       	push   0xc001689a
c00171b4:	6a 02                	push   0x2
c00171b6:	e8 97 51 ff ff       	call   c000c352 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171bb:	83 c4 0c             	add    esp,0xc
c00171be:	6a 00                	push   0x0
c00171c0:	68 e0 6d 01 c0       	push   0xc0016de0
c00171c5:	6a 03                	push   0x3
c00171c7:	e8 86 51 ff ff       	call   c000c352 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171cc:	83 c4 0c             	add    esp,0xc
c00171cf:	6a 00                	push   0x0
c00171d1:	68 e0 6d 01 c0       	push   0xc0016de0
c00171d6:	6a 04                	push   0x4
c00171d8:	e8 75 51 ff ff       	call   c000c352 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171dd:	83 c4 0c             	add    esp,0xc
c00171e0:	6a 00                	push   0x0
c00171e2:	68 e0 6d 01 c0       	push   0xc0016de0
c00171e7:	6a 05                	push   0x5
c00171e9:	e8 64 51 ff ff       	call   c000c352 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171ee:	83 c4 0c             	add    esp,0xc
c00171f1:	6a 00                	push   0x0
c00171f3:	68 14 6e 01 c0       	push   0xc0016e14
c00171f8:	6a 06                	push   0x6
c00171fa:	e8 53 51 ff ff       	call   c000c352 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171ff:	83 c4 0c             	add    esp,0xc
c0017202:	6a 00                	push   0x0
c0017204:	68 b3 68 01 c0       	push   0xc00168b3
c0017209:	6a 08                	push   0x8
c001720b:	e8 42 51 ff ff       	call   c000c352 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017210:	83 c4 0c             	add    esp,0xc
c0017213:	6a 00                	push   0x0
c0017215:	68 e0 6d 01 c0       	push   0xc0016de0
c001721a:	6a 09                	push   0x9
c001721c:	e8 31 51 ff ff       	call   c000c352 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017221:	83 c4 0c             	add    esp,0xc
c0017224:	6a 00                	push   0x0
c0017226:	68 e0 6d 01 c0       	push   0xc0016de0
c001722b:	6a 0a                	push   0xa
c001722d:	e8 20 51 ff ff       	call   c000c352 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017232:	83 c4 0c             	add    esp,0xc
c0017235:	6a 00                	push   0x0
c0017237:	68 e0 6d 01 c0       	push   0xc0016de0
c001723c:	6a 0b                	push   0xb
c001723e:	e8 0f 51 ff ff       	call   c000c352 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017243:	83 c4 0c             	add    esp,0xc
c0017246:	6a 00                	push   0x0
c0017248:	68 f0 6c 01 c0       	push   0xc0016cf0
c001724d:	6a 0d                	push   0xd
c001724f:	e8 fe 50 ff ff       	call   c000c352 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017254:	83 c4 0c             	add    esp,0xc
c0017257:	6a 00                	push   0x0
c0017259:	68 57 6d 01 c0       	push   0xc0016d57
c001725e:	6a 0e                	push   0xe
c0017260:	e8 ed 50 ff ff       	call   c000c352 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017265:	83 c4 10             	add    esp,0x10
c0017268:	50                   	push   eax
c0017269:	6a 00                	push   0x0
c001726b:	68 e0 6d 01 c0       	push   0xc0016de0
c0017270:	53                   	push   ebx
c0017271:	43                   	inc    ebx
c0017272:	e8 db 50 ff ff       	call   c000c352 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017277:	83 c4 10             	add    esp,0x10
c001727a:	83 fb 1e             	cmp    ebx,0x1e
c001727d:	75 e9                	jne    c0017268 <HalInitialise()+0x137>
c001727f:	50                   	push   eax
c0017280:	6a 00                	push   0x0
c0017282:	68 f2 1b 01 c0       	push   0xc0011bf2
c0017287:	6a 60                	push   0x60
c0017289:	e8 c4 50 ff ff       	call   c000c352 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001728e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017293:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001729d:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00172a4:	e8 05 08 ff ff       	call   c0007aae <malloc>
c00172a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00172ac:	89 c3                	mov    ebx,eax
c00172ae:	e8 3b 09 00 00       	call   c0017bee <RTC::RTC()>
c00172b3:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00172bd:	5a                   	pop    edx
c00172be:	59                   	pop    ecx
c00172bf:	53                   	push   ebx
c00172c0:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00172c6:	e8 53 4b ff ff       	call   c000be1e <Device::addChild(Device*)>
c00172cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00172cd:	6a 00                	push   0x0
c00172cf:	6a 00                	push   0x0
c00172d1:	6a 00                	push   0x0
c00172d3:	53                   	push   ebx
c00172d4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00172d7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00172dc:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00172e2:	83 c4 28             	add    esp,0x28
c00172e5:	5b                   	pop    ebx
c00172e6:	c3                   	ret    

c00172e7 <HalMakeBeep(int)>:
c00172e7:	53                   	push   ebx
c00172e8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00172ec:	85 db                	test   ebx,ebx
c00172ee:	75 07                	jne    c00172f7 <HalMakeBeep(int)+0x10>
c00172f0:	e4 61                	in     al,0x61
c00172f2:	83 e0 fc             	and    eax,0xfffffffc
c00172f5:	eb 26                	jmp    c001731d <HalMakeBeep(int)+0x36>
c00172f7:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00172fc:	99                   	cdq    
c00172fd:	f7 fb                	idiv   ebx
c00172ff:	89 c1                	mov    ecx,eax
c0017301:	b0 b6                	mov    al,0xb6
c0017303:	e6 43                	out    0x43,al
c0017305:	88 c8                	mov    al,cl
c0017307:	e6 42                	out    0x42,al
c0017309:	89 c8                	mov    eax,ecx
c001730b:	c1 e8 08             	shr    eax,0x8
c001730e:	e6 42                	out    0x42,al
c0017310:	e4 61                	in     al,0x61
c0017312:	89 c2                	mov    edx,eax
c0017314:	83 ca 03             	or     edx,0x3
c0017317:	38 d0                	cmp    al,dl
c0017319:	74 04                	je     c001731f <HalMakeBeep(int)+0x38>
c001731b:	88 d0                	mov    al,dl
c001731d:	e6 61                	out    0x61,al
c001731f:	5b                   	pop    ebx
c0017320:	c3                   	ret    

c0017321 <HalGetRand()>:
c0017321:	31 c0                	xor    eax,eax
c0017323:	c3                   	ret    

c0017324 <HalEndOfInterrupt(int)>:
c0017324:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c001732b:	74 23                	je     c0017350 <HalEndOfInterrupt(int)+0x2c>
c001732d:	83 ec 14             	sub    esp,0x14
c0017330:	6a 1b                	push   0x1b
c0017332:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017338:	e8 7b fd fe ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c001733d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017342:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001734c:	83 c4 1c             	add    esp,0x1c
c001734f:	c3                   	ret    
c0017350:	e9 3f 02 00 00       	jmp    c0017594 <picEOI(int)>

c0017355 <HalRestart()>:
c0017355:	c3                   	ret    

c0017356 <HalShutdown()>:
c0017356:	c3                   	ret    

c0017357 <HalSleep()>:
c0017357:	c3                   	ret    

c0017358 <picIoWait()>:
c0017358:	eb 00                	jmp    c001735a <picIoWait()+0x2>
c001735a:	eb 00                	jmp    c001735c <picIoWait()+0x4>
c001735c:	90                   	nop
c001735d:	c3                   	ret    
c001735e:	66 90                	xchg   ax,ax

c0017360 <picDisable()>:
c0017360:	83 ec 10             	sub    esp,0x10
c0017363:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001736a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001736f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017373:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017378:	ee                   	out    dx,al
c0017379:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017380:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017385:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017389:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001738e:	ee                   	out    dx,al
c001738f:	90                   	nop
c0017390:	83 c4 10             	add    esp,0x10
c0017393:	c3                   	ret    

c0017394 <picGetIRQReg(int)>:
c0017394:	83 ec 10             	sub    esp,0x10
c0017397:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001739b:	0f b6 c0             	movzx  eax,al
c001739e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00173a5:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00173a9:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00173ad:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00173b2:	ee                   	out    dx,al
c00173b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00173b7:	0f b6 c0             	movzx  eax,al
c00173ba:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00173c1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00173c5:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00173c9:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00173ce:	ee                   	out    dx,al
c00173cf:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00173d6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00173db:	89 c2                	mov    edx,eax
c00173dd:	ec                   	in     al,dx
c00173de:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00173e2:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00173e6:	0f b6 c0             	movzx  eax,al
c00173e9:	c1 e0 08             	shl    eax,0x8
c00173ec:	89 c1                	mov    ecx,eax
c00173ee:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00173f5:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00173fa:	89 c2                	mov    edx,eax
c00173fc:	ec                   	in     al,dx
c00173fd:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017401:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017405:	0f b6 c0             	movzx  eax,al
c0017408:	09 c8                	or     eax,ecx
c001740a:	83 c4 10             	add    esp,0x10
c001740d:	c3                   	ret    
c001740e:	66 90                	xchg   ax,ax

c0017410 <picOpen()>:
c0017410:	83 ec 50             	sub    esp,0x50
c0017413:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001741a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001741f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017423:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017427:	ee                   	out    dx,al
c0017428:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001742f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017434:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017438:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001743c:	ee                   	out    dx,al
c001743d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017445:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001744d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0017454:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017458:	89 c2                	mov    edx,eax
c001745a:	ec                   	in     al,dx
c001745b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001745f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017463:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0017467:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001746e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017472:	89 c2                	mov    edx,eax
c0017474:	ec                   	in     al,dx
c0017475:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017479:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001747d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0017481:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0017488:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001748d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017491:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017495:	ee                   	out    dx,al
c0017496:	e8 bd fe ff ff       	call   c0017358 <picIoWait()>
c001749b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00174a2:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00174a7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00174ab:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00174af:	ee                   	out    dx,al
c00174b0:	e8 a3 fe ff ff       	call   c0017358 <picIoWait()>
c00174b5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00174b9:	0f b6 c0             	movzx  eax,al
c00174bc:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00174c3:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00174c7:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00174cb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00174cf:	ee                   	out    dx,al
c00174d0:	e8 83 fe ff ff       	call   c0017358 <picIoWait()>
c00174d5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00174d9:	0f b6 c0             	movzx  eax,al
c00174dc:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00174e3:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00174e7:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00174eb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00174ef:	ee                   	out    dx,al
c00174f0:	e8 63 fe ff ff       	call   c0017358 <picIoWait()>
c00174f5:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00174fc:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0017501:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0017505:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017509:	ee                   	out    dx,al
c001750a:	e8 49 fe ff ff       	call   c0017358 <picIoWait()>
c001750f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0017516:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001751b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001751f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017523:	ee                   	out    dx,al
c0017524:	e8 2f fe ff ff       	call   c0017358 <picIoWait()>
c0017529:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0017530:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0017535:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0017539:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001753d:	ee                   	out    dx,al
c001753e:	e8 15 fe ff ff       	call   c0017358 <picIoWait()>
c0017543:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001754a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001754f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0017553:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017557:	ee                   	out    dx,al
c0017558:	e8 fb fd ff ff       	call   c0017358 <picIoWait()>
c001755d:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0017562:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0017569:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001756d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0017571:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017575:	ee                   	out    dx,al
c0017576:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001757b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0017582:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0017586:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001758a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001758e:	ee                   	out    dx,al
c001758f:	90                   	nop
c0017590:	83 c4 50             	add    esp,0x50
c0017593:	c3                   	ret    

c0017594 <picEOI(int)>:
c0017594:	83 ec 10             	sub    esp,0x10
c0017597:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001759c:	75 1e                	jne    c00175bc <picEOI(int)+0x28>
c001759e:	6a 0b                	push   0xb
c00175a0:	e8 ef fd ff ff       	call   c0017394 <picGetIRQReg(int)>
c00175a5:	83 c4 04             	add    esp,0x4
c00175a8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00175ad:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00175b2:	25 80 00 00 00       	and    eax,0x80
c00175b7:	74 73                	je     c001762c <picEOI(int)+0x98>
c00175b9:	8d 76 00             	lea    esi,[esi+0x0]
c00175bc:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00175c1:	75 31                	jne    c00175f4 <picEOI(int)+0x60>
c00175c3:	6a 0b                	push   0xb
c00175c5:	e8 ca fd ff ff       	call   c0017394 <picGetIRQReg(int)>
c00175ca:	83 c4 04             	add    esp,0x4
c00175cd:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00175d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175d6:	98                   	cwde   
c00175d7:	85 c0                	test   eax,eax
c00175d9:	78 19                	js     c00175f4 <picEOI(int)+0x60>
c00175db:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00175e2:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00175e7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00175eb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00175f0:	ee                   	out    dx,al
c00175f1:	eb 3d                	jmp    c0017630 <picEOI(int)+0x9c>
c00175f3:	90                   	nop
c00175f4:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00175f9:	7e 19                	jle    c0017614 <picEOI(int)+0x80>
c00175fb:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017602:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0017607:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001760b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017610:	ee                   	out    dx,al
c0017611:	8d 76 00             	lea    esi,[esi+0x0]
c0017614:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001761b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0017620:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017624:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017629:	ee                   	out    dx,al
c001762a:	eb 04                	jmp    c0017630 <picEOI(int)+0x9c>
c001762c:	90                   	nop
c001762d:	8d 76 00             	lea    esi,[esi+0x0]
c0017630:	83 c4 10             	add    esp,0x10
c0017633:	c3                   	ret    

c0017634 <RTC::open(int, int, void*)>:
c0017634:	31 c0                	xor    eax,eax
c0017636:	c3                   	ret    
c0017637:	90                   	nop

c0017638 <RTC::close(int, int, void*)>:
c0017638:	31 c0                	xor    eax,eax
c001763a:	c3                   	ret    
c001763b:	90                   	nop

c001763c <RTC::timeInSecondsUTC()>:
c001763c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017640:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017646:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001764c:	c3                   	ret    
c001764d:	90                   	nop

c001764e <RTC::timeInDatetimeUTC()>:
c001764e:	53                   	push   ebx
c001764f:	83 ec 14             	sub    esp,0x14
c0017652:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017656:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001765a:	8b 10                	mov    edx,DWORD PTR [eax]
c001765c:	50                   	push   eax
c001765d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017660:	83 c4 0c             	add    esp,0xc
c0017663:	52                   	push   edx
c0017664:	50                   	push   eax
c0017665:	53                   	push   ebx
c0017666:	e8 27 45 ff ff       	call   c000bb92 <secondsToDatetime(unsigned long long)>
c001766b:	89 d8                	mov    eax,ebx
c001766d:	83 c4 14             	add    esp,0x14
c0017670:	5b                   	pop    ebx
c0017671:	c2 04 00             	ret    0x4

c0017674 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0017674:	56                   	push   esi
c0017675:	53                   	push   ebx
c0017676:	83 ec 14             	sub    esp,0x14
c0017679:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001767d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001767f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0017682:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017686:	52                   	push   edx
c0017687:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001768b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001768f:	50                   	push   eax
c0017690:	e8 fd 44 ff ff       	call   c000bb92 <secondsToDatetime(unsigned long long)>
c0017695:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017699:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001769d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00176a1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00176a5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00176a9:	89 f0                	mov    eax,esi
c00176ab:	83 c4 20             	add    esp,0x20
c00176ae:	5b                   	pop    ebx
c00176af:	5e                   	pop    esi
c00176b0:	ff e0                	jmp    eax

c00176b2 <RTC::~RTC()>:
c00176b2:	83 ec 0c             	sub    esp,0xc
c00176b5:	ba c8 16 02 c0       	mov    edx,0xc00216c8
c00176ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176be:	89 10                	mov    DWORD PTR [eax],edx
c00176c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176c4:	83 ec 0c             	sub    esp,0xc
c00176c7:	50                   	push   eax
c00176c8:	e8 57 42 ff ff       	call   c000b924 <Clock::~Clock()>
c00176cd:	83 c4 10             	add    esp,0x10
c00176d0:	90                   	nop
c00176d1:	83 c4 0c             	add    esp,0xc
c00176d4:	c3                   	ret    
c00176d5:	90                   	nop

c00176d6 <RTC::~RTC()>:
c00176d6:	83 ec 0c             	sub    esp,0xc
c00176d9:	83 ec 0c             	sub    esp,0xc
c00176dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00176e0:	e8 cd ff ff ff       	call   c00176b2 <RTC::~RTC()>
c00176e5:	83 c4 10             	add    esp,0x10
c00176e8:	83 ec 08             	sub    esp,0x8
c00176eb:	68 60 01 00 00       	push   0x160
c00176f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00176f4:	e8 c4 31 ff ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c00176f9:	83 c4 10             	add    esp,0x10
c00176fc:	83 c4 0c             	add    esp,0xc
c00176ff:	c3                   	ret    

c0017700 <RTC::get_update_in_progress_flag()>:
c0017700:	83 ec 14             	sub    esp,0x14
c0017703:	6a 0a                	push   0xa
c0017705:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001770b:	e8 60 fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017710:	83 c4 1c             	add    esp,0x1c
c0017713:	0f b6 c0             	movzx  eax,al
c0017716:	c1 e8 07             	shr    eax,0x7
c0017719:	c3                   	ret    

c001771a <RTC::completeRTCRefresh()>:
c001771a:	55                   	push   ebp
c001771b:	57                   	push   edi
c001771c:	56                   	push   esi
c001771d:	53                   	push   ebx
c001771e:	83 ec 3c             	sub    esp,0x3c
c0017721:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c0017727:	83 ec 0c             	sub    esp,0xc
c001772a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001772e:	e8 cd ff ff ff       	call   c0017700 <RTC::get_update_in_progress_flag()>
c0017733:	83 c4 10             	add    esp,0x10
c0017736:	84 c0                	test   al,al
c0017738:	74 0e                	je     c0017748 <RTC::completeRTCRefresh()+0x2e>
c001773a:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017740:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c0017746:	73 df                	jae    c0017727 <RTC::completeRTCRefresh()+0xd>
c0017748:	51                   	push   ecx
c0017749:	51                   	push   ecx
c001774a:	6a 00                	push   0x0
c001774c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017752:	e8 19 fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017757:	5b                   	pop    ebx
c0017758:	89 c7                	mov    edi,eax
c001775a:	5e                   	pop    esi
c001775b:	6a 02                	push   0x2
c001775d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017763:	e8 08 fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017768:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001776c:	5d                   	pop    ebp
c001776d:	58                   	pop    eax
c001776e:	6a 04                	push   0x4
c0017770:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017776:	e8 f5 f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c001777b:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001777f:	58                   	pop    eax
c0017780:	5a                   	pop    edx
c0017781:	6a 07                	push   0x7
c0017783:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017789:	e8 e2 f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c001778e:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0017792:	59                   	pop    ecx
c0017793:	5b                   	pop    ebx
c0017794:	6a 08                	push   0x8
c0017796:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001779c:	e8 cf f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c00177a1:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00177a5:	5e                   	pop    esi
c00177a6:	5d                   	pop    ebp
c00177a7:	6a 09                	push   0x9
c00177a9:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00177af:	e8 bc f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c00177b4:	0f b6 c0             	movzx  eax,al
c00177b7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00177bb:	83 c4 10             	add    esp,0x10
c00177be:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c00177c4:	83 ec 0c             	sub    esp,0xc
c00177c7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00177cb:	e8 30 ff ff ff       	call   c0017700 <RTC::get_update_in_progress_flag()>
c00177d0:	83 c4 10             	add    esp,0x10
c00177d3:	84 c0                	test   al,al
c00177d5:	74 0e                	je     c00177e5 <RTC::completeRTCRefresh()+0xcb>
c00177d7:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00177dd:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c00177e3:	73 df                	jae    c00177c4 <RTC::completeRTCRefresh()+0xaa>
c00177e5:	51                   	push   ecx
c00177e6:	51                   	push   ecx
c00177e7:	6a 00                	push   0x0
c00177e9:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00177ef:	e8 7c f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c00177f4:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00177f8:	5b                   	pop    ebx
c00177f9:	5e                   	pop    esi
c00177fa:	6a 02                	push   0x2
c00177fc:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017802:	e8 69 f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017807:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001780b:	5d                   	pop    ebp
c001780c:	58                   	pop    eax
c001780d:	6a 04                	push   0x4
c001780f:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017815:	e8 56 f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c001781a:	88 c3                	mov    bl,al
c001781c:	58                   	pop    eax
c001781d:	5a                   	pop    edx
c001781e:	6a 07                	push   0x7
c0017820:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017826:	e8 45 f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c001782b:	59                   	pop    ecx
c001782c:	89 c6                	mov    esi,eax
c001782e:	5d                   	pop    ebp
c001782f:	6a 08                	push   0x8
c0017831:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017837:	e8 34 f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c001783c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017840:	58                   	pop    eax
c0017841:	5a                   	pop    edx
c0017842:	6a 09                	push   0x9
c0017844:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001784a:	e8 21 f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c001784f:	89 f9                	mov    ecx,edi
c0017851:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017855:	0f b6 e8             	movzx  ebp,al
c0017858:	83 c4 10             	add    esp,0x10
c001785b:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001785f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017864:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c0017869:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001786d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017871:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0017875:	0f 94 c0             	sete   al
c0017878:	0f b6 fb             	movzx  edi,bl
c001787b:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c001787f:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0017884:	0f 94 c2             	sete   dl
c0017887:	21 d0                	and    eax,edx
c0017889:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001788d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0017891:	0f 94 c2             	sete   dl
c0017894:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0017898:	21 c2                	and    edx,eax
c001789a:	89 f0                	mov    eax,esi
c001789c:	0f b6 c0             	movzx  eax,al
c001789f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00178a3:	89 f0                	mov    eax,esi
c00178a5:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00178a9:	0f 94 c0             	sete   al
c00178ac:	21 d0                	and    eax,edx
c00178ae:	31 d2                	xor    edx,edx
c00178b0:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00178b4:	0f 94 c2             	sete   dl
c00178b7:	85 c2                	test   edx,eax
c00178b9:	75 27                	jne    c00178e2 <RTC::completeRTCRefresh()+0x1c8>
c00178bb:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00178bf:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00178c3:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00178c7:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00178cb:	89 f0                	mov    eax,esi
c00178cd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00178d1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00178d5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00178d9:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00178dd:	e9 dc fe ff ff       	jmp    c00177be <RTC::completeRTCRefresh()+0xa4>
c00178e2:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c00178e6:	75 d3                	jne    c00178bb <RTC::completeRTCRefresh()+0x1a1>
c00178e8:	52                   	push   edx
c00178e9:	52                   	push   edx
c00178ea:	6a 0b                	push   0xb
c00178ec:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00178f2:	e8 79 f8 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c00178f7:	83 c4 10             	add    esp,0x10
c00178fa:	a8 04                	test   al,0x4
c00178fc:	75 7a                	jne    c0017978 <RTC::completeRTCRefresh()+0x25e>
c00178fe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017902:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017906:	83 e1 0f             	and    ecx,0xf
c0017909:	c1 ea 04             	shr    edx,0x4
c001790c:	c1 ef 04             	shr    edi,0x4
c001790f:	6b d2 0a             	imul   edx,edx,0xa
c0017912:	83 e6 0f             	and    esi,0xf
c0017915:	01 d1                	add    ecx,edx
c0017917:	c1 ed 04             	shr    ebp,0x4
c001791a:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001791e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017922:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017926:	c1 ea 04             	shr    edx,0x4
c0017929:	83 e1 0f             	and    ecx,0xf
c001792c:	6b d2 0a             	imul   edx,edx,0xa
c001792f:	6b ed 0a             	imul   ebp,ebp,0xa
c0017932:	01 d1                	add    ecx,edx
c0017934:	89 fa                	mov    edx,edi
c0017936:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001793a:	83 e2 07             	and    edx,0x7
c001793d:	89 d9                	mov    ecx,ebx
c001793f:	6b d2 0a             	imul   edx,edx,0xa
c0017942:	83 e1 0f             	and    ecx,0xf
c0017945:	83 e3 80             	and    ebx,0xffffff80
c0017948:	01 d1                	add    ecx,edx
c001794a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001794e:	09 cb                	or     ebx,ecx
c0017950:	c1 ea 04             	shr    edx,0x4
c0017953:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017957:	6b d2 0a             	imul   edx,edx,0xa
c001795a:	83 e1 0f             	and    ecx,0xf
c001795d:	01 d6                	add    esi,edx
c001795f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017963:	c1 ea 04             	shr    edx,0x4
c0017966:	6b d2 0a             	imul   edx,edx,0xa
c0017969:	01 d1                	add    ecx,edx
c001796b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001796f:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0017973:	83 e2 0f             	and    edx,0xf
c0017976:	01 d5                	add    ebp,edx
c0017978:	a8 02                	test   al,0x2
c001797a:	75 15                	jne    c0017991 <RTC::completeRTCRefresh()+0x277>
c001797c:	f6 c3 80             	test   bl,0x80
c001797f:	74 10                	je     c0017991 <RTC::completeRTCRefresh()+0x277>
c0017981:	83 e3 7f             	and    ebx,0x7f
c0017984:	b9 18 00 00 00       	mov    ecx,0x18
c0017989:	8d 43 0c             	lea    eax,[ebx+0xc]
c001798c:	99                   	cdq    
c001798d:	f7 f9                	idiv   ecx
c001798f:	88 d3                	mov    bl,dl
c0017991:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0017997:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c001799d:	77 06                	ja     c00179a5 <RTC::completeRTCRefresh()+0x28b>
c001799f:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00179a5:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00179aa:	31 c9                	xor    ecx,ecx
c00179ac:	c1 e0 10             	shl    eax,0x10
c00179af:	89 cd                	mov    ebp,ecx
c00179b1:	c1 e7 10             	shl    edi,0x10
c00179b4:	31 d2                	xor    edx,edx
c00179b6:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00179bc:	09 c5                	or     ebp,eax
c00179be:	89 f0                	mov    eax,esi
c00179c0:	89 e9                	mov    ecx,ebp
c00179c2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00179c6:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c00179ca:	88 c2                	mov    dl,al
c00179cc:	88 d9                	mov    cl,bl
c00179ce:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c00179d2:	0f b7 c2             	movzx  eax,dx
c00179d5:	09 f8                	or     eax,edi
c00179d7:	89 c2                	mov    edx,eax
c00179d9:	50                   	push   eax
c00179da:	50                   	push   eax
c00179db:	51                   	push   ecx
c00179dc:	52                   	push   edx
c00179dd:	e8 31 40 ff ff       	call   c000ba13 <datetimeToSeconds(datetime_t)>
c00179e2:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c00179e6:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00179ec:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00179f2:	83 c4 4c             	add    esp,0x4c
c00179f5:	5b                   	pop    ebx
c00179f6:	5e                   	pop    esi
c00179f7:	5f                   	pop    edi
c00179f8:	5d                   	pop    ebp
c00179f9:	c3                   	ret    

c00179fa <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00179fa:	55                   	push   ebp
c00179fb:	57                   	push   edi
c00179fc:	56                   	push   esi
c00179fd:	53                   	push   ebx
c00179fe:	83 ec 30             	sub    esp,0x30
c0017a01:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017a05:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0017a09:	6a 00                	push   0x0
c0017a0b:	6a 00                	push   0x0
c0017a0d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a13:	e8 72 f8 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a18:	83 c4 0c             	add    esp,0xc
c0017a1b:	6a 00                	push   0x0
c0017a1d:	6a 02                	push   0x2
c0017a1f:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a25:	e8 60 f8 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a2a:	31 d2                	xor    edx,edx
c0017a2c:	89 f9                	mov    ecx,edi
c0017a2e:	89 f8                	mov    eax,edi
c0017a30:	c1 e9 10             	shr    ecx,0x10
c0017a33:	0f b6 c4             	movzx  eax,ah
c0017a36:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0017a3a:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0017a3e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a42:	b9 64 00 00 00       	mov    ecx,0x64
c0017a47:	89 f0                	mov    eax,esi
c0017a49:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017a4d:	89 f0                	mov    eax,esi
c0017a4f:	0f b6 c4             	movzx  eax,ah
c0017a52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a56:	89 f0                	mov    eax,esi
c0017a58:	c1 e8 10             	shr    eax,0x10
c0017a5b:	f7 f1                	div    ecx
c0017a5d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017a61:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0017a65:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017a69:	59                   	pop    ecx
c0017a6a:	5b                   	pop    ebx
c0017a6b:	89 fb                	mov    ebx,edi
c0017a6d:	6a 0b                	push   0xb
c0017a6f:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a75:	e8 f6 f6 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017a7a:	83 c4 10             	add    esp,0x10
c0017a7d:	89 c5                	mov    ebp,eax
c0017a7f:	a8 04                	test   al,0x4
c0017a81:	75 6e                	jne    c0017af1 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0017a83:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017a87:	31 d2                	xor    edx,edx
c0017a89:	0f b6 c1             	movzx  eax,cl
c0017a8c:	b9 0a 00 00 00       	mov    ecx,0xa
c0017a91:	f7 f1                	div    ecx
c0017a93:	c1 e0 04             	shl    eax,0x4
c0017a96:	09 d0                	or     eax,edx
c0017a98:	31 d2                	xor    edx,edx
c0017a9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a9e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0017aa3:	f7 f1                	div    ecx
c0017aa5:	c1 e0 04             	shl    eax,0x4
c0017aa8:	09 d0                	or     eax,edx
c0017aaa:	31 d2                	xor    edx,edx
c0017aac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ab0:	0f b6 c3             	movzx  eax,bl
c0017ab3:	f7 f1                	div    ecx
c0017ab5:	c1 e0 04             	shl    eax,0x4
c0017ab8:	09 d0                	or     eax,edx
c0017aba:	31 d2                	xor    edx,edx
c0017abc:	89 c3                	mov    ebx,eax
c0017abe:	89 f0                	mov    eax,esi
c0017ac0:	0f b6 c0             	movzx  eax,al
c0017ac3:	f7 f1                	div    ecx
c0017ac5:	c1 e0 04             	shl    eax,0x4
c0017ac8:	09 d0                	or     eax,edx
c0017aca:	31 d2                	xor    edx,edx
c0017acc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ad0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017ad5:	f7 f1                	div    ecx
c0017ad7:	c1 e0 04             	shl    eax,0x4
c0017ada:	09 d0                	or     eax,edx
c0017adc:	31 d2                	xor    edx,edx
c0017ade:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017ae2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017ae6:	f7 f1                	div    ecx
c0017ae8:	c1 e0 04             	shl    eax,0x4
c0017aeb:	09 d0                	or     eax,edx
c0017aed:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017af1:	83 e5 02             	and    ebp,0x2
c0017af4:	75 1e                	jne    c0017b14 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017af6:	0f b6 c3             	movzx  eax,bl
c0017af9:	83 f8 0b             	cmp    eax,0xb
c0017afc:	76 10                	jbe    c0017b0e <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0017afe:	8d 53 f4             	lea    edx,[ebx-0xc]
c0017b01:	88 d3                	mov    bl,dl
c0017b03:	84 d2                	test   dl,dl
c0017b05:	75 02                	jne    c0017b09 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0017b07:	b3 0c                	mov    bl,0xc
c0017b09:	83 cb 80             	or     ebx,0xffffff80
c0017b0c:	eb 06                	jmp    c0017b14 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017b0e:	85 c0                	test   eax,eax
c0017b10:	75 02                	jne    c0017b14 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017b12:	b3 0c                	mov    bl,0xc
c0017b14:	0f b6 db             	movzx  ebx,bl
c0017b17:	50                   	push   eax
c0017b18:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0017b1d:	52                   	push   edx
c0017b1e:	6a 00                	push   0x0
c0017b20:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b26:	e8 5f f7 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b2b:	83 c4 0c             	add    esp,0xc
c0017b2e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017b33:	50                   	push   eax
c0017b34:	6a 02                	push   0x2
c0017b36:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b3c:	e8 49 f7 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b41:	83 c4 0c             	add    esp,0xc
c0017b44:	53                   	push   ebx
c0017b45:	6a 04                	push   0x4
c0017b47:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b4d:	e8 38 f7 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b52:	83 c4 0c             	add    esp,0xc
c0017b55:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0017b5a:	52                   	push   edx
c0017b5b:	6a 07                	push   0x7
c0017b5d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b63:	e8 22 f7 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b68:	83 c4 0c             	add    esp,0xc
c0017b6b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017b70:	50                   	push   eax
c0017b71:	6a 08                	push   0x8
c0017b73:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b79:	e8 0c f7 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b7e:	83 c4 0c             	add    esp,0xc
c0017b81:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0017b86:	55                   	push   ebp
c0017b87:	6a 09                	push   0x9
c0017b89:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b8f:	e8 f6 f6 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b94:	5a                   	pop    edx
c0017b95:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017b99:	e8 7c fb ff ff       	call   c001771a <RTC::completeRTCRefresh()>
c0017b9e:	83 c4 3c             	add    esp,0x3c
c0017ba1:	b0 01                	mov    al,0x1
c0017ba3:	5b                   	pop    ebx
c0017ba4:	5e                   	pop    esi
c0017ba5:	5f                   	pop    edi
c0017ba6:	5d                   	pop    ebp
c0017ba7:	c3                   	ret    

c0017ba8 <rtcIRQHandler(regs*, void*)>:
c0017ba8:	53                   	push   ebx
c0017ba9:	83 ec 10             	sub    esp,0x10
c0017bac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017bb0:	6a 0c                	push   0xc
c0017bb2:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017bb8:	e8 b3 f5 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017bbd:	83 c4 10             	add    esp,0x10
c0017bc0:	a8 80                	test   al,0x80
c0017bc2:	74 24                	je     c0017be8 <rtcIRQHandler(regs*, void*)+0x40>
c0017bc4:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0017bcb:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0017bd2:	66 ff 05 18 82 02 c0 	inc    WORD PTR ds:0xc0028218
c0017bd9:	75 0d                	jne    c0017be8 <rtcIRQHandler(regs*, void*)+0x40>
c0017bdb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017bdf:	83 c4 08             	add    esp,0x8
c0017be2:	5b                   	pop    ebx
c0017be3:	e9 32 fb ff ff       	jmp    c001771a <RTC::completeRTCRefresh()>
c0017be8:	83 c4 08             	add    esp,0x8
c0017beb:	5b                   	pop    ebx
c0017bec:	c3                   	ret    
c0017bed:	90                   	nop

c0017bee <RTC::RTC()>:
c0017bee:	83 ec 1c             	sub    esp,0x1c
c0017bf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bf5:	83 ec 08             	sub    esp,0x8
c0017bf8:	68 ab 16 02 c0       	push   0xc00216ab
c0017bfd:	50                   	push   eax
c0017bfe:	e8 eb 3c ff ff       	call   c000b8ee <Clock::Clock(char const*)>
c0017c03:	83 c4 10             	add    esp,0x10
c0017c06:	ba c8 16 02 c0       	mov    edx,0xc00216c8
c0017c0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c0f:	89 10                	mov    DWORD PTR [eax],edx
c0017c11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c15:	83 ec 0c             	sub    esp,0xc
c0017c18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c1c:	6a 01                	push   0x1
c0017c1e:	68 a8 7b 01 c0       	push   0xc0017ba8
c0017c23:	6a 08                	push   0x8
c0017c25:	50                   	push   eax
c0017c26:	e8 9f 41 ff ff       	call   c000bdca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0017c2b:	83 c4 20             	add    esp,0x20
c0017c2e:	89 c2                	mov    edx,eax
c0017c30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c34:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0017c3a:	fa                   	cli    
c0017c3b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017c40:	83 c0 01             	add    eax,0x1
c0017c43:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017c48:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017c4d:	83 ec 08             	sub    esp,0x8
c0017c50:	6a 0b                	push   0xb
c0017c52:	50                   	push   eax
c0017c53:	e8 18 f5 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017c58:	83 c4 10             	add    esp,0x10
c0017c5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017c5f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017c64:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017c68:	83 ca 10             	or     edx,0x10
c0017c6b:	0f b6 d2             	movzx  edx,dl
c0017c6e:	83 ec 04             	sub    esp,0x4
c0017c71:	52                   	push   edx
c0017c72:	6a 0b                	push   0xb
c0017c74:	50                   	push   eax
c0017c75:	e8 10 f6 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017c7a:	83 c4 10             	add    esp,0x10
c0017c7d:	83 ec 0c             	sub    esp,0xc
c0017c80:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c84:	e8 91 fa ff ff       	call   c001771a <RTC::completeRTCRefresh()>
c0017c89:	83 c4 10             	add    esp,0x10
c0017c8c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017c91:	83 e8 01             	sub    eax,0x1
c0017c94:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017c99:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017c9e:	85 c0                	test   eax,eax
c0017ca0:	75 01                	jne    c0017ca3 <RTC::RTC()+0xb5>
c0017ca2:	fb                   	sti    
c0017ca3:	90                   	nop
c0017ca4:	83 c4 1c             	add    esp,0x1c
c0017ca7:	c3                   	ret    

c0017ca8 <HalConsoleScroll(int, int)>:
c0017ca8:	83 ec 10             	sub    esp,0x10
c0017cab:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0017cb3:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0017cbb:	90                   	nop
c0017cbc:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017cc1:	0f 8f e1 00 00 00    	jg     c0017da8 <HalConsoleScroll(int, int)+0x100>
c0017cc7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017ccf:	90                   	nop
c0017cd0:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0017cd8:	0f 8f be 00 00 00    	jg     c0017d9c <HalConsoleScroll(int, int)+0xf4>
c0017cde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ce2:	89 d0                	mov    eax,edx
c0017ce4:	c1 e0 02             	shl    eax,0x2
c0017ce7:	01 d0                	add    eax,edx
c0017ce9:	c1 e0 05             	shl    eax,0x5
c0017cec:	89 c2                	mov    edx,eax
c0017cee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017cf2:	01 d0                	add    eax,edx
c0017cf4:	89 c2                	mov    edx,eax
c0017cf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cfa:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017cfd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d01:	89 d0                	mov    eax,edx
c0017d03:	c1 e0 02             	shl    eax,0x2
c0017d06:	01 d0                	add    eax,edx
c0017d08:	c1 e0 05             	shl    eax,0x5
c0017d0b:	89 c2                	mov    edx,eax
c0017d0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d11:	01 d0                	add    eax,edx
c0017d13:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0017d19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d1d:	01 c2                	add    edx,eax
c0017d1f:	8a 01                	mov    al,BYTE PTR [ecx]
c0017d21:	88 02                	mov    BYTE PTR [edx],al
c0017d23:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017d28:	75 66                	jne    c0017d90 <HalConsoleScroll(int, int)+0xe8>
c0017d2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d2e:	83 e0 01             	and    eax,0x1
c0017d31:	74 39                	je     c0017d6c <HalConsoleScroll(int, int)+0xc4>
c0017d33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d37:	83 e0 0f             	and    eax,0xf
c0017d3a:	88 c2                	mov    dl,al
c0017d3c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017d40:	c1 e0 04             	shl    eax,0x4
c0017d43:	09 d0                	or     eax,edx
c0017d45:	88 c1                	mov    cl,al
c0017d47:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d4b:	89 d0                	mov    eax,edx
c0017d4d:	c1 e0 02             	shl    eax,0x2
c0017d50:	01 d0                	add    eax,edx
c0017d52:	c1 e0 05             	shl    eax,0x5
c0017d55:	89 c2                	mov    edx,eax
c0017d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d5b:	01 d0                	add    eax,edx
c0017d5d:	89 c2                	mov    edx,eax
c0017d5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d63:	01 d0                	add    eax,edx
c0017d65:	88 ca                	mov    dl,cl
c0017d67:	88 10                	mov    BYTE PTR [eax],dl
c0017d69:	eb 25                	jmp    c0017d90 <HalConsoleScroll(int, int)+0xe8>
c0017d6b:	90                   	nop
c0017d6c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d70:	89 d0                	mov    eax,edx
c0017d72:	c1 e0 02             	shl    eax,0x2
c0017d75:	01 d0                	add    eax,edx
c0017d77:	c1 e0 05             	shl    eax,0x5
c0017d7a:	89 c2                	mov    edx,eax
c0017d7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d80:	01 d0                	add    eax,edx
c0017d82:	89 c2                	mov    edx,eax
c0017d84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d88:	01 d0                	add    eax,edx
c0017d8a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0017d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0017d90:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0017d95:	e9 36 ff ff ff       	jmp    c0017cd0 <HalConsoleScroll(int, int)+0x28>
c0017d9a:	66 90                	xchg   ax,ax
c0017d9c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0017da1:	e9 16 ff ff ff       	jmp    c0017cbc <HalConsoleScroll(int, int)+0x14>
c0017da6:	66 90                	xchg   ax,ax
c0017da8:	90                   	nop
c0017da9:	83 c4 10             	add    esp,0x10
c0017dac:	c3                   	ret    
c0017dad:	8d 76 00             	lea    esi,[esi+0x0]

c0017db0 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0017db0:	83 ec 14             	sub    esp,0x14
c0017db3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017db7:	88 04 24             	mov    BYTE PTR [esp],al
c0017dba:	8a 04 24             	mov    al,BYTE PTR [esp]
c0017dbd:	0f b6 c0             	movzx  eax,al
c0017dc0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017dc4:	89 d1                	mov    ecx,edx
c0017dc6:	83 e1 0f             	and    ecx,0xf
c0017dc9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017dcd:	c1 e2 04             	shl    edx,0x4
c0017dd0:	0f b6 d2             	movzx  edx,dl
c0017dd3:	09 ca                	or     edx,ecx
c0017dd5:	c1 e2 08             	shl    edx,0x8
c0017dd8:	09 d0                	or     eax,edx
c0017dda:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0017ddf:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0017de7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017deb:	89 d0                	mov    eax,edx
c0017ded:	c1 e0 02             	shl    eax,0x2
c0017df0:	01 d0                	add    eax,edx
c0017df2:	c1 e0 04             	shl    eax,0x4
c0017df5:	89 c2                	mov    edx,eax
c0017df7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017dfb:	01 d0                	add    eax,edx
c0017dfd:	01 c0                	add    eax,eax
c0017dff:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0017e03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017e07:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0017e0c:	66 89 02             	mov    WORD PTR [edx],ax
c0017e0f:	90                   	nop
c0017e10:	83 c4 14             	add    esp,0x14
c0017e13:	c3                   	ret    

c0017e14 <HalConsoleCursorUpdate(int, int)>:
c0017e14:	83 ec 20             	sub    esp,0x20
c0017e17:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e1b:	89 c2                	mov    edx,eax
c0017e1d:	c1 e2 02             	shl    edx,0x2
c0017e20:	01 d0                	add    eax,edx
c0017e22:	c1 e0 04             	shl    eax,0x4
c0017e25:	89 c2                	mov    edx,eax
c0017e27:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017e2b:	01 d0                	add    eax,edx
c0017e2d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0017e32:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0017e39:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0017e3e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017e42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017e46:	ee                   	out    dx,al
c0017e47:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0017e4c:	0f b6 c0             	movzx  eax,al
c0017e4f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0017e56:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0017e5a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017e5e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017e62:	ee                   	out    dx,al
c0017e63:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0017e6a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0017e6f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017e73:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e77:	ee                   	out    dx,al
c0017e78:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0017e7d:	c1 e8 08             	shr    eax,0x8
c0017e80:	0f b6 c0             	movzx  eax,al
c0017e83:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0017e8a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017e8e:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017e92:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017e96:	ee                   	out    dx,al
c0017e97:	90                   	nop
c0017e98:	83 c4 20             	add    esp,0x20
c0017e9b:	c3                   	ret    

c0017e9c <FAT::getName()>:
c0017e9c:	b8 fc 16 02 c0       	mov    eax,0xc00216fc
c0017ea1:	c3                   	ret    
c0017ea2:	66 90                	xchg   ax,ax

c0017ea4 <FAT::tell(void*, unsigned long long*)>:
c0017ea4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017ea9:	75 09                	jne    c0017eb4 <FAT::tell(void*, unsigned long long*)+0x10>
c0017eab:	b8 04 00 00 00       	mov    eax,0x4
c0017eb0:	c3                   	ret    
c0017eb1:	8d 76 00             	lea    esi,[esi+0x0]
c0017eb4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017eb9:	75 09                	jne    c0017ec4 <FAT::tell(void*, unsigned long long*)+0x20>
c0017ebb:	b8 04 00 00 00       	mov    eax,0x4
c0017ec0:	c3                   	ret    
c0017ec1:	8d 76 00             	lea    esi,[esi+0x0]
c0017ec4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ec8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017ecb:	ba 00 00 00 00       	mov    edx,0x0
c0017ed0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017ed4:	89 01                	mov    DWORD PTR [ecx],eax
c0017ed6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017ed9:	b8 00 00 00 00       	mov    eax,0x0
c0017ede:	c3                   	ret    
c0017edf:	90                   	nop

c0017ee0 <FAT::stat(void*, unsigned long long*)>:
c0017ee0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017ee5:	75 09                	jne    c0017ef0 <FAT::stat(void*, unsigned long long*)+0x10>
c0017ee7:	b8 04 00 00 00       	mov    eax,0x4
c0017eec:	c3                   	ret    
c0017eed:	8d 76 00             	lea    esi,[esi+0x0]
c0017ef0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017ef5:	75 09                	jne    c0017f00 <FAT::stat(void*, unsigned long long*)+0x20>
c0017ef7:	b8 04 00 00 00       	mov    eax,0x4
c0017efc:	c3                   	ret    
c0017efd:	8d 76 00             	lea    esi,[esi+0x0]
c0017f00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017f07:	ba 00 00 00 00       	mov    edx,0x0
c0017f0c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017f10:	89 01                	mov    DWORD PTR [ecx],eax
c0017f12:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017f15:	b8 00 00 00 00       	mov    eax,0x0
c0017f1a:	c3                   	ret    
c0017f1b:	90                   	nop

c0017f1c <FAT::~FAT()>:
c0017f1c:	83 ec 0c             	sub    esp,0xc
c0017f1f:	ba 48 17 02 c0       	mov    edx,0xc0021748
c0017f24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f28:	89 10                	mov    DWORD PTR [eax],edx
c0017f2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f2e:	83 ec 0c             	sub    esp,0xc
c0017f31:	50                   	push   eax
c0017f32:	e8 f9 2d ff ff       	call   c000ad30 <Filesystem::~Filesystem()>
c0017f37:	83 c4 10             	add    esp,0x10
c0017f3a:	90                   	nop
c0017f3b:	83 c4 0c             	add    esp,0xc
c0017f3e:	c3                   	ret    
c0017f3f:	90                   	nop

c0017f40 <FAT::~FAT()>:
c0017f40:	83 ec 0c             	sub    esp,0xc
c0017f43:	83 ec 0c             	sub    esp,0xc
c0017f46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f4a:	e8 cd ff ff ff       	call   c0017f1c <FAT::~FAT()>
c0017f4f:	83 c4 10             	add    esp,0x10
c0017f52:	83 ec 08             	sub    esp,0x8
c0017f55:	6a 08                	push   0x8
c0017f57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f5b:	e8 5d 29 ff ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c0017f60:	83 c4 10             	add    esp,0x10
c0017f63:	83 c4 0c             	add    esp,0xc
c0017f66:	c3                   	ret    
c0017f67:	90                   	nop

c0017f68 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0017f68:	83 ec 1c             	sub    esp,0x1c
c0017f6b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0017f72:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0017f77:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f7b:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017f82:	83 f8 ff             	cmp    eax,0xffffffff
c0017f85:	75 35                	jne    c0017fbc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0017f87:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017f8b:	88 c2                	mov    dl,al
c0017f8d:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017f92:	01 d0                	add    eax,edx
c0017f94:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017f98:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017f9e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fa2:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017fa9:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017fae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fb2:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017fb9:	eb 19                	jmp    c0017fd4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0017fbb:	90                   	nop
c0017fbc:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017fc0:	88 c2                	mov    dl,al
c0017fc2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fc6:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017fcd:	01 d0                	add    eax,edx
c0017fcf:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017fd3:	90                   	nop
c0017fd4:	83 ec 04             	sub    esp,0x4
c0017fd7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017fdb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017fdf:	8d 44 24 15          	lea    eax,[esp+0x15]
c0017fe3:	50                   	push   eax
c0017fe4:	e8 e6 cf fe ff       	call   c0004fcf <f_getlabel>
c0017fe9:	83 c4 10             	add    esp,0x10
c0017fec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ff0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017ff5:	75 09                	jne    c0018000 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0017ff7:	b8 00 00 00 00       	mov    eax,0x0
c0017ffc:	eb 0a                	jmp    c0018008 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0017ffe:	66 90                	xchg   ax,ax
c0018000:	b8 01 00 00 00       	mov    eax,0x1
c0018005:	8d 76 00             	lea    esi,[esi+0x0]
c0018008:	83 c4 1c             	add    esp,0x1c
c001800b:	c3                   	ret    

c001800c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001800c:	57                   	push   edi
c001800d:	83 ec 58             	sub    esp,0x58
c0018010:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018018:	8d 54 24 10          	lea    edx,[esp+0x10]
c001801c:	b8 00 00 00 00       	mov    eax,0x0
c0018021:	b9 0f 00 00 00       	mov    ecx,0xf
c0018026:	fc                   	cld    
c0018027:	89 d7                	mov    edi,edx
c0018029:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001802b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001802f:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018036:	83 f8 ff             	cmp    eax,0xffffffff
c0018039:	75 35                	jne    c0018070 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001803b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001803f:	88 c2                	mov    dl,al
c0018041:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018046:	01 d0                	add    eax,edx
c0018048:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001804c:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0018052:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018056:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c001805d:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018062:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018066:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c001806d:	eb 19                	jmp    c0018088 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001806f:	90                   	nop
c0018070:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018074:	88 c2                	mov    dl,al
c0018076:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001807a:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018081:	01 d0                	add    eax,edx
c0018083:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018087:	90                   	nop
c0018088:	83 ec 08             	sub    esp,0x8
c001808b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001808f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018093:	50                   	push   eax
c0018094:	e8 a7 87 fe ff       	call   c0000840 <strcat>
c0018099:	83 c4 10             	add    esp,0x10
c001809c:	83 ec 0c             	sub    esp,0xc
c001809f:	8d 44 24 18          	lea    eax,[esp+0x18]
c00180a3:	50                   	push   eax
c00180a4:	e8 77 d0 fe ff       	call   c0005120 <f_setlabel>
c00180a9:	83 c4 10             	add    esp,0x10
c00180ac:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00180b0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00180b5:	75 09                	jne    c00180c0 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00180b7:	b8 00 00 00 00       	mov    eax,0x0
c00180bc:	eb 0a                	jmp    c00180c8 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00180be:	66 90                	xchg   ax,ax
c00180c0:	b8 01 00 00 00       	mov    eax,0x1
c00180c5:	8d 76 00             	lea    esi,[esi+0x0]
c00180c8:	83 c4 58             	add    esp,0x58
c00180cb:	5f                   	pop    edi
c00180cc:	c3                   	ret    
c00180cd:	90                   	nop
c00180ce:	66 90                	xchg   ax,ax

c00180d0 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00180d0:	83 ec 2c             	sub    esp,0x2c
c00180d3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00180db:	83 ec 08             	sub    esp,0x8
c00180de:	68 20 17 02 c0       	push   0xc0021720
c00180e3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00180e7:	e8 64 86 fe ff       	call   c0000750 <strcmp>
c00180ec:	83 c4 10             	add    esp,0x10
c00180ef:	85 c0                	test   eax,eax
c00180f1:	0f 94 c0             	sete   al
c00180f4:	0f b6 c0             	movzx  eax,al
c00180f7:	85 c0                	test   eax,eax
c00180f9:	74 0d                	je     c0018108 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00180fb:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018103:	e9 c0 00 00 00       	jmp    c00181c8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018108:	83 ec 08             	sub    esp,0x8
c001810b:	68 12 17 02 c0       	push   0xc0021712
c0018110:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018114:	e8 37 86 fe ff       	call   c0000750 <strcmp>
c0018119:	83 c4 10             	add    esp,0x10
c001811c:	85 c0                	test   eax,eax
c001811e:	0f 94 c0             	sete   al
c0018121:	0f b6 c0             	movzx  eax,al
c0018124:	85 c0                	test   eax,eax
c0018126:	74 10                	je     c0018138 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018128:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018130:	e9 93 00 00 00       	jmp    c00181c8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018135:	8d 76 00             	lea    esi,[esi+0x0]
c0018138:	83 ec 08             	sub    esp,0x8
c001813b:	68 18 17 02 c0       	push   0xc0021718
c0018140:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018144:	e8 07 86 fe ff       	call   c0000750 <strcmp>
c0018149:	83 c4 10             	add    esp,0x10
c001814c:	85 c0                	test   eax,eax
c001814e:	0f 94 c0             	sete   al
c0018151:	0f b6 c0             	movzx  eax,al
c0018154:	85 c0                	test   eax,eax
c0018156:	74 0c                	je     c0018164 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018158:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018160:	eb 66                	jmp    c00181c8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018162:	66 90                	xchg   ax,ax
c0018164:	83 ec 08             	sub    esp,0x8
c0018167:	68 5c f4 01 c0       	push   0xc001f45c
c001816c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018170:	e8 db 85 fe ff       	call   c0000750 <strcmp>
c0018175:	83 c4 10             	add    esp,0x10
c0018178:	85 c0                	test   eax,eax
c001817a:	0f 94 c0             	sete   al
c001817d:	0f b6 c0             	movzx  eax,al
c0018180:	85 c0                	test   eax,eax
c0018182:	74 0c                	je     c0018190 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018184:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001818c:	eb 3a                	jmp    c00181c8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001818e:	66 90                	xchg   ax,ax
c0018190:	83 ec 08             	sub    esp,0x8
c0018193:	68 1e 17 02 c0       	push   0xc002171e
c0018198:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001819c:	e8 af 85 fe ff       	call   c0000750 <strcmp>
c00181a1:	83 c4 10             	add    esp,0x10
c00181a4:	85 c0                	test   eax,eax
c00181a6:	0f 94 c0             	sete   al
c00181a9:	0f b6 c0             	movzx  eax,al
c00181ac:	85 c0                	test   eax,eax
c00181ae:	74 0c                	je     c00181bc <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c00181b0:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00181b8:	eb 0e                	jmp    c00181c8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00181ba:	66 90                	xchg   ax,ax
c00181bc:	b8 08 00 00 00       	mov    eax,0x8
c00181c1:	e9 ea 00 00 00       	jmp    c00182b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00181c6:	66 90                	xchg   ax,ax
c00181c8:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00181cf:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00181d4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00181d8:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00181df:	83 f8 ff             	cmp    eax,0xffffffff
c00181e2:	75 34                	jne    c0018218 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c00181e4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00181e8:	88 c2                	mov    dl,al
c00181ea:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00181ef:	01 d0                	add    eax,edx
c00181f1:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00181f5:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c00181fb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00181ff:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0018206:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001820b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001820f:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0018216:	eb 18                	jmp    c0018230 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018218:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001821c:	88 c2                	mov    dl,al
c001821e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018222:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018229:	01 d0                	add    eax,edx
c001822b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001822f:	90                   	nop
c0018230:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018234:	88 04 24             	mov    BYTE PTR [esp],al
c0018237:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001823b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001823f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018247:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001824c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018254:	83 ec 0c             	sub    esp,0xc
c0018257:	68 00 20 00 00       	push   0x2000
c001825c:	e8 4d f8 fe ff       	call   c0007aae <malloc>
c0018261:	83 c4 10             	add    esp,0x10
c0018264:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018268:	68 00 20 00 00       	push   0x2000
c001826d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018271:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018275:	50                   	push   eax
c0018276:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001827a:	50                   	push   eax
c001827b:	e8 9d d1 fe ff       	call   c000541d <f_mkfs>
c0018280:	83 c4 10             	add    esp,0x10
c0018283:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018287:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001828c:	75 0a                	jne    c0018298 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001828e:	b8 00 00 00 00       	mov    eax,0x0
c0018293:	eb 1b                	jmp    c00182b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018295:	8d 76 00             	lea    esi,[esi+0x0]
c0018298:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001829d:	75 09                	jne    c00182a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001829f:	b8 09 00 00 00       	mov    eax,0x9
c00182a4:	eb 0a                	jmp    c00182b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00182a6:	66 90                	xchg   ax,ax
c00182a8:	b8 01 00 00 00       	mov    eax,0x1
c00182ad:	8d 76 00             	lea    esi,[esi+0x0]
c00182b0:	83 c4 2c             	add    esp,0x2c
c00182b3:	c3                   	ret    

c00182b4 <FAT::tryMount(LogicalDisk*, int)>:
c00182b4:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00182ba:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00182bf:	83 f8 14             	cmp    eax,0x14
c00182c2:	75 18                	jne    c00182dc <FAT::tryMount(LogicalDisk*, int)+0x28>
c00182c4:	83 ec 0c             	sub    esp,0xc
c00182c7:	68 24 17 02 c0       	push   0xc0021724
c00182cc:	e8 46 86 ff ff       	call   c0010917 <KePanic(char const*)>
c00182d1:	83 c4 10             	add    esp,0x10
c00182d4:	b0 00                	mov    al,0x0
c00182d6:	e9 ed 01 00 00       	jmp    c00184c8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00182db:	90                   	nop
c00182dc:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00182e3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00182e9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00182ef:	3d 00 02 00 00       	cmp    eax,0x200
c00182f4:	74 0a                	je     c0018300 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00182f6:	b0 00                	mov    al,0x0
c00182f8:	e9 cb 01 00 00       	jmp    c00184c8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00182fd:	8d 76 00             	lea    esi,[esi+0x0]
c0018300:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018308:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001830f:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018316:	83 f8 ff             	cmp    eax,0xffffffff
c0018319:	74 09                	je     c0018324 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001831b:	b0 01                	mov    al,0x1
c001831d:	e9 a6 01 00 00       	jmp    c00184c8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018322:	66 90                	xchg   ax,ax
c0018324:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001832e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018336:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001833d:	88 c2                	mov    dl,al
c001833f:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018344:	01 d0                	add    eax,edx
c0018346:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001834d:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0018353:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001835a:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0018361:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018366:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001836d:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0018374:	83 ec 0c             	sub    esp,0xc
c0018377:	68 34 02 00 00       	push   0x234
c001837c:	e8 2d f7 fe ff       	call   c0007aae <malloc>
c0018381:	83 c4 10             	add    esp,0x10
c0018384:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001838b:	83 ec 04             	sub    esp,0x4
c001838e:	6a 00                	push   0x0
c0018390:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018397:	50                   	push   eax
c0018398:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001839f:	e8 54 b8 fe ff       	call   c0003bf8 <f_mount>
c00183a4:	83 c4 10             	add    esp,0x10
c00183a7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00183ae:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00183b6:	74 1c                	je     c00183d4 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00183b8:	83 ec 0c             	sub    esp,0xc
c00183bb:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00183c2:	e8 07 f7 fe ff       	call   c0007ace <rfree>
c00183c7:	83 c4 10             	add    esp,0x10
c00183ca:	b0 00                	mov    al,0x0
c00183cc:	e9 f7 00 00 00       	jmp    c00184c8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00183d1:	8d 76 00             	lea    esi,[esi+0x0]
c00183d4:	83 ec 04             	sub    esp,0x4
c00183d7:	68 00 01 00 00       	push   0x100
c00183dc:	6a 00                	push   0x0
c00183de:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00183e5:	50                   	push   eax
c00183e6:	e8 05 81 fe ff       	call   c00004f0 <memset>
c00183eb:	83 c4 10             	add    esp,0x10
c00183ee:	83 ec 08             	sub    esp,0x8
c00183f1:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00183f8:	50                   	push   eax
c00183f9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018400:	50                   	push   eax
c0018401:	e8 3a 84 fe ff       	call   c0000840 <strcat>
c0018406:	83 c4 10             	add    esp,0x10
c0018409:	83 ec 08             	sub    esp,0x8
c001840c:	68 32 17 02 c0       	push   0xc0021732
c0018411:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018418:	50                   	push   eax
c0018419:	e8 22 84 fe ff       	call   c0000840 <strcat>
c001841e:	83 c4 10             	add    esp,0x10
c0018421:	83 ec 04             	sub    esp,0x4
c0018424:	6a 01                	push   0x1
c0018426:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001842d:	50                   	push   eax
c001842e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018432:	50                   	push   eax
c0018433:	e8 22 b8 fe ff       	call   c0003c5a <f_open>
c0018438:	83 c4 10             	add    esp,0x10
c001843b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018442:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0018449:	85 c0                	test   eax,eax
c001844b:	74 0b                	je     c0018458 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001844d:	78 31                	js     c0018480 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001844f:	83 e8 04             	sub    eax,0x4
c0018452:	83 f8 01             	cmp    eax,0x1
c0018455:	77 29                	ja     c0018480 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018457:	90                   	nop
c0018458:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0018460:	83 ec 0c             	sub    esp,0xc
c0018463:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018467:	50                   	push   eax
c0018468:	e8 bc bf fe ff       	call   c0004429 <f_close>
c001846d:	83 c4 10             	add    esp,0x10
c0018470:	90                   	nop
c0018471:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0018479:	85 c0                	test   eax,eax
c001847b:	74 43                	je     c00184c0 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001847d:	eb 31                	jmp    c00184b0 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001847f:	90                   	nop
c0018480:	83 ec 0c             	sub    esp,0xc
c0018483:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001848a:	e8 3f f6 fe ff       	call   c0007ace <rfree>
c001848f:	83 c4 10             	add    esp,0x10
c0018492:	83 ec 04             	sub    esp,0x4
c0018495:	6a 00                	push   0x0
c0018497:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001849e:	50                   	push   eax
c001849f:	6a 00                	push   0x0
c00184a1:	e8 52 b7 fe ff       	call   c0003bf8 <f_mount>
c00184a6:	83 c4 10             	add    esp,0x10
c00184a9:	b0 00                	mov    al,0x0
c00184ab:	eb 1b                	jmp    c00184c8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00184ad:	8d 76 00             	lea    esi,[esi+0x0]
c00184b0:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00184b5:	83 c0 01             	add    eax,0x1
c00184b8:	a3 20 82 02 c0       	mov    ds:0xc0028220,eax
c00184bd:	8d 76 00             	lea    esi,[esi+0x0]
c00184c0:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00184c7:	90                   	nop
c00184c8:	81 c4 4c 03 00 00    	add    esp,0x34c
c00184ce:	c3                   	ret    
c00184cf:	90                   	nop

c00184d0 <FAT::allocateSwapfile(char const*, int)>:
c00184d0:	55                   	push   ebp
c00184d1:	57                   	push   edi
c00184d2:	56                   	push   esi
c00184d3:	53                   	push   ebx
c00184d4:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00184da:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00184e5:	83 ec 0c             	sub    esp,0xc
c00184e8:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00184ef:	e8 ba f5 fe ff       	call   c0007aae <malloc>
c00184f4:	83 c4 10             	add    esp,0x10
c00184f7:	89 c7                	mov    edi,eax
c00184f9:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00184fe:	83 ec 04             	sub    esp,0x4
c0018501:	50                   	push   eax
c0018502:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0018509:	57                   	push   edi
c001850a:	e8 5d 2a ff ff       	call   c000af6c <File::File(char const*, Process*)>
c001850f:	83 c4 10             	add    esp,0x10
c0018512:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0018519:	83 ec 04             	sub    esp,0x4
c001851c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018520:	50                   	push   eax
c0018521:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018525:	50                   	push   eax
c0018526:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001852d:	e8 a2 2d ff ff       	call   c000b2d4 <File::stat(unsigned long long*, bool*)>
c0018532:	83 c4 10             	add    esp,0x10
c0018535:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001853c:	c1 e0 14             	shl    eax,0x14
c001853f:	89 c7                	mov    edi,eax
c0018541:	89 c5                	mov    ebp,eax
c0018543:	c1 fd 1f             	sar    ebp,0x1f
c0018546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001854a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001854e:	89 f9                	mov    ecx,edi
c0018550:	31 c1                	xor    ecx,eax
c0018552:	89 cb                	mov    ebx,ecx
c0018554:	89 e9                	mov    ecx,ebp
c0018556:	31 d1                	xor    ecx,edx
c0018558:	89 ce                	mov    esi,ecx
c001855a:	89 f0                	mov    eax,esi
c001855c:	09 d8                	or     eax,ebx
c001855e:	0f 84 9c 00 00 00    	je     c0018600 <FAT::allocateSwapfile(char const*, int)+0x130>
c0018564:	83 ec 0c             	sub    esp,0xc
c0018567:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001856e:	e8 2d 2c ff ff       	call   c000b1a0 <File::unlink()>
c0018573:	83 c4 10             	add    esp,0x10
c0018576:	83 ec 08             	sub    esp,0x8
c0018579:	6a 12                	push   0x12
c001857b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018582:	e8 a1 2a ff ff       	call   c000b028 <File::open(FileOpenMode)>
c0018587:	83 c4 10             	add    esp,0x10
c001858a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018591:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018597:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001859e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00185a5:	c1 e0 14             	shl    eax,0x14
c00185a8:	83 ec 04             	sub    esp,0x4
c00185ab:	6a 01                	push   0x1
c00185ad:	50                   	push   eax
c00185ae:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00185b5:	e8 f6 cc fe ff       	call   c00052b0 <f_expand>
c00185ba:	83 c4 10             	add    esp,0x10
c00185bd:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00185c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00185c6:	83 c0 10             	add    eax,0x10
c00185c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00185cb:	83 ec 0c             	sub    esp,0xc
c00185ce:	8d 54 24 24          	lea    edx,[esp+0x24]
c00185d2:	52                   	push   edx
c00185d3:	8d 54 24 30          	lea    edx,[esp+0x30]
c00185d7:	52                   	push   edx
c00185d8:	6a 00                	push   0x0
c00185da:	68 00 04 00 00       	push   0x400
c00185df:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00185e6:	ff d0                	call   eax
c00185e8:	83 c4 20             	add    esp,0x20
c00185eb:	83 ec 0c             	sub    esp,0xc
c00185ee:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00185f5:	e8 8c 2a ff ff       	call   c000b086 <File::close()>
c00185fa:	83 c4 10             	add    esp,0x10
c00185fd:	8d 76 00             	lea    esi,[esi+0x0]
c0018600:	83 ec 08             	sub    esp,0x8
c0018603:	6a 01                	push   0x1
c0018605:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001860c:	e8 17 2a ff ff       	call   c000b028 <File::open(FileOpenMode)>
c0018611:	83 c4 10             	add    esp,0x10
c0018614:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001861b:	8b 00                	mov    eax,DWORD PTR [eax]
c001861d:	83 c0 0c             	add    eax,0xc
c0018620:	8b 00                	mov    eax,DWORD PTR [eax]
c0018622:	83 ec 0c             	sub    esp,0xc
c0018625:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018629:	52                   	push   edx
c001862a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001862e:	52                   	push   edx
c001862f:	6a 00                	push   0x0
c0018631:	6a 04                	push   0x4
c0018633:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001863a:	ff d0                	call   eax
c001863c:	83 c4 20             	add    esp,0x20
c001863f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018646:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001864c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0018653:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001865a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001865d:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0018664:	83 ec 0c             	sub    esp,0xc
c0018667:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001866e:	e8 13 2a ff ff       	call   c000b086 <File::close()>
c0018673:	83 c4 10             	add    esp,0x10
c0018676:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001867d:	ba 00 00 00 00       	mov    edx,0x0
c0018682:	81 c4 3c 04 00 00    	add    esp,0x43c
c0018688:	5b                   	pop    ebx
c0018689:	5e                   	pop    esi
c001868a:	5f                   	pop    edi
c001868b:	5d                   	pop    ebp
c001868c:	c3                   	ret    
c001868d:	90                   	nop
c001868e:	66 90                	xchg   ax,ax

c0018690 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0018690:	57                   	push   edi
c0018691:	56                   	push   esi
c0018692:	53                   	push   ebx
c0018693:	81 ec 50 02 00 00    	sub    esp,0x250
c0018699:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00186a1:	74 0d                	je     c00186b0 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00186a3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00186ab:	75 0f                	jne    c00186bc <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00186ad:	8d 76 00             	lea    esi,[esi+0x0]
c00186b0:	b8 04 00 00 00       	mov    eax,0x4
c00186b5:	e9 3a 01 00 00       	jmp    c00187f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00186ba:	66 90                	xchg   ax,ax
c00186bc:	83 ec 08             	sub    esp,0x8
c00186bf:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00186c6:	50                   	push   eax
c00186c7:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00186ce:	e8 23 c0 fe ff       	call   c00046f6 <f_readdir>
c00186d3:	83 c4 10             	add    esp,0x10
c00186d6:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00186dd:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00186e4:	83 ec 0c             	sub    esp,0xc
c00186e7:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00186ee:	83 c0 16             	add    eax,0x16
c00186f1:	50                   	push   eax
c00186f2:	e8 79 7e fe ff       	call   c0000570 <strlen>
c00186f7:	83 c4 10             	add    esp,0x10
c00186fa:	ba 00 00 00 00       	mov    edx,0x0
c00186ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018703:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018707:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001870e:	0f b6 c0             	movzx  eax,al
c0018711:	83 e0 10             	and    eax,0x10
c0018714:	74 0a                	je     c0018720 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0018716:	b8 02 00 00 00       	mov    eax,0x2
c001871b:	eb 0b                	jmp    c0018728 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001871d:	8d 76 00             	lea    esi,[esi+0x0]
c0018720:	b8 01 00 00 00       	mov    eax,0x1
c0018725:	8d 76 00             	lea    esi,[esi+0x0]
c0018728:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001872c:	83 ec 08             	sub    esp,0x8
c001872f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0018736:	83 c0 16             	add    eax,0x16
c0018739:	50                   	push   eax
c001873a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001873e:	83 c0 10             	add    eax,0x10
c0018741:	50                   	push   eax
c0018742:	e8 f9 7e fe ff       	call   c0000640 <strcpy>
c0018747:	83 c4 10             	add    esp,0x10
c001874a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0018751:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0018758:	8d 44 24 08          	lea    eax,[esp+0x8]
c001875c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0018763:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001876a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0018771:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0018778:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001877f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0018786:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001878d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0018794:	89 c6                	mov    esi,eax
c0018796:	89 d7                	mov    edi,edx
c0018798:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001879a:	89 c8                	mov    eax,ecx
c001879c:	89 fa                	mov    edx,edi
c001879e:	89 f3                	mov    ebx,esi
c00187a0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00187a7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00187ae:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00187b5:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00187bc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00187c2:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00187c9:	0f be c0             	movsx  eax,al
c00187cc:	85 c0                	test   eax,eax
c00187ce:	75 08                	jne    c00187d8 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c00187d0:	b8 07 00 00 00       	mov    eax,0x7
c00187d5:	eb 1d                	jmp    c00187f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00187d7:	90                   	nop
c00187d8:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00187df:	85 c0                	test   eax,eax
c00187e1:	75 09                	jne    c00187ec <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00187e3:	b8 00 00 00 00       	mov    eax,0x0
c00187e8:	eb 0a                	jmp    c00187f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00187ea:	66 90                	xchg   ax,ax
c00187ec:	b8 01 00 00 00       	mov    eax,0x1
c00187f1:	8d 76 00             	lea    esi,[esi+0x0]
c00187f4:	81 c4 50 02 00 00    	add    esp,0x250
c00187fa:	5b                   	pop    ebx
c00187fb:	5e                   	pop    esi
c00187fc:	5f                   	pop    edi
c00187fd:	c3                   	ret    
c00187fe:	66 90                	xchg   ax,ax

c0018800 <FAT::read(void*, unsigned long, void*, int*)>:
c0018800:	83 ec 1c             	sub    esp,0x1c
c0018803:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018808:	74 0a                	je     c0018814 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001880a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001880f:	75 0b                	jne    c001881c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0018811:	8d 76 00             	lea    esi,[esi+0x0]
c0018814:	b8 04 00 00 00       	mov    eax,0x4
c0018819:	eb 41                	jmp    c001885c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001881b:	90                   	nop
c001881c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018820:	50                   	push   eax
c0018821:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018825:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018829:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001882d:	e8 eb b6 fe ff       	call   c0003f1d <f_read>
c0018832:	83 c4 10             	add    esp,0x10
c0018835:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018839:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001883d:	89 c2                	mov    edx,eax
c001883f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018843:	89 10                	mov    DWORD PTR [eax],edx
c0018845:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018849:	85 c0                	test   eax,eax
c001884b:	75 07                	jne    c0018854 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001884d:	b8 00 00 00 00       	mov    eax,0x0
c0018852:	eb 08                	jmp    c001885c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0018854:	b8 01 00 00 00       	mov    eax,0x1
c0018859:	8d 76 00             	lea    esi,[esi+0x0]
c001885c:	83 c4 1c             	add    esp,0x1c
c001885f:	c3                   	ret    

c0018860 <FAT::write(void*, unsigned long, void*, int*)>:
c0018860:	83 ec 1c             	sub    esp,0x1c
c0018863:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018868:	74 0a                	je     c0018874 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001886a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001886f:	75 0b                	jne    c001887c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0018871:	8d 76 00             	lea    esi,[esi+0x0]
c0018874:	b8 04 00 00 00       	mov    eax,0x4
c0018879:	eb 41                	jmp    c00188bc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001887b:	90                   	nop
c001887c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018880:	50                   	push   eax
c0018881:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018885:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018889:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001888d:	e8 8a b8 fe ff       	call   c000411c <f_write>
c0018892:	83 c4 10             	add    esp,0x10
c0018895:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018899:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001889d:	89 c2                	mov    edx,eax
c001889f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00188a3:	89 10                	mov    DWORD PTR [eax],edx
c00188a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00188a9:	85 c0                	test   eax,eax
c00188ab:	75 07                	jne    c00188b4 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00188ad:	b8 00 00 00 00       	mov    eax,0x0
c00188b2:	eb 08                	jmp    c00188bc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00188b4:	b8 01 00 00 00       	mov    eax,0x1
c00188b9:	8d 76 00             	lea    esi,[esi+0x0]
c00188bc:	83 c4 1c             	add    esp,0x1c
c00188bf:	c3                   	ret    

c00188c0 <FAT::close(void*)>:
c00188c0:	83 ec 1c             	sub    esp,0x1c
c00188c3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00188c8:	75 0a                	jne    c00188d4 <FAT::close(void*)+0x14>
c00188ca:	b8 04 00 00 00       	mov    eax,0x4
c00188cf:	eb 3f                	jmp    c0018910 <FAT::close(void*)+0x50>
c00188d1:	8d 76 00             	lea    esi,[esi+0x0]
c00188d4:	83 ec 0c             	sub    esp,0xc
c00188d7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00188db:	e8 49 bb fe ff       	call   c0004429 <f_close>
c00188e0:	83 c4 10             	add    esp,0x10
c00188e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00188e7:	83 ec 0c             	sub    esp,0xc
c00188ea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00188ee:	e8 cb f1 fe ff       	call   c0007abe <free>
c00188f3:	83 c4 10             	add    esp,0x10
c00188f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00188fa:	85 c0                	test   eax,eax
c00188fc:	75 0a                	jne    c0018908 <FAT::close(void*)+0x48>
c00188fe:	b8 00 00 00 00       	mov    eax,0x0
c0018903:	eb 0b                	jmp    c0018910 <FAT::close(void*)+0x50>
c0018905:	8d 76 00             	lea    esi,[esi+0x0]
c0018908:	b8 01 00 00 00       	mov    eax,0x1
c001890d:	8d 76 00             	lea    esi,[esi+0x0]
c0018910:	83 c4 1c             	add    esp,0x1c
c0018913:	c3                   	ret    

c0018914 <FAT::closeDir(void*)>:
c0018914:	83 ec 1c             	sub    esp,0x1c
c0018917:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001891c:	75 0a                	jne    c0018928 <FAT::closeDir(void*)+0x14>
c001891e:	b8 04 00 00 00       	mov    eax,0x4
c0018923:	eb 3f                	jmp    c0018964 <FAT::closeDir(void*)+0x50>
c0018925:	8d 76 00             	lea    esi,[esi+0x0]
c0018928:	83 ec 0c             	sub    esp,0xc
c001892b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001892f:	e8 a0 bd fe ff       	call   c00046d4 <f_closedir>
c0018934:	83 c4 10             	add    esp,0x10
c0018937:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001893b:	83 ec 0c             	sub    esp,0xc
c001893e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018942:	e8 77 f1 fe ff       	call   c0007abe <free>
c0018947:	83 c4 10             	add    esp,0x10
c001894a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001894e:	85 c0                	test   eax,eax
c0018950:	75 0a                	jne    c001895c <FAT::closeDir(void*)+0x48>
c0018952:	b8 00 00 00 00       	mov    eax,0x0
c0018957:	eb 0b                	jmp    c0018964 <FAT::closeDir(void*)+0x50>
c0018959:	8d 76 00             	lea    esi,[esi+0x0]
c001895c:	b8 01 00 00 00       	mov    eax,0x1
c0018961:	8d 76 00             	lea    esi,[esi+0x0]
c0018964:	83 c4 1c             	add    esp,0x1c
c0018967:	c3                   	ret    

c0018968 <FAT::seek(void*, unsigned long long)>:
c0018968:	83 ec 2c             	sub    esp,0x2c
c001896b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001896f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018973:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018977:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001897b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018980:	75 0a                	jne    c001898c <FAT::seek(void*, unsigned long long)+0x24>
c0018982:	b8 04 00 00 00       	mov    eax,0x4
c0018987:	eb 33                	jmp    c00189bc <FAT::seek(void*, unsigned long long)+0x54>
c0018989:	8d 76 00             	lea    esi,[esi+0x0]
c001898c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018990:	83 ec 08             	sub    esp,0x8
c0018993:	50                   	push   eax
c0018994:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018998:	e8 bb ba fe ff       	call   c0004458 <f_lseek>
c001899d:	83 c4 10             	add    esp,0x10
c00189a0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00189a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00189a8:	85 c0                	test   eax,eax
c00189aa:	75 08                	jne    c00189b4 <FAT::seek(void*, unsigned long long)+0x4c>
c00189ac:	b8 00 00 00 00       	mov    eax,0x0
c00189b1:	eb 09                	jmp    c00189bc <FAT::seek(void*, unsigned long long)+0x54>
c00189b3:	90                   	nop
c00189b4:	b8 01 00 00 00       	mov    eax,0x1
c00189b9:	8d 76 00             	lea    esi,[esi+0x0]
c00189bc:	83 c4 2c             	add    esp,0x2c
c00189bf:	c3                   	ret    

c00189c0 <fatWrapperReadDisk>:
c00189c0:	53                   	push   ebx
c00189c1:	83 ec 18             	sub    esp,0x18
c00189c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189c8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00189cc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00189d1:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c00189d8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00189dc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189e0:	ba 00 00 00 00       	mov    edx,0x0
c00189e5:	83 ec 0c             	sub    esp,0xc
c00189e8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00189ec:	53                   	push   ebx
c00189ed:	52                   	push   edx
c00189ee:	50                   	push   eax
c00189ef:	51                   	push   ecx
c00189f0:	e8 0b 48 ff ff       	call   c000d200 <LogicalDisk::read(unsigned long long, int, void*)>
c00189f5:	83 c4 20             	add    esp,0x20
c00189f8:	83 c4 18             	add    esp,0x18
c00189fb:	5b                   	pop    ebx
c00189fc:	c3                   	ret    
c00189fd:	8d 76 00             	lea    esi,[esi+0x0]

c0018a00 <fatWrapperWriteDisk>:
c0018a00:	53                   	push   ebx
c0018a01:	83 ec 18             	sub    esp,0x18
c0018a04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a08:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018a0c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018a11:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0018a18:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018a1c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a20:	ba 00 00 00 00       	mov    edx,0x0
c0018a25:	83 ec 0c             	sub    esp,0xc
c0018a28:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018a2c:	53                   	push   ebx
c0018a2d:	52                   	push   edx
c0018a2e:	50                   	push   eax
c0018a2f:	51                   	push   ecx
c0018a30:	e8 37 48 ff ff       	call   c000d26c <LogicalDisk::write(unsigned long long, int, void*)>
c0018a35:	83 c4 20             	add    esp,0x20
c0018a38:	83 c4 18             	add    esp,0x18
c0018a3b:	5b                   	pop    ebx
c0018a3c:	c3                   	ret    
c0018a3d:	8d 76 00             	lea    esi,[esi+0x0]

c0018a40 <fatWrapperIoctl>:
c0018a40:	53                   	push   ebx
c0018a41:	83 ec 28             	sub    esp,0x28
c0018a44:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018a48:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018a4c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018a50:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018a54:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a59:	83 f8 02             	cmp    eax,0x2
c0018a5c:	75 32                	jne    c0018a90 <fatWrapperIoctl+0x50>
c0018a5e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018a62:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018a66:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018a6b:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0018a72:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018a78:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018a7e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018a82:	66 89 02             	mov    WORD PTR [edx],ax
c0018a85:	b8 00 00 00 00       	mov    eax,0x0
c0018a8a:	e9 c5 00 00 00       	jmp    c0018b54 <fatWrapperIoctl+0x114>
c0018a8f:	90                   	nop
c0018a90:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a95:	83 f8 01             	cmp    eax,0x1
c0018a98:	75 6a                	jne    c0018b04 <fatWrapperIoctl+0xc4>
c0018a9a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018aa2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018aa7:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0018aae:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018ab4:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018aba:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0018ac0:	89 c8                	mov    eax,ecx
c0018ac2:	89 da                	mov    edx,ebx
c0018ac4:	0f a4 c2 0a          	shld   edx,eax,0xa
c0018ac8:	c1 e0 0a             	shl    eax,0xa
c0018acb:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0018ad0:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0018ad7:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0018add:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0018ae3:	89 cb                	mov    ebx,ecx
c0018ae5:	c1 fb 1f             	sar    ebx,0x1f
c0018ae8:	53                   	push   ebx
c0018ae9:	51                   	push   ecx
c0018aea:	52                   	push   edx
c0018aeb:	50                   	push   eax
c0018aec:	e8 6f 5b 00 00       	call   c001e660 <__udivdi3>
c0018af1:	83 c4 10             	add    esp,0x10
c0018af4:	89 c2                	mov    edx,eax
c0018af6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018afa:	89 10                	mov    DWORD PTR [eax],edx
c0018afc:	b8 00 00 00 00       	mov    eax,0x0
c0018b01:	eb 51                	jmp    c0018b54 <fatWrapperIoctl+0x114>
c0018b03:	90                   	nop
c0018b04:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b09:	85 c0                	test   eax,eax
c0018b0b:	75 07                	jne    c0018b14 <fatWrapperIoctl+0xd4>
c0018b0d:	b8 00 00 00 00       	mov    eax,0x0
c0018b12:	eb 40                	jmp    c0018b54 <fatWrapperIoctl+0x114>
c0018b14:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b19:	83 f8 03             	cmp    eax,0x3
c0018b1c:	75 1a                	jne    c0018b38 <fatWrapperIoctl+0xf8>
c0018b1e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018b22:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b2a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0018b30:	b8 00 00 00 00       	mov    eax,0x0
c0018b35:	eb 1d                	jmp    c0018b54 <fatWrapperIoctl+0x114>
c0018b37:	90                   	nop
c0018b38:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b3d:	83 f8 04             	cmp    eax,0x4
c0018b40:	75 0a                	jne    c0018b4c <fatWrapperIoctl+0x10c>
c0018b42:	b8 00 00 00 00       	mov    eax,0x0
c0018b47:	eb 0b                	jmp    c0018b54 <fatWrapperIoctl+0x114>
c0018b49:	8d 76 00             	lea    esi,[esi+0x0]
c0018b4c:	b8 04 00 00 00       	mov    eax,0x4
c0018b51:	8d 76 00             	lea    esi,[esi+0x0]
c0018b54:	83 c4 28             	add    esp,0x28
c0018b57:	5b                   	pop    ebx
c0018b58:	c3                   	ret    
c0018b59:	90                   	nop
c0018b5a:	66 90                	xchg   ax,ax

c0018b5c <FAT::FAT()>:
c0018b5c:	83 ec 1c             	sub    esp,0x1c
c0018b5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b63:	83 ec 0c             	sub    esp,0xc
c0018b66:	50                   	push   eax
c0018b67:	e8 a0 21 ff ff       	call   c000ad0c <Filesystem::Filesystem()>
c0018b6c:	83 c4 10             	add    esp,0x10
c0018b6f:	ba 48 17 02 c0       	mov    edx,0xc0021748
c0018b74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b78:	89 10                	mov    DWORD PTR [eax],edx
c0018b7a:	c7 05 20 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028220,0x0
c0018b84:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018b8c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0018b91:	7f 19                	jg     c0018bac <FAT::FAT()+0x50>
c0018b93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018b97:	c7 04 85 40 82 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd7dc0],0xffffffff
c0018ba2:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018ba7:	eb e3                	jmp    c0018b8c <FAT::FAT()+0x30>
c0018ba9:	8d 76 00             	lea    esi,[esi+0x0]
c0018bac:	90                   	nop
c0018bad:	83 c4 1c             	add    esp,0x1c
c0018bb0:	c3                   	ret    
c0018bb1:	90                   	nop
c0018bb2:	66 90                	xchg   ax,ax

c0018bb4 <FAT::fixFilepath(char*)>:
c0018bb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018bb8:	8a 00                	mov    al,BYTE PTR [eax]
c0018bba:	0f be c0             	movsx  eax,al
c0018bbd:	83 f8 40             	cmp    eax,0x40
c0018bc0:	7e 2e                	jle    c0018bf0 <FAT::fixFilepath(char*)+0x3c>
c0018bc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018bc6:	8a 00                	mov    al,BYTE PTR [eax]
c0018bc8:	83 e8 41             	sub    eax,0x41
c0018bcb:	88 c2                	mov    dl,al
c0018bcd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018bd1:	88 10                	mov    BYTE PTR [eax],dl
c0018bd3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018bd7:	8a 00                	mov    al,BYTE PTR [eax]
c0018bd9:	0f be c0             	movsx  eax,al
c0018bdc:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018be3:	83 c0 30             	add    eax,0x30
c0018be6:	88 c2                	mov    dl,al
c0018be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018bec:	88 10                	mov    BYTE PTR [eax],dl
c0018bee:	66 90                	xchg   ax,ax
c0018bf0:	90                   	nop
c0018bf1:	c3                   	ret    
c0018bf2:	66 90                	xchg   ax,ax

c0018bf4 <FAT::open(char const*, void**, FileOpenMode)>:
c0018bf4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018bfa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018c02:	74 0c                	je     c0018c10 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0018c04:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018c0c:	75 0e                	jne    c0018c1c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0018c0e:	66 90                	xchg   ax,ax
c0018c10:	b8 04 00 00 00       	mov    eax,0x4
c0018c15:	e9 46 01 00 00       	jmp    c0018d60 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018c1a:	66 90                	xchg   ax,ax
c0018c1c:	83 ec 08             	sub    esp,0x8
c0018c1f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018c26:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018c2a:	50                   	push   eax
c0018c2b:	e8 10 7a fe ff       	call   c0000640 <strcpy>
c0018c30:	83 c4 10             	add    esp,0x10
c0018c33:	83 ec 08             	sub    esp,0x8
c0018c36:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018c3a:	50                   	push   eax
c0018c3b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018c42:	e8 6d ff ff ff       	call   c0018bb4 <FAT::fixFilepath(char*)>
c0018c47:	83 c4 10             	add    esp,0x10
c0018c4a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0018c52:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c59:	83 e0 01             	and    eax,0x1
c0018c5c:	74 12                	je     c0018c70 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0018c5e:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c65:	83 c8 01             	or     eax,0x1
c0018c68:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c6f:	90                   	nop
c0018c70:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c77:	83 e0 04             	and    eax,0x4
c0018c7a:	74 24                	je     c0018ca0 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0018c7c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c83:	83 c8 30             	or     eax,0x30
c0018c86:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c8d:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c94:	83 c8 02             	or     eax,0x2
c0018c97:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c9e:	66 90                	xchg   ax,ax
c0018ca0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018ca7:	83 e0 02             	and    eax,0x2
c0018caa:	74 14                	je     c0018cc0 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0018cac:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018cb3:	83 c8 02             	or     eax,0x2
c0018cb6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018cbd:	8d 76 00             	lea    esi,[esi+0x0]
c0018cc0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018cc7:	83 e0 08             	and    eax,0x8
c0018cca:	74 14                	je     c0018ce0 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0018ccc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018cd3:	83 c8 04             	or     eax,0x4
c0018cd6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0018ce0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018ce7:	83 e0 10             	and    eax,0x10
c0018cea:	74 14                	je     c0018d00 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0018cec:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018cf3:	83 c8 08             	or     eax,0x8
c0018cf6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018cfd:	8d 76 00             	lea    esi,[esi+0x0]
c0018d00:	83 ec 0c             	sub    esp,0xc
c0018d03:	68 28 02 00 00       	push   0x228
c0018d08:	e8 a1 ed fe ff       	call   c0007aae <malloc>
c0018d0d:	83 c4 10             	add    esp,0x10
c0018d10:	89 c2                	mov    edx,eax
c0018d12:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018d19:	89 10                	mov    DWORD PTR [eax],edx
c0018d1b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0018d23:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018d2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d2c:	83 ec 04             	sub    esp,0x4
c0018d2f:	52                   	push   edx
c0018d30:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018d34:	52                   	push   edx
c0018d35:	50                   	push   eax
c0018d36:	e8 1f af fe ff       	call   c0003c5a <f_open>
c0018d3b:	83 c4 10             	add    esp,0x10
c0018d3e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0018d45:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0018d4d:	74 09                	je     c0018d58 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0018d4f:	b8 01 00 00 00       	mov    eax,0x1
c0018d54:	eb 0a                	jmp    c0018d60 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018d56:	66 90                	xchg   ax,ax
c0018d58:	b8 00 00 00 00       	mov    eax,0x0
c0018d5d:	8d 76 00             	lea    esi,[esi+0x0]
c0018d60:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018d66:	c3                   	ret    
c0018d67:	90                   	nop

c0018d68 <FAT::openDir(char const*, void**)>:
c0018d68:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018d6e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018d76:	74 0c                	je     c0018d84 <FAT::openDir(char const*, void**)+0x1c>
c0018d78:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018d80:	75 0e                	jne    c0018d90 <FAT::openDir(char const*, void**)+0x28>
c0018d82:	66 90                	xchg   ax,ax
c0018d84:	b8 04 00 00 00       	mov    eax,0x4
c0018d89:	e9 82 00 00 00       	jmp    c0018e10 <FAT::openDir(char const*, void**)+0xa8>
c0018d8e:	66 90                	xchg   ax,ax
c0018d90:	83 ec 08             	sub    esp,0x8
c0018d93:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018d9a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018d9e:	50                   	push   eax
c0018d9f:	e8 9c 78 fe ff       	call   c0000640 <strcpy>
c0018da4:	83 c4 10             	add    esp,0x10
c0018da7:	83 ec 08             	sub    esp,0x8
c0018daa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018dae:	50                   	push   eax
c0018daf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018db6:	e8 f9 fd ff ff       	call   c0018bb4 <FAT::fixFilepath(char*)>
c0018dbb:	83 c4 10             	add    esp,0x10
c0018dbe:	83 ec 0c             	sub    esp,0xc
c0018dc1:	6a 30                	push   0x30
c0018dc3:	e8 e6 ec fe ff       	call   c0007aae <malloc>
c0018dc8:	83 c4 10             	add    esp,0x10
c0018dcb:	89 c2                	mov    edx,eax
c0018dcd:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018dd4:	89 10                	mov    DWORD PTR [eax],edx
c0018dd6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018ddd:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ddf:	83 ec 08             	sub    esp,0x8
c0018de2:	8d 54 24 14          	lea    edx,[esp+0x14]
c0018de6:	52                   	push   edx
c0018de7:	50                   	push   eax
c0018de8:	e8 1c b8 fe ff       	call   c0004609 <f_opendir>
c0018ded:	83 c4 10             	add    esp,0x10
c0018df0:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018df7:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0018dff:	74 07                	je     c0018e08 <FAT::openDir(char const*, void**)+0xa0>
c0018e01:	b8 01 00 00 00       	mov    eax,0x1
c0018e06:	eb 08                	jmp    c0018e10 <FAT::openDir(char const*, void**)+0xa8>
c0018e08:	b8 00 00 00 00       	mov    eax,0x0
c0018e0d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e10:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018e16:	c3                   	ret    
c0018e17:	90                   	nop

c0018e18 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0018e18:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0018e1e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0018e26:	75 0c                	jne    c0018e34 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0018e28:	b8 04 00 00 00       	mov    eax,0x4
c0018e2d:	e9 d6 00 00 00       	jmp    c0018f08 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018e32:	66 90                	xchg   ax,ax
c0018e34:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0018e3c:	75 0a                	jne    c0018e48 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0018e3e:	b8 04 00 00 00       	mov    eax,0x4
c0018e43:	e9 c0 00 00 00       	jmp    c0018f08 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018e48:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0018e50:	75 0a                	jne    c0018e5c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0018e52:	b8 04 00 00 00       	mov    eax,0x4
c0018e57:	e9 ac 00 00 00       	jmp    c0018f08 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018e5c:	83 ec 08             	sub    esp,0x8
c0018e5f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018e66:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018e6d:	50                   	push   eax
c0018e6e:	e8 cd 77 fe ff       	call   c0000640 <strcpy>
c0018e73:	83 c4 10             	add    esp,0x10
c0018e76:	83 ec 08             	sub    esp,0x8
c0018e79:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018e80:	50                   	push   eax
c0018e81:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018e88:	e8 27 fd ff ff       	call   c0018bb4 <FAT::fixFilepath(char*)>
c0018e8d:	83 c4 10             	add    esp,0x10
c0018e90:	83 ec 08             	sub    esp,0x8
c0018e93:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e97:	50                   	push   eax
c0018e98:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018e9f:	50                   	push   eax
c0018ea0:	e8 e3 b8 fe ff       	call   c0004788 <f_stat>
c0018ea5:	83 c4 10             	add    esp,0x10
c0018ea8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0018eaf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018eb6:	85 c0                	test   eax,eax
c0018eb8:	74 0a                	je     c0018ec4 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0018eba:	83 f8 04             	cmp    eax,0x4
c0018ebd:	74 39                	je     c0018ef8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0018ebf:	eb 3f                	jmp    c0018f00 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0018ec1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ec4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018ec8:	0f b6 c0             	movzx  eax,al
c0018ecb:	83 e0 10             	and    eax,0x10
c0018ece:	0f 95 c2             	setne  dl
c0018ed1:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0018ed8:	88 10                	mov    BYTE PTR [eax],dl
c0018eda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ede:	ba 00 00 00 00       	mov    edx,0x0
c0018ee3:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0018eea:	89 01                	mov    DWORD PTR [ecx],eax
c0018eec:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018eef:	b8 00 00 00 00       	mov    eax,0x0
c0018ef4:	eb 12                	jmp    c0018f08 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018ef6:	66 90                	xchg   ax,ax
c0018ef8:	b8 02 00 00 00       	mov    eax,0x2
c0018efd:	eb 09                	jmp    c0018f08 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018eff:	90                   	nop
c0018f00:	b8 01 00 00 00       	mov    eax,0x1
c0018f05:	8d 76 00             	lea    esi,[esi+0x0]
c0018f08:	81 c4 2c 02 00 00    	add    esp,0x22c
c0018f0e:	c3                   	ret    
c0018f0f:	90                   	nop

c0018f10 <FAT::unlink(char const*)>:
c0018f10:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018f16:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018f1e:	75 08                	jne    c0018f28 <FAT::unlink(char const*)+0x18>
c0018f20:	b8 04 00 00 00       	mov    eax,0x4
c0018f25:	eb 61                	jmp    c0018f88 <FAT::unlink(char const*)+0x78>
c0018f27:	90                   	nop
c0018f28:	83 ec 08             	sub    esp,0x8
c0018f2b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018f32:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018f36:	50                   	push   eax
c0018f37:	e8 04 77 fe ff       	call   c0000640 <strcpy>
c0018f3c:	83 c4 10             	add    esp,0x10
c0018f3f:	83 ec 08             	sub    esp,0x8
c0018f42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018f46:	50                   	push   eax
c0018f47:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018f4e:	e8 61 fc ff ff       	call   c0018bb4 <FAT::fixFilepath(char*)>
c0018f53:	83 c4 10             	add    esp,0x10
c0018f56:	83 ec 0c             	sub    esp,0xc
c0018f59:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018f5d:	50                   	push   eax
c0018f5e:	e8 97 ba fe ff       	call   c00049fa <f_unlink>
c0018f63:	83 c4 10             	add    esp,0x10
c0018f66:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018f6d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0018f74:	85 c0                	test   eax,eax
c0018f76:	75 08                	jne    c0018f80 <FAT::unlink(char const*)+0x70>
c0018f78:	b8 00 00 00 00       	mov    eax,0x0
c0018f7d:	eb 09                	jmp    c0018f88 <FAT::unlink(char const*)+0x78>
c0018f7f:	90                   	nop
c0018f80:	b8 01 00 00 00       	mov    eax,0x1
c0018f85:	8d 76 00             	lea    esi,[esi+0x0]
c0018f88:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018f8e:	c3                   	ret    
c0018f8f:	90                   	nop

c0018f90 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0018f90:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018f96:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0018f9d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018fa4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018fa8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018fac:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018fb4:	75 0a                	jne    c0018fc0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0018fb6:	b8 04 00 00 00       	mov    eax,0x4
c0018fbb:	e9 7c 01 00 00       	jmp    c001913c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0018fc0:	83 ec 08             	sub    esp,0x8
c0018fc3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018fca:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018fce:	50                   	push   eax
c0018fcf:	e8 6c 76 fe ff       	call   c0000640 <strcpy>
c0018fd4:	83 c4 10             	add    esp,0x10
c0018fd7:	83 ec 08             	sub    esp,0x8
c0018fda:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018fde:	50                   	push   eax
c0018fdf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018fe6:	e8 c9 fb ff ff       	call   c0018bb4 <FAT::fixFilepath(char*)>
c0018feb:	83 c4 10             	add    esp,0x10
c0018fee:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0018ff6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0018ffe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019003:	83 e0 01             	and    eax,0x1
c0019006:	74 14                	je     c001901c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0019008:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001900f:	83 c8 01             	or     eax,0x1
c0019012:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019019:	8d 76 00             	lea    esi,[esi+0x0]
c001901c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019021:	83 e0 02             	and    eax,0x2
c0019024:	74 12                	je     c0019038 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0019026:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001902d:	83 c8 20             	or     eax,0x20
c0019030:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019037:	90                   	nop
c0019038:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001903d:	83 e0 04             	and    eax,0x4
c0019040:	74 12                	je     c0019054 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c0019042:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019049:	83 c8 04             	or     eax,0x4
c001904c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019053:	90                   	nop
c0019054:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019059:	83 e0 08             	and    eax,0x8
c001905c:	74 12                	je     c0019070 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001905e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019065:	83 c8 02             	or     eax,0x2
c0019068:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001906f:	90                   	nop
c0019070:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019075:	83 e0 01             	and    eax,0x1
c0019078:	74 12                	je     c001908c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001907a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019081:	83 c8 01             	or     eax,0x1
c0019084:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001908b:	90                   	nop
c001908c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019091:	83 e0 02             	and    eax,0x2
c0019094:	74 12                	je     c00190a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c0019096:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001909d:	83 c8 20             	or     eax,0x20
c00190a0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00190a7:	90                   	nop
c00190a8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00190ad:	83 e0 04             	and    eax,0x4
c00190b0:	74 12                	je     c00190c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c00190b2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00190b9:	83 c8 04             	or     eax,0x4
c00190bc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00190c3:	90                   	nop
c00190c4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00190c9:	83 e0 08             	and    eax,0x8
c00190cc:	74 12                	je     c00190e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c00190ce:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00190d5:	83 c8 02             	or     eax,0x2
c00190d8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00190df:	90                   	nop
c00190e0:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c00190e7:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00190ee:	09 d0                	or     eax,edx
c00190f0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00190f7:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00190ff:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019107:	83 ec 04             	sub    esp,0x4
c001910a:	52                   	push   edx
c001910b:	50                   	push   eax
c001910c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019110:	50                   	push   eax
c0019111:	e8 59 bd fe ff       	call   c0004e6f <f_chmod>
c0019116:	83 c4 10             	add    esp,0x10
c0019119:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019120:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019127:	85 c0                	test   eax,eax
c0019129:	75 09                	jne    c0019134 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001912b:	b8 00 00 00 00       	mov    eax,0x0
c0019130:	eb 0a                	jmp    c001913c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019132:	66 90                	xchg   ax,ax
c0019134:	b8 01 00 00 00       	mov    eax,0x1
c0019139:	8d 76 00             	lea    esi,[esi+0x0]
c001913c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019142:	c3                   	ret    
c0019143:	90                   	nop

c0019144 <FAT::rename(char const*, char const*)>:
c0019144:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001914a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019152:	74 0c                	je     c0019160 <FAT::rename(char const*, char const*)+0x1c>
c0019154:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001915c:	75 0e                	jne    c001916c <FAT::rename(char const*, char const*)+0x28>
c001915e:	66 90                	xchg   ax,ax
c0019160:	b8 04 00 00 00       	mov    eax,0x4
c0019165:	e9 9e 00 00 00       	jmp    c0019208 <FAT::rename(char const*, char const*)+0xc4>
c001916a:	66 90                	xchg   ax,ax
c001916c:	83 ec 08             	sub    esp,0x8
c001916f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019176:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001917d:	50                   	push   eax
c001917e:	e8 bd 74 fe ff       	call   c0000640 <strcpy>
c0019183:	83 c4 10             	add    esp,0x10
c0019186:	83 ec 08             	sub    esp,0x8
c0019189:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019190:	50                   	push   eax
c0019191:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019198:	e8 17 fa ff ff       	call   c0018bb4 <FAT::fixFilepath(char*)>
c001919d:	83 c4 10             	add    esp,0x10
c00191a0:	83 ec 08             	sub    esp,0x8
c00191a3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00191aa:	8d 44 24 18          	lea    eax,[esp+0x18]
c00191ae:	50                   	push   eax
c00191af:	e8 8c 74 fe ff       	call   c0000640 <strcpy>
c00191b4:	83 c4 10             	add    esp,0x10
c00191b7:	83 ec 08             	sub    esp,0x8
c00191ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00191be:	50                   	push   eax
c00191bf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00191c6:	e8 e9 f9 ff ff       	call   c0018bb4 <FAT::fixFilepath(char*)>
c00191cb:	83 c4 10             	add    esp,0x10
c00191ce:	83 ec 08             	sub    esp,0x8
c00191d1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00191d5:	50                   	push   eax
c00191d6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00191dd:	50                   	push   eax
c00191de:	e8 d4 ba fe ff       	call   c0004cb7 <f_rename>
c00191e3:	83 c4 10             	add    esp,0x10
c00191e6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00191ed:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00191f4:	85 c0                	test   eax,eax
c00191f6:	75 08                	jne    c0019200 <FAT::rename(char const*, char const*)+0xbc>
c00191f8:	b8 00 00 00 00       	mov    eax,0x0
c00191fd:	eb 09                	jmp    c0019208 <FAT::rename(char const*, char const*)+0xc4>
c00191ff:	90                   	nop
c0019200:	b8 01 00 00 00       	mov    eax,0x1
c0019205:	8d 76 00             	lea    esi,[esi+0x0]
c0019208:	81 c4 1c 02 00 00    	add    esp,0x21c
c001920e:	c3                   	ret    
c001920f:	90                   	nop

c0019210 <FAT::mkdir(char const*)>:
c0019210:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019216:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001921e:	75 08                	jne    c0019228 <FAT::mkdir(char const*)+0x18>
c0019220:	b8 04 00 00 00       	mov    eax,0x4
c0019225:	eb 61                	jmp    c0019288 <FAT::mkdir(char const*)+0x78>
c0019227:	90                   	nop
c0019228:	83 ec 08             	sub    esp,0x8
c001922b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019232:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019236:	50                   	push   eax
c0019237:	e8 04 74 fe ff       	call   c0000640 <strcpy>
c001923c:	83 c4 10             	add    esp,0x10
c001923f:	83 ec 08             	sub    esp,0x8
c0019242:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019246:	50                   	push   eax
c0019247:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001924e:	e8 61 f9 ff ff       	call   c0018bb4 <FAT::fixFilepath(char*)>
c0019253:	83 c4 10             	add    esp,0x10
c0019256:	83 ec 0c             	sub    esp,0xc
c0019259:	8d 44 24 18          	lea    eax,[esp+0x18]
c001925d:	50                   	push   eax
c001925e:	e8 b9 b8 fe ff       	call   c0004b1c <f_mkdir>
c0019263:	83 c4 10             	add    esp,0x10
c0019266:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001926d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019274:	85 c0                	test   eax,eax
c0019276:	75 08                	jne    c0019280 <FAT::mkdir(char const*)+0x70>
c0019278:	b8 00 00 00 00       	mov    eax,0x0
c001927d:	eb 09                	jmp    c0019288 <FAT::mkdir(char const*)+0x78>
c001927f:	90                   	nop
c0019280:	b8 01 00 00 00       	mov    eax,0x1
c0019285:	8d 76 00             	lea    esi,[esi+0x0]
c0019288:	81 c4 1c 01 00 00    	add    esp,0x11c
c001928e:	c3                   	ret    
c001928f:	90                   	nop

c0019290 <FAT::exists(char const*)>:
c0019290:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019296:	83 ec 08             	sub    esp,0x8
c0019299:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00192a0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00192a4:	50                   	push   eax
c00192a5:	e8 96 73 fe ff       	call   c0000640 <strcpy>
c00192aa:	83 c4 10             	add    esp,0x10
c00192ad:	83 ec 08             	sub    esp,0x8
c00192b0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00192b4:	50                   	push   eax
c00192b5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00192bc:	e8 f3 f8 ff ff       	call   c0018bb4 <FAT::fixFilepath(char*)>
c00192c1:	83 c4 10             	add    esp,0x10
c00192c4:	83 ec 08             	sub    esp,0x8
c00192c7:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00192ce:	50                   	push   eax
c00192cf:	8d 44 24 10          	lea    eax,[esp+0x10]
c00192d3:	50                   	push   eax
c00192d4:	e8 af b4 fe ff       	call   c0004788 <f_stat>
c00192d9:	83 c4 10             	add    esp,0x10
c00192dc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00192e3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00192ea:	85 c0                	test   eax,eax
c00192ec:	75 06                	jne    c00192f4 <FAT::exists(char const*)+0x64>
c00192ee:	b0 01                	mov    al,0x1
c00192f0:	eb 06                	jmp    c00192f8 <FAT::exists(char const*)+0x68>
c00192f2:	66 90                	xchg   ax,ax
c00192f4:	b0 00                	mov    al,0x0
c00192f6:	66 90                	xchg   ax,ax
c00192f8:	81 c4 2c 02 00 00    	add    esp,0x22c
c00192fe:	c3                   	ret    
c00192ff:	90                   	nop

c0019300 <isoReadDiscSectorHelper>:
c0019300:	83 ec 2c             	sub    esp,0x2c
c0019303:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019307:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001930b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019310:	83 e8 41             	sub    eax,0x41
c0019313:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c001931a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001931e:	ba 00 00 00 00       	mov    edx,0x0
c0019323:	83 ec 0c             	sub    esp,0xc
c0019326:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001932a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001932e:	52                   	push   edx
c001932f:	50                   	push   eax
c0019330:	51                   	push   ecx
c0019331:	e8 ca 3e ff ff       	call   c000d200 <LogicalDisk::read(unsigned long long, int, void*)>
c0019336:	83 c4 20             	add    esp,0x20
c0019339:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001933d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019342:	74 0c                	je     c0019350 <isoReadDiscSectorHelper+0x50>
c0019344:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019348:	c1 e0 0b             	shl    eax,0xb
c001934b:	eb 0b                	jmp    c0019358 <isoReadDiscSectorHelper+0x58>
c001934d:	8d 76 00             	lea    esi,[esi+0x0]
c0019350:	b8 00 00 00 00       	mov    eax,0x0
c0019355:	8d 76 00             	lea    esi,[esi+0x0]
c0019358:	83 c4 2c             	add    esp,0x2c
c001935b:	c3                   	ret    

c001935c <iso_kprintf>:
c001935c:	83 ec 0c             	sub    esp,0xc
c001935f:	83 ec 08             	sub    esp,0x8
c0019362:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019366:	68 51 11 02 c0       	push   0xc0021151
c001936b:	e8 7a 16 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0019370:	83 c4 10             	add    esp,0x10
c0019373:	90                   	nop
c0019374:	83 c4 0c             	add    esp,0xc
c0019377:	c3                   	ret    

c0019378 <iso_kprintfd>:
c0019378:	83 ec 0c             	sub    esp,0xc
c001937b:	83 ec 08             	sub    esp,0x8
c001937e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019382:	68 3e 01 02 c0       	push   0xc002013e
c0019387:	e8 5e 16 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c001938c:	83 c4 10             	add    esp,0x10
c001938f:	90                   	nop
c0019390:	83 c4 0c             	add    esp,0xc
c0019393:	c3                   	ret    

c0019394 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019394:	b8 08 00 00 00       	mov    eax,0x8
c0019399:	c3                   	ret    

c001939a <ISO9660::getName()>:
c001939a:	b8 a8 17 02 c0       	mov    eax,0xc00217a8
c001939f:	c3                   	ret    

c00193a0 <ISO9660::closeDir(void*)>:
c00193a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00193a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00193a6:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00193a9:	90                   	nop

c00193aa <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00193aa:	b8 01 00 00 00       	mov    eax,0x1
c00193af:	c3                   	ret    

c00193b0 <ISO9660::unlink(char const*)>:
c00193b0:	b8 01 00 00 00       	mov    eax,0x1
c00193b5:	c3                   	ret    

c00193b6 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00193b6:	b8 03 00 00 00       	mov    eax,0x3
c00193bb:	c3                   	ret    

c00193bc <ISO9660::rename(char const*, char const*)>:
c00193bc:	b8 01 00 00 00       	mov    eax,0x1
c00193c1:	c3                   	ret    

c00193c2 <ISO9660::mkdir(char const*)>:
c00193c2:	b8 01 00 00 00       	mov    eax,0x1
c00193c7:	c3                   	ret    

c00193c8 <ISO9660::~ISO9660()>:
c00193c8:	83 ec 0c             	sub    esp,0xc
c00193cb:	ba e8 18 02 c0       	mov    edx,0xc00218e8
c00193d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193d4:	89 10                	mov    DWORD PTR [eax],edx
c00193d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193da:	83 ec 0c             	sub    esp,0xc
c00193dd:	50                   	push   eax
c00193de:	e8 4d 19 ff ff       	call   c000ad30 <Filesystem::~Filesystem()>
c00193e3:	83 c4 10             	add    esp,0x10
c00193e6:	90                   	nop
c00193e7:	83 c4 0c             	add    esp,0xc
c00193ea:	c3                   	ret    
c00193eb:	90                   	nop

c00193ec <ISO9660::~ISO9660()>:
c00193ec:	83 ec 0c             	sub    esp,0xc
c00193ef:	83 ec 0c             	sub    esp,0xc
c00193f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00193f6:	e8 cd ff ff ff       	call   c00193c8 <ISO9660::~ISO9660()>
c00193fb:	83 c4 10             	add    esp,0x10
c00193fe:	83 ec 08             	sub    esp,0x8
c0019401:	6a 08                	push   0x8
c0019403:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019407:	e8 b1 14 ff ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c001940c:	83 c4 10             	add    esp,0x10
c001940f:	83 c4 0c             	add    esp,0xc
c0019412:	c3                   	ret    
c0019413:	90                   	nop

c0019414 <ISO9660::exists(char const*)>:
c0019414:	83 ec 18             	sub    esp,0x18
c0019417:	68 c3 17 02 c0       	push   0xc00217c3
c001941c:	e8 f6 74 ff ff       	call   c0010917 <KePanic(char const*)>
c0019421:	31 c0                	xor    eax,eax
c0019423:	83 c4 1c             	add    esp,0x1c
c0019426:	c3                   	ret    
c0019427:	90                   	nop

c0019428 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0019428:	56                   	push   esi
c0019429:	53                   	push   ebx
c001942a:	53                   	push   ebx
c001942b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001942f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019433:	85 db                	test   ebx,ebx
c0019435:	0f 84 ca 00 00 00    	je     c0019505 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001943b:	85 f6                	test   esi,esi
c001943d:	0f 84 c2 00 00 00    	je     c0019505 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019443:	b8 03 00 00 00       	mov    eax,0x3
c0019448:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001944d:	0f 85 b7 00 00 00    	jne    c001950a <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019453:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019455:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c001945c:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c0019462:	74 1b                	je     c001947f <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0019464:	85 c0                	test   eax,eax
c0019466:	74 10                	je     c0019478 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0019468:	83 ec 0c             	sub    esp,0xc
c001946b:	68 e1 17 02 c0       	push   0xc00217e1
c0019470:	e8 a2 74 ff ff       	call   c0010917 <KePanic(char const*)>
c0019475:	83 c4 10             	add    esp,0x10
c0019478:	8a 03                	mov    al,BYTE PTR [ebx]
c001947a:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c001947f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019482:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019489:	85 c0                	test   eax,eax
c001948b:	74 09                	je     c0019496 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001948d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019494:	74 48                	je     c00194de <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c0019496:	83 ec 0c             	sub    esp,0xc
c0019499:	68 f1 17 02 c0       	push   0xc00217f1
c001949e:	e8 47 15 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c00194a3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00194a6:	83 c4 10             	add    esp,0x10
c00194a9:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00194b0:	85 c0                	test   eax,eax
c00194b2:	74 17                	je     c00194cb <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c00194b4:	83 ec 0c             	sub    esp,0xc
c00194b7:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00194be:	68 11 18 02 c0       	push   0xc0021811
c00194c3:	e8 22 15 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c00194c8:	83 c4 10             	add    esp,0x10
c00194cb:	83 ec 0c             	sub    esp,0xc
c00194ce:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00194d5:	50                   	push   eax
c00194d6:	e8 6b d5 fe ff       	call   c0006a46 <init_percd>
c00194db:	83 c4 10             	add    esp,0x10
c00194de:	83 c3 03             	add    ebx,0x3
c00194e1:	51                   	push   ecx
c00194e2:	51                   	push   ecx
c00194e3:	6a 00                	push   0x0
c00194e5:	53                   	push   ebx
c00194e6:	e8 22 d0 fe ff       	call   c000650d <iso_open>
c00194eb:	83 c4 10             	add    esp,0x10
c00194ee:	89 c2                	mov    edx,eax
c00194f0:	b8 01 00 00 00       	mov    eax,0x1
c00194f5:	83 fa ff             	cmp    edx,0xffffffff
c00194f8:	74 10                	je     c001950a <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00194fa:	83 c2 32             	add    edx,0x32
c00194fd:	31 c0                	xor    eax,eax
c00194ff:	01 d2                	add    edx,edx
c0019501:	89 16                	mov    DWORD PTR [esi],edx
c0019503:	eb 05                	jmp    c001950a <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019505:	b8 04 00 00 00       	mov    eax,0x4
c001950a:	5a                   	pop    edx
c001950b:	5b                   	pop    ebx
c001950c:	5e                   	pop    esi
c001950d:	c3                   	ret    

c001950e <ISO9660::read(void*, unsigned long, void*, int*)>:
c001950e:	53                   	push   ebx
c001950f:	83 ec 08             	sub    esp,0x8
c0019512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019516:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001951a:	85 c0                	test   eax,eax
c001951c:	74 2d                	je     c001954b <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001951e:	85 db                	test   ebx,ebx
c0019520:	74 29                	je     c001954b <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019522:	b9 02 00 00 00       	mov    ecx,0x2
c0019527:	52                   	push   edx
c0019528:	99                   	cdq    
c0019529:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001952d:	f7 f9                	idiv   ecx
c001952f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019533:	83 e8 32             	sub    eax,0x32
c0019536:	50                   	push   eax
c0019537:	e8 79 d0 fe ff       	call   c00065b5 <iso_read>
c001953c:	83 c4 10             	add    esp,0x10
c001953f:	89 03                	mov    DWORD PTR [ebx],eax
c0019541:	09 d0                	or     eax,edx
c0019543:	0f 94 c0             	sete   al
c0019546:	0f b6 c0             	movzx  eax,al
c0019549:	eb 05                	jmp    c0019550 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001954b:	b8 04 00 00 00       	mov    eax,0x4
c0019550:	83 c4 08             	add    esp,0x8
c0019553:	5b                   	pop    ebx
c0019554:	c3                   	ret    
c0019555:	90                   	nop

c0019556 <ISO9660::seek(void*, unsigned long long)>:
c0019556:	57                   	push   edi
c0019557:	56                   	push   esi
c0019558:	b8 04 00 00 00       	mov    eax,0x4
c001955d:	51                   	push   ecx
c001955e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019562:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019566:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001956a:	85 d2                	test   edx,edx
c001956c:	74 26                	je     c0019594 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001956e:	6a 00                	push   0x0
c0019570:	b9 02 00 00 00       	mov    ecx,0x2
c0019575:	57                   	push   edi
c0019576:	89 d0                	mov    eax,edx
c0019578:	56                   	push   esi
c0019579:	99                   	cdq    
c001957a:	f7 f9                	idiv   ecx
c001957c:	83 e8 32             	sub    eax,0x32
c001957f:	50                   	push   eax
c0019580:	e8 46 d1 fe ff       	call   c00066cb <iso_seek>
c0019585:	83 c4 10             	add    esp,0x10
c0019588:	31 f0                	xor    eax,esi
c001958a:	31 fa                	xor    edx,edi
c001958c:	09 d0                	or     eax,edx
c001958e:	0f 95 c0             	setne  al
c0019591:	0f b6 c0             	movzx  eax,al
c0019594:	5a                   	pop    edx
c0019595:	5e                   	pop    esi
c0019596:	5f                   	pop    edi
c0019597:	c3                   	ret    

c0019598 <ISO9660::tell(void*, unsigned long long*)>:
c0019598:	53                   	push   ebx
c0019599:	83 ec 08             	sub    esp,0x8
c001959c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00195a0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00195a4:	85 c0                	test   eax,eax
c00195a6:	74 24                	je     c00195cc <ISO9660::tell(void*, unsigned long long*)+0x34>
c00195a8:	85 db                	test   ebx,ebx
c00195aa:	74 20                	je     c00195cc <ISO9660::tell(void*, unsigned long long*)+0x34>
c00195ac:	83 ec 0c             	sub    esp,0xc
c00195af:	b9 02 00 00 00       	mov    ecx,0x2
c00195b4:	99                   	cdq    
c00195b5:	f7 f9                	idiv   ecx
c00195b7:	83 e8 32             	sub    eax,0x32
c00195ba:	50                   	push   eax
c00195bb:	e8 8f d1 fe ff       	call   c000674f <iso_tell>
c00195c0:	83 c4 10             	add    esp,0x10
c00195c3:	89 03                	mov    DWORD PTR [ebx],eax
c00195c5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00195c8:	31 c0                	xor    eax,eax
c00195ca:	eb 05                	jmp    c00195d1 <ISO9660::tell(void*, unsigned long long*)+0x39>
c00195cc:	b8 04 00 00 00       	mov    eax,0x4
c00195d1:	83 c4 08             	add    esp,0x8
c00195d4:	5b                   	pop    ebx
c00195d5:	c3                   	ret    

c00195d6 <ISO9660::stat(void*, unsigned long long*)>:
c00195d6:	53                   	push   ebx
c00195d7:	83 ec 14             	sub    esp,0x14
c00195da:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00195de:	68 35 18 02 c0       	push   0xc0021835
c00195e3:	e8 02 14 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c00195e8:	83 c4 10             	add    esp,0x10
c00195eb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00195f0:	74 2c                	je     c001961e <ISO9660::stat(void*, unsigned long long*)+0x48>
c00195f2:	85 db                	test   ebx,ebx
c00195f4:	74 28                	je     c001961e <ISO9660::stat(void*, unsigned long long*)+0x48>
c00195f6:	83 ec 0c             	sub    esp,0xc
c00195f9:	b9 02 00 00 00       	mov    ecx,0x2
c00195fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019602:	99                   	cdq    
c0019603:	f7 f9                	idiv   ecx
c0019605:	83 e8 32             	sub    eax,0x32
c0019608:	50                   	push   eax
c0019609:	e8 72 d1 fe ff       	call   c0006780 <iso_total>
c001960e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019615:	89 03                	mov    DWORD PTR [ebx],eax
c0019617:	83 c4 10             	add    esp,0x10
c001961a:	31 c0                	xor    eax,eax
c001961c:	eb 05                	jmp    c0019623 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001961e:	b8 04 00 00 00       	mov    eax,0x4
c0019623:	83 c4 08             	add    esp,0x8
c0019626:	5b                   	pop    ebx
c0019627:	c3                   	ret    

c0019628 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0019628:	55                   	push   ebp
c0019629:	57                   	push   edi
c001962a:	56                   	push   esi
c001962b:	53                   	push   ebx
c001962c:	83 ec 18             	sub    esp,0x18
c001962f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0019633:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0019637:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001963b:	68 3d 18 02 c0       	push   0xc002183d
c0019640:	e8 a5 13 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c0019645:	83 c4 10             	add    esp,0x10
c0019648:	85 ff                	test   edi,edi
c001964a:	0f 94 c0             	sete   al
c001964d:	85 f6                	test   esi,esi
c001964f:	0f 94 c2             	sete   dl
c0019652:	09 d0                	or     eax,edx
c0019654:	a8 01                	test   al,0x1
c0019656:	0f 85 dd 00 00 00    	jne    c0019739 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001965c:	85 db                	test   ebx,ebx
c001965e:	0f 84 d5 00 00 00    	je     c0019739 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0019664:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0019667:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001966d:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019674:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c001967b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001967d:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c0019683:	74 1b                	je     c00196a0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c0019685:	85 c0                	test   eax,eax
c0019687:	74 10                	je     c0019699 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c0019689:	83 ec 0c             	sub    esp,0xc
c001968c:	68 e1 17 02 c0       	push   0xc00217e1
c0019691:	e8 81 72 ff ff       	call   c0010917 <KePanic(char const*)>
c0019696:	83 c4 10             	add    esp,0x10
c0019699:	8a 03                	mov    al,BYTE PTR [ebx]
c001969b:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c00196a0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00196a3:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00196aa:	85 c0                	test   eax,eax
c00196ac:	74 09                	je     c00196b7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c00196ae:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00196b5:	74 51                	je     c0019708 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c00196b7:	83 ec 0c             	sub    esp,0xc
c00196ba:	68 45 18 02 c0       	push   0xc0021845
c00196bf:	e8 26 13 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c00196c4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00196c7:	83 c4 10             	add    esp,0x10
c00196ca:	83 3c 85 1c 73 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd8ce4],0x0
c00196d2:	74 21                	je     c00196f5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c00196d4:	83 ec 0c             	sub    esp,0xc
c00196d7:	68 65 18 02 c0       	push   0xc0021865
c00196dc:	e8 09 13 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c00196e1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00196e4:	83 c4 10             	add    esp,0x10
c00196e7:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00196ee:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00196f5:	83 ec 0c             	sub    esp,0xc
c00196f8:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00196ff:	50                   	push   eax
c0019700:	e8 41 d3 fe ff       	call   c0006a46 <init_percd>
c0019705:	83 c4 10             	add    esp,0x10
c0019708:	83 c3 03             	add    ebx,0x3
c001970b:	52                   	push   edx
c001970c:	52                   	push   edx
c001970d:	6a 00                	push   0x0
c001970f:	53                   	push   ebx
c0019710:	e8 f8 cd fe ff       	call   c000650d <iso_open>
c0019715:	83 c4 10             	add    esp,0x10
c0019718:	89 c5                	mov    ebp,eax
c001971a:	83 f8 ff             	cmp    eax,0xffffffff
c001971d:	75 21                	jne    c0019740 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001971f:	50                   	push   eax
c0019720:	50                   	push   eax
c0019721:	6a 01                	push   0x1
c0019723:	53                   	push   ebx
c0019724:	e8 e4 cd fe ff       	call   c000650d <iso_open>
c0019729:	83 c4 10             	add    esp,0x10
c001972c:	ba 02 00 00 00       	mov    edx,0x2
c0019731:	40                   	inc    eax
c0019732:	74 2b                	je     c001975f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019734:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0019737:	eb 24                	jmp    c001975d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c0019739:	ba 04 00 00 00       	mov    edx,0x4
c001973e:	eb 1f                	jmp    c001975f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019740:	83 ec 0c             	sub    esp,0xc
c0019743:	50                   	push   eax
c0019744:	e8 37 d0 fe ff       	call   c0006780 <iso_total>
c0019749:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019750:	89 07                	mov    DWORD PTR [edi],eax
c0019752:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019755:	e8 3d ce fe ff       	call   c0006597 <iso_close>
c001975a:	83 c4 10             	add    esp,0x10
c001975d:	31 d2                	xor    edx,edx
c001975f:	83 c4 0c             	add    esp,0xc
c0019762:	89 d0                	mov    eax,edx
c0019764:	5b                   	pop    ebx
c0019765:	5e                   	pop    esi
c0019766:	5f                   	pop    edi
c0019767:	5d                   	pop    ebp
c0019768:	c3                   	ret    
c0019769:	90                   	nop

c001976a <ISO9660::close(void*)>:
c001976a:	83 ec 0c             	sub    esp,0xc
c001976d:	b8 04 00 00 00       	mov    eax,0x4
c0019772:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019776:	85 d2                	test   edx,edx
c0019778:	74 1b                	je     c0019795 <ISO9660::close(void*)+0x2b>
c001977a:	83 ec 0c             	sub    esp,0xc
c001977d:	b9 02 00 00 00       	mov    ecx,0x2
c0019782:	89 d0                	mov    eax,edx
c0019784:	99                   	cdq    
c0019785:	f7 f9                	idiv   ecx
c0019787:	83 e8 32             	sub    eax,0x32
c001978a:	50                   	push   eax
c001978b:	e8 07 ce fe ff       	call   c0006597 <iso_close>
c0019790:	83 c4 10             	add    esp,0x10
c0019793:	31 c0                	xor    eax,eax
c0019795:	83 c4 0c             	add    esp,0xc
c0019798:	c3                   	ret    
c0019799:	90                   	nop

c001979a <ISO9660::openDir(char const*, void**)>:
c001979a:	56                   	push   esi
c001979b:	53                   	push   ebx
c001979c:	50                   	push   eax
c001979d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00197a1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00197a5:	85 db                	test   ebx,ebx
c00197a7:	0f 84 bd 00 00 00    	je     c001986a <ISO9660::openDir(char const*, void**)+0xd0>
c00197ad:	85 f6                	test   esi,esi
c00197af:	0f 84 b5 00 00 00    	je     c001986a <ISO9660::openDir(char const*, void**)+0xd0>
c00197b5:	8a 13                	mov    dl,BYTE PTR [ebx]
c00197b7:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00197be:	38 15 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,dl
c00197c4:	74 1b                	je     c00197e1 <ISO9660::openDir(char const*, void**)+0x47>
c00197c6:	85 c0                	test   eax,eax
c00197c8:	74 10                	je     c00197da <ISO9660::openDir(char const*, void**)+0x40>
c00197ca:	83 ec 0c             	sub    esp,0xc
c00197cd:	68 e1 17 02 c0       	push   0xc00217e1
c00197d2:	e8 40 71 ff ff       	call   c0010917 <KePanic(char const*)>
c00197d7:	83 c4 10             	add    esp,0x10
c00197da:	8a 03                	mov    al,BYTE PTR [ebx]
c00197dc:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c00197e1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00197e4:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00197eb:	85 c0                	test   eax,eax
c00197ed:	74 10                	je     c00197ff <ISO9660::openDir(char const*, void**)+0x65>
c00197ef:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00197f6:	74 1a                	je     c0019812 <ISO9660::openDir(char const*, void**)+0x78>
c00197f8:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00197ff:	83 ec 0c             	sub    esp,0xc
c0019802:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019809:	50                   	push   eax
c001980a:	e8 37 d2 fe ff       	call   c0006a46 <init_percd>
c001980f:	83 c4 10             	add    esp,0x10
c0019812:	83 c3 03             	add    ebx,0x3
c0019815:	50                   	push   eax
c0019816:	50                   	push   eax
c0019817:	6a 01                	push   0x1
c0019819:	53                   	push   ebx
c001981a:	e8 ee cc fe ff       	call   c000650d <iso_open>
c001981f:	83 c4 10             	add    esp,0x10
c0019822:	89 c3                	mov    ebx,eax
c0019824:	83 f8 ff             	cmp    eax,0xffffffff
c0019827:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001982c:	75 1c                	jne    c001984a <ISO9660::openDir(char const*, void**)+0xb0>
c001982e:	53                   	push   ebx
c001982f:	53                   	push   ebx
c0019830:	68 89 18 02 c0       	push   0xc0021889
c0019835:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001983b:	e8 50 f2 fe ff       	call   c0008a90 <VgaText::puts(char const*)>
c0019840:	83 c4 10             	add    esp,0x10
c0019843:	b8 01 00 00 00       	mov    eax,0x1
c0019848:	eb 25                	jmp    c001986f <ISO9660::openDir(char const*, void**)+0xd5>
c001984a:	01 db                	add    ebx,ebx
c001984c:	51                   	push   ecx
c001984d:	83 c3 65             	add    ebx,0x65
c0019850:	51                   	push   ecx
c0019851:	68 9c 18 02 c0       	push   0xc002189c
c0019856:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001985c:	e8 2f f2 fe ff       	call   c0008a90 <VgaText::puts(char const*)>
c0019861:	89 1e                	mov    DWORD PTR [esi],ebx
c0019863:	83 c4 10             	add    esp,0x10
c0019866:	31 c0                	xor    eax,eax
c0019868:	eb 05                	jmp    c001986f <ISO9660::openDir(char const*, void**)+0xd5>
c001986a:	b8 04 00 00 00       	mov    eax,0x4
c001986f:	5a                   	pop    edx
c0019870:	5b                   	pop    ebx
c0019871:	5e                   	pop    esi
c0019872:	c3                   	ret    
c0019873:	90                   	nop

c0019874 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0019874:	55                   	push   ebp
c0019875:	57                   	push   edi
c0019876:	56                   	push   esi
c0019877:	53                   	push   ebx
c0019878:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001987e:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0019885:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001988c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019894:	0f 84 e7 00 00 00    	je     c0019981 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001989a:	85 db                	test   ebx,ebx
c001989c:	0f 84 df 00 00 00    	je     c0019981 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c00198a2:	83 ec 0c             	sub    esp,0xc
c00198a5:	68 af 18 02 c0       	push   0xc00218af
c00198aa:	e8 3b 11 ff ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c00198af:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00198b6:	b9 02 00 00 00       	mov    ecx,0x2
c00198bb:	99                   	cdq    
c00198bc:	f7 f9                	idiv   ecx
c00198be:	83 e8 32             	sub    eax,0x32
c00198c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00198c4:	e8 09 cf fe ff       	call   c00067d2 <iso_readdir>
c00198c9:	83 c4 10             	add    esp,0x10
c00198cc:	89 c6                	mov    esi,eax
c00198ce:	85 c0                	test   eax,eax
c00198d0:	75 37                	jne    c0019909 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c00198d2:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00198d7:	56                   	push   esi
c00198d8:	56                   	push   esi
c00198d9:	68 ba 18 02 c0       	push   0xc00218ba
c00198de:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00198e4:	e8 a7 f1 fe ff       	call   c0008a90 <VgaText::puts(char const*)>
c00198e9:	83 c4 0c             	add    esp,0xc
c00198ec:	68 10 01 00 00       	push   0x110
c00198f1:	6a 00                	push   0x0
c00198f3:	57                   	push   edi
c00198f4:	e8 f7 6b fe ff       	call   c00004f0 <memset>
c00198f9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00198ff:	83 c4 10             	add    esp,0x10
c0019902:	b8 01 00 00 00       	mov    eax,0x1
c0019907:	eb 7d                	jmp    c0019986 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0019909:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001990f:	8d 68 08             	lea    ebp,[eax+0x8]
c0019912:	83 ec 0c             	sub    esp,0xc
c0019915:	55                   	push   ebp
c0019916:	e8 55 6c fe ff       	call   c0000570 <strlen>
c001991b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019923:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019927:	83 c4 10             	add    esp,0x10
c001992a:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001992e:	75 0a                	jne    c001993a <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0019930:	b8 02 00 00 00       	mov    eax,0x2
c0019935:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0019938:	74 05                	je     c001993f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001993a:	b8 01 00 00 00       	mov    eax,0x1
c001993f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019943:	50                   	push   eax
c0019944:	50                   	push   eax
c0019945:	55                   	push   ebp
c0019946:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001994a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001994e:	50                   	push   eax
c001994f:	e8 ec 6c fe ff       	call   c0000640 <strcpy>
c0019954:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001995b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001995d:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0019963:	5a                   	pop    edx
c0019964:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019969:	59                   	pop    ecx
c001996a:	68 cd 18 02 c0       	push   0xc00218cd
c001996f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019975:	e8 16 f1 fe ff       	call   c0008a90 <VgaText::puts(char const*)>
c001997a:	83 c4 10             	add    esp,0x10
c001997d:	31 c0                	xor    eax,eax
c001997f:	eb 05                	jmp    c0019986 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0019981:	b8 04 00 00 00       	mov    eax,0x4
c0019986:	81 c4 1c 01 00 00    	add    esp,0x11c
c001998c:	5b                   	pop    ebx
c001998d:	5e                   	pop    esi
c001998e:	5f                   	pop    edi
c001998f:	5d                   	pop    ebp
c0019990:	c3                   	ret    

c0019991 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0019991:	57                   	push   edi
c0019992:	56                   	push   esi
c0019993:	53                   	push   ebx
c0019994:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019998:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001999c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00199a0:	39 35 24 83 02 c0    	cmp    DWORD PTR ds:0xc0028324,esi
c00199a6:	0f be cb             	movsx  ecx,bl
c00199a9:	75 0b                	jne    c00199b6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c00199ab:	0f be 05 24 24 02 c0 	movsx  eax,BYTE PTR ds:0xc0022424
c00199b2:	39 c8                	cmp    eax,ecx
c00199b4:	74 47                	je     c00199fd <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c00199b6:	83 ec 0c             	sub    esp,0xc
c00199b9:	31 d2                	xor    edx,edx
c00199bb:	68 40 83 02 c0       	push   0xc0028340
c00199c0:	6a 01                	push   0x1
c00199c2:	52                   	push   edx
c00199c3:	56                   	push   esi
c00199c4:	ff 34 8d 1c 73 02 c0 	push   DWORD PTR [ecx*4-0x3ffd8ce4]
c00199cb:	e8 30 38 ff ff       	call   c000d200 <LogicalDisk::read(unsigned long long, int, void*)>
c00199d0:	83 c4 20             	add    esp,0x20
c00199d3:	85 c0                	test   eax,eax
c00199d5:	75 0e                	jne    c00199e5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c00199d7:	89 35 24 83 02 c0    	mov    DWORD PTR ds:0xc0028324,esi
c00199dd:	88 1d 24 24 02 c0    	mov    BYTE PTR ds:0xc0022424,bl
c00199e3:	eb 18                	jmp    c00199fd <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c00199e5:	50                   	push   eax
c00199e6:	68 00 08 00 00       	push   0x800
c00199eb:	6a 00                	push   0x0
c00199ed:	57                   	push   edi
c00199ee:	e8 fd 6a fe ff       	call   c00004f0 <memset>
c00199f3:	83 c4 10             	add    esp,0x10
c00199f6:	b8 01 00 00 00       	mov    eax,0x1
c00199fb:	eb 0e                	jmp    c0019a0b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c00199fd:	be 40 83 02 c0       	mov    esi,0xc0028340
c0019a02:	b9 00 08 00 00       	mov    ecx,0x800
c0019a07:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019a09:	31 c0                	xor    eax,eax
c0019a0b:	5b                   	pop    ebx
c0019a0c:	5e                   	pop    esi
c0019a0d:	5f                   	pop    edi
c0019a0e:	c3                   	ret    
c0019a0f:	90                   	nop

c0019a10 <ISO9660::tryMount(LogicalDisk*, int)>:
c0019a10:	53                   	push   ebx
c0019a11:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0019a17:	c7 05 24 83 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0028324,0xdeadbeef
c0019a21:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c0019a28:	8d 58 41             	lea    ebx,[eax+0x41]
c0019a2b:	0f be db             	movsx  ebx,bl
c0019a2e:	53                   	push   ebx
c0019a2f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019a33:	50                   	push   eax
c0019a34:	6a 10                	push   0x10
c0019a36:	e8 56 ff ff ff       	call   c0019991 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019a3b:	83 c4 10             	add    esp,0x10
c0019a3e:	31 d2                	xor    edx,edx
c0019a40:	85 c0                	test   eax,eax
c0019a42:	75 33                	jne    c0019a77 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019a44:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019a49:	75 2c                	jne    c0019a77 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019a4b:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0019a50:	75 25                	jne    c0019a77 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019a52:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0019a57:	75 1e                	jne    c0019a77 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019a59:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0019a5e:	75 17                	jne    c0019a77 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019a60:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0019a65:	75 10                	jne    c0019a77 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019a67:	83 ec 0c             	sub    esp,0xc
c0019a6a:	53                   	push   ebx
c0019a6b:	e8 d6 cf fe ff       	call   c0006a46 <init_percd>
c0019a70:	83 c4 10             	add    esp,0x10
c0019a73:	40                   	inc    eax
c0019a74:	0f 95 c2             	setne  dl
c0019a77:	88 d0                	mov    al,dl
c0019a79:	81 c4 08 08 00 00    	add    esp,0x808
c0019a7f:	5b                   	pop    ebx
c0019a80:	c3                   	ret    
c0019a81:	90                   	nop

c0019a82 <ISO9660::ISO9660()>:
c0019a82:	83 ec 0c             	sub    esp,0xc
c0019a85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a89:	83 ec 0c             	sub    esp,0xc
c0019a8c:	50                   	push   eax
c0019a8d:	e8 7a 12 ff ff       	call   c000ad0c <Filesystem::Filesystem()>
c0019a92:	83 c4 10             	add    esp,0x10
c0019a95:	ba e8 18 02 c0       	mov    edx,0xc00218e8
c0019a9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a9e:	89 10                	mov    DWORD PTR [eax],edx
c0019aa0:	e8 b3 d0 fe ff       	call   c0006b58 <fs_iso9660_init>
c0019aa5:	90                   	nop
c0019aa6:	83 c4 0c             	add    esp,0xc
c0019aa9:	c3                   	ret    

c0019aaa <SoundCard::beginPlayback()>:
c0019aaa:	c7 44 24 04 48 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021948
c0019ab2:	e9 60 6e ff ff       	jmp    c0010917 <KePanic(char const*)>
c0019ab7:	90                   	nop

c0019ab8 <SoundCard::stopPlayback()>:
c0019ab8:	c7 44 24 04 48 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021948
c0019ac0:	e9 52 6e ff ff       	jmp    c0010917 <KePanic(char const*)>
c0019ac5:	90                   	nop

c0019ac6 <SoundCard::SoundCard(char const*)>:
c0019ac6:	83 ec 1c             	sub    esp,0x1c
c0019ac9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019acd:	83 ec 08             	sub    esp,0x8
c0019ad0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019ad4:	50                   	push   eax
c0019ad5:	e8 dc 24 ff ff       	call   c000bfb6 <Device::Device(char const*)>
c0019ada:	83 c4 10             	add    esp,0x10
c0019add:	ba 94 19 02 c0       	mov    edx,0xc0021994
c0019ae2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ae6:	89 10                	mov    DWORD PTR [eax],edx
c0019ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019aec:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019af3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019af7:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0019b01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b05:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0019b0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b13:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0019b1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b21:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0019b2b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019b33:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0019b38:	7f 1a                	jg     c0019b54 <SoundCard::SoundCard(char const*)+0x8e>
c0019b3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b3e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019b42:	83 c2 54             	add    edx,0x54
c0019b45:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0019b4d:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019b52:	eb df                	jmp    c0019b33 <SoundCard::SoundCard(char const*)+0x6d>
c0019b54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b58:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019b5f:	90                   	nop
c0019b60:	83 c4 1c             	add    esp,0x1c
c0019b63:	c3                   	ret    

c0019b64 <SoundCard::~SoundCard()>:
c0019b64:	83 ec 0c             	sub    esp,0xc
c0019b67:	ba 94 19 02 c0       	mov    edx,0xc0021994
c0019b6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b70:	89 10                	mov    DWORD PTR [eax],edx
c0019b72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b76:	83 ec 0c             	sub    esp,0xc
c0019b79:	50                   	push   eax
c0019b7a:	e8 a1 21 ff ff       	call   c000bd20 <Device::~Device()>
c0019b7f:	83 c4 10             	add    esp,0x10
c0019b82:	90                   	nop
c0019b83:	83 c4 0c             	add    esp,0xc
c0019b86:	c3                   	ret    
c0019b87:	90                   	nop

c0019b88 <SoundCard::~SoundCard()>:
c0019b88:	83 ec 0c             	sub    esp,0xc
c0019b8b:	83 ec 0c             	sub    esp,0xc
c0019b8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019b92:	e8 cd ff ff ff       	call   c0019b64 <SoundCard::~SoundCard()>
c0019b97:	83 c4 10             	add    esp,0x10
c0019b9a:	83 ec 08             	sub    esp,0x8
c0019b9d:	68 e8 01 00 00       	push   0x1e8
c0019ba2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ba6:	e8 12 0d ff ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c0019bab:	83 c4 10             	add    esp,0x10
c0019bae:	83 c4 0c             	add    esp,0xc
c0019bb1:	c3                   	ret    

c0019bb2 <SoundCard::configureRates(int, int, int)>:
c0019bb2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019bb6:	31 c0                	xor    eax,eax
c0019bb8:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0019bbf:	75 20                	jne    c0019be1 <SoundCard::configureRates(int, int, int)+0x2f>
c0019bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bc5:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0019bcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019bcf:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0019bd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bd9:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0019bdf:	b0 01                	mov    al,0x1
c0019be1:	c3                   	ret    

c0019be2 <SoundCard::getSamples16(int, short*)>:
c0019be2:	55                   	push   ebp
c0019be3:	57                   	push   edi
c0019be4:	31 ff                	xor    edi,edi
c0019be6:	56                   	push   esi
c0019be7:	53                   	push   ebx
c0019be8:	31 db                	xor    ebx,ebx
c0019bea:	83 ec 10             	sub    esp,0x10
c0019bed:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019bf1:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019bf5:	8d 04 36             	lea    eax,[esi+esi*1]
c0019bf8:	50                   	push   eax
c0019bf9:	6a 00                	push   0x0
c0019bfb:	55                   	push   ebp
c0019bfc:	e8 ef 68 fe ff       	call   c00004f0 <memset>
c0019c01:	83 c4 10             	add    esp,0x10
c0019c04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c08:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0019c0f:	85 c0                	test   eax,eax
c0019c11:	74 1b                	je     c0019c2e <SoundCard::getSamples16(int, short*)+0x4c>
c0019c13:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019c17:	75 15                	jne    c0019c2e <SoundCard::getSamples16(int, short*)+0x4c>
c0019c19:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019c1d:	55                   	push   ebp
c0019c1e:	56                   	push   esi
c0019c1f:	50                   	push   eax
c0019c20:	e8 f3 02 00 00       	call   c0019f18 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0019c25:	83 c4 10             	add    esp,0x10
c0019c28:	39 c7                	cmp    edi,eax
c0019c2a:	7d 02                	jge    c0019c2e <SoundCard::getSamples16(int, short*)+0x4c>
c0019c2c:	89 c7                	mov    edi,eax
c0019c2e:	43                   	inc    ebx
c0019c2f:	83 fb 20             	cmp    ebx,0x20
c0019c32:	75 d0                	jne    c0019c04 <SoundCard::getSamples16(int, short*)+0x22>
c0019c34:	83 c4 0c             	add    esp,0xc
c0019c37:	89 f8                	mov    eax,edi
c0019c39:	5b                   	pop    ebx
c0019c3a:	5e                   	pop    esi
c0019c3b:	5f                   	pop    edi
c0019c3c:	5d                   	pop    ebp
c0019c3d:	c3                   	ret    

c0019c3e <SoundCard::getSamples32(int, int*)>:
c0019c3e:	55                   	push   ebp
c0019c3f:	57                   	push   edi
c0019c40:	31 ff                	xor    edi,edi
c0019c42:	56                   	push   esi
c0019c43:	31 f6                	xor    esi,esi
c0019c45:	53                   	push   ebx
c0019c46:	83 ec 10             	sub    esp,0x10
c0019c49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019c4d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0019c51:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019c55:	c1 e0 02             	shl    eax,0x2
c0019c58:	50                   	push   eax
c0019c59:	6a 00                	push   0x0
c0019c5b:	55                   	push   ebp
c0019c5c:	e8 8f 68 fe ff       	call   c00004f0 <memset>
c0019c61:	83 c4 10             	add    esp,0x10
c0019c64:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0019c6b:	85 c0                	test   eax,eax
c0019c6d:	74 1b                	je     c0019c8a <SoundCard::getSamples32(int, int*)+0x4c>
c0019c6f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019c73:	75 15                	jne    c0019c8a <SoundCard::getSamples32(int, int*)+0x4c>
c0019c75:	53                   	push   ebx
c0019c76:	55                   	push   ebp
c0019c77:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019c7b:	50                   	push   eax
c0019c7c:	e8 63 03 00 00       	call   c0019fe4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0019c81:	83 c4 10             	add    esp,0x10
c0019c84:	39 c6                	cmp    esi,eax
c0019c86:	7d 02                	jge    c0019c8a <SoundCard::getSamples32(int, int*)+0x4c>
c0019c88:	89 c6                	mov    esi,eax
c0019c8a:	47                   	inc    edi
c0019c8b:	83 ff 20             	cmp    edi,0x20
c0019c8e:	75 d4                	jne    c0019c64 <SoundCard::getSamples32(int, int*)+0x26>
c0019c90:	85 f6                	test   esi,esi
c0019c92:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0019c99:	75 0f                	jne    c0019caa <SoundCard::getSamples32(int, int*)+0x6c>
c0019c9b:	85 c0                	test   eax,eax
c0019c9d:	74 1b                	je     c0019cba <SoundCard::getSamples32(int, int*)+0x7c>
c0019c9f:	83 ec 0c             	sub    esp,0xc
c0019ca2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ca4:	53                   	push   ebx
c0019ca5:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0019ca8:	eb 0d                	jmp    c0019cb7 <SoundCard::getSamples32(int, int*)+0x79>
c0019caa:	85 c0                	test   eax,eax
c0019cac:	75 0c                	jne    c0019cba <SoundCard::getSamples32(int, int*)+0x7c>
c0019cae:	83 ec 0c             	sub    esp,0xc
c0019cb1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019cb3:	53                   	push   ebx
c0019cb4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0019cb7:	83 c4 10             	add    esp,0x10
c0019cba:	83 c4 0c             	add    esp,0xc
c0019cbd:	89 f0                	mov    eax,esi
c0019cbf:	5b                   	pop    ebx
c0019cc0:	5e                   	pop    esi
c0019cc1:	5f                   	pop    edi
c0019cc2:	5d                   	pop    ebp
c0019cc3:	c3                   	ret    

c0019cc4 <SoundCard::addChannel(SoundPort*)>:
c0019cc4:	83 ec 0c             	sub    esp,0xc
c0019cc7:	31 c0                	xor    eax,eax
c0019cc9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019ccd:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0019cd5:	74 1b                	je     c0019cf2 <SoundCard::addChannel(SoundPort*)+0x2e>
c0019cd7:	40                   	inc    eax
c0019cd8:	83 f8 20             	cmp    eax,0x20
c0019cdb:	75 f0                	jne    c0019ccd <SoundCard::addChannel(SoundPort*)+0x9>
c0019cdd:	83 ec 0c             	sub    esp,0xc
c0019ce0:	68 6d 19 02 c0       	push   0xc002196d
c0019ce5:	e8 2d 6c ff ff       	call   c0010917 <KePanic(char const*)>
c0019cea:	83 c4 10             	add    esp,0x10
c0019ced:	83 c8 ff             	or     eax,0xffffffff
c0019cf0:	eb 0b                	jmp    c0019cfd <SoundCard::addChannel(SoundPort*)+0x39>
c0019cf2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019cf6:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0019cfd:	83 c4 0c             	add    esp,0xc
c0019d00:	c3                   	ret    
c0019d01:	90                   	nop

c0019d02 <SoundCard::removeChannel(int)>:
c0019d02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019d0a:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0019d15:	c3                   	ret    
c0019d16:	66 90                	xchg   ax,ax

c0019d18 <SoundPort::SoundPort(int, int, int, int)>:
c0019d18:	83 ec 0c             	sub    esp,0xc
c0019d1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d1f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d2a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d32:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019d36:	89 10                	mov    DWORD PTR [eax],edx
c0019d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d3c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019d40:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0019d43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d47:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019d4b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019d4e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0019d53:	75 13                	jne    c0019d68 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0019d55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d59:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d5b:	05 a0 0f 00 00       	add    eax,0xfa0
c0019d60:	01 c0                	add    eax,eax
c0019d62:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019d66:	66 90                	xchg   ax,ax
c0019d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d6c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019d70:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0019d73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d77:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0019d7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d82:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019d85:	c1 e0 02             	shl    eax,0x2
c0019d88:	83 ec 0c             	sub    esp,0xc
c0019d8b:	50                   	push   eax
c0019d8c:	e8 1d dd fe ff       	call   c0007aae <malloc>
c0019d91:	83 c4 10             	add    esp,0x10
c0019d94:	89 c2                	mov    edx,eax
c0019d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d9a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0019d9d:	90                   	nop
c0019d9e:	83 c4 0c             	add    esp,0xc
c0019da1:	c3                   	ret    
c0019da2:	66 90                	xchg   ax,ax

c0019da4 <SoundPort::~SoundPort()>:
c0019da4:	83 ec 0c             	sub    esp,0xc
c0019da7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019dab:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019dae:	85 c0                	test   eax,eax
c0019db0:	74 1e                	je     c0019dd0 <SoundPort::~SoundPort()+0x2c>
c0019db2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019db6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019db9:	83 ec 0c             	sub    esp,0xc
c0019dbc:	50                   	push   eax
c0019dbd:	e8 fc dc fe ff       	call   c0007abe <free>
c0019dc2:	83 c4 10             	add    esp,0x10
c0019dc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019dc9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019dd0:	90                   	nop
c0019dd1:	83 c4 0c             	add    esp,0xc
c0019dd4:	c3                   	ret    
c0019dd5:	90                   	nop
c0019dd6:	66 90                	xchg   ax,ax

c0019dd8 <SoundPort::unpause()>:
c0019dd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ddc:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0019de0:	c3                   	ret    
c0019de1:	90                   	nop
c0019de2:	66 90                	xchg   ax,ax

c0019de4 <SoundPort::pause()>:
c0019de4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019de8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019dec:	c3                   	ret    
c0019ded:	90                   	nop
c0019dee:	66 90                	xchg   ax,ax

c0019df0 <SoundPort::getBufferUsed()>:
c0019df0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019df4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019df7:	c3                   	ret    

c0019df8 <SoundPort::getBufferSize()>:
c0019df8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dfc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019dff:	c3                   	ret    

c0019e00 <SoundPort::buffer16(short*, int)>:
c0019e00:	55                   	push   ebp
c0019e01:	57                   	push   edi
c0019e02:	56                   	push   esi
c0019e03:	53                   	push   ebx
c0019e04:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019e08:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0019e0c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0019e0f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0019e12:	74 68                	je     c0019e7c <SoundPort::buffer16(short*, int)+0x7c>
c0019e14:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019e18:	85 c9                	test   ecx,ecx
c0019e1a:	7e 60                	jle    c0019e7c <SoundPort::buffer16(short*, int)+0x7c>
c0019e1c:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0019e20:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019e23:	c1 e1 0f             	shl    ecx,0xf
c0019e26:	8d 70 01             	lea    esi,[eax+0x1]
c0019e29:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019e2c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0019e2f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e32:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019e35:	74 4d                	je     c0019e84 <SoundPort::buffer16(short*, int)+0x84>
c0019e37:	31 f6                	xor    esi,esi
c0019e39:	eb 21                	jmp    c0019e5c <SoundPort::buffer16(short*, int)+0x5c>
c0019e3b:	90                   	nop
c0019e3c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0019e41:	8d 79 01             	lea    edi,[ecx+0x1]
c0019e44:	c1 e3 0f             	shl    ebx,0xf
c0019e47:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0019e4a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0019e4d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0019e50:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e53:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019e56:	74 1c                	je     c0019e74 <SoundPort::buffer16(short*, int)+0x74>
c0019e58:	89 c6                	mov    esi,eax
c0019e5a:	66 90                	xchg   ax,ax
c0019e5c:	8d 46 01             	lea    eax,[esi+0x1]
c0019e5f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0019e63:	75 d7                	jne    c0019e3c <SoundPort::buffer16(short*, int)+0x3c>
c0019e65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e69:	8d 76 00             	lea    esi,[esi+0x0]
c0019e6c:	5b                   	pop    ebx
c0019e6d:	5e                   	pop    esi
c0019e6e:	5f                   	pop    edi
c0019e6f:	5d                   	pop    ebp
c0019e70:	c3                   	ret    
c0019e71:	8d 76 00             	lea    esi,[esi+0x0]
c0019e74:	5b                   	pop    ebx
c0019e75:	8d 46 02             	lea    eax,[esi+0x2]
c0019e78:	5e                   	pop    esi
c0019e79:	5f                   	pop    edi
c0019e7a:	5d                   	pop    ebp
c0019e7b:	c3                   	ret    
c0019e7c:	5b                   	pop    ebx
c0019e7d:	31 c0                	xor    eax,eax
c0019e7f:	5e                   	pop    esi
c0019e80:	5f                   	pop    edi
c0019e81:	5d                   	pop    ebp
c0019e82:	c3                   	ret    
c0019e83:	90                   	nop
c0019e84:	b8 01 00 00 00       	mov    eax,0x1
c0019e89:	eb e1                	jmp    c0019e6c <SoundPort::buffer16(short*, int)+0x6c>
c0019e8b:	90                   	nop

c0019e8c <SoundPort::buffer32(int*, int)>:
c0019e8c:	55                   	push   ebp
c0019e8d:	57                   	push   edi
c0019e8e:	56                   	push   esi
c0019e8f:	53                   	push   ebx
c0019e90:	83 ec 04             	sub    esp,0x4
c0019e93:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019e97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e9b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e9e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019ea2:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ea5:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019ea8:	74 5a                	je     c0019f04 <SoundPort::buffer32(int*, int)+0x78>
c0019eaa:	85 c0                	test   eax,eax
c0019eac:	7e 56                	jle    c0019f04 <SoundPort::buffer32(int*, int)+0x78>
c0019eae:	8d 71 01             	lea    esi,[ecx+0x1]
c0019eb1:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019eb4:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019eb7:	8b 37                	mov    esi,DWORD PTR [edi]
c0019eb9:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0019ebc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019ebf:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019ec2:	74 4c                	je     c0019f10 <SoundPort::buffer32(int*, int)+0x84>
c0019ec4:	31 f6                	xor    esi,esi
c0019ec6:	eb 1c                	jmp    c0019ee4 <SoundPort::buffer32(int*, int)+0x58>
c0019ec8:	8d 69 01             	lea    ebp,[ecx+0x1]
c0019ecb:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0019ece:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0019ed1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0019ed4:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0019ed8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019edb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019ede:	74 18                	je     c0019ef8 <SoundPort::buffer32(int*, int)+0x6c>
c0019ee0:	89 de                	mov    esi,ebx
c0019ee2:	66 90                	xchg   ax,ax
c0019ee4:	8d 5e 01             	lea    ebx,[esi+0x1]
c0019ee7:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0019eea:	75 dc                	jne    c0019ec8 <SoundPort::buffer32(int*, int)+0x3c>
c0019eec:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019eef:	90                   	nop
c0019ef0:	83 c4 04             	add    esp,0x4
c0019ef3:	5b                   	pop    ebx
c0019ef4:	5e                   	pop    esi
c0019ef5:	5f                   	pop    edi
c0019ef6:	5d                   	pop    ebp
c0019ef7:	c3                   	ret    
c0019ef8:	83 c4 04             	add    esp,0x4
c0019efb:	8d 46 02             	lea    eax,[esi+0x2]
c0019efe:	5b                   	pop    ebx
c0019eff:	5e                   	pop    esi
c0019f00:	5f                   	pop    edi
c0019f01:	5d                   	pop    ebp
c0019f02:	c3                   	ret    
c0019f03:	90                   	nop
c0019f04:	83 c4 04             	add    esp,0x4
c0019f07:	31 c0                	xor    eax,eax
c0019f09:	5b                   	pop    ebx
c0019f0a:	5e                   	pop    esi
c0019f0b:	5f                   	pop    edi
c0019f0c:	5d                   	pop    ebp
c0019f0d:	c3                   	ret    
c0019f0e:	66 90                	xchg   ax,ax
c0019f10:	b8 01 00 00 00       	mov    eax,0x1
c0019f15:	eb d9                	jmp    c0019ef0 <SoundPort::buffer32(int*, int)+0x64>
c0019f17:	90                   	nop

c0019f18 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0019f18:	57                   	push   edi
c0019f19:	56                   	push   esi
c0019f1a:	53                   	push   ebx
c0019f1b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f1f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0019f23:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0019f29:	39 03                	cmp    DWORD PTR [ebx],eax
c0019f2b:	74 13                	je     c0019f40 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0019f2d:	83 ec 0c             	sub    esp,0xc
c0019f30:	68 c0 19 02 c0       	push   0xc00219c0
c0019f35:	e8 dd 69 ff ff       	call   c0010917 <KePanic(char const*)>
c0019f3a:	83 c4 10             	add    esp,0x10
c0019f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0019f40:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0019f46:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019f49:	74 11                	je     c0019f5c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0019f4b:	83 ec 0c             	sub    esp,0xc
c0019f4e:	68 ff 19 02 c0       	push   0xc00219ff
c0019f53:	e8 bf 69 ff ff       	call   c0010917 <KePanic(char const*)>
c0019f58:	83 c4 10             	add    esp,0x10
c0019f5b:	90                   	nop
c0019f5c:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0019f62:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019f65:	74 11                	je     c0019f78 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0019f67:	83 ec 0c             	sub    esp,0xc
c0019f6a:	68 ff 19 02 c0       	push   0xc00219ff
c0019f6f:	e8 a3 69 ff ff       	call   c0010917 <KePanic(char const*)>
c0019f74:	83 c4 10             	add    esp,0x10
c0019f77:	90                   	nop
c0019f78:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0019f7b:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0019f7f:	7e 07                	jle    c0019f88 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0019f81:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019f85:	8d 76 00             	lea    esi,[esi+0x0]
c0019f88:	85 f6                	test   esi,esi
c0019f8a:	7e 2c                	jle    c0019fb8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0019f8c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019f90:	8d 3c 36             	lea    edi,[esi+esi*1]
c0019f93:	31 c9                	xor    ecx,ecx
c0019f95:	01 d7                	add    edi,edx
c0019f97:	90                   	nop
c0019f98:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0019f9b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0019f9e:	85 c0                	test   eax,eax
c0019fa0:	79 06                	jns    c0019fa8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0019fa2:	05 ff 7f 00 00       	add    eax,0x7fff
c0019fa7:	90                   	nop
c0019fa8:	c1 f8 0f             	sar    eax,0xf
c0019fab:	83 c1 04             	add    ecx,0x4
c0019fae:	66 01 02             	add    WORD PTR [edx],ax
c0019fb1:	83 c2 02             	add    edx,0x2
c0019fb4:	39 d7                	cmp    edi,edx
c0019fb6:	75 e0                	jne    c0019f98 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0019fb8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019fbb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019fbe:	83 ec 04             	sub    esp,0x4
c0019fc1:	29 f0                	sub    eax,esi
c0019fc3:	c1 e0 02             	shl    eax,0x2
c0019fc6:	50                   	push   eax
c0019fc7:	8d 04 b2             	lea    eax,[edx+esi*4]
c0019fca:	50                   	push   eax
c0019fcb:	52                   	push   edx
c0019fcc:	e8 ff 63 fe ff       	call   c00003d0 <memmove>
c0019fd1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019fd4:	83 c4 10             	add    esp,0x10
c0019fd7:	29 f0                	sub    eax,esi
c0019fd9:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019fdc:	89 f0                	mov    eax,esi
c0019fde:	5b                   	pop    ebx
c0019fdf:	5e                   	pop    esi
c0019fe0:	5f                   	pop    edi
c0019fe1:	c3                   	ret    
c0019fe2:	66 90                	xchg   ax,ax

c0019fe4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0019fe4:	57                   	push   edi
c0019fe5:	56                   	push   esi
c0019fe6:	53                   	push   ebx
c0019fe7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019feb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019fef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019ff3:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0019ff9:	39 06                	cmp    DWORD PTR [esi],eax
c0019ffb:	74 13                	je     c001a010 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0019ffd:	83 ec 0c             	sub    esp,0xc
c001a000:	68 e0 19 02 c0       	push   0xc00219e0
c001a005:	e8 0d 69 ff ff       	call   c0010917 <KePanic(char const*)>
c001a00a:	83 c4 10             	add    esp,0x10
c001a00d:	8d 76 00             	lea    esi,[esi+0x0]
c001a010:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001a016:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001a019:	74 11                	je     c001a02c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001a01b:	83 ec 0c             	sub    esp,0xc
c001a01e:	68 1b 1a 02 c0       	push   0xc0021a1b
c001a023:	e8 ef 68 ff ff       	call   c0010917 <KePanic(char const*)>
c001a028:	83 c4 10             	add    esp,0x10
c001a02b:	90                   	nop
c001a02c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001a032:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001a035:	74 11                	je     c001a048 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001a037:	83 ec 0c             	sub    esp,0xc
c001a03a:	68 1b 1a 02 c0       	push   0xc0021a1b
c001a03f:	e8 d3 68 ff ff       	call   c0010917 <KePanic(char const*)>
c001a044:	83 c4 10             	add    esp,0x10
c001a047:	90                   	nop
c001a048:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001a04b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001a04f:	7e 07                	jle    c001a058 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001a051:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a055:	8d 76 00             	lea    esi,[esi+0x0]
c001a058:	85 ff                	test   edi,edi
c001a05a:	7e 1c                	jle    c001a078 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001a05c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001a063:	31 c0                	xor    eax,eax
c001a065:	8d 76 00             	lea    esi,[esi+0x0]
c001a068:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a06b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001a06e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001a071:	83 c0 04             	add    eax,0x4
c001a074:	39 c1                	cmp    ecx,eax
c001a076:	75 f0                	jne    c001a068 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001a078:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a07b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a07e:	83 ec 04             	sub    esp,0x4
c001a081:	29 f8                	sub    eax,edi
c001a083:	c1 e0 02             	shl    eax,0x2
c001a086:	50                   	push   eax
c001a087:	8d 04 ba             	lea    eax,[edx+edi*4]
c001a08a:	50                   	push   eax
c001a08b:	52                   	push   edx
c001a08c:	e8 3f 63 fe ff       	call   c00003d0 <memmove>
c001a091:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a094:	83 c4 10             	add    esp,0x10
c001a097:	29 f8                	sub    eax,edi
c001a099:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001a09c:	89 f8                	mov    eax,edi
c001a09e:	5b                   	pop    ebx
c001a09f:	5e                   	pop    esi
c001a0a0:	5f                   	pop    edi
c001a0a1:	c3                   	ret    

c001a0a2 <PCI::open(int, int, void*)>:
c001a0a2:	83 ec 18             	sub    esp,0x18
c001a0a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a0a9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a0ad:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001a0b3:	8b 10                	mov    edx,DWORD PTR [eax]
c001a0b5:	50                   	push   eax
c001a0b6:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001a0b9:	31 c0                	xor    eax,eax
c001a0bb:	83 c4 1c             	add    esp,0x1c
c001a0be:	c3                   	ret    
c001a0bf:	90                   	nop

c001a0c0 <PCI::close(int, int, void*)>:
c001a0c0:	31 c0                	xor    eax,eax
c001a0c2:	c3                   	ret    
c001a0c3:	90                   	nop

c001a0c4 <PCI::PCI()>:
c001a0c4:	83 ec 0c             	sub    esp,0xc
c001a0c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0cb:	83 ec 08             	sub    esp,0x8
c001a0ce:	68 37 1a 02 c0       	push   0xc0021a37
c001a0d3:	50                   	push   eax
c001a0d4:	e8 a7 16 ff ff       	call   c000b780 <Bus::Bus(char const*)>
c001a0d9:	83 c4 10             	add    esp,0x10
c001a0dc:	ba e0 1a 02 c0       	mov    edx,0xc0021ae0
c001a0e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0e5:	89 10                	mov    DWORD PTR [eax],edx
c001a0e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0eb:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001a0f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0f9:	a3 40 8b 02 c0       	mov    ds:0xc0028b40,eax
c001a0fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a102:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a108:	0f b6 d0             	movzx  edx,al
c001a10b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a10f:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001a116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a11a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a120:	0f b6 d0             	movzx  edx,al
c001a123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a127:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001a12c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a130:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a136:	8d 50 01             	lea    edx,[eax+0x1]
c001a139:	88 d1                	mov    cl,dl
c001a13b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a13f:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001a145:	0f b6 d0             	movzx  edx,al
c001a148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a14c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001a150:	83 c9 c0             	or     ecx,0xffffffc0
c001a153:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001a157:	90                   	nop
c001a158:	83 c4 0c             	add    esp,0xc
c001a15b:	c3                   	ret    

c001a15c <PCI::readBAR8(unsigned int, int)>:
c001a15c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a160:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a164:	f6 c2 01             	test   dl,0x1
c001a167:	74 07                	je     c001a170 <PCI::readBAR8(unsigned int, int)+0x14>
c001a169:	83 e2 fc             	and    edx,0xfffffffc
c001a16c:	01 c2                	add    edx,eax
c001a16e:	ec                   	in     al,dx
c001a16f:	c3                   	ret    
c001a170:	83 e2 f0             	and    edx,0xfffffff0
c001a173:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001a176:	c3                   	ret    
c001a177:	90                   	nop

c001a178 <PCI::readBAR16(unsigned int, int)>:
c001a178:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a17c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a180:	f6 c2 01             	test   dl,0x1
c001a183:	74 08                	je     c001a18d <PCI::readBAR16(unsigned int, int)+0x15>
c001a185:	83 e2 fc             	and    edx,0xfffffffc
c001a188:	01 c2                	add    edx,eax
c001a18a:	66 ed                	in     ax,dx
c001a18c:	c3                   	ret    
c001a18d:	83 e2 f0             	and    edx,0xfffffff0
c001a190:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001a194:	c3                   	ret    
c001a195:	90                   	nop

c001a196 <PCI::readBAR32(unsigned int, int)>:
c001a196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a19a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a19e:	f6 c2 01             	test   dl,0x1
c001a1a1:	74 07                	je     c001a1aa <PCI::readBAR32(unsigned int, int)+0x14>
c001a1a3:	83 e2 fc             	and    edx,0xfffffffc
c001a1a6:	01 c2                	add    edx,eax
c001a1a8:	ed                   	in     eax,dx
c001a1a9:	c3                   	ret    
c001a1aa:	83 e2 f0             	and    edx,0xfffffff0
c001a1ad:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001a1b0:	c3                   	ret    
c001a1b1:	90                   	nop

c001a1b2 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001a1b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a1b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a1ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a1be:	f6 c2 01             	test   dl,0x1
c001a1c1:	74 07                	je     c001a1ca <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001a1c3:	83 e2 fc             	and    edx,0xfffffffc
c001a1c6:	01 ca                	add    edx,ecx
c001a1c8:	ee                   	out    dx,al
c001a1c9:	c3                   	ret    
c001a1ca:	83 e2 f0             	and    edx,0xfffffff0
c001a1cd:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001a1d0:	c3                   	ret    
c001a1d1:	90                   	nop

c001a1d2 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001a1d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a1d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a1da:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a1de:	f6 c2 01             	test   dl,0x1
c001a1e1:	74 08                	je     c001a1eb <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001a1e3:	83 e2 fc             	and    edx,0xfffffffc
c001a1e6:	01 ca                	add    edx,ecx
c001a1e8:	66 ef                	out    dx,ax
c001a1ea:	c3                   	ret    
c001a1eb:	83 e2 f0             	and    edx,0xfffffff0
c001a1ee:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001a1f2:	c3                   	ret    
c001a1f3:	90                   	nop

c001a1f4 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001a1f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a1f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a1fc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a200:	f6 c2 01             	test   dl,0x1
c001a203:	74 07                	je     c001a20c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001a205:	83 e2 fc             	and    edx,0xfffffffc
c001a208:	01 ca                	add    edx,ecx
c001a20a:	ef                   	out    dx,eax
c001a20b:	c3                   	ret    
c001a20c:	83 e2 f0             	and    edx,0xfffffff0
c001a20f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001a212:	c3                   	ret    
c001a213:	90                   	nop

c001a214 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a214:	55                   	push   ebp
c001a215:	57                   	push   edi
c001a216:	56                   	push   esi
c001a217:	53                   	push   ebx
c001a218:	83 ec 0c             	sub    esp,0xc
c001a21b:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001a220:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001a224:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a228:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a22c:	83 fe 07             	cmp    esi,0x7
c001a22f:	76 10                	jbe    c001a241 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001a231:	83 ec 0c             	sub    esp,0xc
c001a234:	68 3f 1a 02 c0       	push   0xc0021a3f
c001a239:	e8 d9 66 ff ff       	call   c0010917 <KePanic(char const*)>
c001a23e:	83 c4 10             	add    esp,0x10
c001a241:	0f b6 db             	movzx  ebx,bl
c001a244:	83 fb 0f             	cmp    ebx,0xf
c001a247:	76 10                	jbe    c001a259 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001a249:	83 ec 0c             	sub    esp,0xc
c001a24c:	68 6f 1a 02 c0       	push   0xc0021a6f
c001a251:	e8 c1 66 ff ff       	call   c0010917 <KePanic(char const*)>
c001a256:	83 c4 10             	add    esp,0x10
c001a259:	8d 04 36             	lea    eax,[esi+esi*1]
c001a25c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a261:	83 c8 f0             	or     eax,0xfffffff0
c001a264:	ee                   	out    dx,al
c001a265:	ba fa 0c 00 00       	mov    edx,0xcfa
c001a26a:	89 e8                	mov    eax,ebp
c001a26c:	ee                   	out    dx,al
c001a26d:	83 c4 0c             	add    esp,0xc
c001a270:	89 d8                	mov    eax,ebx
c001a272:	89 f9                	mov    ecx,edi
c001a274:	c1 e0 08             	shl    eax,0x8
c001a277:	0f b6 d9             	movzx  ebx,cl
c001a27a:	83 e3 fc             	and    ebx,0xfffffffc
c001a27d:	09 d8                	or     eax,ebx
c001a27f:	5b                   	pop    ebx
c001a280:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001a285:	5e                   	pop    esi
c001a286:	5f                   	pop    edi
c001a287:	5d                   	pop    ebp
c001a288:	c3                   	ret    
c001a289:	90                   	nop

c001a28a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a28a:	57                   	push   edi
c001a28b:	56                   	push   esi
c001a28c:	53                   	push   ebx
c001a28d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a291:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a295:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001a29b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a29f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a2a3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a2a7:	83 ff 01             	cmp    edi,0x1
c001a2aa:	75 3f                	jne    c001a2eb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001a2ac:	89 de                	mov    esi,ebx
c001a2ae:	0f b6 c0             	movzx  eax,al
c001a2b1:	81 e6 fc 00 00 00    	and    esi,0xfc
c001a2b7:	c1 e0 10             	shl    eax,0x10
c001a2ba:	0f b6 c9             	movzx  ecx,cl
c001a2bd:	09 f0                	or     eax,esi
c001a2bf:	c1 e1 08             	shl    ecx,0x8
c001a2c2:	0f b6 d2             	movzx  edx,dl
c001a2c5:	09 c8                	or     eax,ecx
c001a2c7:	c1 e2 0b             	shl    edx,0xb
c001a2ca:	09 d0                	or     eax,edx
c001a2cc:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a2d1:	0d 00 00 00 80       	or     eax,0x80000000
c001a2d6:	ef                   	out    dx,eax
c001a2d7:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a2dc:	ed                   	in     eax,dx
c001a2dd:	83 e3 02             	and    ebx,0x2
c001a2e0:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a2e7:	d3 e8                	shr    eax,cl
c001a2e9:	eb 44                	jmp    c001a32f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a2eb:	83 ff 02             	cmp    edi,0x2
c001a2ee:	75 2d                	jne    c001a31d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001a2f0:	83 ec 0c             	sub    esp,0xc
c001a2f3:	0f b6 c9             	movzx  ecx,cl
c001a2f6:	0f b6 d2             	movzx  edx,dl
c001a2f9:	0f b6 fb             	movzx  edi,bl
c001a2fc:	0f b6 c0             	movzx  eax,al
c001a2ff:	57                   	push   edi
c001a300:	51                   	push   ecx
c001a301:	52                   	push   edx
c001a302:	50                   	push   eax
c001a303:	56                   	push   esi
c001a304:	e8 0b ff ff ff       	call   c001a214 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a309:	89 c2                	mov    edx,eax
c001a30b:	ed                   	in     eax,dx
c001a30c:	83 e3 02             	and    ebx,0x2
c001a30f:	83 c4 20             	add    esp,0x20
c001a312:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a319:	d3 e8                	shr    eax,cl
c001a31b:	eb 12                	jmp    c001a32f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a31d:	83 ec 0c             	sub    esp,0xc
c001a320:	68 9f 1a 02 c0       	push   0xc0021a9f
c001a325:	e8 ed 65 ff ff       	call   c0010917 <KePanic(char const*)>
c001a32a:	83 c4 10             	add    esp,0x10
c001a32d:	31 c0                	xor    eax,eax
c001a32f:	5b                   	pop    ebx
c001a330:	5e                   	pop    esi
c001a331:	5f                   	pop    edi
c001a332:	c3                   	ret    
c001a333:	90                   	nop

c001a334 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001a334:	83 ec 18             	sub    esp,0x18
c001a337:	6a 00                	push   0x0
c001a339:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a33e:	50                   	push   eax
c001a33f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a344:	50                   	push   eax
c001a345:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a34a:	50                   	push   eax
c001a34b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a34f:	e8 36 ff ff ff       	call   c001a28a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a354:	83 c4 2c             	add    esp,0x2c
c001a357:	c3                   	ret    

c001a358 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001a358:	83 ec 18             	sub    esp,0x18
c001a35b:	6a 0e                	push   0xe
c001a35d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a362:	50                   	push   eax
c001a363:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a368:	50                   	push   eax
c001a369:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a36e:	50                   	push   eax
c001a36f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a373:	e8 12 ff ff ff       	call   c001a28a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a378:	83 c4 2c             	add    esp,0x2c
c001a37b:	0f b6 c0             	movzx  eax,al
c001a37e:	c3                   	ret    
c001a37f:	90                   	nop

c001a380 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001a380:	55                   	push   ebp
c001a381:	57                   	push   edi
c001a382:	56                   	push   esi
c001a383:	53                   	push   ebx
c001a384:	83 ec 18             	sub    esp,0x18
c001a387:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001a38c:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001a391:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001a396:	6a 0a                	push   0xa
c001a398:	56                   	push   esi
c001a399:	55                   	push   ebp
c001a39a:	57                   	push   edi
c001a39b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a39f:	e8 e6 fe ff ff       	call   c001a28a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3a4:	83 c4 14             	add    esp,0x14
c001a3a7:	89 c3                	mov    ebx,eax
c001a3a9:	6a 0a                	push   0xa
c001a3ab:	0f b6 db             	movzx  ebx,bl
c001a3ae:	56                   	push   esi
c001a3af:	55                   	push   ebp
c001a3b0:	57                   	push   edi
c001a3b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a3b5:	e8 d0 fe ff ff       	call   c001a28a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3ba:	83 c4 2c             	add    esp,0x2c
c001a3bd:	25 00 ff 00 00       	and    eax,0xff00
c001a3c2:	09 d8                	or     eax,ebx
c001a3c4:	5b                   	pop    ebx
c001a3c5:	5e                   	pop    esi
c001a3c6:	5f                   	pop    edi
c001a3c7:	5d                   	pop    ebp
c001a3c8:	c3                   	ret    
c001a3c9:	90                   	nop

c001a3ca <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001a3ca:	83 ec 18             	sub    esp,0x18
c001a3cd:	6a 08                	push   0x8
c001a3cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3d4:	50                   	push   eax
c001a3d5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3da:	50                   	push   eax
c001a3db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3e0:	50                   	push   eax
c001a3e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3e5:	e8 a0 fe ff ff       	call   c001a28a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3ea:	83 c4 2c             	add    esp,0x2c
c001a3ed:	0f b6 c4             	movzx  eax,ah
c001a3f0:	c3                   	ret    
c001a3f1:	90                   	nop

c001a3f2 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001a3f2:	83 ec 18             	sub    esp,0x18
c001a3f5:	6a 08                	push   0x8
c001a3f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3fc:	50                   	push   eax
c001a3fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a402:	50                   	push   eax
c001a403:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a408:	50                   	push   eax
c001a409:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a40d:	e8 78 fe ff ff       	call   c001a28a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a412:	83 c4 2c             	add    esp,0x2c
c001a415:	c3                   	ret    

c001a416 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001a416:	83 ec 18             	sub    esp,0x18
c001a419:	6a 3c                	push   0x3c
c001a41b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a420:	50                   	push   eax
c001a421:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a426:	50                   	push   eax
c001a427:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a42c:	50                   	push   eax
c001a42d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a431:	e8 54 fe ff ff       	call   c001a28a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a436:	83 c4 2c             	add    esp,0x2c
c001a439:	c3                   	ret    

c001a43a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001a43a:	83 ec 18             	sub    esp,0x18
c001a43d:	6a 18                	push   0x18
c001a43f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a444:	50                   	push   eax
c001a445:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a44a:	50                   	push   eax
c001a44b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a450:	50                   	push   eax
c001a451:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a455:	e8 30 fe ff ff       	call   c001a28a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a45a:	83 c4 2c             	add    esp,0x2c
c001a45d:	0f b6 c4             	movzx  eax,ah
c001a460:	c3                   	ret    
c001a461:	90                   	nop

c001a462 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a462:	55                   	push   ebp
c001a463:	57                   	push   edi
c001a464:	56                   	push   esi
c001a465:	53                   	push   ebx
c001a466:	83 ec 28             	sub    esp,0x28
c001a469:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a46d:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001a472:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001a477:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001a47c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001a483:	8d 43 12             	lea    eax,[ebx+0x12]
c001a486:	83 c3 10             	add    ebx,0x10
c001a489:	0f b6 c0             	movzx  eax,al
c001a48c:	0f b6 db             	movzx  ebx,bl
c001a48f:	50                   	push   eax
c001a490:	51                   	push   ecx
c001a491:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001a495:	57                   	push   edi
c001a496:	55                   	push   ebp
c001a497:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a49b:	e8 ea fd ff ff       	call   c001a28a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a4a0:	83 c4 14             	add    esp,0x14
c001a4a3:	89 c6                	mov    esi,eax
c001a4a5:	53                   	push   ebx
c001a4a6:	c1 e6 10             	shl    esi,0x10
c001a4a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a4ad:	51                   	push   ecx
c001a4ae:	57                   	push   edi
c001a4af:	55                   	push   ebp
c001a4b0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a4b4:	e8 d1 fd ff ff       	call   c001a28a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a4b9:	83 c4 3c             	add    esp,0x3c
c001a4bc:	0f b7 c0             	movzx  eax,ax
c001a4bf:	5b                   	pop    ebx
c001a4c0:	09 f0                	or     eax,esi
c001a4c2:	5e                   	pop    esi
c001a4c3:	5f                   	pop    edi
c001a4c4:	5d                   	pop    ebp
c001a4c5:	c3                   	ret    

c001a4c6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001a4c6:	55                   	push   ebp
c001a4c7:	57                   	push   edi
c001a4c8:	56                   	push   esi
c001a4c9:	53                   	push   ebx
c001a4ca:	83 ec 0c             	sub    esp,0xc
c001a4cd:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a4d1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a4d5:	89 f5                	mov    ebp,esi
c001a4d7:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001a4dd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a4e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a4e5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a4e9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a4ed:	83 f9 01             	cmp    ecx,0x1
c001a4f0:	75 5d                	jne    c001a54f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001a4f2:	0f b6 c8             	movzx  ecx,al
c001a4f5:	0f b6 d2             	movzx  edx,dl
c001a4f8:	c1 e1 10             	shl    ecx,0x10
c001a4fb:	c1 e2 0b             	shl    edx,0xb
c001a4fe:	89 f0                	mov    eax,esi
c001a500:	25 fc 00 00 00       	and    eax,0xfc
c001a505:	09 c1                	or     ecx,eax
c001a507:	89 e8                	mov    eax,ebp
c001a509:	0f b6 c0             	movzx  eax,al
c001a50c:	c1 e0 08             	shl    eax,0x8
c001a50f:	09 c1                	or     ecx,eax
c001a511:	09 d1                	or     ecx,edx
c001a513:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a518:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001a51e:	89 c8                	mov    eax,ecx
c001a520:	ef                   	out    dx,eax
c001a521:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a526:	ed                   	in     eax,dx
c001a527:	0f b7 db             	movzx  ebx,bx
c001a52a:	83 e6 02             	and    esi,0x2
c001a52d:	74 0a                	je     c001a539 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001a52f:	0f b7 d0             	movzx  edx,ax
c001a532:	c1 e3 10             	shl    ebx,0x10
c001a535:	09 d3                	or     ebx,edx
c001a537:	eb 05                	jmp    c001a53e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001a539:	66 31 c0             	xor    ax,ax
c001a53c:	09 c3                	or     ebx,eax
c001a53e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a543:	89 c8                	mov    eax,ecx
c001a545:	ef                   	out    dx,eax
c001a546:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a54b:	89 d8                	mov    eax,ebx
c001a54d:	eb 41                	jmp    c001a590 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001a54f:	83 f9 02             	cmp    ecx,0x2
c001a552:	75 45                	jne    c001a599 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001a554:	83 ec 0c             	sub    esp,0xc
c001a557:	0f b6 d2             	movzx  edx,dl
c001a55a:	89 f1                	mov    ecx,esi
c001a55c:	0f b6 c0             	movzx  eax,al
c001a55f:	0f b6 f1             	movzx  esi,cl
c001a562:	89 e9                	mov    ecx,ebp
c001a564:	56                   	push   esi
c001a565:	0f b6 c9             	movzx  ecx,cl
c001a568:	51                   	push   ecx
c001a569:	52                   	push   edx
c001a56a:	50                   	push   eax
c001a56b:	57                   	push   edi
c001a56c:	e8 a3 fc ff ff       	call   c001a214 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a571:	89 c2                	mov    edx,eax
c001a573:	ed                   	in     eax,dx
c001a574:	83 c4 20             	add    esp,0x20
c001a577:	0f b7 db             	movzx  ebx,bx
c001a57a:	f6 c2 02             	test   dl,0x2
c001a57d:	74 0c                	je     c001a58b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001a57f:	0f b7 c8             	movzx  ecx,ax
c001a582:	89 d8                	mov    eax,ebx
c001a584:	c1 e0 10             	shl    eax,0x10
c001a587:	09 c8                	or     eax,ecx
c001a589:	eb 05                	jmp    c001a590 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001a58b:	66 31 c0             	xor    ax,ax
c001a58e:	09 d8                	or     eax,ebx
c001a590:	ef                   	out    dx,eax
c001a591:	83 c4 0c             	add    esp,0xc
c001a594:	5b                   	pop    ebx
c001a595:	5e                   	pop    esi
c001a596:	5f                   	pop    edi
c001a597:	5d                   	pop    ebp
c001a598:	c3                   	ret    
c001a599:	c7 44 24 20 9f 1a 02 c0 	mov    DWORD PTR [esp+0x20],0xc0021a9f
c001a5a1:	83 c4 0c             	add    esp,0xc
c001a5a4:	5b                   	pop    ebx
c001a5a5:	5e                   	pop    esi
c001a5a6:	5f                   	pop    edi
c001a5a7:	5d                   	pop    ebp
c001a5a8:	e9 6a 63 ff ff       	jmp    c0010917 <KePanic(char const*)>
c001a5ad:	90                   	nop

c001a5ae <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001a5ae:	55                   	push   ebp
c001a5af:	57                   	push   edi
c001a5b0:	56                   	push   esi
c001a5b1:	53                   	push   ebx
c001a5b2:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001a5b8:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001a5bf:	80 3d 4c 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b4c,0x0
c001a5c6:	0f 85 bd 00 00 00    	jne    c001a689 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001a5cc:	83 ec 0c             	sub    esp,0xc
c001a5cf:	68 14 01 00 00       	push   0x114
c001a5d4:	e8 d5 d4 fe ff       	call   c0007aae <malloc>
c001a5d9:	83 c4 0c             	add    esp,0xc
c001a5dc:	89 c3                	mov    ebx,eax
c001a5de:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001a5e4:	68 a5 1a 02 c0       	push   0xc0021aa5
c001a5e9:	50                   	push   eax
c001a5ea:	e8 7d 09 ff ff       	call   c000af6c <File::File(char const*, Process*)>
c001a5ef:	83 c4 10             	add    esp,0x10
c001a5f2:	85 db                	test   ebx,ebx
c001a5f4:	0f 84 67 02 00 00    	je     c001a861 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a5fa:	56                   	push   esi
c001a5fb:	56                   	push   esi
c001a5fc:	6a 01                	push   0x1
c001a5fe:	53                   	push   ebx
c001a5ff:	e8 24 0a ff ff       	call   c000b028 <File::open(FileOpenMode)>
c001a604:	83 c4 10             	add    esp,0x10
c001a607:	85 c0                	test   eax,eax
c001a609:	0f 85 52 02 00 00    	jne    c001a861 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a60f:	52                   	push   edx
c001a610:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001a614:	50                   	push   eax
c001a615:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a619:	50                   	push   eax
c001a61a:	53                   	push   ebx
c001a61b:	e8 b4 0c ff ff       	call   c000b2d4 <File::stat(unsigned long long*, bool*)>
c001a620:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a624:	40                   	inc    eax
c001a625:	89 04 24             	mov    DWORD PTR [esp],eax
c001a628:	e8 81 d4 fe ff       	call   c0007aae <malloc>
c001a62d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a631:	a3 48 8b 02 c0       	mov    ds:0xc0028b48,eax
c001a636:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001a63a:	59                   	pop    ecx
c001a63b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a63d:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001a641:	51                   	push   ecx
c001a642:	50                   	push   eax
c001a643:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a647:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a64b:	53                   	push   ebx
c001a64c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a64f:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001a653:	83 c4 20             	add    esp,0x20
c001a656:	89 c8                	mov    eax,ecx
c001a658:	99                   	cdq    
c001a659:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001a65d:	0f 85 fe 01 00 00    	jne    c001a861 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a663:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001a667:	0f 85 f4 01 00 00    	jne    c001a861 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a66d:	83 ec 0c             	sub    esp,0xc
c001a670:	53                   	push   ebx
c001a671:	e8 10 0a ff ff       	call   c000b086 <File::close()>
c001a676:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a67a:	c6 05 4c 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b4c,0x1
c001a681:	a3 44 8b 02 c0       	mov    ds:0xc0028b44,eax
c001a686:	83 c4 10             	add    esp,0x10
c001a689:	a1 44 8b 02 c0       	mov    eax,ds:0xc0028b44
c001a68e:	8b 1d 48 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b48
c001a694:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a698:	31 f6                	xor    esi,esi
c001a69a:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001a6a2:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001a6a9:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001a6ae:	31 c9                	xor    ecx,ecx
c001a6b0:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001a6b8:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001a6bd:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001a6c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a6c9:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001a6d1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a6d5:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001a6d9:	0f 8e 82 01 00 00    	jle    c001a861 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a6df:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001a6e2:	d4 40                	aam    0x40
c001a6e4:	d5 39                	aad    0x39
c001a6e6:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001a6ea:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001a6ee:	d4 40                	aam    0x40
c001a6f0:	d5 39                	aad    0x39
c001a6f2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a6f6:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001a6fa:	d4 40                	aam    0x40
c001a6fc:	d5 39                	aad    0x39
c001a6fe:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001a702:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001a706:	d4 40                	aam    0x40
c001a708:	d5 39                	aad    0x39
c001a70a:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001a70e:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001a712:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001a716:	3c 56                	cmp    al,0x56
c001a718:	74 43                	je     c001a75d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001a71a:	d4 40                	aam    0x40
c001a71c:	d5 39                	aad    0x39
c001a71e:	8d 48 d0             	lea    ecx,[eax-0x30]
c001a721:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001a725:	0f b6 c9             	movzx  ecx,cl
c001a728:	c1 e1 04             	shl    ecx,0x4
c001a72b:	d4 40                	aam    0x40
c001a72d:	d5 39                	aad    0x39
c001a72f:	83 e8 30             	sub    eax,0x30
c001a732:	0f b6 c0             	movzx  eax,al
c001a735:	09 c1                	or     ecx,eax
c001a737:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001a73b:	c1 e1 04             	shl    ecx,0x4
c001a73e:	d4 40                	aam    0x40
c001a740:	d5 39                	aad    0x39
c001a742:	83 e8 30             	sub    eax,0x30
c001a745:	0f b6 c0             	movzx  eax,al
c001a748:	09 c1                	or     ecx,eax
c001a74a:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001a74e:	c1 e1 04             	shl    ecx,0x4
c001a751:	d4 40                	aam    0x40
c001a753:	d5 39                	aad    0x39
c001a755:	83 e8 30             	sub    eax,0x30
c001a758:	0f b6 c0             	movzx  eax,al
c001a75b:	09 c1                	or     ecx,eax
c001a75d:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001a761:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001a765:	3c 58                	cmp    al,0x58
c001a767:	74 47                	je     c001a7b0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001a769:	d4 40                	aam    0x40
c001a76b:	d5 39                	aad    0x39
c001a76d:	8d 50 d0             	lea    edx,[eax-0x30]
c001a770:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001a774:	0f b6 d2             	movzx  edx,dl
c001a777:	c1 e2 04             	shl    edx,0x4
c001a77a:	d4 40                	aam    0x40
c001a77c:	d5 39                	aad    0x39
c001a77e:	83 e8 30             	sub    eax,0x30
c001a781:	0f b6 c0             	movzx  eax,al
c001a784:	09 c2                	or     edx,eax
c001a786:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001a78a:	c1 e2 04             	shl    edx,0x4
c001a78d:	d4 40                	aam    0x40
c001a78f:	d5 39                	aad    0x39
c001a791:	83 e8 30             	sub    eax,0x30
c001a794:	0f b6 c0             	movzx  eax,al
c001a797:	09 c2                	or     edx,eax
c001a799:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001a79d:	c1 e2 04             	shl    edx,0x4
c001a7a0:	d4 40                	aam    0x40
c001a7a2:	d5 39                	aad    0x39
c001a7a4:	83 e8 30             	sub    eax,0x30
c001a7a7:	0f b6 c0             	movzx  eax,al
c001a7aa:	09 c2                	or     edx,eax
c001a7ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a7b0:	83 c6 10             	add    esi,0x10
c001a7b3:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001a7b7:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001a7bb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001a7bf:	83 fa 0a             	cmp    edx,0xa
c001a7c2:	74 0b                	je     c001a7cf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001a7c4:	47                   	inc    edi
c001a7c5:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001a7c9:	75 19                	jne    c001a7e4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001a7cb:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001a7cf:	31 c0                	xor    eax,eax
c001a7d1:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001a7d6:	0f 94 c0             	sete   al
c001a7d9:	01 c6                	add    esi,eax
c001a7db:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001a7e0:	75 0b                	jne    c001a7ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001a7e2:	eb 14                	jmp    c001a7f8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001a7e4:	46                   	inc    esi
c001a7e5:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001a7e8:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001a7eb:	eb ca                	jmp    c001a7b7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001a7ed:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001a7f2:	0f 85 dd fe ff ff    	jne    c001a6d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a7f8:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001a7fd:	74 10                	je     c001a80f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001a7ff:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001a804:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001a809:	0f 85 c6 fe ff ff    	jne    c001a6d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a80f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a813:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a817:	83 e8 30             	sub    eax,0x30
c001a81a:	83 ef 30             	sub    edi,0x30
c001a81d:	c1 e0 04             	shl    eax,0x4
c001a820:	09 f8                	or     eax,edi
c001a822:	0f b6 c0             	movzx  eax,al
c001a825:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a829:	0f 85 a6 fe ff ff    	jne    c001a6d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a82f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a833:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001a837:	83 e8 30             	sub    eax,0x30
c001a83a:	83 ef 30             	sub    edi,0x30
c001a83d:	c1 e0 04             	shl    eax,0x4
c001a840:	09 f8                	or     eax,edi
c001a842:	0f b6 c0             	movzx  eax,al
c001a845:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001a849:	0f 85 86 fe ff ff    	jne    c001a6d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a84f:	50                   	push   eax
c001a850:	50                   	push   eax
c001a851:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a855:	50                   	push   eax
c001a856:	55                   	push   ebp
c001a857:	e8 e4 5d fe ff       	call   c0000640 <strcpy>
c001a85c:	83 c4 10             	add    esp,0x10
c001a85f:	eb 06                	jmp    c001a867 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001a861:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001a865:	31 ed                	xor    ebp,ebp
c001a867:	81 c4 4c 01 00 00    	add    esp,0x14c
c001a86d:	89 e8                	mov    eax,ebp
c001a86f:	5b                   	pop    ebx
c001a870:	5e                   	pop    esi
c001a871:	5f                   	pop    edi
c001a872:	5d                   	pop    ebp
c001a873:	c3                   	ret    

c001a874 <PCI::checkBus(unsigned char)>:
c001a874:	56                   	push   esi
c001a875:	53                   	push   ebx
c001a876:	31 db                	xor    ebx,ebx
c001a878:	51                   	push   ecx
c001a879:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001a87e:	52                   	push   edx
c001a87f:	53                   	push   ebx
c001a880:	43                   	inc    ebx
c001a881:	56                   	push   esi
c001a882:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a886:	e8 03 03 00 00       	call   c001ab8e <PCI::checkDevice(unsigned char, unsigned char)>
c001a88b:	83 c4 10             	add    esp,0x10
c001a88e:	83 fb 20             	cmp    ebx,0x20
c001a891:	75 eb                	jne    c001a87e <PCI::checkBus(unsigned char)+0xa>
c001a893:	58                   	pop    eax
c001a894:	5b                   	pop    ebx
c001a895:	5e                   	pop    esi
c001a896:	c3                   	ret    
c001a897:	90                   	nop

c001a898 <PCI::foundDevice(PCIDeviceInfo)>:
c001a898:	55                   	push   ebp
c001a899:	57                   	push   edi
c001a89a:	56                   	push   esi
c001a89b:	53                   	push   ebx
c001a89c:	83 ec 1c             	sub    esp,0x1c
c001a89f:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001a8a4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a8a8:	3d ff ff 00 00       	cmp    eax,0xffff
c001a8ad:	0f 84 57 01 00 00    	je     c001aa0a <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001a8b3:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001a8b8:	66 3d 06 04          	cmp    ax,0x406
c001a8bc:	75 2c                	jne    c001a8ea <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001a8be:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001a8c3:	50                   	push   eax
c001a8c4:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001a8c9:	50                   	push   eax
c001a8ca:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001a8cf:	50                   	push   eax
c001a8d0:	53                   	push   ebx
c001a8d1:	e8 64 fb ff ff       	call   c001a43a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001a8d6:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a8da:	0f b6 c0             	movzx  eax,al
c001a8dd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a8e1:	83 c4 2c             	add    esp,0x2c
c001a8e4:	5b                   	pop    ebx
c001a8e5:	5e                   	pop    esi
c001a8e6:	5f                   	pop    edi
c001a8e7:	5d                   	pop    ebp
c001a8e8:	eb 8a                	jmp    c001a874 <PCI::checkBus(unsigned char)>
c001a8ea:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001a8ee:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001a8f4:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001a8f8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001a8fc:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001a901:	85 d2                	test   edx,edx
c001a903:	74 36                	je     c001a93b <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001a905:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001a908:	85 c9                	test   ecx,ecx
c001a90a:	74 2b                	je     c001a937 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001a90c:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001a912:	31 ee                	xor    esi,ebp
c001a914:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001a91a:	75 1b                	jne    c001a937 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001a91c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001a920:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001a926:	75 0f                	jne    c001a937 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001a928:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001a92f:	39 f9                	cmp    ecx,edi
c001a931:	0f 84 d3 00 00 00    	je     c001aa0a <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001a937:	8b 12                	mov    edx,DWORD PTR [edx]
c001a939:	eb c6                	jmp    c001a901 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001a93b:	3d 01 06 00 00       	cmp    eax,0x601
c001a940:	75 19                	jne    c001a95b <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001a942:	83 ec 0c             	sub    esp,0xc
c001a945:	68 64 01 00 00       	push   0x164
c001a94a:	e8 5f d1 fe ff       	call   c0007aae <malloc>
c001a94f:	89 c5                	mov    ebp,eax
c001a951:	89 04 24             	mov    DWORD PTR [esp],eax
c001a954:	e8 a1 0e 00 00       	call   c001b7fa <SATABus::SATABus()>
c001a959:	eb 1e                	jmp    c001a979 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001a95b:	3d 01 01 00 00       	cmp    eax,0x101
c001a960:	75 62                	jne    c001a9c4 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001a962:	83 ec 0c             	sub    esp,0xc
c001a965:	68 70 02 00 00       	push   0x270
c001a96a:	e8 3f d1 fe ff       	call   c0007aae <malloc>
c001a96f:	89 c5                	mov    ebp,eax
c001a971:	89 04 24             	mov    DWORD PTR [esp],eax
c001a974:	e8 e5 02 00 00       	call   c001ac5e <IDE::IDE()>
c001a979:	5f                   	pop    edi
c001a97a:	58                   	pop    eax
c001a97b:	55                   	push   ebp
c001a97c:	53                   	push   ebx
c001a97d:	e8 9c 14 ff ff       	call   c000be1e <Device::addChild(Device*)>
c001a982:	83 ec 1c             	sub    esp,0x1c
c001a985:	b9 09 00 00 00       	mov    ecx,0x9
c001a98a:	fc                   	cld    
c001a98b:	89 e7                	mov    edi,esp
c001a98d:	8d 74 24 60          	lea    esi,[esp+0x60]
c001a991:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a993:	55                   	push   ebp
c001a994:	e8 cb 13 ff ff       	call   c000bd64 <Device::preOpenPCI(PCIDeviceInfo)>
c001a999:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a99c:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001a9a0:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001a9a8:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001a9b0:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001a9b8:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001a9bb:	83 c4 4c             	add    esp,0x4c
c001a9be:	5b                   	pop    ebx
c001a9bf:	5e                   	pop    esi
c001a9c0:	5f                   	pop    edi
c001a9c1:	5d                   	pop    ebp
c001a9c2:	ff e0                	jmp    eax
c001a9c4:	83 ec 0c             	sub    esp,0xc
c001a9c7:	68 58 01 00 00       	push   0x158
c001a9cc:	e8 dd d0 fe ff       	call   c0007aae <malloc>
c001a9d1:	89 c5                	mov    ebp,eax
c001a9d3:	58                   	pop    eax
c001a9d4:	5a                   	pop    edx
c001a9d5:	68 be 1a 02 c0       	push   0xc0021abe
c001a9da:	55                   	push   ebp
c001a9db:	e8 dc 16 ff ff       	call   c000c0bc <DriverlessDevice::DriverlessDevice(char const*)>
c001a9e0:	59                   	pop    ecx
c001a9e1:	5e                   	pop    esi
c001a9e2:	55                   	push   ebp
c001a9e3:	53                   	push   ebx
c001a9e4:	e8 35 14 ff ff       	call   c000be1e <Device::addChild(Device*)>
c001a9e9:	83 c4 10             	add    esp,0x10
c001a9ec:	b9 09 00 00 00       	mov    ecx,0x9
c001a9f1:	fc                   	cld    
c001a9f2:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001a9f6:	89 fe                	mov    esi,edi
c001a9f8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a9fa:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001a9fe:	83 c4 1c             	add    esp,0x1c
c001aa01:	5b                   	pop    ebx
c001aa02:	5e                   	pop    esi
c001aa03:	5f                   	pop    edi
c001aa04:	5d                   	pop    ebp
c001aa05:	e9 5a 13 ff ff       	jmp    c000bd64 <Device::preOpenPCI(PCIDeviceInfo)>
c001aa0a:	83 c4 1c             	add    esp,0x1c
c001aa0d:	5b                   	pop    ebx
c001aa0e:	5e                   	pop    esi
c001aa0f:	5f                   	pop    edi
c001aa10:	5d                   	pop    ebp
c001aa11:	c3                   	ret    

c001aa12 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001aa12:	55                   	push   ebp
c001aa13:	57                   	push   edi
c001aa14:	56                   	push   esi
c001aa15:	53                   	push   ebx
c001aa16:	83 ec 68             	sub    esp,0x68
c001aa19:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001aa1d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aa24:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aa28:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa2f:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001aa34:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aa38:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aa3f:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001aa44:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001aa48:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001aa4d:	6a 0c                	push   0xc
c001aa4f:	57                   	push   edi
c001aa50:	53                   	push   ebx
c001aa51:	56                   	push   esi
c001aa52:	55                   	push   ebp
c001aa53:	e8 32 f8 ff ff       	call   c001a28a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aa58:	83 c4 20             	add    esp,0x20
c001aa5b:	57                   	push   edi
c001aa5c:	53                   	push   ebx
c001aa5d:	56                   	push   esi
c001aa5e:	55                   	push   ebp
c001aa5f:	e8 1c f9 ff ff       	call   c001a380 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001aa64:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001aa69:	57                   	push   edi
c001aa6a:	53                   	push   ebx
c001aa6b:	56                   	push   esi
c001aa6c:	55                   	push   ebp
c001aa6d:	e8 a4 f9 ff ff       	call   c001a416 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001aa72:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001aa76:	83 c4 14             	add    esp,0x14
c001aa79:	6a 3c                	push   0x3c
c001aa7b:	57                   	push   edi
c001aa7c:	53                   	push   ebx
c001aa7d:	56                   	push   esi
c001aa7e:	55                   	push   ebp
c001aa7f:	e8 06 f8 ff ff       	call   c001a28a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aa84:	0f b6 c4             	movzx  eax,ah
c001aa87:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001aa8b:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001aa8f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001aa93:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001aa98:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001aa9e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001aaa4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aaa8:	83 c4 20             	add    esp,0x20
c001aaab:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001aab0:	74 30                	je     c001aae2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001aab2:	31 c0                	xor    eax,eax
c001aab4:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001aab8:	7e 28                	jle    c001aae2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001aaba:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001aac2:	39 cb                	cmp    ebx,ecx
c001aac4:	75 19                	jne    c001aadf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001aac6:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001aace:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001aad2:	75 0b                	jne    c001aadf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001aad4:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001aadb:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001aadf:	40                   	inc    eax
c001aae0:	eb d2                	jmp    c001aab4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001aae2:	31 d2                	xor    edx,edx
c001aae4:	83 ec 0c             	sub    esp,0xc
c001aae7:	57                   	push   edi
c001aae8:	53                   	push   ebx
c001aae9:	56                   	push   esi
c001aaea:	52                   	push   edx
c001aaeb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001aaef:	55                   	push   ebp
c001aaf0:	e8 6d f9 ff ff       	call   c001a462 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aaf5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aaf9:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001aafd:	42                   	inc    edx
c001aafe:	83 c4 20             	add    esp,0x20
c001ab01:	83 fa 06             	cmp    edx,0x6
c001ab04:	75 de                	jne    c001aae4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001ab06:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ab0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ab0e:	c1 e2 08             	shl    edx,0x8
c001ab11:	83 ec 0c             	sub    esp,0xc
c001ab14:	0f b6 c4             	movzx  eax,ah
c001ab17:	09 d0                	or     eax,edx
c001ab19:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001ab1e:	6a 02                	push   0x2
c001ab20:	57                   	push   edi
c001ab21:	53                   	push   ebx
c001ab22:	56                   	push   esi
c001ab23:	55                   	push   ebp
c001ab24:	e8 61 f7 ff ff       	call   c001a28a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ab29:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001ab2e:	83 c4 20             	add    esp,0x20
c001ab31:	57                   	push   edi
c001ab32:	53                   	push   ebx
c001ab33:	56                   	push   esi
c001ab34:	55                   	push   ebp
c001ab35:	e8 90 f8 ff ff       	call   c001a3ca <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001ab3a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001ab3e:	57                   	push   edi
c001ab3f:	53                   	push   ebx
c001ab40:	56                   	push   esi
c001ab41:	55                   	push   ebp
c001ab42:	e8 ed f7 ff ff       	call   c001a334 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ab47:	b9 09 00 00 00       	mov    ecx,0x9
c001ab4c:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001ab51:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001ab55:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001ab59:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001ab5d:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001ab61:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001ab65:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001ab69:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001ab6d:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001ab71:	83 ec 0c             	sub    esp,0xc
c001ab74:	fc                   	cld    
c001ab75:	89 e7                	mov    edi,esp
c001ab77:	8d 74 24 58          	lea    esi,[esp+0x58]
c001ab7b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ab7d:	55                   	push   ebp
c001ab7e:	e8 15 fd ff ff       	call   c001a898 <PCI::foundDevice(PCIDeviceInfo)>
c001ab83:	81 c4 8c 00 00 00    	add    esp,0x8c
c001ab89:	5b                   	pop    ebx
c001ab8a:	5e                   	pop    esi
c001ab8b:	5f                   	pop    edi
c001ab8c:	5d                   	pop    ebp
c001ab8d:	c3                   	ret    

c001ab8e <PCI::checkDevice(unsigned char, unsigned char)>:
c001ab8e:	55                   	push   ebp
c001ab8f:	57                   	push   edi
c001ab90:	56                   	push   esi
c001ab91:	53                   	push   ebx
c001ab92:	83 ec 0c             	sub    esp,0xc
c001ab95:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001ab99:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001ab9e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001aba3:	6a 00                	push   0x0
c001aba5:	56                   	push   esi
c001aba6:	57                   	push   edi
c001aba7:	55                   	push   ebp
c001aba8:	e8 87 f7 ff ff       	call   c001a334 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001abad:	6a 00                	push   0x0
c001abaf:	56                   	push   esi
c001abb0:	57                   	push   edi
c001abb1:	55                   	push   ebp
c001abb2:	e8 5b fe ff ff       	call   c001aa12 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001abb7:	83 c4 20             	add    esp,0x20
c001abba:	6a 00                	push   0x0
c001abbc:	56                   	push   esi
c001abbd:	57                   	push   edi
c001abbe:	55                   	push   ebp
c001abbf:	e8 94 f7 ff ff       	call   c001a358 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001abc4:	83 c4 10             	add    esp,0x10
c001abc7:	a8 80                	test   al,0x80
c001abc9:	74 2d                	je     c001abf8 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001abcb:	bb 01 00 00 00       	mov    ebx,0x1
c001abd0:	53                   	push   ebx
c001abd1:	56                   	push   esi
c001abd2:	57                   	push   edi
c001abd3:	55                   	push   ebp
c001abd4:	e8 5b f7 ff ff       	call   c001a334 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001abd9:	83 c4 10             	add    esp,0x10
c001abdc:	0f b7 c0             	movzx  eax,ax
c001abdf:	3d ff ff 00 00       	cmp    eax,0xffff
c001abe4:	74 0c                	je     c001abf2 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001abe6:	53                   	push   ebx
c001abe7:	56                   	push   esi
c001abe8:	57                   	push   edi
c001abe9:	55                   	push   ebp
c001abea:	e8 23 fe ff ff       	call   c001aa12 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001abef:	83 c4 10             	add    esp,0x10
c001abf2:	43                   	inc    ebx
c001abf3:	83 fb 08             	cmp    ebx,0x8
c001abf6:	75 d8                	jne    c001abd0 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001abf8:	83 c4 0c             	add    esp,0xc
c001abfb:	5b                   	pop    ebx
c001abfc:	5e                   	pop    esi
c001abfd:	5f                   	pop    edi
c001abfe:	5d                   	pop    ebp
c001abff:	c3                   	ret    

c001ac00 <PCI::detect()>:
c001ac00:	56                   	push   esi
c001ac01:	53                   	push   ebx
c001ac02:	53                   	push   ebx
c001ac03:	31 db                	xor    ebx,ebx
c001ac05:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ac09:	6a 00                	push   0x0
c001ac0b:	6a 00                	push   0x0
c001ac0d:	6a 00                	push   0x0
c001ac0f:	56                   	push   esi
c001ac10:	e8 43 f7 ff ff       	call   c001a358 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ac15:	83 c4 10             	add    esp,0x10
c001ac18:	a8 80                	test   al,0x80
c001ac1a:	75 21                	jne    c001ac3d <PCI::detect()+0x3d>
c001ac1c:	51                   	push   ecx
c001ac1d:	51                   	push   ecx
c001ac1e:	6a 00                	push   0x0
c001ac20:	56                   	push   esi
c001ac21:	e8 4e fc ff ff       	call   c001a874 <PCI::checkBus(unsigned char)>
c001ac26:	83 c4 10             	add    esp,0x10
c001ac29:	eb 2a                	jmp    c001ac55 <PCI::detect()+0x55>
c001ac2b:	52                   	push   edx
c001ac2c:	52                   	push   edx
c001ac2d:	53                   	push   ebx
c001ac2e:	43                   	inc    ebx
c001ac2f:	56                   	push   esi
c001ac30:	e8 3f fc ff ff       	call   c001a874 <PCI::checkBus(unsigned char)>
c001ac35:	83 c4 10             	add    esp,0x10
c001ac38:	83 fb 08             	cmp    ebx,0x8
c001ac3b:	74 18                	je     c001ac55 <PCI::detect()+0x55>
c001ac3d:	53                   	push   ebx
c001ac3e:	6a 00                	push   0x0
c001ac40:	6a 00                	push   0x0
c001ac42:	56                   	push   esi
c001ac43:	e8 ec f6 ff ff       	call   c001a334 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ac48:	83 c4 10             	add    esp,0x10
c001ac4b:	0f b7 c0             	movzx  eax,ax
c001ac4e:	3d ff ff 00 00       	cmp    eax,0xffff
c001ac53:	74 d6                	je     c001ac2b <PCI::detect()+0x2b>
c001ac55:	58                   	pop    eax
c001ac56:	5b                   	pop    ebx
c001ac57:	5e                   	pop    esi
c001ac58:	c3                   	ret    
c001ac59:	90                   	nop

c001ac5a <IDE::close(int, int, void*)>:
c001ac5a:	83 c8 ff             	or     eax,0xffffffff
c001ac5d:	c3                   	ret    

c001ac5e <IDE::IDE()>:
c001ac5e:	83 ec 0c             	sub    esp,0xc
c001ac61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac65:	83 ec 08             	sub    esp,0x8
c001ac68:	68 04 1b 02 c0       	push   0xc0021b04
c001ac6d:	50                   	push   eax
c001ac6e:	e8 ed 14 ff ff       	call   c000c160 <HardDiskController::HardDiskController(char const*)>
c001ac73:	83 c4 10             	add    esp,0x10
c001ac76:	ba 94 1b 02 c0       	mov    edx,0xc0021b94
c001ac7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac7f:	89 10                	mov    DWORD PTR [eax],edx
c001ac81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac85:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001ac8c:	90                   	nop
c001ac8d:	83 c4 0c             	add    esp,0xc
c001ac90:	c3                   	ret    
c001ac91:	90                   	nop

c001ac92 <IDE::prepareInterrupt(unsigned char)>:
c001ac92:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ac97:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac9b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001aca3:	c3                   	ret    

c001aca4 <selectDrive(unsigned char, unsigned char)>:
c001aca4:	c3                   	ret    
c001aca5:	90                   	nop

c001aca6 <IDE::getBase(unsigned char)>:
c001aca6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001acab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acaf:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001acb7:	c3                   	ret    

c001acb8 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001acb8:	55                   	push   ebp
c001acb9:	57                   	push   edi
c001acba:	56                   	push   esi
c001acbb:	53                   	push   ebx
c001acbc:	83 ec 1c             	sub    esp,0x1c
c001acbf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001acc3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001acc7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001acca:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001acce:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001acd2:	80 f9 03             	cmp    cl,0x3
c001acd5:	77 4f                	ja     c001ad26 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001acd7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001acdb:	0f b6 fa             	movzx  edi,dl
c001acde:	0f b6 db             	movzx  ebx,bl
c001ace1:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001ace4:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001ace9:	80 ca 80             	or     dl,0x80
c001acec:	52                   	push   edx
c001aced:	6a 0c                	push   0xc
c001acef:	57                   	push   edi
c001acf0:	56                   	push   esi
c001acf1:	e8 c2 ff ff ff       	call   c001acb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001acf6:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001acfb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001acff:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001ad03:	ee                   	out    dx,al
c001ad04:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ad09:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001ad0d:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ad11:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ad15:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ad1d:	83 c4 2c             	add    esp,0x2c
c001ad20:	5b                   	pop    ebx
c001ad21:	5e                   	pop    esi
c001ad22:	5f                   	pop    edi
c001ad23:	5d                   	pop    ebp
c001ad24:	eb 92                	jmp    c001acb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad26:	0f b6 cb             	movzx  ecx,bl
c001ad29:	83 f9 07             	cmp    ecx,0x7
c001ad2c:	77 12                	ja     c001ad40 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001ad2e:	0f b6 d2             	movzx  edx,dl
c001ad31:	0f b6 db             	movzx  ebx,bl
c001ad34:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001ad3c:	01 da                	add    edx,ebx
c001ad3e:	eb 2f                	jmp    c001ad6f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ad40:	83 f9 0d             	cmp    ecx,0xd
c001ad43:	77 13                	ja     c001ad58 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001ad45:	0f b6 d2             	movzx  edx,dl
c001ad48:	0f b6 db             	movzx  ebx,bl
c001ad4b:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001ad52:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ad56:	eb 17                	jmp    c001ad6f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ad58:	83 f9 15             	cmp    ecx,0x15
c001ad5b:	77 13                	ja     c001ad70 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001ad5d:	0f b6 d2             	movzx  edx,dl
c001ad60:	0f b6 db             	movzx  ebx,bl
c001ad63:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001ad6b:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ad6f:	ee                   	out    dx,al
c001ad70:	83 c4 1c             	add    esp,0x1c
c001ad73:	5b                   	pop    ebx
c001ad74:	5e                   	pop    esi
c001ad75:	5f                   	pop    edi
c001ad76:	5d                   	pop    ebp
c001ad77:	c3                   	ret    

c001ad78 <IDE::read(unsigned char, unsigned char)>:
c001ad78:	55                   	push   ebp
c001ad79:	57                   	push   edi
c001ad7a:	56                   	push   esi
c001ad7b:	53                   	push   ebx
c001ad7c:	83 ec 1c             	sub    esp,0x1c
c001ad7f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ad83:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ad87:	8d 43 f8             	lea    eax,[ebx-0x8]
c001ad8a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001ad8e:	3c 03                	cmp    al,0x3
c001ad90:	77 40                	ja     c001add2 <IDE::read(unsigned char, unsigned char)+0x5a>
c001ad92:	0f b6 f9             	movzx  edi,cl
c001ad95:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001ad98:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ad9d:	0c 80                	or     al,0x80
c001ad9f:	50                   	push   eax
c001ada0:	6a 0c                	push   0xc
c001ada2:	57                   	push   edi
c001ada3:	56                   	push   esi
c001ada4:	e8 0f ff ff ff       	call   c001acb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ada9:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001adae:	0f b6 d3             	movzx  edx,bl
c001adb1:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001adb5:	ec                   	in     al,dx
c001adb6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001adba:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001adbf:	52                   	push   edx
c001adc0:	6a 0c                	push   0xc
c001adc2:	57                   	push   edi
c001adc3:	56                   	push   esi
c001adc4:	e8 ef fe ff ff       	call   c001acb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001adc9:	83 c4 20             	add    esp,0x20
c001adcc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001add0:	eb 4c                	jmp    c001ae1e <IDE::read(unsigned char, unsigned char)+0xa6>
c001add2:	0f b6 d3             	movzx  edx,bl
c001add5:	83 fa 07             	cmp    edx,0x7
c001add8:	77 12                	ja     c001adec <IDE::read(unsigned char, unsigned char)+0x74>
c001adda:	0f b6 c9             	movzx  ecx,cl
c001addd:	0f b6 d3             	movzx  edx,bl
c001ade0:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001ade8:	01 c2                	add    edx,eax
c001adea:	eb 31                	jmp    c001ae1d <IDE::read(unsigned char, unsigned char)+0xa5>
c001adec:	83 fa 0d             	cmp    edx,0xd
c001adef:	77 13                	ja     c001ae04 <IDE::read(unsigned char, unsigned char)+0x8c>
c001adf1:	0f b6 c9             	movzx  ecx,cl
c001adf4:	0f b6 d3             	movzx  edx,bl
c001adf7:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001adfe:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ae02:	eb 19                	jmp    c001ae1d <IDE::read(unsigned char, unsigned char)+0xa5>
c001ae04:	31 c0                	xor    eax,eax
c001ae06:	83 fa 15             	cmp    edx,0x15
c001ae09:	77 13                	ja     c001ae1e <IDE::read(unsigned char, unsigned char)+0xa6>
c001ae0b:	0f b6 c9             	movzx  ecx,cl
c001ae0e:	0f b6 d3             	movzx  edx,bl
c001ae11:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001ae19:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ae1d:	ec                   	in     al,dx
c001ae1e:	83 c4 1c             	add    esp,0x1c
c001ae21:	5b                   	pop    ebx
c001ae22:	5e                   	pop    esi
c001ae23:	5f                   	pop    edi
c001ae24:	5d                   	pop    ebp
c001ae25:	c3                   	ret    

c001ae26 <IDE::waitInterrupt(unsigned char)>:
c001ae26:	55                   	push   ebp
c001ae27:	57                   	push   edi
c001ae28:	56                   	push   esi
c001ae29:	53                   	push   ebx
c001ae2a:	31 db                	xor    ebx,ebx
c001ae2c:	83 ec 0c             	sub    esp,0xc
c001ae2f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ae33:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ae38:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ae40:	89 e8                	mov    eax,ebp
c001ae42:	84 c0                	test   al,al
c001ae44:	75 30                	jne    c001ae76 <IDE::waitInterrupt(unsigned char)+0x50>
c001ae46:	50                   	push   eax
c001ae47:	6a 0c                	push   0xc
c001ae49:	56                   	push   esi
c001ae4a:	57                   	push   edi
c001ae4b:	e8 28 ff ff ff       	call   c001ad78 <IDE::read(unsigned char, unsigned char)>
c001ae50:	83 c4 10             	add    esp,0x10
c001ae53:	a8 01                	test   al,0x1
c001ae55:	75 27                	jne    c001ae7e <IDE::waitInterrupt(unsigned char)+0x58>
c001ae57:	f6 c3 04             	test   bl,0x4
c001ae5a:	75 12                	jne    c001ae6e <IDE::waitInterrupt(unsigned char)+0x48>
c001ae5c:	83 fb 32             	cmp    ebx,0x32
c001ae5f:	7e 0d                	jle    c001ae6e <IDE::waitInterrupt(unsigned char)+0x48>
c001ae61:	83 ec 0c             	sub    esp,0xc
c001ae64:	6a 64                	push   0x64
c001ae66:	e8 91 a5 ff ff       	call   c00153fc <milliTenthSleep(unsigned int)>
c001ae6b:	83 c4 10             	add    esp,0x10
c001ae6e:	83 fb 3c             	cmp    ebx,0x3c
c001ae71:	74 0b                	je     c001ae7e <IDE::waitInterrupt(unsigned char)+0x58>
c001ae73:	43                   	inc    ebx
c001ae74:	eb c2                	jmp    c001ae38 <IDE::waitInterrupt(unsigned char)+0x12>
c001ae76:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ae7e:	83 c4 0c             	add    esp,0xc
c001ae81:	89 e8                	mov    eax,ebp
c001ae83:	5b                   	pop    ebx
c001ae84:	5e                   	pop    esi
c001ae85:	5f                   	pop    edi
c001ae86:	5d                   	pop    ebp
c001ae87:	c3                   	ret    

c001ae88 <ideChannel0IRQHandler(regs*, void*)>:
c001ae88:	83 ec 10             	sub    esp,0x10
c001ae8b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae8f:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ae96:	6a 07                	push   0x7
c001ae98:	6a 00                	push   0x0
c001ae9a:	50                   	push   eax
c001ae9b:	e8 d8 fe ff ff       	call   c001ad78 <IDE::read(unsigned char, unsigned char)>
c001aea0:	83 c4 1c             	add    esp,0x1c
c001aea3:	c3                   	ret    

c001aea4 <ideChannel1IRQHandler(regs*, void*)>:
c001aea4:	83 ec 10             	sub    esp,0x10
c001aea7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aeab:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001aeb2:	6a 07                	push   0x7
c001aeb4:	6a 01                	push   0x1
c001aeb6:	50                   	push   eax
c001aeb7:	e8 bc fe ff ff       	call   c001ad78 <IDE::read(unsigned char, unsigned char)>
c001aebc:	83 c4 1c             	add    esp,0x1c
c001aebf:	c3                   	ret    

c001aec0 <IDE::enableIRQs(unsigned char, bool)>:
c001aec0:	57                   	push   edi
c001aec1:	b8 02 00 00 00       	mov    eax,0x2
c001aec6:	56                   	push   esi
c001aec7:	53                   	push   ebx
c001aec8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aecc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001aed0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001aed5:	74 02                	je     c001aed9 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001aed7:	31 c0                	xor    eax,eax
c001aed9:	0f b6 db             	movzx  ebx,bl
c001aedc:	bf 04 00 00 00       	mov    edi,0x4
c001aee1:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001aee8:	50                   	push   eax
c001aee9:	6a 0c                	push   0xc
c001aeeb:	53                   	push   ebx
c001aeec:	56                   	push   esi
c001aeed:	e8 c6 fd ff ff       	call   c001acb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aef2:	83 c4 10             	add    esp,0x10
c001aef5:	50                   	push   eax
c001aef6:	6a 0c                	push   0xc
c001aef8:	53                   	push   ebx
c001aef9:	56                   	push   esi
c001aefa:	e8 79 fe ff ff       	call   c001ad78 <IDE::read(unsigned char, unsigned char)>
c001aeff:	83 c4 10             	add    esp,0x10
c001af02:	4f                   	dec    edi
c001af03:	75 f0                	jne    c001aef5 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001af05:	5b                   	pop    ebx
c001af06:	5e                   	pop    esi
c001af07:	5f                   	pop    edi
c001af08:	c3                   	ret    
c001af09:	90                   	nop

c001af0a <IDE::open(int, int, void*)>:
c001af0a:	55                   	push   ebp
c001af0b:	57                   	push   edi
c001af0c:	56                   	push   esi
c001af0d:	53                   	push   ebx
c001af0e:	83 ec 1c             	sub    esp,0x1c
c001af11:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001af15:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001af1e:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001af27:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001af2e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001af35:	0f 85 de 02 00 00    	jne    c001b219 <IDE::open(int, int, void*)+0x30f>
c001af3b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001af41:	88 04 24             	mov    BYTE PTR [esp],al
c001af44:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001af47:	83 e0 7f             	and    eax,0x7f
c001af4a:	83 f8 05             	cmp    eax,0x5
c001af4d:	74 05                	je     c001af54 <IDE::open(int, int, void*)+0x4a>
c001af4f:	83 f8 0f             	cmp    eax,0xf
c001af52:	75 32                	jne    c001af86 <IDE::open(int, int, void*)+0x7c>
c001af54:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001af5a:	83 e0 fc             	and    eax,0xfffffffc
c001af5d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001af64:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001af6a:	83 e0 fc             	and    eax,0xfffffffc
c001af6d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001af74:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001af7a:	83 e0 fc             	and    eax,0xfffffffc
c001af7d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001af84:	eb 14                	jmp    c001af9a <IDE::open(int, int, void*)+0x90>
c001af86:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001af90:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001af9a:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001afa1:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001afa8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001afac:	89 c6                	mov    esi,eax
c001afae:	bf f8 0c 00 00       	mov    edi,0xcf8
c001afb3:	c1 e6 10             	shl    esi,0x10
c001afb6:	89 e8                	mov    eax,ebp
c001afb8:	89 fa                	mov    edx,edi
c001afba:	c1 e0 0b             	shl    eax,0xb
c001afbd:	09 f0                	or     eax,esi
c001afbf:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001afc6:	c1 e6 08             	shl    esi,0x8
c001afc9:	09 c6                	or     esi,eax
c001afcb:	89 f0                	mov    eax,esi
c001afcd:	0d 08 00 00 80       	or     eax,0x80000008
c001afd2:	ef                   	out    dx,eax
c001afd3:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001afd8:	89 ca                	mov    edx,ecx
c001afda:	ed                   	in     eax,dx
c001afdb:	c1 e8 10             	shr    eax,0x10
c001afde:	3d ff ff 00 00       	cmp    eax,0xffff
c001afe3:	0f 84 f9 00 00 00    	je     c001b0e2 <IDE::open(int, int, void*)+0x1d8>
c001afe9:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001afef:	89 fa                	mov    edx,edi
c001aff1:	89 f0                	mov    eax,esi
c001aff3:	ef                   	out    dx,eax
c001aff4:	b0 fe                	mov    al,0xfe
c001aff6:	89 ca                	mov    edx,ecx
c001aff8:	ee                   	out    dx,al
c001aff9:	89 f0                	mov    eax,esi
c001affb:	89 fa                	mov    edx,edi
c001affd:	ef                   	out    dx,eax
c001affe:	89 ca                	mov    edx,ecx
c001b000:	ed                   	in     eax,dx
c001b001:	3c fe                	cmp    al,0xfe
c001b003:	0f 85 a9 00 00 00    	jne    c001b0b2 <IDE::open(int, int, void*)+0x1a8>
c001b009:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c001b00f:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001b016:	74 33                	je     c001b04b <IDE::open(int, int, void*)+0x141>
c001b018:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001b01e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001b022:	40                   	inc    eax
c001b023:	83 ec 0c             	sub    esp,0xc
c001b026:	0f b6 c0             	movzx  eax,al
c001b029:	50                   	push   eax
c001b02a:	55                   	push   ebp
c001b02b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b02f:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001b035:	51                   	push   ecx
c001b036:	e8 55 3d ff ff       	call   c000ed90 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001b03b:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001b040:	83 c4 1c             	add    esp,0x1c
c001b043:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b049:	eb 0a                	jmp    c001b055 <IDE::open(int, int, void*)+0x14b>
c001b04b:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001b055:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001b05c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001b063:	c1 e1 10             	shl    ecx,0x10
c001b066:	c1 e0 08             	shl    eax,0x8
c001b069:	bf f8 0c 00 00       	mov    edi,0xcf8
c001b06e:	09 c1                	or     ecx,eax
c001b070:	89 fa                	mov    edx,edi
c001b072:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001b079:	c1 e0 0b             	shl    eax,0xb
c001b07c:	09 c1                	or     ecx,eax
c001b07e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001b084:	89 c8                	mov    eax,ecx
c001b086:	ef                   	out    dx,eax
c001b087:	be fc 0c 00 00       	mov    esi,0xcfc
c001b08c:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001b092:	89 f2                	mov    edx,esi
c001b094:	ee                   	out    dx,al
c001b095:	89 c8                	mov    eax,ecx
c001b097:	89 fa                	mov    edx,edi
c001b099:	ef                   	out    dx,eax
c001b09a:	89 f2                	mov    edx,esi
c001b09c:	ed                   	in     eax,dx
c001b09d:	0f b6 c0             	movzx  eax,al
c001b0a0:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001b0a6:	74 4a                	je     c001b0f2 <IDE::open(int, int, void*)+0x1e8>
c001b0a8:	83 ec 0c             	sub    esp,0xc
c001b0ab:	68 1c 1b 02 c0       	push   0xc0021b1c
c001b0b0:	eb 38                	jmp    c001b0ea <IDE::open(int, int, void*)+0x1e0>
c001b0b2:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001b0bb:	75 1b                	jne    c001b0d8 <IDE::open(int, int, void*)+0x1ce>
c001b0bd:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001b0c1:	3d 80 00 00 00       	cmp    eax,0x80
c001b0c6:	74 07                	je     c001b0cf <IDE::open(int, int, void*)+0x1c5>
c001b0c8:	3d 8a 00 00 00       	cmp    eax,0x8a
c001b0cd:	75 09                	jne    c001b0d8 <IDE::open(int, int, void*)+0x1ce>
c001b0cf:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b0d6:	eb 1a                	jmp    c001b0f2 <IDE::open(int, int, void*)+0x1e8>
c001b0d8:	83 ec 0c             	sub    esp,0xc
c001b0db:	68 24 1b 02 c0       	push   0xc0021b24
c001b0e0:	eb 08                	jmp    c001b0ea <IDE::open(int, int, void*)+0x1e0>
c001b0e2:	83 ec 0c             	sub    esp,0xc
c001b0e5:	68 55 1b 02 c0       	push   0xc0021b55
c001b0ea:	e8 28 58 ff ff       	call   c0010917 <KePanic(char const*)>
c001b0ef:	83 c4 10             	add    esp,0x10
c001b0f2:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001b0f9:	74 1a                	je     c001b115 <IDE::open(int, int, void*)+0x20b>
c001b0fb:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001b101:	83 e0 fc             	and    eax,0xfffffffc
c001b104:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001b10b:	83 c0 08             	add    eax,0x8
c001b10e:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001b115:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001b11b:	89 c2                	mov    edx,eax
c001b11d:	83 e2 0f             	and    edx,0xf
c001b120:	83 fa 08             	cmp    edx,0x8
c001b123:	75 0a                	jne    c001b12f <IDE::open(int, int, void*)+0x225>
c001b125:	83 e8 02             	sub    eax,0x2
c001b128:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b12f:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001b135:	89 c2                	mov    edx,eax
c001b137:	83 e2 0f             	and    edx,0xf
c001b13a:	83 fa 08             	cmp    edx,0x8
c001b13d:	75 0a                	jne    c001b149 <IDE::open(int, int, void*)+0x23f>
c001b13f:	83 e8 02             	sub    eax,0x2
c001b142:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b149:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001b150:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001b157:	89 d0                	mov    eax,edx
c001b159:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b15c:	8d 7a 01             	lea    edi,[edx+0x1]
c001b15f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b163:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001b167:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b16b:	83 e1 3f             	and    ecx,0x3f
c001b16e:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b172:	89 f9                	mov    ecx,edi
c001b174:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001b17b:	0f b6 c9             	movzx  ecx,cl
c001b17e:	8d 78 02             	lea    edi,[eax+0x2]
c001b181:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b184:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b188:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001b18c:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b190:	83 e2 3f             	and    edx,0x3f
c001b193:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b197:	89 f9                	mov    ecx,edi
c001b199:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001b19f:	0f b6 d1             	movzx  edx,cl
c001b1a2:	8d 78 03             	lea    edi,[eax+0x3]
c001b1a5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b1a8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b1ac:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001b1b0:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b1b4:	83 e1 3f             	and    ecx,0x3f
c001b1b7:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b1bb:	89 f9                	mov    ecx,edi
c001b1bd:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001b1c3:	0f b6 c9             	movzx  ecx,cl
c001b1c6:	8d 78 04             	lea    edi,[eax+0x4]
c001b1c9:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b1cc:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b1d0:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001b1d4:	89 fa                	mov    edx,edi
c001b1d6:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001b1dc:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b1e0:	83 e2 3f             	and    edx,0x3f
c001b1e3:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b1e7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001b1ee:	66 85 f6             	test   si,si
c001b1f1:	74 65                	je     c001b258 <IDE::open(int, int, void*)+0x34e>
c001b1f3:	89 f9                	mov    ecx,edi
c001b1f5:	83 c0 05             	add    eax,0x5
c001b1f8:	0f b6 d1             	movzx  edx,cl
c001b1fb:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b1fe:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b202:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001b206:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001b20c:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001b210:	83 e0 3f             	and    eax,0x3f
c001b213:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001b217:	eb 3f                	jmp    c001b258 <IDE::open(int, int, void*)+0x34e>
c001b219:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001b21f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b226:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b22d:	05 06 02 00 00       	add    eax,0x206
c001b232:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b239:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001b240:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b247:	05 06 02 00 00       	add    eax,0x206
c001b24c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b253:	e9 bd fe ff ff       	jmp    c001b115 <IDE::open(int, int, void*)+0x20b>
c001b258:	50                   	push   eax
c001b259:	50                   	push   eax
c001b25a:	6a 00                	push   0x0
c001b25c:	53                   	push   ebx
c001b25d:	e8 30 fa ff ff       	call   c001ac92 <IDE::prepareInterrupt(unsigned char)>
c001b262:	5a                   	pop    edx
c001b263:	59                   	pop    ecx
c001b264:	6a 01                	push   0x1
c001b266:	53                   	push   ebx
c001b267:	e8 26 fa ff ff       	call   c001ac92 <IDE::prepareInterrupt(unsigned char)>
c001b26c:	83 c4 0c             	add    esp,0xc
c001b26f:	6a 00                	push   0x0
c001b271:	6a 00                	push   0x0
c001b273:	53                   	push   ebx
c001b274:	e8 47 fc ff ff       	call   c001aec0 <IDE::enableIRQs(unsigned char, bool)>
c001b279:	83 c4 0c             	add    esp,0xc
c001b27c:	6a 00                	push   0x0
c001b27e:	6a 01                	push   0x1
c001b280:	53                   	push   ebx
c001b281:	e8 3a fc ff ff       	call   c001aec0 <IDE::enableIRQs(unsigned char, bool)>
c001b286:	83 c4 10             	add    esp,0x10
c001b289:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001b290:	74 34                	je     c001b2c6 <IDE::open(int, int, void*)+0x3bc>
c001b292:	83 ec 0c             	sub    esp,0xc
c001b295:	53                   	push   ebx
c001b296:	6a 01                	push   0x1
c001b298:	68 88 ae 01 c0       	push   0xc001ae88
c001b29d:	6a 0e                	push   0xe
c001b29f:	53                   	push   ebx
c001b2a0:	e8 25 0b ff ff       	call   c000bdca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b2a5:	83 c4 14             	add    esp,0x14
c001b2a8:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b2ae:	53                   	push   ebx
c001b2af:	6a 01                	push   0x1
c001b2b1:	68 a4 ae 01 c0       	push   0xc001aea4
c001b2b6:	6a 0f                	push   0xf
c001b2b8:	53                   	push   ebx
c001b2b9:	e8 0c 0b ff ff       	call   c000bdca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b2be:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001b2c4:	eb 38                	jmp    c001b2fe <IDE::open(int, int, void*)+0x3f4>
c001b2c6:	83 ec 0c             	sub    esp,0xc
c001b2c9:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001b2d3:	53                   	push   ebx
c001b2d4:	6a 00                	push   0x0
c001b2d6:	68 88 ae 01 c0       	push   0xc001ae88
c001b2db:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001b2e1:	53                   	push   ebx
c001b2e2:	e8 e3 0a ff ff       	call   c000bdca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b2e7:	83 c4 14             	add    esp,0x14
c001b2ea:	53                   	push   ebx
c001b2eb:	6a 00                	push   0x0
c001b2ed:	68 a4 ae 01 c0       	push   0xc001aea4
c001b2f2:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001b2f8:	53                   	push   ebx
c001b2f9:	e8 cc 0a ff ff       	call   c000bdca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b2fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b300:	83 c4 20             	add    esp,0x20
c001b303:	83 ec 0c             	sub    esp,0xc
c001b306:	53                   	push   ebx
c001b307:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b30a:	83 c4 0c             	add    esp,0xc
c001b30d:	6a 07                	push   0x7
c001b30f:	6a 00                	push   0x0
c001b311:	53                   	push   ebx
c001b312:	e8 61 fa ff ff       	call   c001ad78 <IDE::read(unsigned char, unsigned char)>
c001b317:	83 c4 0c             	add    esp,0xc
c001b31a:	6a 07                	push   0x7
c001b31c:	6a 01                	push   0x1
c001b31e:	53                   	push   ebx
c001b31f:	e8 54 fa ff ff       	call   c001ad78 <IDE::read(unsigned char, unsigned char)>
c001b324:	83 c4 0c             	add    esp,0xc
c001b327:	6a 01                	push   0x1
c001b329:	6a 00                	push   0x0
c001b32b:	53                   	push   ebx
c001b32c:	e8 8f fb ff ff       	call   c001aec0 <IDE::enableIRQs(unsigned char, bool)>
c001b331:	83 c4 0c             	add    esp,0xc
c001b334:	6a 01                	push   0x1
c001b336:	6a 01                	push   0x1
c001b338:	53                   	push   ebx
c001b339:	e8 82 fb ff ff       	call   c001aec0 <IDE::enableIRQs(unsigned char, bool)>
c001b33e:	83 c4 2c             	add    esp,0x2c
c001b341:	31 c0                	xor    eax,eax
c001b343:	5b                   	pop    ebx
c001b344:	5e                   	pop    esi
c001b345:	5f                   	pop    edi
c001b346:	5d                   	pop    ebp
c001b347:	c3                   	ret    

c001b348 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001b348:	55                   	push   ebp
c001b349:	57                   	push   edi
c001b34a:	56                   	push   esi
c001b34b:	53                   	push   ebx
c001b34c:	83 ec 1c             	sub    esp,0x1c
c001b34f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b353:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b357:	8d 42 f8             	lea    eax,[edx-0x8]
c001b35a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b35e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b362:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b366:	3c 03                	cmp    al,0x3
c001b368:	77 5a                	ja     c001b3c4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001b36a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b36e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b372:	0f b6 db             	movzx  ebx,bl
c001b375:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001b378:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b37d:	0c 80                	or     al,0x80
c001b37f:	50                   	push   eax
c001b380:	6a 0c                	push   0xc
c001b382:	53                   	push   ebx
c001b383:	56                   	push   esi
c001b384:	e8 2f f9 ff ff       	call   c001acb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b389:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b38e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b396:	0f b6 d2             	movzx  edx,dl
c001b399:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b39d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b39f:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b3a4:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001b3a8:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b3ac:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b3b0:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b3b8:	83 c4 2c             	add    esp,0x2c
c001b3bb:	5b                   	pop    ebx
c001b3bc:	5e                   	pop    esi
c001b3bd:	5f                   	pop    edi
c001b3be:	5d                   	pop    ebp
c001b3bf:	e9 f4 f8 ff ff       	jmp    c001acb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b3c4:	0f b6 c2             	movzx  eax,dl
c001b3c7:	83 f8 07             	cmp    eax,0x7
c001b3ca:	77 12                	ja     c001b3de <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001b3cc:	0f b6 c2             	movzx  eax,dl
c001b3cf:	0f b6 db             	movzx  ebx,bl
c001b3d2:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001b3da:	01 c2                	add    edx,eax
c001b3dc:	eb 2f                	jmp    c001b40d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b3de:	83 f8 0d             	cmp    eax,0xd
c001b3e1:	77 13                	ja     c001b3f6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001b3e3:	0f b6 db             	movzx  ebx,bl
c001b3e6:	0f b6 d2             	movzx  edx,dl
c001b3e9:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001b3f0:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b3f4:	eb 17                	jmp    c001b40d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b3f6:	83 f8 15             	cmp    eax,0x15
c001b3f9:	77 14                	ja     c001b40f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001b3fb:	0f b6 db             	movzx  ebx,bl
c001b3fe:	0f b6 d2             	movzx  edx,dl
c001b401:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001b409:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b40d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b40f:	83 c4 1c             	add    esp,0x1c
c001b412:	5b                   	pop    ebx
c001b413:	5e                   	pop    esi
c001b414:	5f                   	pop    edi
c001b415:	5d                   	pop    ebp
c001b416:	c3                   	ret    
c001b417:	90                   	nop

c001b418 <IDE::detect()>:
c001b418:	55                   	push   ebp
c001b419:	57                   	push   edi
c001b41a:	56                   	push   esi
c001b41b:	53                   	push   ebx
c001b41c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b422:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001b429:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001b430:	0f 85 a4 02 00 00    	jne    c001b6da <IDE::detect()+0x2c2>
c001b436:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001b43d:	31 f6                	xor    esi,esi
c001b43f:	31 ed                	xor    ebp,ebp
c001b441:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b449:	89 e8                	mov    eax,ebp
c001b44b:	c1 e0 06             	shl    eax,0x6
c001b44e:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001b456:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b45a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b45e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b462:	c1 e0 04             	shl    eax,0x4
c001b465:	83 c8 a0             	or     eax,0xffffffa0
c001b468:	0f b6 c0             	movzx  eax,al
c001b46b:	50                   	push   eax
c001b46c:	6a 06                	push   0x6
c001b46e:	56                   	push   esi
c001b46f:	53                   	push   ebx
c001b470:	e8 43 f8 ff ff       	call   c001acb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b475:	83 c4 0c             	add    esp,0xc
c001b478:	6a 0c                	push   0xc
c001b47a:	56                   	push   esi
c001b47b:	53                   	push   ebx
c001b47c:	e8 f7 f8 ff ff       	call   c001ad78 <IDE::read(unsigned char, unsigned char)>
c001b481:	83 c4 0c             	add    esp,0xc
c001b484:	6a 0c                	push   0xc
c001b486:	56                   	push   esi
c001b487:	53                   	push   ebx
c001b488:	e8 eb f8 ff ff       	call   c001ad78 <IDE::read(unsigned char, unsigned char)>
c001b48d:	83 c4 0c             	add    esp,0xc
c001b490:	6a 0c                	push   0xc
c001b492:	56                   	push   esi
c001b493:	53                   	push   ebx
c001b494:	e8 df f8 ff ff       	call   c001ad78 <IDE::read(unsigned char, unsigned char)>
c001b499:	83 c4 0c             	add    esp,0xc
c001b49c:	6a 0c                	push   0xc
c001b49e:	56                   	push   esi
c001b49f:	53                   	push   ebx
c001b4a0:	e8 d3 f8 ff ff       	call   c001ad78 <IDE::read(unsigned char, unsigned char)>
c001b4a5:	68 ec 00 00 00       	push   0xec
c001b4aa:	6a 07                	push   0x7
c001b4ac:	56                   	push   esi
c001b4ad:	53                   	push   ebx
c001b4ae:	e8 05 f8 ff ff       	call   c001acb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b4b3:	83 c4 1c             	add    esp,0x1c
c001b4b6:	6a 0c                	push   0xc
c001b4b8:	56                   	push   esi
c001b4b9:	53                   	push   ebx
c001b4ba:	e8 b9 f8 ff ff       	call   c001ad78 <IDE::read(unsigned char, unsigned char)>
c001b4bf:	83 c4 0c             	add    esp,0xc
c001b4c2:	6a 0c                	push   0xc
c001b4c4:	56                   	push   esi
c001b4c5:	53                   	push   ebx
c001b4c6:	e8 ad f8 ff ff       	call   c001ad78 <IDE::read(unsigned char, unsigned char)>
c001b4cb:	83 c4 0c             	add    esp,0xc
c001b4ce:	6a 0c                	push   0xc
c001b4d0:	56                   	push   esi
c001b4d1:	53                   	push   ebx
c001b4d2:	e8 a1 f8 ff ff       	call   c001ad78 <IDE::read(unsigned char, unsigned char)>
c001b4d7:	83 c4 0c             	add    esp,0xc
c001b4da:	6a 0c                	push   0xc
c001b4dc:	56                   	push   esi
c001b4dd:	53                   	push   ebx
c001b4de:	e8 95 f8 ff ff       	call   c001ad78 <IDE::read(unsigned char, unsigned char)>
c001b4e3:	83 c4 0c             	add    esp,0xc
c001b4e6:	6a 0c                	push   0xc
c001b4e8:	56                   	push   esi
c001b4e9:	53                   	push   ebx
c001b4ea:	e8 89 f8 ff ff       	call   c001ad78 <IDE::read(unsigned char, unsigned char)>
c001b4ef:	83 c4 10             	add    esp,0x10
c001b4f2:	84 c0                	test   al,al
c001b4f4:	0f 84 60 01 00 00    	je     c001b65a <IDE::detect()+0x242>
c001b4fa:	31 ff                	xor    edi,edi
c001b4fc:	50                   	push   eax
c001b4fd:	6a 0c                	push   0xc
c001b4ff:	56                   	push   esi
c001b500:	53                   	push   ebx
c001b501:	e8 72 f8 ff ff       	call   c001ad78 <IDE::read(unsigned char, unsigned char)>
c001b506:	83 c4 10             	add    esp,0x10
c001b509:	a8 01                	test   al,0x1
c001b50b:	0f 85 6a 01 00 00    	jne    c001b67b <IDE::detect()+0x263>
c001b511:	a8 80                	test   al,0x80
c001b513:	75 04                	jne    c001b519 <IDE::detect()+0x101>
c001b515:	a8 08                	test   al,0x8
c001b517:	75 23                	jne    c001b53c <IDE::detect()+0x124>
c001b519:	47                   	inc    edi
c001b51a:	81 ff 17 01 00 00    	cmp    edi,0x117
c001b520:	7e da                	jle    c001b4fc <IDE::detect()+0xe4>
c001b522:	83 ec 0c             	sub    esp,0xc
c001b525:	6a 32                	push   0x32
c001b527:	e8 d0 9e ff ff       	call   c00153fc <milliTenthSleep(unsigned int)>
c001b52c:	83 c4 10             	add    esp,0x10
c001b52f:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001b535:	75 c5                	jne    c001b4fc <IDE::detect()+0xe4>
c001b537:	e9 3f 01 00 00       	jmp    c001b67b <IDE::detect()+0x263>
c001b53c:	31 c9                	xor    ecx,ecx
c001b53e:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001b542:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b546:	83 ec 0c             	sub    esp,0xc
c001b549:	68 80 00 00 00       	push   0x80
c001b54e:	57                   	push   edi
c001b54f:	6a 00                	push   0x0
c001b551:	56                   	push   esi
c001b552:	53                   	push   ebx
c001b553:	e8 f0 fd ff ff       	call   c001b348 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001b558:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001b55d:	89 e8                	mov    eax,ebp
c001b55f:	89 d1                	mov    ecx,edx
c001b561:	c1 e0 06             	shl    eax,0x6
c001b564:	01 d8                	add    eax,ebx
c001b566:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001b56d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001b574:	89 f2                	mov    edx,esi
c001b576:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001b57c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001b580:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001b586:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b58a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001b591:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001b599:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001b5a0:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001b5a8:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001b5ae:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001b5b5:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001b5bb:	8d 54 24 58          	lea    edx,[esp+0x58]
c001b5bf:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b5c3:	83 c4 20             	add    esp,0x20
c001b5c6:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001b5c9:	83 c0 02             	add    eax,0x2
c001b5cc:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001b5d2:	83 c7 02             	add    edi,0x2
c001b5d5:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001b5d8:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001b5de:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001b5e2:	75 e2                	jne    c001b5c6 <IDE::detect()+0x1ae>
c001b5e4:	89 e8                	mov    eax,ebp
c001b5e6:	c1 e0 06             	shl    eax,0x6
c001b5e9:	01 d8                	add    eax,ebx
c001b5eb:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001b5f2:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001b5f9:	c1 ea 09             	shr    edx,0x9
c001b5fc:	83 e2 01             	and    edx,0x1
c001b5ff:	80 e1 01             	and    cl,0x1
c001b602:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001b608:	75 22                	jne    c001b62c <IDE::detect()+0x214>
c001b60a:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001b611:	74 46                	je     c001b659 <IDE::detect()+0x241>
c001b613:	83 ec 0c             	sub    esp,0xc
c001b616:	68 7c 01 00 00       	push   0x17c
c001b61b:	e8 8e c4 fe ff       	call   c0007aae <malloc>
c001b620:	89 c7                	mov    edi,eax
c001b622:	89 04 24             	mov    DWORD PTR [esp],eax
c001b625:	e8 1a 05 00 00       	call   c001bb44 <ATA::ATA()>
c001b62a:	eb 17                	jmp    c001b643 <IDE::detect()+0x22b>
c001b62c:	83 ec 0c             	sub    esp,0xc
c001b62f:	68 84 01 00 00       	push   0x184
c001b634:	e8 75 c4 fe ff       	call   c0007aae <malloc>
c001b639:	89 c7                	mov    edi,eax
c001b63b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b63e:	e8 45 0e 00 00       	call   c001c488 <ATAPI::ATAPI()>
c001b643:	5a                   	pop    edx
c001b644:	59                   	pop    ecx
c001b645:	57                   	push   edi
c001b646:	53                   	push   ebx
c001b647:	e8 d2 07 ff ff       	call   c000be1e <Device::addChild(Device*)>
c001b64c:	8b 07                	mov    eax,DWORD PTR [edi]
c001b64e:	53                   	push   ebx
c001b64f:	55                   	push   ebp
c001b650:	6a 00                	push   0x0
c001b652:	57                   	push   edi
c001b653:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b656:	83 c4 20             	add    esp,0x20
c001b659:	45                   	inc    ebp
c001b65a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001b65f:	74 0d                	je     c001b66e <IDE::detect()+0x256>
c001b661:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001b669:	e9 db fd ff ff       	jmp    c001b449 <IDE::detect()+0x31>
c001b66e:	4e                   	dec    esi
c001b66f:	74 69                	je     c001b6da <IDE::detect()+0x2c2>
c001b671:	be 01 00 00 00       	mov    esi,0x1
c001b676:	e9 c6 fd ff ff       	jmp    c001b441 <IDE::detect()+0x29>
c001b67b:	50                   	push   eax
c001b67c:	6a 04                	push   0x4
c001b67e:	56                   	push   esi
c001b67f:	53                   	push   ebx
c001b680:	e8 f3 f6 ff ff       	call   c001ad78 <IDE::read(unsigned char, unsigned char)>
c001b685:	83 c4 0c             	add    esp,0xc
c001b688:	89 c7                	mov    edi,eax
c001b68a:	6a 05                	push   0x5
c001b68c:	56                   	push   esi
c001b68d:	53                   	push   ebx
c001b68e:	e8 e5 f6 ff ff       	call   c001ad78 <IDE::read(unsigned char, unsigned char)>
c001b693:	83 c4 10             	add    esp,0x10
c001b696:	89 f9                	mov    ecx,edi
c001b698:	0f b6 c0             	movzx  eax,al
c001b69b:	0f b6 f9             	movzx  edi,cl
c001b69e:	83 ff 14             	cmp    edi,0x14
c001b6a1:	75 07                	jne    c001b6aa <IDE::detect()+0x292>
c001b6a3:	3d eb 00 00 00       	cmp    eax,0xeb
c001b6a8:	eb 0a                	jmp    c001b6b4 <IDE::detect()+0x29c>
c001b6aa:	3d 96 00 00 00       	cmp    eax,0x96
c001b6af:	75 a9                	jne    c001b65a <IDE::detect()+0x242>
c001b6b1:	83 ff 69             	cmp    edi,0x69
c001b6b4:	75 a4                	jne    c001b65a <IDE::detect()+0x242>
c001b6b6:	68 a1 00 00 00       	push   0xa1
c001b6bb:	6a 07                	push   0x7
c001b6bd:	56                   	push   esi
c001b6be:	53                   	push   ebx
c001b6bf:	e8 f4 f5 ff ff       	call   c001acb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b6c4:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001b6cb:	e8 2c 9d ff ff       	call   c00153fc <milliTenthSleep(unsigned int)>
c001b6d0:	83 c4 10             	add    esp,0x10
c001b6d3:	b1 01                	mov    cl,0x1
c001b6d5:	e9 64 fe ff ff       	jmp    c001b53e <IDE::detect()+0x126>
c001b6da:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b6e0:	5b                   	pop    ebx
c001b6e1:	5e                   	pop    esi
c001b6e2:	5f                   	pop    edi
c001b6e3:	5d                   	pop    ebp
c001b6e4:	c3                   	ret    
c001b6e5:	90                   	nop

c001b6e6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001b6e6:	55                   	push   ebp
c001b6e7:	57                   	push   edi
c001b6e8:	56                   	push   esi
c001b6e9:	53                   	push   ebx
c001b6ea:	83 ec 1c             	sub    esp,0x1c
c001b6ed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b6f1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001b6f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6f9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001b6fd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b701:	88 c3                	mov    bl,al
c001b703:	25 ff 00 00 00       	and    eax,0xff
c001b708:	0f 84 88 00 00 00    	je     c001b796 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b70e:	83 ec 0c             	sub    esp,0xc
c001b711:	89 c7                	mov    edi,eax
c001b713:	68 7f 1b 02 c0       	push   0xc0021b7f
c001b718:	e8 cd f2 fe ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c001b71d:	83 c4 10             	add    esp,0x10
c001b720:	83 ff 01             	cmp    edi,0x1
c001b723:	74 6b                	je     c001b790 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001b725:	83 ff 02             	cmp    edi,0x2
c001b728:	75 58                	jne    c001b782 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001b72a:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001b72f:	01 ff                	add    edi,edi
c001b731:	50                   	push   eax
c001b732:	09 fe                	or     esi,edi
c001b734:	6a 01                	push   0x1
c001b736:	89 f0                	mov    eax,esi
c001b738:	0f b6 f0             	movzx  esi,al
c001b73b:	c1 e6 06             	shl    esi,0x6
c001b73e:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001b746:	50                   	push   eax
c001b747:	55                   	push   ebp
c001b748:	e8 2b f6 ff ff       	call   c001ad78 <IDE::read(unsigned char, unsigned char)>
c001b74d:	83 c4 10             	add    esp,0x10
c001b750:	a8 01                	test   al,0x1
c001b752:	74 02                	je     c001b756 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001b754:	b3 07                	mov    bl,0x7
c001b756:	a8 02                	test   al,0x2
c001b758:	74 02                	je     c001b75c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001b75a:	b3 03                	mov    bl,0x3
c001b75c:	a8 04                	test   al,0x4
c001b75e:	74 02                	je     c001b762 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001b760:	b3 14                	mov    bl,0x14
c001b762:	a8 08                	test   al,0x8
c001b764:	74 02                	je     c001b768 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001b766:	b3 03                	mov    bl,0x3
c001b768:	a8 10                	test   al,0x10
c001b76a:	74 02                	je     c001b76e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001b76c:	b3 15                	mov    bl,0x15
c001b76e:	a8 20                	test   al,0x20
c001b770:	74 02                	je     c001b774 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001b772:	b3 03                	mov    bl,0x3
c001b774:	a8 40                	test   al,0x40
c001b776:	74 02                	je     c001b77a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001b778:	b3 16                	mov    bl,0x16
c001b77a:	a8 80                	test   al,0x80
c001b77c:	74 18                	je     c001b796 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b77e:	b3 0d                	mov    bl,0xd
c001b780:	eb 14                	jmp    c001b796 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b782:	83 ff 03             	cmp    edi,0x3
c001b785:	74 0d                	je     c001b794 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001b787:	83 ff 04             	cmp    edi,0x4
c001b78a:	75 0a                	jne    c001b796 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b78c:	b3 08                	mov    bl,0x8
c001b78e:	eb 06                	jmp    c001b796 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b790:	b3 13                	mov    bl,0x13
c001b792:	eb 02                	jmp    c001b796 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b794:	b3 17                	mov    bl,0x17
c001b796:	83 c4 1c             	add    esp,0x1c
c001b799:	88 d8                	mov    al,bl
c001b79b:	5b                   	pop    ebx
c001b79c:	5e                   	pop    esi
c001b79d:	5f                   	pop    edi
c001b79e:	5d                   	pop    ebp
c001b79f:	c3                   	ret    

c001b7a0 <IDE::polling(unsigned char, unsigned int)>:
c001b7a0:	57                   	push   edi
c001b7a1:	56                   	push   esi
c001b7a2:	53                   	push   ebx
c001b7a3:	bb 04 00 00 00       	mov    ebx,0x4
c001b7a8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001b7ac:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b7b1:	52                   	push   edx
c001b7b2:	6a 0c                	push   0xc
c001b7b4:	56                   	push   esi
c001b7b5:	57                   	push   edi
c001b7b6:	e8 bd f5 ff ff       	call   c001ad78 <IDE::read(unsigned char, unsigned char)>
c001b7bb:	83 c4 10             	add    esp,0x10
c001b7be:	4b                   	dec    ebx
c001b7bf:	75 f0                	jne    c001b7b1 <IDE::polling(unsigned char, unsigned int)+0x11>
c001b7c1:	bb a0 86 01 00       	mov    ebx,0x186a0
c001b7c6:	50                   	push   eax
c001b7c7:	6a 0c                	push   0xc
c001b7c9:	56                   	push   esi
c001b7ca:	57                   	push   edi
c001b7cb:	e8 a8 f5 ff ff       	call   c001ad78 <IDE::read(unsigned char, unsigned char)>
c001b7d0:	83 c4 10             	add    esp,0x10
c001b7d3:	a8 01                	test   al,0x1
c001b7d5:	75 17                	jne    c001b7ee <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b7d7:	a8 20                	test   al,0x20
c001b7d9:	75 0f                	jne    c001b7ea <IDE::polling(unsigned char, unsigned int)+0x4a>
c001b7db:	4b                   	dec    ebx
c001b7dc:	74 10                	je     c001b7ee <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b7de:	a8 80                	test   al,0x80
c001b7e0:	75 e4                	jne    c001b7c6 <IDE::polling(unsigned char, unsigned int)+0x26>
c001b7e2:	a8 08                	test   al,0x8
c001b7e4:	74 e0                	je     c001b7c6 <IDE::polling(unsigned char, unsigned int)+0x26>
c001b7e6:	31 c0                	xor    eax,eax
c001b7e8:	eb 06                	jmp    c001b7f0 <IDE::polling(unsigned char, unsigned int)+0x50>
c001b7ea:	b0 01                	mov    al,0x1
c001b7ec:	eb 02                	jmp    c001b7f0 <IDE::polling(unsigned char, unsigned int)+0x50>
c001b7ee:	b0 02                	mov    al,0x2
c001b7f0:	5b                   	pop    ebx
c001b7f1:	5e                   	pop    esi
c001b7f2:	5f                   	pop    edi
c001b7f3:	c3                   	ret    

c001b7f4 <SATABus::close(int, int, void*)>:
c001b7f4:	31 c0                	xor    eax,eax
c001b7f6:	c3                   	ret    
c001b7f7:	90                   	nop

c001b7f8 <SATABus::detect()>:
c001b7f8:	c3                   	ret    
c001b7f9:	90                   	nop

c001b7fa <SATABus::SATABus()>:
c001b7fa:	83 ec 0c             	sub    esp,0xc
c001b7fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b801:	83 ec 08             	sub    esp,0x8
c001b804:	68 b8 1b 02 c0       	push   0xc0021bb8
c001b809:	50                   	push   eax
c001b80a:	e8 51 09 ff ff       	call   c000c160 <HardDiskController::HardDiskController(char const*)>
c001b80f:	83 c4 10             	add    esp,0x10
c001b812:	ba e4 1b 02 c0       	mov    edx,0xc0021be4
c001b817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b81b:	89 10                	mov    DWORD PTR [eax],edx
c001b81d:	83 ec 0c             	sub    esp,0xc
c001b820:	6a 50                	push   0x50
c001b822:	e8 5b c6 fe ff       	call   c0007e82 <Phys::allocateContiguousPages(int)>
c001b827:	83 c4 10             	add    esp,0x10
c001b82a:	89 c2                	mov    edx,eax
c001b82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b830:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b836:	83 ec 0c             	sub    esp,0xc
c001b839:	6a 50                	push   0x50
c001b83b:	e8 dd dd fe ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c001b840:	83 c4 10             	add    esp,0x10
c001b843:	89 c2                	mov    edx,eax
c001b845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b849:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b84f:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c001b854:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b858:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001b85e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b862:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b868:	83 ec 0c             	sub    esp,0xc
c001b86b:	6a 03                	push   0x3
c001b86d:	6a 50                	push   0x50
c001b86f:	51                   	push   ecx
c001b870:	52                   	push   edx
c001b871:	50                   	push   eax
c001b872:	e8 a1 e7 fe ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001b877:	83 c4 20             	add    esp,0x20
c001b87a:	90                   	nop
c001b87b:	83 c4 0c             	add    esp,0xc
c001b87e:	c3                   	ret    
c001b87f:	90                   	nop

c001b880 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001b880:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b884:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001b887:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b88a:	09 c2                	or     edx,eax
c001b88c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b890:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b896:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b898:	31 c0                	xor    eax,eax
c001b89a:	c1 e9 08             	shr    ecx,0x8
c001b89d:	83 e1 0f             	and    ecx,0xf
c001b8a0:	39 c8                	cmp    eax,ecx
c001b8a2:	74 0a                	je     c001b8ae <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001b8a4:	f6 c2 01             	test   dl,0x1
c001b8a7:	74 08                	je     c001b8b1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001b8a9:	d1 ea                	shr    edx,1
c001b8ab:	40                   	inc    eax
c001b8ac:	eb f2                	jmp    c001b8a0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001b8ae:	83 c8 ff             	or     eax,0xffffffff
c001b8b1:	c3                   	ret    

c001b8b2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001b8b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b8b6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b8b9:	89 c2                	mov    edx,eax
c001b8bb:	c1 ea 08             	shr    edx,0x8
c001b8be:	83 e2 0f             	and    edx,0xf
c001b8c1:	4a                   	dec    edx
c001b8c2:	75 32                	jne    c001b8f6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b8c4:	83 e0 0f             	and    eax,0xf
c001b8c7:	83 f8 03             	cmp    eax,0x3
c001b8ca:	75 2a                	jne    c001b8f6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b8cc:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001b8cf:	b8 02 00 00 00       	mov    eax,0x2
c001b8d4:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001b8da:	74 1c                	je     c001b8f8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b8dc:	b8 04 00 00 00       	mov    eax,0x4
c001b8e1:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001b8e7:	74 0f                	je     c001b8f8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b8e9:	31 c0                	xor    eax,eax
c001b8eb:	83 fa 03             	cmp    edx,0x3
c001b8ee:	0f 94 c0             	sete   al
c001b8f1:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001b8f5:	c3                   	ret    
c001b8f6:	31 c0                	xor    eax,eax
c001b8f8:	c3                   	ret    
c001b8f9:	90                   	nop

c001b8fa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001b8fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b8fe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b901:	0f ba e2 0f          	bt     edx,0xf
c001b905:	72 f7                	jb     c001b8fe <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001b907:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b90a:	83 ca 10             	or     edx,0x10
c001b90d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b910:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b913:	83 ca 01             	or     edx,0x1
c001b916:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b919:	c3                   	ret    

c001b91a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001b91a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b91e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b921:	83 e2 fe             	and    edx,0xfffffffe
c001b924:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b927:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b92a:	83 e2 ef             	and    edx,0xffffffef
c001b92d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b930:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b933:	0f ba e2 0e          	bt     edx,0xe
c001b937:	72 f7                	jb     c001b930 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b939:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b93c:	0f ba e2 0f          	bt     edx,0xf
c001b940:	72 ee                	jb     c001b930 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b942:	c3                   	ret    
c001b943:	90                   	nop

c001b944 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001b944:	55                   	push   ebp
c001b945:	57                   	push   edi
c001b946:	56                   	push   esi
c001b947:	53                   	push   ebx
c001b948:	83 ec 1c             	sub    esp,0x1c
c001b94b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b94f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b953:	53                   	push   ebx
c001b954:	56                   	push   esi
c001b955:	e8 c0 ff ff ff       	call   c001b91a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b95a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b95e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001b964:	83 ec 0c             	sub    esp,0xc
c001b967:	c1 e5 0a             	shl    ebp,0xa
c001b96a:	01 e8                	add    eax,ebp
c001b96c:	89 03                	mov    DWORD PTR [ebx],eax
c001b96e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b970:	68 00 04 00 00       	push   0x400
c001b975:	6a 00                	push   0x0
c001b977:	50                   	push   eax
c001b978:	e8 73 4b fe ff       	call   c00004f0 <memset>
c001b97d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001b983:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001b987:	01 e8                	add    eax,ebp
c001b989:	83 c4 1c             	add    esp,0x1c
c001b98c:	89 03                	mov    DWORD PTR [ebx],eax
c001b98e:	c1 e2 08             	shl    edx,0x8
c001b991:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b998:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001b99e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001b9a4:	01 f8                	add    eax,edi
c001b9a6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b9a9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b9ac:	68 00 01 00 00       	push   0x100
c001b9b1:	6a 00                	push   0x0
c001b9b3:	50                   	push   eax
c001b9b4:	e8 37 4b fe ff       	call   c00004f0 <memset>
c001b9b9:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001b9bf:	01 fa                	add    edx,edi
c001b9c1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001b9c5:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001b9c8:	c1 e7 0d             	shl    edi,0xd
c001b9cb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b9d2:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001b9d8:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001b9de:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b9e2:	31 ff                	xor    edi,edi
c001b9e4:	83 c4 10             	add    esp,0x10
c001b9e7:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001b9ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9f1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001b9f7:	83 c5 20             	add    ebp,0x20
c001b9fa:	01 f8                	add    eax,edi
c001b9fc:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b9ff:	52                   	push   edx
c001ba00:	68 00 01 00 00       	push   0x100
c001ba05:	6a 00                	push   0x0
c001ba07:	50                   	push   eax
c001ba08:	e8 e3 4a fe ff       	call   c00004f0 <memset>
c001ba0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ba11:	83 c4 10             	add    esp,0x10
c001ba14:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001ba1a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001ba21:	01 f8                	add    eax,edi
c001ba23:	81 c7 00 01 00 00    	add    edi,0x100
c001ba29:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ba2c:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001ba32:	75 b3                	jne    c001b9e7 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001ba34:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001ba3b:	50                   	push   eax
c001ba3c:	50                   	push   eax
c001ba3d:	53                   	push   ebx
c001ba3e:	56                   	push   esi
c001ba3f:	e8 b6 fe ff ff       	call   c001b8fa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001ba44:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001ba4b:	83 c4 2c             	add    esp,0x2c
c001ba4e:	5b                   	pop    ebx
c001ba4f:	5e                   	pop    esi
c001ba50:	5f                   	pop    edi
c001ba51:	5d                   	pop    ebp
c001ba52:	c3                   	ret    
c001ba53:	90                   	nop

c001ba54 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001ba54:	55                   	push   ebp
c001ba55:	57                   	push   edi
c001ba56:	56                   	push   esi
c001ba57:	53                   	push   ebx
c001ba58:	31 db                	xor    ebx,ebx
c001ba5a:	83 ec 0c             	sub    esp,0xc
c001ba5d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ba61:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ba65:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001ba68:	f7 c7 01 00 00 00    	test   edi,0x1
c001ba6e:	74 7a                	je     c001baea <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001ba70:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ba74:	89 d8                	mov    eax,ebx
c001ba76:	c1 e0 07             	shl    eax,0x7
c001ba79:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001ba80:	55                   	push   ebp
c001ba81:	56                   	push   esi
c001ba82:	e8 2b fe ff ff       	call   c001b8b2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001ba87:	5a                   	pop    edx
c001ba88:	83 f8 01             	cmp    eax,0x1
c001ba8b:	59                   	pop    ecx
c001ba8c:	75 21                	jne    c001baaf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001ba8e:	50                   	push   eax
c001ba8f:	53                   	push   ebx
c001ba90:	55                   	push   ebp
c001ba91:	56                   	push   esi
c001ba92:	e8 ad fe ff ff       	call   c001b944 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ba97:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001ba9e:	e8 0b c0 fe ff       	call   c0007aae <malloc>
c001baa3:	89 c5                	mov    ebp,eax
c001baa5:	89 04 24             	mov    DWORD PTR [esp],eax
c001baa8:	e8 99 10 00 00       	call   c001cb46 <SATA::SATA()>
c001baad:	eb 24                	jmp    c001bad3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001baaf:	83 f8 04             	cmp    eax,0x4
c001bab2:	75 36                	jne    c001baea <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001bab4:	51                   	push   ecx
c001bab5:	53                   	push   ebx
c001bab6:	55                   	push   ebp
c001bab7:	56                   	push   esi
c001bab8:	e8 87 fe ff ff       	call   c001b944 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001babd:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001bac4:	e8 e5 bf fe ff       	call   c0007aae <malloc>
c001bac9:	89 c5                	mov    ebp,eax
c001bacb:	89 04 24             	mov    DWORD PTR [esp],eax
c001bace:	e8 d5 17 00 00       	call   c001d2a8 <SATAPI::SATAPI()>
c001bad3:	58                   	pop    eax
c001bad4:	5a                   	pop    edx
c001bad5:	55                   	push   ebp
c001bad6:	56                   	push   esi
c001bad7:	e8 42 03 ff ff       	call   c000be1e <Device::addChild(Device*)>
c001badc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001badf:	56                   	push   esi
c001bae0:	6a 00                	push   0x0
c001bae2:	53                   	push   ebx
c001bae3:	55                   	push   ebp
c001bae4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bae7:	83 c4 20             	add    esp,0x20
c001baea:	d1 ef                	shr    edi,1
c001baec:	43                   	inc    ebx
c001baed:	83 fb 20             	cmp    ebx,0x20
c001baf0:	0f 85 72 ff ff ff    	jne    c001ba68 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001baf6:	83 c4 0c             	add    esp,0xc
c001baf9:	5b                   	pop    ebx
c001bafa:	5e                   	pop    esi
c001bafb:	5f                   	pop    edi
c001bafc:	5d                   	pop    ebp
c001bafd:	c3                   	ret    

c001bafe <SATABus::open(int, int, void*)>:
c001bafe:	83 ec 14             	sub    esp,0x14
c001bb01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bb05:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001bb0b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001bb11:	52                   	push   edx
c001bb12:	50                   	push   eax
c001bb13:	e8 3c ff ff ff       	call   c001ba54 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001bb18:	31 c0                	xor    eax,eax
c001bb1a:	83 c4 1c             	add    esp,0x1c
c001bb1d:	c3                   	ret    

c001bb1e <ATA::close(int, int, void*)>:
c001bb1e:	83 ec 0c             	sub    esp,0xc
c001bb21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb25:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001bb2b:	85 c0                	test   eax,eax
c001bb2d:	74 0c                	je     c001bb3b <ATA::close(int, int, void*)+0x1d>
c001bb2f:	83 ec 0c             	sub    esp,0xc
c001bb32:	8b 10                	mov    edx,DWORD PTR [eax]
c001bb34:	50                   	push   eax
c001bb35:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001bb38:	83 c4 10             	add    esp,0x10
c001bb3b:	31 c0                	xor    eax,eax
c001bb3d:	83 c4 0c             	add    esp,0xc
c001bb40:	c3                   	ret    
c001bb41:	90                   	nop

c001bb42 <ATA::powerSaving(PowerSavingLevel)>:
c001bb42:	c3                   	ret    
c001bb43:	90                   	nop

c001bb44 <ATA::ATA()>:
c001bb44:	83 ec 0c             	sub    esp,0xc
c001bb47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb4b:	83 ec 04             	sub    esp,0x4
c001bb4e:	68 00 02 00 00       	push   0x200
c001bb53:	68 b1 1c 02 c0       	push   0xc0021cb1
c001bb58:	50                   	push   eax
c001bb59:	e8 8c 06 ff ff       	call   c000c1ea <PhysicalDisk::PhysicalDisk(char const*, int)>
c001bb5e:	83 c4 10             	add    esp,0x10
c001bb61:	ba 24 1c 02 c0       	mov    edx,0xc0021c24
c001bb66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb6a:	89 10                	mov    DWORD PTR [eax],edx
c001bb6c:	90                   	nop
c001bb6d:	83 c4 0c             	add    esp,0xc
c001bb70:	c3                   	ret    
c001bb71:	90                   	nop

c001bb72 <ATA::flush(bool)>:
c001bb72:	53                   	push   ebx
c001bb73:	83 ec 08             	sub    esp,0x8
c001bb76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb7a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bb7f:	83 f8 01             	cmp    eax,0x1
c001bb82:	19 c0                	sbb    eax,eax
c001bb84:	83 e0 fd             	and    eax,0xfffffffd
c001bb87:	05 ea 00 00 00       	add    eax,0xea
c001bb8c:	50                   	push   eax
c001bb8d:	6a 07                	push   0x7
c001bb8f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bb96:	50                   	push   eax
c001bb97:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bb9d:	e8 16 f1 ff ff       	call   c001acb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bba2:	83 c4 0c             	add    esp,0xc
c001bba5:	6a 00                	push   0x0
c001bba7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bbae:	50                   	push   eax
c001bbaf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bbb5:	e8 e6 fb ff ff       	call   c001b7a0 <IDE::polling(unsigned char, unsigned int)>
c001bbba:	83 c4 18             	add    esp,0x18
c001bbbd:	5b                   	pop    ebx
c001bbbe:	c3                   	ret    
c001bbbf:	90                   	nop

c001bbc0 <ATA::readyForCommand()>:
c001bbc0:	56                   	push   esi
c001bbc1:	53                   	push   ebx
c001bbc2:	53                   	push   ebx
c001bbc3:	31 db                	xor    ebx,ebx
c001bbc5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bbc9:	51                   	push   ecx
c001bbca:	6a 0c                	push   0xc
c001bbcc:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bbd3:	50                   	push   eax
c001bbd4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bbda:	e8 99 f1 ff ff       	call   c001ad78 <IDE::read(unsigned char, unsigned char)>
c001bbdf:	83 c4 10             	add    esp,0x10
c001bbe2:	a8 88                	test   al,0x88
c001bbe4:	74 1f                	je     c001bc05 <ATA::readyForCommand()+0x45>
c001bbe6:	43                   	inc    ebx
c001bbe7:	83 fb 63             	cmp    ebx,0x63
c001bbea:	7e dd                	jle    c001bbc9 <ATA::readyForCommand()+0x9>
c001bbec:	83 ec 0c             	sub    esp,0xc
c001bbef:	6a 0a                	push   0xa
c001bbf1:	e8 06 98 ff ff       	call   c00153fc <milliTenthSleep(unsigned int)>
c001bbf6:	83 c4 10             	add    esp,0x10
c001bbf9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001bbff:	75 c8                	jne    c001bbc9 <ATA::readyForCommand()+0x9>
c001bc01:	31 c0                	xor    eax,eax
c001bc03:	eb 02                	jmp    c001bc07 <ATA::readyForCommand()+0x47>
c001bc05:	b0 01                	mov    al,0x1
c001bc07:	5a                   	pop    edx
c001bc08:	5b                   	pop    ebx
c001bc09:	5e                   	pop    esi
c001bc0a:	c3                   	ret    
c001bc0b:	90                   	nop

c001bc0c <ATA::access(unsigned long long, int, void*, bool)>:
c001bc0c:	55                   	push   ebp
c001bc0d:	57                   	push   edi
c001bc0e:	56                   	push   esi
c001bc0f:	53                   	push   ebx
c001bc10:	83 ec 2c             	sub    esp,0x2c
c001bc13:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001bc17:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bc1b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001bc1f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bc23:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001bc27:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bc2b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001bc2f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001bc35:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bc39:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bc3f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bc43:	c1 e0 06             	shl    eax,0x6
c001bc46:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001bc4e:	74 5d                	je     c001bcad <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001bc50:	89 fa                	mov    edx,edi
c001bc52:	89 f0                	mov    eax,esi
c001bc54:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001bc58:	c1 ea 1c             	shr    edx,0x1c
c001bc5b:	89 d1                	mov    ecx,edx
c001bc5d:	09 c1                	or     ecx,eax
c001bc5f:	74 25                	je     c001bc86 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001bc61:	31 ed                	xor    ebp,ebp
c001bc63:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001bc6a:	89 fa                	mov    edx,edi
c001bc6c:	89 f0                	mov    eax,esi
c001bc6e:	0f ad d0             	shrd   eax,edx,cl
c001bc71:	d3 ea                	shr    edx,cl
c001bc73:	f6 c1 20             	test   cl,0x20
c001bc76:	74 02                	je     c001bc7a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001bc78:	89 d0                	mov    eax,edx
c001bc7a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001bc7e:	45                   	inc    ebp
c001bc7f:	83 fd 06             	cmp    ebp,0x6
c001bc82:	75 df                	jne    c001bc63 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001bc84:	eb 76                	jmp    c001bcfc <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001bc86:	89 f0                	mov    eax,esi
c001bc88:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001bc8d:	89 fa                	mov    edx,edi
c001bc8f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bc96:	0f ac d0 10          	shrd   eax,edx,0x10
c001bc9a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bc9f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bca3:	c1 ee 18             	shr    esi,0x18
c001bca6:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001bcab:	eb 56                	jmp    c001bd03 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001bcad:	6a 00                	push   0x0
c001bcaf:	6a 3f                	push   0x3f
c001bcb1:	57                   	push   edi
c001bcb2:	56                   	push   esi
c001bcb3:	e8 a8 2a 00 00       	call   c001e760 <__umoddi3>
c001bcb8:	83 c4 10             	add    esp,0x10
c001bcbb:	40                   	inc    eax
c001bcbc:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001bcc0:	6a 00                	push   0x0
c001bcc2:	68 f0 03 00 00       	push   0x3f0
c001bcc7:	57                   	push   edi
c001bcc8:	56                   	push   esi
c001bcc9:	e8 92 29 00 00       	call   c001e660 <__udivdi3>
c001bcce:	83 c4 10             	add    esp,0x10
c001bcd1:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001bcd6:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bcdd:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bce2:	6a 00                	push   0x0
c001bce4:	6a 3f                	push   0x3f
c001bce6:	57                   	push   edi
c001bce7:	56                   	push   esi
c001bce8:	e8 73 29 00 00       	call   c001e660 <__udivdi3>
c001bced:	83 c4 10             	add    esp,0x10
c001bcf0:	83 e0 0f             	and    eax,0xf
c001bcf3:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001bcf8:	89 c6                	mov    esi,eax
c001bcfa:	eb 07                	jmp    c001bd03 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001bcfc:	31 f6                	xor    esi,esi
c001bcfe:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001bd03:	bf 01 00 00 00       	mov    edi,0x1
c001bd08:	50                   	push   eax
c001bd09:	6a 00                	push   0x0
c001bd0b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd12:	50                   	push   eax
c001bd13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bd17:	e8 a4 f1 ff ff       	call   c001aec0 <IDE::enableIRQs(unsigned char, bool)>
c001bd1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd1f:	e8 9c fe ff ff       	call   c001bbc0 <ATA::readyForCommand()>
c001bd24:	83 c4 10             	add    esp,0x10
c001bd27:	84 c0                	test   al,al
c001bd29:	0f 84 69 02 00 00    	je     c001bf98 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001bd2f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001bd35:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001bd3b:	c1 e0 04             	shl    eax,0x4
c001bd3e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001bd45:	09 c6                	or     esi,eax
c001bd47:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001bd4c:	75 05                	jne    c001bd53 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001bd4e:	83 ce a0             	or     esi,0xffffffa0
c001bd51:	eb 03                	jmp    c001bd56 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001bd53:	83 ce e0             	or     esi,0xffffffe0
c001bd56:	89 f0                	mov    eax,esi
c001bd58:	0f b6 f0             	movzx  esi,al
c001bd5b:	56                   	push   esi
c001bd5c:	6a 06                	push   0x6
c001bd5e:	51                   	push   ecx
c001bd5f:	52                   	push   edx
c001bd60:	e8 53 ef ff ff       	call   c001acb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd65:	83 c4 10             	add    esp,0x10
c001bd68:	6a 00                	push   0x0
c001bd6a:	6a 01                	push   0x1
c001bd6c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd73:	50                   	push   eax
c001bd74:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd7a:	e8 39 ef ff ff       	call   c001acb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd7f:	83 c4 10             	add    esp,0x10
c001bd82:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001bd87:	83 f8 02             	cmp    eax,0x2
c001bd8a:	75 6e                	jne    c001bdfa <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001bd8c:	6a 00                	push   0x0
c001bd8e:	6a 08                	push   0x8
c001bd90:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd97:	50                   	push   eax
c001bd98:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd9e:	e8 15 ef ff ff       	call   c001acb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bda3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001bda8:	50                   	push   eax
c001bda9:	6a 09                	push   0x9
c001bdab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bdb2:	50                   	push   eax
c001bdb3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bdb9:	e8 fa ee ff ff       	call   c001acb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdbe:	83 c4 20             	add    esp,0x20
c001bdc1:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001bdc6:	50                   	push   eax
c001bdc7:	6a 0a                	push   0xa
c001bdc9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bdd0:	50                   	push   eax
c001bdd1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bdd7:	e8 dc ee ff ff       	call   c001acb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bddc:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001bde1:	50                   	push   eax
c001bde2:	6a 0b                	push   0xb
c001bde4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bdeb:	50                   	push   eax
c001bdec:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bdf2:	e8 c1 ee ff ff       	call   c001acb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdf7:	83 c4 20             	add    esp,0x20
c001bdfa:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001bdff:	50                   	push   eax
c001be00:	6a 02                	push   0x2
c001be02:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be09:	50                   	push   eax
c001be0a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be10:	e8 a3 ee ff ff       	call   c001acb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be15:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001be1a:	50                   	push   eax
c001be1b:	6a 03                	push   0x3
c001be1d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be24:	50                   	push   eax
c001be25:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be2b:	e8 88 ee ff ff       	call   c001acb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be30:	83 c4 20             	add    esp,0x20
c001be33:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001be38:	50                   	push   eax
c001be39:	6a 04                	push   0x4
c001be3b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be42:	50                   	push   eax
c001be43:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be49:	e8 6a ee ff ff       	call   c001acb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be4e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001be53:	50                   	push   eax
c001be54:	6a 05                	push   0x5
c001be56:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be5d:	50                   	push   eax
c001be5e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be64:	e8 4f ee ff ff       	call   c001acb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be69:	83 c4 20             	add    esp,0x20
c001be6c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001be71:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001be76:	74 11                	je     c001be89 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001be78:	b8 30 00 00 00       	mov    eax,0x30
c001be7d:	83 fa 02             	cmp    edx,0x2
c001be80:	75 16                	jne    c001be98 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001be82:	b8 34 00 00 00       	mov    eax,0x34
c001be87:	eb 0f                	jmp    c001be98 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001be89:	b8 20 00 00 00       	mov    eax,0x20
c001be8e:	83 fa 02             	cmp    edx,0x2
c001be91:	75 05                	jne    c001be98 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001be93:	b8 24 00 00 00       	mov    eax,0x24
c001be98:	50                   	push   eax
c001be99:	6a 07                	push   0x7
c001be9b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bea2:	50                   	push   eax
c001bea3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bea9:	e8 0a ee ff ff       	call   c001acb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001beae:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001beb2:	83 c4 10             	add    esp,0x10
c001beb5:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001beba:	85 f6                	test   esi,esi
c001bebc:	0f 84 b3 00 00 00    	je     c001bf75 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001bec2:	50                   	push   eax
c001bec3:	6a 01                	push   0x1
c001bec5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001becc:	50                   	push   eax
c001becd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bed3:	e8 c8 f8 ff ff       	call   c001b7a0 <IDE::polling(unsigned char, unsigned int)>
c001bed8:	83 c4 10             	add    esp,0x10
c001bedb:	0f b6 f8             	movzx  edi,al
c001bede:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001bee4:	85 ff                	test   edi,edi
c001bee6:	74 1d                	je     c001bf05 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001bee8:	57                   	push   edi
c001bee9:	0f b6 d2             	movzx  edx,dl
c001beec:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001bef3:	50                   	push   eax
c001bef4:	52                   	push   edx
c001bef5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001befb:	e8 e6 f7 ff ff       	call   c001b6e6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001bf00:	e9 90 00 00 00       	jmp    c001bf95 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001bf05:	85 ed                	test   ebp,ebp
c001bf07:	74 3b                	je     c001bf44 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001bf09:	31 c9                	xor    ecx,ecx
c001bf0b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001bf0f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001bf13:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001bf17:	50                   	push   eax
c001bf18:	50                   	push   eax
c001bf19:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bf20:	50                   	push   eax
c001bf21:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bf27:	e8 7a ed ff ff       	call   c001aca6 <IDE::getBase(unsigned char)>
c001bf2c:	89 c2                	mov    edx,eax
c001bf2e:	89 f8                	mov    eax,edi
c001bf30:	66 ef                	out    dx,ax
c001bf32:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001bf36:	83 c4 10             	add    esp,0x10
c001bf39:	41                   	inc    ecx
c001bf3a:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001bf40:	75 c9                	jne    c001bf0b <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001bf42:	eb 23                	jmp    c001bf67 <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001bf44:	0f b6 d2             	movzx  edx,dl
c001bf47:	51                   	push   ecx
c001bf48:	51                   	push   ecx
c001bf49:	52                   	push   edx
c001bf4a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bf50:	e8 51 ed ff ff       	call   c001aca6 <IDE::getBase(unsigned char)>
c001bf55:	b9 00 01 00 00       	mov    ecx,0x100
c001bf5a:	89 c2                	mov    edx,eax
c001bf5c:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001bf60:	fc                   	cld    
c001bf61:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001bf64:	83 c4 10             	add    esp,0x10
c001bf67:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001bf6f:	4e                   	dec    esi
c001bf70:	e9 45 ff ff ff       	jmp    c001beba <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001bf75:	31 ff                	xor    edi,edi
c001bf77:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001bf7c:	74 1a                	je     c001bf98 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001bf7e:	50                   	push   eax
c001bf7f:	50                   	push   eax
c001bf80:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001bf85:	83 f8 02             	cmp    eax,0x2
c001bf88:	0f 94 c0             	sete   al
c001bf8b:	0f b6 c0             	movzx  eax,al
c001bf8e:	50                   	push   eax
c001bf8f:	53                   	push   ebx
c001bf90:	e8 dd fb ff ff       	call   c001bb72 <ATA::flush(bool)>
c001bf95:	83 c4 10             	add    esp,0x10
c001bf98:	83 c4 2c             	add    esp,0x2c
c001bf9b:	89 f8                	mov    eax,edi
c001bf9d:	5b                   	pop    ebx
c001bf9e:	5e                   	pop    esi
c001bf9f:	5f                   	pop    edi
c001bfa0:	5d                   	pop    ebp
c001bfa1:	c3                   	ret    

c001bfa2 <ATA::detectCHS()>:
c001bfa2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bfa6:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001bfac:	c1 e0 06             	shl    eax,0x6
c001bfaf:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001bfb5:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001bfbf:	c7 44 24 04 08 1c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021c08
c001bfc7:	e9 4b 49 ff ff       	jmp    c0010917 <KePanic(char const*)>

c001bfcc <ATA::open(int, int, void*)>:
c001bfcc:	53                   	push   ebx
c001bfcd:	83 ec 08             	sub    esp,0x8
c001bfd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfd4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bfd8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bfdc:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001bfe2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001bfe8:	c1 e0 06             	shl    eax,0x6
c001bfeb:	01 d0                	add    eax,edx
c001bfed:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001bff4:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001bffa:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001c001:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c00b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001c011:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001c018:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001c01f:	75 0c                	jne    c001c02d <ATA::open(int, int, void*)+0x61>
c001c021:	83 ec 0c             	sub    esp,0xc
c001c024:	53                   	push   ebx
c001c025:	e8 78 ff ff ff       	call   c001bfa2 <ATA::detectCHS()>
c001c02a:	83 c4 10             	add    esp,0x10
c001c02d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c033:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c039:	c1 e0 06             	shl    eax,0x6
c001c03c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001c043:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c04d:	d1 e8                	shr    eax,1
c001c04f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001c055:	6a 04                	push   0x4
c001c057:	6a 0c                	push   0xc
c001c059:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c060:	50                   	push   eax
c001c061:	52                   	push   edx
c001c062:	e8 51 ec ff ff       	call   c001acb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c067:	90                   	nop
c001c068:	90                   	nop
c001c069:	6a 00                	push   0x0
c001c06b:	6a 0c                	push   0xc
c001c06d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c074:	50                   	push   eax
c001c075:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c07b:	e8 38 ec ff ff       	call   c001acb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c080:	83 c4 14             	add    esp,0x14
c001c083:	53                   	push   ebx
c001c084:	e8 c9 01 ff ff       	call   c000c252 <PhysicalDisk::startCache()>
c001c089:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c08c:	e8 05 14 ff ff       	call   c000d496 <createPartitionsForDisk(PhysicalDisk*)>
c001c091:	31 c0                	xor    eax,eax
c001c093:	83 c4 18             	add    esp,0x18
c001c096:	5b                   	pop    ebx
c001c097:	c3                   	ret    

c001c098 <combineCharAndColour(char, unsigned char)>:
c001c098:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c09d:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001c0a3:	c1 e0 08             	shl    eax,0x8
c001c0a6:	09 d0                	or     eax,edx
c001c0a8:	c3                   	ret    

c001c0a9 <combineColours(unsigned char, unsigned char)>:
c001c0a9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c0ae:	c1 e0 04             	shl    eax,0x4
c001c0b1:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001c0b5:	c3                   	ret    

c001c0b6 <ATA::read(unsigned long long, int, void*)>:
c001c0b6:	55                   	push   ebp
c001c0b7:	57                   	push   edi
c001c0b8:	56                   	push   esi
c001c0b9:	be 04 00 00 00       	mov    esi,0x4
c001c0be:	53                   	push   ebx
c001c0bf:	83 ec 0c             	sub    esp,0xc
c001c0c2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c0c6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c0ca:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c0cd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c0d1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c0d5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c0db:	0f 87 a1 01 00 00    	ja     c001c282 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c0e1:	be 06 00 00 00       	mov    esi,0x6
c001c0e6:	85 c9                	test   ecx,ecx
c001c0e8:	0f 84 94 01 00 00    	je     c001c282 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c0ee:	55                   	push   ebp
c001c0ef:	55                   	push   ebp
c001c0f0:	6a 00                	push   0x0
c001c0f2:	51                   	push   ecx
c001c0f3:	53                   	push   ebx
c001c0f4:	52                   	push   edx
c001c0f5:	50                   	push   eax
c001c0f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c0fa:	e8 0d fb ff ff       	call   c001bc0c <ATA::access(unsigned long long, int, void*, bool)>
c001c0ff:	83 c4 20             	add    esp,0x20
c001c102:	89 c6                	mov    esi,eax
c001c104:	85 c0                	test   eax,eax
c001c106:	0f 85 71 01 00 00    	jne    c001c27d <ATA::read(unsigned long long, int, void*)+0x1c7>
c001c10c:	03 1d 54 8b 02 c0    	add    ebx,DWORD PTR ds:0xc0028b54
c001c112:	89 da                	mov    edx,ebx
c001c114:	50                   	push   eax
c001c115:	bd 10 27 00 00       	mov    ebp,0x2710
c001c11a:	50                   	push   eax
c001c11b:	89 1d 54 8b 02 c0    	mov    DWORD PTR ds:0xc0028b54,ebx
c001c121:	6a 0f                	push   0xf
c001c123:	6a 00                	push   0x0
c001c125:	e8 7f ff ff ff       	call   c001c0a9 <combineColours(unsigned char, unsigned char)>
c001c12a:	59                   	pop    ecx
c001c12b:	b9 0a 00 00 00       	mov    ecx,0xa
c001c130:	5b                   	pop    ebx
c001c131:	0f b6 d8             	movzx  ebx,al
c001c134:	89 d0                	mov    eax,edx
c001c136:	53                   	push   ebx
c001c137:	99                   	cdq    
c001c138:	f7 fd                	idiv   ebp
c001c13a:	99                   	cdq    
c001c13b:	f7 f9                	idiv   ecx
c001c13d:	83 c2 30             	add    edx,0x30
c001c140:	0f b6 d2             	movzx  edx,dl
c001c143:	52                   	push   edx
c001c144:	e8 4f ff ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001c149:	5f                   	pop    edi
c001c14a:	bf e8 03 00 00       	mov    edi,0x3e8
c001c14f:	5a                   	pop    edx
c001c150:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c156:	53                   	push   ebx
c001c157:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c15c:	99                   	cdq    
c001c15d:	f7 ff                	idiv   edi
c001c15f:	99                   	cdq    
c001c160:	f7 f9                	idiv   ecx
c001c162:	8d 42 30             	lea    eax,[edx+0x30]
c001c165:	0f b6 c0             	movzx  eax,al
c001c168:	50                   	push   eax
c001c169:	e8 2a ff ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001c16e:	5f                   	pop    edi
c001c16f:	bf 64 00 00 00       	mov    edi,0x64
c001c174:	5a                   	pop    edx
c001c175:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c17b:	53                   	push   ebx
c001c17c:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c181:	99                   	cdq    
c001c182:	f7 ff                	idiv   edi
c001c184:	99                   	cdq    
c001c185:	f7 f9                	idiv   ecx
c001c187:	8d 42 30             	lea    eax,[edx+0x30]
c001c18a:	0f b6 c0             	movzx  eax,al
c001c18d:	50                   	push   eax
c001c18e:	e8 05 ff ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001c193:	5a                   	pop    edx
c001c194:	5a                   	pop    edx
c001c195:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c19b:	53                   	push   ebx
c001c19c:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c1a1:	99                   	cdq    
c001c1a2:	f7 f9                	idiv   ecx
c001c1a4:	99                   	cdq    
c001c1a5:	f7 f9                	idiv   ecx
c001c1a7:	8d 42 30             	lea    eax,[edx+0x30]
c001c1aa:	0f b6 c0             	movzx  eax,al
c001c1ad:	50                   	push   eax
c001c1ae:	e8 e5 fe ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001c1b3:	5a                   	pop    edx
c001c1b4:	5a                   	pop    edx
c001c1b5:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c1bb:	53                   	push   ebx
c001c1bc:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c1c1:	99                   	cdq    
c001c1c2:	f7 f9                	idiv   ecx
c001c1c4:	83 c2 30             	add    edx,0x30
c001c1c7:	0f b6 d2             	movzx  edx,dl
c001c1ca:	52                   	push   edx
c001c1cb:	e8 c8 fe ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001c1d0:	5a                   	pop    edx
c001c1d1:	5a                   	pop    edx
c001c1d2:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c1d8:	53                   	push   ebx
c001c1d9:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c1de:	99                   	cdq    
c001c1df:	f7 fd                	idiv   ebp
c001c1e1:	99                   	cdq    
c001c1e2:	f7 f9                	idiv   ecx
c001c1e4:	8d 42 30             	lea    eax,[edx+0x30]
c001c1e7:	0f b6 c0             	movzx  eax,al
c001c1ea:	50                   	push   eax
c001c1eb:	e8 a8 fe ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001c1f0:	5d                   	pop    ebp
c001c1f1:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c1f6:	5a                   	pop    edx
c001c1f7:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c1fd:	53                   	push   ebx
c001c1fe:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c203:	99                   	cdq    
c001c204:	f7 fd                	idiv   ebp
c001c206:	99                   	cdq    
c001c207:	f7 f9                	idiv   ecx
c001c209:	8d 42 30             	lea    eax,[edx+0x30]
c001c20c:	0f b6 c0             	movzx  eax,al
c001c20f:	50                   	push   eax
c001c210:	e8 83 fe ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001c215:	5d                   	pop    ebp
c001c216:	5a                   	pop    edx
c001c217:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c21d:	53                   	push   ebx
c001c21e:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c223:	99                   	cdq    
c001c224:	f7 ff                	idiv   edi
c001c226:	99                   	cdq    
c001c227:	f7 f9                	idiv   ecx
c001c229:	8d 42 30             	lea    eax,[edx+0x30]
c001c22c:	0f b6 c0             	movzx  eax,al
c001c22f:	50                   	push   eax
c001c230:	e8 63 fe ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001c235:	5f                   	pop    edi
c001c236:	5d                   	pop    ebp
c001c237:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c23d:	53                   	push   ebx
c001c23e:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c243:	99                   	cdq    
c001c244:	f7 f9                	idiv   ecx
c001c246:	99                   	cdq    
c001c247:	f7 f9                	idiv   ecx
c001c249:	8d 42 30             	lea    eax,[edx+0x30]
c001c24c:	0f b6 c0             	movzx  eax,al
c001c24f:	50                   	push   eax
c001c250:	e8 43 fe ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001c255:	5a                   	pop    edx
c001c256:	5f                   	pop    edi
c001c257:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c25d:	53                   	push   ebx
c001c25e:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c263:	99                   	cdq    
c001c264:	f7 f9                	idiv   ecx
c001c266:	83 c2 30             	add    edx,0x30
c001c269:	0f b6 d2             	movzx  edx,dl
c001c26c:	52                   	push   edx
c001c26d:	e8 26 fe ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001c272:	83 c4 10             	add    esp,0x10
c001c275:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c27b:	eb 05                	jmp    c001c282 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c27d:	be 01 00 00 00       	mov    esi,0x1
c001c282:	83 c4 0c             	add    esp,0xc
c001c285:	89 f0                	mov    eax,esi
c001c287:	5b                   	pop    ebx
c001c288:	5e                   	pop    esi
c001c289:	5f                   	pop    edi
c001c28a:	5d                   	pop    ebp
c001c28b:	c3                   	ret    

c001c28c <ATA::write(unsigned long long, int, void*)>:
c001c28c:	55                   	push   ebp
c001c28d:	57                   	push   edi
c001c28e:	56                   	push   esi
c001c28f:	be 04 00 00 00       	mov    esi,0x4
c001c294:	53                   	push   ebx
c001c295:	83 ec 0c             	sub    esp,0xc
c001c298:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c29c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c2a0:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c2a3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c2a7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c2ab:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c2b1:	0f 87 9c 01 00 00    	ja     c001c453 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c2b7:	be 06 00 00 00       	mov    esi,0x6
c001c2bc:	85 c9                	test   ecx,ecx
c001c2be:	0f 84 8f 01 00 00    	je     c001c453 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c2c4:	55                   	push   ebp
c001c2c5:	55                   	push   ebp
c001c2c6:	6a 01                	push   0x1
c001c2c8:	51                   	push   ecx
c001c2c9:	53                   	push   ebx
c001c2ca:	52                   	push   edx
c001c2cb:	50                   	push   eax
c001c2cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c2d0:	e8 37 f9 ff ff       	call   c001bc0c <ATA::access(unsigned long long, int, void*, bool)>
c001c2d5:	83 c4 20             	add    esp,0x20
c001c2d8:	89 c6                	mov    esi,eax
c001c2da:	85 c0                	test   eax,eax
c001c2dc:	0f 85 6c 01 00 00    	jne    c001c44e <ATA::write(unsigned long long, int, void*)+0x1c2>
c001c2e2:	01 1d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebx
c001c2e8:	bd 10 27 00 00       	mov    ebp,0x2710
c001c2ed:	50                   	push   eax
c001c2ee:	50                   	push   eax
c001c2ef:	6a 0f                	push   0xf
c001c2f1:	6a 00                	push   0x0
c001c2f3:	e8 b1 fd ff ff       	call   c001c0a9 <combineColours(unsigned char, unsigned char)>
c001c2f8:	5a                   	pop    edx
c001c2f9:	0f b6 d8             	movzx  ebx,al
c001c2fc:	59                   	pop    ecx
c001c2fd:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c302:	53                   	push   ebx
c001c303:	b9 0a 00 00 00       	mov    ecx,0xa
c001c308:	99                   	cdq    
c001c309:	f7 fd                	idiv   ebp
c001c30b:	99                   	cdq    
c001c30c:	f7 f9                	idiv   ecx
c001c30e:	8d 42 30             	lea    eax,[edx+0x30]
c001c311:	0f b6 c0             	movzx  eax,al
c001c314:	50                   	push   eax
c001c315:	e8 7e fd ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001c31a:	5f                   	pop    edi
c001c31b:	bf e8 03 00 00       	mov    edi,0x3e8
c001c320:	5a                   	pop    edx
c001c321:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c327:	53                   	push   ebx
c001c328:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c32d:	99                   	cdq    
c001c32e:	f7 ff                	idiv   edi
c001c330:	99                   	cdq    
c001c331:	f7 f9                	idiv   ecx
c001c333:	8d 42 30             	lea    eax,[edx+0x30]
c001c336:	0f b6 c0             	movzx  eax,al
c001c339:	50                   	push   eax
c001c33a:	e8 59 fd ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001c33f:	5f                   	pop    edi
c001c340:	bf 64 00 00 00       	mov    edi,0x64
c001c345:	5a                   	pop    edx
c001c346:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c34c:	53                   	push   ebx
c001c34d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c352:	99                   	cdq    
c001c353:	f7 ff                	idiv   edi
c001c355:	99                   	cdq    
c001c356:	f7 f9                	idiv   ecx
c001c358:	8d 42 30             	lea    eax,[edx+0x30]
c001c35b:	0f b6 c0             	movzx  eax,al
c001c35e:	50                   	push   eax
c001c35f:	e8 34 fd ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001c364:	5a                   	pop    edx
c001c365:	5a                   	pop    edx
c001c366:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c36c:	53                   	push   ebx
c001c36d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c372:	99                   	cdq    
c001c373:	f7 f9                	idiv   ecx
c001c375:	99                   	cdq    
c001c376:	f7 f9                	idiv   ecx
c001c378:	8d 42 30             	lea    eax,[edx+0x30]
c001c37b:	0f b6 c0             	movzx  eax,al
c001c37e:	50                   	push   eax
c001c37f:	e8 14 fd ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001c384:	5a                   	pop    edx
c001c385:	5a                   	pop    edx
c001c386:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c38c:	53                   	push   ebx
c001c38d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c392:	99                   	cdq    
c001c393:	f7 f9                	idiv   ecx
c001c395:	8d 42 30             	lea    eax,[edx+0x30]
c001c398:	0f b6 c0             	movzx  eax,al
c001c39b:	50                   	push   eax
c001c39c:	e8 f7 fc ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001c3a1:	5a                   	pop    edx
c001c3a2:	5a                   	pop    edx
c001c3a3:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c3a9:	53                   	push   ebx
c001c3aa:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c3af:	99                   	cdq    
c001c3b0:	f7 fd                	idiv   ebp
c001c3b2:	99                   	cdq    
c001c3b3:	f7 f9                	idiv   ecx
c001c3b5:	8d 42 30             	lea    eax,[edx+0x30]
c001c3b8:	0f b6 c0             	movzx  eax,al
c001c3bb:	50                   	push   eax
c001c3bc:	e8 d7 fc ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001c3c1:	5d                   	pop    ebp
c001c3c2:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c3c7:	5a                   	pop    edx
c001c3c8:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c3ce:	53                   	push   ebx
c001c3cf:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c3d4:	99                   	cdq    
c001c3d5:	f7 fd                	idiv   ebp
c001c3d7:	99                   	cdq    
c001c3d8:	f7 f9                	idiv   ecx
c001c3da:	8d 42 30             	lea    eax,[edx+0x30]
c001c3dd:	0f b6 c0             	movzx  eax,al
c001c3e0:	50                   	push   eax
c001c3e1:	e8 b2 fc ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001c3e6:	5d                   	pop    ebp
c001c3e7:	5a                   	pop    edx
c001c3e8:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c3ee:	53                   	push   ebx
c001c3ef:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c3f4:	99                   	cdq    
c001c3f5:	f7 ff                	idiv   edi
c001c3f7:	99                   	cdq    
c001c3f8:	f7 f9                	idiv   ecx
c001c3fa:	8d 42 30             	lea    eax,[edx+0x30]
c001c3fd:	0f b6 c0             	movzx  eax,al
c001c400:	50                   	push   eax
c001c401:	e8 92 fc ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001c406:	5f                   	pop    edi
c001c407:	5d                   	pop    ebp
c001c408:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c40e:	53                   	push   ebx
c001c40f:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c414:	99                   	cdq    
c001c415:	f7 f9                	idiv   ecx
c001c417:	99                   	cdq    
c001c418:	f7 f9                	idiv   ecx
c001c41a:	8d 42 30             	lea    eax,[edx+0x30]
c001c41d:	0f b6 c0             	movzx  eax,al
c001c420:	50                   	push   eax
c001c421:	e8 72 fc ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001c426:	5a                   	pop    edx
c001c427:	5f                   	pop    edi
c001c428:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c42e:	53                   	push   ebx
c001c42f:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c434:	99                   	cdq    
c001c435:	f7 f9                	idiv   ecx
c001c437:	83 c2 30             	add    edx,0x30
c001c43a:	0f b6 d2             	movzx  edx,dl
c001c43d:	52                   	push   edx
c001c43e:	e8 55 fc ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001c443:	83 c4 10             	add    esp,0x10
c001c446:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c44c:	eb 05                	jmp    c001c453 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c44e:	be 01 00 00 00       	mov    esi,0x1
c001c453:	83 c4 0c             	add    esp,0xc
c001c456:	89 f0                	mov    eax,esi
c001c458:	5b                   	pop    ebx
c001c459:	5e                   	pop    esi
c001c45a:	5f                   	pop    edi
c001c45b:	5d                   	pop    ebp
c001c45c:	c3                   	ret    
c001c45d:	90                   	nop

c001c45e <ATAPI::write(unsigned long long, int, void*)>:
c001c45e:	b8 03 00 00 00       	mov    eax,0x3
c001c463:	c3                   	ret    

c001c464 <ATAPI::close(int, int, void*)>:
c001c464:	83 ec 0c             	sub    esp,0xc
c001c467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c46b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c471:	85 c0                	test   eax,eax
c001c473:	74 0c                	je     c001c481 <ATAPI::close(int, int, void*)+0x1d>
c001c475:	83 ec 0c             	sub    esp,0xc
c001c478:	8b 10                	mov    edx,DWORD PTR [eax]
c001c47a:	50                   	push   eax
c001c47b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c47e:	83 c4 10             	add    esp,0x10
c001c481:	31 c0                	xor    eax,eax
c001c483:	83 c4 0c             	add    esp,0xc
c001c486:	c3                   	ret    
c001c487:	90                   	nop

c001c488 <ATAPI::ATAPI()>:
c001c488:	83 ec 0c             	sub    esp,0xc
c001c48b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c48f:	83 ec 04             	sub    esp,0x4
c001c492:	68 00 08 00 00       	push   0x800
c001c497:	68 51 1d 02 c0       	push   0xc0021d51
c001c49c:	50                   	push   eax
c001c49d:	e8 48 fd fe ff       	call   c000c1ea <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c4a2:	83 c4 10             	add    esp,0x10
c001c4a5:	ba 6c 1c 02 c0       	mov    edx,0xc0021c6c
c001c4aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4ae:	89 10                	mov    DWORD PTR [eax],edx
c001c4b0:	90                   	nop
c001c4b1:	83 c4 0c             	add    esp,0xc
c001c4b4:	c3                   	ret    
c001c4b5:	90                   	nop

c001c4b6 <ATAPI::readyForCommand()>:
c001c4b6:	56                   	push   esi
c001c4b7:	53                   	push   ebx
c001c4b8:	53                   	push   ebx
c001c4b9:	31 db                	xor    ebx,ebx
c001c4bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c4bf:	51                   	push   ecx
c001c4c0:	6a 0c                	push   0xc
c001c4c2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c4c9:	50                   	push   eax
c001c4ca:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c4d0:	e8 a3 e8 ff ff       	call   c001ad78 <IDE::read(unsigned char, unsigned char)>
c001c4d5:	83 c4 10             	add    esp,0x10
c001c4d8:	a8 88                	test   al,0x88
c001c4da:	74 25                	je     c001c501 <ATAPI::readyForCommand()+0x4b>
c001c4dc:	43                   	inc    ebx
c001c4dd:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001c4e3:	7e da                	jle    c001c4bf <ATAPI::readyForCommand()+0x9>
c001c4e5:	83 ec 0c             	sub    esp,0xc
c001c4e8:	68 5e 01 00 00       	push   0x15e
c001c4ed:	e8 0a 8f ff ff       	call   c00153fc <milliTenthSleep(unsigned int)>
c001c4f2:	83 c4 10             	add    esp,0x10
c001c4f5:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001c4fb:	75 c2                	jne    c001c4bf <ATAPI::readyForCommand()+0x9>
c001c4fd:	31 c0                	xor    eax,eax
c001c4ff:	eb 02                	jmp    c001c503 <ATAPI::readyForCommand()+0x4d>
c001c501:	b0 01                	mov    al,0x1
c001c503:	5a                   	pop    edx
c001c504:	5b                   	pop    ebx
c001c505:	5e                   	pop    esi
c001c506:	c3                   	ret    
c001c507:	90                   	nop

c001c508 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c508:	55                   	push   ebp
c001c509:	57                   	push   edi
c001c50a:	56                   	push   esi
c001c50b:	53                   	push   ebx
c001c50c:	83 ec 20             	sub    esp,0x20
c001c50f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c513:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001c517:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c51b:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c51f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c523:	6a 01                	push   0x1
c001c525:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c52c:	50                   	push   eax
c001c52d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c533:	e8 88 e9 ff ff       	call   c001aec0 <IDE::enableIRQs(unsigned char, bool)>
c001c538:	5e                   	pop    esi
c001c539:	58                   	pop    eax
c001c53a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c541:	50                   	push   eax
c001c542:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c548:	e8 45 e7 ff ff       	call   c001ac92 <IDE::prepareInterrupt(unsigned char)>
c001c54d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c550:	e8 61 ff ff ff       	call   c001c4b6 <ATAPI::readyForCommand()>
c001c555:	83 c4 10             	add    esp,0x10
c001c558:	84 c0                	test   al,al
c001c55a:	75 0a                	jne    c001c566 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001c55c:	bb 01 00 00 00       	mov    ebx,0x1
c001c561:	e9 60 02 00 00       	jmp    c001c7c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001c566:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001c56c:	c1 e0 04             	shl    eax,0x4
c001c56f:	0f b6 c0             	movzx  eax,al
c001c572:	50                   	push   eax
c001c573:	6a 06                	push   0x6
c001c575:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c57c:	50                   	push   eax
c001c57d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c583:	e8 30 e7 ff ff       	call   c001acb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c588:	6a 00                	push   0x0
c001c58a:	6a 01                	push   0x1
c001c58c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c593:	50                   	push   eax
c001c594:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c59a:	e8 19 e7 ff ff       	call   c001acb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c59f:	83 c4 20             	add    esp,0x20
c001c5a2:	0f b6 c3             	movzx  eax,bl
c001c5a5:	0f b6 df             	movzx  ebx,bh
c001c5a8:	50                   	push   eax
c001c5a9:	6a 04                	push   0x4
c001c5ab:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5b2:	50                   	push   eax
c001c5b3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5b9:	e8 fa e6 ff ff       	call   c001acb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5be:	53                   	push   ebx
c001c5bf:	6a 05                	push   0x5
c001c5c1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5c8:	50                   	push   eax
c001c5c9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5cf:	e8 e4 e6 ff ff       	call   c001acb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5d4:	83 c4 20             	add    esp,0x20
c001c5d7:	68 a0 00 00 00       	push   0xa0
c001c5dc:	6a 07                	push   0x7
c001c5de:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5e5:	50                   	push   eax
c001c5e6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5ec:	e8 c7 e6 ff ff       	call   c001acb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5f1:	83 c4 0c             	add    esp,0xc
c001c5f4:	6a 01                	push   0x1
c001c5f6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5fd:	50                   	push   eax
c001c5fe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c604:	e8 97 f1 ff ff       	call   c001b7a0 <IDE::polling(unsigned char, unsigned int)>
c001c609:	83 c4 10             	add    esp,0x10
c001c60c:	0f b6 d8             	movzx  ebx,al
c001c60f:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001c615:	85 db                	test   ebx,ebx
c001c617:	74 20                	je     c001c639 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001c619:	53                   	push   ebx
c001c61a:	0f b6 c0             	movzx  eax,al
c001c61d:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001c624:	52                   	push   edx
c001c625:	50                   	push   eax
c001c626:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c62c:	e8 b5 f0 ff ff       	call   c001b6e6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c631:	83 c4 10             	add    esp,0x10
c001c634:	e9 8d 01 00 00       	jmp    c001c7c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001c639:	0f b6 c0             	movzx  eax,al
c001c63c:	53                   	push   ebx
c001c63d:	53                   	push   ebx
c001c63e:	50                   	push   eax
c001c63f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c645:	e8 5c e6 ff ff       	call   c001aca6 <IDE::getBase(unsigned char)>
c001c64a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c64e:	b9 06 00 00 00       	mov    ecx,0x6
c001c653:	89 c2                	mov    edx,eax
c001c655:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001c658:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c65c:	83 c4 10             	add    esp,0x10
c001c65f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c664:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c668:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c66e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c675:	85 db                	test   ebx,ebx
c001c677:	0f 84 ec 00 00 00    	je     c001c769 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001c67d:	51                   	push   ecx
c001c67e:	51                   	push   ecx
c001c67f:	52                   	push   edx
c001c680:	50                   	push   eax
c001c681:	e8 a0 e7 ff ff       	call   c001ae26 <IDE::waitInterrupt(unsigned char)>
c001c686:	83 c4 10             	add    esp,0x10
c001c689:	84 c0                	test   al,al
c001c68b:	0f 84 cb fe ff ff    	je     c001c55c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c691:	56                   	push   esi
c001c692:	56                   	push   esi
c001c693:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c69a:	50                   	push   eax
c001c69b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c6a1:	e8 ec e5 ff ff       	call   c001ac92 <IDE::prepareInterrupt(unsigned char)>
c001c6a6:	83 c4 0c             	add    esp,0xc
c001c6a9:	6a 04                	push   0x4
c001c6ab:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c6b2:	50                   	push   eax
c001c6b3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c6b9:	e8 ba e6 ff ff       	call   c001ad78 <IDE::read(unsigned char, unsigned char)>
c001c6be:	83 c4 0c             	add    esp,0xc
c001c6c1:	89 c6                	mov    esi,eax
c001c6c3:	6a 05                	push   0x5
c001c6c5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c6cc:	50                   	push   eax
c001c6cd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c6d3:	e8 a0 e6 ff ff       	call   c001ad78 <IDE::read(unsigned char, unsigned char)>
c001c6d8:	89 f1                	mov    ecx,esi
c001c6da:	0f b6 c0             	movzx  eax,al
c001c6dd:	0f b6 f1             	movzx  esi,cl
c001c6e0:	c1 e0 08             	shl    eax,0x8
c001c6e3:	09 c6                	or     esi,eax
c001c6e5:	d1 fe                	sar    esi,1
c001c6e7:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001c6eb:	83 c4 10             	add    esp,0x10
c001c6ee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001c6f3:	74 41                	je     c001c736 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001c6f5:	31 c9                	xor    ecx,ecx
c001c6f7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c6fd:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c704:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001c708:	75 0a                	jne    c001c714 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001c70a:	01 c9                	add    ecx,ecx
c001c70c:	01 cd                	add    ebp,ecx
c001c70e:	4b                   	dec    ebx
c001c70f:	e9 54 ff ff ff       	jmp    c001c668 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001c714:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001c719:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c71d:	51                   	push   ecx
c001c71e:	51                   	push   ecx
c001c71f:	52                   	push   edx
c001c720:	50                   	push   eax
c001c721:	e8 80 e5 ff ff       	call   c001aca6 <IDE::getBase(unsigned char)>
c001c726:	89 c2                	mov    edx,eax
c001c728:	89 f0                	mov    eax,esi
c001c72a:	66 ef                	out    dx,ax
c001c72c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c730:	83 c4 10             	add    esp,0x10
c001c733:	41                   	inc    ecx
c001c734:	eb c1                	jmp    c001c6f7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001c736:	31 f6                	xor    esi,esi
c001c738:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c73e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c745:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001c749:	75 06                	jne    c001c751 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001c74b:	01 f6                	add    esi,esi
c001c74d:	01 f5                	add    ebp,esi
c001c74f:	eb bd                	jmp    c001c70e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001c751:	51                   	push   ecx
c001c752:	51                   	push   ecx
c001c753:	52                   	push   edx
c001c754:	50                   	push   eax
c001c755:	e8 4c e5 ff ff       	call   c001aca6 <IDE::getBase(unsigned char)>
c001c75a:	89 c2                	mov    edx,eax
c001c75c:	66 ed                	in     ax,dx
c001c75e:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001c763:	83 c4 10             	add    esp,0x10
c001c766:	46                   	inc    esi
c001c767:	eb cf                	jmp    c001c738 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001c769:	51                   	push   ecx
c001c76a:	51                   	push   ecx
c001c76b:	52                   	push   edx
c001c76c:	50                   	push   eax
c001c76d:	e8 b4 e6 ff ff       	call   c001ae26 <IDE::waitInterrupt(unsigned char)>
c001c772:	83 c4 10             	add    esp,0x10
c001c775:	84 c0                	test   al,al
c001c777:	0f 84 df fd ff ff    	je     c001c55c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c77d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c782:	52                   	push   edx
c001c783:	52                   	push   edx
c001c784:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c78b:	50                   	push   eax
c001c78c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c792:	e8 fb e4 ff ff       	call   c001ac92 <IDE::prepareInterrupt(unsigned char)>
c001c797:	83 c4 10             	add    esp,0x10
c001c79a:	50                   	push   eax
c001c79b:	50                   	push   eax
c001c79c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c7a3:	50                   	push   eax
c001c7a4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c7aa:	e8 f7 e4 ff ff       	call   c001aca6 <IDE::getBase(unsigned char)>
c001c7af:	8d 50 07             	lea    edx,[eax+0x7]
c001c7b2:	ec                   	in     al,dx
c001c7b3:	83 c4 10             	add    esp,0x10
c001c7b6:	a8 88                	test   al,0x88
c001c7b8:	74 0a                	je     c001c7c4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001c7ba:	4b                   	dec    ebx
c001c7bb:	75 dd                	jne    c001c79a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001c7bd:	bb 02 00 00 00       	mov    ebx,0x2
c001c7c2:	eb 02                	jmp    c001c7c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001c7c4:	31 db                	xor    ebx,ebx
c001c7c6:	83 c4 1c             	add    esp,0x1c
c001c7c9:	89 d8                	mov    eax,ebx
c001c7cb:	5b                   	pop    ebx
c001c7cc:	5e                   	pop    esi
c001c7cd:	5f                   	pop    edi
c001c7ce:	5d                   	pop    ebp
c001c7cf:	c3                   	ret    

c001c7d0 <ATAPI::diskRemoved()>:
c001c7d0:	53                   	push   ebx
c001c7d1:	83 ec 14             	sub    esp,0x14
c001c7d4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c7d8:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c7df:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001c7e5:	e8 9c 09 ff ff       	call   c000d186 <LogicalDisk::unmount()>
c001c7ea:	58                   	pop    eax
c001c7eb:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001c7f1:	e8 72 13 ff ff       	call   c000db68 <VCache::writeWriteBuffer()>
c001c7f6:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001c7fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c800:	83 c4 18             	add    esp,0x18
c001c803:	5b                   	pop    ebx
c001c804:	e9 4f 13 ff ff       	jmp    c000db58 <VCache::invalidateReadBuffer()>
c001c809:	90                   	nop

c001c80a <ATAPI::eject()>:
c001c80a:	57                   	push   edi
c001c80b:	b9 03 00 00 00       	mov    ecx,0x3
c001c810:	53                   	push   ebx
c001c811:	83 ec 14             	sub    esp,0x14
c001c814:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c818:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c81c:	fc                   	cld    
c001c81d:	31 c0                	xor    eax,eax
c001c81f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c821:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001c826:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001c82b:	50                   	push   eax
c001c82c:	50                   	push   eax
c001c82d:	6a 00                	push   0x0
c001c82f:	6a 00                	push   0x0
c001c831:	6a 00                	push   0x0
c001c833:	6a 02                	push   0x2
c001c835:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c839:	50                   	push   eax
c001c83a:	53                   	push   ebx
c001c83b:	e8 c8 fc ff ff       	call   c001c508 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c840:	83 c4 14             	add    esp,0x14
c001c843:	53                   	push   ebx
c001c844:	e8 87 ff ff ff       	call   c001c7d0 <ATAPI::diskRemoved()>
c001c849:	83 c4 24             	add    esp,0x24
c001c84c:	31 c0                	xor    eax,eax
c001c84e:	5b                   	pop    ebx
c001c84f:	5f                   	pop    edi
c001c850:	c3                   	ret    
c001c851:	90                   	nop

c001c852 <ATAPI::diskInserted()>:
c001c852:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c856:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001c85d:	c3                   	ret    

c001c85e <ATAPI::detectMedia()>:
c001c85e:	56                   	push   esi
c001c85f:	53                   	push   ebx
c001c860:	83 ec 28             	sub    esp,0x28
c001c863:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c867:	6a 0c                	push   0xc
c001c869:	6a 00                	push   0x0
c001c86b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001c86f:	56                   	push   esi
c001c870:	e8 7b 3c fe ff       	call   c00004f0 <memset>
c001c875:	58                   	pop    eax
c001c876:	5a                   	pop    edx
c001c877:	6a 00                	push   0x0
c001c879:	6a 00                	push   0x0
c001c87b:	6a 00                	push   0x0
c001c87d:	6a 00                	push   0x0
c001c87f:	56                   	push   esi
c001c880:	53                   	push   ebx
c001c881:	e8 82 fc ff ff       	call   c001c508 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c886:	83 c4 1c             	add    esp,0x1c
c001c889:	6a 0c                	push   0xc
c001c88b:	6a 00                	push   0x0
c001c88d:	56                   	push   esi
c001c88e:	e8 5d 3c fe ff       	call   c00004f0 <memset>
c001c893:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001c898:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001c89d:	59                   	pop    ecx
c001c89e:	58                   	pop    eax
c001c89f:	6a 01                	push   0x1
c001c8a1:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001c8a5:	50                   	push   eax
c001c8a6:	6a 00                	push   0x0
c001c8a8:	6a 12                	push   0x12
c001c8aa:	56                   	push   esi
c001c8ab:	53                   	push   ebx
c001c8ac:	e8 57 fc ff ff       	call   c001c508 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c8b1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001c8b5:	83 c4 20             	add    esp,0x20
c001c8b8:	83 e0 7f             	and    eax,0x7f
c001c8bb:	83 f8 70             	cmp    eax,0x70
c001c8be:	74 15                	je     c001c8d5 <ATAPI::detectMedia()+0x77>
c001c8c0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c8c7:	75 0c                	jne    c001c8d5 <ATAPI::detectMedia()+0x77>
c001c8c9:	83 ec 0c             	sub    esp,0xc
c001c8cc:	53                   	push   ebx
c001c8cd:	e8 80 ff ff ff       	call   c001c852 <ATAPI::diskInserted()>
c001c8d2:	83 c4 10             	add    esp,0x10
c001c8d5:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c8d9:	83 e0 0f             	and    eax,0xf
c001c8dc:	83 f8 02             	cmp    eax,0x2
c001c8df:	75 1b                	jne    c001c8fc <ATAPI::detectMedia()+0x9e>
c001c8e1:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001c8e6:	75 2d                	jne    c001c915 <ATAPI::detectMedia()+0xb7>
c001c8e8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c8ef:	74 24                	je     c001c915 <ATAPI::detectMedia()+0xb7>
c001c8f1:	83 ec 0c             	sub    esp,0xc
c001c8f4:	53                   	push   ebx
c001c8f5:	e8 d6 fe ff ff       	call   c001c7d0 <ATAPI::diskRemoved()>
c001c8fa:	eb 16                	jmp    c001c912 <ATAPI::detectMedia()+0xb4>
c001c8fc:	85 c0                	test   eax,eax
c001c8fe:	75 15                	jne    c001c915 <ATAPI::detectMedia()+0xb7>
c001c900:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c907:	75 0c                	jne    c001c915 <ATAPI::detectMedia()+0xb7>
c001c909:	83 ec 0c             	sub    esp,0xc
c001c90c:	53                   	push   ebx
c001c90d:	e8 40 ff ff ff       	call   c001c852 <ATAPI::diskInserted()>
c001c912:	83 c4 10             	add    esp,0x10
c001c915:	83 c4 24             	add    esp,0x24
c001c918:	5b                   	pop    ebx
c001c919:	5e                   	pop    esi
c001c91a:	c3                   	ret    
c001c91b:	90                   	nop

c001c91c <ATAPI::open(int, int, void*)>:
c001c91c:	56                   	push   esi
c001c91d:	53                   	push   ebx
c001c91e:	50                   	push   eax
c001c91f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c923:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c927:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c92b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c931:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c937:	c1 e0 06             	shl    eax,0x6
c001c93a:	01 d0                	add    eax,edx
c001c93c:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001c943:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001c949:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001c950:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001c95a:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c960:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001c967:	6a 04                	push   0x4
c001c969:	6a 0c                	push   0xc
c001c96b:	51                   	push   ecx
c001c96c:	52                   	push   edx
c001c96d:	e8 46 e3 ff ff       	call   c001acb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c972:	90                   	nop
c001c973:	90                   	nop
c001c974:	6a 00                	push   0x0
c001c976:	6a 0c                	push   0xc
c001c978:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c97f:	50                   	push   eax
c001c980:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c986:	e8 2d e3 ff ff       	call   c001acb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c98b:	83 c4 14             	add    esp,0x14
c001c98e:	68 78 01 00 00       	push   0x178
c001c993:	e8 16 b1 fe ff       	call   c0007aae <malloc>
c001c998:	83 c4 0c             	add    esp,0xc
c001c99b:	89 c6                	mov    esi,eax
c001c99d:	6a 00                	push   0x0
c001c99f:	68 ff ff ff 7f       	push   0x7fffffff
c001c9a4:	6a 00                	push   0x0
c001c9a6:	6a 00                	push   0x0
c001c9a8:	53                   	push   ebx
c001c9a9:	68 03 1e 02 c0       	push   0xc0021e03
c001c9ae:	50                   	push   eax
c001c9af:	e8 10 06 ff ff       	call   c000cfc4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c9b4:	83 c4 14             	add    esp,0x14
c001c9b7:	56                   	push   esi
c001c9b8:	e8 c7 06 ff ff       	call   c000d084 <LogicalDisk::assignDriveLetter()>
c001c9bd:	5a                   	pop    edx
c001c9be:	0f be c0             	movsx  eax,al
c001c9c1:	59                   	pop    ecx
c001c9c2:	50                   	push   eax
c001c9c3:	68 54 1c 02 c0       	push   0xc0021c54
c001c9c8:	e8 1d e0 fe ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c001c9cd:	58                   	pop    eax
c001c9ce:	5a                   	pop    edx
c001c9cf:	56                   	push   esi
c001c9d0:	53                   	push   ebx
c001c9d1:	e8 48 f4 fe ff       	call   c000be1e <Device::addChild(Device*)>
c001c9d6:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001c9dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9df:	e8 6e f8 fe ff       	call   c000c252 <PhysicalDisk::startCache()>
c001c9e4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c9eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9ee:	e8 6b fe ff ff       	call   c001c85e <ATAPI::detectMedia()>
c001c9f3:	83 c4 14             	add    esp,0x14
c001c9f6:	31 c0                	xor    eax,eax
c001c9f8:	5b                   	pop    ebx
c001c9f9:	5e                   	pop    esi
c001c9fa:	c3                   	ret    
c001c9fb:	90                   	nop

c001c9fc <ATAPI::read(unsigned long long, int, void*)>:
c001c9fc:	55                   	push   ebp
c001c9fd:	57                   	push   edi
c001c9fe:	56                   	push   esi
c001c9ff:	53                   	push   ebx
c001ca00:	83 ec 1c             	sub    esp,0x1c
c001ca03:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ca07:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ca0b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001ca0f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ca16:	74 3c                	je     c001ca54 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001ca18:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ca1c:	b9 03 00 00 00       	mov    ecx,0x3
c001ca21:	fc                   	cld    
c001ca22:	31 c0                	xor    eax,eax
c001ca24:	0f ce                	bswap  esi
c001ca26:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ca28:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001ca2d:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001ca31:	89 e8                	mov    eax,ebp
c001ca33:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001ca37:	50                   	push   eax
c001ca38:	50                   	push   eax
c001ca39:	55                   	push   ebp
c001ca3a:	c1 e5 0b             	shl    ebp,0xb
c001ca3d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ca41:	6a 00                	push   0x0
c001ca43:	55                   	push   ebp
c001ca44:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ca48:	50                   	push   eax
c001ca49:	53                   	push   ebx
c001ca4a:	e8 b9 fa ff ff       	call   c001c508 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ca4f:	83 c4 20             	add    esp,0x20
c001ca52:	eb 1a                	jmp    c001ca6e <ATAPI::read(unsigned long long, int, void*)+0x72>
c001ca54:	83 ec 0c             	sub    esp,0xc
c001ca57:	53                   	push   ebx
c001ca58:	e8 01 fe ff ff       	call   c001c85e <ATAPI::detectMedia()>
c001ca5d:	83 c4 10             	add    esp,0x10
c001ca60:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ca67:	75 af                	jne    c001ca18 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001ca69:	b8 02 00 00 00       	mov    eax,0x2
c001ca6e:	83 c4 1c             	add    esp,0x1c
c001ca71:	5b                   	pop    ebx
c001ca72:	5e                   	pop    esi
c001ca73:	5f                   	pop    edi
c001ca74:	5d                   	pop    ebp
c001ca75:	c3                   	ret    

c001ca76 <SATA::close(int, int, void*)>:
c001ca76:	83 ec 0c             	sub    esp,0xc
c001ca79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca7d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ca83:	85 c0                	test   eax,eax
c001ca85:	74 0c                	je     c001ca93 <SATA::close(int, int, void*)+0x1d>
c001ca87:	83 ec 0c             	sub    esp,0xc
c001ca8a:	8b 10                	mov    edx,DWORD PTR [eax]
c001ca8c:	50                   	push   eax
c001ca8d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ca90:	83 c4 10             	add    esp,0x10
c001ca93:	31 c0                	xor    eax,eax
c001ca95:	83 c4 0c             	add    esp,0xc
c001ca98:	c3                   	ret    
c001ca99:	90                   	nop

c001ca9a <SATA::powerSaving(PowerSavingLevel)>:
c001ca9a:	c3                   	ret    
c001ca9b:	90                   	nop

c001ca9c <SATA::open(int, int, void*)>:
c001ca9c:	56                   	push   esi
c001ca9d:	53                   	push   ebx
c001ca9e:	50                   	push   eax
c001ca9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001caa3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001caa7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cab1:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001cab7:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001cac1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cac5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cacf:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001cad5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cadc:	e8 d2 b2 fe ff       	call   c0007db3 <Phys::allocatePage()>
c001cae1:	89 c6                	mov    esi,eax
c001cae3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001cae9:	81 c6 00 10 00 00    	add    esi,0x1000
c001caef:	e8 bf b2 fe ff       	call   c0007db3 <Phys::allocatePage()>
c001caf4:	39 c6                	cmp    esi,eax
c001caf6:	74 10                	je     c001cb08 <SATA::open(int, int, void*)+0x6c>
c001caf8:	83 ec 0c             	sub    esp,0xc
c001cafb:	68 9c 1c 02 c0       	push   0xc0021c9c
c001cb00:	e8 12 3e ff ff       	call   c0010917 <KePanic(char const*)>
c001cb05:	83 c4 10             	add    esp,0x10
c001cb08:	83 ec 0c             	sub    esp,0xc
c001cb0b:	6a 02                	push   0x2
c001cb0d:	e8 0b cb fe ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c001cb12:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cb18:	6a 03                	push   0x3
c001cb1a:	50                   	push   eax
c001cb1b:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001cb21:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001cb27:	e8 d8 d1 fe ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cb2c:	83 c4 14             	add    esp,0x14
c001cb2f:	53                   	push   ebx
c001cb30:	e8 1d f7 fe ff       	call   c000c252 <PhysicalDisk::startCache()>
c001cb35:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb38:	e8 59 09 ff ff       	call   c000d496 <createPartitionsForDisk(PhysicalDisk*)>
c001cb3d:	83 c4 14             	add    esp,0x14
c001cb40:	31 c0                	xor    eax,eax
c001cb42:	5b                   	pop    ebx
c001cb43:	5e                   	pop    esi
c001cb44:	c3                   	ret    
c001cb45:	90                   	nop

c001cb46 <SATA::SATA()>:
c001cb46:	83 ec 0c             	sub    esp,0xc
c001cb49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb4d:	83 ec 04             	sub    esp,0x4
c001cb50:	68 00 02 00 00       	push   0x200
c001cb55:	68 b0 1c 02 c0       	push   0xc0021cb0
c001cb5a:	50                   	push   eax
c001cb5b:	e8 8a f6 fe ff       	call   c000c1ea <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cb60:	83 c4 10             	add    esp,0x10
c001cb63:	ba 20 1d 02 c0       	mov    edx,0xc0021d20
c001cb68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb6c:	89 10                	mov    DWORD PTR [eax],edx
c001cb6e:	90                   	nop
c001cb6f:	83 c4 0c             	add    esp,0xc
c001cb72:	c3                   	ret    
c001cb73:	90                   	nop

c001cb74 <SATA::access(unsigned long long, int, void*, bool)>:
c001cb74:	55                   	push   ebp
c001cb75:	57                   	push   edi
c001cb76:	56                   	push   esi
c001cb77:	53                   	push   ebx
c001cb78:	83 ec 2c             	sub    esp,0x2c
c001cb7b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001cb7f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cb83:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb87:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001cb8b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cb8f:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001cb94:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cb98:	7e 10                	jle    c001cbaa <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001cb9a:	83 ec 0c             	sub    esp,0xc
c001cb9d:	68 c0 1c 02 c0       	push   0xc0021cc0
c001cba2:	e8 70 3d ff ff       	call   c0010917 <KePanic(char const*)>
c001cba7:	83 c4 10             	add    esp,0x10
c001cbaa:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cbb0:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001cbb6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cbbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cbc0:	89 d0                	mov    eax,edx
c001cbc2:	c1 e0 07             	shl    eax,0x7
c001cbc5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001cbc9:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001cbd3:	51                   	push   ecx
c001cbd4:	8d 42 02             	lea    eax,[edx+0x2]
c001cbd7:	51                   	push   ecx
c001cbd8:	c1 e0 07             	shl    eax,0x7
c001cbdb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001cbdf:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001cbe3:	50                   	push   eax
c001cbe4:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001cbea:	e8 91 ec ff ff       	call   c001b880 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001cbef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cbf3:	83 c4 10             	add    esp,0x10
c001cbf6:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001cbfb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cbff:	0f 84 57 01 00 00    	je     c001cd5c <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001cc05:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cc09:	c1 e0 09             	shl    eax,0x9
c001cc0c:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001cc11:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cc15:	74 0e                	je     c001cc25 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001cc17:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001cc1d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001cc21:	89 c1                	mov    ecx,eax
c001cc23:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cc25:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cc2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001cc2f:	8d 42 02             	lea    eax,[edx+0x2]
c001cc32:	c1 e0 07             	shl    eax,0x7
c001cc35:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001cc39:	8b 00                	mov    eax,DWORD PTR [eax]
c001cc3b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001cc41:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001cc47:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cc4b:	c1 e1 05             	shl    ecx,0x5
c001cc4e:	01 c8                	add    eax,ecx
c001cc50:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cc54:	83 e1 01             	and    ecx,0x1
c001cc57:	89 ce                	mov    esi,ecx
c001cc59:	8a 08                	mov    cl,BYTE PTR [eax]
c001cc5b:	c1 e6 06             	shl    esi,0x6
c001cc5e:	83 e1 bf             	and    ecx,0xffffffbf
c001cc61:	09 f1                	or     ecx,esi
c001cc63:	88 08                	mov    BYTE PTR [eax],cl
c001cc65:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cc67:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001cc6d:	81 c9 05 00 01 00    	or     ecx,0x10005
c001cc73:	89 08                	mov    DWORD PTR [eax],ecx
c001cc75:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cc7b:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001cc81:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001cc87:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001cc8a:	50                   	push   eax
c001cc8b:	68 90 00 00 00       	push   0x90
c001cc90:	6a 00                	push   0x0
c001cc92:	56                   	push   esi
c001cc93:	e8 58 38 fe ff       	call   c00004f0 <memset>
c001cc98:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cc9e:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001cca4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cca8:	83 c4 10             	add    esp,0x10
c001ccab:	48                   	dec    eax
c001ccac:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ccb1:	89 c1                	mov    ecx,eax
c001ccb3:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001ccb9:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ccbe:	09 c8                	or     eax,ecx
c001ccc0:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ccc6:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001cccc:	83 c8 80             	or     eax,0xffffff80
c001cccf:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001ccd5:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ccd8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ccdc:	25 00 7f 00 00       	and    eax,0x7f00
c001cce1:	0d 27 80 ff ff       	or     eax,0xffff8027
c001cce6:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001cceb:	66 89 06             	mov    WORD PTR [esi],ax
c001ccee:	b0 35                	mov    al,0x35
c001ccf0:	75 02                	jne    c001ccf4 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001ccf2:	b0 25                	mov    al,0x25
c001ccf4:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ccf7:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001ccfb:	89 e8                	mov    eax,ebp
c001ccfd:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001cd01:	c1 e8 10             	shr    eax,0x10
c001cd04:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001cd07:	89 e8                	mov    eax,ebp
c001cd09:	c1 e8 18             	shr    eax,0x18
c001cd0c:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001cd0f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001cd13:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001cd16:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cd1a:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001cd1d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cd21:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001cd25:	89 d6                	mov    esi,edx
c001cd27:	31 c0                	xor    eax,eax
c001cd29:	c1 e6 07             	shl    esi,0x7
c001cd2c:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cd30:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001cd36:	80 e1 88             	and    cl,0x88
c001cd39:	74 0a                	je     c001cd45 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001cd3b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cd40:	74 0a                	je     c001cd4c <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001cd42:	40                   	inc    eax
c001cd43:	eb eb                	jmp    c001cd30 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001cd45:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cd4a:	75 17                	jne    c001cd63 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001cd4c:	83 ec 0c             	sub    esp,0xc
c001cd4f:	68 f9 1c 02 c0       	push   0xc0021cf9
c001cd54:	e8 91 dc fe ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c001cd59:	83 c4 10             	add    esp,0x10
c001cd5c:	b8 01 00 00 00       	mov    eax,0x1
c001cd61:	eb 5d                	jmp    c001cdc0 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001cd63:	b8 01 00 00 00       	mov    eax,0x1
c001cd68:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001cd6c:	c1 e2 07             	shl    edx,0x7
c001cd6f:	d3 e0                	shl    eax,cl
c001cd71:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001cd75:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001cd7b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001cd81:	85 c8                	test   eax,ecx
c001cd83:	74 16                	je     c001cd9b <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001cd85:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001cd8b:	0f ba e1 1e          	bt     ecx,0x1e
c001cd8f:	73 ea                	jae    c001cd7b <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001cd91:	83 ec 0c             	sub    esp,0xc
c001cd94:	68 07 1d 02 c0       	push   0xc0021d07
c001cd99:	eb b9                	jmp    c001cd54 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001cd9b:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001cda1:	0f ba e0 1e          	bt     eax,0x1e
c001cda5:	72 b5                	jb     c001cd5c <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001cda7:	31 c0                	xor    eax,eax
c001cda9:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001cdae:	75 10                	jne    c001cdc0 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001cdb0:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001cdb6:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001cdba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001cdbe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cdc0:	83 c4 2c             	add    esp,0x2c
c001cdc3:	5b                   	pop    ebx
c001cdc4:	5e                   	pop    esi
c001cdc5:	5f                   	pop    edi
c001cdc6:	5d                   	pop    ebp
c001cdc7:	c3                   	ret    

c001cdc8 <SATA::read(unsigned long long, int, void*)>:
c001cdc8:	55                   	push   ebp
c001cdc9:	57                   	push   edi
c001cdca:	56                   	push   esi
c001cdcb:	be 04 00 00 00       	mov    esi,0x4
c001cdd0:	53                   	push   ebx
c001cdd1:	83 ec 0c             	sub    esp,0xc
c001cdd4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cdd8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cddc:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cddf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cde3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cde7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cded:	0f 87 1a 02 00 00    	ja     c001d00d <SATA::read(unsigned long long, int, void*)+0x245>
c001cdf3:	be 06 00 00 00       	mov    esi,0x6
c001cdf8:	85 c9                	test   ecx,ecx
c001cdfa:	0f 84 0d 02 00 00    	je     c001d00d <SATA::read(unsigned long long, int, void*)+0x245>
c001ce00:	56                   	push   esi
c001ce01:	56                   	push   esi
c001ce02:	6a 00                	push   0x0
c001ce04:	51                   	push   ecx
c001ce05:	53                   	push   ebx
c001ce06:	52                   	push   edx
c001ce07:	50                   	push   eax
c001ce08:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ce0c:	e8 63 fd ff ff       	call   c001cb74 <SATA::access(unsigned long long, int, void*, bool)>
c001ce11:	83 c4 20             	add    esp,0x20
c001ce14:	89 c6                	mov    esi,eax
c001ce16:	85 c0                	test   eax,eax
c001ce18:	0f 85 ea 01 00 00    	jne    c001d008 <SATA::read(unsigned long long, int, void*)+0x240>
c001ce1e:	01 1d 54 8b 02 c0    	add    DWORD PTR ds:0xc0028b54,ebx
c001ce24:	bb 0a 00 00 00       	mov    ebx,0xa
c001ce29:	50                   	push   eax
c001ce2a:	50                   	push   eax
c001ce2b:	6a 0f                	push   0xf
c001ce2d:	6a 00                	push   0x0
c001ce2f:	e8 75 f2 ff ff       	call   c001c0a9 <combineColours(unsigned char, unsigned char)>
c001ce34:	5a                   	pop    edx
c001ce35:	0f b6 c0             	movzx  eax,al
c001ce38:	59                   	pop    ecx
c001ce39:	b9 10 27 00 00       	mov    ecx,0x2710
c001ce3e:	50                   	push   eax
c001ce3f:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce44:	99                   	cdq    
c001ce45:	f7 f9                	idiv   ecx
c001ce47:	99                   	cdq    
c001ce48:	f7 fb                	idiv   ebx
c001ce4a:	8d 42 30             	lea    eax,[edx+0x30]
c001ce4d:	0f b6 c0             	movzx  eax,al
c001ce50:	50                   	push   eax
c001ce51:	e8 42 f2 ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001ce56:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001ce5c:	5f                   	pop    edi
c001ce5d:	5d                   	pop    ebp
c001ce5e:	bd e8 03 00 00       	mov    ebp,0x3e8
c001ce63:	6a 0f                	push   0xf
c001ce65:	6a 00                	push   0x0
c001ce67:	e8 3d f2 ff ff       	call   c001c0a9 <combineColours(unsigned char, unsigned char)>
c001ce6c:	5a                   	pop    edx
c001ce6d:	0f b6 c0             	movzx  eax,al
c001ce70:	59                   	pop    ecx
c001ce71:	50                   	push   eax
c001ce72:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce77:	99                   	cdq    
c001ce78:	f7 fd                	idiv   ebp
c001ce7a:	99                   	cdq    
c001ce7b:	f7 fb                	idiv   ebx
c001ce7d:	8d 42 30             	lea    eax,[edx+0x30]
c001ce80:	0f b6 c0             	movzx  eax,al
c001ce83:	50                   	push   eax
c001ce84:	e8 0f f2 ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001ce89:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ce8f:	5f                   	pop    edi
c001ce90:	bf 64 00 00 00       	mov    edi,0x64
c001ce95:	58                   	pop    eax
c001ce96:	6a 0f                	push   0xf
c001ce98:	6a 00                	push   0x0
c001ce9a:	e8 0a f2 ff ff       	call   c001c0a9 <combineColours(unsigned char, unsigned char)>
c001ce9f:	5a                   	pop    edx
c001cea0:	0f b6 c0             	movzx  eax,al
c001cea3:	59                   	pop    ecx
c001cea4:	50                   	push   eax
c001cea5:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ceaa:	99                   	cdq    
c001ceab:	f7 ff                	idiv   edi
c001cead:	99                   	cdq    
c001ceae:	f7 fb                	idiv   ebx
c001ceb0:	8d 42 30             	lea    eax,[edx+0x30]
c001ceb3:	0f b6 c0             	movzx  eax,al
c001ceb6:	50                   	push   eax
c001ceb7:	e8 dc f1 ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001cebc:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cec2:	58                   	pop    eax
c001cec3:	5a                   	pop    edx
c001cec4:	6a 0f                	push   0xf
c001cec6:	6a 00                	push   0x0
c001cec8:	e8 dc f1 ff ff       	call   c001c0a9 <combineColours(unsigned char, unsigned char)>
c001cecd:	59                   	pop    ecx
c001cece:	0f b6 c0             	movzx  eax,al
c001ced1:	5a                   	pop    edx
c001ced2:	50                   	push   eax
c001ced3:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ced8:	99                   	cdq    
c001ced9:	f7 fb                	idiv   ebx
c001cedb:	99                   	cdq    
c001cedc:	f7 fb                	idiv   ebx
c001cede:	8d 42 30             	lea    eax,[edx+0x30]
c001cee1:	0f b6 c0             	movzx  eax,al
c001cee4:	50                   	push   eax
c001cee5:	e8 ae f1 ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001ceea:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cef0:	59                   	pop    ecx
c001cef1:	58                   	pop    eax
c001cef2:	6a 0f                	push   0xf
c001cef4:	6a 00                	push   0x0
c001cef6:	e8 ae f1 ff ff       	call   c001c0a9 <combineColours(unsigned char, unsigned char)>
c001cefb:	5a                   	pop    edx
c001cefc:	0f b6 c0             	movzx  eax,al
c001ceff:	59                   	pop    ecx
c001cf00:	50                   	push   eax
c001cf01:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cf06:	99                   	cdq    
c001cf07:	f7 fb                	idiv   ebx
c001cf09:	8d 42 30             	lea    eax,[edx+0x30]
c001cf0c:	0f b6 c0             	movzx  eax,al
c001cf0f:	50                   	push   eax
c001cf10:	e8 83 f1 ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001cf15:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cf1b:	58                   	pop    eax
c001cf1c:	5a                   	pop    edx
c001cf1d:	6a 0f                	push   0xf
c001cf1f:	6a 00                	push   0x0
c001cf21:	e8 83 f1 ff ff       	call   c001c0a9 <combineColours(unsigned char, unsigned char)>
c001cf26:	59                   	pop    ecx
c001cf27:	0f b6 c0             	movzx  eax,al
c001cf2a:	5a                   	pop    edx
c001cf2b:	b9 10 27 00 00       	mov    ecx,0x2710
c001cf30:	50                   	push   eax
c001cf31:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf36:	99                   	cdq    
c001cf37:	f7 f9                	idiv   ecx
c001cf39:	99                   	cdq    
c001cf3a:	f7 fb                	idiv   ebx
c001cf3c:	8d 42 30             	lea    eax,[edx+0x30]
c001cf3f:	0f b6 c0             	movzx  eax,al
c001cf42:	50                   	push   eax
c001cf43:	e8 50 f1 ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001cf48:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cf4e:	59                   	pop    ecx
c001cf4f:	58                   	pop    eax
c001cf50:	6a 0f                	push   0xf
c001cf52:	6a 00                	push   0x0
c001cf54:	e8 50 f1 ff ff       	call   c001c0a9 <combineColours(unsigned char, unsigned char)>
c001cf59:	5a                   	pop    edx
c001cf5a:	0f b6 c0             	movzx  eax,al
c001cf5d:	59                   	pop    ecx
c001cf5e:	50                   	push   eax
c001cf5f:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf64:	99                   	cdq    
c001cf65:	f7 fd                	idiv   ebp
c001cf67:	99                   	cdq    
c001cf68:	f7 fb                	idiv   ebx
c001cf6a:	8d 42 30             	lea    eax,[edx+0x30]
c001cf6d:	0f b6 c0             	movzx  eax,al
c001cf70:	50                   	push   eax
c001cf71:	e8 22 f1 ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001cf76:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cf7c:	5d                   	pop    ebp
c001cf7d:	58                   	pop    eax
c001cf7e:	6a 0f                	push   0xf
c001cf80:	6a 00                	push   0x0
c001cf82:	e8 22 f1 ff ff       	call   c001c0a9 <combineColours(unsigned char, unsigned char)>
c001cf87:	5a                   	pop    edx
c001cf88:	0f b6 c0             	movzx  eax,al
c001cf8b:	59                   	pop    ecx
c001cf8c:	50                   	push   eax
c001cf8d:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf92:	99                   	cdq    
c001cf93:	f7 ff                	idiv   edi
c001cf95:	99                   	cdq    
c001cf96:	f7 fb                	idiv   ebx
c001cf98:	8d 42 30             	lea    eax,[edx+0x30]
c001cf9b:	0f b6 c0             	movzx  eax,al
c001cf9e:	50                   	push   eax
c001cf9f:	e8 f4 f0 ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001cfa4:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cfaa:	5f                   	pop    edi
c001cfab:	5d                   	pop    ebp
c001cfac:	6a 0f                	push   0xf
c001cfae:	6a 00                	push   0x0
c001cfb0:	e8 f4 f0 ff ff       	call   c001c0a9 <combineColours(unsigned char, unsigned char)>
c001cfb5:	5a                   	pop    edx
c001cfb6:	0f b6 c0             	movzx  eax,al
c001cfb9:	59                   	pop    ecx
c001cfba:	50                   	push   eax
c001cfbb:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cfc0:	99                   	cdq    
c001cfc1:	f7 fb                	idiv   ebx
c001cfc3:	99                   	cdq    
c001cfc4:	f7 fb                	idiv   ebx
c001cfc6:	8d 42 30             	lea    eax,[edx+0x30]
c001cfc9:	0f b6 c0             	movzx  eax,al
c001cfcc:	50                   	push   eax
c001cfcd:	e8 c6 f0 ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001cfd2:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cfd8:	5f                   	pop    edi
c001cfd9:	5d                   	pop    ebp
c001cfda:	6a 0f                	push   0xf
c001cfdc:	6a 00                	push   0x0
c001cfde:	e8 c6 f0 ff ff       	call   c001c0a9 <combineColours(unsigned char, unsigned char)>
c001cfe3:	5a                   	pop    edx
c001cfe4:	0f b6 c0             	movzx  eax,al
c001cfe7:	59                   	pop    ecx
c001cfe8:	50                   	push   eax
c001cfe9:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cfee:	99                   	cdq    
c001cfef:	f7 fb                	idiv   ebx
c001cff1:	83 c2 30             	add    edx,0x30
c001cff4:	0f b6 d2             	movzx  edx,dl
c001cff7:	52                   	push   edx
c001cff8:	e8 9b f0 ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001cffd:	83 c4 10             	add    esp,0x10
c001d000:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d006:	eb 05                	jmp    c001d00d <SATA::read(unsigned long long, int, void*)+0x245>
c001d008:	be 01 00 00 00       	mov    esi,0x1
c001d00d:	83 c4 0c             	add    esp,0xc
c001d010:	89 f0                	mov    eax,esi
c001d012:	5b                   	pop    ebx
c001d013:	5e                   	pop    esi
c001d014:	5f                   	pop    edi
c001d015:	5d                   	pop    ebp
c001d016:	c3                   	ret    
c001d017:	90                   	nop

c001d018 <SATA::write(unsigned long long, int, void*)>:
c001d018:	55                   	push   ebp
c001d019:	b8 04 00 00 00       	mov    eax,0x4
c001d01e:	57                   	push   edi
c001d01f:	56                   	push   esi
c001d020:	53                   	push   ebx
c001d021:	83 ec 1c             	sub    esp,0x1c
c001d024:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d028:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001d02c:	8d 75 ff             	lea    esi,[ebp-0x1]
c001d02f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d033:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d037:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001d03d:	0f 87 32 02 00 00    	ja     c001d275 <SATA::write(unsigned long long, int, void*)+0x25d>
c001d043:	b8 06 00 00 00       	mov    eax,0x6
c001d048:	85 ff                	test   edi,edi
c001d04a:	0f 84 25 02 00 00    	je     c001d275 <SATA::write(unsigned long long, int, void*)+0x25d>
c001d050:	89 ee                	mov    esi,ebp
c001d052:	c1 e6 09             	shl    esi,0x9
c001d055:	01 fe                	add    esi,edi
c001d057:	89 c8                	mov    eax,ecx
c001d059:	89 da                	mov    edx,ebx
c001d05b:	83 c0 01             	add    eax,0x1
c001d05e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d062:	83 d2 00             	adc    edx,0x0
c001d065:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d069:	50                   	push   eax
c001d06a:	50                   	push   eax
c001d06b:	6a 01                	push   0x1
c001d06d:	57                   	push   edi
c001d06e:	81 c7 00 02 00 00    	add    edi,0x200
c001d074:	6a 01                	push   0x1
c001d076:	53                   	push   ebx
c001d077:	51                   	push   ecx
c001d078:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d07c:	e8 f3 fa ff ff       	call   c001cb74 <SATA::access(unsigned long long, int, void*, bool)>
c001d081:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d085:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d089:	83 c4 20             	add    esp,0x20
c001d08c:	39 f7                	cmp    edi,esi
c001d08e:	75 c7                	jne    c001d057 <SATA::write(unsigned long long, int, void*)+0x3f>
c001d090:	bb 0a 00 00 00       	mov    ebx,0xa
c001d095:	01 2d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebp
c001d09b:	bd 10 27 00 00       	mov    ebp,0x2710
c001d0a0:	50                   	push   eax
c001d0a1:	50                   	push   eax
c001d0a2:	6a 0f                	push   0xf
c001d0a4:	6a 00                	push   0x0
c001d0a6:	e8 fe ef ff ff       	call   c001c0a9 <combineColours(unsigned char, unsigned char)>
c001d0ab:	5a                   	pop    edx
c001d0ac:	0f b6 c0             	movzx  eax,al
c001d0af:	59                   	pop    ecx
c001d0b0:	50                   	push   eax
c001d0b1:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d0b6:	99                   	cdq    
c001d0b7:	f7 fd                	idiv   ebp
c001d0b9:	99                   	cdq    
c001d0ba:	f7 fb                	idiv   ebx
c001d0bc:	8d 42 30             	lea    eax,[edx+0x30]
c001d0bf:	0f b6 c0             	movzx  eax,al
c001d0c2:	50                   	push   eax
c001d0c3:	e8 d0 ef ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001d0c8:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d0ce:	5e                   	pop    esi
c001d0cf:	5f                   	pop    edi
c001d0d0:	bf e8 03 00 00       	mov    edi,0x3e8
c001d0d5:	6a 0f                	push   0xf
c001d0d7:	6a 00                	push   0x0
c001d0d9:	e8 cb ef ff ff       	call   c001c0a9 <combineColours(unsigned char, unsigned char)>
c001d0de:	5a                   	pop    edx
c001d0df:	0f b6 c0             	movzx  eax,al
c001d0e2:	59                   	pop    ecx
c001d0e3:	50                   	push   eax
c001d0e4:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d0e9:	99                   	cdq    
c001d0ea:	f7 ff                	idiv   edi
c001d0ec:	99                   	cdq    
c001d0ed:	f7 fb                	idiv   ebx
c001d0ef:	8d 42 30             	lea    eax,[edx+0x30]
c001d0f2:	0f b6 c0             	movzx  eax,al
c001d0f5:	50                   	push   eax
c001d0f6:	e8 9d ef ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001d0fb:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d101:	5e                   	pop    esi
c001d102:	be 64 00 00 00       	mov    esi,0x64
c001d107:	58                   	pop    eax
c001d108:	6a 0f                	push   0xf
c001d10a:	6a 00                	push   0x0
c001d10c:	e8 98 ef ff ff       	call   c001c0a9 <combineColours(unsigned char, unsigned char)>
c001d111:	5a                   	pop    edx
c001d112:	0f b6 c0             	movzx  eax,al
c001d115:	59                   	pop    ecx
c001d116:	50                   	push   eax
c001d117:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d11c:	99                   	cdq    
c001d11d:	f7 fe                	idiv   esi
c001d11f:	99                   	cdq    
c001d120:	f7 fb                	idiv   ebx
c001d122:	8d 42 30             	lea    eax,[edx+0x30]
c001d125:	0f b6 c0             	movzx  eax,al
c001d128:	50                   	push   eax
c001d129:	e8 6a ef ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001d12e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d134:	58                   	pop    eax
c001d135:	5a                   	pop    edx
c001d136:	6a 0f                	push   0xf
c001d138:	6a 00                	push   0x0
c001d13a:	e8 6a ef ff ff       	call   c001c0a9 <combineColours(unsigned char, unsigned char)>
c001d13f:	59                   	pop    ecx
c001d140:	0f b6 c0             	movzx  eax,al
c001d143:	5a                   	pop    edx
c001d144:	50                   	push   eax
c001d145:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d14a:	99                   	cdq    
c001d14b:	f7 fb                	idiv   ebx
c001d14d:	99                   	cdq    
c001d14e:	f7 fb                	idiv   ebx
c001d150:	8d 42 30             	lea    eax,[edx+0x30]
c001d153:	0f b6 c0             	movzx  eax,al
c001d156:	50                   	push   eax
c001d157:	e8 3c ef ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001d15c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d162:	59                   	pop    ecx
c001d163:	58                   	pop    eax
c001d164:	6a 0f                	push   0xf
c001d166:	6a 00                	push   0x0
c001d168:	e8 3c ef ff ff       	call   c001c0a9 <combineColours(unsigned char, unsigned char)>
c001d16d:	5a                   	pop    edx
c001d16e:	0f b6 c0             	movzx  eax,al
c001d171:	59                   	pop    ecx
c001d172:	50                   	push   eax
c001d173:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d178:	99                   	cdq    
c001d179:	f7 fb                	idiv   ebx
c001d17b:	83 c2 30             	add    edx,0x30
c001d17e:	0f b6 d2             	movzx  edx,dl
c001d181:	52                   	push   edx
c001d182:	e8 11 ef ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001d187:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d18d:	58                   	pop    eax
c001d18e:	5a                   	pop    edx
c001d18f:	6a 0f                	push   0xf
c001d191:	6a 00                	push   0x0
c001d193:	e8 11 ef ff ff       	call   c001c0a9 <combineColours(unsigned char, unsigned char)>
c001d198:	59                   	pop    ecx
c001d199:	0f b6 c0             	movzx  eax,al
c001d19c:	5a                   	pop    edx
c001d19d:	50                   	push   eax
c001d19e:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d1a3:	99                   	cdq    
c001d1a4:	f7 fd                	idiv   ebp
c001d1a6:	99                   	cdq    
c001d1a7:	f7 fb                	idiv   ebx
c001d1a9:	8d 42 30             	lea    eax,[edx+0x30]
c001d1ac:	0f b6 c0             	movzx  eax,al
c001d1af:	50                   	push   eax
c001d1b0:	e8 e3 ee ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001d1b5:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d1bb:	59                   	pop    ecx
c001d1bc:	5d                   	pop    ebp
c001d1bd:	6a 0f                	push   0xf
c001d1bf:	6a 00                	push   0x0
c001d1c1:	e8 e3 ee ff ff       	call   c001c0a9 <combineColours(unsigned char, unsigned char)>
c001d1c6:	5a                   	pop    edx
c001d1c7:	0f b6 c0             	movzx  eax,al
c001d1ca:	59                   	pop    ecx
c001d1cb:	50                   	push   eax
c001d1cc:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d1d1:	99                   	cdq    
c001d1d2:	f7 ff                	idiv   edi
c001d1d4:	99                   	cdq    
c001d1d5:	f7 fb                	idiv   ebx
c001d1d7:	8d 42 30             	lea    eax,[edx+0x30]
c001d1da:	0f b6 c0             	movzx  eax,al
c001d1dd:	50                   	push   eax
c001d1de:	e8 b5 ee ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001d1e3:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d1e9:	5f                   	pop    edi
c001d1ea:	5d                   	pop    ebp
c001d1eb:	6a 0f                	push   0xf
c001d1ed:	6a 00                	push   0x0
c001d1ef:	e8 b5 ee ff ff       	call   c001c0a9 <combineColours(unsigned char, unsigned char)>
c001d1f4:	5a                   	pop    edx
c001d1f5:	0f b6 c0             	movzx  eax,al
c001d1f8:	59                   	pop    ecx
c001d1f9:	50                   	push   eax
c001d1fa:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d1ff:	99                   	cdq    
c001d200:	f7 fe                	idiv   esi
c001d202:	99                   	cdq    
c001d203:	f7 fb                	idiv   ebx
c001d205:	8d 42 30             	lea    eax,[edx+0x30]
c001d208:	0f b6 c0             	movzx  eax,al
c001d20b:	50                   	push   eax
c001d20c:	e8 87 ee ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001d211:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d217:	5e                   	pop    esi
c001d218:	5f                   	pop    edi
c001d219:	6a 0f                	push   0xf
c001d21b:	6a 00                	push   0x0
c001d21d:	e8 87 ee ff ff       	call   c001c0a9 <combineColours(unsigned char, unsigned char)>
c001d222:	5d                   	pop    ebp
c001d223:	0f b6 c0             	movzx  eax,al
c001d226:	5a                   	pop    edx
c001d227:	50                   	push   eax
c001d228:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d22d:	99                   	cdq    
c001d22e:	f7 fb                	idiv   ebx
c001d230:	99                   	cdq    
c001d231:	f7 fb                	idiv   ebx
c001d233:	8d 42 30             	lea    eax,[edx+0x30]
c001d236:	0f b6 c0             	movzx  eax,al
c001d239:	50                   	push   eax
c001d23a:	e8 59 ee ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001d23f:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d245:	59                   	pop    ecx
c001d246:	5e                   	pop    esi
c001d247:	6a 0f                	push   0xf
c001d249:	6a 00                	push   0x0
c001d24b:	e8 59 ee ff ff       	call   c001c0a9 <combineColours(unsigned char, unsigned char)>
c001d250:	5f                   	pop    edi
c001d251:	0f b6 c0             	movzx  eax,al
c001d254:	5d                   	pop    ebp
c001d255:	50                   	push   eax
c001d256:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d25b:	99                   	cdq    
c001d25c:	f7 fb                	idiv   ebx
c001d25e:	83 c2 30             	add    edx,0x30
c001d261:	0f b6 d2             	movzx  edx,dl
c001d264:	52                   	push   edx
c001d265:	e8 2e ee ff ff       	call   c001c098 <combineCharAndColour(char, unsigned char)>
c001d26a:	83 c4 10             	add    esp,0x10
c001d26d:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d273:	31 c0                	xor    eax,eax
c001d275:	83 c4 1c             	add    esp,0x1c
c001d278:	5b                   	pop    ebx
c001d279:	5e                   	pop    esi
c001d27a:	5f                   	pop    edi
c001d27b:	5d                   	pop    ebp
c001d27c:	c3                   	ret    
c001d27d:	90                   	nop

c001d27e <SATAPI::write(unsigned long long, int, void*)>:
c001d27e:	b8 03 00 00 00       	mov    eax,0x3
c001d283:	c3                   	ret    

c001d284 <SATAPI::close(int, int, void*)>:
c001d284:	83 ec 0c             	sub    esp,0xc
c001d287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d28b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d291:	85 c0                	test   eax,eax
c001d293:	74 0c                	je     c001d2a1 <SATAPI::close(int, int, void*)+0x1d>
c001d295:	83 ec 0c             	sub    esp,0xc
c001d298:	8b 10                	mov    edx,DWORD PTR [eax]
c001d29a:	50                   	push   eax
c001d29b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d29e:	83 c4 10             	add    esp,0x10
c001d2a1:	31 c0                	xor    eax,eax
c001d2a3:	83 c4 0c             	add    esp,0xc
c001d2a6:	c3                   	ret    
c001d2a7:	90                   	nop

c001d2a8 <SATAPI::SATAPI()>:
c001d2a8:	83 ec 0c             	sub    esp,0xc
c001d2ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2af:	83 ec 04             	sub    esp,0x4
c001d2b2:	68 00 08 00 00       	push   0x800
c001d2b7:	68 50 1d 02 c0       	push   0xc0021d50
c001d2bc:	50                   	push   eax
c001d2bd:	e8 28 ef fe ff       	call   c000c1ea <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d2c2:	83 c4 10             	add    esp,0x10
c001d2c5:	ba 44 1e 02 c0       	mov    edx,0xc0021e44
c001d2ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2ce:	89 10                	mov    DWORD PTR [eax],edx
c001d2d0:	90                   	nop
c001d2d1:	83 c4 0c             	add    esp,0xc
c001d2d4:	c3                   	ret    
c001d2d5:	90                   	nop

c001d2d6 <SATAPI::diskRemoved()>:
c001d2d6:	c3                   	ret    
c001d2d7:	90                   	nop

c001d2d8 <SATAPI::diskInserted()>:
c001d2d8:	83 ec 18             	sub    esp,0x18
c001d2db:	68 5c 1d 02 c0       	push   0xc0021d5c
c001d2e0:	e8 05 d7 fe ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c001d2e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2e9:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001d2f0:	83 c4 1c             	add    esp,0x1c
c001d2f3:	c3                   	ret    

c001d2f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001d2f4:	55                   	push   ebp
c001d2f5:	57                   	push   edi
c001d2f6:	56                   	push   esi
c001d2f7:	53                   	push   ebx
c001d2f8:	83 ec 34             	sub    esp,0x34
c001d2fb:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d2ff:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d303:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001d307:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d30b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001d30f:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001d315:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d31b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d31f:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001d325:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d329:	83 c0 02             	add    eax,0x2
c001d32c:	c1 e0 07             	shl    eax,0x7
c001d32f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d333:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d337:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d33b:	c1 e0 07             	shl    eax,0x7
c001d33e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d342:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d346:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d350:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d354:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d35a:	e8 21 e5 ff ff       	call   c001b880 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d35f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d363:	83 c4 10             	add    esp,0x10
c001d366:	b8 01 00 00 00       	mov    eax,0x1
c001d36b:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001d370:	0f 84 53 02 00 00    	je     c001d5c9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001d376:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d37c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d380:	8b 00                	mov    eax,DWORD PTR [eax]
c001d382:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d388:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d38e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d392:	c1 e1 05             	shl    ecx,0x5
c001d395:	01 c8                	add    eax,ecx
c001d397:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d399:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001d39f:	81 c9 25 00 01 00    	or     ecx,0x10025
c001d3a5:	89 08                	mov    DWORD PTR [eax],ecx
c001d3a7:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d3ad:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001d3b3:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001d3b9:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001d3bc:	8d 7b 40             	lea    edi,[ebx+0x40]
c001d3bf:	50                   	push   eax
c001d3c0:	68 90 00 00 00       	push   0x90
c001d3c5:	6a 00                	push   0x0
c001d3c7:	53                   	push   ebx
c001d3c8:	e8 23 31 fe ff       	call   c00004f0 <memset>
c001d3cd:	b9 0c 00 00 00       	mov    ecx,0xc
c001d3d2:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001d3d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d3d8:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001d3de:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001d3e2:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001d3e8:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001d3ec:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d3f0:	48                   	dec    eax
c001d3f1:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d3f6:	89 c1                	mov    ecx,eax
c001d3f8:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001d3fe:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d403:	09 c8                	or     eax,ecx
c001d405:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001d40b:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001d411:	83 c8 80             	or     eax,0xffffff80
c001d414:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001d41a:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001d41d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d421:	25 00 7f 00 00       	and    eax,0x7f00
c001d426:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001d42a:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d42f:	66 89 03             	mov    WORD PTR [ebx],ax
c001d432:	89 d0                	mov    eax,edx
c001d434:	c1 ea 18             	shr    edx,0x18
c001d437:	c1 e8 10             	shr    eax,0x10
c001d43a:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001d43d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001d440:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d444:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001d447:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d44b:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001d44e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001d452:	83 c4 10             	add    esp,0x10
c001d455:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001d459:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d45d:	31 c0                	xor    eax,eax
c001d45f:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001d465:	80 e1 88             	and    cl,0x88
c001d468:	74 0a                	je     c001d474 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001d46a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d46f:	74 0a                	je     c001d47b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001d471:	40                   	inc    eax
c001d472:	eb eb                	jmp    c001d45f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001d474:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d479:	75 43                	jne    c001d4be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001d47b:	83 ec 0c             	sub    esp,0xc
c001d47e:	68 74 1d 02 c0       	push   0xc0021d74
c001d483:	e8 62 d5 fe ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c001d488:	58                   	pop    eax
c001d489:	5a                   	pop    edx
c001d48a:	68 89 1d 02 c0       	push   0xc0021d89
c001d48f:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001d495:	e8 f6 b5 fe ff       	call   c0008a90 <VgaText::puts(char const*)>
c001d49a:	59                   	pop    ecx
c001d49b:	5b                   	pop    ebx
c001d49c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d4a0:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d4a6:	e8 6f e4 ff ff       	call   c001b91a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d4ab:	5e                   	pop    esi
c001d4ac:	5f                   	pop    edi
c001d4ad:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d4b1:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d4b7:	e8 3e e4 ff ff       	call   c001b8fa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d4bc:	eb 48                	jmp    c001d506 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001d4be:	be 01 00 00 00       	mov    esi,0x1
c001d4c3:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001d4c7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d4cb:	d3 e6                	shl    esi,cl
c001d4cd:	c1 e7 07             	shl    edi,0x7
c001d4d0:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001d4d6:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001d4db:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001d4df:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001d4e5:	85 c6                	test   esi,eax
c001d4e7:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001d4ed:	0f 84 a3 00 00 00    	je     c001d596 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001d4f3:	0f ba e0 1e          	bt     eax,0x1e
c001d4f7:	73 1a                	jae    c001d513 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001d4f9:	83 ec 0c             	sub    esp,0xc
c001d4fc:	68 9b 1d 02 c0       	push   0xc0021d9b
c001d501:	e8 e4 d4 fe ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c001d506:	83 c4 10             	add    esp,0x10
c001d509:	b8 01 00 00 00       	mov    eax,0x1
c001d50e:	e9 b6 00 00 00       	jmp    c001d5c9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001d513:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001d519:	83 f8 0d             	cmp    eax,0xd
c001d51c:	77 0a                	ja     c001d528 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001d51e:	83 ec 0c             	sub    esp,0xc
c001d521:	68 c8 00 00 00       	push   0xc8
c001d526:	eb 28                	jmp    c001d550 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001d528:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001d52e:	83 f8 0d             	cmp    eax,0xd
c001d531:	77 0a                	ja     c001d53d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001d533:	83 ec 0c             	sub    esp,0xc
c001d536:	68 58 02 00 00       	push   0x258
c001d53b:	eb 13                	jmp    c001d550 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001d53d:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001d543:	83 f8 06             	cmp    eax,0x6
c001d546:	77 10                	ja     c001d558 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001d548:	83 ec 0c             	sub    esp,0xc
c001d54b:	68 dc 05 00 00       	push   0x5dc
c001d550:	e8 a7 7e ff ff       	call   c00153fc <milliTenthSleep(unsigned int)>
c001d555:	83 c4 10             	add    esp,0x10
c001d558:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d55c:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001d55f:	75 06                	jne    c001d567 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001d561:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001d565:	74 15                	je     c001d57c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001d567:	83 fb 06             	cmp    ebx,0x6
c001d56a:	77 10                	ja     c001d57c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001d56c:	83 ec 0c             	sub    esp,0xc
c001d56f:	68 c4 09 00 00       	push   0x9c4
c001d574:	e8 83 7e ff ff       	call   c00153fc <milliTenthSleep(unsigned int)>
c001d579:	83 c4 10             	add    esp,0x10
c001d57c:	43                   	inc    ebx
c001d57d:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001d583:	0f 85 56 ff ff ff    	jne    c001d4df <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001d589:	83 ec 0c             	sub    esp,0xc
c001d58c:	68 ae 1d 02 c0       	push   0xc0021dae
c001d591:	e9 6b ff ff ff       	jmp    c001d501 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001d596:	0f ba e0 1e          	bt     eax,0x1e
c001d59a:	73 0d                	jae    c001d5a9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001d59c:	83 ec 0c             	sub    esp,0xc
c001d59f:	68 c2 1d 02 c0       	push   0xc0021dc2
c001d5a4:	e9 58 ff ff ff       	jmp    c001d501 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001d5a9:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001d5ae:	74 17                	je     c001d5c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d5b0:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001d5b5:	74 10                	je     c001d5c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d5b7:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001d5bd:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001d5c1:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001d5c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d5c7:	31 c0                	xor    eax,eax
c001d5c9:	83 c4 2c             	add    esp,0x2c
c001d5cc:	5b                   	pop    ebx
c001d5cd:	5e                   	pop    esi
c001d5ce:	5f                   	pop    edi
c001d5cf:	5d                   	pop    ebp
c001d5d0:	c3                   	ret    
c001d5d1:	90                   	nop

c001d5d2 <SATAPI::eject()>:
c001d5d2:	57                   	push   edi
c001d5d3:	b9 03 00 00 00       	mov    ecx,0x3
c001d5d8:	83 ec 18             	sub    esp,0x18
c001d5db:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d5df:	fc                   	cld    
c001d5e0:	31 c0                	xor    eax,eax
c001d5e2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d5e4:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d5e9:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d5ee:	50                   	push   eax
c001d5ef:	6a 00                	push   0x0
c001d5f1:	6a 00                	push   0x0
c001d5f3:	6a 00                	push   0x0
c001d5f5:	6a 00                	push   0x0
c001d5f7:	6a 02                	push   0x2
c001d5f9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d5fd:	50                   	push   eax
c001d5fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d602:	e8 ed fc ff ff       	call   c001d2f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d607:	31 c0                	xor    eax,eax
c001d609:	83 c4 38             	add    esp,0x38
c001d60c:	5f                   	pop    edi
c001d60d:	c3                   	ret    

c001d60e <SATAPI::detectMedia()>:
c001d60e:	53                   	push   ebx
c001d60f:	83 ec 14             	sub    esp,0x14
c001d612:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d616:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d61c:	e8 47 05 ff ff       	call   c000db68 <VCache::writeWriteBuffer()>
c001d621:	59                   	pop    ecx
c001d622:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d628:	e8 2b 05 ff ff       	call   c000db58 <VCache::invalidateReadBuffer()>
c001d62d:	c7 04 24 d7 1d 02 c0 	mov    DWORD PTR [esp],0xc0021dd7
c001d634:	e8 b1 d3 fe ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c001d639:	83 c4 10             	add    esp,0x10
c001d63c:	31 c0                	xor    eax,eax
c001d63e:	8b 14 85 20 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8be0]
c001d645:	85 d2                	test   edx,edx
c001d647:	74 0f                	je     c001d658 <SATAPI::detectMedia()+0x4a>
c001d649:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001d64f:	75 07                	jne    c001d658 <SATAPI::detectMedia()+0x4a>
c001d651:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001d658:	40                   	inc    eax
c001d659:	83 f8 1a             	cmp    eax,0x1a
c001d65c:	75 e0                	jne    c001d63e <SATAPI::detectMedia()+0x30>
c001d65e:	83 c4 08             	add    esp,0x8
c001d661:	5b                   	pop    ebx
c001d662:	c3                   	ret    
c001d663:	90                   	nop

c001d664 <SATAPI::open(int, int, void*)>:
c001d664:	56                   	push   esi
c001d665:	53                   	push   ebx
c001d666:	51                   	push   ecx
c001d667:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d66b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d66f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d679:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d67f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d689:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d68d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d697:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d69d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d6a4:	e8 0a a7 fe ff       	call   c0007db3 <Phys::allocatePage()>
c001d6a9:	89 c6                	mov    esi,eax
c001d6ab:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001d6b1:	81 c6 00 10 00 00    	add    esi,0x1000
c001d6b7:	e8 f7 a6 fe ff       	call   c0007db3 <Phys::allocatePage()>
c001d6bc:	39 c6                	cmp    esi,eax
c001d6be:	74 10                	je     c001d6d0 <SATAPI::open(int, int, void*)+0x6c>
c001d6c0:	83 ec 0c             	sub    esp,0xc
c001d6c3:	68 ec 1d 02 c0       	push   0xc0021dec
c001d6c8:	e8 4a 32 ff ff       	call   c0010917 <KePanic(char const*)>
c001d6cd:	83 c4 10             	add    esp,0x10
c001d6d0:	83 ec 0c             	sub    esp,0xc
c001d6d3:	6a 02                	push   0x2
c001d6d5:	e8 43 bf fe ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c001d6da:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001d6e0:	6a 03                	push   0x3
c001d6e2:	50                   	push   eax
c001d6e3:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001d6e9:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001d6ef:	e8 10 c6 fe ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d6f4:	83 c4 14             	add    esp,0x14
c001d6f7:	68 78 01 00 00       	push   0x178
c001d6fc:	e8 ad a3 fe ff       	call   c0007aae <malloc>
c001d701:	83 c4 0c             	add    esp,0xc
c001d704:	89 c6                	mov    esi,eax
c001d706:	6a 00                	push   0x0
c001d708:	68 ff ff ff 7f       	push   0x7fffffff
c001d70d:	6a 00                	push   0x0
c001d70f:	6a 00                	push   0x0
c001d711:	53                   	push   ebx
c001d712:	68 02 1e 02 c0       	push   0xc0021e02
c001d717:	50                   	push   eax
c001d718:	e8 a7 f8 fe ff       	call   c000cfc4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d71d:	83 c4 14             	add    esp,0x14
c001d720:	56                   	push   esi
c001d721:	e8 5e f9 fe ff       	call   c000d084 <LogicalDisk::assignDriveLetter()>
c001d726:	5a                   	pop    edx
c001d727:	0f be c0             	movsx  eax,al
c001d72a:	59                   	pop    ecx
c001d72b:	50                   	push   eax
c001d72c:	68 54 1c 02 c0       	push   0xc0021c54
c001d731:	e8 b4 d2 fe ff       	call   c000a9ea <Dbg::kprintf(char const*, ...)>
c001d736:	58                   	pop    eax
c001d737:	5a                   	pop    edx
c001d738:	56                   	push   esi
c001d739:	53                   	push   ebx
c001d73a:	e8 df e6 fe ff       	call   c000be1e <Device::addChild(Device*)>
c001d73f:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001d745:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d748:	e8 05 eb fe ff       	call   c000c252 <PhysicalDisk::startCache()>
c001d74d:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001d754:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d757:	e8 b2 fe ff ff       	call   c001d60e <SATAPI::detectMedia()>
c001d75c:	83 c4 14             	add    esp,0x14
c001d75f:	31 c0                	xor    eax,eax
c001d761:	5b                   	pop    ebx
c001d762:	5e                   	pop    esi
c001d763:	c3                   	ret    

c001d764 <SATAPI::read(unsigned long long, int, void*)>:
c001d764:	57                   	push   edi
c001d765:	56                   	push   esi
c001d766:	53                   	push   ebx
c001d767:	83 ec 30             	sub    esp,0x30
c001d76a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d76e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001d772:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001d776:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d77a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d77e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d782:	83 fe 04             	cmp    esi,0x4
c001d785:	7e 10                	jle    c001d797 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001d787:	83 ec 0c             	sub    esp,0xc
c001d78a:	68 10 1e 02 c0       	push   0xc0021e10
c001d78f:	e8 83 31 ff ff       	call   c0010917 <KePanic(char const*)>
c001d794:	83 c4 10             	add    esp,0x10
c001d797:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d79d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d7a3:	51                   	push   ecx
c001d7a4:	50                   	push   eax
c001d7a5:	83 c0 02             	add    eax,0x2
c001d7a8:	c1 e0 07             	shl    eax,0x7
c001d7ab:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001d7b1:	50                   	push   eax
c001d7b2:	52                   	push   edx
c001d7b3:	e8 8c e1 ff ff       	call   c001b944 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d7b8:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001d7bc:	b9 03 00 00 00       	mov    ecx,0x3
c001d7c1:	fc                   	cld    
c001d7c2:	31 c0                	xor    eax,eax
c001d7c4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d7c6:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001d7cb:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001d7d0:	83 c4 0c             	add    esp,0xc
c001d7d3:	6a 00                	push   0x0
c001d7d5:	6a 00                	push   0x0
c001d7d7:	6a 00                	push   0x0
c001d7d9:	6a 00                	push   0x0
c001d7db:	6a 02                	push   0x2
c001d7dd:	8d 44 24 30          	lea    eax,[esp+0x30]
c001d7e1:	50                   	push   eax
c001d7e2:	53                   	push   ebx
c001d7e3:	e8 0c fb ff ff       	call   c001d2f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d7e8:	83 c4 20             	add    esp,0x20
c001d7eb:	85 c0                	test   eax,eax
c001d7ed:	75 44                	jne    c001d833 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001d7ef:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001d7f3:	b9 03 00 00 00       	mov    ecx,0x3
c001d7f8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d7fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d7fe:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001d803:	0f c8                	bswap  eax
c001d805:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001d809:	89 f0                	mov    eax,esi
c001d80b:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001d80f:	50                   	push   eax
c001d810:	56                   	push   esi
c001d811:	c1 e6 0b             	shl    esi,0xb
c001d814:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001d818:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d81c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d820:	56                   	push   esi
c001d821:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d825:	50                   	push   eax
c001d826:	53                   	push   ebx
c001d827:	e8 c8 fa ff ff       	call   c001d2f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d82c:	83 c4 20             	add    esp,0x20
c001d82f:	85 c0                	test   eax,eax
c001d831:	74 14                	je     c001d847 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001d833:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d837:	83 ec 0c             	sub    esp,0xc
c001d83a:	53                   	push   ebx
c001d83b:	e8 ce fd ff ff       	call   c001d60e <SATAPI::detectMedia()>
c001d840:	83 c4 10             	add    esp,0x10
c001d843:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d847:	83 c4 30             	add    esp,0x30
c001d84a:	5b                   	pop    ebx
c001d84b:	5e                   	pop    esi
c001d84c:	5f                   	pop    edi
c001d84d:	c3                   	ret    

c001d84e <IOAPIC::close(int, int, void*)>:
c001d84e:	b8 00 00 00 00       	mov    eax,0x0
c001d853:	c3                   	ret    

c001d854 <apicGetBase()>:
c001d854:	55                   	push   ebp
c001d855:	89 e5                	mov    ebp,esp
c001d857:	83 ec 18             	sub    esp,0x18
c001d85a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d85f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001d865:	83 e0 08             	and    eax,0x8
c001d868:	0f b6 c0             	movzx  eax,al
c001d86b:	85 c0                	test   eax,eax
c001d86d:	75 07                	jne    c001d876 <apicGetBase()+0x22>
c001d86f:	b8 00 00 00 00       	mov    eax,0x0
c001d874:	eb 21                	jmp    c001d897 <apicGetBase()+0x43>
c001d876:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d87b:	83 ec 08             	sub    esp,0x8
c001d87e:	6a 1b                	push   0x1b
c001d880:	50                   	push   eax
c001d881:	e8 32 98 fe ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c001d886:	83 c4 10             	add    esp,0x10
c001d889:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d88c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d88f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d892:	25 00 00 ff ff       	and    eax,0xffff0000
c001d897:	c9                   	leave  
c001d898:	c3                   	ret    
c001d899:	90                   	nop

c001d89a <IOAPIC::IOAPIC()>:
c001d89a:	83 ec 0c             	sub    esp,0xc
c001d89d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8a1:	83 ec 08             	sub    esp,0x8
c001d8a4:	68 74 1e 02 c0       	push   0xc0021e74
c001d8a9:	50                   	push   eax
c001d8aa:	e8 07 e7 fe ff       	call   c000bfb6 <Device::Device(char const*)>
c001d8af:	83 c4 10             	add    esp,0x10
c001d8b2:	ba 84 1e 02 c0       	mov    edx,0xc0021e84
c001d8b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8bb:	89 10                	mov    DWORD PTR [eax],edx
c001d8bd:	90                   	nop
c001d8be:	83 c4 0c             	add    esp,0xc
c001d8c1:	c3                   	ret    

c001d8c2 <apicOpen()>:
c001d8c2:	55                   	push   ebp
c001d8c3:	89 e5                	mov    ebp,esp
c001d8c5:	53                   	push   ebx
c001d8c6:	83 ec 34             	sub    esp,0x34
c001d8c9:	a0 a0 8b 02 c0       	mov    al,ds:0xc0028ba0
c001d8ce:	83 f0 01             	xor    eax,0x1
c001d8d1:	0f b6 c0             	movzx  eax,al
c001d8d4:	85 c0                	test   eax,eax
c001d8d6:	0f 84 a3 00 00 00    	je     c001d97f <apicOpen()+0xbd>
c001d8dc:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d8e0:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c001d8e5:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d8e9:	0f b6 c0             	movzx  eax,al
c001d8ec:	39 c2                	cmp    edx,eax
c001d8ee:	0f 83 84 00 00 00    	jae    c001d978 <apicOpen()+0xb6>
c001d8f4:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001d8fb:	83 ec 0c             	sub    esp,0xc
c001d8fe:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001d901:	e8 a8 a1 fe ff       	call   c0007aae <malloc>
c001d906:	83 c4 10             	add    esp,0x10
c001d909:	89 c3                	mov    ebx,eax
c001d90b:	83 ec 0c             	sub    esp,0xc
c001d90e:	53                   	push   ebx
c001d90f:	e8 86 ff ff ff       	call   c001d89a <IOAPIC::IOAPIC()>
c001d914:	83 c4 10             	add    esp,0x10
c001d917:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001d91a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001d91e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d921:	89 14 85 80 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7480],edx
c001d928:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c001d92d:	83 c0 01             	add    eax,0x1
c001d930:	a3 60 8b 02 c0       	mov    ds:0xc0028b60,eax
c001d935:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d93a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001d940:	83 ec 08             	sub    esp,0x8
c001d943:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d946:	50                   	push   eax
c001d947:	e8 d2 e4 fe ff       	call   c000be1e <Device::addChild(Device*)>
c001d94c:	83 c4 10             	add    esp,0x10
c001d94f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d952:	8b 00                	mov    eax,DWORD PTR [eax]
c001d954:	83 c0 08             	add    eax,0x8
c001d957:	8b 00                	mov    eax,DWORD PTR [eax]
c001d959:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d95d:	6a 00                	push   0x0
c001d95f:	6a 00                	push   0x0
c001d961:	52                   	push   edx
c001d962:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d965:	ff d0                	call   eax
c001d967:	83 c4 10             	add    esp,0x10
c001d96a:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d96d:	83 c0 01             	add    eax,0x1
c001d970:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001d973:	e9 68 ff ff ff       	jmp    c001d8e0 <apicOpen()+0x1e>
c001d978:	c6 05 a0 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028ba0,0x1
c001d97f:	e8 d0 fe ff ff       	call   c001d854 <apicGetBase()>
c001d984:	05 f0 00 00 00       	add    eax,0xf0
c001d989:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d98c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d98f:	8b 00                	mov    eax,DWORD PTR [eax]
c001d991:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d994:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001d99b:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001d9a2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d9a5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001d9a8:	89 10                	mov    DWORD PTR [eax],edx
c001d9aa:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d9b1:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c001d9b6:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d9b9:	7d 7c                	jge    c001da37 <apicOpen()+0x175>
c001d9bb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d9be:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d9c5:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001d9c8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d9cb:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d9d2:	c1 e8 08             	shr    eax,0x8
c001d9d5:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001d9d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d9dc:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d9e3:	c1 e8 18             	shr    eax,0x18
c001d9e6:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001d9e9:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001d9ed:	3d ff 00 00 00       	cmp    eax,0xff
c001d9f2:	75 3a                	jne    c001da2e <apicOpen()+0x16c>
c001d9f4:	e8 5b fe ff ff       	call   c001d854 <apicGetBase()>
c001d9f9:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001d9fd:	83 fa 01             	cmp    edx,0x1
c001da00:	75 07                	jne    c001da09 <apicOpen()+0x147>
c001da02:	ba 60 03 00 00       	mov    edx,0x360
c001da07:	eb 05                	jmp    c001da0e <apicOpen()+0x14c>
c001da09:	ba 50 03 00 00       	mov    edx,0x350
c001da0e:	01 d0                	add    eax,edx
c001da10:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001da13:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001da16:	8b 00                	mov    eax,DWORD PTR [eax]
c001da18:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001da1b:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001da22:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001da26:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001da29:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001da2c:	89 10                	mov    DWORD PTR [eax],edx
c001da2e:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001da32:	e9 7a ff ff ff       	jmp    c001d9b1 <apicOpen()+0xef>
c001da37:	90                   	nop
c001da38:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001da3b:	c9                   	leave  
c001da3c:	c3                   	ret    
c001da3d:	90                   	nop

c001da3e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001da3e:	55                   	push   ebp
c001da3f:	89 e5                	mov    ebp,esp
c001da41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da44:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001da4a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001da4d:	72 1d                	jb     c001da6c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001da4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da52:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001da58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da5b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001da61:	01 d0                	add    eax,edx
c001da63:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001da66:	73 04                	jae    c001da6c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001da68:	b0 01                	mov    al,0x1
c001da6a:	eb 02                	jmp    c001da6e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001da6c:	b0 00                	mov    al,0x0
c001da6e:	5d                   	pop    ebp
c001da6f:	c3                   	ret    

c001da70 <IOAPIC::read(int)>:
c001da70:	55                   	push   ebp
c001da71:	89 e5                	mov    ebp,esp
c001da73:	83 ec 10             	sub    esp,0x10
c001da76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da79:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001da7f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001da82:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001da85:	0f b6 d0             	movzx  edx,al
c001da88:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da8b:	89 10                	mov    DWORD PTR [eax],edx
c001da8d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da90:	83 c0 10             	add    eax,0x10
c001da93:	8b 00                	mov    eax,DWORD PTR [eax]
c001da95:	c9                   	leave  
c001da96:	c3                   	ret    
c001da97:	90                   	nop

c001da98 <IOAPIC::open(int, int, void*)>:
c001da98:	55                   	push   ebp
c001da99:	89 e5                	mov    ebp,esp
c001da9b:	57                   	push   edi
c001da9c:	56                   	push   esi
c001da9d:	53                   	push   ebx
c001da9e:	83 ec 04             	sub    esp,0x4
c001daa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001daa4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001daa7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001daad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dab0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dab6:	8b 14 85 c0 77 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8840]
c001dabd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dac0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001dac6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dac9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dacf:	8b 14 85 40 78 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd87c0]
c001dad6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dad9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001dadf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dae2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001dae8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001daeb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001daf1:	0f b6 f0             	movzx  esi,al
c001daf4:	89 d0                	mov    eax,edx
c001daf6:	ba 00 00 00 00       	mov    edx,0x0
c001dafb:	89 c7                	mov    edi,eax
c001dafd:	83 e7 ff             	and    edi,0xffffffff
c001db00:	89 f9                	mov    ecx,edi
c001db02:	0f b6 da             	movzx  ebx,dl
c001db05:	89 c8                	mov    eax,ecx
c001db07:	89 da                	mov    edx,ebx
c001db09:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001db0c:	8d 5e 08             	lea    ebx,[esi+0x8]
c001db0f:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001db13:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001db17:	83 e0 00             	and    eax,0x0
c001db1a:	09 d0                	or     eax,edx
c001db1c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001db20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db23:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001db29:	8d 50 01             	lea    edx,[eax+0x1]
c001db2c:	88 d1                	mov    cl,dl
c001db2e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001db31:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001db37:	0f b6 d0             	movzx  edx,al
c001db3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db3d:	83 c2 08             	add    edx,0x8
c001db40:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001db44:	0f b6 c9             	movzx  ecx,cl
c001db47:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001db4d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001db51:	6a 01                	push   0x1
c001db53:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db56:	e8 15 ff ff ff       	call   c001da70 <IOAPIC::read(int)>
c001db5b:	83 c4 08             	add    esp,0x8
c001db5e:	c1 f8 10             	sar    eax,0x10
c001db61:	0f b6 c0             	movzx  eax,al
c001db64:	8d 50 01             	lea    edx,[eax+0x1]
c001db67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db6a:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001db70:	b8 00 00 00 00       	mov    eax,0x0
c001db75:	8d 65 f4             	lea    esp,[ebp-0xc]
c001db78:	5b                   	pop    ebx
c001db79:	5e                   	pop    esi
c001db7a:	5f                   	pop    edi
c001db7b:	5d                   	pop    ebp
c001db7c:	c3                   	ret    
c001db7d:	90                   	nop

c001db7e <IOAPIC::write(int, int)>:
c001db7e:	55                   	push   ebp
c001db7f:	89 e5                	mov    ebp,esp
c001db81:	83 ec 10             	sub    esp,0x10
c001db84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db87:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001db8d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001db90:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001db93:	0f b6 d0             	movzx  edx,al
c001db96:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001db99:	89 10                	mov    DWORD PTR [eax],edx
c001db9b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001db9e:	8d 50 10             	lea    edx,[eax+0x10]
c001dba1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001dba4:	89 02                	mov    DWORD PTR [edx],eax
c001dba6:	90                   	nop
c001dba7:	c9                   	leave  
c001dba8:	c3                   	ret    
c001dba9:	90                   	nop

c001dbaa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001dbaa:	55                   	push   ebp
c001dbab:	89 e5                	mov    ebp,esp
c001dbad:	53                   	push   ebx
c001dbae:	83 ec 2c             	sub    esp,0x2c
c001dbb1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dbb4:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001dbb7:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001dbba:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001dbbd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001dbc0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001dbc3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001dbc6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001dbc9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001dbcc:	88 d8                	mov    al,bl
c001dbce:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001dbd1:	88 c8                	mov    al,cl
c001dbd3:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001dbd6:	88 d0                	mov    al,dl
c001dbd8:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001dbdb:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001dbdf:	83 c0 08             	add    eax,0x8
c001dbe2:	01 c0                	add    eax,eax
c001dbe4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001dbe7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001dbeb:	83 c0 08             	add    eax,0x8
c001dbee:	01 c0                	add    eax,eax
c001dbf0:	83 c0 01             	add    eax,0x1
c001dbf3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001dbf6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001dbf9:	50                   	push   eax
c001dbfa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dbfd:	e8 6e fe ff ff       	call   c001da70 <IOAPIC::read(int)>
c001dc02:	83 c4 08             	add    esp,0x8
c001dc05:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001dc08:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001dc0f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001dc12:	c1 e0 18             	shl    eax,0x18
c001dc15:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001dc18:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001dc1b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001dc1e:	52                   	push   edx
c001dc1f:	50                   	push   eax
c001dc20:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc23:	e8 56 ff ff ff       	call   c001db7e <IOAPIC::write(int, int)>
c001dc28:	83 c4 0c             	add    esp,0xc
c001dc2b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dc2e:	50                   	push   eax
c001dc2f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc32:	e8 39 fe ff ff       	call   c001da70 <IOAPIC::read(int)>
c001dc37:	83 c4 08             	add    esp,0x8
c001dc3a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001dc3d:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001dc44:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001dc4b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001dc52:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001dc56:	85 c0                	test   eax,eax
c001dc58:	74 09                	je     c001dc63 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001dc5a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001dc61:	eb 07                	jmp    c001dc6a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001dc63:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001dc6a:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001dc6e:	85 c0                	test   eax,eax
c001dc70:	74 09                	je     c001dc7b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001dc72:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001dc79:	eb 07                	jmp    c001dc82 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001dc7b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001dc82:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001dc89:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001dc8d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001dc90:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001dc93:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dc96:	52                   	push   edx
c001dc97:	50                   	push   eax
c001dc98:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc9b:	e8 de fe ff ff       	call   c001db7e <IOAPIC::write(int, int)>
c001dca0:	83 c4 0c             	add    esp,0xc
c001dca3:	90                   	nop
c001dca4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001dca7:	c9                   	leave  
c001dca8:	c3                   	ret    
c001dca9:	66 90                	xchg   ax,ax
c001dcab:	90                   	nop

c001dcac <APICTimer::close(int, int, void*)>:
c001dcac:	b8 00 00 00 00       	mov    eax,0x0
c001dcb1:	c3                   	ret    
c001dcb2:	66 90                	xchg   ax,ax

c001dcb4 <apicTimerHandler(regs*, void*)>:
c001dcb4:	83 ec 0c             	sub    esp,0xc
c001dcb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dcbb:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dcbd:	b8 10 27 00 00       	mov    eax,0x2710
c001dcc2:	ba 00 00 00 00       	mov    edx,0x0
c001dcc7:	f7 f1                	div    ecx
c001dcc9:	83 ec 0c             	sub    esp,0xc
c001dccc:	50                   	push   eax
c001dccd:	e8 ae fb fe ff       	call   c000d880 <timerHandler(unsigned int)>
c001dcd2:	83 c4 10             	add    esp,0x10
c001dcd5:	90                   	nop
c001dcd6:	83 c4 0c             	add    esp,0xc
c001dcd9:	c3                   	ret    
c001dcda:	66 90                	xchg   ax,ax

c001dcdc <APICTimer::open(int, int, void*)>:
c001dcdc:	83 ec 0c             	sub    esp,0xc
c001dcdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dce3:	8b 00                	mov    eax,DWORD PTR [eax]
c001dce5:	83 c0 24             	add    eax,0x24
c001dce8:	8b 00                	mov    eax,DWORD PTR [eax]
c001dcea:	83 ec 08             	sub    esp,0x8
c001dced:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dcf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dcf5:	ff d0                	call   eax
c001dcf7:	83 c4 10             	add    esp,0x10
c001dcfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcfe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dd02:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001dd08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dd10:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001dd16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dd1a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001dd20:	83 ec 0c             	sub    esp,0xc
c001dd23:	51                   	push   ecx
c001dd24:	6a 01                	push   0x1
c001dd26:	68 b4 dc 01 c0       	push   0xc001dcb4
c001dd2b:	52                   	push   edx
c001dd2c:	50                   	push   eax
c001dd2d:	e8 98 e0 fe ff       	call   c000bdca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dd32:	83 c4 20             	add    esp,0x20
c001dd35:	89 c2                	mov    edx,eax
c001dd37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd3b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001dd41:	b8 00 00 00 00       	mov    eax,0x0
c001dd46:	83 c4 0c             	add    esp,0xc
c001dd49:	c3                   	ret    
c001dd4a:	66 90                	xchg   ax,ax

c001dd4c <APICTimer::write(int)>:
c001dd4c:	83 ec 0c             	sub    esp,0xc
c001dd4f:	83 ec 0c             	sub    esp,0xc
c001dd52:	68 a8 1e 02 c0       	push   0xc0021ea8
c001dd57:	e8 bb 2b ff ff       	call   c0010917 <KePanic(char const*)>
c001dd5c:	83 c4 10             	add    esp,0x10
c001dd5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dd67:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dd6d:	90                   	nop
c001dd6e:	83 c4 0c             	add    esp,0xc
c001dd71:	c3                   	ret    
c001dd72:	66 90                	xchg   ax,ax

c001dd74 <APICTimer::APICTimer()>:
c001dd74:	83 ec 0c             	sub    esp,0xc
c001dd77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd7b:	83 ec 08             	sub    esp,0x8
c001dd7e:	68 b8 1e 02 c0       	push   0xc0021eb8
c001dd83:	50                   	push   eax
c001dd84:	e8 2b fa fe ff       	call   c000d7b4 <Timer::Timer(char const*)>
c001dd89:	83 c4 10             	add    esp,0x10
c001dd8c:	ba cc 1e 02 c0       	mov    edx,0xc0021ecc
c001dd91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd95:	89 10                	mov    DWORD PTR [eax],edx
c001dd97:	90                   	nop
c001dd98:	83 c4 0c             	add    esp,0xc
c001dd9b:	c3                   	ret    

c001dd9c <PIT::write(int)>:
c001dd9c:	83 ec 10             	sub    esp,0x10
c001dd9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dda3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dda7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ddad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ddb1:	a3 a4 8b 02 c0       	mov    ds:0xc0028ba4,eax
c001ddb6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ddbb:	89 c2                	mov    edx,eax
c001ddbd:	c1 fa 1f             	sar    edx,0x1f
c001ddc0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ddc4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ddc8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ddcf:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ddd4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ddd8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001dddd:	ee                   	out    dx,al
c001ddde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dde2:	0f b6 c0             	movzx  eax,al
c001dde5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ddec:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ddf0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ddf4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ddf9:	ee                   	out    dx,al
c001ddfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ddfe:	c1 f8 08             	sar    eax,0x8
c001de01:	0f b6 c0             	movzx  eax,al
c001de04:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001de0b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001de0f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001de13:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001de18:	ee                   	out    dx,al
c001de19:	90                   	nop
c001de1a:	83 c4 10             	add    esp,0x10
c001de1d:	c3                   	ret    
c001de1e:	66 90                	xchg   ax,ax

c001de20 <pitHandler(regs*, void*)>:
c001de20:	83 ec 0c             	sub    esp,0xc
c001de23:	8b 0d a4 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028ba4
c001de29:	b8 10 27 00 00       	mov    eax,0x2710
c001de2e:	89 c2                	mov    edx,eax
c001de30:	c1 fa 1f             	sar    edx,0x1f
c001de33:	f7 f9                	idiv   ecx
c001de35:	83 ec 0c             	sub    esp,0xc
c001de38:	50                   	push   eax
c001de39:	e8 42 fa fe ff       	call   c000d880 <timerHandler(unsigned int)>
c001de3e:	83 c4 10             	add    esp,0x10
c001de41:	90                   	nop
c001de42:	83 c4 0c             	add    esp,0xc
c001de45:	c3                   	ret    
c001de46:	66 90                	xchg   ax,ax

c001de48 <PIT::open(int, int, void*)>:
c001de48:	83 ec 0c             	sub    esp,0xc
c001de4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de4f:	8b 00                	mov    eax,DWORD PTR [eax]
c001de51:	83 c0 24             	add    eax,0x24
c001de54:	8b 00                	mov    eax,DWORD PTR [eax]
c001de56:	83 ec 08             	sub    esp,0x8
c001de59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de61:	ff d0                	call   eax
c001de63:	83 c4 10             	add    esp,0x10
c001de66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de6a:	83 ec 0c             	sub    esp,0xc
c001de6d:	6a 00                	push   0x0
c001de6f:	6a 01                	push   0x1
c001de71:	68 20 de 01 c0       	push   0xc001de20
c001de76:	6a 00                	push   0x0
c001de78:	50                   	push   eax
c001de79:	e8 4c df fe ff       	call   c000bdca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001de7e:	83 c4 20             	add    esp,0x20
c001de81:	89 c2                	mov    edx,eax
c001de83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de87:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001de8d:	b8 00 00 00 00       	mov    eax,0x0
c001de92:	83 c4 0c             	add    esp,0xc
c001de95:	c3                   	ret    
c001de96:	66 90                	xchg   ax,ax

c001de98 <PIT::close(int, int, void*)>:
c001de98:	83 ec 0c             	sub    esp,0xc
c001de9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de9f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001dea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dead:	6a 01                	push   0x1
c001deaf:	68 20 de 01 c0       	push   0xc001de20
c001deb4:	6a 00                	push   0x0
c001deb6:	50                   	push   eax
c001deb7:	e8 44 df fe ff       	call   c000be00 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001debc:	83 c4 10             	add    esp,0x10
c001debf:	b8 00 00 00 00       	mov    eax,0x0
c001dec4:	83 c4 0c             	add    esp,0xc
c001dec7:	c3                   	ret    

c001dec8 <PIT::PIT()>:
c001dec8:	83 ec 0c             	sub    esp,0xc
c001decb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001decf:	83 ec 08             	sub    esp,0x8
c001ded2:	68 f4 1e 02 c0       	push   0xc0021ef4
c001ded7:	50                   	push   eax
c001ded8:	e8 d7 f8 fe ff       	call   c000d7b4 <Timer::Timer(char const*)>
c001dedd:	83 c4 10             	add    esp,0x10
c001dee0:	ba 1c 1f 02 c0       	mov    edx,0xc0021f1c
c001dee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dee9:	89 10                	mov    DWORD PTR [eax],edx
c001deeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001deef:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001def5:	0f b6 d0             	movzx  edx,al
c001def8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001defc:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001df03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df07:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001df0d:	0f b6 d0             	movzx  edx,al
c001df10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df14:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001df19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df1d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001df23:	8d 50 01             	lea    edx,[eax+0x1]
c001df26:	88 d1                	mov    cl,dl
c001df28:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001df2c:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001df32:	0f b6 d0             	movzx  edx,al
c001df35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df39:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001df3d:	83 e1 3f             	and    ecx,0x3f
c001df40:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001df44:	90                   	nop
c001df45:	83 c4 0c             	add    esp,0xc
c001df48:	c3                   	ret    
c001df49:	66 90                	xchg   ax,ax
c001df4b:	66 90                	xchg   ax,ax
c001df4d:	66 90                	xchg   ax,ax
c001df4f:	90                   	nop

c001df50 <avxDetect>:
c001df50:	b8 01 00 00 00       	mov    eax,0x1
c001df55:	0f a2                	cpuid  
c001df57:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001df5d:	74 15                	je     c001df74 <avxDetect.noAVX>
c001df5f:	b8 01 00 00 00       	mov    eax,0x1
c001df64:	0f a2                	cpuid  
c001df66:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001df6c:	74 06                	je     c001df74 <avxDetect.noAVX>
c001df6e:	b8 01 00 00 00       	mov    eax,0x1
c001df73:	c3                   	ret    

c001df74 <avxDetect.noAVX>:
c001df74:	b8 00 00 00 00       	mov    eax,0x0
c001df79:	c3                   	ret    

c001df7a <avxSave>:
c001df7a:	53                   	push   ebx
c001df7b:	52                   	push   edx
c001df7c:	31 c0                	xor    eax,eax
c001df7e:	48                   	dec    eax
c001df7f:	89 c2                	mov    edx,eax
c001df81:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001df85:	0f ae 23             	xsave  [ebx]
c001df88:	5a                   	pop    edx
c001df89:	5b                   	pop    ebx
c001df8a:	c3                   	ret    

c001df8b <avxLoad>:
c001df8b:	53                   	push   ebx
c001df8c:	52                   	push   edx
c001df8d:	31 c0                	xor    eax,eax
c001df8f:	48                   	dec    eax
c001df90:	89 c2                	mov    edx,eax
c001df92:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001df96:	0f ae 2b             	xrstor [ebx]
c001df99:	5a                   	pop    edx
c001df9a:	5b                   	pop    ebx
c001df9b:	c3                   	ret    

c001df9c <avxInit>:
c001df9c:	e8 67 03 00 00       	call   c001e308 <sseInit>
c001dfa1:	50                   	push   eax
c001dfa2:	51                   	push   ecx
c001dfa3:	0f 20 e0             	mov    eax,cr4
c001dfa6:	0d 00 00 04 00       	or     eax,0x40000
c001dfab:	0f 22 e0             	mov    cr4,eax
c001dfae:	31 c9                	xor    ecx,ecx
c001dfb0:	0f 01 d0             	xgetbv 
c001dfb3:	0d 07 00 00 00       	or     eax,0x7
c001dfb8:	0f 01 d1             	xsetbv 
c001dfbb:	59                   	pop    ecx
c001dfbc:	58                   	pop    eax
c001dfbd:	c3                   	ret    

c001dfbe <avxClose>:
c001dfbe:	c3                   	ret    

c001dfbf <wouldSheSayYes>:
c001dfbf:	c3                   	ret    
c001dfc0:	49                   	dec    ecx
c001dfc1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001dfc5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001dfc9:	75 20                	jne    c001dfeb <isr0+0xb>
c001dfcb:	4e                   	dec    esi
c001dfcc:	79 61                	jns    c001e02f <isr7+0x3>
c001dfce:	68 2e 2e 2e 00       	push   0x2e2e2e
c001dfd3:	66 90                	xchg   ax,ax
c001dfd5:	66 90                	xchg   ax,ax
c001dfd7:	66 90                	xchg   ax,ax
c001dfd9:	66 90                	xchg   ax,ax
c001dfdb:	66 90                	xchg   ax,ax
c001dfdd:	66 90                	xchg   ax,ax
c001dfdf:	90                   	nop

c001dfe0 <isr0>:
c001dfe0:	fa                   	cli    
c001dfe1:	68 00 00 00 00       	push   0x0
c001dfe6:	68 00 00 00 00       	push   0x0
c001dfeb:	e9 56 01 00 00       	jmp    c001e146 <int_common_stub>

c001dff0 <isr1>:
c001dff0:	fa                   	cli    
c001dff1:	6a 00                	push   0x0
c001dff3:	6a 01                	push   0x1
c001dff5:	e9 4c 01 00 00       	jmp    c001e146 <int_common_stub>

c001dffa <isr2>:
c001dffa:	fa                   	cli    
c001dffb:	6a 00                	push   0x0
c001dffd:	6a 02                	push   0x2
c001dfff:	e9 42 01 00 00       	jmp    c001e146 <int_common_stub>

c001e004 <isr3>:
c001e004:	fa                   	cli    
c001e005:	6a 00                	push   0x0
c001e007:	6a 03                	push   0x3
c001e009:	e9 38 01 00 00       	jmp    c001e146 <int_common_stub>

c001e00e <isr4>:
c001e00e:	fa                   	cli    
c001e00f:	6a 00                	push   0x0
c001e011:	6a 04                	push   0x4
c001e013:	e9 2e 01 00 00       	jmp    c001e146 <int_common_stub>

c001e018 <isr5>:
c001e018:	fa                   	cli    
c001e019:	6a 00                	push   0x0
c001e01b:	6a 05                	push   0x5
c001e01d:	e9 24 01 00 00       	jmp    c001e146 <int_common_stub>

c001e022 <isr6>:
c001e022:	fa                   	cli    
c001e023:	6a 00                	push   0x0
c001e025:	6a 06                	push   0x6
c001e027:	e9 1a 01 00 00       	jmp    c001e146 <int_common_stub>

c001e02c <isr7>:
c001e02c:	fa                   	cli    
c001e02d:	6a 00                	push   0x0
c001e02f:	6a 07                	push   0x7
c001e031:	e9 10 01 00 00       	jmp    c001e146 <int_common_stub>

c001e036 <isr8>:
c001e036:	fa                   	cli    
c001e037:	6a 08                	push   0x8
c001e039:	e9 08 01 00 00       	jmp    c001e146 <int_common_stub>

c001e03e <isr9>:
c001e03e:	fa                   	cli    
c001e03f:	6a 00                	push   0x0
c001e041:	6a 09                	push   0x9
c001e043:	e9 fe 00 00 00       	jmp    c001e146 <int_common_stub>

c001e048 <isr10>:
c001e048:	fa                   	cli    
c001e049:	6a 0a                	push   0xa
c001e04b:	e9 f6 00 00 00       	jmp    c001e146 <int_common_stub>

c001e050 <isr11>:
c001e050:	fa                   	cli    
c001e051:	6a 0b                	push   0xb
c001e053:	e9 ee 00 00 00       	jmp    c001e146 <int_common_stub>

c001e058 <isr12>:
c001e058:	fa                   	cli    
c001e059:	6a 0c                	push   0xc
c001e05b:	e9 e6 00 00 00       	jmp    c001e146 <int_common_stub>

c001e060 <isr13>:
c001e060:	fa                   	cli    
c001e061:	6a 0d                	push   0xd
c001e063:	53                   	push   ebx
c001e064:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e068:	81 fb 36 e2 01 c0    	cmp    ebx,0xc001e236
c001e06e:	5b                   	pop    ebx
c001e06f:	0f 84 c3 01 00 00    	je     c001e238 <finishSignal2>
c001e075:	e9 cc 00 00 00       	jmp    c001e146 <int_common_stub>

c001e07a <isr14>:
c001e07a:	fa                   	cli    
c001e07b:	6a 0e                	push   0xe
c001e07d:	e9 c4 00 00 00       	jmp    c001e146 <int_common_stub>

c001e082 <isr15>:
c001e082:	fa                   	cli    
c001e083:	6a 00                	push   0x0
c001e085:	6a 0f                	push   0xf
c001e087:	e9 ba 00 00 00       	jmp    c001e146 <int_common_stub>

c001e08c <isr16>:
c001e08c:	fa                   	cli    
c001e08d:	6a 00                	push   0x0
c001e08f:	6a 10                	push   0x10
c001e091:	e9 b0 00 00 00       	jmp    c001e146 <int_common_stub>

c001e096 <isr17>:
c001e096:	fa                   	cli    
c001e097:	6a 00                	push   0x0
c001e099:	6a 11                	push   0x11
c001e09b:	e9 a6 00 00 00       	jmp    c001e146 <int_common_stub>

c001e0a0 <isr18>:
c001e0a0:	fa                   	cli    
c001e0a1:	6a 00                	push   0x0
c001e0a3:	6a 12                	push   0x12
c001e0a5:	e9 9c 00 00 00       	jmp    c001e146 <int_common_stub>

c001e0aa <irq3>:
c001e0aa:	fa                   	cli    
c001e0ab:	6a 00                	push   0x0
c001e0ad:	6a 23                	push   0x23
c001e0af:	e9 92 00 00 00       	jmp    c001e146 <int_common_stub>

c001e0b4 <irq4>:
c001e0b4:	fa                   	cli    
c001e0b5:	6a 00                	push   0x0
c001e0b7:	6a 24                	push   0x24
c001e0b9:	e9 88 00 00 00       	jmp    c001e146 <int_common_stub>

c001e0be <irq5>:
c001e0be:	fa                   	cli    
c001e0bf:	6a 00                	push   0x0
c001e0c1:	6a 25                	push   0x25
c001e0c3:	e9 7e 00 00 00       	jmp    c001e146 <int_common_stub>

c001e0c8 <irq6>:
c001e0c8:	fa                   	cli    
c001e0c9:	6a 00                	push   0x0
c001e0cb:	6a 26                	push   0x26
c001e0cd:	e9 74 00 00 00       	jmp    c001e146 <int_common_stub>

c001e0d2 <irq7>:
c001e0d2:	fa                   	cli    
c001e0d3:	6a 00                	push   0x0
c001e0d5:	6a 27                	push   0x27
c001e0d7:	e9 6a 00 00 00       	jmp    c001e146 <int_common_stub>

c001e0dc <irq8>:
c001e0dc:	fa                   	cli    
c001e0dd:	6a 00                	push   0x0
c001e0df:	6a 28                	push   0x28
c001e0e1:	e9 60 00 00 00       	jmp    c001e146 <int_common_stub>

c001e0e6 <irq9>:
c001e0e6:	fa                   	cli    
c001e0e7:	6a 00                	push   0x0
c001e0e9:	6a 29                	push   0x29
c001e0eb:	e9 56 00 00 00       	jmp    c001e146 <int_common_stub>

c001e0f0 <irq10>:
c001e0f0:	fa                   	cli    
c001e0f1:	6a 00                	push   0x0
c001e0f3:	6a 2a                	push   0x2a
c001e0f5:	e9 4c 00 00 00       	jmp    c001e146 <int_common_stub>

c001e0fa <irq11>:
c001e0fa:	fa                   	cli    
c001e0fb:	6a 00                	push   0x0
c001e0fd:	6a 2b                	push   0x2b
c001e0ff:	e9 42 00 00 00       	jmp    c001e146 <int_common_stub>

c001e104 <irq12>:
c001e104:	fa                   	cli    
c001e105:	6a 00                	push   0x0
c001e107:	6a 2c                	push   0x2c
c001e109:	e9 38 00 00 00       	jmp    c001e146 <int_common_stub>

c001e10e <irq13>:
c001e10e:	fa                   	cli    
c001e10f:	6a 00                	push   0x0
c001e111:	6a 2d                	push   0x2d
c001e113:	e9 2e 00 00 00       	jmp    c001e146 <int_common_stub>

c001e118 <irq14>:
c001e118:	fa                   	cli    
c001e119:	6a 00                	push   0x0
c001e11b:	6a 2e                	push   0x2e
c001e11d:	e9 24 00 00 00       	jmp    c001e146 <int_common_stub>

c001e122 <irq15>:
c001e122:	fa                   	cli    
c001e123:	6a 00                	push   0x0
c001e125:	6a 2f                	push   0x2f
c001e127:	e9 1a 00 00 00       	jmp    c001e146 <int_common_stub>

c001e12c <irq1>:
c001e12c:	fa                   	cli    
c001e12d:	6a 00                	push   0x0
c001e12f:	6a 21                	push   0x21
c001e131:	eb 13                	jmp    c001e146 <int_common_stub>

c001e133 <irq2>:
c001e133:	fa                   	cli    
c001e134:	6a 00                	push   0x0
c001e136:	6a 22                	push   0x22
c001e138:	eb 0c                	jmp    c001e146 <int_common_stub>

c001e13a <isr96>:
c001e13a:	6a 00                	push   0x0
c001e13c:	6a 60                	push   0x60
c001e13e:	fb                   	sti    
c001e13f:	eb 37                	jmp    c001e178 <syscall_common_stub>

c001e141 <irq0>:
c001e141:	fa                   	cli    
c001e142:	6a 00                	push   0x0
c001e144:	6a 20                	push   0x20

c001e146 <int_common_stub>:
c001e146:	60                   	pusha  
c001e147:	1e                   	push   ds
c001e148:	06                   	push   es
c001e149:	0f a0                	push   fs
c001e14b:	0f a8                	push   gs
c001e14d:	66 b8 10 00          	mov    ax,0x10
c001e151:	66 8e d8             	mov    ds,ax
c001e154:	66 8e c0             	mov    es,ax
c001e157:	66 8e e0             	mov    fs,ax
c001e15a:	66 8e e8             	mov    gs,ax
c001e15d:	54                   	push   esp
c001e15e:	fc                   	cld    
c001e15f:	e8 64 e1 fe ff       	call   c000c2c8 <int_handler>
c001e164:	81 c4 04 00 00 00    	add    esp,0x4
c001e16a:	0f a9                	pop    gs
c001e16c:	0f a1                	pop    fs
c001e16e:	07                   	pop    es
c001e16f:	1f                   	pop    ds
c001e170:	61                   	popa   
c001e171:	81 c4 08 00 00 00    	add    esp,0x8
c001e177:	cf                   	iret   

c001e178 <syscall_common_stub>:
c001e178:	60                   	pusha  
c001e179:	1e                   	push   ds
c001e17a:	06                   	push   es
c001e17b:	0f a0                	push   fs
c001e17d:	0f a8                	push   gs
c001e17f:	66 b8 10 00          	mov    ax,0x10
c001e183:	66 8e d8             	mov    ds,ax
c001e186:	66 8e c0             	mov    es,ax
c001e189:	66 8e e0             	mov    fs,ax
c001e18c:	66 8e e8             	mov    gs,ax
c001e18f:	54                   	push   esp
c001e190:	fc                   	cld    
c001e191:	e8 32 e1 fe ff       	call   c000c2c8 <int_handler>
c001e196:	81 c4 04 00 00 00    	add    esp,0x4
c001e19c:	0f a9                	pop    gs
c001e19e:	0f a1                	pop    fs
c001e1a0:	07                   	pop    es
c001e1a1:	1f                   	pop    ds
c001e1a2:	e8 78 2d ff ff       	call   c0010f1f <KiCheckSignalZ>
c001e1a7:	3d 00 00 00 00       	cmp    eax,0x0
c001e1ac:	0f 84 c0 00 00 00    	je     c001e272 <skipSignals>
c001e1b2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001e1b7:	61                   	popa   
c001e1b8:	53                   	push   ebx
c001e1b9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001e1bf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001e1c2:	5b                   	pop    ebx
c001e1c3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001e1c8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001e1cb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001e1ce:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e1d1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001e1d4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001e1d7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001e1da:	81 c4 08 00 00 00    	add    esp,0x8
c001e1e0:	5e                   	pop    esi
c001e1e1:	5b                   	pop    ebx
c001e1e2:	59                   	pop    ecx
c001e1e3:	5a                   	pop    edx
c001e1e4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001e1e7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001e1ea:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001e1ed:	52                   	push   edx
c001e1ee:	51                   	push   ecx
c001e1ef:	53                   	push   ebx
c001e1f0:	56                   	push   esi
c001e1f1:	81 ec 08 00 00 00    	sub    esp,0x8
c001e1f7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001e1fa:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001e1fd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001e200:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e203:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e206:	60                   	pusha  
c001e207:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001e20d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001e210:	89 e3                	mov    ebx,esp
c001e212:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001e215:	52                   	push   edx
c001e216:	68 36 e2 01 c0       	push   0xc001e236
c001e21b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001e21e:	89 dc                	mov    esp,ebx
c001e220:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001e223:	68 23 00 00 00       	push   0x23
c001e228:	51                   	push   ecx
c001e229:	68 02 02 00 00       	push   0x202
c001e22e:	68 1b 00 00 00       	push   0x1b
c001e233:	ff 36                	push   DWORD PTR [esi]
c001e235:	cf                   	iret   

c001e236 <finishSignal>:
c001e236:	cd 0f                	int    0xf

c001e238 <finishSignal2>:
c001e238:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001e23e:	e8 59 2d ff ff       	call   c0010f9c <KiFinishSignalZ>
c001e243:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001e249:	68 23 00 00 00       	push   0x23
c001e24e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001e251:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001e254:	68 1b 00 00 00       	push   0x1b
c001e259:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001e25c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e25f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001e262:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001e265:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e268:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001e26b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001e26e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001e271:	cf                   	iret   

c001e272 <skipSignals>:
c001e272:	61                   	popa   
c001e273:	81 c4 08 00 00 00    	add    esp,0x8
c001e279:	cf                   	iret   
c001e27a:	90                   	nop
c001e27b:	90                   	nop

c001e27c <irq16>:
c001e27c:	fa                   	cli    
c001e27d:	6a 00                	push   0x0
c001e27f:	6a 30                	push   0x30
c001e281:	e9 c0 fe ff ff       	jmp    c001e146 <int_common_stub>

c001e286 <irq17>:
c001e286:	fa                   	cli    
c001e287:	6a 00                	push   0x0
c001e289:	6a 31                	push   0x31
c001e28b:	e9 b6 fe ff ff       	jmp    c001e146 <int_common_stub>

c001e290 <irq18>:
c001e290:	fa                   	cli    
c001e291:	6a 00                	push   0x0
c001e293:	6a 32                	push   0x32
c001e295:	e9 ac fe ff ff       	jmp    c001e146 <int_common_stub>

c001e29a <irq19>:
c001e29a:	fa                   	cli    
c001e29b:	6a 00                	push   0x0
c001e29d:	6a 33                	push   0x33
c001e29f:	e9 a2 fe ff ff       	jmp    c001e146 <int_common_stub>

c001e2a4 <irq20>:
c001e2a4:	fa                   	cli    
c001e2a5:	6a 00                	push   0x0
c001e2a7:	6a 34                	push   0x34
c001e2a9:	e9 98 fe ff ff       	jmp    c001e146 <int_common_stub>

c001e2ae <irq21>:
c001e2ae:	fa                   	cli    
c001e2af:	6a 00                	push   0x0
c001e2b1:	6a 35                	push   0x35
c001e2b3:	e9 8e fe ff ff       	jmp    c001e146 <int_common_stub>

c001e2b8 <irq22>:
c001e2b8:	fa                   	cli    
c001e2b9:	6a 00                	push   0x0
c001e2bb:	6a 36                	push   0x36
c001e2bd:	e9 84 fe ff ff       	jmp    c001e146 <int_common_stub>

c001e2c2 <irq23>:
c001e2c2:	fa                   	cli    
c001e2c3:	6a 00                	push   0x0
c001e2c5:	6a 37                	push   0x37
c001e2c7:	e9 7a fe ff ff       	jmp    c001e146 <int_common_stub>
c001e2cc:	66 90                	xchg   ax,ax
c001e2ce:	66 90                	xchg   ax,ax

c001e2d0 <i386GetRDRAND>:
c001e2d0:	b9 64 00 00 00       	mov    ecx,0x64

c001e2d5 <retry>:
c001e2d5:	0f c7 f0             	rdrand eax
c001e2d8:	72 05                	jb     c001e2df <retry.done>
c001e2da:	e2 f9                	loop   c001e2d5 <retry>

c001e2dc <retry.fail>:
c001e2dc:	31 c0                	xor    eax,eax
c001e2de:	c3                   	ret    

c001e2df <retry.done>:
c001e2df:	c3                   	ret    

c001e2e0 <absolutelyNoChanceInHell>:
c001e2e0:	b8 01 00 00 00       	mov    eax,0x1
c001e2e5:	0f a2                	cpuid  
c001e2e7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e2ed:	74 06                	je     c001e2f5 <sseDetect.noSSE>
c001e2ef:	b8 01 00 00 00       	mov    eax,0x1
c001e2f4:	c3                   	ret    

c001e2f5 <sseDetect.noSSE>:
c001e2f5:	31 c0                	xor    eax,eax
c001e2f7:	c3                   	ret    

c001e2f8 <sseSave>:
c001e2f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2fc:	0f ae 00             	fxsave [eax]
c001e2ff:	c3                   	ret    

c001e300 <sseLoad>:
c001e300:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e304:	0f ae 08             	fxrstor [eax]
c001e307:	c3                   	ret    

c001e308 <sseInit>:
c001e308:	e8 42 00 00 00       	call   c001e34f <x87Init>
c001e30d:	0f 20 e0             	mov    eax,cr4
c001e310:	66 0d 00 06          	or     ax,0x600
c001e314:	0f 22 e0             	mov    cr4,eax
c001e317:	c3                   	ret    

c001e318 <sseClose>:
c001e318:	c3                   	ret    
c001e319:	66 90                	xchg   ax,ax
c001e31b:	66 90                	xchg   ax,ax
c001e31d:	66 90                	xchg   ax,ax
c001e31f:	90                   	nop

c001e320 <value_37F>:
c001e320:	7f 03                	jg     c001e325 <value_37A+0x1>

c001e322 <value_37E>:
c001e322:	7e 03                	jle    c001e327 <x87Detect+0x1>

c001e324 <value_37A>:
c001e324:	7a 03                	jp     c001e329 <x87Detect+0x3>

c001e326 <x87Detect>:
c001e326:	b8 01 00 00 00       	mov    eax,0x1
c001e32b:	0f a2                	cpuid  
c001e32d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e333:	74 06                	je     c001e33b <x87Detect.nox87>
c001e335:	b8 01 00 00 00       	mov    eax,0x1
c001e33a:	c3                   	ret    

c001e33b <x87Detect.nox87>:
c001e33b:	b8 00 00 00 00       	mov    eax,0x0
c001e340:	c3                   	ret    

c001e341 <x87Save>:
c001e341:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e345:	dd 30                	fnsave [eax]
c001e347:	c3                   	ret    

c001e348 <x87Load>:
c001e348:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e34c:	dd 20                	frstor [eax]
c001e34e:	c3                   	ret    

c001e34f <x87Init>:
c001e34f:	0f 20 c0             	mov    eax,cr0
c001e352:	66 25 fb ff          	and    ax,0xfffb
c001e356:	66 0d 22 00          	or     ax,0x22
c001e35a:	0f 22 c0             	mov    cr0,eax
c001e35d:	db e3                	fninit 
c001e35f:	0f 06                	clts   
c001e361:	d9 2d 24 e3 01 c0    	fldcw  WORD PTR ds:0xc001e324
c001e367:	c3                   	ret    

c001e368 <x87Close>:
c001e368:	c3                   	ret    
c001e369:	66 90                	xchg   ax,ax
c001e36b:	90                   	nop

c001e36c <__do_global_ctors_aux>:
c001e36c:	a1 20 f3 01 c0       	mov    eax,ds:0xc001f320
c001e371:	83 f8 ff             	cmp    eax,0xffffffff
c001e374:	74 1a                	je     c001e390 <__do_global_ctors_aux+0x24>
c001e376:	55                   	push   ebp
c001e377:	89 e5                	mov    ebp,esp
c001e379:	53                   	push   ebx
c001e37a:	52                   	push   edx
c001e37b:	bb 20 f3 01 c0       	mov    ebx,0xc001f320
c001e380:	ff d0                	call   eax
c001e382:	83 eb 04             	sub    ebx,0x4
c001e385:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e387:	83 f8 ff             	cmp    eax,0xffffffff
c001e38a:	75 f4                	jne    c001e380 <__do_global_ctors_aux+0x14>
c001e38c:	58                   	pop    eax
c001e38d:	5b                   	pop    ebx
c001e38e:	5d                   	pop    ebp
c001e38f:	c3                   	ret    
c001e390:	c3                   	ret    
c001e391:	66 90                	xchg   ax,ax
c001e393:	90                   	nop

c001e394 <__divdi3>:
c001e394:	55                   	push   ebp
c001e395:	57                   	push   edi
c001e396:	56                   	push   esi
c001e397:	53                   	push   ebx
c001e398:	83 ec 1c             	sub    esp,0x1c
c001e39b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e39f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e3a3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e3a6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e3aa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e3ae:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e3b2:	85 db                	test   ebx,ebx
c001e3b4:	0f 88 8e 00 00 00    	js     c001e448 <__divdi3+0xb4>
c001e3ba:	89 dd                	mov    ebp,ebx
c001e3bc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e3c4:	89 d3                	mov    ebx,edx
c001e3c6:	85 d2                	test   edx,edx
c001e3c8:	79 0d                	jns    c001e3d7 <__divdi3+0x43>
c001e3ca:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e3ce:	f7 d8                	neg    eax
c001e3d0:	83 d2 00             	adc    edx,0x0
c001e3d3:	f7 da                	neg    edx
c001e3d5:	89 d3                	mov    ebx,edx
c001e3d7:	89 c7                	mov    edi,eax
c001e3d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e3dc:	85 db                	test   ebx,ebx
c001e3de:	75 48                	jne    c001e428 <__divdi3+0x94>
c001e3e0:	39 ef                	cmp    edi,ebp
c001e3e2:	76 24                	jbe    c001e408 <__divdi3+0x74>
c001e3e4:	89 ea                	mov    edx,ebp
c001e3e6:	f7 f7                	div    edi
c001e3e8:	89 c1                	mov    ecx,eax
c001e3ea:	31 f6                	xor    esi,esi
c001e3ec:	89 c8                	mov    eax,ecx
c001e3ee:	89 f2                	mov    edx,esi
c001e3f0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e3f4:	85 c9                	test   ecx,ecx
c001e3f6:	74 07                	je     c001e3ff <__divdi3+0x6b>
c001e3f8:	f7 d8                	neg    eax
c001e3fa:	83 d2 00             	adc    edx,0x0
c001e3fd:	f7 da                	neg    edx
c001e3ff:	83 c4 1c             	add    esp,0x1c
c001e402:	5b                   	pop    ebx
c001e403:	5e                   	pop    esi
c001e404:	5f                   	pop    edi
c001e405:	5d                   	pop    ebp
c001e406:	c3                   	ret    
c001e407:	90                   	nop
c001e408:	85 ff                	test   edi,edi
c001e40a:	75 0b                	jne    c001e417 <__divdi3+0x83>
c001e40c:	b8 01 00 00 00       	mov    eax,0x1
c001e411:	31 d2                	xor    edx,edx
c001e413:	f7 f3                	div    ebx
c001e415:	89 c7                	mov    edi,eax
c001e417:	31 d2                	xor    edx,edx
c001e419:	89 e8                	mov    eax,ebp
c001e41b:	f7 f7                	div    edi
c001e41d:	89 c6                	mov    esi,eax
c001e41f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e422:	f7 f7                	div    edi
c001e424:	89 c1                	mov    ecx,eax
c001e426:	eb c4                	jmp    c001e3ec <__divdi3+0x58>
c001e428:	39 eb                	cmp    ebx,ebp
c001e42a:	77 3c                	ja     c001e468 <__divdi3+0xd4>
c001e42c:	0f bd f3             	bsr    esi,ebx
c001e42f:	83 f6 1f             	xor    esi,0x1f
c001e432:	75 40                	jne    c001e474 <__divdi3+0xe0>
c001e434:	39 eb                	cmp    ebx,ebp
c001e436:	72 09                	jb     c001e441 <__divdi3+0xad>
c001e438:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e43b:	0f 87 97 00 00 00    	ja     c001e4d8 <__divdi3+0x144>
c001e441:	b9 01 00 00 00       	mov    ecx,0x1
c001e446:	eb a4                	jmp    c001e3ec <__divdi3+0x58>
c001e448:	f7 d9                	neg    ecx
c001e44a:	83 d3 00             	adc    ebx,0x0
c001e44d:	f7 db                	neg    ebx
c001e44f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e452:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e456:	89 dd                	mov    ebp,ebx
c001e458:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e460:	e9 5f ff ff ff       	jmp    c001e3c4 <__divdi3+0x30>
c001e465:	8d 76 00             	lea    esi,[esi+0x0]
c001e468:	31 f6                	xor    esi,esi
c001e46a:	31 c9                	xor    ecx,ecx
c001e46c:	e9 7b ff ff ff       	jmp    c001e3ec <__divdi3+0x58>
c001e471:	8d 76 00             	lea    esi,[esi+0x0]
c001e474:	b8 20 00 00 00       	mov    eax,0x20
c001e479:	29 f0                	sub    eax,esi
c001e47b:	89 f1                	mov    ecx,esi
c001e47d:	d3 e3                	shl    ebx,cl
c001e47f:	89 fa                	mov    edx,edi
c001e481:	88 c1                	mov    cl,al
c001e483:	d3 ea                	shr    edx,cl
c001e485:	09 da                	or     edx,ebx
c001e487:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e48b:	89 f1                	mov    ecx,esi
c001e48d:	d3 e7                	shl    edi,cl
c001e48f:	89 eb                	mov    ebx,ebp
c001e491:	88 c1                	mov    cl,al
c001e493:	d3 eb                	shr    ebx,cl
c001e495:	89 f1                	mov    ecx,esi
c001e497:	d3 e5                	shl    ebp,cl
c001e499:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e49c:	88 c1                	mov    cl,al
c001e49e:	d3 ea                	shr    edx,cl
c001e4a0:	09 d5                	or     ebp,edx
c001e4a2:	89 e8                	mov    eax,ebp
c001e4a4:	89 da                	mov    edx,ebx
c001e4a6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e4aa:	89 d3                	mov    ebx,edx
c001e4ac:	89 c5                	mov    ebp,eax
c001e4ae:	f7 e7                	mul    edi
c001e4b0:	39 d3                	cmp    ebx,edx
c001e4b2:	72 18                	jb     c001e4cc <__divdi3+0x138>
c001e4b4:	74 0a                	je     c001e4c0 <__divdi3+0x12c>
c001e4b6:	89 e9                	mov    ecx,ebp
c001e4b8:	31 f6                	xor    esi,esi
c001e4ba:	e9 2d ff ff ff       	jmp    c001e3ec <__divdi3+0x58>
c001e4bf:	90                   	nop
c001e4c0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e4c3:	89 f1                	mov    ecx,esi
c001e4c5:	d3 e7                	shl    edi,cl
c001e4c7:	39 c7                	cmp    edi,eax
c001e4c9:	73 eb                	jae    c001e4b6 <__divdi3+0x122>
c001e4cb:	90                   	nop
c001e4cc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e4cf:	31 f6                	xor    esi,esi
c001e4d1:	e9 16 ff ff ff       	jmp    c001e3ec <__divdi3+0x58>
c001e4d6:	66 90                	xchg   ax,ax
c001e4d8:	31 c9                	xor    ecx,ecx
c001e4da:	e9 0d ff ff ff       	jmp    c001e3ec <__divdi3+0x58>
c001e4df:	90                   	nop

c001e4e0 <__moddi3>:
c001e4e0:	55                   	push   ebp
c001e4e1:	57                   	push   edi
c001e4e2:	56                   	push   esi
c001e4e3:	53                   	push   ebx
c001e4e4:	83 ec 2c             	sub    esp,0x2c
c001e4e7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e4eb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e4ef:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e4f3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e4f7:	85 db                	test   ebx,ebx
c001e4f9:	0f 88 85 00 00 00    	js     c001e584 <__moddi3+0xa4>
c001e4ff:	89 de                	mov    esi,ebx
c001e501:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e509:	89 d7                	mov    edi,edx
c001e50b:	85 d2                	test   edx,edx
c001e50d:	79 09                	jns    c001e518 <__moddi3+0x38>
c001e50f:	f7 d8                	neg    eax
c001e511:	83 d2 00             	adc    edx,0x0
c001e514:	f7 da                	neg    edx
c001e516:	89 d7                	mov    edi,edx
c001e518:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e51c:	89 cd                	mov    ebp,ecx
c001e51e:	85 ff                	test   edi,edi
c001e520:	75 52                	jne    c001e574 <__moddi3+0x94>
c001e522:	89 c3                	mov    ebx,eax
c001e524:	39 f0                	cmp    eax,esi
c001e526:	76 24                	jbe    c001e54c <__moddi3+0x6c>
c001e528:	89 c8                	mov    eax,ecx
c001e52a:	89 f2                	mov    edx,esi
c001e52c:	f7 f3                	div    ebx
c001e52e:	89 d6                	mov    esi,edx
c001e530:	89 f0                	mov    eax,esi
c001e532:	31 d2                	xor    edx,edx
c001e534:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e538:	85 c9                	test   ecx,ecx
c001e53a:	74 07                	je     c001e543 <__moddi3+0x63>
c001e53c:	f7 d8                	neg    eax
c001e53e:	83 d2 00             	adc    edx,0x0
c001e541:	f7 da                	neg    edx
c001e543:	83 c4 2c             	add    esp,0x2c
c001e546:	5b                   	pop    ebx
c001e547:	5e                   	pop    esi
c001e548:	5f                   	pop    edi
c001e549:	5d                   	pop    ebp
c001e54a:	c3                   	ret    
c001e54b:	90                   	nop
c001e54c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e550:	85 db                	test   ebx,ebx
c001e552:	75 0d                	jne    c001e561 <__moddi3+0x81>
c001e554:	b8 01 00 00 00       	mov    eax,0x1
c001e559:	31 d2                	xor    edx,edx
c001e55b:	f7 f7                	div    edi
c001e55d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e561:	89 f0                	mov    eax,esi
c001e563:	31 d2                	xor    edx,edx
c001e565:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e569:	f7 f7                	div    edi
c001e56b:	89 e8                	mov    eax,ebp
c001e56d:	f7 f7                	div    edi
c001e56f:	89 d6                	mov    esi,edx
c001e571:	eb bd                	jmp    c001e530 <__moddi3+0x50>
c001e573:	90                   	nop
c001e574:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e578:	39 f7                	cmp    edi,esi
c001e57a:	76 20                	jbe    c001e59c <__moddi3+0xbc>
c001e57c:	89 c8                	mov    eax,ecx
c001e57e:	89 f2                	mov    edx,esi
c001e580:	eb b2                	jmp    c001e534 <__moddi3+0x54>
c001e582:	66 90                	xchg   ax,ax
c001e584:	f7 d9                	neg    ecx
c001e586:	83 d3 00             	adc    ebx,0x0
c001e589:	f7 db                	neg    ebx
c001e58b:	89 de                	mov    esi,ebx
c001e58d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e595:	e9 6f ff ff ff       	jmp    c001e509 <__moddi3+0x29>
c001e59a:	66 90                	xchg   ax,ax
c001e59c:	0f bd c7             	bsr    eax,edi
c001e59f:	83 f0 1f             	xor    eax,0x1f
c001e5a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e5a6:	75 24                	jne    c001e5cc <__moddi3+0xec>
c001e5a8:	39 f7                	cmp    edi,esi
c001e5aa:	72 06                	jb     c001e5b2 <__moddi3+0xd2>
c001e5ac:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e5b0:	77 0c                	ja     c001e5be <__moddi3+0xde>
c001e5b2:	89 e9                	mov    ecx,ebp
c001e5b4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e5b8:	19 fe                	sbb    esi,edi
c001e5ba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e5be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e5c2:	89 f2                	mov    edx,esi
c001e5c4:	e9 6b ff ff ff       	jmp    c001e534 <__moddi3+0x54>
c001e5c9:	8d 76 00             	lea    esi,[esi+0x0]
c001e5cc:	b8 20 00 00 00       	mov    eax,0x20
c001e5d1:	89 c2                	mov    edx,eax
c001e5d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e5d7:	29 da                	sub    edx,ebx
c001e5d9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e5dd:	88 d9                	mov    cl,bl
c001e5df:	d3 e7                	shl    edi,cl
c001e5e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e5e5:	88 d1                	mov    cl,dl
c001e5e7:	d3 e8                	shr    eax,cl
c001e5e9:	09 c7                	or     edi,eax
c001e5eb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e5ef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e5f3:	89 d8                	mov    eax,ebx
c001e5f5:	88 d9                	mov    cl,bl
c001e5f7:	d3 e7                	shl    edi,cl
c001e5f9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e5fd:	89 f3                	mov    ebx,esi
c001e5ff:	88 d1                	mov    cl,dl
c001e601:	d3 eb                	shr    ebx,cl
c001e603:	89 c7                	mov    edi,eax
c001e605:	88 c1                	mov    cl,al
c001e607:	d3 e6                	shl    esi,cl
c001e609:	89 e8                	mov    eax,ebp
c001e60b:	88 d1                	mov    cl,dl
c001e60d:	d3 e8                	shr    eax,cl
c001e60f:	09 f0                	or     eax,esi
c001e611:	89 f9                	mov    ecx,edi
c001e613:	d3 e5                	shl    ebp,cl
c001e615:	89 da                	mov    edx,ebx
c001e617:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e61b:	89 d3                	mov    ebx,edx
c001e61d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e621:	89 c6                	mov    esi,eax
c001e623:	89 d1                	mov    ecx,edx
c001e625:	39 d3                	cmp    ebx,edx
c001e627:	72 27                	jb     c001e650 <__moddi3+0x170>
c001e629:	74 21                	je     c001e64c <__moddi3+0x16c>
c001e62b:	29 f5                	sub    ebp,esi
c001e62d:	19 cb                	sbb    ebx,ecx
c001e62f:	89 de                	mov    esi,ebx
c001e631:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e635:	d3 e6                	shl    esi,cl
c001e637:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e63b:	89 f9                	mov    ecx,edi
c001e63d:	d3 ed                	shr    ebp,cl
c001e63f:	09 ee                	or     esi,ebp
c001e641:	89 f0                	mov    eax,esi
c001e643:	d3 eb                	shr    ebx,cl
c001e645:	89 da                	mov    edx,ebx
c001e647:	e9 e8 fe ff ff       	jmp    c001e534 <__moddi3+0x54>
c001e64c:	39 c5                	cmp    ebp,eax
c001e64e:	73 db                	jae    c001e62b <__moddi3+0x14b>
c001e650:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e654:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e658:	89 d1                	mov    ecx,edx
c001e65a:	89 c6                	mov    esi,eax
c001e65c:	eb cd                	jmp    c001e62b <__moddi3+0x14b>
c001e65e:	66 90                	xchg   ax,ax

c001e660 <__udivdi3>:
c001e660:	55                   	push   ebp
c001e661:	57                   	push   edi
c001e662:	56                   	push   esi
c001e663:	53                   	push   ebx
c001e664:	83 ec 1c             	sub    esp,0x1c
c001e667:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e66b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e66f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e673:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e677:	85 d2                	test   edx,edx
c001e679:	75 41                	jne    c001e6bc <__udivdi3+0x5c>
c001e67b:	39 f7                	cmp    edi,esi
c001e67d:	76 15                	jbe    c001e694 <__udivdi3+0x34>
c001e67f:	89 e8                	mov    eax,ebp
c001e681:	89 f2                	mov    edx,esi
c001e683:	f7 f7                	div    edi
c001e685:	31 db                	xor    ebx,ebx
c001e687:	89 da                	mov    edx,ebx
c001e689:	83 c4 1c             	add    esp,0x1c
c001e68c:	5b                   	pop    ebx
c001e68d:	5e                   	pop    esi
c001e68e:	5f                   	pop    edi
c001e68f:	5d                   	pop    ebp
c001e690:	c3                   	ret    
c001e691:	8d 76 00             	lea    esi,[esi+0x0]
c001e694:	89 f9                	mov    ecx,edi
c001e696:	85 ff                	test   edi,edi
c001e698:	75 0b                	jne    c001e6a5 <__udivdi3+0x45>
c001e69a:	b8 01 00 00 00       	mov    eax,0x1
c001e69f:	31 d2                	xor    edx,edx
c001e6a1:	f7 f7                	div    edi
c001e6a3:	89 c1                	mov    ecx,eax
c001e6a5:	31 d2                	xor    edx,edx
c001e6a7:	89 f0                	mov    eax,esi
c001e6a9:	f7 f1                	div    ecx
c001e6ab:	89 c3                	mov    ebx,eax
c001e6ad:	89 e8                	mov    eax,ebp
c001e6af:	f7 f1                	div    ecx
c001e6b1:	89 da                	mov    edx,ebx
c001e6b3:	83 c4 1c             	add    esp,0x1c
c001e6b6:	5b                   	pop    ebx
c001e6b7:	5e                   	pop    esi
c001e6b8:	5f                   	pop    edi
c001e6b9:	5d                   	pop    ebp
c001e6ba:	c3                   	ret    
c001e6bb:	90                   	nop
c001e6bc:	39 f2                	cmp    edx,esi
c001e6be:	77 1c                	ja     c001e6dc <__udivdi3+0x7c>
c001e6c0:	0f bd da             	bsr    ebx,edx
c001e6c3:	83 f3 1f             	xor    ebx,0x1f
c001e6c6:	75 24                	jne    c001e6ec <__udivdi3+0x8c>
c001e6c8:	39 f2                	cmp    edx,esi
c001e6ca:	72 08                	jb     c001e6d4 <__udivdi3+0x74>
c001e6cc:	39 ef                	cmp    edi,ebp
c001e6ce:	0f 87 84 00 00 00    	ja     c001e758 <__udivdi3+0xf8>
c001e6d4:	b8 01 00 00 00       	mov    eax,0x1
c001e6d9:	eb ac                	jmp    c001e687 <__udivdi3+0x27>
c001e6db:	90                   	nop
c001e6dc:	31 db                	xor    ebx,ebx
c001e6de:	31 c0                	xor    eax,eax
c001e6e0:	89 da                	mov    edx,ebx
c001e6e2:	83 c4 1c             	add    esp,0x1c
c001e6e5:	5b                   	pop    ebx
c001e6e6:	5e                   	pop    esi
c001e6e7:	5f                   	pop    edi
c001e6e8:	5d                   	pop    ebp
c001e6e9:	c3                   	ret    
c001e6ea:	66 90                	xchg   ax,ax
c001e6ec:	b8 20 00 00 00       	mov    eax,0x20
c001e6f1:	29 d8                	sub    eax,ebx
c001e6f3:	88 d9                	mov    cl,bl
c001e6f5:	d3 e2                	shl    edx,cl
c001e6f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e6fb:	89 fa                	mov    edx,edi
c001e6fd:	88 c1                	mov    cl,al
c001e6ff:	d3 ea                	shr    edx,cl
c001e701:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e705:	09 d1                	or     ecx,edx
c001e707:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e70b:	88 d9                	mov    cl,bl
c001e70d:	d3 e7                	shl    edi,cl
c001e70f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e713:	89 f7                	mov    edi,esi
c001e715:	88 c1                	mov    cl,al
c001e717:	d3 ef                	shr    edi,cl
c001e719:	88 d9                	mov    cl,bl
c001e71b:	d3 e6                	shl    esi,cl
c001e71d:	89 ea                	mov    edx,ebp
c001e71f:	88 c1                	mov    cl,al
c001e721:	d3 ea                	shr    edx,cl
c001e723:	09 d6                	or     esi,edx
c001e725:	89 f0                	mov    eax,esi
c001e727:	89 fa                	mov    edx,edi
c001e729:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e72d:	89 d7                	mov    edi,edx
c001e72f:	89 c6                	mov    esi,eax
c001e731:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e735:	39 d7                	cmp    edi,edx
c001e737:	72 13                	jb     c001e74c <__udivdi3+0xec>
c001e739:	74 09                	je     c001e744 <__udivdi3+0xe4>
c001e73b:	89 f0                	mov    eax,esi
c001e73d:	31 db                	xor    ebx,ebx
c001e73f:	e9 43 ff ff ff       	jmp    c001e687 <__udivdi3+0x27>
c001e744:	88 d9                	mov    cl,bl
c001e746:	d3 e5                	shl    ebp,cl
c001e748:	39 c5                	cmp    ebp,eax
c001e74a:	73 ef                	jae    c001e73b <__udivdi3+0xdb>
c001e74c:	8d 46 ff             	lea    eax,[esi-0x1]
c001e74f:	31 db                	xor    ebx,ebx
c001e751:	e9 31 ff ff ff       	jmp    c001e687 <__udivdi3+0x27>
c001e756:	66 90                	xchg   ax,ax
c001e758:	31 c0                	xor    eax,eax
c001e75a:	e9 28 ff ff ff       	jmp    c001e687 <__udivdi3+0x27>
c001e75f:	90                   	nop

c001e760 <__umoddi3>:
c001e760:	55                   	push   ebp
c001e761:	57                   	push   edi
c001e762:	56                   	push   esi
c001e763:	53                   	push   ebx
c001e764:	83 ec 1c             	sub    esp,0x1c
c001e767:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e76b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e76f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e773:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e777:	89 da                	mov    edx,ebx
c001e779:	85 c0                	test   eax,eax
c001e77b:	75 37                	jne    c001e7b4 <__umoddi3+0x54>
c001e77d:	39 df                	cmp    edi,ebx
c001e77f:	76 13                	jbe    c001e794 <__umoddi3+0x34>
c001e781:	89 f0                	mov    eax,esi
c001e783:	f7 f7                	div    edi
c001e785:	89 d0                	mov    eax,edx
c001e787:	31 d2                	xor    edx,edx
c001e789:	83 c4 1c             	add    esp,0x1c
c001e78c:	5b                   	pop    ebx
c001e78d:	5e                   	pop    esi
c001e78e:	5f                   	pop    edi
c001e78f:	5d                   	pop    ebp
c001e790:	c3                   	ret    
c001e791:	8d 76 00             	lea    esi,[esi+0x0]
c001e794:	89 fd                	mov    ebp,edi
c001e796:	85 ff                	test   edi,edi
c001e798:	75 0b                	jne    c001e7a5 <__umoddi3+0x45>
c001e79a:	b8 01 00 00 00       	mov    eax,0x1
c001e79f:	31 d2                	xor    edx,edx
c001e7a1:	f7 f7                	div    edi
c001e7a3:	89 c5                	mov    ebp,eax
c001e7a5:	89 d8                	mov    eax,ebx
c001e7a7:	31 d2                	xor    edx,edx
c001e7a9:	f7 f5                	div    ebp
c001e7ab:	89 f0                	mov    eax,esi
c001e7ad:	f7 f5                	div    ebp
c001e7af:	89 d0                	mov    eax,edx
c001e7b1:	eb d4                	jmp    c001e787 <__umoddi3+0x27>
c001e7b3:	90                   	nop
c001e7b4:	89 f1                	mov    ecx,esi
c001e7b6:	39 d8                	cmp    eax,ebx
c001e7b8:	76 0a                	jbe    c001e7c4 <__umoddi3+0x64>
c001e7ba:	89 f0                	mov    eax,esi
c001e7bc:	83 c4 1c             	add    esp,0x1c
c001e7bf:	5b                   	pop    ebx
c001e7c0:	5e                   	pop    esi
c001e7c1:	5f                   	pop    edi
c001e7c2:	5d                   	pop    ebp
c001e7c3:	c3                   	ret    
c001e7c4:	0f bd e8             	bsr    ebp,eax
c001e7c7:	83 f5 1f             	xor    ebp,0x1f
c001e7ca:	75 1c                	jne    c001e7e8 <__umoddi3+0x88>
c001e7cc:	39 d8                	cmp    eax,ebx
c001e7ce:	72 04                	jb     c001e7d4 <__umoddi3+0x74>
c001e7d0:	39 f7                	cmp    edi,esi
c001e7d2:	77 08                	ja     c001e7dc <__umoddi3+0x7c>
c001e7d4:	89 da                	mov    edx,ebx
c001e7d6:	29 fe                	sub    esi,edi
c001e7d8:	19 c2                	sbb    edx,eax
c001e7da:	89 f1                	mov    ecx,esi
c001e7dc:	89 c8                	mov    eax,ecx
c001e7de:	83 c4 1c             	add    esp,0x1c
c001e7e1:	5b                   	pop    ebx
c001e7e2:	5e                   	pop    esi
c001e7e3:	5f                   	pop    edi
c001e7e4:	5d                   	pop    ebp
c001e7e5:	c3                   	ret    
c001e7e6:	66 90                	xchg   ax,ax
c001e7e8:	ba 20 00 00 00       	mov    edx,0x20
c001e7ed:	29 ea                	sub    edx,ebp
c001e7ef:	89 e9                	mov    ecx,ebp
c001e7f1:	d3 e0                	shl    eax,cl
c001e7f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e7f7:	89 f8                	mov    eax,edi
c001e7f9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e7fd:	88 d1                	mov    cl,dl
c001e7ff:	d3 e8                	shr    eax,cl
c001e801:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e805:	09 c1                	or     ecx,eax
c001e807:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e80b:	89 e9                	mov    ecx,ebp
c001e80d:	d3 e7                	shl    edi,cl
c001e80f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e813:	89 d8                	mov    eax,ebx
c001e815:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e819:	88 d1                	mov    cl,dl
c001e81b:	d3 e8                	shr    eax,cl
c001e81d:	89 c7                	mov    edi,eax
c001e81f:	89 e9                	mov    ecx,ebp
c001e821:	d3 e3                	shl    ebx,cl
c001e823:	89 f0                	mov    eax,esi
c001e825:	88 d1                	mov    cl,dl
c001e827:	d3 e8                	shr    eax,cl
c001e829:	09 d8                	or     eax,ebx
c001e82b:	89 e9                	mov    ecx,ebp
c001e82d:	d3 e6                	shl    esi,cl
c001e82f:	89 f3                	mov    ebx,esi
c001e831:	89 fa                	mov    edx,edi
c001e833:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e837:	89 d1                	mov    ecx,edx
c001e839:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e83d:	89 c6                	mov    esi,eax
c001e83f:	89 d7                	mov    edi,edx
c001e841:	39 d1                	cmp    ecx,edx
c001e843:	72 27                	jb     c001e86c <__umoddi3+0x10c>
c001e845:	74 21                	je     c001e868 <__umoddi3+0x108>
c001e847:	89 ca                	mov    edx,ecx
c001e849:	29 f3                	sub    ebx,esi
c001e84b:	19 fa                	sbb    edx,edi
c001e84d:	89 d0                	mov    eax,edx
c001e84f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e853:	d3 e0                	shl    eax,cl
c001e855:	89 e9                	mov    ecx,ebp
c001e857:	d3 eb                	shr    ebx,cl
c001e859:	09 d8                	or     eax,ebx
c001e85b:	d3 ea                	shr    edx,cl
c001e85d:	83 c4 1c             	add    esp,0x1c
c001e860:	5b                   	pop    ebx
c001e861:	5e                   	pop    esi
c001e862:	5f                   	pop    edi
c001e863:	5d                   	pop    ebp
c001e864:	c3                   	ret    
c001e865:	8d 76 00             	lea    esi,[esi+0x0]
c001e868:	39 c3                	cmp    ebx,eax
c001e86a:	73 db                	jae    c001e847 <__umoddi3+0xe7>
c001e86c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e870:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e874:	89 d7                	mov    edi,edx
c001e876:	89 c6                	mov    esi,eax
c001e878:	eb cd                	jmp    c001e847 <__umoddi3+0xe7>

Disassembly of section .init:

c001e87a <_init>:
c001e87a:	55                   	push   ebp
c001e87b:	89 e5                	mov    ebp,esp
c001e87d:	e8 72 18 fe ff       	call   c00000f4 <frame_dummy>
c001e882:	e8 e5 fa ff ff       	call   c001e36c <__do_global_ctors_aux>
c001e887:	5d                   	pop    ebp
c001e888:	c3                   	ret    

Disassembly of section .fini:

c001e889 <_fini>:
c001e889:	55                   	push   ebp
c001e88a:	89 e5                	mov    ebp,esp
c001e88c:	e8 f3 17 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001e891:	5d                   	pop    ebp
c001e892:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e894 <Computer::~Computer()>:
c001e894:	83 ec 0c             	sub    esp,0xc
c001e897:	ba b4 fb 01 c0       	mov    edx,0xc001fbb4
c001e89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8a0:	89 10                	mov    DWORD PTR [eax],edx
c001e8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8a6:	83 ec 0c             	sub    esp,0xc
c001e8a9:	50                   	push   eax
c001e8aa:	e8 71 d4 fe ff       	call   c000bd20 <Device::~Device()>
c001e8af:	83 c4 10             	add    esp,0x10
c001e8b2:	90                   	nop
c001e8b3:	83 c4 0c             	add    esp,0xc
c001e8b6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e8b8 <Computer::~Computer()>:
c001e8b8:	83 ec 0c             	sub    esp,0xc
c001e8bb:	83 ec 0c             	sub    esp,0xc
c001e8be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8c2:	e8 cd ff ff ff       	call   c001e894 <Computer::~Computer()>
c001e8c7:	83 c4 10             	add    esp,0x10
c001e8ca:	83 ec 08             	sub    esp,0x8
c001e8cd:	68 70 01 00 00       	push   0x170
c001e8d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8d6:	e8 e2 bf fe ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c001e8db:	83 c4 10             	add    esp,0x10
c001e8de:	83 c4 0c             	add    esp,0xc
c001e8e1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e8e2 <idleCommon()>:
c001e8e2:	83 ec 0c             	sub    esp,0xc
c001e8e5:	fa                   	cli    
c001e8e6:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001e8ec:	e8 db 67 ff ff       	call   c00150cc <schedule()>
c001e8f1:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001e8f6:	48                   	dec    eax
c001e8f7:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001e8fc:	75 01                	jne    c001e8ff <idleCommon()+0x1d>
c001e8fe:	fb                   	sti    
c001e8ff:	83 c4 0c             	add    esp,0xc
c001e902:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e904 <LinkedList<UnixFile>::~LinkedList()>:
c001e904:	90                   	nop
c001e905:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e906 <LinkedList<UnixFile>::LinkedList()>:
c001e906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e90a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e910:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e914:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e91b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e91f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e926:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e92a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e934:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e93b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e93f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e946:	90                   	nop
c001e947:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e948 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e948:	83 ec 0c             	sub    esp,0xc
c001e94b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e950:	75 10                	jne    c001e962 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001e952:	83 ec 0c             	sub    esp,0xc
c001e955:	68 c8 fd 01 c0       	push   0xc001fdc8
c001e95a:	e8 b8 1f ff ff       	call   c0010917 <KePanic(char const*)>
c001e95f:	83 c4 10             	add    esp,0x10
c001e962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e966:	8b 00                	mov    eax,DWORD PTR [eax]
c001e968:	85 c0                	test   eax,eax
c001e96a:	74 34                	je     c001e9a0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e970:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e973:	85 c0                	test   eax,eax
c001e975:	74 29                	je     c001e9a0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e97b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e97e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e982:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e985:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e989:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e98d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e994:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e997:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e99e:	eb 65                	jmp    c001ea05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e9a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9a4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9a6:	85 c0                	test   eax,eax
c001e9a8:	75 4b                	jne    c001e9f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e9aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9b1:	85 c0                	test   eax,eax
c001e9b3:	75 40                	jne    c001e9f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e9b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e9bd:	89 10                	mov    DWORD PTR [eax],edx
c001e9bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e9c7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e9ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9d1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e9d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9df:	85 c0                	test   eax,eax
c001e9e1:	74 22                	je     c001ea05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e9e3:	83 ec 0c             	sub    esp,0xc
c001e9e6:	68 ea fd 01 c0       	push   0xc001fdea
c001e9eb:	e8 27 1f ff ff       	call   c0010917 <KePanic(char const*)>
c001e9f0:	83 c4 10             	add    esp,0x10
c001e9f3:	eb 10                	jmp    c001ea05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e9f5:	83 ec 0c             	sub    esp,0xc
c001e9f8:	68 f4 fd 01 c0       	push   0xc001fdf4
c001e9fd:	e8 15 1f ff ff       	call   c0010917 <KePanic(char const*)>
c001ea02:	83 c4 10             	add    esp,0x10
c001ea05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea09:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea0c:	8d 50 01             	lea    edx,[eax+0x1]
c001ea0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea13:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ea16:	90                   	nop
c001ea17:	83 c4 0c             	add    esp,0xc
c001ea1a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001ea1c <LinkedList<UnixFile>::getFirstElement()>:
c001ea1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea20:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea22:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001ea24 <LinkedList<UnixFile>::removeFirst()>:
c001ea24:	83 ec 0c             	sub    esp,0xc
c001ea27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea2b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea2d:	85 c0                	test   eax,eax
c001ea2f:	75 12                	jne    c001ea43 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001ea31:	83 ec 0c             	sub    esp,0xc
c001ea34:	68 00 fe 01 c0       	push   0xc001fe00
c001ea39:	e8 d9 1e ff ff       	call   c0010917 <KePanic(char const*)>
c001ea3e:	83 c4 10             	add    esp,0x10
c001ea41:	eb 7e                	jmp    c001eac1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001ea43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea47:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea4a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea4d:	85 c0                	test   eax,eax
c001ea4f:	74 10                	je     c001ea61 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001ea51:	83 ec 0c             	sub    esp,0xc
c001ea54:	68 4b fe 01 c0       	push   0xc001fe4b
c001ea59:	e8 b9 1e ff ff       	call   c0010917 <KePanic(char const*)>
c001ea5e:	83 c4 10             	add    esp,0x10
c001ea61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea65:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea67:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea6a:	85 c0                	test   eax,eax
c001ea6c:	75 33                	jne    c001eaa1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001ea6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea72:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ea78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea7c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ea83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea87:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea8a:	83 f8 01             	cmp    eax,0x1
c001ea8d:	74 21                	je     c001eab0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ea8f:	83 ec 0c             	sub    esp,0xc
c001ea92:	68 24 fe 01 c0       	push   0xc001fe24
c001ea97:	e8 7b 1e ff ff       	call   c0010917 <KePanic(char const*)>
c001ea9c:	83 c4 10             	add    esp,0x10
c001ea9f:	eb 0f                	jmp    c001eab0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001eaa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaa5:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaa7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001eaaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaae:	89 10                	mov    DWORD PTR [eax],edx
c001eab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eab7:	8d 50 ff             	lea    edx,[eax-0x1]
c001eaba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eabe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eac1:	83 c4 0c             	add    esp,0xc
c001eac4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001eac6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001eac6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eaca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eacd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001eace <DriverlessDevice::~DriverlessDevice()>:
c001eace:	ba dc 04 02 c0       	mov    edx,0xc00204dc
c001ead3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ead7:	89 10                	mov    DWORD PTR [eax],edx
c001ead9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eadd:	50                   	push   eax
c001eade:	e8 3d d2 fe ff       	call   c000bd20 <Device::~Device()>
c001eae3:	83 c4 04             	add    esp,0x4
c001eae6:	90                   	nop
c001eae7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001eae8 <DriverlessDevice::~DriverlessDevice()>:
c001eae8:	83 ec 0c             	sub    esp,0xc
c001eaeb:	83 ec 0c             	sub    esp,0xc
c001eaee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eaf2:	e8 d7 ff ff ff       	call   c001eace <DriverlessDevice::~DriverlessDevice()>
c001eaf7:	83 c4 10             	add    esp,0x10
c001eafa:	83 ec 08             	sub    esp,0x8
c001eafd:	68 58 01 00 00       	push   0x158
c001eb02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb06:	e8 b2 bd fe ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c001eb0b:	83 c4 10             	add    esp,0x10
c001eb0e:	83 c4 0c             	add    esp,0xc
c001eb11:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001eb12 <LinkedList<Device>::addElement(Device*)>:
c001eb12:	83 ec 0c             	sub    esp,0xc
c001eb15:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001eb1a:	75 10                	jne    c001eb2c <LinkedList<Device>::addElement(Device*)+0x1a>
c001eb1c:	83 ec 0c             	sub    esp,0xc
c001eb1f:	68 c8 fd 01 c0       	push   0xc001fdc8
c001eb24:	e8 ee 1d ff ff       	call   c0010917 <KePanic(char const*)>
c001eb29:	83 c4 10             	add    esp,0x10
c001eb2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb30:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb32:	85 c0                	test   eax,eax
c001eb34:	74 3a                	je     c001eb70 <LinkedList<Device>::addElement(Device*)+0x5e>
c001eb36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb3d:	85 c0                	test   eax,eax
c001eb3f:	74 2f                	je     c001eb70 <LinkedList<Device>::addElement(Device*)+0x5e>
c001eb41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb45:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb4c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001eb52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb56:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb5a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb61:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb64:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eb6e:	eb 68                	jmp    c001ebd8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eb70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb74:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb76:	85 c0                	test   eax,eax
c001eb78:	75 4e                	jne    c001ebc8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eb7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb81:	85 c0                	test   eax,eax
c001eb83:	75 43                	jne    c001ebc8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eb85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb89:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb8d:	89 10                	mov    DWORD PTR [eax],edx
c001eb8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb93:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb97:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eba1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ebab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebaf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebb2:	85 c0                	test   eax,eax
c001ebb4:	74 22                	je     c001ebd8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ebb6:	83 ec 0c             	sub    esp,0xc
c001ebb9:	68 ea fd 01 c0       	push   0xc001fdea
c001ebbe:	e8 54 1d ff ff       	call   c0010917 <KePanic(char const*)>
c001ebc3:	83 c4 10             	add    esp,0x10
c001ebc6:	eb 10                	jmp    c001ebd8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ebc8:	83 ec 0c             	sub    esp,0xc
c001ebcb:	68 f4 fd 01 c0       	push   0xc001fdf4
c001ebd0:	e8 42 1d ff ff       	call   c0010917 <KePanic(char const*)>
c001ebd5:	83 c4 10             	add    esp,0x10
c001ebd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebdc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebdf:	8d 50 01             	lea    edx,[eax+0x1]
c001ebe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebe6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ebe9:	90                   	nop
c001ebea:	83 c4 0c             	add    esp,0xc
c001ebed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001ebee <LinkedList<Device>::LinkedList()>:
c001ebee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebf2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ebf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebfc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec07:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ec0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec27:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ec2e:	90                   	nop
c001ec2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001ec30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001ec30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec34:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec36:	85 c0                	test   eax,eax
c001ec38:	75 0e                	jne    c001ec48 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ec3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec41:	85 c0                	test   eax,eax
c001ec43:	75 03                	jne    c001ec48 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ec45:	b0 01                	mov    al,0x1
c001ec47:	c3                   	ret    
c001ec48:	b0 00                	mov    al,0x0
c001ec4a:	90                   	nop
c001ec4b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001ec4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001ec4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec50:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec52:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001ec54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001ec54:	83 ec 0c             	sub    esp,0xc
c001ec57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec5b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec5d:	85 c0                	test   eax,eax
c001ec5f:	75 17                	jne    c001ec78 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001ec61:	83 ec 0c             	sub    esp,0xc
c001ec64:	68 00 fe 01 c0       	push   0xc001fe00
c001ec69:	e8 a9 1c ff ff       	call   c0010917 <KePanic(char const*)>
c001ec6e:	83 c4 10             	add    esp,0x10
c001ec71:	e9 96 00 00 00       	jmp    c001ed0c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001ec76:	66 90                	xchg   ax,ax
c001ec78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec7f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ec82:	85 c0                	test   eax,eax
c001ec84:	0f 95 c0             	setne  al
c001ec87:	0f b6 c0             	movzx  eax,al
c001ec8a:	85 c0                	test   eax,eax
c001ec8c:	74 12                	je     c001eca0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001ec8e:	83 ec 0c             	sub    esp,0xc
c001ec91:	68 4b fe 01 c0       	push   0xc001fe4b
c001ec96:	e8 7c 1c ff ff       	call   c0010917 <KePanic(char const*)>
c001ec9b:	83 c4 10             	add    esp,0x10
c001ec9e:	66 90                	xchg   ax,ax
c001eca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eca4:	8b 00                	mov    eax,DWORD PTR [eax]
c001eca6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001eca9:	85 c0                	test   eax,eax
c001ecab:	0f 94 c0             	sete   al
c001ecae:	0f b6 c0             	movzx  eax,al
c001ecb1:	85 c0                	test   eax,eax
c001ecb3:	74 33                	je     c001ece8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001ecb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecb9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ecbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecc3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ecca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecce:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ecd1:	83 f8 01             	cmp    eax,0x1
c001ecd4:	74 22                	je     c001ecf8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ecd6:	83 ec 0c             	sub    esp,0xc
c001ecd9:	68 24 fe 01 c0       	push   0xc001fe24
c001ecde:	e8 34 1c ff ff       	call   c0010917 <KePanic(char const*)>
c001ece3:	83 c4 10             	add    esp,0x10
c001ece6:	eb 10                	jmp    c001ecf8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ece8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecec:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecee:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ecf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecf5:	89 10                	mov    DWORD PTR [eax],edx
c001ecf7:	90                   	nop
c001ecf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecfc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ecff:	8d 50 ff             	lea    edx,[eax-0x1]
c001ed02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed06:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ed09:	8d 76 00             	lea    esi,[esi+0x0]
c001ed0c:	83 c4 0c             	add    esp,0xc
c001ed0f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ed10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ed10:	83 ec 0c             	sub    esp,0xc
c001ed13:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ed18:	75 12                	jne    c001ed2c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001ed1a:	83 ec 0c             	sub    esp,0xc
c001ed1d:	68 c8 fd 01 c0       	push   0xc001fdc8
c001ed22:	e8 f0 1b ff ff       	call   c0010917 <KePanic(char const*)>
c001ed27:	83 c4 10             	add    esp,0x10
c001ed2a:	66 90                	xchg   ax,ax
c001ed2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed30:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed32:	85 c0                	test   eax,eax
c001ed34:	74 36                	je     c001ed6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ed36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed3d:	85 c0                	test   eax,eax
c001ed3f:	74 2b                	je     c001ed6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ed41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed45:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed4c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ed4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed53:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed57:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ed5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed61:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ed68:	eb 6a                	jmp    c001edd4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ed6a:	66 90                	xchg   ax,ax
c001ed6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed70:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed72:	85 c0                	test   eax,eax
c001ed74:	75 4e                	jne    c001edc4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ed76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed7d:	85 c0                	test   eax,eax
c001ed7f:	75 43                	jne    c001edc4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ed81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed89:	89 10                	mov    DWORD PTR [eax],edx
c001ed8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed8f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed93:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ed96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed9d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001eda4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eda8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001edab:	85 c0                	test   eax,eax
c001edad:	74 25                	je     c001edd4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001edaf:	83 ec 0c             	sub    esp,0xc
c001edb2:	68 ea fd 01 c0       	push   0xc001fdea
c001edb7:	e8 5b 1b ff ff       	call   c0010917 <KePanic(char const*)>
c001edbc:	83 c4 10             	add    esp,0x10
c001edbf:	eb 13                	jmp    c001edd4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001edc1:	8d 76 00             	lea    esi,[esi+0x0]
c001edc4:	83 ec 0c             	sub    esp,0xc
c001edc7:	68 f4 fd 01 c0       	push   0xc001fdf4
c001edcc:	e8 46 1b ff ff       	call   c0010917 <KePanic(char const*)>
c001edd1:	83 c4 10             	add    esp,0x10
c001edd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edd8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eddb:	8d 50 01             	lea    edx,[eax+0x1]
c001edde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ede2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ede5:	90                   	nop
c001ede6:	83 c4 0c             	add    esp,0xc
c001ede9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001edec <ACPI::~ACPI()>:
c001edec:	83 ec 0c             	sub    esp,0xc
c001edef:	ba e0 0a 02 c0       	mov    edx,0xc0020ae0
c001edf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edf8:	89 10                	mov    DWORD PTR [eax],edx
c001edfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edfe:	83 ec 0c             	sub    esp,0xc
c001ee01:	50                   	push   eax
c001ee02:	e8 19 cf fe ff       	call   c000bd20 <Device::~Device()>
c001ee07:	83 c4 10             	add    esp,0x10
c001ee0a:	90                   	nop
c001ee0b:	83 c4 0c             	add    esp,0xc
c001ee0e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ee10 <ACPI::~ACPI()>:
c001ee10:	83 ec 0c             	sub    esp,0xc
c001ee13:	83 ec 0c             	sub    esp,0xc
c001ee16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee1a:	e8 cd ff ff ff       	call   c001edec <ACPI::~ACPI()>
c001ee1f:	83 c4 10             	add    esp,0x10
c001ee22:	83 ec 08             	sub    esp,0x8
c001ee25:	68 64 12 00 00       	push   0x1264
c001ee2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee2e:	e8 8a ba fe ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c001ee33:	83 c4 10             	add    esp,0x10
c001ee36:	83 c4 0c             	add    esp,0xc
c001ee39:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001ee3c <LinkedList<Device>::~LinkedList()>:
c001ee3c:	90                   	nop
c001ee3d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ee40 <LinkedList<Device>::isEmpty()>:
c001ee40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee44:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee46:	85 c0                	test   eax,eax
c001ee48:	75 0e                	jne    c001ee58 <LinkedList<Device>::isEmpty()+0x18>
c001ee4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee51:	85 c0                	test   eax,eax
c001ee53:	75 03                	jne    c001ee58 <LinkedList<Device>::isEmpty()+0x18>
c001ee55:	b0 01                	mov    al,0x1
c001ee57:	c3                   	ret    
c001ee58:	b0 00                	mov    al,0x0
c001ee5a:	90                   	nop
c001ee5b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ee5c <LinkedList<Device>::getFirstElement()>:
c001ee5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee60:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee62:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ee64 <LinkedList<Device>::removeFirst()>:
c001ee64:	83 ec 0c             	sub    esp,0xc
c001ee67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee6b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee6d:	85 c0                	test   eax,eax
c001ee6f:	75 17                	jne    c001ee88 <LinkedList<Device>::removeFirst()+0x24>
c001ee71:	83 ec 0c             	sub    esp,0xc
c001ee74:	68 00 fe 01 c0       	push   0xc001fe00
c001ee79:	e8 99 1a ff ff       	call   c0010917 <KePanic(char const*)>
c001ee7e:	83 c4 10             	add    esp,0x10
c001ee81:	e9 92 00 00 00       	jmp    c001ef18 <LinkedList<Device>::removeFirst()+0xb4>
c001ee86:	66 90                	xchg   ax,ax
c001ee88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee8f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ee95:	85 c0                	test   eax,eax
c001ee97:	74 13                	je     c001eeac <LinkedList<Device>::removeFirst()+0x48>
c001ee99:	83 ec 0c             	sub    esp,0xc
c001ee9c:	68 4b fe 01 c0       	push   0xc001fe4b
c001eea1:	e8 71 1a ff ff       	call   c0010917 <KePanic(char const*)>
c001eea6:	83 c4 10             	add    esp,0x10
c001eea9:	8d 76 00             	lea    esi,[esi+0x0]
c001eeac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeb0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eeb2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001eeb8:	85 c0                	test   eax,eax
c001eeba:	75 34                	jne    c001eef0 <LinkedList<Device>::removeFirst()+0x8c>
c001eebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eec0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eed1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eed8:	83 f8 01             	cmp    eax,0x1
c001eedb:	74 27                	je     c001ef04 <LinkedList<Device>::removeFirst()+0xa0>
c001eedd:	83 ec 0c             	sub    esp,0xc
c001eee0:	68 24 fe 01 c0       	push   0xc001fe24
c001eee5:	e8 2d 1a ff ff       	call   c0010917 <KePanic(char const*)>
c001eeea:	83 c4 10             	add    esp,0x10
c001eeed:	eb 15                	jmp    c001ef04 <LinkedList<Device>::removeFirst()+0xa0>
c001eeef:	90                   	nop
c001eef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eef4:	8b 00                	mov    eax,DWORD PTR [eax]
c001eef6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001eefc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef00:	89 10                	mov    DWORD PTR [eax],edx
c001ef02:	66 90                	xchg   ax,ax
c001ef04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef08:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef0b:	8d 50 ff             	lea    edx,[eax-0x1]
c001ef0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef12:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ef15:	8d 76 00             	lea    esi,[esi+0x0]
c001ef18:	83 c4 0c             	add    esp,0xc
c001ef1b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ef1c <CPU::~CPU()>:
c001ef1c:	83 ec 0c             	sub    esp,0xc
c001ef1f:	ba 7c 0c 02 c0       	mov    edx,0xc0020c7c
c001ef24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef28:	89 10                	mov    DWORD PTR [eax],edx
c001ef2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef2e:	83 ec 0c             	sub    esp,0xc
c001ef31:	50                   	push   eax
c001ef32:	e8 e9 cd fe ff       	call   c000bd20 <Device::~Device()>
c001ef37:	83 c4 10             	add    esp,0x10
c001ef3a:	90                   	nop
c001ef3b:	83 c4 0c             	add    esp,0xc
c001ef3e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ef40 <CPU::~CPU()>:
c001ef40:	83 ec 0c             	sub    esp,0xc
c001ef43:	83 ec 0c             	sub    esp,0xc
c001ef46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef4a:	e8 cd ff ff ff       	call   c001ef1c <CPU::~CPU()>
c001ef4f:	83 c4 10             	add    esp,0x10
c001ef52:	83 ec 08             	sub    esp,0x8
c001ef55:	68 94 11 00 00       	push   0x1194
c001ef5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef5e:	e8 5a b9 fe ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c001ef63:	83 c4 10             	add    esp,0x10
c001ef66:	83 c4 0c             	add    esp,0xc
c001ef69:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ef6c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ef6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ef70:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ef73:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ef74 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ef74:	90                   	nop
c001ef75:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ef78 <ThreadControlBlock::ThreadControlBlock()>:
c001ef78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef7c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ef83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef87:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ef8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef92:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ef99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef9d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001efa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efa8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001efaf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efb3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001efb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efbb:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001efbf:	90                   	nop
c001efc0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001efc4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001efc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efc8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001efce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efd2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001efd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efdd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001efe4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efe8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001efee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eff2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eff9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001effd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f004:	90                   	nop
c001f005:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001f006 <PCI::~PCI()>:
c001f006:	83 ec 0c             	sub    esp,0xc
c001f009:	ba e0 1a 02 c0       	mov    edx,0xc0021ae0
c001f00e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f012:	89 10                	mov    DWORD PTR [eax],edx
c001f014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f018:	83 ec 0c             	sub    esp,0xc
c001f01b:	50                   	push   eax
c001f01c:	e8 97 c7 fe ff       	call   c000b7b8 <Bus::~Bus()>
c001f021:	83 c4 10             	add    esp,0x10
c001f024:	90                   	nop
c001f025:	83 c4 0c             	add    esp,0xc
c001f028:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001f02a <PCI::~PCI()>:
c001f02a:	83 ec 0c             	sub    esp,0xc
c001f02d:	83 ec 0c             	sub    esp,0xc
c001f030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f034:	e8 cd ff ff ff       	call   c001f006 <PCI::~PCI()>
c001f039:	83 c4 10             	add    esp,0x10
c001f03c:	83 ec 08             	sub    esp,0x8
c001f03f:	68 5c 01 00 00       	push   0x15c
c001f044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f048:	e8 70 b8 fe ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c001f04d:	83 c4 10             	add    esp,0x10
c001f050:	83 c4 0c             	add    esp,0xc
c001f053:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001f054 <IDE::~IDE()>:
c001f054:	83 ec 0c             	sub    esp,0xc
c001f057:	ba 94 1b 02 c0       	mov    edx,0xc0021b94
c001f05c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f060:	89 10                	mov    DWORD PTR [eax],edx
c001f062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f066:	83 ec 0c             	sub    esp,0xc
c001f069:	50                   	push   eax
c001f06a:	e8 29 d1 fe ff       	call   c000c198 <HardDiskController::~HardDiskController()>
c001f06f:	83 c4 10             	add    esp,0x10
c001f072:	90                   	nop
c001f073:	83 c4 0c             	add    esp,0xc
c001f076:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f078 <IDE::~IDE()>:
c001f078:	83 ec 0c             	sub    esp,0xc
c001f07b:	83 ec 0c             	sub    esp,0xc
c001f07e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f082:	e8 cd ff ff ff       	call   c001f054 <IDE::~IDE()>
c001f087:	83 c4 10             	add    esp,0x10
c001f08a:	83 ec 08             	sub    esp,0x8
c001f08d:	68 70 02 00 00       	push   0x270
c001f092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f096:	e8 22 b8 fe ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c001f09b:	83 c4 10             	add    esp,0x10
c001f09e:	83 c4 0c             	add    esp,0xc
c001f0a1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001f0a2 <SATABus::~SATABus()>:
c001f0a2:	83 ec 0c             	sub    esp,0xc
c001f0a5:	ba e4 1b 02 c0       	mov    edx,0xc0021be4
c001f0aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ae:	89 10                	mov    DWORD PTR [eax],edx
c001f0b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0b4:	83 ec 0c             	sub    esp,0xc
c001f0b7:	50                   	push   eax
c001f0b8:	e8 db d0 fe ff       	call   c000c198 <HardDiskController::~HardDiskController()>
c001f0bd:	83 c4 10             	add    esp,0x10
c001f0c0:	90                   	nop
c001f0c1:	83 c4 0c             	add    esp,0xc
c001f0c4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001f0c6 <SATABus::~SATABus()>:
c001f0c6:	83 ec 0c             	sub    esp,0xc
c001f0c9:	83 ec 0c             	sub    esp,0xc
c001f0cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0d0:	e8 cd ff ff ff       	call   c001f0a2 <SATABus::~SATABus()>
c001f0d5:	83 c4 10             	add    esp,0x10
c001f0d8:	83 ec 08             	sub    esp,0x8
c001f0db:	68 64 01 00 00       	push   0x164
c001f0e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0e4:	e8 d4 b7 fe ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c001f0e9:	83 c4 10             	add    esp,0x10
c001f0ec:	83 c4 0c             	add    esp,0xc
c001f0ef:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f0f0 <ATA::~ATA()>:
c001f0f0:	83 ec 0c             	sub    esp,0xc
c001f0f3:	ba 24 1c 02 c0       	mov    edx,0xc0021c24
c001f0f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0fc:	89 10                	mov    DWORD PTR [eax],edx
c001f0fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f102:	83 ec 0c             	sub    esp,0xc
c001f105:	50                   	push   eax
c001f106:	e8 6f d1 fe ff       	call   c000c27a <PhysicalDisk::~PhysicalDisk()>
c001f10b:	83 c4 10             	add    esp,0x10
c001f10e:	90                   	nop
c001f10f:	83 c4 0c             	add    esp,0xc
c001f112:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f114 <ATA::~ATA()>:
c001f114:	83 ec 0c             	sub    esp,0xc
c001f117:	83 ec 0c             	sub    esp,0xc
c001f11a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f11e:	e8 cd ff ff ff       	call   c001f0f0 <ATA::~ATA()>
c001f123:	83 c4 10             	add    esp,0x10
c001f126:	83 ec 08             	sub    esp,0x8
c001f129:	68 7c 01 00 00       	push   0x17c
c001f12e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f132:	e8 86 b7 fe ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c001f137:	83 c4 10             	add    esp,0x10
c001f13a:	83 c4 0c             	add    esp,0xc
c001f13d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f13e <ATAPI::~ATAPI()>:
c001f13e:	83 ec 0c             	sub    esp,0xc
c001f141:	ba 6c 1c 02 c0       	mov    edx,0xc0021c6c
c001f146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f14a:	89 10                	mov    DWORD PTR [eax],edx
c001f14c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f150:	83 ec 0c             	sub    esp,0xc
c001f153:	50                   	push   eax
c001f154:	e8 21 d1 fe ff       	call   c000c27a <PhysicalDisk::~PhysicalDisk()>
c001f159:	83 c4 10             	add    esp,0x10
c001f15c:	90                   	nop
c001f15d:	83 c4 0c             	add    esp,0xc
c001f160:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f162 <ATAPI::~ATAPI()>:
c001f162:	83 ec 0c             	sub    esp,0xc
c001f165:	83 ec 0c             	sub    esp,0xc
c001f168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f16c:	e8 cd ff ff ff       	call   c001f13e <ATAPI::~ATAPI()>
c001f171:	83 c4 10             	add    esp,0x10
c001f174:	83 ec 08             	sub    esp,0x8
c001f177:	68 84 01 00 00       	push   0x184
c001f17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f180:	e8 38 b7 fe ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c001f185:	83 c4 10             	add    esp,0x10
c001f188:	83 c4 0c             	add    esp,0xc
c001f18b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001f18c <SATA::~SATA()>:
c001f18c:	83 ec 0c             	sub    esp,0xc
c001f18f:	ba 20 1d 02 c0       	mov    edx,0xc0021d20
c001f194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f198:	89 10                	mov    DWORD PTR [eax],edx
c001f19a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f19e:	83 ec 0c             	sub    esp,0xc
c001f1a1:	50                   	push   eax
c001f1a2:	e8 d3 d0 fe ff       	call   c000c27a <PhysicalDisk::~PhysicalDisk()>
c001f1a7:	83 c4 10             	add    esp,0x10
c001f1aa:	90                   	nop
c001f1ab:	83 c4 0c             	add    esp,0xc
c001f1ae:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001f1b0 <SATA::~SATA()>:
c001f1b0:	83 ec 0c             	sub    esp,0xc
c001f1b3:	83 ec 0c             	sub    esp,0xc
c001f1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1ba:	e8 cd ff ff ff       	call   c001f18c <SATA::~SATA()>
c001f1bf:	83 c4 10             	add    esp,0x10
c001f1c2:	83 ec 08             	sub    esp,0x8
c001f1c5:	68 7c 01 00 00       	push   0x17c
c001f1ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1ce:	e8 ea b6 fe ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c001f1d3:	83 c4 10             	add    esp,0x10
c001f1d6:	83 c4 0c             	add    esp,0xc
c001f1d9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001f1da <SATAPI::~SATAPI()>:
c001f1da:	83 ec 0c             	sub    esp,0xc
c001f1dd:	ba 44 1e 02 c0       	mov    edx,0xc0021e44
c001f1e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1e6:	89 10                	mov    DWORD PTR [eax],edx
c001f1e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1ec:	83 ec 0c             	sub    esp,0xc
c001f1ef:	50                   	push   eax
c001f1f0:	e8 85 d0 fe ff       	call   c000c27a <PhysicalDisk::~PhysicalDisk()>
c001f1f5:	83 c4 10             	add    esp,0x10
c001f1f8:	90                   	nop
c001f1f9:	83 c4 0c             	add    esp,0xc
c001f1fc:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001f1fe <SATAPI::~SATAPI()>:
c001f1fe:	83 ec 0c             	sub    esp,0xc
c001f201:	83 ec 0c             	sub    esp,0xc
c001f204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f208:	e8 cd ff ff ff       	call   c001f1da <SATAPI::~SATAPI()>
c001f20d:	83 c4 10             	add    esp,0x10
c001f210:	83 ec 08             	sub    esp,0x8
c001f213:	68 84 01 00 00       	push   0x184
c001f218:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f21c:	e8 9c b6 fe ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c001f221:	83 c4 10             	add    esp,0x10
c001f224:	83 c4 0c             	add    esp,0xc
c001f227:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f228 <IOAPIC::~IOAPIC()>:
c001f228:	83 ec 0c             	sub    esp,0xc
c001f22b:	ba 84 1e 02 c0       	mov    edx,0xc0021e84
c001f230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f234:	89 10                	mov    DWORD PTR [eax],edx
c001f236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f23a:	83 ec 0c             	sub    esp,0xc
c001f23d:	50                   	push   eax
c001f23e:	e8 dd ca fe ff       	call   c000bd20 <Device::~Device()>
c001f243:	83 c4 10             	add    esp,0x10
c001f246:	90                   	nop
c001f247:	83 c4 0c             	add    esp,0xc
c001f24a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f24c <IOAPIC::~IOAPIC()>:
c001f24c:	83 ec 0c             	sub    esp,0xc
c001f24f:	83 ec 0c             	sub    esp,0xc
c001f252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f256:	e8 cd ff ff ff       	call   c001f228 <IOAPIC::~IOAPIC()>
c001f25b:	83 c4 10             	add    esp,0x10
c001f25e:	83 ec 08             	sub    esp,0x8
c001f261:	68 68 01 00 00       	push   0x168
c001f266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f26a:	e8 4e b6 fe ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c001f26f:	83 c4 10             	add    esp,0x10
c001f272:	83 c4 0c             	add    esp,0xc
c001f275:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f278 <APICTimer::~APICTimer()>:
c001f278:	83 ec 0c             	sub    esp,0xc
c001f27b:	ba cc 1e 02 c0       	mov    edx,0xc0021ecc
c001f280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f284:	89 10                	mov    DWORD PTR [eax],edx
c001f286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f28a:	83 ec 0c             	sub    esp,0xc
c001f28d:	50                   	push   eax
c001f28e:	e8 59 e5 fe ff       	call   c000d7ec <Timer::~Timer()>
c001f293:	83 c4 10             	add    esp,0x10
c001f296:	90                   	nop
c001f297:	83 c4 0c             	add    esp,0xc
c001f29a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f29c <APICTimer::~APICTimer()>:
c001f29c:	83 ec 0c             	sub    esp,0xc
c001f29f:	83 ec 0c             	sub    esp,0xc
c001f2a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2a6:	e8 cd ff ff ff       	call   c001f278 <APICTimer::~APICTimer()>
c001f2ab:	83 c4 10             	add    esp,0x10
c001f2ae:	83 ec 08             	sub    esp,0x8
c001f2b1:	68 60 01 00 00       	push   0x160
c001f2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2ba:	e8 fe b5 fe ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c001f2bf:	83 c4 10             	add    esp,0x10
c001f2c2:	83 c4 0c             	add    esp,0xc
c001f2c5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f2c8 <PIT::~PIT()>:
c001f2c8:	83 ec 0c             	sub    esp,0xc
c001f2cb:	ba 1c 1f 02 c0       	mov    edx,0xc0021f1c
c001f2d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2d4:	89 10                	mov    DWORD PTR [eax],edx
c001f2d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2da:	83 ec 0c             	sub    esp,0xc
c001f2dd:	50                   	push   eax
c001f2de:	e8 09 e5 fe ff       	call   c000d7ec <Timer::~Timer()>
c001f2e3:	83 c4 10             	add    esp,0x10
c001f2e6:	90                   	nop
c001f2e7:	83 c4 0c             	add    esp,0xc
c001f2ea:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f2ec <PIT::~PIT()>:
c001f2ec:	83 ec 0c             	sub    esp,0xc
c001f2ef:	83 ec 0c             	sub    esp,0xc
c001f2f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2f6:	e8 cd ff ff ff       	call   c001f2c8 <PIT::~PIT()>
c001f2fb:	83 c4 10             	add    esp,0x10
c001f2fe:	83 ec 08             	sub    esp,0x8
c001f301:	68 5c 01 00 00       	push   0x15c
c001f306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f30a:	e8 ae b5 fe ff       	call   c000a8bd <operator delete(void*, unsigned long)>
c001f30f:	83 c4 10             	add    esp,0x10
c001f312:	83 c4 0c             	add    esp,0xc
c001f315:	c3                   	ret    

Disassembly of section userkernel:

c0023000 <KiDefaultSignalHandlerAbort(int)>:
c0023000:	57                   	push   edi
c0023001:	b9 07 00 00 00       	mov    ecx,0x7
c0023006:	56                   	push   esi
c0023007:	be 6d 0d 02 c0       	mov    esi,0xc0020d6d
c002300c:	83 ec 24             	sub    esp,0x24
c002300f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023013:	fc                   	cld    
c0023014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002301a:	50                   	push   eax
c002301b:	6a 00                	push   0x0
c002301d:	6a 38                	push   0x38
c002301f:	6a 01                	push   0x1
c0023021:	e8 2c 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0023026:	83 c4 34             	add    esp,0x34
c0023029:	5e                   	pop    esi
c002302a:	5f                   	pop    edi
c002302b:	c3                   	ret    

c002302c <KiDefaultSignalHandlerTerminate(int)>:
c002302c:	57                   	push   edi
c002302d:	b9 08 00 00 00       	mov    ecx,0x8
c0023032:	56                   	push   esi
c0023033:	be 89 0d 02 c0       	mov    esi,0xc0020d89
c0023038:	83 ec 24             	sub    esp,0x24
c002303b:	89 e7                	mov    edi,esp
c002303d:	fc                   	cld    
c002303e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023040:	54                   	push   esp
c0023041:	6a 00                	push   0x0
c0023043:	6a 37                	push   0x37
c0023045:	6a 01                	push   0x1
c0023047:	e8 06 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002304c:	83 c4 34             	add    esp,0x34
c002304f:	5e                   	pop    esi
c0023050:	5f                   	pop    edi
c0023051:	c3                   	ret    

c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0023052:	53                   	push   ebx
c0023053:	83 ec 10             	sub    esp,0x10
c0023056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002305a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002305e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023066:	cd 60                	int    0x60
c0023068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002306c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023078:	83 c4 10             	add    esp,0x10
c002307b:	5b                   	pop    ebx
c002307c:	c3                   	ret    

Disassembly of section align_previous:

c0024000 <DO_NOT_DELETE()>:
c0024000:	c3                   	ret    
