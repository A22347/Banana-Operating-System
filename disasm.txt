
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 17 f4 00 00       	call   c000f437 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 d3 4f 02 00       	call   c0024ff8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 90 5b 02 c0       	mov    ebx,0xc0025b90
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 9c 5b 02 c0    	cmp    ebx,0xc0025b9c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 ac 99 02 c0       	mov    eax,0xc00299ac
c0000049:	3d ac 99 02 c0       	cmp    eax,0xc00299ac
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 ac 99 02 c0       	push   0xc00299ac
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 ac 99 02 c0       	mov    eax,0xc00299ac
c0000075:	2d ac 99 02 c0       	sub    eax,0xc00299ac
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 ac 99 02 c0       	push   0xc00299ac
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d dc 9f 02 c0 00 	cmp    BYTE PTR ds:0xc0029fdc,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb a4 5b 02 c0       	mov    ebx,0xc0025ba4
c00000bb:	81 eb a0 5b 02 c0    	sub    ebx,0xc0025ba0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be a0 5b 02 c0       	mov    esi,0xc0025ba0
c00000ca:	a1 e0 9f 02 c0       	mov    eax,ds:0xc0029fe0
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 e0 9f 02 c0       	mov    ds:0xc0029fe0,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 e0 9f 02 c0       	mov    eax,ds:0xc0029fe0
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 ac 99 02 c0       	push   0xc00299ac
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 dc 9f 02 c0 01 	mov    BYTE PTR ds:0xc0029fdc,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 e4 9f 02 c0       	push   0xc0029fe4
c000012c:	68 ac 99 02 c0       	push   0xc00299ac
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 09                	jne    c0000195 <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c000018f:	81 c4 14 00 00 00    	add    esp,0x14

c0000195 <voodooXADD.usermode>:
c0000195:	89 35 30 02 00 c0    	mov    DWORD PTR ds:0xc0000230,esi
c000019b:	89 25 2c 02 00 c0    	mov    DWORD PTR ds:0xc000022c,esp
c00001a1:	60                   	pusha  
c00001a2:	b0 90                	mov    al,0x90
c00001a4:	b9 20 00 00 00       	mov    ecx,0x20
c00001a9:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001b0:	61                   	popa   
c00001b1:	60                   	pusha  
c00001b2:	89 d6                	mov    esi,edx
c00001b4:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001bb:	61                   	popa   
c00001bc:	60                   	pusha  
c00001bd:	89 d6                	mov    esi,edx
c00001bf:	bf 13 02 00 c0       	mov    edi,0xc0000213
c00001c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c6:	61                   	popa   
c00001c7:	b1 90                	mov    cl,0x90
c00001c9:	85 db                	test   ebx,ebx
c00001cb:	74 06                	je     c00001d3 <voodooXADD.skipChange>
c00001cd:	8a 8b 02 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdfe]

c00001d3 <voodooXADD.skipChange>:
c00001d3:	88 8b 03 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdfd],cl
c00001d9:	80 ab 04 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdfc],0x3a
c00001e0:	88 8b 13 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffded],cl
c00001e6:	80 ab 14 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdec],0xbe
c00001ed:	89 c4                	mov    esp,eax
c00001ef:	81 c4 10 00 00 00    	add    esp,0x10
c00001f5:	5f                   	pop    edi
c00001f6:	5e                   	pop    esi
c00001f7:	5d                   	pop    ebp
c00001f8:	5b                   	pop    ebx
c00001f9:	5b                   	pop    ebx
c00001fa:	5a                   	pop    edx
c00001fb:	59                   	pop    ecx
c00001fc:	58                   	pop    eax
c00001fd:	8b 25 30 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000230

c0000203 <voodooXADD.helper>:
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	90                   	nop
c000021e:	90                   	nop
c000021f:	90                   	nop
c0000220:	90                   	nop
c0000221:	90                   	nop
c0000222:	90                   	nop
c0000223:	8b 25 2c 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022c
c0000229:	61                   	popa   
c000022a:	c9                   	leave  
c000022b:	c3                   	ret    

c000022c <voodooXADD.oldStack>:
c000022c:	00 00                	add    BYTE PTR [eax],al
	...

c0000230 <voodooXADD.newStack>:
c0000230:	00 00                	add    BYTE PTR [eax],al
	...

c0000234 <doTPAUSE>:
c0000234:	fb                   	sti    
c0000235:	31 c0                	xor    eax,eax
c0000237:	31 d2                	xor    edx,edx
c0000239:	66 0f ae f0          	tpause eax
c000023d:	c3                   	ret    

c000023e <hasLegacyFPU>:
c000023e:	0f 20 c2             	mov    edx,cr0
c0000241:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000247:	0f 22 c2             	mov    cr0,edx
c000024a:	db e3                	fninit 
c000024c:	dd 3d 61 02 00 c0    	fnstsw WORD PTR ds:0xc0000261
c0000252:	31 c0                	xor    eax,eax
c0000254:	66 81 3d 61 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000261,0x0
c000025d:	75 01                	jne    c0000260 <hasLegacyFPU.nofpu>

c000025f <hasLegacyFPU.hasfpu>:
c000025f:	40                   	inc    eax

c0000260 <hasLegacyFPU.nofpu>:
c0000260:	c3                   	ret    

c0000261 <testword>:
c0000261:	aa                   	stos   BYTE PTR es:[edi],al
c0000262:	55                   	push   ebp

c0000263 <is486>:
c0000263:	0f 09                	wbinvd 
c0000265:	31 c0                	xor    eax,eax
c0000267:	40                   	inc    eax
c0000268:	c3                   	ret    
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	90                   	nop
c0000291:	90                   	nop
c0000292:	90                   	nop
c0000293:	90                   	nop
c0000294:	90                   	nop
c0000295:	90                   	nop
c0000296:	31 c0                	xor    eax,eax
c0000298:	c3                   	ret    

c0000299 <goToVM86>:
c0000299:	fa                   	cli    
c000029a:	55                   	push   ebp
c000029b:	89 e5                	mov    ebp,esp
c000029d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00002a0:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00002a3:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002a6:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002a9:	25 ff ff 00 00       	and    eax,0xffff
c00002ae:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002b4:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002ba:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002c0:	52                   	push   edx
c00002c1:	51                   	push   ecx
c00002c2:	68 02 02 02 00       	push   0x20202
c00002c7:	53                   	push   ebx
c00002c8:	50                   	push   eax
c00002c9:	cf                   	iret   

c00002ca <goToUsermode>:
c00002ca:	fa                   	cli    
c00002cb:	55                   	push   ebp
c00002cc:	89 e5                	mov    ebp,esp
c00002ce:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002d1:	66 b8 23 00          	mov    ax,0x23
c00002d5:	66 8e d8             	mov    ds,ax
c00002d8:	66 8e c0             	mov    es,ax
c00002db:	66 8e e0             	mov    fs,ax
c00002de:	66 8e e8             	mov    gs,ax
c00002e1:	89 e0                	mov    eax,esp
c00002e3:	68 23 00 00 00       	push   0x23
c00002e8:	50                   	push   eax
c00002e9:	68 02 02 00 00       	push   0x202
c00002ee:	68 1b 00 00 00       	push   0x1b
c00002f3:	53                   	push   ebx
c00002f4:	cf                   	iret   

c00002f5 <switchToThreadASMFirstTime>:
c00002f5:	9c                   	pushf  
c00002f6:	fa                   	cli    
c00002f7:	50                   	push   eax
c00002f8:	53                   	push   ebx
c00002f9:	51                   	push   ecx
c00002fa:	52                   	push   edx
c00002fb:	56                   	push   esi
c00002fc:	57                   	push   edi
c00002fd:	55                   	push   ebp
c00002fe:	e9 11 00 00 00       	jmp    c0000314 <commonThreadSwitch>

c0000303 <switchToThreadASM>:
c0000303:	9c                   	pushf  
c0000304:	50                   	push   eax
c0000305:	53                   	push   ebx
c0000306:	51                   	push   ecx
c0000307:	52                   	push   edx
c0000308:	56                   	push   esi
c0000309:	57                   	push   edi
c000030a:	55                   	push   ebp
c000030b:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000311:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000314 <commonThreadSwitch>:
c0000314:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000318:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000031e:	8b 06                	mov    eax,DWORD PTR [esi]
c0000320:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000323:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000326:	0f 20 d9             	mov    ecx,cr3
c0000329:	39 c8                	cmp    eax,ecx
c000032b:	74 03                	je     c0000330 <commonThreadSwitch.doneVAS>
c000032d:	0f 22 d8             	mov    cr3,eax

c0000330 <commonThreadSwitch.doneVAS>:
c0000330:	85 d2                	test   edx,edx
c0000332:	74 4e                	je     c0000382 <commonThreadSwitch.notFirstTime>
c0000334:	fa                   	cli    
c0000335:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000338:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c000033d:	60                   	pusha  
c000033e:	e8 e3 1c 01 00       	call   c0012026 <mapVASFirstTime>
c0000343:	61                   	popa   
c0000344:	89 c4                	mov    esp,eax
c0000346:	56                   	push   esi
c0000347:	52                   	push   edx
c0000348:	e8 15 b2 01 00       	call   c001b562 <changeTSS>
c000034d:	5a                   	pop    edx
c000034e:	5e                   	pop    esi
c000034f:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000356:	81 fa 01 00 00 00    	cmp    edx,0x1
c000035c:	74 39                	je     c0000397 <commonThreadSwitch.cameOffAFork>
c000035e:	5d                   	pop    ebp
c000035f:	5f                   	pop    edi
c0000360:	5e                   	pop    esi
c0000361:	59                   	pop    ecx
c0000362:	59                   	pop    ecx
c0000363:	5b                   	pop    ebx
c0000364:	58                   	pop    eax
c0000365:	81 c4 04 00 00 00    	add    esp,0x4
c000036b:	6a 02                	push   0x2
c000036d:	9d                   	popf   
c000036e:	52                   	push   edx
c000036f:	e8 01 b6 01 00       	call   c001b975 <taskStartupFunction>
c0000374:	5a                   	pop    edx
c0000375:	50                   	push   eax
c0000376:	ff d2                	call   edx
c0000378:	e8 a7 bb 01 00       	call   c001bf24 <taskReturned>
c000037d:	e9 fb ff ff ff       	jmp    c000037d <commonThreadSwitch.doneVAS+0x4d>

c0000382 <commonThreadSwitch.notFirstTime>:
c0000382:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000385:	56                   	push   esi
c0000386:	52                   	push   edx
c0000387:	e8 d6 b1 01 00       	call   c001b562 <changeTSS>
c000038c:	5a                   	pop    edx
c000038d:	5e                   	pop    esi
c000038e:	5d                   	pop    ebp
c000038f:	5f                   	pop    edi
c0000390:	5e                   	pop    esi
c0000391:	5a                   	pop    edx
c0000392:	59                   	pop    ecx
c0000393:	5b                   	pop    ebx
c0000394:	58                   	pop    eax
c0000395:	9d                   	popf   
c0000396:	c3                   	ret    

c0000397 <commonThreadSwitch.cameOffAFork>:
c0000397:	31 c0                	xor    eax,eax
c0000399:	31 d2                	xor    edx,edx
c000039b:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c000039e:	e9 84 02 00 00       	jmp    c0000627 <offAForkJumpThingy>

c00003a3 <detectCPUID>:
c00003a3:	9c                   	pushf  
c00003a4:	9c                   	pushf  
c00003a5:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00003ac:	9d                   	popf   
c00003ad:	9c                   	pushf  
c00003ae:	58                   	pop    eax
c00003af:	33 04 24             	xor    eax,DWORD PTR [esp]
c00003b2:	9d                   	popf   
c00003b3:	25 00 00 20 00       	and    eax,0x200000
c00003b8:	c3                   	ret    

c00003b9 <asmQuickAcquireLock>:
c00003b9:	55                   	push   ebp
c00003ba:	89 e5                	mov    ebp,esp
c00003bc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003bf <asmQuickAcquireLock.retry>:
c00003bf:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003c4:	72 02                	jb     c00003c8 <asmQuickAcquireLock.spin_with_pause>
c00003c6:	fa                   	cli    
c00003c7:	c3                   	ret    

c00003c8 <asmQuickAcquireLock.spin_with_pause>:
c00003c8:	f3 90                	pause  
c00003ca:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003d0:	75 f6                	jne    c00003c8 <asmQuickAcquireLock.spin_with_pause>
c00003d2:	e9 e8 ff ff ff       	jmp    c00003bf <asmQuickAcquireLock.retry>

c00003d7 <asmQuickReleaseLock>:
c00003d7:	55                   	push   ebp
c00003d8:	89 e5                	mov    ebp,esp
c00003da:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003e1:	5d                   	pop    ebp
c00003e2:	c3                   	ret    

c00003e3 <asmAcquireLock>:
c00003e3:	55                   	push   ebp
c00003e4:	89 e5                	mov    ebp,esp
c00003e6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003e9 <asmAcquireLock.retry>:
c00003e9:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003ee:	72 05                	jb     c00003f5 <asmAcquireLock.spin_with_pause>
c00003f0:	9c                   	pushf  
c00003f1:	58                   	pop    eax
c00003f2:	fa                   	cli    
c00003f3:	5d                   	pop    ebp
c00003f4:	c3                   	ret    

c00003f5 <asmAcquireLock.spin_with_pause>:
c00003f5:	f3 90                	pause  
c00003f7:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003fd:	75 f6                	jne    c00003f5 <asmAcquireLock.spin_with_pause>
c00003ff:	e9 e5 ff ff ff       	jmp    c00003e9 <asmAcquireLock.retry>

c0000404 <asmReleaseLock>:
c0000404:	55                   	push   ebp
c0000405:	89 e5                	mov    ebp,esp
c0000407:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000040a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000040d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000413:	52                   	push   edx
c0000414:	9d                   	popf   
c0000415:	5d                   	pop    ebp
c0000416:	c3                   	ret    

c0000417 <loadGDT>:
c0000417:	0f 01 15 10 a4 02 c0 	lgdtd  ds:0xc002a410
c000041e:	66 b8 10 00          	mov    ax,0x10
c0000422:	66 8e d8             	mov    ds,ax
c0000425:	66 8e c0             	mov    es,ax
c0000428:	66 8e e0             	mov    fs,ax
c000042b:	66 8e e8             	mov    gs,ax
c000042e:	66 8e d0             	mov    ss,ax
c0000431:	e9 00 00 00 00       	jmp    c0000436 <flush2>

c0000436 <flush2>:
c0000436:	c3                   	ret    

c0000437 <isr0>:
c0000437:	fa                   	cli    
c0000438:	68 00 00 00 00       	push   0x0
c000043d:	68 00 00 00 00       	push   0x0
c0000442:	e9 a2 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000447 <isr1>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 01                	push   0x1
c000044c:	e9 98 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000451 <isr2>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 02                	push   0x2
c0000456:	e9 8e 01 00 00       	jmp    c00005e9 <int_common_stub>

c000045b <isr3>:
c000045b:	fa                   	cli    
c000045c:	6a 00                	push   0x0
c000045e:	6a 03                	push   0x3
c0000460:	e9 84 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000465 <isr4>:
c0000465:	fa                   	cli    
c0000466:	6a 00                	push   0x0
c0000468:	6a 04                	push   0x4
c000046a:	e9 7a 01 00 00       	jmp    c00005e9 <int_common_stub>

c000046f <isr5>:
c000046f:	fa                   	cli    
c0000470:	6a 00                	push   0x0
c0000472:	6a 05                	push   0x5
c0000474:	e9 70 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000479 <isr6>:
c0000479:	fa                   	cli    
c000047a:	6a 00                	push   0x0
c000047c:	6a 06                	push   0x6
c000047e:	e9 66 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000483 <isr7>:
c0000483:	fa                   	cli    
c0000484:	6a 00                	push   0x0
c0000486:	6a 07                	push   0x7
c0000488:	e9 5c 01 00 00       	jmp    c00005e9 <int_common_stub>

c000048d <isr8>:
c000048d:	fa                   	cli    
c000048e:	6a 08                	push   0x8
c0000490:	e9 54 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000495 <isr9>:
c0000495:	fa                   	cli    
c0000496:	6a 00                	push   0x0
c0000498:	6a 09                	push   0x9
c000049a:	e9 4a 01 00 00       	jmp    c00005e9 <int_common_stub>

c000049f <isr10>:
c000049f:	fa                   	cli    
c00004a0:	6a 0a                	push   0xa
c00004a2:	e9 42 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004a7 <isr11>:
c00004a7:	fa                   	cli    
c00004a8:	6a 0b                	push   0xb
c00004aa:	e9 3a 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004af <isr12>:
c00004af:	fa                   	cli    
c00004b0:	6a 0c                	push   0xc
c00004b2:	e9 32 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004b7 <isr13>:
c00004b7:	fa                   	cli    
c00004b8:	6a 0d                	push   0xd
c00004ba:	e9 2a 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004bf <isr14>:
c00004bf:	fa                   	cli    
c00004c0:	6a 0e                	push   0xe
c00004c2:	e9 22 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004c7 <isr15>:
c00004c7:	fa                   	cli    
c00004c8:	6a 00                	push   0x0
c00004ca:	6a 0f                	push   0xf
c00004cc:	e9 18 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004d1 <isr16>:
c00004d1:	fa                   	cli    
c00004d2:	6a 00                	push   0x0
c00004d4:	6a 10                	push   0x10
c00004d6:	e9 0e 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004db <isr17>:
c00004db:	fa                   	cli    
c00004dc:	6a 00                	push   0x0
c00004de:	6a 11                	push   0x11
c00004e0:	e9 04 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004e5 <isr18>:
c00004e5:	fa                   	cli    
c00004e6:	6a 00                	push   0x0
c00004e8:	6a 12                	push   0x12
c00004ea:	e9 fa 00 00 00       	jmp    c00005e9 <int_common_stub>

c00004ef <isr96>:
c00004ef:	fa                   	cli    
c00004f0:	6a 00                	push   0x0
c00004f2:	6a 60                	push   0x60
c00004f4:	e9 11 01 00 00       	jmp    c000060a <syscall_common_stub>

c00004f9 <irq0>:
c00004f9:	fa                   	cli    
c00004fa:	6a 00                	push   0x0
c00004fc:	6a 20                	push   0x20
c00004fe:	e9 e6 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000503 <irq1>:
c0000503:	fa                   	cli    
c0000504:	6a 00                	push   0x0
c0000506:	6a 21                	push   0x21
c0000508:	e9 dc 00 00 00       	jmp    c00005e9 <int_common_stub>

c000050d <irq2>:
c000050d:	fa                   	cli    
c000050e:	6a 00                	push   0x0
c0000510:	6a 22                	push   0x22
c0000512:	e9 d2 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000517 <irq3>:
c0000517:	fa                   	cli    
c0000518:	6a 00                	push   0x0
c000051a:	6a 23                	push   0x23
c000051c:	e9 c8 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000521 <irq4>:
c0000521:	fa                   	cli    
c0000522:	6a 00                	push   0x0
c0000524:	6a 24                	push   0x24
c0000526:	e9 be 00 00 00       	jmp    c00005e9 <int_common_stub>

c000052b <irq5>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 25                	push   0x25
c0000530:	e9 b4 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000535 <irq6>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 26                	push   0x26
c000053a:	e9 aa 00 00 00       	jmp    c00005e9 <int_common_stub>

c000053f <irq7>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 27                	push   0x27
c0000544:	e9 a0 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000549 <irq8>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 28                	push   0x28
c000054e:	e9 96 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000553 <irq9>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 29                	push   0x29
c0000558:	e9 8c 00 00 00       	jmp    c00005e9 <int_common_stub>

c000055d <irq10>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 2a                	push   0x2a
c0000562:	e9 82 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000567 <irq11>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 2b                	push   0x2b
c000056c:	e9 78 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000571 <irq12>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 2c                	push   0x2c
c0000576:	e9 6e 00 00 00       	jmp    c00005e9 <int_common_stub>

c000057b <irq13>:
c000057b:	fa                   	cli    
c000057c:	6a 00                	push   0x0
c000057e:	6a 2d                	push   0x2d
c0000580:	e9 64 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000585 <irq14>:
c0000585:	fa                   	cli    
c0000586:	6a 00                	push   0x0
c0000588:	6a 2e                	push   0x2e
c000058a:	e9 5a 00 00 00       	jmp    c00005e9 <int_common_stub>

c000058f <irq15>:
c000058f:	fa                   	cli    
c0000590:	6a 00                	push   0x0
c0000592:	6a 2f                	push   0x2f
c0000594:	e9 50 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000599 <irq16>:
c0000599:	fa                   	cli    
c000059a:	6a 00                	push   0x0
c000059c:	6a 30                	push   0x30
c000059e:	e9 46 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005a3 <irq17>:
c00005a3:	fa                   	cli    
c00005a4:	6a 00                	push   0x0
c00005a6:	6a 31                	push   0x31
c00005a8:	e9 3c 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005ad <irq18>:
c00005ad:	fa                   	cli    
c00005ae:	6a 00                	push   0x0
c00005b0:	6a 32                	push   0x32
c00005b2:	e9 32 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005b7 <irq19>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 33                	push   0x33
c00005bc:	e9 28 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005c1 <irq20>:
c00005c1:	fa                   	cli    
c00005c2:	6a 00                	push   0x0
c00005c4:	6a 34                	push   0x34
c00005c6:	e9 1e 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005cb <irq21>:
c00005cb:	fa                   	cli    
c00005cc:	6a 00                	push   0x0
c00005ce:	6a 35                	push   0x35
c00005d0:	e9 14 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005d5 <irq22>:
c00005d5:	fa                   	cli    
c00005d6:	6a 00                	push   0x0
c00005d8:	6a 36                	push   0x36
c00005da:	e9 0a 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005df <irq23>:
c00005df:	fa                   	cli    
c00005e0:	6a 00                	push   0x0
c00005e2:	6a 37                	push   0x37
c00005e4:	e9 00 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005e9 <int_common_stub>:
c00005e9:	60                   	pusha  
c00005ea:	1e                   	push   ds
c00005eb:	06                   	push   es
c00005ec:	0f a0                	push   fs
c00005ee:	0f a8                	push   gs
c00005f0:	54                   	push   esp
c00005f1:	e8 13 39 01 00       	call   c0013f09 <int_handler>
c00005f6:	81 c4 04 00 00 00    	add    esp,0x4
c00005fc:	0f a9                	pop    gs
c00005fe:	0f a1                	pop    fs
c0000600:	07                   	pop    es
c0000601:	1f                   	pop    ds
c0000602:	61                   	popa   
c0000603:	81 c4 08 00 00 00    	add    esp,0x8
c0000609:	cf                   	iret   

c000060a <syscall_common_stub>:
c000060a:	60                   	pusha  
c000060b:	1e                   	push   ds
c000060c:	06                   	push   es
c000060d:	0f a0                	push   fs
c000060f:	0f a8                	push   gs
c0000611:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000617:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c000061a:	54                   	push   esp
c000061b:	fb                   	sti    
c000061c:	e8 e8 38 01 00       	call   c0013f09 <int_handler>
c0000621:	81 c4 04 00 00 00    	add    esp,0x4

c0000627 <offAForkJumpThingy>:
c0000627:	0f a9                	pop    gs
c0000629:	0f a1                	pop    fs
c000062b:	07                   	pop    es
c000062c:	1f                   	pop    ds
c000062d:	61                   	popa   
c000062e:	81 c4 08 00 00 00    	add    esp,0x8
c0000634:	cf                   	iret   

c0000635 <memcmp>:
c0000635:	56                   	push   esi
c0000636:	53                   	push   ebx
c0000637:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000643:	01 d6                	add    esi,edx
c0000645:	39 f2                	cmp    edx,esi
c0000647:	74 0e                	je     c0000657 <memcmp+0x22>
c0000649:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c000064c:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000064f:	38 c8                	cmp    al,cl
c0000651:	75 08                	jne    c000065b <memcmp+0x26>
c0000653:	42                   	inc    edx
c0000654:	43                   	inc    ebx
c0000655:	eb ee                	jmp    c0000645 <memcmp+0x10>
c0000657:	31 c0                	xor    eax,eax
c0000659:	eb 02                	jmp    c000065d <memcmp+0x28>
c000065b:	29 c8                	sub    eax,ecx
c000065d:	5b                   	pop    ebx
c000065e:	5e                   	pop    esi
c000065f:	c3                   	ret    

c0000660 <memmove>:
c0000660:	56                   	push   esi
c0000661:	53                   	push   ebx
c0000662:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000666:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000066a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000066e:	39 c8                	cmp    eax,ecx
c0000670:	73 12                	jae    c0000684 <memmove+0x24>
c0000672:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000675:	89 c3                	mov    ebx,eax
c0000677:	39 f1                	cmp    ecx,esi
c0000679:	74 1a                	je     c0000695 <memmove+0x35>
c000067b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067d:	43                   	inc    ebx
c000067e:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000681:	41                   	inc    ecx
c0000682:	eb f3                	jmp    c0000677 <memmove+0x17>
c0000684:	76 0f                	jbe    c0000695 <memmove+0x35>
c0000686:	85 d2                	test   edx,edx
c0000688:	74 0b                	je     c0000695 <memmove+0x35>
c000068a:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000068e:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c0000692:	4a                   	dec    edx
c0000693:	eb f1                	jmp    c0000686 <memmove+0x26>
c0000695:	5b                   	pop    ebx
c0000696:	5e                   	pop    esi
c0000697:	c3                   	ret    

c0000698 <memcpy>:
c0000698:	57                   	push   edi
c0000699:	56                   	push   esi
c000069a:	53                   	push   ebx
c000069b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000069f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00006a3:	89 da                	mov    edx,ebx
c00006a5:	89 d9                	mov    ecx,ebx
c00006a7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00006ab:	83 e2 fc             	and    edx,0xfffffffc
c00006ae:	c1 e9 02             	shr    ecx,0x2
c00006b1:	89 c7                	mov    edi,eax
c00006b3:	fc                   	cld    
c00006b4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00006b6:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00006b9:	01 c2                	add    edx,eax
c00006bb:	01 de                	add    esi,ebx
c00006bd:	39 f1                	cmp    ecx,esi
c00006bf:	74 09                	je     c00006ca <memcpy+0x32>
c00006c1:	8a 19                	mov    bl,BYTE PTR [ecx]
c00006c3:	42                   	inc    edx
c00006c4:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006c7:	41                   	inc    ecx
c00006c8:	eb f3                	jmp    c00006bd <memcpy+0x25>
c00006ca:	5b                   	pop    ebx
c00006cb:	5e                   	pop    esi
c00006cc:	5f                   	pop    edi
c00006cd:	c3                   	ret    

c00006ce <memset>:
c00006ce:	53                   	push   ebx
c00006cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006d7:	89 c2                	mov    edx,eax
c00006d9:	01 c1                	add    ecx,eax
c00006db:	39 ca                	cmp    edx,ecx
c00006dd:	74 0a                	je     c00006e9 <memset+0x1b>
c00006df:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006e3:	42                   	inc    edx
c00006e4:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006e7:	eb f2                	jmp    c00006db <memset+0xd>
c00006e9:	5b                   	pop    ebx
c00006ea:	c3                   	ret    

c00006eb <strlen>:
c00006eb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006ef:	31 c0                	xor    eax,eax
c00006f1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006f5:	74 03                	je     c00006fa <strlen+0xf>
c00006f7:	40                   	inc    eax
c00006f8:	eb f7                	jmp    c00006f1 <strlen+0x6>
c00006fa:	c3                   	ret    

c00006fb <strpbrk>:
c00006fb:	53                   	push   ebx
c00006fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000700:	8a 08                	mov    cl,BYTE PTR [eax]
c0000702:	84 c9                	test   cl,cl
c0000704:	74 14                	je     c000071a <strpbrk+0x1f>
c0000706:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000070a:	8a 1a                	mov    bl,BYTE PTR [edx]
c000070c:	84 db                	test   bl,bl
c000070e:	74 07                	je     c0000717 <strpbrk+0x1c>
c0000710:	38 cb                	cmp    bl,cl
c0000712:	74 08                	je     c000071c <strpbrk+0x21>
c0000714:	42                   	inc    edx
c0000715:	eb f3                	jmp    c000070a <strpbrk+0xf>
c0000717:	40                   	inc    eax
c0000718:	eb e6                	jmp    c0000700 <strpbrk+0x5>
c000071a:	31 c0                	xor    eax,eax
c000071c:	5b                   	pop    ebx
c000071d:	c3                   	ret    

c000071e <strtok>:
c000071e:	56                   	push   esi
c000071f:	53                   	push   ebx
c0000720:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000724:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000728:	85 db                	test   ebx,ebx
c000072a:	75 0e                	jne    c000073a <strtok+0x1c>
c000072c:	8b 1d fc 9f 02 c0    	mov    ebx,DWORD PTR ds:0xc0029ffc
c0000732:	85 db                	test   ebx,ebx
c0000734:	75 04                	jne    c000073a <strtok+0x1c>
c0000736:	31 db                	xor    ebx,ebx
c0000738:	eb 2e                	jmp    c0000768 <strtok+0x4a>
c000073a:	56                   	push   esi
c000073b:	53                   	push   ebx
c000073c:	e8 ba ff ff ff       	call   c00006fb <strpbrk>
c0000741:	5a                   	pop    edx
c0000742:	a3 fc 9f 02 c0       	mov    ds:0xc0029ffc,eax
c0000747:	59                   	pop    ecx
c0000748:	a1 fc 9f 02 c0       	mov    eax,ds:0xc0029ffc
c000074d:	39 d8                	cmp    eax,ebx
c000074f:	75 07                	jne    c0000758 <strtok+0x3a>
c0000751:	43                   	inc    ebx
c0000752:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000756:	eb e2                	jmp    c000073a <strtok+0x1c>
c0000758:	85 c0                	test   eax,eax
c000075a:	74 da                	je     c0000736 <strtok+0x18>
c000075c:	8d 50 01             	lea    edx,[eax+0x1]
c000075f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000762:	89 15 fc 9f 02 c0    	mov    DWORD PTR ds:0xc0029ffc,edx
c0000768:	89 d8                	mov    eax,ebx
c000076a:	5b                   	pop    ebx
c000076b:	5e                   	pop    esi
c000076c:	c3                   	ret    

c000076d <strcpy>:
c000076d:	53                   	push   ebx
c000076e:	31 d2                	xor    edx,edx
c0000770:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000774:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000778:	8d 1c 10             	lea    ebx,[eax+edx*1]
c000077b:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 06                	je     c0000788 <strcpy+0x1b>
c0000782:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000785:	42                   	inc    edx
c0000786:	eb ec                	jmp    c0000774 <strcpy+0x7>
c0000788:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000078b:	5b                   	pop    ebx
c000078c:	c3                   	ret    

c000078d <strncpy>:
c000078d:	56                   	push   esi
c000078e:	53                   	push   ebx
c000078f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000793:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000797:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000079b:	89 c3                	mov    ebx,eax
c000079d:	85 c9                	test   ecx,ecx
c000079f:	74 1a                	je     c00007bb <strncpy+0x2e>
c00007a1:	46                   	inc    esi
c00007a2:	43                   	inc    ebx
c00007a3:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00007a6:	49                   	dec    ecx
c00007a7:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00007aa:	84 d2                	test   dl,dl
c00007ac:	75 ef                	jne    c000079d <strncpy+0x10>
c00007ae:	31 d2                	xor    edx,edx
c00007b0:	39 d1                	cmp    ecx,edx
c00007b2:	74 07                	je     c00007bb <strncpy+0x2e>
c00007b4:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007b8:	42                   	inc    edx
c00007b9:	eb f5                	jmp    c00007b0 <strncpy+0x23>
c00007bb:	5b                   	pop    ebx
c00007bc:	5e                   	pop    esi
c00007bd:	c3                   	ret    

c00007be <strcmp>:
c00007be:	31 c9                	xor    ecx,ecx
c00007c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007c8:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007cc:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007d0:	38 d0                	cmp    al,dl
c00007d2:	75 08                	jne    c00007dc <strcmp+0x1e>
c00007d4:	41                   	inc    ecx
c00007d5:	84 c0                	test   al,al
c00007d7:	75 e7                	jne    c00007c0 <strcmp+0x2>
c00007d9:	31 c0                	xor    eax,eax
c00007db:	c3                   	ret    
c00007dc:	29 d0                	sub    eax,edx
c00007de:	c3                   	ret    

c00007df <strchr>:
c00007df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007e3:	8a 10                	mov    dl,BYTE PTR [eax]
c00007e5:	84 d2                	test   dl,dl
c00007e7:	74 09                	je     c00007f2 <strchr+0x13>
c00007e9:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007ed:	74 05                	je     c00007f4 <strchr+0x15>
c00007ef:	40                   	inc    eax
c00007f0:	eb f1                	jmp    c00007e3 <strchr+0x4>
c00007f2:	31 c0                	xor    eax,eax
c00007f4:	c3                   	ret    

c00007f5 <strncmp>:
c00007f5:	56                   	push   esi
c00007f6:	53                   	push   ebx
c00007f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007fb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000803:	01 d6                	add    esi,edx
c0000805:	39 f2                	cmp    edx,esi
c0000807:	74 12                	je     c000081b <strncmp+0x26>
c0000809:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c000080c:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000080f:	38 c8                	cmp    al,cl
c0000811:	75 0c                	jne    c000081f <strncmp+0x2a>
c0000813:	42                   	inc    edx
c0000814:	84 c0                	test   al,al
c0000816:	74 03                	je     c000081b <strncmp+0x26>
c0000818:	43                   	inc    ebx
c0000819:	eb ea                	jmp    c0000805 <strncmp+0x10>
c000081b:	31 c0                	xor    eax,eax
c000081d:	eb 02                	jmp    c0000821 <strncmp+0x2c>
c000081f:	29 c8                	sub    eax,ecx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    

c0000824 <strcat>:
c0000824:	53                   	push   ebx
c0000825:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000829:	89 c1                	mov    ecx,eax
c000082b:	8d 51 01             	lea    edx,[ecx+0x1]
c000082e:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000832:	74 04                	je     c0000838 <strcat+0x14>
c0000834:	89 d1                	mov    ecx,edx
c0000836:	eb f3                	jmp    c000082b <strcat+0x7>
c0000838:	31 d2                	xor    edx,edx
c000083a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000083e:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c0000841:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000844:	42                   	inc    edx
c0000845:	84 db                	test   bl,bl
c0000847:	75 f1                	jne    c000083a <strcat+0x16>
c0000849:	5b                   	pop    ebx
c000084a:	c3                   	ret    

c000084b <strncat>:
c000084b:	56                   	push   esi
c000084c:	53                   	push   ebx
c000084d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000851:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000855:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000859:	89 c2                	mov    edx,eax
c000085b:	85 db                	test   ebx,ebx
c000085d:	74 23                	je     c0000882 <strncat+0x37>
c000085f:	8d 72 01             	lea    esi,[edx+0x1]
c0000862:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000866:	74 04                	je     c000086c <strncat+0x21>
c0000868:	89 f2                	mov    edx,esi
c000086a:	eb f3                	jmp    c000085f <strncat+0x14>
c000086c:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000086f:	41                   	inc    ecx
c0000870:	42                   	inc    edx
c0000871:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000874:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 07                	je     c0000882 <strncat+0x37>
c000087b:	39 f1                	cmp    ecx,esi
c000087d:	75 f0                	jne    c000086f <strncat+0x24>
c000087f:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000882:	5b                   	pop    ebx
c0000883:	5e                   	pop    esi
c0000884:	c3                   	ret    

c0000885 <strstr>:
c0000885:	57                   	push   edi
c0000886:	56                   	push   esi
c0000887:	53                   	push   ebx
c0000888:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000088c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000890:	57                   	push   edi
c0000891:	e8 55 fe ff ff       	call   c00006eb <strlen>
c0000896:	59                   	pop    ecx
c0000897:	89 c6                	mov    esi,eax
c0000899:	85 c0                	test   eax,eax
c000089b:	74 1f                	je     c00008bc <strstr+0x37>
c000089d:	53                   	push   ebx
c000089e:	e8 48 fe ff ff       	call   c00006eb <strlen>
c00008a3:	5a                   	pop    edx
c00008a4:	39 f0                	cmp    eax,esi
c00008a6:	72 12                	jb     c00008ba <strstr+0x35>
c00008a8:	56                   	push   esi
c00008a9:	57                   	push   edi
c00008aa:	53                   	push   ebx
c00008ab:	e8 85 fd ff ff       	call   c0000635 <memcmp>
c00008b0:	83 c4 0c             	add    esp,0xc
c00008b3:	85 c0                	test   eax,eax
c00008b5:	74 05                	je     c00008bc <strstr+0x37>
c00008b7:	43                   	inc    ebx
c00008b8:	eb e3                	jmp    c000089d <strstr+0x18>
c00008ba:	31 db                	xor    ebx,ebx
c00008bc:	89 d8                	mov    eax,ebx
c00008be:	5b                   	pop    ebx
c00008bf:	5e                   	pop    esi
c00008c0:	5f                   	pop    edi
c00008c1:	c3                   	ret    

c00008c2 <toupper>:
c00008c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008c6:	0f b6 d0             	movzx  edx,al
c00008c9:	f6 82 c0 5b 02 c0 02 	test   BYTE PTR [edx-0x3ffda440],0x2
c00008d0:	74 03                	je     c00008d5 <toupper+0x13>
c00008d2:	83 e8 20             	sub    eax,0x20
c00008d5:	c3                   	ret    

c00008d6 <tolower>:
c00008d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008da:	0f b6 d0             	movzx  edx,al
c00008dd:	f6 82 c0 5b 02 c0 01 	test   BYTE PTR [edx-0x3ffda440],0x1
c00008e4:	74 03                	je     c00008e9 <tolower+0x13>
c00008e6:	83 c0 20             	add    eax,0x20
c00008e9:	c3                   	ret    

c00008ea <simple_strtoul>:
c00008ea:	55                   	push   ebp
c00008eb:	57                   	push   edi
c00008ec:	56                   	push   esi
c00008ed:	53                   	push   ebx
c00008ee:	83 ec 08             	sub    esp,0x8
c00008f1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008f5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008f9:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008fc:	f6 82 c0 5b 02 c0 08 	test   BYTE PTR [edx-0x3ffda440],0x8
c0000903:	74 03                	je     c0000908 <simple_strtoul+0x1e>
c0000905:	41                   	inc    ecx
c0000906:	eb f1                	jmp    c00008f9 <simple_strtoul+0xf>
c0000908:	80 fa 09             	cmp    dl,0x9
c000090b:	74 f8                	je     c0000905 <simple_strtoul+0x1b>
c000090d:	80 fa 2d             	cmp    dl,0x2d
c0000910:	75 0b                	jne    c000091d <simple_strtoul+0x33>
c0000912:	41                   	inc    ecx
c0000913:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000091b:	eb 0e                	jmp    c000092b <simple_strtoul+0x41>
c000091d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000925:	80 fa 2b             	cmp    dl,0x2b
c0000928:	75 01                	jne    c000092b <simple_strtoul+0x41>
c000092a:	41                   	inc    ecx
c000092b:	85 f6                	test   esi,esi
c000092d:	75 22                	jne    c0000951 <simple_strtoul+0x67>
c000092f:	be 0a 00 00 00       	mov    esi,0xa
c0000934:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000937:	75 5a                	jne    c0000993 <simple_strtoul+0xa9>
c0000939:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000093d:	50                   	push   eax
c000093e:	e8 93 ff ff ff       	call   c00008d6 <tolower>
c0000943:	5a                   	pop    edx
c0000944:	83 f8 78             	cmp    eax,0x78
c0000947:	74 03                	je     c000094c <simple_strtoul+0x62>
c0000949:	41                   	inc    ecx
c000094a:	eb 16                	jmp    c0000962 <simple_strtoul+0x78>
c000094c:	83 c1 02             	add    ecx,0x2
c000094f:	eb 22                	jmp    c0000973 <simple_strtoul+0x89>
c0000951:	8d 46 fe             	lea    eax,[esi-0x2]
c0000954:	83 f8 22             	cmp    eax,0x22
c0000957:	0f 87 b7 00 00 00    	ja     c0000a14 <simple_strtoul+0x12a>
c000095d:	83 fe 08             	cmp    esi,0x8
c0000960:	75 0c                	jne    c000096e <simple_strtoul+0x84>
c0000962:	be 08 00 00 00       	mov    esi,0x8
c0000967:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000096a:	75 27                	jne    c0000993 <simple_strtoul+0xa9>
c000096c:	eb 1f                	jmp    c000098d <simple_strtoul+0xa3>
c000096e:	83 fe 10             	cmp    esi,0x10
c0000971:	75 20                	jne    c0000993 <simple_strtoul+0xa9>
c0000973:	be 10 00 00 00       	mov    esi,0x10
c0000978:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000097b:	75 16                	jne    c0000993 <simple_strtoul+0xa9>
c000097d:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000981:	50                   	push   eax
c0000982:	e8 4f ff ff ff       	call   c00008d6 <tolower>
c0000987:	5d                   	pop    ebp
c0000988:	83 f8 78             	cmp    eax,0x78
c000098b:	74 03                	je     c0000990 <simple_strtoul+0xa6>
c000098d:	41                   	inc    ecx
c000098e:	eb 03                	jmp    c0000993 <simple_strtoul+0xa9>
c0000990:	83 c1 02             	add    ecx,0x2
c0000993:	31 ed                	xor    ebp,ebp
c0000995:	31 db                	xor    ebx,ebx
c0000997:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000099e:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009a0:	84 d2                	test   dl,dl
c00009a2:	74 27                	je     c00009cb <simple_strtoul+0xe1>
c00009a4:	0f b6 fa             	movzx  edi,dl
c00009a7:	f6 87 c0 5b 02 c0 04 	test   BYTE PTR [edi-0x3ffda440],0x4
c00009ae:	74 05                	je     c00009b5 <simple_strtoul+0xcb>
c00009b0:	83 ef 30             	sub    edi,0x30
c00009b3:	eb 22                	jmp    c00009d7 <simple_strtoul+0xed>
c00009b5:	0f be d2             	movsx  edx,dl
c00009b8:	52                   	push   edx
c00009b9:	e8 04 ff ff ff       	call   c00008c2 <toupper>
c00009be:	5f                   	pop    edi
c00009bf:	0f b6 d0             	movzx  edx,al
c00009c2:	f6 82 c0 5b 02 c0 01 	test   BYTE PTR [edx-0x3ffda440],0x1
c00009c9:	75 09                	jne    c00009d4 <simple_strtoul+0xea>
c00009cb:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009d0:	75 2d                	jne    c00009ff <simple_strtoul+0x115>
c00009d2:	eb 57                	jmp    c0000a2b <simple_strtoul+0x141>
c00009d4:	8d 78 c9             	lea    edi,[eax-0x37]
c00009d7:	39 f7                	cmp    edi,esi
c00009d9:	73 f0                	jae    c00009cb <simple_strtoul+0xe1>
c00009db:	31 d2                	xor    edx,edx
c00009dd:	89 f8                	mov    eax,edi
c00009df:	f7 d0                	not    eax
c00009e1:	f7 f6                	div    esi
c00009e3:	39 d8                	cmp    eax,ebx
c00009e5:	72 0e                	jb     c00009f5 <simple_strtoul+0x10b>
c00009e7:	0f af de             	imul   ebx,esi
c00009ea:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009f1:	01 fb                	add    ebx,edi
c00009f3:	eb 07                	jmp    c00009fc <simple_strtoul+0x112>
c00009f5:	bd 01 00 00 00       	mov    ebp,0x1
c00009fa:	31 db                	xor    ebx,ebx
c00009fc:	41                   	inc    ecx
c00009fd:	eb 9f                	jmp    c000099e <simple_strtoul+0xb4>
c00009ff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a02:	09 d8                	or     eax,ebx
c0000a04:	75 1f                	jne    c0000a25 <simple_strtoul+0x13b>
c0000a06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a0a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a0e:	31 db                	xor    ebx,ebx
c0000a10:	89 38                	mov    DWORD PTR [eax],edi
c0000a12:	eb 17                	jmp    c0000a2b <simple_strtoul+0x141>
c0000a14:	31 db                	xor    ebx,ebx
c0000a16:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000a1b:	74 14                	je     c0000a31 <simple_strtoul+0x147>
c0000a1d:	31 ed                	xor    ebp,ebp
c0000a1f:	85 c9                	test   ecx,ecx
c0000a21:	75 e3                	jne    c0000a06 <simple_strtoul+0x11c>
c0000a23:	31 db                	xor    ebx,ebx
c0000a25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a29:	89 08                	mov    DWORD PTR [eax],ecx
c0000a2b:	4d                   	dec    ebp
c0000a2c:	75 03                	jne    c0000a31 <simple_strtoul+0x147>
c0000a2e:	83 cb ff             	or     ebx,0xffffffff
c0000a31:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a36:	75 02                	jne    c0000a3a <simple_strtoul+0x150>
c0000a38:	f7 db                	neg    ebx
c0000a3a:	83 c4 08             	add    esp,0x8
c0000a3d:	89 d8                	mov    eax,ebx
c0000a3f:	5b                   	pop    ebx
c0000a40:	5e                   	pop    esi
c0000a41:	5f                   	pop    edi
c0000a42:	5d                   	pop    ebp
c0000a43:	c3                   	ret    

c0000a44 <largebin_index>:
c0000a44:	89 c2                	mov    edx,eax
c0000a46:	c1 ea 08             	shr    edx,0x8
c0000a49:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a4f:	77 10                	ja     c0000a61 <largebin_index+0x1d>
c0000a51:	0f bd d2             	bsr    edx,edx
c0000a54:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a57:	d3 e8                	shr    eax,cl
c0000a59:	83 e0 03             	and    eax,0x3
c0000a5c:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a60:	c3                   	ret    
c0000a61:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a66:	c3                   	ret    

c0000a67 <malloc_init_state>:
c0000a67:	53                   	push   ebx
c0000a68:	8d 50 34             	lea    edx,[eax+0x34]
c0000a6b:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a71:	89 d1                	mov    ecx,edx
c0000a73:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a76:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a79:	83 c2 08             	add    edx,0x8
c0000a7c:	39 da                	cmp    edx,ebx
c0000a7e:	75 f3                	jne    c0000a73 <malloc_init_state+0xc>
c0000a80:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a82:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a8c:	83 e2 03             	and    edx,0x3
c0000a8f:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a99:	83 ca 48             	or     edx,0x48
c0000a9c:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000aa6:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000ab0:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ab7:	89 10                	mov    DWORD PTR [eax],edx
c0000ab9:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000abc:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000ac6:	5b                   	pop    ebx
c0000ac7:	c3                   	ret    

c0000ac8 <malloc_consolidate>:
c0000ac8:	8b 10                	mov    edx,DWORD PTR [eax]
c0000aca:	85 d2                	test   edx,edx
c0000acc:	0f 84 d8 00 00 00    	je     c0000baa <malloc_consolidate+0xe2>
c0000ad2:	55                   	push   ebp
c0000ad3:	83 e2 fd             	and    edx,0xfffffffd
c0000ad6:	57                   	push   edi
c0000ad7:	89 c5                	mov    ebp,eax
c0000ad9:	56                   	push   esi
c0000ada:	8d 78 34             	lea    edi,[eax+0x34]
c0000add:	53                   	push   ebx
c0000ade:	83 ec 10             	sub    esp,0x10
c0000ae1:	89 10                	mov    DWORD PTR [eax],edx
c0000ae3:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ae7:	c1 ea 03             	shr    edx,0x3
c0000aea:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000aee:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000af2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000af5:	85 d2                	test   edx,edx
c0000af7:	0f 84 98 00 00 00    	je     c0000b95 <malloc_consolidate+0xcd>
c0000afd:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000b04:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000b07:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000b0a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000b0e:	89 f9                	mov    ecx,edi
c0000b10:	83 e1 fe             	and    ecx,0xfffffffe
c0000b13:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b16:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b19:	83 e3 fc             	and    ebx,0xfffffffc
c0000b1c:	83 e7 01             	and    edi,0x1
c0000b1f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b22:	75 14                	jne    c0000b38 <malloc_consolidate+0x70>
c0000b24:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b26:	29 fa                	sub    edx,edi
c0000b28:	01 f9                	add    ecx,edi
c0000b2a:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b2d:	89 fb                	mov    ebx,edi
c0000b2f:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b32:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b35:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b38:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b3b:	74 40                	je     c0000b7d <malloc_consolidate+0xb5>
c0000b3d:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b40:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b43:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b47:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b4a:	83 e7 01             	and    edi,0x1
c0000b4d:	75 0e                	jne    c0000b5d <malloc_consolidate+0x95>
c0000b4f:	01 d9                	add    ecx,ebx
c0000b51:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b54:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b57:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b5a:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b5d:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b60:	89 ce                	mov    esi,ecx
c0000b62:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b65:	83 ce 01             	or     esi,0x1
c0000b68:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b6b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b6e:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b71:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b75:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b78:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b7b:	eb 0c                	jmp    c0000b89 <malloc_consolidate+0xc1>
c0000b7d:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b80:	83 c9 01             	or     ecx,0x1
c0000b83:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b86:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b89:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b8d:	85 d2                	test   edx,edx
c0000b8f:	0f 85 6f ff ff ff    	jne    c0000b04 <malloc_consolidate+0x3c>
c0000b95:	83 c5 04             	add    ebp,0x4
c0000b98:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b9c:	0f 85 50 ff ff ff    	jne    c0000af2 <malloc_consolidate+0x2a>
c0000ba2:	83 c4 10             	add    esp,0x10
c0000ba5:	5b                   	pop    ebx
c0000ba6:	5e                   	pop    esi
c0000ba7:	5f                   	pop    edi
c0000ba8:	5d                   	pop    ebp
c0000ba9:	c3                   	ret    
c0000baa:	e9 b8 fe ff ff       	jmp    c0000a67 <malloc_init_state>

c0000baf <dlfree>:
c0000baf:	57                   	push   edi
c0000bb0:	56                   	push   esi
c0000bb1:	53                   	push   ebx
c0000bb2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000bb6:	85 db                	test   ebx,ebx
c0000bb8:	0f 84 e2 00 00 00    	je     c0000ca0 <dlfree+0xf1>
c0000bbe:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000bc1:	8b 0d 00 a0 02 c0    	mov    ecx,DWORD PTR ds:0xc002a000
c0000bc7:	89 f0                	mov    eax,esi
c0000bc9:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bcc:	83 e0 fc             	and    eax,0xfffffffc
c0000bcf:	39 c1                	cmp    ecx,eax
c0000bd1:	72 24                	jb     c0000bf7 <dlfree+0x48>
c0000bd3:	83 c9 03             	or     ecx,0x3
c0000bd6:	c1 e8 03             	shr    eax,0x3
c0000bd9:	89 0d 00 a0 02 c0    	mov    DWORD PTR ds:0xc002a000,ecx
c0000bdf:	83 e8 02             	sub    eax,0x2
c0000be2:	8b 0c 85 04 a0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5ffc]
c0000be9:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000beb:	89 14 85 04 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ffc],edx
c0000bf2:	e9 a9 00 00 00       	jmp    c0000ca0 <dlfree+0xf1>
c0000bf7:	83 e6 02             	and    esi,0x2
c0000bfa:	0f 85 a0 00 00 00    	jne    c0000ca0 <dlfree+0xf1>
c0000c00:	83 c9 01             	or     ecx,0x1
c0000c03:	8d 34 02             	lea    esi,[edx+eax*1]
c0000c06:	89 0d 00 a0 02 c0    	mov    DWORD PTR ds:0xc002a000,ecx
c0000c0c:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000c0f:	83 e1 fc             	and    ecx,0xfffffffc
c0000c12:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c16:	75 13                	jne    c0000c2b <dlfree+0x7c>
c0000c18:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c1b:	29 da                	sub    edx,ebx
c0000c1d:	01 d8                	add    eax,ebx
c0000c1f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c22:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c25:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c28:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c2b:	39 35 2c a0 02 c0    	cmp    DWORD PTR ds:0xc002a02c,esi
c0000c31:	74 40                	je     c0000c73 <dlfree+0xc4>
c0000c33:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c37:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c3a:	80 e3 01             	and    bl,0x1
c0000c3d:	75 0e                	jne    c0000c4d <dlfree+0x9e>
c0000c3f:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c42:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c45:	01 c8                	add    eax,ecx
c0000c47:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c4a:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c4d:	8b 0d 3c a0 02 c0    	mov    ecx,DWORD PTR ds:0xc002a03c
c0000c53:	c7 42 0c 34 a0 02 c0 	mov    DWORD PTR [edx+0xc],0xc002a034
c0000c5a:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c5d:	89 15 3c a0 02 c0    	mov    DWORD PTR ds:0xc002a03c,edx
c0000c63:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c66:	89 c1                	mov    ecx,eax
c0000c68:	83 c9 01             	or     ecx,0x1
c0000c6b:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c6e:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c71:	eb 10                	jmp    c0000c83 <dlfree+0xd4>
c0000c73:	01 c8                	add    eax,ecx
c0000c75:	89 c1                	mov    ecx,eax
c0000c77:	83 c9 01             	or     ecx,0x1
c0000c7a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c7d:	89 15 2c a0 02 c0    	mov    DWORD PTR ds:0xc002a02c,edx
c0000c83:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c88:	76 16                	jbe    c0000ca0 <dlfree+0xf1>
c0000c8a:	f6 05 00 a0 02 c0 02 	test   BYTE PTR ds:0xc002a000,0x2
c0000c91:	74 0d                	je     c0000ca0 <dlfree+0xf1>
c0000c93:	5b                   	pop    ebx
c0000c94:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c0000c99:	5e                   	pop    esi
c0000c9a:	5f                   	pop    edi
c0000c9b:	e9 28 fe ff ff       	jmp    c0000ac8 <malloc_consolidate>
c0000ca0:	5b                   	pop    ebx
c0000ca1:	5e                   	pop    esi
c0000ca2:	5f                   	pop    edi
c0000ca3:	c3                   	ret    

c0000ca4 <sYSMALLOc>:
c0000ca4:	55                   	push   ebp
c0000ca5:	57                   	push   edi
c0000ca6:	56                   	push   esi
c0000ca7:	53                   	push   ebx
c0000ca8:	89 d3                	mov    ebx,edx
c0000caa:	83 ec 2c             	sub    esp,0x2c
c0000cad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000cb1:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000cb7:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000cba:	8d 42 ff             	lea    eax,[edx-0x1]
c0000cbd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000cc1:	74 1f                	je     c0000ce2 <sYSMALLOc+0x3e>
c0000cc3:	89 d8                	mov    eax,ebx
c0000cc5:	e8 fe fd ff ff       	call   c0000ac8 <malloc_consolidate>
c0000cca:	83 ec 0c             	sub    esp,0xc
c0000ccd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000cd1:	83 e8 07             	sub    eax,0x7
c0000cd4:	50                   	push   eax
c0000cd5:	e8 30 02 00 00       	call   c0000f0a <dlmalloc>
c0000cda:	83 c4 10             	add    esp,0x10
c0000cdd:	e9 20 02 00 00       	jmp    c0000f02 <sYSMALLOc+0x25e>
c0000ce2:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ce5:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ceb:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000cee:	83 e0 fc             	and    eax,0xfffffffc
c0000cf1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000cf5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000cf9:	83 c0 10             	add    eax,0x10
c0000cfc:	01 c1                	add    ecx,eax
c0000cfe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000d02:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000d09:	74 04                	je     c0000d0f <sYSMALLOc+0x6b>
c0000d0b:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000d0f:	f7 da                	neg    edx
c0000d11:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000d15:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000d19:	21 d1                	and    ecx,edx
c0000d1b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000d1f:	7f 07                	jg     c0000d28 <sYSMALLOc+0x84>
c0000d21:	31 c0                	xor    eax,eax
c0000d23:	e9 da 01 00 00       	jmp    c0000f02 <sYSMALLOc+0x25e>
c0000d28:	83 ec 0c             	sub    esp,0xc
c0000d2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d2f:	e8 61 e2 00 00       	call   c000ef95 <sbrk>
c0000d34:	83 c4 10             	add    esp,0x10
c0000d37:	89 c6                	mov    esi,eax
c0000d39:	83 f8 ff             	cmp    eax,0xffffffff
c0000d3c:	74 e3                	je     c0000d21 <sYSMALLOc+0x7d>
c0000d3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d42:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d46:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d49:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d4f:	39 f1                	cmp    ecx,esi
c0000d51:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d57:	75 13                	jne    c0000d6c <sYSMALLOc+0xc8>
c0000d59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d5d:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d61:	83 c8 01             	or     eax,0x1
c0000d64:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d67:	e9 3e 01 00 00       	jmp    c0000eaa <sYSMALLOc+0x206>
c0000d6c:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d72:	88 d0                	mov    al,dl
c0000d74:	83 e0 01             	and    eax,0x1
c0000d77:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d7c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d80:	0f 95 c0             	setne  al
c0000d83:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d87:	39 f1                	cmp    ecx,esi
c0000d89:	76 12                	jbe    c0000d9d <sYSMALLOc+0xf9>
c0000d8b:	84 c0                	test   al,al
c0000d8d:	74 0e                	je     c0000d9d <sYSMALLOc+0xf9>
c0000d8f:	83 e2 fe             	and    edx,0xfffffffe
c0000d92:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d98:	e9 83 00 00 00       	jmp    c0000e20 <sYSMALLOc+0x17c>
c0000d9d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000da2:	74 7c                	je     c0000e20 <sYSMALLOc+0x17c>
c0000da4:	84 c0                	test   al,al
c0000da6:	74 0c                	je     c0000db4 <sYSMALLOc+0x110>
c0000da8:	89 f0                	mov    eax,esi
c0000daa:	29 c8                	sub    eax,ecx
c0000dac:	01 e8                	add    eax,ebp
c0000dae:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000db4:	89 f2                	mov    edx,esi
c0000db6:	83 e2 07             	and    edx,0x7
c0000db9:	74 0c                	je     c0000dc7 <sYSMALLOc+0x123>
c0000dbb:	b8 08 00 00 00       	mov    eax,0x8
c0000dc0:	29 d0                	sub    eax,edx
c0000dc2:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000dc5:	eb 04                	jmp    c0000dcb <sYSMALLOc+0x127>
c0000dc7:	89 f5                	mov    ebp,esi
c0000dc9:	31 c0                	xor    eax,eax
c0000dcb:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000dcf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000dd3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000dd7:	01 c1                	add    ecx,eax
c0000dd9:	83 ec 0c             	sub    esp,0xc
c0000ddc:	01 f1                	add    ecx,esi
c0000dde:	01 ca                	add    edx,ecx
c0000de0:	29 c8                	sub    eax,ecx
c0000de2:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000de6:	01 c2                	add    edx,eax
c0000de8:	52                   	push   edx
c0000de9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ded:	e8 a3 e1 00 00       	call   c000ef95 <sbrk>
c0000df2:	83 c4 10             	add    esp,0x10
c0000df5:	83 f8 ff             	cmp    eax,0xffffffff
c0000df8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000dfc:	75 0f                	jne    c0000e0d <sYSMALLOc+0x169>
c0000dfe:	83 ec 0c             	sub    esp,0xc
c0000e01:	6a 00                	push   0x0
c0000e03:	e8 8d e1 00 00       	call   c000ef95 <sbrk>
c0000e08:	83 c4 10             	add    esp,0x10
c0000e0b:	eb 30                	jmp    c0000e3d <sYSMALLOc+0x199>
c0000e0d:	39 c6                	cmp    esi,eax
c0000e0f:	76 33                	jbe    c0000e44 <sYSMALLOc+0x1a0>
c0000e11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e15:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e1c:	01 f0                	add    eax,esi
c0000e1e:	eb 1d                	jmp    c0000e3d <sYSMALLOc+0x199>
c0000e20:	83 ec 0c             	sub    esp,0xc
c0000e23:	89 f5                	mov    ebp,esi
c0000e25:	6a 00                	push   0x0
c0000e27:	e8 69 e1 00 00       	call   c000ef95 <sbrk>
c0000e2c:	89 c2                	mov    edx,eax
c0000e2e:	29 f2                	sub    edx,esi
c0000e30:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000e34:	83 c4 10             	add    esp,0x10
c0000e37:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e3d:	31 d2                	xor    edx,edx
c0000e3f:	83 f8 ff             	cmp    eax,0xffffffff
c0000e42:	74 66                	je     c0000eaa <sYSMALLOc+0x206>
c0000e44:	29 e8                	sub    eax,ebp
c0000e46:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e49:	01 d0                	add    eax,edx
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e51:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e57:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e5c:	74 4c                	je     c0000eaa <sYSMALLOc+0x206>
c0000e5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e62:	83 e8 0c             	sub    eax,0xc
c0000e65:	83 e0 f8             	and    eax,0xfffffff8
c0000e68:	89 c2                	mov    edx,eax
c0000e6a:	83 ca 01             	or     edx,0x1
c0000e6d:	83 f8 0f             	cmp    eax,0xf
c0000e70:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e73:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e7b:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e83:	76 25                	jbe    c0000eaa <sYSMALLOc+0x206>
c0000e85:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e8b:	83 ec 0c             	sub    esp,0xc
c0000e8e:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e98:	83 c7 08             	add    edi,0x8
c0000e9b:	57                   	push   edi
c0000e9c:	e8 0e fd ff ff       	call   c0000baf <dlfree>
c0000ea1:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000ea7:	83 c4 10             	add    esp,0x10
c0000eaa:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000eb0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000eb6:	73 06                	jae    c0000ebe <sYSMALLOc+0x21a>
c0000eb8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000ebe:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000ec4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000eca:	73 06                	jae    c0000ed2 <sYSMALLOc+0x22e>
c0000ecc:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ed2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ed5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ed8:	83 e2 fc             	and    edx,0xfffffffc
c0000edb:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000edf:	0f 82 3c fe ff ff    	jb     c0000d21 <sYSMALLOc+0x7d>
c0000ee5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ee9:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000eec:	29 fa                	sub    edx,edi
c0000eee:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ef1:	83 ca 01             	or     edx,0x1
c0000ef4:	89 fb                	mov    ebx,edi
c0000ef6:	83 c0 08             	add    eax,0x8
c0000ef9:	83 cb 01             	or     ebx,0x1
c0000efc:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000eff:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000f02:	83 c4 2c             	add    esp,0x2c
c0000f05:	5b                   	pop    ebx
c0000f06:	5e                   	pop    esi
c0000f07:	5f                   	pop    edi
c0000f08:	5d                   	pop    ebp
c0000f09:	c3                   	ret    

c0000f0a <dlmalloc>:
c0000f0a:	55                   	push   ebp
c0000f0b:	57                   	push   edi
c0000f0c:	56                   	push   esi
c0000f0d:	53                   	push   ebx
c0000f0e:	83 ec 1c             	sub    esp,0x1c
c0000f11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f15:	83 f8 df             	cmp    eax,0xffffffdf
c0000f18:	0f 87 70 03 00 00    	ja     c000128e <dlmalloc+0x384>
c0000f1e:	83 c0 0b             	add    eax,0xb
c0000f21:	be 10 00 00 00       	mov    esi,0x10
c0000f26:	83 f8 0f             	cmp    eax,0xf
c0000f29:	76 05                	jbe    c0000f30 <dlmalloc+0x26>
c0000f2b:	83 e0 f8             	and    eax,0xfffffff8
c0000f2e:	89 c6                	mov    esi,eax
c0000f30:	8b 3d 00 a0 02 c0    	mov    edi,DWORD PTR ds:0xc002a000
c0000f36:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f3c:	75 17                	jne    c0000f55 <dlmalloc+0x4b>
c0000f3e:	85 ff                	test   edi,edi
c0000f40:	0f 85 05 03 00 00    	jne    c000124b <dlmalloc+0x341>
c0000f46:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c0000f4b:	e8 78 fb ff ff       	call   c0000ac8 <malloc_consolidate>
c0000f50:	e9 f6 02 00 00       	jmp    c000124b <dlmalloc+0x341>
c0000f55:	39 f7                	cmp    edi,esi
c0000f57:	72 1f                	jb     c0000f78 <dlmalloc+0x6e>
c0000f59:	89 f2                	mov    edx,esi
c0000f5b:	c1 ea 03             	shr    edx,0x3
c0000f5e:	83 ea 02             	sub    edx,0x2
c0000f61:	8b 04 95 04 a0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5ffc]
c0000f68:	85 c0                	test   eax,eax
c0000f6a:	74 0c                	je     c0000f78 <dlmalloc+0x6e>
c0000f6c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f6f:	89 0c 95 04 a0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd5ffc],ecx
c0000f76:	eb 30                	jmp    c0000fa8 <dlmalloc+0x9e>
c0000f78:	89 f0                	mov    eax,esi
c0000f7a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f80:	77 2e                	ja     c0000fb0 <dlmalloc+0xa6>
c0000f82:	c1 e8 03             	shr    eax,0x3
c0000f85:	8d 14 c5 34 a0 02 c0 	lea    edx,[eax*8-0x3ffd5fcc]
c0000f8c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f90:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f93:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f96:	39 c3                	cmp    ebx,eax
c0000f98:	74 2e                	je     c0000fc8 <dlmalloc+0xbe>
c0000f9a:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f9d:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000fa2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000fa5:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000fa8:	83 c0 08             	add    eax,0x8
c0000fab:	e9 e0 02 00 00       	jmp    c0001290 <dlmalloc+0x386>
c0000fb0:	e8 8f fa ff ff       	call   c0000a44 <largebin_index>
c0000fb5:	83 e7 02             	and    edi,0x2
c0000fb8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fbc:	74 0a                	je     c0000fc8 <dlmalloc+0xbe>
c0000fbe:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c0000fc3:	e8 00 fb ff ff       	call   c0000ac8 <malloc_consolidate>
c0000fc8:	8d 46 10             	lea    eax,[esi+0x10]
c0000fcb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fcf:	8b 1d 40 a0 02 c0    	mov    ebx,DWORD PTR ds:0xc002a040
c0000fd5:	81 fb 34 a0 02 c0    	cmp    ebx,0xc002a034
c0000fdb:	0f 84 13 01 00 00    	je     c00010f4 <dlmalloc+0x1ea>
c0000fe1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fe4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fe7:	83 e7 fc             	and    edi,0xfffffffc
c0000fea:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000ff0:	77 4c                	ja     c000103e <dlmalloc+0x134>
c0000ff2:	3d 34 a0 02 c0       	cmp    eax,0xc002a034
c0000ff7:	75 45                	jne    c000103e <dlmalloc+0x134>
c0000ff9:	39 1d 30 a0 02 c0    	cmp    DWORD PTR ds:0xc002a030,ebx
c0000fff:	75 3d                	jne    c000103e <dlmalloc+0x134>
c0001001:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001005:	73 37                	jae    c000103e <dlmalloc+0x134>
c0001007:	8d 04 33             	lea    eax,[ebx+esi*1]
c000100a:	89 fa                	mov    edx,edi
c000100c:	a3 3c a0 02 c0       	mov    ds:0xc002a03c,eax
c0001011:	a3 40 a0 02 c0       	mov    ds:0xc002a040,eax
c0001016:	a3 30 a0 02 c0       	mov    ds:0xc002a030,eax
c000101b:	29 f2                	sub    edx,esi
c000101d:	c7 40 08 34 a0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002a034
c0001024:	c7 40 0c 34 a0 02 c0 	mov    DWORD PTR [eax+0xc],0xc002a034
c000102b:	83 ce 01             	or     esi,0x1
c000102e:	89 d1                	mov    ecx,edx
c0001030:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001033:	83 c9 01             	or     ecx,0x1
c0001036:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001039:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000103c:	eb 15                	jmp    c0001053 <dlmalloc+0x149>
c000103e:	a3 40 a0 02 c0       	mov    ds:0xc002a040,eax
c0001043:	39 fe                	cmp    esi,edi
c0001045:	c7 40 08 34 a0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002a034
c000104c:	75 0d                	jne    c000105b <dlmalloc+0x151>
c000104e:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001053:	8d 43 08             	lea    eax,[ebx+0x8]
c0001056:	e9 35 02 00 00       	jmp    c0001290 <dlmalloc+0x386>
c000105b:	89 f8                	mov    eax,edi
c000105d:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001063:	77 19                	ja     c000107e <dlmalloc+0x174>
c0001065:	c1 e8 03             	shr    eax,0x3
c0001068:	8d 14 00             	lea    edx,[eax+eax*1]
c000106b:	83 c2 0d             	add    edx,0xd
c000106e:	8d 2c 95 f8 9f 02 c0 	lea    ebp,[edx*4-0x3ffd6008]
c0001075:	8b 14 95 00 a0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6000]
c000107c:	eb 46                	jmp    c00010c4 <dlmalloc+0x1ba>
c000107e:	e8 c1 f9 ff ff       	call   c0000a44 <largebin_index>
c0001083:	8d 14 00             	lea    edx,[eax+eax*1]
c0001086:	83 c2 0d             	add    edx,0xd
c0001089:	8d 0c 95 00 a0 02 c0 	lea    ecx,[edx*4-0x3ffd6000]
c0001090:	8b 14 95 00 a0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6000]
c0001097:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000109a:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000109e:	89 d5                	mov    ebp,edx
c00010a0:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00010a4:	74 1e                	je     c00010c4 <dlmalloc+0x1ba>
c00010a6:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00010a9:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00010ac:	77 12                	ja     c00010c0 <dlmalloc+0x1b6>
c00010ae:	83 cf 01             	or     edi,0x1
c00010b1:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010b4:	76 05                	jbe    c00010bb <dlmalloc+0x1b1>
c00010b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010b9:	eb f6                	jmp    c00010b1 <dlmalloc+0x1a7>
c00010bb:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010be:	eb 04                	jmp    c00010c4 <dlmalloc+0x1ba>
c00010c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010c4:	89 c7                	mov    edi,eax
c00010c6:	88 c1                	mov    cl,al
c00010c8:	c1 ff 05             	sar    edi,0x5
c00010cb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010cf:	bf 01 00 00 00       	mov    edi,0x1
c00010d4:	d3 e7                	shl    edi,cl
c00010d6:	89 f8                	mov    eax,edi
c00010d8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010dc:	09 04 bd 34 a3 02 c0 	or     DWORD PTR [edi*4-0x3ffd5ccc],eax
c00010e3:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010e6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010e9:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010ec:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010ef:	e9 db fe ff ff       	jmp    c0000fcf <dlmalloc+0xc5>
c00010f4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010fa:	76 78                	jbe    c0001174 <dlmalloc+0x26a>
c00010fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001100:	8d 04 c5 34 a0 02 c0 	lea    eax,[eax*8-0x3ffd5fcc]
c0001107:	8d 48 f8             	lea    ecx,[eax-0x8]
c000110a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000110d:	39 ca                	cmp    edx,ecx
c000110f:	74 63                	je     c0001174 <dlmalloc+0x26a>
c0001111:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001114:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001117:	83 e3 fc             	and    ebx,0xfffffffc
c000111a:	39 de                	cmp    esi,ebx
c000111c:	77 52                	ja     c0001170 <dlmalloc+0x266>
c000111e:	89 df                	mov    edi,ebx
c0001120:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001123:	29 f7                	sub    edi,esi
c0001125:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001128:	01 d3                	add    ebx,edx
c000112a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000112d:	83 ff 0f             	cmp    edi,0xf
c0001130:	8d 42 08             	lea    eax,[edx+0x8]
c0001133:	77 09                	ja     c000113e <dlmalloc+0x234>
c0001135:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001139:	e9 52 01 00 00       	jmp    c0001290 <dlmalloc+0x386>
c000113e:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001141:	83 ce 01             	or     esi,0x1
c0001144:	89 0d 3c a0 02 c0    	mov    DWORD PTR ds:0xc002a03c,ecx
c000114a:	89 0d 40 a0 02 c0    	mov    DWORD PTR ds:0xc002a040,ecx
c0001150:	c7 41 08 34 a0 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002a034
c0001157:	c7 41 0c 34 a0 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002a034
c000115e:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001161:	89 fa                	mov    edx,edi
c0001163:	83 ca 01             	or     edx,0x1
c0001166:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001169:	89 3b                	mov    DWORD PTR [ebx],edi
c000116b:	e9 20 01 00 00       	jmp    c0001290 <dlmalloc+0x386>
c0001170:	89 c2                	mov    edx,eax
c0001172:	eb 99                	jmp    c000110d <dlmalloc+0x203>
c0001174:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001178:	b8 01 00 00 00       	mov    eax,0x1
c000117d:	41                   	inc    ecx
c000117e:	89 cb                	mov    ebx,ecx
c0001180:	8d 14 cd 2c a0 02 c0 	lea    edx,[ecx*8-0x3ffd5fd4]
c0001187:	c1 eb 05             	shr    ebx,0x5
c000118a:	d3 e0                	shl    eax,cl
c000118c:	8b 3c 9d 34 a3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd5ccc]
c0001193:	39 f8                	cmp    eax,edi
c0001195:	77 04                	ja     c000119b <dlmalloc+0x291>
c0001197:	85 c0                	test   eax,eax
c0001199:	75 26                	jne    c00011c1 <dlmalloc+0x2b7>
c000119b:	43                   	inc    ebx
c000119c:	83 fb 02             	cmp    ebx,0x2
c000119f:	0f 87 a6 00 00 00    	ja     c000124b <dlmalloc+0x341>
c00011a5:	8b 3c 9d 34 a3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd5ccc]
c00011ac:	85 ff                	test   edi,edi
c00011ae:	74 eb                	je     c000119b <dlmalloc+0x291>
c00011b0:	89 d8                	mov    eax,ebx
c00011b2:	c1 e0 06             	shl    eax,0x6
c00011b5:	8d 14 85 2c a0 02 c0 	lea    edx,[eax*4-0x3ffd5fd4]
c00011bc:	b8 01 00 00 00       	mov    eax,0x1
c00011c1:	85 f8                	test   eax,edi
c00011c3:	75 07                	jne    c00011cc <dlmalloc+0x2c2>
c00011c5:	83 c2 08             	add    edx,0x8
c00011c8:	01 c0                	add    eax,eax
c00011ca:	eb f5                	jmp    c00011c1 <dlmalloc+0x2b7>
c00011cc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011cf:	39 ca                	cmp    edx,ecx
c00011d1:	75 14                	jne    c00011e7 <dlmalloc+0x2dd>
c00011d3:	89 c1                	mov    ecx,eax
c00011d5:	83 c2 08             	add    edx,0x8
c00011d8:	f7 d1                	not    ecx
c00011da:	01 c0                	add    eax,eax
c00011dc:	21 cf                	and    edi,ecx
c00011de:	89 3c 9d 34 a3 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd5ccc],edi
c00011e5:	eb ac                	jmp    c0001193 <dlmalloc+0x289>
c00011e7:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011ea:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011ed:	83 e0 fc             	and    eax,0xfffffffc
c00011f0:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011f3:	89 c3                	mov    ebx,eax
c00011f5:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011f8:	29 f3                	sub    ebx,esi
c00011fa:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011fd:	83 fb 0f             	cmp    ebx,0xf
c0001200:	8d 41 08             	lea    eax,[ecx+0x8]
c0001203:	77 09                	ja     c000120e <dlmalloc+0x304>
c0001205:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001209:	e9 82 00 00 00       	jmp    c0001290 <dlmalloc+0x386>
c000120e:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001211:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001217:	89 3d 3c a0 02 c0    	mov    DWORD PTR ds:0xc002a03c,edi
c000121d:	89 3d 40 a0 02 c0    	mov    DWORD PTR ds:0xc002a040,edi
c0001223:	c7 47 08 34 a0 02 c0 	mov    DWORD PTR [edi+0x8],0xc002a034
c000122a:	c7 47 0c 34 a0 02 c0 	mov    DWORD PTR [edi+0xc],0xc002a034
c0001231:	77 06                	ja     c0001239 <dlmalloc+0x32f>
c0001233:	89 3d 30 a0 02 c0    	mov    DWORD PTR ds:0xc002a030,edi
c0001239:	83 ce 01             	or     esi,0x1
c000123c:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000123f:	89 d9                	mov    ecx,ebx
c0001241:	83 c9 01             	or     ecx,0x1
c0001244:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001247:	89 1a                	mov    DWORD PTR [edx],ebx
c0001249:	eb 45                	jmp    c0001290 <dlmalloc+0x386>
c000124b:	a1 2c a0 02 c0       	mov    eax,ds:0xc002a02c
c0001250:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001253:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001256:	83 e2 fc             	and    edx,0xfffffffc
c0001259:	39 d1                	cmp    ecx,edx
c000125b:	77 1e                	ja     c000127b <dlmalloc+0x371>
c000125d:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001260:	89 f3                	mov    ebx,esi
c0001262:	89 0d 2c a0 02 c0    	mov    DWORD PTR ds:0xc002a02c,ecx
c0001268:	83 cb 01             	or     ebx,0x1
c000126b:	29 f2                	sub    edx,esi
c000126d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001270:	83 ca 01             	or     edx,0x1
c0001273:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001276:	e9 2d fd ff ff       	jmp    c0000fa8 <dlmalloc+0x9e>
c000127b:	83 c4 1c             	add    esp,0x1c
c000127e:	89 f0                	mov    eax,esi
c0001280:	5b                   	pop    ebx
c0001281:	ba 00 a0 02 c0       	mov    edx,0xc002a000
c0001286:	5e                   	pop    esi
c0001287:	5f                   	pop    edi
c0001288:	5d                   	pop    ebp
c0001289:	e9 16 fa ff ff       	jmp    c0000ca4 <sYSMALLOc>
c000128e:	31 c0                	xor    eax,eax
c0001290:	83 c4 1c             	add    esp,0x1c
c0001293:	5b                   	pop    ebx
c0001294:	5e                   	pop    esi
c0001295:	5f                   	pop    edi
c0001296:	5d                   	pop    ebp
c0001297:	c3                   	ret    

c0001298 <iALLOc>:
c0001298:	55                   	push   ebp
c0001299:	89 c5                	mov    ebp,eax
c000129b:	57                   	push   edi
c000129c:	56                   	push   esi
c000129d:	53                   	push   ebx
c000129e:	83 ec 2c             	sub    esp,0x2c
c00012a1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00012a5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00012a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012ad:	83 3d 00 a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a000,0x0
c00012b4:	75 12                	jne    c00012c8 <iALLOc+0x30>
c00012b6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012ba:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c00012bf:	e8 04 f8 ff ff       	call   c0000ac8 <malloc_consolidate>
c00012c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012c8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012cd:	74 12                	je     c00012e1 <iALLOc+0x49>
c00012cf:	85 ed                	test   ebp,ebp
c00012d1:	0f 84 64 01 00 00    	je     c000143b <iALLOc+0x1a3>
c00012d7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012df:	eb 33                	jmp    c0001314 <iALLOc+0x7c>
c00012e1:	85 ed                	test   ebp,ebp
c00012e3:	75 14                	jne    c00012f9 <iALLOc+0x61>
c00012e5:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012ed:	83 c4 2c             	add    esp,0x2c
c00012f0:	5b                   	pop    ebx
c00012f1:	5e                   	pop    esi
c00012f2:	5f                   	pop    edi
c00012f3:	5d                   	pop    ebp
c00012f4:	e9 11 fc ff ff       	jmp    c0000f0a <dlmalloc>
c00012f9:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001300:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001308:	83 f8 0f             	cmp    eax,0xf
c000130b:	76 07                	jbe    c0001314 <iALLOc+0x7c>
c000130d:	83 e0 f8             	and    eax,0xfffffff8
c0001310:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001314:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001319:	75 09                	jne    c0001324 <iALLOc+0x8c>
c000131b:	89 d0                	mov    eax,edx
c000131d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001320:	31 f6                	xor    esi,esi
c0001322:	eb 3b                	jmp    c000135f <iALLOc+0xc7>
c0001324:	8b 02                	mov    eax,DWORD PTR [edx]
c0001326:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000132e:	83 c0 0b             	add    eax,0xb
c0001331:	83 f8 0f             	cmp    eax,0xf
c0001334:	76 07                	jbe    c000133d <iALLOc+0xa5>
c0001336:	83 e0 f8             	and    eax,0xfffffff8
c0001339:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000133d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001341:	0f af f5             	imul   esi,ebp
c0001344:	eb 25                	jmp    c000136b <iALLOc+0xd3>
c0001346:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001348:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000134b:	bb 10 00 00 00       	mov    ebx,0x10
c0001350:	83 f9 0f             	cmp    ecx,0xf
c0001353:	76 05                	jbe    c000135a <iALLOc+0xc2>
c0001355:	83 e1 f8             	and    ecx,0xfffffff8
c0001358:	89 cb                	mov    ebx,ecx
c000135a:	01 de                	add    esi,ebx
c000135c:	83 c0 04             	add    eax,0x4
c000135f:	39 c7                	cmp    edi,eax
c0001361:	75 e3                	jne    c0001346 <iALLOc+0xae>
c0001363:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000136b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000136f:	8b 1d 54 a3 02 c0    	mov    ebx,DWORD PTR ds:0xc002a354
c0001375:	83 ec 0c             	sub    esp,0xc
c0001378:	c7 05 54 a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a354,0x0
c0001382:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001386:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000138a:	50                   	push   eax
c000138b:	e8 7a fb ff ff       	call   c0000f0a <dlmalloc>
c0001390:	83 c4 10             	add    esp,0x10
c0001393:	89 1d 54 a3 02 c0    	mov    DWORD PTR ds:0xc002a354,ebx
c0001399:	85 c0                	test   eax,eax
c000139b:	0f 84 92 00 00 00    	je     c0001433 <iALLOc+0x19b>
c00013a1:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00013a4:	8d 78 f8             	lea    edi,[eax-0x8]
c00013a7:	83 e3 fc             	and    ebx,0xfffffffc
c00013aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00013ae:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013b3:	74 1e                	je     c00013d3 <iALLOc+0x13b>
c00013b5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013b9:	89 d9                	mov    ecx,ebx
c00013bb:	52                   	push   edx
c00013bc:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013c0:	83 e9 04             	sub    ecx,0x4
c00013c3:	51                   	push   ecx
c00013c4:	6a 00                	push   0x0
c00013c6:	50                   	push   eax
c00013c7:	e8 02 f3 ff ff       	call   c00006ce <memset>
c00013cc:	83 c4 10             	add    esp,0x10
c00013cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013d3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013d8:	75 14                	jne    c00013ee <iALLOc+0x156>
c00013da:	8d 04 37             	lea    eax,[edi+esi*1]
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 48 08             	lea    ecx,[eax+0x8]
c00013e2:	83 cb 01             	or     ebx,0x1
c00013e5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013e9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013ec:	89 f3                	mov    ebx,esi
c00013ee:	31 c0                	xor    eax,eax
c00013f0:	4d                   	dec    ebp
c00013f1:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013f4:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013f8:	39 c5                	cmp    ebp,eax
c00013fa:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013fd:	74 2c                	je     c000142b <iALLOc+0x193>
c00013ff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001403:	85 c9                	test   ecx,ecx
c0001405:	75 15                	jne    c000141c <iALLOc+0x184>
c0001407:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000140a:	8d 71 0b             	lea    esi,[ecx+0xb]
c000140d:	b9 10 00 00 00       	mov    ecx,0x10
c0001412:	83 fe 0f             	cmp    esi,0xf
c0001415:	76 05                	jbe    c000141c <iALLOc+0x184>
c0001417:	83 e6 f8             	and    esi,0xfffffff8
c000141a:	89 f1                	mov    ecx,esi
c000141c:	89 ce                	mov    esi,ecx
c000141e:	29 cb                	sub    ebx,ecx
c0001420:	83 ce 01             	or     esi,0x1
c0001423:	40                   	inc    eax
c0001424:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001427:	01 cf                	add    edi,ecx
c0001429:	eb c6                	jmp    c00013f1 <iALLOc+0x159>
c000142b:	83 cb 01             	or     ebx,0x1
c000142e:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001431:	eb 08                	jmp    c000143b <iALLOc+0x1a3>
c0001433:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000143b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000143f:	83 c4 2c             	add    esp,0x2c
c0001442:	5b                   	pop    ebx
c0001443:	5e                   	pop    esi
c0001444:	5f                   	pop    edi
c0001445:	5d                   	pop    ebp
c0001446:	c3                   	ret    

c0001447 <dlrealloc>:
c0001447:	55                   	push   ebp
c0001448:	57                   	push   edi
c0001449:	56                   	push   esi
c000144a:	53                   	push   ebx
c000144b:	83 ec 1c             	sub    esp,0x1c
c000144e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001452:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001456:	85 db                	test   ebx,ebx
c0001458:	75 10                	jne    c000146a <dlrealloc+0x23>
c000145a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000145e:	83 c4 1c             	add    esp,0x1c
c0001461:	5b                   	pop    ebx
c0001462:	5e                   	pop    esi
c0001463:	5f                   	pop    edi
c0001464:	5d                   	pop    ebp
c0001465:	e9 a0 fa ff ff       	jmp    c0000f0a <dlmalloc>
c000146a:	83 f8 df             	cmp    eax,0xffffffdf
c000146d:	76 07                	jbe    c0001476 <dlrealloc+0x2f>
c000146f:	31 db                	xor    ebx,ebx
c0001471:	e9 7c 01 00 00       	jmp    c00015f2 <dlrealloc+0x1ab>
c0001476:	83 c0 0b             	add    eax,0xb
c0001479:	bf 10 00 00 00       	mov    edi,0x10
c000147e:	83 f8 0f             	cmp    eax,0xf
c0001481:	76 05                	jbe    c0001488 <dlrealloc+0x41>
c0001483:	83 e0 f8             	and    eax,0xfffffff8
c0001486:	89 c7                	mov    edi,eax
c0001488:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000148b:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000148e:	89 c6                	mov    esi,eax
c0001490:	83 e6 fc             	and    esi,0xfffffffc
c0001493:	a8 02                	test   al,0x2
c0001495:	75 d8                	jne    c000146f <dlrealloc+0x28>
c0001497:	39 f7                	cmp    edi,esi
c0001499:	0f 86 15 01 00 00    	jbe    c00015b4 <dlrealloc+0x16d>
c000149f:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00014a3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00014a6:	39 15 2c a0 02 c0    	cmp    DWORD PTR ds:0xc002a02c,edx
c00014ac:	75 33                	jne    c00014e1 <dlrealloc+0x9a>
c00014ae:	83 e1 fc             	and    ecx,0xfffffffc
c00014b1:	01 f1                	add    ecx,esi
c00014b3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014b7:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014ba:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014be:	77 49                	ja     c0001509 <dlrealloc+0xc2>
c00014c0:	01 fd                	add    ebp,edi
c00014c2:	83 e0 01             	and    eax,0x1
c00014c5:	09 f8                	or     eax,edi
c00014c7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014ca:	89 2d 2c a0 02 c0    	mov    DWORD PTR ds:0xc002a02c,ebp
c00014d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014d4:	29 f8                	sub    eax,edi
c00014d6:	83 c8 01             	or     eax,0x1
c00014d9:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014dc:	e9 11 01 00 00       	jmp    c00015f2 <dlrealloc+0x1ab>
c00014e1:	89 c8                	mov    eax,ecx
c00014e3:	83 e0 fe             	and    eax,0xfffffffe
c00014e6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014eb:	75 1c                	jne    c0001509 <dlrealloc+0xc2>
c00014ed:	83 e1 fc             	and    ecx,0xfffffffc
c00014f0:	01 f1                	add    ecx,esi
c00014f2:	39 cf                	cmp    edi,ecx
c00014f4:	77 13                	ja     c0001509 <dlrealloc+0xc2>
c00014f6:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014fc:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014ff:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001502:	89 ce                	mov    esi,ecx
c0001504:	e9 ab 00 00 00       	jmp    c00015b4 <dlrealloc+0x16d>
c0001509:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000150d:	8d 47 f9             	lea    eax,[edi-0x7]
c0001510:	83 ec 0c             	sub    esp,0xc
c0001513:	50                   	push   eax
c0001514:	e8 f1 f9 ff ff       	call   c0000f0a <dlmalloc>
c0001519:	83 c4 10             	add    esp,0x10
c000151c:	89 c1                	mov    ecx,eax
c000151e:	85 c0                	test   eax,eax
c0001520:	0f 84 49 ff ff ff    	je     c000146f <dlrealloc+0x28>
c0001526:	8d 40 f8             	lea    eax,[eax-0x8]
c0001529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000152d:	39 c2                	cmp    edx,eax
c000152f:	75 0a                	jne    c000153b <dlrealloc+0xf4>
c0001531:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001534:	83 e0 fc             	and    eax,0xfffffffc
c0001537:	01 c6                	add    esi,eax
c0001539:	eb 79                	jmp    c00015b4 <dlrealloc+0x16d>
c000153b:	83 ee 04             	sub    esi,0x4
c000153e:	83 fe 27             	cmp    esi,0x27
c0001541:	76 16                	jbe    c0001559 <dlrealloc+0x112>
c0001543:	50                   	push   eax
c0001544:	56                   	push   esi
c0001545:	53                   	push   ebx
c0001546:	51                   	push   ecx
c0001547:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000154b:	e8 48 f1 ff ff       	call   c0000698 <memcpy>
c0001550:	83 c4 10             	add    esp,0x10
c0001553:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001557:	eb 43                	jmp    c000159c <dlrealloc+0x155>
c0001559:	8b 03                	mov    eax,DWORD PTR [ebx]
c000155b:	83 fe 13             	cmp    esi,0x13
c000155e:	89 01                	mov    DWORD PTR [ecx],eax
c0001560:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001563:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001566:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001569:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000156c:	76 2e                	jbe    c000159c <dlrealloc+0x155>
c000156e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001571:	83 fe 1b             	cmp    esi,0x1b
c0001574:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001577:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000157a:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000157d:	76 1d                	jbe    c000159c <dlrealloc+0x155>
c000157f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001582:	83 fe 23             	cmp    esi,0x23
c0001585:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001588:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000158b:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000158e:	76 0c                	jbe    c000159c <dlrealloc+0x155>
c0001590:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001593:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001596:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001599:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	83 ec 0c             	sub    esp,0xc
c00015a3:	53                   	push   ebx
c00015a4:	e8 06 f6 ff ff       	call   c0000baf <dlfree>
c00015a9:	83 c4 10             	add    esp,0x10
c00015ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00015b0:	89 cb                	mov    ebx,ecx
c00015b2:	eb 3e                	jmp    c00015f2 <dlrealloc+0x1ab>
c00015b4:	89 f2                	mov    edx,esi
c00015b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015b9:	29 fa                	sub    edx,edi
c00015bb:	83 e1 01             	and    ecx,0x1
c00015be:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015c2:	83 fa 0f             	cmp    edx,0xf
c00015c5:	77 0b                	ja     c00015d2 <dlrealloc+0x18b>
c00015c7:	09 ce                	or     esi,ecx
c00015c9:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015cc:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015d0:	eb 20                	jmp    c00015f2 <dlrealloc+0x1ab>
c00015d2:	01 fd                	add    ebp,edi
c00015d4:	83 ec 0c             	sub    esp,0xc
c00015d7:	09 cf                	or     edi,ecx
c00015d9:	83 ca 01             	or     edx,0x1
c00015dc:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015df:	83 c5 08             	add    ebp,0x8
c00015e2:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015e5:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015e9:	55                   	push   ebp
c00015ea:	e8 c0 f5 ff ff       	call   c0000baf <dlfree>
c00015ef:	83 c4 10             	add    esp,0x10
c00015f2:	83 c4 1c             	add    esp,0x1c
c00015f5:	89 d8                	mov    eax,ebx
c00015f7:	5b                   	pop    ebx
c00015f8:	5e                   	pop    esi
c00015f9:	5f                   	pop    edi
c00015fa:	5d                   	pop    ebp
c00015fb:	c3                   	ret    

c00015fc <dlmemalign>:
c00015fc:	55                   	push   ebp
c00015fd:	57                   	push   edi
c00015fe:	56                   	push   esi
c00015ff:	53                   	push   ebx
c0001600:	83 ec 0c             	sub    esp,0xc
c0001603:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001607:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000160b:	83 fa 08             	cmp    edx,0x8
c000160e:	77 10                	ja     c0001620 <dlmemalign+0x24>
c0001610:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001614:	83 c4 0c             	add    esp,0xc
c0001617:	5b                   	pop    ebx
c0001618:	5e                   	pop    esi
c0001619:	5f                   	pop    edi
c000161a:	5d                   	pop    ebp
c000161b:	e9 ea f8 ff ff       	jmp    c0000f0a <dlmalloc>
c0001620:	bf 10 00 00 00       	mov    edi,0x10
c0001625:	83 fa 0f             	cmp    edx,0xf
c0001628:	76 13                	jbe    c000163d <dlmemalign+0x41>
c000162a:	8d 4a ff             	lea    ecx,[edx-0x1]
c000162d:	85 d1                	test   ecx,edx
c000162f:	75 04                	jne    c0001635 <dlmemalign+0x39>
c0001631:	89 d7                	mov    edi,edx
c0001633:	eb 08                	jmp    c000163d <dlmemalign+0x41>
c0001635:	39 d7                	cmp    edi,edx
c0001637:	73 04                	jae    c000163d <dlmemalign+0x41>
c0001639:	01 ff                	add    edi,edi
c000163b:	eb f8                	jmp    c0001635 <dlmemalign+0x39>
c000163d:	83 f8 df             	cmp    eax,0xffffffdf
c0001640:	76 07                	jbe    c0001649 <dlmemalign+0x4d>
c0001642:	31 c0                	xor    eax,eax
c0001644:	e9 ce 00 00 00       	jmp    c0001717 <dlmemalign+0x11b>
c0001649:	83 c0 0b             	add    eax,0xb
c000164c:	bd 10 00 00 00       	mov    ebp,0x10
c0001651:	83 f8 0f             	cmp    eax,0xf
c0001654:	76 05                	jbe    c000165b <dlmemalign+0x5f>
c0001656:	83 e0 f8             	and    eax,0xfffffff8
c0001659:	89 c5                	mov    ebp,eax
c000165b:	83 ec 0c             	sub    esp,0xc
c000165e:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001662:	50                   	push   eax
c0001663:	e8 a2 f8 ff ff       	call   c0000f0a <dlmalloc>
c0001668:	83 c4 10             	add    esp,0x10
c000166b:	89 c1                	mov    ecx,eax
c000166d:	85 c0                	test   eax,eax
c000166f:	74 d1                	je     c0001642 <dlmemalign+0x46>
c0001671:	31 d2                	xor    edx,edx
c0001673:	8d 70 f8             	lea    esi,[eax-0x8]
c0001676:	f7 f7                	div    edi
c0001678:	85 d2                	test   edx,edx
c000167a:	74 62                	je     c00016de <dlmemalign+0xe2>
c000167c:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001680:	89 f8                	mov    eax,edi
c0001682:	f7 d8                	neg    eax
c0001684:	21 c3                	and    ebx,eax
c0001686:	83 eb 08             	sub    ebx,0x8
c0001689:	89 d8                	mov    eax,ebx
c000168b:	29 f0                	sub    eax,esi
c000168d:	83 f8 0f             	cmp    eax,0xf
c0001690:	77 02                	ja     c0001694 <dlmemalign+0x98>
c0001692:	01 fb                	add    ebx,edi
c0001694:	89 d8                	mov    eax,ebx
c0001696:	29 f0                	sub    eax,esi
c0001698:	89 c6                	mov    esi,eax
c000169a:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000169d:	89 c2                	mov    edx,eax
c000169f:	83 e2 fc             	and    edx,0xfffffffc
c00016a2:	29 f2                	sub    edx,esi
c00016a4:	a8 02                	test   al,0x2
c00016a6:	74 10                	je     c00016b8 <dlmemalign+0xbc>
c00016a8:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00016ab:	83 ca 02             	or     edx,0x2
c00016ae:	8d 43 08             	lea    eax,[ebx+0x8]
c00016b1:	89 33                	mov    DWORD PTR [ebx],esi
c00016b3:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016b6:	eb 5f                	jmp    c0001717 <dlmemalign+0x11b>
c00016b8:	83 ec 0c             	sub    esp,0xc
c00016bb:	89 d0                	mov    eax,edx
c00016bd:	83 c8 01             	or     eax,0x1
c00016c0:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016c3:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016c8:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016cb:	83 e0 01             	and    eax,0x1
c00016ce:	09 f0                	or     eax,esi
c00016d0:	89 de                	mov    esi,ebx
c00016d2:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016d5:	51                   	push   ecx
c00016d6:	e8 d4 f4 ff ff       	call   c0000baf <dlfree>
c00016db:	83 c4 10             	add    esp,0x10
c00016de:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016e1:	a8 02                	test   al,0x2
c00016e3:	75 2f                	jne    c0001714 <dlmemalign+0x118>
c00016e5:	83 e0 fc             	and    eax,0xfffffffc
c00016e8:	8d 55 10             	lea    edx,[ebp+0x10]
c00016eb:	39 c2                	cmp    edx,eax
c00016ed:	73 25                	jae    c0001714 <dlmemalign+0x118>
c00016ef:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016f2:	83 ec 0c             	sub    esp,0xc
c00016f5:	29 e8                	sub    eax,ebp
c00016f7:	83 c2 08             	add    edx,0x8
c00016fa:	83 c8 01             	or     eax,0x1
c00016fd:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001700:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001703:	83 e0 01             	and    eax,0x1
c0001706:	09 c5                	or     ebp,eax
c0001708:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000170b:	52                   	push   edx
c000170c:	e8 9e f4 ff ff       	call   c0000baf <dlfree>
c0001711:	83 c4 10             	add    esp,0x10
c0001714:	8d 46 08             	lea    eax,[esi+0x8]
c0001717:	83 c4 0c             	add    esp,0xc
c000171a:	5b                   	pop    ebx
c000171b:	5e                   	pop    esi
c000171c:	5f                   	pop    edi
c000171d:	5d                   	pop    ebp
c000171e:	c3                   	ret    

c000171f <dlcalloc>:
c000171f:	53                   	push   ebx
c0001720:	83 ec 14             	sub    esp,0x14
c0001723:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001727:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000172c:	50                   	push   eax
c000172d:	e8 d8 f7 ff ff       	call   c0000f0a <dlmalloc>
c0001732:	83 c4 10             	add    esp,0x10
c0001735:	89 c3                	mov    ebx,eax
c0001737:	85 c0                	test   eax,eax
c0001739:	74 77                	je     c00017b2 <dlcalloc+0x93>
c000173b:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000173e:	89 d0                	mov    eax,edx
c0001740:	83 e0 fc             	and    eax,0xfffffffc
c0001743:	80 e2 02             	and    dl,0x2
c0001746:	75 5a                	jne    c00017a2 <dlcalloc+0x83>
c0001748:	83 e8 04             	sub    eax,0x4
c000174b:	83 f8 27             	cmp    eax,0x27
c000174e:	76 03                	jbe    c0001753 <dlcalloc+0x34>
c0001750:	51                   	push   ecx
c0001751:	eb 53                	jmp    c00017a6 <dlcalloc+0x87>
c0001753:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001759:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001760:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001767:	83 f8 13             	cmp    eax,0x13
c000176a:	76 46                	jbe    c00017b2 <dlcalloc+0x93>
c000176c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001773:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000177a:	83 f8 1b             	cmp    eax,0x1b
c000177d:	76 33                	jbe    c00017b2 <dlcalloc+0x93>
c000177f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001786:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000178d:	83 f8 23             	cmp    eax,0x23
c0001790:	76 20                	jbe    c00017b2 <dlcalloc+0x93>
c0001792:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001799:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00017a0:	eb 10                	jmp    c00017b2 <dlcalloc+0x93>
c00017a2:	83 e8 08             	sub    eax,0x8
c00017a5:	52                   	push   edx
c00017a6:	50                   	push   eax
c00017a7:	6a 00                	push   0x0
c00017a9:	53                   	push   ebx
c00017aa:	e8 1f ef ff ff       	call   c00006ce <memset>
c00017af:	83 c4 10             	add    esp,0x10
c00017b2:	89 d8                	mov    eax,ebx
c00017b4:	83 c4 08             	add    esp,0x8
c00017b7:	5b                   	pop    ebx
c00017b8:	c3                   	ret    

c00017b9 <dlcfree>:
c00017b9:	e9 f1 f3 ff ff       	jmp    c0000baf <dlfree>

c00017be <dlindependent_calloc>:
c00017be:	83 ec 28             	sub    esp,0x28
c00017c1:	b9 03 00 00 00       	mov    ecx,0x3
c00017c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017d2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017da:	e8 b9 fa ff ff       	call   c0001298 <iALLOc>
c00017df:	83 c4 2c             	add    esp,0x2c
c00017e2:	c3                   	ret    

c00017e3 <dlindependent_comalloc>:
c00017e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017eb:	31 c9                	xor    ecx,ecx
c00017ed:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017f1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017f5:	e9 9e fa ff ff       	jmp    c0001298 <iALLOc>

c00017fa <dlvalloc>:
c00017fa:	83 ec 0c             	sub    esp,0xc
c00017fd:	83 3d 00 a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a000,0x0
c0001804:	75 0a                	jne    c0001810 <dlvalloc+0x16>
c0001806:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c000180b:	e8 b8 f2 ff ff       	call   c0000ac8 <malloc_consolidate>
c0001810:	50                   	push   eax
c0001811:	50                   	push   eax
c0001812:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001816:	ff 35 5c a3 02 c0    	push   DWORD PTR ds:0xc002a35c
c000181c:	e8 db fd ff ff       	call   c00015fc <dlmemalign>
c0001821:	83 c4 1c             	add    esp,0x1c
c0001824:	c3                   	ret    

c0001825 <dlpvalloc>:
c0001825:	83 ec 0c             	sub    esp,0xc
c0001828:	83 3d 00 a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a000,0x0
c000182f:	75 0a                	jne    c000183b <dlpvalloc+0x16>
c0001831:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c0001836:	e8 8d f2 ff ff       	call   c0000ac8 <malloc_consolidate>
c000183b:	a1 5c a3 02 c0       	mov    eax,ds:0xc002a35c
c0001840:	89 c1                	mov    ecx,eax
c0001842:	52                   	push   edx
c0001843:	f7 d9                	neg    ecx
c0001845:	52                   	push   edx
c0001846:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000184a:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000184e:	21 ca                	and    edx,ecx
c0001850:	52                   	push   edx
c0001851:	50                   	push   eax
c0001852:	e8 a5 fd ff ff       	call   c00015fc <dlmemalign>
c0001857:	83 c4 1c             	add    esp,0x1c
c000185a:	c3                   	ret    

c000185b <dlmalloc_trim>:
c000185b:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c0001860:	e8 63 f2 ff ff       	call   c0000ac8 <malloc_consolidate>
c0001865:	31 c0                	xor    eax,eax
c0001867:	c3                   	ret    

c0001868 <dlmalloc_usable_size>:
c0001868:	53                   	push   ebx
c0001869:	31 c0                	xor    eax,eax
c000186b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000186f:	85 c9                	test   ecx,ecx
c0001871:	74 24                	je     c0001897 <dlmalloc_usable_size+0x2f>
c0001873:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001876:	f6 c2 02             	test   dl,0x2
c0001879:	74 08                	je     c0001883 <dlmalloc_usable_size+0x1b>
c000187b:	83 e2 fc             	and    edx,0xfffffffc
c000187e:	8d 42 f8             	lea    eax,[edx-0x8]
c0001881:	eb 14                	jmp    c0001897 <dlmalloc_usable_size+0x2f>
c0001883:	89 d3                	mov    ebx,edx
c0001885:	31 c0                	xor    eax,eax
c0001887:	83 e3 fe             	and    ebx,0xfffffffe
c000188a:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000188f:	74 06                	je     c0001897 <dlmalloc_usable_size+0x2f>
c0001891:	83 e2 fc             	and    edx,0xfffffffc
c0001894:	8d 42 fc             	lea    eax,[edx-0x4]
c0001897:	5b                   	pop    ebx
c0001898:	c3                   	ret    

c0001899 <dlmallinfo>:
c0001899:	55                   	push   ebp
c000189a:	57                   	push   edi
c000189b:	56                   	push   esi
c000189c:	53                   	push   ebx
c000189d:	83 ec 08             	sub    esp,0x8
c00018a0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00018a4:	83 3d 2c a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a02c,0x0
c00018ab:	75 0a                	jne    c00018b7 <dlmallinfo+0x1e>
c00018ad:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c00018b2:	e8 11 f2 ff ff       	call   c0000ac8 <malloc_consolidate>
c00018b7:	a1 2c a0 02 c0       	mov    eax,ds:0xc002a02c
c00018bc:	31 ed                	xor    ebp,ebp
c00018be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018c1:	31 c9                	xor    ecx,ecx
c00018c3:	83 e0 fc             	and    eax,0xfffffffc
c00018c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018ca:	31 c0                	xor    eax,eax
c00018cc:	8b 14 85 04 a0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5ffc]
c00018d3:	85 d2                	test   edx,edx
c00018d5:	74 0e                	je     c00018e5 <dlmallinfo+0x4c>
c00018d7:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018da:	45                   	inc    ebp
c00018db:	83 e6 fc             	and    esi,0xfffffffc
c00018de:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018e1:	01 f1                	add    ecx,esi
c00018e3:	eb ee                	jmp    c00018d3 <dlmallinfo+0x3a>
c00018e5:	40                   	inc    eax
c00018e6:	83 f8 0a             	cmp    eax,0xa
c00018e9:	75 e1                	jne    c00018cc <dlmallinfo+0x33>
c00018eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018ef:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018f6:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018f9:	b8 34 a0 02 c0       	mov    eax,0xc002a034
c00018fe:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001901:	39 f0                	cmp    eax,esi
c0001903:	74 10                	je     c0001915 <dlmallinfo+0x7c>
c0001905:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001908:	ff 04 24             	inc    DWORD PTR [esp]
c000190b:	83 e7 fc             	and    edi,0xfffffffc
c000190e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001911:	01 fa                	add    edx,edi
c0001913:	eb ec                	jmp    c0001901 <dlmallinfo+0x68>
c0001915:	83 c0 08             	add    eax,0x8
c0001918:	3d 2c a3 02 c0       	cmp    eax,0xc002a32c
c000191d:	75 df                	jne    c00018fe <dlmallinfo+0x65>
c000191f:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001922:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001925:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001928:	a1 68 a3 02 c0       	mov    eax,ds:0xc002a368
c000192d:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001930:	89 03                	mov    DWORD PTR [ebx],eax
c0001932:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001935:	8b 35 50 a3 02 c0    	mov    esi,DWORD PTR ds:0xc002a350
c000193b:	29 d0                	sub    eax,edx
c000193d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001940:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001943:	8b 35 64 a3 02 c0    	mov    esi,DWORD PTR ds:0xc002a364
c0001949:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000194d:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001950:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001953:	8b 35 74 a3 02 c0    	mov    esi,DWORD PTR ds:0xc002a374
c0001959:	89 d8                	mov    eax,ebx
c000195b:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000195e:	83 c4 08             	add    esp,0x8
c0001961:	5b                   	pop    ebx
c0001962:	5e                   	pop    esi
c0001963:	5f                   	pop    edi
c0001964:	5d                   	pop    ebp
c0001965:	c2 04 00             	ret    0x4

c0001968 <dlmalloc_stats>:
c0001968:	83 ec 30             	sub    esp,0x30
c000196b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000196f:	50                   	push   eax
c0001970:	e8 24 ff ff ff       	call   c0001899 <dlmallinfo>
c0001975:	83 c4 30             	add    esp,0x30
c0001978:	c3                   	ret    

c0001979 <dlmallopt>:
c0001979:	56                   	push   esi
c000197a:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c000197f:	53                   	push   ebx
c0001980:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001984:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001988:	e8 3b f1 ff ff       	call   c0000ac8 <malloc_consolidate>
c000198d:	8d 46 04             	lea    eax,[esi+0x4]
c0001990:	83 f8 05             	cmp    eax,0x5
c0001993:	77 67                	ja     c00019fc <dlmallopt+0x83>
c0001995:	ff 24 85 c4 5c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffda33c]
c000199c:	83 fb 50             	cmp    ebx,0x50
c000199f:	77 5b                	ja     c00019fc <dlmallopt+0x83>
c00019a1:	ba 08 00 00 00       	mov    edx,0x8
c00019a6:	85 db                	test   ebx,ebx
c00019a8:	74 12                	je     c00019bc <dlmallopt+0x43>
c00019aa:	83 c3 0b             	add    ebx,0xb
c00019ad:	ba 10 00 00 00       	mov    edx,0x10
c00019b2:	83 fb 0f             	cmp    ebx,0xf
c00019b5:	76 05                	jbe    c00019bc <dlmallopt+0x43>
c00019b7:	89 da                	mov    edx,ebx
c00019b9:	83 e2 f8             	and    edx,0xfffffff8
c00019bc:	a1 00 a0 02 c0       	mov    eax,ds:0xc002a000
c00019c1:	83 e0 03             	and    eax,0x3
c00019c4:	09 d0                	or     eax,edx
c00019c6:	a3 00 a0 02 c0       	mov    ds:0xc002a000,eax
c00019cb:	eb 31                	jmp    c00019fe <dlmallopt+0x85>
c00019cd:	89 1d 44 a3 02 c0    	mov    DWORD PTR ds:0xc002a344,ebx
c00019d3:	eb 06                	jmp    c00019db <dlmallopt+0x62>
c00019d5:	89 1d 48 a3 02 c0    	mov    DWORD PTR ds:0xc002a348,ebx
c00019db:	be 01 00 00 00       	mov    esi,0x1
c00019e0:	eb 1c                	jmp    c00019fe <dlmallopt+0x85>
c00019e2:	89 1d 4c a3 02 c0    	mov    DWORD PTR ds:0xc002a34c,ebx
c00019e8:	eb f1                	jmp    c00019db <dlmallopt+0x62>
c00019ea:	31 f6                	xor    esi,esi
c00019ec:	85 db                	test   ebx,ebx
c00019ee:	75 0e                	jne    c00019fe <dlmallopt+0x85>
c00019f0:	c7 05 54 a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a354,0x0
c00019fa:	eb df                	jmp    c00019db <dlmallopt+0x62>
c00019fc:	31 f6                	xor    esi,esi
c00019fe:	89 f0                	mov    eax,esi
c0001a00:	5b                   	pop    ebx
c0001a01:	5e                   	pop    esi
c0001a02:	c3                   	ret    

c0001a03 <disk_status>:
c0001a03:	31 c0                	xor    eax,eax
c0001a05:	c3                   	ret    

c0001a06 <disk_initialize>:
c0001a06:	31 c0                	xor    eax,eax
c0001a08:	c3                   	ret    

c0001a09 <disk_read>:
c0001a09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a0e:	0f b6 04 85 80 b9 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd4680]
c0001a16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a1a:	e9 6f cb 01 00       	jmp    c001e58e <fatWrapperReadDisk>

c0001a1f <disk_write>:
c0001a1f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a24:	0f b6 04 85 80 b9 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd4680]
c0001a2c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a30:	e9 a0 cb 01 00       	jmp    c001e5d5 <fatWrapperWriteDisk>

c0001a35 <disk_ioctl>:
c0001a35:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a3e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a43:	0f b6 04 85 80 b9 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd4680]
c0001a4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a4f:	e9 c8 cb 01 00       	jmp    c001e61c <fatWrapperIoctl>

c0001a54 <ld_word>:
c0001a54:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a58:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a5b:	c1 e2 08             	shl    edx,0x8
c0001a5e:	09 d0                	or     eax,edx
c0001a60:	c3                   	ret    

c0001a61 <ld_dword>:
c0001a61:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a65:	89 d1                	mov    ecx,edx
c0001a67:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a6b:	c1 e1 08             	shl    ecx,0x8
c0001a6e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a71:	09 ca                	or     edx,ecx
c0001a73:	c1 e2 08             	shl    edx,0x8
c0001a76:	09 d0                	or     eax,edx
c0001a78:	c3                   	ret    

c0001a79 <ld_qword>:
c0001a79:	57                   	push   edi
c0001a7a:	56                   	push   esi
c0001a7b:	53                   	push   ebx
c0001a7c:	31 db                	xor    ebx,ebx
c0001a7e:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a81:	89 df                	mov    edi,ebx
c0001a83:	89 ce                	mov    esi,ecx
c0001a85:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a89:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a8d:	c1 e6 08             	shl    esi,0x8
c0001a90:	09 f2                	or     edx,esi
c0001a92:	89 d6                	mov    esi,edx
c0001a94:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a98:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a9c:	c1 e6 08             	shl    esi,0x8
c0001a9f:	09 f2                	or     edx,esi
c0001aa1:	89 d6                	mov    esi,edx
c0001aa3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001aa7:	0f a4 f7 08          	shld   edi,esi,0x8
c0001aab:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001aae:	c1 e6 08             	shl    esi,0x8
c0001ab1:	89 fb                	mov    ebx,edi
c0001ab3:	09 f2                	or     edx,esi
c0001ab5:	89 d1                	mov    ecx,edx
c0001ab7:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001abb:	c1 e1 08             	shl    ecx,0x8
c0001abe:	89 da                	mov    edx,ebx
c0001ac0:	09 c8                	or     eax,ecx
c0001ac2:	5b                   	pop    ebx
c0001ac3:	5e                   	pop    esi
c0001ac4:	5f                   	pop    edi
c0001ac5:	c3                   	ret    

c0001ac6 <st_word>:
c0001ac6:	66 89 10             	mov    WORD PTR [eax],dx
c0001ac9:	c3                   	ret    

c0001aca <st_dword>:
c0001aca:	89 10                	mov    DWORD PTR [eax],edx
c0001acc:	c3                   	ret    

c0001acd <st_qword>:
c0001acd:	89 10                	mov    DWORD PTR [eax],edx
c0001acf:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ad2:	c3                   	ret    

c0001ad3 <mem_cpy>:
c0001ad3:	85 c9                	test   ecx,ecx
c0001ad5:	74 10                	je     c0001ae7 <mem_cpy+0x14>
c0001ad7:	57                   	push   edi
c0001ad8:	01 c1                	add    ecx,eax
c0001ada:	56                   	push   esi
c0001adb:	89 c7                	mov    edi,eax
c0001add:	89 d6                	mov    esi,edx
c0001adf:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ae0:	39 f9                	cmp    ecx,edi
c0001ae2:	75 fb                	jne    c0001adf <mem_cpy+0xc>
c0001ae4:	5e                   	pop    esi
c0001ae5:	5f                   	pop    edi
c0001ae6:	c3                   	ret    
c0001ae7:	c3                   	ret    

c0001ae8 <mem_set>:
c0001ae8:	01 c1                	add    ecx,eax
c0001aea:	40                   	inc    eax
c0001aeb:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001aee:	39 c8                	cmp    eax,ecx
c0001af0:	75 f8                	jne    c0001aea <mem_set+0x2>
c0001af2:	c3                   	ret    

c0001af3 <mem_cmp>:
c0001af3:	57                   	push   edi
c0001af4:	56                   	push   esi
c0001af5:	89 c6                	mov    esi,eax
c0001af7:	53                   	push   ebx
c0001af8:	46                   	inc    esi
c0001af9:	42                   	inc    edx
c0001afa:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001afe:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001b02:	29 fb                	sub    ebx,edi
c0001b04:	89 cf                	mov    edi,ecx
c0001b06:	29 f7                	sub    edi,esi
c0001b08:	01 c7                	add    edi,eax
c0001b0a:	74 04                	je     c0001b10 <mem_cmp+0x1d>
c0001b0c:	85 db                	test   ebx,ebx
c0001b0e:	74 e8                	je     c0001af8 <mem_cmp+0x5>
c0001b10:	89 d8                	mov    eax,ebx
c0001b12:	5b                   	pop    ebx
c0001b13:	5e                   	pop    esi
c0001b14:	5f                   	pop    edi
c0001b15:	c3                   	ret    

c0001b16 <chk_chr>:
c0001b16:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b19:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b1c:	74 07                	je     c0001b25 <chk_chr+0xf>
c0001b1e:	39 d1                	cmp    ecx,edx
c0001b20:	74 03                	je     c0001b25 <chk_chr+0xf>
c0001b22:	40                   	inc    eax
c0001b23:	eb f1                	jmp    c0001b16 <chk_chr>
c0001b25:	89 c8                	mov    eax,ecx
c0001b27:	c3                   	ret    

c0001b28 <dbc_1st>:
c0001b28:	31 c0                	xor    eax,eax
c0001b2a:	c3                   	ret    

c0001b2b <dbc_2nd>:
c0001b2b:	31 c0                	xor    eax,eax
c0001b2d:	c3                   	ret    

c0001b2e <tchar2uni>:
c0001b2e:	57                   	push   edi
c0001b2f:	89 c7                	mov    edi,eax
c0001b31:	56                   	push   esi
c0001b32:	53                   	push   ebx
c0001b33:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b35:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b37:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b3a:	84 c9                	test   cl,cl
c0001b3c:	78 0a                	js     c0001b48 <tchar2uni+0x1a>
c0001b3e:	0f b6 d1             	movzx  edx,cl
c0001b41:	89 f3                	mov    ebx,esi
c0001b43:	e9 9f 00 00 00       	jmp    c0001be7 <tchar2uni+0xb9>
c0001b48:	88 ca                	mov    dl,cl
c0001b4a:	83 e2 e0             	and    edx,0xffffffe0
c0001b4d:	80 fa c0             	cmp    dl,0xc0
c0001b50:	75 0c                	jne    c0001b5e <tchar2uni+0x30>
c0001b52:	89 ca                	mov    edx,ecx
c0001b54:	b9 01 00 00 00       	mov    ecx,0x1
c0001b59:	83 e2 1f             	and    edx,0x1f
c0001b5c:	eb 2e                	jmp    c0001b8c <tchar2uni+0x5e>
c0001b5e:	88 ca                	mov    dl,cl
c0001b60:	83 e2 f0             	and    edx,0xfffffff0
c0001b63:	80 fa e0             	cmp    dl,0xe0
c0001b66:	75 0c                	jne    c0001b74 <tchar2uni+0x46>
c0001b68:	89 ca                	mov    edx,ecx
c0001b6a:	b9 02 00 00 00       	mov    ecx,0x2
c0001b6f:	83 e2 0f             	and    edx,0xf
c0001b72:	eb 18                	jmp    c0001b8c <tchar2uni+0x5e>
c0001b74:	88 ca                	mov    dl,cl
c0001b76:	83 e2 f8             	and    edx,0xfffffff8
c0001b79:	88 d0                	mov    al,dl
c0001b7b:	83 ca ff             	or     edx,0xffffffff
c0001b7e:	3c f0                	cmp    al,0xf0
c0001b80:	75 6c                	jne    c0001bee <tchar2uni+0xc0>
c0001b82:	89 ca                	mov    edx,ecx
c0001b84:	b9 03 00 00 00       	mov    ecx,0x3
c0001b89:	83 e2 07             	and    edx,0x7
c0001b8c:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b90:	46                   	inc    esi
c0001b91:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b94:	88 c8                	mov    al,cl
c0001b96:	83 e0 c0             	and    eax,0xffffffc0
c0001b99:	3c 80                	cmp    al,0x80
c0001b9b:	75 4e                	jne    c0001beb <tchar2uni+0xbd>
c0001b9d:	c1 e2 06             	shl    edx,0x6
c0001ba0:	83 e1 3f             	and    ecx,0x3f
c0001ba3:	09 ca                	or     edx,ecx
c0001ba5:	39 de                	cmp    esi,ebx
c0001ba7:	75 e7                	jne    c0001b90 <tchar2uni+0x62>
c0001ba9:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001bac:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001bb2:	77 37                	ja     c0001beb <tchar2uni+0xbd>
c0001bb4:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001bba:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001bc0:	76 29                	jbe    c0001beb <tchar2uni+0xbd>
c0001bc2:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001bc8:	76 1d                	jbe    c0001be7 <tchar2uni+0xb9>
c0001bca:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bd0:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bd6:	c1 e1 06             	shl    ecx,0x6
c0001bd9:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bdf:	09 ca                	or     edx,ecx
c0001be1:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001be7:	89 1f                	mov    DWORD PTR [edi],ebx
c0001be9:	eb 03                	jmp    c0001bee <tchar2uni+0xc0>
c0001beb:	83 ca ff             	or     edx,0xffffffff
c0001bee:	5b                   	pop    ebx
c0001bef:	89 d0                	mov    eax,edx
c0001bf1:	5e                   	pop    esi
c0001bf2:	5f                   	pop    edi
c0001bf3:	c3                   	ret    

c0001bf4 <put_utf>:
c0001bf4:	53                   	push   ebx
c0001bf5:	83 f8 7f             	cmp    eax,0x7f
c0001bf8:	89 c3                	mov    ebx,eax
c0001bfa:	b0 00                	mov    al,0x0
c0001bfc:	77 11                	ja     c0001c0f <put_utf+0x1b>
c0001bfe:	85 c9                	test   ecx,ecx
c0001c00:	0f 84 e5 00 00 00    	je     c0001ceb <put_utf+0xf7>
c0001c06:	88 1a                	mov    BYTE PTR [edx],bl
c0001c08:	b0 01                	mov    al,0x1
c0001c0a:	e9 dc 00 00 00       	jmp    c0001ceb <put_utf+0xf7>
c0001c0f:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c15:	77 23                	ja     c0001c3a <put_utf+0x46>
c0001c17:	83 f9 01             	cmp    ecx,0x1
c0001c1a:	0f 86 cb 00 00 00    	jbe    c0001ceb <put_utf+0xf7>
c0001c20:	89 d8                	mov    eax,ebx
c0001c22:	83 e3 3f             	and    ebx,0x3f
c0001c25:	c1 e8 06             	shr    eax,0x6
c0001c28:	83 cb 80             	or     ebx,0xffffff80
c0001c2b:	83 c8 c0             	or     eax,0xffffffc0
c0001c2e:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c31:	88 02                	mov    BYTE PTR [edx],al
c0001c33:	b0 02                	mov    al,0x2
c0001c35:	e9 b1 00 00 00       	jmp    c0001ceb <put_utf+0xf7>
c0001c3a:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c40:	77 40                	ja     c0001c82 <put_utf+0x8e>
c0001c42:	83 f9 02             	cmp    ecx,0x2
c0001c45:	0f 86 a0 00 00 00    	jbe    c0001ceb <put_utf+0xf7>
c0001c4b:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c51:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c57:	0f 86 8e 00 00 00    	jbe    c0001ceb <put_utf+0xf7>
c0001c5d:	89 d8                	mov    eax,ebx
c0001c5f:	c1 e8 0c             	shr    eax,0xc
c0001c62:	83 c8 e0             	or     eax,0xffffffe0
c0001c65:	88 02                	mov    BYTE PTR [edx],al
c0001c67:	89 d8                	mov    eax,ebx
c0001c69:	83 e3 3f             	and    ebx,0x3f
c0001c6c:	c1 e8 06             	shr    eax,0x6
c0001c6f:	83 cb 80             	or     ebx,0xffffff80
c0001c72:	83 e0 3f             	and    eax,0x3f
c0001c75:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c78:	83 c8 80             	or     eax,0xffffff80
c0001c7b:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c7e:	b0 03                	mov    al,0x3
c0001c80:	eb 69                	jmp    c0001ceb <put_utf+0xf7>
c0001c82:	83 f9 03             	cmp    ecx,0x3
c0001c85:	76 64                	jbe    c0001ceb <put_utf+0xf7>
c0001c87:	89 d9                	mov    ecx,ebx
c0001c89:	0f b7 c3             	movzx  eax,bx
c0001c8c:	66 31 c9             	xor    cx,cx
c0001c8f:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c95:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c9b:	c1 e9 06             	shr    ecx,0x6
c0001c9e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001ca4:	77 43                	ja     c0001ce9 <put_utf+0xf5>
c0001ca6:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001cac:	77 3b                	ja     c0001ce9 <put_utf+0xf5>
c0001cae:	09 cb                	or     ebx,ecx
c0001cb0:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001cb6:	89 d8                	mov    eax,ebx
c0001cb8:	c1 e8 12             	shr    eax,0x12
c0001cbb:	83 c8 f0             	or     eax,0xfffffff0
c0001cbe:	88 02                	mov    BYTE PTR [edx],al
c0001cc0:	89 d8                	mov    eax,ebx
c0001cc2:	c1 e8 0c             	shr    eax,0xc
c0001cc5:	83 e0 3f             	and    eax,0x3f
c0001cc8:	83 c8 80             	or     eax,0xffffff80
c0001ccb:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cce:	89 d8                	mov    eax,ebx
c0001cd0:	83 e3 3f             	and    ebx,0x3f
c0001cd3:	c1 e8 06             	shr    eax,0x6
c0001cd6:	83 cb 80             	or     ebx,0xffffff80
c0001cd9:	83 e0 3f             	and    eax,0x3f
c0001cdc:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001cdf:	83 c8 80             	or     eax,0xffffff80
c0001ce2:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ce5:	b0 04                	mov    al,0x4
c0001ce7:	eb 02                	jmp    c0001ceb <put_utf+0xf7>
c0001ce9:	31 c0                	xor    eax,eax
c0001ceb:	5b                   	pop    ebx
c0001cec:	c3                   	ret    

c0001ced <clst2sect>:
c0001ced:	89 c1                	mov    ecx,eax
c0001cef:	83 ea 02             	sub    edx,0x2
c0001cf2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001cf5:	83 e8 02             	sub    eax,0x2
c0001cf8:	39 d0                	cmp    eax,edx
c0001cfa:	76 0d                	jbe    c0001d09 <clst2sect+0x1c>
c0001cfc:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001d00:	f7 e2                	mul    edx
c0001d02:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001d05:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001d08:	c3                   	ret    
c0001d09:	31 c0                	xor    eax,eax
c0001d0b:	31 d2                	xor    edx,edx
c0001d0d:	c3                   	ret    

c0001d0e <clmt_clust>:
c0001d0e:	57                   	push   edi
c0001d0f:	89 cf                	mov    edi,ecx
c0001d11:	56                   	push   esi
c0001d12:	89 d6                	mov    esi,edx
c0001d14:	53                   	push   ebx
c0001d15:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d19:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d1c:	89 f2                	mov    edx,esi
c0001d1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d20:	c1 ef 09             	shr    edi,0x9
c0001d23:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d27:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d2a:	89 f9                	mov    ecx,edi
c0001d2c:	31 ff                	xor    edi,edi
c0001d2e:	57                   	push   edi
c0001d2f:	56                   	push   esi
c0001d30:	51                   	push   ecx
c0001d31:	52                   	push   edx
c0001d32:	e8 25 16 02 00       	call   c002335c <__udivdi3>
c0001d37:	83 c4 10             	add    esp,0x10
c0001d3a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d3c:	85 d2                	test   edx,edx
c0001d3e:	74 10                	je     c0001d50 <clmt_clust+0x42>
c0001d40:	39 d0                	cmp    eax,edx
c0001d42:	72 07                	jb     c0001d4b <clmt_clust+0x3d>
c0001d44:	29 d0                	sub    eax,edx
c0001d46:	83 c3 08             	add    ebx,0x8
c0001d49:	eb ef                	jmp    c0001d3a <clmt_clust+0x2c>
c0001d4b:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d4e:	89 c2                	mov    edx,eax
c0001d50:	5b                   	pop    ebx
c0001d51:	89 d0                	mov    eax,edx
c0001d53:	5e                   	pop    esi
c0001d54:	5f                   	pop    edi
c0001d55:	c3                   	ret    

c0001d56 <pick_lfn>:
c0001d56:	55                   	push   ebp
c0001d57:	57                   	push   edi
c0001d58:	56                   	push   esi
c0001d59:	89 d6                	mov    esi,edx
c0001d5b:	53                   	push   ebx
c0001d5c:	89 c3                	mov    ebx,eax
c0001d5e:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d61:	e8 ee fc ff ff       	call   c0001a54 <ld_word>
c0001d66:	66 85 c0             	test   ax,ax
c0001d69:	74 04                	je     c0001d6f <pick_lfn+0x19>
c0001d6b:	31 c0                	xor    eax,eax
c0001d6d:	eb 5c                	jmp    c0001dcb <pick_lfn+0x75>
c0001d6f:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d72:	bd 01 00 00 00       	mov    ebp,0x1
c0001d77:	83 e1 bf             	and    ecx,0xffffffbf
c0001d7a:	31 ff                	xor    edi,edi
c0001d7c:	49                   	dec    ecx
c0001d7d:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d80:	0f b6 87 e0 5d 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffda220]
c0001d87:	01 f0                	add    eax,esi
c0001d89:	e8 c6 fc ff ff       	call   c0001a54 <ld_word>
c0001d8e:	66 85 ed             	test   bp,bp
c0001d91:	74 11                	je     c0001da4 <pick_lfn+0x4e>
c0001d93:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d99:	77 d0                	ja     c0001d6b <pick_lfn+0x15>
c0001d9b:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d9f:	89 c5                	mov    ebp,eax
c0001da1:	41                   	inc    ecx
c0001da2:	eb 04                	jmp    c0001da8 <pick_lfn+0x52>
c0001da4:	66 40                	inc    ax
c0001da6:	75 c3                	jne    c0001d6b <pick_lfn+0x15>
c0001da8:	47                   	inc    edi
c0001da9:	83 ff 0d             	cmp    edi,0xd
c0001dac:	75 d2                	jne    c0001d80 <pick_lfn+0x2a>
c0001dae:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001db1:	74 13                	je     c0001dc6 <pick_lfn+0x70>
c0001db3:	66 85 ed             	test   bp,bp
c0001db6:	74 0e                	je     c0001dc6 <pick_lfn+0x70>
c0001db8:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001dbe:	77 ab                	ja     c0001d6b <pick_lfn+0x15>
c0001dc0:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001dc6:	b8 01 00 00 00       	mov    eax,0x1
c0001dcb:	5b                   	pop    ebx
c0001dcc:	5e                   	pop    esi
c0001dcd:	5f                   	pop    edi
c0001dce:	5d                   	pop    ebp
c0001dcf:	c3                   	ret    

c0001dd0 <put_lfn>:
c0001dd0:	55                   	push   ebp
c0001dd1:	31 ed                	xor    ebp,ebp
c0001dd3:	57                   	push   edi
c0001dd4:	89 d7                	mov    edi,edx
c0001dd6:	56                   	push   esi
c0001dd7:	31 f6                	xor    esi,esi
c0001dd9:	53                   	push   ebx
c0001dda:	83 ec 08             	sub    esp,0x8
c0001ddd:	89 04 24             	mov    DWORD PTR [esp],eax
c0001de0:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001de4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001de8:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001dee:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001df1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001df4:	31 d2                	xor    edx,edx
c0001df6:	e8 cb fc ff ff       	call   c0001ac6 <st_word>
c0001dfb:	0f b6 d9             	movzx  ebx,cl
c0001dfe:	4b                   	dec    ebx
c0001dff:	6b db 0d             	imul   ebx,ebx,0xd
c0001e02:	66 83 fe ff          	cmp    si,0xffff
c0001e06:	74 08                	je     c0001e10 <put_lfn+0x40>
c0001e08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e0b:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e0f:	43                   	inc    ebx
c0001e10:	0f b6 85 e0 5d 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffda220]
c0001e17:	0f b7 d6             	movzx  edx,si
c0001e1a:	01 f8                	add    eax,edi
c0001e1c:	e8 a5 fc ff ff       	call   c0001ac6 <st_word>
c0001e21:	66 85 f6             	test   si,si
c0001e24:	75 03                	jne    c0001e29 <put_lfn+0x59>
c0001e26:	83 ce ff             	or     esi,0xffffffff
c0001e29:	45                   	inc    ebp
c0001e2a:	83 fd 0d             	cmp    ebp,0xd
c0001e2d:	75 d3                	jne    c0001e02 <put_lfn+0x32>
c0001e2f:	66 46                	inc    si
c0001e31:	74 0a                	je     c0001e3d <put_lfn+0x6d>
c0001e33:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e36:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e3b:	75 09                	jne    c0001e46 <put_lfn+0x76>
c0001e3d:	88 c8                	mov    al,cl
c0001e3f:	83 c8 40             	or     eax,0x40
c0001e42:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e46:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e4a:	88 07                	mov    BYTE PTR [edi],al
c0001e4c:	83 c4 08             	add    esp,0x8
c0001e4f:	5b                   	pop    ebx
c0001e50:	5e                   	pop    esi
c0001e51:	5f                   	pop    edi
c0001e52:	5d                   	pop    ebp
c0001e53:	c3                   	ret    

c0001e54 <gen_numname>:
c0001e54:	57                   	push   edi
c0001e55:	89 cf                	mov    edi,ecx
c0001e57:	56                   	push   esi
c0001e58:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e5d:	53                   	push   ebx
c0001e5e:	89 c6                	mov    esi,eax
c0001e60:	83 ec 10             	sub    esp,0x10
c0001e63:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e67:	e8 67 fc ff ff       	call   c0001ad3 <mem_cpy>
c0001e6c:	83 fb 05             	cmp    ebx,0x5
c0001e6f:	76 2d                	jbe    c0001e9e <gen_numname+0x4a>
c0001e71:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e74:	66 85 c0             	test   ax,ax
c0001e77:	74 25                	je     c0001e9e <gen_numname+0x4a>
c0001e79:	83 c7 02             	add    edi,0x2
c0001e7c:	ba 10 00 00 00       	mov    edx,0x10
c0001e81:	01 db                	add    ebx,ebx
c0001e83:	89 c1                	mov    ecx,eax
c0001e85:	66 d1 e8             	shr    ax,1
c0001e88:	83 e1 01             	and    ecx,0x1
c0001e8b:	01 cb                	add    ebx,ecx
c0001e8d:	0f ba e3 10          	bt     ebx,0x10
c0001e91:	73 06                	jae    c0001e99 <gen_numname+0x45>
c0001e93:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e99:	4a                   	dec    edx
c0001e9a:	75 e5                	jne    c0001e81 <gen_numname+0x2d>
c0001e9c:	eb d3                	jmp    c0001e71 <gen_numname+0x1d>
c0001e9e:	b8 07 00 00 00       	mov    eax,0x7
c0001ea3:	88 d9                	mov    cl,bl
c0001ea5:	83 e1 0f             	and    ecx,0xf
c0001ea8:	8d 51 30             	lea    edx,[ecx+0x30]
c0001eab:	80 fa 39             	cmp    dl,0x39
c0001eae:	76 03                	jbe    c0001eb3 <gen_numname+0x5f>
c0001eb0:	8d 51 37             	lea    edx,[ecx+0x37]
c0001eb3:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001eb6:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001eba:	89 da                	mov    edx,ebx
c0001ebc:	c1 ea 04             	shr    edx,0x4
c0001ebf:	83 fb 0f             	cmp    ebx,0xf
c0001ec2:	76 06                	jbe    c0001eca <gen_numname+0x76>
c0001ec4:	89 c8                	mov    eax,ecx
c0001ec6:	89 d3                	mov    ebx,edx
c0001ec8:	eb d9                	jmp    c0001ea3 <gen_numname+0x4f>
c0001eca:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ecf:	31 d2                	xor    edx,edx
c0001ed1:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001ed4:	8d 04 16             	lea    eax,[esi+edx*1]
c0001ed7:	39 ca                	cmp    edx,ecx
c0001ed9:	73 18                	jae    c0001ef3 <gen_numname+0x9f>
c0001edb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ede:	3c 20                	cmp    al,0x20
c0001ee0:	74 11                	je     c0001ef3 <gen_numname+0x9f>
c0001ee2:	e8 41 fc ff ff       	call   c0001b28 <dbc_1st>
c0001ee7:	85 c0                	test   eax,eax
c0001ee9:	74 05                	je     c0001ef0 <gen_numname+0x9c>
c0001eeb:	39 d3                	cmp    ebx,edx
c0001eed:	74 04                	je     c0001ef3 <gen_numname+0x9f>
c0001eef:	42                   	inc    edx
c0001ef0:	42                   	inc    edx
c0001ef1:	eb e1                	jmp    c0001ed4 <gen_numname+0x80>
c0001ef3:	b0 20                	mov    al,0x20
c0001ef5:	83 f9 07             	cmp    ecx,0x7
c0001ef8:	77 05                	ja     c0001eff <gen_numname+0xab>
c0001efa:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001efe:	41                   	inc    ecx
c0001eff:	42                   	inc    edx
c0001f00:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001f04:	83 fa 07             	cmp    edx,0x7
c0001f07:	76 ea                	jbe    c0001ef3 <gen_numname+0x9f>
c0001f09:	83 c4 10             	add    esp,0x10
c0001f0c:	5b                   	pop    ebx
c0001f0d:	5e                   	pop    esi
c0001f0e:	5f                   	pop    edi
c0001f0f:	c3                   	ret    

c0001f10 <sum_sfn>:
c0001f10:	31 c9                	xor    ecx,ecx
c0001f12:	31 d2                	xor    edx,edx
c0001f14:	d0 ca                	ror    dl,1
c0001f16:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f19:	41                   	inc    ecx
c0001f1a:	83 f9 0b             	cmp    ecx,0xb
c0001f1d:	75 f5                	jne    c0001f14 <sum_sfn+0x4>
c0001f1f:	88 d0                	mov    al,dl
c0001f21:	c3                   	ret    

c0001f22 <xdir_sum>:
c0001f22:	56                   	push   esi
c0001f23:	31 c9                	xor    ecx,ecx
c0001f25:	53                   	push   ebx
c0001f26:	31 d2                	xor    edx,edx
c0001f28:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f2c:	43                   	inc    ebx
c0001f2d:	c1 e3 05             	shl    ebx,0x5
c0001f30:	83 fa 02             	cmp    edx,0x2
c0001f33:	74 0b                	je     c0001f40 <xdir_sum+0x1e>
c0001f35:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f39:	66 d1 c9             	ror    cx,1
c0001f3c:	01 f1                	add    ecx,esi
c0001f3e:	eb 05                	jmp    c0001f45 <xdir_sum+0x23>
c0001f40:	ba 03 00 00 00       	mov    edx,0x3
c0001f45:	42                   	inc    edx
c0001f46:	39 d3                	cmp    ebx,edx
c0001f48:	77 e6                	ja     c0001f30 <xdir_sum+0xe>
c0001f4a:	89 c8                	mov    eax,ecx
c0001f4c:	5b                   	pop    ebx
c0001f4d:	5e                   	pop    esi
c0001f4e:	c3                   	ret    

c0001f4f <xsum32>:
c0001f4f:	d1 ca                	ror    edx,1
c0001f51:	0f b6 c0             	movzx  eax,al
c0001f54:	01 d0                	add    eax,edx
c0001f56:	c3                   	ret    

c0001f57 <get_xfileinfo>:
c0001f57:	55                   	push   ebp
c0001f58:	31 c9                	xor    ecx,ecx
c0001f5a:	57                   	push   edi
c0001f5b:	bd 40 00 00 00       	mov    ebp,0x40
c0001f60:	56                   	push   esi
c0001f61:	31 ff                	xor    edi,edi
c0001f63:	53                   	push   ebx
c0001f64:	89 c6                	mov    esi,eax
c0001f66:	83 ec 0c             	sub    esp,0xc
c0001f69:	89 d3                	mov    ebx,edx
c0001f6b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f72:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f76:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f79:	76 6d                	jbe    c0001fe8 <get_xfileinfo+0x91>
c0001f7b:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f81:	76 0b                	jbe    c0001f8e <get_xfileinfo+0x37>
c0001f83:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f87:	bf 01 00 00 00       	mov    edi,0x1
c0001f8c:	eb 63                	jmp    c0001ff1 <get_xfileinfo+0x9a>
c0001f8e:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f94:	75 03                	jne    c0001f99 <get_xfileinfo+0x42>
c0001f96:	83 c5 02             	add    ebp,0x2
c0001f99:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f9c:	83 c5 02             	add    ebp,0x2
c0001f9f:	e8 b0 fa ff ff       	call   c0001a54 <ld_word>
c0001fa4:	ff 04 24             	inc    DWORD PTR [esp]
c0001fa7:	66 85 c9             	test   cx,cx
c0001faa:	75 0d                	jne    c0001fb9 <get_xfileinfo+0x62>
c0001fac:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001fb2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fb7:	76 2b                	jbe    c0001fe4 <get_xfileinfo+0x8d>
c0001fb9:	c1 e1 10             	shl    ecx,0x10
c0001fbc:	ba ff 00 00 00       	mov    edx,0xff
c0001fc1:	0f b7 c0             	movzx  eax,ax
c0001fc4:	29 fa                	sub    edx,edi
c0001fc6:	09 c8                	or     eax,ecx
c0001fc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fcc:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fd0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fd4:	e8 1b fc ff ff       	call   c0001bf4 <put_utf>
c0001fd9:	84 c0                	test   al,al
c0001fdb:	74 a6                	je     c0001f83 <get_xfileinfo+0x2c>
c0001fdd:	0f b6 c0             	movzx  eax,al
c0001fe0:	01 c7                	add    edi,eax
c0001fe2:	31 c0                	xor    eax,eax
c0001fe4:	89 c1                	mov    ecx,eax
c0001fe6:	eb 8a                	jmp    c0001f72 <get_xfileinfo+0x1b>
c0001fe8:	85 ff                	test   edi,edi
c0001fea:	74 97                	je     c0001f83 <get_xfileinfo+0x2c>
c0001fec:	66 85 c9             	test   cx,cx
c0001fef:	75 92                	jne    c0001f83 <get_xfileinfo+0x2c>
c0001ff1:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001ff6:	31 c0                	xor    eax,eax
c0001ff8:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001ffc:	31 d2                	xor    edx,edx
c0001ffe:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002001:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002004:	80 e1 10             	and    cl,0x10
c0002007:	75 08                	jne    c0002011 <get_xfileinfo+0xba>
c0002009:	8d 46 38             	lea    eax,[esi+0x38]
c000200c:	e8 68 fa ff ff       	call   c0001a79 <ld_qword>
c0002011:	89 03                	mov    DWORD PTR [ebx],eax
c0002013:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002016:	8d 46 0c             	lea    eax,[esi+0xc]
c0002019:	e8 36 fa ff ff       	call   c0001a54 <ld_word>
c000201e:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002022:	8d 46 0e             	lea    eax,[esi+0xe]
c0002025:	e8 2a fa ff ff       	call   c0001a54 <ld_word>
c000202a:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000202e:	83 c4 0c             	add    esp,0xc
c0002031:	5b                   	pop    ebx
c0002032:	5e                   	pop    esi
c0002033:	5f                   	pop    edi
c0002034:	5d                   	pop    ebp
c0002035:	c3                   	ret    

c0002036 <get_ldnumber>:
c0002036:	8b 10                	mov    edx,DWORD PTR [eax]
c0002038:	85 d2                	test   edx,edx
c000203a:	74 14                	je     c0002050 <get_ldnumber+0x1a>
c000203c:	56                   	push   esi
c000203d:	53                   	push   ebx
c000203e:	89 d3                	mov    ebx,edx
c0002040:	43                   	inc    ebx
c0002041:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002044:	80 f9 1f             	cmp    cl,0x1f
c0002047:	76 0d                	jbe    c0002056 <get_ldnumber+0x20>
c0002049:	80 f9 3a             	cmp    cl,0x3a
c000204c:	75 f2                	jne    c0002040 <get_ldnumber+0xa>
c000204e:	eb 0a                	jmp    c000205a <get_ldnumber+0x24>
c0002050:	83 c9 ff             	or     ecx,0xffffffff
c0002053:	89 c8                	mov    eax,ecx
c0002055:	c3                   	ret    
c0002056:	31 c9                	xor    ecx,ecx
c0002058:	eb 24                	jmp    c000207e <get_ldnumber+0x48>
c000205a:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000205d:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002060:	80 f9 09             	cmp    cl,0x9
c0002063:	77 16                	ja     c000207b <get_ldnumber+0x45>
c0002065:	83 c2 02             	add    edx,0x2
c0002068:	83 c9 ff             	or     ecx,0xffffffff
c000206b:	39 d3                	cmp    ebx,edx
c000206d:	75 0f                	jne    c000207e <get_ldnumber+0x48>
c000206f:	89 f2                	mov    edx,esi
c0002071:	89 18                	mov    DWORD PTR [eax],ebx
c0002073:	0f be ca             	movsx  ecx,dl
c0002076:	83 e9 30             	sub    ecx,0x30
c0002079:	eb 03                	jmp    c000207e <get_ldnumber+0x48>
c000207b:	83 c9 ff             	or     ecx,0xffffffff
c000207e:	89 c8                	mov    eax,ecx
c0002080:	5b                   	pop    ebx
c0002081:	5e                   	pop    esi
c0002082:	c3                   	ret    

c0002083 <crc32>:
c0002083:	56                   	push   esi
c0002084:	89 d6                	mov    esi,edx
c0002086:	53                   	push   ebx
c0002087:	b2 01                	mov    dl,0x1
c0002089:	bb 08 00 00 00       	mov    ebx,0x8
c000208e:	89 f1                	mov    ecx,esi
c0002090:	84 d1                	test   cl,dl
c0002092:	0f 95 c1             	setne  cl
c0002095:	0f b6 c9             	movzx  ecx,cl
c0002098:	31 c1                	xor    ecx,eax
c000209a:	89 c8                	mov    eax,ecx
c000209c:	d1 e8                	shr    eax,1
c000209e:	80 e1 01             	and    cl,0x1
c00020a1:	74 05                	je     c00020a8 <crc32+0x25>
c00020a3:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00020a8:	d1 e2                	shl    edx,1
c00020aa:	4b                   	dec    ebx
c00020ab:	75 e1                	jne    c000208e <crc32+0xb>
c00020ad:	5b                   	pop    ebx
c00020ae:	5e                   	pop    esi
c00020af:	c3                   	ret    

c00020b0 <test_gpt_header>:
c00020b0:	55                   	push   ebp
c00020b1:	b9 10 00 00 00       	mov    ecx,0x10
c00020b6:	57                   	push   edi
c00020b7:	ba e0 5c 02 c0       	mov    edx,0xc0025ce0
c00020bc:	56                   	push   esi
c00020bd:	31 ff                	xor    edi,edi
c00020bf:	53                   	push   ebx
c00020c0:	89 c3                	mov    ebx,eax
c00020c2:	e8 2c fa ff ff       	call   c0001af3 <mem_cmp>
c00020c7:	85 c0                	test   eax,eax
c00020c9:	75 55                	jne    c0002120 <test_gpt_header+0x70>
c00020cb:	89 c7                	mov    edi,eax
c00020cd:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020d2:	83 ce ff             	or     esi,0xffffffff
c00020d5:	31 d2                	xor    edx,edx
c00020d7:	83 fd 03             	cmp    ebp,0x3
c00020da:	76 05                	jbe    c00020e1 <test_gpt_header+0x31>
c00020dc:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020e1:	89 f0                	mov    eax,esi
c00020e3:	45                   	inc    ebp
c00020e4:	e8 9a ff ff ff       	call   c0002083 <crc32>
c00020e9:	83 fd 4c             	cmp    ebp,0x4c
c00020ec:	89 c6                	mov    esi,eax
c00020ee:	75 e5                	jne    c00020d5 <test_gpt_header+0x25>
c00020f0:	8d 43 10             	lea    eax,[ebx+0x10]
c00020f3:	f7 d6                	not    esi
c00020f5:	e8 67 f9 ff ff       	call   c0001a61 <ld_dword>
c00020fa:	39 c6                	cmp    esi,eax
c00020fc:	75 22                	jne    c0002120 <test_gpt_header+0x70>
c00020fe:	8d 43 54             	lea    eax,[ebx+0x54]
c0002101:	e8 5b f9 ff ff       	call   c0001a61 <ld_dword>
c0002106:	83 c0 80             	add    eax,0xffffff80
c0002109:	75 15                	jne    c0002120 <test_gpt_header+0x70>
c000210b:	8d 43 50             	lea    eax,[ebx+0x50]
c000210e:	e8 4e f9 ff ff       	call   c0001a61 <ld_dword>
c0002113:	3d 80 00 00 00       	cmp    eax,0x80
c0002118:	0f 96 c0             	setbe  al
c000211b:	0f b6 c0             	movzx  eax,al
c000211e:	89 c7                	mov    edi,eax
c0002120:	5b                   	pop    ebx
c0002121:	89 f8                	mov    eax,edi
c0002123:	5e                   	pop    esi
c0002124:	5f                   	pop    edi
c0002125:	5d                   	pop    ebp
c0002126:	c3                   	ret    

c0002127 <make_rand>:
c0002127:	56                   	push   esi
c0002128:	85 c0                	test   eax,eax
c000212a:	53                   	push   ebx
c000212b:	75 05                	jne    c0002132 <make_rand+0xb>
c000212d:	b8 01 00 00 00       	mov    eax,0x1
c0002132:	01 d1                	add    ecx,edx
c0002134:	bb 08 00 00 00       	mov    ebx,0x8
c0002139:	89 c6                	mov    esi,eax
c000213b:	d1 e8                	shr    eax,1
c000213d:	83 e6 01             	and    esi,0x1
c0002140:	85 f6                	test   esi,esi
c0002142:	74 05                	je     c0002149 <make_rand+0x22>
c0002144:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002149:	4b                   	dec    ebx
c000214a:	75 ed                	jne    c0002139 <make_rand+0x12>
c000214c:	42                   	inc    edx
c000214d:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002150:	39 ca                	cmp    edx,ecx
c0002152:	75 e0                	jne    c0002134 <make_rand+0xd>
c0002154:	5b                   	pop    ebx
c0002155:	5e                   	pop    esi
c0002156:	c3                   	ret    

c0002157 <validate>:
c0002157:	56                   	push   esi
c0002158:	53                   	push   ebx
c0002159:	89 d6                	mov    esi,edx
c000215b:	51                   	push   ecx
c000215c:	85 c0                	test   eax,eax
c000215e:	75 09                	jne    c0002169 <validate+0x12>
c0002160:	b8 09 00 00 00       	mov    eax,0x9
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	eb 2f                	jmp    c0002198 <validate+0x41>
c0002169:	89 c3                	mov    ebx,eax
c000216b:	8b 00                	mov    eax,DWORD PTR [eax]
c000216d:	85 c0                	test   eax,eax
c000216f:	74 ef                	je     c0002160 <validate+0x9>
c0002171:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002174:	74 ea                	je     c0002160 <validate+0x9>
c0002176:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000217a:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000217e:	75 e0                	jne    c0002160 <validate+0x9>
c0002180:	83 ec 0c             	sub    esp,0xc
c0002183:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002187:	50                   	push   eax
c0002188:	e8 76 f8 ff ff       	call   c0001a03 <disk_status>
c000218d:	83 c4 10             	add    esp,0x10
c0002190:	a8 01                	test   al,0x1
c0002192:	75 cc                	jne    c0002160 <validate+0x9>
c0002194:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002196:	31 c0                	xor    eax,eax
c0002198:	89 0e                	mov    DWORD PTR [esi],ecx
c000219a:	5a                   	pop    edx
c000219b:	5b                   	pop    ebx
c000219c:	5e                   	pop    esi
c000219d:	c3                   	ret    

c000219e <sync_window>:
c000219e:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021a2:	0f 84 85 00 00 00    	je     c000222d <sync_window+0x8f>
c00021a8:	55                   	push   ebp
c00021a9:	8d 68 54             	lea    ebp,[eax+0x54]
c00021ac:	57                   	push   edi
c00021ad:	56                   	push   esi
c00021ae:	53                   	push   ebx
c00021af:	89 c3                	mov    ebx,eax
c00021b1:	83 ec 28             	sub    esp,0x28
c00021b4:	6a 01                	push   0x1
c00021b6:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021b9:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021bc:	55                   	push   ebp
c00021bd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021c1:	50                   	push   eax
c00021c2:	e8 58 f8 ff ff       	call   c0001a1f <disk_write>
c00021c7:	83 c4 20             	add    esp,0x20
c00021ca:	ba 01 00 00 00       	mov    edx,0x1
c00021cf:	85 c0                	test   eax,eax
c00021d1:	75 50                	jne    c0002223 <sync_window+0x85>
c00021d3:	31 ff                	xor    edi,edi
c00021d5:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021d8:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021dc:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021e0:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021e3:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021e6:	89 c6                	mov    esi,eax
c00021e8:	89 d7                	mov    edi,edx
c00021ea:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021ed:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021f1:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021f4:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021f8:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021fc:	73 23                	jae    c0002221 <sync_window+0x83>
c00021fe:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002202:	75 1d                	jne    c0002221 <sync_window+0x83>
c0002204:	83 ec 0c             	sub    esp,0xc
c0002207:	6a 01                	push   0x1
c0002209:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000220d:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002211:	52                   	push   edx
c0002212:	50                   	push   eax
c0002213:	55                   	push   ebp
c0002214:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002218:	50                   	push   eax
c0002219:	e8 01 f8 ff ff       	call   c0001a1f <disk_write>
c000221e:	83 c4 20             	add    esp,0x20
c0002221:	31 d2                	xor    edx,edx
c0002223:	83 c4 1c             	add    esp,0x1c
c0002226:	89 d0                	mov    eax,edx
c0002228:	5b                   	pop    ebx
c0002229:	5e                   	pop    esi
c000222a:	5f                   	pop    edi
c000222b:	5d                   	pop    ebp
c000222c:	c3                   	ret    
c000222d:	31 d2                	xor    edx,edx
c000222f:	89 d0                	mov    eax,edx
c0002231:	c3                   	ret    

c0002232 <move_window>:
c0002232:	56                   	push   esi
c0002233:	53                   	push   ebx
c0002234:	89 c3                	mov    ebx,eax
c0002236:	83 ec 14             	sub    esp,0x14
c0002239:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000223c:	75 07                	jne    c0002245 <move_window+0x13>
c000223e:	31 f6                	xor    esi,esi
c0002240:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002243:	74 59                	je     c000229e <move_window+0x6c>
c0002245:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002249:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000224d:	89 d8                	mov    eax,ebx
c000224f:	e8 4a ff ff ff       	call   c000219e <sync_window>
c0002254:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002260:	75 3c                	jne    c000229e <move_window+0x6c>
c0002262:	83 ec 0c             	sub    esp,0xc
c0002265:	8d 43 54             	lea    eax,[ebx+0x54]
c0002268:	6a 01                	push   0x1
c000226a:	51                   	push   ecx
c000226b:	52                   	push   edx
c000226c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002270:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002274:	50                   	push   eax
c0002275:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002279:	50                   	push   eax
c000227a:	e8 8a f7 ff ff       	call   c0001a09 <disk_read>
c000227f:	83 c4 20             	add    esp,0x20
c0002282:	85 c0                	test   eax,eax
c0002284:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002288:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000228c:	74 0a                	je     c0002298 <move_window+0x66>
c000228e:	83 ca ff             	or     edx,0xffffffff
c0002291:	be 01 00 00 00       	mov    esi,0x1
c0002296:	89 d1                	mov    ecx,edx
c0002298:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000229b:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000229e:	89 f0                	mov    eax,esi
c00022a0:	83 c4 14             	add    esp,0x14
c00022a3:	5b                   	pop    ebx
c00022a4:	5e                   	pop    esi
c00022a5:	c3                   	ret    

c00022a6 <check_fs>:
c00022a6:	53                   	push   ebx
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	83 ec 08             	sub    esp,0x8
c00022ac:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022b0:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022b7:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022be:	e8 6f ff ff ff       	call   c0002232 <move_window>
c00022c3:	ba 04 00 00 00       	mov    edx,0x4
c00022c8:	85 c0                	test   eax,eax
c00022ca:	0f 85 89 00 00 00    	jne    c0002359 <check_fs+0xb3>
c00022d0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022d6:	e8 79 f7 ff ff       	call   c0001a54 <ld_word>
c00022db:	ba 03 00 00 00       	mov    edx,0x3
c00022e0:	66 3d 55 aa          	cmp    ax,0xaa55
c00022e4:	75 73                	jne    c0002359 <check_fs+0xb3>
c00022e6:	ba 00 5e 02 c0       	mov    edx,0xc0025e00
c00022eb:	8d 43 54             	lea    eax,[ebx+0x54]
c00022ee:	b9 0b 00 00 00       	mov    ecx,0xb
c00022f3:	e8 fb f7 ff ff       	call   c0001af3 <mem_cmp>
c00022f8:	ba 01 00 00 00       	mov    edx,0x1
c00022fd:	85 c0                	test   eax,eax
c00022ff:	74 58                	je     c0002359 <check_fs+0xb3>
c0002301:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002304:	8d 50 18             	lea    edx,[eax+0x18]
c0002307:	80 fa 01             	cmp    dl,0x1
c000230a:	76 09                	jbe    c0002315 <check_fs+0x6f>
c000230c:	ba 02 00 00 00       	mov    edx,0x2
c0002311:	3c eb                	cmp    al,0xeb
c0002313:	75 44                	jne    c0002359 <check_fs+0xb3>
c0002315:	ba b8 8a 02 c0       	mov    edx,0xc0028ab8
c000231a:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002320:	b9 03 00 00 00       	mov    ecx,0x3
c0002325:	e8 c9 f7 ff ff       	call   c0001af3 <mem_cmp>
c000232a:	31 d2                	xor    edx,edx
c000232c:	85 c0                	test   eax,eax
c000232e:	74 29                	je     c0002359 <check_fs+0xb3>
c0002330:	ba 0c 5e 02 c0       	mov    edx,0xc0025e0c
c0002335:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000233b:	b9 05 00 00 00       	mov    ecx,0x5
c0002340:	e8 ae f7 ff ff       	call   c0001af3 <mem_cmp>
c0002345:	31 d2                	xor    edx,edx
c0002347:	85 c0                	test   eax,eax
c0002349:	74 0e                	je     c0002359 <check_fs+0xb3>
c000234b:	31 d2                	xor    edx,edx
c000234d:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002354:	0f 95 c2             	setne  dl
c0002357:	01 d2                	add    edx,edx
c0002359:	89 d0                	mov    eax,edx
c000235b:	83 c4 08             	add    esp,0x8
c000235e:	5b                   	pop    ebx
c000235f:	c3                   	ret    

c0002360 <find_volume>:
c0002360:	55                   	push   ebp
c0002361:	31 c9                	xor    ecx,ecx
c0002363:	57                   	push   edi
c0002364:	56                   	push   esi
c0002365:	89 d6                	mov    esi,edx
c0002367:	53                   	push   ebx
c0002368:	31 d2                	xor    edx,edx
c000236a:	83 ec 3c             	sub    esp,0x3c
c000236d:	89 c3                	mov    ebx,eax
c000236f:	e8 32 ff ff ff       	call   c00022a6 <check_fs>
c0002374:	83 f8 02             	cmp    eax,0x2
c0002377:	74 0e                	je     c0002387 <find_volume+0x27>
c0002379:	0f 87 5d 01 00 00    	ja     c00024dc <find_volume+0x17c>
c000237f:	85 f6                	test   esi,esi
c0002381:	0f 84 55 01 00 00    	je     c00024dc <find_volume+0x17c>
c0002387:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000238e:	0f 85 dd 00 00 00    	jne    c0002471 <find_volume+0x111>
c0002394:	31 c9                	xor    ecx,ecx
c0002396:	ba 01 00 00 00       	mov    edx,0x1
c000239b:	89 d8                	mov    eax,ebx
c000239d:	e8 90 fe ff ff       	call   c0002232 <move_window>
c00023a2:	85 c0                	test   eax,eax
c00023a4:	74 0a                	je     c00023b0 <find_volume+0x50>
c00023a6:	b8 04 00 00 00       	mov    eax,0x4
c00023ab:	e9 2c 01 00 00       	jmp    c00024dc <find_volume+0x17c>
c00023b0:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00023b3:	89 e8                	mov    eax,ebp
c00023b5:	e8 f6 fc ff ff       	call   c00020b0 <test_gpt_header>
c00023ba:	85 c0                	test   eax,eax
c00023bc:	75 0a                	jne    c00023c8 <find_volume+0x68>
c00023be:	b8 03 00 00 00       	mov    eax,0x3
c00023c3:	e9 14 01 00 00       	jmp    c00024dc <find_volume+0x17c>
c00023c8:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023ce:	e8 8e f6 ff ff       	call   c0001a61 <ld_dword>
c00023d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023d7:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023dd:	e8 97 f6 ff ff       	call   c0001a79 <ld_qword>
c00023e2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023f2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023fa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023fe:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002402:	74 ba                	je     c00023be <find_volume+0x5e>
c0002404:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002408:	31 c9                	xor    ecx,ecx
c000240a:	c1 e7 07             	shl    edi,0x7
c000240d:	89 d8                	mov    eax,ebx
c000240f:	89 fa                	mov    edx,edi
c0002411:	c1 ea 09             	shr    edx,0x9
c0002414:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002418:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c000241c:	e8 11 fe ff ff       	call   c0002232 <move_window>
c0002421:	85 c0                	test   eax,eax
c0002423:	75 81                	jne    c00023a6 <find_volume+0x46>
c0002425:	81 e7 80 01 00 00    	and    edi,0x180
c000242b:	b9 10 00 00 00       	mov    ecx,0x10
c0002430:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002434:	ba f0 5d 02 c0       	mov    edx,0xc0025df0
c0002439:	e8 b5 f6 ff ff       	call   c0001af3 <mem_cmp>
c000243e:	85 c0                	test   eax,eax
c0002440:	75 29                	jne    c000246b <find_volume+0x10b>
c0002442:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002446:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000244a:	e8 2a f6 ff ff       	call   c0001a79 <ld_qword>
c000244f:	89 d1                	mov    ecx,edx
c0002451:	89 c2                	mov    edx,eax
c0002453:	89 d8                	mov    eax,ebx
c0002455:	e8 4c fe ff ff       	call   c00022a6 <check_fs>
c000245a:	85 f6                	test   esi,esi
c000245c:	75 07                	jne    c0002465 <find_volume+0x105>
c000245e:	83 f8 01             	cmp    eax,0x1
c0002461:	77 08                	ja     c000246b <find_volume+0x10b>
c0002463:	eb 77                	jmp    c00024dc <find_volume+0x17c>
c0002465:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002469:	74 71                	je     c00024dc <find_volume+0x17c>
c000246b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000246f:	eb 89                	jmp    c00023fa <find_volume+0x9a>
c0002471:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002475:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000247b:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	89 cd                	mov    ebp,ecx
c0002487:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000248b:	89 f8                	mov    eax,edi
c000248d:	83 c7 10             	add    edi,0x10
c0002490:	e8 cc f5 ff ff       	call   c0001a61 <ld_dword>
c0002495:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002499:	89 01                	mov    DWORD PTR [ecx],eax
c000249b:	83 c1 04             	add    ecx,0x4
c000249e:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00024a2:	75 e3                	jne    c0002487 <find_volume+0x127>
c00024a4:	31 ff                	xor    edi,edi
c00024a6:	85 f6                	test   esi,esi
c00024a8:	74 03                	je     c00024ad <find_volume+0x14d>
c00024aa:	8d 7e ff             	lea    edi,[esi-0x1]
c00024ad:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00024b1:	85 d2                	test   edx,edx
c00024b3:	74 14                	je     c00024c9 <find_volume+0x169>
c00024b5:	31 c9                	xor    ecx,ecx
c00024b7:	89 d8                	mov    eax,ebx
c00024b9:	e8 e8 fd ff ff       	call   c00022a6 <check_fs>
c00024be:	83 f8 01             	cmp    eax,0x1
c00024c1:	76 19                	jbe    c00024dc <find_volume+0x17c>
c00024c3:	85 f6                	test   esi,esi
c00024c5:	74 0f                	je     c00024d6 <find_volume+0x176>
c00024c7:	eb 13                	jmp    c00024dc <find_volume+0x17c>
c00024c9:	85 f6                	test   esi,esi
c00024cb:	0f 85 ed fe ff ff    	jne    c00023be <find_volume+0x5e>
c00024d1:	b8 03 00 00 00       	mov    eax,0x3
c00024d6:	47                   	inc    edi
c00024d7:	83 ff 03             	cmp    edi,0x3
c00024da:	76 d1                	jbe    c00024ad <find_volume+0x14d>
c00024dc:	83 c4 3c             	add    esp,0x3c
c00024df:	5b                   	pop    ebx
c00024e0:	5e                   	pop    esi
c00024e1:	5f                   	pop    edi
c00024e2:	5d                   	pop    ebp
c00024e3:	c3                   	ret    

c00024e4 <mount_volume>:
c00024e4:	55                   	push   ebp
c00024e5:	57                   	push   edi
c00024e6:	89 cf                	mov    edi,ecx
c00024e8:	56                   	push   esi
c00024e9:	53                   	push   ebx
c00024ea:	bb 0b 00 00 00       	mov    ebx,0xb
c00024ef:	83 ec 3c             	sub    esp,0x3c
c00024f2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024f8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024fc:	e8 35 fb ff ff       	call   c0002036 <get_ldnumber>
c0002501:	85 c0                	test   eax,eax
c0002503:	0f 88 3a 05 00 00    	js     c0002a43 <mount_volume+0x55f>
c0002509:	8b 2c 85 a0 a3 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd5c60]
c0002510:	89 c6                	mov    esi,eax
c0002512:	bb 0c 00 00 00       	mov    ebx,0xc
c0002517:	85 ed                	test   ebp,ebp
c0002519:	0f 84 24 05 00 00    	je     c0002a43 <mount_volume+0x55f>
c000251f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002523:	83 e7 fe             	and    edi,0xfffffffe
c0002526:	89 2a                	mov    DWORD PTR [edx],ebp
c0002528:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000252c:	74 32                	je     c0002560 <mount_volume+0x7c>
c000252e:	83 ec 0c             	sub    esp,0xc
c0002531:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002535:	50                   	push   eax
c0002536:	e8 c8 f4 ff ff       	call   c0001a03 <disk_status>
c000253b:	83 c4 10             	add    esp,0x10
c000253e:	a8 01                	test   al,0x1
c0002540:	75 1e                	jne    c0002560 <mount_volume+0x7c>
c0002542:	31 db                	xor    ebx,ebx
c0002544:	89 f9                	mov    ecx,edi
c0002546:	84 c9                	test   cl,cl
c0002548:	0f 84 f5 04 00 00    	je     c0002a43 <mount_volume+0x55f>
c000254e:	a8 04                	test   al,0x4
c0002550:	0f 84 ed 04 00 00    	je     c0002a43 <mount_volume+0x55f>
c0002556:	bb 0a 00 00 00       	mov    ebx,0xa
c000255b:	e9 e3 04 00 00       	jmp    c0002a43 <mount_volume+0x55f>
c0002560:	83 ec 0c             	sub    esp,0xc
c0002563:	89 f0                	mov    eax,esi
c0002565:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002569:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000256c:	0f b6 f0             	movzx  esi,al
c000256f:	bb 03 00 00 00       	mov    ebx,0x3
c0002574:	56                   	push   esi
c0002575:	e8 8c f4 ff ff       	call   c0001a06 <disk_initialize>
c000257a:	83 c4 10             	add    esp,0x10
c000257d:	a8 01                	test   al,0x1
c000257f:	0f 85 be 04 00 00    	jne    c0002a43 <mount_volume+0x55f>
c0002585:	89 f9                	mov    ecx,edi
c0002587:	84 c9                	test   cl,cl
c0002589:	74 04                	je     c000258f <mount_volume+0xab>
c000258b:	a8 04                	test   al,0x4
c000258d:	75 c7                	jne    c0002556 <mount_volume+0x72>
c000258f:	31 d2                	xor    edx,edx
c0002591:	89 e8                	mov    eax,ebp
c0002593:	e8 c8 fd ff ff       	call   c0002360 <find_volume>
c0002598:	83 f8 04             	cmp    eax,0x4
c000259b:	75 0a                	jne    c00025a7 <mount_volume+0xc3>
c000259d:	bb 01 00 00 00       	mov    ebx,0x1
c00025a2:	e9 9c 04 00 00       	jmp    c0002a43 <mount_volume+0x55f>
c00025a7:	83 f8 01             	cmp    eax,0x1
c00025aa:	76 0a                	jbe    c00025b6 <mount_volume+0xd2>
c00025ac:	bb 0d 00 00 00       	mov    ebx,0xd
c00025b1:	e9 8d 04 00 00       	jmp    c0002a43 <mount_volume+0x55f>
c00025b6:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00025b9:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00025bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025c4:	75 17                	jne    c00025dd <mount_volume+0xf9>
c00025c6:	b8 0b 00 00 00       	mov    eax,0xb
c00025cb:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025d0:	75 da                	jne    c00025ac <mount_volume+0xc8>
c00025d2:	40                   	inc    eax
c00025d3:	83 f8 40             	cmp    eax,0x40
c00025d6:	75 f3                	jne    c00025cb <mount_volume+0xe7>
c00025d8:	e9 5a 02 00 00       	jmp    c0002837 <mount_volume+0x353>
c00025dd:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025e0:	e8 6f f4 ff ff       	call   c0001a54 <ld_word>
c00025e5:	66 3d 00 02          	cmp    ax,0x200
c00025e9:	75 c1                	jne    c00025ac <mount_volume+0xc8>
c00025eb:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025ee:	e8 61 f4 ff ff       	call   c0001a54 <ld_word>
c00025f3:	0f b7 c0             	movzx  eax,ax
c00025f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025fa:	85 c0                	test   eax,eax
c00025fc:	75 0c                	jne    c000260a <mount_volume+0x126>
c00025fe:	8d 45 78             	lea    eax,[ebp+0x78]
c0002601:	e8 5b f4 ff ff       	call   c0001a61 <ld_dword>
c0002606:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000260a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000260e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002611:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002614:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002618:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000261b:	48                   	dec    eax
c000261c:	3c 01                	cmp    al,0x1
c000261e:	77 8c                	ja     c00025ac <mount_volume+0xc8>
c0002620:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002624:	89 c3                	mov    ebx,eax
c0002626:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c000262a:	66 85 c0             	test   ax,ax
c000262d:	0f 84 79 ff ff ff    	je     c00025ac <mount_volume+0xc8>
c0002633:	8d 40 ff             	lea    eax,[eax-0x1]
c0002636:	85 d8                	test   eax,ebx
c0002638:	0f 85 6e ff ff ff    	jne    c00025ac <mount_volume+0xc8>
c000263e:	8d 45 65             	lea    eax,[ebp+0x65]
c0002641:	e8 0e f4 ff ff       	call   c0001a54 <ld_word>
c0002646:	89 c7                	mov    edi,eax
c0002648:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000264c:	a8 0f                	test   al,0xf
c000264e:	0f 85 58 ff ff ff    	jne    c00025ac <mount_volume+0xc8>
c0002654:	8d 45 67             	lea    eax,[ebp+0x67]
c0002657:	e8 f8 f3 ff ff       	call   c0001a54 <ld_word>
c000265c:	0f b7 f0             	movzx  esi,ax
c000265f:	85 f6                	test   esi,esi
c0002661:	75 0a                	jne    c000266d <mount_volume+0x189>
c0002663:	8d 45 74             	lea    eax,[ebp+0x74]
c0002666:	e8 f6 f3 ff ff       	call   c0001a61 <ld_dword>
c000266b:	89 c6                	mov    esi,eax
c000266d:	8d 45 62             	lea    eax,[ebp+0x62]
c0002670:	e8 df f3 ff ff       	call   c0001a54 <ld_word>
c0002675:	66 85 c0             	test   ax,ax
c0002678:	0f 84 2e ff ff ff    	je     c00025ac <mount_volume+0xc8>
c000267e:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002683:	0f b7 c8             	movzx  ecx,ax
c0002686:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000268b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000268f:	89 fa                	mov    edx,edi
c0002691:	66 c1 ea 04          	shr    dx,0x4
c0002695:	0f b7 d2             	movzx  edx,dx
c0002698:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000269c:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000269f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00026a3:	39 c6                	cmp    esi,eax
c00026a5:	0f 82 01 ff ff ff    	jb     c00025ac <mount_volume+0xc8>
c00026ab:	29 c6                	sub    esi,eax
c00026ad:	31 d2                	xor    edx,edx
c00026af:	89 f0                	mov    eax,esi
c00026b1:	f7 f3                	div    ebx
c00026b3:	39 de                	cmp    esi,ebx
c00026b5:	0f 82 f1 fe ff ff    	jb     c00025ac <mount_volume+0xc8>
c00026bb:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026c0:	0f 87 e6 fe ff ff    	ja     c00025ac <mount_volume+0xc8>
c00026c6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026cb:	0f 86 63 03 00 00    	jbe    c0002a34 <mount_volume+0x550>
c00026d1:	bb 03 00 00 00       	mov    ebx,0x3
c00026d6:	8d 70 02             	lea    esi,[eax+0x2]
c00026d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026e1:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026e4:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026e7:	31 d2                	xor    edx,edx
c00026e9:	89 c8                	mov    eax,ecx
c00026eb:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026ee:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026f2:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026fa:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026fe:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002701:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002704:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002708:	31 d2                	xor    edx,edx
c000270a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000270e:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002712:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002715:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002718:	83 fb 03             	cmp    ebx,0x3
c000271b:	75 2b                	jne    c0002748 <mount_volume+0x264>
c000271d:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002720:	e8 2f f3 ff ff       	call   c0001a54 <ld_word>
c0002725:	66 09 c7             	or     di,ax
c0002728:	0f 85 7e fe ff ff    	jne    c00025ac <mount_volume+0xc8>
c000272e:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002734:	c1 e6 02             	shl    esi,0x2
c0002737:	e8 25 f3 ff ff       	call   c0001a61 <ld_dword>
c000273c:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002743:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002746:	eb 30                	jmp    c0002778 <mount_volume+0x294>
c0002748:	66 85 ff             	test   di,di
c000274b:	0f 84 5b fe ff ff    	je     c00025ac <mount_volume+0xc8>
c0002751:	31 d2                	xor    edx,edx
c0002753:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002757:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000275b:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000275f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002762:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002765:	83 fb 02             	cmp    ebx,0x2
c0002768:	75 04                	jne    c000276e <mount_volume+0x28a>
c000276a:	01 f6                	add    esi,esi
c000276c:	eb 0a                	jmp    c0002778 <mount_volume+0x294>
c000276e:	8d 04 76             	lea    eax,[esi+esi*2]
c0002771:	83 e6 01             	and    esi,0x1
c0002774:	d1 e8                	shr    eax,1
c0002776:	01 c6                	add    esi,eax
c0002778:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000277e:	c1 ee 09             	shr    esi,0x9
c0002781:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002785:	0f 87 21 fe ff ff    	ja     c00025ac <mount_volume+0xc8>
c000278b:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002792:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002799:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000279d:	83 fb 03             	cmp    ebx,0x3
c00027a0:	75 7a                	jne    c000281c <mount_volume+0x338>
c00027a2:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00027a8:	e8 a7 f2 ff ff       	call   c0001a54 <ld_word>
c00027ad:	66 48                	dec    ax
c00027af:	75 6b                	jne    c000281c <mount_volume+0x338>
c00027b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00027b5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027b9:	83 c2 01             	add    edx,0x1
c00027bc:	89 e8                	mov    eax,ebp
c00027be:	83 d1 00             	adc    ecx,0x0
c00027c1:	e8 6c fa ff ff       	call   c0002232 <move_window>
c00027c6:	85 c0                	test   eax,eax
c00027c8:	75 52                	jne    c000281c <mount_volume+0x338>
c00027ca:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027ce:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027d4:	e8 7b f2 ff ff       	call   c0001a54 <ld_word>
c00027d9:	66 3d 55 aa          	cmp    ax,0xaa55
c00027dd:	75 3d                	jne    c000281c <mount_volume+0x338>
c00027df:	8d 45 54             	lea    eax,[ebp+0x54]
c00027e2:	e8 7a f2 ff ff       	call   c0001a61 <ld_dword>
c00027e7:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027ec:	75 2e                	jne    c000281c <mount_volume+0x338>
c00027ee:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027f4:	e8 68 f2 ff ff       	call   c0001a61 <ld_dword>
c00027f9:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027fe:	75 1c                	jne    c000281c <mount_volume+0x338>
c0002800:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002806:	e8 56 f2 ff ff       	call   c0001a61 <ld_dword>
c000280b:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c000280e:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002814:	e8 48 f2 ff ff       	call   c0001a61 <ld_dword>
c0002819:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c000281c:	66 a1 80 a3 02 c0    	mov    ax,ds:0xc002a380
c0002822:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002825:	40                   	inc    eax
c0002826:	31 db                	xor    ebx,ebx
c0002828:	66 a3 80 a3 02 c0    	mov    ds:0xc002a380,ax
c000282e:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002832:	e9 0c 02 00 00       	jmp    c0002a43 <mount_volume+0x55f>
c0002837:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c000283d:	e8 12 f2 ff ff       	call   c0001a54 <ld_word>
c0002842:	66 3d 00 01          	cmp    ax,0x100
c0002846:	0f 85 60 fd ff ff    	jne    c00025ac <mount_volume+0xc8>
c000284c:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002853:	0f 85 53 fd ff ff    	jne    c00025ac <mount_volume+0xc8>
c0002859:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000285f:	e8 15 f2 ff ff       	call   c0001a79 <ld_qword>
c0002864:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002868:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000286c:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002872:	e8 ea f1 ff ff       	call   c0001a61 <ld_dword>
c0002877:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000287a:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002880:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002883:	fe c8                	dec    al
c0002885:	0f 85 21 fd ff ff    	jne    c00025ac <mount_volume+0xc8>
c000288b:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002892:	bb 01 00 00 00       	mov    ebx,0x1
c0002897:	d3 e3                	shl    ebx,cl
c0002899:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000289d:	66 85 db             	test   bx,bx
c00028a0:	0f 84 06 fd ff ff    	je     c00025ac <mount_volume+0xc8>
c00028a6:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00028ac:	e8 b0 f1 ff ff       	call   c0001a61 <ld_dword>
c00028b1:	89 c6                	mov    esi,eax
c00028b3:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00028b8:	0f 87 ee fc ff ff    	ja     c00025ac <mount_volume+0xc8>
c00028be:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028c2:	8d 40 02             	lea    eax,[eax+0x2]
c00028c5:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028c8:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028cf:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028d2:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028d8:	e8 84 f1 ff ff       	call   c0001a61 <ld_dword>
c00028dd:	31 d2                	xor    edx,edx
c00028df:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e3:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028ef:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028f2:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028f5:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028fb:	e8 61 f1 ff ff       	call   c0001a61 <ld_dword>
c0002900:	31 d2                	xor    edx,edx
c0002902:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002906:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000290a:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000290e:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002911:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002914:	0f b7 c3             	movzx  eax,bx
c0002917:	31 d2                	xor    edx,edx
c0002919:	0f af f0             	imul   esi,eax
c000291c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002920:	89 f0                	mov    eax,esi
c0002922:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002926:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c000292a:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000292e:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002932:	39 c1                	cmp    ecx,eax
c0002934:	89 df                	mov    edi,ebx
c0002936:	19 d7                	sbb    edi,edx
c0002938:	0f 82 6e fc ff ff    	jb     c00025ac <mount_volume+0xc8>
c000293e:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002944:	31 db                	xor    ebx,ebx
c0002946:	e8 16 f1 ff ff       	call   c0001a61 <ld_dword>
c000294b:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002952:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002955:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000295d:	85 db                	test   ebx,ebx
c000295f:	75 39                	jne    c000299a <mount_volume+0x4b6>
c0002961:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002965:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002969:	0f 86 3d fc ff ff    	jbe    c00025ac <mount_volume+0xc8>
c000296f:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002972:	31 ff                	xor    edi,edi
c0002974:	89 e8                	mov    eax,ebp
c0002976:	e8 72 f3 ff ff       	call   c0001ced <clst2sect>
c000297b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000297f:	01 c6                	add    esi,eax
c0002981:	89 e8                	mov    eax,ebp
c0002983:	11 d7                	adc    edi,edx
c0002985:	89 f2                	mov    edx,esi
c0002987:	89 f9                	mov    ecx,edi
c0002989:	e8 a4 f8 ff ff       	call   c0002232 <move_window>
c000298e:	85 c0                	test   eax,eax
c0002990:	0f 85 07 fc ff ff    	jne    c000259d <mount_volume+0xb9>
c0002996:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000299a:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000299f:	74 0b                	je     c00029ac <mount_volume+0x4c8>
c00029a1:	83 c3 20             	add    ebx,0x20
c00029a4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00029aa:	eb b1                	jmp    c000295d <mount_volume+0x479>
c00029ac:	8d 75 54             	lea    esi,[ebp+0x54]
c00029af:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00029b3:	e8 a9 f0 ff ff       	call   c0001a61 <ld_dword>
c00029b8:	89 c3                	mov    ebx,eax
c00029ba:	83 f8 01             	cmp    eax,0x1
c00029bd:	0f 86 e9 fb ff ff    	jbe    c00025ac <mount_volume+0xc8>
c00029c3:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029c6:	0f 86 e0 fb ff ff    	jbe    c00025ac <mount_volume+0xc8>
c00029cc:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029cf:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029d3:	0f af c2             	imul   eax,edx
c00029d6:	31 d2                	xor    edx,edx
c00029d8:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029db:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029de:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029e1:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029e4:	31 c9                	xor    ecx,ecx
c00029e6:	89 da                	mov    edx,ebx
c00029e8:	89 e8                	mov    eax,ebp
c00029ea:	c1 ea 07             	shr    edx,0x7
c00029ed:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029f0:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029f3:	e8 3a f8 ff ff       	call   c0002232 <move_window>
c00029f8:	85 c0                	test   eax,eax
c00029fa:	0f 85 9d fb ff ff    	jne    c000259d <mount_volume+0xb9>
c0002a00:	89 d8                	mov    eax,ebx
c0002a02:	83 e0 7f             	and    eax,0x7f
c0002a05:	8d 04 86             	lea    eax,[esi+eax*4]
c0002a08:	e8 54 f0 ff ff       	call   c0001a61 <ld_dword>
c0002a0d:	83 f8 ff             	cmp    eax,0xffffffff
c0002a10:	74 0a                	je     c0002a1c <mount_volume+0x538>
c0002a12:	43                   	inc    ebx
c0002a13:	39 d8                	cmp    eax,ebx
c0002a15:	74 cd                	je     c00029e4 <mount_volume+0x500>
c0002a17:	e9 90 fb ff ff       	jmp    c00025ac <mount_volume+0xc8>
c0002a1c:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a23:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a2a:	bb 04 00 00 00       	mov    ebx,0x4
c0002a2f:	e9 e8 fd ff ff       	jmp    c000281c <mount_volume+0x338>
c0002a34:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002a39:	19 db                	sbb    ebx,ebx
c0002a3b:	83 c3 02             	add    ebx,0x2
c0002a3e:	e9 93 fc ff ff       	jmp    c00026d6 <mount_volume+0x1f2>
c0002a43:	83 c4 3c             	add    esp,0x3c
c0002a46:	89 d8                	mov    eax,ebx
c0002a48:	5b                   	pop    ebx
c0002a49:	5e                   	pop    esi
c0002a4a:	5f                   	pop    edi
c0002a4b:	5d                   	pop    ebp
c0002a4c:	c3                   	ret    

c0002a4d <find_bitmap>:
c0002a4d:	55                   	push   ebp
c0002a4e:	57                   	push   edi
c0002a4f:	89 c7                	mov    edi,eax
c0002a51:	56                   	push   esi
c0002a52:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a55:	53                   	push   ebx
c0002a56:	83 ec 1c             	sub    esp,0x1c
c0002a59:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a5c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a60:	83 e8 02             	sub    eax,0x2
c0002a63:	39 f0                	cmp    eax,esi
c0002a65:	77 02                	ja     c0002a69 <find_bitmap+0x1c>
c0002a67:	31 f6                	xor    esi,esi
c0002a69:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a6d:	89 f3                	mov    ebx,esi
c0002a6f:	31 ed                	xor    ebp,ebp
c0002a71:	31 c9                	xor    ecx,ecx
c0002a73:	89 da                	mov    edx,ebx
c0002a75:	89 f8                	mov    eax,edi
c0002a77:	c1 ea 0c             	shr    edx,0xc
c0002a7a:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a7d:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a80:	e8 ad f7 ff ff       	call   c0002232 <move_window>
c0002a85:	85 c0                	test   eax,eax
c0002a87:	75 68                	jne    c0002af1 <find_bitmap+0xa4>
c0002a89:	89 da                	mov    edx,ebx
c0002a8b:	89 d9                	mov    ecx,ebx
c0002a8d:	c1 ea 03             	shr    edx,0x3
c0002a90:	83 e1 07             	and    ecx,0x7
c0002a93:	b8 01 00 00 00       	mov    eax,0x1
c0002a98:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a9e:	d3 e0                	shl    eax,cl
c0002aa0:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002aa3:	83 e9 02             	sub    ecx,0x2
c0002aa6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002aaa:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002aae:	43                   	inc    ebx
c0002aaf:	21 c1                	and    ecx,eax
c0002ab1:	d1 e0                	shl    eax,1
c0002ab3:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002ab7:	77 09                	ja     c0002ac2 <find_bitmap+0x75>
c0002ab9:	31 db                	xor    ebx,ebx
c0002abb:	ba 00 02 00 00       	mov    edx,0x200
c0002ac0:	31 c0                	xor    eax,eax
c0002ac2:	84 c9                	test   cl,cl
c0002ac4:	75 10                	jne    c0002ad6 <find_bitmap+0x89>
c0002ac6:	45                   	inc    ebp
c0002ac7:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002acb:	75 0f                	jne    c0002adc <find_bitmap+0x8f>
c0002acd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ad1:	83 c0 02             	add    eax,0x2
c0002ad4:	eb 22                	jmp    c0002af8 <find_bitmap+0xab>
c0002ad6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ada:	31 ed                	xor    ebp,ebp
c0002adc:	39 de                	cmp    esi,ebx
c0002ade:	74 16                	je     c0002af6 <find_bitmap+0xa9>
c0002ae0:	84 c0                	test   al,al
c0002ae2:	75 c6                	jne    c0002aaa <find_bitmap+0x5d>
c0002ae4:	42                   	inc    edx
c0002ae5:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002aeb:	77 84                	ja     c0002a71 <find_bitmap+0x24>
c0002aed:	b0 01                	mov    al,0x1
c0002aef:	eb b9                	jmp    c0002aaa <find_bitmap+0x5d>
c0002af1:	83 c8 ff             	or     eax,0xffffffff
c0002af4:	eb 02                	jmp    c0002af8 <find_bitmap+0xab>
c0002af6:	31 c0                	xor    eax,eax
c0002af8:	83 c4 1c             	add    esp,0x1c
c0002afb:	5b                   	pop    ebx
c0002afc:	5e                   	pop    esi
c0002afd:	5f                   	pop    edi
c0002afe:	5d                   	pop    ebp
c0002aff:	c3                   	ret    

c0002b00 <change_bitmap>:
c0002b00:	55                   	push   ebp
c0002b01:	89 cd                	mov    ebp,ecx
c0002b03:	57                   	push   edi
c0002b04:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002b07:	56                   	push   esi
c0002b08:	89 c7                	mov    edi,eax
c0002b0a:	53                   	push   ebx
c0002b0b:	89 c8                	mov    eax,ecx
c0002b0d:	83 ec 1c             	sub    esp,0x1c
c0002b10:	31 d2                	xor    edx,edx
c0002b12:	89 ce                	mov    esi,ecx
c0002b14:	c1 e8 0c             	shr    eax,0xc
c0002b17:	bb 01 00 00 00       	mov    ebx,0x1
c0002b1c:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002b1f:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b22:	c1 ee 03             	shr    esi,0x3
c0002b25:	83 e1 07             	and    ecx,0x7
c0002b28:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b2e:	d3 e3                	shl    ebx,cl
c0002b30:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b34:	89 c1                	mov    ecx,eax
c0002b36:	89 d3                	mov    ebx,edx
c0002b38:	83 c1 01             	add    ecx,0x1
c0002b3b:	83 d3 00             	adc    ebx,0x0
c0002b3e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b42:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b46:	89 d1                	mov    ecx,edx
c0002b48:	89 c2                	mov    edx,eax
c0002b4a:	89 f8                	mov    eax,edi
c0002b4c:	e8 e1 f6 ff ff       	call   c0002232 <move_window>
c0002b51:	89 c1                	mov    ecx,eax
c0002b53:	85 c0                	test   eax,eax
c0002b55:	75 48                	jne    c0002b9f <change_bitmap+0x9f>
c0002b57:	31 d2                	xor    edx,edx
c0002b59:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b5d:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b61:	0f 95 c2             	setne  dl
c0002b64:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b68:	74 3c                	je     c0002ba6 <change_bitmap+0xa6>
c0002b6a:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b6e:	4d                   	dec    ebp
c0002b6f:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b73:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b77:	74 32                	je     c0002bab <change_bitmap+0xab>
c0002b79:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b7d:	75 d8                	jne    c0002b57 <change_bitmap+0x57>
c0002b7f:	8d 46 01             	lea    eax,[esi+0x1]
c0002b82:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b87:	89 c3                	mov    ebx,eax
c0002b89:	31 f6                	xor    esi,esi
c0002b8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b8f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b93:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b99:	74 99                	je     c0002b34 <change_bitmap+0x34>
c0002b9b:	89 de                	mov    esi,ebx
c0002b9d:	eb b8                	jmp    c0002b57 <change_bitmap+0x57>
c0002b9f:	b9 01 00 00 00       	mov    ecx,0x1
c0002ba4:	eb 05                	jmp    c0002bab <change_bitmap+0xab>
c0002ba6:	b9 02 00 00 00       	mov    ecx,0x2
c0002bab:	83 c4 1c             	add    esp,0x1c
c0002bae:	89 c8                	mov    eax,ecx
c0002bb0:	5b                   	pop    ebx
c0002bb1:	5e                   	pop    esi
c0002bb2:	5f                   	pop    edi
c0002bb3:	5d                   	pop    ebp
c0002bb4:	c3                   	ret    

c0002bb5 <put_fat>:
c0002bb5:	83 fa 01             	cmp    edx,0x1
c0002bb8:	0f 86 7b 01 00 00    	jbe    c0002d39 <put_fat+0x184>
c0002bbe:	55                   	push   ebp
c0002bbf:	57                   	push   edi
c0002bc0:	89 cf                	mov    edi,ecx
c0002bc2:	56                   	push   esi
c0002bc3:	b9 02 00 00 00       	mov    ecx,0x2
c0002bc8:	53                   	push   ebx
c0002bc9:	89 c6                	mov    esi,eax
c0002bcb:	83 ec 1c             	sub    esp,0x1c
c0002bce:	89 d3                	mov    ebx,edx
c0002bd0:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bd3:	0f 86 68 01 00 00    	jbe    c0002d41 <put_fat+0x18c>
c0002bd9:	8a 00                	mov    al,BYTE PTR [eax]
c0002bdb:	3c 02                	cmp    al,0x2
c0002bdd:	0f 84 c7 00 00 00    	je     c0002caa <put_fat+0xf5>
c0002be3:	77 09                	ja     c0002bee <put_fat+0x39>
c0002be5:	fe c8                	dec    al
c0002be7:	74 17                	je     c0002c00 <put_fat+0x4b>
c0002be9:	e9 53 01 00 00       	jmp    c0002d41 <put_fat+0x18c>
c0002bee:	b9 02 00 00 00       	mov    ecx,0x2
c0002bf3:	3c 04                	cmp    al,0x4
c0002bf5:	0f 86 e1 00 00 00    	jbe    c0002cdc <put_fat+0x127>
c0002bfb:	e9 41 01 00 00       	jmp    c0002d41 <put_fat+0x18c>
c0002c00:	89 d5                	mov    ebp,edx
c0002c02:	31 c9                	xor    ecx,ecx
c0002c04:	d1 ed                	shr    ebp,1
c0002c06:	89 f0                	mov    eax,esi
c0002c08:	01 d5                	add    ebp,edx
c0002c0a:	89 ea                	mov    edx,ebp
c0002c0c:	c1 ea 09             	shr    edx,0x9
c0002c0f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c12:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c15:	e8 18 f6 ff ff       	call   c0002232 <move_window>
c0002c1a:	89 c1                	mov    ecx,eax
c0002c1c:	85 c0                	test   eax,eax
c0002c1e:	0f 85 1d 01 00 00    	jne    c0002d41 <put_fat+0x18c>
c0002c24:	8d 46 54             	lea    eax,[esi+0x54]
c0002c27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c2b:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c2e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c38:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c3c:	89 f8                	mov    eax,edi
c0002c3e:	83 e3 01             	and    ebx,0x1
c0002c41:	74 0d                	je     c0002c50 <put_fat+0x9b>
c0002c43:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c46:	89 fa                	mov    edx,edi
c0002c48:	83 e0 0f             	and    eax,0xf
c0002c4b:	c1 e2 04             	shl    edx,0x4
c0002c4e:	09 d0                	or     eax,edx
c0002c50:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c53:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c57:	31 c9                	xor    ecx,ecx
c0002c59:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c5d:	c1 ea 09             	shr    edx,0x9
c0002c60:	89 f0                	mov    eax,esi
c0002c62:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c65:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c68:	e8 c5 f5 ff ff       	call   c0002232 <move_window>
c0002c6d:	89 c1                	mov    ecx,eax
c0002c6f:	85 c0                	test   eax,eax
c0002c71:	0f 85 ca 00 00 00    	jne    c0002d41 <put_fat+0x18c>
c0002c77:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c7b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c81:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c85:	85 db                	test   ebx,ebx
c0002c87:	74 07                	je     c0002c90 <put_fat+0xdb>
c0002c89:	c1 ef 04             	shr    edi,0x4
c0002c8c:	89 fa                	mov    edx,edi
c0002c8e:	eb 0e                	jmp    c0002c9e <put_fat+0xe9>
c0002c90:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c93:	c1 ef 08             	shr    edi,0x8
c0002c96:	83 e2 f0             	and    edx,0xfffffff0
c0002c99:	83 e7 0f             	and    edi,0xf
c0002c9c:	09 fa                	or     edx,edi
c0002c9e:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002ca1:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002ca5:	e9 97 00 00 00       	jmp    c0002d41 <put_fat+0x18c>
c0002caa:	31 c9                	xor    ecx,ecx
c0002cac:	c1 ea 08             	shr    edx,0x8
c0002caf:	89 f0                	mov    eax,esi
c0002cb1:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cb4:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cb7:	e8 76 f5 ff ff       	call   c0002232 <move_window>
c0002cbc:	89 c1                	mov    ecx,eax
c0002cbe:	85 c0                	test   eax,eax
c0002cc0:	75 7f                	jne    c0002d41 <put_fat+0x18c>
c0002cc2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cc6:	01 db                	add    ebx,ebx
c0002cc8:	0f b7 d7             	movzx  edx,di
c0002ccb:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cd1:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002cd5:	e8 ec ed ff ff       	call   c0001ac6 <st_word>
c0002cda:	eb 53                	jmp    c0002d2f <put_fat+0x17a>
c0002cdc:	31 c9                	xor    ecx,ecx
c0002cde:	c1 ea 07             	shr    edx,0x7
c0002ce1:	89 f0                	mov    eax,esi
c0002ce3:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ce6:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ce9:	e8 44 f5 ff ff       	call   c0002232 <move_window>
c0002cee:	89 c1                	mov    ecx,eax
c0002cf0:	85 c0                	test   eax,eax
c0002cf2:	75 4d                	jne    c0002d41 <put_fat+0x18c>
c0002cf4:	c1 e3 02             	shl    ebx,0x2
c0002cf7:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cfd:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002d00:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002d04:	74 1c                	je     c0002d22 <put_fat+0x16d>
c0002d06:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d0a:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002d10:	89 d8                	mov    eax,ebx
c0002d12:	e8 4a ed ff ff       	call   c0001a61 <ld_dword>
c0002d17:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d1b:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d20:	09 c7                	or     edi,eax
c0002d22:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d26:	89 fa                	mov    edx,edi
c0002d28:	89 d8                	mov    eax,ebx
c0002d2a:	e8 9b ed ff ff       	call   c0001aca <st_dword>
c0002d2f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d33:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d37:	eb 08                	jmp    c0002d41 <put_fat+0x18c>
c0002d39:	b9 02 00 00 00       	mov    ecx,0x2
c0002d3e:	89 c8                	mov    eax,ecx
c0002d40:	c3                   	ret    
c0002d41:	83 c4 1c             	add    esp,0x1c
c0002d44:	89 c8                	mov    eax,ecx
c0002d46:	5b                   	pop    ebx
c0002d47:	5e                   	pop    esi
c0002d48:	5f                   	pop    edi
c0002d49:	5d                   	pop    ebp
c0002d4a:	c3                   	ret    

c0002d4b <fill_last_frag>:
c0002d4b:	57                   	push   edi
c0002d4c:	89 cf                	mov    edi,ecx
c0002d4e:	56                   	push   esi
c0002d4f:	89 d6                	mov    esi,edx
c0002d51:	53                   	push   ebx
c0002d52:	89 c3                	mov    ebx,eax
c0002d54:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d57:	85 c0                	test   eax,eax
c0002d59:	74 21                	je     c0002d7c <fill_last_frag+0x31>
c0002d5b:	89 f9                	mov    ecx,edi
c0002d5d:	83 f8 01             	cmp    eax,0x1
c0002d60:	76 05                	jbe    c0002d67 <fill_last_frag+0x1c>
c0002d62:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d65:	29 c1                	sub    ecx,eax
c0002d67:	8d 56 01             	lea    edx,[esi+0x1]
c0002d6a:	29 c2                	sub    edx,eax
c0002d6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d6e:	e8 42 fe ff ff       	call   c0002bb5 <put_fat>
c0002d73:	85 c0                	test   eax,eax
c0002d75:	75 05                	jne    c0002d7c <fill_last_frag+0x31>
c0002d77:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d7a:	eb d8                	jmp    c0002d54 <fill_last_frag+0x9>
c0002d7c:	5b                   	pop    ebx
c0002d7d:	5e                   	pop    esi
c0002d7e:	5f                   	pop    edi
c0002d7f:	c3                   	ret    

c0002d80 <fill_first_frag>:
c0002d80:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d84:	75 2d                	jne    c0002db3 <fill_first_frag+0x33>
c0002d86:	57                   	push   edi
c0002d87:	56                   	push   esi
c0002d88:	53                   	push   ebx
c0002d89:	89 c3                	mov    ebx,eax
c0002d8b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d8e:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d91:	01 d7                	add    edi,edx
c0002d93:	39 fa                	cmp    edx,edi
c0002d95:	74 14                	je     c0002dab <fill_first_frag+0x2b>
c0002d97:	8d 72 01             	lea    esi,[edx+0x1]
c0002d9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d9c:	89 f1                	mov    ecx,esi
c0002d9e:	e8 12 fe ff ff       	call   c0002bb5 <put_fat>
c0002da3:	89 f2                	mov    edx,esi
c0002da5:	85 c0                	test   eax,eax
c0002da7:	74 ea                	je     c0002d93 <fill_first_frag+0x13>
c0002da9:	eb 0b                	jmp    c0002db6 <fill_first_frag+0x36>
c0002dab:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002daf:	31 c0                	xor    eax,eax
c0002db1:	eb 03                	jmp    c0002db6 <fill_first_frag+0x36>
c0002db3:	31 c0                	xor    eax,eax
c0002db5:	c3                   	ret    
c0002db6:	5b                   	pop    ebx
c0002db7:	5e                   	pop    esi
c0002db8:	5f                   	pop    edi
c0002db9:	c3                   	ret    

c0002dba <get_fat>:
c0002dba:	83 fa 01             	cmp    edx,0x1
c0002dbd:	0f 86 db 01 00 00    	jbe    c0002f9e <get_fat+0x1e4>
c0002dc3:	55                   	push   ebp
c0002dc4:	b9 01 00 00 00       	mov    ecx,0x1
c0002dc9:	57                   	push   edi
c0002dca:	56                   	push   esi
c0002dcb:	53                   	push   ebx
c0002dcc:	83 ec 1c             	sub    esp,0x1c
c0002dcf:	8b 38                	mov    edi,DWORD PTR [eax]
c0002dd1:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002dd4:	0f 86 cc 01 00 00    	jbe    c0002fa6 <get_fat+0x1ec>
c0002dda:	89 c3                	mov    ebx,eax
c0002ddc:	89 d6                	mov    esi,edx
c0002dde:	8a 07                	mov    al,BYTE PTR [edi]
c0002de0:	3c 02                	cmp    al,0x2
c0002de2:	0f 84 99 00 00 00    	je     c0002e81 <get_fat+0xc7>
c0002de8:	77 09                	ja     c0002df3 <get_fat+0x39>
c0002dea:	fe c8                	dec    al
c0002dec:	74 1a                	je     c0002e08 <get_fat+0x4e>
c0002dee:	e9 b3 01 00 00       	jmp    c0002fa6 <get_fat+0x1ec>
c0002df3:	3c 03                	cmp    al,0x3
c0002df5:	0f 84 b5 00 00 00    	je     c0002eb0 <get_fat+0xf6>
c0002dfb:	3c 04                	cmp    al,0x4
c0002dfd:	0f 84 e3 00 00 00    	je     c0002ee6 <get_fat+0x12c>
c0002e03:	e9 9e 01 00 00       	jmp    c0002fa6 <get_fat+0x1ec>
c0002e08:	89 d3                	mov    ebx,edx
c0002e0a:	31 c9                	xor    ecx,ecx
c0002e0c:	d1 eb                	shr    ebx,1
c0002e0e:	89 f8                	mov    eax,edi
c0002e10:	01 d3                	add    ebx,edx
c0002e12:	89 da                	mov    edx,ebx
c0002e14:	c1 ea 09             	shr    edx,0x9
c0002e17:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e1a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e1d:	e8 10 f4 ff ff       	call   c0002232 <move_window>
c0002e22:	85 c0                	test   eax,eax
c0002e24:	74 08                	je     c0002e2e <get_fat+0x74>
c0002e26:	83 c9 ff             	or     ecx,0xffffffff
c0002e29:	e9 78 01 00 00       	jmp    c0002fa6 <get_fat+0x1ec>
c0002e2e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e31:	31 c9                	xor    ecx,ecx
c0002e33:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e39:	89 ea                	mov    edx,ebp
c0002e3b:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e3f:	c1 ea 09             	shr    edx,0x9
c0002e42:	89 f8                	mov    eax,edi
c0002e44:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e47:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e4a:	e8 e3 f3 ff ff       	call   c0002232 <move_window>
c0002e4f:	85 c0                	test   eax,eax
c0002e51:	75 d3                	jne    c0002e26 <get_fat+0x6c>
c0002e53:	0f b6 c3             	movzx  eax,bl
c0002e56:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e5c:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e61:	c1 e3 08             	shl    ebx,0x8
c0002e64:	09 c3                	or     ebx,eax
c0002e66:	89 d9                	mov    ecx,ebx
c0002e68:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e6e:	83 e6 01             	and    esi,0x1
c0002e71:	0f 84 2f 01 00 00    	je     c0002fa6 <get_fat+0x1ec>
c0002e77:	89 d9                	mov    ecx,ebx
c0002e79:	c1 e9 04             	shr    ecx,0x4
c0002e7c:	e9 25 01 00 00       	jmp    c0002fa6 <get_fat+0x1ec>
c0002e81:	31 c9                	xor    ecx,ecx
c0002e83:	c1 ea 08             	shr    edx,0x8
c0002e86:	89 f8                	mov    eax,edi
c0002e88:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e8b:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e8e:	e8 9f f3 ff ff       	call   c0002232 <move_window>
c0002e93:	85 c0                	test   eax,eax
c0002e95:	75 8f                	jne    c0002e26 <get_fat+0x6c>
c0002e97:	01 f6                	add    esi,esi
c0002e99:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e9f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ea3:	e8 ac eb ff ff       	call   c0001a54 <ld_word>
c0002ea8:	0f b7 c8             	movzx  ecx,ax
c0002eab:	e9 f6 00 00 00       	jmp    c0002fa6 <get_fat+0x1ec>
c0002eb0:	31 c9                	xor    ecx,ecx
c0002eb2:	c1 ea 07             	shr    edx,0x7
c0002eb5:	89 f8                	mov    eax,edi
c0002eb7:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002eba:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ebd:	e8 70 f3 ff ff       	call   c0002232 <move_window>
c0002ec2:	85 c0                	test   eax,eax
c0002ec4:	0f 85 5c ff ff ff    	jne    c0002e26 <get_fat+0x6c>
c0002eca:	c1 e6 02             	shl    esi,0x2
c0002ecd:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ed3:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ed7:	e8 85 eb ff ff       	call   c0001a61 <ld_dword>
c0002edc:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ee1:	e9 b4 00 00 00       	jmp    c0002f9a <get_fat+0x1e0>
c0002ee6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ee9:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002eec:	89 d1                	mov    ecx,edx
c0002eee:	09 c1                	or     ecx,eax
c0002ef0:	74 06                	je     c0002ef8 <get_fat+0x13e>
c0002ef2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ef6:	75 0f                	jne    c0002f07 <get_fat+0x14d>
c0002ef8:	b9 01 00 00 00       	mov    ecx,0x1
c0002efd:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002f01:	0f 85 9f 00 00 00    	jne    c0002fa6 <get_fat+0x1ec>
c0002f07:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002f0b:	89 f5                	mov    ebp,esi
c0002f0d:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002f12:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002f15:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002f18:	80 f9 02             	cmp    cl,0x2
c0002f1b:	75 35                	jne    c0002f52 <get_fat+0x198>
c0002f1d:	83 c0 ff             	add    eax,0xffffffff
c0002f20:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f25:	83 d2 ff             	adc    edx,0xffffffff
c0002f28:	31 db                	xor    ebx,ebx
c0002f2a:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f2e:	53                   	push   ebx
c0002f2f:	c1 ea 09             	shr    edx,0x9
c0002f32:	51                   	push   ecx
c0002f33:	52                   	push   edx
c0002f34:	50                   	push   eax
c0002f35:	e8 22 04 02 00       	call   c002335c <__udivdi3>
c0002f3a:	83 c4 10             	add    esp,0x10
c0002f3d:	b9 01 00 00 00       	mov    ecx,0x1
c0002f42:	39 c5                	cmp    ebp,eax
c0002f44:	77 60                	ja     c0002fa6 <get_fat+0x1ec>
c0002f46:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f4b:	74 59                	je     c0002fa6 <get_fat+0x1ec>
c0002f4d:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f50:	eb 54                	jmp    c0002fa6 <get_fat+0x1ec>
c0002f52:	80 f9 03             	cmp    cl,0x3
c0002f55:	75 05                	jne    c0002f5c <get_fat+0x1a2>
c0002f57:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f5a:	77 f1                	ja     c0002f4d <get_fat+0x193>
c0002f5c:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f61:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f65:	75 3f                	jne    c0002fa6 <get_fat+0x1ec>
c0002f67:	31 c9                	xor    ecx,ecx
c0002f69:	89 f2                	mov    edx,esi
c0002f6b:	89 f8                	mov    eax,edi
c0002f6d:	c1 ea 07             	shr    edx,0x7
c0002f70:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f73:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f76:	e8 b7 f2 ff ff       	call   c0002232 <move_window>
c0002f7b:	85 c0                	test   eax,eax
c0002f7d:	0f 85 a3 fe ff ff    	jne    c0002e26 <get_fat+0x6c>
c0002f83:	c1 e6 02             	shl    esi,0x2
c0002f86:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f8c:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f90:	e8 cc ea ff ff       	call   c0001a61 <ld_dword>
c0002f95:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f9a:	89 c1                	mov    ecx,eax
c0002f9c:	eb 08                	jmp    c0002fa6 <get_fat+0x1ec>
c0002f9e:	b9 01 00 00 00       	mov    ecx,0x1
c0002fa3:	89 c8                	mov    eax,ecx
c0002fa5:	c3                   	ret    
c0002fa6:	83 c4 1c             	add    esp,0x1c
c0002fa9:	89 c8                	mov    eax,ecx
c0002fab:	5b                   	pop    ebx
c0002fac:	5e                   	pop    esi
c0002fad:	5f                   	pop    edi
c0002fae:	5d                   	pop    ebp
c0002faf:	c3                   	ret    

c0002fb0 <dir_sdi>:
c0002fb0:	55                   	push   ebp
c0002fb1:	57                   	push   edi
c0002fb2:	56                   	push   esi
c0002fb3:	53                   	push   ebx
c0002fb4:	89 c3                	mov    ebx,eax
c0002fb6:	83 ec 1c             	sub    esp,0x1c
c0002fb9:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fbb:	31 c0                	xor    eax,eax
c0002fbd:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fc0:	0f 94 c0             	sete   al
c0002fc3:	48                   	dec    eax
c0002fc4:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fc9:	05 00 00 00 10       	add    eax,0x10000000
c0002fce:	39 d0                	cmp    eax,edx
c0002fd0:	77 0a                	ja     c0002fdc <dir_sdi+0x2c>
c0002fd2:	b8 02 00 00 00       	mov    eax,0x2
c0002fd7:	e9 c4 00 00 00       	jmp    c00030a0 <dir_sdi+0xf0>
c0002fdc:	89 d6                	mov    esi,edx
c0002fde:	f6 c2 1f             	test   dl,0x1f
c0002fe1:	75 ef                	jne    c0002fd2 <dir_sdi+0x22>
c0002fe3:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fe6:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fe9:	85 c9                	test   ecx,ecx
c0002feb:	75 2d                	jne    c000301a <dir_sdi+0x6a>
c0002fed:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002ff0:	77 1b                	ja     c000300d <dir_sdi+0x5d>
c0002ff2:	89 f2                	mov    edx,esi
c0002ff4:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002ff8:	c1 ea 05             	shr    edx,0x5
c0002ffb:	39 c2                	cmp    edx,eax
c0002ffd:	73 d3                	jae    c0002fd2 <dir_sdi+0x22>
c0002fff:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003002:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003005:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003008:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000300b:	eb 4b                	jmp    c0003058 <dir_sdi+0xa8>
c000300d:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003010:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003014:	85 c0                	test   eax,eax
c0003016:	74 da                	je     c0002ff2 <dir_sdi+0x42>
c0003018:	89 c1                	mov    ecx,eax
c000301a:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000301e:	c1 e5 09             	shl    ebp,0x9
c0003021:	89 ca                	mov    edx,ecx
c0003023:	39 ee                	cmp    esi,ebp
c0003025:	72 1c                	jb     c0003043 <dir_sdi+0x93>
c0003027:	89 d8                	mov    eax,ebx
c0003029:	e8 8c fd ff ff       	call   c0002dba <get_fat>
c000302e:	89 c1                	mov    ecx,eax
c0003030:	83 f8 ff             	cmp    eax,0xffffffff
c0003033:	74 66                	je     c000309b <dir_sdi+0xeb>
c0003035:	83 f8 01             	cmp    eax,0x1
c0003038:	76 98                	jbe    c0002fd2 <dir_sdi+0x22>
c000303a:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000303d:	76 93                	jbe    c0002fd2 <dir_sdi+0x22>
c000303f:	29 ee                	sub    esi,ebp
c0003041:	eb de                	jmp    c0003021 <dir_sdi+0x71>
c0003043:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003047:	89 f8                	mov    eax,edi
c0003049:	e8 9f ec ff ff       	call   c0001ced <clst2sect>
c000304e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003052:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003055:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003058:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000305b:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000305e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003061:	89 d1                	mov    ecx,edx
c0003063:	09 c1                	or     ecx,eax
c0003065:	0f 84 67 ff ff ff    	je     c0002fd2 <dir_sdi+0x22>
c000306b:	89 f1                	mov    ecx,esi
c000306d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003075:	c1 e9 09             	shr    ecx,0x9
c0003078:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000307c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003080:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003084:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003087:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000308d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003090:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003094:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003097:	31 c0                	xor    eax,eax
c0003099:	eb 05                	jmp    c00030a0 <dir_sdi+0xf0>
c000309b:	b8 01 00 00 00       	mov    eax,0x1
c00030a0:	83 c4 1c             	add    esp,0x1c
c00030a3:	5b                   	pop    ebx
c00030a4:	5e                   	pop    esi
c00030a5:	5f                   	pop    edi
c00030a6:	5d                   	pop    ebp
c00030a7:	c3                   	ret    

c00030a8 <create_chain>:
c00030a8:	55                   	push   ebp
c00030a9:	89 c5                	mov    ebp,eax
c00030ab:	57                   	push   edi
c00030ac:	56                   	push   esi
c00030ad:	53                   	push   ebx
c00030ae:	83 ec 1c             	sub    esp,0x1c
c00030b1:	85 d2                	test   edx,edx
c00030b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00030b7:	8b 30                	mov    esi,DWORD PTR [eax]
c00030b9:	75 0e                	jne    c00030c9 <create_chain+0x21>
c00030bb:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030be:	85 ff                	test   edi,edi
c00030c0:	74 39                	je     c00030fb <create_chain+0x53>
c00030c2:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030c5:	77 39                	ja     c0003100 <create_chain+0x58>
c00030c7:	eb 32                	jmp    c00030fb <create_chain+0x53>
c00030c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030cd:	e8 e8 fc ff ff       	call   c0002dba <get_fat>
c00030d2:	89 c3                	mov    ebx,eax
c00030d4:	83 f8 01             	cmp    eax,0x1
c00030d7:	77 0a                	ja     c00030e3 <create_chain+0x3b>
c00030d9:	bb 01 00 00 00       	mov    ebx,0x1
c00030de:	e9 ba 01 00 00       	jmp    c000329d <create_chain+0x1f5>
c00030e3:	83 f8 ff             	cmp    eax,0xffffffff
c00030e6:	0f 84 62 01 00 00    	je     c000324e <create_chain+0x1a6>
c00030ec:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030ef:	0f 87 a8 01 00 00    	ja     c000329d <create_chain+0x1f5>
c00030f5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030f9:	eb 05                	jmp    c0003100 <create_chain+0x58>
c00030fb:	bf 01 00 00 00       	mov    edi,0x1
c0003100:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003104:	75 07                	jne    c000310d <create_chain+0x65>
c0003106:	31 db                	xor    ebx,ebx
c0003108:	e9 90 01 00 00       	jmp    c000329d <create_chain+0x1f5>
c000310d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003110:	75 74                	jne    c0003186 <create_chain+0xde>
c0003112:	b9 01 00 00 00       	mov    ecx,0x1
c0003117:	89 fa                	mov    edx,edi
c0003119:	89 f0                	mov    eax,esi
c000311b:	e8 2d f9 ff ff       	call   c0002a4d <find_bitmap>
c0003120:	89 c3                	mov    ebx,eax
c0003122:	8d 40 ff             	lea    eax,[eax-0x1]
c0003125:	83 f8 fd             	cmp    eax,0xfffffffd
c0003128:	0f 87 6f 01 00 00    	ja     c000329d <create_chain+0x1f5>
c000312e:	83 ec 0c             	sub    esp,0xc
c0003131:	b9 01 00 00 00       	mov    ecx,0x1
c0003136:	6a 01                	push   0x1
c0003138:	89 da                	mov    edx,ebx
c000313a:	89 f0                	mov    eax,esi
c000313c:	e8 bf f9 ff ff       	call   c0002b00 <change_bitmap>
c0003141:	83 c4 10             	add    esp,0x10
c0003144:	83 f8 02             	cmp    eax,0x2
c0003147:	74 90                	je     c00030d9 <create_chain+0x31>
c0003149:	83 f8 01             	cmp    eax,0x1
c000314c:	0f 84 fc 00 00 00    	je     c000324e <create_chain+0x1a6>
c0003152:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003157:	75 09                	jne    c0003162 <create_chain+0xba>
c0003159:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000315d:	e9 0c 01 00 00       	jmp    c000326e <create_chain+0x1c6>
c0003162:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003166:	0f 85 e7 00 00 00    	jne    c0003253 <create_chain+0x1ab>
c000316c:	8d 57 01             	lea    edx,[edi+0x1]
c000316f:	39 da                	cmp    edx,ebx
c0003171:	0f 84 f7 00 00 00    	je     c000326e <create_chain+0x1c6>
c0003177:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000317a:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000317e:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003181:	e9 cd 00 00 00       	jmp    c0003253 <create_chain+0x1ab>
c0003186:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000318a:	75 41                	jne    c00031cd <create_chain+0x125>
c000318c:	8d 5f 01             	lea    ebx,[edi+0x1]
c000318f:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003192:	77 05                	ja     c0003199 <create_chain+0xf1>
c0003194:	bb 02 00 00 00       	mov    ebx,0x2
c0003199:	89 da                	mov    edx,ebx
c000319b:	89 e8                	mov    eax,ebp
c000319d:	e8 18 fc ff ff       	call   c0002dba <get_fat>
c00031a2:	83 f8 01             	cmp    eax,0x1
c00031a5:	0f 84 2e ff ff ff    	je     c00030d9 <create_chain+0x31>
c00031ab:	83 f8 ff             	cmp    eax,0xffffffff
c00031ae:	0f 84 9a 00 00 00    	je     c000324e <create_chain+0x1a6>
c00031b4:	85 c0                	test   eax,eax
c00031b6:	74 11                	je     c00031c9 <create_chain+0x121>
c00031b8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00031bb:	83 f8 01             	cmp    eax,0x1
c00031be:	76 0d                	jbe    c00031cd <create_chain+0x125>
c00031c0:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031c3:	76 08                	jbe    c00031cd <create_chain+0x125>
c00031c5:	89 c7                	mov    edi,eax
c00031c7:	eb 04                	jmp    c00031cd <create_chain+0x125>
c00031c9:	85 db                	test   ebx,ebx
c00031cb:	75 38                	jne    c0003205 <create_chain+0x15d>
c00031cd:	89 fb                	mov    ebx,edi
c00031cf:	43                   	inc    ebx
c00031d0:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031d3:	77 0e                	ja     c00031e3 <create_chain+0x13b>
c00031d5:	83 ff 01             	cmp    edi,0x1
c00031d8:	0f 86 28 ff ff ff    	jbe    c0003106 <create_chain+0x5e>
c00031de:	bb 02 00 00 00       	mov    ebx,0x2
c00031e3:	89 da                	mov    edx,ebx
c00031e5:	89 e8                	mov    eax,ebp
c00031e7:	e8 ce fb ff ff       	call   c0002dba <get_fat>
c00031ec:	85 c0                	test   eax,eax
c00031ee:	74 15                	je     c0003205 <create_chain+0x15d>
c00031f0:	83 f8 01             	cmp    eax,0x1
c00031f3:	0f 84 e0 fe ff ff    	je     c00030d9 <create_chain+0x31>
c00031f9:	40                   	inc    eax
c00031fa:	74 52                	je     c000324e <create_chain+0x1a6>
c00031fc:	39 fb                	cmp    ebx,edi
c00031fe:	75 cf                	jne    c00031cf <create_chain+0x127>
c0003200:	e9 01 ff ff ff       	jmp    c0003106 <create_chain+0x5e>
c0003205:	83 c9 ff             	or     ecx,0xffffffff
c0003208:	89 da                	mov    edx,ebx
c000320a:	89 f0                	mov    eax,esi
c000320c:	e8 a4 f9 ff ff       	call   c0002bb5 <put_fat>
c0003211:	85 c0                	test   eax,eax
c0003213:	75 32                	jne    c0003247 <create_chain+0x19f>
c0003215:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000321a:	74 11                	je     c000322d <create_chain+0x185>
c000321c:	89 d9                	mov    ecx,ebx
c000321e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003222:	89 f0                	mov    eax,esi
c0003224:	e8 8c f9 ff ff       	call   c0002bb5 <put_fat>
c0003229:	85 c0                	test   eax,eax
c000322b:	75 1a                	jne    c0003247 <create_chain+0x19f>
c000322d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003230:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003233:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003236:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003239:	39 d0                	cmp    eax,edx
c000323b:	77 04                	ja     c0003241 <create_chain+0x199>
c000323d:	48                   	dec    eax
c000323e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003241:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003245:	eb 56                	jmp    c000329d <create_chain+0x1f5>
c0003247:	48                   	dec    eax
c0003248:	0f 85 8b fe ff ff    	jne    c00030d9 <create_chain+0x31>
c000324e:	83 cb ff             	or     ebx,0xffffffff
c0003251:	eb 4a                	jmp    c000329d <create_chain+0x1f5>
c0003253:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003257:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000325a:	41                   	inc    ecx
c000325b:	39 d9                	cmp    ecx,ebx
c000325d:	75 19                	jne    c0003278 <create_chain+0x1d0>
c000325f:	b9 02 00 00 00       	mov    ecx,0x2
c0003264:	85 d2                	test   edx,edx
c0003266:	74 03                	je     c000326b <create_chain+0x1c3>
c0003268:	8d 4a 01             	lea    ecx,[edx+0x1]
c000326b:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000326e:	85 c0                	test   eax,eax
c0003270:	0f 85 63 fe ff ff    	jne    c00030d9 <create_chain+0x31>
c0003276:	eb b5                	jmp    c000322d <create_chain+0x185>
c0003278:	85 d2                	test   edx,edx
c000327a:	75 07                	jne    c0003283 <create_chain+0x1db>
c000327c:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003283:	89 d9                	mov    ecx,ebx
c0003285:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003289:	89 e8                	mov    eax,ebp
c000328b:	e8 bb fa ff ff       	call   c0002d4b <fill_last_frag>
c0003290:	85 c0                	test   eax,eax
c0003292:	75 b3                	jne    c0003247 <create_chain+0x19f>
c0003294:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000329b:	eb 90                	jmp    c000322d <create_chain+0x185>
c000329d:	83 c4 1c             	add    esp,0x1c
c00032a0:	89 d8                	mov    eax,ebx
c00032a2:	5b                   	pop    ebx
c00032a3:	5e                   	pop    esi
c00032a4:	5f                   	pop    edi
c00032a5:	5d                   	pop    ebp
c00032a6:	c3                   	ret    

c00032a7 <remove_chain>:
c00032a7:	55                   	push   ebp
c00032a8:	57                   	push   edi
c00032a9:	56                   	push   esi
c00032aa:	53                   	push   ebx
c00032ab:	83 ec 1c             	sub    esp,0x1c
c00032ae:	83 fa 01             	cmp    edx,0x1
c00032b1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032b5:	8b 18                	mov    ebx,DWORD PTR [eax]
c00032b7:	77 0a                	ja     c00032c3 <remove_chain+0x1c>
c00032b9:	b8 02 00 00 00       	mov    eax,0x2
c00032be:	e9 24 01 00 00       	jmp    c00033e7 <remove_chain+0x140>
c00032c3:	89 d6                	mov    esi,edx
c00032c5:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032c8:	76 ef                	jbe    c00032b9 <remove_chain+0x12>
c00032ca:	89 c7                	mov    edi,eax
c00032cc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032d1:	75 06                	jne    c00032d9 <remove_chain+0x32>
c00032d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032d7:	eb 54                	jmp    c000332d <remove_chain+0x86>
c00032d9:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032dc:	75 06                	jne    c00032e4 <remove_chain+0x3d>
c00032de:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032e2:	74 ef                	je     c00032d3 <remove_chain+0x2c>
c00032e4:	83 c9 ff             	or     ecx,0xffffffff
c00032e7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032eb:	89 d8                	mov    eax,ebx
c00032ed:	e8 c3 f8 ff ff       	call   c0002bb5 <put_fat>
c00032f2:	85 c0                	test   eax,eax
c00032f4:	74 dd                	je     c00032d3 <remove_chain+0x2c>
c00032f6:	e9 ec 00 00 00       	jmp    c00033e7 <remove_chain+0x140>
c00032fb:	83 f8 01             	cmp    eax,0x1
c00032fe:	74 b9                	je     c00032b9 <remove_chain+0x12>
c0003300:	83 f8 ff             	cmp    eax,0xffffffff
c0003303:	74 6d                	je     c0003372 <remove_chain+0xcb>
c0003305:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003308:	75 6f                	jne    c0003379 <remove_chain+0xd2>
c000330a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000330d:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003310:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003313:	39 d0                	cmp    eax,edx
c0003315:	73 08                	jae    c000331f <remove_chain+0x78>
c0003317:	40                   	inc    eax
c0003318:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000331c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000331f:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003322:	39 e9                	cmp    ecx,ebp
c0003324:	75 64                	jne    c000338a <remove_chain+0xe3>
c0003326:	89 ee                	mov    esi,ebp
c0003328:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c000332b:	76 0f                	jbe    c000333c <remove_chain+0x95>
c000332d:	89 f2                	mov    edx,esi
c000332f:	89 f8                	mov    eax,edi
c0003331:	e8 84 fa ff ff       	call   c0002dba <get_fat>
c0003336:	89 c5                	mov    ebp,eax
c0003338:	85 c0                	test   eax,eax
c000333a:	75 bf                	jne    c00032fb <remove_chain+0x54>
c000333c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000333f:	0f 85 a0 00 00 00    	jne    c00033e5 <remove_chain+0x13e>
c0003345:	eb 6c                	jmp    c00033b3 <remove_chain+0x10c>
c0003347:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000334a:	84 c0                	test   al,al
c000334c:	75 7d                	jne    c00033cb <remove_chain+0x124>
c000334e:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003351:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003355:	0f 84 86 00 00 00    	je     c00033e1 <remove_chain+0x13a>
c000335b:	89 da                	mov    edx,ebx
c000335d:	89 f8                	mov    eax,edi
c000335f:	e8 56 fa ff ff       	call   c0002dba <get_fat>
c0003364:	83 f8 01             	cmp    eax,0x1
c0003367:	0f 86 4c ff ff ff    	jbe    c00032b9 <remove_chain+0x12>
c000336d:	83 f8 ff             	cmp    eax,0xffffffff
c0003370:	75 4e                	jne    c00033c0 <remove_chain+0x119>
c0003372:	b8 01 00 00 00       	mov    eax,0x1
c0003377:	eb 6e                	jmp    c00033e7 <remove_chain+0x140>
c0003379:	31 c9                	xor    ecx,ecx
c000337b:	89 f2                	mov    edx,esi
c000337d:	89 d8                	mov    eax,ebx
c000337f:	e8 31 f8 ff ff       	call   c0002bb5 <put_fat>
c0003384:	85 c0                	test   eax,eax
c0003386:	74 82                	je     c000330a <remove_chain+0x63>
c0003388:	eb 5d                	jmp    c00033e7 <remove_chain+0x140>
c000338a:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000338d:	75 1b                	jne    c00033aa <remove_chain+0x103>
c000338f:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003393:	89 d8                	mov    eax,ebx
c0003395:	83 ec 0c             	sub    esp,0xc
c0003398:	6a 00                	push   0x0
c000339a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000339e:	e8 5d f7 ff ff       	call   c0002b00 <change_bitmap>
c00033a3:	83 c4 10             	add    esp,0x10
c00033a6:	85 c0                	test   eax,eax
c00033a8:	75 3d                	jne    c00033e7 <remove_chain+0x140>
c00033aa:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00033ae:	e9 73 ff ff ff       	jmp    c0003326 <remove_chain+0x7f>
c00033b3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033b8:	75 8d                	jne    c0003347 <remove_chain+0xa0>
c00033ba:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033be:	eb 25                	jmp    c00033e5 <remove_chain+0x13e>
c00033c0:	8d 53 01             	lea    edx,[ebx+0x1]
c00033c3:	89 c3                	mov    ebx,eax
c00033c5:	39 c2                	cmp    edx,eax
c00033c7:	74 88                	je     c0003351 <remove_chain+0xaa>
c00033c9:	eb 1a                	jmp    c00033e5 <remove_chain+0x13e>
c00033cb:	3c 03                	cmp    al,0x3
c00033cd:	75 16                	jne    c00033e5 <remove_chain+0x13e>
c00033cf:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033d2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033d6:	77 0d                	ja     c00033e5 <remove_chain+0x13e>
c00033d8:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033db:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033df:	72 04                	jb     c00033e5 <remove_chain+0x13e>
c00033e1:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033e5:	31 c0                	xor    eax,eax
c00033e7:	83 c4 1c             	add    esp,0x1c
c00033ea:	5b                   	pop    ebx
c00033eb:	5e                   	pop    esi
c00033ec:	5f                   	pop    edi
c00033ed:	5d                   	pop    ebp
c00033ee:	c3                   	ret    

c00033ef <dir_clear>:
c00033ef:	55                   	push   ebp
c00033f0:	57                   	push   edi
c00033f1:	56                   	push   esi
c00033f2:	89 c6                	mov    esi,eax
c00033f4:	53                   	push   ebx
c00033f5:	83 ec 1c             	sub    esp,0x1c
c00033f8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033fc:	e8 9d ed ff ff       	call   c000219e <sync_window>
c0003401:	85 c0                	test   eax,eax
c0003403:	0f 85 de 00 00 00    	jne    c00034e7 <dir_clear+0xf8>
c0003409:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000340d:	89 f0                	mov    eax,esi
c000340f:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003412:	e8 d6 e8 ff ff       	call   c0001ced <clst2sect>
c0003417:	b9 00 02 00 00       	mov    ecx,0x200
c000341c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003420:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003424:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003427:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c000342a:	89 e8                	mov    eax,ebp
c000342c:	31 d2                	xor    edx,edx
c000342e:	e8 b5 e6 ff ff       	call   c0001ae8 <mem_set>
c0003433:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003437:	c1 e3 09             	shl    ebx,0x9
c000343a:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003440:	76 1f                	jbe    c0003461 <dir_clear+0x72>
c0003442:	bb 00 80 00 00       	mov    ebx,0x8000
c0003447:	eb 18                	jmp    c0003461 <dir_clear+0x72>
c0003449:	83 ec 0c             	sub    esp,0xc
c000344c:	53                   	push   ebx
c000344d:	e8 35 4e 00 00       	call   c0008287 <ff_memalloc>
c0003452:	83 c4 10             	add    esp,0x10
c0003455:	89 c7                	mov    edi,eax
c0003457:	85 c0                	test   eax,eax
c0003459:	0f 85 8f 00 00 00    	jne    c00034ee <dir_clear+0xff>
c000345f:	d1 eb                	shr    ebx,1
c0003461:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003467:	77 e0                	ja     c0003449 <dir_clear+0x5a>
c0003469:	31 db                	xor    ebx,ebx
c000346b:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000346f:	39 d8                	cmp    eax,ebx
c0003471:	76 66                	jbe    c00034d9 <dir_clear+0xea>
c0003473:	83 ec 0c             	sub    esp,0xc
c0003476:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000347a:	6a 01                	push   0x1
c000347c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003480:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003484:	55                   	push   ebp
c0003485:	50                   	push   eax
c0003486:	e8 94 e5 ff ff       	call   c0001a1f <disk_write>
c000348b:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003490:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003495:	83 c4 20             	add    esp,0x20
c0003498:	85 c0                	test   eax,eax
c000349a:	75 3d                	jne    c00034d9 <dir_clear+0xea>
c000349c:	43                   	inc    ebx
c000349d:	eb cc                	jmp    c000346b <dir_clear+0x7c>
c000349f:	83 ec 0c             	sub    esp,0xc
c00034a2:	31 d2                	xor    edx,edx
c00034a4:	55                   	push   ebp
c00034a5:	89 d8                	mov    eax,ebx
c00034a7:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00034ab:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00034af:	52                   	push   edx
c00034b0:	50                   	push   eax
c00034b1:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00034b5:	57                   	push   edi
c00034b6:	50                   	push   eax
c00034b7:	e8 63 e5 ff ff       	call   c0001a1f <disk_write>
c00034bc:	83 c4 20             	add    esp,0x20
c00034bf:	85 c0                	test   eax,eax
c00034c1:	75 0a                	jne    c00034cd <dir_clear+0xde>
c00034c3:	01 eb                	add    ebx,ebp
c00034c5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034c9:	39 d8                	cmp    eax,ebx
c00034cb:	77 d2                	ja     c000349f <dir_clear+0xb0>
c00034cd:	83 ec 0c             	sub    esp,0xc
c00034d0:	57                   	push   edi
c00034d1:	e8 c7 4d 00 00       	call   c000829d <ff_memfree>
c00034d6:	83 c4 10             	add    esp,0x10
c00034d9:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034dd:	39 d8                	cmp    eax,ebx
c00034df:	0f 95 c0             	setne  al
c00034e2:	0f b6 c0             	movzx  eax,al
c00034e5:	eb 19                	jmp    c0003500 <dir_clear+0x111>
c00034e7:	b8 01 00 00 00       	mov    eax,0x1
c00034ec:	eb 12                	jmp    c0003500 <dir_clear+0x111>
c00034ee:	89 d9                	mov    ecx,ebx
c00034f0:	31 d2                	xor    edx,edx
c00034f2:	c1 eb 09             	shr    ebx,0x9
c00034f5:	e8 ee e5 ff ff       	call   c0001ae8 <mem_set>
c00034fa:	89 dd                	mov    ebp,ebx
c00034fc:	31 db                	xor    ebx,ebx
c00034fe:	eb c5                	jmp    c00034c5 <dir_clear+0xd6>
c0003500:	83 c4 1c             	add    esp,0x1c
c0003503:	5b                   	pop    ebx
c0003504:	5e                   	pop    esi
c0003505:	5f                   	pop    edi
c0003506:	5d                   	pop    ebp
c0003507:	c3                   	ret    

c0003508 <dir_next>:
c0003508:	55                   	push   ebp
c0003509:	57                   	push   edi
c000350a:	56                   	push   esi
c000350b:	53                   	push   ebx
c000350c:	89 c3                	mov    ebx,eax
c000350e:	83 ec 1c             	sub    esp,0x1c
c0003511:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003513:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003517:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000351a:	8d 78 20             	lea    edi,[eax+0x20]
c000351d:	31 c0                	xor    eax,eax
c000351f:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003523:	0f 94 c0             	sete   al
c0003526:	48                   	dec    eax
c0003527:	25 00 00 20 f0       	and    eax,0xf0200000
c000352c:	05 00 00 00 10       	add    eax,0x10000000
c0003531:	39 f8                	cmp    eax,edi
c0003533:	77 0e                	ja     c0003543 <dir_next+0x3b>
c0003535:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000353c:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003543:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003546:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003549:	b8 04 00 00 00       	mov    eax,0x4
c000354e:	89 ce                	mov    esi,ecx
c0003550:	09 d6                	or     esi,edx
c0003552:	0f 84 da 00 00 00    	je     c0003632 <dir_next+0x12a>
c0003558:	89 f8                	mov    eax,edi
c000355a:	25 ff 01 00 00       	and    eax,0x1ff
c000355f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003563:	0f 85 b9 00 00 00    	jne    c0003622 <dir_next+0x11a>
c0003569:	83 c2 01             	add    edx,0x1
c000356c:	83 d1 00             	adc    ecx,0x0
c000356f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003572:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003575:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003578:	85 d2                	test   edx,edx
c000357a:	75 29                	jne    c00035a5 <dir_next+0x9d>
c000357c:	89 fa                	mov    edx,edi
c000357e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003582:	c1 ea 05             	shr    edx,0x5
c0003585:	39 c2                	cmp    edx,eax
c0003587:	0f 82 95 00 00 00    	jb     c0003622 <dir_next+0x11a>
c000358d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003594:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000359b:	b8 04 00 00 00       	mov    eax,0x4
c00035a0:	e9 8d 00 00 00       	jmp    c0003632 <dir_next+0x12a>
c00035a5:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00035a9:	89 f9                	mov    ecx,edi
c00035ab:	48                   	dec    eax
c00035ac:	c1 e9 09             	shr    ecx,0x9
c00035af:	85 c8                	test   eax,ecx
c00035b1:	75 6f                	jne    c0003622 <dir_next+0x11a>
c00035b3:	89 d8                	mov    eax,ebx
c00035b5:	e8 00 f8 ff ff       	call   c0002dba <get_fat>
c00035ba:	89 c6                	mov    esi,eax
c00035bc:	83 f8 01             	cmp    eax,0x1
c00035bf:	77 07                	ja     c00035c8 <dir_next+0xc0>
c00035c1:	b8 02 00 00 00       	mov    eax,0x2
c00035c6:	eb 6a                	jmp    c0003632 <dir_next+0x12a>
c00035c8:	83 f8 ff             	cmp    eax,0xffffffff
c00035cb:	75 07                	jne    c00035d4 <dir_next+0xcc>
c00035cd:	b8 01 00 00 00       	mov    eax,0x1
c00035d2:	eb 5e                	jmp    c0003632 <dir_next+0x12a>
c00035d4:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035d7:	77 37                	ja     c0003610 <dir_next+0x108>
c00035d9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035de:	74 ad                	je     c000358d <dir_next+0x85>
c00035e0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035e3:	89 d8                	mov    eax,ebx
c00035e5:	e8 be fa ff ff       	call   c00030a8 <create_chain>
c00035ea:	89 c6                	mov    esi,eax
c00035ec:	b8 07 00 00 00       	mov    eax,0x7
c00035f1:	85 f6                	test   esi,esi
c00035f3:	74 3d                	je     c0003632 <dir_next+0x12a>
c00035f5:	83 fe 01             	cmp    esi,0x1
c00035f8:	74 c7                	je     c00035c1 <dir_next+0xb9>
c00035fa:	83 fe ff             	cmp    esi,0xffffffff
c00035fd:	74 ce                	je     c00035cd <dir_next+0xc5>
c00035ff:	89 f2                	mov    edx,esi
c0003601:	89 e8                	mov    eax,ebp
c0003603:	e8 e7 fd ff ff       	call   c00033ef <dir_clear>
c0003608:	85 c0                	test   eax,eax
c000360a:	75 c1                	jne    c00035cd <dir_next+0xc5>
c000360c:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003610:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003613:	89 f2                	mov    edx,esi
c0003615:	89 e8                	mov    eax,ebp
c0003617:	e8 d1 e6 ff ff       	call   c0001ced <clst2sect>
c000361c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000361f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003622:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003626:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003629:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000362d:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003630:	31 c0                	xor    eax,eax
c0003632:	83 c4 1c             	add    esp,0x1c
c0003635:	5b                   	pop    ebx
c0003636:	5e                   	pop    esi
c0003637:	5f                   	pop    edi
c0003638:	5d                   	pop    ebp
c0003639:	c3                   	ret    

c000363a <load_xdir>:
c000363a:	55                   	push   ebp
c000363b:	57                   	push   edi
c000363c:	56                   	push   esi
c000363d:	89 c6                	mov    esi,eax
c000363f:	53                   	push   ebx
c0003640:	83 ec 1c             	sub    esp,0x1c
c0003643:	8b 00                	mov    eax,DWORD PTR [eax]
c0003645:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003648:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000364b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000364e:	e8 df eb ff ff       	call   c0002232 <move_window>
c0003653:	89 c3                	mov    ebx,eax
c0003655:	85 c0                	test   eax,eax
c0003657:	0f 85 0c 01 00 00    	jne    c0003769 <load_xdir+0x12f>
c000365d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003660:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003663:	0f 85 fb 00 00 00    	jne    c0003764 <load_xdir+0x12a>
c0003669:	89 f8                	mov    eax,edi
c000366b:	b9 20 00 00 00       	mov    ecx,0x20
c0003670:	e8 5e e4 ff ff       	call   c0001ad3 <mem_cpy>
c0003675:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003679:	40                   	inc    eax
c000367a:	c1 e0 05             	shl    eax,0x5
c000367d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003681:	83 e8 60             	sub    eax,0x60
c0003684:	3d 00 02 00 00       	cmp    eax,0x200
c0003689:	0f 87 d5 00 00 00    	ja     c0003764 <load_xdir+0x12a>
c000368f:	31 d2                	xor    edx,edx
c0003691:	89 f0                	mov    eax,esi
c0003693:	e8 70 fe ff ff       	call   c0003508 <dir_next>
c0003698:	89 c3                	mov    ebx,eax
c000369a:	83 f8 04             	cmp    eax,0x4
c000369d:	0f 84 c1 00 00 00    	je     c0003764 <load_xdir+0x12a>
c00036a3:	85 c0                	test   eax,eax
c00036a5:	0f 85 be 00 00 00    	jne    c0003769 <load_xdir+0x12f>
c00036ab:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036ae:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036b1:	8b 06                	mov    eax,DWORD PTR [esi]
c00036b3:	e8 7a eb ff ff       	call   c0002232 <move_window>
c00036b8:	89 c3                	mov    ebx,eax
c00036ba:	85 c0                	test   eax,eax
c00036bc:	0f 85 a7 00 00 00    	jne    c0003769 <load_xdir+0x12f>
c00036c2:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036c5:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036c8:	0f 85 96 00 00 00    	jne    c0003764 <load_xdir+0x12a>
c00036ce:	8d 47 20             	lea    eax,[edi+0x20]
c00036d1:	b9 20 00 00 00       	mov    ecx,0x20
c00036d6:	e8 f8 e3 ff ff       	call   c0001ad3 <mem_cpy>
c00036db:	31 d2                	xor    edx,edx
c00036dd:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036e1:	b9 0f 00 00 00       	mov    ecx,0xf
c00036e6:	83 c0 2c             	add    eax,0x2c
c00036e9:	f7 f1                	div    ecx
c00036eb:	c1 e0 05             	shl    eax,0x5
c00036ee:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036f2:	77 70                	ja     c0003764 <load_xdir+0x12a>
c00036f4:	bd 40 00 00 00       	mov    ebp,0x40
c00036f9:	31 d2                	xor    edx,edx
c00036fb:	89 f0                	mov    eax,esi
c00036fd:	e8 06 fe ff ff       	call   c0003508 <dir_next>
c0003702:	89 c3                	mov    ebx,eax
c0003704:	83 f8 04             	cmp    eax,0x4
c0003707:	74 5b                	je     c0003764 <load_xdir+0x12a>
c0003709:	85 c0                	test   eax,eax
c000370b:	75 5c                	jne    c0003769 <load_xdir+0x12f>
c000370d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003710:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003713:	8b 06                	mov    eax,DWORD PTR [esi]
c0003715:	e8 18 eb ff ff       	call   c0002232 <move_window>
c000371a:	89 c3                	mov    ebx,eax
c000371c:	85 c0                	test   eax,eax
c000371e:	75 49                	jne    c0003769 <load_xdir+0x12f>
c0003720:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003723:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003726:	75 3c                	jne    c0003764 <load_xdir+0x12a>
c0003728:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000372e:	77 0d                	ja     c000373d <load_xdir+0x103>
c0003730:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003733:	b9 20 00 00 00       	mov    ecx,0x20
c0003738:	e8 96 e3 ff ff       	call   c0001ad3 <mem_cpy>
c000373d:	83 c5 20             	add    ebp,0x20
c0003740:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003744:	77 b3                	ja     c00036f9 <load_xdir+0xbf>
c0003746:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000374c:	77 1b                	ja     c0003769 <load_xdir+0x12f>
c000374e:	89 f8                	mov    eax,edi
c0003750:	e8 cd e7 ff ff       	call   c0001f22 <xdir_sum>
c0003755:	89 c1                	mov    ecx,eax
c0003757:	8d 47 02             	lea    eax,[edi+0x2]
c000375a:	e8 f5 e2 ff ff       	call   c0001a54 <ld_word>
c000375f:	66 39 c1             	cmp    cx,ax
c0003762:	74 05                	je     c0003769 <load_xdir+0x12f>
c0003764:	bb 02 00 00 00       	mov    ebx,0x2
c0003769:	83 c4 1c             	add    esp,0x1c
c000376c:	89 d8                	mov    eax,ebx
c000376e:	5b                   	pop    ebx
c000376f:	5e                   	pop    esi
c0003770:	5f                   	pop    edi
c0003771:	5d                   	pop    ebp
c0003772:	c3                   	ret    

c0003773 <load_obj_xdir>:
c0003773:	53                   	push   ebx
c0003774:	89 c3                	mov    ebx,eax
c0003776:	83 ec 08             	sub    esp,0x8
c0003779:	8b 02                	mov    eax,DWORD PTR [edx]
c000377b:	89 03                	mov    DWORD PTR [ebx],eax
c000377d:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003780:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003783:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003786:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003789:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000378c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003793:	30 c0                	xor    al,al
c0003795:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000379c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000379f:	89 d8                	mov    eax,ebx
c00037a1:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00037a4:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00037a7:	e8 04 f8 ff ff       	call   c0002fb0 <dir_sdi>
c00037ac:	85 c0                	test   eax,eax
c00037ae:	75 0b                	jne    c00037bb <load_obj_xdir+0x48>
c00037b0:	89 d8                	mov    eax,ebx
c00037b2:	83 c4 08             	add    esp,0x8
c00037b5:	5b                   	pop    ebx
c00037b6:	e9 7f fe ff ff       	jmp    c000363a <load_xdir>
c00037bb:	83 c4 08             	add    esp,0x8
c00037be:	5b                   	pop    ebx
c00037bf:	c3                   	ret    

c00037c0 <dir_read>:
c00037c0:	55                   	push   ebp
c00037c1:	bd 04 00 00 00       	mov    ebp,0x4
c00037c6:	57                   	push   edi
c00037c7:	56                   	push   esi
c00037c8:	be ff ff ff ff       	mov    esi,0xffffffff
c00037cd:	53                   	push   ebx
c00037ce:	89 c3                	mov    ebx,eax
c00037d0:	83 ec 1c             	sub    esp,0x1c
c00037d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037d7:	8b 38                	mov    edi,DWORD PTR [eax]
c00037d9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037de:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037e1:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037e4:	89 c8                	mov    eax,ecx
c00037e6:	09 d0                	or     eax,edx
c00037e8:	0f 84 25 01 00 00    	je     c0003913 <dir_read+0x153>
c00037ee:	89 f8                	mov    eax,edi
c00037f0:	e8 3d ea ff ff       	call   c0002232 <move_window>
c00037f5:	89 c5                	mov    ebp,eax
c00037f7:	85 c0                	test   eax,eax
c00037f9:	0f 85 23 01 00 00    	jne    c0003922 <dir_read+0x162>
c00037ff:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003802:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003804:	84 c9                	test   cl,cl
c0003806:	0f 84 11 01 00 00    	je     c000391d <dir_read+0x15d>
c000380c:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000380f:	75 48                	jne    c0003859 <dir_read+0x99>
c0003811:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003816:	74 10                	je     c0003828 <dir_read+0x68>
c0003818:	80 f9 83             	cmp    cl,0x83
c000381b:	0f 85 dd 00 00 00    	jne    c00038fe <dir_read+0x13e>
c0003821:	31 ed                	xor    ebp,ebp
c0003823:	e9 08 01 00 00       	jmp    c0003930 <dir_read+0x170>
c0003828:	80 f9 85             	cmp    cl,0x85
c000382b:	0f 85 cd 00 00 00    	jne    c00038fe <dir_read+0x13e>
c0003831:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003834:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003837:	89 d8                	mov    eax,ebx
c0003839:	e8 fc fd ff ff       	call   c000363a <load_xdir>
c000383e:	89 c5                	mov    ebp,eax
c0003840:	85 c0                	test   eax,eax
c0003842:	0f 85 da 00 00 00    	jne    c0003922 <dir_read+0x162>
c0003848:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c000384b:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000384e:	83 e0 3f             	and    eax,0x3f
c0003851:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003854:	e9 d7 00 00 00       	jmp    c0003930 <dir_read+0x170>
c0003859:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000385c:	83 e0 3f             	and    eax,0x3f
c000385f:	80 f9 2e             	cmp    cl,0x2e
c0003862:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003866:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003869:	0f 84 8a 00 00 00    	je     c00038f9 <dir_read+0x139>
c000386f:	80 f9 e5             	cmp    cl,0xe5
c0003872:	0f 84 81 00 00 00    	je     c00038f9 <dir_read+0x139>
c0003878:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000387c:	83 e0 1f             	and    eax,0x1f
c000387f:	83 f8 08             	cmp    eax,0x8
c0003882:	0f 94 c0             	sete   al
c0003885:	0f b6 c0             	movzx  eax,al
c0003888:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000388c:	75 6b                	jne    c00038f9 <dir_read+0x139>
c000388e:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003893:	75 44                	jne    c00038d9 <dir_read+0x119>
c0003895:	f6 c1 40             	test   cl,0x40
c0003898:	74 12                	je     c00038ac <dir_read+0xec>
c000389a:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000389d:	83 e1 bf             	and    ecx,0xffffffbf
c00038a0:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00038a4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00038a7:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00038aa:	eb 06                	jmp    c00038b2 <dir_read+0xf2>
c00038ac:	89 f0                	mov    eax,esi
c00038ae:	38 c8                	cmp    al,cl
c00038b0:	75 47                	jne    c00038f9 <dir_read+0x139>
c00038b2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038b6:	be ff ff ff ff       	mov    esi,0xffffffff
c00038bb:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038be:	75 3e                	jne    c00038fe <dir_read+0x13e>
c00038c0:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038c4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038c7:	e8 8a e4 ff ff       	call   c0001d56 <pick_lfn>
c00038cc:	85 c0                	test   eax,eax
c00038ce:	74 2e                	je     c00038fe <dir_read+0x13e>
c00038d0:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038d4:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038d7:	eb 25                	jmp    c00038fe <dir_read+0x13e>
c00038d9:	89 f0                	mov    eax,esi
c00038db:	84 c0                	test   al,al
c00038dd:	75 11                	jne    c00038f0 <dir_read+0x130>
c00038df:	89 d0                	mov    eax,edx
c00038e1:	e8 2a e6 ff ff       	call   c0001f10 <sum_sfn>
c00038e6:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038ea:	0f 84 31 ff ff ff    	je     c0003821 <dir_read+0x61>
c00038f0:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038f7:	eb 37                	jmp    c0003930 <dir_read+0x170>
c00038f9:	be ff ff ff ff       	mov    esi,0xffffffff
c00038fe:	31 d2                	xor    edx,edx
c0003900:	89 d8                	mov    eax,ebx
c0003902:	e8 01 fc ff ff       	call   c0003508 <dir_next>
c0003907:	89 c5                	mov    ebp,eax
c0003909:	85 c0                	test   eax,eax
c000390b:	0f 84 cd fe ff ff    	je     c00037de <dir_read+0x1e>
c0003911:	eb 0f                	jmp    c0003922 <dir_read+0x162>
c0003913:	85 ed                	test   ebp,ebp
c0003915:	0f 84 06 ff ff ff    	je     c0003821 <dir_read+0x61>
c000391b:	eb 05                	jmp    c0003922 <dir_read+0x162>
c000391d:	bd 04 00 00 00       	mov    ebp,0x4
c0003922:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003929:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003930:	83 c4 1c             	add    esp,0x1c
c0003933:	89 e8                	mov    eax,ebp
c0003935:	5b                   	pop    ebx
c0003936:	5e                   	pop    esi
c0003937:	5f                   	pop    edi
c0003938:	5d                   	pop    ebp
c0003939:	c3                   	ret    

c000393a <dir_alloc>:
c000393a:	55                   	push   ebp
c000393b:	89 d5                	mov    ebp,edx
c000393d:	57                   	push   edi
c000393e:	31 d2                	xor    edx,edx
c0003940:	56                   	push   esi
c0003941:	53                   	push   ebx
c0003942:	89 c3                	mov    ebx,eax
c0003944:	83 ec 0c             	sub    esp,0xc
c0003947:	8b 38                	mov    edi,DWORD PTR [eax]
c0003949:	e8 62 f6 ff ff       	call   c0002fb0 <dir_sdi>
c000394e:	85 c0                	test   eax,eax
c0003950:	75 4e                	jne    c00039a0 <dir_alloc+0x66>
c0003952:	31 f6                	xor    esi,esi
c0003954:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003957:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000395a:	89 f8                	mov    eax,edi
c000395c:	e8 d1 e8 ff ff       	call   c0002232 <move_window>
c0003961:	85 c0                	test   eax,eax
c0003963:	75 3b                	jne    c00039a0 <dir_alloc+0x66>
c0003965:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003968:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000396b:	8a 12                	mov    dl,BYTE PTR [edx]
c000396d:	75 07                	jne    c0003976 <dir_alloc+0x3c>
c000396f:	f7 d2                	not    edx
c0003971:	c0 ea 07             	shr    dl,0x7
c0003974:	eb 0d                	jmp    c0003983 <dir_alloc+0x49>
c0003976:	84 d2                	test   dl,dl
c0003978:	0f 94 c1             	sete   cl
c000397b:	80 fa e5             	cmp    dl,0xe5
c000397e:	0f 94 c2             	sete   dl
c0003981:	09 ca                	or     edx,ecx
c0003983:	84 d2                	test   dl,dl
c0003985:	74 07                	je     c000398e <dir_alloc+0x54>
c0003987:	46                   	inc    esi
c0003988:	39 ee                	cmp    esi,ebp
c000398a:	75 04                	jne    c0003990 <dir_alloc+0x56>
c000398c:	eb 1c                	jmp    c00039aa <dir_alloc+0x70>
c000398e:	31 f6                	xor    esi,esi
c0003990:	ba 01 00 00 00       	mov    edx,0x1
c0003995:	89 d8                	mov    eax,ebx
c0003997:	e8 6c fb ff ff       	call   c0003508 <dir_next>
c000399c:	85 c0                	test   eax,eax
c000399e:	74 b4                	je     c0003954 <dir_alloc+0x1a>
c00039a0:	83 f8 04             	cmp    eax,0x4
c00039a3:	75 05                	jne    c00039aa <dir_alloc+0x70>
c00039a5:	b8 07 00 00 00       	mov    eax,0x7
c00039aa:	83 c4 0c             	add    esp,0xc
c00039ad:	5b                   	pop    ebx
c00039ae:	5e                   	pop    esi
c00039af:	5f                   	pop    edi
c00039b0:	5d                   	pop    ebp
c00039b1:	c3                   	ret    

c00039b2 <store_xdir>:
c00039b2:	55                   	push   ebp
c00039b3:	57                   	push   edi
c00039b4:	89 c7                	mov    edi,eax
c00039b6:	56                   	push   esi
c00039b7:	53                   	push   ebx
c00039b8:	83 ec 0c             	sub    esp,0xc
c00039bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00039bd:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039c0:	89 e8                	mov    eax,ebp
c00039c2:	e8 5b e5 ff ff       	call   c0001f22 <xdir_sum>
c00039c7:	0f b7 d0             	movzx  edx,ax
c00039ca:	8d 45 02             	lea    eax,[ebp+0x2]
c00039cd:	e8 f4 e0 ff ff       	call   c0001ac6 <st_word>
c00039d2:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039d6:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039d9:	89 f8                	mov    eax,edi
c00039db:	e8 d0 f5 ff ff       	call   c0002fb0 <dir_sdi>
c00039e0:	89 c6                	mov    esi,eax
c00039e2:	85 f6                	test   esi,esi
c00039e4:	75 3d                	jne    c0003a23 <store_xdir+0x71>
c00039e6:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039e9:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039ec:	8b 07                	mov    eax,DWORD PTR [edi]
c00039ee:	e8 3f e8 ff ff       	call   c0002232 <move_window>
c00039f3:	89 c6                	mov    esi,eax
c00039f5:	85 c0                	test   eax,eax
c00039f7:	75 2a                	jne    c0003a23 <store_xdir+0x71>
c00039f9:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039fc:	b9 20 00 00 00       	mov    ecx,0x20
c0003a01:	89 ea                	mov    edx,ebp
c0003a03:	e8 cb e0 ff ff       	call   c0001ad3 <mem_cpy>
c0003a08:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a0a:	85 db                	test   ebx,ebx
c0003a0c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003a10:	74 11                	je     c0003a23 <store_xdir+0x71>
c0003a12:	31 d2                	xor    edx,edx
c0003a14:	89 f8                	mov    eax,edi
c0003a16:	83 c5 20             	add    ebp,0x20
c0003a19:	e8 ea fa ff ff       	call   c0003508 <dir_next>
c0003a1e:	4b                   	dec    ebx
c0003a1f:	89 c6                	mov    esi,eax
c0003a21:	eb bf                	jmp    c00039e2 <store_xdir+0x30>
c0003a23:	89 f0                	mov    eax,esi
c0003a25:	83 fe 02             	cmp    esi,0x2
c0003a28:	76 05                	jbe    c0003a2f <store_xdir+0x7d>
c0003a2a:	b8 02 00 00 00       	mov    eax,0x2
c0003a2f:	83 c4 0c             	add    esp,0xc
c0003a32:	5b                   	pop    ebx
c0003a33:	5e                   	pop    esi
c0003a34:	5f                   	pop    edi
c0003a35:	5d                   	pop    ebp
c0003a36:	c3                   	ret    

c0003a37 <dir_remove>:
c0003a37:	57                   	push   edi
c0003a38:	56                   	push   esi
c0003a39:	53                   	push   ebx
c0003a3a:	89 c3                	mov    ebx,eax
c0003a3c:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a3f:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a41:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a44:	83 fa ff             	cmp    edx,0xffffffff
c0003a47:	74 09                	je     c0003a52 <dir_remove+0x1b>
c0003a49:	e8 62 f5 ff ff       	call   c0002fb0 <dir_sdi>
c0003a4e:	85 c0                	test   eax,eax
c0003a50:	75 41                	jne    c0003a93 <dir_remove+0x5c>
c0003a52:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a55:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a58:	89 f0                	mov    eax,esi
c0003a5a:	e8 d3 e7 ff ff       	call   c0002232 <move_window>
c0003a5f:	85 c0                	test   eax,eax
c0003a61:	75 26                	jne    c0003a89 <dir_remove+0x52>
c0003a63:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a66:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a69:	75 05                	jne    c0003a70 <dir_remove+0x39>
c0003a6b:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a6e:	eb 03                	jmp    c0003a73 <dir_remove+0x3c>
c0003a70:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a73:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a77:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a7a:	73 17                	jae    c0003a93 <dir_remove+0x5c>
c0003a7c:	31 d2                	xor    edx,edx
c0003a7e:	89 d8                	mov    eax,ebx
c0003a80:	e8 83 fa ff ff       	call   c0003508 <dir_next>
c0003a85:	85 c0                	test   eax,eax
c0003a87:	74 c9                	je     c0003a52 <dir_remove+0x1b>
c0003a89:	83 f8 04             	cmp    eax,0x4
c0003a8c:	75 05                	jne    c0003a93 <dir_remove+0x5c>
c0003a8e:	b8 02 00 00 00       	mov    eax,0x2
c0003a93:	5b                   	pop    ebx
c0003a94:	5e                   	pop    esi
c0003a95:	5f                   	pop    edi
c0003a96:	c3                   	ret    

c0003a97 <create_name>:
c0003a97:	55                   	push   ebp
c0003a98:	89 d5                	mov    ebp,edx
c0003a9a:	57                   	push   edi
c0003a9b:	89 c7                	mov    edi,eax
c0003a9d:	56                   	push   esi
c0003a9e:	31 f6                	xor    esi,esi
c0003aa0:	53                   	push   ebx
c0003aa1:	83 ec 3c             	sub    esp,0x3c
c0003aa4:	8b 02                	mov    eax,DWORD PTR [edx]
c0003aa6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003aaa:	8b 07                	mov    eax,DWORD PTR [edi]
c0003aac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003aaf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003ab3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003ab7:	e8 72 e0 ff ff       	call   c0001b2e <tchar2uni>
c0003abc:	89 c3                	mov    ebx,eax
c0003abe:	83 f8 ff             	cmp    eax,0xffffffff
c0003ac1:	75 0a                	jne    c0003acd <create_name+0x36>
c0003ac3:	b8 06 00 00 00       	mov    eax,0x6
c0003ac8:	e9 9e 02 00 00       	jmp    c0003d6b <create_name+0x2d4>
c0003acd:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ad2:	76 0c                	jbe    c0003ae0 <create_name+0x49>
c0003ad4:	c1 e8 10             	shr    eax,0x10
c0003ad7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003adb:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003adf:	46                   	inc    esi
c0003ae0:	66 83 fb 1f          	cmp    bx,0x1f
c0003ae4:	76 4f                	jbe    c0003b35 <create_name+0x9e>
c0003ae6:	66 83 fb 5c          	cmp    bx,0x5c
c0003aea:	74 35                	je     c0003b21 <create_name+0x8a>
c0003aec:	66 83 fb 2f          	cmp    bx,0x2f
c0003af0:	74 2f                	je     c0003b21 <create_name+0x8a>
c0003af2:	66 83 fb 7f          	cmp    bx,0x7f
c0003af6:	77 11                	ja     c0003b09 <create_name+0x72>
c0003af8:	0f b7 d3             	movzx  edx,bx
c0003afb:	b8 12 5e 02 c0       	mov    eax,0xc0025e12
c0003b00:	e8 11 e0 ff ff       	call   c0001b16 <chk_chr>
c0003b05:	85 c0                	test   eax,eax
c0003b07:	75 ba                	jne    c0003ac3 <create_name+0x2c>
c0003b09:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003b0f:	77 b2                	ja     c0003ac3 <create_name+0x2c>
c0003b11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b15:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b19:	46                   	inc    esi
c0003b1a:	eb 97                	jmp    c0003ab3 <create_name+0x1c>
c0003b1c:	40                   	inc    eax
c0003b1d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b21:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b25:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b27:	80 fa 2f             	cmp    dl,0x2f
c0003b2a:	74 f0                	je     c0003b1c <create_name+0x85>
c0003b2c:	80 fa 5c             	cmp    dl,0x5c
c0003b2f:	74 eb                	je     c0003b1c <create_name+0x85>
c0003b31:	31 db                	xor    ebx,ebx
c0003b33:	eb 02                	jmp    c0003b37 <create_name+0xa0>
c0003b35:	b3 04                	mov    bl,0x4
c0003b37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b3b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b3e:	85 f6                	test   esi,esi
c0003b40:	74 18                	je     c0003b5a <create_name+0xc3>
c0003b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b46:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b4b:	66 83 f8 20          	cmp    ax,0x20
c0003b4f:	74 06                	je     c0003b57 <create_name+0xc0>
c0003b51:	66 83 f8 2e          	cmp    ax,0x2e
c0003b55:	75 03                	jne    c0003b5a <create_name+0xc3>
c0003b57:	4e                   	dec    esi
c0003b58:	eb e4                	jmp    c0003b3e <create_name+0xa7>
c0003b5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b5e:	31 ed                	xor    ebp,ebp
c0003b60:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b66:	85 f6                	test   esi,esi
c0003b68:	0f 84 55 ff ff ff    	je     c0003ac3 <create_name+0x2c>
c0003b6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b72:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b75:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b79:	66 83 f8 20          	cmp    ax,0x20
c0003b7d:	75 04                	jne    c0003b83 <create_name+0xec>
c0003b7f:	89 d5                	mov    ebp,edx
c0003b81:	eb eb                	jmp    c0003b6e <create_name+0xd7>
c0003b83:	85 ed                	test   ebp,ebp
c0003b85:	75 06                	jne    c0003b8d <create_name+0xf6>
c0003b87:	66 83 f8 2e          	cmp    ax,0x2e
c0003b8b:	75 08                	jne    c0003b95 <create_name+0xfe>
c0003b8d:	83 cb 03             	or     ebx,0x3
c0003b90:	eb 03                	jmp    c0003b95 <create_name+0xfe>
c0003b92:	4e                   	dec    esi
c0003b93:	74 0c                	je     c0003ba1 <create_name+0x10a>
c0003b95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b99:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b9f:	75 f1                	jne    c0003b92 <create_name+0xfb>
c0003ba1:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ba6:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ba9:	ba 20 00 00 00       	mov    edx,0x20
c0003bae:	e8 35 df ff ff       	call   c0001ae8 <mem_set>
c0003bb3:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003bbb:	31 c9                	xor    ecx,ecx
c0003bbd:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003bc2:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bc5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003bc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003bcd:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bd1:	66 85 ed             	test   bp,bp
c0003bd4:	0f 84 30 01 00 00    	je     c0003d0a <create_name+0x273>
c0003bda:	66 83 fd 20          	cmp    bp,0x20
c0003bde:	74 10                	je     c0003bf0 <create_name+0x159>
c0003be0:	66 83 fd 2e          	cmp    bp,0x2e
c0003be4:	75 13                	jne    c0003bf9 <create_name+0x162>
c0003be6:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bea:	0f 84 6b 01 00 00    	je     c0003d5b <create_name+0x2c4>
c0003bf0:	83 cb 03             	or     ebx,0x3
c0003bf3:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003bf7:	eb c9                	jmp    c0003bc2 <create_name+0x12b>
c0003bf9:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bfd:	73 0b                	jae    c0003c0a <create_name+0x173>
c0003bff:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c03:	75 47                	jne    c0003c4c <create_name+0x1b5>
c0003c05:	e9 51 01 00 00       	jmp    c0003d5b <create_name+0x2c4>
c0003c0a:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c0f:	75 10                	jne    c0003c21 <create_name+0x18a>
c0003c11:	83 cb 03             	or     ebx,0x3
c0003c14:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c1c:	e9 e9 00 00 00       	jmp    c0003d0a <create_name+0x273>
c0003c21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c25:	74 0d                	je     c0003c34 <create_name+0x19d>
c0003c27:	83 cb 03             	or     ebx,0x3
c0003c2a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c2e:	0f 87 d6 00 00 00    	ja     c0003d0a <create_name+0x273>
c0003c34:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c39:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003c3d:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c45:	b9 08 00 00 00       	mov    ecx,0x8
c0003c4a:	eb a7                	jmp    c0003bf3 <create_name+0x15c>
c0003c4c:	66 83 fd 7f          	cmp    bp,0x7f
c0003c50:	76 68                	jbe    c0003cba <create_name+0x223>
c0003c52:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c56:	88 da                	mov    dl,bl
c0003c58:	83 ca 02             	or     edx,0x2
c0003c5b:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c5f:	50                   	push   eax
c0003c60:	50                   	push   eax
c0003c61:	68 b5 01 00 00       	push   0x1b5
c0003c66:	55                   	push   ebp
c0003c67:	e8 48 46 00 00       	call   c00082b4 <ff_uni2oem>
c0003c6c:	83 c4 10             	add    esp,0x10
c0003c6f:	89 c5                	mov    ebp,eax
c0003c71:	a8 80                	test   al,0x80
c0003c73:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c77:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c7b:	74 0c                	je     c0003c89 <create_name+0x1f2>
c0003c7d:	83 e5 7f             	and    ebp,0x7f
c0003c80:	0f b6 ad 60 5d 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffda2a0]
c0003c87:	eb 2a                	jmp    c0003cb3 <create_name+0x21c>
c0003c89:	66 3d ff 00          	cmp    ax,0xff
c0003c8d:	76 24                	jbe    c0003cb3 <create_name+0x21c>
c0003c8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c93:	48                   	dec    eax
c0003c94:	39 c8                	cmp    eax,ecx
c0003c96:	77 0c                	ja     c0003ca4 <create_name+0x20d>
c0003c98:	83 cb 03             	or     ebx,0x3
c0003c9b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c9f:	e9 4f ff ff ff       	jmp    c0003bf3 <create_name+0x15c>
c0003ca4:	89 e8                	mov    eax,ebp
c0003ca6:	88 d3                	mov    bl,dl
c0003ca8:	66 c1 e8 08          	shr    ax,0x8
c0003cac:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cb0:	41                   	inc    ecx
c0003cb1:	eb 4b                	jmp    c0003cfe <create_name+0x267>
c0003cb3:	88 d3                	mov    bl,dl
c0003cb5:	66 85 ed             	test   bp,bp
c0003cb8:	74 19                	je     c0003cd3 <create_name+0x23c>
c0003cba:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003cbe:	0f b7 d5             	movzx  edx,bp
c0003cc1:	b8 1b 5e 02 c0       	mov    eax,0xc0025e1b
c0003cc6:	e8 4b de ff ff       	call   c0001b16 <chk_chr>
c0003ccb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ccf:	85 c0                	test   eax,eax
c0003cd1:	74 0a                	je     c0003cdd <create_name+0x246>
c0003cd3:	83 cb 03             	or     ebx,0x3
c0003cd6:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cdb:	eb 21                	jmp    c0003cfe <create_name+0x267>
c0003cdd:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003ce0:	66 83 f8 19          	cmp    ax,0x19
c0003ce4:	77 07                	ja     c0003ced <create_name+0x256>
c0003ce6:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ceb:	eb 11                	jmp    c0003cfe <create_name+0x267>
c0003ced:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003cf0:	66 83 f8 19          	cmp    ax,0x19
c0003cf4:	77 08                	ja     c0003cfe <create_name+0x267>
c0003cf6:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003cfb:	83 ed 20             	sub    ebp,0x20
c0003cfe:	89 e8                	mov    eax,ebp
c0003d00:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003d04:	41                   	inc    ecx
c0003d05:	e9 e9 fe ff ff       	jmp    c0003bf3 <create_name+0x15c>
c0003d0a:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003d0e:	75 04                	jne    c0003d14 <create_name+0x27d>
c0003d10:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003d14:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003d19:	75 05                	jne    c0003d20 <create_name+0x289>
c0003d1b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d20:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d24:	83 e0 0c             	and    eax,0xc
c0003d27:	3c 0c                	cmp    al,0xc
c0003d29:	74 0b                	je     c0003d36 <create_name+0x29f>
c0003d2b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d2f:	83 e0 03             	and    eax,0x3
c0003d32:	3c 03                	cmp    al,0x3
c0003d34:	75 05                	jne    c0003d3b <create_name+0x2a4>
c0003d36:	83 cb 02             	or     ebx,0x2
c0003d39:	eb 19                	jmp    c0003d54 <create_name+0x2bd>
c0003d3b:	f6 c3 02             	test   bl,0x2
c0003d3e:	75 14                	jne    c0003d54 <create_name+0x2bd>
c0003d40:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d45:	74 03                	je     c0003d4a <create_name+0x2b3>
c0003d47:	83 cb 10             	or     ebx,0x10
c0003d4a:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d4f:	74 03                	je     c0003d54 <create_name+0x2bd>
c0003d51:	83 cb 08             	or     ebx,0x8
c0003d54:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d57:	31 c0                	xor    eax,eax
c0003d59:	eb 10                	jmp    c0003d6b <create_name+0x2d4>
c0003d5b:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d60:	0f 85 ce fe ff ff    	jne    c0003c34 <create_name+0x19d>
c0003d66:	e9 a6 fe ff ff       	jmp    c0003c11 <create_name+0x17a>
c0003d6b:	83 c4 3c             	add    esp,0x3c
c0003d6e:	5b                   	pop    ebx
c0003d6f:	5e                   	pop    esi
c0003d70:	5f                   	pop    edi
c0003d71:	5d                   	pop    ebp
c0003d72:	c3                   	ret    

c0003d73 <xname_sum>:
c0003d73:	56                   	push   esi
c0003d74:	53                   	push   ebx
c0003d75:	89 c6                	mov    esi,eax
c0003d77:	51                   	push   ecx
c0003d78:	31 db                	xor    ebx,ebx
c0003d7a:	83 c6 02             	add    esi,0x2
c0003d7d:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d81:	66 85 c0             	test   ax,ax
c0003d84:	74 1f                	je     c0003da5 <xname_sum+0x32>
c0003d86:	83 ec 0c             	sub    esp,0xc
c0003d89:	66 d1 cb             	ror    bx,1
c0003d8c:	50                   	push   eax
c0003d8d:	e8 1e 46 00 00       	call   c00083b0 <ff_wtoupper>
c0003d92:	83 c4 10             	add    esp,0x10
c0003d95:	0f b6 d0             	movzx  edx,al
c0003d98:	66 c1 e8 08          	shr    ax,0x8
c0003d9c:	01 d3                	add    ebx,edx
c0003d9e:	66 d1 cb             	ror    bx,1
c0003da1:	01 c3                	add    ebx,eax
c0003da3:	eb d5                	jmp    c0003d7a <xname_sum+0x7>
c0003da5:	89 d8                	mov    eax,ebx
c0003da7:	5a                   	pop    edx
c0003da8:	5b                   	pop    ebx
c0003da9:	5e                   	pop    esi
c0003daa:	c3                   	ret    

c0003dab <create_xdir>:
c0003dab:	55                   	push   ebp
c0003dac:	b9 40 00 00 00       	mov    ecx,0x40
c0003db1:	57                   	push   edi
c0003db2:	bd 01 00 00 00       	mov    ebp,0x1
c0003db7:	56                   	push   esi
c0003db8:	31 ff                	xor    edi,edi
c0003dba:	53                   	push   ebx
c0003dbb:	be 40 00 00 00       	mov    esi,0x40
c0003dc0:	89 c3                	mov    ebx,eax
c0003dc2:	83 ec 1c             	sub    esp,0x1c
c0003dc5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003dc9:	31 d2                	xor    edx,edx
c0003dcb:	e8 18 dd ff ff       	call   c0001ae8 <mem_set>
c0003dd0:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003dd3:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003dd7:	31 c9                	xor    ecx,ecx
c0003dd9:	8d 46 01             	lea    eax,[esi+0x1]
c0003ddc:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003de0:	83 c6 02             	add    esi,0x2
c0003de3:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003de7:	66 85 ed             	test   bp,bp
c0003dea:	74 12                	je     c0003dfe <create_xdir+0x53>
c0003dec:	0f b6 c1             	movzx  eax,cl
c0003def:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003df3:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003df7:	66 83 fd 01          	cmp    bp,0x1
c0003dfb:	80 d9 ff             	sbb    cl,0xff
c0003dfe:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003e01:	0f b7 d5             	movzx  edx,bp
c0003e04:	83 c6 02             	add    esi,0x2
c0003e07:	e8 ba dc ff ff       	call   c0001ac6 <st_word>
c0003e0c:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003e12:	75 d3                	jne    c0003de7 <create_xdir+0x3c>
c0003e14:	8d 47 01             	lea    eax,[edi+0x1]
c0003e17:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e1b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003e1f:	0f b6 c1             	movzx  eax,cl
c0003e22:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003e27:	74 07                	je     c0003e30 <create_xdir+0x85>
c0003e29:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003e2e:	eb a9                	jmp    c0003dd9 <create_xdir+0x2e>
c0003e30:	8d 47 02             	lea    eax,[edi+0x2]
c0003e33:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e36:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e39:	89 d0                	mov    eax,edx
c0003e3b:	e8 33 ff ff ff       	call   c0003d73 <xname_sum>
c0003e40:	83 c4 1c             	add    esp,0x1c
c0003e43:	0f b7 d0             	movzx  edx,ax
c0003e46:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e49:	5b                   	pop    ebx
c0003e4a:	5e                   	pop    esi
c0003e4b:	5f                   	pop    edi
c0003e4c:	5d                   	pop    ebp
c0003e4d:	e9 74 dc ff ff       	jmp    c0001ac6 <st_word>

c0003e52 <cmp_lfn>:
c0003e52:	55                   	push   ebp
c0003e53:	57                   	push   edi
c0003e54:	89 d7                	mov    edi,edx
c0003e56:	56                   	push   esi
c0003e57:	53                   	push   ebx
c0003e58:	83 ec 1c             	sub    esp,0x1c
c0003e5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e5f:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e62:	e8 ed db ff ff       	call   c0001a54 <ld_word>
c0003e67:	66 85 c0             	test   ax,ax
c0003e6a:	74 07                	je     c0003e73 <cmp_lfn+0x21>
c0003e6c:	31 c0                	xor    eax,eax
c0003e6e:	e9 9a 00 00 00       	jmp    c0003f0d <cmp_lfn+0xbb>
c0003e73:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e75:	bd 01 00 00 00       	mov    ebp,0x1
c0003e7a:	83 e3 3f             	and    ebx,0x3f
c0003e7d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e85:	4b                   	dec    ebx
c0003e86:	6b db 0d             	imul   ebx,ebx,0xd
c0003e89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e8d:	0f b6 80 e0 5d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda220]
c0003e94:	01 f8                	add    eax,edi
c0003e96:	e8 b9 db ff ff       	call   c0001a54 <ld_word>
c0003e9b:	66 85 ed             	test   bp,bp
c0003e9e:	89 c6                	mov    esi,eax
c0003ea0:	74 3c                	je     c0003ede <cmp_lfn+0x8c>
c0003ea2:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003ea8:	77 c2                	ja     c0003e6c <cmp_lfn+0x1a>
c0003eaa:	83 ec 0c             	sub    esp,0xc
c0003ead:	0f b7 c0             	movzx  eax,ax
c0003eb0:	50                   	push   eax
c0003eb1:	e8 fa 44 00 00       	call   c00083b0 <ff_wtoupper>
c0003eb6:	89 c5                	mov    ebp,eax
c0003eb8:	8d 43 01             	lea    eax,[ebx+0x1]
c0003ebb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003ebf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003ec3:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003ec7:	89 04 24             	mov    DWORD PTR [esp],eax
c0003eca:	e8 e1 44 00 00       	call   c00083b0 <ff_wtoupper>
c0003ecf:	83 c4 10             	add    esp,0x10
c0003ed2:	39 c5                	cmp    ebp,eax
c0003ed4:	75 96                	jne    c0003e6c <cmp_lfn+0x1a>
c0003ed6:	89 f5                	mov    ebp,esi
c0003ed8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003edc:	eb 04                	jmp    c0003ee2 <cmp_lfn+0x90>
c0003ede:	66 46                	inc    si
c0003ee0:	75 8a                	jne    c0003e6c <cmp_lfn+0x1a>
c0003ee2:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003ee6:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003eeb:	75 9c                	jne    c0003e89 <cmp_lfn+0x37>
c0003eed:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ef0:	74 16                	je     c0003f08 <cmp_lfn+0xb6>
c0003ef2:	66 85 ed             	test   bp,bp
c0003ef5:	74 11                	je     c0003f08 <cmp_lfn+0xb6>
c0003ef7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003efb:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003f00:	0f 94 c0             	sete   al
c0003f03:	0f b6 c0             	movzx  eax,al
c0003f06:	eb 05                	jmp    c0003f0d <cmp_lfn+0xbb>
c0003f08:	b8 01 00 00 00       	mov    eax,0x1
c0003f0d:	83 c4 1c             	add    esp,0x1c
c0003f10:	5b                   	pop    ebx
c0003f11:	5e                   	pop    esi
c0003f12:	5f                   	pop    edi
c0003f13:	5d                   	pop    ebp
c0003f14:	c3                   	ret    

c0003f15 <dir_find>:
c0003f15:	55                   	push   ebp
c0003f16:	31 d2                	xor    edx,edx
c0003f18:	57                   	push   edi
c0003f19:	56                   	push   esi
c0003f1a:	53                   	push   ebx
c0003f1b:	89 c3                	mov    ebx,eax
c0003f1d:	83 ec 1c             	sub    esp,0x1c
c0003f20:	8b 30                	mov    esi,DWORD PTR [eax]
c0003f22:	e8 89 f0 ff ff       	call   c0002fb0 <dir_sdi>
c0003f27:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f2a:	85 c0                	test   eax,eax
c0003f2c:	0f 85 9e 01 00 00    	jne    c00040d0 <dir_find+0x1bb>
c0003f32:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f35:	0f 85 8d 00 00 00    	jne    c0003fc8 <dir_find+0xb3>
c0003f3b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f3e:	e8 30 fe ff ff       	call   c0003d73 <xname_sum>
c0003f43:	89 c7                	mov    edi,eax
c0003f45:	31 d2                	xor    edx,edx
c0003f47:	89 d8                	mov    eax,ebx
c0003f49:	e8 72 f8 ff ff       	call   c00037c0 <dir_read>
c0003f4e:	85 c0                	test   eax,eax
c0003f50:	0f 85 5e 01 00 00    	jne    c00040b4 <dir_find+0x19f>
c0003f56:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f59:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f5c:	e8 f3 da ff ff       	call   c0001a54 <ld_word>
c0003f61:	66 39 f8             	cmp    ax,di
c0003f64:	75 df                	jne    c0003f45 <dir_find+0x30>
c0003f66:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f69:	31 ed                	xor    ebp,ebp
c0003f6b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f6f:	ba 40 00 00 00       	mov    edx,0x40
c0003f74:	89 e9                	mov    ecx,ebp
c0003f76:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f7a:	0f 84 42 01 00 00    	je     c00040c2 <dir_find+0x1ad>
c0003f80:	f6 c2 1f             	test   dl,0x1f
c0003f83:	75 03                	jne    c0003f88 <dir_find+0x73>
c0003f85:	83 c2 02             	add    edx,0x2
c0003f88:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f8c:	89 d0                	mov    eax,edx
c0003f8e:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f91:	e8 be da ff ff       	call   c0001a54 <ld_word>
c0003f96:	83 ec 0c             	sub    esp,0xc
c0003f99:	0f b7 c0             	movzx  eax,ax
c0003f9c:	50                   	push   eax
c0003f9d:	e8 0e 44 00 00       	call   c00083b0 <ff_wtoupper>
c0003fa2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003fa6:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003fa9:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003fad:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fb0:	e8 fb 43 00 00       	call   c00083b0 <ff_wtoupper>
c0003fb5:	83 c4 10             	add    esp,0x10
c0003fb8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003fbc:	75 87                	jne    c0003f45 <dir_find+0x30>
c0003fbe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003fc2:	45                   	inc    ebp
c0003fc3:	83 c2 02             	add    edx,0x2
c0003fc6:	eb ac                	jmp    c0003f74 <dir_find+0x5f>
c0003fc8:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fcf:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fd4:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fd9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003fdc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003fdf:	89 f0                	mov    eax,esi
c0003fe1:	e8 4c e2 ff ff       	call   c0002232 <move_window>
c0003fe6:	85 c0                	test   eax,eax
c0003fe8:	0f 85 c6 00 00 00    	jne    c00040b4 <dir_find+0x19f>
c0003fee:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003ff1:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003ff4:	84 c9                	test   cl,cl
c0003ff6:	0f 84 bd 00 00 00    	je     c00040b9 <dir_find+0x1a4>
c0003ffc:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fff:	88 d0                	mov    al,dl
c0004001:	83 e0 3f             	and    eax,0x3f
c0004004:	80 f9 e5             	cmp    cl,0xe5
c0004007:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000400a:	0f 84 87 00 00 00    	je     c0004097 <dir_find+0x182>
c0004010:	80 e2 08             	and    dl,0x8
c0004013:	74 06                	je     c000401b <dir_find+0x106>
c0004015:	3c 0f                	cmp    al,0xf
c0004017:	75 7e                	jne    c0004097 <dir_find+0x182>
c0004019:	eb 04                	jmp    c000401f <dir_find+0x10a>
c000401b:	3c 0f                	cmp    al,0xf
c000401d:	75 4c                	jne    c000406b <dir_find+0x156>
c000401f:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004023:	75 7e                	jne    c00040a3 <dir_find+0x18e>
c0004025:	f6 c1 40             	test   cl,0x40
c0004028:	74 12                	je     c000403c <dir_find+0x127>
c000402a:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000402d:	83 e1 bf             	and    ecx,0xffffffbf
c0004030:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004034:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004037:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000403a:	eb 06                	jmp    c0004042 <dir_find+0x12d>
c000403c:	89 f8                	mov    eax,edi
c000403e:	38 c8                	cmp    al,cl
c0004040:	75 5c                	jne    c000409e <dir_find+0x189>
c0004042:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004046:	bf ff ff ff ff       	mov    edi,0xffffffff
c000404b:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000404e:	75 53                	jne    c00040a3 <dir_find+0x18e>
c0004050:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004054:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004057:	89 ea                	mov    edx,ebp
c0004059:	e8 f4 fd ff ff       	call   c0003e52 <cmp_lfn>
c000405e:	85 c0                	test   eax,eax
c0004060:	74 41                	je     c00040a3 <dir_find+0x18e>
c0004062:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004066:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004069:	eb 38                	jmp    c00040a3 <dir_find+0x18e>
c000406b:	89 f8                	mov    eax,edi
c000406d:	84 c0                	test   al,al
c000406f:	75 0d                	jne    c000407e <dir_find+0x169>
c0004071:	89 e8                	mov    eax,ebp
c0004073:	e8 98 de ff ff       	call   c0001f10 <sum_sfn>
c0004078:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000407c:	74 52                	je     c00040d0 <dir_find+0x1bb>
c000407e:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004082:	75 13                	jne    c0004097 <dir_find+0x182>
c0004084:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004087:	b9 0b 00 00 00       	mov    ecx,0xb
c000408c:	89 e8                	mov    eax,ebp
c000408e:	e8 60 da ff ff       	call   c0001af3 <mem_cmp>
c0004093:	85 c0                	test   eax,eax
c0004095:	74 39                	je     c00040d0 <dir_find+0x1bb>
c0004097:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000409e:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040a3:	31 d2                	xor    edx,edx
c00040a5:	89 d8                	mov    eax,ebx
c00040a7:	e8 5c f4 ff ff       	call   c0003508 <dir_next>
c00040ac:	85 c0                	test   eax,eax
c00040ae:	0f 84 25 ff ff ff    	je     c0003fd9 <dir_find+0xc4>
c00040b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b7:	eb 17                	jmp    c00040d0 <dir_find+0x1bb>
c00040b9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00040c0:	eb 0e                	jmp    c00040d0 <dir_find+0x1bb>
c00040c2:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040c5:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00040ca:	0f 85 75 fe ff ff    	jne    c0003f45 <dir_find+0x30>
c00040d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00040d3:	83 c4 1c             	add    esp,0x1c
c00040d6:	5b                   	pop    ebx
c00040d7:	5e                   	pop    esi
c00040d8:	5f                   	pop    edi
c00040d9:	5d                   	pop    ebp
c00040da:	c3                   	ret    

c00040db <dir_register>:
c00040db:	55                   	push   ebp
c00040dc:	57                   	push   edi
c00040dd:	56                   	push   esi
c00040de:	be 06 00 00 00       	mov    esi,0x6
c00040e3:	53                   	push   ebx
c00040e4:	83 ec 6c             	sub    esp,0x6c
c00040e7:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040eb:	0f 85 62 02 00 00    	jne    c0004353 <dir_register+0x278>
c00040f1:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040f3:	31 ff                	xor    edi,edi
c00040f5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040f8:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040fd:	74 03                	je     c0004102 <dir_register+0x27>
c00040ff:	47                   	inc    edi
c0004100:	eb f6                	jmp    c00040f8 <dir_register+0x1d>
c0004102:	89 c3                	mov    ebx,eax
c0004104:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004108:	0f 85 e1 00 00 00    	jne    c00041ef <dir_register+0x114>
c000410e:	83 c7 0e             	add    edi,0xe
c0004111:	b9 0f 00 00 00       	mov    ecx,0xf
c0004116:	89 f8                	mov    eax,edi
c0004118:	31 d2                	xor    edx,edx
c000411a:	f7 f1                	div    ecx
c000411c:	8d 50 02             	lea    edx,[eax+0x2]
c000411f:	89 c7                	mov    edi,eax
c0004121:	89 d8                	mov    eax,ebx
c0004123:	e8 12 f8 ff ff       	call   c000393a <dir_alloc>
c0004128:	89 c6                	mov    esi,eax
c000412a:	85 c0                	test   eax,eax
c000412c:	0f 85 21 02 00 00    	jne    c0004353 <dir_register+0x278>
c0004132:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004138:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000413b:	c1 e7 05             	shl    edi,0x5
c000413e:	29 f8                	sub    eax,edi
c0004140:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004143:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004146:	a8 04                	test   al,0x4
c0004148:	0f 84 91 00 00 00    	je     c00041df <dir_register+0x104>
c000414e:	83 e0 fb             	and    eax,0xfffffffb
c0004151:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 25 ec ff ff       	call   c0002d80 <fill_first_frag>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 ee 01 00 00    	jne    c0004351 <dir_register+0x276>
c0004163:	83 c9 ff             	or     ecx,0xffffffff
c0004166:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004169:	89 d8                	mov    eax,ebx
c000416b:	e8 db eb ff ff       	call   c0002d4b <fill_last_frag>
c0004170:	85 c0                	test   eax,eax
c0004172:	0f 85 d9 01 00 00    	jne    c0004351 <dir_register+0x276>
c0004178:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417c:	74 61                	je     c00041df <dir_register+0x104>
c000417e:	89 da                	mov    edx,ebx
c0004180:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004184:	e8 ea f5 ff ff       	call   c0003773 <load_obj_xdir>
c0004189:	85 c0                	test   eax,eax
c000418b:	0f 85 c0 01 00 00    	jne    c0004351 <dir_register+0x276>
c0004191:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004195:	31 c9                	xor    ecx,ecx
c0004197:	c1 e2 09             	shl    edx,0x9
c000419a:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000419d:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00041a0:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00041a3:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00041a6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041a9:	83 c0 38             	add    eax,0x38
c00041ac:	e8 1c d9 ff ff       	call   c0001acd <st_qword>
c00041b1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041b4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00041b7:	83 c0 28             	add    eax,0x28
c00041ba:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00041bd:	e8 0b d9 ff ff       	call   c0001acd <st_qword>
c00041c2:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00041c5:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00041c8:	83 c8 01             	or     eax,0x1
c00041cb:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00041ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041d2:	e8 db f7 ff ff       	call   c00039b2 <store_xdir>
c00041d7:	85 c0                	test   eax,eax
c00041d9:	0f 85 72 01 00 00    	jne    c0004351 <dir_register+0x276>
c00041df:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041e2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041e5:	e8 c1 fb ff ff       	call   c0003dab <create_xdir>
c00041ea:	e9 64 01 00 00       	jmp    c0004353 <dir_register+0x278>
c00041ef:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041f2:	b9 0c 00 00 00       	mov    ecx,0xc
c00041f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041fb:	89 c2                	mov    edx,eax
c00041fd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004201:	e8 cd d8 ff ff       	call   c0001ad3 <mem_cpy>
c0004206:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c000420b:	74 58                	je     c0004265 <dir_register+0x18a>
c000420d:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004211:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004219:	83 ec 0c             	sub    esp,0xc
c000421c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000421f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004223:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004227:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000422b:	e8 24 dc ff ff       	call   c0001e54 <gen_numname>
c0004230:	89 d8                	mov    eax,ebx
c0004232:	e8 de fc ff ff       	call   c0003f15 <dir_find>
c0004237:	83 c4 10             	add    esp,0x10
c000423a:	89 c6                	mov    esi,eax
c000423c:	85 c0                	test   eax,eax
c000423e:	75 15                	jne    c0004255 <dir_register+0x17a>
c0004240:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004244:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004249:	75 ce                	jne    c0004219 <dir_register+0x13e>
c000424b:	be 07 00 00 00       	mov    esi,0x7
c0004250:	e9 fe 00 00 00       	jmp    c0004353 <dir_register+0x278>
c0004255:	83 f8 04             	cmp    eax,0x4
c0004258:	0f 85 f5 00 00 00    	jne    c0004353 <dir_register+0x278>
c000425e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004262:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004265:	b9 01 00 00 00       	mov    ecx,0x1
c000426a:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000426f:	74 0f                	je     c0004280 <dir_register+0x1a5>
c0004271:	b9 0d 00 00 00       	mov    ecx,0xd
c0004276:	8d 47 0c             	lea    eax,[edi+0xc]
c0004279:	31 d2                	xor    edx,edx
c000427b:	f7 f1                	div    ecx
c000427d:	8d 48 01             	lea    ecx,[eax+0x1]
c0004280:	89 ca                	mov    edx,ecx
c0004282:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004286:	89 d8                	mov    eax,ebx
c0004288:	e8 ad f6 ff ff       	call   c000393a <dir_alloc>
c000428d:	89 c6                	mov    esi,eax
c000428f:	85 c0                	test   eax,eax
c0004291:	0f 85 bc 00 00 00    	jne    c0004353 <dir_register+0x278>
c0004297:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000429b:	49                   	dec    ecx
c000429c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00042a0:	74 6a                	je     c000430c <dir_register+0x231>
c00042a2:	89 c8                	mov    eax,ecx
c00042a4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00042a7:	c1 e0 05             	shl    eax,0x5
c00042aa:	29 c2                	sub    edx,eax
c00042ac:	89 d8                	mov    eax,ebx
c00042ae:	e8 fd ec ff ff       	call   c0002fb0 <dir_sdi>
c00042b3:	89 c6                	mov    esi,eax
c00042b5:	85 c0                	test   eax,eax
c00042b7:	0f 85 96 00 00 00    	jne    c0004353 <dir_register+0x278>
c00042bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00042c1:	e8 4a dc ff ff       	call   c0001f10 <sum_sfn>
c00042c6:	0f b6 f8             	movzx  edi,al
c00042c9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042cc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042cf:	89 e8                	mov    eax,ebp
c00042d1:	e8 5c df ff ff       	call   c0002232 <move_window>
c00042d6:	89 c6                	mov    esi,eax
c00042d8:	85 c0                	test   eax,eax
c00042da:	75 77                	jne    c0004353 <dir_register+0x278>
c00042dc:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00042e1:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042e4:	83 ec 0c             	sub    esp,0xc
c00042e7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042ea:	57                   	push   edi
c00042eb:	e8 e0 da ff ff       	call   c0001dd0 <put_lfn>
c00042f0:	31 d2                	xor    edx,edx
c00042f2:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042f6:	89 d8                	mov    eax,ebx
c00042f8:	e8 0b f2 ff ff       	call   c0003508 <dir_next>
c00042fd:	83 c4 10             	add    esp,0x10
c0004300:	89 c6                	mov    esi,eax
c0004302:	85 c0                	test   eax,eax
c0004304:	75 4d                	jne    c0004353 <dir_register+0x278>
c0004306:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c000430a:	75 bd                	jne    c00042c9 <dir_register+0x1ee>
c000430c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000430f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004312:	89 e8                	mov    eax,ebp
c0004314:	e8 19 df ff ff       	call   c0002232 <move_window>
c0004319:	89 c6                	mov    esi,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	75 34                	jne    c0004353 <dir_register+0x278>
c000431f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004322:	b9 20 00 00 00       	mov    ecx,0x20
c0004327:	31 d2                	xor    edx,edx
c0004329:	e8 ba d7 ff ff       	call   c0001ae8 <mem_set>
c000432e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004331:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004335:	b9 0b 00 00 00       	mov    ecx,0xb
c000433a:	e8 94 d7 ff ff       	call   c0001ad3 <mem_cpy>
c000433f:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004342:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004345:	83 e0 18             	and    eax,0x18
c0004348:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000434b:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000434f:	eb 02                	jmp    c0004353 <dir_register+0x278>
c0004351:	89 c6                	mov    esi,eax
c0004353:	83 c4 6c             	add    esp,0x6c
c0004356:	89 f0                	mov    eax,esi
c0004358:	5b                   	pop    ebx
c0004359:	5e                   	pop    esi
c000435a:	5f                   	pop    edi
c000435b:	5d                   	pop    ebp
c000435c:	c3                   	ret    

c000435d <sync_fs>:
c000435d:	56                   	push   esi
c000435e:	53                   	push   ebx
c000435f:	53                   	push   ebx
c0004360:	89 c3                	mov    ebx,eax
c0004362:	e8 37 de ff ff       	call   c000219e <sync_window>
c0004367:	85 c0                	test   eax,eax
c0004369:	0f 85 b1 00 00 00    	jne    c0004420 <sync_fs+0xc3>
c000436f:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004372:	0f 85 8e 00 00 00    	jne    c0004406 <sync_fs+0xa9>
c0004378:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000437c:	0f 85 84 00 00 00    	jne    c0004406 <sync_fs+0xa9>
c0004382:	b9 00 02 00 00       	mov    ecx,0x200
c0004387:	8d 73 54             	lea    esi,[ebx+0x54]
c000438a:	31 d2                	xor    edx,edx
c000438c:	89 f0                	mov    eax,esi
c000438e:	e8 55 d7 ff ff       	call   c0001ae8 <mem_set>
c0004393:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004399:	ba 55 aa 00 00       	mov    edx,0xaa55
c000439e:	e8 23 d7 ff ff       	call   c0001ac6 <st_word>
c00043a3:	ba 52 52 61 41       	mov    edx,0x41615252
c00043a8:	89 f0                	mov    eax,esi
c00043aa:	e8 1b d7 ff ff       	call   c0001aca <st_dword>
c00043af:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00043b5:	ba 72 72 41 61       	mov    edx,0x61417272
c00043ba:	e8 0b d7 ff ff       	call   c0001aca <st_dword>
c00043bf:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043c2:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00043c8:	e8 fd d6 ff ff       	call   c0001aca <st_dword>
c00043cd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043d0:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043d6:	e8 ef d6 ff ff       	call   c0001aca <st_dword>
c00043db:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043de:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043e1:	83 c0 01             	add    eax,0x1
c00043e4:	83 d2 00             	adc    edx,0x0
c00043e7:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043ea:	83 ec 0c             	sub    esp,0xc
c00043ed:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043f0:	6a 01                	push   0x1
c00043f2:	52                   	push   edx
c00043f3:	50                   	push   eax
c00043f4:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043f8:	56                   	push   esi
c00043f9:	50                   	push   eax
c00043fa:	e8 20 d6 ff ff       	call   c0001a1f <disk_write>
c00043ff:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004403:	83 c4 20             	add    esp,0x20
c0004406:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000440a:	51                   	push   ecx
c000440b:	6a 00                	push   0x0
c000440d:	6a 00                	push   0x0
c000440f:	50                   	push   eax
c0004410:	e8 20 d6 ff ff       	call   c0001a35 <disk_ioctl>
c0004415:	83 c4 10             	add    esp,0x10
c0004418:	85 c0                	test   eax,eax
c000441a:	0f 95 c0             	setne  al
c000441d:	0f b6 c0             	movzx  eax,al
c0004420:	5a                   	pop    edx
c0004421:	5b                   	pop    ebx
c0004422:	5e                   	pop    esi
c0004423:	c3                   	ret    

c0004424 <create_partition>:
c0004424:	55                   	push   ebp
c0004425:	0f b6 c0             	movzx  eax,al
c0004428:	57                   	push   edi
c0004429:	56                   	push   esi
c000442a:	53                   	push   ebx
c000442b:	83 ec 60             	sub    esp,0x60
c000442e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004432:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004436:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000443a:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000443e:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004442:	50                   	push   eax
c0004443:	6a 01                	push   0x1
c0004445:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004449:	e8 e7 d5 ff ff       	call   c0001a35 <disk_ioctl>
c000444e:	83 c4 10             	add    esp,0x10
c0004451:	85 c0                	test   eax,eax
c0004453:	74 0a                	je     c000445f <create_partition+0x3b>
c0004455:	b8 01 00 00 00       	mov    eax,0x1
c000445a:	e9 67 05 00 00       	jmp    c00049c6 <create_partition+0x5a2>
c000445f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004463:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004467:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000446b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000446f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004474:	0f 86 ed 03 00 00    	jbe    c0004867 <create_partition+0x443>
c000447a:	83 c0 df             	add    eax,0xffffffdf
c000447d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004485:	83 d2 ff             	adc    edx,0xffffffff
c0004488:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000448c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004490:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004498:	83 c0 bd             	add    eax,0xffffffbd
c000449b:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00044a2:	83 d2 ff             	adc    edx,0xffffffff
c00044a5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00044a9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00044ad:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044b5:	be 22 00 00 00       	mov    esi,0x22
c00044ba:	31 ff                	xor    edi,edi
c00044bc:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00044c4:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00044cc:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044d4:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044d8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044de:	75 0e                	jne    c00044ee <create_partition+0xca>
c00044e0:	b9 00 02 00 00       	mov    ecx,0x200
c00044e5:	31 d2                	xor    edx,edx
c00044e7:	89 d8                	mov    eax,ebx
c00044e9:	e8 fa d5 ff ff       	call   c0001ae8 <mem_set>
c00044ee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044f2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044fa:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044fd:	0f 84 23 01 00 00    	je     c0004626 <create_partition+0x202>
c0004503:	89 f0                	mov    eax,esi
c0004505:	89 fa                	mov    edx,edi
c0004507:	05 ff 07 00 00       	add    eax,0x7ff
c000450c:	83 d2 00             	adc    edx,0x0
c000450f:	89 c1                	mov    ecx,eax
c0004511:	89 d7                	mov    edi,edx
c0004513:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004519:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000451d:	89 ce                	mov    esi,ecx
c000451f:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004523:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004527:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c000452b:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000452e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004532:	89 04 24             	mov    DWORD PTR [esp],eax
c0004535:	b8 64 00 00 00       	mov    eax,0x64
c000453a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000453d:	b8 00 00 00 00       	mov    eax,0x0
c0004542:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004546:	72 41                	jb     c0004589 <create_partition+0x165>
c0004548:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000454c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004550:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004554:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004559:	01 c1                	add    ecx,eax
c000455b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000455f:	f7 24 24             	mul    DWORD PTR [esp]
c0004562:	6a 00                	push   0x0
c0004564:	01 ca                	add    edx,ecx
c0004566:	6a 64                	push   0x64
c0004568:	52                   	push   edx
c0004569:	50                   	push   eax
c000456a:	e8 ed ed 01 00       	call   c002335c <__udivdi3>
c000456f:	83 c4 10             	add    esp,0x10
c0004572:	05 ff 07 00 00       	add    eax,0x7ff
c0004577:	83 d2 00             	adc    edx,0x0
c000457a:	89 c1                	mov    ecx,eax
c000457c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004580:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004586:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004589:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000458c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004590:	01 f0                	add    eax,esi
c0004592:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004596:	11 fa                	adc    edx,edi
c0004598:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000459c:	19 d1                	sbb    ecx,edx
c000459e:	73 2e                	jae    c00045ce <create_partition+0x1aa>
c00045a0:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00045a4:	89 f8                	mov    eax,edi
c00045a6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00045ad:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00045b1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045b9:	73 6b                	jae    c0004626 <create_partition+0x202>
c00045bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00045bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00045c3:	29 f0                	sub    eax,esi
c00045c5:	19 fa                	sbb    edx,edi
c00045c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00045ca:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00045ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045d2:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045d5:	74 4f                	je     c0004626 <create_partition+0x202>
c00045d7:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045da:	b9 10 00 00 00       	mov    ecx,0x10
c00045df:	ba f0 5d 02 c0       	mov    edx,0xc0025df0
c00045e4:	e8 ea d4 ff ff       	call   c0001ad3 <mem_cpy>
c00045e9:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045ed:	b9 10 00 00 00       	mov    ecx,0x10
c00045f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045f6:	e8 2c db ff ff       	call   c0002127 <make_rand>
c00045fb:	89 f2                	mov    edx,esi
c00045fd:	89 f9                	mov    ecx,edi
c00045ff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004603:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004607:	e8 c1 d4 ff ff       	call   c0001acd <st_qword>
c000460c:	03 34 24             	add    esi,DWORD PTR [esp]
c000460f:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004613:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004617:	89 f2                	mov    edx,esi
c0004619:	89 f9                	mov    ecx,edi
c000461b:	83 c2 ff             	add    edx,0xffffffff
c000461e:	83 d1 ff             	adc    ecx,0xffffffff
c0004621:	e8 a7 d4 ff ff       	call   c0001acd <st_qword>
c0004626:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000462a:	83 e8 80             	sub    eax,0xffffff80
c000462d:	89 c5                	mov    ebp,eax
c000462f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004633:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004639:	75 6b                	jne    c00046a6 <create_partition+0x282>
c000463b:	45                   	inc    ebp
c000463c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004640:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004645:	e8 39 da ff ff       	call   c0002083 <crc32>
c000464a:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004650:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004654:	75 e5                	jne    c000463b <create_partition+0x217>
c0004656:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000465a:	31 d2                	xor    edx,edx
c000465c:	83 ec 0c             	sub    esp,0xc
c000465f:	c1 ed 09             	shr    ebp,0x9
c0004662:	6a 01                	push   0x1
c0004664:	8d 45 02             	lea    eax,[ebp+0x2]
c0004667:	52                   	push   edx
c0004668:	50                   	push   eax
c0004669:	53                   	push   ebx
c000466a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000466e:	e8 ac d3 ff ff       	call   c0001a1f <disk_write>
c0004673:	83 c4 20             	add    esp,0x20
c0004676:	85 c0                	test   eax,eax
c0004678:	0f 85 d7 fd ff ff    	jne    c0004455 <create_partition+0x31>
c000467e:	83 ec 0c             	sub    esp,0xc
c0004681:	31 d2                	xor    edx,edx
c0004683:	6a 01                	push   0x1
c0004685:	89 e8                	mov    eax,ebp
c0004687:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000468b:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000468f:	52                   	push   edx
c0004690:	50                   	push   eax
c0004691:	53                   	push   ebx
c0004692:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004696:	e8 84 d3 ff ff       	call   c0001a1f <disk_write>
c000469b:	83 c4 20             	add    esp,0x20
c000469e:	85 c0                	test   eax,eax
c00046a0:	0f 85 af fd ff ff    	jne    c0004455 <create_partition+0x31>
c00046a6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046aa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00046ae:	3d 00 40 00 00       	cmp    eax,0x4000
c00046b3:	74 0d                	je     c00046c2 <create_partition+0x29e>
c00046b5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00046b9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00046bd:	e9 12 fe ff ff       	jmp    c00044d4 <create_partition+0xb0>
c00046c2:	31 d2                	xor    edx,edx
c00046c4:	b9 00 02 00 00       	mov    ecx,0x200
c00046c9:	89 d8                	mov    eax,ebx
c00046cb:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00046ce:	e8 15 d4 ff ff       	call   c0001ae8 <mem_set>
c00046d3:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046d6:	b9 10 00 00 00       	mov    ecx,0x10
c00046db:	ba e0 5c 02 c0       	mov    edx,0xc0025ce0
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ec d3 ff ff       	call   c0001ad3 <mem_cpy>
c00046e7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046eb:	8d 43 58             	lea    eax,[ebx+0x58]
c00046ee:	f7 d2                	not    edx
c00046f0:	e8 d5 d3 ff ff       	call   c0001aca <st_dword>
c00046f5:	8d 43 18             	lea    eax,[ebx+0x18]
c00046f8:	31 c9                	xor    ecx,ecx
c00046fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00046fd:	ba 01 00 00 00       	mov    edx,0x1
c0004702:	e8 c6 d3 ff ff       	call   c0001acd <st_qword>
c0004707:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000470b:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000470f:	83 c2 ff             	add    edx,0xffffffff
c0004712:	89 e8                	mov    eax,ebp
c0004714:	83 d1 ff             	adc    ecx,0xffffffff
c0004717:	e8 b1 d3 ff ff       	call   c0001acd <st_qword>
c000471c:	31 c9                	xor    ecx,ecx
c000471e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004721:	ba 22 00 00 00       	mov    edx,0x22
c0004726:	e8 a2 d3 ff ff       	call   c0001acd <st_qword>
c000472b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000472f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004733:	83 c2 de             	add    edx,0xffffffde
c0004736:	8d 43 30             	lea    eax,[ebx+0x30]
c0004739:	83 d1 ff             	adc    ecx,0xffffffff
c000473c:	31 f6                	xor    esi,esi
c000473e:	e8 8a d3 ff ff       	call   c0001acd <st_qword>
c0004743:	8d 43 54             	lea    eax,[ebx+0x54]
c0004746:	ba 80 00 00 00       	mov    edx,0x80
c000474b:	e8 7a d3 ff ff       	call   c0001aca <st_dword>
c0004750:	8d 43 50             	lea    eax,[ebx+0x50]
c0004753:	ba 80 00 00 00       	mov    edx,0x80
c0004758:	e8 6d d3 ff ff       	call   c0001aca <st_dword>
c000475d:	ba 02 00 00 00       	mov    edx,0x2
c0004762:	89 f8                	mov    eax,edi
c0004764:	e8 61 d3 ff ff       	call   c0001aca <st_dword>
c0004769:	8d 53 38             	lea    edx,[ebx+0x38]
c000476c:	b9 10 00 00 00       	mov    ecx,0x10
c0004771:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004775:	e8 ad d9 ff ff       	call   c0002127 <make_rand>
c000477a:	83 c8 ff             	or     eax,0xffffffff
c000477d:	46                   	inc    esi
c000477e:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004783:	e8 fb d8 ff ff       	call   c0002083 <crc32>
c0004788:	83 fe 5c             	cmp    esi,0x5c
c000478b:	75 f0                	jne    c000477d <create_partition+0x359>
c000478d:	f7 d0                	not    eax
c000478f:	8d 73 10             	lea    esi,[ebx+0x10]
c0004792:	89 c2                	mov    edx,eax
c0004794:	89 f0                	mov    eax,esi
c0004796:	e8 2f d3 ff ff       	call   c0001aca <st_dword>
c000479b:	83 ec 0c             	sub    esp,0xc
c000479e:	6a 01                	push   0x1
c00047a0:	6a 00                	push   0x0
c00047a2:	6a 01                	push   0x1
c00047a4:	53                   	push   ebx
c00047a5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047a9:	e8 71 d2 ff ff       	call   c0001a1f <disk_write>
c00047ae:	83 c4 20             	add    esp,0x20
c00047b1:	85 c0                	test   eax,eax
c00047b3:	0f 85 9c fc ff ff    	jne    c0004455 <create_partition+0x31>
c00047b9:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00047bd:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00047c1:	83 c2 ff             	add    edx,0xffffffff
c00047c4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c7:	83 d1 ff             	adc    ecx,0xffffffff
c00047ca:	e8 fe d2 ff ff       	call   c0001acd <st_qword>
c00047cf:	ba 01 00 00 00       	mov    edx,0x1
c00047d4:	31 c9                	xor    ecx,ecx
c00047d6:	89 e8                	mov    eax,ebp
c00047d8:	e8 f0 d2 ff ff       	call   c0001acd <st_qword>
c00047dd:	89 f8                	mov    eax,edi
c00047df:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047e3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047e7:	31 ff                	xor    edi,edi
c00047e9:	e8 df d2 ff ff       	call   c0001acd <st_qword>
c00047ee:	89 f0                	mov    eax,esi
c00047f0:	31 d2                	xor    edx,edx
c00047f2:	e8 d3 d2 ff ff       	call   c0001aca <st_dword>
c00047f7:	83 c8 ff             	or     eax,0xffffffff
c00047fa:	47                   	inc    edi
c00047fb:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004800:	e8 7e d8 ff ff       	call   c0002083 <crc32>
c0004805:	83 ff 5c             	cmp    edi,0x5c
c0004808:	75 f0                	jne    c00047fa <create_partition+0x3d6>
c000480a:	f7 d0                	not    eax
c000480c:	89 c2                	mov    edx,eax
c000480e:	89 f0                	mov    eax,esi
c0004810:	e8 b5 d2 ff ff       	call   c0001aca <st_dword>
c0004815:	83 ec 0c             	sub    esp,0xc
c0004818:	6a 01                	push   0x1
c000481a:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000481e:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004822:	83 c0 ff             	add    eax,0xffffffff
c0004825:	83 d2 ff             	adc    edx,0xffffffff
c0004828:	52                   	push   edx
c0004829:	50                   	push   eax
c000482a:	53                   	push   ebx
c000482b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000482f:	e8 eb d1 ff ff       	call   c0001a1f <disk_write>
c0004834:	83 c4 20             	add    esp,0x20
c0004837:	85 c0                	test   eax,eax
c0004839:	0f 85 16 fc ff ff    	jne    c0004455 <create_partition+0x31>
c000483f:	31 d2                	xor    edx,edx
c0004841:	89 d8                	mov    eax,ebx
c0004843:	b9 00 02 00 00       	mov    ecx,0x200
c0004848:	e8 9b d2 ff ff       	call   c0001ae8 <mem_set>
c000484d:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004853:	b9 10 00 00 00       	mov    ecx,0x10
c0004858:	ba f0 5c 02 c0       	mov    edx,0xc0025cf0
c000485d:	e8 71 d2 ff ff       	call   c0001ad3 <mem_cpy>
c0004862:	e9 21 01 00 00       	jmp    c0004988 <create_partition+0x564>
c0004867:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000486b:	b9 05 00 00 00       	mov    ecx,0x5
c0004870:	89 04 24             	mov    DWORD PTR [esp],eax
c0004873:	bf 08 00 00 00       	mov    edi,0x8
c0004878:	89 f8                	mov    eax,edi
c000487a:	31 d2                	xor    edx,edx
c000487c:	0f b6 f0             	movzx  esi,al
c000487f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004882:	f7 f6                	div    esi
c0004884:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004889:	76 0a                	jbe    c0004895 <create_partition+0x471>
c000488b:	d1 e7                	shl    edi,1
c000488d:	49                   	dec    ecx
c000488e:	75 e8                	jne    c0004878 <create_partition+0x454>
c0004890:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004895:	b9 00 02 00 00       	mov    ecx,0x200
c000489a:	31 d2                	xor    edx,edx
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00048a4:	e8 3f d2 ff ff       	call   c0001ae8 <mem_set>
c00048a9:	b9 64 00 00 00       	mov    ecx,0x64
c00048ae:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048b1:	31 d2                	xor    edx,edx
c00048b3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00048bb:	f7 f1                	div    ecx
c00048bd:	b9 3f 00 00 00       	mov    ecx,0x3f
c00048c2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048c6:	89 f8                	mov    eax,edi
c00048c8:	0f b6 c0             	movzx  eax,al
c00048cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00048cf:	e9 80 00 00 00       	jmp    c0004954 <create_partition+0x530>
c00048d4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048d7:	29 cf                	sub    edi,ecx
c00048d9:	89 ca                	mov    edx,ecx
c00048db:	89 f0                	mov    eax,esi
c00048dd:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048e2:	e8 e3 d1 ff ff       	call   c0001aca <st_dword>
c00048e7:	8d 46 04             	lea    eax,[esi+0x4]
c00048ea:	89 fa                	mov    edx,edi
c00048ec:	83 c6 10             	add    esi,0x10
c00048ef:	e8 d6 d1 ff ff       	call   c0001aca <st_dword>
c00048f4:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048f8:	31 d2                	xor    edx,edx
c00048fa:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048fd:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004901:	89 c8                	mov    eax,ecx
c0004903:	01 f9                	add    ecx,edi
c0004905:	f7 f5                	div    ebp
c0004907:	89 d5                	mov    ebp,edx
c0004909:	31 d2                	xor    edx,edx
c000490b:	45                   	inc    ebp
c000490c:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004910:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004913:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004916:	89 c2                	mov    edx,eax
c0004918:	8d 41 ff             	lea    eax,[ecx-0x1]
c000491b:	c1 ea 02             	shr    edx,0x2
c000491e:	83 e2 c0             	and    edx,0xffffffc0
c0004921:	09 ea                	or     edx,ebp
c0004923:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004928:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c000492b:	31 d2                	xor    edx,edx
c000492d:	f7 f5                	div    ebp
c000492f:	89 d7                	mov    edi,edx
c0004931:	31 d2                	xor    edx,edx
c0004933:	47                   	inc    edi
c0004934:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004938:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c000493b:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c000493e:	89 c5                	mov    ebp,eax
c0004940:	c1 ed 02             	shr    ebp,0x2
c0004943:	83 e5 c0             	and    ebp,0xffffffc0
c0004946:	09 ef                	or     edi,ebp
c0004948:	89 fa                	mov    edx,edi
c000494a:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c000494d:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004952:	74 34                	je     c0004988 <create_partition+0x564>
c0004954:	85 c9                	test   ecx,ecx
c0004956:	74 30                	je     c0004988 <create_partition+0x564>
c0004958:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000495b:	76 2b                	jbe    c0004988 <create_partition+0x564>
c000495d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004961:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004965:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004968:	83 ff 64             	cmp    edi,0x64
c000496b:	76 4b                	jbe    c00049b8 <create_partition+0x594>
c000496d:	89 f8                	mov    eax,edi
c000496f:	01 c8                	add    eax,ecx
c0004971:	0f 82 5d ff ff ff    	jb     c00048d4 <create_partition+0x4b0>
c0004977:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000497a:	0f 87 54 ff ff ff    	ja     c00048d4 <create_partition+0x4b0>
c0004980:	85 ff                	test   edi,edi
c0004982:	0f 85 51 ff ff ff    	jne    c00048d9 <create_partition+0x4b5>
c0004988:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000498e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004993:	e8 2e d1 ff ff       	call   c0001ac6 <st_word>
c0004998:	83 ec 0c             	sub    esp,0xc
c000499b:	6a 01                	push   0x1
c000499d:	6a 00                	push   0x0
c000499f:	6a 00                	push   0x0
c00049a1:	53                   	push   ebx
c00049a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049a6:	e8 74 d0 ff ff       	call   c0001a1f <disk_write>
c00049ab:	83 c4 20             	add    esp,0x20
c00049ae:	85 c0                	test   eax,eax
c00049b0:	0f 95 c0             	setne  al
c00049b3:	0f b6 c0             	movzx  eax,al
c00049b6:	eb 0e                	jmp    c00049c6 <create_partition+0x5a2>
c00049b8:	74 07                	je     c00049c1 <create_partition+0x59d>
c00049ba:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00049bf:	eb ac                	jmp    c000496d <create_partition+0x549>
c00049c1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049c4:	eb a7                	jmp    c000496d <create_partition+0x549>
c00049c6:	83 c4 5c             	add    esp,0x5c
c00049c9:	5b                   	pop    ebx
c00049ca:	5e                   	pop    esi
c00049cb:	5f                   	pop    edi
c00049cc:	5d                   	pop    ebp
c00049cd:	c3                   	ret    

c00049ce <get_fileinfo>:
c00049ce:	55                   	push   ebp
c00049cf:	57                   	push   edi
c00049d0:	56                   	push   esi
c00049d1:	53                   	push   ebx
c00049d2:	83 ec 1c             	sub    esp,0x1c
c00049d5:	8b 30                	mov    esi,DWORD PTR [eax]
c00049d7:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049db:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049df:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049e2:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049e5:	0f 84 dc 01 00 00    	je     c0004bc7 <get_fileinfo+0x1f9>
c00049eb:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049ee:	75 0f                	jne    c00049ff <get_fileinfo+0x31>
c00049f0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049f3:	83 c4 1c             	add    esp,0x1c
c00049f6:	5b                   	pop    ebx
c00049f7:	5e                   	pop    esi
c00049f8:	5f                   	pop    edi
c00049f9:	5d                   	pop    ebp
c00049fa:	e9 58 d5 ff ff       	jmp    c0001f57 <get_xfileinfo>
c00049ff:	89 d3                	mov    ebx,edx
c0004a01:	89 c6                	mov    esi,eax
c0004a03:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004a07:	74 6a                	je     c0004a73 <get_fileinfo+0xa5>
c0004a09:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004a11:	31 ed                	xor    ebp,ebp
c0004a13:	31 ff                	xor    edi,edi
c0004a15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004a19:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004a1d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004a20:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004a24:	66 85 d2             	test   dx,dx
c0004a27:	74 3e                	je     c0004a67 <get_fileinfo+0x99>
c0004a29:	66 85 ed             	test   bp,bp
c0004a2c:	75 0c                	jne    c0004a3a <get_fileinfo+0x6c>
c0004a2e:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a34:	66 3d ff 07          	cmp    ax,0x7ff
c0004a38:	76 22                	jbe    c0004a5c <get_fileinfo+0x8e>
c0004a3a:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a3f:	89 e8                	mov    eax,ebp
c0004a41:	29 f9                	sub    ecx,edi
c0004a43:	c1 e0 10             	shl    eax,0x10
c0004a46:	09 d0                	or     eax,edx
c0004a48:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a4c:	e8 a3 d1 ff ff       	call   c0001bf4 <put_utf>
c0004a51:	84 c0                	test   al,al
c0004a53:	74 10                	je     c0004a65 <get_fileinfo+0x97>
c0004a55:	0f b6 c0             	movzx  eax,al
c0004a58:	31 d2                	xor    edx,edx
c0004a5a:	01 c7                	add    edi,eax
c0004a5c:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a61:	89 d5                	mov    ebp,edx
c0004a63:	eb b0                	jmp    c0004a15 <get_fileinfo+0x47>
c0004a65:	31 ff                	xor    edi,edi
c0004a67:	66 85 ed             	test   bp,bp
c0004a6a:	74 02                	je     c0004a6e <get_fileinfo+0xa0>
c0004a6c:	31 ff                	xor    edi,edi
c0004a6e:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a73:	31 ff                	xor    edi,edi
c0004a75:	31 c9                	xor    ecx,ecx
c0004a77:	83 f9 0a             	cmp    ecx,0xa
c0004a7a:	0f 87 ad 00 00 00    	ja     c0004b2d <get_fileinfo+0x15f>
c0004a80:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a83:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a86:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a8a:	66 83 fa 20          	cmp    dx,0x20
c0004a8e:	0f 84 92 00 00 00    	je     c0004b26 <get_fileinfo+0x158>
c0004a94:	66 83 fa 05          	cmp    dx,0x5
c0004a98:	75 05                	jne    c0004a9f <get_fileinfo+0xd1>
c0004a9a:	ba e5 00 00 00       	mov    edx,0xe5
c0004a9f:	83 ff 0b             	cmp    edi,0xb
c0004aa2:	77 0b                	ja     c0004aaf <get_fileinfo+0xe1>
c0004aa4:	83 fd 09             	cmp    ebp,0x9
c0004aa7:	75 06                	jne    c0004aaf <get_fileinfo+0xe1>
c0004aa9:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004aae:	47                   	inc    edi
c0004aaf:	0f b7 c2             	movzx  eax,dx
c0004ab2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ab6:	e8 6d d0 ff ff       	call   c0001b28 <dbc_1st>
c0004abb:	85 c0                	test   eax,eax
c0004abd:	74 2f                	je     c0004aee <get_fileinfo+0x120>
c0004abf:	83 fd 08             	cmp    ebp,0x8
c0004ac2:	74 2a                	je     c0004aee <get_fileinfo+0x120>
c0004ac4:	83 fd 0b             	cmp    ebp,0xb
c0004ac7:	74 25                	je     c0004aee <get_fileinfo+0x120>
c0004ac9:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004acc:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ad0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ad4:	e8 52 d0 ff ff       	call   c0001b2b <dbc_2nd>
c0004ad9:	85 c0                	test   eax,eax
c0004adb:	74 11                	je     c0004aee <get_fileinfo+0x120>
c0004add:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ae1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004ae6:	c1 e2 08             	shl    edx,0x8
c0004ae9:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004aec:	09 c2                	or     edx,eax
c0004aee:	0f b7 d2             	movzx  edx,dx
c0004af1:	50                   	push   eax
c0004af2:	50                   	push   eax
c0004af3:	68 b5 01 00 00       	push   0x1b5
c0004af8:	52                   	push   edx
c0004af9:	e8 46 38 00 00       	call   c0008344 <ff_oem2uni>
c0004afe:	83 c4 10             	add    esp,0x10
c0004b01:	66 85 c0             	test   ax,ax
c0004b04:	75 04                	jne    c0004b0a <get_fileinfo+0x13c>
c0004b06:	31 ff                	xor    edi,edi
c0004b08:	eb 23                	jmp    c0004b2d <get_fileinfo+0x15f>
c0004b0a:	b9 0c 00 00 00       	mov    ecx,0xc
c0004b0f:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004b13:	29 f9                	sub    ecx,edi
c0004b15:	0f b7 c0             	movzx  eax,ax
c0004b18:	e8 d7 d0 ff ff       	call   c0001bf4 <put_utf>
c0004b1d:	84 c0                	test   al,al
c0004b1f:	74 e5                	je     c0004b06 <get_fileinfo+0x138>
c0004b21:	0f b6 c0             	movzx  eax,al
c0004b24:	01 c7                	add    edi,eax
c0004b26:	89 e9                	mov    ecx,ebp
c0004b28:	e9 4a ff ff ff       	jmp    c0004a77 <get_fileinfo+0xa9>
c0004b2d:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b32:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b36:	75 54                	jne    c0004b8c <get_fileinfo+0x1be>
c0004b38:	85 ff                	test   edi,edi
c0004b3a:	75 0b                	jne    c0004b47 <get_fileinfo+0x179>
c0004b3c:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b40:	ba 01 00 00 00       	mov    edx,0x1
c0004b45:	eb 33                	jmp    c0004b7a <get_fileinfo+0x1ac>
c0004b47:	b1 08                	mov    cl,0x8
c0004b49:	31 d2                	xor    edx,edx
c0004b4b:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b51:	84 c0                	test   al,al
c0004b53:	74 25                	je     c0004b7a <get_fileinfo+0x1ac>
c0004b55:	66 83 f8 2e          	cmp    ax,0x2e
c0004b59:	74 16                	je     c0004b71 <get_fileinfo+0x1a3>
c0004b5b:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b5e:	66 83 ff 19          	cmp    di,0x19
c0004b62:	77 0f                	ja     c0004b73 <get_fileinfo+0x1a5>
c0004b64:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b67:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b6a:	74 07                	je     c0004b73 <get_fileinfo+0x1a5>
c0004b6c:	83 c0 20             	add    eax,0x20
c0004b6f:	eb 02                	jmp    c0004b73 <get_fileinfo+0x1a5>
c0004b71:	b1 10                	mov    cl,0x10
c0004b73:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b77:	42                   	inc    edx
c0004b78:	eb d1                	jmp    c0004b4b <get_fileinfo+0x17d>
c0004b7a:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b7f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b82:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b86:	75 04                	jne    c0004b8c <get_fileinfo+0x1be>
c0004b88:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8f:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b92:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b95:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b98:	83 c0 1c             	add    eax,0x1c
c0004b9b:	e8 c1 ce ff ff       	call   c0001a61 <ld_dword>
c0004ba0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ba7:	89 03                	mov    DWORD PTR [ebx],eax
c0004ba9:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bac:	83 c0 16             	add    eax,0x16
c0004baf:	e8 a0 ce ff ff       	call   c0001a54 <ld_word>
c0004bb4:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004bb8:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bbb:	83 c0 18             	add    eax,0x18
c0004bbe:	e8 91 ce ff ff       	call   c0001a54 <ld_word>
c0004bc3:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004bc7:	83 c4 1c             	add    esp,0x1c
c0004bca:	5b                   	pop    ebx
c0004bcb:	5e                   	pop    esi
c0004bcc:	5f                   	pop    edi
c0004bcd:	5d                   	pop    ebp
c0004bce:	c3                   	ret    

c0004bcf <ld_clust.isra.0>:
c0004bcf:	56                   	push   esi
c0004bd0:	89 c6                	mov    esi,eax
c0004bd2:	53                   	push   ebx
c0004bd3:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bd6:	89 d3                	mov    ebx,edx
c0004bd8:	e8 77 ce ff ff       	call   c0001a54 <ld_word>
c0004bdd:	0f b7 c8             	movzx  ecx,ax
c0004be0:	89 f0                	mov    eax,esi
c0004be2:	3c 03                	cmp    al,0x3
c0004be4:	75 0d                	jne    c0004bf3 <ld_clust.isra.0+0x24>
c0004be6:	8d 43 14             	lea    eax,[ebx+0x14]
c0004be9:	e8 66 ce ff ff       	call   c0001a54 <ld_word>
c0004bee:	c1 e0 10             	shl    eax,0x10
c0004bf1:	09 c1                	or     ecx,eax
c0004bf3:	89 c8                	mov    eax,ecx
c0004bf5:	5b                   	pop    ebx
c0004bf6:	5e                   	pop    esi
c0004bf7:	c3                   	ret    

c0004bf8 <st_clust.isra.1>:
c0004bf8:	56                   	push   esi
c0004bf9:	89 c6                	mov    esi,eax
c0004bfb:	53                   	push   ebx
c0004bfc:	89 d3                	mov    ebx,edx
c0004bfe:	0f b7 d1             	movzx  edx,cx
c0004c01:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004c04:	e8 bd ce ff ff       	call   c0001ac6 <st_word>
c0004c09:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004c0c:	75 0f                	jne    c0004c1d <st_clust.isra.1+0x25>
c0004c0e:	c1 e9 10             	shr    ecx,0x10
c0004c11:	8d 43 14             	lea    eax,[ebx+0x14]
c0004c14:	89 ca                	mov    edx,ecx
c0004c16:	5b                   	pop    ebx
c0004c17:	5e                   	pop    esi
c0004c18:	e9 a9 ce ff ff       	jmp    c0001ac6 <st_word>
c0004c1d:	5b                   	pop    ebx
c0004c1e:	5e                   	pop    esi
c0004c1f:	c3                   	ret    

c0004c20 <init_alloc_info.isra.2>:
c0004c20:	56                   	push   esi
c0004c21:	53                   	push   ebx
c0004c22:	89 c6                	mov    esi,eax
c0004c24:	89 d3                	mov    ebx,edx
c0004c26:	51                   	push   ecx
c0004c27:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c29:	83 c0 34             	add    eax,0x34
c0004c2c:	e8 30 ce ff ff       	call   c0001a61 <ld_dword>
c0004c31:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c34:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c36:	83 c0 38             	add    eax,0x38
c0004c39:	e8 3b ce ff ff       	call   c0001a79 <ld_qword>
c0004c3e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c41:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c44:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c46:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c49:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c50:	83 e0 02             	and    eax,0x2
c0004c53:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c56:	5b                   	pop    ebx
c0004c57:	5b                   	pop    ebx
c0004c58:	5e                   	pop    esi
c0004c59:	c3                   	ret    

c0004c5a <follow_path>:
c0004c5a:	56                   	push   esi
c0004c5b:	53                   	push   ebx
c0004c5c:	89 c3                	mov    ebx,eax
c0004c5e:	83 ec 14             	sub    esp,0x14
c0004c61:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c65:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c6b:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c6d:	80 fa 5c             	cmp    dl,0x5c
c0004c70:	75 07                	jne    c0004c79 <follow_path+0x1f>
c0004c72:	40                   	inc    eax
c0004c73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c77:	eb ee                	jmp    c0004c67 <follow_path+0xd>
c0004c79:	80 fa 2f             	cmp    dl,0x2f
c0004c7c:	74 f4                	je     c0004c72 <follow_path+0x18>
c0004c7e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c85:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c8c:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c8f:	77 52                	ja     c0004ce3 <follow_path+0x89>
c0004c91:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c95:	31 d2                	xor    edx,edx
c0004c97:	89 d8                	mov    eax,ebx
c0004c99:	e8 12 e3 ff ff       	call   c0002fb0 <dir_sdi>
c0004c9e:	eb 7c                	jmp    c0004d1c <follow_path+0xc2>
c0004ca0:	89 d8                	mov    eax,ebx
c0004ca2:	e8 6e f2 ff ff       	call   c0003f15 <dir_find>
c0004ca7:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004caa:	85 c0                	test   eax,eax
c0004cac:	75 46                	jne    c0004cf4 <follow_path+0x9a>
c0004cae:	80 e2 04             	and    dl,0x4
c0004cb1:	75 69                	jne    c0004d1c <follow_path+0xc2>
c0004cb3:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004cb7:	74 5e                	je     c0004d17 <follow_path+0xbd>
c0004cb9:	8a 06                	mov    al,BYTE PTR [esi]
c0004cbb:	3c 04                	cmp    al,0x4
c0004cbd:	75 41                	jne    c0004d00 <follow_path+0xa6>
c0004cbf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004cc2:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004cc6:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004cc9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ccc:	30 c0                	xor    al,al
c0004cce:	09 d0                	or     eax,edx
c0004cd0:	89 da                	mov    edx,ebx
c0004cd2:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004cd5:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004cd8:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004cdb:	8d 46 10             	lea    eax,[esi+0x10]
c0004cde:	e8 3d ff ff ff       	call   c0004c20 <init_alloc_info.isra.2>
c0004ce3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ce7:	89 d8                	mov    eax,ebx
c0004ce9:	e8 a9 ed ff ff       	call   c0003a97 <create_name>
c0004cee:	85 c0                	test   eax,eax
c0004cf0:	74 ae                	je     c0004ca0 <follow_path+0x46>
c0004cf2:	eb 28                	jmp    c0004d1c <follow_path+0xc2>
c0004cf4:	83 f8 04             	cmp    eax,0x4
c0004cf7:	75 23                	jne    c0004d1c <follow_path+0xc2>
c0004cf9:	80 e2 04             	and    dl,0x4
c0004cfc:	74 19                	je     c0004d17 <follow_path+0xbd>
c0004cfe:	eb 1c                	jmp    c0004d1c <follow_path+0xc2>
c0004d00:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004d03:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004d09:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004d0d:	e8 bd fe ff ff       	call   c0004bcf <ld_clust.isra.0>
c0004d12:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d15:	eb cc                	jmp    c0004ce3 <follow_path+0x89>
c0004d17:	b8 05 00 00 00       	mov    eax,0x5
c0004d1c:	83 c4 14             	add    esp,0x14
c0004d1f:	5b                   	pop    ebx
c0004d20:	5e                   	pop    esi
c0004d21:	c3                   	ret    

c0004d22 <f_mount>:
c0004d22:	53                   	push   ebx
c0004d23:	83 ec 18             	sub    esp,0x18
c0004d26:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d2a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d2e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d32:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d36:	e8 fb d2 ff ff       	call   c0002036 <get_ldnumber>
c0004d3b:	89 c2                	mov    edx,eax
c0004d3d:	b8 0b 00 00 00       	mov    eax,0xb
c0004d42:	85 d2                	test   edx,edx
c0004d44:	78 39                	js     c0004d7f <f_mount+0x5d>
c0004d46:	8b 04 95 a0 a3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5c60]
c0004d4d:	85 c0                	test   eax,eax
c0004d4f:	74 03                	je     c0004d54 <f_mount+0x32>
c0004d51:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	74 03                	je     c0004d5f <f_mount+0x3d>
c0004d5c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d63:	89 04 95 a0 a3 02 c0 	mov    DWORD PTR [edx*4-0x3ffd5c60],eax
c0004d6a:	31 c0                	xor    eax,eax
c0004d6c:	84 db                	test   bl,bl
c0004d6e:	74 0f                	je     c0004d7f <f_mount+0x5d>
c0004d70:	31 c9                	xor    ecx,ecx
c0004d72:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d76:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d7a:	e8 65 d7 ff ff       	call   c00024e4 <mount_volume>
c0004d7f:	83 c4 18             	add    esp,0x18
c0004d82:	5b                   	pop    ebx
c0004d83:	c3                   	ret    

c0004d84 <f_open>:
c0004d84:	55                   	push   ebp
c0004d85:	bd 09 00 00 00       	mov    ebp,0x9
c0004d8a:	57                   	push   edi
c0004d8b:	56                   	push   esi
c0004d8c:	53                   	push   ebx
c0004d8d:	83 ec 7c             	sub    esp,0x7c
c0004d90:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d97:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d9e:	85 db                	test   ebx,ebx
c0004da0:	0f 84 10 04 00 00    	je     c00051b6 <f_open+0x432>
c0004da6:	89 fe                	mov    esi,edi
c0004da8:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004dac:	83 e6 3f             	and    esi,0x3f
c0004daf:	89 f0                	mov    eax,esi
c0004db1:	0f b6 c8             	movzx  ecx,al
c0004db4:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004dbb:	e8 24 d7 ff ff       	call   c00024e4 <mount_volume>
c0004dc0:	89 c5                	mov    ebp,eax
c0004dc2:	85 c0                	test   eax,eax
c0004dc4:	0f 85 e6 03 00 00    	jne    c00051b0 <f_open+0x42c>
c0004dca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dce:	bd 11 00 00 00       	mov    ebp,0x11
c0004dd3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dd7:	83 ec 0c             	sub    esp,0xc
c0004dda:	68 60 04 00 00       	push   0x460
c0004ddf:	e8 a3 34 00 00       	call   c0008287 <ff_memalloc>
c0004de4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004de8:	83 c4 10             	add    esp,0x10
c0004deb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004df0:	0f 84 c0 03 00 00    	je     c00051b6 <f_open+0x432>
c0004df6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dfa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dfe:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004e04:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004e07:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004e0a:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004e11:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e15:	e8 40 fe ff ff       	call   c0004c5a <follow_path>
c0004e1a:	89 c5                	mov    ebp,eax
c0004e1c:	85 c0                	test   eax,eax
c0004e1e:	75 0c                	jne    c0004e2c <f_open+0xa8>
c0004e20:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004e25:	79 05                	jns    c0004e2c <f_open+0xa8>
c0004e27:	bd 06 00 00 00       	mov    ebp,0x6
c0004e2c:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e32:	0f 84 84 01 00 00    	je     c0004fbc <f_open+0x238>
c0004e38:	85 ed                	test   ebp,ebp
c0004e3a:	74 20                	je     c0004e5c <f_open+0xd8>
c0004e3c:	83 fd 04             	cmp    ebp,0x4
c0004e3f:	0f 85 58 03 00 00    	jne    c000519d <f_open+0x419>
c0004e45:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e49:	83 ce 08             	or     esi,0x8
c0004e4c:	e8 8a f2 ff ff       	call   c00040db <dir_register>
c0004e51:	89 c5                	mov    ebp,eax
c0004e53:	85 c0                	test   eax,eax
c0004e55:	74 2f                	je     c0004e86 <f_open+0x102>
c0004e57:	e9 41 03 00 00       	jmp    c000519d <f_open+0x419>
c0004e5c:	bd 07 00 00 00       	mov    ebp,0x7
c0004e61:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e66:	0f 85 31 03 00 00    	jne    c000519d <f_open+0x419>
c0004e6c:	bd 08 00 00 00       	mov    ebp,0x8
c0004e71:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e77:	0f 85 20 03 00 00    	jne    c000519d <f_open+0x419>
c0004e7d:	83 e7 08             	and    edi,0x8
c0004e80:	0f 84 65 01 00 00    	je     c0004feb <f_open+0x267>
c0004e86:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e8a:	8a 02                	mov    al,BYTE PTR [edx]
c0004e8c:	3c 04                	cmp    al,0x4
c0004e8e:	0f 85 97 00 00 00    	jne    c0004f2b <f_open+0x1a7>
c0004e94:	8d 42 10             	lea    eax,[edx+0x10]
c0004e97:	89 13                	mov    DWORD PTR [ebx],edx
c0004e99:	89 da                	mov    edx,ebx
c0004e9b:	e8 80 fd ff ff       	call   c0004c20 <init_alloc_info.isra.2>
c0004ea0:	31 d2                	xor    edx,edx
c0004ea2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea6:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004eab:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eae:	83 c0 02             	add    eax,0x2
c0004eb1:	e8 32 cc ff ff       	call   c0001ae8 <mem_set>
c0004eb6:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004ebb:	31 d2                	xor    edx,edx
c0004ebd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ec1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ec4:	83 c0 26             	add    eax,0x26
c0004ec7:	e8 1c cc ff ff       	call   c0001ae8 <mem_set>
c0004ecc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004ed3:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004ed7:	ba 00 00 21 50       	mov    edx,0x50210000
c0004edc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004edf:	83 c0 08             	add    eax,0x8
c0004ee2:	e8 e3 cb ff ff       	call   c0001aca <st_dword>
c0004ee7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eeb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eee:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ef2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ef6:	e8 b7 ea ff ff       	call   c00039b2 <store_xdir>
c0004efb:	89 c5                	mov    ebp,eax
c0004efd:	85 c0                	test   eax,eax
c0004eff:	0f 85 98 02 00 00    	jne    c000519d <f_open+0x419>
c0004f05:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004f08:	85 d2                	test   edx,edx
c0004f0a:	0f 84 db 00 00 00    	je     c0004feb <f_open+0x267>
c0004f10:	31 c9                	xor    ecx,ecx
c0004f12:	89 d8                	mov    eax,ebx
c0004f14:	e8 8e e3 ff ff       	call   c00032a7 <remove_chain>
c0004f19:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f1d:	89 c5                	mov    ebp,eax
c0004f1f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f22:	48                   	dec    eax
c0004f23:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004f26:	e9 b8 00 00 00       	jmp    c0004fe3 <f_open+0x25f>
c0004f2b:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f2f:	89 ea                	mov    edx,ebp
c0004f31:	e8 99 fc ff ff       	call   c0004bcf <ld_clust.isra.0>
c0004f36:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f3b:	89 c7                	mov    edi,eax
c0004f3d:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f40:	e8 85 cb ff ff       	call   c0001aca <st_dword>
c0004f45:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f49:	31 c9                	xor    ecx,ecx
c0004f4b:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f53:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f57:	e8 9c fc ff ff       	call   c0004bf8 <st_clust.isra.1>
c0004f5c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f60:	31 d2                	xor    edx,edx
c0004f62:	83 c0 1c             	add    eax,0x1c
c0004f65:	e8 60 cb ff ff       	call   c0001aca <st_dword>
c0004f6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f6e:	85 ff                	test   edi,edi
c0004f70:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f74:	74 75                	je     c0004feb <f_open+0x267>
c0004f76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f7a:	31 c9                	xor    ecx,ecx
c0004f7c:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f7f:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f8a:	89 fa                	mov    edx,edi
c0004f8c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f90:	e8 12 e3 ff ff       	call   c00032a7 <remove_chain>
c0004f95:	89 c5                	mov    ebp,eax
c0004f97:	85 c0                	test   eax,eax
c0004f99:	0f 85 fe 01 00 00    	jne    c000519d <f_open+0x419>
c0004f9f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004fa3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004fa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fab:	4f                   	dec    edi
c0004fac:	e8 81 d2 ff ff       	call   c0002232 <move_window>
c0004fb1:	89 c5                	mov    ebp,eax
c0004fb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fb7:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004fba:	eb 27                	jmp    c0004fe3 <f_open+0x25f>
c0004fbc:	85 ed                	test   ebp,ebp
c0004fbe:	0f 85 d9 01 00 00    	jne    c000519d <f_open+0x419>
c0004fc4:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fc8:	bd 04 00 00 00       	mov    ebp,0x4
c0004fcd:	a8 10                	test   al,0x10
c0004fcf:	0f 85 c8 01 00 00    	jne    c000519d <f_open+0x419>
c0004fd5:	83 e7 02             	and    edi,0x2
c0004fd8:	74 11                	je     c0004feb <f_open+0x267>
c0004fda:	bd 07 00 00 00       	mov    ebp,0x7
c0004fdf:	a8 01                	test   al,0x1
c0004fe1:	eb 02                	jmp    c0004fe5 <f_open+0x261>
c0004fe3:	85 ed                	test   ebp,ebp
c0004fe5:	0f 85 b2 01 00 00    	jne    c000519d <f_open+0x419>
c0004feb:	f7 c6 08 00 00 00    	test   esi,0x8
c0004ff1:	74 03                	je     c0004ff6 <f_open+0x272>
c0004ff3:	83 ce 40             	or     esi,0x40
c0004ff6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004ffa:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004ffd:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005000:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005003:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005006:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000500a:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000500d:	8a 02                	mov    al,BYTE PTR [edx]
c000500f:	3c 04                	cmp    al,0x4
c0005011:	75 2a                	jne    c000503d <f_open+0x2b9>
c0005013:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005017:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c000501c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000501f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005023:	30 c0                	xor    al,al
c0005025:	09 c8                	or     eax,ecx
c0005027:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000502a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000502e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005031:	8d 42 10             	lea    eax,[edx+0x10]
c0005034:	89 da                	mov    edx,ebx
c0005036:	e8 e5 fb ff ff       	call   c0004c20 <init_alloc_info.isra.2>
c000503b:	eb 1c                	jmp    c0005059 <f_open+0x2d5>
c000503d:	89 fa                	mov    edx,edi
c000503f:	e8 8b fb ff ff       	call   c0004bcf <ld_clust.isra.0>
c0005044:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005047:	8d 47 1c             	lea    eax,[edi+0x1c]
c000504a:	e8 12 ca ff ff       	call   c0001a61 <ld_dword>
c000504f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005056:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005059:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000505d:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005064:	89 03                	mov    DWORD PTR [ebx],eax
c0005066:	31 d2                	xor    edx,edx
c0005068:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000506c:	b9 00 02 00 00       	mov    ecx,0x200
c0005071:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005075:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005079:	89 f0                	mov    eax,esi
c000507b:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005082:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005085:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000508c:	8d 43 50             	lea    eax,[ebx+0x50]
c000508f:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005096:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000509d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00050a1:	e8 42 ca ff ff       	call   c0001ae8 <mem_set>
c00050a6:	83 e6 20             	and    esi,0x20
c00050a9:	75 07                	jne    c00050b2 <f_open+0x32e>
c00050ab:	31 ed                	xor    ebp,ebp
c00050ad:	e9 eb 00 00 00       	jmp    c000519d <f_open+0x419>
c00050b2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00050b5:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00050b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00050c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050c4:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050c8:	74 e1                	je     c00050ab <f_open+0x327>
c00050ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050d2:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050d5:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dc:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050df:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050e3:	31 ff                	xor    edi,edi
c00050e5:	c1 e5 09             	shl    ebp,0x9
c00050e8:	89 ee                	mov    esi,ebp
c00050ea:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050ee:	89 f8                	mov    eax,edi
c00050f0:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050f4:	73 22                	jae    c0005118 <f_open+0x394>
c00050f6:	89 d8                	mov    eax,ebx
c00050f8:	e8 bd dc ff ff       	call   c0002dba <get_fat>
c00050fd:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005101:	89 c2                	mov    edx,eax
c0005103:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005107:	83 f8 01             	cmp    eax,0x1
c000510a:	76 10                	jbe    c000511c <f_open+0x398>
c000510c:	83 f8 ff             	cmp    eax,0xffffffff
c000510f:	75 d9                	jne    c00050ea <f_open+0x366>
c0005111:	bd 01 00 00 00       	mov    ebp,0x1
c0005116:	eb 09                	jmp    c0005121 <f_open+0x39d>
c0005118:	31 ed                	xor    ebp,ebp
c000511a:	eb 05                	jmp    c0005121 <f_open+0x39d>
c000511c:	bd 02 00 00 00       	mov    ebp,0x2
c0005121:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005124:	85 ed                	test   ebp,ebp
c0005126:	75 75                	jne    c000519d <f_open+0x419>
c0005128:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000512c:	25 ff 01 00 00       	and    eax,0x1ff
c0005131:	0f 84 74 ff ff ff    	je     c00050ab <f_open+0x327>
c0005137:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000513b:	bd 02 00 00 00       	mov    ebp,0x2
c0005140:	89 c8                	mov    eax,ecx
c0005142:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005146:	e8 a2 cb ff ff       	call   c0001ced <clst2sect>
c000514b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000514f:	89 d7                	mov    edi,edx
c0005151:	09 c7                	or     edi,eax
c0005153:	74 48                	je     c000519d <f_open+0x419>
c0005155:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005159:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000515d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005165:	0f ac fe 09          	shrd   esi,edi,0x9
c0005169:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000516d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005171:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005174:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005178:	83 ec 0c             	sub    esp,0xc
c000517b:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000517e:	6a 01                	push   0x1
c0005180:	52                   	push   edx
c0005181:	50                   	push   eax
c0005182:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005186:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000518a:	50                   	push   eax
c000518b:	e8 79 c8 ff ff       	call   c0001a09 <disk_read>
c0005190:	83 c4 20             	add    esp,0x20
c0005193:	85 c0                	test   eax,eax
c0005195:	0f 95 c0             	setne  al
c0005198:	0f b6 c0             	movzx  eax,al
c000519b:	89 c5                	mov    ebp,eax
c000519d:	83 ec 0c             	sub    esp,0xc
c00051a0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00051a4:	e8 f4 30 00 00       	call   c000829d <ff_memfree>
c00051a9:	83 c4 10             	add    esp,0x10
c00051ac:	85 ed                	test   ebp,ebp
c00051ae:	74 06                	je     c00051b6 <f_open+0x432>
c00051b0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00051b6:	83 c4 7c             	add    esp,0x7c
c00051b9:	89 e8                	mov    eax,ebp
c00051bb:	5b                   	pop    ebx
c00051bc:	5e                   	pop    esi
c00051bd:	5f                   	pop    edi
c00051be:	5d                   	pop    ebp
c00051bf:	c3                   	ret    

c00051c0 <f_read>:
c00051c0:	55                   	push   ebp
c00051c1:	57                   	push   edi
c00051c2:	56                   	push   esi
c00051c3:	53                   	push   ebx
c00051c4:	83 ec 2c             	sub    esp,0x2c
c00051c7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051cb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051d5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051d9:	89 d8                	mov    eax,ebx
c00051db:	e8 77 cf ff ff       	call   c0002157 <validate>
c00051e0:	89 c5                	mov    ebp,eax
c00051e2:	85 c0                	test   eax,eax
c00051e4:	0f 85 4c 02 00 00    	jne    c0005436 <f_read+0x276>
c00051ea:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051ee:	85 ed                	test   ebp,ebp
c00051f0:	0f 85 40 02 00 00    	jne    c0005436 <f_read+0x276>
c00051f6:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051fa:	0f 84 31 02 00 00    	je     c0005431 <f_read+0x271>
c0005200:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005203:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005206:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005209:	bf 00 00 00 00       	mov    edi,0x0
c000520e:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005211:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005215:	89 d1                	mov    ecx,edx
c0005217:	19 f9                	sbb    ecx,edi
c0005219:	0f 83 cf 00 00 00    	jae    c00052ee <f_read+0x12e>
c000521f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005223:	e9 c6 00 00 00       	jmp    c00052ee <f_read+0x12e>
c0005228:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000522b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000522e:	89 d0                	mov    eax,edx
c0005230:	25 ff 01 00 00       	and    eax,0x1ff
c0005235:	0f 85 c9 01 00 00    	jne    c0005404 <f_read+0x244>
c000523b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523f:	89 d6                	mov    esi,edx
c0005241:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005245:	89 cf                	mov    edi,ecx
c0005247:	48                   	dec    eax
c0005248:	0f ac fe 09          	shrd   esi,edi,0x9
c000524c:	21 f0                	and    eax,esi
c000524e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005252:	0f 84 a6 00 00 00    	je     c00052fe <f_read+0x13e>
c0005258:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000525c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000525f:	89 c8                	mov    eax,ecx
c0005261:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005264:	e8 84 ca ff ff       	call   c0001ced <clst2sect>
c0005269:	89 d7                	mov    edi,edx
c000526b:	09 c7                	or     edi,eax
c000526d:	0f 84 b4 00 00 00    	je     c0005327 <f_read+0x167>
c0005273:	31 ff                	xor    edi,edi
c0005275:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005279:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000527c:	01 c6                	add    esi,eax
c000527e:	11 d7                	adc    edi,edx
c0005280:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005288:	0f 86 fd 00 00 00    	jbe    c000538b <f_read+0x1cb>
c000528e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005292:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005296:	c1 e8 09             	shr    eax,0x9
c0005299:	89 04 24             	mov    DWORD PTR [esp],eax
c000529c:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00052a0:	03 14 24             	add    edx,DWORD PTR [esp]
c00052a3:	39 c2                	cmp    edx,eax
c00052a5:	76 07                	jbe    c00052ae <f_read+0xee>
c00052a7:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00052ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00052ae:	83 ec 0c             	sub    esp,0xc
c00052b1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00052b5:	57                   	push   edi
c00052b6:	56                   	push   esi
c00052b7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00052bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052bf:	50                   	push   eax
c00052c0:	e8 44 c7 ff ff       	call   c0001a09 <disk_read>
c00052c5:	83 c4 20             	add    esp,0x20
c00052c8:	85 c0                	test   eax,eax
c00052ca:	75 6e                	jne    c000533a <f_read+0x17a>
c00052cc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052d0:	78 7e                	js     c0005350 <f_read+0x190>
c00052d2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052d5:	c1 e6 09             	shl    esi,0x9
c00052d8:	31 ff                	xor    edi,edi
c00052da:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052de:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052e2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052e6:	01 30                	add    DWORD PTR [eax],esi
c00052e8:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052eb:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052ee:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052f3:	0f 85 2f ff ff ff    	jne    c0005228 <f_read+0x68>
c00052f9:	e9 38 01 00 00       	jmp    c0005436 <f_read+0x276>
c00052fe:	89 c8                	mov    eax,ecx
c0005300:	09 d0                	or     eax,edx
c0005302:	75 05                	jne    c0005309 <f_read+0x149>
c0005304:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005307:	eb 19                	jmp    c0005322 <f_read+0x162>
c0005309:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000530d:	74 09                	je     c0005318 <f_read+0x158>
c000530f:	89 d8                	mov    eax,ebx
c0005311:	e8 f8 c9 ff ff       	call   c0001d0e <clmt_clust>
c0005316:	eb 0a                	jmp    c0005322 <f_read+0x162>
c0005318:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000531b:	89 d8                	mov    eax,ebx
c000531d:	e8 98 da ff ff       	call   c0002dba <get_fat>
c0005322:	83 f8 01             	cmp    eax,0x1
c0005325:	77 0e                	ja     c0005335 <f_read+0x175>
c0005327:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000532b:	bd 02 00 00 00       	mov    ebp,0x2
c0005330:	e9 01 01 00 00       	jmp    c0005436 <f_read+0x276>
c0005335:	83 f8 ff             	cmp    eax,0xffffffff
c0005338:	75 0e                	jne    c0005348 <f_read+0x188>
c000533a:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000533e:	bd 01 00 00 00       	mov    ebp,0x1
c0005343:	e9 ee 00 00 00       	jmp    c0005436 <f_read+0x276>
c0005348:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000534b:	e9 08 ff ff ff       	jmp    c0005258 <f_read+0x98>
c0005350:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005353:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005356:	29 f0                	sub    eax,esi
c0005358:	19 fa                	sbb    edx,edi
c000535a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000535d:	89 d7                	mov    edi,edx
c000535f:	ba 00 00 00 00       	mov    edx,0x0
c0005364:	89 f9                	mov    ecx,edi
c0005366:	19 d1                	sbb    ecx,edx
c0005368:	0f 83 64 ff ff ff    	jae    c00052d2 <f_read+0x112>
c000536e:	89 c7                	mov    edi,eax
c0005370:	8d 53 50             	lea    edx,[ebx+0x50]
c0005373:	c1 e7 09             	shl    edi,0x9
c0005376:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000537a:	b9 00 02 00 00       	mov    ecx,0x200
c000537f:	01 f8                	add    eax,edi
c0005381:	e8 4d c7 ff ff       	call   c0001ad3 <mem_cpy>
c0005386:	e9 47 ff ff ff       	jmp    c00052d2 <f_read+0x112>
c000538b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000538e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005391:	89 04 24             	mov    DWORD PTR [esp],eax
c0005394:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005398:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000539c:	75 05                	jne    c00053a3 <f_read+0x1e3>
c000539e:	39 34 24             	cmp    DWORD PTR [esp],esi
c00053a1:	74 5b                	je     c00053fe <f_read+0x23e>
c00053a3:	8d 43 50             	lea    eax,[ebx+0x50]
c00053a6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00053ae:	79 2a                	jns    c00053da <f_read+0x21a>
c00053b0:	83 ec 0c             	sub    esp,0xc
c00053b3:	6a 01                	push   0x1
c00053b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053bd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053c1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053c5:	50                   	push   eax
c00053c6:	e8 54 c6 ff ff       	call   c0001a1f <disk_write>
c00053cb:	83 c4 20             	add    esp,0x20
c00053ce:	85 c0                	test   eax,eax
c00053d0:	0f 85 64 ff ff ff    	jne    c000533a <f_read+0x17a>
c00053d6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053da:	83 ec 0c             	sub    esp,0xc
c00053dd:	6a 01                	push   0x1
c00053df:	57                   	push   edi
c00053e0:	56                   	push   esi
c00053e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053e5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053ed:	50                   	push   eax
c00053ee:	e8 16 c6 ff ff       	call   c0001a09 <disk_read>
c00053f3:	83 c4 20             	add    esp,0x20
c00053f6:	85 c0                	test   eax,eax
c00053f8:	0f 85 3c ff ff ff    	jne    c000533a <f_read+0x17a>
c00053fe:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005401:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005404:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005407:	ba 00 02 00 00       	mov    edx,0x200
c000540c:	25 ff 01 00 00       	and    eax,0x1ff
c0005411:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005415:	29 c2                	sub    edx,eax
c0005417:	39 d6                	cmp    esi,edx
c0005419:	76 02                	jbe    c000541d <f_read+0x25d>
c000541b:	89 d6                	mov    esi,edx
c000541d:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005421:	89 f1                	mov    ecx,esi
c0005423:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005427:	e8 a7 c6 ff ff       	call   c0001ad3 <mem_cpy>
c000542c:	e9 a7 fe ff ff       	jmp    c00052d8 <f_read+0x118>
c0005431:	bd 07 00 00 00       	mov    ebp,0x7
c0005436:	83 c4 2c             	add    esp,0x2c
c0005439:	89 e8                	mov    eax,ebp
c000543b:	5b                   	pop    ebx
c000543c:	5e                   	pop    esi
c000543d:	5f                   	pop    edi
c000543e:	5d                   	pop    ebp
c000543f:	c3                   	ret    

c0005440 <f_write>:
c0005440:	55                   	push   ebp
c0005441:	57                   	push   edi
c0005442:	56                   	push   esi
c0005443:	53                   	push   ebx
c0005444:	83 ec 2c             	sub    esp,0x2c
c0005447:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000544b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000544f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005455:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005459:	89 d8                	mov    eax,ebx
c000545b:	e8 f7 cc ff ff       	call   c0002157 <validate>
c0005460:	89 c5                	mov    ebp,eax
c0005462:	85 c0                	test   eax,eax
c0005464:	0f 85 86 02 00 00    	jne    c00056f0 <f_write+0x2b0>
c000546a:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000546e:	85 ed                	test   ebp,ebp
c0005470:	0f 85 7a 02 00 00    	jne    c00056f0 <f_write+0x2b0>
c0005476:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000547a:	0f 84 6b 02 00 00    	je     c00056eb <f_write+0x2ab>
c0005480:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005484:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005487:	0f 84 43 01 00 00    	je     c00055d0 <f_write+0x190>
c000548d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005490:	89 c1                	mov    ecx,eax
c0005492:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005496:	0f 83 34 01 00 00    	jae    c00055d0 <f_write+0x190>
c000549c:	f7 d0                	not    eax
c000549e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00054a2:	e9 29 01 00 00       	jmp    c00055d0 <f_write+0x190>
c00054a7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00054aa:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00054ad:	89 d0                	mov    eax,edx
c00054af:	25 ff 01 00 00       	and    eax,0x1ff
c00054b4:	0f 85 00 02 00 00    	jne    c00056ba <f_write+0x27a>
c00054ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054be:	89 d6                	mov    esi,edx
c00054c0:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00054c4:	89 cf                	mov    edi,ecx
c00054c6:	48                   	dec    eax
c00054c7:	0f ac fe 09          	shrd   esi,edi,0x9
c00054cb:	21 f0                	and    eax,esi
c00054cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054d1:	0f 84 06 01 00 00    	je     c00055dd <f_write+0x19d>
c00054d7:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054db:	0f 88 6e 01 00 00    	js     c000564f <f_write+0x20f>
c00054e1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054e5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054e8:	89 c8                	mov    eax,ecx
c00054ea:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054ee:	e8 fa c7 ff ff       	call   c0001ced <clst2sect>
c00054f3:	89 d1                	mov    ecx,edx
c00054f5:	09 c1                	or     ecx,eax
c00054f7:	0f 84 1c 01 00 00    	je     c0005619 <f_write+0x1d9>
c00054fd:	31 ff                	xor    edi,edi
c00054ff:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005503:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005507:	01 c6                	add    esi,eax
c0005509:	11 d7                	adc    edi,edx
c000550b:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005513:	0f 86 63 01 00 00    	jbe    c000567c <f_write+0x23c>
c0005519:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000551d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005521:	c1 e8 09             	shr    eax,0x9
c0005524:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005528:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000552c:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005530:	39 c2                	cmp    edx,eax
c0005532:	76 08                	jbe    c000553c <f_write+0xfc>
c0005534:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005538:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000553c:	83 ec 0c             	sub    esp,0xc
c000553f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005543:	57                   	push   edi
c0005544:	56                   	push   esi
c0005545:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005549:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000554d:	50                   	push   eax
c000554e:	e8 cc c4 ff ff       	call   c0001a1f <disk_write>
c0005553:	83 c4 20             	add    esp,0x20
c0005556:	85 c0                	test   eax,eax
c0005558:	0f 85 ce 00 00 00    	jne    c000562c <f_write+0x1ec>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	29 f0                	sub    eax,esi
c0005566:	19 fa                	sbb    edx,edi
c0005568:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000556c:	89 d7                	mov    edi,edx
c000556e:	ba 00 00 00 00       	mov    edx,0x0
c0005573:	89 f9                	mov    ecx,edi
c0005575:	19 d1                	sbb    ecx,edx
c0005577:	73 1c                	jae    c0005595 <f_write+0x155>
c0005579:	89 c7                	mov    edi,eax
c000557b:	b9 00 02 00 00       	mov    ecx,0x200
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8d 43 50             	lea    eax,[ebx+0x50]
c0005586:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000558a:	89 fa                	mov    edx,edi
c000558c:	e8 42 c5 ff ff       	call   c0001ad3 <mem_cpy>
c0005591:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005595:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005599:	c1 e6 09             	shl    esi,0x9
c000559c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00055a0:	31 ff                	xor    edi,edi
c00055a2:	01 30                	add    DWORD PTR [eax],esi
c00055a4:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00055a8:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00055ac:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055af:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00055b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00055b5:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00055b8:	89 c1                	mov    ecx,eax
c00055ba:	39 f2                	cmp    edx,esi
c00055bc:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00055bf:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00055c2:	19 f9                	sbb    ecx,edi
c00055c4:	73 04                	jae    c00055ca <f_write+0x18a>
c00055c6:	89 f2                	mov    edx,esi
c00055c8:	89 f8                	mov    eax,edi
c00055ca:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055cd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055d0:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055d5:	0f 85 cc fe ff ff    	jne    c00054a7 <f_write+0x67>
c00055db:	eb 2e                	jmp    c000560b <f_write+0x1cb>
c00055dd:	89 c8                	mov    eax,ecx
c00055df:	09 d0                	or     eax,edx
c00055e1:	75 0b                	jne    c00055ee <f_write+0x1ae>
c00055e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055e6:	31 d2                	xor    edx,edx
c00055e8:	85 c0                	test   eax,eax
c00055ea:	75 28                	jne    c0005614 <f_write+0x1d4>
c00055ec:	eb 12                	jmp    c0005600 <f_write+0x1c0>
c00055ee:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055f2:	74 09                	je     c00055fd <f_write+0x1bd>
c00055f4:	89 d8                	mov    eax,ebx
c00055f6:	e8 13 c7 ff ff       	call   c0001d0e <clmt_clust>
c00055fb:	eb 0a                	jmp    c0005607 <f_write+0x1c7>
c00055fd:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005600:	89 d8                	mov    eax,ebx
c0005602:	e8 a1 da ff ff       	call   c00030a8 <create_chain>
c0005607:	85 c0                	test   eax,eax
c0005609:	75 09                	jne    c0005614 <f_write+0x1d4>
c000560b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000560f:	e9 dc 00 00 00       	jmp    c00056f0 <f_write+0x2b0>
c0005614:	83 f8 01             	cmp    eax,0x1
c0005617:	75 0e                	jne    c0005627 <f_write+0x1e7>
c0005619:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000561d:	bd 02 00 00 00       	mov    ebp,0x2
c0005622:	e9 c9 00 00 00       	jmp    c00056f0 <f_write+0x2b0>
c0005627:	83 f8 ff             	cmp    eax,0xffffffff
c000562a:	75 0e                	jne    c000563a <f_write+0x1fa>
c000562c:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005630:	bd 01 00 00 00       	mov    ebp,0x1
c0005635:	e9 b6 00 00 00       	jmp    c00056f0 <f_write+0x2b0>
c000563a:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000563d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005641:	0f 85 90 fe ff ff    	jne    c00054d7 <f_write+0x97>
c0005647:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000564a:	e9 88 fe ff ff       	jmp    c00054d7 <f_write+0x97>
c000564f:	83 ec 0c             	sub    esp,0xc
c0005652:	8d 43 50             	lea    eax,[ebx+0x50]
c0005655:	6a 01                	push   0x1
c0005657:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000565a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000565d:	50                   	push   eax
c000565e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005662:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005666:	50                   	push   eax
c0005667:	e8 b3 c3 ff ff       	call   c0001a1f <disk_write>
c000566c:	83 c4 20             	add    esp,0x20
c000566f:	85 c0                	test   eax,eax
c0005671:	75 b9                	jne    c000562c <f_write+0x1ec>
c0005673:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005677:	e9 65 fe ff ff       	jmp    c00054e1 <f_write+0xa1>
c000567c:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000567f:	75 05                	jne    c0005686 <f_write+0x246>
c0005681:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005684:	74 2e                	je     c00056b4 <f_write+0x274>
c0005686:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005689:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000568c:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000568f:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005692:	73 20                	jae    c00056b4 <f_write+0x274>
c0005694:	83 ec 0c             	sub    esp,0xc
c0005697:	8d 43 50             	lea    eax,[ebx+0x50]
c000569a:	6a 01                	push   0x1
c000569c:	57                   	push   edi
c000569d:	56                   	push   esi
c000569e:	50                   	push   eax
c000569f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00056a3:	50                   	push   eax
c00056a4:	e8 60 c3 ff ff       	call   c0001a09 <disk_read>
c00056a9:	83 c4 20             	add    esp,0x20
c00056ac:	85 c0                	test   eax,eax
c00056ae:	0f 85 78 ff ff ff    	jne    c000562c <f_write+0x1ec>
c00056b4:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00056b7:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00056ba:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056bd:	ba 00 02 00 00       	mov    edx,0x200
c00056c2:	25 ff 01 00 00       	and    eax,0x1ff
c00056c7:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056cb:	29 c2                	sub    edx,eax
c00056cd:	39 d6                	cmp    esi,edx
c00056cf:	76 02                	jbe    c00056d3 <f_write+0x293>
c00056d1:	89 d6                	mov    esi,edx
c00056d3:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056d7:	89 f1                	mov    ecx,esi
c00056d9:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056dd:	e8 f1 c3 ff ff       	call   c0001ad3 <mem_cpy>
c00056e2:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056e6:	e9 b1 fe ff ff       	jmp    c000559c <f_write+0x15c>
c00056eb:	bd 07 00 00 00       	mov    ebp,0x7
c00056f0:	83 c4 2c             	add    esp,0x2c
c00056f3:	89 e8                	mov    eax,ebp
c00056f5:	5b                   	pop    ebx
c00056f6:	5e                   	pop    esi
c00056f7:	5f                   	pop    edi
c00056f8:	5d                   	pop    ebp
c00056f9:	c3                   	ret    

c00056fa <f_sync>:
c00056fa:	56                   	push   esi
c00056fb:	53                   	push   ebx
c00056fc:	83 ec 64             	sub    esp,0x64
c00056ff:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005703:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005707:	89 d8                	mov    eax,ebx
c0005709:	e8 49 ca ff ff       	call   c0002157 <validate>
c000570e:	85 c0                	test   eax,eax
c0005710:	0f 85 ba 01 00 00    	jne    c00058d0 <f_sync+0x1d6>
c0005716:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005719:	f6 c2 40             	test   dl,0x40
c000571c:	0f 84 ae 01 00 00    	je     c00058d0 <f_sync+0x1d6>
c0005722:	84 d2                	test   dl,dl
c0005724:	79 33                	jns    c0005759 <f_sync+0x5f>
c0005726:	83 ec 0c             	sub    esp,0xc
c0005729:	8d 43 50             	lea    eax,[ebx+0x50]
c000572c:	6a 01                	push   0x1
c000572e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005731:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005734:	50                   	push   eax
c0005735:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005739:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000573d:	50                   	push   eax
c000573e:	e8 dc c2 ff ff       	call   c0001a1f <disk_write>
c0005743:	83 c4 20             	add    esp,0x20
c0005746:	89 c2                	mov    edx,eax
c0005748:	b8 01 00 00 00       	mov    eax,0x1
c000574d:	85 d2                	test   edx,edx
c000574f:	0f 85 7b 01 00 00    	jne    c00058d0 <f_sync+0x1d6>
c0005755:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005759:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000575d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005760:	0f 85 11 01 00 00    	jne    c0005877 <f_sync+0x17d>
c0005766:	89 d8                	mov    eax,ebx
c0005768:	e8 13 d6 ff ff       	call   c0002d80 <fill_first_frag>
c000576d:	85 c0                	test   eax,eax
c000576f:	0f 85 5b 01 00 00    	jne    c00058d0 <f_sync+0x1d6>
c0005775:	83 c9 ff             	or     ecx,0xffffffff
c0005778:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000577b:	89 d8                	mov    eax,ebx
c000577d:	e8 c9 d5 ff ff       	call   c0002d4b <fill_last_frag>
c0005782:	85 c0                	test   eax,eax
c0005784:	0f 85 46 01 00 00    	jne    c00058d0 <f_sync+0x1d6>
c000578a:	83 ec 0c             	sub    esp,0xc
c000578d:	68 60 04 00 00       	push   0x460
c0005792:	e8 f0 2a 00 00       	call   c0008287 <ff_memalloc>
c0005797:	83 c4 10             	add    esp,0x10
c000579a:	89 c6                	mov    esi,eax
c000579c:	b8 11 00 00 00       	mov    eax,0x11
c00057a1:	85 f6                	test   esi,esi
c00057a3:	0f 84 27 01 00 00    	je     c00058d0 <f_sync+0x1d6>
c00057a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ad:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00057b3:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00057b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00057b9:	89 da                	mov    edx,ebx
c00057bb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057bf:	e8 af df ff ff       	call   c0003773 <load_obj_xdir>
c00057c4:	85 c0                	test   eax,eax
c00057c6:	0f 85 95 00 00 00    	jne    c0005861 <f_sync+0x167>
c00057cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057d0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057d3:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057d7:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057da:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057dd:	83 ca 01             	or     edx,0x1
c00057e0:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057e3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057e6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e9:	83 c0 34             	add    eax,0x34
c00057ec:	e8 d9 c2 ff ff       	call   c0001aca <st_dword>
c00057f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f5:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057fb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057fe:	83 c0 38             	add    eax,0x38
c0005801:	e8 c7 c2 ff ff       	call   c0001acd <st_qword>
c0005806:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000580d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005810:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005813:	83 c0 28             	add    eax,0x28
c0005816:	e8 b2 c2 ff ff       	call   c0001acd <st_qword>
c000581b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000581f:	ba 00 00 21 50       	mov    edx,0x50210000
c0005824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005827:	83 c0 0c             	add    eax,0xc
c000582a:	e8 9b c2 ff ff       	call   c0001aca <st_dword>
c000582f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005833:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005836:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c000583a:	31 d2                	xor    edx,edx
c000583c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000583f:	83 c0 10             	add    eax,0x10
c0005842:	e8 83 c2 ff ff       	call   c0001aca <st_dword>
c0005847:	8d 44 24 14          	lea    eax,[esp+0x14]
c000584b:	e8 62 e1 ff ff       	call   c00039b2 <store_xdir>
c0005850:	85 c0                	test   eax,eax
c0005852:	75 0d                	jne    c0005861 <f_sync+0x167>
c0005854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005858:	e8 00 eb ff ff       	call   c000435d <sync_fs>
c000585d:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005861:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005865:	83 ec 0c             	sub    esp,0xc
c0005868:	56                   	push   esi
c0005869:	e8 2f 2a 00 00       	call   c000829d <ff_memfree>
c000586e:	83 c4 10             	add    esp,0x10
c0005871:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005875:	eb 59                	jmp    c00058d0 <f_sync+0x1d6>
c0005877:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c000587a:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000587d:	e8 b0 c9 ff ff       	call   c0002232 <move_window>
c0005882:	85 c0                	test   eax,eax
c0005884:	75 4a                	jne    c00058d0 <f_sync+0x1d6>
c0005886:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005889:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000588d:	89 f2                	mov    edx,esi
c000588f:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005892:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005894:	e8 5f f3 ff ff       	call   c0004bf8 <st_clust.isra.1>
c0005899:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000589c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000589f:	e8 26 c2 ff ff       	call   c0001aca <st_dword>
c00058a4:	8d 46 16             	lea    eax,[esi+0x16]
c00058a7:	ba 00 00 21 50       	mov    edx,0x50210000
c00058ac:	e8 19 c2 ff ff       	call   c0001aca <st_dword>
c00058b1:	8d 46 12             	lea    eax,[esi+0x12]
c00058b4:	31 d2                	xor    edx,edx
c00058b6:	e8 0b c2 ff ff       	call   c0001ac6 <st_word>
c00058bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058bf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00058c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058c7:	e8 91 ea ff ff       	call   c000435d <sync_fs>
c00058cc:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058d0:	83 c4 64             	add    esp,0x64
c00058d3:	5b                   	pop    ebx
c00058d4:	5e                   	pop    esi
c00058d5:	c3                   	ret    

c00058d6 <f_close>:
c00058d6:	53                   	push   ebx
c00058d7:	83 ec 24             	sub    esp,0x24
c00058da:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058de:	53                   	push   ebx
c00058df:	e8 16 fe ff ff       	call   c00056fa <f_sync>
c00058e4:	83 c4 10             	add    esp,0x10
c00058e7:	85 c0                	test   eax,eax
c00058e9:	75 15                	jne    c0005900 <f_close+0x2a>
c00058eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058ef:	89 d8                	mov    eax,ebx
c00058f1:	e8 61 c8 ff ff       	call   c0002157 <validate>
c00058f6:	85 c0                	test   eax,eax
c00058f8:	75 06                	jne    c0005900 <f_close+0x2a>
c00058fa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005900:	83 c4 18             	add    esp,0x18
c0005903:	5b                   	pop    ebx
c0005904:	c3                   	ret    

c0005905 <f_lseek>:
c0005905:	55                   	push   ebp
c0005906:	57                   	push   edi
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 3c             	sub    esp,0x3c
c000590c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005910:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005914:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005918:	89 04 24             	mov    DWORD PTR [esp],eax
c000591b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000591f:	89 d8                	mov    eax,ebx
c0005921:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005925:	e8 2d c8 ff ff       	call   c0002157 <validate>
c000592a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000592e:	85 c0                	test   eax,eax
c0005930:	0f 85 7a 04 00 00    	jne    c0005db0 <f_lseek+0x4ab>
c0005936:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c000593a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000593e:	85 c0                	test   eax,eax
c0005940:	0f 85 6a 04 00 00    	jne    c0005db0 <f_lseek+0x4ab>
c0005946:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000594a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000594d:	74 0c                	je     c000595b <f_lseek+0x56>
c000594f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005952:	85 c0                	test   eax,eax
c0005954:	75 1f                	jne    c0005975 <f_lseek+0x70>
c0005956:	e9 b5 01 00 00       	jmp    c0005b10 <f_lseek+0x20b>
c000595b:	83 c9 ff             	or     ecx,0xffffffff
c000595e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005961:	89 d8                	mov    eax,ebx
c0005963:	e8 e3 d3 ff ff       	call   c0002d4b <fill_last_frag>
c0005968:	85 c0                	test   eax,eax
c000596a:	74 e3                	je     c000594f <f_lseek+0x4a>
c000596c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005970:	e9 3b 04 00 00       	jmp    c0005db0 <f_lseek+0x4ab>
c0005975:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c000597a:	0f 85 ac 00 00 00    	jne    c0005a2c <f_lseek+0x127>
c0005980:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005984:	0f 85 a2 00 00 00    	jne    c0005a2c <f_lseek+0x127>
c000598a:	8d 78 04             	lea    edi,[eax+0x4]
c000598d:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005990:	8b 00                	mov    eax,DWORD PTR [eax]
c0005992:	be 02 00 00 00       	mov    esi,0x2
c0005997:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000599b:	85 ed                	test   ebp,ebp
c000599d:	74 73                	je     c0005a12 <f_lseek+0x10d>
c000599f:	89 e9                	mov    ecx,ebp
c00059a1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00059a8:	ff 04 24             	inc    DWORD PTR [esp]
c00059ab:	89 ca                	mov    edx,ecx
c00059ad:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 02 d4 ff ff       	call   c0002dba <get_fat>
c00059b8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00059bc:	83 f8 01             	cmp    eax,0x1
c00059bf:	77 11                	ja     c00059d2 <f_lseek+0xcd>
c00059c1:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00059c5:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c00059cd:	e9 de 03 00 00       	jmp    c0005db0 <f_lseek+0x4ab>
c00059d2:	83 f8 ff             	cmp    eax,0xffffffff
c00059d5:	75 11                	jne    c00059e8 <f_lseek+0xe3>
c00059d7:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059db:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059e3:	e9 c8 03 00 00       	jmp    c0005db0 <f_lseek+0x4ab>
c00059e8:	8d 51 01             	lea    edx,[ecx+0x1]
c00059eb:	89 c1                	mov    ecx,eax
c00059ed:	39 c2                	cmp    edx,eax
c00059ef:	74 b7                	je     c00059a8 <f_lseek+0xa3>
c00059f1:	83 c6 02             	add    esi,0x2
c00059f4:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059f8:	72 0b                	jb     c0005a05 <f_lseek+0x100>
c00059fa:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059fd:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005a00:	89 0f                	mov    DWORD PTR [edi],ecx
c0005a02:	83 c7 08             	add    edi,0x8
c0005a05:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005a09:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005a0c:	76 04                	jbe    c0005a12 <f_lseek+0x10d>
c0005a0e:	89 c5                	mov    ebp,eax
c0005a10:	eb 8d                	jmp    c000599f <f_lseek+0x9a>
c0005a12:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a15:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005a19:	89 30                	mov    DWORD PTR [eax],esi
c0005a1b:	0f 87 87 03 00 00    	ja     c0005da8 <f_lseek+0x4a3>
c0005a21:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a27:	e9 84 03 00 00       	jmp    c0005db0 <f_lseek+0x4ab>
c0005a2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005a2f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005a32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a36:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a3e:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005a41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a45:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a49:	73 0f                	jae    c0005a5a <f_lseek+0x155>
c0005a4b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a4e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a56:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a5e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a62:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a65:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a6c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a70:	0f 84 3a 03 00 00    	je     c0005db0 <f_lseek+0x4ab>
c0005a76:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a7a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a7e:	83 c6 ff             	add    esi,0xffffffff
c0005a81:	89 d8                	mov    eax,ebx
c0005a83:	83 d7 ff             	adc    edi,0xffffffff
c0005a86:	89 f2                	mov    edx,esi
c0005a88:	89 f9                	mov    ecx,edi
c0005a8a:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a8e:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a91:	e8 78 c2 ff ff       	call   c0001d0e <clmt_clust>
c0005a96:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a9a:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a9d:	89 c2                	mov    edx,eax
c0005a9f:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005aa3:	89 c8                	mov    eax,ecx
c0005aa5:	e8 43 c2 ff ff       	call   c0001ced <clst2sect>
c0005aaa:	89 d7                	mov    edi,edx
c0005aac:	09 c7                	or     edi,eax
c0005aae:	0f 84 0d ff ff ff    	je     c00059c1 <f_lseek+0xbc>
c0005ab4:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005ab8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005abe:	0f 84 ec 02 00 00    	je     c0005db0 <f_lseek+0x4ab>
c0005ac4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ac8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005acc:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005acf:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ad3:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ad7:	4d                   	dec    ebp
c0005ad8:	31 ff                	xor    edi,edi
c0005ada:	21 ee                	and    esi,ebp
c0005adc:	01 c6                	add    esi,eax
c0005ade:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005ae1:	11 d7                	adc    edi,edx
c0005ae3:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005ae6:	39 fa                	cmp    edx,edi
c0005ae8:	75 08                	jne    c0005af2 <f_lseek+0x1ed>
c0005aea:	39 f0                	cmp    eax,esi
c0005aec:	0f 84 be 02 00 00    	je     c0005db0 <f_lseek+0x4ab>
c0005af2:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005af5:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005af9:	0f 89 80 02 00 00    	jns    c0005d7f <f_lseek+0x47a>
c0005aff:	83 ec 0c             	sub    esp,0xc
c0005b02:	6a 01                	push   0x1
c0005b04:	52                   	push   edx
c0005b05:	50                   	push   eax
c0005b06:	55                   	push   ebp
c0005b07:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005b0b:	e9 5a 02 00 00       	jmp    c0005d6a <f_lseek+0x465>
c0005b10:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005b14:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005b17:	74 16                	je     c0005b2f <f_lseek+0x22a>
c0005b19:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005b1e:	76 0f                	jbe    c0005b2f <f_lseek+0x22a>
c0005b20:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005b27:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005b2f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005b32:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005b35:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005b38:	89 c7                	mov    edi,eax
c0005b3a:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b3e:	73 0d                	jae    c0005b4d <f_lseek+0x248>
c0005b40:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b44:	75 07                	jne    c0005b4d <f_lseek+0x248>
c0005b46:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b4d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b50:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b53:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b57:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b5e:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b65:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b68:	75 09                	jne    c0005b73 <f_lseek+0x26e>
c0005b6a:	31 f6                	xor    esi,esi
c0005b6c:	31 ff                	xor    edi,edi
c0005b6e:	e9 af 01 00 00       	jmp    c0005d22 <f_lseek+0x41d>
c0005b73:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b77:	89 d7                	mov    edi,edx
c0005b79:	c1 e1 09             	shl    ecx,0x9
c0005b7c:	09 c7                	or     edi,eax
c0005b7e:	89 cd                	mov    ebp,ecx
c0005b80:	74 6d                	je     c0005bef <f_lseek+0x2ea>
c0005b82:	83 c0 ff             	add    eax,0xffffffff
c0005b85:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b89:	83 d2 ff             	adc    edx,0xffffffff
c0005b8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b8f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b93:	83 c0 ff             	add    eax,0xffffffff
c0005b96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b9a:	83 d2 ff             	adc    edx,0xffffffff
c0005b9d:	31 ff                	xor    edi,edi
c0005b9f:	57                   	push   edi
c0005ba0:	51                   	push   ecx
c0005ba1:	52                   	push   edx
c0005ba2:	50                   	push   eax
c0005ba3:	e8 b4 d7 01 00       	call   c002335c <__udivdi3>
c0005ba8:	83 c4 10             	add    esp,0x10
c0005bab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005baf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005bb3:	57                   	push   edi
c0005bb4:	55                   	push   ebp
c0005bb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bb9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bbd:	e8 9a d7 01 00       	call   c002335c <__udivdi3>
c0005bc2:	83 c4 10             	add    esp,0x10
c0005bc5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005bc9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005bcd:	19 d1                	sbb    ecx,edx
c0005bcf:	72 1e                	jb     c0005bef <f_lseek+0x2ea>
c0005bd1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005bd5:	89 e9                	mov    ecx,ebp
c0005bd7:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005bda:	f7 d9                	neg    ecx
c0005bdc:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005bdf:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005be3:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005be6:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005be9:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005bed:	eb 28                	jmp    c0005c17 <f_lseek+0x312>
c0005bef:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005bf2:	85 c0                	test   eax,eax
c0005bf4:	75 1e                	jne    c0005c14 <f_lseek+0x30f>
c0005bf6:	31 d2                	xor    edx,edx
c0005bf8:	89 d8                	mov    eax,ebx
c0005bfa:	e8 a9 d4 ff ff       	call   c00030a8 <create_chain>
c0005bff:	83 f8 01             	cmp    eax,0x1
c0005c02:	0f 84 b9 fd ff ff    	je     c00059c1 <f_lseek+0xbc>
c0005c08:	83 f8 ff             	cmp    eax,0xffffffff
c0005c0b:	0f 84 c6 fd ff ff    	je     c00059d7 <f_lseek+0xd2>
c0005c11:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005c14:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c17:	85 c0                	test   eax,eax
c0005c19:	0f 84 4b ff ff ff    	je     c0005b6a <f_lseek+0x265>
c0005c1f:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005c23:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005c2b:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005c2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c32:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005c35:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005c38:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c3c:	0f 83 9d 00 00 00    	jae    c0005cdf <f_lseek+0x3da>
c0005c42:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c46:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c4a:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c4d:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c51:	01 f2                	add    edx,esi
c0005c53:	11 f9                	adc    ecx,edi
c0005c55:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c59:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c5d:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c60:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c63:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c66:	f6 c1 02             	test   cl,0x2
c0005c69:	74 35                	je     c0005ca0 <f_lseek+0x39b>
c0005c6b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c6f:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c72:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c75:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c79:	73 16                	jae    c0005c91 <f_lseek+0x38c>
c0005c7b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c7f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c83:	88 ca                	mov    dl,cl
c0005c85:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c88:	83 ca 40             	or     edx,0x40
c0005c8b:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c8e:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c91:	89 c2                	mov    edx,eax
c0005c93:	89 d8                	mov    eax,ebx
c0005c95:	e8 0e d4 ff ff       	call   c00030a8 <create_chain>
c0005c9a:	85 c0                	test   eax,eax
c0005c9c:	75 0b                	jne    c0005ca9 <f_lseek+0x3a4>
c0005c9e:	eb 30                	jmp    c0005cd0 <f_lseek+0x3cb>
c0005ca0:	89 c2                	mov    edx,eax
c0005ca2:	89 d8                	mov    eax,ebx
c0005ca4:	e8 11 d1 ff ff       	call   c0002dba <get_fat>
c0005ca9:	83 f8 ff             	cmp    eax,0xffffffff
c0005cac:	0f 84 25 fd ff ff    	je     c00059d7 <f_lseek+0xd2>
c0005cb2:	83 f8 01             	cmp    eax,0x1
c0005cb5:	0f 86 06 fd ff ff    	jbe    c00059c1 <f_lseek+0xbc>
c0005cbb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005cbf:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005cc2:	0f 86 f9 fc ff ff    	jbe    c00059c1 <f_lseek+0xbc>
c0005cc8:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ccb:	e9 5b ff ff ff       	jmp    c0005c2b <f_lseek+0x326>
c0005cd0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005cd7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005cdf:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005ce2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ce6:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ce9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005cec:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005cef:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005cf5:	0f 84 6f fe ff ff    	je     c0005b6a <f_lseek+0x265>
c0005cfb:	89 c2                	mov    edx,eax
c0005cfd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005d01:	e8 e7 bf ff ff       	call   c0001ced <clst2sect>
c0005d06:	89 d7                	mov    edi,edx
c0005d08:	09 c7                	or     edi,eax
c0005d0a:	0f 84 b1 fc ff ff    	je     c00059c1 <f_lseek+0xbc>
c0005d10:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d14:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005d17:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d1b:	c1 ef 09             	shr    edi,0x9
c0005d1e:	01 c6                	add    esi,eax
c0005d20:	11 d7                	adc    edi,edx
c0005d22:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d28:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005d2b:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005d2e:	19 d1                	sbb    ecx,edx
c0005d30:	73 0a                	jae    c0005d3c <f_lseek+0x437>
c0005d32:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005d35:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005d38:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005d3c:	a9 ff 01 00 00       	test   eax,0x1ff
c0005d41:	74 6d                	je     c0005db0 <f_lseek+0x4ab>
c0005d43:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d46:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d49:	39 fa                	cmp    edx,edi
c0005d4b:	75 04                	jne    c0005d51 <f_lseek+0x44c>
c0005d4d:	39 f0                	cmp    eax,esi
c0005d4f:	74 5f                	je     c0005db0 <f_lseek+0x4ab>
c0005d51:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d54:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d58:	79 25                	jns    c0005d7f <f_lseek+0x47a>
c0005d5a:	83 ec 0c             	sub    esp,0xc
c0005d5d:	6a 01                	push   0x1
c0005d5f:	52                   	push   edx
c0005d60:	50                   	push   eax
c0005d61:	55                   	push   ebp
c0005d62:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d66:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d6a:	50                   	push   eax
c0005d6b:	e8 af bc ff ff       	call   c0001a1f <disk_write>
c0005d70:	83 c4 20             	add    esp,0x20
c0005d73:	85 c0                	test   eax,eax
c0005d75:	0f 85 5c fc ff ff    	jne    c00059d7 <f_lseek+0xd2>
c0005d7b:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d7f:	83 ec 0c             	sub    esp,0xc
c0005d82:	6a 01                	push   0x1
c0005d84:	57                   	push   edi
c0005d85:	56                   	push   esi
c0005d86:	55                   	push   ebp
c0005d87:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d8b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d8f:	50                   	push   eax
c0005d90:	e8 74 bc ff ff       	call   c0001a09 <disk_read>
c0005d95:	83 c4 20             	add    esp,0x20
c0005d98:	85 c0                	test   eax,eax
c0005d9a:	0f 85 37 fc ff ff    	jne    c00059d7 <f_lseek+0xd2>
c0005da0:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005da3:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005da6:	eb 08                	jmp    c0005db0 <f_lseek+0x4ab>
c0005da8:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005db0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005db4:	83 c4 3c             	add    esp,0x3c
c0005db7:	5b                   	pop    ebx
c0005db8:	5e                   	pop    esi
c0005db9:	5f                   	pop    edi
c0005dba:	5d                   	pop    ebp
c0005dbb:	c3                   	ret    

c0005dbc <f_opendir>:
c0005dbc:	56                   	push   esi
c0005dbd:	b8 09 00 00 00       	mov    eax,0x9
c0005dc2:	53                   	push   ebx
c0005dc3:	83 ec 24             	sub    esp,0x24
c0005dc6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005dca:	85 db                	test   ebx,ebx
c0005dcc:	0f 84 e6 00 00 00    	je     c0005eb8 <f_opendir+0xfc>
c0005dd2:	31 c9                	xor    ecx,ecx
c0005dd4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005dd8:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ddc:	e8 03 c7 ff ff       	call   c00024e4 <mount_volume>
c0005de1:	85 c0                	test   eax,eax
c0005de3:	0f 85 c9 00 00 00    	jne    c0005eb2 <f_opendir+0xf6>
c0005de9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ded:	83 ec 0c             	sub    esp,0xc
c0005df0:	89 03                	mov    DWORD PTR [ebx],eax
c0005df2:	68 60 04 00 00       	push   0x460
c0005df7:	e8 8b 24 00 00       	call   c0008287 <ff_memalloc>
c0005dfc:	83 c4 10             	add    esp,0x10
c0005dff:	89 c6                	mov    esi,eax
c0005e01:	b8 11 00 00 00       	mov    eax,0x11
c0005e06:	85 f6                	test   esi,esi
c0005e08:	0f 84 aa 00 00 00    	je     c0005eb8 <f_opendir+0xfc>
c0005e0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e12:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e18:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e1b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e1e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005e22:	89 d8                	mov    eax,ebx
c0005e24:	e8 31 ee ff ff       	call   c0004c5a <follow_path>
c0005e29:	85 c0                	test   eax,eax
c0005e2b:	75 61                	jne    c0005e8e <f_opendir+0xd2>
c0005e2d:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005e31:	78 46                	js     c0005e79 <f_opendir+0xbd>
c0005e33:	b8 05 00 00 00       	mov    eax,0x5
c0005e38:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005e3c:	74 50                	je     c0005e8e <f_opendir+0xd2>
c0005e3e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005e42:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e44:	3c 04                	cmp    al,0x4
c0005e46:	75 26                	jne    c0005e6e <f_opendir+0xb2>
c0005e48:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e4b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e4e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e51:	30 d2                	xor    dl,dl
c0005e53:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e57:	09 c2                	or     edx,eax
c0005e59:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e5c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e5f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e62:	89 da                	mov    edx,ebx
c0005e64:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e67:	e8 b4 ed ff ff       	call   c0004c20 <init_alloc_info.isra.2>
c0005e6c:	eb 0b                	jmp    c0005e79 <f_opendir+0xbd>
c0005e6e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e71:	e8 59 ed ff ff       	call   c0004bcf <ld_clust.isra.0>
c0005e76:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e7d:	31 d2                	xor    edx,edx
c0005e7f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e83:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e87:	89 d8                	mov    eax,ebx
c0005e89:	e8 22 d1 ff ff       	call   c0002fb0 <dir_sdi>
c0005e8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e92:	83 ec 0c             	sub    esp,0xc
c0005e95:	56                   	push   esi
c0005e96:	e8 02 24 00 00       	call   c000829d <ff_memfree>
c0005e9b:	83 c4 10             	add    esp,0x10
c0005e9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ea2:	83 f8 04             	cmp    eax,0x4
c0005ea5:	74 06                	je     c0005ead <f_opendir+0xf1>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	74 0d                	je     c0005eb8 <f_opendir+0xfc>
c0005eab:	eb 05                	jmp    c0005eb2 <f_opendir+0xf6>
c0005ead:	b8 05 00 00 00       	mov    eax,0x5
c0005eb2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005eb8:	83 c4 24             	add    esp,0x24
c0005ebb:	5b                   	pop    ebx
c0005ebc:	5e                   	pop    esi
c0005ebd:	c3                   	ret    

c0005ebe <f_closedir>:
c0005ebe:	53                   	push   ebx
c0005ebf:	83 ec 18             	sub    esp,0x18
c0005ec2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005ec6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005eca:	89 d8                	mov    eax,ebx
c0005ecc:	e8 86 c2 ff ff       	call   c0002157 <validate>
c0005ed1:	85 c0                	test   eax,eax
c0005ed3:	75 06                	jne    c0005edb <f_closedir+0x1d>
c0005ed5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005edb:	83 c4 18             	add    esp,0x18
c0005ede:	5b                   	pop    ebx
c0005edf:	c3                   	ret    

c0005ee0 <f_readdir>:
c0005ee0:	57                   	push   edi
c0005ee1:	56                   	push   esi
c0005ee2:	53                   	push   ebx
c0005ee3:	83 ec 20             	sub    esp,0x20
c0005ee6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005eea:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005eee:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ef2:	89 d8                	mov    eax,ebx
c0005ef4:	e8 5e c2 ff ff       	call   c0002157 <validate>
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	75 77                	jne    c0005f74 <f_readdir+0x94>
c0005efd:	85 ff                	test   edi,edi
c0005eff:	75 0b                	jne    c0005f0c <f_readdir+0x2c>
c0005f01:	31 d2                	xor    edx,edx
c0005f03:	89 d8                	mov    eax,ebx
c0005f05:	e8 a6 d0 ff ff       	call   c0002fb0 <dir_sdi>
c0005f0a:	eb 68                	jmp    c0005f74 <f_readdir+0x94>
c0005f0c:	83 ec 0c             	sub    esp,0xc
c0005f0f:	68 60 04 00 00       	push   0x460
c0005f14:	e8 6e 23 00 00       	call   c0008287 <ff_memalloc>
c0005f19:	83 c4 10             	add    esp,0x10
c0005f1c:	89 c6                	mov    esi,eax
c0005f1e:	b8 11 00 00 00       	mov    eax,0x11
c0005f23:	85 f6                	test   esi,esi
c0005f25:	74 4d                	je     c0005f74 <f_readdir+0x94>
c0005f27:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f2b:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f31:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f34:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f37:	31 d2                	xor    edx,edx
c0005f39:	89 d8                	mov    eax,ebx
c0005f3b:	e8 80 d8 ff ff       	call   c00037c0 <dir_read>
c0005f40:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f45:	75 19                	jne    c0005f60 <f_readdir+0x80>
c0005f47:	89 fa                	mov    edx,edi
c0005f49:	89 d8                	mov    eax,ebx
c0005f4b:	e8 7e ea ff ff       	call   c00049ce <get_fileinfo>
c0005f50:	31 d2                	xor    edx,edx
c0005f52:	89 d8                	mov    eax,ebx
c0005f54:	e8 af d5 ff ff       	call   c0003508 <dir_next>
c0005f59:	83 f8 04             	cmp    eax,0x4
c0005f5c:	75 02                	jne    c0005f60 <f_readdir+0x80>
c0005f5e:	31 c0                	xor    eax,eax
c0005f60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f64:	83 ec 0c             	sub    esp,0xc
c0005f67:	56                   	push   esi
c0005f68:	e8 30 23 00 00       	call   c000829d <ff_memfree>
c0005f6d:	83 c4 10             	add    esp,0x10
c0005f70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f74:	83 c4 20             	add    esp,0x20
c0005f77:	5b                   	pop    ebx
c0005f78:	5e                   	pop    esi
c0005f79:	5f                   	pop    edi
c0005f7a:	c3                   	ret    

c0005f7b <f_stat>:
c0005f7b:	57                   	push   edi
c0005f7c:	31 c9                	xor    ecx,ecx
c0005f7e:	56                   	push   esi
c0005f7f:	53                   	push   ebx
c0005f80:	83 ec 50             	sub    esp,0x50
c0005f83:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f87:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f8b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f8f:	e8 50 c5 ff ff       	call   c00024e4 <mount_volume>
c0005f94:	89 c3                	mov    ebx,eax
c0005f96:	85 c0                	test   eax,eax
c0005f98:	75 67                	jne    c0006001 <f_stat+0x86>
c0005f9a:	83 ec 0c             	sub    esp,0xc
c0005f9d:	bb 11 00 00 00       	mov    ebx,0x11
c0005fa2:	68 60 04 00 00       	push   0x460
c0005fa7:	e8 db 22 00 00       	call   c0008287 <ff_memalloc>
c0005fac:	83 c4 10             	add    esp,0x10
c0005faf:	89 c6                	mov    esi,eax
c0005fb1:	85 c0                	test   eax,eax
c0005fb3:	74 4c                	je     c0006001 <f_stat+0x86>
c0005fb5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005fb9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005fbf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fc2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005fc5:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005fc9:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fcd:	e8 88 ec ff ff       	call   c0004c5a <follow_path>
c0005fd2:	89 c3                	mov    ebx,eax
c0005fd4:	85 c0                	test   eax,eax
c0005fd6:	75 1d                	jne    c0005ff5 <f_stat+0x7a>
c0005fd8:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005fdd:	78 11                	js     c0005ff0 <f_stat+0x75>
c0005fdf:	85 ff                	test   edi,edi
c0005fe1:	74 12                	je     c0005ff5 <f_stat+0x7a>
c0005fe3:	89 fa                	mov    edx,edi
c0005fe5:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fe9:	e8 e0 e9 ff ff       	call   c00049ce <get_fileinfo>
c0005fee:	eb 05                	jmp    c0005ff5 <f_stat+0x7a>
c0005ff0:	bb 06 00 00 00       	mov    ebx,0x6
c0005ff5:	83 ec 0c             	sub    esp,0xc
c0005ff8:	56                   	push   esi
c0005ff9:	e8 9f 22 00 00       	call   c000829d <ff_memfree>
c0005ffe:	83 c4 10             	add    esp,0x10
c0006001:	83 c4 50             	add    esp,0x50
c0006004:	89 d8                	mov    eax,ebx
c0006006:	5b                   	pop    ebx
c0006007:	5e                   	pop    esi
c0006008:	5f                   	pop    edi
c0006009:	c3                   	ret    

c000600a <f_getfree>:
c000600a:	55                   	push   ebp
c000600b:	31 c9                	xor    ecx,ecx
c000600d:	57                   	push   edi
c000600e:	56                   	push   esi
c000600f:	53                   	push   ebx
c0006010:	83 ec 5c             	sub    esp,0x5c
c0006013:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006017:	8d 44 24 70          	lea    eax,[esp+0x70]
c000601b:	e8 c4 c4 ff ff       	call   c00024e4 <mount_volume>
c0006020:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006024:	85 c0                	test   eax,eax
c0006026:	0f 85 9d 01 00 00    	jne    c00061c9 <f_getfree+0x1bf>
c000602c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006030:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006034:	89 02                	mov    DWORD PTR [edx],eax
c0006036:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006039:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000603c:	8d 71 fe             	lea    esi,[ecx-0x2]
c000603f:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006043:	39 f2                	cmp    edx,esi
c0006045:	77 0b                	ja     c0006052 <f_getfree+0x48>
c0006047:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000604b:	89 10                	mov    DWORD PTR [eax],edx
c000604d:	e9 77 01 00 00       	jmp    c00061c9 <f_getfree+0x1bf>
c0006052:	8a 10                	mov    dl,BYTE PTR [eax]
c0006054:	80 fa 01             	cmp    dl,0x1
c0006057:	75 3a                	jne    c0006093 <f_getfree+0x89>
c0006059:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000605d:	be 02 00 00 00       	mov    esi,0x2
c0006062:	31 db                	xor    ebx,ebx
c0006064:	89 f2                	mov    edx,esi
c0006066:	8d 44 24 28          	lea    eax,[esp+0x28]
c000606a:	e8 4b cd ff ff       	call   c0002dba <get_fat>
c000606f:	83 f8 ff             	cmp    eax,0xffffffff
c0006072:	0f 84 28 01 00 00    	je     c00061a0 <f_getfree+0x196>
c0006078:	83 f8 01             	cmp    eax,0x1
c000607b:	0f 84 29 01 00 00    	je     c00061aa <f_getfree+0x1a0>
c0006081:	83 d3 00             	adc    ebx,0x0
c0006084:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006088:	46                   	inc    esi
c0006089:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000608c:	77 d6                	ja     c0006064 <f_getfree+0x5a>
c000608e:	e9 25 01 00 00       	jmp    c00061b8 <f_getfree+0x1ae>
c0006093:	80 fa 04             	cmp    dl,0x4
c0006096:	0f 85 88 00 00 00    	jne    c0006124 <f_getfree+0x11a>
c000609c:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000609f:	31 ed                	xor    ebp,ebp
c00060a1:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00060a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060ac:	31 db                	xor    ebx,ebx
c00060ae:	85 ed                	test   ebp,ebp
c00060b0:	75 3f                	jne    c00060f1 <f_getfree+0xe7>
c00060b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00060ba:	83 c0 01             	add    eax,0x1
c00060bd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00060c1:	83 d2 00             	adc    edx,0x0
c00060c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00060cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00060d4:	e8 59 c1 ff ff       	call   c0002232 <move_window>
c00060d9:	85 c0                	test   eax,eax
c00060db:	0f 85 d3 00 00 00    	jne    c00061b4 <f_getfree+0x1aa>
c00060e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060ed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060f5:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060f8:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060fc:	89 cf                	mov    edi,ecx
c00060fe:	85 f6                	test   esi,esi
c0006100:	74 12                	je     c0006114 <f_getfree+0x10a>
c0006102:	88 c1                	mov    cl,al
c0006104:	83 e1 01             	and    ecx,0x1
c0006107:	80 f9 01             	cmp    cl,0x1
c000610a:	83 d3 00             	adc    ebx,0x0
c000610d:	d0 e8                	shr    al,1
c000610f:	4e                   	dec    esi
c0006110:	39 fe                	cmp    esi,edi
c0006112:	75 ea                	jne    c00060fe <f_getfree+0xf4>
c0006114:	45                   	inc    ebp
c0006115:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000611b:	85 f6                	test   esi,esi
c000611d:	75 8f                	jne    c00060ae <f_getfree+0xa4>
c000611f:	e9 94 00 00 00       	jmp    c00061b8 <f_getfree+0x1ae>
c0006124:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006127:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000612a:	31 f6                	xor    esi,esi
c000612c:	31 db                	xor    ebx,ebx
c000612e:	85 f6                	test   esi,esi
c0006130:	75 1b                	jne    c000614d <f_getfree+0x143>
c0006132:	89 d7                	mov    edi,edx
c0006134:	89 cd                	mov    ebp,ecx
c0006136:	83 c7 01             	add    edi,0x1
c0006139:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000613d:	83 d5 00             	adc    ebp,0x0
c0006140:	e8 ed c0 ff ff       	call   c0002232 <move_window>
c0006145:	85 c0                	test   eax,eax
c0006147:	75 6b                	jne    c00061b4 <f_getfree+0x1aa>
c0006149:	89 fa                	mov    edx,edi
c000614b:	89 e9                	mov    ecx,ebp
c000614d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006151:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006155:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006159:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000615c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006160:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006164:	75 11                	jne    c0006177 <f_getfree+0x16d>
c0006166:	e8 e9 b8 ff ff       	call   c0001a54 <ld_word>
c000616b:	66 83 f8 01          	cmp    ax,0x1
c000616f:	83 d3 00             	adc    ebx,0x0
c0006172:	83 c6 02             	add    esi,0x2
c0006175:	eb 13                	jmp    c000618a <f_getfree+0x180>
c0006177:	e8 e5 b8 ff ff       	call   c0001a61 <ld_dword>
c000617c:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006181:	83 f8 01             	cmp    eax,0x1
c0006184:	83 d3 00             	adc    ebx,0x0
c0006187:	83 c6 04             	add    esi,0x4
c000618a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006190:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006194:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006198:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000619c:	75 90                	jne    c000612e <f_getfree+0x124>
c000619e:	eb 18                	jmp    c00061b8 <f_getfree+0x1ae>
c00061a0:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00061a8:	eb 0e                	jmp    c00061b8 <f_getfree+0x1ae>
c00061aa:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00061b2:	eb 04                	jmp    c00061b8 <f_getfree+0x1ae>
c00061b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061b8:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00061bc:	89 18                	mov    DWORD PTR [eax],ebx
c00061be:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061c2:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00061c5:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00061c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061cd:	83 c4 5c             	add    esp,0x5c
c00061d0:	5b                   	pop    ebx
c00061d1:	5e                   	pop    esi
c00061d2:	5f                   	pop    edi
c00061d3:	5d                   	pop    ebp
c00061d4:	c3                   	ret    

c00061d5 <f_truncate>:
c00061d5:	56                   	push   esi
c00061d6:	53                   	push   ebx
c00061d7:	83 ec 14             	sub    esp,0x14
c00061da:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00061de:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00061e2:	89 d8                	mov    eax,ebx
c00061e4:	e8 6e bf ff ff       	call   c0002157 <validate>
c00061e9:	89 c6                	mov    esi,eax
c00061eb:	85 c0                	test   eax,eax
c00061ed:	0f 85 d2 00 00 00    	jne    c00062c5 <f_truncate+0xf0>
c00061f3:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061f7:	85 f6                	test   esi,esi
c00061f9:	0f 85 c6 00 00 00    	jne    c00062c5 <f_truncate+0xf0>
c00061ff:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006203:	0f 84 b7 00 00 00    	je     c00062c0 <f_truncate+0xeb>
c0006209:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000620c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000620f:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006212:	89 d1                	mov    ecx,edx
c0006214:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006217:	0f 83 a8 00 00 00    	jae    c00062c5 <f_truncate+0xf0>
c000621d:	09 c2                	or     edx,eax
c000621f:	75 15                	jne    c0006236 <f_truncate+0x61>
c0006221:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006224:	31 c9                	xor    ecx,ecx
c0006226:	89 d8                	mov    eax,ebx
c0006228:	e8 7a d0 ff ff       	call   c00032a7 <remove_chain>
c000622d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006234:	eb 35                	jmp    c000626b <f_truncate+0x96>
c0006236:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006239:	89 d8                	mov    eax,ebx
c000623b:	e8 7a cb ff ff       	call   c0002dba <get_fat>
c0006240:	89 c2                	mov    edx,eax
c0006242:	b8 01 00 00 00       	mov    eax,0x1
c0006247:	83 fa ff             	cmp    edx,0xffffffff
c000624a:	74 1f                	je     c000626b <f_truncate+0x96>
c000624c:	b8 02 00 00 00       	mov    eax,0x2
c0006251:	83 fa 01             	cmp    edx,0x1
c0006254:	74 15                	je     c000626b <f_truncate+0x96>
c0006256:	31 c0                	xor    eax,eax
c0006258:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000625c:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000625f:	76 0a                	jbe    c000626b <f_truncate+0x96>
c0006261:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006264:	89 d8                	mov    eax,ebx
c0006266:	e8 3c d0 ff ff       	call   c00032a7 <remove_chain>
c000626b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000626e:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006271:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006274:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006277:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000627a:	83 ca 40             	or     edx,0x40
c000627d:	85 c0                	test   eax,eax
c000627f:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006282:	75 35                	jne    c00062b9 <f_truncate+0xe4>
c0006284:	84 d2                	test   dl,dl
c0006286:	79 3d                	jns    c00062c5 <f_truncate+0xf0>
c0006288:	83 ec 0c             	sub    esp,0xc
c000628b:	8d 43 50             	lea    eax,[ebx+0x50]
c000628e:	6a 01                	push   0x1
c0006290:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006293:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006296:	50                   	push   eax
c0006297:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000629b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000629f:	50                   	push   eax
c00062a0:	e8 7a b7 ff ff       	call   c0001a1f <disk_write>
c00062a5:	83 c4 20             	add    esp,0x20
c00062a8:	85 c0                	test   eax,eax
c00062aa:	75 08                	jne    c00062b4 <f_truncate+0xdf>
c00062ac:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00062b0:	31 f6                	xor    esi,esi
c00062b2:	eb 11                	jmp    c00062c5 <f_truncate+0xf0>
c00062b4:	b8 01 00 00 00       	mov    eax,0x1
c00062b9:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00062bc:	89 c6                	mov    esi,eax
c00062be:	eb 05                	jmp    c00062c5 <f_truncate+0xf0>
c00062c0:	be 07 00 00 00       	mov    esi,0x7
c00062c5:	89 f0                	mov    eax,esi
c00062c7:	83 c4 14             	add    esp,0x14
c00062ca:	5b                   	pop    ebx
c00062cb:	5e                   	pop    esi
c00062cc:	c3                   	ret    

c00062cd <f_unlink>:
c00062cd:	56                   	push   esi
c00062ce:	b9 02 00 00 00       	mov    ecx,0x2
c00062d3:	53                   	push   ebx
c00062d4:	81 ec e4 00 00 00    	sub    esp,0xe4
c00062da:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00062de:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062e5:	e8 fa c1 ff ff       	call   c00024e4 <mount_volume>
c00062ea:	85 c0                	test   eax,eax
c00062ec:	0f 85 55 01 00 00    	jne    c0006447 <f_unlink+0x17a>
c00062f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062f6:	83 ec 0c             	sub    esp,0xc
c00062f9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062fd:	68 60 04 00 00       	push   0x460
c0006302:	e8 80 1f 00 00       	call   c0008287 <ff_memalloc>
c0006307:	83 c4 10             	add    esp,0x10
c000630a:	89 c3                	mov    ebx,eax
c000630c:	b8 11 00 00 00       	mov    eax,0x11
c0006311:	85 db                	test   ebx,ebx
c0006313:	0f 84 2e 01 00 00    	je     c0006447 <f_unlink+0x17a>
c0006319:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000631d:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006323:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006326:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006329:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006330:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006334:	e8 21 e9 ff ff       	call   c0004c5a <follow_path>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 85 f2 00 00 00    	jne    c0006433 <f_unlink+0x166>
c0006341:	b8 06 00 00 00       	mov    eax,0x6
c0006346:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000634e:	0f 88 df 00 00 00    	js     c0006433 <f_unlink+0x166>
c0006354:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006359:	74 0a                	je     c0006365 <f_unlink+0x98>
c000635b:	b8 07 00 00 00       	mov    eax,0x7
c0006360:	e9 ce 00 00 00       	jmp    c0006433 <f_unlink+0x166>
c0006365:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006369:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000636d:	8a 02                	mov    al,BYTE PTR [edx]
c000636f:	3c 04                	cmp    al,0x4
c0006371:	75 12                	jne    c0006385 <f_unlink+0xb8>
c0006373:	8d 42 10             	lea    eax,[edx+0x10]
c0006376:	8d 54 24 20          	lea    edx,[esp+0x20]
c000637a:	e8 a1 e8 ff ff       	call   c0004c20 <init_alloc_info.isra.2>
c000637f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006383:	eb 0e                	jmp    c0006393 <f_unlink+0xc6>
c0006385:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000638c:	e8 3e e8 ff ff       	call   c0004bcf <ld_clust.isra.0>
c0006391:	89 c6                	mov    esi,eax
c0006393:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006398:	75 12                	jne    c00063ac <f_unlink+0xdf>
c000639a:	8d 44 24 48          	lea    eax,[esp+0x48]
c000639e:	e8 94 d6 ff ff       	call   c0003a37 <dir_remove>
c00063a3:	85 c0                	test   eax,eax
c00063a5:	74 6c                	je     c0006413 <f_unlink+0x146>
c00063a7:	e9 87 00 00 00       	jmp    c0006433 <f_unlink+0x166>
c00063ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063b0:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00063b7:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00063be:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00063c1:	75 21                	jne    c00063e4 <f_unlink+0x117>
c00063c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00063c7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00063cb:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00063d2:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00063d9:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00063dd:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063e4:	31 d2                	xor    edx,edx
c00063e6:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063ed:	e8 be cb ff ff       	call   c0002fb0 <dir_sdi>
c00063f2:	85 c0                	test   eax,eax
c00063f4:	75 3d                	jne    c0006433 <f_unlink+0x166>
c00063f6:	31 d2                	xor    edx,edx
c00063f8:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063ff:	e8 bc d3 ff ff       	call   c00037c0 <dir_read>
c0006404:	85 c0                	test   eax,eax
c0006406:	0f 84 4f ff ff ff    	je     c000635b <f_unlink+0x8e>
c000640c:	83 f8 04             	cmp    eax,0x4
c000640f:	75 22                	jne    c0006433 <f_unlink+0x166>
c0006411:	eb 87                	jmp    c000639a <f_unlink+0xcd>
c0006413:	85 f6                	test   esi,esi
c0006415:	75 0b                	jne    c0006422 <f_unlink+0x155>
c0006417:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000641b:	e8 3d df ff ff       	call   c000435d <sync_fs>
c0006420:	eb 11                	jmp    c0006433 <f_unlink+0x166>
c0006422:	31 c9                	xor    ecx,ecx
c0006424:	89 f2                	mov    edx,esi
c0006426:	8d 44 24 20          	lea    eax,[esp+0x20]
c000642a:	e8 78 ce ff ff       	call   c00032a7 <remove_chain>
c000642f:	85 c0                	test   eax,eax
c0006431:	74 e4                	je     c0006417 <f_unlink+0x14a>
c0006433:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006437:	83 ec 0c             	sub    esp,0xc
c000643a:	53                   	push   ebx
c000643b:	e8 5d 1e 00 00       	call   c000829d <ff_memfree>
c0006440:	83 c4 10             	add    esp,0x10
c0006443:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006447:	81 c4 e4 00 00 00    	add    esp,0xe4
c000644d:	5b                   	pop    ebx
c000644e:	5e                   	pop    esi
c000644f:	c3                   	ret    

c0006450 <f_mkdir>:
c0006450:	57                   	push   edi
c0006451:	b9 02 00 00 00       	mov    ecx,0x2
c0006456:	56                   	push   esi
c0006457:	53                   	push   ebx
c0006458:	83 c4 80             	add    esp,0xffffff80
c000645b:	8d 54 24 08          	lea    edx,[esp+0x8]
c000645f:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006466:	e8 79 c0 ff ff       	call   c00024e4 <mount_volume>
c000646b:	89 c3                	mov    ebx,eax
c000646d:	85 c0                	test   eax,eax
c000646f:	0f 85 fe 01 00 00    	jne    c0006673 <f_mkdir+0x223>
c0006475:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006479:	bb 11 00 00 00       	mov    ebx,0x11
c000647e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006482:	83 ec 0c             	sub    esp,0xc
c0006485:	68 60 04 00 00       	push   0x460
c000648a:	e8 f8 1d 00 00       	call   c0008287 <ff_memalloc>
c000648f:	83 c4 10             	add    esp,0x10
c0006492:	89 c7                	mov    edi,eax
c0006494:	85 c0                	test   eax,eax
c0006496:	0f 84 d7 01 00 00    	je     c0006673 <f_mkdir+0x223>
c000649c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064a0:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00064a6:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00064a9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064ac:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00064b3:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064b7:	e8 9e e7 ff ff       	call   c0004c5a <follow_path>
c00064bc:	89 c3                	mov    ebx,eax
c00064be:	85 c0                	test   eax,eax
c00064c0:	74 3e                	je     c0006500 <f_mkdir+0xb0>
c00064c2:	83 f8 04             	cmp    eax,0x4
c00064c5:	75 3e                	jne    c0006505 <f_mkdir+0xb5>
c00064c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064cb:	31 d2                	xor    edx,edx
c00064cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064d1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064d5:	e8 ce cb ff ff       	call   c00030a8 <create_chain>
c00064da:	89 c6                	mov    esi,eax
c00064dc:	85 c0                	test   eax,eax
c00064de:	74 0c                	je     c00064ec <f_mkdir+0x9c>
c00064e0:	bb 02 00 00 00       	mov    ebx,0x2
c00064e5:	83 f8 01             	cmp    eax,0x1
c00064e8:	74 07                	je     c00064f1 <f_mkdir+0xa1>
c00064ea:	eb 2a                	jmp    c0006516 <f_mkdir+0xc6>
c00064ec:	bb 07 00 00 00       	mov    ebx,0x7
c00064f1:	31 c9                	xor    ecx,ecx
c00064f3:	89 f2                	mov    edx,esi
c00064f5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064f9:	e8 a9 cd ff ff       	call   c00032a7 <remove_chain>
c00064fe:	eb 05                	jmp    c0006505 <f_mkdir+0xb5>
c0006500:	bb 08 00 00 00       	mov    ebx,0x8
c0006505:	83 ec 0c             	sub    esp,0xc
c0006508:	57                   	push   edi
c0006509:	e8 8f 1d 00 00       	call   c000829d <ff_memfree>
c000650e:	83 c4 10             	add    esp,0x10
c0006511:	e9 5d 01 00 00       	jmp    c0006673 <f_mkdir+0x223>
c0006516:	bb 01 00 00 00       	mov    ebx,0x1
c000651b:	83 f8 ff             	cmp    eax,0xffffffff
c000651e:	74 d1                	je     c00064f1 <f_mkdir+0xa1>
c0006520:	89 f2                	mov    edx,esi
c0006522:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006526:	e8 c4 ce ff ff       	call   c00033ef <dir_clear>
c000652b:	89 c3                	mov    ebx,eax
c000652d:	85 c0                	test   eax,eax
c000652f:	75 c0                	jne    c00064f1 <f_mkdir+0xa1>
c0006531:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006535:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006538:	74 69                	je     c00065a3 <f_mkdir+0x153>
c000653a:	b9 0b 00 00 00       	mov    ecx,0xb
c000653f:	83 c0 54             	add    eax,0x54
c0006542:	ba 20 00 00 00       	mov    edx,0x20
c0006547:	e8 9c b5 ff ff       	call   c0001ae8 <mem_set>
c000654c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006550:	ba 00 00 21 50       	mov    edx,0x50210000
c0006555:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006559:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000655d:	83 c0 6a             	add    eax,0x6a
c0006560:	e8 65 b5 ff ff       	call   c0001aca <st_dword>
c0006565:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006569:	89 f1                	mov    ecx,esi
c000656b:	8d 50 54             	lea    edx,[eax+0x54]
c000656e:	e8 85 e6 ff ff       	call   c0004bf8 <st_clust.isra.1>
c0006573:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006577:	b9 20 00 00 00       	mov    ecx,0x20
c000657c:	8d 50 54             	lea    edx,[eax+0x54]
c000657f:	83 c0 74             	add    eax,0x74
c0006582:	e8 4c b5 ff ff       	call   c0001ad3 <mem_cpy>
c0006587:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000658b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000658f:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006593:	8d 50 74             	lea    edx,[eax+0x74]
c0006596:	e8 5d e6 ff ff       	call   c0004bf8 <st_clust.isra.1>
c000659b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000659f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00065a3:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065a7:	e8 2f db ff ff       	call   c00040db <dir_register>
c00065ac:	89 c3                	mov    ebx,eax
c00065ae:	85 c0                	test   eax,eax
c00065b0:	0f 85 3b ff ff ff    	jne    c00064f1 <f_mkdir+0xa1>
c00065b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ba:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065bd:	75 74                	jne    c0006633 <f_mkdir+0x1e3>
c00065bf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065c2:	ba 00 00 21 50       	mov    edx,0x50210000
c00065c7:	83 c0 0c             	add    eax,0xc
c00065ca:	e8 fb b4 ff ff       	call   c0001aca <st_dword>
c00065cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d3:	89 f2                	mov    edx,esi
c00065d5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065d8:	83 c0 34             	add    eax,0x34
c00065db:	e8 ea b4 ff ff       	call   c0001aca <st_dword>
c00065e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065e4:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065e8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065eb:	c1 e2 09             	shl    edx,0x9
c00065ee:	83 c0 38             	add    eax,0x38
c00065f1:	e8 d4 b4 ff ff       	call   c0001aca <st_dword>
c00065f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065fa:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065fe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006601:	c1 e2 09             	shl    edx,0x9
c0006604:	83 c0 28             	add    eax,0x28
c0006607:	e8 be b4 ff ff       	call   c0001aca <st_dword>
c000660c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006610:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006613:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006617:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000661a:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000661e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006622:	e8 8b d3 ff ff       	call   c00039b2 <store_xdir>
c0006627:	89 c3                	mov    ebx,eax
c0006629:	85 c0                	test   eax,eax
c000662b:	0f 85 d4 fe ff ff    	jne    c0006505 <f_mkdir+0xb5>
c0006631:	eb 30                	jmp    c0006663 <f_mkdir+0x213>
c0006633:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006637:	ba 00 00 21 50       	mov    edx,0x50210000
c000663c:	83 c0 16             	add    eax,0x16
c000663f:	e8 86 b4 ff ff       	call   c0001aca <st_dword>
c0006644:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006648:	89 f1                	mov    ecx,esi
c000664a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000664e:	e8 a5 e5 ff ff       	call   c0004bf8 <st_clust.isra.1>
c0006653:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006657:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000665b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000665f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006667:	e8 f1 dc ff ff       	call   c000435d <sync_fs>
c000666c:	89 c3                	mov    ebx,eax
c000666e:	e9 92 fe ff ff       	jmp    c0006505 <f_mkdir+0xb5>
c0006673:	83 ec 80             	sub    esp,0xffffff80
c0006676:	89 d8                	mov    eax,ebx
c0006678:	5b                   	pop    ebx
c0006679:	5e                   	pop    esi
c000667a:	5f                   	pop    edi
c000667b:	c3                   	ret    

c000667c <f_rename>:
c000667c:	55                   	push   ebp
c000667d:	57                   	push   edi
c000667e:	56                   	push   esi
c000667f:	53                   	push   ebx
c0006680:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006686:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000668d:	e8 a4 b9 ff ff       	call   c0002036 <get_ldnumber>
c0006692:	b9 02 00 00 00       	mov    ecx,0x2
c0006697:	8d 54 24 14          	lea    edx,[esp+0x14]
c000669b:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00066a2:	e8 3d be ff ff       	call   c00024e4 <mount_volume>
c00066a7:	85 c0                	test   eax,eax
c00066a9:	0f 85 b5 02 00 00    	jne    c0006964 <f_rename+0x2e8>
c00066af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b3:	83 ec 0c             	sub    esp,0xc
c00066b6:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00066ba:	68 60 04 00 00       	push   0x460
c00066bf:	e8 c3 1b 00 00       	call   c0008287 <ff_memalloc>
c00066c4:	83 c4 10             	add    esp,0x10
c00066c7:	89 c3                	mov    ebx,eax
c00066c9:	b8 11 00 00 00       	mov    eax,0x11
c00066ce:	85 db                	test   ebx,ebx
c00066d0:	0f 84 8e 02 00 00    	je     c0006964 <f_rename+0x2e8>
c00066d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066da:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00066e0:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066e6:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066ed:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066f1:	e8 64 e5 ff ff       	call   c0004c5a <follow_path>
c00066f6:	85 c0                	test   eax,eax
c00066f8:	0f 85 52 02 00 00    	jne    c0006950 <f_rename+0x2d4>
c00066fe:	b8 06 00 00 00       	mov    eax,0x6
c0006703:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c000670b:	0f 85 3f 02 00 00    	jne    c0006950 <f_rename+0x2d4>
c0006711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006715:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006718:	0f 85 05 01 00 00    	jne    c0006823 <f_rename+0x1a7>
c000671e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006721:	b9 40 00 00 00       	mov    ecx,0x40
c0006726:	8d 44 24 18          	lea    eax,[esp+0x18]
c000672a:	e8 a4 b3 ff ff       	call   c0001ad3 <mem_cpy>
c000672f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006734:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006738:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000673f:	e8 8f b3 ff ff       	call   c0001ad3 <mem_cpy>
c0006744:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000674b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006752:	e8 03 e5 ff ff       	call   c0004c5a <follow_path>
c0006757:	85 c0                	test   eax,eax
c0006759:	75 29                	jne    c0006784 <f_rename+0x108>
c000675b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000675f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006766:	74 0a                	je     c0006772 <f_rename+0xf6>
c0006768:	b8 08 00 00 00       	mov    eax,0x8
c000676d:	e9 de 01 00 00       	jmp    c0006950 <f_rename+0x2d4>
c0006772:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006779:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006780:	75 e6                	jne    c0006768 <f_rename+0xec>
c0006782:	eb 09                	jmp    c000678d <f_rename+0x111>
c0006784:	83 f8 04             	cmp    eax,0x4
c0006787:	0f 85 c3 01 00 00    	jne    c0006950 <f_rename+0x2d4>
c000678d:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006794:	e8 42 d9 ff ff       	call   c00040db <dir_register>
c0006799:	85 c0                	test   eax,eax
c000679b:	0f 85 af 01 00 00    	jne    c0006950 <f_rename+0x2d4>
c00067a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067a5:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00067a8:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00067ab:	89 c5                	mov    ebp,eax
c00067ad:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00067b0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00067b4:	8d 46 24             	lea    eax,[esi+0x24]
c00067b7:	e8 98 b2 ff ff       	call   c0001a54 <ld_word>
c00067bc:	b9 40 00 00 00       	mov    ecx,0x40
c00067c1:	89 c7                	mov    edi,eax
c00067c3:	8d 54 24 18          	lea    edx,[esp+0x18]
c00067c7:	89 f0                	mov    eax,esi
c00067c9:	e8 05 b3 ff ff       	call   c0001ad3 <mem_cpy>
c00067ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067d2:	89 e9                	mov    ecx,ebp
c00067d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d7:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00067da:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00067de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e5:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067e8:	0f b7 d7             	movzx  edx,di
c00067eb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ee:	83 c0 24             	add    eax,0x24
c00067f1:	e8 d0 b2 ff ff       	call   c0001ac6 <st_word>
c00067f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067fa:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067fd:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006800:	a8 10                	test   al,0x10
c0006802:	75 06                	jne    c000680a <f_rename+0x18e>
c0006804:	83 c8 20             	or     eax,0x20
c0006807:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000680a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006811:	e8 9c d1 ff ff       	call   c00039b2 <store_xdir>
c0006816:	85 c0                	test   eax,eax
c0006818:	0f 84 1c 01 00 00    	je     c000693a <f_rename+0x2be>
c000681e:	e9 2d 01 00 00       	jmp    c0006950 <f_rename+0x2d4>
c0006823:	b9 20 00 00 00       	mov    ecx,0x20
c0006828:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000682f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006833:	e8 9b b2 ff ff       	call   c0001ad3 <mem_cpy>
c0006838:	b9 4c 00 00 00       	mov    ecx,0x4c
c000683d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006841:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006848:	e8 86 b2 ff ff       	call   c0001ad3 <mem_cpy>
c000684d:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006854:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000685b:	e8 fa e3 ff ff       	call   c0004c5a <follow_path>
c0006860:	85 c0                	test   eax,eax
c0006862:	75 27                	jne    c000688b <f_rename+0x20f>
c0006864:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006868:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000686f:	0f 85 f3 fe ff ff    	jne    c0006768 <f_rename+0xec>
c0006875:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000687c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006883:	0f 85 df fe ff ff    	jne    c0006768 <f_rename+0xec>
c0006889:	eb 09                	jmp    c0006894 <f_rename+0x218>
c000688b:	83 f8 04             	cmp    eax,0x4
c000688e:	0f 85 bc 00 00 00    	jne    c0006950 <f_rename+0x2d4>
c0006894:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000689b:	e8 3b d8 ff ff       	call   c00040db <dir_register>
c00068a0:	85 c0                	test   eax,eax
c00068a2:	0f 85 a8 00 00 00    	jne    c0006950 <f_rename+0x2d4>
c00068a8:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00068af:	b9 13 00 00 00       	mov    ecx,0x13
c00068b4:	8d 46 0d             	lea    eax,[esi+0xd]
c00068b7:	8d 54 24 25          	lea    edx,[esp+0x25]
c00068bb:	e8 13 b2 ff ff       	call   c0001ad3 <mem_cpy>
c00068c0:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00068c4:	a8 10                	test   al,0x10
c00068c6:	75 03                	jne    c00068cb <f_rename+0x24f>
c00068c8:	83 c8 20             	or     eax,0x20
c00068cb:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00068ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068d6:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00068da:	74 5e                	je     c000693a <f_rename+0x2be>
c00068dc:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068e3:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068e7:	74 51                	je     c000693a <f_rename+0x2be>
c00068e9:	89 f2                	mov    edx,esi
c00068eb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068ef:	8a 07                	mov    al,BYTE PTR [edi]
c00068f1:	e8 d9 e2 ff ff       	call   c0004bcf <ld_clust.isra.0>
c00068f6:	89 c2                	mov    edx,eax
c00068f8:	89 f8                	mov    eax,edi
c00068fa:	e8 ee b3 ff ff       	call   c0001ced <clst2sect>
c00068ff:	89 c6                	mov    esi,eax
c0006901:	89 d1                	mov    ecx,edx
c0006903:	b8 02 00 00 00       	mov    eax,0x2
c0006908:	09 f2                	or     edx,esi
c000690a:	74 44                	je     c0006950 <f_rename+0x2d4>
c000690c:	89 f2                	mov    edx,esi
c000690e:	89 f8                	mov    eax,edi
c0006910:	e8 1d b9 ff ff       	call   c0002232 <move_window>
c0006915:	85 c0                	test   eax,eax
c0006917:	75 37                	jne    c0006950 <f_rename+0x2d4>
c0006919:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000691d:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006921:	75 17                	jne    c000693a <f_rename+0x2be>
c0006923:	8d 50 74             	lea    edx,[eax+0x74]
c0006926:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c000692d:	e8 c6 e2 ff ff       	call   c0004bf8 <st_clust.isra.1>
c0006932:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006936:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000693a:	8d 44 24 58          	lea    eax,[esp+0x58]
c000693e:	e8 f4 d0 ff ff       	call   c0003a37 <dir_remove>
c0006943:	85 c0                	test   eax,eax
c0006945:	75 09                	jne    c0006950 <f_rename+0x2d4>
c0006947:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000694b:	e8 0d da ff ff       	call   c000435d <sync_fs>
c0006950:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006954:	83 ec 0c             	sub    esp,0xc
c0006957:	53                   	push   ebx
c0006958:	e8 40 19 00 00       	call   c000829d <ff_memfree>
c000695d:	83 c4 10             	add    esp,0x10
c0006960:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006964:	81 c4 fc 00 00 00    	add    esp,0xfc
c000696a:	5b                   	pop    ebx
c000696b:	5e                   	pop    esi
c000696c:	5f                   	pop    edi
c000696d:	5d                   	pop    ebp
c000696e:	c3                   	ret    

c000696f <f_chmod>:
c000696f:	57                   	push   edi
c0006970:	b9 02 00 00 00       	mov    ecx,0x2
c0006975:	56                   	push   esi
c0006976:	53                   	push   ebx
c0006977:	83 ec 60             	sub    esp,0x60
c000697a:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000697e:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006982:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006986:	8d 44 24 70          	lea    eax,[esp+0x70]
c000698a:	e8 55 bb ff ff       	call   c00024e4 <mount_volume>
c000698f:	85 c0                	test   eax,eax
c0006991:	0f 85 af 00 00 00    	jne    c0006a46 <f_chmod+0xd7>
c0006997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000699b:	83 ec 0c             	sub    esp,0xc
c000699e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00069a2:	68 60 04 00 00       	push   0x460
c00069a7:	e8 db 18 00 00       	call   c0008287 <ff_memalloc>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	89 c6                	mov    esi,eax
c00069b1:	b8 11 00 00 00       	mov    eax,0x11
c00069b6:	85 f6                	test   esi,esi
c00069b8:	0f 84 88 00 00 00    	je     c0006a46 <f_chmod+0xd7>
c00069be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069c2:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00069c8:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00069cb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069ce:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069d6:	e8 7f e2 ff ff       	call   c0004c5a <follow_path>
c00069db:	85 c0                	test   eax,eax
c00069dd:	75 53                	jne    c0006a32 <f_chmod+0xc3>
c00069df:	b8 06 00 00 00       	mov    eax,0x6
c00069e4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069e9:	75 47                	jne    c0006a32 <f_chmod+0xc3>
c00069eb:	89 f9                	mov    ecx,edi
c00069ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069f1:	83 e1 27             	and    ecx,0x27
c00069f4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069f7:	75 1d                	jne    c0006a16 <f_chmod+0xa7>
c00069f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fc:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069ff:	21 cb                	and    ebx,ecx
c0006a01:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006a04:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006a07:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a0b:	e8 a2 cf ff ff       	call   c00039b2 <store_xdir>
c0006a10:	85 c0                	test   eax,eax
c0006a12:	75 1e                	jne    c0006a32 <f_chmod+0xc3>
c0006a14:	eb 13                	jmp    c0006a29 <f_chmod+0xba>
c0006a16:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006a1a:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a1d:	21 cb                	and    ebx,ecx
c0006a1f:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a22:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006a25:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a2d:	e8 2b d9 ff ff       	call   c000435d <sync_fs>
c0006a32:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a36:	83 ec 0c             	sub    esp,0xc
c0006a39:	56                   	push   esi
c0006a3a:	e8 5e 18 00 00       	call   c000829d <ff_memfree>
c0006a3f:	83 c4 10             	add    esp,0x10
c0006a42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a46:	83 c4 60             	add    esp,0x60
c0006a49:	5b                   	pop    ebx
c0006a4a:	5e                   	pop    esi
c0006a4b:	5f                   	pop    edi
c0006a4c:	c3                   	ret    

c0006a4d <f_utime>:
c0006a4d:	56                   	push   esi
c0006a4e:	b9 02 00 00 00       	mov    ecx,0x2
c0006a53:	53                   	push   ebx
c0006a54:	83 ec 64             	sub    esp,0x64
c0006a57:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a5b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a5f:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a63:	e8 7c ba ff ff       	call   c00024e4 <mount_volume>
c0006a68:	85 c0                	test   eax,eax
c0006a6a:	0f 85 b5 00 00 00    	jne    c0006b25 <f_utime+0xd8>
c0006a70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a74:	83 ec 0c             	sub    esp,0xc
c0006a77:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a7b:	68 60 04 00 00       	push   0x460
c0006a80:	e8 02 18 00 00       	call   c0008287 <ff_memalloc>
c0006a85:	83 c4 10             	add    esp,0x10
c0006a88:	89 c3                	mov    ebx,eax
c0006a8a:	b8 11 00 00 00       	mov    eax,0x11
c0006a8f:	85 db                	test   ebx,ebx
c0006a91:	0f 84 8e 00 00 00    	je     c0006b25 <f_utime+0xd8>
c0006a97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a9b:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006aa1:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006aa4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006aa7:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006aab:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aaf:	e8 a6 e1 ff ff       	call   c0004c5a <follow_path>
c0006ab4:	85 c0                	test   eax,eax
c0006ab6:	75 59                	jne    c0006b11 <f_utime+0xc4>
c0006ab8:	b8 06 00 00 00       	mov    eax,0x6
c0006abd:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ac2:	75 4d                	jne    c0006b11 <f_utime+0xc4>
c0006ac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac8:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006acc:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ad0:	c1 e2 10             	shl    edx,0x10
c0006ad3:	09 ca                	or     edx,ecx
c0006ad5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ad8:	75 1a                	jne    c0006af4 <f_utime+0xa7>
c0006ada:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006add:	83 c0 0c             	add    eax,0xc
c0006ae0:	e8 e5 af ff ff       	call   c0001aca <st_dword>
c0006ae5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ae9:	e8 c4 ce ff ff       	call   c00039b2 <store_xdir>
c0006aee:	85 c0                	test   eax,eax
c0006af0:	75 1f                	jne    c0006b11 <f_utime+0xc4>
c0006af2:	eb 14                	jmp    c0006b08 <f_utime+0xbb>
c0006af4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006af8:	83 c0 16             	add    eax,0x16
c0006afb:	e8 ca af ff ff       	call   c0001aca <st_dword>
c0006b00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b04:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b0c:	e8 4c d8 ff ff       	call   c000435d <sync_fs>
c0006b11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b15:	83 ec 0c             	sub    esp,0xc
c0006b18:	53                   	push   ebx
c0006b19:	e8 7f 17 00 00       	call   c000829d <ff_memfree>
c0006b1e:	83 c4 10             	add    esp,0x10
c0006b21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b25:	83 c4 64             	add    esp,0x64
c0006b28:	5b                   	pop    ebx
c0006b29:	5e                   	pop    esi
c0006b2a:	c3                   	ret    

c0006b2b <f_getlabel>:
c0006b2b:	55                   	push   ebp
c0006b2c:	31 c9                	xor    ecx,ecx
c0006b2e:	57                   	push   edi
c0006b2f:	56                   	push   esi
c0006b30:	53                   	push   ebx
c0006b31:	83 ec 6c             	sub    esp,0x6c
c0006b34:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b38:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006b3f:	e8 a0 b9 ff ff       	call   c00024e4 <mount_volume>
c0006b44:	89 c6                	mov    esi,eax
c0006b46:	85 c0                	test   eax,eax
c0006b48:	0f 85 c1 01 00 00    	jne    c0006d0f <f_getlabel+0x1e4>
c0006b4e:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b56:	0f 84 5f 01 00 00    	je     c0006cbb <f_getlabel+0x190>
c0006b5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b60:	31 d2                	xor    edx,edx
c0006b62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b66:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b6e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b72:	e8 39 c4 ff ff       	call   c0002fb0 <dir_sdi>
c0006b77:	85 c0                	test   eax,eax
c0006b79:	0f 85 2d 01 00 00    	jne    c0006cac <f_getlabel+0x181>
c0006b7f:	ba 01 00 00 00       	mov    edx,0x1
c0006b84:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b88:	e8 33 cc ff ff       	call   c00037c0 <dir_read>
c0006b8d:	85 c0                	test   eax,eax
c0006b8f:	0f 85 17 01 00 00    	jne    c0006cac <f_getlabel+0x181>
c0006b95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b99:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b9c:	74 09                	je     c0006ba7 <f_getlabel+0x7c>
c0006b9e:	31 db                	xor    ebx,ebx
c0006ba0:	31 c9                	xor    ecx,ecx
c0006ba2:	e9 c8 00 00 00       	jmp    c0006c6f <f_getlabel+0x144>
c0006ba7:	31 ed                	xor    ebp,ebp
c0006ba9:	31 db                	xor    ebx,ebx
c0006bab:	31 ff                	xor    edi,edi
c0006bad:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bb1:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006bb5:	39 fa                	cmp    edx,edi
c0006bb7:	76 4b                	jbe    c0006c04 <f_getlabel+0xd9>
c0006bb9:	47                   	inc    edi
c0006bba:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006bbd:	01 d0                	add    eax,edx
c0006bbf:	e8 90 ae ff ff       	call   c0001a54 <ld_word>
c0006bc4:	66 85 ed             	test   bp,bp
c0006bc7:	75 0d                	jne    c0006bd6 <f_getlabel+0xab>
c0006bc9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006bcf:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006bd4:	76 28                	jbe    c0006bfe <f_getlabel+0xd3>
c0006bd6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bdd:	89 e9                	mov    ecx,ebp
c0006bdf:	01 da                	add    edx,ebx
c0006be1:	c1 e1 10             	shl    ecx,0x10
c0006be4:	0f b7 c0             	movzx  eax,ax
c0006be7:	09 c8                	or     eax,ecx
c0006be9:	b9 04 00 00 00       	mov    ecx,0x4
c0006bee:	e8 01 b0 ff ff       	call   c0001bf4 <put_utf>
c0006bf3:	84 c0                	test   al,al
c0006bf5:	74 0b                	je     c0006c02 <f_getlabel+0xd7>
c0006bf7:	0f b6 c0             	movzx  eax,al
c0006bfa:	01 c3                	add    ebx,eax
c0006bfc:	31 c0                	xor    eax,eax
c0006bfe:	89 c5                	mov    ebp,eax
c0006c00:	eb ab                	jmp    c0006bad <f_getlabel+0x82>
c0006c02:	31 db                	xor    ebx,ebx
c0006c04:	66 85 ed             	test   bp,bp
c0006c07:	74 02                	je     c0006c0b <f_getlabel+0xe0>
c0006c09:	31 db                	xor    ebx,ebx
c0006c0b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c12:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006c16:	e9 a0 00 00 00       	jmp    c0006cbb <f_getlabel+0x190>
c0006c1b:	83 ff 0b             	cmp    edi,0xb
c0006c1e:	74 11                	je     c0006c31 <f_getlabel+0x106>
c0006c20:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006c25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c29:	8d 79 02             	lea    edi,[ecx+0x2]
c0006c2c:	c1 e0 08             	shl    eax,0x8
c0006c2f:	09 c2                	or     edx,eax
c0006c31:	0f b7 d2             	movzx  edx,dx
c0006c34:	50                   	push   eax
c0006c35:	50                   	push   eax
c0006c36:	68 b5 01 00 00       	push   0x1b5
c0006c3b:	52                   	push   edx
c0006c3c:	e8 03 17 00 00       	call   c0008344 <ff_oem2uni>
c0006c41:	83 c4 10             	add    esp,0x10
c0006c44:	66 85 c0             	test   ax,ax
c0006c47:	74 46                	je     c0006c8f <f_getlabel+0x164>
c0006c49:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c50:	0f b7 c0             	movzx  eax,ax
c0006c53:	01 da                	add    edx,ebx
c0006c55:	b9 04 00 00 00       	mov    ecx,0x4
c0006c5a:	e8 95 af ff ff       	call   c0001bf4 <put_utf>
c0006c5f:	84 c0                	test   al,al
c0006c61:	74 2c                	je     c0006c8f <f_getlabel+0x164>
c0006c63:	0f b6 c0             	movzx  eax,al
c0006c66:	01 c3                	add    ebx,eax
c0006c68:	83 ff 0b             	cmp    edi,0xb
c0006c6b:	74 24                	je     c0006c91 <f_getlabel+0x166>
c0006c6d:	89 f9                	mov    ecx,edi
c0006c6f:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c73:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c76:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c7b:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c84:	e8 9f ae ff ff       	call   c0001b28 <dbc_1st>
c0006c89:	85 c0                	test   eax,eax
c0006c8b:	74 a4                	je     c0006c31 <f_getlabel+0x106>
c0006c8d:	eb 8c                	jmp    c0006c1b <f_getlabel+0xf0>
c0006c8f:	31 db                	xor    ebx,ebx
c0006c91:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c98:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c9b:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006ca2:	74 17                	je     c0006cbb <f_getlabel+0x190>
c0006ca4:	4b                   	dec    ebx
c0006ca5:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006ca8:	74 ee                	je     c0006c98 <f_getlabel+0x16d>
c0006caa:	eb 0f                	jmp    c0006cbb <f_getlabel+0x190>
c0006cac:	83 f8 04             	cmp    eax,0x4
c0006caf:	75 5c                	jne    c0006d0d <f_getlabel+0x1e2>
c0006cb1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006cb8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006cbb:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006cc3:	74 4a                	je     c0006d0f <f_getlabel+0x1e4>
c0006cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cc9:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ccc:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ccf:	e8 5e b5 ff ff       	call   c0002232 <move_window>
c0006cd4:	89 c6                	mov    esi,eax
c0006cd6:	85 c0                	test   eax,eax
c0006cd8:	75 35                	jne    c0006d0f <f_getlabel+0x1e4>
c0006cda:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006cde:	b8 43 00 00 00       	mov    eax,0x43
c0006ce3:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ce5:	80 f9 03             	cmp    cl,0x3
c0006ce8:	74 0f                	je     c0006cf9 <f_getlabel+0x1ce>
c0006cea:	31 c0                	xor    eax,eax
c0006cec:	80 f9 04             	cmp    cl,0x4
c0006cef:	0f 94 c0             	sete   al
c0006cf2:	48                   	dec    eax
c0006cf3:	83 e0 c3             	and    eax,0xffffffc3
c0006cf6:	83 c0 64             	add    eax,0x64
c0006cf9:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cfd:	e8 5f ad ff ff       	call   c0001a61 <ld_dword>
c0006d02:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006d09:	89 07                	mov    DWORD PTR [edi],eax
c0006d0b:	eb 02                	jmp    c0006d0f <f_getlabel+0x1e4>
c0006d0d:	89 c6                	mov    esi,eax
c0006d0f:	83 c4 6c             	add    esp,0x6c
c0006d12:	89 f0                	mov    eax,esi
c0006d14:	5b                   	pop    ebx
c0006d15:	5e                   	pop    esi
c0006d16:	5f                   	pop    edi
c0006d17:	5d                   	pop    ebp
c0006d18:	c3                   	ret    

c0006d19 <f_setlabel>:
c0006d19:	56                   	push   esi
c0006d1a:	b9 02 00 00 00       	mov    ecx,0x2
c0006d1f:	53                   	push   ebx
c0006d20:	83 ec 74             	sub    esp,0x74
c0006d23:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006d27:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d2e:	e8 b1 b7 ff ff       	call   c00024e4 <mount_volume>
c0006d33:	89 c6                	mov    esi,eax
c0006d35:	85 c0                	test   eax,eax
c0006d37:	0f 85 41 02 00 00    	jne    c0006f7e <f_setlabel+0x265>
c0006d3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d41:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d44:	0f 85 8e 00 00 00    	jne    c0006dd8 <f_setlabel+0xbf>
c0006d4a:	b9 16 00 00 00       	mov    ecx,0x16
c0006d4f:	31 d2                	xor    edx,edx
c0006d51:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d55:	31 db                	xor    ebx,ebx
c0006d57:	e8 8c ad ff ff       	call   c0001ae8 <mem_set>
c0006d5c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d63:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d66:	0f 86 0a 01 00 00    	jbe    c0006e76 <f_setlabel+0x15d>
c0006d6c:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d73:	e8 b6 ad ff ff       	call   c0001b2e <tchar2uni>
c0006d78:	89 c6                	mov    esi,eax
c0006d7a:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d7f:	76 2a                	jbe    c0006dab <f_setlabel+0x92>
c0006d81:	83 f8 ff             	cmp    eax,0xffffffff
c0006d84:	74 05                	je     c0006d8b <f_setlabel+0x72>
c0006d86:	83 fb 09             	cmp    ebx,0x9
c0006d89:	76 0a                	jbe    c0006d95 <f_setlabel+0x7c>
c0006d8b:	be 06 00 00 00       	mov    esi,0x6
c0006d90:	e9 e9 01 00 00       	jmp    c0006f7e <f_setlabel+0x265>
c0006d95:	89 c2                	mov    edx,eax
c0006d97:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d9b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d9e:	c1 ea 10             	shr    edx,0x10
c0006da1:	01 c8                	add    eax,ecx
c0006da3:	43                   	inc    ebx
c0006da4:	e8 1d ad ff ff       	call   c0001ac6 <st_word>
c0006da9:	eb 04                	jmp    c0006daf <f_setlabel+0x96>
c0006dab:	85 c0                	test   eax,eax
c0006dad:	74 dc                	je     c0006d8b <f_setlabel+0x72>
c0006daf:	89 f2                	mov    edx,esi
c0006db1:	b8 37 5d 02 c0       	mov    eax,0xc0025d37
c0006db6:	e8 5b ad ff ff       	call   c0001b16 <chk_chr>
c0006dbb:	85 c0                	test   eax,eax
c0006dbd:	75 cc                	jne    c0006d8b <f_setlabel+0x72>
c0006dbf:	83 fb 0a             	cmp    ebx,0xa
c0006dc2:	77 c7                	ja     c0006d8b <f_setlabel+0x72>
c0006dc4:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006dc7:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006dcb:	0f b7 d6             	movzx  edx,si
c0006dce:	01 c8                	add    eax,ecx
c0006dd0:	43                   	inc    ebx
c0006dd1:	e8 f0 ac ff ff       	call   c0001ac6 <st_word>
c0006dd6:	eb 84                	jmp    c0006d5c <f_setlabel+0x43>
c0006dd8:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ddd:	ba 20 00 00 00       	mov    edx,0x20
c0006de2:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006de6:	31 db                	xor    ebx,ebx
c0006de8:	e8 fb ac ff ff       	call   c0001ae8 <mem_set>
c0006ded:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006df4:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006df7:	76 60                	jbe    c0006e59 <f_setlabel+0x140>
c0006df9:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e00:	e8 29 ad ff ff       	call   c0001b2e <tchar2uni>
c0006e05:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e0a:	0f 87 7b ff ff ff    	ja     c0006d8b <f_setlabel+0x72>
c0006e10:	83 ec 0c             	sub    esp,0xc
c0006e13:	50                   	push   eax
c0006e14:	e8 97 15 00 00       	call   c00083b0 <ff_wtoupper>
c0006e19:	5a                   	pop    edx
c0006e1a:	59                   	pop    ecx
c0006e1b:	68 b5 01 00 00       	push   0x1b5
c0006e20:	50                   	push   eax
c0006e21:	e8 8e 14 00 00       	call   c00082b4 <ff_uni2oem>
c0006e26:	83 c4 10             	add    esp,0x10
c0006e29:	89 c6                	mov    esi,eax
c0006e2b:	66 85 c0             	test   ax,ax
c0006e2e:	0f 84 57 ff ff ff    	je     c0006d8b <f_setlabel+0x72>
c0006e34:	0f b7 d0             	movzx  edx,ax
c0006e37:	b8 30 5d 02 c0       	mov    eax,0xc0025d30
c0006e3c:	e8 d5 ac ff ff       	call   c0001b16 <chk_chr>
c0006e41:	85 c0                	test   eax,eax
c0006e43:	0f 85 42 ff ff ff    	jne    c0006d8b <f_setlabel+0x72>
c0006e49:	66 81 fe ff 00       	cmp    si,0xff
c0006e4e:	0f 87 14 01 00 00    	ja     c0006f68 <f_setlabel+0x24f>
c0006e54:	e9 fa 00 00 00       	jmp    c0006f53 <f_setlabel+0x23a>
c0006e59:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e5e:	0f 84 27 ff ff ff    	je     c0006d8b <f_setlabel+0x72>
c0006e64:	85 db                	test   ebx,ebx
c0006e66:	74 0e                	je     c0006e76 <f_setlabel+0x15d>
c0006e68:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e6b:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e70:	75 04                	jne    c0006e76 <f_setlabel+0x15d>
c0006e72:	89 c3                	mov    ebx,eax
c0006e74:	eb ee                	jmp    c0006e64 <f_setlabel+0x14b>
c0006e76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e7a:	31 d2                	xor    edx,edx
c0006e7c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e80:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e88:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e8c:	e8 1f c1 ff ff       	call   c0002fb0 <dir_sdi>
c0006e91:	89 c6                	mov    esi,eax
c0006e93:	85 c0                	test   eax,eax
c0006e95:	0f 85 e3 00 00 00    	jne    c0006f7e <f_setlabel+0x265>
c0006e9b:	ba 01 00 00 00       	mov    edx,0x1
c0006ea0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ea4:	e8 17 c9 ff ff       	call   c00037c0 <dir_read>
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 21                	jne    c0006ece <f_setlabel+0x1b5>
c0006ead:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006eb1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eb5:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006eb8:	74 5d                	je     c0006f17 <f_setlabel+0x1fe>
c0006eba:	85 db                	test   ebx,ebx
c0006ebc:	74 0b                	je     c0006ec9 <f_setlabel+0x1b0>
c0006ebe:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ec3:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ec7:	eb 70                	jmp    c0006f39 <f_setlabel+0x220>
c0006ec9:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006ecc:	eb 70                	jmp    c0006f3e <f_setlabel+0x225>
c0006ece:	83 f8 04             	cmp    eax,0x4
c0006ed1:	75 7c                	jne    c0006f4f <f_setlabel+0x236>
c0006ed3:	85 db                	test   ebx,ebx
c0006ed5:	0f 84 a3 00 00 00    	je     c0006f7e <f_setlabel+0x265>
c0006edb:	ba 01 00 00 00       	mov    edx,0x1
c0006ee0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ee4:	e8 51 ca ff ff       	call   c000393a <dir_alloc>
c0006ee9:	89 c6                	mov    esi,eax
c0006eeb:	85 c0                	test   eax,eax
c0006eed:	0f 85 8b 00 00 00    	jne    c0006f7e <f_setlabel+0x265>
c0006ef3:	31 d2                	xor    edx,edx
c0006ef5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ef9:	b9 20 00 00 00       	mov    ecx,0x20
c0006efe:	e8 e5 ab ff ff       	call   c0001ae8 <mem_set>
c0006f03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f07:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f0a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f0e:	75 18                	jne    c0006f28 <f_setlabel+0x20f>
c0006f10:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006f13:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f17:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006f1a:	b9 16 00 00 00       	mov    ecx,0x16
c0006f1f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f23:	83 c0 02             	add    eax,0x2
c0006f26:	eb 9b                	jmp    c0006ec3 <f_setlabel+0x1aa>
c0006f28:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006f2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0006f31:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006f35:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f39:	e8 95 ab ff ff       	call   c0001ad3 <mem_cpy>
c0006f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f42:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4a:	e8 0e d4 ff ff       	call   c000435d <sync_fs>
c0006f4f:	89 c6                	mov    esi,eax
c0006f51:	eb 2b                	jmp    c0006f7e <f_setlabel+0x265>
c0006f53:	83 fb 0a             	cmp    ebx,0xa
c0006f56:	0f 87 2f fe ff ff    	ja     c0006d8b <f_setlabel+0x72>
c0006f5c:	89 f0                	mov    eax,esi
c0006f5e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f62:	43                   	inc    ebx
c0006f63:	e9 85 fe ff ff       	jmp    c0006ded <f_setlabel+0xd4>
c0006f68:	83 fb 09             	cmp    ebx,0x9
c0006f6b:	0f 87 1a fe ff ff    	ja     c0006d8b <f_setlabel+0x72>
c0006f71:	89 f0                	mov    eax,esi
c0006f73:	66 c1 e8 08          	shr    ax,0x8
c0006f77:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f7b:	43                   	inc    ebx
c0006f7c:	eb de                	jmp    c0006f5c <f_setlabel+0x243>
c0006f7e:	89 f0                	mov    eax,esi
c0006f80:	83 c4 74             	add    esp,0x74
c0006f83:	5b                   	pop    ebx
c0006f84:	5e                   	pop    esi
c0006f85:	c3                   	ret    

c0006f86 <f_forward>:
c0006f86:	55                   	push   ebp
c0006f87:	57                   	push   edi
c0006f88:	56                   	push   esi
c0006f89:	53                   	push   ebx
c0006f8a:	83 ec 2c             	sub    esp,0x2c
c0006f8d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f91:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f95:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f9b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f9f:	89 d8                	mov    eax,ebx
c0006fa1:	e8 b1 b1 ff ff       	call   c0002157 <validate>
c0006fa6:	89 c5                	mov    ebp,eax
c0006fa8:	85 c0                	test   eax,eax
c0006faa:	0f 85 aa 01 00 00    	jne    c000715a <f_forward+0x1d4>
c0006fb0:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006fb4:	85 ed                	test   ebp,ebp
c0006fb6:	0f 85 9e 01 00 00    	jne    c000715a <f_forward+0x1d4>
c0006fbc:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006fc0:	0f 84 8f 01 00 00    	je     c0007155 <f_forward+0x1cf>
c0006fc6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006fc9:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006fcc:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006fcf:	bf 00 00 00 00       	mov    edi,0x0
c0006fd4:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006fd7:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006fdb:	89 d1                	mov    ecx,edx
c0006fdd:	19 f9                	sbb    ecx,edi
c0006fdf:	0f 83 cf 00 00 00    	jae    c00070b4 <f_forward+0x12e>
c0006fe5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fe9:	e9 c6 00 00 00       	jmp    c00070b4 <f_forward+0x12e>
c0006fee:	50                   	push   eax
c0006fef:	50                   	push   eax
c0006ff0:	6a 00                	push   0x0
c0006ff2:	6a 00                	push   0x0
c0006ff4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006ff8:	83 c4 10             	add    esp,0x10
c0006ffb:	85 c0                	test   eax,eax
c0006ffd:	0f 84 57 01 00 00    	je     c000715a <f_forward+0x1d4>
c0007003:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007006:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000700a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000700d:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007011:	89 d7                	mov    edi,edx
c0007013:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007016:	89 c6                	mov    esi,eax
c0007018:	0f ac fe 09          	shrd   esi,edi,0x9
c000701c:	21 ce                	and    esi,ecx
c000701e:	89 c1                	mov    ecx,eax
c0007020:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007026:	0f 84 98 00 00 00    	je     c00070c4 <f_forward+0x13e>
c000702c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007030:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007033:	89 c8                	mov    eax,ecx
c0007035:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007039:	e8 af ac ff ff       	call   c0001ced <clst2sect>
c000703e:	89 d7                	mov    edi,edx
c0007040:	09 c7                	or     edi,eax
c0007042:	0f 84 9e 00 00 00    	je     c00070e6 <f_forward+0x160>
c0007048:	31 ff                	xor    edi,edi
c000704a:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000704d:	01 c6                	add    esi,eax
c000704f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007053:	11 d7                	adc    edi,edx
c0007055:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007058:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000705b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000705f:	39 fa                	cmp    edx,edi
c0007061:	0f 85 a2 00 00 00    	jne    c0007109 <f_forward+0x183>
c0007067:	39 f0                	cmp    eax,esi
c0007069:	0f 85 9a 00 00 00    	jne    c0007109 <f_forward+0x183>
c000706f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007072:	ba 00 02 00 00       	mov    edx,0x200
c0007077:	25 ff 01 00 00       	and    eax,0x1ff
c000707c:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007080:	29 c2                	sub    edx,eax
c0007082:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007085:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007088:	39 d1                	cmp    ecx,edx
c000708a:	76 02                	jbe    c000708e <f_forward+0x108>
c000708c:	89 d1                	mov    ecx,edx
c000708e:	8d 73 50             	lea    esi,[ebx+0x50]
c0007091:	52                   	push   edx
c0007092:	01 c6                	add    esi,eax
c0007094:	52                   	push   edx
c0007095:	51                   	push   ecx
c0007096:	56                   	push   esi
c0007097:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000709b:	83 c4 10             	add    esp,0x10
c000709e:	85 c0                	test   eax,eax
c00070a0:	74 44                	je     c00070e6 <f_forward+0x160>
c00070a2:	31 ff                	xor    edi,edi
c00070a4:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00070a7:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00070aa:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00070ae:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00070b2:	01 07                	add    DWORD PTR [edi],eax
c00070b4:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00070b9:	0f 85 2f ff ff ff    	jne    c0006fee <f_forward+0x68>
c00070bf:	e9 96 00 00 00       	jmp    c000715a <f_forward+0x1d4>
c00070c4:	85 f6                	test   esi,esi
c00070c6:	0f 85 60 ff ff ff    	jne    c000702c <f_forward+0xa6>
c00070cc:	89 d7                	mov    edi,edx
c00070ce:	09 c7                	or     edi,eax
c00070d0:	75 05                	jne    c00070d7 <f_forward+0x151>
c00070d2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00070d5:	eb 0a                	jmp    c00070e1 <f_forward+0x15b>
c00070d7:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00070da:	89 d8                	mov    eax,ebx
c00070dc:	e8 d9 bc ff ff       	call   c0002dba <get_fat>
c00070e1:	83 f8 01             	cmp    eax,0x1
c00070e4:	77 0b                	ja     c00070f1 <f_forward+0x16b>
c00070e6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070ea:	bd 02 00 00 00       	mov    ebp,0x2
c00070ef:	eb 69                	jmp    c000715a <f_forward+0x1d4>
c00070f1:	83 f8 ff             	cmp    eax,0xffffffff
c00070f4:	75 0b                	jne    c0007101 <f_forward+0x17b>
c00070f6:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070fa:	bd 01 00 00 00       	mov    ebp,0x1
c00070ff:	eb 59                	jmp    c000715a <f_forward+0x1d4>
c0007101:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007104:	e9 23 ff ff ff       	jmp    c000702c <f_forward+0xa6>
c0007109:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000710d:	79 20                	jns    c000712f <f_forward+0x1a9>
c000710f:	83 ec 0c             	sub    esp,0xc
c0007112:	6a 01                	push   0x1
c0007114:	52                   	push   edx
c0007115:	50                   	push   eax
c0007116:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000711a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000711e:	50                   	push   eax
c000711f:	e8 fb a8 ff ff       	call   c0001a1f <disk_write>
c0007124:	83 c4 20             	add    esp,0x20
c0007127:	85 c0                	test   eax,eax
c0007129:	75 cb                	jne    c00070f6 <f_forward+0x170>
c000712b:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000712f:	83 ec 0c             	sub    esp,0xc
c0007132:	6a 01                	push   0x1
c0007134:	57                   	push   edi
c0007135:	56                   	push   esi
c0007136:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000713a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000713e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007142:	50                   	push   eax
c0007143:	e8 c1 a8 ff ff       	call   c0001a09 <disk_read>
c0007148:	83 c4 20             	add    esp,0x20
c000714b:	85 c0                	test   eax,eax
c000714d:	0f 84 1c ff ff ff    	je     c000706f <f_forward+0xe9>
c0007153:	eb a1                	jmp    c00070f6 <f_forward+0x170>
c0007155:	bd 07 00 00 00       	mov    ebp,0x7
c000715a:	83 c4 2c             	add    esp,0x2c
c000715d:	89 e8                	mov    eax,ebp
c000715f:	5b                   	pop    ebx
c0007160:	5e                   	pop    esi
c0007161:	5f                   	pop    edi
c0007162:	5d                   	pop    ebp
c0007163:	c3                   	ret    

c0007164 <f_mkfs>:
c0007164:	55                   	push   ebp
c0007165:	57                   	push   edi
c0007166:	56                   	push   esi
c0007167:	53                   	push   ebx
c0007168:	bb 0b 00 00 00       	mov    ebx,0xb
c000716d:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007173:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000717a:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007181:	e8 b0 ae ff ff       	call   c0002036 <get_ldnumber>
c0007186:	85 c0                	test   eax,eax
c0007188:	0f 88 ec 10 00 00    	js     c000827a <f_mkfs+0x1116>
c000718e:	8b 14 85 a0 a3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5c60]
c0007195:	85 d2                	test   edx,edx
c0007197:	74 03                	je     c000719c <f_mkfs+0x38>
c0007199:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000719c:	85 f6                	test   esi,esi
c000719e:	75 05                	jne    c00071a5 <f_mkfs+0x41>
c00071a0:	be 20 5d 02 c0       	mov    esi,0xc0025d20
c00071a5:	83 ec 0c             	sub    esp,0xc
c00071a8:	0f b6 c0             	movzx  eax,al
c00071ab:	bb 03 00 00 00       	mov    ebx,0x3
c00071b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00071b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071b8:	e8 49 a8 ff ff       	call   c0001a06 <disk_initialize>
c00071bd:	83 c4 10             	add    esp,0x10
c00071c0:	a8 01                	test   al,0x1
c00071c2:	0f 85 b2 10 00 00    	jne    c000827a <f_mkfs+0x1116>
c00071c8:	bb 0a 00 00 00       	mov    ebx,0xa
c00071cd:	a8 04                	test   al,0x4
c00071cf:	0f 85 a5 10 00 00    	jne    c000827a <f_mkfs+0x1116>
c00071d5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00071d8:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00071dc:	85 c0                	test   eax,eax
c00071de:	75 20                	jne    c0007200 <f_mkfs+0x9c>
c00071e0:	51                   	push   ecx
c00071e1:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071e5:	50                   	push   eax
c00071e6:	6a 03                	push   0x3
c00071e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071ec:	e8 44 a8 ff ff       	call   c0001a35 <disk_ioctl>
c00071f1:	83 c4 10             	add    esp,0x10
c00071f4:	85 c0                	test   eax,eax
c00071f6:	74 08                	je     c0007200 <f_mkfs+0x9c>
c00071f8:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007200:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007204:	8d 42 ff             	lea    eax,[edx-0x1]
c0007207:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000720c:	77 04                	ja     c0007212 <f_mkfs+0xae>
c000720e:	85 c2                	test   edx,eax
c0007210:	74 08                	je     c000721a <f_mkfs+0xb6>
c0007212:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000721a:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000721d:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007221:	48                   	dec    eax
c0007222:	3c 01                	cmp    al,0x1
c0007224:	76 05                	jbe    c000722b <f_mkfs+0xc7>
c0007226:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c000722b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000722e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007232:	48                   	dec    eax
c0007233:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007238:	77 07                	ja     c0007241 <f_mkfs+0xdd>
c000723a:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000723f:	74 08                	je     c0007249 <f_mkfs+0xe5>
c0007241:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007249:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000724c:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007252:	77 07                	ja     c000725b <f_mkfs+0xf7>
c0007254:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007257:	85 d8                	test   eax,ebx
c0007259:	74 02                	je     c000725d <f_mkfs+0xf9>
c000725b:	31 db                	xor    ebx,ebx
c000725d:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007268:	77 0a                	ja     c0007274 <f_mkfs+0x110>
c000726a:	bb 11 00 00 00       	mov    ebx,0x11
c000726f:	e9 06 10 00 00       	jmp    c000827a <f_mkfs+0x1116>
c0007274:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000727b:	8b 36                	mov    esi,DWORD PTR [esi]
c000727d:	85 ed                	test   ebp,ebp
c000727f:	75 1e                	jne    c000729f <f_mkfs+0x13b>
c0007281:	83 ec 0c             	sub    esp,0xc
c0007284:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000728b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007290:	50                   	push   eax
c0007291:	e8 f1 0f 00 00       	call   c0008287 <ff_memalloc>
c0007296:	83 c4 10             	add    esp,0x10
c0007299:	89 c5                	mov    ebp,eax
c000729b:	85 c0                	test   eax,eax
c000729d:	74 cb                	je     c000726a <f_mkfs+0x106>
c000729f:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00072a7:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00072af:	52                   	push   edx
c00072b0:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00072b4:	50                   	push   eax
c00072b5:	6a 01                	push   0x1
c00072b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072bb:	e8 75 a7 ff ff       	call   c0001a35 <disk_ioctl>
c00072c0:	83 c4 10             	add    esp,0x10
c00072c3:	85 c0                	test   eax,eax
c00072c5:	0f 85 4a 0f 00 00    	jne    c0008215 <f_mkfs+0x10b1>
c00072cb:	89 f1                	mov    ecx,esi
c00072cd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00072d5:	83 e1 0f             	and    ecx,0xf
c00072d8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072e0:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072e4:	83 e6 08             	and    esi,0x8
c00072e7:	75 56                	jne    c000733f <f_mkfs+0x1db>
c00072e9:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072ed:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072f1:	83 ff 00             	cmp    edi,0x0
c00072f4:	76 20                	jbe    c0007316 <f_mkfs+0x1b2>
c00072f6:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072fb:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007303:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007309:	83 d7 ff             	adc    edi,0xffffffff
c000730c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007310:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007314:	eb 21                	jmp    c0007337 <f_mkfs+0x1d3>
c0007316:	ba 3f 00 00 00       	mov    edx,0x3f
c000731b:	39 f2                	cmp    edx,esi
c000731d:	19 f8                	sbb    eax,edi
c000731f:	73 1e                	jae    c000733f <f_mkfs+0x1db>
c0007321:	83 c6 c1             	add    esi,0xffffffc1
c0007324:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000732c:	83 d7 ff             	adc    edi,0xffffffff
c000732f:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007333:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007337:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000733f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007343:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007347:	89 04 24             	mov    DWORD PTR [esp],eax
c000734a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000734e:	31 c0                	xor    eax,eax
c0007350:	ba 7f 00 00 00       	mov    edx,0x7f
c0007355:	89 c7                	mov    edi,eax
c0007357:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000735a:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000735e:	0f 83 c5 0a 00 00    	jae    c0007e29 <f_mkfs+0xcc5>
c0007364:	89 df                	mov    edi,ebx
c0007366:	c1 ef 09             	shr    edi,0x9
c0007369:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000736d:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007374:	c1 ef 09             	shr    edi,0x9
c0007377:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000737c:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007380:	74 29                	je     c00073ab <f_mkfs+0x247>
c0007382:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007388:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000738d:	0f 97 c2             	seta   dl
c0007390:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007393:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007397:	0f 92 c0             	setb   al
c000739a:	08 c2                	or     dl,al
c000739c:	75 5b                	jne    c00073f9 <f_mkfs+0x295>
c000739e:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00073a2:	83 e0 07             	and    eax,0x7
c00073a5:	3c 04                	cmp    al,0x4
c00073a7:	74 50                	je     c00073f9 <f_mkfs+0x295>
c00073a9:	eb 1b                	jmp    c00073c6 <f_mkfs+0x262>
c00073ab:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00073b0:	0f 87 73 0a 00 00    	ja     c0007e29 <f_mkfs+0xcc5>
c00073b6:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00073bc:	76 08                	jbe    c00073c6 <f_mkfs+0x262>
c00073be:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00073c6:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00073ca:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00073ce:	83 e0 01             	and    eax,0x1
c00073d1:	80 e1 02             	and    cl,0x2
c00073d4:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00073d8:	74 0d                	je     c00073e7 <f_mkfs+0x283>
c00073da:	84 c0                	test   al,al
c00073dc:	0f 84 53 09 00 00    	je     c0007d35 <f_mkfs+0xbd1>
c00073e2:	e9 12 08 00 00       	jmp    c0007bf9 <f_mkfs+0xa95>
c00073e7:	bb 13 00 00 00       	mov    ebx,0x13
c00073ec:	84 c0                	test   al,al
c00073ee:	0f 85 05 08 00 00    	jne    c0007bf9 <f_mkfs+0xa95>
c00073f4:	e9 39 0e 00 00       	jmp    c0008232 <f_mkfs+0x10ce>
c00073f9:	31 c0                	xor    eax,eax
c00073fb:	ba ff 0f 00 00       	mov    edx,0xfff
c0007400:	89 c7                	mov    edi,eax
c0007402:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007405:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007409:	0f 83 1a 0a 00 00    	jae    c0007e29 <f_mkfs+0xcc5>
c000740f:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007415:	77 39                	ja     c0007450 <f_mkfs+0x2ec>
c0007417:	ba ff ff 07 00       	mov    edx,0x7ffff
c000741c:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007424:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007427:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000742b:	73 08                	jae    c0007435 <f_mkfs+0x2d1>
c000742d:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007435:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000743a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000743d:	b8 00 00 00 00       	mov    eax,0x0
c0007442:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007446:	73 08                	jae    c0007450 <f_mkfs+0x2ec>
c0007448:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007454:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007458:	83 c0 20             	add    eax,0x20
c000745b:	83 d2 00             	adc    edx,0x0
c000745e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007462:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007466:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000746a:	31 d2                	xor    edx,edx
c000746c:	31 ff                	xor    edi,edi
c000746e:	52                   	push   edx
c000746f:	89 fb                	mov    ebx,edi
c0007471:	50                   	push   eax
c0007472:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007476:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000747a:	e8 dd be 01 00       	call   c002335c <__udivdi3>
c000747f:	83 c4 10             	add    esp,0x10
c0007482:	c1 e0 02             	shl    eax,0x2
c0007485:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007489:	05 07 02 00 00       	add    eax,0x207
c000748e:	89 f1                	mov    ecx,esi
c0007490:	c1 e8 09             	shr    eax,0x9
c0007493:	83 c1 ff             	add    ecx,0xffffffff
c0007496:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000749a:	83 d3 ff             	adc    ebx,0xffffffff
c000749d:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00074a1:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00074a5:	31 d2                	xor    edx,edx
c00074a7:	01 c8                	add    eax,ecx
c00074a9:	11 da                	adc    edx,ebx
c00074ab:	89 c1                	mov    ecx,eax
c00074ad:	f7 de                	neg    esi
c00074af:	89 d0                	mov    eax,edx
c00074b1:	83 d7 00             	adc    edi,0x0
c00074b4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00074b8:	f7 df                	neg    edi
c00074ba:	21 f1                	and    ecx,esi
c00074bc:	21 f8                	and    eax,edi
c00074be:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00074c2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00074c6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00074ca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00074ce:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00074d2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074d5:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00074d9:	0f ac d0 01          	shrd   eax,edx,0x1
c00074dd:	89 df                	mov    edi,ebx
c00074df:	d1 ea                	shr    edx,1
c00074e1:	39 c1                	cmp    ecx,eax
c00074e3:	19 d7                	sbb    edi,edx
c00074e5:	0f 83 3e 09 00 00    	jae    c0007e29 <f_mkfs+0xcc5>
c00074eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074ef:	31 d2                	xor    edx,edx
c00074f1:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074f9:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007500:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007504:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007508:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c000750c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007510:	83 f8 0f             	cmp    eax,0xf
c0007513:	0f 86 10 09 00 00    	jbe    c0007e29 <f_mkfs+0xcc5>
c0007519:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007521:	0f 87 02 09 00 00    	ja     c0007e29 <f_mkfs+0xcc5>
c0007527:	31 d2                	xor    edx,edx
c0007529:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000752d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007535:	83 c0 07             	add    eax,0x7
c0007538:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007540:	c1 e8 03             	shr    eax,0x3
c0007543:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000754a:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000754e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007552:	c1 e0 09             	shl    eax,0x9
c0007555:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007559:	48                   	dec    eax
c000755a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000755e:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007562:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007566:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000756a:	31 d2                	xor    edx,edx
c000756c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007570:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007577:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000757b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007580:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007584:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007588:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000758c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007590:	31 ff                	xor    edi,edi
c0007592:	31 f6                	xor    esi,esi
c0007594:	31 db                	xor    ebx,ebx
c0007596:	85 ff                	test   edi,edi
c0007598:	74 05                	je     c000759f <f_mkfs+0x43b>
c000759a:	4f                   	dec    edi
c000759b:	74 44                	je     c00075e1 <f_mkfs+0x47d>
c000759d:	eb 4f                	jmp    c00075ee <f_mkfs+0x48a>
c000759f:	83 ec 0c             	sub    esp,0xc
c00075a2:	0f b7 c3             	movzx  eax,bx
c00075a5:	50                   	push   eax
c00075a6:	e8 05 0e 00 00       	call   c00083b0 <ff_wtoupper>
c00075ab:	83 c4 10             	add    esp,0x10
c00075ae:	89 c1                	mov    ecx,eax
c00075b0:	8d 53 01             	lea    edx,[ebx+0x1]
c00075b3:	66 39 c3             	cmp    bx,ax
c00075b6:	75 3e                	jne    c00075f6 <f_mkfs+0x492>
c00075b8:	be 01 00 00 00       	mov    esi,0x1
c00075bd:	89 df                	mov    edi,ebx
c00075bf:	66 01 f7             	add    di,si
c00075c2:	75 07                	jne    c00075cb <f_mkfs+0x467>
c00075c4:	83 fe 7f             	cmp    esi,0x7f
c00075c7:	77 31                	ja     c00075fa <f_mkfs+0x496>
c00075c9:	eb 16                	jmp    c00075e1 <f_mkfs+0x47d>
c00075cb:	83 ec 0c             	sub    esp,0xc
c00075ce:	0f b7 ff             	movzx  edi,di
c00075d1:	57                   	push   edi
c00075d2:	e8 d9 0d 00 00       	call   c00083b0 <ff_wtoupper>
c00075d7:	83 c4 10             	add    esp,0x10
c00075da:	39 c7                	cmp    edi,eax
c00075dc:	75 e6                	jne    c00075c4 <f_mkfs+0x460>
c00075de:	46                   	inc    esi
c00075df:	eb dc                	jmp    c00075bd <f_mkfs+0x459>
c00075e1:	31 c0                	xor    eax,eax
c00075e3:	89 d9                	mov    ecx,ebx
c00075e5:	4e                   	dec    esi
c00075e6:	0f 95 c0             	setne  al
c00075e9:	43                   	inc    ebx
c00075ea:	89 c7                	mov    edi,eax
c00075ec:	eb 14                	jmp    c0007602 <f_mkfs+0x49e>
c00075ee:	89 f1                	mov    ecx,esi
c00075f0:	01 f3                	add    ebx,esi
c00075f2:	31 ff                	xor    edi,edi
c00075f4:	eb 0c                	jmp    c0007602 <f_mkfs+0x49e>
c00075f6:	89 d3                	mov    ebx,edx
c00075f8:	eb 08                	jmp    c0007602 <f_mkfs+0x49e>
c00075fa:	bf 02 00 00 00       	mov    edi,0x2
c00075ff:	83 c9 ff             	or     ecx,0xffffffff
c0007602:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007606:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007609:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000760d:	0f b6 c1             	movzx  eax,cl
c0007610:	e8 3a a9 ff ff       	call   c0001f4f <xsum32>
c0007615:	66 c1 e9 08          	shr    cx,0x8
c0007619:	89 c2                	mov    edx,eax
c000761b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000761e:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007622:	0f b7 c1             	movzx  eax,cx
c0007625:	e8 25 a9 ff ff       	call   c0001f4f <xsum32>
c000762a:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000762f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007633:	66 85 db             	test   bx,bx
c0007636:	74 1f                	je     c0007657 <f_mkfs+0x4f3>
c0007638:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000763b:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007642:	83 c0 02             	add    eax,0x2
c0007645:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000764b:	39 c2                	cmp    edx,eax
c000764d:	74 08                	je     c0007657 <f_mkfs+0x4f3>
c000764f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007652:	e9 3f ff ff ff       	jmp    c0007596 <f_mkfs+0x432>
c0007657:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000765a:	83 ec 0c             	sub    esp,0xc
c000765d:	05 01 02 00 00       	add    eax,0x201
c0007662:	c1 e8 09             	shr    eax,0x9
c0007665:	50                   	push   eax
c0007666:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000766a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000766e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007672:	55                   	push   ebp
c0007673:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007677:	e8 a3 a3 ff ff       	call   c0001a1f <disk_write>
c000767c:	83 c4 20             	add    esp,0x20
c000767f:	85 c0                	test   eax,eax
c0007681:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007684:	0f 85 8b 0b 00 00    	jne    c0008215 <f_mkfs+0x10b1>
c000768a:	89 d0                	mov    eax,edx
c000768c:	31 d2                	xor    edx,edx
c000768e:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007692:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007696:	66 85 db             	test   bx,bx
c0007699:	74 04                	je     c000769f <f_mkfs+0x53b>
c000769b:	31 c0                	xor    eax,eax
c000769d:	eb b0                	jmp    c000764f <f_mkfs+0x4eb>
c000769f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00076a3:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00076a7:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00076ab:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00076b1:	31 d2                	xor    edx,edx
c00076b3:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00076be:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00076c2:	c1 eb 09             	shr    ebx,0x9
c00076c5:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00076cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00076d0:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00076d4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00076d8:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00076dc:	8d 70 01             	lea    esi,[eax+0x1]
c00076df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076e7:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076ee:	31 d2                	xor    edx,edx
c00076f0:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00076f8:	89 c1                	mov    ecx,eax
c00076fa:	89 e8                	mov    eax,ebp
c00076fc:	e8 e7 a3 ff ff       	call   c0001ae8 <mem_set>
c0007701:	31 c0                	xor    eax,eax
c0007703:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007706:	76 10                	jbe    c0007718 <f_mkfs+0x5b4>
c0007708:	83 fe 07             	cmp    esi,0x7
c000770b:	76 0b                	jbe    c0007718 <f_mkfs+0x5b4>
c000770d:	40                   	inc    eax
c000770e:	83 ee 08             	sub    esi,0x8
c0007711:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007716:	eb eb                	jmp    c0007703 <f_mkfs+0x59f>
c0007718:	b2 01                	mov    dl,0x1
c000771a:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000771e:	85 f6                	test   esi,esi
c0007720:	74 0c                	je     c000772e <f_mkfs+0x5ca>
c0007722:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007725:	76 07                	jbe    c000772e <f_mkfs+0x5ca>
c0007727:	08 11                	or     BYTE PTR [ecx],dl
c0007729:	4e                   	dec    esi
c000772a:	d1 e2                	shl    edx,1
c000772c:	eb f0                	jmp    c000771e <f_mkfs+0x5ba>
c000772e:	89 df                	mov    edi,ebx
c0007730:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007734:	76 04                	jbe    c000773a <f_mkfs+0x5d6>
c0007736:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000773a:	83 ec 0c             	sub    esp,0xc
c000773d:	57                   	push   edi
c000773e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007742:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007746:	55                   	push   ebp
c0007747:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000774b:	e8 cf a2 ff ff       	call   c0001a1f <disk_write>
c0007750:	83 c4 20             	add    esp,0x20
c0007753:	85 c0                	test   eax,eax
c0007755:	0f 85 ba 0a 00 00    	jne    c0008215 <f_mkfs+0x10b1>
c000775b:	31 d2                	xor    edx,edx
c000775d:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007761:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007765:	29 fb                	sub    ebx,edi
c0007767:	0f 85 7a ff ff ff    	jne    c00076e7 <f_mkfs+0x583>
c000776d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007771:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007779:	31 f6                	xor    esi,esi
c000777b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000777f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007782:	31 d2                	xor    edx,edx
c0007784:	89 e8                	mov    eax,ebp
c0007786:	e8 5d a3 ff ff       	call   c0001ae8 <mem_set>
c000778b:	31 c9                	xor    ecx,ecx
c000778d:	85 db                	test   ebx,ebx
c000778f:	75 40                	jne    c00077d1 <f_mkfs+0x66d>
c0007791:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007796:	89 e8                	mov    eax,ebp
c0007798:	bb 02 00 00 00       	mov    ebx,0x2
c000779d:	e8 28 a3 ff ff       	call   c0001aca <st_dword>
c00077a2:	8d 45 04             	lea    eax,[ebp+0x4]
c00077a5:	83 ca ff             	or     edx,0xffffffff
c00077a8:	e8 1d a3 ff ff       	call   c0001aca <st_dword>
c00077ad:	b9 08 00 00 00       	mov    ecx,0x8
c00077b2:	eb 1d                	jmp    c00077d1 <f_mkfs+0x66d>
c00077b4:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077b7:	76 3b                	jbe    c00077f4 <f_mkfs+0x690>
c00077b9:	43                   	inc    ebx
c00077ba:	83 fe 01             	cmp    esi,0x1
c00077bd:	89 da                	mov    edx,ebx
c00077bf:	77 03                	ja     c00077c4 <f_mkfs+0x660>
c00077c1:	83 ca ff             	or     edx,0xffffffff
c00077c4:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00077c8:	4e                   	dec    esi
c00077c9:	e8 fc a2 ff ff       	call   c0001aca <st_dword>
c00077ce:	83 c1 04             	add    ecx,0x4
c00077d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00077d5:	85 f6                	test   esi,esi
c00077d7:	75 db                	jne    c00077b4 <f_mkfs+0x650>
c00077d9:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00077de:	77 14                	ja     c00077f4 <f_mkfs+0x690>
c00077e0:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077e4:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077eb:	85 f6                	test   esi,esi
c00077ed:	74 05                	je     c00077f4 <f_mkfs+0x690>
c00077ef:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077f2:	77 dd                	ja     c00077d1 <f_mkfs+0x66d>
c00077f4:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077f8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077fc:	39 cf                	cmp    edi,ecx
c00077fe:	76 02                	jbe    c0007802 <f_mkfs+0x69e>
c0007800:	89 cf                	mov    edi,ecx
c0007802:	83 ec 0c             	sub    esp,0xc
c0007805:	57                   	push   edi
c0007806:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000780a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000780e:	55                   	push   ebp
c000780f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007813:	e8 07 a2 ff ff       	call   c0001a1f <disk_write>
c0007818:	83 c4 20             	add    esp,0x20
c000781b:	85 c0                	test   eax,eax
c000781d:	0f 85 f2 09 00 00    	jne    c0008215 <f_mkfs+0x10b1>
c0007823:	31 d2                	xor    edx,edx
c0007825:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007829:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c000782d:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007831:	0f 85 48 ff ff ff    	jne    c000777f <f_mkfs+0x61b>
c0007837:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000783a:	31 d2                	xor    edx,edx
c000783c:	89 e8                	mov    eax,ebp
c000783e:	31 ff                	xor    edi,edi
c0007840:	e8 a3 a2 ff ff       	call   c0001ae8 <mem_set>
c0007845:	8d 45 34             	lea    eax,[ebp+0x34]
c0007848:	ba 02 00 00 00       	mov    edx,0x2
c000784d:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007851:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007855:	e8 70 a2 ff ff       	call   c0001aca <st_dword>
c000785a:	8d 45 38             	lea    eax,[ebp+0x38]
c000785d:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007861:	e8 64 a2 ff ff       	call   c0001aca <st_dword>
c0007866:	8d 45 44             	lea    eax,[ebp+0x44]
c0007869:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000786d:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007871:	e8 54 a2 ff ff       	call   c0001aca <st_dword>
c0007876:	8d 45 54             	lea    eax,[ebp+0x54]
c0007879:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000787d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007881:	83 c2 02             	add    edx,0x2
c0007884:	e8 41 a2 ff ff       	call   c0001aca <st_dword>
c0007889:	8d 45 58             	lea    eax,[ebp+0x58]
c000788c:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007890:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007894:	e8 31 a2 ff ff       	call   c0001aca <st_dword>
c0007899:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000789d:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c00078a2:	89 c6                	mov    esi,eax
c00078a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078a8:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00078ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00078af:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00078b3:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00078b6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00078ba:	39 cb                	cmp    ebx,ecx
c00078bc:	76 02                	jbe    c00078c0 <f_mkfs+0x75c>
c00078be:	89 cb                	mov    ebx,ecx
c00078c0:	83 ec 0c             	sub    esp,0xc
c00078c3:	53                   	push   ebx
c00078c4:	57                   	push   edi
c00078c5:	56                   	push   esi
c00078c6:	55                   	push   ebp
c00078c7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078cb:	e8 4f a1 ff ff       	call   c0001a1f <disk_write>
c00078d0:	83 c4 20             	add    esp,0x20
c00078d3:	85 c0                	test   eax,eax
c00078d5:	0f 85 3a 09 00 00    	jne    c0008215 <f_mkfs+0x10b1>
c00078db:	31 d2                	xor    edx,edx
c00078dd:	b9 00 02 00 00       	mov    ecx,0x200
c00078e2:	89 e8                	mov    eax,ebp
c00078e4:	e8 ff a1 ff ff       	call   c0001ae8 <mem_set>
c00078e9:	31 d2                	xor    edx,edx
c00078eb:	01 de                	add    esi,ebx
c00078ed:	11 d7                	adc    edi,edx
c00078ef:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078f2:	75 bf                	jne    c00078b3 <f_mkfs+0x74f>
c00078f4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078f8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078fc:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007904:	b9 00 02 00 00       	mov    ecx,0x200
c0007909:	31 d2                	xor    edx,edx
c000790b:	89 e8                	mov    eax,ebp
c000790d:	e8 d6 a1 ff ff       	call   c0001ae8 <mem_set>
c0007912:	b9 0b 00 00 00       	mov    ecx,0xb
c0007917:	ba 00 5e 02 c0       	mov    edx,0xc0025e00
c000791c:	89 e8                	mov    eax,ebp
c000791e:	e8 b0 a1 ff ff       	call   c0001ad3 <mem_cpy>
c0007923:	8d 45 40             	lea    eax,[ebp+0x40]
c0007926:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000792a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000792e:	e8 9a a1 ff ff       	call   c0001acd <st_qword>
c0007933:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007937:	8d 45 48             	lea    eax,[ebp+0x48]
c000793a:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000793e:	e8 8a a1 ff ff       	call   c0001acd <st_qword>
c0007943:	8d 45 50             	lea    eax,[ebp+0x50]
c0007946:	ba 20 00 00 00       	mov    edx,0x20
c000794b:	e8 7a a1 ff ff       	call   c0001aca <st_dword>
c0007950:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007954:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007958:	e8 6d a1 ff ff       	call   c0001aca <st_dword>
c000795d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007961:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007965:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007969:	e8 5c a1 ff ff       	call   c0001aca <st_dword>
c000796e:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007971:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007975:	e8 50 a1 ff ff       	call   c0001aca <st_dword>
c000797a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000797e:	8d 50 02             	lea    edx,[eax+0x2]
c0007981:	8d 45 60             	lea    eax,[ebp+0x60]
c0007984:	e8 41 a1 ff ff       	call   c0001aca <st_dword>
c0007989:	8d 45 64             	lea    eax,[ebp+0x64]
c000798c:	ba 00 00 21 50       	mov    edx,0x50210000
c0007991:	e8 34 a1 ff ff       	call   c0001aca <st_dword>
c0007996:	8d 45 68             	lea    eax,[ebp+0x68]
c0007999:	ba 00 01 00 00       	mov    edx,0x100
c000799e:	e8 23 a1 ff ff       	call   c0001ac6 <st_word>
c00079a3:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c00079a7:	b8 0a 00 00 00       	mov    eax,0xa
c00079ac:	48                   	dec    eax
c00079ad:	74 05                	je     c00079b4 <f_mkfs+0x850>
c00079af:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00079b2:	eb f8                	jmp    c00079ac <f_mkfs+0x848>
c00079b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079b8:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00079bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079c0:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00079c4:	74 05                	je     c00079cb <f_mkfs+0x867>
c00079c6:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c00079c9:	eb f5                	jmp    c00079c0 <f_mkfs+0x85c>
c00079cb:	8d 45 78             	lea    eax,[ebp+0x78]
c00079ce:	ba eb fe 00 00       	mov    edx,0xfeeb
c00079d3:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c00079d9:	31 db                	xor    ebx,ebx
c00079db:	e8 e6 a0 ff ff       	call   c0001ac6 <st_word>
c00079e0:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079e6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079eb:	89 04 24             	mov    DWORD PTR [esp],eax
c00079ee:	e8 d3 a0 ff ff       	call   c0001ac6 <st_word>
c00079f3:	31 c9                	xor    ecx,ecx
c00079f5:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079f8:	83 f8 01             	cmp    eax,0x1
c00079fb:	76 13                	jbe    c0007a10 <f_mkfs+0x8ac>
c00079fd:	83 f9 70             	cmp    ecx,0x70
c0007a00:	74 0e                	je     c0007a10 <f_mkfs+0x8ac>
c0007a02:	89 da                	mov    edx,ebx
c0007a04:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007a09:	e8 41 a5 ff ff       	call   c0001f4f <xsum32>
c0007a0e:	89 c3                	mov    ebx,eax
c0007a10:	41                   	inc    ecx
c0007a11:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a17:	75 dc                	jne    c00079f5 <f_mkfs+0x891>
c0007a19:	89 f0                	mov    eax,esi
c0007a1b:	89 fa                	mov    edx,edi
c0007a1d:	83 c0 01             	add    eax,0x1
c0007a20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a24:	83 d2 00             	adc    edx,0x0
c0007a27:	83 ec 0c             	sub    esp,0xc
c0007a2a:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007a2e:	6a 01                	push   0x1
c0007a30:	57                   	push   edi
c0007a31:	56                   	push   esi
c0007a32:	55                   	push   ebp
c0007a33:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a37:	e8 e3 9f ff ff       	call   c0001a1f <disk_write>
c0007a3c:	83 c4 20             	add    esp,0x20
c0007a3f:	85 c0                	test   eax,eax
c0007a41:	0f 85 ce 07 00 00    	jne    c0008215 <f_mkfs+0x10b1>
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	b9 00 02 00 00       	mov    ecx,0x200
c0007a4e:	89 e8                	mov    eax,ebp
c0007a50:	e8 93 a0 ff ff       	call   c0001ae8 <mem_set>
c0007a55:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a5a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a5d:	e8 64 a0 ff ff       	call   c0001ac6 <st_word>
c0007a62:	89 f0                	mov    eax,esi
c0007a64:	89 fa                	mov    edx,edi
c0007a66:	83 c0 09             	add    eax,0x9
c0007a69:	83 d2 00             	adc    edx,0x0
c0007a6c:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a6f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a73:	31 c9                	xor    ecx,ecx
c0007a75:	41                   	inc    ecx
c0007a76:	89 da                	mov    edx,ebx
c0007a78:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a7d:	e8 cd a4 ff ff       	call   c0001f4f <xsum32>
c0007a82:	89 c3                	mov    ebx,eax
c0007a84:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a8a:	75 e9                	jne    c0007a75 <f_mkfs+0x911>
c0007a8c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a90:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a94:	83 c0 01             	add    eax,0x1
c0007a97:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a9b:	83 d2 00             	adc    edx,0x0
c0007a9e:	83 ec 0c             	sub    esp,0xc
c0007aa1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007aa5:	6a 01                	push   0x1
c0007aa7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007aab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007aaf:	55                   	push   ebp
c0007ab0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ab4:	e8 66 9f ff ff       	call   c0001a1f <disk_write>
c0007ab9:	83 c4 20             	add    esp,0x20
c0007abc:	85 c0                	test   eax,eax
c0007abe:	0f 85 51 07 00 00    	jne    c0008215 <f_mkfs+0x10b1>
c0007ac4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ac8:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007acc:	75 09                	jne    c0007ad7 <f_mkfs+0x973>
c0007ace:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ad1:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ad5:	74 12                	je     c0007ae9 <f_mkfs+0x985>
c0007ad7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007adb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007adf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007ae7:	eb 8a                	jmp    c0007a73 <f_mkfs+0x90f>
c0007ae9:	31 d2                	xor    edx,edx
c0007aeb:	b9 00 02 00 00       	mov    ecx,0x200
c0007af0:	89 e8                	mov    eax,ebp
c0007af2:	e8 f1 9f ff ff       	call   c0001ae8 <mem_set>
c0007af7:	83 c6 0b             	add    esi,0xb
c0007afa:	83 d7 00             	adc    edi,0x0
c0007afd:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007b01:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007b05:	31 c9                	xor    ecx,ecx
c0007b07:	41                   	inc    ecx
c0007b08:	89 da                	mov    edx,ebx
c0007b0a:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007b0f:	e8 3b a4 ff ff       	call   c0001f4f <xsum32>
c0007b14:	89 c3                	mov    ebx,eax
c0007b16:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007b1c:	75 e9                	jne    c0007b07 <f_mkfs+0x9a3>
c0007b1e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b21:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b25:	83 c6 01             	add    esi,0x1
c0007b28:	83 d7 00             	adc    edi,0x0
c0007b2b:	83 ec 0c             	sub    esp,0xc
c0007b2e:	6a 01                	push   0x1
c0007b30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b38:	55                   	push   ebp
c0007b39:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b3d:	e8 dd 9e ff ff       	call   c0001a1f <disk_write>
c0007b42:	83 c4 20             	add    esp,0x20
c0007b45:	85 c0                	test   eax,eax
c0007b47:	0f 85 c8 06 00 00    	jne    c0008215 <f_mkfs+0x10b1>
c0007b4d:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b51:	75 06                	jne    c0007b59 <f_mkfs+0x9f5>
c0007b53:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b57:	74 09                	je     c0007b62 <f_mkfs+0x9fe>
c0007b59:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b5c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b60:	eb a3                	jmp    c0007b05 <f_mkfs+0x9a1>
c0007b62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b66:	89 da                	mov    edx,ebx
c0007b68:	01 e8                	add    eax,ebp
c0007b6a:	e8 5b 9f ff ff       	call   c0001aca <st_dword>
c0007b6f:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b74:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b7c:	75 e4                	jne    c0007b62 <f_mkfs+0x9fe>
c0007b7e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b81:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b85:	83 c6 02             	add    esi,0x2
c0007b88:	83 d7 00             	adc    edi,0x0
c0007b8b:	83 ec 0c             	sub    esp,0xc
c0007b8e:	6a 01                	push   0x1
c0007b90:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b94:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b98:	55                   	push   ebp
c0007b99:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b9d:	e8 7d 9e ff ff       	call   c0001a1f <disk_write>
c0007ba2:	83 c4 20             	add    esp,0x20
c0007ba5:	85 c0                	test   eax,eax
c0007ba7:	0f 85 68 06 00 00    	jne    c0008215 <f_mkfs+0x10b1>
c0007bad:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007bb2:	74 0d                	je     c0007bc1 <f_mkfs+0xa5d>
c0007bb4:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007bbc:	e9 43 fd ff ff       	jmp    c0007904 <f_mkfs+0x7a0>
c0007bc1:	b1 07                	mov    cl,0x7
c0007bc3:	e9 e3 05 00 00       	jmp    c00081ab <f_mkfs+0x1047>
c0007bc8:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007bcd:	0f 85 4f 02 00 00    	jne    c0007e22 <f_mkfs+0xcbe>
c0007bd3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007bd8:	0f 86 22 02 00 00    	jbe    c0007e00 <f_mkfs+0xc9c>
c0007bde:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007be3:	0f 85 81 06 00 00    	jne    c000826a <f_mkfs+0x1106>
c0007be9:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007bec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bf0:	83 f8 40             	cmp    eax,0x40
c0007bf3:	0f 87 51 06 00 00    	ja     c000824a <f_mkfs+0x10e6>
c0007bf9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bfd:	85 ff                	test   edi,edi
c0007bff:	75 1c                	jne    c0007c1d <f_mkfs+0xab9>
c0007c01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c04:	ba 00 5d 02 c0       	mov    edx,0xc0025d00
c0007c09:	c1 e9 0c             	shr    ecx,0xc
c0007c0c:	bf 01 00 00 00       	mov    edi,0x1
c0007c11:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c14:	66 85 c0             	test   ax,ax
c0007c17:	0f 85 95 01 00 00    	jne    c0007db2 <f_mkfs+0xc4e>
c0007c1d:	31 d2                	xor    edx,edx
c0007c1f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c22:	f7 f7                	div    edi
c0007c24:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007c29:	0f 86 95 01 00 00    	jbe    c0007dc4 <f_mkfs+0xc60>
c0007c2f:	83 c0 02             	add    eax,0x2
c0007c32:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007c37:	01 c0                	add    eax,eax
c0007c39:	05 ff 01 00 00       	add    eax,0x1ff
c0007c3e:	be 01 00 00 00       	mov    esi,0x1
c0007c43:	c1 e8 09             	shr    eax,0x9
c0007c46:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c4a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c4e:	c1 e0 05             	shl    eax,0x5
c0007c51:	c1 e8 09             	shr    eax,0x9
c0007c54:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c58:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c5d:	31 d2                	xor    edx,edx
c0007c5f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c63:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c67:	89 f0                	mov    eax,esi
c0007c69:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c6d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c71:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c75:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c79:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c7d:	31 d2                	xor    edx,edx
c0007c7f:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c84:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c88:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c8c:	31 db                	xor    ebx,ebx
c0007c8e:	01 c8                	add    eax,ecx
c0007c90:	11 da                	adc    edx,ebx
c0007c92:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c96:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c9a:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c9e:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007ca2:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007ca6:	f7 da                	neg    edx
c0007ca8:	21 d1                	and    ecx,edx
c0007caa:	29 d9                	sub    ecx,ebx
c0007cac:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cb1:	0f 85 20 01 00 00    	jne    c0007dd7 <f_mkfs+0xc73>
c0007cb7:	31 db                	xor    ebx,ebx
c0007cb9:	01 ce                	add    esi,ecx
c0007cbb:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007cbf:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007cc3:	31 d2                	xor    edx,edx
c0007cc5:	89 f8                	mov    eax,edi
c0007cc7:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ccb:	c1 e0 04             	shl    eax,0x4
c0007cce:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007cd2:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007cd6:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007cda:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007cde:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007ce1:	19 d3                	sbb    ebx,edx
c0007ce3:	0f 82 40 01 00 00    	jb     c0007e29 <f_mkfs+0xcc5>
c0007ce9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007cec:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cf0:	89 c8                	mov    eax,ecx
c0007cf2:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007cf7:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007cfb:	29 f0                	sub    eax,esi
c0007cfd:	29 d0                	sub    eax,edx
c0007cff:	31 d2                	xor    edx,edx
c0007d01:	f7 f7                	div    edi
c0007d03:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007d08:	89 c3                	mov    ebx,eax
c0007d0a:	0f 85 b8 fe ff ff    	jne    c0007bc8 <f_mkfs+0xa64>
c0007d10:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007d15:	0f 87 1d 01 00 00    	ja     c0007e38 <f_mkfs+0xcd4>
c0007d1b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d20:	0f 85 03 01 00 00    	jne    c0007e29 <f_mkfs+0xcc5>
c0007d26:	83 ff 01             	cmp    edi,0x1
c0007d29:	0f 86 fa 00 00 00    	jbe    c0007e29 <f_mkfs+0xcc5>
c0007d2f:	d1 ef                	shr    edi,1
c0007d31:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007d35:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007d39:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d3c:	85 db                	test   ebx,ebx
c0007d3e:	75 2d                	jne    c0007d6d <f_mkfs+0xc09>
c0007d40:	89 cb                	mov    ebx,ecx
c0007d42:	ba 10 5d 02 c0       	mov    edx,0xc0025d10
c0007d47:	c1 eb 11             	shr    ebx,0x11
c0007d4a:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d52:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d55:	66 85 c0             	test   ax,ax
c0007d58:	74 11                	je     c0007d6b <f_mkfs+0xc07>
c0007d5a:	83 c2 02             	add    edx,0x2
c0007d5d:	39 d8                	cmp    eax,ebx
c0007d5f:	77 0a                	ja     c0007d6b <f_mkfs+0xc07>
c0007d61:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d65:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d69:	eb e7                	jmp    c0007d52 <f_mkfs+0xbee>
c0007d6b:	31 db                	xor    ebx,ebx
c0007d6d:	31 d2                	xor    edx,edx
c0007d6f:	89 c8                	mov    eax,ecx
c0007d71:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d75:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d7c:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d81:	c1 ea 09             	shr    edx,0x9
c0007d84:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d89:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d8d:	0f 87 96 00 00 00    	ja     c0007e29 <f_mkfs+0xcc5>
c0007d93:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d97:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d9f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007da3:	be 20 00 00 00       	mov    esi,0x20
c0007da8:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007dad:	e9 a6 fe ff ff       	jmp    c0007c58 <f_mkfs+0xaf4>
c0007db2:	83 c2 02             	add    edx,0x2
c0007db5:	39 c8                	cmp    eax,ecx
c0007db7:	0f 87 60 fe ff ff    	ja     c0007c1d <f_mkfs+0xab9>
c0007dbd:	01 ff                	add    edi,edi
c0007dbf:	e9 4d fe ff ff       	jmp    c0007c11 <f_mkfs+0xaad>
c0007dc4:	8d 04 40             	lea    eax,[eax+eax*2]
c0007dc7:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007dcc:	40                   	inc    eax
c0007dcd:	d1 e8                	shr    eax,1
c0007dcf:	83 c0 03             	add    eax,0x3
c0007dd2:	e9 62 fe ff ff       	jmp    c0007c39 <f_mkfs+0xad5>
c0007dd7:	31 d2                	xor    edx,edx
c0007dd9:	89 c8                	mov    eax,ecx
c0007ddb:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007ddf:	85 d2                	test   edx,edx
c0007de1:	74 0c                	je     c0007def <f_mkfs+0xc8b>
c0007de3:	49                   	dec    ecx
c0007de4:	46                   	inc    esi
c0007de5:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007dea:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007def:	89 c8                	mov    eax,ecx
c0007df1:	31 d2                	xor    edx,edx
c0007df3:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007df7:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007dfb:	e9 c3 fe ff ff       	jmp    c0007cc3 <f_mkfs+0xb5f>
c0007e00:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e05:	77 31                	ja     c0007e38 <f_mkfs+0xcd4>
c0007e07:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e0c:	75 1b                	jne    c0007e29 <f_mkfs+0xcc5>
c0007e0e:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e15:	3d 80 00 00 00       	cmp    eax,0x80
c0007e1a:	0f 86 d9 fd ff ff    	jbe    c0007bf9 <f_mkfs+0xa95>
c0007e20:	eb 07                	jmp    c0007e29 <f_mkfs+0xcc5>
c0007e22:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e27:	76 0a                	jbe    c0007e33 <f_mkfs+0xccf>
c0007e29:	bb 0e 00 00 00       	mov    ebx,0xe
c0007e2e:	e9 ff 03 00 00       	jmp    c0008232 <f_mkfs+0x10ce>
c0007e33:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007e38:	31 d2                	xor    edx,edx
c0007e3a:	b9 00 02 00 00       	mov    ecx,0x200
c0007e3f:	89 e8                	mov    eax,ebp
c0007e41:	e8 a2 9c ff ff       	call   c0001ae8 <mem_set>
c0007e46:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e4b:	ba 22 5e 02 c0       	mov    edx,0xc0025e22
c0007e50:	89 e8                	mov    eax,ebp
c0007e52:	e8 7c 9c ff ff       	call   c0001ad3 <mem_cpy>
c0007e57:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e5a:	ba 00 02 00 00       	mov    edx,0x200
c0007e5f:	e8 62 9c ff ff       	call   c0001ac6 <st_word>
c0007e64:	89 f8                	mov    eax,edi
c0007e66:	0f b7 d6             	movzx  edx,si
c0007e69:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e6c:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e6f:	e8 52 9c ff ff       	call   c0001ac6 <st_word>
c0007e74:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e78:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e7d:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e80:	75 08                	jne    c0007e8a <f_mkfs+0xd26>
c0007e82:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e8a:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e8d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e91:	e8 30 9c ff ff       	call   c0001ac6 <st_word>
c0007e96:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e9b:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e9f:	39 d0                	cmp    eax,edx
c0007ea1:	b8 00 00 00 00       	mov    eax,0x0
c0007ea6:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007eaa:	72 0a                	jb     c0007eb6 <f_mkfs+0xd52>
c0007eac:	8d 45 13             	lea    eax,[ebp+0x13]
c0007eaf:	e8 12 9c ff ff       	call   c0001ac6 <st_word>
c0007eb4:	eb 08                	jmp    c0007ebe <f_mkfs+0xd5a>
c0007eb6:	8d 45 20             	lea    eax,[ebp+0x20]
c0007eb9:	e8 0c 9c ff ff       	call   c0001aca <st_dword>
c0007ebe:	8d 45 18             	lea    eax,[ebp+0x18]
c0007ec1:	ba 3f 00 00 00       	mov    edx,0x3f
c0007ec6:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007eca:	e8 f7 9b ff ff       	call   c0001ac6 <st_word>
c0007ecf:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007ed2:	ba ff 00 00 00       	mov    edx,0xff
c0007ed7:	e8 ea 9b ff ff       	call   c0001ac6 <st_word>
c0007edc:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007edf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007ee3:	e8 e2 9b ff ff       	call   c0001aca <st_dword>
c0007ee8:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eed:	75 57                	jne    c0007f46 <f_mkfs+0xde2>
c0007eef:	8d 45 43             	lea    eax,[ebp+0x43]
c0007ef2:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ef7:	e8 ce 9b ff ff       	call   c0001aca <st_dword>
c0007efc:	8d 45 24             	lea    eax,[ebp+0x24]
c0007eff:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f03:	e8 c2 9b ff ff       	call   c0001aca <st_dword>
c0007f08:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007f0b:	ba 02 00 00 00       	mov    edx,0x2
c0007f10:	e8 b5 9b ff ff       	call   c0001aca <st_dword>
c0007f15:	8d 45 30             	lea    eax,[ebp+0x30]
c0007f18:	ba 01 00 00 00       	mov    edx,0x1
c0007f1d:	e8 a4 9b ff ff       	call   c0001ac6 <st_word>
c0007f22:	8d 45 32             	lea    eax,[ebp+0x32]
c0007f25:	ba 06 00 00 00       	mov    edx,0x6
c0007f2a:	e8 97 9b ff ff       	call   c0001ac6 <st_word>
c0007f2f:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007f33:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007f37:	8d 45 47             	lea    eax,[ebp+0x47]
c0007f3a:	b9 13 00 00 00       	mov    ecx,0x13
c0007f3f:	ba 2e 5e 02 c0       	mov    edx,0xc0025e2e
c0007f44:	eb 2f                	jmp    c0007f75 <f_mkfs+0xe11>
c0007f46:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f49:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f4e:	e8 77 9b ff ff       	call   c0001aca <st_dword>
c0007f53:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f58:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f5b:	e8 66 9b ff ff       	call   c0001ac6 <st_word>
c0007f60:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f64:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f68:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f6b:	b9 13 00 00 00       	mov    ecx,0x13
c0007f70:	ba 42 5e 02 c0       	mov    edx,0xc0025e42
c0007f75:	e8 59 9b ff ff       	call   c0001ad3 <mem_cpy>
c0007f7a:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f80:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f85:	89 f0                	mov    eax,esi
c0007f87:	e8 3a 9b ff ff       	call   c0001ac6 <st_word>
c0007f8c:	83 ec 0c             	sub    esp,0xc
c0007f8f:	6a 01                	push   0x1
c0007f91:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f95:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f99:	55                   	push   ebp
c0007f9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f9e:	e8 7c 9a ff ff       	call   c0001a1f <disk_write>
c0007fa3:	83 c4 20             	add    esp,0x20
c0007fa6:	85 c0                	test   eax,eax
c0007fa8:	0f 85 67 02 00 00    	jne    c0008215 <f_mkfs+0x10b1>
c0007fae:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fb3:	0f 85 b7 00 00 00    	jne    c0008070 <f_mkfs+0xf0c>
c0007fb9:	83 ec 0c             	sub    esp,0xc
c0007fbc:	6a 01                	push   0x1
c0007fbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fc2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fc6:	83 c0 06             	add    eax,0x6
c0007fc9:	83 d2 00             	adc    edx,0x0
c0007fcc:	52                   	push   edx
c0007fcd:	50                   	push   eax
c0007fce:	55                   	push   ebp
c0007fcf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fd3:	e8 47 9a ff ff       	call   c0001a1f <disk_write>
c0007fd8:	83 c4 20             	add    esp,0x20
c0007fdb:	b9 00 02 00 00       	mov    ecx,0x200
c0007fe0:	31 d2                	xor    edx,edx
c0007fe2:	89 e8                	mov    eax,ebp
c0007fe4:	e8 ff 9a ff ff       	call   c0001ae8 <mem_set>
c0007fe9:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fee:	89 e8                	mov    eax,ebp
c0007ff0:	e8 d5 9a ff ff       	call   c0001aca <st_dword>
c0007ff5:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007ffb:	ba 72 72 41 61       	mov    edx,0x61417272
c0008000:	e8 c5 9a ff ff       	call   c0001aca <st_dword>
c0008005:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008008:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000800e:	e8 b7 9a ff ff       	call   c0001aca <st_dword>
c0008013:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008019:	ba 02 00 00 00       	mov    edx,0x2
c000801e:	e8 a7 9a ff ff       	call   c0001aca <st_dword>
c0008023:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008028:	89 f0                	mov    eax,esi
c000802a:	e8 97 9a ff ff       	call   c0001ac6 <st_word>
c000802f:	83 ec 0c             	sub    esp,0xc
c0008032:	6a 01                	push   0x1
c0008034:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008038:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000803c:	83 c0 07             	add    eax,0x7
c000803f:	83 d2 00             	adc    edx,0x0
c0008042:	52                   	push   edx
c0008043:	50                   	push   eax
c0008044:	55                   	push   ebp
c0008045:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008049:	e8 d1 99 ff ff       	call   c0001a1f <disk_write>
c000804e:	83 c4 14             	add    esp,0x14
c0008051:	6a 01                	push   0x1
c0008053:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008057:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000805b:	83 c0 01             	add    eax,0x1
c000805e:	83 d2 00             	adc    edx,0x0
c0008061:	52                   	push   edx
c0008062:	50                   	push   eax
c0008063:	55                   	push   ebp
c0008064:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008068:	e8 b2 99 ff ff       	call   c0001a1f <disk_write>
c000806d:	83 c4 20             	add    esp,0x20
c0008070:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008077:	31 d2                	xor    edx,edx
c0008079:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000807f:	31 db                	xor    ebx,ebx
c0008081:	89 e8                	mov    eax,ebp
c0008083:	e8 60 9a ff ff       	call   c0001ae8 <mem_set>
c0008088:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000808d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008094:	0f 94 c3             	sete   bl
c0008097:	4b                   	dec    ebx
c0008098:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000809e:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00080a4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080a9:	75 21                	jne    c00080cc <f_mkfs+0xf68>
c00080ab:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00080b0:	89 e8                	mov    eax,ebp
c00080b2:	e8 13 9a ff ff       	call   c0001aca <st_dword>
c00080b7:	8d 45 04             	lea    eax,[ebp+0x4]
c00080ba:	83 ca ff             	or     edx,0xffffffff
c00080bd:	e8 08 9a ff ff       	call   c0001aca <st_dword>
c00080c2:	8d 45 08             	lea    eax,[ebp+0x8]
c00080c5:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00080ca:	eb 04                	jmp    c00080d0 <f_mkfs+0xf6c>
c00080cc:	89 da                	mov    edx,ebx
c00080ce:	89 e8                	mov    eax,ebp
c00080d0:	e8 f5 99 ff ff       	call   c0001aca <st_dword>
c00080d5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00080d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00080dd:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080e1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080e5:	39 ce                	cmp    esi,ecx
c00080e7:	76 02                	jbe    c00080eb <f_mkfs+0xf87>
c00080e9:	89 ce                	mov    esi,ecx
c00080eb:	83 ec 0c             	sub    esp,0xc
c00080ee:	56                   	push   esi
c00080ef:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080f3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080f7:	55                   	push   ebp
c00080f8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080fc:	e8 1e 99 ff ff       	call   c0001a1f <disk_write>
c0008101:	83 c4 20             	add    esp,0x20
c0008104:	85 c0                	test   eax,eax
c0008106:	0f 85 09 01 00 00    	jne    c0008215 <f_mkfs+0x10b1>
c000810c:	31 d2                	xor    edx,edx
c000810e:	b9 00 02 00 00       	mov    ecx,0x200
c0008113:	89 e8                	mov    eax,ebp
c0008115:	e8 ce 99 ff ff       	call   c0001ae8 <mem_set>
c000811a:	31 d2                	xor    edx,edx
c000811c:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008120:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008124:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008128:	75 b3                	jne    c00080dd <f_mkfs+0xf79>
c000812a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000812d:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008134:	40                   	inc    eax
c0008135:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008139:	0f 87 65 ff ff ff    	ja     c00080a4 <f_mkfs+0xf40>
c000813f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008144:	74 04                	je     c000814a <f_mkfs+0xfe6>
c0008146:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000814a:	89 fb                	mov    ebx,edi
c000814c:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008150:	76 04                	jbe    c0008156 <f_mkfs+0xff2>
c0008152:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008156:	83 ec 0c             	sub    esp,0xc
c0008159:	53                   	push   ebx
c000815a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000815e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008162:	55                   	push   ebp
c0008163:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008167:	e8 b3 98 ff ff       	call   c0001a1f <disk_write>
c000816c:	83 c4 20             	add    esp,0x20
c000816f:	85 c0                	test   eax,eax
c0008171:	0f 85 9e 00 00 00    	jne    c0008215 <f_mkfs+0x10b1>
c0008177:	31 d2                	xor    edx,edx
c0008179:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000817d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008181:	29 df                	sub    edi,ebx
c0008183:	75 c5                	jne    c000814a <f_mkfs+0xfe6>
c0008185:	b1 0c                	mov    cl,0xc
c0008187:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000818c:	74 1d                	je     c00081ab <f_mkfs+0x1047>
c000818e:	b8 ff ff 00 00       	mov    eax,0xffff
c0008193:	b1 06                	mov    cl,0x6
c0008195:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008199:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000819d:	72 0c                	jb     c00081ab <f_mkfs+0x1047>
c000819f:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00081a4:	0f 94 c1             	sete   cl
c00081a7:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00081ab:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00081b0:	75 4c                	jne    c00081fe <f_mkfs+0x109a>
c00081b2:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00081b6:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00081ba:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00081c1:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00081c8:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00081d3:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00081de:	0f b6 c9             	movzx  ecx,cl
c00081e1:	83 ec 0c             	sub    esp,0xc
c00081e4:	55                   	push   ebp
c00081e5:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081f0:	e8 2f c2 ff ff       	call   c0004424 <create_partition>
c00081f5:	83 c4 10             	add    esp,0x10
c00081f8:	89 c3                	mov    ebx,eax
c00081fa:	85 c0                	test   eax,eax
c00081fc:	75 34                	jne    c0008232 <f_mkfs+0x10ce>
c00081fe:	31 db                	xor    ebx,ebx
c0008200:	50                   	push   eax
c0008201:	6a 00                	push   0x0
c0008203:	6a 00                	push   0x0
c0008205:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008209:	e8 27 98 ff ff       	call   c0001a35 <disk_ioctl>
c000820e:	83 c4 10             	add    esp,0x10
c0008211:	85 c0                	test   eax,eax
c0008213:	74 1d                	je     c0008232 <f_mkfs+0x10ce>
c0008215:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000821d:	75 0c                	jne    c000822b <f_mkfs+0x10c7>
c000821f:	83 ec 0c             	sub    esp,0xc
c0008222:	55                   	push   ebp
c0008223:	e8 75 00 00 00       	call   c000829d <ff_memfree>
c0008228:	83 c4 10             	add    esp,0x10
c000822b:	bb 01 00 00 00       	mov    ebx,0x1
c0008230:	eb 48                	jmp    c000827a <f_mkfs+0x1116>
c0008232:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000823a:	75 3e                	jne    c000827a <f_mkfs+0x1116>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	55                   	push   ebp
c0008240:	e8 58 00 00 00       	call   c000829d <ff_memfree>
c0008245:	83 c4 10             	add    esp,0x10
c0008248:	eb 30                	jmp    c000827a <f_mkfs+0x1116>
c000824a:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000824f:	0f 85 eb fa ff ff    	jne    c0007d40 <f_mkfs+0xbdc>
c0008255:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008259:	81 ff 80 00 00 00    	cmp    edi,0x80
c000825f:	0f 86 b8 f9 ff ff    	jbe    c0007c1d <f_mkfs+0xab9>
c0008265:	e9 bf fb ff ff       	jmp    c0007e29 <f_mkfs+0xcc5>
c000826a:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000826f:	0f 85 c0 fa ff ff    	jne    c0007d35 <f_mkfs+0xbd1>
c0008275:	e9 af fb ff ff       	jmp    c0007e29 <f_mkfs+0xcc5>
c000827a:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008280:	89 d8                	mov    eax,ebx
c0008282:	5b                   	pop    ebx
c0008283:	5e                   	pop    esi
c0008284:	5f                   	pop    edi
c0008285:	5d                   	pop    ebp
c0008286:	c3                   	ret    

c0008287 <ff_memalloc>:
c0008287:	83 ec 0c             	sub    esp,0xc
c000828a:	83 ec 0c             	sub    esp,0xc
c000828d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008291:	e8 b2 6e 00 00       	call   c000f148 <malloc>
c0008296:	83 c4 10             	add    esp,0x10
c0008299:	83 c4 0c             	add    esp,0xc
c000829c:	c3                   	ret    

c000829d <ff_memfree>:
c000829d:	83 ec 0c             	sub    esp,0xc
c00082a0:	83 ec 0c             	sub    esp,0xc
c00082a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082a7:	e8 ac 6e 00 00       	call   c000f158 <free>
c00082ac:	83 c4 10             	add    esp,0x10
c00082af:	90                   	nop
c00082b0:	83 c4 0c             	add    esp,0xc
c00082b3:	c3                   	ret    

c00082b4 <ff_uni2oem>:
c00082b4:	83 ec 14             	sub    esp,0x14
c00082b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00082bb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00082bf:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082c6:	c7 44 24 0c 60 61 02 c0 	mov    DWORD PTR [esp+0xc],0xc0026160
c00082ce:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00082d3:	77 0b                	ja     c00082e0 <ff_uni2oem+0x2c>
c00082d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00082d9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082de:	eb 5b                	jmp    c000833b <ff_uni2oem+0x87>
c00082e0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082e8:	77 51                	ja     c000833b <ff_uni2oem+0x87>
c00082ea:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082f0:	75 49                	jne    c000833b <ff_uni2oem+0x87>
c00082f2:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082f9:	eb 0b                	jmp    c0008306 <ff_uni2oem+0x52>
c00082fb:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008300:	40                   	inc    eax
c0008301:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008306:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000830c:	77 1b                	ja     c0008329 <ff_uni2oem+0x75>
c000830e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008313:	01 c0                	add    eax,eax
c0008315:	89 c2                	mov    edx,eax
c0008317:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000831b:	01 d0                	add    eax,edx
c000831d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008320:	0f b7 c0             	movzx  eax,ax
c0008323:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008327:	75 d2                	jne    c00082fb <ff_uni2oem+0x47>
c0008329:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000832e:	83 e8 80             	sub    eax,0xffffff80
c0008331:	25 ff 00 00 00       	and    eax,0xff
c0008336:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000833b:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008340:	83 c4 14             	add    esp,0x14
c0008343:	c3                   	ret    

c0008344 <ff_oem2uni>:
c0008344:	83 ec 18             	sub    esp,0x18
c0008347:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000834b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000834f:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008354:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008358:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000835f:	c7 44 24 10 60 61 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026160
c0008367:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000836d:	77 0b                	ja     c000837a <ff_oem2uni+0x36>
c000836f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008373:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008378:	eb 2d                	jmp    c00083a7 <ff_oem2uni+0x63>
c000837a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008380:	75 25                	jne    c00083a7 <ff_oem2uni+0x63>
c0008382:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008389:	77 1c                	ja     c00083a7 <ff_oem2uni+0x63>
c000838b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008390:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008395:	01 c0                	add    eax,eax
c0008397:	89 c2                	mov    edx,eax
c0008399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000839d:	01 d0                	add    eax,edx
c000839f:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083a2:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00083a7:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00083ac:	83 c4 18             	add    esp,0x18
c00083af:	c3                   	ret    

c00083b0 <ff_wtoupper>:
c00083b0:	83 ec 10             	sub    esp,0x10
c00083b3:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00083bb:	0f 87 3e 01 00 00    	ja     c00084ff <ff_wtoupper+0x14f>
c00083c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00083c5:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083ca:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00083d1:	77 07                	ja     c00083da <ff_wtoupper+0x2a>
c00083d3:	b8 60 5f 02 c0       	mov    eax,0xc0025f60
c00083d8:	eb 05                	jmp    c00083df <ff_wtoupper+0x2f>
c00083da:	b8 a0 5e 02 c0       	mov    eax,0xc0025ea0
c00083df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083e7:	8d 50 02             	lea    edx,[eax+0x2]
c00083ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083ee:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083f1:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083f6:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083fc:	0f 84 f4 00 00 00    	je     c00084f6 <ff_wtoupper+0x146>
c0008402:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008407:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c000840c:	0f 82 e4 00 00 00    	jb     c00084f6 <ff_wtoupper+0x146>
c0008412:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008416:	8d 50 02             	lea    edx,[eax+0x2]
c0008419:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000841d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008420:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008425:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000842a:	66 c1 e8 08          	shr    ax,0x8
c000842e:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008433:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000843a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000843f:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008444:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008449:	01 ca                	add    edx,ecx
c000844b:	39 d0                	cmp    eax,edx
c000844d:	0f 8d 86 00 00 00    	jge    c00084d9 <ff_wtoupper+0x129>
c0008453:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008458:	83 f8 08             	cmp    eax,0x8
c000845b:	0f 87 94 00 00 00    	ja     c00084f5 <ff_wtoupper+0x145>
c0008461:	8b 04 85 60 5e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda1a0]
c0008468:	ff e0                	jmp    eax
c000846a:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000846f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008474:	29 c2                	sub    edx,eax
c0008476:	89 d0                	mov    eax,edx
c0008478:	01 c0                	add    eax,eax
c000847a:	89 c2                	mov    edx,eax
c000847c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008480:	01 d0                	add    eax,edx
c0008482:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008485:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000848a:	eb 4b                	jmp    c00084d7 <ff_wtoupper+0x127>
c000848c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008491:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008495:	83 e0 01             	and    eax,0x1
c0008498:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000849d:	eb 38                	jmp    c00084d7 <ff_wtoupper+0x127>
c000849f:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00084a5:	eb 30                	jmp    c00084d7 <ff_wtoupper+0x127>
c00084a7:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00084ad:	eb 28                	jmp    c00084d7 <ff_wtoupper+0x127>
c00084af:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00084b5:	eb 20                	jmp    c00084d7 <ff_wtoupper+0x127>
c00084b7:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00084bd:	eb 18                	jmp    c00084d7 <ff_wtoupper+0x127>
c00084bf:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00084c5:	eb 10                	jmp    c00084d7 <ff_wtoupper+0x127>
c00084c7:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00084cd:	eb 08                	jmp    c00084d7 <ff_wtoupper+0x127>
c00084cf:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00084d6:	90                   	nop
c00084d7:	eb 1c                	jmp    c00084f5 <ff_wtoupper+0x145>
c00084d9:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084df:	0f 85 fe fe ff ff    	jne    c00083e3 <ff_wtoupper+0x33>
c00084e5:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084ea:	01 c0                	add    eax,eax
c00084ec:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084f0:	e9 ee fe ff ff       	jmp    c00083e3 <ff_wtoupper+0x33>
c00084f5:	90                   	nop
c00084f6:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084fb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008503:	83 c4 10             	add    esp,0x10
c0008506:	c3                   	ret    

c0008507 <is_bad_src_ratio>:
c0008507:	83 ec 1c             	sub    esp,0x1c
c000850a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000850e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008512:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008516:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000851a:	b8 00 00 00 00       	mov    eax,0x0
c000851f:	ba 00 00 70 3f       	mov    edx,0x3f700000
c0008524:	52                   	push   edx
c0008525:	50                   	push   eax
c0008526:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000852a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000852e:	e8 fc c8 01 00       	call   c0024e2f <__ltdf2>
c0008533:	83 c4 10             	add    esp,0x10
c0008536:	85 c0                	test   eax,eax
c0008538:	78 20                	js     c000855a <is_bad_src_ratio+0x53>
c000853a:	b8 00 00 00 00       	mov    eax,0x0
c000853f:	ba 00 00 70 40       	mov    edx,0x40700000
c0008544:	52                   	push   edx
c0008545:	50                   	push   eax
c0008546:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000854a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000854e:	e8 be c8 01 00       	call   c0024e11 <__gtdf2>
c0008553:	83 c4 10             	add    esp,0x10
c0008556:	85 c0                	test   eax,eax
c0008558:	7e 07                	jle    c0008561 <is_bad_src_ratio+0x5a>
c000855a:	b8 01 00 00 00       	mov    eax,0x1
c000855f:	eb 05                	jmp    c0008566 <is_bad_src_ratio+0x5f>
c0008561:	b8 00 00 00 00       	mov    eax,0x0
c0008566:	83 c4 1c             	add    esp,0x1c
c0008569:	c3                   	ret    

c000856a <psrc_set_converter>:
c000856a:	56                   	push   esi
c000856b:	89 d6                	mov    esi,edx
c000856d:	53                   	push   ebx
c000856e:	89 c3                	mov    ebx,eax
c0008570:	83 ec 0c             	sub    esp,0xc
c0008573:	52                   	push   edx
c0008574:	50                   	push   eax
c0008575:	e8 58 51 00 00       	call   c000d6d2 <sinc_set_converter>
c000857a:	83 c4 10             	add    esp,0x10
c000857d:	85 c0                	test   eax,eax
c000857f:	74 25                	je     c00085a6 <psrc_set_converter+0x3c>
c0008581:	50                   	push   eax
c0008582:	50                   	push   eax
c0008583:	56                   	push   esi
c0008584:	53                   	push   ebx
c0008585:	e8 2a 59 00 00       	call   c000deb4 <zoh_set_converter>
c000858a:	83 c4 10             	add    esp,0x10
c000858d:	85 c0                	test   eax,eax
c000858f:	74 15                	je     c00085a6 <psrc_set_converter+0x3c>
c0008591:	51                   	push   ecx
c0008592:	51                   	push   ecx
c0008593:	56                   	push   esi
c0008594:	53                   	push   ebx
c0008595:	e8 77 10 00 00       	call   c0009611 <linear_set_converter>
c000859a:	83 c4 10             	add    esp,0x10
c000859d:	ba 0a 00 00 00       	mov    edx,0xa
c00085a2:	85 c0                	test   eax,eax
c00085a4:	75 02                	jne    c00085a8 <psrc_set_converter+0x3e>
c00085a6:	31 d2                	xor    edx,edx
c00085a8:	89 d0                	mov    eax,edx
c00085aa:	5a                   	pop    edx
c00085ab:	5b                   	pop    ebx
c00085ac:	5e                   	pop    esi
c00085ad:	c3                   	ret    

c00085ae <src_delete>:
c00085ae:	53                   	push   ebx
c00085af:	83 ec 08             	sub    esp,0x8
c00085b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00085b6:	85 db                	test   ebx,ebx
c00085b8:	74 29                	je     c00085e3 <src_delete+0x35>
c00085ba:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00085bd:	85 c0                	test   eax,eax
c00085bf:	74 0c                	je     c00085cd <src_delete+0x1f>
c00085c1:	83 ec 0c             	sub    esp,0xc
c00085c4:	50                   	push   eax
c00085c5:	e8 8e 6b 00 00       	call   c000f158 <free>
c00085ca:	83 c4 10             	add    esp,0x10
c00085cd:	50                   	push   eax
c00085ce:	6a 3c                	push   0x3c
c00085d0:	6a 00                	push   0x0
c00085d2:	53                   	push   ebx
c00085d3:	e8 f6 80 ff ff       	call   c00006ce <memset>
c00085d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00085db:	e8 78 6b 00 00       	call   c000f158 <free>
c00085e0:	83 c4 10             	add    esp,0x10
c00085e3:	31 c0                	xor    eax,eax
c00085e5:	83 c4 08             	add    esp,0x8
c00085e8:	5b                   	pop    ebx
c00085e9:	c3                   	ret    

c00085ea <src_process>:
c00085ea:	56                   	push   esi
c00085eb:	53                   	push   ebx
c00085ec:	83 ec 14             	sub    esp,0x14
c00085ef:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00085f3:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00085f7:	85 f6                	test   esi,esi
c00085f9:	0f 84 2a 01 00 00    	je     c0008729 <src_process+0x13f>
c00085ff:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0008603:	0f 84 27 01 00 00    	je     c0008730 <src_process+0x146>
c0008609:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c000860d:	0f 84 1d 01 00 00    	je     c0008730 <src_process+0x146>
c0008613:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c000861a:	0f 85 17 01 00 00    	jne    c0008737 <src_process+0x14d>
c0008620:	85 db                	test   ebx,ebx
c0008622:	0f 84 16 01 00 00    	je     c000873e <src_process+0x154>
c0008628:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000862b:	0f 84 14 01 00 00    	je     c0008745 <src_process+0x15b>
c0008631:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c0008635:	0f 84 0a 01 00 00    	je     c0008745 <src_process+0x15b>
c000863b:	50                   	push   eax
c000863c:	50                   	push   eax
c000863d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008640:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008643:	e8 bf fe ff ff       	call   c0008507 <is_bad_src_ratio>
c0008648:	83 c4 10             	add    esp,0x10
c000864b:	85 c0                	test   eax,eax
c000864d:	0f 85 f9 00 00 00    	jne    c000874c <src_process+0x162>
c0008653:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008657:	79 07                	jns    c0008660 <src_process+0x76>
c0008659:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008660:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0008664:	79 07                	jns    c000866d <src_process+0x83>
c0008666:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000866d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000866f:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008672:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0008675:	39 ca                	cmp    edx,ecx
c0008677:	73 0b                	jae    c0008684 <src_process+0x9a>
c0008679:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c000867d:	8d 04 82             	lea    eax,[edx+eax*4]
c0008680:	39 c1                	cmp    ecx,eax
c0008682:	eb 09                	jmp    c000868d <src_process+0xa3>
c0008684:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c0008688:	8d 04 81             	lea    eax,[ecx+eax*4]
c000868b:	39 c2                	cmp    edx,eax
c000868d:	0f 82 c0 00 00 00    	jb     c0008753 <src_process+0x169>
c0008693:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000869a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00086a1:	68 00 00 70 3f       	push   0x3f700000
c00086a6:	6a 00                	push   0x0
c00086a8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00086ab:	ff 36                	push   DWORD PTR [esi]
c00086ad:	e8 7d c7 01 00       	call   c0024e2f <__ltdf2>
c00086b2:	83 c4 10             	add    esp,0x10
c00086b5:	85 c0                	test   eax,eax
c00086b7:	79 0b                	jns    c00086c4 <src_process+0xda>
c00086b9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00086bc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00086bf:	89 06                	mov    DWORD PTR [esi],eax
c00086c1:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00086c4:	83 ec 10             	sub    esp,0x10
c00086c7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00086ca:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00086cd:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00086d0:	ff 36                	push   DWORD PTR [esi]
c00086d2:	e8 5d be 01 00       	call   c0024534 <__subdf3>
c00086d7:	83 c4 18             	add    esp,0x18
c00086da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00086de:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00086e2:	52                   	push   edx
c00086e3:	50                   	push   eax
c00086e4:	e8 d7 c8 01 00       	call   c0024fc0 <fabs>
c00086e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00086f1:	83 c4 10             	add    esp,0x10
c00086f4:	68 af 03 d2 3c       	push   0x3cd203af
c00086f9:	68 16 56 e7 9e       	push   0x9ee75616
c00086fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008702:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008706:	e8 24 c7 01 00       	call   c0024e2f <__ltdf2>
c000870b:	83 c4 10             	add    esp,0x10
c000870e:	85 c0                	test   eax,eax
c0008710:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0008714:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008718:	79 05                	jns    c000871f <src_process+0x135>
c000871a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c000871d:	eb 03                	jmp    c0008722 <src_process+0x138>
c000871f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0008722:	83 c4 14             	add    esp,0x14
c0008725:	5b                   	pop    ebx
c0008726:	5e                   	pop    esi
c0008727:	ff e0                	jmp    eax
c0008729:	b8 02 00 00 00       	mov    eax,0x2
c000872e:	eb 28                	jmp    c0008758 <src_process+0x16e>
c0008730:	b8 07 00 00 00       	mov    eax,0x7
c0008735:	eb 21                	jmp    c0008758 <src_process+0x16e>
c0008737:	b8 12 00 00 00       	mov    eax,0x12
c000873c:	eb 1a                	jmp    c0008758 <src_process+0x16e>
c000873e:	b8 03 00 00 00       	mov    eax,0x3
c0008743:	eb 13                	jmp    c0008758 <src_process+0x16e>
c0008745:	b8 04 00 00 00       	mov    eax,0x4
c000874a:	eb 0c                	jmp    c0008758 <src_process+0x16e>
c000874c:	b8 06 00 00 00       	mov    eax,0x6
c0008751:	eb 05                	jmp    c0008758 <src_process+0x16e>
c0008753:	b8 10 00 00 00       	mov    eax,0x10
c0008758:	83 c4 14             	add    esp,0x14
c000875b:	5b                   	pop    ebx
c000875c:	5e                   	pop    esi
c000875d:	c3                   	ret    

c000875e <src_callback_read>:
c000875e:	55                   	push   ebp
c000875f:	57                   	push   edi
c0008760:	56                   	push   esi
c0008761:	53                   	push   ebx
c0008762:	83 ec 3c             	sub    esp,0x3c
c0008765:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008769:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000876d:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008771:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008775:	85 ed                	test   ebp,ebp
c0008777:	0f 8e 30 01 00 00    	jle    c00088ad <src_callback_read+0x14f>
c000877d:	85 db                	test   ebx,ebx
c000877f:	0f 84 28 01 00 00    	je     c00088ad <src_callback_read+0x14f>
c0008785:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000878c:	74 0c                	je     c000879a <src_callback_read+0x3c>
c000878e:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008795:	e9 13 01 00 00       	jmp    c00088ad <src_callback_read+0x14f>
c000879a:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000879e:	75 0c                	jne    c00087ac <src_callback_read+0x4e>
c00087a0:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c00087a7:	e9 01 01 00 00       	jmp    c00088ad <src_callback_read+0x14f>
c00087ac:	51                   	push   ecx
c00087ad:	6a 24                	push   0x24
c00087af:	6a 00                	push   0x0
c00087b1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00087b5:	50                   	push   eax
c00087b6:	e8 13 7f ff ff       	call   c00006ce <memset>
c00087bb:	58                   	pop    eax
c00087bc:	5a                   	pop    edx
c00087bd:	57                   	push   edi
c00087be:	56                   	push   esi
c00087bf:	e8 43 fd ff ff       	call   c0008507 <is_bad_src_ratio>
c00087c4:	83 c4 10             	add    esp,0x10
c00087c7:	85 c0                	test   eax,eax
c00087c9:	74 0c                	je     c00087d7 <src_callback_read+0x79>
c00087cb:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087d2:	e9 d6 00 00 00       	jmp    c00088ad <src_callback_read+0x14f>
c00087d7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00087db:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00087df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00087e3:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00087e7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00087ea:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00087ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087f2:	31 f6                	xor    esi,esi
c00087f4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087fb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008800:	75 30                	jne    c0008832 <src_callback_read+0xd4>
c0008802:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008806:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000880a:	52                   	push   edx
c000880b:	52                   	push   edx
c000880c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008810:	50                   	push   eax
c0008811:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008814:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008817:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000881b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000881f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	85 c0                	test   eax,eax
c0008828:	75 08                	jne    c0008832 <src_callback_read+0xd4>
c000882a:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008832:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008839:	50                   	push   eax
c000883a:	50                   	push   eax
c000883b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000883f:	50                   	push   eax
c0008840:	53                   	push   ebx
c0008841:	e8 a4 fd ff ff       	call   c00085ea <src_process>
c0008846:	83 c4 10             	add    esp,0x10
c0008849:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008850:	85 c0                	test   eax,eax
c0008852:	75 42                	jne    c0008896 <src_callback_read+0x138>
c0008854:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008858:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000885b:	89 f9                	mov    ecx,edi
c000885d:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008861:	0f af ca             	imul   ecx,edx
c0008864:	c1 e1 02             	shl    ecx,0x2
c0008867:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c000886b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000886f:	0f af d1             	imul   edx,ecx
c0008872:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008876:	c1 e2 02             	shl    edx,0x2
c0008879:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c000887d:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008880:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008885:	75 04                	jne    c000888b <src_callback_read+0x12d>
c0008887:	85 c9                	test   ecx,ecx
c0008889:	74 0b                	je     c0008896 <src_callback_read+0x138>
c000888b:	39 d5                	cmp    ebp,edx
c000888d:	7e 09                	jle    c0008898 <src_callback_read+0x13a>
c000888f:	89 d6                	mov    esi,edx
c0008891:	e9 65 ff ff ff       	jmp    c00087fb <src_callback_read+0x9d>
c0008896:	89 f2                	mov    edx,esi
c0008898:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000889c:	85 c0                	test   eax,eax
c000889e:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c00088a1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00088a5:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00088a8:	74 05                	je     c00088af <src_callback_read+0x151>
c00088aa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00088ad:	31 d2                	xor    edx,edx
c00088af:	83 c4 3c             	add    esp,0x3c
c00088b2:	89 d0                	mov    eax,edx
c00088b4:	5b                   	pop    ebx
c00088b5:	5e                   	pop    esi
c00088b6:	5f                   	pop    edi
c00088b7:	5d                   	pop    ebp
c00088b8:	c3                   	ret    

c00088b9 <src_set_ratio>:
c00088b9:	57                   	push   edi
c00088ba:	b8 02 00 00 00       	mov    eax,0x2
c00088bf:	56                   	push   esi
c00088c0:	53                   	push   ebx
c00088c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088c5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00088c9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00088cd:	85 db                	test   ebx,ebx
c00088cf:	74 2d                	je     c00088fe <src_set_ratio+0x45>
c00088d1:	b8 07 00 00 00       	mov    eax,0x7
c00088d6:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00088da:	74 22                	je     c00088fe <src_set_ratio+0x45>
c00088dc:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00088e0:	74 1c                	je     c00088fe <src_set_ratio+0x45>
c00088e2:	50                   	push   eax
c00088e3:	50                   	push   eax
c00088e4:	57                   	push   edi
c00088e5:	56                   	push   esi
c00088e6:	e8 1c fc ff ff       	call   c0008507 <is_bad_src_ratio>
c00088eb:	83 c4 10             	add    esp,0x10
c00088ee:	85 c0                	test   eax,eax
c00088f0:	75 07                	jne    c00088f9 <src_set_ratio+0x40>
c00088f2:	89 33                	mov    DWORD PTR [ebx],esi
c00088f4:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00088f7:	eb 05                	jmp    c00088fe <src_set_ratio+0x45>
c00088f9:	b8 06 00 00 00       	mov    eax,0x6
c00088fe:	5b                   	pop    ebx
c00088ff:	5e                   	pop    esi
c0008900:	5f                   	pop    edi
c0008901:	c3                   	ret    

c0008902 <src_get_channels>:
c0008902:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008906:	b8 02 00 00 00       	mov    eax,0x2
c000890b:	85 d2                	test   edx,edx
c000890d:	74 14                	je     c0008923 <src_get_channels+0x21>
c000890f:	b8 07 00 00 00       	mov    eax,0x7
c0008914:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008918:	74 09                	je     c0008923 <src_get_channels+0x21>
c000891a:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c000891e:	74 03                	je     c0008923 <src_get_channels+0x21>
c0008920:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008923:	c3                   	ret    

c0008924 <src_reset>:
c0008924:	53                   	push   ebx
c0008925:	b8 02 00 00 00       	mov    eax,0x2
c000892a:	83 ec 08             	sub    esp,0x8
c000892d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008931:	85 db                	test   ebx,ebx
c0008933:	74 36                	je     c000896b <src_reset+0x47>
c0008935:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008938:	85 c0                	test   eax,eax
c000893a:	74 09                	je     c0008945 <src_reset+0x21>
c000893c:	83 ec 0c             	sub    esp,0xc
c000893f:	53                   	push   ebx
c0008940:	ff d0                	call   eax
c0008942:	83 c4 10             	add    esp,0x10
c0008945:	31 c0                	xor    eax,eax
c0008947:	31 d2                	xor    edx,edx
c0008949:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000894c:	89 03                	mov    DWORD PTR [ebx],eax
c000894e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008951:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008954:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000895b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008962:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008969:	31 c0                	xor    eax,eax
c000896b:	83 c4 08             	add    esp,0x8
c000896e:	5b                   	pop    ebx
c000896f:	c3                   	ret    

c0008970 <src_new>:
c0008970:	57                   	push   edi
c0008971:	56                   	push   esi
c0008972:	53                   	push   ebx
c0008973:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008977:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000897b:	85 f6                	test   esi,esi
c000897d:	74 73                	je     c00089f2 <src_new+0x82>
c000897f:	85 ff                	test   edi,edi
c0008981:	7f 08                	jg     c000898b <src_new+0x1b>
c0008983:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008989:	eb 1e                	jmp    c00089a9 <src_new+0x39>
c000898b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008991:	50                   	push   eax
c0008992:	50                   	push   eax
c0008993:	6a 3c                	push   0x3c
c0008995:	6a 01                	push   0x1
c0008997:	e8 dc 67 00 00       	call   c000f178 <calloc>
c000899c:	83 c4 10             	add    esp,0x10
c000899f:	89 c3                	mov    ebx,eax
c00089a1:	85 c0                	test   eax,eax
c00089a3:	75 10                	jne    c00089b5 <src_new+0x45>
c00089a5:	85 f6                	test   esi,esi
c00089a7:	75 04                	jne    c00089ad <src_new+0x3d>
c00089a9:	31 db                	xor    ebx,ebx
c00089ab:	eb 4b                	jmp    c00089f8 <src_new+0x88>
c00089ad:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00089b3:	eb 43                	jmp    c00089f8 <src_new+0x88>
c00089b5:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00089b8:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c00089bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089c3:	e8 a2 fb ff ff       	call   c000856a <psrc_set_converter>
c00089c8:	85 c0                	test   eax,eax
c00089ca:	74 18                	je     c00089e4 <src_new+0x74>
c00089cc:	85 f6                	test   esi,esi
c00089ce:	74 06                	je     c00089d6 <src_new+0x66>
c00089d0:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089d6:	83 ec 0c             	sub    esp,0xc
c00089d9:	53                   	push   ebx
c00089da:	31 db                	xor    ebx,ebx
c00089dc:	e8 77 67 00 00       	call   c000f158 <free>
c00089e1:	83 c4 10             	add    esp,0x10
c00089e4:	83 ec 0c             	sub    esp,0xc
c00089e7:	53                   	push   ebx
c00089e8:	e8 37 ff ff ff       	call   c0008924 <src_reset>
c00089ed:	83 c4 10             	add    esp,0x10
c00089f0:	eb 06                	jmp    c00089f8 <src_new+0x88>
c00089f2:	85 ff                	test   edi,edi
c00089f4:	7f 9b                	jg     c0008991 <src_new+0x21>
c00089f6:	eb b1                	jmp    c00089a9 <src_new+0x39>
c00089f8:	89 d8                	mov    eax,ebx
c00089fa:	5b                   	pop    ebx
c00089fb:	5e                   	pop    esi
c00089fc:	5f                   	pop    edi
c00089fd:	c3                   	ret    

c00089fe <src_callback_new>:
c00089fe:	56                   	push   esi
c00089ff:	53                   	push   ebx
c0008a00:	53                   	push   ebx
c0008a01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008a05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a09:	85 f6                	test   esi,esi
c0008a0b:	75 0e                	jne    c0008a1b <src_callback_new+0x1d>
c0008a0d:	31 db                	xor    ebx,ebx
c0008a0f:	85 c0                	test   eax,eax
c0008a11:	74 47                	je     c0008a5a <src_callback_new+0x5c>
c0008a13:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008a19:	eb 3f                	jmp    c0008a5a <src_callback_new+0x5c>
c0008a1b:	85 c0                	test   eax,eax
c0008a1d:	74 06                	je     c0008a25 <src_callback_new+0x27>
c0008a1f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a25:	51                   	push   ecx
c0008a26:	50                   	push   eax
c0008a27:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a2b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a2f:	e8 3c ff ff ff       	call   c0008970 <src_new>
c0008a34:	83 c4 10             	add    esp,0x10
c0008a37:	89 c3                	mov    ebx,eax
c0008a39:	85 c0                	test   eax,eax
c0008a3b:	74 1d                	je     c0008a5a <src_callback_new+0x5c>
c0008a3d:	83 ec 0c             	sub    esp,0xc
c0008a40:	50                   	push   eax
c0008a41:	e8 de fe ff ff       	call   c0008924 <src_reset>
c0008a46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a4a:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a51:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a54:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a57:	83 c4 10             	add    esp,0x10
c0008a5a:	89 d8                	mov    eax,ebx
c0008a5c:	5a                   	pop    edx
c0008a5d:	5b                   	pop    ebx
c0008a5e:	5e                   	pop    esi
c0008a5f:	c3                   	ret    

c0008a60 <src_get_name>:
c0008a60:	53                   	push   ebx
c0008a61:	83 ec 14             	sub    esp,0x14
c0008a64:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a68:	53                   	push   ebx
c0008a69:	e8 3e 4c 00 00       	call   c000d6ac <sinc_get_name>
c0008a6e:	83 c4 10             	add    esp,0x10
c0008a71:	85 c0                	test   eax,eax
c0008a73:	75 1d                	jne    c0008a92 <src_get_name+0x32>
c0008a75:	83 ec 0c             	sub    esp,0xc
c0008a78:	53                   	push   ebx
c0008a79:	e8 18 54 00 00       	call   c000de96 <zoh_get_name>
c0008a7e:	83 c4 10             	add    esp,0x10
c0008a81:	85 c0                	test   eax,eax
c0008a83:	75 0d                	jne    c0008a92 <src_get_name+0x32>
c0008a85:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a89:	83 c4 08             	add    esp,0x8
c0008a8c:	5b                   	pop    ebx
c0008a8d:	e9 61 0b 00 00       	jmp    c00095f3 <linear_get_name>
c0008a92:	83 c4 08             	add    esp,0x8
c0008a95:	5b                   	pop    ebx
c0008a96:	c3                   	ret    

c0008a97 <src_get_description>:
c0008a97:	53                   	push   ebx
c0008a98:	83 ec 14             	sub    esp,0x14
c0008a9b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a9f:	53                   	push   ebx
c0008aa0:	e8 1a 4c 00 00       	call   c000d6bf <sinc_get_description>
c0008aa5:	83 c4 10             	add    esp,0x10
c0008aa8:	85 c0                	test   eax,eax
c0008aaa:	75 1d                	jne    c0008ac9 <src_get_description+0x32>
c0008aac:	83 ec 0c             	sub    esp,0xc
c0008aaf:	53                   	push   ebx
c0008ab0:	e8 f0 53 00 00       	call   c000dea5 <zoh_get_description>
c0008ab5:	83 c4 10             	add    esp,0x10
c0008ab8:	85 c0                	test   eax,eax
c0008aba:	75 0d                	jne    c0008ac9 <src_get_description+0x32>
c0008abc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008ac0:	83 c4 08             	add    esp,0x8
c0008ac3:	5b                   	pop    ebx
c0008ac4:	e9 39 0b 00 00       	jmp    c0009602 <linear_get_description>
c0008ac9:	83 c4 08             	add    esp,0x8
c0008acc:	5b                   	pop    ebx
c0008acd:	c3                   	ret    

c0008ace <src_get_version>:
c0008ace:	b8 60 62 02 c0       	mov    eax,0xc0026260
c0008ad3:	c3                   	ret    

c0008ad4 <src_is_valid_ratio>:
c0008ad4:	83 ec 14             	sub    esp,0x14
c0008ad7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008adb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008adf:	e8 23 fa ff ff       	call   c0008507 <is_bad_src_ratio>
c0008ae4:	85 c0                	test   eax,eax
c0008ae6:	0f 94 c0             	sete   al
c0008ae9:	83 c4 1c             	add    esp,0x1c
c0008aec:	0f b6 c0             	movzx  eax,al
c0008aef:	c3                   	ret    

c0008af0 <src_error>:
c0008af0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008af4:	31 c0                	xor    eax,eax
c0008af6:	85 d2                	test   edx,edx
c0008af8:	74 03                	je     c0008afd <src_error+0xd>
c0008afa:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008afd:	c3                   	ret    

c0008afe <src_strerror>:
c0008afe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b02:	31 c0                	xor    eax,eax
c0008b04:	83 fa 17             	cmp    edx,0x17
c0008b07:	77 07                	ja     c0008b10 <src_strerror+0x12>
c0008b09:	8b 04 95 c0 66 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9940]
c0008b10:	c3                   	ret    

c0008b11 <src_simple>:
c0008b11:	56                   	push   esi
c0008b12:	53                   	push   ebx
c0008b13:	83 ec 18             	sub    esp,0x18
c0008b16:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b1a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b1e:	50                   	push   eax
c0008b1f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b23:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b27:	e8 44 fe ff ff       	call   c0008970 <src_new>
c0008b2c:	83 c4 10             	add    esp,0x10
c0008b2f:	85 c0                	test   eax,eax
c0008b31:	75 06                	jne    c0008b39 <src_simple+0x28>
c0008b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b37:	eb 25                	jmp    c0008b5e <src_simple+0x4d>
c0008b39:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b40:	89 c3                	mov    ebx,eax
c0008b42:	50                   	push   eax
c0008b43:	50                   	push   eax
c0008b44:	56                   	push   esi
c0008b45:	53                   	push   ebx
c0008b46:	e8 9f fa ff ff       	call   c00085ea <src_process>
c0008b4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b4e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b52:	e8 57 fa ff ff       	call   c00085ae <src_delete>
c0008b57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b5b:	83 c4 10             	add    esp,0x10
c0008b5e:	83 c4 14             	add    esp,0x14
c0008b61:	5b                   	pop    ebx
c0008b62:	5e                   	pop    esi
c0008b63:	c3                   	ret    

c0008b64 <src_short_to_float_array>:
c0008b64:	53                   	push   ebx
c0008b65:	83 ec 18             	sub    esp,0x18
c0008b68:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b6c:	85 db                	test   ebx,ebx
c0008b6e:	74 54                	je     c0008bc4 <src_short_to_float_array+0x60>
c0008b70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b74:	4b                   	dec    ebx
c0008b75:	83 ec 0c             	sub    esp,0xc
c0008b78:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b7c:	50                   	push   eax
c0008b7d:	e8 41 c0 01 00       	call   c0024bc3 <__floatsidf>
c0008b82:	83 c4 10             	add    esp,0x10
c0008b85:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b89:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008b8d:	68 00 00 00 3f       	push   0x3f000000
c0008b92:	6a 00                	push   0x0
c0008b94:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b9c:	e8 bf b9 01 00       	call   c0024560 <__muldf3>
c0008ba1:	59                   	pop    ecx
c0008ba2:	59                   	pop    ecx
c0008ba3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ba7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008baf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb3:	e8 7b c2 01 00       	call   c0024e33 <__truncdfsf2>
c0008bb8:	83 c4 10             	add    esp,0x10
c0008bbb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bbf:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008bc2:	eb a8                	jmp    c0008b6c <src_short_to_float_array+0x8>
c0008bc4:	83 c4 18             	add    esp,0x18
c0008bc7:	5b                   	pop    ebx
c0008bc8:	c3                   	ret    

c0008bc9 <src_float_to_short_array>:
c0008bc9:	56                   	push   esi
c0008bca:	53                   	push   ebx
c0008bcb:	83 ec 14             	sub    esp,0x14
c0008bce:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008bd2:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bd6:	85 db                	test   ebx,ebx
c0008bd8:	0f 84 a4 00 00 00    	je     c0008c82 <src_float_to_short_array+0xb9>
c0008bde:	83 ec 0c             	sub    esp,0xc
c0008be1:	4b                   	dec    ebx
c0008be2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008be6:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008be9:	e8 69 c3 01 00       	call   c0024f57 <__extendsfdf2>
c0008bee:	83 c4 10             	add    esp,0x10
c0008bf1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008bf5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008bf9:	68 00 00 e0 41       	push   0x41e00000
c0008bfe:	6a 00                	push   0x0
c0008c00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c08:	e8 53 b9 01 00       	call   c0024560 <__muldf3>
c0008c0d:	83 c4 10             	add    esp,0x10
c0008c10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c18:	68 ff ff df 41       	push   0x41dfffff
c0008c1d:	68 00 00 c0 ff       	push   0xffc00000
c0008c22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c2a:	e8 fe c1 01 00       	call   c0024e2d <__gedf2>
c0008c2f:	83 c4 10             	add    esp,0x10
c0008c32:	85 c0                	test   eax,eax
c0008c34:	78 08                	js     c0008c3e <src_float_to_short_array+0x75>
c0008c36:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c3c:	eb 98                	jmp    c0008bd6 <src_float_to_short_array+0xd>
c0008c3e:	68 00 00 e0 c1       	push   0xc1e00000
c0008c43:	6a 00                	push   0x0
c0008c45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c4d:	e8 df c1 01 00       	call   c0024e31 <__ledf2>
c0008c52:	83 c4 10             	add    esp,0x10
c0008c55:	85 c0                	test   eax,eax
c0008c57:	7f 0b                	jg     c0008c64 <src_float_to_short_array+0x9b>
c0008c59:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c5f:	e9 72 ff ff ff       	jmp    c0008bd6 <src_float_to_short_array+0xd>
c0008c64:	50                   	push   eax
c0008c65:	50                   	push   eax
c0008c66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c6e:	e8 6d c3 01 00       	call   c0024fe0 <lrint>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	c1 f8 10             	sar    eax,0x10
c0008c79:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c7d:	e9 54 ff ff ff       	jmp    c0008bd6 <src_float_to_short_array+0xd>
c0008c82:	83 c4 14             	add    esp,0x14
c0008c85:	5b                   	pop    ebx
c0008c86:	5e                   	pop    esi
c0008c87:	c3                   	ret    

c0008c88 <src_int_to_float_array>:
c0008c88:	53                   	push   ebx
c0008c89:	83 ec 18             	sub    esp,0x18
c0008c8c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008c90:	85 db                	test   ebx,ebx
c0008c92:	74 52                	je     c0008ce6 <src_int_to_float_array+0x5e>
c0008c94:	83 ec 0c             	sub    esp,0xc
c0008c97:	4b                   	dec    ebx
c0008c98:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008c9c:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c9f:	e8 1f bf 01 00       	call   c0024bc3 <__floatsidf>
c0008ca4:	83 c4 10             	add    esp,0x10
c0008ca7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008caf:	68 00 00 00 3e       	push   0x3e000000
c0008cb4:	6a 00                	push   0x0
c0008cb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cbe:	e8 9d b8 01 00       	call   c0024560 <__muldf3>
c0008cc3:	59                   	pop    ecx
c0008cc4:	59                   	pop    ecx
c0008cc5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008cc9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008ccd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd5:	e8 59 c1 01 00       	call   c0024e33 <__truncdfsf2>
c0008cda:	83 c4 10             	add    esp,0x10
c0008cdd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008ce1:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008ce4:	eb aa                	jmp    c0008c90 <src_int_to_float_array+0x8>
c0008ce6:	83 c4 18             	add    esp,0x18
c0008ce9:	5b                   	pop    ebx
c0008cea:	c3                   	ret    

c0008ceb <src_float_to_int_array>:
c0008ceb:	56                   	push   esi
c0008cec:	53                   	push   ebx
c0008ced:	83 ec 14             	sub    esp,0x14
c0008cf0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008cf4:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008cf8:	85 db                	test   ebx,ebx
c0008cfa:	0f 84 a2 00 00 00    	je     c0008da2 <src_float_to_int_array+0xb7>
c0008d00:	83 ec 0c             	sub    esp,0xc
c0008d03:	4b                   	dec    ebx
c0008d04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d08:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d0b:	e8 47 c2 01 00       	call   c0024f57 <__extendsfdf2>
c0008d10:	83 c4 10             	add    esp,0x10
c0008d13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d17:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d1b:	68 00 00 e0 41       	push   0x41e00000
c0008d20:	6a 00                	push   0x0
c0008d22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d2a:	e8 31 b8 01 00       	call   c0024560 <__muldf3>
c0008d2f:	83 c4 10             	add    esp,0x10
c0008d32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d36:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d3a:	68 ff ff df 41       	push   0x41dfffff
c0008d3f:	68 00 00 c0 ff       	push   0xffc00000
c0008d44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d4c:	e8 dc c0 01 00       	call   c0024e2d <__gedf2>
c0008d51:	83 c4 10             	add    esp,0x10
c0008d54:	85 c0                	test   eax,eax
c0008d56:	78 09                	js     c0008d61 <src_float_to_int_array+0x76>
c0008d58:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d5f:	eb 97                	jmp    c0008cf8 <src_float_to_int_array+0xd>
c0008d61:	68 00 00 e0 c1       	push   0xc1e00000
c0008d66:	6a 00                	push   0x0
c0008d68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d70:	e8 bc c0 01 00       	call   c0024e31 <__ledf2>
c0008d75:	83 c4 10             	add    esp,0x10
c0008d78:	85 c0                	test   eax,eax
c0008d7a:	7f 0c                	jg     c0008d88 <src_float_to_int_array+0x9d>
c0008d7c:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008d83:	e9 70 ff ff ff       	jmp    c0008cf8 <src_float_to_int_array+0xd>
c0008d88:	50                   	push   eax
c0008d89:	50                   	push   eax
c0008d8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d92:	e8 49 c2 01 00       	call   c0024fe0 <lrint>
c0008d97:	83 c4 10             	add    esp,0x10
c0008d9a:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008d9d:	e9 56 ff ff ff       	jmp    c0008cf8 <src_float_to_int_array+0xd>
c0008da2:	83 c4 14             	add    esp,0x14
c0008da5:	5b                   	pop    ebx
c0008da6:	5e                   	pop    esi
c0008da7:	c3                   	ret    

c0008da8 <is_bad_src_ratio>:
c0008da8:	83 ec 1c             	sub    esp,0x1c
c0008dab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008daf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008db7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008dbb:	b8 00 00 00 00       	mov    eax,0x0
c0008dc0:	ba 00 00 70 3f       	mov    edx,0x3f700000
c0008dc5:	52                   	push   edx
c0008dc6:	50                   	push   eax
c0008dc7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dcb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dcf:	e8 5b c0 01 00       	call   c0024e2f <__ltdf2>
c0008dd4:	83 c4 10             	add    esp,0x10
c0008dd7:	85 c0                	test   eax,eax
c0008dd9:	78 20                	js     c0008dfb <is_bad_src_ratio+0x53>
c0008ddb:	b8 00 00 00 00       	mov    eax,0x0
c0008de0:	ba 00 00 70 40       	mov    edx,0x40700000
c0008de5:	52                   	push   edx
c0008de6:	50                   	push   eax
c0008de7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008deb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008def:	e8 1d c0 01 00       	call   c0024e11 <__gtdf2>
c0008df4:	83 c4 10             	add    esp,0x10
c0008df7:	85 c0                	test   eax,eax
c0008df9:	7e 07                	jle    c0008e02 <is_bad_src_ratio+0x5a>
c0008dfb:	b8 01 00 00 00       	mov    eax,0x1
c0008e00:	eb 05                	jmp    c0008e07 <is_bad_src_ratio+0x5f>
c0008e02:	b8 00 00 00 00       	mov    eax,0x0
c0008e07:	83 c4 1c             	add    esp,0x1c
c0008e0a:	c3                   	ret    

c0008e0b <fmod_one>:
c0008e0b:	83 ec 2c             	sub    esp,0x2c
c0008e0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e16:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008e1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008e1e:	83 ec 08             	sub    esp,0x8
c0008e21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e29:	e8 b2 c1 01 00       	call   c0024fe0 <lrint>
c0008e2e:	83 c4 10             	add    esp,0x10
c0008e31:	83 ec 0c             	sub    esp,0xc
c0008e34:	50                   	push   eax
c0008e35:	e8 89 bd 01 00       	call   c0024bc3 <__floatsidf>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	52                   	push   edx
c0008e3e:	50                   	push   eax
c0008e3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e47:	e8 e8 b6 01 00       	call   c0024534 <__subdf3>
c0008e4c:	83 c4 10             	add    esp,0x10
c0008e4f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008e53:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008e57:	b8 00 00 00 00       	mov    eax,0x0
c0008e5c:	ba 00 00 00 00       	mov    edx,0x0
c0008e61:	52                   	push   edx
c0008e62:	50                   	push   eax
c0008e63:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e6b:	e8 bf bf 01 00       	call   c0024e2f <__ltdf2>
c0008e70:	83 c4 10             	add    esp,0x10
c0008e73:	85 c0                	test   eax,eax
c0008e75:	79 1e                	jns    c0008e95 <fmod_one+0x8a>
c0008e77:	b8 00 00 00 00       	mov    eax,0x0
c0008e7c:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c0008e81:	52                   	push   edx
c0008e82:	50                   	push   eax
c0008e83:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e87:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e8b:	e8 53 b0 01 00       	call   c0023ee3 <__adddf3>
c0008e90:	83 c4 10             	add    esp,0x10
c0008e93:	eb 08                	jmp    c0008e9d <fmod_one+0x92>
c0008e95:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008e99:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e9d:	83 c4 2c             	add    esp,0x2c
c0008ea0:	c3                   	ret    

c0008ea1 <linear_vari_process>:
c0008ea1:	55                   	push   ebp
c0008ea2:	57                   	push   edi
c0008ea3:	56                   	push   esi
c0008ea4:	53                   	push   ebx
c0008ea5:	83 ec 3c             	sub    esp,0x3c
c0008ea8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008eac:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008eb4:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008eb8:	0f 8e f7 06 00 00    	jle    c00095b5 <linear_vari_process+0x714>
c0008ebe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ec2:	c7 44 24 28 05 00 00 00 	mov    DWORD PTR [esp+0x28],0x5
c0008eca:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ecd:	85 db                	test   ebx,ebx
c0008ecf:	0f 84 e0 06 00 00    	je     c00095b5 <linear_vari_process+0x714>
c0008ed5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008ed8:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008edc:	74 19                	je     c0008ef7 <linear_vari_process+0x56>
c0008ede:	31 d2                	xor    edx,edx
c0008ee0:	39 c2                	cmp    edx,eax
c0008ee2:	7d 0c                	jge    c0008ef0 <linear_vari_process+0x4f>
c0008ee4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008ee6:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008ee9:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008eed:	42                   	inc    edx
c0008eee:	eb f0                	jmp    c0008ee0 <linear_vari_process+0x3f>
c0008ef0:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008ef7:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008efa:	0f af d0             	imul   edx,eax
c0008efd:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008f00:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008f04:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008f0b:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008f0e:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008f15:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008f19:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008f1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f1e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f22:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f26:	57                   	push   edi
c0008f27:	57                   	push   edi
c0008f28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f30:	e8 73 fe ff ff       	call   c0008da8 <is_bad_src_ratio>
c0008f35:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0008f39:	83 c4 10             	add    esp,0x10
c0008f3c:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0008f41:	0f 85 66 06 00 00    	jne    c00095ad <linear_vari_process+0x70c>
c0008f47:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008f4b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008f4e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008f51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f55:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f59:	68 00 00 f0 3f       	push   0x3ff00000
c0008f5e:	6a 00                	push   0x0
c0008f60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f68:	e8 c2 be 01 00       	call   c0024e2f <__ltdf2>
c0008f6d:	83 c4 10             	add    esp,0x10
c0008f70:	85 c0                	test   eax,eax
c0008f72:	0f 89 89 02 00 00    	jns    c0009201 <linear_vari_process+0x360>
c0008f78:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008f7b:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008f7e:	0f 8d 7d 02 00 00    	jge    c0009201 <linear_vari_process+0x360>
c0008f84:	83 ec 0c             	sub    esp,0xc
c0008f87:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008f8a:	e8 34 bc 01 00       	call   c0024bc3 <__floatsidf>
c0008f8f:	83 c4 10             	add    esp,0x10
c0008f92:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f95:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008f99:	68 00 00 f0 3f       	push   0x3ff00000
c0008f9e:	6a 00                	push   0x0
c0008fa0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fa4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fa8:	e8 36 af 01 00       	call   c0023ee3 <__adddf3>
c0008fad:	83 c4 10             	add    esp,0x10
c0008fb0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008fb4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008fb8:	52                   	push   edx
c0008fb9:	50                   	push   eax
c0008fba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fbe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fc2:	e8 99 b5 01 00       	call   c0024560 <__muldf3>
c0008fc7:	5d                   	pop    ebp
c0008fc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008fcc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008fd0:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008fd3:	e8 eb bb 01 00       	call   c0024bc3 <__floatsidf>
c0008fd8:	83 c4 10             	add    esp,0x10
c0008fdb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008fdf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008fe3:	52                   	push   edx
c0008fe4:	50                   	push   eax
c0008fe5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fe9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fed:	e8 f1 ae 01 00       	call   c0023ee3 <__adddf3>
c0008ff2:	59                   	pop    ecx
c0008ff3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ff7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008ffb:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008ffe:	e8 c0 bb 01 00       	call   c0024bc3 <__floatsidf>
c0009003:	83 c4 10             	add    esp,0x10
c0009006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000900a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000900e:	52                   	push   edx
c000900f:	50                   	push   eax
c0009010:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009014:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009018:	e8 10 be 01 00       	call   c0024e2d <__gedf2>
c000901d:	83 c4 10             	add    esp,0x10
c0009020:	85 c0                	test   eax,eax
c0009022:	0f 89 d9 01 00 00    	jns    c0009201 <linear_vari_process+0x360>
c0009028:	85 ff                	test   edi,edi
c000902a:	0f 8e f4 00 00 00    	jle    c0009124 <linear_vari_process+0x283>
c0009030:	83 ec 10             	sub    esp,0x10
c0009033:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009036:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009039:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000903d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009040:	ff 30                	push   DWORD PTR [eax]
c0009042:	e8 ed b4 01 00       	call   c0024534 <__subdf3>
c0009047:	83 c4 18             	add    esp,0x18
c000904a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000904e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009052:	52                   	push   edx
c0009053:	50                   	push   eax
c0009054:	e8 67 bf 01 00       	call   c0024fc0 <fabs>
c0009059:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000905d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009061:	83 c4 10             	add    esp,0x10
c0009064:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009069:	68 23 42 92 0c       	push   0xc924223
c000906e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009072:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009076:	e8 96 bd 01 00       	call   c0024e11 <__gtdf2>
c000907b:	83 c4 10             	add    esp,0x10
c000907e:	85 c0                	test   eax,eax
c0009080:	0f 8e 9e 00 00 00    	jle    c0009124 <linear_vari_process+0x283>
c0009086:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000908a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000908d:	8b 00                	mov    eax,DWORD PTR [eax]
c000908f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009093:	89 04 24             	mov    DWORD PTR [esp],eax
c0009096:	52                   	push   edx
c0009097:	50                   	push   eax
c0009098:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000909b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000909e:	e8 91 b4 01 00       	call   c0024534 <__subdf3>
c00090a3:	59                   	pop    ecx
c00090a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00090a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00090ac:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00090af:	e8 0f bb 01 00       	call   c0024bc3 <__floatsidf>
c00090b4:	83 c4 10             	add    esp,0x10
c00090b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00090bf:	52                   	push   edx
c00090c0:	50                   	push   eax
c00090c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c9:	e8 92 b4 01 00       	call   c0024560 <__muldf3>
c00090ce:	5f                   	pop    edi
c00090cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00090d3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00090d7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00090da:	e8 e4 ba 01 00       	call   c0024bc3 <__floatsidf>
c00090df:	83 c4 10             	add    esp,0x10
c00090e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00090ea:	52                   	push   edx
c00090eb:	50                   	push   eax
c00090ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090f4:	e8 4b b7 01 00       	call   c0024844 <__divdf3>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009100:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009104:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009108:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000910c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009110:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009114:	e8 ca ad 01 00       	call   c0023ee3 <__adddf3>
c0009119:	83 c4 10             	add    esp,0x10
c000911c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009120:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009124:	31 ff                	xor    edi,edi
c0009126:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009129:	0f 8e 9d 00 00 00    	jle    c00091cc <linear_vari_process+0x32b>
c000912f:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009132:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009136:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009139:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000913d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009140:	8b 06                	mov    eax,DWORD PTR [esi]
c0009142:	52                   	push   edx
c0009143:	52                   	push   edx
c0009144:	55                   	push   ebp
c0009145:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c0009148:	47                   	inc    edi
c0009149:	e8 2a a7 01 00       	call   c0023878 <__subsf3>
c000914e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009151:	e8 01 be 01 00       	call   c0024f57 <__extendsfdf2>
c0009156:	83 c4 10             	add    esp,0x10
c0009159:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009161:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009165:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009169:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000916d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009171:	e8 ea b3 01 00       	call   c0024560 <__muldf3>
c0009176:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009179:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000917d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009181:	e8 d1 bd 01 00       	call   c0024f57 <__extendsfdf2>
c0009186:	83 c4 10             	add    esp,0x10
c0009189:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000918d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009191:	52                   	push   edx
c0009192:	50                   	push   eax
c0009193:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009197:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000919b:	e8 43 ad 01 00       	call   c0023ee3 <__adddf3>
c00091a0:	59                   	pop    ecx
c00091a1:	5d                   	pop    ebp
c00091a2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00091a6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00091aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091b2:	e8 7c bc 01 00       	call   c0024e33 <__truncdfsf2>
c00091b7:	83 c4 10             	add    esp,0x10
c00091ba:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00091bd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00091c1:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c00091c4:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c00091c7:	e9 5a ff ff ff       	jmp    c0009126 <linear_vari_process+0x285>
c00091cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091d4:	68 00 00 f0 3f       	push   0x3ff00000
c00091d9:	6a 00                	push   0x0
c00091db:	e8 64 b6 01 00       	call   c0024844 <__divdf3>
c00091e0:	83 c4 10             	add    esp,0x10
c00091e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091ea:	52                   	push   edx
c00091eb:	50                   	push   eax
c00091ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f4:	e8 ea ac 01 00       	call   c0023ee3 <__adddf3>
c00091f9:	83 c4 10             	add    esp,0x10
c00091fc:	e9 50 fd ff ff       	jmp    c0008f51 <linear_vari_process+0xb0>
c0009201:	50                   	push   eax
c0009202:	50                   	push   eax
c0009203:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009207:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000920b:	e8 fb fb ff ff       	call   c0008e0b <fmod_one>
c0009210:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009213:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009217:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000921b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000921f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009223:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009227:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000922b:	e8 04 b3 01 00       	call   c0024534 <__subdf3>
c0009230:	83 c4 18             	add    esp,0x18
c0009233:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009237:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000923b:	52                   	push   edx
c000923c:	50                   	push   eax
c000923d:	e8 9e bd 01 00       	call   c0024fe0 <lrint>
c0009242:	83 c4 10             	add    esp,0x10
c0009245:	0f af f8             	imul   edi,eax
c0009248:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000924b:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c000924e:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009251:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009254:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009257:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000925b:	0f 8d b4 02 00 00    	jge    c0009515 <linear_vari_process+0x674>
c0009261:	83 ec 0c             	sub    esp,0xc
c0009264:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009267:	e8 57 b9 01 00       	call   c0024bc3 <__floatsidf>
c000926c:	83 c4 10             	add    esp,0x10
c000926f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009273:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009277:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000927b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000927f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009283:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009287:	e8 d4 b2 01 00       	call   c0024560 <__muldf3>
c000928c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000928f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009293:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009297:	e8 27 b9 01 00       	call   c0024bc3 <__floatsidf>
c000929c:	83 c4 10             	add    esp,0x10
c000929f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092a7:	52                   	push   edx
c00092a8:	50                   	push   eax
c00092a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092b1:	e8 2d ac 01 00       	call   c0023ee3 <__adddf3>
c00092b6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092bd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092c1:	e8 fd b8 01 00       	call   c0024bc3 <__floatsidf>
c00092c6:	83 c4 10             	add    esp,0x10
c00092c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092d1:	52                   	push   edx
c00092d2:	50                   	push   eax
c00092d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092db:	e8 4f bb 01 00       	call   c0024e2f <__ltdf2>
c00092e0:	83 c4 10             	add    esp,0x10
c00092e3:	85 c0                	test   eax,eax
c00092e5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00092e9:	0f 89 26 02 00 00    	jns    c0009515 <linear_vari_process+0x674>
c00092ef:	85 c9                	test   ecx,ecx
c00092f1:	0f 8e f5 00 00 00    	jle    c00093ec <linear_vari_process+0x54b>
c00092f7:	83 ec 10             	sub    esp,0x10
c00092fa:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092fd:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009300:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0009304:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009307:	ff 30                	push   DWORD PTR [eax]
c0009309:	e8 26 b2 01 00       	call   c0024534 <__subdf3>
c000930e:	83 c4 18             	add    esp,0x18
c0009311:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009315:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009319:	52                   	push   edx
c000931a:	50                   	push   eax
c000931b:	e8 a0 bc 01 00       	call   c0024fc0 <fabs>
c0009320:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009324:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009328:	83 c4 10             	add    esp,0x10
c000932b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009330:	68 23 42 92 0c       	push   0xc924223
c0009335:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009339:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000933d:	e8 cf ba 01 00       	call   c0024e11 <__gtdf2>
c0009342:	83 c4 10             	add    esp,0x10
c0009345:	85 c0                	test   eax,eax
c0009347:	0f 8e 9f 00 00 00    	jle    c00093ec <linear_vari_process+0x54b>
c000934d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009351:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009354:	8b 00                	mov    eax,DWORD PTR [eax]
c0009356:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000935a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000935e:	52                   	push   edx
c000935f:	50                   	push   eax
c0009360:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009363:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009366:	e8 c9 b1 01 00       	call   c0024534 <__subdf3>
c000936b:	5f                   	pop    edi
c000936c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009370:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009374:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009377:	e8 47 b8 01 00       	call   c0024bc3 <__floatsidf>
c000937c:	83 c4 10             	add    esp,0x10
c000937f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009383:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009387:	52                   	push   edx
c0009388:	50                   	push   eax
c0009389:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000938d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009391:	e8 ca b1 01 00       	call   c0024560 <__muldf3>
c0009396:	5d                   	pop    ebp
c0009397:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000939b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000939f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00093a2:	e8 1c b8 01 00       	call   c0024bc3 <__floatsidf>
c00093a7:	83 c4 10             	add    esp,0x10
c00093aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093b2:	52                   	push   edx
c00093b3:	50                   	push   eax
c00093b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093bc:	e8 83 b4 01 00       	call   c0024844 <__divdf3>
c00093c1:	83 c4 10             	add    esp,0x10
c00093c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093c8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093cc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093dc:	e8 02 ab 01 00       	call   c0023ee3 <__adddf3>
c00093e1:	83 c4 10             	add    esp,0x10
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	31 ff                	xor    edi,edi
c00093ee:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00093f1:	39 f8                	cmp    eax,edi
c00093f3:	0f 8e ac 00 00 00    	jle    c00094a5 <linear_vari_process+0x604>
c00093f9:	8b 16                	mov    edx,DWORD PTR [esi]
c00093fb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00093fe:	29 c1                	sub    ecx,eax
c0009400:	89 c8                	mov    eax,ecx
c0009402:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009405:	01 f8                	add    eax,edi
c0009407:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000940b:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000940e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009411:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009415:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009418:	51                   	push   ecx
c0009419:	01 f8                	add    eax,edi
c000941b:	51                   	push   ecx
c000941c:	47                   	inc    edi
c000941d:	55                   	push   ebp
c000941e:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c0009421:	e8 52 a4 01 00       	call   c0023878 <__subsf3>
c0009426:	89 04 24             	mov    DWORD PTR [esp],eax
c0009429:	e8 29 bb 01 00       	call   c0024f57 <__extendsfdf2>
c000942e:	83 c4 10             	add    esp,0x10
c0009431:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009435:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009439:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000943d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009441:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009445:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009449:	e8 12 b1 01 00       	call   c0024560 <__muldf3>
c000944e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009451:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009455:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009459:	e8 f9 ba 01 00       	call   c0024f57 <__extendsfdf2>
c000945e:	83 c4 10             	add    esp,0x10
c0009461:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009465:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009469:	52                   	push   edx
c000946a:	50                   	push   eax
c000946b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000946f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009473:	e8 6b aa 01 00       	call   c0023ee3 <__adddf3>
c0009478:	5d                   	pop    ebp
c0009479:	59                   	pop    ecx
c000947a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000947e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009482:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009486:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000948a:	e8 a4 b9 01 00       	call   c0024e33 <__truncdfsf2>
c000948f:	83 c4 10             	add    esp,0x10
c0009492:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009496:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000949a:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000949d:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c00094a0:	e9 49 ff ff ff       	jmp    c00093ee <linear_vari_process+0x54d>
c00094a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ad:	68 00 00 f0 3f       	push   0x3ff00000
c00094b2:	6a 00                	push   0x0
c00094b4:	e8 8b b3 01 00       	call   c0024844 <__divdf3>
c00094b9:	83 c4 10             	add    esp,0x10
c00094bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00094c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00094c4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00094c8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00094cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094d4:	e8 0a aa 01 00       	call   c0023ee3 <__adddf3>
c00094d9:	59                   	pop    ecx
c00094da:	5f                   	pop    edi
c00094db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094eb:	e8 1b f9 ff ff       	call   c0008e0b <fmod_one>
c00094f0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00094f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009503:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009507:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000950b:	e8 24 b0 01 00       	call   c0024534 <__subdf3>
c0009510:	e9 1b fd ff ff       	jmp    c0009230 <linear_vari_process+0x38f>
c0009515:	39 fd                	cmp    ebp,edi
c0009517:	7d 38                	jge    c0009551 <linear_vari_process+0x6b0>
c0009519:	83 ec 0c             	sub    esp,0xc
c000951c:	89 f8                	mov    eax,edi
c000951e:	29 e8                	sub    eax,ebp
c0009520:	99                   	cdq    
c0009521:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009524:	50                   	push   eax
c0009525:	e8 99 b6 01 00       	call   c0024bc3 <__floatsidf>
c000952a:	83 c4 10             	add    esp,0x10
c000952d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009531:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009535:	52                   	push   edx
c0009536:	50                   	push   eax
c0009537:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000953b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000953f:	e8 9f a9 01 00       	call   c0023ee3 <__adddf3>
c0009544:	83 c4 10             	add    esp,0x10
c0009547:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000954a:	89 04 24             	mov    DWORD PTR [esp],eax
c000954d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009551:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009555:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009558:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000955c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000955f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009562:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009565:	85 c0                	test   eax,eax
c0009567:	7f 27                	jg     c0009590 <linear_vari_process+0x6ef>
c0009569:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000956d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009571:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009575:	89 01                	mov    DWORD PTR [ecx],eax
c0009577:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000957a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000957d:	99                   	cdq    
c000957e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009581:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009584:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009587:	99                   	cdq    
c0009588:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000958b:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000958e:	eb 25                	jmp    c00095b5 <linear_vari_process+0x714>
c0009590:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0009593:	31 d2                	xor    edx,edx
c0009595:	29 c8                	sub    eax,ecx
c0009597:	c1 e0 02             	shl    eax,0x2
c000959a:	39 d1                	cmp    ecx,edx
c000959c:	7e cb                	jle    c0009569 <linear_vari_process+0x6c8>
c000959e:	8b 3e                	mov    edi,DWORD PTR [esi]
c00095a0:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00095a3:	83 c0 04             	add    eax,0x4
c00095a6:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095aa:	42                   	inc    edx
c00095ab:	eb ed                	jmp    c000959a <linear_vari_process+0x6f9>
c00095ad:	c7 44 24 28 16 00 00 00 	mov    DWORD PTR [esp+0x28],0x16
c00095b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00095b9:	83 c4 3c             	add    esp,0x3c
c00095bc:	5b                   	pop    ebx
c00095bd:	5e                   	pop    esi
c00095be:	5f                   	pop    edi
c00095bf:	5d                   	pop    ebp
c00095c0:	c3                   	ret    

c00095c1 <linear_reset>:
c00095c1:	83 ec 0c             	sub    esp,0xc
c00095c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095cb:	85 c0                	test   eax,eax
c00095cd:	74 20                	je     c00095ef <linear_reset+0x2e>
c00095cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095d2:	83 c0 1c             	add    eax,0x1c
c00095d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00095d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00095df:	c1 e2 02             	shl    edx,0x2
c00095e2:	51                   	push   ecx
c00095e3:	52                   	push   edx
c00095e4:	6a 00                	push   0x0
c00095e6:	50                   	push   eax
c00095e7:	e8 e2 70 ff ff       	call   c00006ce <memset>
c00095ec:	83 c4 10             	add    esp,0x10
c00095ef:	83 c4 0c             	add    esp,0xc
c00095f2:	c3                   	ret    

c00095f3 <linear_get_name>:
c00095f3:	31 c0                	xor    eax,eax
c00095f5:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095fa:	75 05                	jne    c0009601 <linear_get_name+0xe>
c00095fc:	b8 20 67 02 c0       	mov    eax,0xc0026720
c0009601:	c3                   	ret    

c0009602 <linear_get_description>:
c0009602:	31 c0                	xor    eax,eax
c0009604:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009609:	75 05                	jne    c0009610 <linear_get_description+0xe>
c000960b:	b8 34 67 02 c0       	mov    eax,0xc0026734
c0009610:	c3                   	ret    

c0009611 <linear_set_converter>:
c0009611:	53                   	push   ebx
c0009612:	b8 0a 00 00 00       	mov    eax,0xa
c0009617:	83 ec 08             	sub    esp,0x8
c000961a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000961e:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009623:	75 6e                	jne    c0009693 <linear_set_converter+0x82>
c0009625:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009628:	85 c0                	test   eax,eax
c000962a:	74 13                	je     c000963f <linear_set_converter+0x2e>
c000962c:	83 ec 0c             	sub    esp,0xc
c000962f:	50                   	push   eax
c0009630:	e8 23 5b 00 00       	call   c000f158 <free>
c0009635:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000963c:	83 c4 10             	add    esp,0x10
c000963f:	50                   	push   eax
c0009640:	50                   	push   eax
c0009641:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009644:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000964b:	50                   	push   eax
c000964c:	6a 01                	push   0x1
c000964e:	e8 25 5b 00 00       	call   c000f178 <calloc>
c0009653:	83 c4 10             	add    esp,0x10
c0009656:	89 c2                	mov    edx,eax
c0009658:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000965b:	85 d2                	test   edx,edx
c000965d:	b8 01 00 00 00       	mov    eax,0x1
c0009662:	74 2f                	je     c0009693 <linear_set_converter+0x82>
c0009664:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009667:	83 ec 0c             	sub    esp,0xc
c000966a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000966d:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009673:	c7 43 24 a1 8e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008ea1
c000967a:	c7 43 20 a1 8e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008ea1
c0009681:	c7 43 28 c1 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095c1
c0009688:	53                   	push   ebx
c0009689:	e8 33 ff ff ff       	call   c00095c1 <linear_reset>
c000968e:	83 c4 10             	add    esp,0x10
c0009691:	31 c0                	xor    eax,eax
c0009693:	83 c4 08             	add    esp,0x8
c0009696:	5b                   	pop    ebx
c0009697:	c3                   	ret    

c0009698 <is_bad_src_ratio>:
c0009698:	83 ec 1c             	sub    esp,0x1c
c000969b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000969f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096a3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00096a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00096ab:	b8 00 00 00 00       	mov    eax,0x0
c00096b0:	ba 00 00 70 3f       	mov    edx,0x3f700000
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 6b b7 01 00       	call   c0024e2f <__ltdf2>
c00096c4:	83 c4 10             	add    esp,0x10
c00096c7:	85 c0                	test   eax,eax
c00096c9:	78 20                	js     c00096eb <is_bad_src_ratio+0x53>
c00096cb:	b8 00 00 00 00       	mov    eax,0x0
c00096d0:	ba 00 00 70 40       	mov    edx,0x40700000
c00096d5:	52                   	push   edx
c00096d6:	50                   	push   eax
c00096d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096df:	e8 2d b7 01 00       	call   c0024e11 <__gtdf2>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	85 c0                	test   eax,eax
c00096e9:	7e 07                	jle    c00096f2 <is_bad_src_ratio+0x5a>
c00096eb:	b8 01 00 00 00       	mov    eax,0x1
c00096f0:	eb 05                	jmp    c00096f7 <is_bad_src_ratio+0x5f>
c00096f2:	b8 00 00 00 00       	mov    eax,0x0
c00096f7:	83 c4 1c             	add    esp,0x1c
c00096fa:	c3                   	ret    

c00096fb <int_to_fp>:
c00096fb:	c1 e0 0c             	shl    eax,0xc
c00096fe:	c3                   	ret    

c00096ff <fp_to_int>:
c00096ff:	c1 f8 0c             	sar    eax,0xc
c0009702:	c3                   	ret    

c0009703 <fp_fraction_part>:
c0009703:	25 ff 0f 00 00       	and    eax,0xfff
c0009708:	c3                   	ret    

c0009709 <fp_to_double>:
c0009709:	83 ec 1c             	sub    esp,0x1c
c000970c:	e8 f2 ff ff ff       	call   c0009703 <fp_fraction_part>
c0009711:	83 ec 0c             	sub    esp,0xc
c0009714:	50                   	push   eax
c0009715:	e8 a9 b4 01 00       	call   c0024bc3 <__floatsidf>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009721:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009725:	68 00 00 30 3f       	push   0x3f300000
c000972a:	6a 00                	push   0x0
c000972c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009730:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009734:	e8 27 ae 01 00       	call   c0024560 <__muldf3>
c0009739:	83 c4 2c             	add    esp,0x2c
c000973c:	c3                   	ret    

c000973d <calc_output_single>:
c000973d:	55                   	push   ebp
c000973e:	57                   	push   edi
c000973f:	56                   	push   esi
c0009740:	89 c6                	mov    esi,eax
c0009742:	53                   	push   ebx
c0009743:	89 d3                	mov    ebx,edx
c0009745:	83 ec 4c             	sub    esp,0x4c
c0009748:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000974c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000974f:	e8 a7 ff ff ff       	call   c00096fb <int_to_fp>
c0009754:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009757:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000975b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000975f:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009763:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009766:	99                   	cdq    
c0009767:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000976f:	f7 fb                	idiv   ebx
c0009771:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009779:	89 da                	mov    edx,ebx
c000977b:	0f af d0             	imul   edx,eax
c000977e:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009782:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009786:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000978a:	29 c2                	sub    edx,eax
c000978c:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000978f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009793:	83 c5 04             	add    ebp,0x4
c0009796:	e8 6e ff ff ff       	call   c0009709 <fp_to_double>
c000979b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000979f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00097a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097a7:	e8 53 ff ff ff       	call   c00096ff <fp_to_int>
c00097ac:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c00097af:	52                   	push   edx
c00097b0:	52                   	push   edx
c00097b1:	51                   	push   ecx
c00097b2:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c00097b6:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00097ba:	e8 b9 a0 01 00       	call   c0023878 <__subsf3>
c00097bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00097c2:	e8 90 b7 01 00       	call   c0024f57 <__extendsfdf2>
c00097c7:	83 c4 10             	add    esp,0x10
c00097ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097ce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097da:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097e2:	e8 79 ad 01 00       	call   c0024560 <__muldf3>
c00097e7:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00097eb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00097ef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00097f2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00097f6:	e8 5c b7 01 00       	call   c0024f57 <__extendsfdf2>
c00097fb:	83 c4 10             	add    esp,0x10
c00097fe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009802:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009806:	52                   	push   edx
c0009807:	50                   	push   eax
c0009808:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000980c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009810:	e8 ce a6 01 00       	call   c0023ee3 <__adddf3>
c0009815:	59                   	pop    ecx
c0009816:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000981a:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000981e:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009824:	e8 2e b7 01 00       	call   c0024f57 <__extendsfdf2>
c0009829:	83 c4 10             	add    esp,0x10
c000982c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009830:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009834:	52                   	push   edx
c0009835:	50                   	push   eax
c0009836:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000983a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000983e:	e8 1d ad 01 00       	call   c0024560 <__muldf3>
c0009843:	83 c4 10             	add    esp,0x10
c0009846:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000984a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000984e:	52                   	push   edx
c000984f:	50                   	push   eax
c0009850:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009854:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009858:	e8 86 a6 01 00       	call   c0023ee3 <__adddf3>
c000985d:	83 c4 10             	add    esp,0x10
c0009860:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009864:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009868:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c000986c:	0f 89 1d ff ff ff    	jns    c000978f <calc_output_single+0x52>
c0009872:	89 d9                	mov    ecx,ebx
c0009874:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009878:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000987c:	89 dd                	mov    ebp,ebx
c000987e:	29 c8                	sub    eax,ecx
c0009880:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009888:	99                   	cdq    
c0009889:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009891:	f7 fb                	idiv   ebx
c0009893:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009897:	0f af e8             	imul   ebp,eax
c000989a:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c000989e:	01 cd                	add    ebp,ecx
c00098a0:	8d 34 86             	lea    esi,[esi+eax*4]
c00098a3:	89 e8                	mov    eax,ebp
c00098a5:	83 ee 04             	sub    esi,0x4
c00098a8:	e8 5c fe ff ff       	call   c0009709 <fp_to_double>
c00098ad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098b1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098b5:	89 e8                	mov    eax,ebp
c00098b7:	29 dd                	sub    ebp,ebx
c00098b9:	e8 41 fe ff ff       	call   c00096ff <fp_to_int>
c00098be:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c00098c1:	52                   	push   edx
c00098c2:	52                   	push   edx
c00098c3:	51                   	push   ecx
c00098c4:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c00098c8:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00098cc:	e8 a7 9f 01 00       	call   c0023878 <__subsf3>
c00098d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00098d4:	e8 7e b6 01 00       	call   c0024f57 <__extendsfdf2>
c00098d9:	83 c4 10             	add    esp,0x10
c00098dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098e0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098f4:	e8 67 ac 01 00       	call   c0024560 <__muldf3>
c00098f9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00098fd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009901:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009904:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009908:	e8 4a b6 01 00       	call   c0024f57 <__extendsfdf2>
c000990d:	83 c4 10             	add    esp,0x10
c0009910:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009914:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009918:	52                   	push   edx
c0009919:	50                   	push   eax
c000991a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000991e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009922:	e8 bc a5 01 00       	call   c0023ee3 <__adddf3>
c0009927:	59                   	pop    ecx
c0009928:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000992c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009930:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009936:	e8 1c b6 01 00       	call   c0024f57 <__extendsfdf2>
c000993b:	83 c4 10             	add    esp,0x10
c000993e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009942:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009946:	52                   	push   edx
c0009947:	50                   	push   eax
c0009948:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000994c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009950:	e8 0b ac 01 00       	call   c0024560 <__muldf3>
c0009955:	83 c4 10             	add    esp,0x10
c0009958:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000995c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009960:	52                   	push   edx
c0009961:	50                   	push   eax
c0009962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000996a:	e8 74 a5 01 00       	call   c0023ee3 <__adddf3>
c000996f:	83 c4 10             	add    esp,0x10
c0009972:	85 ed                	test   ebp,ebp
c0009974:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009978:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000997c:	0f 8f 21 ff ff ff    	jg     c00098a3 <calc_output_single+0x166>
c0009982:	52                   	push   edx
c0009983:	50                   	push   eax
c0009984:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009988:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000998c:	e8 52 a5 01 00       	call   c0023ee3 <__adddf3>
c0009991:	83 c4 5c             	add    esp,0x5c
c0009994:	5b                   	pop    ebx
c0009995:	5e                   	pop    esi
c0009996:	5f                   	pop    edi
c0009997:	5d                   	pop    ebp
c0009998:	c3                   	ret    

c0009999 <calc_output_stereo>:
c0009999:	55                   	push   ebp
c000999a:	89 cd                	mov    ebp,ecx
c000999c:	57                   	push   edi
c000999d:	56                   	push   esi
c000999e:	53                   	push   ebx
c000999f:	89 c3                	mov    ebx,eax
c00099a1:	83 ec 6c             	sub    esp,0x6c
c00099a4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00099a8:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00099af:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c00099b6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00099ba:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00099be:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00099c1:	e8 35 fd ff ff       	call   c00096fb <int_to_fp>
c00099c6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00099ce:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099d2:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00099da:	29 c8                	sub    eax,ecx
c00099dc:	99                   	cdq    
c00099dd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c00099e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00099e5:	0f af d0             	imul   edx,eax
c00099e8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00099eb:	31 d2                	xor    edx,edx
c00099ed:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00099f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00099f5:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c00099f8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00099fc:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c00099ff:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009a03:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009a07:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009a0a:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009a0f:	29 c1                	sub    ecx,eax
c0009a11:	31 c0                	xor    eax,eax
c0009a13:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009a16:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009a1a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a1e:	83 c7 08             	add    edi,0x8
c0009a21:	e8 e3 fc ff ff       	call   c0009709 <fp_to_double>
c0009a26:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009a2a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009a2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a32:	e8 c8 fc ff ff       	call   c00096ff <fp_to_int>
c0009a37:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009a3a:	52                   	push   edx
c0009a3b:	52                   	push   edx
c0009a3c:	51                   	push   ecx
c0009a3d:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009a41:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009a45:	e8 2e 9e 01 00       	call   c0023878 <__subsf3>
c0009a4a:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a4d:	e8 05 b5 01 00       	call   c0024f57 <__extendsfdf2>
c0009a52:	83 c4 10             	add    esp,0x10
c0009a55:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a59:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a5d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a61:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a65:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a69:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a6d:	e8 ee aa 01 00       	call   c0024560 <__muldf3>
c0009a72:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a76:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a7a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a7d:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a81:	e8 d1 b4 01 00       	call   c0024f57 <__extendsfdf2>
c0009a86:	83 c4 10             	add    esp,0x10
c0009a89:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a8d:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a91:	52                   	push   edx
c0009a92:	50                   	push   eax
c0009a93:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a97:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a9b:	e8 43 a4 01 00       	call   c0023ee3 <__adddf3>
c0009aa0:	59                   	pop    ecx
c0009aa1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009aa5:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009aa9:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009aaf:	e8 a3 b4 01 00       	call   c0024f57 <__extendsfdf2>
c0009ab4:	83 c4 10             	add    esp,0x10
c0009ab7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009abb:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009abf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ac3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ac7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009acb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009acf:	e8 8c aa 01 00       	call   c0024560 <__muldf3>
c0009ad4:	83 c4 10             	add    esp,0x10
c0009ad7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009adb:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009adf:	52                   	push   edx
c0009ae0:	50                   	push   eax
c0009ae1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ae5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ae9:	e8 f5 a3 01 00       	call   c0023ee3 <__adddf3>
c0009aee:	59                   	pop    ecx
c0009aef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009af3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009af7:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009afd:	e8 55 b4 01 00       	call   c0024f57 <__extendsfdf2>
c0009b02:	83 c4 10             	add    esp,0x10
c0009b05:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009b09:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009b0d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009b11:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009b15:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009b19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009b1d:	e8 3e aa 01 00       	call   c0024560 <__muldf3>
c0009b22:	83 c4 10             	add    esp,0x10
c0009b25:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009b29:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009b2d:	52                   	push   edx
c0009b2e:	50                   	push   eax
c0009b2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009b33:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009b37:	e8 a7 a3 01 00       	call   c0023ee3 <__adddf3>
c0009b3c:	83 c4 10             	add    esp,0x10
c0009b3f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009b43:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b47:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b4b:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009b4f:	0f 89 c5 fe ff ff    	jns    c0009a1a <calc_output_stereo+0x81>
c0009b55:	29 e9                	sub    ecx,ebp
c0009b57:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009b5b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009b5f:	29 c8                	sub    eax,ecx
c0009b61:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009b69:	99                   	cdq    
c0009b6a:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b6e:	31 d2                	xor    edx,edx
c0009b70:	0f af f8             	imul   edi,eax
c0009b73:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b77:	40                   	inc    eax
c0009b78:	01 cf                	add    edi,ecx
c0009b7a:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b7f:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b83:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b8b:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b8e:	31 c0                	xor    eax,eax
c0009b90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b94:	89 f8                	mov    eax,edi
c0009b96:	83 eb 08             	sub    ebx,0x8
c0009b99:	e8 6b fb ff ff       	call   c0009709 <fp_to_double>
c0009b9e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009ba2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009ba6:	89 f8                	mov    eax,edi
c0009ba8:	e8 52 fb ff ff       	call   c00096ff <fp_to_int>
c0009bad:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009bb0:	52                   	push   edx
c0009bb1:	52                   	push   edx
c0009bb2:	55                   	push   ebp
c0009bb3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bb7:	e8 bc 9c 01 00       	call   c0023878 <__subsf3>
c0009bbc:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bbf:	e8 93 b3 01 00       	call   c0024f57 <__extendsfdf2>
c0009bc4:	83 c4 10             	add    esp,0x10
c0009bc7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bcb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bcf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bd3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bd7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bdb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bdf:	e8 7c a9 01 00       	call   c0024560 <__muldf3>
c0009be4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009be7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009beb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009bef:	e8 63 b3 01 00       	call   c0024f57 <__extendsfdf2>
c0009bf4:	83 c4 10             	add    esp,0x10
c0009bf7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bfb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bff:	52                   	push   edx
c0009c00:	50                   	push   eax
c0009c01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009c05:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009c09:	e8 d5 a2 01 00       	call   c0023ee3 <__adddf3>
c0009c0e:	59                   	pop    ecx
c0009c0f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009c13:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009c17:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009c1d:	e8 35 b3 01 00       	call   c0024f57 <__extendsfdf2>
c0009c22:	83 c4 10             	add    esp,0x10
c0009c25:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c29:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c35:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c39:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c3d:	e8 1e a9 01 00       	call   c0024560 <__muldf3>
c0009c42:	83 c4 10             	add    esp,0x10
c0009c45:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c49:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c4d:	52                   	push   edx
c0009c4e:	50                   	push   eax
c0009c4f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c53:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c57:	e8 87 a2 01 00       	call   c0023ee3 <__adddf3>
c0009c5c:	5d                   	pop    ebp
c0009c5d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009c61:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009c65:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009c6b:	e8 e7 b2 01 00       	call   c0024f57 <__extendsfdf2>
c0009c70:	83 c4 10             	add    esp,0x10
c0009c73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c77:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c7f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c83:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c87:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c8b:	e8 d0 a8 01 00       	call   c0024560 <__muldf3>
c0009c90:	83 c4 10             	add    esp,0x10
c0009c93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c9b:	52                   	push   edx
c0009c9c:	50                   	push   eax
c0009c9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009ca1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009ca5:	e8 39 a2 01 00       	call   c0023ee3 <__adddf3>
c0009caa:	83 c4 10             	add    esp,0x10
c0009cad:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009cb1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cb5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009cb9:	85 ff                	test   edi,edi
c0009cbb:	0f 8f d3 fe ff ff    	jg     c0009b94 <calc_output_stereo+0x1fb>
c0009cc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ccd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cd1:	e8 0d a2 01 00       	call   c0023ee3 <__adddf3>
c0009cd6:	83 c4 10             	add    esp,0x10
c0009cd9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cdd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ce1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ce5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ce9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ced:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cf1:	e8 6a a8 01 00       	call   c0024560 <__muldf3>
c0009cf6:	59                   	pop    ecx
c0009cf7:	5b                   	pop    ebx
c0009cf8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009cfc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d08:	e8 26 b1 01 00       	call   c0024e33 <__truncdfsf2>
c0009d0d:	83 c4 10             	add    esp,0x10
c0009d10:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009d17:	89 03                	mov    DWORD PTR [ebx],eax
c0009d19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d29:	e8 b5 a1 01 00       	call   c0023ee3 <__adddf3>
c0009d2e:	83 c4 10             	add    esp,0x10
c0009d31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009d35:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d39:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d3d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d49:	e8 12 a8 01 00       	call   c0024560 <__muldf3>
c0009d4e:	5e                   	pop    esi
c0009d4f:	5f                   	pop    edi
c0009d50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d54:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d60:	e8 ce b0 01 00       	call   c0024e33 <__truncdfsf2>
c0009d65:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009d6c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009d6f:	83 c4 7c             	add    esp,0x7c
c0009d72:	5b                   	pop    ebx
c0009d73:	5e                   	pop    esi
c0009d74:	5f                   	pop    edi
c0009d75:	5d                   	pop    ebp
c0009d76:	c3                   	ret    

c0009d77 <calc_output_quad>:
c0009d77:	55                   	push   ebp
c0009d78:	57                   	push   edi
c0009d79:	56                   	push   esi
c0009d7a:	89 c6                	mov    esi,eax
c0009d7c:	53                   	push   ebx
c0009d7d:	83 ec 7c             	sub    esp,0x7c
c0009d80:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d84:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d88:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d8f:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d9a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d9e:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009da1:	e8 55 f9 ff ff       	call   c00096fb <int_to_fp>
c0009da6:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009da9:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009dac:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009db0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009db4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009db8:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009dbc:	99                   	cdq    
c0009dbd:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009dc1:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009dc5:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009dc8:	31 d2                	xor    edx,edx
c0009dca:	0f af d8             	imul   ebx,eax
c0009dcd:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009dd5:	0f af c7             	imul   eax,edi
c0009dd8:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009ddc:	29 c1                	sub    ecx,eax
c0009dde:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009de6:	31 c0                	xor    eax,eax
c0009de8:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009deb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009def:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009df3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009df7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dfb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009dff:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009e03:	89 d8                	mov    eax,ebx
c0009e05:	83 c7 10             	add    edi,0x10
c0009e08:	e8 fc f8 ff ff       	call   c0009709 <fp_to_double>
c0009e0d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009e11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e15:	89 d8                	mov    eax,ebx
c0009e17:	e8 e3 f8 ff ff       	call   c00096ff <fp_to_int>
c0009e1c:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009e20:	52                   	push   edx
c0009e21:	52                   	push   edx
c0009e22:	51                   	push   ecx
c0009e23:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009e27:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009e2b:	e8 48 9a 01 00       	call   c0023878 <__subsf3>
c0009e30:	89 04 24             	mov    DWORD PTR [esp],eax
c0009e33:	e8 1f b1 01 00       	call   c0024f57 <__extendsfdf2>
c0009e38:	83 c4 10             	add    esp,0x10
c0009e3b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e3f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e4b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e4f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e53:	e8 08 a7 01 00       	call   c0024560 <__muldf3>
c0009e58:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009e5c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e60:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e63:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e67:	e8 eb b0 01 00       	call   c0024f57 <__extendsfdf2>
c0009e6c:	83 c4 10             	add    esp,0x10
c0009e6f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e73:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e77:	52                   	push   edx
c0009e78:	50                   	push   eax
c0009e79:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e7d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e81:	e8 5d a0 01 00       	call   c0023ee3 <__adddf3>
c0009e86:	59                   	pop    ecx
c0009e87:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e8b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e8f:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e95:	e8 bd b0 01 00       	call   c0024f57 <__extendsfdf2>
c0009e9a:	83 c4 10             	add    esp,0x10
c0009e9d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ea1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ea5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ead:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009eb1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009eb5:	e8 a6 a6 01 00       	call   c0024560 <__muldf3>
c0009eba:	83 c4 10             	add    esp,0x10
c0009ebd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ec1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ec5:	52                   	push   edx
c0009ec6:	50                   	push   eax
c0009ec7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ecb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ecf:	e8 0f a0 01 00       	call   c0023ee3 <__adddf3>
c0009ed4:	59                   	pop    ecx
c0009ed5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009ed9:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009edd:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009ee3:	e8 6f b0 01 00       	call   c0024f57 <__extendsfdf2>
c0009ee8:	83 c4 10             	add    esp,0x10
c0009eeb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eef:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ef3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ef7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009efb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009eff:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f03:	e8 58 a6 01 00       	call   c0024560 <__muldf3>
c0009f08:	83 c4 10             	add    esp,0x10
c0009f0b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f0f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f13:	52                   	push   edx
c0009f14:	50                   	push   eax
c0009f15:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f19:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1d:	e8 c1 9f 01 00       	call   c0023ee3 <__adddf3>
c0009f22:	59                   	pop    ecx
c0009f23:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009f27:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009f2b:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009f31:	e8 21 b0 01 00       	call   c0024f57 <__extendsfdf2>
c0009f36:	83 c4 10             	add    esp,0x10
c0009f39:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f3d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f49:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f4d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f51:	e8 0a a6 01 00       	call   c0024560 <__muldf3>
c0009f56:	83 c4 10             	add    esp,0x10
c0009f59:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f5d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f61:	52                   	push   edx
c0009f62:	50                   	push   eax
c0009f63:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f67:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f6b:	e8 73 9f 01 00       	call   c0023ee3 <__adddf3>
c0009f70:	59                   	pop    ecx
c0009f71:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f75:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f79:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f7f:	e8 d3 af 01 00       	call   c0024f57 <__extendsfdf2>
c0009f84:	83 c4 10             	add    esp,0x10
c0009f87:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f8b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f97:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f9b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f9f:	e8 bc a5 01 00       	call   c0024560 <__muldf3>
c0009fa4:	83 c4 10             	add    esp,0x10
c0009fa7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009faf:	52                   	push   edx
c0009fb0:	50                   	push   eax
c0009fb1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009fb5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009fb9:	e8 25 9f 01 00       	call   c0023ee3 <__adddf3>
c0009fbe:	83 c4 10             	add    esp,0x10
c0009fc1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009fc5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009fc9:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009fcd:	0f 89 30 fe ff ff    	jns    c0009e03 <calc_output_quad+0x8c>
c0009fd3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009fd7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009fdb:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009fdf:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009fe3:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009feb:	29 c8                	sub    eax,ecx
c0009fed:	99                   	cdq    
c0009fee:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009ff2:	31 d2                	xor    edx,edx
c0009ff4:	0f af d8             	imul   ebx,eax
c0009ff7:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ffb:	40                   	inc    eax
c0009ffc:	01 cb                	add    ebx,ecx
c0009ffe:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a003:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a007:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a00b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00f:	8d 34 86             	lea    esi,[esi+eax*4]
c000a012:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a01a:	31 c0                	xor    eax,eax
c000a01c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a020:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a024:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a028:	89 d8                	mov    eax,ebx
c000a02a:	83 ee 10             	sub    esi,0x10
c000a02d:	e8 d7 f6 ff ff       	call   c0009709 <fp_to_double>
c000a032:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a036:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a03a:	89 d8                	mov    eax,ebx
c000a03c:	e8 be f6 ff ff       	call   c00096ff <fp_to_int>
c000a041:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a045:	52                   	push   edx
c000a046:	52                   	push   edx
c000a047:	57                   	push   edi
c000a048:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a04c:	e8 27 98 01 00       	call   c0023878 <__subsf3>
c000a051:	89 04 24             	mov    DWORD PTR [esp],eax
c000a054:	e8 fe ae 01 00       	call   c0024f57 <__extendsfdf2>
c000a059:	83 c4 10             	add    esp,0x10
c000a05c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a060:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a064:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a068:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a06c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a070:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a074:	e8 e7 a4 01 00       	call   c0024560 <__muldf3>
c000a079:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a07c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a080:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a084:	e8 ce ae 01 00       	call   c0024f57 <__extendsfdf2>
c000a089:	83 c4 10             	add    esp,0x10
c000a08c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a090:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a094:	52                   	push   edx
c000a095:	50                   	push   eax
c000a096:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a09a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a09e:	e8 40 9e 01 00       	call   c0023ee3 <__adddf3>
c000a0a3:	59                   	pop    ecx
c000a0a4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a0a8:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a0ac:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a0b2:	e8 a0 ae 01 00       	call   c0024f57 <__extendsfdf2>
c000a0b7:	83 c4 10             	add    esp,0x10
c000a0ba:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0be:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ca:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ce:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0d2:	e8 89 a4 01 00       	call   c0024560 <__muldf3>
c000a0d7:	83 c4 10             	add    esp,0x10
c000a0da:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0de:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e2:	52                   	push   edx
c000a0e3:	50                   	push   eax
c000a0e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a0e8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a0ec:	e8 f2 9d 01 00       	call   c0023ee3 <__adddf3>
c000a0f1:	5f                   	pop    edi
c000a0f2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a0f6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a0fa:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a100:	e8 52 ae 01 00       	call   c0024f57 <__extendsfdf2>
c000a105:	83 c4 10             	add    esp,0x10
c000a108:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a10c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a110:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a118:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a11c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a120:	e8 3b a4 01 00       	call   c0024560 <__muldf3>
c000a125:	83 c4 10             	add    esp,0x10
c000a128:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a12c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a130:	52                   	push   edx
c000a131:	50                   	push   eax
c000a132:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a136:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a13a:	e8 a4 9d 01 00       	call   c0023ee3 <__adddf3>
c000a13f:	59                   	pop    ecx
c000a140:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a144:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a148:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a14e:	e8 04 ae 01 00       	call   c0024f57 <__extendsfdf2>
c000a153:	83 c4 10             	add    esp,0x10
c000a156:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a15a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a15e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a162:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a166:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a16a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a16e:	e8 ed a3 01 00       	call   c0024560 <__muldf3>
c000a173:	83 c4 10             	add    esp,0x10
c000a176:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a17a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a17e:	52                   	push   edx
c000a17f:	50                   	push   eax
c000a180:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a184:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a188:	e8 56 9d 01 00       	call   c0023ee3 <__adddf3>
c000a18d:	5f                   	pop    edi
c000a18e:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a192:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a196:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a19c:	e8 b6 ad 01 00       	call   c0024f57 <__extendsfdf2>
c000a1a1:	83 c4 10             	add    esp,0x10
c000a1a4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a1a8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a1ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1b4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a1b8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a1bc:	e8 9f a3 01 00       	call   c0024560 <__muldf3>
c000a1c1:	83 c4 10             	add    esp,0x10
c000a1c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1cc:	52                   	push   edx
c000a1cd:	50                   	push   eax
c000a1ce:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a1d2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a1d6:	e8 08 9d 01 00       	call   c0023ee3 <__adddf3>
c000a1db:	83 c4 10             	add    esp,0x10
c000a1de:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1e2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a1e6:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a1ea:	85 db                	test   ebx,ebx
c000a1ec:	0f 8f 36 fe ff ff    	jg     c000a028 <calc_output_quad+0x2b1>
c000a1f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a202:	e8 dc 9c 01 00       	call   c0023ee3 <__adddf3>
c000a207:	83 c4 10             	add    esp,0x10
c000a20a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a20e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a212:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a216:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a21a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a21e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a222:	e8 39 a3 01 00       	call   c0024560 <__muldf3>
c000a227:	59                   	pop    ecx
c000a228:	5b                   	pop    ebx
c000a229:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a22d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a231:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a235:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a239:	e8 f5 ab 01 00       	call   c0024e33 <__truncdfsf2>
c000a23e:	83 c4 10             	add    esp,0x10
c000a241:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a248:	89 06                	mov    DWORD PTR [esi],eax
c000a24a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a24e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a252:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a256:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a25a:	e8 84 9c 01 00       	call   c0023ee3 <__adddf3>
c000a25f:	83 c4 10             	add    esp,0x10
c000a262:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a266:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a26a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a26e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a272:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a276:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a27a:	e8 e1 a2 01 00       	call   c0024560 <__muldf3>
c000a27f:	5e                   	pop    esi
c000a280:	5f                   	pop    edi
c000a281:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a285:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a289:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a28d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a291:	e8 9d ab 01 00       	call   c0024e33 <__truncdfsf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a2a0:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a2a3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a2a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a2ab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2af:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2b3:	e8 2b 9c 01 00       	call   c0023ee3 <__adddf3>
c000a2b8:	83 c4 10             	add    esp,0x10
c000a2bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2d3:	e8 88 a2 01 00       	call   c0024560 <__muldf3>
c000a2d8:	5d                   	pop    ebp
c000a2d9:	59                   	pop    ecx
c000a2da:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ea:	e8 44 ab 01 00       	call   c0024e33 <__truncdfsf2>
c000a2ef:	83 c4 10             	add    esp,0x10
c000a2f2:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a2f9:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a2fc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a300:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a304:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a308:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a30c:	e8 d2 9b 01 00       	call   c0023ee3 <__adddf3>
c000a311:	83 c4 10             	add    esp,0x10
c000a314:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a318:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a31c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a320:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a32c:	e8 2f a2 01 00       	call   c0024560 <__muldf3>
c000a331:	5b                   	pop    ebx
c000a332:	5e                   	pop    esi
c000a333:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a337:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a33b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a343:	e8 eb aa 01 00       	call   c0024e33 <__truncdfsf2>
c000a348:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a34f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a352:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a358:	5b                   	pop    ebx
c000a359:	5e                   	pop    esi
c000a35a:	5f                   	pop    edi
c000a35b:	5d                   	pop    ebp
c000a35c:	c3                   	ret    

c000a35d <calc_output_hex>:
c000a35d:	55                   	push   ebp
c000a35e:	89 cd                	mov    ebp,ecx
c000a360:	57                   	push   edi
c000a361:	56                   	push   esi
c000a362:	53                   	push   ebx
c000a363:	89 c3                	mov    ebx,eax
c000a365:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a36b:	89 14 24             	mov    DWORD PTR [esp],edx
c000a36e:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a375:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a37c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a380:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a384:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a387:	e8 6f f3 ff ff       	call   c00096fb <int_to_fp>
c000a38c:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a38f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a393:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a396:	29 c8                	sub    eax,ecx
c000a398:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a39c:	99                   	cdq    
c000a39d:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a3a5:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a3a8:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a3b0:	0f af f8             	imul   edi,eax
c000a3b3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a3b6:	01 cf                	add    edi,ecx
c000a3b8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a3bc:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a3bf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a3c3:	0f af c2             	imul   eax,edx
c000a3c6:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a3ca:	29 c1                	sub    ecx,eax
c000a3cc:	31 d2                	xor    edx,edx
c000a3ce:	31 c0                	xor    eax,eax
c000a3d0:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a3d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a3d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a3db:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a3df:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a3e3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a3e7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a3eb:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a3ef:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a3f3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3f7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3fb:	89 f8                	mov    eax,edi
c000a3fd:	e8 07 f3 ff ff       	call   c0009709 <fp_to_double>
c000a402:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a406:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a40a:	89 f8                	mov    eax,edi
c000a40c:	e8 ee f2 ff ff       	call   c00096ff <fp_to_int>
c000a411:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a415:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a418:	52                   	push   edx
c000a419:	52                   	push   edx
c000a41a:	51                   	push   ecx
c000a41b:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a41f:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a426:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a42a:	e8 49 94 01 00       	call   c0023878 <__subsf3>
c000a42f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a432:	e8 20 ab 01 00       	call   c0024f57 <__extendsfdf2>
c000a437:	83 c4 10             	add    esp,0x10
c000a43a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a43e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a442:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a446:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a44e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a452:	e8 09 a1 01 00       	call   c0024560 <__muldf3>
c000a457:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a45b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a45f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a462:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a466:	e8 ec aa 01 00       	call   c0024f57 <__extendsfdf2>
c000a46b:	83 c4 10             	add    esp,0x10
c000a46e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a472:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a476:	52                   	push   edx
c000a477:	50                   	push   eax
c000a478:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a47c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a480:	e8 5e 9a 01 00       	call   c0023ee3 <__adddf3>
c000a485:	59                   	pop    ecx
c000a486:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a48a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a48e:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a494:	e8 be aa 01 00       	call   c0024f57 <__extendsfdf2>
c000a499:	83 c4 10             	add    esp,0x10
c000a49c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ac:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4b0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4b4:	e8 a7 a0 01 00       	call   c0024560 <__muldf3>
c000a4b9:	83 c4 10             	add    esp,0x10
c000a4bc:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4c0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4c4:	52                   	push   edx
c000a4c5:	50                   	push   eax
c000a4c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a4ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a4ce:	e8 10 9a 01 00       	call   c0023ee3 <__adddf3>
c000a4d3:	59                   	pop    ecx
c000a4d4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4d8:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a4dc:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a4e2:	e8 70 aa 01 00       	call   c0024f57 <__extendsfdf2>
c000a4e7:	83 c4 10             	add    esp,0x10
c000a4ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4fa:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4fe:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a502:	e8 59 a0 01 00       	call   c0024560 <__muldf3>
c000a507:	83 c4 10             	add    esp,0x10
c000a50a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a50e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a512:	52                   	push   edx
c000a513:	50                   	push   eax
c000a514:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a518:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a51c:	e8 c2 99 01 00       	call   c0023ee3 <__adddf3>
c000a521:	59                   	pop    ecx
c000a522:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a526:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a52a:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a530:	e8 22 aa 01 00       	call   c0024f57 <__extendsfdf2>
c000a535:	83 c4 10             	add    esp,0x10
c000a538:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a53c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a540:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a544:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a548:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a54c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a550:	e8 0b a0 01 00       	call   c0024560 <__muldf3>
c000a555:	83 c4 10             	add    esp,0x10
c000a558:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a55c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a560:	52                   	push   edx
c000a561:	50                   	push   eax
c000a562:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a566:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a56a:	e8 74 99 01 00       	call   c0023ee3 <__adddf3>
c000a56f:	59                   	pop    ecx
c000a570:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a574:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a578:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a57e:	e8 d4 a9 01 00       	call   c0024f57 <__extendsfdf2>
c000a583:	83 c4 10             	add    esp,0x10
c000a586:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a58a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a58e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a592:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a596:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a59a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a59e:	e8 bd 9f 01 00       	call   c0024560 <__muldf3>
c000a5a3:	83 c4 10             	add    esp,0x10
c000a5a6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5aa:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5ae:	52                   	push   edx
c000a5af:	50                   	push   eax
c000a5b0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a5b4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a5b8:	e8 26 99 01 00       	call   c0023ee3 <__adddf3>
c000a5bd:	59                   	pop    ecx
c000a5be:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a5c2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a5c6:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a5cc:	e8 86 a9 01 00       	call   c0024f57 <__extendsfdf2>
c000a5d1:	83 c4 10             	add    esp,0x10
c000a5d4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5d8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5e4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5e8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5ec:	e8 6f 9f 01 00       	call   c0024560 <__muldf3>
c000a5f1:	83 c4 10             	add    esp,0x10
c000a5f4:	83 c6 18             	add    esi,0x18
c000a5f7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5fb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5ff:	52                   	push   edx
c000a600:	50                   	push   eax
c000a601:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a605:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a609:	e8 d5 98 01 00       	call   c0023ee3 <__adddf3>
c000a60e:	59                   	pop    ecx
c000a60f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a613:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a617:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a61d:	e8 35 a9 01 00       	call   c0024f57 <__extendsfdf2>
c000a622:	83 c4 10             	add    esp,0x10
c000a625:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a629:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a631:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a635:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a639:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a63d:	e8 1e 9f 01 00       	call   c0024560 <__muldf3>
c000a642:	83 c4 10             	add    esp,0x10
c000a645:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a649:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a64d:	52                   	push   edx
c000a64e:	50                   	push   eax
c000a64f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a653:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a657:	e8 87 98 01 00       	call   c0023ee3 <__adddf3>
c000a65c:	83 c4 10             	add    esp,0x10
c000a65f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a663:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a667:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a66a:	0f 89 8b fd ff ff    	jns    c000a3fb <calc_output_hex+0x9e>
c000a670:	31 f6                	xor    esi,esi
c000a672:	31 ff                	xor    edi,edi
c000a674:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a678:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a67b:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a67f:	29 e9                	sub    ecx,ebp
c000a681:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a685:	29 c8                	sub    eax,ecx
c000a687:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a68a:	99                   	cdq    
c000a68b:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a68f:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a692:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a696:	0f af e8             	imul   ebp,eax
c000a699:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a69d:	40                   	inc    eax
c000a69e:	01 cd                	add    ebp,ecx
c000a6a0:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a6a5:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a6a9:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a6ad:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a6b1:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a6b4:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a6b8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a6bc:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a6c0:	89 e8                	mov    eax,ebp
c000a6c2:	e8 42 f0 ff ff       	call   c0009709 <fp_to_double>
c000a6c7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a6cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a6cf:	89 e8                	mov    eax,ebp
c000a6d1:	e8 29 f0 ff ff       	call   c00096ff <fp_to_int>
c000a6d6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a6da:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a6dd:	52                   	push   edx
c000a6de:	52                   	push   edx
c000a6df:	51                   	push   ecx
c000a6e0:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a6e7:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a6ee:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a6f2:	e8 81 91 01 00       	call   c0023878 <__subsf3>
c000a6f7:	89 04 24             	mov    DWORD PTR [esp],eax
c000a6fa:	e8 58 a8 01 00       	call   c0024f57 <__extendsfdf2>
c000a6ff:	83 c4 10             	add    esp,0x10
c000a702:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a706:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a70a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a70e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a712:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a716:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a71a:	e8 41 9e 01 00       	call   c0024560 <__muldf3>
c000a71f:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a726:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a72a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a72d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a731:	e8 21 a8 01 00       	call   c0024f57 <__extendsfdf2>
c000a736:	83 c4 10             	add    esp,0x10
c000a739:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a73d:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a741:	52                   	push   edx
c000a742:	50                   	push   eax
c000a743:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a747:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a74b:	e8 93 97 01 00       	call   c0023ee3 <__adddf3>
c000a750:	59                   	pop    ecx
c000a751:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a755:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a759:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a75f:	e8 f3 a7 01 00       	call   c0024f57 <__extendsfdf2>
c000a764:	83 c4 10             	add    esp,0x10
c000a767:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a76b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a777:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a77b:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a77f:	e8 dc 9d 01 00       	call   c0024560 <__muldf3>
c000a784:	83 c4 10             	add    esp,0x10
c000a787:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a78b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a78f:	52                   	push   edx
c000a790:	50                   	push   eax
c000a791:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a795:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a799:	e8 45 97 01 00       	call   c0023ee3 <__adddf3>
c000a79e:	59                   	pop    ecx
c000a79f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a7a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a7a7:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a7ad:	e8 a5 a7 01 00       	call   c0024f57 <__extendsfdf2>
c000a7b2:	83 c4 10             	add    esp,0x10
c000a7b5:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7b9:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7c9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7cd:	e8 8e 9d 01 00       	call   c0024560 <__muldf3>
c000a7d2:	83 c4 10             	add    esp,0x10
c000a7d5:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7d9:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7dd:	52                   	push   edx
c000a7de:	50                   	push   eax
c000a7df:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7e3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7e7:	e8 f7 96 01 00       	call   c0023ee3 <__adddf3>
c000a7ec:	59                   	pop    ecx
c000a7ed:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a7f1:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a7f5:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a7fb:	e8 57 a7 01 00       	call   c0024f57 <__extendsfdf2>
c000a800:	83 c4 10             	add    esp,0x10
c000a803:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a807:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a80b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a80f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a813:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a817:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a81b:	e8 40 9d 01 00       	call   c0024560 <__muldf3>
c000a820:	83 c4 10             	add    esp,0x10
c000a823:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a827:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a82b:	52                   	push   edx
c000a82c:	50                   	push   eax
c000a82d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a831:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a835:	e8 a9 96 01 00       	call   c0023ee3 <__adddf3>
c000a83a:	59                   	pop    ecx
c000a83b:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a83f:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a843:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a849:	e8 09 a7 01 00       	call   c0024f57 <__extendsfdf2>
c000a84e:	83 c4 10             	add    esp,0x10
c000a851:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a855:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a859:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a85d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a861:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a865:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a869:	e8 f2 9c 01 00       	call   c0024560 <__muldf3>
c000a86e:	83 c4 10             	add    esp,0x10
c000a871:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a875:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a879:	52                   	push   edx
c000a87a:	50                   	push   eax
c000a87b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a87f:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a883:	e8 5b 96 01 00       	call   c0023ee3 <__adddf3>
c000a888:	59                   	pop    ecx
c000a889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a88d:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a891:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a897:	e8 bb a6 01 00       	call   c0024f57 <__extendsfdf2>
c000a89c:	83 c4 10             	add    esp,0x10
c000a89f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8a3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8af:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8b3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8b7:	e8 a4 9c 01 00       	call   c0024560 <__muldf3>
c000a8bc:	83 c4 10             	add    esp,0x10
c000a8bf:	83 eb 18             	sub    ebx,0x18
c000a8c2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8c6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8ca:	52                   	push   edx
c000a8cb:	50                   	push   eax
c000a8cc:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a8d0:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a8d4:	e8 0a 96 01 00       	call   c0023ee3 <__adddf3>
c000a8d9:	59                   	pop    ecx
c000a8da:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a8de:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a8e2:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a8e8:	e8 6a a6 01 00       	call   c0024f57 <__extendsfdf2>
c000a8ed:	83 c4 10             	add    esp,0x10
c000a8f0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8f4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a900:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a904:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a908:	e8 53 9c 01 00       	call   c0024560 <__muldf3>
c000a90d:	83 c4 10             	add    esp,0x10
c000a910:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a914:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a918:	52                   	push   edx
c000a919:	50                   	push   eax
c000a91a:	57                   	push   edi
c000a91b:	56                   	push   esi
c000a91c:	e8 c2 95 01 00       	call   c0023ee3 <__adddf3>
c000a921:	83 c4 10             	add    esp,0x10
c000a924:	89 c6                	mov    esi,eax
c000a926:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a929:	89 d7                	mov    edi,edx
c000a92b:	85 ed                	test   ebp,ebp
c000a92d:	0f 8f 8d fd ff ff    	jg     c000a6c0 <calc_output_hex+0x363>
c000a933:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a937:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a93b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a93f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a943:	e8 9b 95 01 00       	call   c0023ee3 <__adddf3>
c000a948:	83 c4 10             	add    esp,0x10
c000a94b:	89 04 24             	mov    DWORD PTR [esp],eax
c000a94e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a952:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a956:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a962:	e8 f9 9b 01 00       	call   c0024560 <__muldf3>
c000a967:	59                   	pop    ecx
c000a968:	5b                   	pop    ebx
c000a969:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a96d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a971:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a975:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a979:	e8 b5 a4 01 00       	call   c0024e33 <__truncdfsf2>
c000a97e:	83 c4 10             	add    esp,0x10
c000a981:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a988:	89 03                	mov    DWORD PTR [ebx],eax
c000a98a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a98e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a992:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a996:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a99a:	e8 44 95 01 00       	call   c0023ee3 <__adddf3>
c000a99f:	83 c4 10             	add    esp,0x10
c000a9a2:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9a5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9a9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ad:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b9:	e8 a2 9b 01 00       	call   c0024560 <__muldf3>
c000a9be:	5d                   	pop    ebp
c000a9bf:	59                   	pop    ecx
c000a9c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9c8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9cc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d0:	e8 5e a4 01 00       	call   c0024e33 <__truncdfsf2>
c000a9d5:	83 c4 10             	add    esp,0x10
c000a9d8:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9df:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a9e2:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a9e6:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a9ea:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9ee:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9f2:	e8 ec 94 01 00       	call   c0023ee3 <__adddf3>
c000a9f7:	83 c4 10             	add    esp,0x10
c000a9fa:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa09:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa11:	e8 4a 9b 01 00       	call   c0024560 <__muldf3>
c000aa16:	5b                   	pop    ebx
c000aa17:	5d                   	pop    ebp
c000aa18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa24:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa28:	e8 06 a4 01 00       	call   c0024e33 <__truncdfsf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa37:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000aa3a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa3e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa42:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa46:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa4a:	e8 94 94 01 00       	call   c0023ee3 <__adddf3>
c000aa4f:	83 c4 10             	add    esp,0x10
c000aa52:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa55:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa59:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa65:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa69:	e8 f2 9a 01 00       	call   c0024560 <__muldf3>
c000aa6e:	59                   	pop    ecx
c000aa6f:	5b                   	pop    ebx
c000aa70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa78:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa7c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa80:	e8 ae a3 01 00       	call   c0024e33 <__truncdfsf2>
c000aa85:	83 c4 10             	add    esp,0x10
c000aa88:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa8f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa92:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa96:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa9a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa9e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aaa2:	e8 3c 94 01 00       	call   c0023ee3 <__adddf3>
c000aaa7:	83 c4 10             	add    esp,0x10
c000aaaa:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aab1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aabd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aac1:	e8 9a 9a 01 00       	call   c0024560 <__muldf3>
c000aac6:	5d                   	pop    ebp
c000aac7:	59                   	pop    ecx
c000aac8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aacc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aad0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad8:	e8 56 a3 01 00       	call   c0024e33 <__truncdfsf2>
c000aadd:	83 c4 10             	add    esp,0x10
c000aae0:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aae7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aaea:	57                   	push   edi
c000aaeb:	56                   	push   esi
c000aaec:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aaf0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aaf4:	e8 ea 93 01 00       	call   c0023ee3 <__adddf3>
c000aaf9:	83 c4 10             	add    esp,0x10
c000aafc:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaff:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab0f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab13:	e8 48 9a 01 00       	call   c0024560 <__muldf3>
c000ab18:	5b                   	pop    ebx
c000ab19:	5e                   	pop    esi
c000ab1a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab1e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab22:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab26:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab2a:	e8 04 a3 01 00       	call   c0024e33 <__truncdfsf2>
c000ab2f:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ab36:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ab39:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ab3f:	5b                   	pop    ebx
c000ab40:	5e                   	pop    esi
c000ab41:	5f                   	pop    edi
c000ab42:	5d                   	pop    ebp
c000ab43:	c3                   	ret    

c000ab44 <sinc_reset>:
c000ab44:	56                   	push   esi
c000ab45:	53                   	push   ebx
c000ab46:	51                   	push   ecx
c000ab47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab4b:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ab4e:	85 db                	test   ebx,ebx
c000ab50:	74 59                	je     c000abab <sinc_reset+0x67>
c000ab52:	31 d2                	xor    edx,edx
c000ab54:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ab5b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ab5e:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ab61:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ab68:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ab6f:	31 c0                	xor    eax,eax
c000ab71:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab77:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab7a:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab7d:	52                   	push   edx
c000ab7e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab81:	c1 e0 02             	shl    eax,0x2
c000ab84:	50                   	push   eax
c000ab85:	6a 00                	push   0x0
c000ab87:	56                   	push   esi
c000ab88:	e8 41 5b ff ff       	call   c00006ce <memset>
c000ab8d:	83 c4 0c             	add    esp,0xc
c000ab90:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab93:	c1 e0 02             	shl    eax,0x2
c000ab96:	50                   	push   eax
c000ab97:	68 aa 00 00 00       	push   0xaa
c000ab9c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab9f:	8d 04 86             	lea    eax,[esi+eax*4]
c000aba2:	50                   	push   eax
c000aba3:	e8 26 5b ff ff       	call   c00006ce <memset>
c000aba8:	83 c4 10             	add    esp,0x10
c000abab:	58                   	pop    eax
c000abac:	5b                   	pop    ebx
c000abad:	5e                   	pop    esi
c000abae:	c3                   	ret    

c000abaf <calc_output_multi>:
c000abaf:	55                   	push   ebp
c000abb0:	57                   	push   edi
c000abb1:	56                   	push   esi
c000abb2:	89 c6                	mov    esi,eax
c000abb4:	53                   	push   ebx
c000abb5:	83 ec 4c             	sub    esp,0x4c
c000abb8:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000abbc:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000abc0:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000abc4:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000abc8:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000abcc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000abd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000abd4:	8d 46 44             	lea    eax,[esi+0x44]
c000abd7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abda:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000abe0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000abe4:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000abe7:	e8 0f eb ff ff       	call   c00096fb <int_to_fp>
c000abec:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000abef:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000abf3:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000abf7:	99                   	cdq    
c000abf8:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000abfc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ac00:	0f af d0             	imul   edx,eax
c000ac03:	0f af c3             	imul   eax,ebx
c000ac06:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ac0a:	29 c1                	sub    ecx,eax
c000ac0c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac10:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ac14:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000ac1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ac1f:	57                   	push   edi
c000ac20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac24:	6a 00                	push   0x0
c000ac26:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac2a:	e8 9f 5a ff ff       	call   c00006ce <memset>
c000ac2f:	83 c4 10             	add    esp,0x10
c000ac32:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac36:	89 df                	mov    edi,ebx
c000ac38:	e8 cc ea ff ff       	call   c0009709 <fp_to_double>
c000ac3d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac41:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac45:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac49:	e8 b1 ea ff ff       	call   c00096ff <fp_to_int>
c000ac4e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ac51:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ac54:	51                   	push   ecx
c000ac55:	51                   	push   ecx
c000ac56:	55                   	push   ebp
c000ac57:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ac5b:	e8 18 8c 01 00       	call   c0023878 <__subsf3>
c000ac60:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac63:	e8 ef a2 01 00       	call   c0024f57 <__extendsfdf2>
c000ac68:	83 c4 10             	add    esp,0x10
c000ac6b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac6f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac7b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac7f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac83:	e8 d8 98 01 00       	call   c0024560 <__muldf3>
c000ac88:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac8b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac8f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac93:	e8 bf a2 01 00       	call   c0024f57 <__extendsfdf2>
c000ac98:	83 c4 10             	add    esp,0x10
c000ac9b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac9f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aca3:	52                   	push   edx
c000aca4:	50                   	push   eax
c000aca5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aca9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acad:	e8 31 92 01 00       	call   c0023ee3 <__adddf3>
c000acb2:	83 c4 10             	add    esp,0x10
c000acb5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acb9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000acbd:	89 f8                	mov    eax,edi
c000acbf:	b9 08 00 00 00       	mov    ecx,0x8
c000acc4:	99                   	cdq    
c000acc5:	f7 f9                	idiv   ecx
c000acc7:	4a                   	dec    edx
c000acc8:	83 fa 06             	cmp    edx,0x6
c000accb:	77 07                	ja     c000acd4 <calc_output_multi+0x125>
c000accd:	ff 24 95 64 67 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd989c]
c000acd4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acd7:	4f                   	dec    edi
c000acd8:	83 ec 0c             	sub    esp,0xc
c000acdb:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000acde:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ace2:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ace9:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aced:	e8 65 a2 01 00       	call   c0024f57 <__extendsfdf2>
c000acf2:	83 c4 10             	add    esp,0x10
c000acf5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acf9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad05:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad0d:	e8 4e 98 01 00       	call   c0024560 <__muldf3>
c000ad12:	83 c4 10             	add    esp,0x10
c000ad15:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad19:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad1d:	52                   	push   edx
c000ad1e:	50                   	push   eax
c000ad1f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad22:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad25:	e8 b9 91 01 00       	call   c0023ee3 <__adddf3>
c000ad2a:	83 c4 10             	add    esp,0x10
c000ad2d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad30:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad33:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad36:	4f                   	dec    edi
c000ad37:	83 ec 0c             	sub    esp,0xc
c000ad3a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad3d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad41:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad48:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad4c:	e8 06 a2 01 00       	call   c0024f57 <__extendsfdf2>
c000ad51:	83 c4 10             	add    esp,0x10
c000ad54:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad58:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad64:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad6c:	e8 ef 97 01 00       	call   c0024560 <__muldf3>
c000ad71:	83 c4 10             	add    esp,0x10
c000ad74:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad78:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad7c:	52                   	push   edx
c000ad7d:	50                   	push   eax
c000ad7e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad81:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad84:	e8 5a 91 01 00       	call   c0023ee3 <__adddf3>
c000ad89:	83 c4 10             	add    esp,0x10
c000ad8c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad8f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad92:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad95:	4f                   	dec    edi
c000ad96:	83 ec 0c             	sub    esp,0xc
c000ad99:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ada0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ada7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000adab:	e8 a7 a1 01 00       	call   c0024f57 <__extendsfdf2>
c000adb0:	83 c4 10             	add    esp,0x10
c000adb3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adb7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adc3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adcb:	e8 90 97 01 00       	call   c0024560 <__muldf3>
c000add0:	83 c4 10             	add    esp,0x10
c000add3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000add7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000addb:	52                   	push   edx
c000addc:	50                   	push   eax
c000addd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ade0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ade3:	e8 fb 90 01 00       	call   c0023ee3 <__adddf3>
c000ade8:	83 c4 10             	add    esp,0x10
c000adeb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000adee:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000adf1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000adf4:	4f                   	dec    edi
c000adf5:	83 ec 0c             	sub    esp,0xc
c000adf8:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000adfb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000adff:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae06:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae0a:	e8 48 a1 01 00       	call   c0024f57 <__extendsfdf2>
c000ae0f:	83 c4 10             	add    esp,0x10
c000ae12:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae16:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae22:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae26:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae2a:	e8 31 97 01 00       	call   c0024560 <__muldf3>
c000ae2f:	83 c4 10             	add    esp,0x10
c000ae32:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae36:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae3a:	52                   	push   edx
c000ae3b:	50                   	push   eax
c000ae3c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae3f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae42:	e8 9c 90 01 00       	call   c0023ee3 <__adddf3>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae4d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae50:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae53:	4f                   	dec    edi
c000ae54:	83 ec 0c             	sub    esp,0xc
c000ae57:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae5e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae65:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae69:	e8 e9 a0 01 00       	call   c0024f57 <__extendsfdf2>
c000ae6e:	83 c4 10             	add    esp,0x10
c000ae71:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae75:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae81:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae85:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae89:	e8 d2 96 01 00       	call   c0024560 <__muldf3>
c000ae8e:	83 c4 10             	add    esp,0x10
c000ae91:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae95:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae99:	52                   	push   edx
c000ae9a:	50                   	push   eax
c000ae9b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae9e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aea1:	e8 3d 90 01 00       	call   c0023ee3 <__adddf3>
c000aea6:	83 c4 10             	add    esp,0x10
c000aea9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aeac:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aeaf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb2:	4f                   	dec    edi
c000aeb3:	83 ec 0c             	sub    esp,0xc
c000aeb6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aeb9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aebd:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aec8:	e8 8a a0 01 00       	call   c0024f57 <__extendsfdf2>
c000aecd:	83 c4 10             	add    esp,0x10
c000aed0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aed8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	e8 73 96 01 00       	call   c0024560 <__muldf3>
c000aeed:	83 c4 10             	add    esp,0x10
c000aef0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aef8:	52                   	push   edx
c000aef9:	50                   	push   eax
c000aefa:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aefd:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af00:	e8 de 8f 01 00       	call   c0023ee3 <__adddf3>
c000af05:	83 c4 10             	add    esp,0x10
c000af08:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af0e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af11:	4f                   	dec    edi
c000af12:	83 ec 0c             	sub    esp,0xc
c000af15:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af1c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af23:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af27:	e8 2b a0 01 00       	call   c0024f57 <__extendsfdf2>
c000af2c:	83 c4 10             	add    esp,0x10
c000af2f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af33:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	e8 14 96 01 00       	call   c0024560 <__muldf3>
c000af4c:	83 c4 10             	add    esp,0x10
c000af4f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af53:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af57:	52                   	push   edx
c000af58:	50                   	push   eax
c000af59:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af5c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af5f:	e8 7f 8f 01 00       	call   c0023ee3 <__adddf3>
c000af64:	83 c4 10             	add    esp,0x10
c000af67:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af6d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af70:	4f                   	dec    edi
c000af71:	83 ec 0c             	sub    esp,0xc
c000af74:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af77:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7b:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af82:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af86:	e8 cc 9f 01 00       	call   c0024f57 <__extendsfdf2>
c000af8b:	83 c4 10             	add    esp,0x10
c000af8e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af92:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	e8 b5 95 01 00       	call   c0024560 <__muldf3>
c000afab:	83 c4 10             	add    esp,0x10
c000afae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afb6:	52                   	push   edx
c000afb7:	50                   	push   eax
c000afb8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afbe:	e8 20 8f 01 00       	call   c0023ee3 <__adddf3>
c000afc3:	83 c4 10             	add    esp,0x10
c000afc6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afc9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afcc:	85 ff                	test   edi,edi
c000afce:	0f 8f e9 fc ff ff    	jg     c000acbd <calc_output_multi+0x10e>
c000afd4:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000afd8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000afdc:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000afe0:	0f 89 4c fc ff ff    	jns    c000ac32 <calc_output_multi+0x83>
c000afe6:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000afea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000afee:	29 c8                	sub    eax,ecx
c000aff0:	99                   	cdq    
c000aff1:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000aff5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000aff9:	0f af d0             	imul   edx,eax
c000affc:	40                   	inc    eax
c000affd:	01 d1                	add    ecx,edx
c000afff:	0f af c3             	imul   eax,ebx
c000b002:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b006:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b009:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b00d:	55                   	push   ebp
c000b00e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b012:	6a 00                	push   0x0
c000b014:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b018:	e8 b1 56 ff ff       	call   c00006ce <memset>
c000b01d:	83 c4 10             	add    esp,0x10
c000b020:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b024:	e8 e0 e6 ff ff       	call   c0009709 <fp_to_double>
c000b029:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b02d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b031:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b035:	e8 c5 e6 ff ff       	call   c00096ff <fp_to_int>
c000b03a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b03d:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b040:	57                   	push   edi
c000b041:	57                   	push   edi
c000b042:	89 df                	mov    edi,ebx
c000b044:	55                   	push   ebp
c000b045:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b049:	e8 2a 88 01 00       	call   c0023878 <__subsf3>
c000b04e:	89 04 24             	mov    DWORD PTR [esp],eax
c000b051:	e8 01 9f 01 00       	call   c0024f57 <__extendsfdf2>
c000b056:	83 c4 10             	add    esp,0x10
c000b059:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b05d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b061:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b065:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b069:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b06d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b071:	e8 ea 94 01 00       	call   c0024560 <__muldf3>
c000b076:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b079:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b07d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b081:	e8 d1 9e 01 00       	call   c0024f57 <__extendsfdf2>
c000b086:	83 c4 10             	add    esp,0x10
c000b089:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b08d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b091:	52                   	push   edx
c000b092:	50                   	push   eax
c000b093:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b097:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b09b:	e8 43 8e 01 00       	call   c0023ee3 <__adddf3>
c000b0a0:	83 c4 10             	add    esp,0x10
c000b0a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b0a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b0ab:	89 f8                	mov    eax,edi
c000b0ad:	b9 08 00 00 00       	mov    ecx,0x8
c000b0b2:	99                   	cdq    
c000b0b3:	f7 f9                	idiv   ecx
c000b0b5:	4a                   	dec    edx
c000b0b6:	83 fa 06             	cmp    edx,0x6
c000b0b9:	77 07                	ja     c000b0c2 <calc_output_multi+0x513>
c000b0bb:	ff 24 95 80 67 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9880]
c000b0c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0c6:	4f                   	dec    edi
c000b0c7:	83 ec 0c             	sub    esp,0xc
c000b0ca:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0d1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0d8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0dc:	e8 76 9e 01 00       	call   c0024f57 <__extendsfdf2>
c000b0e1:	83 c4 10             	add    esp,0x10
c000b0e4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0e8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0fc:	e8 5f 94 01 00       	call   c0024560 <__muldf3>
c000b101:	83 c4 10             	add    esp,0x10
c000b104:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b108:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b10c:	52                   	push   edx
c000b10d:	50                   	push   eax
c000b10e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b111:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b114:	e8 ca 8d 01 00       	call   c0023ee3 <__adddf3>
c000b119:	83 c4 10             	add    esp,0x10
c000b11c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b11f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b122:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b126:	4f                   	dec    edi
c000b127:	83 ec 0c             	sub    esp,0xc
c000b12a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b12d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b131:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b138:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b13c:	e8 16 9e 01 00       	call   c0024f57 <__extendsfdf2>
c000b141:	83 c4 10             	add    esp,0x10
c000b144:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b148:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b14c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b150:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b154:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b158:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b15c:	e8 ff 93 01 00       	call   c0024560 <__muldf3>
c000b161:	83 c4 10             	add    esp,0x10
c000b164:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b168:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b16c:	52                   	push   edx
c000b16d:	50                   	push   eax
c000b16e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b171:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b174:	e8 6a 8d 01 00       	call   c0023ee3 <__adddf3>
c000b179:	83 c4 10             	add    esp,0x10
c000b17c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b17f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b182:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b186:	4f                   	dec    edi
c000b187:	83 ec 0c             	sub    esp,0xc
c000b18a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b18d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b191:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b198:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b19c:	e8 b6 9d 01 00       	call   c0024f57 <__extendsfdf2>
c000b1a1:	83 c4 10             	add    esp,0x10
c000b1a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1a8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1bc:	e8 9f 93 01 00       	call   c0024560 <__muldf3>
c000b1c1:	83 c4 10             	add    esp,0x10
c000b1c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1cc:	52                   	push   edx
c000b1cd:	50                   	push   eax
c000b1ce:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1d1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1d4:	e8 0a 8d 01 00       	call   c0023ee3 <__adddf3>
c000b1d9:	83 c4 10             	add    esp,0x10
c000b1dc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1df:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1e6:	4f                   	dec    edi
c000b1e7:	83 ec 0c             	sub    esp,0xc
c000b1ea:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1f1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1f8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1fc:	e8 56 9d 01 00       	call   c0024f57 <__extendsfdf2>
c000b201:	83 c4 10             	add    esp,0x10
c000b204:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b208:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b210:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b214:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b218:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b21c:	e8 3f 93 01 00       	call   c0024560 <__muldf3>
c000b221:	83 c4 10             	add    esp,0x10
c000b224:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b228:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b22c:	52                   	push   edx
c000b22d:	50                   	push   eax
c000b22e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b231:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b234:	e8 aa 8c 01 00       	call   c0023ee3 <__adddf3>
c000b239:	83 c4 10             	add    esp,0x10
c000b23c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b23f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b242:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b246:	4f                   	dec    edi
c000b247:	83 ec 0c             	sub    esp,0xc
c000b24a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b24d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b251:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b258:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b25c:	e8 f6 9c 01 00       	call   c0024f57 <__extendsfdf2>
c000b261:	83 c4 10             	add    esp,0x10
c000b264:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b268:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b26c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b270:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b274:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b278:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b27c:	e8 df 92 01 00       	call   c0024560 <__muldf3>
c000b281:	83 c4 10             	add    esp,0x10
c000b284:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b288:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b28c:	52                   	push   edx
c000b28d:	50                   	push   eax
c000b28e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b291:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b294:	e8 4a 8c 01 00       	call   c0023ee3 <__adddf3>
c000b299:	83 c4 10             	add    esp,0x10
c000b29c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b29f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a6:	4f                   	dec    edi
c000b2a7:	83 ec 0c             	sub    esp,0xc
c000b2aa:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bc:	e8 96 9c 01 00       	call   c0024f57 <__extendsfdf2>
c000b2c1:	83 c4 10             	add    esp,0x10
c000b2c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2dc:	e8 7f 92 01 00       	call   c0024560 <__muldf3>
c000b2e1:	83 c4 10             	add    esp,0x10
c000b2e4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2ec:	52                   	push   edx
c000b2ed:	50                   	push   eax
c000b2ee:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f4:	e8 ea 8b 01 00       	call   c0023ee3 <__adddf3>
c000b2f9:	83 c4 10             	add    esp,0x10
c000b2fc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2ff:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b302:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b306:	4f                   	dec    edi
c000b307:	83 ec 0c             	sub    esp,0xc
c000b30a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b311:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b318:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31c:	e8 36 9c 01 00       	call   c0024f57 <__extendsfdf2>
c000b321:	83 c4 10             	add    esp,0x10
c000b324:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b328:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b330:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b334:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b338:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33c:	e8 1f 92 01 00       	call   c0024560 <__muldf3>
c000b341:	83 c4 10             	add    esp,0x10
c000b344:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b348:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34c:	52                   	push   edx
c000b34d:	50                   	push   eax
c000b34e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b351:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b354:	e8 8a 8b 01 00       	call   c0023ee3 <__adddf3>
c000b359:	83 c4 10             	add    esp,0x10
c000b35c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b362:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b366:	4f                   	dec    edi
c000b367:	83 ec 0c             	sub    esp,0xc
c000b36a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b371:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b378:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37c:	e8 d6 9b 01 00       	call   c0024f57 <__extendsfdf2>
c000b381:	83 c4 10             	add    esp,0x10
c000b384:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b388:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b390:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b394:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b398:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39c:	e8 bf 91 01 00       	call   c0024560 <__muldf3>
c000b3a1:	83 c4 10             	add    esp,0x10
c000b3a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ac:	52                   	push   edx
c000b3ad:	50                   	push   eax
c000b3ae:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b4:	e8 2a 8b 01 00       	call   c0023ee3 <__adddf3>
c000b3b9:	83 c4 10             	add    esp,0x10
c000b3bc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3bf:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c2:	85 ff                	test   edi,edi
c000b3c4:	0f 8f e1 fc ff ff    	jg     c000b0ab <calc_output_multi+0x4fc>
c000b3ca:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b3ce:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b3d2:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b3d6:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b3db:	0f 8f 3f fc ff ff    	jg     c000b020 <calc_output_multi+0x471>
c000b3e1:	be 08 00 00 00       	mov    esi,0x8
c000b3e6:	89 d8                	mov    eax,ebx
c000b3e8:	99                   	cdq    
c000b3e9:	f7 fe                	idiv   esi
c000b3eb:	4a                   	dec    edx
c000b3ec:	83 fa 06             	cmp    edx,0x6
c000b3ef:	77 07                	ja     c000b3f8 <calc_output_multi+0x849>
c000b3f1:	ff 24 95 9c 67 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9864]
c000b3f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3fc:	4b                   	dec    ebx
c000b3fd:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b401:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b404:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b408:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b40c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b40f:	e8 cf 8a 01 00       	call   c0023ee3 <__adddf3>
c000b414:	83 c4 10             	add    esp,0x10
c000b417:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b41b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b41f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b423:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b427:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b42b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b42f:	e8 2c 91 01 00       	call   c0024560 <__muldf3>
c000b434:	5d                   	pop    ebp
c000b435:	59                   	pop    ecx
c000b436:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b43a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b43e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b442:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b446:	e8 e8 99 01 00       	call   c0024e33 <__truncdfsf2>
c000b44b:	83 c4 10             	add    esp,0x10
c000b44e:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b452:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b455:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b459:	4b                   	dec    ebx
c000b45a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b45e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b461:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b465:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b469:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b46c:	e8 72 8a 01 00       	call   c0023ee3 <__adddf3>
c000b471:	83 c4 10             	add    esp,0x10
c000b474:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b478:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b47c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b480:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48c:	e8 cf 90 01 00       	call   c0024560 <__muldf3>
c000b491:	59                   	pop    ecx
c000b492:	5f                   	pop    edi
c000b493:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b497:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b49b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b49f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4a3:	e8 8b 99 01 00       	call   c0024e33 <__truncdfsf2>
c000b4a8:	83 c4 10             	add    esp,0x10
c000b4ab:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4af:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4b6:	4b                   	dec    ebx
c000b4b7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4bb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4c2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4c6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4c9:	e8 15 8a 01 00       	call   c0023ee3 <__adddf3>
c000b4ce:	83 c4 10             	add    esp,0x10
c000b4d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4e9:	e8 72 90 01 00       	call   c0024560 <__muldf3>
c000b4ee:	5f                   	pop    edi
c000b4ef:	5d                   	pop    ebp
c000b4f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b500:	e8 2e 99 01 00       	call   c0024e33 <__truncdfsf2>
c000b505:	83 c4 10             	add    esp,0x10
c000b508:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b50c:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b50f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b513:	4b                   	dec    ebx
c000b514:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b518:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b51b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b51f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b523:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b526:	e8 b8 89 01 00       	call   c0023ee3 <__adddf3>
c000b52b:	83 c4 10             	add    esp,0x10
c000b52e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b532:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b536:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b53e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b542:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b546:	e8 15 90 01 00       	call   c0024560 <__muldf3>
c000b54b:	5d                   	pop    ebp
c000b54c:	59                   	pop    ecx
c000b54d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b551:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b555:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b559:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b55d:	e8 d1 98 01 00       	call   c0024e33 <__truncdfsf2>
c000b562:	83 c4 10             	add    esp,0x10
c000b565:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b569:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b56c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b570:	4b                   	dec    ebx
c000b571:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b575:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b578:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b57c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b580:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b583:	e8 5b 89 01 00       	call   c0023ee3 <__adddf3>
c000b588:	83 c4 10             	add    esp,0x10
c000b58b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b58f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b593:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b597:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b59b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b59f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5a3:	e8 b8 8f 01 00       	call   c0024560 <__muldf3>
c000b5a8:	59                   	pop    ecx
c000b5a9:	5f                   	pop    edi
c000b5aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ba:	e8 74 98 01 00       	call   c0024e33 <__truncdfsf2>
c000b5bf:	83 c4 10             	add    esp,0x10
c000b5c2:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5c6:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5cd:	4b                   	dec    ebx
c000b5ce:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5d2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5d9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5dd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e0:	e8 fe 88 01 00       	call   c0023ee3 <__adddf3>
c000b5e5:	83 c4 10             	add    esp,0x10
c000b5e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b600:	e8 5b 8f 01 00       	call   c0024560 <__muldf3>
c000b605:	5f                   	pop    edi
c000b606:	5d                   	pop    ebp
c000b607:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b60b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b60f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b613:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b617:	e8 17 98 01 00       	call   c0024e33 <__truncdfsf2>
c000b61c:	83 c4 10             	add    esp,0x10
c000b61f:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b623:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b626:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b62a:	4b                   	dec    ebx
c000b62b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b62f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b632:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b636:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b63d:	e8 a1 88 01 00       	call   c0023ee3 <__adddf3>
c000b642:	83 c4 10             	add    esp,0x10
c000b645:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b649:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b64d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b651:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b655:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b659:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b65d:	e8 fe 8e 01 00       	call   c0024560 <__muldf3>
c000b662:	5d                   	pop    ebp
c000b663:	59                   	pop    ecx
c000b664:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b668:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b66c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b670:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b674:	e8 ba 97 01 00       	call   c0024e33 <__truncdfsf2>
c000b679:	83 c4 10             	add    esp,0x10
c000b67c:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b680:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b683:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b687:	4b                   	dec    ebx
c000b688:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b68c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b68f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b693:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b697:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69a:	e8 44 88 01 00       	call   c0023ee3 <__adddf3>
c000b69f:	83 c4 10             	add    esp,0x10
c000b6a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6ba:	e8 a1 8e 01 00       	call   c0024560 <__muldf3>
c000b6bf:	59                   	pop    ecx
c000b6c0:	5f                   	pop    edi
c000b6c1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6c5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6d1:	e8 5d 97 01 00       	call   c0024e33 <__truncdfsf2>
c000b6d6:	83 c4 10             	add    esp,0x10
c000b6d9:	85 db                	test   ebx,ebx
c000b6db:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b6df:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b6e2:	0f 8f fe fc ff ff    	jg     c000b3e6 <calc_output_multi+0x837>
c000b6e8:	83 c4 4c             	add    esp,0x4c
c000b6eb:	5b                   	pop    ebx
c000b6ec:	5e                   	pop    esi
c000b6ed:	5f                   	pop    edi
c000b6ee:	5d                   	pop    ebp
c000b6ef:	c3                   	ret    

c000b6f0 <double_to_fp>:
c000b6f0:	83 ec 0c             	sub    esp,0xc
c000b6f3:	68 00 00 b0 40       	push   0x40b00000
c000b6f8:	6a 00                	push   0x0
c000b6fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b702:	e8 59 8e 01 00       	call   c0024560 <__muldf3>
c000b707:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b70b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b70f:	83 c4 1c             	add    esp,0x1c
c000b712:	e9 c9 98 01 00       	jmp    c0024fe0 <lrint>

c000b717 <fmod_one>:
c000b717:	83 ec 2c             	sub    esp,0x2c
c000b71a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b71e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b722:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b726:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b72a:	83 ec 08             	sub    esp,0x8
c000b72d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b731:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b735:	e8 a6 98 01 00       	call   c0024fe0 <lrint>
c000b73a:	83 c4 10             	add    esp,0x10
c000b73d:	83 ec 0c             	sub    esp,0xc
c000b740:	50                   	push   eax
c000b741:	e8 7d 94 01 00       	call   c0024bc3 <__floatsidf>
c000b746:	83 c4 10             	add    esp,0x10
c000b749:	52                   	push   edx
c000b74a:	50                   	push   eax
c000b74b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b74f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b753:	e8 dc 8d 01 00       	call   c0024534 <__subdf3>
c000b758:	83 c4 10             	add    esp,0x10
c000b75b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b75f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b763:	b8 00 00 00 00       	mov    eax,0x0
c000b768:	ba 00 00 00 00       	mov    edx,0x0
c000b76d:	52                   	push   edx
c000b76e:	50                   	push   eax
c000b76f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b773:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b777:	e8 b3 96 01 00       	call   c0024e2f <__ltdf2>
c000b77c:	83 c4 10             	add    esp,0x10
c000b77f:	85 c0                	test   eax,eax
c000b781:	79 1e                	jns    c000b7a1 <fmod_one+0x8a>
c000b783:	b8 00 00 00 00       	mov    eax,0x0
c000b788:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c000b78d:	52                   	push   edx
c000b78e:	50                   	push   eax
c000b78f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b793:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b797:	e8 47 87 01 00       	call   c0023ee3 <__adddf3>
c000b79c:	83 c4 10             	add    esp,0x10
c000b79f:	eb 08                	jmp    c000b7a9 <fmod_one+0x92>
c000b7a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b7a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b7a9:	83 c4 2c             	add    esp,0x2c
c000b7ac:	c3                   	ret    

c000b7ad <prepare_data>:
c000b7ad:	55                   	push   ebp
c000b7ae:	57                   	push   edi
c000b7af:	56                   	push   esi
c000b7b0:	53                   	push   ebx
c000b7b1:	83 ec 1c             	sub    esp,0x1c
c000b7b4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b7b8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b7bc:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b7c0:	0f 89 57 01 00 00    	jns    c000b91d <prepare_data+0x170>
c000b7c6:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b7c9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b7cc:	85 d2                	test   edx,edx
c000b7ce:	75 0d                	jne    c000b7dd <prepare_data+0x30>
c000b7d0:	8d 14 36             	lea    edx,[esi+esi*1]
c000b7d3:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b7d6:	29 d0                	sub    eax,edx
c000b7d8:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7db:	eb 44                	jmp    c000b821 <prepare_data+0x74>
c000b7dd:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b7e0:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b7e3:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b7e6:	39 c1                	cmp    ecx,eax
c000b7e8:	7d 04                	jge    c000b7ee <prepare_data+0x41>
c000b7ea:	29 d0                	sub    eax,edx
c000b7ec:	eb 2d                	jmp    c000b81b <prepare_data+0x6e>
c000b7ee:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b7f4:	29 d7                	sub    edi,edx
c000b7f6:	01 f7                	add    edi,esi
c000b7f8:	51                   	push   ecx
c000b7f9:	29 f2                	sub    edx,esi
c000b7fb:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b802:	8d 14 90             	lea    edx,[eax+edx*4]
c000b805:	51                   	push   ecx
c000b806:	52                   	push   edx
c000b807:	50                   	push   eax
c000b808:	e8 53 4e ff ff       	call   c0000660 <memmove>
c000b80d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b810:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b813:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b816:	29 f0                	sub    eax,esi
c000b818:	83 c4 10             	add    esp,0x10
c000b81b:	29 f0                	sub    eax,esi
c000b81d:	79 02                	jns    c000b821 <prepare_data+0x74>
c000b81f:	31 c0                	xor    eax,eax
c000b821:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b824:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b827:	29 ef                	sub    edi,ebp
c000b829:	39 c7                	cmp    edi,eax
c000b82b:	7e 02                	jle    c000b82f <prepare_data+0x82>
c000b82d:	89 c7                	mov    edi,eax
c000b82f:	89 f8                	mov    eax,edi
c000b831:	99                   	cdq    
c000b832:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b835:	b8 15 00 00 00       	mov    eax,0x15
c000b83a:	29 d7                	sub    edi,edx
c000b83c:	0f 88 dd 00 00 00    	js     c000b91f <prepare_data+0x172>
c000b842:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b845:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b848:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b84b:	0f 8f ce 00 00 00    	jg     c000b91f <prepare_data+0x172>
c000b851:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b857:	50                   	push   eax
c000b858:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b85f:	50                   	push   eax
c000b860:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b864:	8b 00                	mov    eax,DWORD PTR [eax]
c000b866:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b869:	50                   	push   eax
c000b86a:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b86d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b871:	50                   	push   eax
c000b872:	e8 21 4e ff ff       	call   c0000698 <memcpy>
c000b877:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b87a:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b87d:	01 fd                	add    ebp,edi
c000b87f:	01 f9                	add    ecx,edi
c000b881:	83 c4 10             	add    esp,0x10
c000b884:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b887:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b88a:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b88d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b891:	0f 85 86 00 00 00    	jne    c000b91d <prepare_data+0x170>
c000b897:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b89a:	89 e8                	mov    eax,ebp
c000b89c:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b89f:	29 c8                	sub    eax,ecx
c000b8a1:	39 f8                	cmp    eax,edi
c000b8a3:	7d 78                	jge    c000b91d <prepare_data+0x170>
c000b8a5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b8a9:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b8ad:	74 6e                	je     c000b91d <prepare_data+0x170>
c000b8af:	8d 7e 04             	lea    edi,[esi+0x4]
c000b8b2:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b8b6:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b8b9:	29 ef                	sub    edi,ebp
c000b8bb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b8bf:	7c 29                	jl     c000b8ea <prepare_data+0x13d>
c000b8c1:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b8c4:	29 f1                	sub    ecx,esi
c000b8c6:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b8cd:	55                   	push   ebp
c000b8ce:	50                   	push   eax
c000b8cf:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b8d2:	50                   	push   eax
c000b8d3:	52                   	push   edx
c000b8d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b8d8:	e8 83 4d ff ff       	call   c0000660 <memmove>
c000b8dd:	83 c4 10             	add    esp,0x10
c000b8e0:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8e3:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b8e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b8ea:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b8ed:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b8f0:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b8f3:	83 c6 05             	add    esi,0x5
c000b8f6:	78 07                	js     c000b8ff <prepare_data+0x152>
c000b8f8:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b8fb:	39 cf                	cmp    edi,ecx
c000b8fd:	7e 04                	jle    c000b903 <prepare_data+0x156>
c000b8ff:	89 ce                	mov    esi,ecx
c000b901:	29 c6                	sub    esi,eax
c000b903:	8d 04 82             	lea    eax,[edx+eax*4]
c000b906:	51                   	push   ecx
c000b907:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b90e:	51                   	push   ecx
c000b90f:	6a 00                	push   0x0
c000b911:	50                   	push   eax
c000b912:	e8 b7 4d ff ff       	call   c00006ce <memset>
c000b917:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b91a:	83 c4 10             	add    esp,0x10
c000b91d:	31 c0                	xor    eax,eax
c000b91f:	83 c4 1c             	add    esp,0x1c
c000b922:	5b                   	pop    ebx
c000b923:	5e                   	pop    esi
c000b924:	5f                   	pop    edi
c000b925:	5d                   	pop    ebp
c000b926:	c3                   	ret    

c000b927 <sinc_multichan_vari_process>:
c000b927:	55                   	push   ebp
c000b928:	b8 05 00 00 00       	mov    eax,0x5
c000b92d:	57                   	push   edi
c000b92e:	56                   	push   esi
c000b92f:	53                   	push   ebx
c000b930:	83 ec 4c             	sub    esp,0x4c
c000b933:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b937:	8b 6c 24 64          	mov    ebp,DWORD PTR [esp+0x64]
c000b93b:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b93e:	85 db                	test   ebx,ebx
c000b940:	0f 84 b5 05 00 00    	je     c000befb <sinc_multichan_vari_process+0x5d4>
c000b946:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000b949:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b94c:	0f af d0             	imul   edx,eax
c000b94f:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000b952:	0f af 45 0c          	imul   eax,DWORD PTR [ebp+0xc]
c000b956:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b95d:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b960:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b967:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b96a:	8b 06                	mov    eax,DWORD PTR [esi]
c000b96c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b970:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b974:	57                   	push   edi
c000b975:	57                   	push   edi
c000b976:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97e:	e8 15 dd ff ff       	call   c0009698 <is_bad_src_ratio>
c000b983:	83 c4 10             	add    esp,0x10
c000b986:	89 c2                	mov    edx,eax
c000b988:	b8 16 00 00 00       	mov    eax,0x16
c000b98d:	85 d2                	test   edx,edx
c000b98f:	0f 85 66 05 00 00    	jne    c000befb <sinc_multichan_vari_process+0x5d4>
c000b995:	83 ec 0c             	sub    esp,0xc
c000b998:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b99b:	e8 23 92 01 00       	call   c0024bc3 <__floatsidf>
c000b9a0:	83 c4 10             	add    esp,0x10
c000b9a3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9a6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b9aa:	68 00 00 00 40       	push   0x40000000
c000b9af:	6a 00                	push   0x0
c000b9b1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9b5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9b9:	e8 25 85 01 00       	call   c0023ee3 <__adddf3>
c000b9be:	59                   	pop    ecx
c000b9bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b9c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000b9c7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b9ca:	e8 f4 91 01 00       	call   c0024bc3 <__floatsidf>
c000b9cf:	83 c4 10             	add    esp,0x10
c000b9d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b9d6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b9da:	52                   	push   edx
c000b9db:	50                   	push   eax
c000b9dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9e0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9e4:	e8 5b 8e 01 00       	call   c0024844 <__divdf3>
c000b9e9:	83 c4 10             	add    esp,0x10
c000b9ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9f0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9f4:	8b 06                	mov    eax,DWORD PTR [esi]
c000b9f6:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b9f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ba00:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c000ba03:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c000ba06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba0a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba0e:	52                   	push   edx
c000ba0f:	50                   	push   eax
c000ba10:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba14:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba18:	e8 12 94 01 00       	call   c0024e2f <__ltdf2>
c000ba1d:	83 c4 10             	add    esp,0x10
c000ba20:	85 c0                	test   eax,eax
c000ba22:	79 1d                	jns    c000ba41 <sinc_multichan_vari_process+0x11a>
c000ba24:	68 00 00 f0 3f       	push   0x3ff00000
c000ba29:	6a 00                	push   0x0
c000ba2b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba2f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba33:	e8 f7 93 01 00       	call   c0024e2f <__ltdf2>
c000ba38:	83 c4 10             	add    esp,0x10
c000ba3b:	85 c0                	test   eax,eax
c000ba3d:	78 2c                	js     c000ba6b <sinc_multichan_vari_process+0x144>
c000ba3f:	eb 4a                	jmp    c000ba8b <sinc_multichan_vari_process+0x164>
c000ba41:	68 00 00 f0 3f       	push   0x3ff00000
c000ba46:	6a 00                	push   0x0
c000ba48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba50:	e8 da 93 01 00       	call   c0024e2f <__ltdf2>
c000ba55:	83 c4 10             	add    esp,0x10
c000ba58:	85 c0                	test   eax,eax
c000ba5a:	79 2f                	jns    c000ba8b <sinc_multichan_vari_process+0x164>
c000ba5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba60:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba64:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba67:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ba6b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000ba6f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000ba73:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba77:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba7b:	e8 c4 8d 01 00       	call   c0024844 <__divdf3>
c000ba80:	83 c4 10             	add    esp,0x10
c000ba83:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ba87:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba8b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ba8e:	50                   	push   eax
c000ba8f:	50                   	push   eax
c000ba90:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba94:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba98:	e8 43 95 01 00       	call   c0024fe0 <lrint>
c000ba9d:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000baa0:	40                   	inc    eax
c000baa1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000baa5:	0f af c7             	imul   eax,edi
c000baa8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000baac:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000baaf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bab3:	58                   	pop    eax
c000bab4:	5a                   	pop    edx
c000bab5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bab9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000babd:	e8 55 fc ff ff       	call   c000b717 <fmod_one>
c000bac2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bac5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bac9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bacd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bad0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bad4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bad8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000badc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bae0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bae4:	e8 4b 8a 01 00       	call   c0024534 <__subdf3>
c000bae9:	83 c4 18             	add    esp,0x18
c000baec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000baf0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000baf4:	52                   	push   edx
c000baf5:	50                   	push   eax
c000baf6:	e8 e5 94 01 00       	call   c0024fe0 <lrint>
c000bafb:	0f af f8             	imul   edi,eax
c000bafe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bb02:	01 f8                	add    eax,edi
c000bb04:	99                   	cdq    
c000bb05:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bb08:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bb0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb13:	68 00 00 f0 3f       	push   0x3ff00000
c000bb18:	6a 00                	push   0x0
c000bb1a:	e8 25 8d 01 00       	call   c0024844 <__divdf3>
c000bb1f:	83 c4 10             	add    esp,0x10
c000bb22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bb26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bb2a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bb2f:	68 23 42 92 0c       	push   0xc924223
c000bb34:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb38:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb3c:	e8 a2 83 01 00       	call   c0023ee3 <__adddf3>
c000bb41:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bb45:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bb49:	83 c4 20             	add    esp,0x20
c000bb4c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000bb54:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000bb5c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bb5f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bb62:	7d 4e                	jge    c000bbb2 <sinc_multichan_vari_process+0x28b>
c000bb64:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb67:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb6a:	01 c8                	add    eax,ecx
c000bb6c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb6f:	99                   	cdq    
c000bb70:	f7 f9                	idiv   ecx
c000bb72:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bb76:	7d 0c                	jge    c000bb84 <sinc_multichan_vari_process+0x25d>
c000bb78:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000bb7b:	85 ff                	test   edi,edi
c000bb7d:	79 68                	jns    c000bbe7 <sinc_multichan_vari_process+0x2c0>
c000bb7f:	e9 e3 00 00 00       	jmp    c000bc67 <sinc_multichan_vari_process+0x340>
c000bb84:	50                   	push   eax
c000bb85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb89:	55                   	push   ebp
c000bb8a:	53                   	push   ebx
c000bb8b:	e8 1d fc ff ff       	call   c000b7ad <prepare_data>
c000bb90:	83 c4 10             	add    esp,0x10
c000bb93:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb96:	85 c0                	test   eax,eax
c000bb98:	0f 85 5d 03 00 00    	jne    c000befb <sinc_multichan_vari_process+0x5d4>
c000bb9e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bba1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bba4:	01 c8                	add    eax,ecx
c000bba6:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bba9:	99                   	cdq    
c000bbaa:	f7 f9                	idiv   ecx
c000bbac:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bbb0:	7c c6                	jl     c000bb78 <sinc_multichan_vari_process+0x251>
c000bbb2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000bbb5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bbb9:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bbbc:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bbbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bbc3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bbc7:	89 06                	mov    DWORD PTR [esi],eax
c000bbc9:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bbcc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bbcf:	99                   	cdq    
c000bbd0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bbd3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000bbd6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bbd9:	99                   	cdq    
c000bbda:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bbdd:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c000bbe0:	31 c0                	xor    eax,eax
c000bbe2:	e9 14 03 00 00       	jmp    c000befb <sinc_multichan_vari_process+0x5d4>
c000bbe7:	83 ec 0c             	sub    esp,0xc
c000bbea:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bbed:	e8 d1 8f 01 00       	call   c0024bc3 <__floatsidf>
c000bbf2:	83 c4 10             	add    esp,0x10
c000bbf5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbfd:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000bc01:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000bc05:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc09:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc0d:	e8 d1 82 01 00       	call   c0023ee3 <__adddf3>
c000bc12:	83 c4 10             	add    esp,0x10
c000bc15:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc19:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc1d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc21:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc25:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc29:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc2d:	e8 b1 82 01 00       	call   c0023ee3 <__adddf3>
c000bc32:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bc35:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc39:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc3d:	e8 81 8f 01 00       	call   c0024bc3 <__floatsidf>
c000bc42:	83 c4 10             	add    esp,0x10
c000bc45:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc49:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc4d:	52                   	push   edx
c000bc4e:	50                   	push   eax
c000bc4f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc53:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc57:	e8 d1 91 01 00       	call   c0024e2d <__gedf2>
c000bc5c:	83 c4 10             	add    esp,0x10
c000bc5f:	85 c0                	test   eax,eax
c000bc61:	0f 89 4b ff ff ff    	jns    c000bbb2 <sinc_multichan_vari_process+0x28b>
c000bc67:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bc6b:	0f 8e ed 00 00 00    	jle    c000bd5e <sinc_multichan_vari_process+0x437>
c000bc71:	83 ec 10             	sub    esp,0x10
c000bc74:	ff 75 20             	push   DWORD PTR [ebp+0x20]
c000bc77:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
c000bc7a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bc7d:	ff 36                	push   DWORD PTR [esi]
c000bc7f:	e8 b0 88 01 00       	call   c0024534 <__subdf3>
c000bc84:	83 c4 18             	add    esp,0x18
c000bc87:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc8b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc8f:	52                   	push   edx
c000bc90:	50                   	push   eax
c000bc91:	e8 2a 93 01 00       	call   c0024fc0 <fabs>
c000bc96:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc9e:	83 c4 10             	add    esp,0x10
c000bca1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bca6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bcab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcaf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcb3:	e8 59 91 01 00       	call   c0024e11 <__gtdf2>
c000bcb8:	83 c4 10             	add    esp,0x10
c000bcbb:	85 c0                	test   eax,eax
c000bcbd:	0f 8e 9b 00 00 00    	jle    c000bd5e <sinc_multichan_vari_process+0x437>
c000bcc3:	8b 06                	mov    eax,DWORD PTR [esi]
c000bcc5:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bcc8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bccc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bcd0:	52                   	push   edx
c000bcd1:	50                   	push   eax
c000bcd2:	ff 75 20             	push   DWORD PTR [ebp+0x20]
c000bcd5:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
c000bcd8:	e8 57 88 01 00       	call   c0024534 <__subdf3>
c000bcdd:	59                   	pop    ecx
c000bcde:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bce2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000bce6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bce9:	e8 d5 8e 01 00       	call   c0024bc3 <__floatsidf>
c000bcee:	83 c4 10             	add    esp,0x10
c000bcf1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf9:	52                   	push   edx
c000bcfa:	50                   	push   eax
c000bcfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd03:	e8 58 88 01 00       	call   c0024560 <__muldf3>
c000bd08:	5f                   	pop    edi
c000bd09:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd0d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000bd11:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bd14:	e8 aa 8e 01 00       	call   c0024bc3 <__floatsidf>
c000bd19:	83 c4 10             	add    esp,0x10
c000bd1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd24:	52                   	push   edx
c000bd25:	50                   	push   eax
c000bd26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd2e:	e8 11 8b 01 00       	call   c0024844 <__divdf3>
c000bd33:	83 c4 10             	add    esp,0x10
c000bd36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd3a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd3e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd42:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd46:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd4a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd4e:	e8 90 81 01 00       	call   c0023ee3 <__adddf3>
c000bd53:	83 c4 10             	add    esp,0x10
c000bd56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd5e:	83 ec 0c             	sub    esp,0xc
c000bd61:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd64:	e8 5a 8e 01 00       	call   c0024bc3 <__floatsidf>
c000bd69:	83 c4 10             	add    esp,0x10
c000bd6c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd70:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd74:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd78:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd84:	e8 a6 90 01 00       	call   c0024e2f <__ltdf2>
c000bd89:	83 c4 10             	add    esp,0x10
c000bd8c:	85 c0                	test   eax,eax
c000bd8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bd92:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bd96:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd9a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000bd9e:	78 10                	js     c000bdb0 <sinc_multichan_vari_process+0x489>
c000bda0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bda4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000bda8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bdac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bdb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdb8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdbc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdc0:	e8 9b 87 01 00       	call   c0024560 <__muldf3>
c000bdc5:	59                   	pop    ecx
c000bdc6:	5f                   	pop    edi
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdcf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdd3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdd7:	e8 14 f9 ff ff       	call   c000b6f0 <double_to_fp>
c000bddc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde0:	89 c7                	mov    edi,eax
c000bde2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdee:	e8 6d 87 01 00       	call   c0024560 <__muldf3>
c000bdf3:	83 c4 18             	add    esp,0x18
c000bdf6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdfe:	52                   	push   edx
c000bdff:	50                   	push   eax
c000be00:	e8 eb f8 ff ff       	call   c000b6f0 <double_to_fp>
c000be05:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000be08:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000be0c:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000be0f:	8d 04 90             	lea    eax,[eax+edx*4]
c000be12:	50                   	push   eax
c000be13:	50                   	push   eax
c000be14:	50                   	push   eax
c000be15:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000be18:	e8 a6 8d 01 00       	call   c0024bc3 <__floatsidf>
c000be1d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000be21:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000be25:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be29:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be2d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be31:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be35:	e8 0a 8a 01 00       	call   c0024844 <__divdf3>
c000be3a:	83 c4 1c             	add    esp,0x1c
c000be3d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be41:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be45:	52                   	push   edx
c000be46:	89 fa                	mov    edx,edi
c000be48:	50                   	push   eax
c000be49:	89 d8                	mov    eax,ebx
c000be4b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be4e:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000be52:	e8 58 ed ff ff       	call   c000abaf <calc_output_multi>
c000be57:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be5a:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000be5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be61:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be65:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be69:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be6d:	e8 d2 89 01 00       	call   c0024844 <__divdf3>
c000be72:	83 c4 10             	add    esp,0x10
c000be75:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be79:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000be7d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be81:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be85:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be89:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be8d:	e8 51 80 01 00       	call   c0023ee3 <__adddf3>
c000be92:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000be96:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000be9a:	83 c4 28             	add    esp,0x28
c000be9d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bea1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bea5:	e8 6d f8 ff ff       	call   c000b717 <fmod_one>
c000beaa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bead:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beb1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000beb5:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000beb8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000bebc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bec0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bec4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bec8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000becc:	e8 63 86 01 00       	call   c0024534 <__subdf3>
c000bed1:	83 c4 18             	add    esp,0x18
c000bed4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bedc:	52                   	push   edx
c000bedd:	50                   	push   eax
c000bede:	e8 fd 90 01 00       	call   c0024fe0 <lrint>
c000bee3:	0f af f8             	imul   edi,eax
c000bee6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000beea:	83 c4 10             	add    esp,0x10
c000beed:	01 f8                	add    eax,edi
c000beef:	99                   	cdq    
c000bef0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bef3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bef6:	e9 61 fc ff ff       	jmp    c000bb5c <sinc_multichan_vari_process+0x235>
c000befb:	83 c4 4c             	add    esp,0x4c
c000befe:	5b                   	pop    ebx
c000beff:	5e                   	pop    esi
c000bf00:	5f                   	pop    edi
c000bf01:	5d                   	pop    ebp
c000bf02:	c3                   	ret    

c000bf03 <sinc_hex_vari_process>:
c000bf03:	55                   	push   ebp
c000bf04:	b8 05 00 00 00       	mov    eax,0x5
c000bf09:	57                   	push   edi
c000bf0a:	56                   	push   esi
c000bf0b:	53                   	push   ebx
c000bf0c:	83 ec 4c             	sub    esp,0x4c
c000bf0f:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bf13:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bf17:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000bf1a:	85 db                	test   ebx,ebx
c000bf1c:	0f 84 b7 05 00 00    	je     c000c4d9 <sinc_hex_vari_process+0x5d6>
c000bf22:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000bf25:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000bf28:	0f af d0             	imul   edx,eax
c000bf2b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000bf2e:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000bf32:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf39:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf3c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf43:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf46:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf49:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bf4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf51:	57                   	push   edi
c000bf52:	57                   	push   edi
c000bf53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf5b:	e8 38 d7 ff ff       	call   c0009698 <is_bad_src_ratio>
c000bf60:	83 c4 10             	add    esp,0x10
c000bf63:	89 c2                	mov    edx,eax
c000bf65:	b8 16 00 00 00       	mov    eax,0x16
c000bf6a:	85 d2                	test   edx,edx
c000bf6c:	0f 85 67 05 00 00    	jne    c000c4d9 <sinc_hex_vari_process+0x5d6>
c000bf72:	83 ec 0c             	sub    esp,0xc
c000bf75:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf78:	e8 46 8c 01 00       	call   c0024bc3 <__floatsidf>
c000bf7d:	83 c4 10             	add    esp,0x10
c000bf80:	89 04 24             	mov    DWORD PTR [esp],eax
c000bf83:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bf87:	68 00 00 00 40       	push   0x40000000
c000bf8c:	6a 00                	push   0x0
c000bf8e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bf92:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bf96:	e8 48 7f 01 00       	call   c0023ee3 <__adddf3>
c000bf9b:	59                   	pop    ecx
c000bf9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bfa0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000bfa4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfa7:	e8 17 8c 01 00       	call   c0024bc3 <__floatsidf>
c000bfac:	83 c4 10             	add    esp,0x10
c000bfaf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bfb3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bfb7:	52                   	push   edx
c000bfb8:	50                   	push   eax
c000bfb9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfbd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfc1:	e8 7e 88 01 00       	call   c0024844 <__divdf3>
c000bfc6:	83 c4 10             	add    esp,0x10
c000bfc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfcd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfd1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bfd4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bfd7:	89 04 24             	mov    DWORD PTR [esp],eax
c000bfda:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bfde:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bfe1:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000bfe4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bfe8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bfec:	52                   	push   edx
c000bfed:	50                   	push   eax
c000bfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bff6:	e8 34 8e 01 00       	call   c0024e2f <__ltdf2>
c000bffb:	83 c4 10             	add    esp,0x10
c000bffe:	85 c0                	test   eax,eax
c000c000:	79 1d                	jns    c000c01f <sinc_hex_vari_process+0x11c>
c000c002:	68 00 00 f0 3f       	push   0x3ff00000
c000c007:	6a 00                	push   0x0
c000c009:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c00d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c011:	e8 19 8e 01 00       	call   c0024e2f <__ltdf2>
c000c016:	83 c4 10             	add    esp,0x10
c000c019:	85 c0                	test   eax,eax
c000c01b:	78 2c                	js     c000c049 <sinc_hex_vari_process+0x146>
c000c01d:	eb 4a                	jmp    c000c069 <sinc_hex_vari_process+0x166>
c000c01f:	68 00 00 f0 3f       	push   0x3ff00000
c000c024:	6a 00                	push   0x0
c000c026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c02a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c02e:	e8 fc 8d 01 00       	call   c0024e2f <__ltdf2>
c000c033:	83 c4 10             	add    esp,0x10
c000c036:	85 c0                	test   eax,eax
c000c038:	79 2f                	jns    c000c069 <sinc_hex_vari_process+0x166>
c000c03a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c03e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c042:	89 04 24             	mov    DWORD PTR [esp],eax
c000c045:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c049:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c04d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c051:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c055:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c059:	e8 e6 87 01 00       	call   c0024844 <__divdf3>
c000c05e:	83 c4 10             	add    esp,0x10
c000c061:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c065:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c069:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c06c:	50                   	push   eax
c000c06d:	50                   	push   eax
c000c06e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c072:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c076:	e8 65 8f 01 00       	call   c0024fe0 <lrint>
c000c07b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c07e:	40                   	inc    eax
c000c07f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c083:	0f af c7             	imul   eax,edi
c000c086:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c08a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c08d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c091:	58                   	pop    eax
c000c092:	5a                   	pop    edx
c000c093:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c097:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c09b:	e8 77 f6 ff ff       	call   c000b717 <fmod_one>
c000c0a0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c0a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c0a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c0ab:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0ae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0c2:	e8 6d 84 01 00       	call   c0024534 <__subdf3>
c000c0c7:	83 c4 18             	add    esp,0x18
c000c0ca:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c0ce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c0d2:	52                   	push   edx
c000c0d3:	50                   	push   eax
c000c0d4:	e8 07 8f 01 00       	call   c0024fe0 <lrint>
c000c0d9:	0f af f8             	imul   edi,eax
c000c0dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0e0:	01 f8                	add    eax,edi
c000c0e2:	99                   	cdq    
c000c0e3:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f1:	68 00 00 f0 3f       	push   0x3ff00000
c000c0f6:	6a 00                	push   0x0
c000c0f8:	e8 47 87 01 00       	call   c0024844 <__divdf3>
c000c0fd:	83 c4 10             	add    esp,0x10
c000c100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c108:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c10d:	68 23 42 92 0c       	push   0xc924223
c000c112:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c116:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c11a:	e8 c4 7d 01 00       	call   c0023ee3 <__adddf3>
c000c11f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c123:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c127:	83 c4 20             	add    esp,0x20
c000c12a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c132:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000c13a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c13d:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c140:	7d 4e                	jge    c000c190 <sinc_hex_vari_process+0x28d>
c000c142:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c145:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c148:	01 c8                	add    eax,ecx
c000c14a:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c14d:	99                   	cdq    
c000c14e:	f7 f9                	idiv   ecx
c000c150:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c154:	7d 0c                	jge    c000c162 <sinc_hex_vari_process+0x25f>
c000c156:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c159:	85 ff                	test   edi,edi
c000c15b:	79 69                	jns    c000c1c6 <sinc_hex_vari_process+0x2c3>
c000c15d:	e9 e4 00 00 00       	jmp    c000c246 <sinc_hex_vari_process+0x343>
c000c162:	50                   	push   eax
c000c163:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c167:	56                   	push   esi
c000c168:	53                   	push   ebx
c000c169:	e8 3f f6 ff ff       	call   c000b7ad <prepare_data>
c000c16e:	83 c4 10             	add    esp,0x10
c000c171:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c174:	85 c0                	test   eax,eax
c000c176:	0f 85 5d 03 00 00    	jne    c000c4d9 <sinc_hex_vari_process+0x5d6>
c000c17c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c17f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c182:	01 c8                	add    eax,ecx
c000c184:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c187:	99                   	cdq    
c000c188:	f7 f9                	idiv   ecx
c000c18a:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c18e:	7c c6                	jl     c000c156 <sinc_hex_vari_process+0x253>
c000c190:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000c193:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c197:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c19a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c19d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c1a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c1ab:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c1ae:	99                   	cdq    
c000c1af:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c1b2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c1b5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c1b8:	99                   	cdq    
c000c1b9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c1bc:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c1bf:	31 c0                	xor    eax,eax
c000c1c1:	e9 13 03 00 00       	jmp    c000c4d9 <sinc_hex_vari_process+0x5d6>
c000c1c6:	83 ec 0c             	sub    esp,0xc
c000c1c9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c1cc:	e8 f2 89 01 00       	call   c0024bc3 <__floatsidf>
c000c1d1:	83 c4 10             	add    esp,0x10
c000c1d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1dc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c1e0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c1e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1ec:	e8 f2 7c 01 00       	call   c0023ee3 <__adddf3>
c000c1f1:	83 c4 10             	add    esp,0x10
c000c1f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1f8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c200:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c204:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c208:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c20c:	e8 d2 7c 01 00       	call   c0023ee3 <__adddf3>
c000c211:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c214:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c218:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c21c:	e8 a2 89 01 00       	call   c0024bc3 <__floatsidf>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c228:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c22c:	52                   	push   edx
c000c22d:	50                   	push   eax
c000c22e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c232:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c236:	e8 f2 8b 01 00       	call   c0024e2d <__gedf2>
c000c23b:	83 c4 10             	add    esp,0x10
c000c23e:	85 c0                	test   eax,eax
c000c240:	0f 89 4a ff ff ff    	jns    c000c190 <sinc_hex_vari_process+0x28d>
c000c246:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c24a:	0f 8e ef 00 00 00    	jle    c000c33f <sinc_hex_vari_process+0x43c>
c000c250:	83 ec 10             	sub    esp,0x10
c000c253:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c256:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c259:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c25c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c25f:	e8 d0 82 01 00       	call   c0024534 <__subdf3>
c000c264:	83 c4 18             	add    esp,0x18
c000c267:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c26b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c26f:	52                   	push   edx
c000c270:	50                   	push   eax
c000c271:	e8 4a 8d 01 00       	call   c0024fc0 <fabs>
c000c276:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c27a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c27e:	83 c4 10             	add    esp,0x10
c000c281:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c286:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c28b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c293:	e8 79 8b 01 00       	call   c0024e11 <__gtdf2>
c000c298:	83 c4 10             	add    esp,0x10
c000c29b:	85 c0                	test   eax,eax
c000c29d:	0f 8e 9c 00 00 00    	jle    c000c33f <sinc_hex_vari_process+0x43c>
c000c2a3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c2a6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c2a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c2ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c2b1:	52                   	push   edx
c000c2b2:	50                   	push   eax
c000c2b3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2b6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2b9:	e8 76 82 01 00       	call   c0024534 <__subdf3>
c000c2be:	59                   	pop    ecx
c000c2bf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c2c3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c2c7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c2ca:	e8 f4 88 01 00       	call   c0024bc3 <__floatsidf>
c000c2cf:	83 c4 10             	add    esp,0x10
c000c2d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2da:	52                   	push   edx
c000c2db:	50                   	push   eax
c000c2dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e4:	e8 77 82 01 00       	call   c0024560 <__muldf3>
c000c2e9:	5f                   	pop    edi
c000c2ea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c2ee:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c2f2:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c2f5:	e8 c9 88 01 00       	call   c0024bc3 <__floatsidf>
c000c2fa:	83 c4 10             	add    esp,0x10
c000c2fd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c301:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c305:	52                   	push   edx
c000c306:	50                   	push   eax
c000c307:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c30b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c30f:	e8 30 85 01 00       	call   c0024844 <__divdf3>
c000c314:	83 c4 10             	add    esp,0x10
c000c317:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c31b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c31f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c327:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c32b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c32f:	e8 af 7b 01 00       	call   c0023ee3 <__adddf3>
c000c334:	83 c4 10             	add    esp,0x10
c000c337:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c33b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c33f:	83 ec 0c             	sub    esp,0xc
c000c342:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c345:	e8 79 88 01 00       	call   c0024bc3 <__floatsidf>
c000c34a:	83 c4 10             	add    esp,0x10
c000c34d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c351:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c355:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c359:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c35d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c361:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c365:	e8 c5 8a 01 00       	call   c0024e2f <__ltdf2>
c000c36a:	83 c4 10             	add    esp,0x10
c000c36d:	85 c0                	test   eax,eax
c000c36f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c373:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c377:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c37b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c37f:	78 10                	js     c000c391 <sinc_hex_vari_process+0x48e>
c000c381:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c385:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c389:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c38d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c391:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c395:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c399:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c39d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3a1:	e8 ba 81 01 00       	call   c0024560 <__muldf3>
c000c3a6:	59                   	pop    ecx
c000c3a7:	5f                   	pop    edi
c000c3a8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3b0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3b8:	e8 33 f3 ff ff       	call   c000b6f0 <double_to_fp>
c000c3bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3c1:	89 c7                	mov    edi,eax
c000c3c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3cf:	e8 8c 81 01 00       	call   c0024560 <__muldf3>
c000c3d4:	83 c4 18             	add    esp,0x18
c000c3d7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c3db:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c3df:	52                   	push   edx
c000c3e0:	50                   	push   eax
c000c3e1:	e8 0a f3 ff ff       	call   c000b6f0 <double_to_fp>
c000c3e6:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c3e9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c3ed:	83 c4 0c             	add    esp,0xc
c000c3f0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c3f3:	8d 04 90             	lea    eax,[eax+edx*4]
c000c3f6:	50                   	push   eax
c000c3f7:	50                   	push   eax
c000c3f8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3fb:	e8 c3 87 01 00       	call   c0024bc3 <__floatsidf>
c000c400:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c404:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c408:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c40c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c410:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c414:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c418:	e8 27 84 01 00       	call   c0024844 <__divdf3>
c000c41d:	83 c4 18             	add    esp,0x18
c000c420:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c424:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c428:	52                   	push   edx
c000c429:	89 fa                	mov    edx,edi
c000c42b:	50                   	push   eax
c000c42c:	89 d8                	mov    eax,ebx
c000c42e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c432:	e8 26 df ff ff       	call   c000a35d <calc_output_hex>
c000c437:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c43b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c43f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c443:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c44b:	e8 f4 83 01 00       	call   c0024844 <__divdf3>
c000c450:	83 c4 10             	add    esp,0x10
c000c453:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c457:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c45b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c45f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c463:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c467:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c46b:	e8 73 7a 01 00       	call   c0023ee3 <__adddf3>
c000c470:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c474:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c478:	83 c4 18             	add    esp,0x18
c000c47b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c47f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c483:	e8 8f f2 ff ff       	call   c000b717 <fmod_one>
c000c488:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c48b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c48f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c493:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c496:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c49a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c49e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c4a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4aa:	e8 85 80 01 00       	call   c0024534 <__subdf3>
c000c4af:	83 c4 18             	add    esp,0x18
c000c4b2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ba:	52                   	push   edx
c000c4bb:	50                   	push   eax
c000c4bc:	e8 1f 8b 01 00       	call   c0024fe0 <lrint>
c000c4c1:	0f af f8             	imul   edi,eax
c000c4c4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c4c8:	83 c4 10             	add    esp,0x10
c000c4cb:	01 f8                	add    eax,edi
c000c4cd:	99                   	cdq    
c000c4ce:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c4d1:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c4d4:	e9 61 fc ff ff       	jmp    c000c13a <sinc_hex_vari_process+0x237>
c000c4d9:	83 c4 4c             	add    esp,0x4c
c000c4dc:	5b                   	pop    ebx
c000c4dd:	5e                   	pop    esi
c000c4de:	5f                   	pop    edi
c000c4df:	5d                   	pop    ebp
c000c4e0:	c3                   	ret    

c000c4e1 <sinc_quad_vari_process>:
c000c4e1:	55                   	push   ebp
c000c4e2:	b8 05 00 00 00       	mov    eax,0x5
c000c4e7:	57                   	push   edi
c000c4e8:	56                   	push   esi
c000c4e9:	53                   	push   ebx
c000c4ea:	83 ec 4c             	sub    esp,0x4c
c000c4ed:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c4f1:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c4f5:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c4f8:	85 db                	test   ebx,ebx
c000c4fa:	0f 84 b7 05 00 00    	je     c000cab7 <sinc_quad_vari_process+0x5d6>
c000c500:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000c503:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c506:	0f af d0             	imul   edx,eax
c000c509:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000c50c:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000c510:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c517:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c51a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c52b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c52f:	57                   	push   edi
c000c530:	57                   	push   edi
c000c531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c539:	e8 5a d1 ff ff       	call   c0009698 <is_bad_src_ratio>
c000c53e:	83 c4 10             	add    esp,0x10
c000c541:	89 c2                	mov    edx,eax
c000c543:	b8 16 00 00 00       	mov    eax,0x16
c000c548:	85 d2                	test   edx,edx
c000c54a:	0f 85 67 05 00 00    	jne    c000cab7 <sinc_quad_vari_process+0x5d6>
c000c550:	83 ec 0c             	sub    esp,0xc
c000c553:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c556:	e8 68 86 01 00       	call   c0024bc3 <__floatsidf>
c000c55b:	83 c4 10             	add    esp,0x10
c000c55e:	89 04 24             	mov    DWORD PTR [esp],eax
c000c561:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c565:	68 00 00 00 40       	push   0x40000000
c000c56a:	6a 00                	push   0x0
c000c56c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c570:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c574:	e8 6a 79 01 00       	call   c0023ee3 <__adddf3>
c000c579:	59                   	pop    ecx
c000c57a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c57e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c582:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c585:	e8 39 86 01 00       	call   c0024bc3 <__floatsidf>
c000c58a:	83 c4 10             	add    esp,0x10
c000c58d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c591:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c595:	52                   	push   edx
c000c596:	50                   	push   eax
c000c597:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c59b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c59f:	e8 a0 82 01 00       	call   c0024844 <__divdf3>
c000c5a4:	83 c4 10             	add    esp,0x10
c000c5a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c5ab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c5af:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5b2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c5b5:	89 04 24             	mov    DWORD PTR [esp],eax
c000c5b8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c5bc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c5bf:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c5c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ca:	52                   	push   edx
c000c5cb:	50                   	push   eax
c000c5cc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5d4:	e8 56 88 01 00       	call   c0024e2f <__ltdf2>
c000c5d9:	83 c4 10             	add    esp,0x10
c000c5dc:	85 c0                	test   eax,eax
c000c5de:	79 1d                	jns    c000c5fd <sinc_quad_vari_process+0x11c>
c000c5e0:	68 00 00 f0 3f       	push   0x3ff00000
c000c5e5:	6a 00                	push   0x0
c000c5e7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5ef:	e8 3b 88 01 00       	call   c0024e2f <__ltdf2>
c000c5f4:	83 c4 10             	add    esp,0x10
c000c5f7:	85 c0                	test   eax,eax
c000c5f9:	78 2c                	js     c000c627 <sinc_quad_vari_process+0x146>
c000c5fb:	eb 4a                	jmp    c000c647 <sinc_quad_vari_process+0x166>
c000c5fd:	68 00 00 f0 3f       	push   0x3ff00000
c000c602:	6a 00                	push   0x0
c000c604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c608:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60c:	e8 1e 88 01 00       	call   c0024e2f <__ltdf2>
c000c611:	83 c4 10             	add    esp,0x10
c000c614:	85 c0                	test   eax,eax
c000c616:	79 2f                	jns    c000c647 <sinc_quad_vari_process+0x166>
c000c618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c61c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c620:	89 04 24             	mov    DWORD PTR [esp],eax
c000c623:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c627:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c62b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c62f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c637:	e8 08 82 01 00       	call   c0024844 <__divdf3>
c000c63c:	83 c4 10             	add    esp,0x10
c000c63f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c643:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c647:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c64a:	50                   	push   eax
c000c64b:	50                   	push   eax
c000c64c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c650:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c654:	e8 87 89 01 00       	call   c0024fe0 <lrint>
c000c659:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c65c:	40                   	inc    eax
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	0f af c7             	imul   eax,edi
c000c664:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c668:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c66b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c66f:	58                   	pop    eax
c000c670:	5a                   	pop    edx
c000c671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c675:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c679:	e8 99 f0 ff ff       	call   c000b717 <fmod_one>
c000c67e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c681:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c685:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c689:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c68c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c698:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c69c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6a0:	e8 8f 7e 01 00       	call   c0024534 <__subdf3>
c000c6a5:	83 c4 18             	add    esp,0x18
c000c6a8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c6ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c6b0:	52                   	push   edx
c000c6b1:	50                   	push   eax
c000c6b2:	e8 29 89 01 00       	call   c0024fe0 <lrint>
c000c6b7:	0f af f8             	imul   edi,eax
c000c6ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c6be:	01 f8                	add    eax,edi
c000c6c0:	99                   	cdq    
c000c6c1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c6c4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c6c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6cf:	68 00 00 f0 3f       	push   0x3ff00000
c000c6d4:	6a 00                	push   0x0
c000c6d6:	e8 69 81 01 00       	call   c0024844 <__divdf3>
c000c6db:	83 c4 10             	add    esp,0x10
c000c6de:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6e6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c6eb:	68 23 42 92 0c       	push   0xc924223
c000c6f0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6f8:	e8 e6 77 01 00       	call   c0023ee3 <__adddf3>
c000c6fd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c701:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c705:	83 c4 20             	add    esp,0x20
c000c708:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c710:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000c718:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c71b:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c71e:	7d 4e                	jge    c000c76e <sinc_quad_vari_process+0x28d>
c000c720:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c723:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c726:	01 c8                	add    eax,ecx
c000c728:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c72b:	99                   	cdq    
c000c72c:	f7 f9                	idiv   ecx
c000c72e:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c732:	7d 0c                	jge    c000c740 <sinc_quad_vari_process+0x25f>
c000c734:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c737:	85 ff                	test   edi,edi
c000c739:	79 69                	jns    c000c7a4 <sinc_quad_vari_process+0x2c3>
c000c73b:	e9 e4 00 00 00       	jmp    c000c824 <sinc_quad_vari_process+0x343>
c000c740:	50                   	push   eax
c000c741:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c745:	56                   	push   esi
c000c746:	53                   	push   ebx
c000c747:	e8 61 f0 ff ff       	call   c000b7ad <prepare_data>
c000c74c:	83 c4 10             	add    esp,0x10
c000c74f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c752:	85 c0                	test   eax,eax
c000c754:	0f 85 5d 03 00 00    	jne    c000cab7 <sinc_quad_vari_process+0x5d6>
c000c75a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c75d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c760:	01 c8                	add    eax,ecx
c000c762:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c765:	99                   	cdq    
c000c766:	f7 f9                	idiv   ecx
c000c768:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c76c:	7c c6                	jl     c000c734 <sinc_quad_vari_process+0x253>
c000c76e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000c771:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c775:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c778:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c77b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c77f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c783:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c786:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c789:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c78c:	99                   	cdq    
c000c78d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c790:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c793:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c796:	99                   	cdq    
c000c797:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c79a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c79d:	31 c0                	xor    eax,eax
c000c79f:	e9 13 03 00 00       	jmp    c000cab7 <sinc_quad_vari_process+0x5d6>
c000c7a4:	83 ec 0c             	sub    esp,0xc
c000c7a7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c7aa:	e8 14 84 01 00       	call   c0024bc3 <__floatsidf>
c000c7af:	83 c4 10             	add    esp,0x10
c000c7b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7b6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7ba:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c7be:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c7c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7ca:	e8 14 77 01 00       	call   c0023ee3 <__adddf3>
c000c7cf:	83 c4 10             	add    esp,0x10
c000c7d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7da:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7de:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7ea:	e8 f4 76 01 00       	call   c0023ee3 <__adddf3>
c000c7ef:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c7f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7fa:	e8 c4 83 01 00       	call   c0024bc3 <__floatsidf>
c000c7ff:	83 c4 10             	add    esp,0x10
c000c802:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c806:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c80a:	52                   	push   edx
c000c80b:	50                   	push   eax
c000c80c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c810:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c814:	e8 14 86 01 00       	call   c0024e2d <__gedf2>
c000c819:	83 c4 10             	add    esp,0x10
c000c81c:	85 c0                	test   eax,eax
c000c81e:	0f 89 4a ff ff ff    	jns    c000c76e <sinc_quad_vari_process+0x28d>
c000c824:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c828:	0f 8e ef 00 00 00    	jle    c000c91d <sinc_quad_vari_process+0x43c>
c000c82e:	83 ec 10             	sub    esp,0x10
c000c831:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c834:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c837:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c83a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c83d:	e8 f2 7c 01 00       	call   c0024534 <__subdf3>
c000c842:	83 c4 18             	add    esp,0x18
c000c845:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c849:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c84d:	52                   	push   edx
c000c84e:	50                   	push   eax
c000c84f:	e8 6c 87 01 00       	call   c0024fc0 <fabs>
c000c854:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c858:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c85c:	83 c4 10             	add    esp,0x10
c000c85f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c864:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c869:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c86d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c871:	e8 9b 85 01 00       	call   c0024e11 <__gtdf2>
c000c876:	83 c4 10             	add    esp,0x10
c000c879:	85 c0                	test   eax,eax
c000c87b:	0f 8e 9c 00 00 00    	jle    c000c91d <sinc_quad_vari_process+0x43c>
c000c881:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c884:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c887:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c88b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c88f:	52                   	push   edx
c000c890:	50                   	push   eax
c000c891:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c894:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c897:	e8 98 7c 01 00       	call   c0024534 <__subdf3>
c000c89c:	59                   	pop    ecx
c000c89d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c8a1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c8a5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c8a8:	e8 16 83 01 00       	call   c0024bc3 <__floatsidf>
c000c8ad:	83 c4 10             	add    esp,0x10
c000c8b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c8b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c8b8:	52                   	push   edx
c000c8b9:	50                   	push   eax
c000c8ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8c2:	e8 99 7c 01 00       	call   c0024560 <__muldf3>
c000c8c7:	5f                   	pop    edi
c000c8c8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c8cc:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c8d0:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c8d3:	e8 eb 82 01 00       	call   c0024bc3 <__floatsidf>
c000c8d8:	83 c4 10             	add    esp,0x10
c000c8db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c8df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c8e3:	52                   	push   edx
c000c8e4:	50                   	push   eax
c000c8e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8ed:	e8 52 7f 01 00       	call   c0024844 <__divdf3>
c000c8f2:	83 c4 10             	add    esp,0x10
c000c8f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8fd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c901:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c905:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c909:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c90d:	e8 d1 75 01 00       	call   c0023ee3 <__adddf3>
c000c912:	83 c4 10             	add    esp,0x10
c000c915:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c919:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c91d:	83 ec 0c             	sub    esp,0xc
c000c920:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c923:	e8 9b 82 01 00       	call   c0024bc3 <__floatsidf>
c000c928:	83 c4 10             	add    esp,0x10
c000c92b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c92f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c933:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c937:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c93b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c93f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c943:	e8 e7 84 01 00       	call   c0024e2f <__ltdf2>
c000c948:	83 c4 10             	add    esp,0x10
c000c94b:	85 c0                	test   eax,eax
c000c94d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c951:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c955:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c959:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c95d:	78 10                	js     c000c96f <sinc_quad_vari_process+0x48e>
c000c95f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c963:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c967:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c96b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c96f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c973:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c977:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c97b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c97f:	e8 dc 7b 01 00       	call   c0024560 <__muldf3>
c000c984:	59                   	pop    ecx
c000c985:	5f                   	pop    edi
c000c986:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c98a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c98e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c992:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c996:	e8 55 ed ff ff       	call   c000b6f0 <double_to_fp>
c000c99b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c99f:	89 c7                	mov    edi,eax
c000c9a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9ad:	e8 ae 7b 01 00       	call   c0024560 <__muldf3>
c000c9b2:	83 c4 18             	add    esp,0x18
c000c9b5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9b9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9bd:	52                   	push   edx
c000c9be:	50                   	push   eax
c000c9bf:	e8 2c ed ff ff       	call   c000b6f0 <double_to_fp>
c000c9c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c9c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c9cb:	83 c4 0c             	add    esp,0xc
c000c9ce:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c9d1:	8d 04 90             	lea    eax,[eax+edx*4]
c000c9d4:	50                   	push   eax
c000c9d5:	50                   	push   eax
c000c9d6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c9d9:	e8 e5 81 01 00       	call   c0024bc3 <__floatsidf>
c000c9de:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c9e2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c9e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9ea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9ee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9f6:	e8 49 7e 01 00       	call   c0024844 <__divdf3>
c000c9fb:	83 c4 18             	add    esp,0x18
c000c9fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca02:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca06:	52                   	push   edx
c000ca07:	89 fa                	mov    edx,edi
c000ca09:	50                   	push   eax
c000ca0a:	89 d8                	mov    eax,ebx
c000ca0c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000ca10:	e8 62 d3 ff ff       	call   c0009d77 <calc_output_quad>
c000ca15:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000ca19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca29:	e8 16 7e 01 00       	call   c0024844 <__divdf3>
c000ca2e:	83 c4 10             	add    esp,0x10
c000ca31:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca35:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca41:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca45:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca49:	e8 95 74 01 00       	call   c0023ee3 <__adddf3>
c000ca4e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ca52:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ca56:	83 c4 18             	add    esp,0x18
c000ca59:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca5d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca61:	e8 b1 ec ff ff       	call   c000b717 <fmod_one>
c000ca66:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca69:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca6d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca71:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca74:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ca78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca84:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca88:	e8 a7 7a 01 00       	call   c0024534 <__subdf3>
c000ca8d:	83 c4 18             	add    esp,0x18
c000ca90:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca94:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca98:	52                   	push   edx
c000ca99:	50                   	push   eax
c000ca9a:	e8 41 85 01 00       	call   c0024fe0 <lrint>
c000ca9f:	0f af f8             	imul   edi,eax
c000caa2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000caa6:	83 c4 10             	add    esp,0x10
c000caa9:	01 f8                	add    eax,edi
c000caab:	99                   	cdq    
c000caac:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000caaf:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cab2:	e9 61 fc ff ff       	jmp    c000c718 <sinc_quad_vari_process+0x237>
c000cab7:	83 c4 4c             	add    esp,0x4c
c000caba:	5b                   	pop    ebx
c000cabb:	5e                   	pop    esi
c000cabc:	5f                   	pop    edi
c000cabd:	5d                   	pop    ebp
c000cabe:	c3                   	ret    

c000cabf <sinc_stereo_vari_process>:
c000cabf:	55                   	push   ebp
c000cac0:	b8 05 00 00 00       	mov    eax,0x5
c000cac5:	57                   	push   edi
c000cac6:	56                   	push   esi
c000cac7:	53                   	push   ebx
c000cac8:	83 ec 4c             	sub    esp,0x4c
c000cacb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cacf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000cad3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cad6:	85 db                	test   ebx,ebx
c000cad8:	0f 84 b7 05 00 00    	je     c000d095 <sinc_stereo_vari_process+0x5d6>
c000cade:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000cae1:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000cae4:	0f af d0             	imul   edx,eax
c000cae7:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000caea:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000caee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000caf5:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000caf8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000caff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cb02:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cb05:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cb09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb0d:	57                   	push   edi
c000cb0e:	57                   	push   edi
c000cb0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb17:	e8 7c cb ff ff       	call   c0009698 <is_bad_src_ratio>
c000cb1c:	83 c4 10             	add    esp,0x10
c000cb1f:	89 c2                	mov    edx,eax
c000cb21:	b8 16 00 00 00       	mov    eax,0x16
c000cb26:	85 d2                	test   edx,edx
c000cb28:	0f 85 67 05 00 00    	jne    c000d095 <sinc_stereo_vari_process+0x5d6>
c000cb2e:	83 ec 0c             	sub    esp,0xc
c000cb31:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cb34:	e8 8a 80 01 00       	call   c0024bc3 <__floatsidf>
c000cb39:	83 c4 10             	add    esp,0x10
c000cb3c:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb3f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb43:	68 00 00 00 40       	push   0x40000000
c000cb48:	6a 00                	push   0x0
c000cb4a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb52:	e8 8c 73 01 00       	call   c0023ee3 <__adddf3>
c000cb57:	59                   	pop    ecx
c000cb58:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb5c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000cb60:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb63:	e8 5b 80 01 00       	call   c0024bc3 <__floatsidf>
c000cb68:	83 c4 10             	add    esp,0x10
c000cb6b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cb6f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cb73:	52                   	push   edx
c000cb74:	50                   	push   eax
c000cb75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb7d:	e8 c2 7c 01 00       	call   c0024844 <__divdf3>
c000cb82:	83 c4 10             	add    esp,0x10
c000cb85:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cb89:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cb8d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cb90:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cb93:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb96:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb9a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cb9d:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cba0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cba4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cba8:	52                   	push   edx
c000cba9:	50                   	push   eax
c000cbaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbb2:	e8 78 82 01 00       	call   c0024e2f <__ltdf2>
c000cbb7:	83 c4 10             	add    esp,0x10
c000cbba:	85 c0                	test   eax,eax
c000cbbc:	79 1d                	jns    c000cbdb <sinc_stereo_vari_process+0x11c>
c000cbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000cbc3:	6a 00                	push   0x0
c000cbc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbcd:	e8 5d 82 01 00       	call   c0024e2f <__ltdf2>
c000cbd2:	83 c4 10             	add    esp,0x10
c000cbd5:	85 c0                	test   eax,eax
c000cbd7:	78 2c                	js     c000cc05 <sinc_stereo_vari_process+0x146>
c000cbd9:	eb 4a                	jmp    c000cc25 <sinc_stereo_vari_process+0x166>
c000cbdb:	68 00 00 f0 3f       	push   0x3ff00000
c000cbe0:	6a 00                	push   0x0
c000cbe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbea:	e8 40 82 01 00       	call   c0024e2f <__ltdf2>
c000cbef:	83 c4 10             	add    esp,0x10
c000cbf2:	85 c0                	test   eax,eax
c000cbf4:	79 2f                	jns    c000cc25 <sinc_stereo_vari_process+0x166>
c000cbf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbfa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cbfe:	89 04 24             	mov    DWORD PTR [esp],eax
c000cc01:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cc05:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cc09:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cc0d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc11:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc15:	e8 2a 7c 01 00       	call   c0024844 <__divdf3>
c000cc1a:	83 c4 10             	add    esp,0x10
c000cc1d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cc21:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cc25:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc28:	50                   	push   eax
c000cc29:	50                   	push   eax
c000cc2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc32:	e8 a9 83 01 00       	call   c0024fe0 <lrint>
c000cc37:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000cc3a:	40                   	inc    eax
c000cc3b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc3f:	0f af c7             	imul   eax,edi
c000cc42:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc49:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc4d:	58                   	pop    eax
c000cc4e:	5a                   	pop    edx
c000cc4f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc53:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc57:	e8 bb ea ff ff       	call   c000b717 <fmod_one>
c000cc5c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc5f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc63:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc67:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc6a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cc6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc7e:	e8 b1 78 01 00       	call   c0024534 <__subdf3>
c000cc83:	83 c4 18             	add    esp,0x18
c000cc86:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc8a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc8e:	52                   	push   edx
c000cc8f:	50                   	push   eax
c000cc90:	e8 4b 83 01 00       	call   c0024fe0 <lrint>
c000cc95:	0f af f8             	imul   edi,eax
c000cc98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc9c:	01 f8                	add    eax,edi
c000cc9e:	99                   	cdq    
c000cc9f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cca2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cca5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccad:	68 00 00 f0 3f       	push   0x3ff00000
c000ccb2:	6a 00                	push   0x0
c000ccb4:	e8 8b 7b 01 00       	call   c0024844 <__divdf3>
c000ccb9:	83 c4 10             	add    esp,0x10
c000ccbc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccc0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccc4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ccc9:	68 23 42 92 0c       	push   0xc924223
c000ccce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccd6:	e8 08 72 01 00       	call   c0023ee3 <__adddf3>
c000ccdb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ccdf:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cce3:	83 c4 20             	add    esp,0x20
c000cce6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000ccee:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000ccf6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ccf9:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ccfc:	7d 4e                	jge    c000cd4c <sinc_stereo_vari_process+0x28d>
c000ccfe:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cd01:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cd04:	01 c8                	add    eax,ecx
c000cd06:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cd09:	99                   	cdq    
c000cd0a:	f7 f9                	idiv   ecx
c000cd0c:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000cd10:	7d 0c                	jge    c000cd1e <sinc_stereo_vari_process+0x25f>
c000cd12:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cd15:	85 ff                	test   edi,edi
c000cd17:	79 69                	jns    c000cd82 <sinc_stereo_vari_process+0x2c3>
c000cd19:	e9 e4 00 00 00       	jmp    c000ce02 <sinc_stereo_vari_process+0x343>
c000cd1e:	50                   	push   eax
c000cd1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd23:	56                   	push   esi
c000cd24:	53                   	push   ebx
c000cd25:	e8 83 ea ff ff       	call   c000b7ad <prepare_data>
c000cd2a:	83 c4 10             	add    esp,0x10
c000cd2d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cd30:	85 c0                	test   eax,eax
c000cd32:	0f 85 5d 03 00 00    	jne    c000d095 <sinc_stereo_vari_process+0x5d6>
c000cd38:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cd3b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cd3e:	01 c8                	add    eax,ecx
c000cd40:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cd43:	99                   	cdq    
c000cd44:	f7 f9                	idiv   ecx
c000cd46:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000cd4a:	7c c6                	jl     c000cd12 <sinc_stereo_vari_process+0x253>
c000cd4c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cd4f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd53:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cd56:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd61:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cd64:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cd67:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cd6a:	99                   	cdq    
c000cd6b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd6e:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cd71:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cd74:	99                   	cdq    
c000cd75:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd78:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cd7b:	31 c0                	xor    eax,eax
c000cd7d:	e9 13 03 00 00       	jmp    c000d095 <sinc_stereo_vari_process+0x5d6>
c000cd82:	83 ec 0c             	sub    esp,0xc
c000cd85:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cd88:	e8 36 7e 01 00       	call   c0024bc3 <__floatsidf>
c000cd8d:	83 c4 10             	add    esp,0x10
c000cd90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd94:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cd9c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cda0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cda4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cda8:	e8 36 71 01 00       	call   c0023ee3 <__adddf3>
c000cdad:	83 c4 10             	add    esp,0x10
c000cdb0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdb4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdb8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdbc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdc4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdc8:	e8 16 71 01 00       	call   c0023ee3 <__adddf3>
c000cdcd:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cdd0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdd4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdd8:	e8 e6 7d 01 00       	call   c0024bc3 <__floatsidf>
c000cddd:	83 c4 10             	add    esp,0x10
c000cde0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cde4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cde8:	52                   	push   edx
c000cde9:	50                   	push   eax
c000cdea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdf2:	e8 36 80 01 00       	call   c0024e2d <__gedf2>
c000cdf7:	83 c4 10             	add    esp,0x10
c000cdfa:	85 c0                	test   eax,eax
c000cdfc:	0f 89 4a ff ff ff    	jns    c000cd4c <sinc_stereo_vari_process+0x28d>
c000ce02:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000ce06:	0f 8e ef 00 00 00    	jle    c000cefb <sinc_stereo_vari_process+0x43c>
c000ce0c:	83 ec 10             	sub    esp,0x10
c000ce0f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce12:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce15:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ce18:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ce1b:	e8 14 77 01 00       	call   c0024534 <__subdf3>
c000ce20:	83 c4 18             	add    esp,0x18
c000ce23:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ce27:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ce2b:	52                   	push   edx
c000ce2c:	50                   	push   eax
c000ce2d:	e8 8e 81 01 00       	call   c0024fc0 <fabs>
c000ce32:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce36:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce3a:	83 c4 10             	add    esp,0x10
c000ce3d:	68 df 7c db 3d       	push   0x3ddb7cdf
c000ce42:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000ce47:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce4b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce4f:	e8 bd 7f 01 00       	call   c0024e11 <__gtdf2>
c000ce54:	83 c4 10             	add    esp,0x10
c000ce57:	85 c0                	test   eax,eax
c000ce59:	0f 8e 9c 00 00 00    	jle    c000cefb <sinc_stereo_vari_process+0x43c>
c000ce5f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce62:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ce65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce69:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce6d:	52                   	push   edx
c000ce6e:	50                   	push   eax
c000ce6f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce72:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce75:	e8 ba 76 01 00       	call   c0024534 <__subdf3>
c000ce7a:	59                   	pop    ecx
c000ce7b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ce7f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000ce83:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ce86:	e8 38 7d 01 00       	call   c0024bc3 <__floatsidf>
c000ce8b:	83 c4 10             	add    esp,0x10
c000ce8e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce92:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce96:	52                   	push   edx
c000ce97:	50                   	push   eax
c000ce98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cea0:	e8 bb 76 01 00       	call   c0024560 <__muldf3>
c000cea5:	5f                   	pop    edi
c000cea6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ceaa:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000ceae:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ceb1:	e8 0d 7d 01 00       	call   c0024bc3 <__floatsidf>
c000ceb6:	83 c4 10             	add    esp,0x10
c000ceb9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cebd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cec1:	52                   	push   edx
c000cec2:	50                   	push   eax
c000cec3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cec7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cecb:	e8 74 79 01 00       	call   c0024844 <__divdf3>
c000ced0:	83 c4 10             	add    esp,0x10
c000ced3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ced7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cedb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cedf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cee3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cee7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ceeb:	e8 f3 6f 01 00       	call   c0023ee3 <__adddf3>
c000cef0:	83 c4 10             	add    esp,0x10
c000cef3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cef7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cefb:	83 ec 0c             	sub    esp,0xc
c000cefe:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf01:	e8 bd 7c 01 00       	call   c0024bc3 <__floatsidf>
c000cf06:	83 c4 10             	add    esp,0x10
c000cf09:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf0d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf11:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf15:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf21:	e8 09 7f 01 00       	call   c0024e2f <__ltdf2>
c000cf26:	83 c4 10             	add    esp,0x10
c000cf29:	85 c0                	test   eax,eax
c000cf2b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf2f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cf33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000cf3b:	78 10                	js     c000cf4d <sinc_stereo_vari_process+0x48e>
c000cf3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf41:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000cf45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf55:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf59:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf5d:	e8 fe 75 01 00       	call   c0024560 <__muldf3>
c000cf62:	59                   	pop    ecx
c000cf63:	5f                   	pop    edi
c000cf64:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cf68:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cf6c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf70:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf74:	e8 77 e7 ff ff       	call   c000b6f0 <double_to_fp>
c000cf79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf7d:	89 c7                	mov    edi,eax
c000cf7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf8b:	e8 d0 75 01 00       	call   c0024560 <__muldf3>
c000cf90:	83 c4 18             	add    esp,0x18
c000cf93:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cf97:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cf9b:	52                   	push   edx
c000cf9c:	50                   	push   eax
c000cf9d:	e8 4e e7 ff ff       	call   c000b6f0 <double_to_fp>
c000cfa2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cfa5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cfa9:	83 c4 0c             	add    esp,0xc
c000cfac:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cfaf:	8d 04 90             	lea    eax,[eax+edx*4]
c000cfb2:	50                   	push   eax
c000cfb3:	50                   	push   eax
c000cfb4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cfb7:	e8 07 7c 01 00       	call   c0024bc3 <__floatsidf>
c000cfbc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cfc0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cfc4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfc8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfcc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfd0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfd4:	e8 6b 78 01 00       	call   c0024844 <__divdf3>
c000cfd9:	83 c4 18             	add    esp,0x18
c000cfdc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfe0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfe4:	52                   	push   edx
c000cfe5:	89 fa                	mov    edx,edi
c000cfe7:	50                   	push   eax
c000cfe8:	89 d8                	mov    eax,ebx
c000cfea:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cfee:	e8 a6 c9 ff ff       	call   c0009999 <calc_output_stereo>
c000cff3:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000cff7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cffb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d003:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d007:	e8 38 78 01 00       	call   c0024844 <__divdf3>
c000d00c:	83 c4 10             	add    esp,0x10
c000d00f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d013:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d017:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d023:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d027:	e8 b7 6e 01 00       	call   c0023ee3 <__adddf3>
c000d02c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d030:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d034:	83 c4 18             	add    esp,0x18
c000d037:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03f:	e8 d3 e6 ff ff       	call   c000b717 <fmod_one>
c000d044:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d047:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d04b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d04f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d052:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d056:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d05a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d05e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d062:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d066:	e8 c9 74 01 00       	call   c0024534 <__subdf3>
c000d06b:	83 c4 18             	add    esp,0x18
c000d06e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d072:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d076:	52                   	push   edx
c000d077:	50                   	push   eax
c000d078:	e8 63 7f 01 00       	call   c0024fe0 <lrint>
c000d07d:	0f af f8             	imul   edi,eax
c000d080:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d084:	83 c4 10             	add    esp,0x10
c000d087:	01 f8                	add    eax,edi
c000d089:	99                   	cdq    
c000d08a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d08d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d090:	e9 61 fc ff ff       	jmp    c000ccf6 <sinc_stereo_vari_process+0x237>
c000d095:	83 c4 4c             	add    esp,0x4c
c000d098:	5b                   	pop    ebx
c000d099:	5e                   	pop    esi
c000d09a:	5f                   	pop    edi
c000d09b:	5d                   	pop    ebp
c000d09c:	c3                   	ret    

c000d09d <sinc_mono_vari_process>:
c000d09d:	55                   	push   ebp
c000d09e:	b8 05 00 00 00       	mov    eax,0x5
c000d0a3:	57                   	push   edi
c000d0a4:	56                   	push   esi
c000d0a5:	53                   	push   ebx
c000d0a6:	83 ec 4c             	sub    esp,0x4c
c000d0a9:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d0ad:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d0b1:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d0b4:	85 db                	test   ebx,ebx
c000d0b6:	0f 84 e8 05 00 00    	je     c000d6a4 <sinc_mono_vari_process+0x607>
c000d0bc:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000d0bf:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000d0c2:	0f af d0             	imul   edx,eax
c000d0c5:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000d0c8:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000d0cc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d0d3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d0d6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d0dd:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d0e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d0e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0eb:	57                   	push   edi
c000d0ec:	57                   	push   edi
c000d0ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0f5:	e8 9e c5 ff ff       	call   c0009698 <is_bad_src_ratio>
c000d0fa:	83 c4 10             	add    esp,0x10
c000d0fd:	89 c2                	mov    edx,eax
c000d0ff:	b8 16 00 00 00       	mov    eax,0x16
c000d104:	85 d2                	test   edx,edx
c000d106:	0f 85 98 05 00 00    	jne    c000d6a4 <sinc_mono_vari_process+0x607>
c000d10c:	83 ec 0c             	sub    esp,0xc
c000d10f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d112:	e8 ac 7a 01 00       	call   c0024bc3 <__floatsidf>
c000d117:	83 c4 10             	add    esp,0x10
c000d11a:	89 04 24             	mov    DWORD PTR [esp],eax
c000d11d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d121:	68 00 00 00 40       	push   0x40000000
c000d126:	6a 00                	push   0x0
c000d128:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d12c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d130:	e8 ae 6d 01 00       	call   c0023ee3 <__adddf3>
c000d135:	59                   	pop    ecx
c000d136:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d13a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d13e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d141:	e8 7d 7a 01 00       	call   c0024bc3 <__floatsidf>
c000d146:	83 c4 10             	add    esp,0x10
c000d149:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d14d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d151:	52                   	push   edx
c000d152:	50                   	push   eax
c000d153:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d157:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d15b:	e8 e4 76 01 00       	call   c0024844 <__divdf3>
c000d160:	83 c4 10             	add    esp,0x10
c000d163:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d167:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d16b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d16e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d171:	89 04 24             	mov    DWORD PTR [esp],eax
c000d174:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d178:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d17b:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d17e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d182:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d186:	52                   	push   edx
c000d187:	50                   	push   eax
c000d188:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d18c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d190:	e8 9a 7c 01 00       	call   c0024e2f <__ltdf2>
c000d195:	83 c4 10             	add    esp,0x10
c000d198:	85 c0                	test   eax,eax
c000d19a:	79 1d                	jns    c000d1b9 <sinc_mono_vari_process+0x11c>
c000d19c:	68 00 00 f0 3f       	push   0x3ff00000
c000d1a1:	6a 00                	push   0x0
c000d1a3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1ab:	e8 7f 7c 01 00       	call   c0024e2f <__ltdf2>
c000d1b0:	83 c4 10             	add    esp,0x10
c000d1b3:	85 c0                	test   eax,eax
c000d1b5:	78 2c                	js     c000d1e3 <sinc_mono_vari_process+0x146>
c000d1b7:	eb 4a                	jmp    c000d203 <sinc_mono_vari_process+0x166>
c000d1b9:	68 00 00 f0 3f       	push   0x3ff00000
c000d1be:	6a 00                	push   0x0
c000d1c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1c8:	e8 62 7c 01 00       	call   c0024e2f <__ltdf2>
c000d1cd:	83 c4 10             	add    esp,0x10
c000d1d0:	85 c0                	test   eax,eax
c000d1d2:	79 2f                	jns    c000d203 <sinc_mono_vari_process+0x166>
c000d1d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1dc:	89 04 24             	mov    DWORD PTR [esp],eax
c000d1df:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d1e3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d1e7:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d1eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1f3:	e8 4c 76 01 00       	call   c0024844 <__divdf3>
c000d1f8:	83 c4 10             	add    esp,0x10
c000d1fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d1ff:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d203:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d206:	50                   	push   eax
c000d207:	50                   	push   eax
c000d208:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d20c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d210:	e8 cb 7d 01 00       	call   c0024fe0 <lrint>
c000d215:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d218:	40                   	inc    eax
c000d219:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d21d:	0f af c7             	imul   eax,edi
c000d220:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d224:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d227:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22b:	58                   	pop    eax
c000d22c:	5a                   	pop    edx
c000d22d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d231:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d235:	e8 dd e4 ff ff       	call   c000b717 <fmod_one>
c000d23a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d245:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d248:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d24c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d254:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d258:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d25c:	e8 d3 72 01 00       	call   c0024534 <__subdf3>
c000d261:	83 c4 18             	add    esp,0x18
c000d264:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d268:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d26c:	52                   	push   edx
c000d26d:	50                   	push   eax
c000d26e:	e8 6d 7d 01 00       	call   c0024fe0 <lrint>
c000d273:	0f af f8             	imul   edi,eax
c000d276:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d27a:	01 f8                	add    eax,edi
c000d27c:	99                   	cdq    
c000d27d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d280:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d283:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d287:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d28b:	68 00 00 f0 3f       	push   0x3ff00000
c000d290:	6a 00                	push   0x0
c000d292:	e8 ad 75 01 00       	call   c0024844 <__divdf3>
c000d297:	83 c4 10             	add    esp,0x10
c000d29a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d29e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2a2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d2a7:	68 23 42 92 0c       	push   0xc924223
c000d2ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2b0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2b4:	e8 2a 6c 01 00       	call   c0023ee3 <__adddf3>
c000d2b9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d2bd:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d2c1:	83 c4 20             	add    esp,0x20
c000d2c4:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000d2cc:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000d2d4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d2d7:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d2da:	7d 4e                	jge    c000d32a <sinc_mono_vari_process+0x28d>
c000d2dc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d2df:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d2e2:	01 c8                	add    eax,ecx
c000d2e4:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d2e7:	99                   	cdq    
c000d2e8:	f7 f9                	idiv   ecx
c000d2ea:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000d2ee:	7d 0c                	jge    c000d2fc <sinc_mono_vari_process+0x25f>
c000d2f0:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d2f3:	85 ff                	test   edi,edi
c000d2f5:	79 69                	jns    c000d360 <sinc_mono_vari_process+0x2c3>
c000d2f7:	e9 e4 00 00 00       	jmp    c000d3e0 <sinc_mono_vari_process+0x343>
c000d2fc:	57                   	push   edi
c000d2fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d301:	56                   	push   esi
c000d302:	53                   	push   ebx
c000d303:	e8 a5 e4 ff ff       	call   c000b7ad <prepare_data>
c000d308:	83 c4 10             	add    esp,0x10
c000d30b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d30e:	85 c0                	test   eax,eax
c000d310:	0f 85 8e 03 00 00    	jne    c000d6a4 <sinc_mono_vari_process+0x607>
c000d316:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d319:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d31c:	01 c8                	add    eax,ecx
c000d31e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d321:	99                   	cdq    
c000d322:	f7 f9                	idiv   ecx
c000d324:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000d328:	7c c6                	jl     c000d2f0 <sinc_mono_vari_process+0x253>
c000d32a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d32d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d331:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d334:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d337:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d33b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d33f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d342:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d345:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d348:	99                   	cdq    
c000d349:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d34c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d34f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d352:	99                   	cdq    
c000d353:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d356:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d359:	31 c0                	xor    eax,eax
c000d35b:	e9 44 03 00 00       	jmp    c000d6a4 <sinc_mono_vari_process+0x607>
c000d360:	83 ec 0c             	sub    esp,0xc
c000d363:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d366:	e8 58 78 01 00       	call   c0024bc3 <__floatsidf>
c000d36b:	83 c4 10             	add    esp,0x10
c000d36e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d372:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d376:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d37a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d37e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d382:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d386:	e8 58 6b 01 00       	call   c0023ee3 <__adddf3>
c000d38b:	83 c4 10             	add    esp,0x10
c000d38e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d392:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d396:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d39a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d39e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3a6:	e8 38 6b 01 00       	call   c0023ee3 <__adddf3>
c000d3ab:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d3ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b6:	e8 08 78 01 00       	call   c0024bc3 <__floatsidf>
c000d3bb:	83 c4 10             	add    esp,0x10
c000d3be:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3c2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3c6:	52                   	push   edx
c000d3c7:	50                   	push   eax
c000d3c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	e8 3c 7a 01 00       	call   c0024e11 <__gtdf2>
c000d3d5:	83 c4 10             	add    esp,0x10
c000d3d8:	85 c0                	test   eax,eax
c000d3da:	0f 8f 4a ff ff ff    	jg     c000d32a <sinc_mono_vari_process+0x28d>
c000d3e0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d3e4:	0f 8e ef 00 00 00    	jle    c000d4d9 <sinc_mono_vari_process+0x43c>
c000d3ea:	83 ec 10             	sub    esp,0x10
c000d3ed:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d3f0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d3f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d3f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d3f9:	e8 36 71 01 00       	call   c0024534 <__subdf3>
c000d3fe:	83 c4 18             	add    esp,0x18
c000d401:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d405:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d409:	52                   	push   edx
c000d40a:	50                   	push   eax
c000d40b:	e8 b0 7b 01 00       	call   c0024fc0 <fabs>
c000d410:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d414:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d418:	83 c4 10             	add    esp,0x10
c000d41b:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d420:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d425:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d429:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d42d:	e8 df 79 01 00       	call   c0024e11 <__gtdf2>
c000d432:	83 c4 10             	add    esp,0x10
c000d435:	85 c0                	test   eax,eax
c000d437:	0f 8e 9c 00 00 00    	jle    c000d4d9 <sinc_mono_vari_process+0x43c>
c000d43d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d440:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d443:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d447:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d44b:	52                   	push   edx
c000d44c:	50                   	push   eax
c000d44d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d450:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d453:	e8 dc 70 01 00       	call   c0024534 <__subdf3>
c000d458:	5f                   	pop    edi
c000d459:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d45d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d461:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d464:	e8 5a 77 01 00       	call   c0024bc3 <__floatsidf>
c000d469:	83 c4 10             	add    esp,0x10
c000d46c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d470:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d474:	52                   	push   edx
c000d475:	50                   	push   eax
c000d476:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	e8 dd 70 01 00       	call   c0024560 <__muldf3>
c000d483:	59                   	pop    ecx
c000d484:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d488:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d48c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d48f:	e8 2f 77 01 00       	call   c0024bc3 <__floatsidf>
c000d494:	83 c4 10             	add    esp,0x10
c000d497:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d49b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d49f:	52                   	push   edx
c000d4a0:	50                   	push   eax
c000d4a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4a9:	e8 96 73 01 00       	call   c0024844 <__divdf3>
c000d4ae:	83 c4 10             	add    esp,0x10
c000d4b1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4b5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4b9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4bd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4c1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4c5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4c9:	e8 15 6a 01 00       	call   c0023ee3 <__adddf3>
c000d4ce:	83 c4 10             	add    esp,0x10
c000d4d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4d9:	83 ec 0c             	sub    esp,0xc
c000d4dc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d4df:	e8 df 76 01 00       	call   c0024bc3 <__floatsidf>
c000d4e4:	83 c4 10             	add    esp,0x10
c000d4e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4eb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4ff:	e8 2b 79 01 00       	call   c0024e2f <__ltdf2>
c000d504:	83 c4 10             	add    esp,0x10
c000d507:	85 c0                	test   eax,eax
c000d509:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d50d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d511:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d515:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000d519:	78 10                	js     c000d52b <sinc_mono_vari_process+0x48e>
c000d51b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d51f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d523:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d527:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d52b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d52f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d533:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d537:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d53b:	e8 20 70 01 00       	call   c0024560 <__muldf3>
c000d540:	59                   	pop    ecx
c000d541:	5f                   	pop    edi
c000d542:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d546:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d54a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d54e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d552:	e8 99 e1 ff ff       	call   c000b6f0 <double_to_fp>
c000d557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d55b:	89 c7                	mov    edi,eax
c000d55d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d561:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d569:	e8 f2 6f 01 00       	call   c0024560 <__muldf3>
c000d56e:	83 c4 18             	add    esp,0x18
c000d571:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d575:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d579:	52                   	push   edx
c000d57a:	50                   	push   eax
c000d57b:	e8 70 e1 ff ff       	call   c000b6f0 <double_to_fp>
c000d580:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d584:	83 ec 0c             	sub    esp,0xc
c000d587:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d58a:	e8 34 76 01 00       	call   c0024bc3 <__floatsidf>
c000d58f:	83 c4 10             	add    esp,0x10
c000d592:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d596:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d59a:	52                   	push   edx
c000d59b:	50                   	push   eax
c000d59c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5a0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5a4:	e8 9b 72 01 00       	call   c0024844 <__divdf3>
c000d5a9:	83 c4 10             	add    esp,0x10
c000d5ac:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d5b0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d5b4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d5b8:	89 d8                	mov    eax,ebx
c000d5ba:	89 fa                	mov    edx,edi
c000d5bc:	e8 7c c1 ff ff       	call   c000973d <calc_output_single>
c000d5c1:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000d5c4:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d5c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5cf:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
c000d5d3:	52                   	push   edx
c000d5d4:	50                   	push   eax
c000d5d5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d5d9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d5dd:	e8 7e 6f 01 00       	call   c0024560 <__muldf3>
c000d5e2:	59                   	pop    ecx
c000d5e3:	59                   	pop    ecx
c000d5e4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d5e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d5ec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5f0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5f4:	e8 3a 78 01 00       	call   c0024e33 <__truncdfsf2>
c000d5f9:	83 c4 10             	add    esp,0x10
c000d5fc:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d600:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000d603:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d60e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d612:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d616:	e8 29 72 01 00       	call   c0024844 <__divdf3>
c000d61b:	83 c4 10             	add    esp,0x10
c000d61e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d622:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d626:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d62a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d62e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d632:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d636:	e8 a8 68 01 00       	call   c0023ee3 <__adddf3>
c000d63b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d63f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d643:	83 c4 18             	add    esp,0x18
c000d646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d64e:	e8 c4 e0 ff ff       	call   c000b717 <fmod_one>
c000d653:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d656:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d65a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d65e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d661:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d665:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d669:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d671:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d675:	e8 ba 6e 01 00       	call   c0024534 <__subdf3>
c000d67a:	83 c4 18             	add    esp,0x18
c000d67d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d681:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d685:	52                   	push   edx
c000d686:	50                   	push   eax
c000d687:	e8 54 79 01 00       	call   c0024fe0 <lrint>
c000d68c:	0f af f8             	imul   edi,eax
c000d68f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d693:	83 c4 10             	add    esp,0x10
c000d696:	01 f8                	add    eax,edi
c000d698:	99                   	cdq    
c000d699:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d69c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d69f:	e9 30 fc ff ff       	jmp    c000d2d4 <sinc_mono_vari_process+0x237>
c000d6a4:	83 c4 4c             	add    esp,0x4c
c000d6a7:	5b                   	pop    ebx
c000d6a8:	5e                   	pop    esi
c000d6a9:	5f                   	pop    edi
c000d6aa:	5d                   	pop    ebp
c000d6ab:	c3                   	ret    

c000d6ac <sinc_get_name>:
c000d6ac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d6b0:	31 c0                	xor    eax,eax
c000d6b2:	83 fa 02             	cmp    edx,0x2
c000d6b5:	77 07                	ja     c000d6be <sinc_get_name+0x12>
c000d6b7:	8b 04 95 c4 67 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd983c]
c000d6be:	c3                   	ret    

c000d6bf <sinc_get_description>:
c000d6bf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d6c3:	31 c0                	xor    eax,eax
c000d6c5:	83 fa 02             	cmp    edx,0x2
c000d6c8:	77 07                	ja     c000d6d1 <sinc_get_description+0x12>
c000d6ca:	8b 04 95 b8 67 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9848]
c000d6d1:	c3                   	ret    

c000d6d2 <sinc_set_converter>:
c000d6d2:	53                   	push   ebx
c000d6d3:	81 ec 58 08 00 00    	sub    esp,0x858
c000d6d9:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000d6e0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000d6e3:	85 c0                	test   eax,eax
c000d6e5:	74 13                	je     c000d6fa <sinc_set_converter+0x28>
c000d6e7:	83 ec 0c             	sub    esp,0xc
c000d6ea:	50                   	push   eax
c000d6eb:	e8 68 1a 00 00       	call   c000f158 <free>
c000d6f0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d6f7:	83 c4 10             	add    esp,0x10
c000d6fa:	50                   	push   eax
c000d6fb:	68 44 08 00 00       	push   0x844
c000d700:	6a 00                	push   0x0
c000d702:	8d 44 24 18          	lea    eax,[esp+0x18]
c000d706:	50                   	push   eax
c000d707:	e8 c2 2f ff ff       	call   c00006ce <memset>
c000d70c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d70f:	83 c4 10             	add    esp,0x10
c000d712:	b8 0b 00 00 00       	mov    eax,0xb
c000d717:	81 fa 80 00 00 00    	cmp    edx,0x80
c000d71d:	7f 6e                	jg     c000d78d <sinc_set_converter+0xbb>
c000d71f:	83 fa 01             	cmp    edx,0x1
c000d722:	75 10                	jne    c000d734 <sinc_set_converter+0x62>
c000d724:	c7 43 24 9d d0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d09d
c000d72b:	c7 43 20 9d d0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d09d
c000d732:	eb 4d                	jmp    c000d781 <sinc_set_converter+0xaf>
c000d734:	83 fa 02             	cmp    edx,0x2
c000d737:	75 10                	jne    c000d749 <sinc_set_converter+0x77>
c000d739:	c7 43 24 bf ca 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cabf
c000d740:	c7 43 20 bf ca 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cabf
c000d747:	eb 38                	jmp    c000d781 <sinc_set_converter+0xaf>
c000d749:	83 fa 04             	cmp    edx,0x4
c000d74c:	75 10                	jne    c000d75e <sinc_set_converter+0x8c>
c000d74e:	c7 43 24 e1 c4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c4e1
c000d755:	c7 43 20 e1 c4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c4e1
c000d75c:	eb 23                	jmp    c000d781 <sinc_set_converter+0xaf>
c000d75e:	83 fa 06             	cmp    edx,0x6
c000d761:	75 10                	jne    c000d773 <sinc_set_converter+0xa1>
c000d763:	c7 43 24 03 bf 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bf03
c000d76a:	c7 43 20 03 bf 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bf03
c000d771:	eb 0e                	jmp    c000d781 <sinc_set_converter+0xaf>
c000d773:	c7 43 24 27 b9 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b927
c000d77a:	c7 43 20 27 b9 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b927
c000d781:	c7 43 28 44 ab 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ab44
c000d788:	b8 0a 00 00 00       	mov    eax,0xa
c000d78d:	81 c4 58 08 00 00    	add    esp,0x858
c000d793:	5b                   	pop    ebx
c000d794:	c3                   	ret    

c000d795 <is_bad_src_ratio>:
c000d795:	83 ec 1c             	sub    esp,0x1c
c000d798:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d79c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d7a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7a8:	b8 00 00 00 00       	mov    eax,0x0
c000d7ad:	ba 00 00 70 3f       	mov    edx,0x3f700000
c000d7b2:	52                   	push   edx
c000d7b3:	50                   	push   eax
c000d7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7bc:	e8 6e 76 01 00       	call   c0024e2f <__ltdf2>
c000d7c1:	83 c4 10             	add    esp,0x10
c000d7c4:	85 c0                	test   eax,eax
c000d7c6:	78 20                	js     c000d7e8 <is_bad_src_ratio+0x53>
c000d7c8:	b8 00 00 00 00       	mov    eax,0x0
c000d7cd:	ba 00 00 70 40       	mov    edx,0x40700000
c000d7d2:	52                   	push   edx
c000d7d3:	50                   	push   eax
c000d7d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7dc:	e8 30 76 01 00       	call   c0024e11 <__gtdf2>
c000d7e1:	83 c4 10             	add    esp,0x10
c000d7e4:	85 c0                	test   eax,eax
c000d7e6:	7e 07                	jle    c000d7ef <is_bad_src_ratio+0x5a>
c000d7e8:	b8 01 00 00 00       	mov    eax,0x1
c000d7ed:	eb 05                	jmp    c000d7f4 <is_bad_src_ratio+0x5f>
c000d7ef:	b8 00 00 00 00       	mov    eax,0x0
c000d7f4:	83 c4 1c             	add    esp,0x1c
c000d7f7:	c3                   	ret    

c000d7f8 <fmod_one>:
c000d7f8:	83 ec 2c             	sub    esp,0x2c
c000d7fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d7ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d803:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d807:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d80b:	83 ec 08             	sub    esp,0x8
c000d80e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d812:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d816:	e8 c5 77 01 00       	call   c0024fe0 <lrint>
c000d81b:	83 c4 10             	add    esp,0x10
c000d81e:	83 ec 0c             	sub    esp,0xc
c000d821:	50                   	push   eax
c000d822:	e8 9c 73 01 00       	call   c0024bc3 <__floatsidf>
c000d827:	83 c4 10             	add    esp,0x10
c000d82a:	52                   	push   edx
c000d82b:	50                   	push   eax
c000d82c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d830:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d834:	e8 fb 6c 01 00       	call   c0024534 <__subdf3>
c000d839:	83 c4 10             	add    esp,0x10
c000d83c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d840:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d844:	b8 00 00 00 00       	mov    eax,0x0
c000d849:	ba 00 00 00 00       	mov    edx,0x0
c000d84e:	52                   	push   edx
c000d84f:	50                   	push   eax
c000d850:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d854:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d858:	e8 d2 75 01 00       	call   c0024e2f <__ltdf2>
c000d85d:	83 c4 10             	add    esp,0x10
c000d860:	85 c0                	test   eax,eax
c000d862:	79 1e                	jns    c000d882 <fmod_one+0x8a>
c000d864:	b8 00 00 00 00       	mov    eax,0x0
c000d869:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c000d86e:	52                   	push   edx
c000d86f:	50                   	push   eax
c000d870:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d874:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d878:	e8 66 66 01 00       	call   c0023ee3 <__adddf3>
c000d87d:	83 c4 10             	add    esp,0x10
c000d880:	eb 08                	jmp    c000d88a <fmod_one+0x92>
c000d882:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d886:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d88a:	83 c4 2c             	add    esp,0x2c
c000d88d:	c3                   	ret    

c000d88e <zoh_vari_process>:
c000d88e:	55                   	push   ebp
c000d88f:	57                   	push   edi
c000d890:	56                   	push   esi
c000d891:	53                   	push   ebx
c000d892:	83 ec 3c             	sub    esp,0x3c
c000d895:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000d899:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000d89d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000d8a5:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000d8a9:	0f 8e a9 05 00 00    	jle    c000de58 <zoh_vari_process+0x5ca>
c000d8af:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d8b2:	c7 44 24 28 05 00 00 00 	mov    DWORD PTR [esp+0x28],0x5
c000d8ba:	85 db                	test   ebx,ebx
c000d8bc:	0f 84 96 05 00 00    	je     c000de58 <zoh_vari_process+0x5ca>
c000d8c2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000d8c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000d8c9:	74 19                	je     c000d8e4 <zoh_vari_process+0x56>
c000d8cb:	31 d2                	xor    edx,edx
c000d8cd:	39 c2                	cmp    edx,eax
c000d8cf:	7d 0c                	jge    c000d8dd <zoh_vari_process+0x4f>
c000d8d1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d8d3:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000d8d6:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000d8da:	42                   	inc    edx
c000d8db:	eb f0                	jmp    c000d8cd <zoh_vari_process+0x3f>
c000d8dd:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000d8e4:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000d8e7:	0f af d0             	imul   edx,eax
c000d8ea:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000d8ed:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000d8f1:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000d8f8:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000d8fb:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000d902:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d905:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d908:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d90c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d910:	57                   	push   edi
c000d911:	57                   	push   edi
c000d912:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d916:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d91a:	e8 76 fe ff ff       	call   c000d795 <is_bad_src_ratio>
c000d91f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d923:	83 c4 10             	add    esp,0x10
c000d926:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000d92b:	0f 85 1f 05 00 00    	jne    c000de50 <zoh_vari_process+0x5c2>
c000d931:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d934:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d937:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d93b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d93f:	68 00 00 f0 3f       	push   0x3ff00000
c000d944:	6a 00                	push   0x0
c000d946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d94a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d94e:	e8 dc 74 01 00       	call   c0024e2f <__ltdf2>
c000d953:	83 c4 10             	add    esp,0x10
c000d956:	85 c0                	test   eax,eax
c000d958:	0f 89 dc 01 00 00    	jns    c000db3a <zoh_vari_process+0x2ac>
c000d95e:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c000d961:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000d964:	0f 8d d0 01 00 00    	jge    c000db3a <zoh_vari_process+0x2ac>
c000d96a:	83 ec 0c             	sub    esp,0xc
c000d96d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000d970:	e8 4e 72 01 00       	call   c0024bc3 <__floatsidf>
c000d975:	83 c4 10             	add    esp,0x10
c000d978:	89 04 24             	mov    DWORD PTR [esp],eax
c000d97b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d97f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d983:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d987:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d98b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d98f:	e8 cc 6b 01 00       	call   c0024560 <__muldf3>
c000d994:	59                   	pop    ecx
c000d995:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d999:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d99d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9a0:	e8 1e 72 01 00       	call   c0024bc3 <__floatsidf>
c000d9a5:	83 c4 10             	add    esp,0x10
c000d9a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d9ac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d9b0:	52                   	push   edx
c000d9b1:	50                   	push   eax
c000d9b2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9ba:	e8 24 65 01 00       	call   c0023ee3 <__adddf3>
c000d9bf:	59                   	pop    ecx
c000d9c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9c4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d9c8:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000d9cb:	e8 f3 71 01 00       	call   c0024bc3 <__floatsidf>
c000d9d0:	83 c4 10             	add    esp,0x10
c000d9d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d9d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d9db:	52                   	push   edx
c000d9dc:	50                   	push   eax
c000d9dd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9e5:	e8 43 74 01 00       	call   c0024e2d <__gedf2>
c000d9ea:	83 c4 10             	add    esp,0x10
c000d9ed:	85 c0                	test   eax,eax
c000d9ef:	0f 89 45 01 00 00    	jns    c000db3a <zoh_vari_process+0x2ac>
c000d9f5:	85 ff                	test   edi,edi
c000d9f7:	0f 8e ee 00 00 00    	jle    c000daeb <zoh_vari_process+0x25d>
c000d9fd:	83 ec 10             	sub    esp,0x10
c000da00:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000da03:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000da06:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000da09:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000da0c:	e8 23 6b 01 00       	call   c0024534 <__subdf3>
c000da11:	83 c4 18             	add    esp,0x18
c000da14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000da1c:	52                   	push   edx
c000da1d:	50                   	push   eax
c000da1e:	e8 9d 75 01 00       	call   c0024fc0 <fabs>
c000da23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da2b:	83 c4 10             	add    esp,0x10
c000da2e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000da33:	68 23 42 92 0c       	push   0xc924223
c000da38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000da3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000da40:	e8 cc 73 01 00       	call   c0024e11 <__gtdf2>
c000da45:	83 c4 10             	add    esp,0x10
c000da48:	85 c0                	test   eax,eax
c000da4a:	0f 8e 9b 00 00 00    	jle    c000daeb <zoh_vari_process+0x25d>
c000da50:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000da53:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000da56:	89 04 24             	mov    DWORD PTR [esp],eax
c000da59:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000da5d:	52                   	push   edx
c000da5e:	50                   	push   eax
c000da5f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000da62:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000da65:	e8 ca 6a 01 00       	call   c0024534 <__subdf3>
c000da6a:	59                   	pop    ecx
c000da6b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da6f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000da73:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000da76:	e8 48 71 01 00       	call   c0024bc3 <__floatsidf>
c000da7b:	83 c4 10             	add    esp,0x10
c000da7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000da82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000da86:	52                   	push   edx
c000da87:	50                   	push   eax
c000da88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da90:	e8 cb 6a 01 00       	call   c0024560 <__muldf3>
c000da95:	5f                   	pop    edi
c000da96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da9a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000da9e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000daa1:	e8 1d 71 01 00       	call   c0024bc3 <__floatsidf>
c000daa6:	83 c4 10             	add    esp,0x10
c000daa9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000daad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dab1:	52                   	push   edx
c000dab2:	50                   	push   eax
c000dab3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dab7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dabb:	e8 84 6d 01 00       	call   c0024844 <__divdf3>
c000dac0:	83 c4 10             	add    esp,0x10
c000dac3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dac7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dacb:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dacf:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dad3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dadb:	e8 03 64 01 00       	call   c0023ee3 <__adddf3>
c000dae0:	83 c4 10             	add    esp,0x10
c000dae3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dae7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000daeb:	31 c0                	xor    eax,eax
c000daed:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000daf0:	7e 13                	jle    c000db05 <zoh_vari_process+0x277>
c000daf2:	8b 7c 83 1c          	mov    edi,DWORD PTR [ebx+eax*4+0x1c]
c000daf6:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000daf9:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dafc:	40                   	inc    eax
c000dafd:	89 3c 8a             	mov    DWORD PTR [edx+ecx*4],edi
c000db00:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000db03:	eb e8                	jmp    c000daed <zoh_vari_process+0x25f>
c000db05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000db09:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000db0d:	68 00 00 f0 3f       	push   0x3ff00000
c000db12:	6a 00                	push   0x0
c000db14:	e8 2b 6d 01 00       	call   c0024844 <__divdf3>
c000db19:	83 c4 10             	add    esp,0x10
c000db1c:	89 04 24             	mov    DWORD PTR [esp],eax
c000db1f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000db23:	52                   	push   edx
c000db24:	50                   	push   eax
c000db25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db2d:	e8 b1 63 01 00       	call   c0023ee3 <__adddf3>
c000db32:	83 c4 10             	add    esp,0x10
c000db35:	e9 fd fd ff ff       	jmp    c000d937 <zoh_vari_process+0xa9>
c000db3a:	57                   	push   edi
c000db3b:	57                   	push   edi
c000db3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db44:	e8 af fc ff ff       	call   c000d7f8 <fmod_one>
c000db49:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000db4c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db50:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000db54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db5c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db60:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db64:	e8 cb 69 01 00       	call   c0024534 <__subdf3>
c000db69:	83 c4 18             	add    esp,0x18
c000db6c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db70:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db74:	52                   	push   edx
c000db75:	50                   	push   eax
c000db76:	e8 65 74 01 00       	call   c0024fe0 <lrint>
c000db7b:	83 c4 10             	add    esp,0x10
c000db7e:	0f af f8             	imul   edi,eax
c000db81:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000db84:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c000db87:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000db8b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000db8e:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000db91:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db95:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000db98:	0f 8d 1d 02 00 00    	jge    c000ddbb <zoh_vari_process+0x52d>
c000db9e:	83 ec 0c             	sub    esp,0xc
c000dba1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dba4:	e8 1a 70 01 00       	call   c0024bc3 <__floatsidf>
c000dba9:	83 c4 10             	add    esp,0x10
c000dbac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbb0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dbb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dbbc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbc0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbc4:	e8 97 69 01 00       	call   c0024560 <__muldf3>
c000dbc9:	59                   	pop    ecx
c000dbca:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dbce:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dbd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbd6:	e8 e8 6f 01 00       	call   c0024bc3 <__floatsidf>
c000dbdb:	83 c4 10             	add    esp,0x10
c000dbde:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dbe2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dbe6:	52                   	push   edx
c000dbe7:	50                   	push   eax
c000dbe8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbf0:	e8 ee 62 01 00       	call   c0023ee3 <__adddf3>
c000dbf5:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dbf8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbfc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dc00:	e8 be 6f 01 00       	call   c0024bc3 <__floatsidf>
c000dc05:	83 c4 10             	add    esp,0x10
c000dc08:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dc0c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dc10:	52                   	push   edx
c000dc11:	50                   	push   eax
c000dc12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dc16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dc1a:	e8 12 72 01 00       	call   c0024e31 <__ledf2>
c000dc1f:	83 c4 10             	add    esp,0x10
c000dc22:	85 c0                	test   eax,eax
c000dc24:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000dc28:	0f 8f 8d 01 00 00    	jg     c000ddbb <zoh_vari_process+0x52d>
c000dc2e:	85 c9                	test   ecx,ecx
c000dc30:	0f 8e ef 00 00 00    	jle    c000dd25 <zoh_vari_process+0x497>
c000dc36:	83 ec 10             	sub    esp,0x10
c000dc39:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc3c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc3f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000dc42:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000dc45:	e8 ea 68 01 00       	call   c0024534 <__subdf3>
c000dc4a:	83 c4 18             	add    esp,0x18
c000dc4d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc51:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc55:	52                   	push   edx
c000dc56:	50                   	push   eax
c000dc57:	e8 64 73 01 00       	call   c0024fc0 <fabs>
c000dc5c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dc60:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dc64:	83 c4 10             	add    esp,0x10
c000dc67:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dc6c:	68 23 42 92 0c       	push   0xc924223
c000dc71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc79:	e8 93 71 01 00       	call   c0024e11 <__gtdf2>
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	85 c0                	test   eax,eax
c000dc83:	0f 8e 9c 00 00 00    	jle    c000dd25 <zoh_vari_process+0x497>
c000dc89:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dc8c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000dc8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc97:	52                   	push   edx
c000dc98:	50                   	push   eax
c000dc99:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc9c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc9f:	e8 90 68 01 00       	call   c0024534 <__subdf3>
c000dca4:	5f                   	pop    edi
c000dca5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dca9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dcad:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dcb0:	e8 0e 6f 01 00       	call   c0024bc3 <__floatsidf>
c000dcb5:	83 c4 10             	add    esp,0x10
c000dcb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dcbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dcc0:	52                   	push   edx
c000dcc1:	50                   	push   eax
c000dcc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcca:	e8 91 68 01 00       	call   c0024560 <__muldf3>
c000dccf:	59                   	pop    ecx
c000dcd0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dcd4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dcd8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dcdb:	e8 e3 6e 01 00       	call   c0024bc3 <__floatsidf>
c000dce0:	83 c4 10             	add    esp,0x10
c000dce3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dce7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dceb:	52                   	push   edx
c000dcec:	50                   	push   eax
c000dced:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcf5:	e8 4a 6b 01 00       	call   c0024844 <__divdf3>
c000dcfa:	83 c4 10             	add    esp,0x10
c000dcfd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd01:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dd05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd09:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd15:	e8 c9 61 01 00       	call   c0023ee3 <__adddf3>
c000dd1a:	83 c4 10             	add    esp,0x10
c000dd1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd21:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd25:	31 c0                	xor    eax,eax
c000dd27:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000dd2a:	39 c2                	cmp    edx,eax
c000dd2c:	7e 1d                	jle    c000dd4b <zoh_vari_process+0x4bd>
c000dd2e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000dd31:	29 d1                	sub    ecx,edx
c000dd33:	89 ca                	mov    edx,ecx
c000dd35:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd37:	01 c2                	add    edx,eax
c000dd39:	40                   	inc    eax
c000dd3a:	8b 3c 91             	mov    edi,DWORD PTR [ecx+edx*4]
c000dd3d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dd40:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dd43:	89 3c 8a             	mov    DWORD PTR [edx+ecx*4],edi
c000dd46:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dd49:	eb dc                	jmp    c000dd27 <zoh_vari_process+0x499>
c000dd4b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd4f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd53:	68 00 00 f0 3f       	push   0x3ff00000
c000dd58:	6a 00                	push   0x0
c000dd5a:	e8 e5 6a 01 00       	call   c0024844 <__divdf3>
c000dd5f:	83 c4 10             	add    esp,0x10
c000dd62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd66:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dd6a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd6e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd7a:	e8 64 61 01 00       	call   c0023ee3 <__adddf3>
c000dd7f:	5f                   	pop    edi
c000dd80:	59                   	pop    ecx
c000dd81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd85:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd91:	e8 62 fa ff ff       	call   c000d7f8 <fmod_one>
c000dd96:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dd99:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dda1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddb1:	e8 7e 67 01 00       	call   c0024534 <__subdf3>
c000ddb6:	e9 ae fd ff ff       	jmp    c000db69 <zoh_vari_process+0x2db>
c000ddbb:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c000ddbf:	7d 3a                	jge    c000ddfb <zoh_vari_process+0x56d>
c000ddc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ddc5:	83 ec 0c             	sub    esp,0xc
c000ddc8:	29 f8                	sub    eax,edi
c000ddca:	99                   	cdq    
c000ddcb:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ddce:	50                   	push   eax
c000ddcf:	e8 ef 6d 01 00       	call   c0024bc3 <__floatsidf>
c000ddd4:	83 c4 10             	add    esp,0x10
c000ddd7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dddb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dddf:	52                   	push   edx
c000dde0:	50                   	push   eax
c000dde1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dde5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dde9:	e8 f5 60 01 00       	call   c0023ee3 <__adddf3>
c000ddee:	83 c4 10             	add    esp,0x10
c000ddf1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000ddf4:	89 04 24             	mov    DWORD PTR [esp],eax
c000ddf7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ddfb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ddfe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000de02:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000de05:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000de08:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de0b:	85 c0                	test   eax,eax
c000de0d:	7f 24                	jg     c000de33 <zoh_vari_process+0x5a5>
c000de0f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de13:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000de17:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000de1a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000de1d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de20:	99                   	cdq    
c000de21:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000de24:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000de27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000de2a:	99                   	cdq    
c000de2b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000de2e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000de31:	eb 25                	jmp    c000de58 <zoh_vari_process+0x5ca>
c000de33:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000de36:	31 d2                	xor    edx,edx
c000de38:	29 c8                	sub    eax,ecx
c000de3a:	c1 e0 02             	shl    eax,0x2
c000de3d:	39 d1                	cmp    ecx,edx
c000de3f:	7e ce                	jle    c000de0f <zoh_vari_process+0x581>
c000de41:	8b 3e                	mov    edi,DWORD PTR [esi]
c000de43:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c000de46:	83 c0 04             	add    eax,0x4
c000de49:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c000de4d:	42                   	inc    edx
c000de4e:	eb ed                	jmp    c000de3d <zoh_vari_process+0x5af>
c000de50:	c7 44 24 28 16 00 00 00 	mov    DWORD PTR [esp+0x28],0x16
c000de58:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000de5c:	83 c4 3c             	add    esp,0x3c
c000de5f:	5b                   	pop    ebx
c000de60:	5e                   	pop    esi
c000de61:	5f                   	pop    edi
c000de62:	5d                   	pop    ebp
c000de63:	c3                   	ret    

c000de64 <zoh_reset>:
c000de64:	83 ec 0c             	sub    esp,0xc
c000de67:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de6b:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000de6e:	85 c0                	test   eax,eax
c000de70:	74 20                	je     c000de92 <zoh_reset+0x2e>
c000de72:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000de75:	83 c0 1c             	add    eax,0x1c
c000de78:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000de7b:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000de82:	c1 e2 02             	shl    edx,0x2
c000de85:	51                   	push   ecx
c000de86:	52                   	push   edx
c000de87:	6a 00                	push   0x0
c000de89:	50                   	push   eax
c000de8a:	e8 3f 28 ff ff       	call   c00006ce <memset>
c000de8f:	83 c4 10             	add    esp,0x10
c000de92:	83 c4 0c             	add    esp,0xc
c000de95:	c3                   	ret    

c000de96 <zoh_get_name>:
c000de96:	31 c0                	xor    eax,eax
c000de98:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000de9d:	75 05                	jne    c000dea4 <zoh_get_name+0xe>
c000de9f:	b8 de 68 02 c0       	mov    eax,0xc00268de
c000dea4:	c3                   	ret    

c000dea5 <zoh_get_description>:
c000dea5:	31 c0                	xor    eax,eax
c000dea7:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000deac:	75 05                	jne    c000deb3 <zoh_get_description+0xe>
c000deae:	b8 ef 68 02 c0       	mov    eax,0xc00268ef
c000deb3:	c3                   	ret    

c000deb4 <zoh_set_converter>:
c000deb4:	53                   	push   ebx
c000deb5:	b8 0a 00 00 00       	mov    eax,0xa
c000deba:	83 ec 08             	sub    esp,0x8
c000debd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dec1:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000dec6:	75 6e                	jne    c000df36 <zoh_set_converter+0x82>
c000dec8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000decb:	85 c0                	test   eax,eax
c000decd:	74 13                	je     c000dee2 <zoh_set_converter+0x2e>
c000decf:	83 ec 0c             	sub    esp,0xc
c000ded2:	50                   	push   eax
c000ded3:	e8 80 12 00 00       	call   c000f158 <free>
c000ded8:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dedf:	83 c4 10             	add    esp,0x10
c000dee2:	50                   	push   eax
c000dee3:	50                   	push   eax
c000dee4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000dee7:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000deee:	50                   	push   eax
c000deef:	6a 01                	push   0x1
c000def1:	e8 82 12 00 00       	call   c000f178 <calloc>
c000def6:	83 c4 10             	add    esp,0x10
c000def9:	89 c2                	mov    edx,eax
c000defb:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000defe:	85 d2                	test   edx,edx
c000df00:	b8 01 00 00 00       	mov    eax,0x1
c000df05:	74 2f                	je     c000df36 <zoh_set_converter+0x82>
c000df07:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000df0a:	83 ec 0c             	sub    esp,0xc
c000df0d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000df10:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000df16:	c7 43 24 8e d8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d88e
c000df1d:	c7 43 20 8e d8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d88e
c000df24:	c7 43 28 64 de 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000de64
c000df2b:	53                   	push   ebx
c000df2c:	e8 33 ff ff ff       	call   c000de64 <zoh_reset>
c000df31:	83 c4 10             	add    esp,0x10
c000df34:	31 c0                	xor    eax,eax
c000df36:	83 c4 08             	add    esp,0x8
c000df39:	5b                   	pop    ebx
c000df3a:	c3                   	ret    
c000df3b:	90                   	nop

c000df3c <Computer::close(int, int, void*)>:
c000df3c:	57                   	push   edi
c000df3d:	56                   	push   esi
c000df3e:	53                   	push   ebx
c000df3f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000df43:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000df47:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000df4b:	83 ec 0c             	sub    esp,0xc
c000df4e:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000df54:	e8 79 58 00 00       	call   c00137d2 <Device::closeAll()>
c000df59:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000df5f:	83 c4 10             	add    esp,0x10
c000df62:	8b 10                	mov    edx,DWORD PTR [eax]
c000df64:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000df68:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000df70:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000df74:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df78:	5b                   	pop    ebx
c000df79:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000df7c:	5e                   	pop    esi
c000df7d:	5f                   	pop    edi
c000df7e:	ff e0                	jmp    eax

c000df80 <Computer::Computer()>:
c000df80:	83 ec 0c             	sub    esp,0xc
c000df83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df87:	83 ec 08             	sub    esp,0x8
c000df8a:	68 26 69 02 c0       	push   0xc0026926
c000df8f:	50                   	push   eax
c000df90:	e8 b7 58 00 00       	call   c001384c <Device::Device(char const*)>
c000df95:	83 c4 10             	add    esp,0x10
c000df98:	ba f0 6a 02 c0       	mov    edx,0xc0026af0
c000df9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfa1:	89 10                	mov    DWORD PTR [eax],edx
c000dfa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfa7:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000dfb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb5:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000dfbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfc3:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000dfc9:	83 ca 04             	or     edx,0x4
c000dfcc:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000dfd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfd6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000dfdc:	0f b6 d0             	movzx  edx,al
c000dfdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfe3:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000dfea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000dff4:	0f b6 d0             	movzx  edx,al
c000dff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dffb:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e004:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e00a:	8d 50 01             	lea    edx,[eax+0x1]
c000e00d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e011:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e017:	0f b6 d0             	movzx  edx,al
c000e01a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e01e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e022:	83 e1 3f             	and    ecx,0x3f
c000e025:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e02d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e033:	0f b6 d0             	movzx  edx,al
c000e036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e03a:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e045:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e04b:	0f b6 d0             	movzx  edx,al
c000e04e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e052:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e05b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e061:	8d 50 01             	lea    edx,[eax+0x1]
c000e064:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e068:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e06e:	0f b6 d0             	movzx  edx,al
c000e071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e075:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e079:	83 e1 3f             	and    ecx,0x3f
c000e07c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e084:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e08a:	0f b6 d0             	movzx  edx,al
c000e08d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e091:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e09c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e0a2:	0f b6 d0             	movzx  edx,al
c000e0a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0a9:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e0ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0b2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e0b8:	8d 50 01             	lea    edx,[eax+0x1]
c000e0bb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e0bf:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e0c5:	0f b6 d0             	movzx  edx,al
c000e0c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0cc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e0d0:	83 e1 3f             	and    ecx,0x3f
c000e0d3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e0d7:	90                   	nop
c000e0d8:	83 c4 0c             	add    esp,0xc
c000e0db:	c3                   	ret    

c000e0dc <Computer::setBootMessage(char const*)>:
c000e0dc:	c3                   	ret    
c000e0dd:	90                   	nop

c000e0de <Computer::start()>:
c000e0de:	56                   	push   esi
c000e0df:	53                   	push   ebx
c000e0e0:	50                   	push   eax
c000e0e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e0e5:	e8 58 d8 00 00       	call   c001b942 <lockScheduler()>
c000e0ea:	e8 87 db 00 00       	call   c001bc76 <schedule()>
c000e0ef:	e8 50 d8 00 00       	call   c001b944 <unlockScheduler()>
c000e0f4:	fb                   	sti    
c000e0f5:	83 ec 0c             	sub    esp,0xc
c000e0f8:	68 3b 07 00 00       	push   0x73b
c000e0fd:	e8 60 40 00 00       	call   c0012162 <operator new(unsigned long)>
c000e102:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e109:	89 c6                	mov    esi,eax
c000e10b:	ff 35 54 b8 02 c0    	push   DWORD PTR ds:0xc002b854
c000e111:	68 2f 69 02 c0       	push   0xc002692f
c000e116:	6a 01                	push   0x1
c000e118:	50                   	push   eax
c000e119:	e8 84 d6 00 00       	call   c001b7a2 <Process::Process(bool, char const*, Process*, char**)>
c000e11e:	83 c4 20             	add    esp,0x20
c000e121:	68 ff 00 00 00       	push   0xff
c000e126:	6a 00                	push   0x0
c000e128:	68 d5 ea 00 c0       	push   0xc000ead5
c000e12d:	56                   	push   esi
c000e12e:	e8 39 d9 00 00       	call   c001ba6c <Process::createThread(void (*)(void*), void*, int)>
c000e133:	6a 7a                	push   0x7a
c000e135:	6a 00                	push   0x0
c000e137:	68 a5 c2 01 c0       	push   0xc001c2a5
c000e13c:	ff 35 54 b8 02 c0    	push   DWORD PTR ds:0xc002b854
c000e142:	e8 25 d9 00 00       	call   c001ba6c <Process::createThread(void (*)(void*), void*, int)>
c000e147:	83 c4 20             	add    esp,0x20
c000e14a:	a3 08 b8 02 c0       	mov    ds:0xc002b808,eax
c000e14f:	c6 05 0d a4 02 c0 01 	mov    BYTE PTR ds:0xc002a40d,0x1
c000e156:	e8 51 44 00 00       	call   c00125ac <initVFS()>
c000e15b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e161:	8b 10                	mov    edx,DWORD PTR [eax]
c000e163:	6a 00                	push   0x0
c000e165:	6a 00                	push   0x0
c000e167:	6a 00                	push   0x0
c000e169:	50                   	push   eax
c000e16a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e16d:	e8 2e c0 00 00       	call   c001a1a0 <setupSystemCalls()>
c000e172:	e8 33 4f 00 00       	call   c00130aa <loadClockSettings()>
c000e177:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e17a:	e8 27 56 00 00       	call   c00137a6 <Device::loadDriversForAll()>
c000e17f:	5a                   	pop    edx
c000e180:	8b 1d 08 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a408
c000e186:	59                   	pop    ecx
c000e187:	6a 01                	push   0x1
c000e189:	68 3c 69 02 c0       	push   0xc002693c
c000e18e:	e8 df d1 00 00       	call   c001b372 <Thr::loadDLL(char const*, bool)>
c000e193:	5e                   	pop    esi
c000e194:	5a                   	pop    edx
c000e195:	53                   	push   ebx
c000e196:	50                   	push   eax
c000e197:	e8 9c d3 00 00       	call   c001b538 <Thr::executeDLL(unsigned long, void*)>
c000e19c:	c7 04 24 c0 7a 02 c0 	mov    DWORD PTR [esp],0xc0027ac0
c000e1a3:	e8 a9 40 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e1a8:	83 c4 10             	add    esp,0x10
c000e1ab:	83 ec 0c             	sub    esp,0xc
c000e1ae:	6a 02                	push   0x2
c000e1b0:	e8 1b dc 00 00       	call   c001bdd0 <blockTask(TaskState)>
c000e1b5:	83 c4 10             	add    esp,0x10
c000e1b8:	eb f1                	jmp    c000e1ab <Computer::start()+0xcd>

c000e1ba <firstTask()>:
c000e1ba:	83 ec 18             	sub    esp,0x18
c000e1bd:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c000e1c3:	e8 16 ff ff ff       	call   c000e0de <Computer::start()>

c000e1c8 <Computer::detectFeatures()>:
c000e1c8:	55                   	push   ebp
c000e1c9:	57                   	push   edi
c000e1ca:	56                   	push   esi
c000e1cb:	53                   	push   ebx
c000e1cc:	83 ec 1c             	sub    esp,0x1c
c000e1cf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e1d3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e1dd:	e8 c1 21 ff ff       	call   c00003a3 <detectCPUID>
c000e1e2:	85 c0                	test   eax,eax
c000e1e4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e1ea:	0f 95 c2             	setne  dl
c000e1ed:	83 e0 fd             	and    eax,0xfffffffd
c000e1f0:	d1 e2                	shl    edx,1
c000e1f2:	09 d0                	or     eax,edx
c000e1f4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e1fa:	a8 02                	test   al,0x2
c000e1fc:	75 46                	jne    c000e244 <Computer::detectFeatures()+0x7c>
c000e1fe:	f6 05 21 a4 02 c0 04 	test   BYTE PTR ds:0xc002a421,0x4
c000e205:	74 07                	je     c000e20e <Computer::detectFeatures()+0x46>
c000e207:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e20e:	e8 13 4e 01 00       	call   c0023026 <x87Detect>
c000e213:	83 e0 01             	and    eax,0x1
c000e216:	c1 e0 04             	shl    eax,0x4
c000e219:	88 c2                	mov    dl,al
c000e21b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e221:	83 e0 ef             	and    eax,0xffffffef
c000e224:	09 d0                	or     eax,edx
c000e226:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e22c:	a8 10                	test   al,0x10
c000e22e:	0f 85 10 01 00 00    	jne    c000e344 <Computer::detectFeatures()+0x17c>
c000e234:	84 c0                	test   al,al
c000e236:	0f 88 2b 01 00 00    	js     c000e367 <Computer::detectFeatures()+0x19f>
c000e23c:	83 c4 1c             	add    esp,0x1c
c000e23f:	5b                   	pop    ebx
c000e240:	5e                   	pop    esi
c000e241:	5f                   	pop    edi
c000e242:	5d                   	pop    ebp
c000e243:	c3                   	ret    
c000e244:	83 ec 0c             	sub    esp,0xc
c000e247:	6a 20                	push   0x20
c000e249:	e8 62 95 00 00       	call   c00177b0 <CPU::cpuidCheckEDX(unsigned int)>
c000e24e:	83 e0 01             	and    eax,0x1
c000e251:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e258:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e25e:	83 e0 f7             	and    eax,0xfffffff7
c000e261:	09 d0                	or     eax,edx
c000e263:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e269:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e270:	e8 3b 95 00 00       	call   c00177b0 <CPU::cpuidCheckEDX(unsigned int)>
c000e275:	83 e0 01             	and    eax,0x1
c000e278:	88 c2                	mov    dl,al
c000e27a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e280:	83 e0 fe             	and    eax,0xfffffffe
c000e283:	09 d0                	or     eax,edx
c000e285:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e28b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e292:	e8 19 95 00 00       	call   c00177b0 <CPU::cpuidCheckEDX(unsigned int)>
c000e297:	c1 e0 07             	shl    eax,0x7
c000e29a:	88 c2                	mov    dl,al
c000e29c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e2a2:	83 e0 7f             	and    eax,0x7f
c000e2a5:	09 d0                	or     eax,edx
c000e2a7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e2ad:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e2b4:	e8 f7 94 00 00       	call   c00177b0 <CPU::cpuidCheckEDX(unsigned int)>
c000e2b9:	83 c4 10             	add    esp,0x10
c000e2bc:	83 e0 01             	and    eax,0x1
c000e2bf:	c1 e0 05             	shl    eax,0x5
c000e2c2:	88 c2                	mov    dl,al
c000e2c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e2ca:	83 e0 df             	and    eax,0xffffffdf
c000e2cd:	09 d0                	or     eax,edx
c000e2cf:	f7 05 20 a4 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002a420,0x401
c000e2d9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e2df:	0f 84 a8 00 00 00    	je     c000e38d <Computer::detectFeatures()+0x1c5>
c000e2e5:	83 ec 0c             	sub    esp,0xc
c000e2e8:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000e2ef:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e2f3:	50                   	push   eax
c000e2f4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e2f8:	55                   	push   ebp
c000e2f9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e2fd:	57                   	push   edi
c000e2fe:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e302:	56                   	push   esi
c000e303:	68 00 00 00 80       	push   0x80000000
c000e308:	e8 1f 94 00 00       	call   c001772c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e30d:	83 c4 20             	add    esp,0x20
c000e310:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e317:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e31b:	0f 86 dd fe ff ff    	jbe    c000e1fe <Computer::detectFeatures()+0x36>
c000e321:	83 ec 0c             	sub    esp,0xc
c000e324:	50                   	push   eax
c000e325:	55                   	push   ebp
c000e326:	57                   	push   edi
c000e327:	56                   	push   esi
c000e328:	68 01 00 00 80       	push   0x80000001
c000e32d:	e8 fa 93 00 00       	call   c001772c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e332:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e33c:	83 c4 20             	add    esp,0x20
c000e33f:	e9 ba fe ff ff       	jmp    c000e1fe <Computer::detectFeatures()+0x36>
c000e344:	e8 97 4c 01 00       	call   c0022fe0 <sseDetect>
c000e349:	88 c2                	mov    dl,al
c000e34b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e351:	c1 e2 07             	shl    edx,0x7
c000e354:	83 e0 7f             	and    eax,0x7f
c000e357:	09 d0                	or     eax,edx
c000e359:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e35f:	84 c0                	test   al,al
c000e361:	0f 89 d5 fe ff ff    	jns    c000e23c <Computer::detectFeatures()+0x74>
c000e367:	e8 64 4c 01 00       	call   c0022fd0 <avxDetect>
c000e36c:	83 e0 01             	and    eax,0x1
c000e36f:	c1 e0 05             	shl    eax,0x5
c000e372:	88 c2                	mov    dl,al
c000e374:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e37a:	83 e0 df             	and    eax,0xffffffdf
c000e37d:	09 d0                	or     eax,edx
c000e37f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e385:	83 c4 1c             	add    esp,0x1c
c000e388:	5b                   	pop    ebx
c000e389:	5e                   	pop    esi
c000e38a:	5f                   	pop    edi
c000e38b:	5d                   	pop    ebp
c000e38c:	c3                   	ret    
c000e38d:	83 ec 0c             	sub    esp,0xc
c000e390:	68 00 02 00 00       	push   0x200
c000e395:	e8 16 94 00 00       	call   c00177b0 <CPU::cpuidCheckEDX(unsigned int)>
c000e39a:	83 c4 10             	add    esp,0x10
c000e39d:	e9 43 ff ff ff       	jmp    c000e2e5 <Computer::detectFeatures()+0x11d>

c000e3a2 <Computer::displayFeatures()>:
c000e3a2:	53                   	push   ebx
c000e3a3:	83 ec 14             	sub    esp,0x14
c000e3a6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e3aa:	68 5f 69 02 c0       	push   0xc002695f
c000e3af:	e8 9d 3e 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e3b4:	83 c4 10             	add    esp,0x10
c000e3b7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e3be:	0f 85 73 02 00 00    	jne    c000e637 <Computer::displayFeatures()+0x295>
c000e3c4:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e3c9:	83 ec 08             	sub    esp,0x8
c000e3cc:	50                   	push   eax
c000e3cd:	68 72 69 02 c0       	push   0xc0026972
c000e3d2:	e8 7a 3e 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e3d7:	83 c4 10             	add    esp,0x10
c000e3da:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e3e1:	0f 85 8c 02 00 00    	jne    c000e673 <Computer::displayFeatures()+0x2d1>
c000e3e7:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e3ec:	83 ec 08             	sub    esp,0x8
c000e3ef:	50                   	push   eax
c000e3f0:	68 83 69 02 c0       	push   0xc0026983
c000e3f5:	e8 57 3e 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e3fa:	83 c4 10             	add    esp,0x10
c000e3fd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e404:	0f 85 5f 02 00 00    	jne    c000e669 <Computer::displayFeatures()+0x2c7>
c000e40a:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e40f:	83 ec 08             	sub    esp,0x8
c000e412:	50                   	push   eax
c000e413:	68 94 69 02 c0       	push   0xc0026994
c000e418:	e8 34 3e 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e41d:	83 c4 10             	add    esp,0x10
c000e420:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e427:	0f 85 32 02 00 00    	jne    c000e65f <Computer::displayFeatures()+0x2bd>
c000e42d:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e432:	83 ec 08             	sub    esp,0x8
c000e435:	50                   	push   eax
c000e436:	68 a5 69 02 c0       	push   0xc00269a5
c000e43b:	e8 11 3e 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e440:	83 c4 10             	add    esp,0x10
c000e443:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e44a:	0f 85 05 02 00 00    	jne    c000e655 <Computer::displayFeatures()+0x2b3>
c000e450:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e455:	83 ec 08             	sub    esp,0x8
c000e458:	50                   	push   eax
c000e459:	68 b6 69 02 c0       	push   0xc00269b6
c000e45e:	e8 ee 3d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e463:	83 c4 10             	add    esp,0x10
c000e466:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e46d:	0f 85 d8 01 00 00    	jne    c000e64b <Computer::displayFeatures()+0x2a9>
c000e473:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e478:	83 ec 08             	sub    esp,0x8
c000e47b:	50                   	push   eax
c000e47c:	68 c7 69 02 c0       	push   0xc00269c7
c000e481:	e8 cb 3d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e486:	83 c4 10             	add    esp,0x10
c000e489:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e490:	0f 85 ab 01 00 00    	jne    c000e641 <Computer::displayFeatures()+0x29f>
c000e496:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e49b:	83 ec 08             	sub    esp,0x8
c000e49e:	50                   	push   eax
c000e49f:	68 d8 69 02 c0       	push   0xc00269d8
c000e4a4:	e8 a8 3d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e4a9:	83 c4 10             	add    esp,0x10
c000e4ac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e4b3:	0f 88 1b 02 00 00    	js     c000e6d4 <Computer::displayFeatures()+0x332>
c000e4b9:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e4be:	83 ec 08             	sub    esp,0x8
c000e4c1:	50                   	push   eax
c000e4c2:	68 e9 69 02 c0       	push   0xc00269e9
c000e4c7:	e8 85 3d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e4cc:	83 c4 10             	add    esp,0x10
c000e4cf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e4d6:	0f 85 a1 01 00 00    	jne    c000e67d <Computer::displayFeatures()+0x2db>
c000e4dc:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e4e1:	83 ec 08             	sub    esp,0x8
c000e4e4:	50                   	push   eax
c000e4e5:	68 fa 69 02 c0       	push   0xc00269fa
c000e4ea:	e8 62 3d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e4ef:	83 c4 10             	add    esp,0x10
c000e4f2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e4f9:	0f 85 cb 01 00 00    	jne    c000e6ca <Computer::displayFeatures()+0x328>
c000e4ff:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e504:	83 ec 08             	sub    esp,0x8
c000e507:	50                   	push   eax
c000e508:	68 0b 6a 02 c0       	push   0xc0026a0b
c000e50d:	e8 3f 3d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e512:	83 c4 10             	add    esp,0x10
c000e515:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e51c:	0f 85 9e 01 00 00    	jne    c000e6c0 <Computer::displayFeatures()+0x31e>
c000e522:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e527:	83 ec 08             	sub    esp,0x8
c000e52a:	50                   	push   eax
c000e52b:	68 1c 6a 02 c0       	push   0xc0026a1c
c000e530:	e8 1c 3d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e535:	83 c4 10             	add    esp,0x10
c000e538:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e53f:	0f 85 71 01 00 00    	jne    c000e6b6 <Computer::displayFeatures()+0x314>
c000e545:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e54a:	83 ec 08             	sub    esp,0x8
c000e54d:	50                   	push   eax
c000e54e:	68 2d 6a 02 c0       	push   0xc0026a2d
c000e553:	e8 f9 3c 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e558:	83 c4 10             	add    esp,0x10
c000e55b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000e562:	0f 85 44 01 00 00    	jne    c000e6ac <Computer::displayFeatures()+0x30a>
c000e568:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	50                   	push   eax
c000e571:	68 3e 6a 02 c0       	push   0xc0026a3e
c000e576:	e8 d6 3c 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e57b:	83 c4 10             	add    esp,0x10
c000e57e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000e585:	0f 85 17 01 00 00    	jne    c000e6a2 <Computer::displayFeatures()+0x300>
c000e58b:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	50                   	push   eax
c000e594:	68 4f 6a 02 c0       	push   0xc0026a4f
c000e599:	e8 b3 3c 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e59e:	83 c4 10             	add    esp,0x10
c000e5a1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000e5a8:	0f 85 ea 00 00 00    	jne    c000e698 <Computer::displayFeatures()+0x2f6>
c000e5ae:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e5b3:	83 ec 08             	sub    esp,0x8
c000e5b6:	50                   	push   eax
c000e5b7:	68 60 6a 02 c0       	push   0xc0026a60
c000e5bc:	e8 90 3c 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e5c1:	83 c4 10             	add    esp,0x10
c000e5c4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000e5cb:	0f 88 0d 01 00 00    	js     c000e6de <Computer::displayFeatures()+0x33c>
c000e5d1:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e5d6:	83 ec 08             	sub    esp,0x8
c000e5d9:	50                   	push   eax
c000e5da:	68 71 6a 02 c0       	push   0xc0026a71
c000e5df:	e8 6d 3c 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e5e4:	83 c4 10             	add    esp,0x10
c000e5e7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000e5ee:	0f 85 9a 00 00 00    	jne    c000e68e <Computer::displayFeatures()+0x2ec>
c000e5f4:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e5f9:	83 ec 08             	sub    esp,0x8
c000e5fc:	50                   	push   eax
c000e5fd:	68 82 6a 02 c0       	push   0xc0026a82
c000e602:	e8 4a 3c 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e607:	83 c4 10             	add    esp,0x10
c000e60a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000e611:	75 74                	jne    c000e687 <Computer::displayFeatures()+0x2e5>
c000e613:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e618:	83 ec 08             	sub    esp,0x8
c000e61b:	50                   	push   eax
c000e61c:	68 93 6a 02 c0       	push   0xc0026a93
c000e621:	e8 2b 3c 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e626:	c7 44 24 20 7e 80 02 c0 	mov    DWORD PTR [esp+0x20],0xc002807e
c000e62e:	83 c4 18             	add    esp,0x18
c000e631:	5b                   	pop    ebx
c000e632:	e9 1a 3c 00 00       	jmp    c0012251 <Dbg::kprintf(char const*, ...)>
c000e637:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e63c:	e9 88 fd ff ff       	jmp    c000e3c9 <Computer::displayFeatures()+0x27>
c000e641:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e646:	e9 50 fe ff ff       	jmp    c000e49b <Computer::displayFeatures()+0xf9>
c000e64b:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e650:	e9 23 fe ff ff       	jmp    c000e478 <Computer::displayFeatures()+0xd6>
c000e655:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e65a:	e9 f6 fd ff ff       	jmp    c000e455 <Computer::displayFeatures()+0xb3>
c000e65f:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e664:	e9 c9 fd ff ff       	jmp    c000e432 <Computer::displayFeatures()+0x90>
c000e669:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e66e:	e9 9c fd ff ff       	jmp    c000e40f <Computer::displayFeatures()+0x6d>
c000e673:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e678:	e9 6f fd ff ff       	jmp    c000e3ec <Computer::displayFeatures()+0x4a>
c000e67d:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e682:	e9 5a fe ff ff       	jmp    c000e4e1 <Computer::displayFeatures()+0x13f>
c000e687:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e68c:	eb 8a                	jmp    c000e618 <Computer::displayFeatures()+0x276>
c000e68e:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e693:	e9 61 ff ff ff       	jmp    c000e5f9 <Computer::displayFeatures()+0x257>
c000e698:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e69d:	e9 11 ff ff ff       	jmp    c000e5b3 <Computer::displayFeatures()+0x211>
c000e6a2:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e6a7:	e9 e4 fe ff ff       	jmp    c000e590 <Computer::displayFeatures()+0x1ee>
c000e6ac:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e6b1:	e9 b7 fe ff ff       	jmp    c000e56d <Computer::displayFeatures()+0x1cb>
c000e6b6:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e6bb:	e9 8a fe ff ff       	jmp    c000e54a <Computer::displayFeatures()+0x1a8>
c000e6c0:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e6c5:	e9 5d fe ff ff       	jmp    c000e527 <Computer::displayFeatures()+0x185>
c000e6ca:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e6cf:	e9 30 fe ff ff       	jmp    c000e504 <Computer::displayFeatures()+0x162>
c000e6d4:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e6d9:	e9 e0 fd ff ff       	jmp    c000e4be <Computer::displayFeatures()+0x11c>
c000e6de:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e6e3:	e9 ee fe ff ff       	jmp    c000e5d6 <Computer::displayFeatures()+0x234>

c000e6e8 <Computer::rdmsr(unsigned int)>:
c000e6e8:	83 ec 0c             	sub    esp,0xc
c000e6eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6ef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000e6f6:	74 0a                	je     c000e702 <Computer::rdmsr(unsigned int)+0x1a>
c000e6f8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e6fc:	0f 32                	rdmsr  
c000e6fe:	83 c4 0c             	add    esp,0xc
c000e701:	c3                   	ret    
c000e702:	83 ec 0c             	sub    esp,0xc
c000e705:	68 a4 6a 02 c0       	push   0xc0026aa4
c000e70a:	e8 e0 a2 00 00       	call   c00189ef <Krnl::panic(char const*)>
c000e70f:	83 c4 10             	add    esp,0x10
c000e712:	eb e4                	jmp    c000e6f8 <Computer::rdmsr(unsigned int)+0x10>

c000e714 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000e714:	57                   	push   edi
c000e715:	56                   	push   esi
c000e716:	52                   	push   edx
c000e717:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e71b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e71f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e723:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000e72a:	74 0e                	je     c000e73a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000e72c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e730:	89 f0                	mov    eax,esi
c000e732:	89 fa                	mov    edx,edi
c000e734:	0f 30                	wrmsr  
c000e736:	58                   	pop    eax
c000e737:	5e                   	pop    esi
c000e738:	5f                   	pop    edi
c000e739:	c3                   	ret    
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	68 aa 6a 02 c0       	push   0xc0026aaa
c000e742:	e8 a8 a2 00 00       	call   c00189ef <Krnl::panic(char const*)>
c000e747:	83 c4 10             	add    esp,0x10
c000e74a:	eb e0                	jmp    c000e72c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000e74c <Computer::nmiEnabled()>:
c000e74c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e750:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000e756:	c3                   	ret    
c000e757:	90                   	nop

c000e758 <Computer::readCMOS(unsigned char)>:
c000e758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e75c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000e763:	19 c0                	sbb    eax,eax
c000e765:	83 e0 80             	and    eax,0xffffff80
c000e768:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e76c:	e6 70                	out    0x70,al
c000e76e:	e4 71                	in     al,0x71
c000e770:	c3                   	ret    
c000e771:	90                   	nop

c000e772 <Computer::enableNMI(bool)>:
c000e772:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e776:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e77a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000e780:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000e788:	eb ce                	jmp    c000e758 <Computer::readCMOS(unsigned char)>

c000e78a <Computer::open(int, int, void*)>:
c000e78a:	56                   	push   esi
c000e78b:	53                   	push   ebx
c000e78c:	83 ec 10             	sub    esp,0x10
c000e78f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e793:	f6 05 20 a4 02 c0 04 	test   BYTE PTR ds:0xc002a420,0x4
c000e79a:	68 68 22 00 00       	push   0x2268
c000e79f:	0f 94 05 c0 93 02 c0 	sete   BYTE PTR ds:0xc00293c0
c000e7a6:	e8 b7 39 00 00       	call   c0012162 <operator new(unsigned long)>
c000e7ab:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7ae:	89 c6                	mov    esi,eax
c000e7b0:	e8 39 86 00 00       	call   c0016dee <ACPI::ACPI()>
c000e7b5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000e7bb:	58                   	pop    eax
c000e7bc:	5a                   	pop    edx
c000e7bd:	56                   	push   esi
c000e7be:	53                   	push   ebx
c000e7bf:	e8 98 4e 00 00       	call   c001365c <Device::addChild(Device*)>
c000e7c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e7c7:	e8 fc f9 ff ff       	call   c000e1c8 <Computer::detectFeatures()>
c000e7cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e7cf:	e8 ce fb ff ff       	call   c000e3a2 <Computer::displayFeatures()>
c000e7d4:	59                   	pop    ecx
c000e7d5:	5e                   	pop    esi
c000e7d6:	6a 01                	push   0x1
c000e7d8:	53                   	push   ebx
c000e7d9:	e8 94 ff ff ff       	call   c000e772 <Computer::enableNMI(bool)>
c000e7de:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000e7e5:	e8 78 39 00 00       	call   c0012162 <operator new(unsigned long)>
c000e7ea:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7ed:	89 c6                	mov    esi,eax
c000e7ef:	e8 8c 90 00 00       	call   c0017880 <CPU::CPU()>
c000e7f4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000e7fa:	58                   	pop    eax
c000e7fb:	5a                   	pop    edx
c000e7fc:	56                   	push   esi
c000e7fd:	53                   	push   ebx
c000e7fe:	e8 59 4e 00 00       	call   c001365c <Device::addChild(Device*)>
c000e803:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e809:	8b 10                	mov    edx,DWORD PTR [eax]
c000e80b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e80f:	6a 00                	push   0x0
c000e811:	6a 00                	push   0x0
c000e813:	50                   	push   eax
c000e814:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e817:	83 c4 20             	add    esp,0x20
c000e81a:	e8 a5 53 00 00       	call   c0013bc4 <setupFPU()>
c000e81f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000e825:	85 c0                	test   eax,eax
c000e827:	74 1f                	je     c000e848 <Computer::open(int, int, void*)+0xbe>
c000e829:	83 ec 08             	sub    esp,0x8
c000e82c:	50                   	push   eax
c000e82d:	53                   	push   ebx
c000e82e:	e8 29 4e 00 00       	call   c001365c <Device::addChild(Device*)>
c000e833:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000e839:	8b 10                	mov    edx,DWORD PTR [eax]
c000e83b:	6a 00                	push   0x0
c000e83d:	6a 00                	push   0x0
c000e83f:	6a 00                	push   0x0
c000e841:	50                   	push   eax
c000e842:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e845:	83 c4 20             	add    esp,0x20
c000e848:	83 ec 0c             	sub    esp,0xc
c000e84b:	68 ba e1 00 c0       	push   0xc000e1ba
c000e850:	e8 17 d3 00 00       	call   c001bb6c <setupMultitasking(void (*)())>
c000e855:	83 c4 14             	add    esp,0x14
c000e858:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e85d:	5b                   	pop    ebx
c000e85e:	5e                   	pop    esi
c000e85f:	c3                   	ret    

c000e860 <Computer::disableNMI()>:
c000e860:	6a 00                	push   0x0
c000e862:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e866:	e8 07 ff ff ff       	call   c000e772 <Computer::enableNMI(bool)>
c000e86b:	58                   	pop    eax
c000e86c:	5a                   	pop    edx
c000e86d:	c3                   	ret    

c000e86e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000e86e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e872:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000e879:	19 c0                	sbb    eax,eax
c000e87b:	83 e0 80             	and    eax,0xffffff80
c000e87e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e882:	e6 70                	out    0x70,al
c000e884:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e888:	e6 71                	out    0x71,al
c000e88a:	c3                   	ret    
c000e88b:	90                   	nop

c000e88c <Computer::handleNMI()>:
c000e88c:	56                   	push   esi
c000e88d:	53                   	push   ebx
c000e88e:	83 ec 10             	sub    esp,0x10
c000e891:	e4 92                	in     al,0x92
c000e893:	89 c6                	mov    esi,eax
c000e895:	e4 61                	in     al,0x61
c000e897:	68 b0 6a 02 c0       	push   0xc0026ab0
c000e89c:	88 c3                	mov    bl,al
c000e89e:	e8 ae 39 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e8a3:	83 c4 10             	add    esp,0x10
c000e8a6:	83 e6 10             	and    esi,0x10
c000e8a9:	75 0d                	jne    c000e8b8 <Computer::handleNMI()+0x2c>
c000e8ab:	f6 c3 40             	test   bl,0x40
c000e8ae:	75 1d                	jne    c000e8cd <Computer::handleNMI()+0x41>
c000e8b0:	84 db                	test   bl,bl
c000e8b2:	78 2d                	js     c000e8e1 <Computer::handleNMI()+0x55>
c000e8b4:	58                   	pop    eax
c000e8b5:	5b                   	pop    ebx
c000e8b6:	5e                   	pop    esi
c000e8b7:	c3                   	ret    
c000e8b8:	83 ec 0c             	sub    esp,0xc
c000e8bb:	68 c1 6a 02 c0       	push   0xc0026ac1
c000e8c0:	e8 2a a1 00 00       	call   c00189ef <Krnl::panic(char const*)>
c000e8c5:	83 c4 10             	add    esp,0x10
c000e8c8:	f6 c3 40             	test   bl,0x40
c000e8cb:	74 e3                	je     c000e8b0 <Computer::handleNMI()+0x24>
c000e8cd:	83 ec 0c             	sub    esp,0xc
c000e8d0:	68 ce 6a 02 c0       	push   0xc0026ace
c000e8d5:	e8 15 a1 00 00       	call   c00189ef <Krnl::panic(char const*)>
c000e8da:	83 c4 10             	add    esp,0x10
c000e8dd:	84 db                	test   bl,bl
c000e8df:	79 d3                	jns    c000e8b4 <Computer::handleNMI()+0x28>
c000e8e1:	c7 44 24 10 d8 6a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026ad8
c000e8e9:	5a                   	pop    edx
c000e8ea:	5b                   	pop    ebx
c000e8eb:	5e                   	pop    esi
c000e8ec:	e9 fe a0 00 00       	jmp    c00189ef <Krnl::panic(char const*)>
c000e8f1:	90                   	nop

c000e8f2 <Computer::setDiskActivityLight(int, bool)>:
c000e8f2:	56                   	push   esi
c000e8f3:	53                   	push   ebx
c000e8f4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e8f8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e8fd:	77 1b                	ja     c000e91a <Computer::setDiskActivityLight(int, bool)+0x28>
c000e8ff:	e4 92                	in     al,0x92
c000e901:	bb 40 00 00 00       	mov    ebx,0x40
c000e906:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000e90a:	89 da                	mov    edx,ebx
c000e90c:	d3 e2                	shl    edx,cl
c000e90e:	89 f1                	mov    ecx,esi
c000e910:	f7 d2                	not    edx
c000e912:	d3 e3                	shl    ebx,cl
c000e914:	21 d0                	and    eax,edx
c000e916:	09 d8                	or     eax,ebx
c000e918:	e6 92                	out    0x92,al
c000e91a:	5b                   	pop    ebx
c000e91b:	5e                   	pop    esi
c000e91c:	c3                   	ret    
c000e91d:	90                   	nop

c000e91e <GDTEntry::setBase(unsigned int)>:
c000e91e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e922:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e926:	89 c1                	mov    ecx,eax
c000e928:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e92c:	c1 e9 10             	shr    ecx,0x10
c000e92f:	c1 e8 18             	shr    eax,0x18
c000e932:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e935:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e938:	c3                   	ret    
c000e939:	90                   	nop

c000e93a <GDTEntry::setLimit(unsigned int)>:
c000e93a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e93e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e942:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e945:	66 89 01             	mov    WORD PTR [ecx],ax
c000e948:	83 e2 f0             	and    edx,0xfffffff0
c000e94b:	c1 e8 10             	shr    eax,0x10
c000e94e:	83 e0 0f             	and    eax,0xf
c000e951:	09 d0                	or     eax,edx
c000e953:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e956:	c3                   	ret    
c000e957:	90                   	nop

c000e958 <GDT::GDT()>:
c000e958:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e95c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e962:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e966:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e96c:	90                   	nop
c000e96d:	c3                   	ret    

c000e96e <GDT::addEntry(GDTEntry)>:
c000e96e:	53                   	push   ebx
c000e96f:	83 ec 0c             	sub    esp,0xc
c000e972:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e976:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e978:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e97f:	52                   	push   edx
c000e980:	50                   	push   eax
c000e981:	68 14 6b 02 c0       	push   0xc0026b14
c000e986:	e8 c6 38 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e98b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e98d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e991:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e995:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000e999:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000e99d:	8d 50 01             	lea    edx,[eax+0x1]
c000e9a0:	c1 e0 03             	shl    eax,0x3
c000e9a3:	89 13                	mov    DWORD PTR [ebx],edx
c000e9a5:	83 c4 18             	add    esp,0x18
c000e9a8:	5b                   	pop    ebx
c000e9a9:	c3                   	ret    

c000e9aa <GDT::getNumberOfEntries()>:
c000e9aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e9ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9b0:	c3                   	ret    
c000e9b1:	90                   	nop

c000e9b2 <GDT::flush()>:
c000e9b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e9b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000e9b8:	83 c0 04             	add    eax,0x4
c000e9bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e9c2:	a3 12 a4 02 c0       	mov    ds:0xc002a412,eax
c000e9c7:	66 89 15 10 a4 02 c0 	mov    WORD PTR ds:0xc002a410,dx
c000e9ce:	e9 44 1a ff ff       	jmp    c0000417 <loadGDT>
c000e9d3:	90                   	nop

c000e9d4 <GDT::setup()>:
c000e9d4:	55                   	push   ebp
c000e9d5:	57                   	push   edi
c000e9d6:	56                   	push   esi
c000e9d7:	53                   	push   ebx
c000e9d8:	83 ec 3c             	sub    esp,0x3c
c000e9db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000e9df:	6a 00                	push   0x0
c000e9e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000e9e5:	53                   	push   ebx
c000e9e6:	e8 33 ff ff ff       	call   c000e91e <GDTEntry::setBase(unsigned int)>
c000e9eb:	6a 00                	push   0x0
c000e9ed:	53                   	push   ebx
c000e9ee:	e8 47 ff ff ff       	call   c000e93a <GDTEntry::setLimit(unsigned int)>
c000e9f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000e9fb:	6a 00                	push   0x0
c000e9fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ea01:	53                   	push   ebx
c000ea02:	e8 17 ff ff ff       	call   c000e91e <GDTEntry::setBase(unsigned int)>
c000ea07:	68 ff ff ff 00       	push   0xffffff
c000ea0c:	53                   	push   ebx
c000ea0d:	e8 28 ff ff ff       	call   c000e93a <GDTEntry::setLimit(unsigned int)>
c000ea12:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ea16:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ea1b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ea20:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ea24:	83 c4 20             	add    esp,0x20
c000ea27:	6a 00                	push   0x0
c000ea29:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ea2d:	53                   	push   ebx
c000ea2e:	e8 eb fe ff ff       	call   c000e91e <GDTEntry::setBase(unsigned int)>
c000ea33:	68 ff ff ff 00       	push   0xffffff
c000ea38:	53                   	push   ebx
c000ea39:	e8 fc fe ff ff       	call   c000e93a <GDTEntry::setLimit(unsigned int)>
c000ea3e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ea42:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea46:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ea4a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ea4e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ea52:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ea57:	0d 00 92 c0 00       	or     eax,0xc09200
c000ea5c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ea60:	89 d8                	mov    eax,ebx
c000ea62:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ea66:	80 cc 60             	or     ah,0x60
c000ea69:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea6d:	83 c4 0c             	add    esp,0xc
c000ea70:	89 f8                	mov    eax,edi
c000ea72:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea76:	80 cc 60             	or     ah,0x60
c000ea79:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea7d:	89 c7                	mov    edi,eax
c000ea7f:	55                   	push   ebp
c000ea80:	e8 e9 fe ff ff       	call   c000e96e <GDT::addEntry(GDTEntry)>
c000ea85:	83 c4 0c             	add    esp,0xc
c000ea88:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ea8c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ea90:	55                   	push   ebp
c000ea91:	e8 d8 fe ff ff       	call   c000e96e <GDT::addEntry(GDTEntry)>
c000ea96:	83 c4 0c             	add    esp,0xc
c000ea99:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ea9d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eaa1:	55                   	push   ebp
c000eaa2:	e8 c7 fe ff ff       	call   c000e96e <GDT::addEntry(GDTEntry)>
c000eaa7:	83 c4 0c             	add    esp,0xc
c000eaaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eaae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eab2:	53                   	push   ebx
c000eab3:	51                   	push   ecx
c000eab4:	55                   	push   ebp
c000eab5:	e8 b4 fe ff ff       	call   c000e96e <GDT::addEntry(GDTEntry)>
c000eaba:	83 c4 0c             	add    esp,0xc
c000eabd:	57                   	push   edi
c000eabe:	56                   	push   esi
c000eabf:	55                   	push   ebp
c000eac0:	e8 a9 fe ff ff       	call   c000e96e <GDT::addEntry(GDTEntry)>
c000eac5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000eac8:	e8 e5 fe ff ff       	call   c000e9b2 <GDT::flush()>
c000eacd:	83 c4 4c             	add    esp,0x4c
c000ead0:	5b                   	pop    ebx
c000ead1:	5e                   	pop    esi
c000ead2:	5f                   	pop    edi
c000ead3:	5d                   	pop    ebp
c000ead4:	c3                   	ret    

c000ead5 <idleFunction(void*)>:
c000ead5:	53                   	push   ebx
c000ead6:	83 ec 08             	sub    esp,0x8
c000ead9:	e8 66 ce 00 00       	call   c001b944 <unlockScheduler()>
c000eade:	e8 89 8d 00 00       	call   c001786c <CPU::current()>
c000eae3:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000eaea:	74 41                	je     c000eb2d <idleFunction(void*)+0x58>
c000eaec:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c000eaf1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eaf8:	74 33                	je     c000eb2d <idleFunction(void*)+0x58>
c000eafa:	31 db                	xor    ebx,ebx
c000eafc:	52                   	push   edx
c000eafd:	52                   	push   edx
c000eafe:	68 e1 00 00 00       	push   0xe1
c000eb03:	50                   	push   eax
c000eb04:	e8 df fb ff ff       	call   c000e6e8 <Computer::rdmsr(unsigned int)>
c000eb09:	53                   	push   ebx
c000eb0a:	83 e0 02             	and    eax,0x2
c000eb0d:	50                   	push   eax
c000eb0e:	68 e1 00 00 00       	push   0xe1
c000eb13:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c000eb19:	e8 f6 fb ff ff       	call   c000e714 <Computer::wrmsr(unsigned int, unsigned long long)>
c000eb1e:	83 c4 20             	add    esp,0x20
c000eb21:	e8 0e 17 ff ff       	call   c0000234 <doTPAUSE>
c000eb26:	e8 35 65 01 00       	call   c0025060 <idleCommon()>
c000eb2b:	eb f4                	jmp    c000eb21 <idleFunction(void*)+0x4c>
c000eb2d:	fb                   	sti    
c000eb2e:	f4                   	hlt    
c000eb2f:	e8 2c 65 01 00       	call   c0025060 <idleCommon()>
c000eb34:	eb f7                	jmp    c000eb2d <idleFunction(void*)+0x58>

c000eb36 <IDTEntry::IDTEntry(bool)>:
c000eb36:	83 ec 04             	sub    esp,0x4
c000eb39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb3d:	88 04 24             	mov    BYTE PTR [esp],al
c000eb40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb44:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eb4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb4e:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eb52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb56:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb59:	83 e2 f0             	and    edx,0xfffffff0
c000eb5c:	83 ca 0e             	or     edx,0xe
c000eb5f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb66:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb69:	83 e2 ef             	and    edx,0xffffffef
c000eb6c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb6f:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000eb73:	74 04                	je     c000eb79 <IDTEntry::IDTEntry(bool)+0x43>
c000eb75:	b2 03                	mov    dl,0x3
c000eb77:	eb 02                	jmp    c000eb7b <IDTEntry::IDTEntry(bool)+0x45>
c000eb79:	b2 00                	mov    dl,0x0
c000eb7b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb7f:	83 e2 03             	and    edx,0x3
c000eb82:	88 d1                	mov    cl,dl
c000eb84:	c1 e1 05             	shl    ecx,0x5
c000eb87:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb8a:	83 e2 9f             	and    edx,0xffffff9f
c000eb8d:	09 ca                	or     edx,ecx
c000eb8f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb96:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb99:	83 ca 80             	or     edx,0xffffff80
c000eb9c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb9f:	90                   	nop
c000eba0:	83 c4 04             	add    esp,0x4
c000eba3:	c3                   	ret    

c000eba4 <IDTEntry::setOffset(unsigned int)>:
c000eba4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000eba8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebac:	66 89 02             	mov    WORD PTR [edx],ax
c000ebaf:	c1 e8 10             	shr    eax,0x10
c000ebb2:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ebb6:	c3                   	ret    
c000ebb7:	90                   	nop

c000ebb8 <IDT::IDT()>:
c000ebb8:	90                   	nop
c000ebb9:	c3                   	ret    

c000ebba <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ebba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebbe:	83 c0 30             	add    eax,0x30
c000ebc1:	c3                   	ret    

c000ebc2 <IDT::addEntry(IDTEntry, int)>:
c000ebc2:	53                   	push   ebx
c000ebc3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebc7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ebcb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ebcf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ebd3:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ebd6:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ebda:	5b                   	pop    ebx
c000ebdb:	c3                   	ret    

c000ebdc <IDT::addEntry(int, void (*)(), bool)>:
c000ebdc:	53                   	push   ebx
c000ebdd:	83 ec 10             	sub    esp,0x10
c000ebe0:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ebe5:	50                   	push   eax
c000ebe6:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ebea:	53                   	push   ebx
c000ebeb:	e8 46 ff ff ff       	call   c000eb36 <IDTEntry::IDTEntry(bool)>
c000ebf0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ebf4:	53                   	push   ebx
c000ebf5:	e8 aa ff ff ff       	call   c000eba4 <IDTEntry::setOffset(unsigned int)>
c000ebfa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ebfe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ec02:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ec06:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ec0a:	e8 b3 ff ff ff       	call   c000ebc2 <IDT::addEntry(IDTEntry, int)>
c000ec0f:	83 c4 30             	add    esp,0x30
c000ec12:	5b                   	pop    ebx
c000ec13:	c3                   	ret    

c000ec14 <IDT::flush()>:
c000ec14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec18:	66 c7 05 18 a4 02 c0 ff 07 	mov    WORD PTR ds:0xc002a418,0x7ff
c000ec21:	a3 1a a4 02 c0       	mov    ds:0xc002a41a,eax
c000ec26:	0f 01 1d 18 a4 02 c0 	lidtd  ds:0xc002a418
c000ec2d:	c3                   	ret    

c000ec2e <IDT::setup()>:
c000ec2e:	57                   	push   edi
c000ec2f:	56                   	push   esi
c000ec30:	53                   	push   ebx
c000ec31:	83 ec 10             	sub    esp,0x10
c000ec34:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ec38:	6a 00                	push   0x0
c000ec3a:	68 37 04 00 c0       	push   0xc0000437
c000ec3f:	6a 00                	push   0x0
c000ec41:	53                   	push   ebx
c000ec42:	e8 95 ff ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000ec47:	6a 00                	push   0x0
c000ec49:	68 47 04 00 c0       	push   0xc0000447
c000ec4e:	6a 01                	push   0x1
c000ec50:	53                   	push   ebx
c000ec51:	e8 86 ff ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000ec56:	83 c4 20             	add    esp,0x20
c000ec59:	6a 00                	push   0x0
c000ec5b:	68 51 04 00 c0       	push   0xc0000451
c000ec60:	6a 02                	push   0x2
c000ec62:	53                   	push   ebx
c000ec63:	e8 74 ff ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000ec68:	6a 00                	push   0x0
c000ec6a:	68 5b 04 00 c0       	push   0xc000045b
c000ec6f:	6a 03                	push   0x3
c000ec71:	53                   	push   ebx
c000ec72:	e8 65 ff ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000ec77:	83 c4 20             	add    esp,0x20
c000ec7a:	6a 00                	push   0x0
c000ec7c:	68 65 04 00 c0       	push   0xc0000465
c000ec81:	6a 04                	push   0x4
c000ec83:	53                   	push   ebx
c000ec84:	e8 53 ff ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000ec89:	6a 00                	push   0x0
c000ec8b:	68 6f 04 00 c0       	push   0xc000046f
c000ec90:	6a 05                	push   0x5
c000ec92:	53                   	push   ebx
c000ec93:	e8 44 ff ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000ec98:	83 c4 20             	add    esp,0x20
c000ec9b:	6a 00                	push   0x0
c000ec9d:	68 79 04 00 c0       	push   0xc0000479
c000eca2:	6a 06                	push   0x6
c000eca4:	53                   	push   ebx
c000eca5:	e8 32 ff ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000ecaa:	6a 00                	push   0x0
c000ecac:	68 83 04 00 c0       	push   0xc0000483
c000ecb1:	6a 07                	push   0x7
c000ecb3:	53                   	push   ebx
c000ecb4:	e8 23 ff ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000ecb9:	83 c4 20             	add    esp,0x20
c000ecbc:	6a 00                	push   0x0
c000ecbe:	68 8d 04 00 c0       	push   0xc000048d
c000ecc3:	6a 08                	push   0x8
c000ecc5:	53                   	push   ebx
c000ecc6:	e8 11 ff ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000eccb:	6a 00                	push   0x0
c000eccd:	68 95 04 00 c0       	push   0xc0000495
c000ecd2:	6a 09                	push   0x9
c000ecd4:	53                   	push   ebx
c000ecd5:	e8 02 ff ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000ecda:	83 c4 20             	add    esp,0x20
c000ecdd:	6a 00                	push   0x0
c000ecdf:	68 9f 04 00 c0       	push   0xc000049f
c000ece4:	6a 0a                	push   0xa
c000ece6:	53                   	push   ebx
c000ece7:	e8 f0 fe ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000ecec:	6a 00                	push   0x0
c000ecee:	68 a7 04 00 c0       	push   0xc00004a7
c000ecf3:	6a 0b                	push   0xb
c000ecf5:	53                   	push   ebx
c000ecf6:	e8 e1 fe ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000ecfb:	83 c4 20             	add    esp,0x20
c000ecfe:	6a 00                	push   0x0
c000ed00:	68 af 04 00 c0       	push   0xc00004af
c000ed05:	6a 0c                	push   0xc
c000ed07:	53                   	push   ebx
c000ed08:	e8 cf fe ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000ed0d:	6a 00                	push   0x0
c000ed0f:	68 b7 04 00 c0       	push   0xc00004b7
c000ed14:	6a 0d                	push   0xd
c000ed16:	53                   	push   ebx
c000ed17:	e8 c0 fe ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000ed1c:	83 c4 20             	add    esp,0x20
c000ed1f:	6a 00                	push   0x0
c000ed21:	68 bf 04 00 c0       	push   0xc00004bf
c000ed26:	6a 0e                	push   0xe
c000ed28:	53                   	push   ebx
c000ed29:	e8 ae fe ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000ed2e:	6a 00                	push   0x0
c000ed30:	68 c7 04 00 c0       	push   0xc00004c7
c000ed35:	6a 0f                	push   0xf
c000ed37:	53                   	push   ebx
c000ed38:	e8 9f fe ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000ed3d:	83 c4 20             	add    esp,0x20
c000ed40:	6a 00                	push   0x0
c000ed42:	68 d1 04 00 c0       	push   0xc00004d1
c000ed47:	6a 10                	push   0x10
c000ed49:	53                   	push   ebx
c000ed4a:	e8 8d fe ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000ed4f:	6a 00                	push   0x0
c000ed51:	68 db 04 00 c0       	push   0xc00004db
c000ed56:	6a 11                	push   0x11
c000ed58:	53                   	push   ebx
c000ed59:	e8 7e fe ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000ed5e:	83 c4 20             	add    esp,0x20
c000ed61:	6a 00                	push   0x0
c000ed63:	68 e5 04 00 c0       	push   0xc00004e5
c000ed68:	6a 12                	push   0x12
c000ed6a:	53                   	push   ebx
c000ed6b:	e8 6c fe ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000ed70:	6a 01                	push   0x1
c000ed72:	68 ef 04 00 c0       	push   0xc00004ef
c000ed77:	6a 60                	push   0x60
c000ed79:	53                   	push   ebx
c000ed7a:	e8 5d fe ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000ed7f:	83 c4 20             	add    esp,0x20
c000ed82:	6a 00                	push   0x0
c000ed84:	68 f9 04 00 c0       	push   0xc00004f9
c000ed89:	6a 20                	push   0x20
c000ed8b:	53                   	push   ebx
c000ed8c:	e8 4b fe ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000ed91:	6a 00                	push   0x0
c000ed93:	68 03 05 00 c0       	push   0xc0000503
c000ed98:	6a 21                	push   0x21
c000ed9a:	53                   	push   ebx
c000ed9b:	e8 3c fe ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000eda0:	83 c4 20             	add    esp,0x20
c000eda3:	6a 00                	push   0x0
c000eda5:	68 0d 05 00 c0       	push   0xc000050d
c000edaa:	6a 22                	push   0x22
c000edac:	53                   	push   ebx
c000edad:	e8 2a fe ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000edb2:	6a 00                	push   0x0
c000edb4:	68 17 05 00 c0       	push   0xc0000517
c000edb9:	6a 23                	push   0x23
c000edbb:	53                   	push   ebx
c000edbc:	e8 1b fe ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000edc1:	83 c4 20             	add    esp,0x20
c000edc4:	6a 00                	push   0x0
c000edc6:	68 21 05 00 c0       	push   0xc0000521
c000edcb:	6a 24                	push   0x24
c000edcd:	53                   	push   ebx
c000edce:	e8 09 fe ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000edd3:	6a 00                	push   0x0
c000edd5:	68 2b 05 00 c0       	push   0xc000052b
c000edda:	6a 25                	push   0x25
c000eddc:	53                   	push   ebx
c000eddd:	e8 fa fd ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000ede2:	83 c4 20             	add    esp,0x20
c000ede5:	6a 00                	push   0x0
c000ede7:	68 35 05 00 c0       	push   0xc0000535
c000edec:	6a 26                	push   0x26
c000edee:	53                   	push   ebx
c000edef:	e8 e8 fd ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000edf4:	6a 00                	push   0x0
c000edf6:	68 3f 05 00 c0       	push   0xc000053f
c000edfb:	6a 27                	push   0x27
c000edfd:	53                   	push   ebx
c000edfe:	e8 d9 fd ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000ee03:	83 c4 20             	add    esp,0x20
c000ee06:	6a 00                	push   0x0
c000ee08:	68 49 05 00 c0       	push   0xc0000549
c000ee0d:	6a 28                	push   0x28
c000ee0f:	53                   	push   ebx
c000ee10:	e8 c7 fd ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000ee15:	6a 00                	push   0x0
c000ee17:	68 53 05 00 c0       	push   0xc0000553
c000ee1c:	6a 29                	push   0x29
c000ee1e:	53                   	push   ebx
c000ee1f:	e8 b8 fd ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000ee24:	83 c4 20             	add    esp,0x20
c000ee27:	6a 00                	push   0x0
c000ee29:	68 5d 05 00 c0       	push   0xc000055d
c000ee2e:	6a 2a                	push   0x2a
c000ee30:	53                   	push   ebx
c000ee31:	e8 a6 fd ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000ee36:	6a 00                	push   0x0
c000ee38:	68 67 05 00 c0       	push   0xc0000567
c000ee3d:	6a 2b                	push   0x2b
c000ee3f:	53                   	push   ebx
c000ee40:	e8 97 fd ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000ee45:	83 c4 20             	add    esp,0x20
c000ee48:	6a 00                	push   0x0
c000ee4a:	68 71 05 00 c0       	push   0xc0000571
c000ee4f:	6a 2c                	push   0x2c
c000ee51:	53                   	push   ebx
c000ee52:	e8 85 fd ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000ee57:	6a 00                	push   0x0
c000ee59:	68 7b 05 00 c0       	push   0xc000057b
c000ee5e:	6a 2d                	push   0x2d
c000ee60:	53                   	push   ebx
c000ee61:	e8 76 fd ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000ee66:	83 c4 20             	add    esp,0x20
c000ee69:	6a 00                	push   0x0
c000ee6b:	68 85 05 00 c0       	push   0xc0000585
c000ee70:	6a 2e                	push   0x2e
c000ee72:	53                   	push   ebx
c000ee73:	e8 64 fd ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000ee78:	6a 00                	push   0x0
c000ee7a:	68 8f 05 00 c0       	push   0xc000058f
c000ee7f:	6a 2f                	push   0x2f
c000ee81:	53                   	push   ebx
c000ee82:	e8 55 fd ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000ee87:	83 c4 20             	add    esp,0x20
c000ee8a:	6a 00                	push   0x0
c000ee8c:	68 99 05 00 c0       	push   0xc0000599
c000ee91:	6a 30                	push   0x30
c000ee93:	53                   	push   ebx
c000ee94:	e8 43 fd ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000ee99:	6a 00                	push   0x0
c000ee9b:	68 a3 05 00 c0       	push   0xc00005a3
c000eea0:	6a 31                	push   0x31
c000eea2:	53                   	push   ebx
c000eea3:	e8 34 fd ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000eea8:	83 c4 20             	add    esp,0x20
c000eeab:	6a 00                	push   0x0
c000eead:	68 ad 05 00 c0       	push   0xc00005ad
c000eeb2:	6a 32                	push   0x32
c000eeb4:	53                   	push   ebx
c000eeb5:	e8 22 fd ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000eeba:	6a 00                	push   0x0
c000eebc:	68 b7 05 00 c0       	push   0xc00005b7
c000eec1:	6a 33                	push   0x33
c000eec3:	53                   	push   ebx
c000eec4:	e8 13 fd ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000eec9:	83 c4 20             	add    esp,0x20
c000eecc:	6a 00                	push   0x0
c000eece:	68 c1 05 00 c0       	push   0xc00005c1
c000eed3:	6a 34                	push   0x34
c000eed5:	53                   	push   ebx
c000eed6:	e8 01 fd ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000eedb:	6a 00                	push   0x0
c000eedd:	68 cb 05 00 c0       	push   0xc00005cb
c000eee2:	6a 35                	push   0x35
c000eee4:	53                   	push   ebx
c000eee5:	e8 f2 fc ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000eeea:	83 c4 20             	add    esp,0x20
c000eeed:	6a 00                	push   0x0
c000eeef:	68 d5 05 00 c0       	push   0xc00005d5
c000eef4:	6a 36                	push   0x36
c000eef6:	53                   	push   ebx
c000eef7:	e8 e0 fc ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000eefc:	6a 00                	push   0x0
c000eefe:	68 df 05 00 c0       	push   0xc00005df
c000ef03:	6a 37                	push   0x37
c000ef05:	53                   	push   ebx
c000ef06:	e8 d1 fc ff ff       	call   c000ebdc <IDT::addEntry(int, void (*)(), bool)>
c000ef0b:	83 c4 20             	add    esp,0x20
c000ef0e:	e8 fc 24 00 00       	call   c001140f <Virt::getAKernelVAS()>
c000ef13:	52                   	push   edx
c000ef14:	6a 03                	push   0x3
c000ef16:	6a 02                	push   0x2
c000ef18:	50                   	push   eax
c000ef19:	e8 34 2b 00 00       	call   c0011a52 <VAS::allocatePages(int, int)>
c000ef1e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ef25:	89 c6                	mov    esi,eax
c000ef27:	e8 36 32 00 00       	call   c0012162 <operator new(unsigned long)>
c000ef2c:	81 c6 00 20 00 00    	add    esi,0x2000
c000ef32:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef35:	89 c7                	mov    edi,eax
c000ef37:	e8 c0 1c 00 00       	call   c0010bfc <TSS::TSS()>
c000ef3c:	83 c4 0c             	add    esp,0xc
c000ef3f:	68 8d 04 00 c0       	push   0xc000048d
c000ef44:	56                   	push   esi
c000ef45:	57                   	push   edi
c000ef46:	e8 f1 1c 00 00       	call   c0010c3c <TSS::setup(unsigned long, unsigned long)>
c000ef4b:	59                   	pop    ecx
c000ef4c:	89 c6                	mov    esi,eax
c000ef4e:	5f                   	pop    edi
c000ef4f:	6a 00                	push   0x0
c000ef51:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ef55:	50                   	push   eax
c000ef56:	e8 db fb ff ff       	call   c000eb36 <IDTEntry::IDTEntry(bool)>
c000ef5b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef5f:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ef64:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ef6b:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ef71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef75:	80 ce 05             	or     dh,0x5
c000ef78:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ef7b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ef7f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef83:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ef86:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef89:	e8 86 fc ff ff       	call   c000ec14 <IDT::flush()>
c000ef8e:	83 c4 20             	add    esp,0x20
c000ef91:	5b                   	pop    ebx
c000ef92:	5e                   	pop    esi
c000ef93:	5f                   	pop    edi
c000ef94:	c3                   	ret    

c000ef95 <sbrk>:
c000ef95:	55                   	push   ebp
c000ef96:	57                   	push   edi
c000ef97:	56                   	push   esi
c000ef98:	53                   	push   ebx
c000ef99:	83 ec 1c             	sub    esp,0x1c
c000ef9c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000efa0:	85 db                	test   ebx,ebx
c000efa2:	74 37                	je     c000efdb <sbrk+0x46>
c000efa4:	78 3f                	js     c000efe5 <sbrk+0x50>
c000efa6:	e8 c1 88 00 00       	call   c001786c <CPU::current()>
c000efab:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000efb1:	83 e0 01             	and    eax,0x1
c000efb4:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000efb8:	a1 a0 93 02 c0       	mov    eax,ds:0xc00293a0
c000efbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000efc1:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000efc7:	89 d8                	mov    eax,ebx
c000efc9:	78 35                	js     c000f000 <sbrk+0x6b>
c000efcb:	c1 f8 0c             	sar    eax,0xc
c000efce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000efd2:	89 c7                	mov    edi,eax
c000efd4:	be 00 00 00 00       	mov    esi,0x0
c000efd9:	eb 3c                	jmp    c000f017 <sbrk+0x82>
c000efdb:	a1 a0 93 02 c0       	mov    eax,ds:0xc00293a0
c000efe0:	e9 ad 00 00 00       	jmp    c000f092 <sbrk+0xfd>
c000efe5:	83 ec 08             	sub    esp,0x8
c000efe8:	53                   	push   ebx
c000efe9:	68 30 6b 02 c0       	push   0xc0026b30
c000efee:	e8 5e 32 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000eff3:	83 c4 10             	add    esp,0x10
c000eff6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000effb:	e9 92 00 00 00       	jmp    c000f092 <sbrk+0xfd>
c000f000:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000f006:	eb c3                	jmp    c000efcb <sbrk+0x36>
c000f008:	81 05 a0 93 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00293a0,0x1000
c000f012:	46                   	inc    esi
c000f013:	39 f7                	cmp    edi,esi
c000f015:	74 34                	je     c000f04b <sbrk+0xb6>
c000f017:	e8 f3 23 00 00       	call   c001140f <Virt::getAKernelVAS()>
c000f01c:	89 c3                	mov    ebx,eax
c000f01e:	8b 2d a0 93 02 c0    	mov    ebp,DWORD PTR ds:0xc00293a0
c000f024:	e8 c9 06 00 00       	call   c000f6f2 <Phys::allocatePage()>
c000f029:	68 01 04 00 00       	push   0x401
c000f02e:	55                   	push   ebp
c000f02f:	50                   	push   eax
c000f030:	53                   	push   ebx
c000f031:	e8 1c 29 00 00       	call   c0011952 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f036:	83 c4 10             	add    esp,0x10
c000f039:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f03e:	74 c8                	je     c000f008 <sbrk+0x73>
c000f040:	8b 1d a0 93 02 c0    	mov    ebx,DWORD PTR ds:0xc00293a0
c000f046:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f049:	eb bd                	jmp    c000f008 <sbrk+0x73>
c000f04b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f050:	74 48                	je     c000f09a <sbrk+0x105>
c000f052:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f056:	89 d3                	mov    ebx,edx
c000f058:	c1 eb 0a             	shr    ebx,0xa
c000f05b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f061:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f067:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f06b:	c1 e0 0c             	shl    eax,0xc
c000f06e:	01 d0                	add    eax,edx
c000f070:	c1 e8 0a             	shr    eax,0xa
c000f073:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f078:	2d 00 00 40 00       	sub    eax,0x400000
c000f07d:	39 c3                	cmp    ebx,eax
c000f07f:	77 0d                	ja     c000f08e <sbrk+0xf9>
c000f081:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f084:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f08a:	39 d8                	cmp    eax,ebx
c000f08c:	73 f3                	jae    c000f081 <sbrk+0xec>
c000f08e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f092:	83 c4 1c             	add    esp,0x1c
c000f095:	5b                   	pop    ebx
c000f096:	5e                   	pop    esi
c000f097:	5f                   	pop    edi
c000f098:	5d                   	pop    ebp
c000f099:	c3                   	ret    
c000f09a:	e8 d6 5f 01 00       	call   c0025075 <CPU::readCR3()>
c000f09f:	83 ec 0c             	sub    esp,0xc
c000f0a2:	50                   	push   eax
c000f0a3:	e8 df 5f 01 00       	call   c0025087 <CPU::writeCR3(unsigned long)>
c000f0a8:	83 c4 10             	add    esp,0x10
c000f0ab:	eb e1                	jmp    c000f08e <sbrk+0xf9>

c000f0ad <mmap>:
c000f0ad:	83 ec 18             	sub    esp,0x18
c000f0b0:	68 60 6b 02 c0       	push   0xc0026b60
c000f0b5:	e8 35 99 00 00       	call   c00189ef <Krnl::panic(char const*)>
c000f0ba:	b8 00 00 00 00       	mov    eax,0x0
c000f0bf:	83 c4 1c             	add    esp,0x1c
c000f0c2:	c3                   	ret    

c000f0c3 <munmap>:
c000f0c3:	83 ec 18             	sub    esp,0x18
c000f0c6:	68 65 6b 02 c0       	push   0xc0026b65
c000f0cb:	e8 1f 99 00 00       	call   c00189ef <Krnl::panic(char const*)>
c000f0d0:	b8 00 00 00 00       	mov    eax,0x0
c000f0d5:	83 c4 1c             	add    esp,0x1c
c000f0d8:	c3                   	ret    

c000f0d9 <liballoc_lock()>:
c000f0d9:	83 ec 0c             	sub    esp,0xc
c000f0dc:	e8 61 c8 00 00       	call   c001b942 <lockScheduler()>
c000f0e1:	b8 00 00 00 00       	mov    eax,0x0
c000f0e6:	83 c4 0c             	add    esp,0xc
c000f0e9:	c3                   	ret    

c000f0ea <liballoc_unlock()>:
c000f0ea:	83 ec 0c             	sub    esp,0xc
c000f0ed:	e8 52 c8 00 00       	call   c001b944 <unlockScheduler()>
c000f0f2:	b8 00 00 00 00       	mov    eax,0x0
c000f0f7:	83 c4 0c             	add    esp,0xc
c000f0fa:	c3                   	ret    

c000f0fb <liballoc_alloc(int)>:
c000f0fb:	83 ec 0c             	sub    esp,0xc
c000f0fe:	e8 0c 23 00 00       	call   c001140f <Virt::getAKernelVAS()>
c000f103:	83 ec 04             	sub    esp,0x4
c000f106:	6a 01                	push   0x1
c000f108:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f10c:	50                   	push   eax
c000f10d:	e8 40 29 00 00       	call   c0011a52 <VAS::allocatePages(int, int)>
c000f112:	83 c4 1c             	add    esp,0x1c
c000f115:	c3                   	ret    

c000f116 <liballoc_free(void*, int)>:
c000f116:	83 ec 0c             	sub    esp,0xc
c000f119:	e8 f1 22 00 00       	call   c001140f <Virt::getAKernelVAS()>
c000f11e:	83 ec 08             	sub    esp,0x8
c000f121:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f125:	50                   	push   eax
c000f126:	e8 d1 25 00 00       	call   c00116fc <VAS::freeAllocatedPages(unsigned long)>
c000f12b:	b8 00 00 00 00       	mov    eax,0x0
c000f130:	83 c4 1c             	add    esp,0x1c
c000f133:	c3                   	ret    

c000f134 <realloc>:
c000f134:	83 ec 14             	sub    esp,0x14
c000f137:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f13b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f13f:	e8 03 23 ff ff       	call   c0001447 <dlrealloc>
c000f144:	83 c4 1c             	add    esp,0x1c
c000f147:	c3                   	ret    

c000f148 <malloc>:
c000f148:	83 ec 18             	sub    esp,0x18
c000f14b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f14f:	e8 b6 1d ff ff       	call   c0000f0a <dlmalloc>
c000f154:	83 c4 1c             	add    esp,0x1c
c000f157:	c3                   	ret    

c000f158 <free>:
c000f158:	83 ec 18             	sub    esp,0x18
c000f15b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f15f:	e8 4b 1a ff ff       	call   c0000baf <dlfree>
c000f164:	83 c4 1c             	add    esp,0x1c
c000f167:	c3                   	ret    

c000f168 <rfree>:
c000f168:	83 ec 18             	sub    esp,0x18
c000f16b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f16f:	e8 e4 ff ff ff       	call   c000f158 <free>
c000f174:	83 c4 1c             	add    esp,0x1c
c000f177:	c3                   	ret    

c000f178 <calloc>:
c000f178:	56                   	push   esi
c000f179:	53                   	push   ebx
c000f17a:	83 ec 10             	sub    esp,0x10
c000f17d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f181:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f186:	53                   	push   ebx
c000f187:	e8 bc ff ff ff       	call   c000f148 <malloc>
c000f18c:	89 c6                	mov    esi,eax
c000f18e:	83 c4 0c             	add    esp,0xc
c000f191:	53                   	push   ebx
c000f192:	6a 00                	push   0x0
c000f194:	50                   	push   eax
c000f195:	e8 34 15 ff ff       	call   c00006ce <memset>
c000f19a:	89 f0                	mov    eax,esi
c000f19c:	83 c4 14             	add    esp,0x14
c000f19f:	5b                   	pop    ebx
c000f1a0:	5e                   	pop    esi
c000f1a1:	c3                   	ret    

c000f1a2 <hwTextMode_loadInData(VgaText*)>:
c000f1a2:	57                   	push   edi
c000f1a3:	56                   	push   esi
c000f1a4:	53                   	push   ebx
c000f1a5:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000f1a9:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000f1af:	85 c0                	test   eax,eax
c000f1b1:	7e 30                	jle    c000f1e3 <hwTextMode_loadInData(VgaText*)+0x41>
c000f1b3:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000f1b6:	31 f6                	xor    esi,esi
c000f1b8:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000f1bb:	31 c0                	xor    eax,eax
c000f1bd:	c1 e1 05             	shl    ecx,0x5
c000f1c0:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000f1c6:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000f1ca:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000f1ce:	40                   	inc    eax
c000f1cf:	83 f8 50             	cmp    eax,0x50
c000f1d2:	75 f2                	jne    c000f1c6 <hwTextMode_loadInData(VgaText*)+0x24>
c000f1d4:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000f1da:	46                   	inc    esi
c000f1db:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f1e1:	7f d5                	jg     c000f1b8 <hwTextMode_loadInData(VgaText*)+0x16>
c000f1e3:	5b                   	pop    ebx
c000f1e4:	5e                   	pop    esi
c000f1e5:	5f                   	pop    edi
c000f1e6:	c3                   	ret    

c000f1e7 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f1e7:	56                   	push   esi
c000f1e8:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000f1ed:	53                   	push   ebx
c000f1ee:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f1f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f1f6:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000f1fc:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000f202:	c1 e0 04             	shl    eax,0x4
c000f205:	83 e6 0f             	and    esi,0xf
c000f208:	0f b6 c0             	movzx  eax,al
c000f20b:	41                   	inc    ecx
c000f20c:	09 f0                	or     eax,esi
c000f20e:	83 c2 02             	add    edx,0x2
c000f211:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000f215:	c1 e0 08             	shl    eax,0x8
c000f218:	09 f0                	or     eax,esi
c000f21a:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f21e:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000f224:	75 d0                	jne    c000f1f6 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000f226:	5b                   	pop    ebx
c000f227:	5e                   	pop    esi
c000f228:	c3                   	ret    

c000f229 <hwTextMode_showCursor(VgaText*, bool)>:
c000f229:	56                   	push   esi
c000f22a:	53                   	push   ebx
c000f22b:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000f230:	74 38                	je     c000f26a <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000f232:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f237:	b0 0a                	mov    al,0xa
c000f239:	89 da                	mov    edx,ebx
c000f23b:	ee                   	out    dx,al
c000f23c:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f241:	89 ca                	mov    edx,ecx
c000f243:	ec                   	in     al,dx
c000f244:	b2 0f                	mov    dl,0xf
c000f246:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f24a:	83 e0 c0             	and    eax,0xffffffc0
c000f24d:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f253:	09 d0                	or     eax,edx
c000f255:	89 ca                	mov    edx,ecx
c000f257:	ee                   	out    dx,al
c000f258:	b0 0b                	mov    al,0xb
c000f25a:	89 da                	mov    edx,ebx
c000f25c:	ee                   	out    dx,al
c000f25d:	89 ca                	mov    edx,ecx
c000f25f:	ec                   	in     al,dx
c000f260:	83 e0 e0             	and    eax,0xffffffe0
c000f263:	83 c8 0f             	or     eax,0xf
c000f266:	ee                   	out    dx,al
c000f267:	5b                   	pop    ebx
c000f268:	5e                   	pop    esi
c000f269:	c3                   	ret    
c000f26a:	b0 0a                	mov    al,0xa
c000f26c:	ba d4 03 00 00       	mov    edx,0x3d4
c000f271:	ee                   	out    dx,al
c000f272:	b0 20                	mov    al,0x20
c000f274:	ba d5 03 00 00       	mov    edx,0x3d5
c000f279:	ee                   	out    dx,al
c000f27a:	5b                   	pop    ebx
c000f27b:	5e                   	pop    esi
c000f27c:	c3                   	ret    

c000f27d <hwTextMode_update(VgaText*)>:
c000f27d:	c3                   	ret    

c000f27e <hwTextMode_updateCursor(VgaText*)>:
c000f27e:	56                   	push   esi
c000f27f:	b9 19 00 00 00       	mov    ecx,0x19
c000f284:	53                   	push   ebx
c000f285:	be d4 03 00 00       	mov    esi,0x3d4
c000f28a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f28e:	89 f2                	mov    edx,esi
c000f290:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f296:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f29c:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f29f:	c1 e1 04             	shl    ecx,0x4
c000f2a2:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f2a8:	b0 0f                	mov    al,0xf
c000f2aa:	ee                   	out    dx,al
c000f2ab:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f2b0:	88 c8                	mov    al,cl
c000f2b2:	89 da                	mov    edx,ebx
c000f2b4:	ee                   	out    dx,al
c000f2b5:	b0 0e                	mov    al,0xe
c000f2b7:	89 f2                	mov    edx,esi
c000f2b9:	ee                   	out    dx,al
c000f2ba:	89 c8                	mov    eax,ecx
c000f2bc:	89 da                	mov    edx,ebx
c000f2be:	66 c1 e8 08          	shr    ax,0x8
c000f2c2:	ee                   	out    dx,al
c000f2c3:	5b                   	pop    ebx
c000f2c4:	5e                   	pop    esi
c000f2c5:	c3                   	ret    

c000f2c6 <hwTextMode_disableBlink(VgaText*, bool)>:
c000f2c6:	ba da 03 00 00       	mov    edx,0x3da
c000f2cb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000f2d0:	75 18                	jne    c000f2ea <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000f2d2:	ec                   	in     al,dx
c000f2d3:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f2d8:	b0 30                	mov    al,0x30
c000f2da:	89 ca                	mov    edx,ecx
c000f2dc:	ee                   	out    dx,al
c000f2dd:	ba c1 03 00 00       	mov    edx,0x3c1
c000f2e2:	ec                   	in     al,dx
c000f2e3:	83 c8 08             	or     eax,0x8
c000f2e6:	89 ca                	mov    edx,ecx
c000f2e8:	ee                   	out    dx,al
c000f2e9:	c3                   	ret    
c000f2ea:	ec                   	in     al,dx
c000f2eb:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f2f0:	b0 30                	mov    al,0x30
c000f2f2:	89 ca                	mov    edx,ecx
c000f2f4:	ee                   	out    dx,al
c000f2f5:	ba c1 03 00 00       	mov    edx,0x3c1
c000f2fa:	ec                   	in     al,dx
c000f2fb:	83 e0 f7             	and    eax,0xfffffff7
c000f2fe:	89 ca                	mov    edx,ecx
c000f300:	ee                   	out    dx,al
c000f301:	c3                   	ret    

c000f302 <hwTextMode_scrollScreen(VgaText*)>:
c000f302:	55                   	push   ebp
c000f303:	bd 02 00 00 00       	mov    ebp,0x2
c000f308:	57                   	push   edi
c000f309:	56                   	push   esi
c000f30a:	53                   	push   ebx
c000f30b:	83 ec 1c             	sub    esp,0x1c
c000f30e:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000f316:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f31a:	31 c0                	xor    eax,eax
c000f31c:	eb 0b                	jmp    c000f329 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000f31e:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f324:	74 57                	je     c000f37d <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f326:	43                   	inc    ebx
c000f327:	89 f0                	mov    eax,esi
c000f329:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f32f:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f335:	88 13                	mov    BYTE PTR [ebx],dl
c000f337:	8d 70 01             	lea    esi,[eax+0x1]
c000f33a:	83 fd 18             	cmp    ebp,0x18
c000f33d:	75 df                	jne    c000f31e <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000f33f:	a8 01                	test   al,0x1
c000f341:	75 13                	jne    c000f356 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000f343:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f346:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f34c:	75 d8                	jne    c000f326 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000f34e:	83 c4 1c             	add    esp,0x1c
c000f351:	5b                   	pop    ebx
c000f352:	5e                   	pop    esi
c000f353:	5f                   	pop    edi
c000f354:	5d                   	pop    ebp
c000f355:	c3                   	ret    
c000f356:	83 ec 08             	sub    esp,0x8
c000f359:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f35d:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000f364:	50                   	push   eax
c000f365:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f369:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000f370:	50                   	push   eax
c000f371:	e8 66 0b 00 00       	call   c000fedc <VgaText::combineColours(unsigned char, unsigned char)>
c000f376:	83 c4 10             	add    esp,0x10
c000f379:	88 07                	mov    BYTE PTR [edi],al
c000f37b:	eb c9                	jmp    c000f346 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000f37d:	45                   	inc    ebp
c000f37e:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f386:	eb 8e                	jmp    c000f316 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000f388 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f388:	56                   	push   esi
c000f389:	53                   	push   ebx
c000f38a:	83 ec 0c             	sub    esp,0xc
c000f38d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f391:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000f395:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f39a:	50                   	push   eax
c000f39b:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f3a0:	50                   	push   eax
c000f3a1:	e8 36 0b 00 00       	call   c000fedc <VgaText::combineColours(unsigned char, unsigned char)>
c000f3a6:	5a                   	pop    edx
c000f3a7:	0f b6 c0             	movzx  eax,al
c000f3aa:	59                   	pop    ecx
c000f3ab:	50                   	push   eax
c000f3ac:	89 f0                	mov    eax,esi
c000f3ae:	0f be f0             	movsx  esi,al
c000f3b1:	56                   	push   esi
c000f3b2:	e8 cb 0b 00 00       	call   c000ff82 <VgaText::combineCharAndColour(char, unsigned char)>
c000f3b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f3bb:	ba 19 00 00 00       	mov    edx,0x19
c000f3c0:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f3c6:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000f3c9:	8d 14 92             	lea    edx,[edx+edx*4]
c000f3cc:	c1 e1 04             	shl    ecx,0x4
c000f3cf:	c1 e2 04             	shl    edx,0x4
c000f3d2:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000f3d6:	01 ca                	add    edx,ecx
c000f3d8:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f3e0:	83 c4 14             	add    esp,0x14
c000f3e3:	5b                   	pop    ebx
c000f3e4:	5e                   	pop    esi
c000f3e5:	c3                   	ret    

c000f3e6 <setupTextMode()>:
c000f3e6:	c7 05 b8 a4 02 c0 c6 f2 00 c0 	mov    DWORD PTR ds:0xc002a4b8,0xc000f2c6
c000f3f0:	c7 05 a4 a4 02 c0 a2 f1 00 c0 	mov    DWORD PTR ds:0xc002a4a4,0xc000f1a2
c000f3fa:	c7 05 a0 a4 02 c0 e7 f1 00 c0 	mov    DWORD PTR ds:0xc002a4a0,0xc000f1e7
c000f404:	c7 05 ac a4 02 c0 02 f3 00 c0 	mov    DWORD PTR ds:0xc002a4ac,0xc000f302
c000f40e:	c7 05 b4 a4 02 c0 29 f2 00 c0 	mov    DWORD PTR ds:0xc002a4b4,0xc000f229
c000f418:	c7 05 a8 a4 02 c0 7d f2 00 c0 	mov    DWORD PTR ds:0xc002a4a8,0xc000f27d
c000f422:	c7 05 b0 a4 02 c0 7e f2 00 c0 	mov    DWORD PTR ds:0xc002a4b0,0xc000f27e
c000f42c:	c7 05 bc a4 02 c0 88 f3 00 c0 	mov    DWORD PTR ds:0xc002a4bc,0xc000f388
c000f436:	c3                   	ret    

c000f437 <kernel_main>:
c000f437:	57                   	push   edi
c000f438:	bf f9 03 00 00       	mov    edi,0x3f9
c000f43d:	56                   	push   esi
c000f43e:	31 f6                	xor    esi,esi
c000f440:	53                   	push   ebx
c000f441:	83 ec 10             	sub    esp,0x10
c000f444:	e8 ed 08 00 00       	call   c000fd36 <installVgaTextImplementation()>
c000f449:	e8 98 ff ff ff       	call   c000f3e6 <setupTextMode()>
c000f44e:	89 f0                	mov    eax,esi
c000f450:	89 fa                	mov    edx,edi
c000f452:	ee                   	out    dx,al
c000f453:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f458:	b0 80                	mov    al,0x80
c000f45a:	89 da                	mov    edx,ebx
c000f45c:	ee                   	out    dx,al
c000f45d:	b1 03                	mov    cl,0x3
c000f45f:	ba f8 03 00 00       	mov    edx,0x3f8
c000f464:	88 c8                	mov    al,cl
c000f466:	ee                   	out    dx,al
c000f467:	89 f0                	mov    eax,esi
c000f469:	89 fa                	mov    edx,edi
c000f46b:	ee                   	out    dx,al
c000f46c:	88 c8                	mov    al,cl
c000f46e:	89 da                	mov    edx,ebx
c000f470:	ee                   	out    dx,al
c000f471:	b0 c7                	mov    al,0xc7
c000f473:	ba fa 03 00 00       	mov    edx,0x3fa
c000f478:	ee                   	out    dx,al
c000f479:	b0 0b                	mov    al,0xb
c000f47b:	ba fc 03 00 00       	mov    edx,0x3fc
c000f480:	ee                   	out    dx,al
c000f481:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f486:	83 ec 0c             	sub    esp,0xc
c000f489:	05 ff 0f 00 00       	add    eax,0xfff
c000f48e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f493:	50                   	push   eax
c000f494:	e8 59 03 00 00       	call   c000f7f2 <Phys::physicalMemorySetup(unsigned int)>
c000f499:	e8 f2 1e 00 00       	call   c0011390 <Virt::virtualMemorySetup()>
c000f49e:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000f4a4:	83 c4 10             	add    esp,0x10
c000f4a7:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000f4ad:	75 0e                	jne    c000f4bd <kernel_main+0x86>
c000f4af:	89 d8                	mov    eax,ebx
c000f4b1:	25 48 03 00 00       	and    eax,0x348
c000f4b6:	3d 00 03 00 00       	cmp    eax,0x300
c000f4bb:	74 10                	je     c000f4cd <kernel_main+0x96>
c000f4bd:	83 ec 0c             	sub    esp,0xc
c000f4c0:	68 7f 80 02 c0       	push   0xc002807f
c000f4c5:	e8 25 95 00 00       	call   c00189ef <Krnl::panic(char const*)>
c000f4ca:	83 c4 10             	add    esp,0x10
c000f4cd:	83 ec 0c             	sub    esp,0xc
c000f4d0:	89 1d 20 a4 02 c0    	mov    DWORD PTR ds:0xc002a420,ebx
c000f4d6:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f4da:	53                   	push   ebx
c000f4db:	e8 5a 20 00 00       	call   c001153a <VAS::VAS()>
c000f4e0:	89 1d 64 a5 02 c0    	mov    DWORD PTR ds:0xc002a564,ebx
c000f4e6:	e8 35 0b ff ff       	call   c0000020 <callGlobalConstructors>
c000f4eb:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f4f2:	e8 6b 2c 00 00       	call   c0012162 <operator new(unsigned long)>
c000f4f7:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4fa:	89 c6                	mov    esi,eax
c000f4fc:	e8 7f ea ff ff       	call   c000df80 <Computer::Computer()>
c000f501:	6a 00                	push   0x0
c000f503:	89 35 08 a4 02 c0    	mov    DWORD PTR ds:0xc002a408,esi
c000f509:	6a 00                	push   0x0
c000f50b:	6a 00                	push   0x0
c000f50d:	56                   	push   esi
c000f50e:	e8 77 f2 ff ff       	call   c000e78a <Computer::open(int, int, void*)>
c000f513:	83 c4 14             	add    esp,0x14
c000f516:	53                   	push   ebx
c000f517:	e8 ca 22 00 00       	call   c00117e6 <VAS::~VAS()>
c000f51c:	c7 04 24 6c 6b 02 c0 	mov    DWORD PTR [esp],0xc0026b6c
c000f523:	e8 c7 94 00 00       	call   c00189ef <Krnl::panic(char const*)>
c000f528:	83 c4 20             	add    esp,0x20
c000f52b:	5b                   	pop    ebx
c000f52c:	5e                   	pop    esi
c000f52d:	5f                   	pop    edi
c000f52e:	c3                   	ret    

c000f52f <Phys::allocateDMA(unsigned long)>:
c000f52f:	55                   	push   ebp
c000f530:	31 d2                	xor    edx,edx
c000f532:	57                   	push   edi
c000f533:	31 ed                	xor    ebp,ebp
c000f535:	56                   	push   esi
c000f536:	31 c9                	xor    ecx,ecx
c000f538:	53                   	push   ebx
c000f539:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f53d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f543:	31 c0                	xor    eax,eax
c000f545:	c1 ee 0c             	shr    esi,0xc
c000f548:	eb 17                	jmp    c000f561 <Phys::allocateDMA(unsigned long)+0x32>
c000f54a:	85 c9                	test   ecx,ecx
c000f54c:	75 04                	jne    c000f552 <Phys::allocateDMA(unsigned long)+0x23>
c000f54e:	89 d5                	mov    ebp,edx
c000f550:	89 d0                	mov    eax,edx
c000f552:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f555:	39 de                	cmp    esi,ebx
c000f557:	74 20                	je     c000f579 <Phys::allocateDMA(unsigned long)+0x4a>
c000f559:	42                   	inc    edx
c000f55a:	89 d9                	mov    ecx,ebx
c000f55c:	83 fa 2f             	cmp    edx,0x2f
c000f55f:	7f 11                	jg     c000f572 <Phys::allocateDMA(unsigned long)+0x43>
c000f561:	80 ba 60 a4 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd5ba0],0x0
c000f568:	74 e0                	je     c000f54a <Phys::allocateDMA(unsigned long)+0x1b>
c000f56a:	31 c9                	xor    ecx,ecx
c000f56c:	42                   	inc    edx
c000f56d:	83 fa 2f             	cmp    edx,0x2f
c000f570:	7e ef                	jle    c000f561 <Phys::allocateDMA(unsigned long)+0x32>
c000f572:	5b                   	pop    ebx
c000f573:	31 c0                	xor    eax,eax
c000f575:	5e                   	pop    esi
c000f576:	5f                   	pop    edi
c000f577:	5d                   	pop    ebp
c000f578:	c3                   	ret    
c000f579:	8d 14 30             	lea    edx,[eax+esi*1]
c000f57c:	89 d7                	mov    edi,edx
c000f57e:	4f                   	dec    edi
c000f57f:	79 03                	jns    c000f584 <Phys::allocateDMA(unsigned long)+0x55>
c000f581:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f584:	c1 ff 04             	sar    edi,0x4
c000f587:	89 c2                	mov    edx,eax
c000f589:	c1 fa 04             	sar    edx,0x4
c000f58c:	39 fa                	cmp    edx,edi
c000f58e:	75 2f                	jne    c000f5bf <Phys::allocateDMA(unsigned long)+0x90>
c000f590:	85 db                	test   ebx,ebx
c000f592:	74 1a                	je     c000f5ae <Phys::allocateDMA(unsigned long)+0x7f>
c000f594:	be 60 a4 02 c0       	mov    esi,0xc002a460
c000f599:	8d 90 60 a4 02 c0    	lea    edx,[eax-0x3ffd5ba0]
c000f59f:	f7 d6                	not    esi
c000f5a1:	29 c6                	sub    esi,eax
c000f5a3:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f5a6:	42                   	inc    edx
c000f5a7:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f5aa:	39 d9                	cmp    ecx,ebx
c000f5ac:	7f f5                	jg     c000f5a3 <Phys::allocateDMA(unsigned long)+0x74>
c000f5ae:	85 ff                	test   edi,edi
c000f5b0:	74 13                	je     c000f5c5 <Phys::allocateDMA(unsigned long)+0x96>
c000f5b2:	5b                   	pop    ebx
c000f5b3:	05 50 20 0c 00       	add    eax,0xc2050
c000f5b8:	5e                   	pop    esi
c000f5b9:	c1 e0 0c             	shl    eax,0xc
c000f5bc:	5f                   	pop    edi
c000f5bd:	5d                   	pop    ebp
c000f5be:	c3                   	ret    
c000f5bf:	89 ea                	mov    edx,ebp
c000f5c1:	31 c9                	xor    ecx,ecx
c000f5c3:	eb a7                	jmp    c000f56c <Phys::allocateDMA(unsigned long)+0x3d>
c000f5c5:	5b                   	pop    ebx
c000f5c6:	c1 e0 0c             	shl    eax,0xc
c000f5c9:	5e                   	pop    esi
c000f5ca:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f5cf:	5f                   	pop    edi
c000f5d0:	5d                   	pop    ebp
c000f5d1:	c3                   	ret    

c000f5d2 <Phys::freeDMA(unsigned long, unsigned long)>:
c000f5d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f5d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f5da:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f5e0:	c1 e9 0c             	shr    ecx,0xc
c000f5e3:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f5e8:	76 25                	jbe    c000f60f <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f5ea:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f5ef:	c1 e8 0c             	shr    eax,0xc
c000f5f2:	8d 50 10             	lea    edx,[eax+0x10]
c000f5f5:	85 c9                	test   ecx,ecx
c000f5f7:	74 15                	je     c000f60e <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f5f9:	8d 82 60 a4 02 c0    	lea    eax,[edx-0x3ffd5ba0]
c000f5ff:	8d 94 11 60 a4 02 c0 	lea    edx,[ecx+edx*1-0x3ffd5ba0]
c000f606:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f609:	40                   	inc    eax
c000f60a:	39 d0                	cmp    eax,edx
c000f60c:	75 f8                	jne    c000f606 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f60e:	c3                   	ret    
c000f60f:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f615:	c1 ea 0c             	shr    edx,0xc
c000f618:	eb db                	jmp    c000f5f5 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f61a <Phys::setPageState(unsigned long, bool)>:
c000f61a:	56                   	push   esi
c000f61b:	ba 01 00 00 00       	mov    edx,0x1
c000f620:	53                   	push   ebx
c000f621:	8b 35 a4 93 02 c0    	mov    esi,DWORD PTR ds:0xc00293a4
c000f627:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f62b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f62f:	89 c8                	mov    eax,ecx
c000f631:	83 e1 07             	and    ecx,0x7
c000f634:	c1 e8 03             	shr    eax,0x3
c000f637:	d3 e3                	shl    ebx,cl
c000f639:	01 c6                	add    esi,eax
c000f63b:	d3 e2                	shl    edx,cl
c000f63d:	f7 d2                	not    edx
c000f63f:	20 16                	and    BYTE PTR [esi],dl
c000f641:	03 05 a4 93 02 c0    	add    eax,DWORD PTR ds:0xc00293a4
c000f647:	08 18                	or     BYTE PTR [eax],bl
c000f649:	5b                   	pop    ebx
c000f64a:	5e                   	pop    esi
c000f64b:	c3                   	ret    

c000f64c <Phys::getPageState(unsigned long)>:
c000f64c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f650:	8b 15 a4 93 02 c0    	mov    edx,DWORD PTR ds:0xc00293a4
c000f656:	89 c8                	mov    eax,ecx
c000f658:	83 e1 07             	and    ecx,0x7
c000f65b:	c1 e8 03             	shr    eax,0x3
c000f65e:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f662:	d3 f8                	sar    eax,cl
c000f664:	83 e0 01             	and    eax,0x1
c000f667:	c3                   	ret    

c000f668 <Phys::freePage(unsigned long)>:
c000f668:	53                   	push   ebx
c000f669:	83 ec 08             	sub    esp,0x8
c000f66c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f670:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f676:	76 57                	jbe    c000f6cf <Phys::freePage(unsigned long)+0x67>
c000f678:	c1 eb 0c             	shr    ebx,0xc
c000f67b:	53                   	push   ebx
c000f67c:	e8 cb ff ff ff       	call   c000f64c <Phys::getPageState(unsigned long)>
c000f681:	5a                   	pop    edx
c000f682:	84 c0                	test   al,al
c000f684:	74 5b                	je     c000f6e1 <Phys::freePage(unsigned long)+0x79>
c000f686:	a1 4c a4 02 c0       	mov    eax,ds:0xc002a44c
c000f68b:	48                   	dec    eax
c000f68c:	a3 4c a4 02 c0       	mov    ds:0xc002a44c,eax
c000f691:	8d 04 80             	lea    eax,[eax+eax*4]
c000f694:	8d 04 80             	lea    eax,[eax+eax*4]
c000f697:	c1 e0 02             	shl    eax,0x2
c000f69a:	99                   	cdq    
c000f69b:	f7 3d 50 a4 02 c0    	idiv   DWORD PTR ds:0xc002a450
c000f6a1:	39 05 48 a4 02 c0    	cmp    DWORD PTR ds:0xc002a448,eax
c000f6a7:	75 13                	jne    c000f6bc <Phys::freePage(unsigned long)+0x54>
c000f6a9:	83 ec 08             	sub    esp,0x8
c000f6ac:	6a 00                	push   0x0
c000f6ae:	53                   	push   ebx
c000f6af:	e8 66 ff ff ff       	call   c000f61a <Phys::setPageState(unsigned long, bool)>
c000f6b4:	83 c4 10             	add    esp,0x10
c000f6b7:	83 c4 08             	add    esp,0x8
c000f6ba:	5b                   	pop    ebx
c000f6bb:	c3                   	ret    
c000f6bc:	83 ec 0c             	sub    esp,0xc
c000f6bf:	a3 48 a4 02 c0       	mov    ds:0xc002a448,eax
c000f6c4:	50                   	push   eax
c000f6c5:	e8 00 0a 00 00       	call   c00100ca <VgaText::updateRAMUsageDisplay(int)>
c000f6ca:	83 c4 10             	add    esp,0x10
c000f6cd:	eb da                	jmp    c000f6a9 <Phys::freePage(unsigned long)+0x41>
c000f6cf:	68 00 10 00 00       	push   0x1000
c000f6d4:	53                   	push   ebx
c000f6d5:	e8 f8 fe ff ff       	call   c000f5d2 <Phys::freeDMA(unsigned long, unsigned long)>
c000f6da:	59                   	pop    ecx
c000f6db:	5b                   	pop    ebx
c000f6dc:	83 c4 08             	add    esp,0x8
c000f6df:	5b                   	pop    ebx
c000f6e0:	c3                   	ret    
c000f6e1:	c7 44 24 10 87 6b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026b87
c000f6e9:	83 c4 08             	add    esp,0x8
c000f6ec:	5b                   	pop    ebx
c000f6ed:	e9 fd 92 00 00       	jmp    c00189ef <Krnl::panic(char const*)>

c000f6f2 <Phys::allocatePage()>:
c000f6f2:	56                   	push   esi
c000f6f3:	53                   	push   ebx
c000f6f4:	51                   	push   ecx
c000f6f5:	8b 35 40 a4 02 c0    	mov    esi,DWORD PTR ds:0xc002a440
c000f6fb:	89 f3                	mov    ebx,esi
c000f6fd:	eb 0a                	jmp    c000f709 <Phys::allocatePage()+0x17>
c000f6ff:	89 1d 40 a4 02 c0    	mov    DWORD PTR ds:0xc002a440,ebx
c000f705:	39 de                	cmp    esi,ebx
c000f707:	74 24                	je     c000f72d <Phys::allocatePage()+0x3b>
c000f709:	53                   	push   ebx
c000f70a:	e8 3d ff ff ff       	call   c000f64c <Phys::getPageState(unsigned long)>
c000f70f:	5a                   	pop    edx
c000f710:	84 c0                	test   al,al
c000f712:	74 5a                	je     c000f76e <Phys::allocatePage()+0x7c>
c000f714:	43                   	inc    ebx
c000f715:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f71b:	75 e2                	jne    c000f6ff <Phys::allocatePage()+0xd>
c000f71d:	31 db                	xor    ebx,ebx
c000f71f:	c7 05 40 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a440,0x0
c000f729:	39 de                	cmp    esi,ebx
c000f72b:	75 dc                	jne    c000f709 <Phys::allocatePage()+0x17>
c000f72d:	83 ec 0c             	sub    esp,0xc
c000f730:	68 9d 6b 02 c0       	push   0xc0026b9d
c000f735:	e8 17 2b 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000f73a:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000f741:	e8 e9 fd ff ff       	call   c000f52f <Phys::allocateDMA(unsigned long)>
c000f746:	83 c4 10             	add    esp,0x10
c000f749:	85 c0                	test   eax,eax
c000f74b:	75 56                	jne    c000f7a3 <Phys::allocatePage()+0xb1>
c000f74d:	83 ec 0c             	sub    esp,0xc
c000f750:	68 ae 6b 02 c0       	push   0xc0026bae
c000f755:	e8 95 92 00 00       	call   c00189ef <Krnl::panic(char const*)>
c000f75a:	83 c4 10             	add    esp,0x10
c000f75d:	8b 1d 40 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a440
c000f763:	53                   	push   ebx
c000f764:	e8 e3 fe ff ff       	call   c000f64c <Phys::getPageState(unsigned long)>
c000f769:	5a                   	pop    edx
c000f76a:	84 c0                	test   al,al
c000f76c:	75 a6                	jne    c000f714 <Phys::allocatePage()+0x22>
c000f76e:	6a 01                	push   0x1
c000f770:	53                   	push   ebx
c000f771:	e8 a4 fe ff ff       	call   c000f61a <Phys::setPageState(unsigned long, bool)>
c000f776:	a1 4c a4 02 c0       	mov    eax,ds:0xc002a44c
c000f77b:	59                   	pop    ecx
c000f77c:	40                   	inc    eax
c000f77d:	5b                   	pop    ebx
c000f77e:	a3 4c a4 02 c0       	mov    ds:0xc002a44c,eax
c000f783:	8d 04 80             	lea    eax,[eax+eax*4]
c000f786:	8d 04 80             	lea    eax,[eax+eax*4]
c000f789:	c1 e0 02             	shl    eax,0x2
c000f78c:	99                   	cdq    
c000f78d:	f7 3d 50 a4 02 c0    	idiv   DWORD PTR ds:0xc002a450
c000f793:	39 05 48 a4 02 c0    	cmp    DWORD PTR ds:0xc002a448,eax
c000f799:	75 0c                	jne    c000f7a7 <Phys::allocatePage()+0xb5>
c000f79b:	a1 40 a4 02 c0       	mov    eax,ds:0xc002a440
c000f7a0:	c1 e0 0c             	shl    eax,0xc
c000f7a3:	5a                   	pop    edx
c000f7a4:	5b                   	pop    ebx
c000f7a5:	5e                   	pop    esi
c000f7a6:	c3                   	ret    
c000f7a7:	83 ec 0c             	sub    esp,0xc
c000f7aa:	a3 48 a4 02 c0       	mov    ds:0xc002a448,eax
c000f7af:	50                   	push   eax
c000f7b0:	e8 15 09 00 00       	call   c00100ca <VgaText::updateRAMUsageDisplay(int)>
c000f7b5:	83 c4 10             	add    esp,0x10
c000f7b8:	eb e1                	jmp    c000f79b <Phys::allocatePage()+0xa9>

c000f7ba <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000f7ba:	56                   	push   esi
c000f7bb:	53                   	push   ebx
c000f7bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f7c0:	39 1d 44 a4 02 c0    	cmp    DWORD PTR ds:0xc002a444,ebx
c000f7c6:	73 06                	jae    c000f7ce <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000f7c8:	89 1d 44 a4 02 c0    	mov    DWORD PTR ds:0xc002a444,ebx
c000f7ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7d2:	c1 eb 0c             	shr    ebx,0xc
c000f7d5:	c1 e8 0c             	shr    eax,0xc
c000f7d8:	39 d8                	cmp    eax,ebx
c000f7da:	73 13                	jae    c000f7ef <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000f7dc:	6a 00                	push   0x0
c000f7de:	8d 70 01             	lea    esi,[eax+0x1]
c000f7e1:	50                   	push   eax
c000f7e2:	e8 33 fe ff ff       	call   c000f61a <Phys::setPageState(unsigned long, bool)>
c000f7e7:	5a                   	pop    edx
c000f7e8:	89 f0                	mov    eax,esi
c000f7ea:	59                   	pop    ecx
c000f7eb:	39 f3                	cmp    ebx,esi
c000f7ed:	75 ed                	jne    c000f7dc <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000f7ef:	5b                   	pop    ebx
c000f7f0:	5e                   	pop    esi
c000f7f1:	c3                   	ret    

c000f7f2 <Phys::physicalMemorySetup(unsigned int)>:
c000f7f2:	55                   	push   ebp
c000f7f3:	57                   	push   edi
c000f7f4:	56                   	push   esi
c000f7f5:	53                   	push   ebx
c000f7f6:	31 db                	xor    ebx,ebx
c000f7f8:	83 ec 40             	sub    esp,0x40
c000f7fb:	6a 30                	push   0x30
c000f7fd:	6a 00                	push   0x0
c000f7ff:	68 60 a4 02 c0       	push   0xc002a460
c000f804:	e8 c5 0e ff ff       	call   c00006ce <memset>
c000f809:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f80d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f812:	05 00 10 00 00       	add    eax,0x1000
c000f817:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f81b:	83 c4 10             	add    esp,0x10
c000f81e:	83 ec 08             	sub    esp,0x8
c000f821:	6a 01                	push   0x1
c000f823:	53                   	push   ebx
c000f824:	43                   	inc    ebx
c000f825:	e8 f0 fd ff ff       	call   c000f61a <Phys::setPageState(unsigned long, bool)>
c000f82a:	83 c4 10             	add    esp,0x10
c000f82d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f833:	75 e9                	jne    c000f81e <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000f835:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000f83c:	66 85 c0             	test   ax,ax
c000f83f:	0f 84 8e 01 00 00    	je     c000f9d3 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000f845:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f849:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000f851:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f855:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000f85a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f85e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f866:	eb 15                	jmp    c000f87d <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000f868:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000f86c:	83 c3 18             	add    ebx,0x18
c000f86f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f873:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000f877:	0f 84 66 01 00 00    	je     c000f9e3 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000f87d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000f880:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f883:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000f886:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f88a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f88e:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f890:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000f893:	01 f0                	add    eax,esi
c000f895:	55                   	push   ebp
c000f896:	11 fa                	adc    edx,edi
c000f898:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f89c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f8a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f8a4:	56                   	push   esi
c000f8a5:	68 e8 6b 02 c0       	push   0xc0026be8
c000f8aa:	e8 a2 29 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000f8af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f8b3:	83 c4 10             	add    esp,0x10
c000f8b6:	09 f8                	or     eax,edi
c000f8b8:	0f 85 25 01 00 00    	jne    c000f9e3 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000f8be:	4d                   	dec    ebp
c000f8bf:	75 a7                	jne    c000f868 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f8c1:	ba 00 00 08 00       	mov    edx,0x80000
c000f8c6:	89 c1                	mov    ecx,eax
c000f8c8:	39 f2                	cmp    edx,esi
c000f8ca:	19 f9                	sbb    ecx,edi
c000f8cc:	0f 82 a7 00 00 00    	jb     c000f979 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000f8d2:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000f8d6:	89 c1                	mov    ecx,eax
c000f8d8:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000f8dc:	0f 83 97 00 00 00    	jae    c000f979 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000f8e2:	ba 00 00 0a 00       	mov    edx,0xa0000
c000f8e7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f8eb:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f8ef:	39 fa                	cmp    edx,edi
c000f8f1:	19 e8                	sbb    eax,ebp
c000f8f3:	0f 82 14 01 00 00    	jb     c000fa0d <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000f8f9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f8fd:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f901:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000f907:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f90c:	83 d5 ff             	adc    ebp,0xffffffff
c000f90f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000f913:	31 c0                	xor    eax,eax
c000f915:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000f919:	39 fa                	cmp    edx,edi
c000f91b:	89 c1                	mov    ecx,eax
c000f91d:	19 e9                	sbb    ecx,ebp
c000f91f:	0f 83 43 ff ff ff    	jae    c000f868 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f925:	be 00 00 08 00       	mov    esi,0x80000
c000f92a:	50                   	push   eax
c000f92b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f92f:	57                   	push   edi
c000f930:	56                   	push   esi
c000f931:	68 0c 6c 02 c0       	push   0xc0026c0c
c000f936:	e8 16 29 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000f93b:	5a                   	pop    edx
c000f93c:	59                   	pop    ecx
c000f93d:	57                   	push   edi
c000f93e:	56                   	push   esi
c000f93f:	e8 76 fe ff ff       	call   c000f7ba <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000f944:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f948:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f94c:	83 c4 0c             	add    esp,0xc
c000f94f:	0f ac d0 0c          	shrd   eax,edx,0xc
c000f953:	03 05 50 a4 02 c0    	add    eax,DWORD PTR ds:0xc002a450
c000f959:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f960:	a3 50 a4 02 c0       	mov    ds:0xc002a450,eax
c000f965:	52                   	push   edx
c000f966:	50                   	push   eax
c000f967:	68 ca 6b 02 c0       	push   0xc0026bca
c000f96c:	e8 e0 28 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000f971:	83 c4 10             	add    esp,0x10
c000f974:	e9 ef fe ff ff       	jmp    c000f868 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f979:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000f97d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f981:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f985:	39 ea                	cmp    edx,ebp
c000f987:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000f98b:	0f 82 d7 fe ff ff    	jb     c000f868 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f991:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f996:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000f99a:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000f99e:	0f 83 c4 fe ff ff    	jae    c000f868 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f9a4:	39 ee                	cmp    esi,ebp
c000f9a6:	89 f8                	mov    eax,edi
c000f9a8:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000f9ac:	0f 83 78 ff ff ff    	jae    c000f92a <Phys::physicalMemorySetup(unsigned int)+0x138>
c000f9b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f9b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f9ba:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000f9be:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000f9c2:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000f9c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f9ca:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f9ce:	e9 57 ff ff ff       	jmp    c000f92a <Phys::physicalMemorySetup(unsigned int)+0x138>
c000f9d3:	83 ec 0c             	sub    esp,0xc
c000f9d6:	68 bc 6b 02 c0       	push   0xc0026bbc
c000f9db:	e8 0f 90 00 00       	call   c00189ef <Krnl::panic(char const*)>
c000f9e0:	83 c4 10             	add    esp,0x10
c000f9e3:	bb 40 01 00 00       	mov    ebx,0x140
c000f9e8:	83 ec 08             	sub    esp,0x8
c000f9eb:	6a 00                	push   0x0
c000f9ed:	53                   	push   ebx
c000f9ee:	43                   	inc    ebx
c000f9ef:	e8 26 fc ff ff       	call   c000f61a <Phys::setPageState(unsigned long, bool)>
c000f9f4:	ff 05 50 a4 02 c0    	inc    DWORD PTR ds:0xc002a450
c000f9fa:	83 c4 10             	add    esp,0x10
c000f9fd:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fa03:	75 e3                	jne    c000f9e8 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000fa05:	83 c4 3c             	add    esp,0x3c
c000fa08:	5b                   	pop    ebx
c000fa09:	5e                   	pop    esi
c000fa0a:	5f                   	pop    edi
c000fa0b:	5d                   	pop    ebp
c000fa0c:	c3                   	ret    
c000fa0d:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fa15:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fa1d:	e9 d7 fe ff ff       	jmp    c000f8f9 <Phys::physicalMemorySetup(unsigned int)+0x107>

c000fa22 <Pipe::isAtty()>:
c000fa22:	31 c0                	xor    eax,eax
c000fa24:	c3                   	ret    
c000fa25:	90                   	nop

c000fa26 <Pipe::~Pipe()>:
c000fa26:	83 ec 0c             	sub    esp,0xc
c000fa29:	ba 78 6c 02 c0       	mov    edx,0xc0026c78
c000fa2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa32:	89 10                	mov    DWORD PTR [eax],edx
c000fa34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa38:	83 ec 0c             	sub    esp,0xc
c000fa3b:	50                   	push   eax
c000fa3c:	e8 dd 15 00 00       	call   c001101e <UnixFile::~UnixFile()>
c000fa41:	83 c4 10             	add    esp,0x10
c000fa44:	90                   	nop
c000fa45:	83 c4 0c             	add    esp,0xc
c000fa48:	c3                   	ret    
c000fa49:	90                   	nop

c000fa4a <Pipe::~Pipe()>:
c000fa4a:	83 ec 0c             	sub    esp,0xc
c000fa4d:	83 ec 0c             	sub    esp,0xc
c000fa50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa54:	e8 cd ff ff ff       	call   c000fa26 <Pipe::~Pipe()>
c000fa59:	83 c4 10             	add    esp,0x10
c000fa5c:	83 ec 08             	sub    esp,0x8
c000fa5f:	6a 20                	push   0x20
c000fa61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa65:	e8 07 27 00 00       	call   c0012171 <operator delete(void*, unsigned long)>
c000fa6a:	83 c4 10             	add    esp,0x10
c000fa6d:	83 c4 0c             	add    esp,0xc
c000fa70:	c3                   	ret    
c000fa71:	90                   	nop

c000fa72 <Pipe::read(unsigned long long, void*, int*)>:
c000fa72:	55                   	push   ebp
c000fa73:	57                   	push   edi
c000fa74:	56                   	push   esi
c000fa75:	53                   	push   ebx
c000fa76:	83 ec 1c             	sub    esp,0x1c
c000fa79:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fa7d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fa81:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fa85:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fa88:	89 c8                	mov    eax,ecx
c000fa8a:	99                   	cdq    
c000fa8b:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fa8f:	74 19                	je     c000faaa <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fa91:	39 f9                	cmp    ecx,edi
c000fa93:	89 d1                	mov    ecx,edx
c000fa95:	19 f1                	sbb    ecx,esi
c000fa97:	73 11                	jae    c000faaa <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fa99:	e8 a4 be 00 00       	call   c001b942 <lockScheduler()>
c000fa9e:	e8 d3 c1 00 00       	call   c001bc76 <schedule()>
c000faa3:	e8 9c be 00 00       	call   c001b944 <unlockScheduler()>
c000faa8:	eb db                	jmp    c000fa85 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000faaa:	39 f8                	cmp    eax,edi
c000faac:	89 d1                	mov    ecx,edx
c000faae:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000fab2:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000fab6:	19 f1                	sbb    ecx,esi
c000fab8:	73 08                	jae    c000fac2 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000faba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fabe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fac2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fac5:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fac8:	29 c6                	sub    esi,eax
c000faca:	89 f1                	mov    ecx,esi
c000facc:	c1 f9 1f             	sar    ecx,0x1f
c000facf:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000fad3:	89 ca                	mov    edx,ecx
c000fad5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fad9:	19 d1                	sbb    ecx,edx
c000fadb:	73 04                	jae    c000fae1 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000fadd:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000fae1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fae5:	89 fd                	mov    ebp,edi
c000fae7:	29 f5                	sub    ebp,esi
c000fae9:	85 f6                	test   esi,esi
c000faeb:	74 12                	je     c000faff <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000faed:	52                   	push   edx
c000faee:	56                   	push   esi
c000faef:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000faf2:	50                   	push   eax
c000faf3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000faf7:	e8 9c 0b ff ff       	call   c0000698 <memcpy>
c000fafc:	83 c4 10             	add    esp,0x10
c000faff:	85 ed                	test   ebp,ebp
c000fb01:	74 12                	je     c000fb15 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000fb03:	50                   	push   eax
c000fb04:	55                   	push   ebp
c000fb05:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000fb08:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000fb0c:	56                   	push   esi
c000fb0d:	e8 86 0b ff ff       	call   c0000698 <memcpy>
c000fb12:	83 c4 10             	add    esp,0x10
c000fb15:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000fb18:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fb1b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fb1e:	99                   	cdq    
c000fb1f:	89 f7                	mov    edi,esi
c000fb21:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000fb25:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000fb29:	c1 ff 1f             	sar    edi,0x1f
c000fb2c:	57                   	push   edi
c000fb2d:	56                   	push   esi
c000fb2e:	52                   	push   edx
c000fb2f:	50                   	push   eax
c000fb30:	e8 27 39 01 00       	call   c002345c <__umoddi3>
c000fb35:	83 c4 10             	add    esp,0x10
c000fb38:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fb3b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fb40:	75 10                	jne    c000fb52 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000fb42:	83 ec 0c             	sub    esp,0xc
c000fb45:	68 35 6c 02 c0       	push   0xc0026c35
c000fb4a:	e8 a0 8e 00 00       	call   c00189ef <Krnl::panic(char const*)>
c000fb4f:	83 c4 10             	add    esp,0x10
c000fb52:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fb5a:	89 10                	mov    DWORD PTR [eax],edx
c000fb5c:	83 c4 1c             	add    esp,0x1c
c000fb5f:	31 c0                	xor    eax,eax
c000fb61:	5b                   	pop    ebx
c000fb62:	5e                   	pop    esi
c000fb63:	5f                   	pop    edi
c000fb64:	5d                   	pop    ebp
c000fb65:	c3                   	ret    

c000fb66 <Pipe::write(unsigned long long, void*, int*)>:
c000fb66:	55                   	push   ebp
c000fb67:	57                   	push   edi
c000fb68:	56                   	push   esi
c000fb69:	53                   	push   ebx
c000fb6a:	83 ec 1c             	sub    esp,0x1c
c000fb6d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fb71:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fb75:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fb79:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb7c:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000fb7f:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000fb82:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fb86:	89 de                	mov    esi,ebx
c000fb88:	89 df                	mov    edi,ebx
c000fb8a:	c1 ff 1f             	sar    edi,0x1f
c000fb8d:	01 c6                	add    esi,eax
c000fb8f:	89 c8                	mov    eax,ecx
c000fb91:	11 d7                	adc    edi,edx
c000fb93:	99                   	cdq    
c000fb94:	39 f1                	cmp    ecx,esi
c000fb96:	89 d0                	mov    eax,edx
c000fb98:	19 f8                	sbb    eax,edi
c000fb9a:	b8 01 00 00 00       	mov    eax,0x1
c000fb9f:	0f 82 80 00 00 00    	jb     c000fc25 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000fba5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fba8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000fbab:	01 d8                	add    eax,ebx
c000fbad:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000fbb1:	99                   	cdq    
c000fbb2:	f7 f9                	idiv   ecx
c000fbb4:	29 d1                	sub    ecx,edx
c000fbb6:	89 d7                	mov    edi,edx
c000fbb8:	89 c8                	mov    eax,ecx
c000fbba:	99                   	cdq    
c000fbbb:	39 ce                	cmp    esi,ecx
c000fbbd:	19 d3                	sbb    ebx,edx
c000fbbf:	bb 00 00 00 00       	mov    ebx,0x0
c000fbc4:	72 04                	jb     c000fbca <Pipe::write(unsigned long long, void*, int*)+0x64>
c000fbc6:	89 f3                	mov    ebx,esi
c000fbc8:	29 cb                	sub    ebx,ecx
c000fbca:	89 f1                	mov    ecx,esi
c000fbcc:	29 d9                	sub    ecx,ebx
c000fbce:	74 1a                	je     c000fbea <Pipe::write(unsigned long long, void*, int*)+0x84>
c000fbd0:	52                   	push   edx
c000fbd1:	51                   	push   ecx
c000fbd2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000fbd6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000fbda:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000fbdd:	57                   	push   edi
c000fbde:	e8 b5 0a ff ff       	call   c0000698 <memcpy>
c000fbe3:	83 c4 10             	add    esp,0x10
c000fbe6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fbea:	85 db                	test   ebx,ebx
c000fbec:	74 12                	je     c000fc00 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000fbee:	50                   	push   eax
c000fbef:	53                   	push   ebx
c000fbf0:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000fbf4:	51                   	push   ecx
c000fbf5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000fbf8:	e8 9b 0a ff ff       	call   c0000698 <memcpy>
c000fbfd:	83 c4 10             	add    esp,0x10
c000fc00:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000fc03:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fc08:	75 10                	jne    c000fc1a <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000fc0a:	83 ec 0c             	sub    esp,0xc
c000fc0d:	68 51 6c 02 c0       	push   0xc0026c51
c000fc12:	e8 d8 8d 00 00       	call   c00189ef <Krnl::panic(char const*)>
c000fc17:	83 c4 10             	add    esp,0x10
c000fc1a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc1e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000fc21:	89 38                	mov    DWORD PTR [eax],edi
c000fc23:	31 c0                	xor    eax,eax
c000fc25:	83 c4 1c             	add    esp,0x1c
c000fc28:	5b                   	pop    ebx
c000fc29:	5e                   	pop    esi
c000fc2a:	5f                   	pop    edi
c000fc2b:	5d                   	pop    ebp
c000fc2c:	c3                   	ret    
c000fc2d:	90                   	nop

c000fc2e <Pipe::Pipe(int)>:
c000fc2e:	83 ec 0c             	sub    esp,0xc
c000fc31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc35:	83 ec 08             	sub    esp,0x8
c000fc38:	6a 00                	push   0x0
c000fc3a:	50                   	push   eax
c000fc3b:	e8 3c 12 00 00       	call   c0010e7c <UnixFile::UnixFile(int)>
c000fc40:	83 c4 10             	add    esp,0x10
c000fc43:	ba 78 6c 02 c0       	mov    edx,0xc0026c78
c000fc48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc4c:	89 10                	mov    DWORD PTR [eax],edx
c000fc4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc52:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000fc56:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000fc59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc5d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000fc64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc68:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000fc6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc73:	83 ec 0c             	sub    esp,0xc
c000fc76:	50                   	push   eax
c000fc77:	e8 cc f4 ff ff       	call   c000f148 <malloc>
c000fc7c:	83 c4 10             	add    esp,0x10
c000fc7f:	89 c2                	mov    edx,eax
c000fc81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc85:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fc88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc8c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000fc90:	90                   	nop
c000fc91:	83 c4 0c             	add    esp,0xc
c000fc94:	c3                   	ret    
c000fc95:	90                   	nop

c000fc96 <VgaText::isAtty()>:
c000fc96:	b0 01                	mov    al,0x1
c000fc98:	c3                   	ret    
c000fc99:	90                   	nop

c000fc9a <VgaText::~VgaText()>:
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	ba 34 6d 02 c0       	mov    edx,0xc0026d34
c000fca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fca6:	89 10                	mov    DWORD PTR [eax],edx
c000fca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcac:	83 ec 0c             	sub    esp,0xc
c000fcaf:	50                   	push   eax
c000fcb0:	e8 69 13 00 00       	call   c001101e <UnixFile::~UnixFile()>
c000fcb5:	83 c4 10             	add    esp,0x10
c000fcb8:	90                   	nop
c000fcb9:	83 c4 0c             	add    esp,0xc
c000fcbc:	c3                   	ret    
c000fcbd:	90                   	nop

c000fcbe <VgaText::~VgaText()>:
c000fcbe:	83 ec 0c             	sub    esp,0xc
c000fcc1:	83 ec 0c             	sub    esp,0xc
c000fcc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcc8:	e8 cd ff ff ff       	call   c000fc9a <VgaText::~VgaText()>
c000fccd:	83 c4 10             	add    esp,0x10
c000fcd0:	83 ec 08             	sub    esp,0x8
c000fcd3:	68 60 12 00 00       	push   0x1260
c000fcd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcdc:	e8 90 24 00 00       	call   c0012171 <operator delete(void*, unsigned long)>
c000fce1:	83 c4 10             	add    esp,0x10
c000fce4:	83 c4 0c             	add    esp,0xc
c000fce7:	c3                   	ret    

c000fce8 <VgaText::read(unsigned long long, void*, int*)>:
c000fce8:	83 ec 10             	sub    esp,0x10
c000fceb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fcef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fcf3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcf7:	e8 26 57 00 00       	call   c0015422 <readKeyboard(VgaText*, char*, unsigned long)>
c000fcfc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fd00:	89 02                	mov    DWORD PTR [edx],eax
c000fd02:	31 c0                	xor    eax,eax
c000fd04:	83 c4 1c             	add    esp,0x1c
c000fd07:	c3                   	ret    

c000fd08 <setTerminalScrollLock(bool)>:
c000fd08:	c3                   	ret    

c000fd09 <addToTerminalCycle(VgaText*)>:
c000fd09:	8b 15 c0 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a4c0
c000fd0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd13:	85 d2                	test   edx,edx
c000fd15:	75 0c                	jne    c000fd23 <addToTerminalCycle(VgaText*)+0x1a>
c000fd17:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000fd1d:	a3 c0 a4 02 c0       	mov    ds:0xc002a4c0,eax
c000fd22:	c3                   	ret    
c000fd23:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000fd29:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000fd2f:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000fd35:	c3                   	ret    

c000fd36 <installVgaTextImplementation()>:
c000fd36:	83 ec 10             	sub    esp,0x10
c000fd39:	6a 20                	push   0x20
c000fd3b:	6a 00                	push   0x0
c000fd3d:	68 a0 a4 02 c0       	push   0xc002a4a0
c000fd42:	e8 87 09 ff ff       	call   c00006ce <memset>
c000fd47:	83 c4 1c             	add    esp,0x1c
c000fd4a:	c3                   	ret    

c000fd4b <scrollTerminalScrollLock(int)>:
c000fd4b:	c3                   	ret    

c000fd4c <VgaText::load()>:
c000fd4c:	53                   	push   ebx
c000fd4d:	31 c0                	xor    eax,eax
c000fd4f:	83 ec 58             	sub    esp,0x58
c000fd52:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000fd56:	89 e2                	mov    edx,esp
c000fd58:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000fd5c:	40                   	inc    eax
c000fd5d:	83 f8 50             	cmp    eax,0x50
c000fd60:	75 f6                	jne    c000fd58 <VgaText::load()+0xc>
c000fd62:	31 c0                	xor    eax,eax
c000fd64:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000fd6b:	84 c9                	test   cl,cl
c000fd6d:	74 06                	je     c000fd75 <VgaText::load()+0x29>
c000fd6f:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000fd72:	40                   	inc    eax
c000fd73:	eb ef                	jmp    c000fd64 <VgaText::load()+0x18>
c000fd75:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000fd7b:	85 c0                	test   eax,eax
c000fd7d:	74 09                	je     c000fd88 <VgaText::load()+0x3c>
c000fd7f:	51                   	push   ecx
c000fd80:	51                   	push   ecx
c000fd81:	52                   	push   edx
c000fd82:	53                   	push   ebx
c000fd83:	ff d0                	call   eax
c000fd85:	83 c4 10             	add    esp,0x10
c000fd88:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000fd8e:	85 c0                	test   eax,eax
c000fd90:	74 09                	je     c000fd9b <VgaText::load()+0x4f>
c000fd92:	83 ec 0c             	sub    esp,0xc
c000fd95:	53                   	push   ebx
c000fd96:	ff d0                	call   eax
c000fd98:	83 c4 10             	add    esp,0x10
c000fd9b:	83 c4 58             	add    esp,0x58
c000fd9e:	5b                   	pop    ebx
c000fd9f:	c3                   	ret    

c000fda0 <VgaText::updateCursor()>:
c000fda0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fda4:	39 05 c4 a4 02 c0    	cmp    DWORD PTR ds:0xc002a4c4,eax
c000fdaa:	75 0c                	jne    c000fdb8 <VgaText::updateCursor()+0x18>
c000fdac:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000fdb2:	85 c0                	test   eax,eax
c000fdb4:	74 02                	je     c000fdb8 <VgaText::updateCursor()+0x18>
c000fdb6:	ff e0                	jmp    eax
c000fdb8:	c3                   	ret    
c000fdb9:	90                   	nop

c000fdba <VgaText::showCursor(bool)>:
c000fdba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdbe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fdc2:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000fdc8:	c3                   	ret    
c000fdc9:	90                   	nop

c000fdca <VgaText::disableBlink(bool)>:
c000fdca:	56                   	push   esi
c000fdcb:	53                   	push   ebx
c000fdcc:	51                   	push   ecx
c000fdcd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fdd1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fdd5:	39 1d c4 a4 02 c0    	cmp    DWORD PTR ds:0xc002a4c4,ebx
c000fddb:	75 18                	jne    c000fdf5 <VgaText::disableBlink(bool)+0x2b>
c000fddd:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000fde3:	85 c0                	test   eax,eax
c000fde5:	74 0e                	je     c000fdf5 <VgaText::disableBlink(bool)+0x2b>
c000fde7:	89 f1                	mov    ecx,esi
c000fde9:	52                   	push   edx
c000fdea:	52                   	push   edx
c000fdeb:	0f b6 d1             	movzx  edx,cl
c000fdee:	52                   	push   edx
c000fdef:	53                   	push   ebx
c000fdf0:	ff d0                	call   eax
c000fdf2:	83 c4 10             	add    esp,0x10
c000fdf5:	89 f0                	mov    eax,esi
c000fdf7:	83 f0 01             	xor    eax,0x1
c000fdfa:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000fe00:	58                   	pop    eax
c000fe01:	5b                   	pop    ebx
c000fe02:	5e                   	pop    esi
c000fe03:	c3                   	ret    

c000fe04 <VgaText::doANSI_SGR(int)>:
c000fe04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe0c:	85 d2                	test   edx,edx
c000fe0e:	75 14                	jne    c000fe24 <VgaText::doANSI_SGR(int)+0x20>
c000fe10:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000fe16:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fe1c:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000fe22:	eb 65                	jmp    c000fe89 <VgaText::doANSI_SGR(int)+0x85>
c000fe24:	83 fa 07             	cmp    edx,0x7
c000fe27:	75 14                	jne    c000fe3d <VgaText::doANSI_SGR(int)+0x39>
c000fe29:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000fe2f:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000fe35:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000fe3b:	eb 4c                	jmp    c000fe89 <VgaText::doANSI_SGR(int)+0x85>
c000fe3d:	83 fa 1b             	cmp    edx,0x1b
c000fe40:	74 ce                	je     c000fe10 <VgaText::doANSI_SGR(int)+0xc>
c000fe42:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000fe45:	83 f9 07             	cmp    ecx,0x7
c000fe48:	77 09                	ja     c000fe53 <VgaText::doANSI_SGR(int)+0x4f>
c000fe4a:	8b 14 8d e0 93 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd6c20]
c000fe51:	eb 20                	jmp    c000fe73 <VgaText::doANSI_SGR(int)+0x6f>
c000fe53:	8d 4a d8             	lea    ecx,[edx-0x28]
c000fe56:	83 f9 07             	cmp    ecx,0x7
c000fe59:	77 09                	ja     c000fe64 <VgaText::doANSI_SGR(int)+0x60>
c000fe5b:	8b 14 8d e0 93 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd6c20]
c000fe62:	eb 25                	jmp    c000fe89 <VgaText::doANSI_SGR(int)+0x85>
c000fe64:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000fe67:	83 f9 07             	cmp    ecx,0x7
c000fe6a:	77 0e                	ja     c000fe7a <VgaText::doANSI_SGR(int)+0x76>
c000fe6c:	8b 14 95 98 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6d68]
c000fe73:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fe79:	c3                   	ret    
c000fe7a:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000fe7d:	83 f9 07             	cmp    ecx,0x7
c000fe80:	77 0d                	ja     c000fe8f <VgaText::doANSI_SGR(int)+0x8b>
c000fe82:	8b 14 95 70 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6d90]
c000fe89:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000fe8f:	c3                   	ret    

c000fe90 <VgaText::setDefaultBgColour(VgaColour)>:
c000fe90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe98:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000fe9e:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000fea4:	c3                   	ret    
c000fea5:	90                   	nop

c000fea6 <VgaText::setDefaultFgColour(VgaColour)>:
c000fea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000feaa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000feae:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000feb4:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000feba:	c3                   	ret    
c000febb:	90                   	nop

c000febc <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000febc:	53                   	push   ebx
c000febd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fec1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fec5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fec9:	51                   	push   ecx
c000feca:	e8 c1 ff ff ff       	call   c000fe90 <VgaText::setDefaultBgColour(VgaColour)>
c000fecf:	58                   	pop    eax
c000fed0:	5a                   	pop    edx
c000fed1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fed5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000fed9:	5b                   	pop    ebx
c000feda:	eb ca                	jmp    c000fea6 <VgaText::setDefaultFgColour(VgaColour)>

c000fedc <VgaText::combineColours(unsigned char, unsigned char)>:
c000fedc:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000fee0:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000fee5:	83 e0 0f             	and    eax,0xf
c000fee8:	c1 e2 04             	shl    edx,0x4
c000feeb:	09 d0                	or     eax,edx
c000feed:	c3                   	ret    

c000feee <VgaText::scrollScreen()>:
c000feee:	57                   	push   edi
c000feef:	56                   	push   esi
c000fef0:	be 01 00 00 00       	mov    esi,0x1
c000fef5:	53                   	push   ebx
c000fef6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fefa:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000ff00:	31 ff                	xor    edi,edi
c000ff02:	01 d9                	add    ecx,ebx
c000ff04:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000ff07:	83 fe 17             	cmp    esi,0x17
c000ff0a:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000ff10:	75 28                	jne    c000ff3a <VgaText::scrollScreen()+0x4c>
c000ff12:	f7 c7 01 00 00 00    	test   edi,0x1
c000ff18:	74 1c                	je     c000ff36 <VgaText::scrollScreen()+0x48>
c000ff1a:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000ff21:	50                   	push   eax
c000ff22:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000ff29:	50                   	push   eax
c000ff2a:	e8 ad ff ff ff       	call   c000fedc <VgaText::combineColours(unsigned char, unsigned char)>
c000ff2f:	5a                   	pop    edx
c000ff30:	5a                   	pop    edx
c000ff31:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000ff34:	eb 04                	jmp    c000ff3a <VgaText::scrollScreen()+0x4c>
c000ff36:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000ff3a:	47                   	inc    edi
c000ff3b:	41                   	inc    ecx
c000ff3c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ff42:	75 c0                	jne    c000ff04 <VgaText::scrollScreen()+0x16>
c000ff44:	46                   	inc    esi
c000ff45:	83 fe 18             	cmp    esi,0x18
c000ff48:	75 b0                	jne    c000fefa <VgaText::scrollScreen()+0xc>
c000ff4a:	39 1d c4 a4 02 c0    	cmp    DWORD PTR ds:0xc002a4c4,ebx
c000ff50:	75 24                	jne    c000ff76 <VgaText::scrollScreen()+0x88>
c000ff52:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000ff59:	74 08                	je     c000ff63 <VgaText::scrollScreen()+0x75>
c000ff5b:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000ff61:	eb 13                	jmp    c000ff76 <VgaText::scrollScreen()+0x88>
c000ff63:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000ff69:	85 c0                	test   eax,eax
c000ff6b:	74 09                	je     c000ff76 <VgaText::scrollScreen()+0x88>
c000ff6d:	83 ec 0c             	sub    esp,0xc
c000ff70:	53                   	push   ebx
c000ff71:	ff d0                	call   eax
c000ff73:	83 c4 10             	add    esp,0x10
c000ff76:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ff7a:	5b                   	pop    ebx
c000ff7b:	5e                   	pop    esi
c000ff7c:	5f                   	pop    edi
c000ff7d:	e9 1e fe ff ff       	jmp    c000fda0 <VgaText::updateCursor()>

c000ff82 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ff82:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ff87:	c1 e0 08             	shl    eax,0x8
c000ff8a:	89 c2                	mov    edx,eax
c000ff8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ff91:	09 d0                	or     eax,edx
c000ff93:	c3                   	ret    

c000ff94 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ff94:	53                   	push   ebx
c000ff95:	83 ec 08             	sub    esp,0x8
c000ff98:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ff9c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ffa1:	50                   	push   eax
c000ffa2:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ffa7:	50                   	push   eax
c000ffa8:	e8 2f ff ff ff       	call   c000fedc <VgaText::combineColours(unsigned char, unsigned char)>
c000ffad:	5a                   	pop    edx
c000ffae:	0f b6 c0             	movzx  eax,al
c000ffb1:	5b                   	pop    ebx
c000ffb2:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ffb7:	50                   	push   eax
c000ffb8:	53                   	push   ebx
c000ffb9:	e8 c4 ff ff ff       	call   c000ff82 <VgaText::combineCharAndColour(char, unsigned char)>
c000ffbe:	5a                   	pop    edx
c000ffbf:	5a                   	pop    edx
c000ffc0:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ffc6:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ffca:	0f b7 d2             	movzx  edx,dx
c000ffcd:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000ffd2:	39 0d c4 a4 02 c0    	cmp    DWORD PTR ds:0xc002a4c4,ecx
c000ffd8:	75 14                	jne    c000ffee <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ffda:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000ffe0:	85 c0                	test   eax,eax
c000ffe2:	74 0a                	je     c000ffee <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ffe4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ffe8:	83 c4 08             	add    esp,0x8
c000ffeb:	5b                   	pop    ebx
c000ffec:	ff e0                	jmp    eax
c000ffee:	83 c4 08             	add    esp,0x8
c000fff1:	5b                   	pop    ebx
c000fff2:	c3                   	ret    
c000fff3:	90                   	nop

c000fff4 <VgaText::getCursorX()>:
c000fff4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fff8:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000fffe:	c3                   	ret    
c000ffff:	90                   	nop

c0010000 <VgaText::getCursorY()>:
c0010000:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010004:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c001000a:	c3                   	ret    
c001000b:	90                   	nop

c001000c <VgaText::setCursor(int, int)>:
c001000c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010010:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010014:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c001001a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001001e:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010024:	e9 77 fd ff ff       	jmp    c000fda0 <VgaText::updateCursor()>
c0010029:	90                   	nop

c001002a <VgaText::setCursorX(int)>:
c001002a:	83 ec 10             	sub    esp,0x10
c001002d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010031:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010037:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001003b:	50                   	push   eax
c001003c:	e8 cb ff ff ff       	call   c001000c <VgaText::setCursor(int, int)>
c0010041:	83 c4 1c             	add    esp,0x1c
c0010044:	c3                   	ret    
c0010045:	90                   	nop

c0010046 <VgaText::setCursorY(int)>:
c0010046:	83 ec 10             	sub    esp,0x10
c0010049:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001004d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010051:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010057:	50                   	push   eax
c0010058:	e8 af ff ff ff       	call   c001000c <VgaText::setCursor(int, int)>
c001005d:	83 c4 1c             	add    esp,0x1c
c0010060:	c3                   	ret    
c0010061:	90                   	nop

c0010062 <VgaText::incrementCursor(bool)>:
c0010062:	56                   	push   esi
c0010063:	53                   	push   ebx
c0010064:	51                   	push   ecx
c0010065:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010069:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001006d:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010073:	40                   	inc    eax
c0010074:	83 f8 50             	cmp    eax,0x50
c0010077:	74 08                	je     c0010081 <VgaText::incrementCursor(bool)+0x1f>
c0010079:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c001007f:	eb 33                	jmp    c00100b4 <VgaText::incrementCursor(bool)+0x52>
c0010081:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010087:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010091:	8d 50 01             	lea    edx,[eax+0x1]
c0010094:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001009a:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00100a0:	75 12                	jne    c00100b4 <VgaText::incrementCursor(bool)+0x52>
c00100a2:	83 ec 0c             	sub    esp,0xc
c00100a5:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00100ab:	53                   	push   ebx
c00100ac:	e8 3d fe ff ff       	call   c000feee <VgaText::scrollScreen()>
c00100b1:	83 c4 10             	add    esp,0x10
c00100b4:	89 f0                	mov    eax,esi
c00100b6:	84 c0                	test   al,al
c00100b8:	74 0c                	je     c00100c6 <VgaText::incrementCursor(bool)+0x64>
c00100ba:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00100be:	5a                   	pop    edx
c00100bf:	5b                   	pop    ebx
c00100c0:	5e                   	pop    esi
c00100c1:	e9 da fc ff ff       	jmp    c000fda0 <VgaText::updateCursor()>
c00100c6:	58                   	pop    eax
c00100c7:	5b                   	pop    ebx
c00100c8:	5e                   	pop    esi
c00100c9:	c3                   	ret    

c00100ca <VgaText::updateRAMUsageDisplay(int)>:
c00100ca:	53                   	push   ebx
c00100cb:	bb 0a 00 00 00       	mov    ebx,0xa
c00100d0:	6a 0f                	push   0xf
c00100d2:	6a 00                	push   0x0
c00100d4:	e8 03 fe ff ff       	call   c000fedc <VgaText::combineColours(unsigned char, unsigned char)>
c00100d9:	5a                   	pop    edx
c00100da:	59                   	pop    ecx
c00100db:	0f b6 c8             	movzx  ecx,al
c00100de:	51                   	push   ecx
c00100df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100e3:	99                   	cdq    
c00100e4:	f7 fb                	idiv   ebx
c00100e6:	89 d3                	mov    ebx,edx
c00100e8:	83 c0 30             	add    eax,0x30
c00100eb:	83 c3 30             	add    ebx,0x30
c00100ee:	0f be c0             	movsx  eax,al
c00100f1:	0f b6 db             	movzx  ebx,bl
c00100f4:	50                   	push   eax
c00100f5:	e8 88 fe ff ff       	call   c000ff82 <VgaText::combineCharAndColour(char, unsigned char)>
c00100fa:	5a                   	pop    edx
c00100fb:	5a                   	pop    edx
c00100fc:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c0010102:	51                   	push   ecx
c0010103:	53                   	push   ebx
c0010104:	e8 79 fe ff ff       	call   c000ff82 <VgaText::combineCharAndColour(char, unsigned char)>
c0010109:	5b                   	pop    ebx
c001010a:	5a                   	pop    edx
c001010b:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c0010111:	51                   	push   ecx
c0010112:	6a 25                	push   0x25
c0010114:	e8 69 fe ff ff       	call   c000ff82 <VgaText::combineCharAndColour(char, unsigned char)>
c0010119:	59                   	pop    ecx
c001011a:	5b                   	pop    ebx
c001011b:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c0010121:	5b                   	pop    ebx
c0010122:	c3                   	ret    
c0010123:	90                   	nop

c0010124 <VgaText::updateDiskUsage()>:
c0010124:	55                   	push   ebp
c0010125:	bd 10 27 00 00       	mov    ebp,0x2710
c001012a:	57                   	push   edi
c001012b:	56                   	push   esi
c001012c:	53                   	push   ebx
c001012d:	6a 0f                	push   0xf
c001012f:	6a 00                	push   0x0
c0010131:	e8 a6 fd ff ff       	call   c000fedc <VgaText::combineColours(unsigned char, unsigned char)>
c0010136:	5a                   	pop    edx
c0010137:	0f b6 d8             	movzx  ebx,al
c001013a:	59                   	pop    ecx
c001013b:	a1 08 c6 02 c0       	mov    eax,ds:0xc002c608
c0010140:	53                   	push   ebx
c0010141:	b9 0a 00 00 00       	mov    ecx,0xa
c0010146:	99                   	cdq    
c0010147:	f7 fd                	idiv   ebp
c0010149:	99                   	cdq    
c001014a:	f7 f9                	idiv   ecx
c001014c:	8d 42 30             	lea    eax,[edx+0x30]
c001014f:	0f b6 c0             	movzx  eax,al
c0010152:	50                   	push   eax
c0010153:	e8 2a fe ff ff       	call   c000ff82 <VgaText::combineCharAndColour(char, unsigned char)>
c0010158:	5e                   	pop    esi
c0010159:	5f                   	pop    edi
c001015a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c0010160:	bf e8 03 00 00       	mov    edi,0x3e8
c0010165:	53                   	push   ebx
c0010166:	a1 08 c6 02 c0       	mov    eax,ds:0xc002c608
c001016b:	99                   	cdq    
c001016c:	f7 ff                	idiv   edi
c001016e:	99                   	cdq    
c001016f:	f7 f9                	idiv   ecx
c0010171:	8d 42 30             	lea    eax,[edx+0x30]
c0010174:	0f b6 c0             	movzx  eax,al
c0010177:	50                   	push   eax
c0010178:	e8 05 fe ff ff       	call   c000ff82 <VgaText::combineCharAndColour(char, unsigned char)>
c001017d:	5a                   	pop    edx
c001017e:	5e                   	pop    esi
c001017f:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c0010185:	be 64 00 00 00       	mov    esi,0x64
c001018a:	53                   	push   ebx
c001018b:	a1 08 c6 02 c0       	mov    eax,ds:0xc002c608
c0010190:	99                   	cdq    
c0010191:	f7 fe                	idiv   esi
c0010193:	99                   	cdq    
c0010194:	f7 f9                	idiv   ecx
c0010196:	8d 42 30             	lea    eax,[edx+0x30]
c0010199:	0f b6 c0             	movzx  eax,al
c001019c:	50                   	push   eax
c001019d:	e8 e0 fd ff ff       	call   c000ff82 <VgaText::combineCharAndColour(char, unsigned char)>
c00101a2:	5a                   	pop    edx
c00101a3:	5a                   	pop    edx
c00101a4:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c00101aa:	53                   	push   ebx
c00101ab:	a1 08 c6 02 c0       	mov    eax,ds:0xc002c608
c00101b0:	99                   	cdq    
c00101b1:	f7 f9                	idiv   ecx
c00101b3:	99                   	cdq    
c00101b4:	f7 f9                	idiv   ecx
c00101b6:	8d 42 30             	lea    eax,[edx+0x30]
c00101b9:	0f b6 c0             	movzx  eax,al
c00101bc:	50                   	push   eax
c00101bd:	e8 c0 fd ff ff       	call   c000ff82 <VgaText::combineCharAndColour(char, unsigned char)>
c00101c2:	5a                   	pop    edx
c00101c3:	5a                   	pop    edx
c00101c4:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c00101ca:	53                   	push   ebx
c00101cb:	a1 08 c6 02 c0       	mov    eax,ds:0xc002c608
c00101d0:	99                   	cdq    
c00101d1:	f7 f9                	idiv   ecx
c00101d3:	8d 42 30             	lea    eax,[edx+0x30]
c00101d6:	0f b6 c0             	movzx  eax,al
c00101d9:	50                   	push   eax
c00101da:	e8 a3 fd ff ff       	call   c000ff82 <VgaText::combineCharAndColour(char, unsigned char)>
c00101df:	5a                   	pop    edx
c00101e0:	5a                   	pop    edx
c00101e1:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c00101e7:	53                   	push   ebx
c00101e8:	a1 04 c6 02 c0       	mov    eax,ds:0xc002c604
c00101ed:	99                   	cdq    
c00101ee:	f7 fd                	idiv   ebp
c00101f0:	99                   	cdq    
c00101f1:	f7 f9                	idiv   ecx
c00101f3:	8d 42 30             	lea    eax,[edx+0x30]
c00101f6:	0f b6 c0             	movzx  eax,al
c00101f9:	50                   	push   eax
c00101fa:	e8 83 fd ff ff       	call   c000ff82 <VgaText::combineCharAndColour(char, unsigned char)>
c00101ff:	5d                   	pop    ebp
c0010200:	5a                   	pop    edx
c0010201:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c0010207:	53                   	push   ebx
c0010208:	a1 04 c6 02 c0       	mov    eax,ds:0xc002c604
c001020d:	99                   	cdq    
c001020e:	f7 ff                	idiv   edi
c0010210:	99                   	cdq    
c0010211:	f7 f9                	idiv   ecx
c0010213:	8d 42 30             	lea    eax,[edx+0x30]
c0010216:	0f b6 c0             	movzx  eax,al
c0010219:	50                   	push   eax
c001021a:	e8 63 fd ff ff       	call   c000ff82 <VgaText::combineCharAndColour(char, unsigned char)>
c001021f:	5f                   	pop    edi
c0010220:	5d                   	pop    ebp
c0010221:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c0010227:	53                   	push   ebx
c0010228:	a1 04 c6 02 c0       	mov    eax,ds:0xc002c604
c001022d:	99                   	cdq    
c001022e:	f7 fe                	idiv   esi
c0010230:	99                   	cdq    
c0010231:	f7 f9                	idiv   ecx
c0010233:	8d 42 30             	lea    eax,[edx+0x30]
c0010236:	0f b6 c0             	movzx  eax,al
c0010239:	50                   	push   eax
c001023a:	e8 43 fd ff ff       	call   c000ff82 <VgaText::combineCharAndColour(char, unsigned char)>
c001023f:	5a                   	pop    edx
c0010240:	5e                   	pop    esi
c0010241:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c0010247:	53                   	push   ebx
c0010248:	a1 04 c6 02 c0       	mov    eax,ds:0xc002c604
c001024d:	99                   	cdq    
c001024e:	f7 f9                	idiv   ecx
c0010250:	99                   	cdq    
c0010251:	f7 f9                	idiv   ecx
c0010253:	8d 42 30             	lea    eax,[edx+0x30]
c0010256:	0f b6 c0             	movzx  eax,al
c0010259:	50                   	push   eax
c001025a:	e8 23 fd ff ff       	call   c000ff82 <VgaText::combineCharAndColour(char, unsigned char)>
c001025f:	5f                   	pop    edi
c0010260:	5d                   	pop    ebp
c0010261:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c0010267:	53                   	push   ebx
c0010268:	a1 04 c6 02 c0       	mov    eax,ds:0xc002c604
c001026d:	99                   	cdq    
c001026e:	f7 f9                	idiv   ecx
c0010270:	83 c2 30             	add    edx,0x30
c0010273:	0f b6 d2             	movzx  edx,dl
c0010276:	52                   	push   edx
c0010277:	e8 06 fd ff ff       	call   c000ff82 <VgaText::combineCharAndColour(char, unsigned char)>
c001027c:	5a                   	pop    edx
c001027d:	59                   	pop    ecx
c001027e:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c0010284:	5b                   	pop    ebx
c0010285:	5e                   	pop    esi
c0010286:	5f                   	pop    edi
c0010287:	5d                   	pop    ebp
c0010288:	c3                   	ret    
c0010289:	90                   	nop

c001028a <VgaText::updateTitle()>:
c001028a:	53                   	push   ebx
c001028b:	31 c0                	xor    eax,eax
c001028d:	83 ec 58             	sub    esp,0x58
c0010290:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010294:	89 e1                	mov    ecx,esp
c0010296:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001029a:	40                   	inc    eax
c001029b:	83 f8 50             	cmp    eax,0x50
c001029e:	75 f6                	jne    c0010296 <VgaText::updateTitle()+0xc>
c00102a0:	31 c0                	xor    eax,eax
c00102a2:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c00102a9:	84 db                	test   bl,bl
c00102ab:	74 06                	je     c00102b3 <VgaText::updateTitle()+0x29>
c00102ad:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00102b0:	40                   	inc    eax
c00102b1:	eb ef                	jmp    c00102a2 <VgaText::updateTitle()+0x18>
c00102b3:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c00102b9:	85 c0                	test   eax,eax
c00102bb:	74 09                	je     c00102c6 <VgaText::updateTitle()+0x3c>
c00102bd:	53                   	push   ebx
c00102be:	53                   	push   ebx
c00102bf:	51                   	push   ecx
c00102c0:	52                   	push   edx
c00102c1:	ff d0                	call   eax
c00102c3:	83 c4 10             	add    esp,0x10
c00102c6:	e8 59 fe ff ff       	call   c0010124 <VgaText::updateDiskUsage()>
c00102cb:	83 c4 58             	add    esp,0x58
c00102ce:	5b                   	pop    ebx
c00102cf:	c3                   	ret    

c00102d0 <VgaText::setTitleTextColour(VgaColour)>:
c00102d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102d8:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c00102de:	eb aa                	jmp    c001028a <VgaText::updateTitle()>

c00102e0 <VgaText::setTitleColour(VgaColour)>:
c00102e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102e8:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c00102ee:	eb 9a                	jmp    c001028a <VgaText::updateTitle()>

c00102f0 <VgaText::setTitle(char*)>:
c00102f0:	53                   	push   ebx
c00102f1:	83 ec 10             	sub    esp,0x10
c00102f4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00102f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102fc:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010302:	50                   	push   eax
c0010303:	e8 65 04 ff ff       	call   c000076d <strcpy>
c0010308:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001030c:	83 c4 18             	add    esp,0x18
c001030f:	5b                   	pop    ebx
c0010310:	e9 75 ff ff ff       	jmp    c001028a <VgaText::updateTitle()>
c0010315:	90                   	nop

c0010316 <VgaText::decrementCursor(bool)>:
c0010316:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001031a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001031e:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010324:	85 c0                	test   eax,eax
c0010326:	74 07                	je     c001032f <VgaText::decrementCursor(bool)+0x19>
c0010328:	48                   	dec    eax
c0010329:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c001032f:	84 c9                	test   cl,cl
c0010331:	74 09                	je     c001033c <VgaText::decrementCursor(bool)+0x26>
c0010333:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010337:	e9 64 fa ff ff       	jmp    c000fda0 <VgaText::updateCursor()>
c001033c:	c3                   	ret    
c001033d:	90                   	nop

c001033e <VgaText::putchar(char, VgaColour, VgaColour)>:
c001033e:	53                   	push   ebx
c001033f:	83 ec 08             	sub    esp,0x8
c0010342:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010346:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001034a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001034e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010352:	3c 07                	cmp    al,0x7
c0010354:	75 2a                	jne    c0010380 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010356:	a1 6c a5 02 c0       	mov    eax,ds:0xc002a56c
c001035b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010363:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c001036b:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010373:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010377:	83 c4 08             	add    esp,0x8
c001037a:	5b                   	pop    ebx
c001037b:	e9 bc 2c 00 00       	jmp    c001303c <Buzzer::beep(int, int, bool)>
c0010380:	3c 0d                	cmp    al,0xd
c0010382:	75 0c                	jne    c0010390 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010384:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001038e:	eb 3b                	jmp    c00103cb <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010390:	3c 0a                	cmp    al,0xa
c0010392:	75 40                	jne    c00103d4 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010394:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001039a:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00103a4:	8d 50 01             	lea    edx,[eax+0x1]
c00103a7:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00103ad:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00103b3:	75 12                	jne    c00103c7 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c00103b5:	83 ec 0c             	sub    esp,0xc
c00103b8:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00103be:	53                   	push   ebx
c00103bf:	e8 2a fb ff ff       	call   c000feee <VgaText::scrollScreen()>
c00103c4:	83 c4 10             	add    esp,0x10
c00103c7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103cb:	83 c4 08             	add    esp,0x8
c00103ce:	5b                   	pop    ebx
c00103cf:	e9 cc f9 ff ff       	jmp    c000fda0 <VgaText::updateCursor()>
c00103d4:	3c 08                	cmp    al,0x8
c00103d6:	75 31                	jne    c0010409 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c00103d8:	50                   	push   eax
c00103d9:	50                   	push   eax
c00103da:	6a 01                	push   0x1
c00103dc:	53                   	push   ebx
c00103dd:	e8 34 ff ff ff       	call   c0010316 <VgaText::decrementCursor(bool)>
c00103e2:	5a                   	pop    edx
c00103e3:	59                   	pop    ecx
c00103e4:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00103ea:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00103f0:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00103f6:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00103fc:	6a 20                	push   0x20
c00103fe:	53                   	push   ebx
c00103ff:	e8 90 fb ff ff       	call   c000ff94 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010404:	83 c4 28             	add    esp,0x28
c0010407:	5b                   	pop    ebx
c0010408:	c3                   	ret    
c0010409:	83 ec 08             	sub    esp,0x8
c001040c:	0f be c0             	movsx  eax,al
c001040f:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010415:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c001041b:	51                   	push   ecx
c001041c:	52                   	push   edx
c001041d:	50                   	push   eax
c001041e:	53                   	push   ebx
c001041f:	e8 70 fb ff ff       	call   c000ff94 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010424:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010428:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010430:	83 c4 28             	add    esp,0x28
c0010433:	5b                   	pop    ebx
c0010434:	e9 29 fc ff ff       	jmp    c0010062 <VgaText::incrementCursor(bool)>
c0010439:	90                   	nop

c001043a <VgaText::isShowingCursor()>:
c001043a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001043e:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010444:	c3                   	ret    
c0010445:	90                   	nop

c0010446 <VgaText::isBlinkDisabled()>:
c0010446:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001044a:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010450:	83 f0 01             	xor    eax,0x1
c0010453:	c3                   	ret    

c0010454 <VgaText::setCursorHeight(int)>:
c0010454:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010458:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001045c:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010462:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010469:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001046d:	e9 48 f9 ff ff       	jmp    c000fdba <VgaText::showCursor(bool)>

c0010472 <VgaText::getCursorHeight()>:
c0010472:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010476:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c001047c:	c3                   	ret    

c001047d <setActiveTerminal(VgaText*)>:
c001047d:	53                   	push   ebx
c001047e:	83 ec 08             	sub    esp,0x8
c0010481:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010485:	85 db                	test   ebx,ebx
c0010487:	75 11                	jne    c001049a <setActiveTerminal(VgaText*)+0x1d>
c0010489:	c7 44 24 10 8c 6c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026c8c
c0010491:	83 c4 08             	add    esp,0x8
c0010494:	5b                   	pop    ebx
c0010495:	e9 55 85 00 00       	jmp    c00189ef <Krnl::panic(char const*)>
c001049a:	50                   	push   eax
c001049b:	50                   	push   eax
c001049c:	53                   	push   ebx
c001049d:	68 9a 6c 02 c0       	push   0xc0026c9a
c00104a2:	e8 aa 1d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00104a7:	a1 c4 a4 02 c0       	mov    eax,ds:0xc002a4c4
c00104ac:	83 c4 10             	add    esp,0x10
c00104af:	85 c0                	test   eax,eax
c00104b1:	74 0c                	je     c00104bf <setActiveTerminal(VgaText*)+0x42>
c00104b3:	83 ec 0c             	sub    esp,0xc
c00104b6:	50                   	push   eax
c00104b7:	e8 e4 f8 ff ff       	call   c000fda0 <VgaText::updateCursor()>
c00104bc:	83 c4 10             	add    esp,0x10
c00104bf:	89 1d c4 a4 02 c0    	mov    DWORD PTR ds:0xc002a4c4,ebx
c00104c5:	51                   	push   ecx
c00104c6:	51                   	push   ecx
c00104c7:	53                   	push   ebx
c00104c8:	68 b2 6c 02 c0       	push   0xc0026cb2
c00104cd:	e8 7f 1d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00104d2:	83 c4 0c             	add    esp,0xc
c00104d5:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00104db:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00104e1:	53                   	push   ebx
c00104e2:	e8 25 fb ff ff       	call   c001000c <VgaText::setCursor(int, int)>
c00104e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00104ea:	e8 57 ff ff ff       	call   c0010446 <VgaText::isBlinkDisabled()>
c00104ef:	5a                   	pop    edx
c00104f0:	0f b6 c0             	movzx  eax,al
c00104f3:	59                   	pop    ecx
c00104f4:	50                   	push   eax
c00104f5:	53                   	push   ebx
c00104f6:	e8 cf f8 ff ff       	call   c000fdca <VgaText::disableBlink(bool)>
c00104fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00104fe:	e8 6f ff ff ff       	call   c0010472 <VgaText::getCursorHeight()>
c0010503:	5a                   	pop    edx
c0010504:	59                   	pop    ecx
c0010505:	50                   	push   eax
c0010506:	53                   	push   ebx
c0010507:	e8 48 ff ff ff       	call   c0010454 <VgaText::setCursorHeight(int)>
c001050c:	83 c4 10             	add    esp,0x10
c001050f:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010516:	75 0a                	jne    c0010522 <setActiveTerminal(VgaText*)+0xa5>
c0010518:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010522:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010526:	83 c4 08             	add    esp,0x8
c0010529:	5b                   	pop    ebx
c001052a:	e9 1d f8 ff ff       	jmp    c000fd4c <VgaText::load()>

c001052f <doTerminalCycle()>:
c001052f:	83 ec 18             	sub    esp,0x18
c0010532:	a1 c0 a4 02 c0       	mov    eax,ds:0xc002a4c0
c0010537:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c001053d:	50                   	push   eax
c001053e:	a3 c0 a4 02 c0       	mov    ds:0xc002a4c0,eax
c0010543:	e8 35 ff ff ff       	call   c001047d <setActiveTerminal(VgaText*)>
c0010548:	83 c4 1c             	add    esp,0x1c
c001054b:	c3                   	ret    

c001054c <VgaText::doUpdate()>:
c001054c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010550:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010556:	85 c0                	test   eax,eax
c0010558:	74 02                	je     c001055c <VgaText::doUpdate()+0x10>
c001055a:	ff e0                	jmp    eax
c001055c:	c3                   	ret    
c001055d:	90                   	nop

c001055e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001055e:	55                   	push   ebp
c001055f:	57                   	push   edi
c0010560:	56                   	push   esi
c0010561:	53                   	push   ebx
c0010562:	83 ec 1c             	sub    esp,0x1c
c0010565:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010569:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001056e:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010575:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010578:	50                   	push   eax
c0010579:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001057e:	50                   	push   eax
c001057f:	e8 58 f9 ff ff       	call   c000fedc <VgaText::combineColours(unsigned char, unsigned char)>
c0010584:	59                   	pop    ecx
c0010585:	0f b6 c0             	movzx  eax,al
c0010588:	5b                   	pop    ebx
c0010589:	31 c9                	xor    ecx,ecx
c001058b:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010593:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010597:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c001059d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00105a1:	0f b7 db             	movzx  ebx,bx
c00105a4:	01 db                	add    ebx,ebx
c00105a6:	01 fb                	add    ebx,edi
c00105a8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00105ab:	84 c0                	test   al,al
c00105ad:	0f 84 38 01 00 00    	je     c00106eb <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c00105b3:	3c 0d                	cmp    al,0xd
c00105b5:	75 0f                	jne    c00105c6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c00105b7:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00105c1:	e9 1f 01 00 00       	jmp    c00106e5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00105c6:	3c 0a                	cmp    al,0xa
c00105c8:	75 5b                	jne    c0010625 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c00105ca:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c00105d0:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00105da:	8d 48 01             	lea    ecx,[eax+0x1]
c00105dd:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c00105e3:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c00105e9:	75 12                	jne    c00105fd <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c00105eb:	83 ec 0c             	sub    esp,0xc
c00105ee:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c00105f4:	55                   	push   ebp
c00105f5:	e8 f4 f8 ff ff       	call   c000feee <VgaText::scrollScreen()>
c00105fa:	83 c4 10             	add    esp,0x10
c00105fd:	83 ec 0c             	sub    esp,0xc
c0010600:	55                   	push   ebp
c0010601:	e8 9a f7 ff ff       	call   c000fda0 <VgaText::updateCursor()>
c0010606:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c001060e:	83 c4 10             	add    esp,0x10
c0010611:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010617:	31 c9                	xor    ecx,ecx
c0010619:	0f b7 db             	movzx  ebx,bx
c001061c:	01 db                	add    ebx,ebx
c001061e:	01 fb                	add    ebx,edi
c0010620:	e9 c0 00 00 00       	jmp    c00106e5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010625:	3c 08                	cmp    al,0x8
c0010627:	75 4e                	jne    c0010677 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010629:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001062d:	53                   	push   ebx
c001062e:	53                   	push   ebx
c001062f:	6a 01                	push   0x1
c0010631:	55                   	push   ebp
c0010632:	e8 df fc ff ff       	call   c0010316 <VgaText::decrementCursor(bool)>
c0010637:	58                   	pop    eax
c0010638:	5a                   	pop    edx
c0010639:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c001063f:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010645:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c001064b:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010651:	6a 20                	push   0x20
c0010653:	55                   	push   ebp
c0010654:	e8 3b f9 ff ff       	call   c000ff94 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010659:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010661:	83 c4 20             	add    esp,0x20
c0010664:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c001066a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001066e:	0f b7 db             	movzx  ebx,bx
c0010671:	01 db                	add    ebx,ebx
c0010673:	01 fb                	add    ebx,edi
c0010675:	eb 6e                	jmp    c00106e5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010677:	51                   	push   ecx
c0010678:	51                   	push   ecx
c0010679:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001067d:	50                   	push   eax
c001067e:	e8 ff f8 ff ff       	call   c000ff82 <VgaText::combineCharAndColour(char, unsigned char)>
c0010683:	83 c4 10             	add    esp,0x10
c0010686:	66 89 03             	mov    WORD PTR [ebx],ax
c0010689:	39 2d c4 a4 02 c0    	cmp    DWORD PTR ds:0xc002a4c4,ebp
c001068f:	75 2a                	jne    c00106bb <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010691:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010697:	85 c0                	test   eax,eax
c0010699:	74 20                	je     c00106bb <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c001069b:	52                   	push   edx
c001069c:	52                   	push   edx
c001069d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c00106a3:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c00106a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00106ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00106b1:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c00106b4:	51                   	push   ecx
c00106b5:	55                   	push   ebp
c00106b6:	ff d0                	call   eax
c00106b8:	83 c4 20             	add    esp,0x20
c00106bb:	83 c3 02             	add    ebx,0x2
c00106be:	50                   	push   eax
c00106bf:	50                   	push   eax
c00106c0:	6a 00                	push   0x0
c00106c2:	55                   	push   ebp
c00106c3:	e8 9a f9 ff ff       	call   c0010062 <VgaText::incrementCursor(bool)>
c00106c8:	83 c4 10             	add    esp,0x10
c00106cb:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c00106d2:	75 0f                	jne    c00106e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c00106d4:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00106dc:	0f b7 db             	movzx  ebx,bx
c00106df:	01 db                	add    ebx,ebx
c00106e1:	01 fb                	add    ebx,edi
c00106e3:	b1 01                	mov    cl,0x1
c00106e5:	46                   	inc    esi
c00106e6:	e9 bd fe ff ff       	jmp    c00105a8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c00106eb:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00106ef:	83 ec 0c             	sub    esp,0xc
c00106f2:	55                   	push   ebp
c00106f3:	e8 a8 f6 ff ff       	call   c000fda0 <VgaText::updateCursor()>
c00106f8:	83 c4 10             	add    esp,0x10
c00106fb:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00106ff:	84 c9                	test   cl,cl
c0010701:	74 0c                	je     c001070f <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010703:	83 ec 0c             	sub    esp,0xc
c0010706:	55                   	push   ebp
c0010707:	e8 40 fe ff ff       	call   c001054c <VgaText::doUpdate()>
c001070c:	83 c4 10             	add    esp,0x10
c001070f:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010716:	83 c4 1c             	add    esp,0x1c
c0010719:	5b                   	pop    ebx
c001071a:	5e                   	pop    esi
c001071b:	5f                   	pop    edi
c001071c:	5d                   	pop    ebp
c001071d:	c3                   	ret    

c001071e <VgaText::clearScreen()>:
c001071e:	57                   	push   edi
c001071f:	56                   	push   esi
c0010720:	31 f6                	xor    esi,esi
c0010722:	53                   	push   ebx
c0010723:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010727:	52                   	push   edx
c0010728:	6a 00                	push   0x0
c001072a:	6a 00                	push   0x0
c001072c:	53                   	push   ebx
c001072d:	e8 da f8 ff ff       	call   c001000c <VgaText::setCursor(int, int)>
c0010732:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010739:	83 c4 10             	add    esp,0x10
c001073c:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010742:	7e 26                	jle    c001076a <VgaText::clearScreen()+0x4c>
c0010744:	31 ff                	xor    edi,edi
c0010746:	50                   	push   eax
c0010747:	50                   	push   eax
c0010748:	56                   	push   esi
c0010749:	57                   	push   edi
c001074a:	47                   	inc    edi
c001074b:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010751:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010757:	6a 20                	push   0x20
c0010759:	53                   	push   ebx
c001075a:	e8 35 f8 ff ff       	call   c000ff94 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001075f:	83 c4 20             	add    esp,0x20
c0010762:	83 ff 50             	cmp    edi,0x50
c0010765:	75 df                	jne    c0010746 <VgaText::clearScreen()+0x28>
c0010767:	46                   	inc    esi
c0010768:	eb d2                	jmp    c001073c <VgaText::clearScreen()+0x1e>
c001076a:	83 ec 0c             	sub    esp,0xc
c001076d:	53                   	push   ebx
c001076e:	e8 d9 fd ff ff       	call   c001054c <VgaText::doUpdate()>
c0010773:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c001077a:	83 c4 10             	add    esp,0x10
c001077d:	5b                   	pop    ebx
c001077e:	5e                   	pop    esi
c001077f:	5f                   	pop    edi
c0010780:	c3                   	ret    
c0010781:	90                   	nop

c0010782 <VgaText::putchar(char)>:
c0010782:	56                   	push   esi
c0010783:	53                   	push   ebx
c0010784:	83 ec 14             	sub    esp,0x14
c0010787:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001078b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001078f:	3c 5b                	cmp    al,0x5b
c0010791:	75 21                	jne    c00107b4 <VgaText::putchar(char)+0x32>
c0010793:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c001079a:	74 28                	je     c00107c4 <VgaText::putchar(char)+0x42>
c001079c:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c00107a5:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c00107af:	e9 e2 00 00 00       	jmp    c0010896 <VgaText::putchar(char)+0x114>
c00107b4:	3c 1b                	cmp    al,0x1b
c00107b6:	75 0c                	jne    c00107c4 <VgaText::putchar(char)+0x42>
c00107b8:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c00107bf:	e9 d2 00 00 00       	jmp    c0010896 <VgaText::putchar(char)+0x114>
c00107c4:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c00107ca:	84 c9                	test   cl,cl
c00107cc:	0f 84 ab 00 00 00    	je     c001087d <VgaText::putchar(char)+0xfb>
c00107d2:	8d 50 c0             	lea    edx,[eax-0x40]
c00107d5:	80 fa 3e             	cmp    dl,0x3e
c00107d8:	0f 87 82 00 00 00    	ja     c0010860 <VgaText::putchar(char)+0xde>
c00107de:	3c 6d                	cmp    al,0x6d
c00107e0:	75 4d                	jne    c001082f <VgaText::putchar(char)+0xad>
c00107e2:	31 f6                	xor    esi,esi
c00107e4:	31 d2                	xor    edx,edx
c00107e6:	31 c0                	xor    eax,eax
c00107e8:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00107ee:	7e 30                	jle    c0010820 <VgaText::putchar(char)+0x9e>
c00107f0:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00107f8:	80 fa 3b             	cmp    dl,0x3b
c00107fb:	75 17                	jne    c0010814 <VgaText::putchar(char)+0x92>
c00107fd:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010801:	50                   	push   eax
c0010802:	53                   	push   ebx
c0010803:	e8 fc f5 ff ff       	call   c000fe04 <VgaText::doANSI_SGR(int)>
c0010808:	59                   	pop    ecx
c0010809:	31 d2                	xor    edx,edx
c001080b:	58                   	pop    eax
c001080c:	31 c0                	xor    eax,eax
c001080e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010812:	eb 09                	jmp    c001081d <VgaText::putchar(char)+0x9b>
c0010814:	6b c0 0a             	imul   eax,eax,0xa
c0010817:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c001081b:	88 ca                	mov    dl,cl
c001081d:	46                   	inc    esi
c001081e:	eb c8                	jmp    c00107e8 <VgaText::putchar(char)+0x66>
c0010820:	84 d2                	test   dl,dl
c0010822:	74 31                	je     c0010855 <VgaText::putchar(char)+0xd3>
c0010824:	50                   	push   eax
c0010825:	53                   	push   ebx
c0010826:	e8 d9 f5 ff ff       	call   c000fe04 <VgaText::doANSI_SGR(int)>
c001082b:	58                   	pop    eax
c001082c:	5a                   	pop    edx
c001082d:	eb 26                	jmp    c0010855 <VgaText::putchar(char)+0xd3>
c001082f:	3c 4a                	cmp    al,0x4a
c0010831:	75 22                	jne    c0010855 <VgaText::putchar(char)+0xd3>
c0010833:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c001083a:	75 19                	jne    c0010855 <VgaText::putchar(char)+0xd3>
c001083c:	83 ec 0c             	sub    esp,0xc
c001083f:	53                   	push   ebx
c0010840:	e8 d9 fe ff ff       	call   c001071e <VgaText::clearScreen()>
c0010845:	83 c4 0c             	add    esp,0xc
c0010848:	6a 00                	push   0x0
c001084a:	6a 00                	push   0x0
c001084c:	53                   	push   ebx
c001084d:	e8 ba f7 ff ff       	call   c001000c <VgaText::setCursor(int, int)>
c0010852:	83 c4 10             	add    esp,0x10
c0010855:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c001085e:	eb 36                	jmp    c0010896 <VgaText::putchar(char)+0x114>
c0010860:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010866:	83 fa 0e             	cmp    edx,0xe
c0010869:	7f 2b                	jg     c0010896 <VgaText::putchar(char)+0x114>
c001086b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001086e:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010874:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c001087b:	eb 19                	jmp    c0010896 <VgaText::putchar(char)+0x114>
c001087d:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010883:	0f be c0             	movsx  eax,al
c0010886:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001088c:	50                   	push   eax
c001088d:	53                   	push   ebx
c001088e:	e8 ab fa ff ff       	call   c001033e <VgaText::putchar(char, VgaColour, VgaColour)>
c0010893:	83 c4 10             	add    esp,0x10
c0010896:	83 c4 14             	add    esp,0x14
c0010899:	5b                   	pop    ebx
c001089a:	5e                   	pop    esi
c001089b:	c3                   	ret    

c001089c <VgaText::puts(char const*)>:
c001089c:	53                   	push   ebx
c001089d:	83 ec 08             	sub    esp,0x8
c00108a0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00108a4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00108a7:	84 c0                	test   al,al
c00108a9:	74 12                	je     c00108bd <VgaText::puts(char const*)+0x21>
c00108ab:	43                   	inc    ebx
c00108ac:	51                   	push   ecx
c00108ad:	51                   	push   ecx
c00108ae:	50                   	push   eax
c00108af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108b3:	e8 ca fe ff ff       	call   c0010782 <VgaText::putchar(char)>
c00108b8:	83 c4 10             	add    esp,0x10
c00108bb:	eb e7                	jmp    c00108a4 <VgaText::puts(char const*)+0x8>
c00108bd:	83 c4 08             	add    esp,0x8
c00108c0:	5b                   	pop    ebx
c00108c1:	c3                   	ret    

c00108c2 <VgaText::putx(unsigned int)>:
c00108c2:	57                   	push   edi
c00108c3:	b9 11 00 00 00       	mov    ecx,0x11
c00108c8:	56                   	push   esi
c00108c9:	be ce 6c 02 c0       	mov    esi,0xc0026cce
c00108ce:	53                   	push   ebx
c00108cf:	83 ec 20             	sub    esp,0x20
c00108d2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00108d6:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00108da:	fc                   	cld    
c00108db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00108dd:	be 08 00 00 00       	mov    esi,0x8
c00108e2:	50                   	push   eax
c00108e3:	50                   	push   eax
c00108e4:	89 d8                	mov    eax,ebx
c00108e6:	c1 e3 04             	shl    ebx,0x4
c00108e9:	c1 e8 1c             	shr    eax,0x1c
c00108ec:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00108f1:	50                   	push   eax
c00108f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00108f6:	e8 87 fe ff ff       	call   c0010782 <VgaText::putchar(char)>
c00108fb:	83 c4 10             	add    esp,0x10
c00108fe:	4e                   	dec    esi
c00108ff:	75 e1                	jne    c00108e2 <VgaText::putx(unsigned int)+0x20>
c0010901:	83 c4 20             	add    esp,0x20
c0010904:	5b                   	pop    ebx
c0010905:	5e                   	pop    esi
c0010906:	5f                   	pop    edi
c0010907:	c3                   	ret    

c0010908 <VgaText::VgaText(char const*)>:
c0010908:	57                   	push   edi
c0010909:	56                   	push   esi
c001090a:	53                   	push   ebx
c001090b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001090f:	83 ec 08             	sub    esp,0x8
c0010912:	6a 00                	push   0x0
c0010914:	50                   	push   eax
c0010915:	e8 62 05 00 00       	call   c0010e7c <UnixFile::UnixFile(int)>
c001091a:	83 c4 10             	add    esp,0x10
c001091d:	ba 34 6d 02 c0       	mov    edx,0xc0026d34
c0010922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010926:	89 10                	mov    DWORD PTR [eax],edx
c0010928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001092c:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001093a:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010948:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c001094f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010953:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c001095a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001095e:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001096c:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001097a:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010985:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c001098c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010990:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010996:	bb a0 a4 02 c0       	mov    ebx,0xc002a4a0
c001099b:	b8 08 00 00 00       	mov    eax,0x8
c00109a0:	fc                   	cld    
c00109a1:	89 d7                	mov    edi,edx
c00109a3:	89 de                	mov    esi,ebx
c00109a5:	89 c1                	mov    ecx,eax
c00109a7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00109a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ad:	05 1e 10 00 00       	add    eax,0x101e
c00109b2:	83 ec 08             	sub    esp,0x8
c00109b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109b9:	50                   	push   eax
c00109ba:	e8 ae fd fe ff       	call   c000076d <strcpy>
c00109bf:	83 c4 10             	add    esp,0x10
c00109c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c6:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c00109d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109d4:	83 c0 0c             	add    eax,0xc
c00109d7:	83 ec 04             	sub    esp,0x4
c00109da:	68 00 0f 00 00       	push   0xf00
c00109df:	6a 00                	push   0x0
c00109e1:	50                   	push   eax
c00109e2:	e8 e7 fc fe ff       	call   c00006ce <memset>
c00109e7:	83 c4 10             	add    esp,0x10
c00109ea:	83 ec 04             	sub    esp,0x4
c00109ed:	6a 00                	push   0x0
c00109ef:	6a 07                	push   0x7
c00109f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109f5:	e8 c2 f4 ff ff       	call   c000febc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00109fa:	83 c4 10             	add    esp,0x10
c00109fd:	83 ec 08             	sub    esp,0x8
c0010a00:	6a 02                	push   0x2
c0010a02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a06:	e8 49 fa ff ff       	call   c0010454 <VgaText::setCursorHeight(int)>
c0010a0b:	83 c4 10             	add    esp,0x10
c0010a0e:	83 ec 04             	sub    esp,0x4
c0010a11:	6a 00                	push   0x0
c0010a13:	6a 00                	push   0x0
c0010a15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a19:	e8 ee f5 ff ff       	call   c001000c <VgaText::setCursor(int, int)>
c0010a1e:	83 c4 10             	add    esp,0x10
c0010a21:	83 ec 08             	sub    esp,0x8
c0010a24:	6a 01                	push   0x1
c0010a26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a2a:	e8 8b f3 ff ff       	call   c000fdba <VgaText::showCursor(bool)>
c0010a2f:	83 c4 10             	add    esp,0x10
c0010a32:	83 ec 08             	sub    esp,0x8
c0010a35:	6a 01                	push   0x1
c0010a37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a3b:	e8 8a f3 ff ff       	call   c000fdca <VgaText::disableBlink(bool)>
c0010a40:	83 c4 10             	add    esp,0x10
c0010a43:	83 ec 0c             	sub    esp,0xc
c0010a46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a4a:	e8 cf fc ff ff       	call   c001071e <VgaText::clearScreen()>
c0010a4f:	83 c4 10             	add    esp,0x10
c0010a52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a56:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010a5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a61:	05 9e 10 00 00       	add    eax,0x109e
c0010a66:	83 ec 04             	sub    esp,0x4
c0010a69:	68 96 00 00 00       	push   0x96
c0010a6e:	6a 00                	push   0x0
c0010a70:	50                   	push   eax
c0010a71:	e8 58 fc fe ff       	call   c00006ce <memset>
c0010a76:	83 c4 10             	add    esp,0x10
c0010a79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a7d:	05 34 11 00 00       	add    eax,0x1134
c0010a82:	83 ec 04             	sub    esp,0x4
c0010a85:	68 2c 01 00 00       	push   0x12c
c0010a8a:	6a 00                	push   0x0
c0010a8c:	50                   	push   eax
c0010a8d:	e8 3c fc fe ff       	call   c00006ce <memset>
c0010a92:	83 c4 10             	add    esp,0x10
c0010a95:	90                   	nop
c0010a96:	5b                   	pop    ebx
c0010a97:	5e                   	pop    esi
c0010a98:	5f                   	pop    edi
c0010a99:	c3                   	ret    

c0010a9a <VgaText::receiveKey(unsigned char)>:
c0010a9a:	55                   	push   ebp
c0010a9b:	57                   	push   edi
c0010a9c:	56                   	push   esi
c0010a9d:	53                   	push   ebx
c0010a9e:	83 ec 1c             	sub    esp,0x1c
c0010aa1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010aa5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010aa9:	84 db                	test   bl,bl
c0010aab:	0f 84 c9 00 00 00    	je     c0010b7a <VgaText::receiveKey(unsigned char)+0xe0>
c0010ab1:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010ab7:	80 fb 08             	cmp    bl,0x8
c0010aba:	75 2c                	jne    c0010ae8 <VgaText::receiveKey(unsigned char)+0x4e>
c0010abc:	83 ec 0c             	sub    esp,0xc
c0010abf:	57                   	push   edi
c0010ac0:	e8 26 fc fe ff       	call   c00006eb <strlen>
c0010ac5:	83 c4 10             	add    esp,0x10
c0010ac8:	85 c0                	test   eax,eax
c0010aca:	74 41                	je     c0010b0d <VgaText::receiveKey(unsigned char)+0x73>
c0010acc:	50                   	push   eax
c0010acd:	50                   	push   eax
c0010ace:	6a 08                	push   0x8
c0010ad0:	56                   	push   esi
c0010ad1:	e8 ac fc ff ff       	call   c0010782 <VgaText::putchar(char)>
c0010ad6:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010ad9:	e8 0d fc fe ff       	call   c00006eb <strlen>
c0010ade:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010ae6:	eb 22                	jmp    c0010b0a <VgaText::receiveKey(unsigned char)+0x70>
c0010ae8:	0f be c3             	movsx  eax,bl
c0010aeb:	52                   	push   edx
c0010aec:	52                   	push   edx
c0010aed:	50                   	push   eax
c0010aee:	56                   	push   esi
c0010aef:	e8 8e fc ff ff       	call   c0010782 <VgaText::putchar(char)>
c0010af4:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010af8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010afd:	59                   	pop    ecx
c0010afe:	5d                   	pop    ebp
c0010aff:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010b03:	50                   	push   eax
c0010b04:	57                   	push   edi
c0010b05:	e8 1a fd fe ff       	call   c0000824 <strcat>
c0010b0a:	83 c4 10             	add    esp,0x10
c0010b0d:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010b14:	75 05                	jne    c0010b1b <VgaText::receiveKey(unsigned char)+0x81>
c0010b16:	80 fb 0a             	cmp    bl,0xa
c0010b19:	75 53                	jne    c0010b6e <VgaText::receiveKey(unsigned char)+0xd4>
c0010b1b:	83 ec 0c             	sub    esp,0xc
c0010b1e:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010b24:	53                   	push   ebx
c0010b25:	e8 c1 fb fe ff       	call   c00006eb <strlen>
c0010b2a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010b2d:	89 c5                	mov    ebp,eax
c0010b2f:	e8 b7 fb fe ff       	call   c00006eb <strlen>
c0010b34:	83 c4 10             	add    esp,0x10
c0010b37:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010b3b:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010b40:	76 10                	jbe    c0010b52 <VgaText::receiveKey(unsigned char)+0xb8>
c0010b42:	83 ec 0c             	sub    esp,0xc
c0010b45:	68 df 6c 02 c0       	push   0xc0026cdf
c0010b4a:	e8 a0 7e 00 00       	call   c00189ef <Krnl::panic(char const*)>
c0010b4f:	83 c4 10             	add    esp,0x10
c0010b52:	50                   	push   eax
c0010b53:	50                   	push   eax
c0010b54:	57                   	push   edi
c0010b55:	53                   	push   ebx
c0010b56:	e8 c9 fc fe ff       	call   c0000824 <strcat>
c0010b5b:	83 c4 0c             	add    esp,0xc
c0010b5e:	68 96 00 00 00       	push   0x96
c0010b63:	6a 00                	push   0x0
c0010b65:	57                   	push   edi
c0010b66:	e8 63 fb fe ff       	call   c00006ce <memset>
c0010b6b:	83 c4 10             	add    esp,0x10
c0010b6e:	83 ec 0c             	sub    esp,0xc
c0010b71:	56                   	push   esi
c0010b72:	e8 d5 f9 ff ff       	call   c001054c <VgaText::doUpdate()>
c0010b77:	83 c4 10             	add    esp,0x10
c0010b7a:	83 c4 1c             	add    esp,0x1c
c0010b7d:	5b                   	pop    ebx
c0010b7e:	5e                   	pop    esi
c0010b7f:	5f                   	pop    edi
c0010b80:	5d                   	pop    ebp
c0010b81:	c3                   	ret    

c0010b82 <VgaText::write(unsigned long long, void*, int*)>:
c0010b82:	55                   	push   ebp
c0010b83:	57                   	push   edi
c0010b84:	56                   	push   esi
c0010b85:	53                   	push   ebx
c0010b86:	83 ec 0c             	sub    esp,0xc
c0010b89:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010b8d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010b91:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010b95:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010b9c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010b9f:	39 eb                	cmp    ebx,ebp
c0010ba1:	74 13                	je     c0010bb6 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010ba3:	43                   	inc    ebx
c0010ba4:	50                   	push   eax
c0010ba5:	50                   	push   eax
c0010ba6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010baa:	50                   	push   eax
c0010bab:	56                   	push   esi
c0010bac:	e8 d1 fb ff ff       	call   c0010782 <VgaText::putchar(char)>
c0010bb1:	83 c4 10             	add    esp,0x10
c0010bb4:	eb e9                	jmp    c0010b9f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010bb6:	83 ec 0c             	sub    esp,0xc
c0010bb9:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010bc0:	56                   	push   esi
c0010bc1:	e8 86 f9 ff ff       	call   c001054c <VgaText::doUpdate()>
c0010bc6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010bca:	89 38                	mov    DWORD PTR [eax],edi
c0010bcc:	83 c4 1c             	add    esp,0x1c
c0010bcf:	31 c0                	xor    eax,eax
c0010bd1:	5b                   	pop    ebx
c0010bd2:	5e                   	pop    esi
c0010bd3:	5f                   	pop    edi
c0010bd4:	5d                   	pop    ebp
c0010bd5:	c3                   	ret    

c0010bd6 <newTerminal(char*)>:
c0010bd6:	83 ec 28             	sub    esp,0x28
c0010bd9:	68 60 12 00 00       	push   0x1260
c0010bde:	e8 7f 15 00 00       	call   c0012162 <operator new(unsigned long)>
c0010be3:	5a                   	pop    edx
c0010be4:	59                   	pop    ecx
c0010be5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010be9:	50                   	push   eax
c0010bea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010bee:	e8 15 fd ff ff       	call   c0010908 <VgaText::VgaText(char const*)>
c0010bf3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010bf7:	83 c4 2c             	add    esp,0x2c
c0010bfa:	c3                   	ret    
c0010bfb:	90                   	nop

c0010bfc <TSS::TSS()>:
c0010bfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c00:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c07:	90                   	nop
c0010c08:	c3                   	ret    
c0010c09:	90                   	nop

c0010c0a <TSS::setESP(unsigned long)>:
c0010c0a:	55                   	push   ebp
c0010c0b:	89 e5                	mov    ebp,esp
c0010c0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c13:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c16:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c19:	90                   	nop
c0010c1a:	5d                   	pop    ebp
c0010c1b:	c3                   	ret    

c0010c1c <TSS::flush()>:
c0010c1c:	55                   	push   ebp
c0010c1d:	89 e5                	mov    ebp,esp
c0010c1f:	83 ec 10             	sub    esp,0x10
c0010c22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c25:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c27:	83 c8 03             	or     eax,0x3
c0010c2a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010c2e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010c32:	66 89 d0             	mov    ax,dx
c0010c35:	0f 00 d8             	ltr    ax
c0010c38:	90                   	nop
c0010c39:	c9                   	leave  
c0010c3a:	c3                   	ret    
c0010c3b:	90                   	nop

c0010c3c <TSS::setup(unsigned long, unsigned long)>:
c0010c3c:	55                   	push   ebp
c0010c3d:	89 e5                	mov    ebp,esp
c0010c3f:	53                   	push   ebx
c0010c40:	83 ec 14             	sub    esp,0x14
c0010c43:	83 ec 0c             	sub    esp,0xc
c0010c46:	6a 68                	push   0x68
c0010c48:	e8 fb e4 ff ff       	call   c000f148 <malloc>
c0010c4d:	83 c4 10             	add    esp,0x10
c0010c50:	89 c2                	mov    edx,eax
c0010c52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c5e:	83 ec 04             	sub    esp,0x4
c0010c61:	6a 68                	push   0x68
c0010c63:	6a 00                	push   0x0
c0010c65:	50                   	push   eax
c0010c66:	e8 63 fa fe ff       	call   c00006ce <memset>
c0010c6b:	83 c4 10             	add    esp,0x10
c0010c6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c74:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010c7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c7d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c80:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010c86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c8c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c8f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c98:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010c9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ca1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ca4:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010caa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cb0:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010cb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cbc:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010cc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cc5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cc8:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010cce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cd4:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010cda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cdd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ce0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010ce3:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010ce6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ce9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010cef:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010cf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cf5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cf8:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010cff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d02:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c0010d05:	e8 6b 43 01 00       	call   c0025075 <CPU::readCR3()>
c0010d0a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0010d0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d13:	83 ec 08             	sub    esp,0x8
c0010d16:	50                   	push   eax
c0010d17:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010d1a:	50                   	push   eax
c0010d1b:	e8 fe db ff ff       	call   c000e91e <GDTEntry::setBase(unsigned int)>
c0010d20:	83 c4 10             	add    esp,0x10
c0010d23:	83 ec 08             	sub    esp,0x8
c0010d26:	6a 68                	push   0x68
c0010d28:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010d2b:	50                   	push   eax
c0010d2c:	e8 09 dc ff ff       	call   c000e93a <GDTEntry::setLimit(unsigned int)>
c0010d31:	83 c4 10             	add    esp,0x10
c0010d34:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c0010d38:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010d3b:	83 e0 0f             	and    eax,0xf
c0010d3e:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010d41:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010d44:	83 c8 40             	or     eax,0x40
c0010d47:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010d4a:	e8 1d 6b 00 00       	call   c001786c <CPU::current()>
c0010d4f:	05 78 01 00 00       	add    eax,0x178
c0010d54:	83 ec 04             	sub    esp,0x4
c0010d57:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0010d5a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010d5d:	50                   	push   eax
c0010d5e:	e8 0b dc ff ff       	call   c000e96e <GDT::addEntry(GDTEntry)>
c0010d63:	83 c4 10             	add    esp,0x10
c0010d66:	89 c2                	mov    edx,eax
c0010d68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d6b:	89 10                	mov    DWORD PTR [eax],edx
c0010d6d:	e8 fa 6a 00 00       	call   c001786c <CPU::current()>
c0010d72:	05 78 01 00 00       	add    eax,0x178
c0010d77:	83 ec 0c             	sub    esp,0xc
c0010d7a:	50                   	push   eax
c0010d7b:	e8 32 dc ff ff       	call   c000e9b2 <GDT::flush()>
c0010d80:	83 c4 10             	add    esp,0x10
c0010d83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d86:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d88:	83 ec 08             	sub    esp,0x8
c0010d8b:	50                   	push   eax
c0010d8c:	68 48 6d 02 c0       	push   0xc0026d48
c0010d91:	e8 bb 14 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0010d96:	83 c4 10             	add    esp,0x10
c0010d99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d9e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010da1:	c9                   	leave  
c0010da2:	c3                   	ret    
c0010da3:	90                   	nop

c0010da4 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010da4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010da8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010dac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010daf:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010db4:	75 08                	jne    c0010dbe <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010db6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010dbc:	eb 38                	jmp    c0010df6 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010dbe:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010dc3:	75 17                	jne    c0010ddc <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010dc5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010dca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010dcd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010dd3:	8b 10                	mov    edx,DWORD PTR [eax]
c0010dd5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010dd9:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010ddc:	89 c1                	mov    ecx,eax
c0010dde:	83 e1 fd             	and    ecx,0xfffffffd
c0010de1:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010de7:	74 cd                	je     c0010db6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010de9:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010dee:	83 e0 ef             	and    eax,0xffffffef
c0010df1:	83 f8 08             	cmp    eax,0x8
c0010df4:	76 c0                	jbe    c0010db6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010df6:	31 c0                	xor    eax,eax
c0010df8:	c3                   	ret    
c0010df9:	90                   	nop

c0010dfa <ReservedFilename::isAtty()>:
c0010dfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dfe:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010e01:	31 c0                	xor    eax,eax
c0010e03:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010e09:	74 09                	je     c0010e14 <ReservedFilename::isAtty()+0x1a>
c0010e0b:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010e11:	0f 94 c0             	sete   al
c0010e14:	c3                   	ret    
c0010e15:	90                   	nop

c0010e16 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010e16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e1a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010e1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e21:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010e25:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010e2a:	75 08                	jne    c0010e34 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010e2c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010e32:	eb 3d                	jmp    c0010e71 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010e34:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010e39:	75 17                	jne    c0010e52 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010e3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e40:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010e43:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010e49:	8b 10                	mov    edx,DWORD PTR [eax]
c0010e4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010e4f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010e52:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010e57:	75 04                	jne    c0010e5d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010e59:	89 0a                	mov    DWORD PTR [edx],ecx
c0010e5b:	eb 14                	jmp    c0010e71 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010e5d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010e62:	74 c8                	je     c0010e2c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010e64:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010e69:	83 e0 ef             	and    eax,0xffffffef
c0010e6c:	83 f8 08             	cmp    eax,0x8
c0010e6f:	76 bb                	jbe    c0010e2c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010e71:	31 c0                	xor    eax,eax
c0010e73:	c3                   	ret    

c0010e74 <UnixFile::getFileDescriptor()>:
c0010e74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e7b:	c3                   	ret    

c0010e7c <UnixFile::UnixFile(int)>:
c0010e7c:	53                   	push   ebx
c0010e7d:	83 ec 18             	sub    esp,0x18
c0010e80:	ba 34 6e 02 c0       	mov    edx,0xc0026e34
c0010e85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e89:	89 10                	mov    DWORD PTR [eax],edx
c0010e8b:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c0010e93:	0f 8f 4d 01 00 00    	jg     c0010fe6 <UnixFile::UnixFile(int)+0x16a>
c0010e99:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c0010e9e:	8d 50 01             	lea    edx,[eax+0x1]
c0010ea1:	89 15 20 94 02 c0    	mov    DWORD PTR ds:0xc0029420,edx
c0010ea7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010eab:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010eae:	83 ec 08             	sub    esp,0x8
c0010eb1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010eb5:	68 58 a5 02 c0       	push   0xc002a558
c0010eba:	e8 2b 42 01 00       	call   c00250ea <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010ebf:	83 c4 10             	add    esp,0x10
c0010ec2:	a0 54 a5 02 c0       	mov    al,ds:0xc002a554
c0010ec7:	83 f0 01             	xor    eax,0x1
c0010eca:	84 c0                	test   al,al
c0010ecc:	0f 84 15 01 00 00    	je     c0010fe7 <UnixFile::UnixFile(int)+0x16b>
c0010ed2:	c6 05 54 a5 02 c0 01 	mov    BYTE PTR ds:0xc002a554,0x1
c0010ed9:	83 ec 0c             	sub    esp,0xc
c0010edc:	6a 0c                	push   0xc
c0010ede:	e8 7f 12 00 00       	call   c0012162 <operator new(unsigned long)>
c0010ee3:	83 c4 10             	add    esp,0x10
c0010ee6:	89 c3                	mov    ebx,eax
c0010ee8:	83 ec 08             	sub    esp,0x8
c0010eeb:	68 03 ff ff 0f       	push   0xfffff03
c0010ef0:	53                   	push   ebx
c0010ef1:	e8 f6 00 00 00       	call   c0010fec <ReservedFilename::ReservedFilename(int)>
c0010ef6:	83 c4 10             	add    esp,0x10
c0010ef9:	89 1d 4c a5 02 c0    	mov    DWORD PTR ds:0xc002a54c,ebx
c0010eff:	83 ec 0c             	sub    esp,0xc
c0010f02:	6a 0c                	push   0xc
c0010f04:	e8 59 12 00 00       	call   c0012162 <operator new(unsigned long)>
c0010f09:	83 c4 10             	add    esp,0x10
c0010f0c:	89 c3                	mov    ebx,eax
c0010f0e:	83 ec 08             	sub    esp,0x8
c0010f11:	68 01 ff ff 0f       	push   0xfffff01
c0010f16:	53                   	push   ebx
c0010f17:	e8 d0 00 00 00       	call   c0010fec <ReservedFilename::ReservedFilename(int)>
c0010f1c:	83 c4 10             	add    esp,0x10
c0010f1f:	89 1d 50 a5 02 c0    	mov    DWORD PTR ds:0xc002a550,ebx
c0010f25:	83 ec 0c             	sub    esp,0xc
c0010f28:	6a 0c                	push   0xc
c0010f2a:	e8 33 12 00 00       	call   c0012162 <operator new(unsigned long)>
c0010f2f:	83 c4 10             	add    esp,0x10
c0010f32:	89 c3                	mov    ebx,eax
c0010f34:	83 ec 08             	sub    esp,0x8
c0010f37:	68 00 ff ff 0f       	push   0xfffff00
c0010f3c:	53                   	push   ebx
c0010f3d:	e8 aa 00 00 00       	call   c0010fec <ReservedFilename::ReservedFilename(int)>
c0010f42:	83 c4 10             	add    esp,0x10
c0010f45:	89 1d 44 a5 02 c0    	mov    DWORD PTR ds:0xc002a544,ebx
c0010f4b:	83 ec 0c             	sub    esp,0xc
c0010f4e:	6a 0c                	push   0xc
c0010f50:	e8 0d 12 00 00       	call   c0012162 <operator new(unsigned long)>
c0010f55:	83 c4 10             	add    esp,0x10
c0010f58:	89 c3                	mov    ebx,eax
c0010f5a:	83 ec 08             	sub    esp,0x8
c0010f5d:	68 02 ff ff 0f       	push   0xfffff02
c0010f62:	53                   	push   ebx
c0010f63:	e8 84 00 00 00       	call   c0010fec <ReservedFilename::ReservedFilename(int)>
c0010f68:	83 c4 10             	add    esp,0x10
c0010f6b:	89 1d 48 a5 02 c0    	mov    DWORD PTR ds:0xc002a548,ebx
c0010f71:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010f79:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0010f7e:	7f 67                	jg     c0010fe7 <UnixFile::UnixFile(int)+0x16b>
c0010f80:	83 ec 0c             	sub    esp,0xc
c0010f83:	6a 0c                	push   0xc
c0010f85:	e8 d8 11 00 00       	call   c0012162 <operator new(unsigned long)>
c0010f8a:	83 c4 10             	add    esp,0x10
c0010f8d:	89 c3                	mov    ebx,eax
c0010f8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f93:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010f98:	83 ec 08             	sub    esp,0x8
c0010f9b:	50                   	push   eax
c0010f9c:	53                   	push   ebx
c0010f9d:	e8 4a 00 00 00       	call   c0010fec <ReservedFilename::ReservedFilename(int)>
c0010fa2:	83 c4 10             	add    esp,0x10
c0010fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fa9:	89 1c 85 20 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ae0],ebx
c0010fb0:	83 ec 0c             	sub    esp,0xc
c0010fb3:	6a 0c                	push   0xc
c0010fb5:	e8 a8 11 00 00       	call   c0012162 <operator new(unsigned long)>
c0010fba:	83 c4 10             	add    esp,0x10
c0010fbd:	89 c3                	mov    ebx,eax
c0010fbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fc3:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010fc8:	83 ec 08             	sub    esp,0x8
c0010fcb:	50                   	push   eax
c0010fcc:	53                   	push   ebx
c0010fcd:	e8 1a 00 00 00       	call   c0010fec <ReservedFilename::ReservedFilename(int)>
c0010fd2:	83 c4 10             	add    esp,0x10
c0010fd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fd9:	89 1c 85 e0 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5b20],ebx
c0010fe0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010fe4:	eb 93                	jmp    c0010f79 <UnixFile::UnixFile(int)+0xfd>
c0010fe6:	90                   	nop
c0010fe7:	83 c4 18             	add    esp,0x18
c0010fea:	5b                   	pop    ebx
c0010feb:	c3                   	ret    

c0010fec <ReservedFilename::ReservedFilename(int)>:
c0010fec:	83 ec 0c             	sub    esp,0xc
c0010fef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ff3:	83 ec 08             	sub    esp,0x8
c0010ff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ffa:	50                   	push   eax
c0010ffb:	e8 7c fe ff ff       	call   c0010e7c <UnixFile::UnixFile(int)>
c0011000:	83 c4 10             	add    esp,0x10
c0011003:	ba 50 6e 02 c0       	mov    edx,0xc0026e50
c0011008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001100c:	89 10                	mov    DWORD PTR [eax],edx
c001100e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011012:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011016:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011019:	90                   	nop
c001101a:	83 c4 0c             	add    esp,0xc
c001101d:	c3                   	ret    

c001101e <UnixFile::~UnixFile()>:
c001101e:	83 ec 1c             	sub    esp,0x1c
c0011021:	ba 34 6e 02 c0       	mov    edx,0xc0026e34
c0011026:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001102a:	89 10                	mov    DWORD PTR [eax],edx
c001102c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011030:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011033:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011038:	7f 73                	jg     c00110ad <UnixFile::~UnixFile()+0x8f>
c001103a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011042:	83 ec 0c             	sub    esp,0xc
c0011045:	68 58 a5 02 c0       	push   0xc002a558
c001104a:	e8 6f 41 01 00       	call   c00251be <LinkedList<UnixFile>::getFirstElement()>
c001104f:	83 c4 10             	add    esp,0x10
c0011052:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011056:	83 ec 0c             	sub    esp,0xc
c0011059:	68 58 a5 02 c0       	push   0xc002a558
c001105e:	e8 63 41 01 00       	call   c00251c6 <LinkedList<UnixFile>::removeFirst()>
c0011063:	83 c4 10             	add    esp,0x10
c0011066:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001106a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001106e:	74 40                	je     c00110b0 <UnixFile::~UnixFile()+0x92>
c0011070:	83 ec 08             	sub    esp,0x8
c0011073:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011077:	68 58 a5 02 c0       	push   0xc002a558
c001107c:	e8 69 40 01 00       	call   c00250ea <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011081:	83 c4 10             	add    esp,0x10
c0011084:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011088:	8d 50 01             	lea    edx,[eax+0x1]
c001108b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001108f:	3d 88 13 00 00       	cmp    eax,0x1388
c0011094:	0f 94 c0             	sete   al
c0011097:	84 c0                	test   al,al
c0011099:	74 a7                	je     c0011042 <UnixFile::~UnixFile()+0x24>
c001109b:	83 ec 0c             	sub    esp,0xc
c001109e:	68 0c 6e 02 c0       	push   0xc0026e0c
c00110a3:	e8 47 79 00 00       	call   c00189ef <Krnl::panic(char const*)>
c00110a8:	83 c4 10             	add    esp,0x10
c00110ab:	eb 95                	jmp    c0011042 <UnixFile::~UnixFile()+0x24>
c00110ad:	90                   	nop
c00110ae:	eb 01                	jmp    c00110b1 <UnixFile::~UnixFile()+0x93>
c00110b0:	90                   	nop
c00110b1:	90                   	nop
c00110b2:	83 c4 1c             	add    esp,0x1c
c00110b5:	c3                   	ret    

c00110b6 <UnixFile::~UnixFile()>:
c00110b6:	83 ec 0c             	sub    esp,0xc
c00110b9:	83 ec 0c             	sub    esp,0xc
c00110bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110c0:	e8 59 ff ff ff       	call   c001101e <UnixFile::~UnixFile()>
c00110c5:	83 c4 10             	add    esp,0x10
c00110c8:	83 ec 08             	sub    esp,0x8
c00110cb:	6a 0c                	push   0xc
c00110cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110d1:	e8 9b 10 00 00       	call   c0012171 <operator delete(void*, unsigned long)>
c00110d6:	83 c4 10             	add    esp,0x10
c00110d9:	83 c4 0c             	add    esp,0xc
c00110dc:	c3                   	ret    
c00110dd:	90                   	nop

c00110de <ReservedFilename::~ReservedFilename()>:
c00110de:	83 ec 0c             	sub    esp,0xc
c00110e1:	ba 50 6e 02 c0       	mov    edx,0xc0026e50
c00110e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110ea:	89 10                	mov    DWORD PTR [eax],edx
c00110ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110f0:	83 ec 0c             	sub    esp,0xc
c00110f3:	50                   	push   eax
c00110f4:	e8 25 ff ff ff       	call   c001101e <UnixFile::~UnixFile()>
c00110f9:	83 c4 10             	add    esp,0x10
c00110fc:	90                   	nop
c00110fd:	83 c4 0c             	add    esp,0xc
c0011100:	c3                   	ret    
c0011101:	90                   	nop

c0011102 <ReservedFilename::~ReservedFilename()>:
c0011102:	83 ec 0c             	sub    esp,0xc
c0011105:	83 ec 0c             	sub    esp,0xc
c0011108:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001110c:	e8 cd ff ff ff       	call   c00110de <ReservedFilename::~ReservedFilename()>
c0011111:	83 c4 10             	add    esp,0x10
c0011114:	83 ec 08             	sub    esp,0x8
c0011117:	6a 0c                	push   0xc
c0011119:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001111d:	e8 4f 10 00 00       	call   c0012171 <operator delete(void*, unsigned long)>
c0011122:	83 c4 10             	add    esp,0x10
c0011125:	83 c4 0c             	add    esp,0xc
c0011128:	c3                   	ret    

c0011129 <getFromFileDescriptor(int)>:
c0011129:	53                   	push   ebx
c001112a:	83 ec 08             	sub    esp,0x8
c001112d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011131:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011137:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001113d:	7f 2c                	jg     c001116b <getFromFileDescriptor(int)+0x42>
c001113f:	83 ec 0c             	sub    esp,0xc
c0011142:	68 58 a5 02 c0       	push   0xc002a558
c0011147:	e8 72 40 01 00       	call   c00251be <LinkedList<UnixFile>::getFirstElement()>
c001114c:	83 c4 10             	add    esp,0x10
c001114f:	85 c0                	test   eax,eax
c0011151:	75 04                	jne    c0011157 <getFromFileDescriptor(int)+0x2e>
c0011153:	31 c0                	xor    eax,eax
c0011155:	eb 6e                	jmp    c00111c5 <getFromFileDescriptor(int)+0x9c>
c0011157:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001115a:	74 69                	je     c00111c5 <getFromFileDescriptor(int)+0x9c>
c001115c:	52                   	push   edx
c001115d:	52                   	push   edx
c001115e:	50                   	push   eax
c001115f:	68 58 a5 02 c0       	push   0xc002a558
c0011164:	e8 ff 40 01 00       	call   c0025268 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011169:	eb e1                	jmp    c001114c <getFromFileDescriptor(int)+0x23>
c001116b:	a1 4c a5 02 c0       	mov    eax,ds:0xc002a54c
c0011170:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011176:	74 4d                	je     c00111c5 <getFromFileDescriptor(int)+0x9c>
c0011178:	a1 50 a5 02 c0       	mov    eax,ds:0xc002a550
c001117d:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011183:	74 40                	je     c00111c5 <getFromFileDescriptor(int)+0x9c>
c0011185:	a1 48 a5 02 c0       	mov    eax,ds:0xc002a548
c001118a:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011190:	74 33                	je     c00111c5 <getFromFileDescriptor(int)+0x9c>
c0011192:	a1 44 a5 02 c0       	mov    eax,ds:0xc002a544
c0011197:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001119d:	74 26                	je     c00111c5 <getFromFileDescriptor(int)+0x9c>
c001119f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00111a5:	83 f8 08             	cmp    eax,0x8
c00111a8:	77 09                	ja     c00111b3 <getFromFileDescriptor(int)+0x8a>
c00111aa:	8b 04 85 20 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ae0]
c00111b1:	eb 12                	jmp    c00111c5 <getFromFileDescriptor(int)+0x9c>
c00111b3:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00111b9:	83 fb 08             	cmp    ebx,0x8
c00111bc:	77 95                	ja     c0011153 <getFromFileDescriptor(int)+0x2a>
c00111be:	8b 04 9d e0 a4 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5b20]
c00111c5:	83 c4 08             	add    esp,0x8
c00111c8:	5b                   	pop    ebx
c00111c9:	c3                   	ret    

c00111ca <__static_initialization_and_destruction_0(int, int)>:
c00111ca:	83 ec 0c             	sub    esp,0xc
c00111cd:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00111d2:	75 34                	jne    c0011208 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00111d4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00111dc:	75 2a                	jne    c0011208 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00111de:	83 ec 0c             	sub    esp,0xc
c00111e1:	68 58 a5 02 c0       	push   0xc002a558
c00111e6:	e8 a7 3e 01 00       	call   c0025092 <LinkedList<UnixFile>::LinkedList()>
c00111eb:	83 c4 10             	add    esp,0x10
c00111ee:	83 ec 04             	sub    esp,0x4
c00111f1:	68 9c 93 02 c0       	push   0xc002939c
c00111f6:	68 58 a5 02 c0       	push   0xc002a558
c00111fb:	68 90 50 02 c0       	push   0xc0025090
c0011200:	e8 e8 0e 00 00       	call   c00120ed <__cxa_atexit>
c0011205:	83 c4 10             	add    esp,0x10
c0011208:	90                   	nop
c0011209:	83 c4 0c             	add    esp,0xc
c001120c:	c3                   	ret    

c001120d <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001120d:	83 ec 0c             	sub    esp,0xc
c0011210:	83 ec 08             	sub    esp,0x8
c0011213:	68 ff ff 00 00       	push   0xffff
c0011218:	6a 01                	push   0x1
c001121a:	e8 ab ff ff ff       	call   c00111ca <__static_initialization_and_destruction_0(int, int)>
c001121f:	83 c4 10             	add    esp,0x10
c0011222:	83 c4 0c             	add    esp,0xc
c0011225:	c3                   	ret    

c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011226:	53                   	push   ebx
c0011227:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001122b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001122f:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011235:	89 c8                	mov    eax,ecx
c0011237:	d1 e8                	shr    eax,1
c0011239:	03 05 28 94 02 c0    	add    eax,DWORD PTR ds:0xc0029428
c001123f:	83 e1 01             	and    ecx,0x1
c0011242:	8a 10                	mov    dl,BYTE PTR [eax]
c0011244:	75 09                	jne    c001124f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011246:	83 e2 f0             	and    edx,0xfffffff0
c0011249:	09 da                	or     edx,ebx
c001124b:	88 10                	mov    BYTE PTR [eax],dl
c001124d:	5b                   	pop    ebx
c001124e:	c3                   	ret    
c001124f:	c1 e3 04             	shl    ebx,0x4
c0011252:	83 e2 0f             	and    edx,0xf
c0011255:	09 da                	or     edx,ebx
c0011257:	88 10                	mov    BYTE PTR [eax],dl
c0011259:	5b                   	pop    ebx
c001125a:	c3                   	ret    

c001125b <Virt::getPageState(unsigned long)>:
c001125b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001125f:	8b 0d 28 94 02 c0    	mov    ecx,DWORD PTR ds:0xc0029428
c0011265:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001126b:	89 d0                	mov    eax,edx
c001126d:	d1 e8                	shr    eax,1
c001126f:	83 e2 01             	and    edx,0x1
c0011272:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011275:	75 04                	jne    c001127b <Virt::getPageState(unsigned long)+0x20>
c0011277:	83 e0 0f             	and    eax,0xf
c001127a:	c3                   	ret    
c001127b:	c0 e8 04             	shr    al,0x4
c001127e:	c3                   	ret    

c001127f <Virt::allocateKernelVirtualPages(int)>:
c001127f:	55                   	push   ebp
c0011280:	31 ed                	xor    ebp,ebp
c0011282:	57                   	push   edi
c0011283:	56                   	push   esi
c0011284:	53                   	push   ebx
c0011285:	31 db                	xor    ebx,ebx
c0011287:	83 ec 1c             	sub    esp,0x1c
c001128a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001128e:	8b 3d 24 94 02 c0    	mov    edi,DWORD PTR ds:0xc0029424
c0011294:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011299:	57                   	push   edi
c001129a:	e8 bc ff ff ff       	call   c001125b <Virt::getPageState(unsigned long)>
c001129f:	5a                   	pop    edx
c00112a0:	84 c0                	test   al,al
c00112a2:	75 3a                	jne    c00112de <Virt::allocateKernelVirtualPages(int)+0x5f>
c00112a4:	85 db                	test   ebx,ebx
c00112a6:	75 02                	jne    c00112aa <Virt::allocateKernelVirtualPages(int)+0x2b>
c00112a8:	89 fd                	mov    ebp,edi
c00112aa:	43                   	inc    ebx
c00112ab:	39 f3                	cmp    ebx,esi
c00112ad:	74 5a                	je     c0011309 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00112af:	47                   	inc    edi
c00112b0:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00112b6:	76 31                	jbe    c00112e9 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00112b8:	c7 05 24 94 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0029424,0xc8000
c00112c2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00112c7:	75 28                	jne    c00112f1 <Virt::allocateKernelVirtualPages(int)+0x72>
c00112c9:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00112ce:	bf 00 80 0c 00       	mov    edi,0xc8000
c00112d3:	57                   	push   edi
c00112d4:	e8 82 ff ff ff       	call   c001125b <Virt::getPageState(unsigned long)>
c00112d9:	5a                   	pop    edx
c00112da:	84 c0                	test   al,al
c00112dc:	74 c6                	je     c00112a4 <Virt::allocateKernelVirtualPages(int)+0x25>
c00112de:	31 db                	xor    ebx,ebx
c00112e0:	47                   	inc    edi
c00112e1:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00112e7:	77 cf                	ja     c00112b8 <Virt::allocateKernelVirtualPages(int)+0x39>
c00112e9:	89 3d 24 94 02 c0    	mov    DWORD PTR ds:0xc0029424,edi
c00112ef:	eb a8                	jmp    c0011299 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00112f1:	83 ec 0c             	sub    esp,0xc
c00112f4:	68 64 6e 02 c0       	push   0xc0026e64
c00112f9:	e8 f1 76 00 00       	call   c00189ef <Krnl::panic(char const*)>
c00112fe:	8b 3d 24 94 02 c0    	mov    edi,DWORD PTR ds:0xc0029424
c0011304:	83 c4 10             	add    esp,0x10
c0011307:	eb 90                	jmp    c0011299 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011309:	89 2d 24 94 02 c0    	mov    DWORD PTR ds:0xc0029424,ebp
c001130f:	4b                   	dec    ebx
c0011310:	74 5f                	je     c0011371 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011312:	85 f6                	test   esi,esi
c0011314:	74 3d                	je     c0011353 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011316:	89 e8                	mov    eax,ebp
c0011318:	31 db                	xor    ebx,ebx
c001131a:	8d 7e ff             	lea    edi,[esi-0x1]
c001131d:	eb 14                	jmp    c0011333 <Virt::allocateKernelVirtualPages(int)+0xb4>
c001131f:	6a 01                	push   0x1
c0011321:	43                   	inc    ebx
c0011322:	50                   	push   eax
c0011323:	e8 fe fe ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011328:	58                   	pop    eax
c0011329:	39 f3                	cmp    ebx,esi
c001132b:	5a                   	pop    edx
c001132c:	74 25                	je     c0011353 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001132e:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c0011333:	8d 50 01             	lea    edx,[eax+0x1]
c0011336:	85 db                	test   ebx,ebx
c0011338:	89 15 24 94 02 c0    	mov    DWORD PTR ds:0xc0029424,edx
c001133e:	74 20                	je     c0011360 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011340:	39 df                	cmp    edi,ebx
c0011342:	75 db                	jne    c001131f <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011344:	6a 03                	push   0x3
c0011346:	43                   	inc    ebx
c0011347:	50                   	push   eax
c0011348:	e8 d9 fe ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001134d:	59                   	pop    ecx
c001134e:	39 f3                	cmp    ebx,esi
c0011350:	58                   	pop    eax
c0011351:	75 db                	jne    c001132e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011353:	83 c4 1c             	add    esp,0x1c
c0011356:	89 e8                	mov    eax,ebp
c0011358:	5b                   	pop    ebx
c0011359:	c1 e0 0c             	shl    eax,0xc
c001135c:	5e                   	pop    esi
c001135d:	5f                   	pop    edi
c001135e:	5d                   	pop    ebp
c001135f:	c3                   	ret    
c0011360:	6a 02                	push   0x2
c0011362:	bb 01 00 00 00       	mov    ebx,0x1
c0011367:	50                   	push   eax
c0011368:	e8 b9 fe ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001136d:	58                   	pop    eax
c001136e:	5a                   	pop    edx
c001136f:	eb bd                	jmp    c001132e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011371:	6a 04                	push   0x4
c0011373:	8d 45 01             	lea    eax,[ebp+0x1]
c0011376:	55                   	push   ebp
c0011377:	a3 24 94 02 c0       	mov    ds:0xc0029424,eax
c001137c:	e8 a5 fe ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011381:	59                   	pop    ecx
c0011382:	89 e8                	mov    eax,ebp
c0011384:	5b                   	pop    ebx
c0011385:	c1 e0 0c             	shl    eax,0xc
c0011388:	83 c4 1c             	add    esp,0x1c
c001138b:	5b                   	pop    ebx
c001138c:	5e                   	pop    esi
c001138d:	5f                   	pop    edi
c001138e:	5d                   	pop    ebp
c001138f:	c3                   	ret    

c0011390 <Virt::virtualMemorySetup()>:
c0011390:	53                   	push   ebx
c0011391:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011396:	83 ec 08             	sub    esp,0x8
c0011399:	6a 0f                	push   0xf
c001139b:	53                   	push   ebx
c001139c:	43                   	inc    ebx
c001139d:	e8 84 fe ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113a2:	59                   	pop    ecx
c00113a3:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113a9:	58                   	pop    eax
c00113aa:	75 ed                	jne    c0011399 <Virt::virtualMemorySetup()+0x9>
c00113ac:	83 ec 08             	sub    esp,0x8
c00113af:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113b4:	68 00 00 00 c8       	push   0xc8000000
c00113b9:	68 eb 6f 02 c0       	push   0xc0026feb
c00113be:	e8 8e 0e 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00113c3:	58                   	pop    eax
c00113c4:	5a                   	pop    edx
c00113c5:	68 00 f0 ff ef       	push   0xeffff000
c00113ca:	68 ff 6f 02 c0       	push   0xc0026fff
c00113cf:	e8 7d 0e 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00113d4:	83 c4 10             	add    esp,0x10
c00113d7:	83 ec 08             	sub    esp,0x8
c00113da:	6a 00                	push   0x0
c00113dc:	53                   	push   ebx
c00113dd:	43                   	inc    ebx
c00113de:	e8 43 fe ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113e3:	83 c4 10             	add    esp,0x10
c00113e6:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113ec:	75 e9                	jne    c00113d7 <Virt::virtualMemorySetup()+0x47>
c00113ee:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00113f3:	83 ec 08             	sub    esp,0x8
c00113f6:	6a 0f                	push   0xf
c00113f8:	53                   	push   ebx
c00113f9:	43                   	inc    ebx
c00113fa:	e8 27 fe ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113ff:	83 c4 10             	add    esp,0x10
c0011402:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011408:	75 e9                	jne    c00113f3 <Virt::virtualMemorySetup()+0x63>
c001140a:	83 c4 08             	add    esp,0x8
c001140d:	5b                   	pop    ebx
c001140e:	c3                   	ret    

c001140f <Virt::getAKernelVAS()>:
c001140f:	a1 64 a5 02 c0       	mov    eax,ds:0xc002a564
c0011414:	c3                   	ret    

c0011415 <Virt::setupPageSwapping(int)>:
c0011415:	57                   	push   edi
c0011416:	56                   	push   esi
c0011417:	53                   	push   ebx
c0011418:	83 ec 1c             	sub    esp,0x1c
c001141b:	68 14 01 00 00       	push   0x114
c0011420:	e8 3d 0d 00 00       	call   c0012162 <operator new(unsigned long)>
c0011425:	83 c4 0c             	add    esp,0xc
c0011428:	89 c6                	mov    esi,eax
c001142a:	ff 35 54 b8 02 c0    	push   DWORD PTR ds:0xc002b854
c0011430:	68 13 70 02 c0       	push   0xc0027013
c0011435:	50                   	push   eax
c0011436:	e8 45 13 00 00       	call   c0012780 <File::File(char const*, Process*)>
c001143b:	89 34 24             	mov    DWORD PTR [esp],esi
c001143e:	e8 19 15 00 00       	call   c001295c <File::unlink()>
c0011443:	58                   	pop    eax
c0011444:	5a                   	pop    edx
c0011445:	6a 12                	push   0x12
c0011447:	56                   	push   esi
c0011448:	e8 97 13 00 00       	call   c00127e4 <File::open(FileOpenMode)>
c001144d:	83 c4 10             	add    esp,0x10
c0011450:	85 c0                	test   eax,eax
c0011452:	0f 85 bf 00 00 00    	jne    c0011517 <Virt::setupPageSwapping(int)+0x102>
c0011458:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001145c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011464:	c1 e3 08             	shl    ebx,0x8
c0011467:	83 ec 0c             	sub    esp,0xc
c001146a:	68 00 00 01 00       	push   0x10000
c001146f:	e8 d4 dc ff ff       	call   c000f148 <malloc>
c0011474:	83 c4 0c             	add    esp,0xc
c0011477:	89 c7                	mov    edi,eax
c0011479:	68 00 00 01 00       	push   0x10000
c001147e:	6a 00                	push   0x0
c0011480:	50                   	push   eax
c0011481:	e8 48 f2 fe ff       	call   c00006ce <memset>
c0011486:	83 c4 10             	add    esp,0x10
c0011489:	85 db                	test   ebx,ebx
c001148b:	79 03                	jns    c0011490 <Virt::setupPageSwapping(int)+0x7b>
c001148d:	83 c3 0f             	add    ebx,0xf
c0011490:	c1 fb 04             	sar    ebx,0x4
c0011493:	4b                   	dec    ebx
c0011494:	83 fb ff             	cmp    ebx,0xffffffff
c0011497:	74 4b                	je     c00114e4 <Virt::setupPageSwapping(int)+0xcf>
c0011499:	83 ec 0c             	sub    esp,0xc
c001149c:	8b 06                	mov    eax,DWORD PTR [esi]
c001149e:	8d 54 24 18          	lea    edx,[esp+0x18]
c00114a2:	52                   	push   edx
c00114a3:	57                   	push   edi
c00114a4:	6a 00                	push   0x0
c00114a6:	68 00 00 01 00       	push   0x10000
c00114ab:	56                   	push   esi
c00114ac:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00114af:	83 c4 20             	add    esp,0x20
c00114b2:	85 c0                	test   eax,eax
c00114b4:	75 4e                	jne    c0011504 <Virt::setupPageSwapping(int)+0xef>
c00114b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114ba:	3d 00 00 01 00       	cmp    eax,0x10000
c00114bf:	74 d2                	je     c0011493 <Virt::setupPageSwapping(int)+0x7e>
c00114c1:	83 ec 08             	sub    esp,0x8
c00114c4:	4b                   	dec    ebx
c00114c5:	50                   	push   eax
c00114c6:	68 66 70 02 c0       	push   0xc0027066
c00114cb:	e8 81 0d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00114d0:	c7 04 24 6f 70 02 c0 	mov    DWORD PTR [esp],0xc002706f
c00114d7:	e8 13 75 00 00       	call   c00189ef <Krnl::panic(char const*)>
c00114dc:	83 c4 10             	add    esp,0x10
c00114df:	83 fb ff             	cmp    ebx,0xffffffff
c00114e2:	75 b5                	jne    c0011499 <Virt::setupPageSwapping(int)+0x84>
c00114e4:	83 ec 0c             	sub    esp,0xc
c00114e7:	56                   	push   esi
c00114e8:	e8 55 13 00 00       	call   c0012842 <File::close()>
c00114ed:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114f0:	e8 73 dc ff ff       	call   c000f168 <rfree>
c00114f5:	89 34 24             	mov    DWORD PTR [esp],esi
c00114f8:	8b 06                	mov    eax,DWORD PTR [esi]
c00114fa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114fd:	83 c4 20             	add    esp,0x20
c0011500:	5b                   	pop    ebx
c0011501:	5e                   	pop    esi
c0011502:	5f                   	pop    edi
c0011503:	c3                   	ret    
c0011504:	83 ec 08             	sub    esp,0x8
c0011507:	50                   	push   eax
c0011508:	68 4e 70 02 c0       	push   0xc002704e
c001150d:	e8 3f 0d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0011512:	83 c4 10             	add    esp,0x10
c0011515:	eb 9f                	jmp    c00114b6 <Virt::setupPageSwapping(int)+0xa1>
c0011517:	83 ec 08             	sub    esp,0x8
c001151a:	50                   	push   eax
c001151b:	68 2a 70 02 c0       	push   0xc002702a
c0011520:	e8 2c 0d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0011525:	c7 04 24 33 70 02 c0 	mov    DWORD PTR [esp],0xc0027033
c001152c:	e8 be 74 00 00       	call   c00189ef <Krnl::panic(char const*)>
c0011531:	83 c4 10             	add    esp,0x10
c0011534:	e9 1f ff ff ff       	jmp    c0011458 <Virt::setupPageSwapping(int)+0x43>
c0011539:	90                   	nop

c001153a <VAS::VAS()>:
c001153a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001153e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011545:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011549:	a3 64 a5 02 c0       	mov    ds:0xc002a564,eax
c001154e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011552:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011556:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001155a:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001155d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011561:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011568:	90                   	nop
c0011569:	c3                   	ret    

c001156a <VAS::VAS(VAS*)>:
c001156a:	83 ec 0c             	sub    esp,0xc
c001156d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011571:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011578:	83 ec 0c             	sub    esp,0xc
c001157b:	68 84 6e 02 c0       	push   0xc0026e84
c0011580:	e8 6a 74 00 00       	call   c00189ef <Krnl::panic(char const*)>
c0011585:	83 c4 10             	add    esp,0x10
c0011588:	90                   	nop
c0011589:	83 c4 0c             	add    esp,0xc
c001158c:	c3                   	ret    
c001158d:	90                   	nop

c001158e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001158e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011592:	89 c2                	mov    edx,eax
c0011594:	c1 e8 0a             	shr    eax,0xa
c0011597:	c1 ea 16             	shr    edx,0x16
c001159a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001159f:	19 c9                	sbb    ecx,ecx
c00115a1:	c1 e2 0c             	shl    edx,0xc
c00115a4:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00115aa:	25 fc 0f 00 00       	and    eax,0xffc
c00115af:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00115b6:	01 d0                	add    eax,edx
c00115b8:	c3                   	ret    
c00115b9:	90                   	nop

c00115ba <VAS::getPageTableEntry(unsigned long)>:
c00115ba:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115be:	89 ca                	mov    edx,ecx
c00115c0:	c1 e9 0a             	shr    ecx,0xa
c00115c3:	c1 ea 16             	shr    edx,0x16
c00115c6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00115cc:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00115d2:	c1 e0 0c             	shl    eax,0xc
c00115d5:	8d 04 08             	lea    eax,[eax+ecx*1]
c00115d8:	c3                   	ret    

c00115d9 <Virt::freeKernelVirtualPages(unsigned long)>:
c00115d9:	57                   	push   edi
c00115da:	56                   	push   esi
c00115db:	be 01 00 00 00       	mov    esi,0x1
c00115e0:	53                   	push   ebx
c00115e1:	83 ec 10             	sub    esp,0x10
c00115e4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00115e8:	c1 eb 0c             	shr    ebx,0xc
c00115eb:	eb 3f                	jmp    c001162c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00115ed:	e8 1d fe ff ff       	call   c001140f <Virt::getAKernelVAS()>
c00115f2:	83 ec 08             	sub    esp,0x8
c00115f5:	57                   	push   edi
c00115f6:	50                   	push   eax
c00115f7:	e8 be ff ff ff       	call   c00115ba <VAS::getPageTableEntry(unsigned long)>
c00115fc:	83 c4 10             	add    esp,0x10
c00115ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0011601:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011605:	f6 c4 04             	test   ah,0x4
c0011608:	75 5f                	jne    c0011669 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c001160a:	80 fa 04             	cmp    dl,0x4
c001160d:	74 78                	je     c0011687 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c001160f:	80 fa 02             	cmp    dl,0x2
c0011612:	0f 84 88 00 00 00    	je     c00116a0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011618:	80 fa 03             	cmp    dl,0x3
c001161b:	0f 84 ad 00 00 00    	je     c00116ce <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011621:	fe ca                	dec    dl
c0011623:	0f 84 92 00 00 00    	je     c00116bb <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011629:	43                   	inc    ebx
c001162a:	31 f6                	xor    esi,esi
c001162c:	53                   	push   ebx
c001162d:	e8 29 fc ff ff       	call   c001125b <Virt::getPageState(unsigned long)>
c0011632:	5f                   	pop    edi
c0011633:	89 df                	mov    edi,ebx
c0011635:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011639:	c1 e7 0c             	shl    edi,0xc
c001163c:	84 c0                	test   al,al
c001163e:	75 ad                	jne    c00115ed <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011640:	83 ec 0c             	sub    esp,0xc
c0011643:	68 75 70 02 c0       	push   0xc0027075
c0011648:	e8 a2 73 00 00       	call   c00189ef <Krnl::panic(char const*)>
c001164d:	e8 bd fd ff ff       	call   c001140f <Virt::getAKernelVAS()>
c0011652:	5a                   	pop    edx
c0011653:	59                   	pop    ecx
c0011654:	57                   	push   edi
c0011655:	50                   	push   eax
c0011656:	e8 5f ff ff ff       	call   c00115ba <VAS::getPageTableEntry(unsigned long)>
c001165b:	83 c4 10             	add    esp,0x10
c001165e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011660:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011664:	f6 c4 04             	test   ah,0x4
c0011667:	74 c0                	je     c0011629 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011669:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001166d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011672:	83 ec 0c             	sub    esp,0xc
c0011675:	50                   	push   eax
c0011676:	e8 ed df ff ff       	call   c000f668 <Phys::freePage(unsigned long)>
c001167b:	83 c4 10             	add    esp,0x10
c001167e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011682:	80 fa 04             	cmp    dl,0x4
c0011685:	75 88                	jne    c001160f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011687:	89 f0                	mov    eax,esi
c0011689:	84 c0                	test   al,al
c001168b:	75 47                	jne    c00116d4 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c001168d:	c7 44 24 20 a8 6e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0026ea8
c0011695:	83 c4 10             	add    esp,0x10
c0011698:	5b                   	pop    ebx
c0011699:	5e                   	pop    esi
c001169a:	5f                   	pop    edi
c001169b:	e9 4f 73 00 00       	jmp    c00189ef <Krnl::panic(char const*)>
c00116a0:	89 f0                	mov    eax,esi
c00116a2:	84 c0                	test   al,al
c00116a4:	75 15                	jne    c00116bb <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00116a6:	83 ec 0c             	sub    esp,0xc
c00116a9:	68 91 70 02 c0       	push   0xc0027091
c00116ae:	e8 3c 73 00 00       	call   c00189ef <Krnl::panic(char const*)>
c00116b3:	83 c4 10             	add    esp,0x10
c00116b6:	e9 6e ff ff ff       	jmp    c0011629 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116bb:	83 ec 08             	sub    esp,0x8
c00116be:	6a 00                	push   0x0
c00116c0:	53                   	push   ebx
c00116c1:	e8 60 fb ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116c6:	83 c4 10             	add    esp,0x10
c00116c9:	e9 5b ff ff ff       	jmp    c0011629 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116ce:	89 f0                	mov    eax,esi
c00116d0:	84 c0                	test   al,al
c00116d2:	75 15                	jne    c00116e9 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00116d4:	83 ec 08             	sub    esp,0x8
c00116d7:	6a 00                	push   0x0
c00116d9:	53                   	push   ebx
c00116da:	e8 47 fb ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116df:	83 c4 10             	add    esp,0x10
c00116e2:	83 c4 10             	add    esp,0x10
c00116e5:	5b                   	pop    ebx
c00116e6:	5e                   	pop    esi
c00116e7:	5f                   	pop    edi
c00116e8:	c3                   	ret    
c00116e9:	c7 44 24 20 ad 70 02 c0 	mov    DWORD PTR [esp+0x20],0xc00270ad
c00116f1:	83 c4 10             	add    esp,0x10
c00116f4:	5b                   	pop    ebx
c00116f5:	5e                   	pop    esi
c00116f6:	5f                   	pop    edi
c00116f7:	e9 f3 72 00 00       	jmp    c00189ef <Krnl::panic(char const*)>

c00116fc <VAS::freeAllocatedPages(unsigned long)>:
c00116fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011700:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011704:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011708:	74 09                	je     c0011713 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001170a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001170e:	e9 c6 fe ff ff       	jmp    c00115d9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011713:	c7 44 24 04 cc 6e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026ecc
c001171b:	e9 31 0b 00 00       	jmp    c0012251 <Dbg::kprintf(char const*, ...)>

c0011720 <VAS::virtualToPhysical(unsigned long)>:
c0011720:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011724:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011728:	e8 8d fe ff ff       	call   c00115ba <VAS::getPageTableEntry(unsigned long)>
c001172d:	5a                   	pop    edx
c001172e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011730:	59                   	pop    ecx
c0011731:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011736:	c3                   	ret    
c0011737:	90                   	nop

c0011738 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011738:	55                   	push   ebp
c0011739:	57                   	push   edi
c001173a:	56                   	push   esi
c001173b:	53                   	push   ebx
c001173c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011740:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011744:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011748:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001174c:	85 db                	test   ebx,ebx
c001174e:	7e 22                	jle    c0011772 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011750:	c1 e3 0c             	shl    ebx,0xc
c0011753:	01 f3                	add    ebx,esi
c0011755:	56                   	push   esi
c0011756:	81 c6 00 10 00 00    	add    esi,0x1000
c001175c:	55                   	push   ebp
c001175d:	e8 58 fe ff ff       	call   c00115ba <VAS::getPageTableEntry(unsigned long)>
c0011762:	5a                   	pop    edx
c0011763:	59                   	pop    ecx
c0011764:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011766:	21 f9                	and    ecx,edi
c0011768:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001176c:	39 f3                	cmp    ebx,esi
c001176e:	89 08                	mov    DWORD PTR [eax],ecx
c0011770:	75 e3                	jne    c0011755 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011772:	5b                   	pop    ebx
c0011773:	5e                   	pop    esi
c0011774:	5f                   	pop    edi
c0011775:	5d                   	pop    ebp
c0011776:	c3                   	ret    
c0011777:	90                   	nop

c0011778 <VAS::setToWriteCombining(unsigned long, int)>:
c0011778:	83 ec 0c             	sub    esp,0xc
c001177b:	e8 ec 60 00 00       	call   c001786c <CPU::current()>
c0011780:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011787:	75 04                	jne    c001178d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011789:	83 c4 0c             	add    esp,0xc
c001178c:	c3                   	ret    
c001178d:	83 ec 0c             	sub    esp,0xc
c0011790:	68 80 00 00 00       	push   0x80
c0011795:	6a ff                	push   0xffffffff
c0011797:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001179b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001179f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00117a3:	e8 90 ff ff ff       	call   c0011738 <VAS::reflagRange(unsigned long, int, int, int)>
c00117a8:	83 c4 20             	add    esp,0x20
c00117ab:	83 c4 0c             	add    esp,0xc
c00117ae:	c3                   	ret    
c00117af:	90                   	nop

c00117b0 <VAS::mapOtherVASIn(bool, VAS*)>:
c00117b0:	83 ec 0c             	sub    esp,0xc
c00117b3:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00117b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00117bc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00117bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117c3:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00117c6:	19 c0                	sbb    eax,eax
c00117c8:	83 ca 03             	or     edx,0x3
c00117cb:	83 e0 fc             	and    eax,0xfffffffc
c00117ce:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00117d5:	e8 9b 38 01 00       	call   c0025075 <CPU::readCR3()>
c00117da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00117de:	83 c4 0c             	add    esp,0xc
c00117e1:	e9 a1 38 01 00       	jmp    c0025087 <CPU::writeCR3(unsigned long)>

c00117e6 <VAS::~VAS()>:
c00117e6:	83 ec 2c             	sub    esp,0x2c
c00117e9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00117f1:	e8 4c a1 00 00       	call   c001b942 <lockScheduler()>
c00117f6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00117fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00117fd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011800:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011806:	83 ec 04             	sub    esp,0x4
c0011809:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001180d:	6a 01                	push   0x1
c001180f:	50                   	push   eax
c0011810:	e8 9b ff ff ff       	call   c00117b0 <VAS::mapOtherVASIn(bool, VAS*)>
c0011815:	83 c4 10             	add    esp,0x10
c0011818:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011820:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011828:	0f 8f d7 00 00 00    	jg     c0011905 <VAS::~VAS()+0x11f>
c001182e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011832:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011835:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011839:	c1 e2 02             	shl    edx,0x2
c001183c:	01 d0                	add    eax,edx
c001183e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011840:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011848:	83 e0 01             	and    eax,0x1
c001184b:	0f 84 ab 00 00 00    	je     c00118fc <VAS::~VAS()+0x116>
c0011851:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011859:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011861:	7f 75                	jg     c00118d8 <VAS::~VAS()+0xf2>
c0011863:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011867:	c1 e0 0a             	shl    eax,0xa
c001186a:	89 c2                	mov    edx,eax
c001186c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011870:	01 d0                	add    eax,edx
c0011872:	c1 e0 0c             	shl    eax,0xc
c0011875:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011879:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001187e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011880:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011883:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011889:	83 ec 04             	sub    esp,0x4
c001188c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011890:	6a 01                	push   0x1
c0011892:	50                   	push   eax
c0011893:	e8 f6 fc ff ff       	call   c001158e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011898:	83 c4 10             	add    esp,0x10
c001189b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001189f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00118a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00118a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118ad:	25 01 04 00 00       	and    eax,0x401
c00118b2:	3d 01 04 00 00       	cmp    eax,0x401
c00118b7:	75 19                	jne    c00118d2 <VAS::~VAS()+0xec>
c00118b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118bd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118c2:	83 ec 0c             	sub    esp,0xc
c00118c5:	50                   	push   eax
c00118c6:	e8 9d dd ff ff       	call   c000f668 <Phys::freePage(unsigned long)>
c00118cb:	83 c4 10             	add    esp,0x10
c00118ce:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118d2:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00118d6:	eb 81                	jmp    c0011859 <VAS::~VAS()+0x73>
c00118d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118dc:	25 00 04 00 00       	and    eax,0x400
c00118e1:	74 19                	je     c00118fc <VAS::~VAS()+0x116>
c00118e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118e7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118ec:	83 ec 0c             	sub    esp,0xc
c00118ef:	50                   	push   eax
c00118f0:	e8 73 dd ff ff       	call   c000f668 <Phys::freePage(unsigned long)>
c00118f5:	83 c4 10             	add    esp,0x10
c00118f8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118fc:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011900:	e9 1b ff ff ff       	jmp    c0011820 <VAS::~VAS()+0x3a>
c0011905:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011909:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001190c:	83 ec 0c             	sub    esp,0xc
c001190f:	50                   	push   eax
c0011910:	e8 c4 fc ff ff       	call   c00115d9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011915:	83 c4 10             	add    esp,0x10
c0011918:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001191c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001191f:	83 ec 0c             	sub    esp,0xc
c0011922:	50                   	push   eax
c0011923:	e8 40 dd ff ff       	call   c000f668 <Phys::freePage(unsigned long)>
c0011928:	83 c4 10             	add    esp,0x10
c001192b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001192f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011933:	c1 e0 02             	shl    eax,0x2
c0011936:	83 ec 08             	sub    esp,0x8
c0011939:	50                   	push   eax
c001193a:	68 f0 6e 02 c0       	push   0xc0026ef0
c001193f:	e8 0d 09 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0011944:	83 c4 10             	add    esp,0x10
c0011947:	e8 f8 9f 00 00       	call   c001b944 <unlockScheduler()>
c001194c:	90                   	nop
c001194d:	83 c4 2c             	add    esp,0x2c
c0011950:	c3                   	ret    
c0011951:	90                   	nop

c0011952 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011952:	55                   	push   ebp
c0011953:	57                   	push   edi
c0011954:	56                   	push   esi
c0011955:	53                   	push   ebx
c0011956:	83 ec 1c             	sub    esp,0x1c
c0011959:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001195d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011961:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011967:	77 08                	ja     c0011971 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011969:	0f 20 d8             	mov    eax,cr3
c001196c:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c001196f:	75 47                	jne    c00119b8 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011971:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011975:	09 d8                	or     eax,ebx
c0011977:	a9 ff 0f 00 00       	test   eax,0xfff
c001197c:	75 57                	jne    c00119d5 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001197e:	89 de                	mov    esi,ebx
c0011980:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011983:	c1 ee 16             	shr    esi,0x16
c0011986:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001198d:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011991:	74 54                	je     c00119e7 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011993:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011997:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001199d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00119a1:	c1 e6 0c             	shl    esi,0xc
c00119a4:	c1 eb 0a             	shr    ebx,0xa
c00119a7:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00119ad:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00119b0:	83 c4 1c             	add    esp,0x1c
c00119b3:	5b                   	pop    ebx
c00119b4:	5e                   	pop    esi
c00119b5:	5f                   	pop    edi
c00119b6:	5d                   	pop    ebp
c00119b7:	c3                   	ret    
c00119b8:	83 ec 0c             	sub    esp,0xc
c00119bb:	68 10 6f 02 c0       	push   0xc0026f10
c00119c0:	e8 8c 08 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00119c5:	83 c4 10             	add    esp,0x10
c00119c8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119cc:	09 d8                	or     eax,ebx
c00119ce:	a9 ff 0f 00 00       	test   eax,0xfff
c00119d3:	74 a9                	je     c001197e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119d5:	83 ec 0c             	sub    esp,0xc
c00119d8:	68 78 6f 02 c0       	push   0xc0026f78
c00119dd:	e8 0d 70 00 00       	call   c00189ef <Krnl::panic(char const*)>
c00119e2:	83 c4 10             	add    esp,0x10
c00119e5:	eb 97                	jmp    c001197e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119eb:	e8 02 dd ff ff       	call   c000f6f2 <Phys::allocatePage()>
c00119f0:	89 c5                	mov    ebp,eax
c00119f2:	e8 18 fa ff ff       	call   c001140f <Virt::getAKernelVAS()>
c00119f7:	83 ec 0c             	sub    esp,0xc
c00119fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00119fe:	6a 01                	push   0x1
c0011a00:	e8 7a f8 ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c0011a05:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011a0c:	6a 01                	push   0x1
c0011a0e:	50                   	push   eax
c0011a0f:	55                   	push   ebp
c0011a10:	81 cd 07 04 00 00    	or     ebp,0x407
c0011a16:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011a1a:	51                   	push   ecx
c0011a1b:	e8 1e 02 00 00       	call   c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a20:	83 c4 1c             	add    esp,0x1c
c0011a23:	68 00 10 00 00       	push   0x1000
c0011a28:	6a 00                	push   0x0
c0011a2a:	50                   	push   eax
c0011a2b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011a2f:	e8 9a ec fe ff       	call   c00006ce <memset>
c0011a34:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011a38:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011a3b:	e8 99 fb ff ff       	call   c00115d9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011a40:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011a44:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011a47:	83 c4 10             	add    esp,0x10
c0011a4a:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011a4d:	e9 41 ff ff ff       	jmp    c0011993 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011a52 <VAS::allocatePages(int, int)>:
c0011a52:	55                   	push   ebp
c0011a53:	57                   	push   edi
c0011a54:	56                   	push   esi
c0011a55:	53                   	push   ebx
c0011a56:	83 ec 1c             	sub    esp,0x1c
c0011a59:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a5d:	e8 0a 5e 00 00       	call   c001786c <CPU::current()>
c0011a62:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011a68:	83 e0 01             	and    eax,0x1
c0011a6b:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011a6f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011a73:	0f 85 d7 00 00 00    	jne    c0011b50 <VAS::allocatePages(int, int)+0xfe>
c0011a79:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011a7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a80:	85 c0                	test   eax,eax
c0011a82:	0f 84 ac 00 00 00    	je     c0011b34 <VAS::allocatePages(int, int)+0xe2>
c0011a88:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011a8c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a90:	c1 e6 0c             	shl    esi,0xc
c0011a93:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011a97:	85 c0                	test   eax,eax
c0011a99:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011a9c:	7e 33                	jle    c0011ad1 <VAS::allocatePages(int, int)+0x7f>
c0011a9e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011aa2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011aa6:	81 cd 00 04 00 00    	or     ebp,0x400
c0011aac:	e8 41 dc ff ff       	call   c000f6f2 <Phys::allocatePage()>
c0011ab1:	55                   	push   ebp
c0011ab2:	53                   	push   ebx
c0011ab3:	50                   	push   eax
c0011ab4:	57                   	push   edi
c0011ab5:	e8 98 fe ff ff       	call   c0011952 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011aba:	83 c4 10             	add    esp,0x10
c0011abd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ac2:	74 03                	je     c0011ac7 <VAS::allocatePages(int, int)+0x75>
c0011ac4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ac7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011acd:	39 de                	cmp    esi,ebx
c0011acf:	75 db                	jne    c0011aac <VAS::allocatePages(int, int)+0x5a>
c0011ad1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ad6:	74 3f                	je     c0011b17 <VAS::allocatePages(int, int)+0xc5>
c0011ad8:	c1 ee 0a             	shr    esi,0xa
c0011adb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011adf:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011ae5:	c1 eb 0a             	shr    ebx,0xa
c0011ae8:	81 ee 00 00 40 00    	sub    esi,0x400000
c0011aee:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011af4:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011afa:	39 f3                	cmp    ebx,esi
c0011afc:	77 0d                	ja     c0011b0b <VAS::allocatePages(int, int)+0xb9>
c0011afe:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b01:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b07:	39 de                	cmp    esi,ebx
c0011b09:	73 f3                	jae    c0011afe <VAS::allocatePages(int, int)+0xac>
c0011b0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b0f:	83 c4 1c             	add    esp,0x1c
c0011b12:	5b                   	pop    ebx
c0011b13:	5e                   	pop    esi
c0011b14:	5f                   	pop    edi
c0011b15:	5d                   	pop    ebp
c0011b16:	c3                   	ret    
c0011b17:	e8 59 35 01 00       	call   c0025075 <CPU::readCR3()>
c0011b1c:	83 ec 0c             	sub    esp,0xc
c0011b1f:	50                   	push   eax
c0011b20:	e8 62 35 01 00       	call   c0025087 <CPU::writeCR3(unsigned long)>
c0011b25:	83 c4 10             	add    esp,0x10
c0011b28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b2c:	83 c4 1c             	add    esp,0x1c
c0011b2f:	5b                   	pop    ebx
c0011b30:	5e                   	pop    esi
c0011b31:	5f                   	pop    edi
c0011b32:	5d                   	pop    ebp
c0011b33:	c3                   	ret    
c0011b34:	83 ec 0c             	sub    esp,0xc
c0011b37:	68 9c 6f 02 c0       	push   0xc0026f9c
c0011b3c:	e8 ae 6e 00 00       	call   c00189ef <Krnl::panic(char const*)>
c0011b41:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b44:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b48:	83 c4 10             	add    esp,0x10
c0011b4b:	e9 38 ff ff ff       	jmp    c0011a88 <VAS::allocatePages(int, int)+0x36>
c0011b50:	83 ec 0c             	sub    esp,0xc
c0011b53:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011b57:	e8 23 f7 ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c0011b5c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b60:	83 c4 10             	add    esp,0x10
c0011b63:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011b68:	0f 87 94 00 00 00    	ja     c0011c02 <VAS::allocatePages(int, int)+0x1b0>
c0011b6e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011b72:	85 d2                	test   edx,edx
c0011b74:	7e 3c                	jle    c0011bb2 <VAS::allocatePages(int, int)+0x160>
c0011b76:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011b7a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011b7e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b82:	c1 e5 0c             	shl    ebp,0xc
c0011b85:	81 ce 00 04 00 00    	or     esi,0x400
c0011b8b:	01 dd                	add    ebp,ebx
c0011b8d:	e8 60 db ff ff       	call   c000f6f2 <Phys::allocatePage()>
c0011b92:	56                   	push   esi
c0011b93:	53                   	push   ebx
c0011b94:	50                   	push   eax
c0011b95:	57                   	push   edi
c0011b96:	e8 b7 fd ff ff       	call   c0011952 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b9b:	83 c4 10             	add    esp,0x10
c0011b9e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ba3:	74 03                	je     c0011ba8 <VAS::allocatePages(int, int)+0x156>
c0011ba5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ba8:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bae:	39 dd                	cmp    ebp,ebx
c0011bb0:	75 db                	jne    c0011b8d <VAS::allocatePages(int, int)+0x13b>
c0011bb2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bb7:	0f 84 5a ff ff ff    	je     c0011b17 <VAS::allocatePages(int, int)+0xc5>
c0011bbd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011bc1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011bc5:	89 d3                	mov    ebx,edx
c0011bc7:	c1 e0 0c             	shl    eax,0xc
c0011bca:	c1 eb 0a             	shr    ebx,0xa
c0011bcd:	01 d0                	add    eax,edx
c0011bcf:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011bd5:	c1 e8 0a             	shr    eax,0xa
c0011bd8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011bde:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011be3:	2d 00 00 40 00       	sub    eax,0x400000
c0011be8:	39 c3                	cmp    ebx,eax
c0011bea:	0f 87 1b ff ff ff    	ja     c0011b0b <VAS::allocatePages(int, int)+0xb9>
c0011bf0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bf3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bf9:	39 d8                	cmp    eax,ebx
c0011bfb:	73 f3                	jae    c0011bf0 <VAS::allocatePages(int, int)+0x19e>
c0011bfd:	e9 09 ff ff ff       	jmp    c0011b0b <VAS::allocatePages(int, int)+0xb9>
c0011c02:	e8 65 5c 00 00       	call   c001786c <CPU::current()>
c0011c07:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011c0e:	0f 84 5a ff ff ff    	je     c0011b6e <VAS::allocatePages(int, int)+0x11c>
c0011c14:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011c1c:	e9 4d ff ff ff       	jmp    c0011b6e <VAS::allocatePages(int, int)+0x11c>
c0011c21:	90                   	nop

c0011c22 <VAS::setCPUSpecific(unsigned long)>:
c0011c22:	83 ec 0c             	sub    esp,0xc
c0011c25:	6a 05                	push   0x5
c0011c27:	68 00 00 40 c2       	push   0xc2400000
c0011c2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c34:	e8 19 fd ff ff       	call   c0011952 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c39:	83 c4 1c             	add    esp,0x1c
c0011c3c:	c3                   	ret    
c0011c3d:	90                   	nop

c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011c3e:	55                   	push   ebp
c0011c3f:	57                   	push   edi
c0011c40:	56                   	push   esi
c0011c41:	53                   	push   ebx
c0011c42:	83 ec 1c             	sub    esp,0x1c
c0011c45:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011c49:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c4d:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011c51:	e8 16 5c 00 00       	call   c001786c <CPU::current()>
c0011c56:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011c5c:	83 e0 01             	and    eax,0x1
c0011c5f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011c63:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c67:	85 c0                	test   eax,eax
c0011c69:	7e 39                	jle    c0011ca4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c0011c6b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c6f:	89 f3                	mov    ebx,esi
c0011c71:	c1 e0 0c             	shl    eax,0xc
c0011c74:	01 f0                	add    eax,esi
c0011c76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c7a:	55                   	push   ebp
c0011c7b:	53                   	push   ebx
c0011c7c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c80:	29 f0                	sub    eax,esi
c0011c82:	01 d8                	add    eax,ebx
c0011c84:	50                   	push   eax
c0011c85:	57                   	push   edi
c0011c86:	e8 c7 fc ff ff       	call   c0011952 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c8b:	83 c4 10             	add    esp,0x10
c0011c8e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c93:	74 03                	je     c0011c98 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c0011c95:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c98:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c9e:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011ca2:	75 d6                	jne    c0011c7a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c0011ca4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ca9:	74 42                	je     c0011ced <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c0011cab:	89 f3                	mov    ebx,esi
c0011cad:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cb1:	c1 eb 0a             	shr    ebx,0xa
c0011cb4:	c1 e0 0c             	shl    eax,0xc
c0011cb7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011cbd:	01 f0                	add    eax,esi
c0011cbf:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011cc5:	c1 e8 0a             	shr    eax,0xa
c0011cc8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ccd:	2d 00 00 40 00       	sub    eax,0x400000
c0011cd2:	39 c3                	cmp    ebx,eax
c0011cd4:	77 0d                	ja     c0011ce3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c0011cd6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cd9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011cdf:	39 d8                	cmp    eax,ebx
c0011ce1:	73 f3                	jae    c0011cd6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c0011ce3:	83 c4 1c             	add    esp,0x1c
c0011ce6:	89 f0                	mov    eax,esi
c0011ce8:	5b                   	pop    ebx
c0011ce9:	5e                   	pop    esi
c0011cea:	5f                   	pop    edi
c0011ceb:	5d                   	pop    ebp
c0011cec:	c3                   	ret    
c0011ced:	e8 83 33 01 00       	call   c0025075 <CPU::readCR3()>
c0011cf2:	83 ec 0c             	sub    esp,0xc
c0011cf5:	50                   	push   eax
c0011cf6:	e8 8c 33 01 00       	call   c0025087 <CPU::writeCR3(unsigned long)>
c0011cfb:	89 f0                	mov    eax,esi
c0011cfd:	83 c4 10             	add    esp,0x10
c0011d00:	83 c4 1c             	add    esp,0x1c
c0011d03:	5b                   	pop    ebx
c0011d04:	5e                   	pop    esi
c0011d05:	5f                   	pop    edi
c0011d06:	5d                   	pop    ebp
c0011d07:	c3                   	ret    

c0011d08 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011d08:	55                   	push   ebp
c0011d09:	57                   	push   edi
c0011d0a:	56                   	push   esi
c0011d0b:	53                   	push   ebx
c0011d0c:	83 ec 1c             	sub    esp,0x1c
c0011d0f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d13:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011d17:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011d1b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011d1f:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d24:	75 4a                	jne    c0011d70 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011d26:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011d2a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011d2d:	c1 eb 16             	shr    ebx,0x16
c0011d30:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011d37:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011d3b:	74 4d                	je     c0011d8a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011d3d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d41:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011d45:	c1 e8 0a             	shr    eax,0xa
c0011d48:	80 fa 01             	cmp    dl,0x1
c0011d4b:	19 d2                	sbb    edx,edx
c0011d4d:	c1 e3 0c             	shl    ebx,0xc
c0011d50:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011d54:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011d5a:	25 fc 0f 00 00       	and    eax,0xffc
c0011d5f:	01 d8                	add    eax,ebx
c0011d61:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011d68:	83 c4 1c             	add    esp,0x1c
c0011d6b:	5b                   	pop    ebx
c0011d6c:	5e                   	pop    esi
c0011d6d:	5f                   	pop    edi
c0011d6e:	5d                   	pop    ebp
c0011d6f:	c3                   	ret    
c0011d70:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011d74:	83 ec 0c             	sub    esp,0xc
c0011d77:	68 c8 6f 02 c0       	push   0xc0026fc8
c0011d7c:	e8 6e 6c 00 00       	call   c00189ef <Krnl::panic(char const*)>
c0011d81:	83 c4 10             	add    esp,0x10
c0011d84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011d88:	eb 9c                	jmp    c0011d26 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011d8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011d8e:	e8 5f d9 ff ff       	call   c000f6f2 <Phys::allocatePage()>
c0011d93:	89 c5                	mov    ebp,eax
c0011d95:	e8 75 f6 ff ff       	call   c001140f <Virt::getAKernelVAS()>
c0011d9a:	83 ec 0c             	sub    esp,0xc
c0011d9d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011da1:	6a 01                	push   0x1
c0011da3:	e8 d7 f4 ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c0011da8:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011daf:	6a 01                	push   0x1
c0011db1:	50                   	push   eax
c0011db2:	55                   	push   ebp
c0011db3:	81 cd 07 04 00 00    	or     ebp,0x407
c0011db9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011dbd:	51                   	push   ecx
c0011dbe:	e8 7b fe ff ff       	call   c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011dc3:	83 c4 1c             	add    esp,0x1c
c0011dc6:	68 00 10 00 00       	push   0x1000
c0011dcb:	6a 00                	push   0x0
c0011dcd:	50                   	push   eax
c0011dce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011dd2:	e8 f7 e8 fe ff       	call   c00006ce <memset>
c0011dd7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011ddb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011dde:	e8 f6 f7 ff ff       	call   c00115d9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011de3:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011de6:	83 c4 10             	add    esp,0x10
c0011de9:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011dec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011df0:	e9 48 ff ff ff       	jmp    c0011d3d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0011df5:	90                   	nop

c0011df6 <VAS::VAS(bool)>:
c0011df6:	53                   	push   ebx
c0011df7:	83 ec 28             	sub    esp,0x28
c0011dfa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011dfe:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011e02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e06:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e11:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011e15:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011e18:	e8 d5 d8 ff ff       	call   c000f6f2 <Phys::allocatePage()>
c0011e1d:	89 c2                	mov    edx,eax
c0011e1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e23:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011e26:	e8 e4 f5 ff ff       	call   c001140f <Virt::getAKernelVAS()>
c0011e2b:	89 c3                	mov    ebx,eax
c0011e2d:	83 ec 0c             	sub    esp,0xc
c0011e30:	6a 01                	push   0x1
c0011e32:	e8 48 f4 ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c0011e37:	83 c4 10             	add    esp,0x10
c0011e3a:	89 c2                	mov    edx,eax
c0011e3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e40:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011e43:	83 ec 0c             	sub    esp,0xc
c0011e46:	6a 03                	push   0x3
c0011e48:	6a 01                	push   0x1
c0011e4a:	52                   	push   edx
c0011e4b:	50                   	push   eax
c0011e4c:	53                   	push   ebx
c0011e4d:	e8 ec fd ff ff       	call   c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e52:	83 c4 20             	add    esp,0x20
c0011e55:	89 c2                	mov    edx,eax
c0011e57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e5b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011e5e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011e66:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011e6e:	7f 1c                	jg     c0011e8c <VAS::VAS(bool)+0x96>
c0011e70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011e77:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e7b:	c1 e2 02             	shl    edx,0x2
c0011e7e:	01 d0                	add    eax,edx
c0011e80:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011e86:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011e8a:	eb da                	jmp    c0011e66 <VAS::VAS(bool)+0x70>
c0011e8c:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011e94:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011e9c:	7f 71                	jg     c0011f0f <VAS::VAS(bool)+0x119>
c0011e9e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ea2:	2d 00 02 00 00       	sub    eax,0x200
c0011ea7:	c1 e0 0c             	shl    eax,0xc
c0011eaa:	83 c8 03             	or     eax,0x3
c0011ead:	89 c3                	mov    ebx,eax
c0011eaf:	e8 b8 59 00 00       	call   c001786c <CPU::current()>
c0011eb4:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011eba:	83 e0 10             	and    eax,0x10
c0011ebd:	84 c0                	test   al,al
c0011ebf:	74 07                	je     c0011ec8 <VAS::VAS(bool)+0xd2>
c0011ec1:	b8 00 01 00 00       	mov    eax,0x100
c0011ec6:	eb 05                	jmp    c0011ecd <VAS::VAS(bool)+0xd7>
c0011ec8:	b8 00 00 00 00       	mov    eax,0x0
c0011ecd:	09 d8                	or     eax,ebx
c0011ecf:	89 c1                	mov    ecx,eax
c0011ed1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ed5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011ed8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011edc:	c1 e2 02             	shl    edx,0x2
c0011edf:	01 d0                	add    eax,edx
c0011ee1:	89 ca                	mov    edx,ecx
c0011ee3:	89 10                	mov    DWORD PTR [eax],edx
c0011ee5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ee9:	2d 40 03 00 00       	sub    eax,0x340
c0011eee:	83 f8 7f             	cmp    eax,0x7f
c0011ef1:	77 16                	ja     c0011f09 <VAS::VAS(bool)+0x113>
c0011ef3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ef7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011efa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011efe:	c1 e2 02             	shl    edx,0x2
c0011f01:	01 d0                	add    eax,edx
c0011f03:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f09:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f0d:	eb 85                	jmp    c0011e94 <VAS::VAS(bool)+0x9e>
c0011f0f:	e8 58 59 00 00       	call   c001786c <CPU::current()>
c0011f14:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f1a:	83 e0 10             	and    eax,0x10
c0011f1d:	84 c0                	test   al,al
c0011f1f:	74 07                	je     c0011f28 <VAS::VAS(bool)+0x132>
c0011f21:	b8 03 41 00 00       	mov    eax,0x4103
c0011f26:	eb 05                	jmp    c0011f2d <VAS::VAS(bool)+0x137>
c0011f28:	b8 03 40 00 00       	mov    eax,0x4003
c0011f2d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f31:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011f34:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011f3a:	89 02                	mov    DWORD PTR [edx],eax
c0011f3c:	e8 2b 59 00 00       	call   c001786c <CPU::current()>
c0011f41:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011f47:	83 ec 08             	sub    esp,0x8
c0011f4a:	50                   	push   eax
c0011f4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011f4f:	e8 ce fc ff ff       	call   c0011c22 <VAS::setCPUSpecific(unsigned long)>
c0011f54:	83 c4 10             	add    esp,0x10
c0011f57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f5b:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c0011f5e:	e8 09 59 00 00       	call   c001786c <CPU::current()>
c0011f63:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f69:	83 e0 10             	and    eax,0x10
c0011f6c:	84 c0                	test   al,al
c0011f6e:	74 07                	je     c0011f77 <VAS::VAS(bool)+0x181>
c0011f70:	b8 00 01 00 00       	mov    eax,0x100
c0011f75:	eb 05                	jmp    c0011f7c <VAS::VAS(bool)+0x186>
c0011f77:	b8 00 00 00 00       	mov    eax,0x0
c0011f7c:	09 d8                	or     eax,ebx
c0011f7e:	89 c2                	mov    edx,eax
c0011f80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011f87:	05 fc 0f 00 00       	add    eax,0xffc
c0011f8c:	83 ca 03             	or     edx,0x3
c0011f8f:	89 10                	mov    DWORD PTR [eax],edx
c0011f91:	e8 d6 58 00 00       	call   c001786c <CPU::current()>
c0011f96:	83 ec 0c             	sub    esp,0xc
c0011f99:	50                   	push   eax
c0011f9a:	e8 9f 19 00 00       	call   c001393e <Device::getName()>
c0011f9f:	83 c4 10             	add    esp,0x10
c0011fa2:	83 ec 08             	sub    esp,0x8
c0011fa5:	68 c7 70 02 c0       	push   0xc00270c7
c0011faa:	50                   	push   eax
c0011fab:	e8 0e e8 fe ff       	call   c00007be <strcmp>
c0011fb0:	83 c4 10             	add    esp,0x10
c0011fb3:	85 c0                	test   eax,eax
c0011fb5:	0f 94 c0             	sete   al
c0011fb8:	84 c0                	test   al,al
c0011fba:	74 64                	je     c0012020 <VAS::VAS(bool)+0x22a>
c0011fbc:	e8 64 99 00 00       	call   c001b925 <disableIRQs()>
c0011fc1:	e8 a6 58 00 00       	call   c001786c <CPU::current()>
c0011fc6:	05 7c 09 00 00       	add    eax,0x97c
c0011fcb:	83 ec 0c             	sub    esp,0xc
c0011fce:	50                   	push   eax
c0011fcf:	e8 e6 cb ff ff       	call   c000ebba <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0011fd4:	83 c4 10             	add    esp,0x10
c0011fd7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011fdc:	89 c3                	mov    ebx,eax
c0011fde:	e8 89 58 00 00       	call   c001786c <CPU::current()>
c0011fe3:	05 7c 09 00 00       	add    eax,0x97c
c0011fe8:	83 ec 0c             	sub    esp,0xc
c0011feb:	50                   	push   eax
c0011fec:	e8 c9 cb ff ff       	call   c000ebba <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0011ff1:	83 c4 10             	add    esp,0x10
c0011ff4:	83 ec 08             	sub    esp,0x8
c0011ff7:	50                   	push   eax
c0011ff8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011ffc:	e8 b9 f5 ff ff       	call   c00115ba <VAS::getPageTableEntry(unsigned long)>
c0012001:	83 c4 10             	add    esp,0x10
c0012004:	8b 00                	mov    eax,DWORD PTR [eax]
c0012006:	25 00 f0 ff ff       	and    eax,0xfffff000
c001200b:	6a 11                	push   0x11
c001200d:	53                   	push   ebx
c001200e:	50                   	push   eax
c001200f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012013:	e8 3a f9 ff ff       	call   c0011952 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012018:	83 c4 10             	add    esp,0x10
c001201b:	e8 13 99 00 00       	call   c001b933 <enableIRQs()>
c0012020:	90                   	nop
c0012021:	83 c4 28             	add    esp,0x28
c0012024:	5b                   	pop    ebx
c0012025:	c3                   	ret    

c0012026 <mapVASFirstTime>:
c0012026:	55                   	push   ebp
c0012027:	57                   	push   edi
c0012028:	56                   	push   esi
c0012029:	53                   	push   ebx
c001202a:	83 ec 0c             	sub    esp,0xc
c001202d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012032:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012035:	4a                   	dec    edx
c0012036:	0f 84 99 00 00 00    	je     c00120d5 <mapVASFirstTime+0xaf>
c001203c:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001203f:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012042:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012047:	c1 e5 15             	shl    ebp,0x15
c001204a:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c001204f:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012055:	29 eb                	sub    ebx,ebp
c0012057:	29 ee                	sub    esi,ebp
c0012059:	e8 94 d6 ff ff       	call   c000f6f2 <Phys::allocatePage()>
c001205e:	83 ec 0c             	sub    esp,0xc
c0012061:	68 03 04 00 00       	push   0x403
c0012066:	6a 01                	push   0x1
c0012068:	53                   	push   ebx
c0012069:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001206f:	50                   	push   eax
c0012070:	57                   	push   edi
c0012071:	e8 c8 fb ff ff       	call   c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012076:	83 c4 20             	add    esp,0x20
c0012079:	39 f3                	cmp    ebx,esi
c001207b:	75 dc                	jne    c0012059 <mapVASFirstTime+0x33>
c001207d:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012082:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012087:	29 ee                	sub    esi,ebp
c0012089:	29 e8                	sub    eax,ebp
c001208b:	89 c5                	mov    ebp,eax
c001208d:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012091:	19 db                	sbb    ebx,ebx
c0012093:	e8 5a d6 ff ff       	call   c000f6f2 <Phys::allocatePage()>
c0012098:	83 e3 04             	and    ebx,0x4
c001209b:	83 ec 0c             	sub    esp,0xc
c001209e:	81 c3 03 04 00 00    	add    ebx,0x403
c00120a4:	53                   	push   ebx
c00120a5:	6a 01                	push   0x1
c00120a7:	56                   	push   esi
c00120a8:	81 ee 00 10 00 00    	sub    esi,0x1000
c00120ae:	50                   	push   eax
c00120af:	57                   	push   edi
c00120b0:	e8 89 fb ff ff       	call   c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00120b5:	83 c4 20             	add    esp,0x20
c00120b8:	39 f5                	cmp    ebp,esi
c00120ba:	75 d1                	jne    c001208d <mapVASFirstTime+0x67>
c00120bc:	e8 b4 2f 01 00       	call   c0025075 <CPU::readCR3()>
c00120c1:	83 ec 0c             	sub    esp,0xc
c00120c4:	50                   	push   eax
c00120c5:	e8 bd 2f 01 00       	call   c0025087 <CPU::writeCR3(unsigned long)>
c00120ca:	83 c4 10             	add    esp,0x10
c00120cd:	83 c4 0c             	add    esp,0xc
c00120d0:	5b                   	pop    ebx
c00120d1:	5e                   	pop    esi
c00120d2:	5f                   	pop    edi
c00120d3:	5d                   	pop    ebp
c00120d4:	c3                   	ret    
c00120d5:	83 ec 0c             	sub    esp,0xc
c00120d8:	68 d5 70 02 c0       	push   0xc00270d5
c00120dd:	e8 6f 01 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00120e2:	83 c4 10             	add    esp,0x10
c00120e5:	83 c4 0c             	add    esp,0xc
c00120e8:	5b                   	pop    ebx
c00120e9:	5e                   	pop    esi
c00120ea:	5f                   	pop    edi
c00120eb:	5d                   	pop    ebp
c00120ec:	c3                   	ret    

c00120ed <__cxa_atexit>:
c00120ed:	31 c0                	xor    eax,eax
c00120ef:	c3                   	ret    

c00120f0 <__cxa_finalize>:
c00120f0:	c3                   	ret    

c00120f1 <__stack_chk_fail>:
c00120f1:	55                   	push   ebp
c00120f2:	89 e5                	mov    ebp,esp
c00120f4:	83 ec 10             	sub    esp,0x10
c00120f7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00120fa:	68 ee 70 02 c0       	push   0xc00270ee
c00120ff:	e8 4d 01 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0012104:	58                   	pop    eax
c0012105:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012108:	5a                   	pop    edx
c0012109:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001210c:	68 ee 70 02 c0       	push   0xc00270ee
c0012111:	e8 3b 01 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0012116:	59                   	pop    ecx
c0012117:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001211a:	5a                   	pop    edx
c001211b:	8b 00                	mov    eax,DWORD PTR [eax]
c001211d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012120:	68 ee 70 02 c0       	push   0xc00270ee
c0012125:	e8 27 01 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001212a:	59                   	pop    ecx
c001212b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001212e:	5a                   	pop    edx
c001212f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012131:	8b 00                	mov    eax,DWORD PTR [eax]
c0012133:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012136:	68 ee 70 02 c0       	push   0xc00270ee
c001213b:	e8 11 01 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0012140:	c7 04 24 f6 70 02 c0 	mov    DWORD PTR [esp],0xc00270f6
c0012147:	e8 a3 68 00 00       	call   c00189ef <Krnl::panic(char const*)>
c001214c:	83 c4 10             	add    esp,0x10
c001214f:	c9                   	leave  
c0012150:	c3                   	ret    

c0012151 <__cxa_pure_virtual>:
c0012151:	83 ec 18             	sub    esp,0x18
c0012154:	68 0e 71 02 c0       	push   0xc002710e
c0012159:	e8 91 68 00 00       	call   c00189ef <Krnl::panic(char const*)>
c001215e:	83 c4 1c             	add    esp,0x1c
c0012161:	c3                   	ret    

c0012162 <operator new(unsigned long)>:
c0012162:	e9 e1 cf ff ff       	jmp    c000f148 <malloc>

c0012167 <operator new[](unsigned long)>:
c0012167:	e9 dc cf ff ff       	jmp    c000f148 <malloc>

c001216c <operator delete(void*)>:
c001216c:	e9 f7 cf ff ff       	jmp    c000f168 <rfree>

c0012171 <operator delete(void*, unsigned long)>:
c0012171:	e9 f2 cf ff ff       	jmp    c000f168 <rfree>

c0012176 <operator delete[](void*)>:
c0012176:	e9 ed cf ff ff       	jmp    c000f168 <rfree>

c001217b <operator delete[](void*, unsigned long)>:
c001217b:	e9 e8 cf ff ff       	jmp    c000f168 <rfree>

c0012180 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012180:	57                   	push   edi
c0012181:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012186:	56                   	push   esi
c0012187:	be 24 71 02 c0       	mov    esi,0xc0027124
c001218c:	53                   	push   ebx
c001218d:	83 ec 40             	sub    esp,0x40
c0012190:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012194:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012198:	fc                   	cld    
c0012199:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001219b:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c001219f:	83 f9 3e             	cmp    ecx,0x3e
c00121a2:	7e 05                	jle    c00121a9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c00121a4:	b9 3e 00 00 00       	mov    ecx,0x3e
c00121a9:	89 df                	mov    edi,ebx
c00121ab:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00121af:	eb 02                	jmp    c00121b3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c00121b1:	89 c7                	mov    edi,eax
c00121b3:	31 d2                	xor    edx,edx
c00121b5:	46                   	inc    esi
c00121b6:	89 f8                	mov    eax,edi
c00121b8:	f7 f1                	div    ecx
c00121ba:	39 cf                	cmp    edi,ecx
c00121bc:	73 f3                	jae    c00121b1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c00121be:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00121c1:	eb 02                	jmp    c00121c5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c00121c3:	89 c3                	mov    ebx,eax
c00121c5:	31 d2                	xor    edx,edx
c00121c7:	4e                   	dec    esi
c00121c8:	89 d8                	mov    eax,ebx
c00121ca:	f7 f1                	div    ecx
c00121cc:	39 cb                	cmp    ebx,ecx
c00121ce:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c00121d2:	88 16                	mov    BYTE PTR [esi],dl
c00121d4:	73 ed                	jae    c00121c3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c00121d6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00121da:	83 c4 40             	add    esp,0x40
c00121dd:	5b                   	pop    ebx
c00121de:	5e                   	pop    esi
c00121df:	5f                   	pop    edi
c00121e0:	c3                   	ret    

c00121e1 <Dbg::logc(char)>:
c00121e1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00121e5:	ba fd 03 00 00       	mov    edx,0x3fd
c00121ea:	ec                   	in     al,dx
c00121eb:	a8 20                	test   al,0x20
c00121ed:	74 fb                	je     c00121ea <Dbg::logc(char)+0x9>
c00121ef:	ba f8 03 00 00       	mov    edx,0x3f8
c00121f4:	88 c8                	mov    al,cl
c00121f6:	ee                   	out    dx,al
c00121f7:	c3                   	ret    

c00121f8 <Dbg::logs(char*)>:
c00121f8:	53                   	push   ebx
c00121f9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00121fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012200:	84 c0                	test   al,al
c0012202:	74 0f                	je     c0012213 <Dbg::logs(char*)+0x1b>
c0012204:	50                   	push   eax
c0012205:	43                   	inc    ebx
c0012206:	e8 d6 ff ff ff       	call   c00121e1 <Dbg::logc(char)>
c001220b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001220e:	5a                   	pop    edx
c001220f:	84 c0                	test   al,al
c0012211:	75 f1                	jne    c0012204 <Dbg::logs(char*)+0xc>
c0012213:	5b                   	pop    ebx
c0012214:	c3                   	ret    

c0012215 <Dbg::logWriteInt(unsigned int)>:
c0012215:	83 ec 10             	sub    esp,0x10
c0012218:	6a 0a                	push   0xa
c001221a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001221e:	50                   	push   eax
c001221f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012223:	e8 58 ff ff ff       	call   c0012180 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012228:	50                   	push   eax
c0012229:	e8 ca ff ff ff       	call   c00121f8 <Dbg::logs(char*)>
c001222e:	83 c4 20             	add    esp,0x20
c0012231:	c3                   	ret    

c0012232 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012232:	83 ec 10             	sub    esp,0x10
c0012235:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012239:	8d 44 24 08          	lea    eax,[esp+0x8]
c001223d:	50                   	push   eax
c001223e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012242:	e8 39 ff ff ff       	call   c0012180 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012247:	50                   	push   eax
c0012248:	e8 ab ff ff ff       	call   c00121f8 <Dbg::logs(char*)>
c001224d:	83 c4 20             	add    esp,0x20
c0012250:	c3                   	ret    

c0012251 <Dbg::kprintf(char const*, ...)>:
c0012251:	55                   	push   ebp
c0012252:	57                   	push   edi
c0012253:	56                   	push   esi
c0012254:	53                   	push   ebx
c0012255:	83 ec 0c             	sub    esp,0xc
c0012258:	8d 44 24 24          	lea    eax,[esp+0x24]
c001225c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012260:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012264:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012267:	84 c0                	test   al,al
c0012269:	74 4a                	je     c00122b5 <Dbg::kprintf(char const*, ...)+0x64>
c001226b:	31 db                	xor    ebx,ebx
c001226d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012270:	3c 25                	cmp    al,0x25
c0012272:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012275:	0f 85 e4 00 00 00    	jne    c001235f <Dbg::kprintf(char const*, ...)+0x10e>
c001227b:	83 c3 02             	add    ebx,0x2
c001227e:	8a 07                	mov    al,BYTE PTR [edi]
c0012280:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012283:	83 e8 25             	sub    eax,0x25
c0012286:	3c 53                	cmp    al,0x53
c0012288:	0f 87 ba 00 00 00    	ja     c0012348 <Dbg::kprintf(char const*, ...)+0xf7>
c001228e:	0f b6 c0             	movzx  eax,al
c0012291:	ff 24 85 64 71 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd8e9c]
c0012298:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001229c:	89 c8                	mov    eax,ecx
c001229e:	83 c1 04             	add    ecx,0x4
c00122a1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00122a5:	ff 30                	push   DWORD PTR [eax]
c00122a7:	e8 4c ff ff ff       	call   c00121f8 <Dbg::logs(char*)>
c00122ac:	58                   	pop    eax
c00122ad:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00122b1:	84 c0                	test   al,al
c00122b3:	75 b8                	jne    c001226d <Dbg::kprintf(char const*, ...)+0x1c>
c00122b5:	83 c4 0c             	add    esp,0xc
c00122b8:	5b                   	pop    ebx
c00122b9:	5e                   	pop    esi
c00122ba:	5f                   	pop    edi
c00122bb:	5d                   	pop    ebp
c00122bc:	c3                   	ret    
c00122bd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00122c1:	89 d0                	mov    eax,edx
c00122c3:	83 c2 04             	add    edx,0x4
c00122c6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00122ca:	ff 30                	push   DWORD PTR [eax]
c00122cc:	e8 44 ff ff ff       	call   c0012215 <Dbg::logWriteInt(unsigned int)>
c00122d1:	58                   	pop    eax
c00122d2:	eb d9                	jmp    c00122ad <Dbg::kprintf(char const*, ...)+0x5c>
c00122d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00122d8:	89 d0                	mov    eax,edx
c00122da:	83 c2 04             	add    edx,0x4
c00122dd:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00122e0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00122e4:	50                   	push   eax
c00122e5:	e8 f7 fe ff ff       	call   c00121e1 <Dbg::logc(char)>
c00122ea:	58                   	pop    eax
c00122eb:	eb c0                	jmp    c00122ad <Dbg::kprintf(char const*, ...)+0x5c>
c00122ed:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00122f1:	89 c8                	mov    eax,ecx
c00122f3:	83 c1 04             	add    ecx,0x4
c00122f6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00122fa:	ff 30                	push   DWORD PTR [eax]
c00122fc:	e8 14 ff ff ff       	call   c0012215 <Dbg::logWriteInt(unsigned int)>
c0012301:	5f                   	pop    edi
c0012302:	eb a9                	jmp    c00122ad <Dbg::kprintf(char const*, ...)+0x5c>
c0012304:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012308:	89 c8                	mov    eax,ecx
c001230a:	83 c1 04             	add    ecx,0x4
c001230d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012311:	6a 10                	push   0x10
c0012313:	ff 30                	push   DWORD PTR [eax]
c0012315:	e8 18 ff ff ff       	call   c0012232 <Dbg::logWriteIntBase(unsigned int, int)>
c001231a:	59                   	pop    ecx
c001231b:	5f                   	pop    edi
c001231c:	eb 8f                	jmp    c00122ad <Dbg::kprintf(char const*, ...)+0x5c>
c001231e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012322:	89 d0                	mov    eax,edx
c0012324:	83 c2 08             	add    edx,0x8
c0012327:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001232b:	6a 10                	push   0x10
c001232d:	ff 30                	push   DWORD PTR [eax]
c001232f:	e8 fe fe ff ff       	call   c0012232 <Dbg::logWriteIntBase(unsigned int, int)>
c0012334:	58                   	pop    eax
c0012335:	5a                   	pop    edx
c0012336:	e9 72 ff ff ff       	jmp    c00122ad <Dbg::kprintf(char const*, ...)+0x5c>
c001233b:	6a 25                	push   0x25
c001233d:	e8 9f fe ff ff       	call   c00121e1 <Dbg::logc(char)>
c0012342:	58                   	pop    eax
c0012343:	e9 65 ff ff ff       	jmp    c00122ad <Dbg::kprintf(char const*, ...)+0x5c>
c0012348:	6a 25                	push   0x25
c001234a:	e8 92 fe ff ff       	call   c00121e1 <Dbg::logc(char)>
c001234f:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012352:	50                   	push   eax
c0012353:	e8 89 fe ff ff       	call   c00121e1 <Dbg::logc(char)>
c0012358:	5a                   	pop    edx
c0012359:	59                   	pop    ecx
c001235a:	e9 4e ff ff ff       	jmp    c00122ad <Dbg::kprintf(char const*, ...)+0x5c>
c001235f:	50                   	push   eax
c0012360:	89 eb                	mov    ebx,ebp
c0012362:	e8 7a fe ff ff       	call   c00121e1 <Dbg::logc(char)>
c0012367:	89 fd                	mov    ebp,edi
c0012369:	58                   	pop    eax
c001236a:	e9 3e ff ff ff       	jmp    c00122ad <Dbg::kprintf(char const*, ...)+0x5c>
c001236f:	90                   	nop

c0012370 <File::read(unsigned long long, void*, int*)>:
c0012370:	53                   	push   ebx
c0012371:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012375:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012379:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012380:	3c 19                	cmp    al,0x19
c0012382:	77 35                	ja     c00123b9 <File::read(unsigned long long, void*, int*)+0x49>
c0012384:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c001238b:	85 c0                	test   eax,eax
c001238d:	74 2a                	je     c00123b9 <File::read(unsigned long long, void*, int*)+0x49>
c001238f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012395:	85 c0                	test   eax,eax
c0012397:	74 20                	je     c00123b9 <File::read(unsigned long long, void*, int*)+0x49>
c0012399:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001239d:	74 21                	je     c00123c0 <File::read(unsigned long long, void*, int*)+0x50>
c001239f:	8b 08                	mov    ecx,DWORD PTR [eax]
c00123a1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00123a5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00123ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00123af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123b3:	5b                   	pop    ebx
c00123b4:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00123b7:	ff e0                	jmp    eax
c00123b9:	b8 0b 00 00 00       	mov    eax,0xb
c00123be:	eb 05                	jmp    c00123c5 <File::read(unsigned long long, void*, int*)+0x55>
c00123c0:	b8 05 00 00 00       	mov    eax,0x5
c00123c5:	5b                   	pop    ebx
c00123c6:	c3                   	ret    
c00123c7:	90                   	nop

c00123c8 <File::write(unsigned long long, void*, int*)>:
c00123c8:	53                   	push   ebx
c00123c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123cd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123d1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00123d8:	3c 19                	cmp    al,0x19
c00123da:	77 35                	ja     c0012411 <File::write(unsigned long long, void*, int*)+0x49>
c00123dc:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c00123e3:	85 c0                	test   eax,eax
c00123e5:	74 2a                	je     c0012411 <File::write(unsigned long long, void*, int*)+0x49>
c00123e7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00123ed:	85 c0                	test   eax,eax
c00123ef:	74 20                	je     c0012411 <File::write(unsigned long long, void*, int*)+0x49>
c00123f1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00123f5:	74 21                	je     c0012418 <File::write(unsigned long long, void*, int*)+0x50>
c00123f7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00123f9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00123fd:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012403:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012407:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001240b:	5b                   	pop    ebx
c001240c:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001240f:	ff e0                	jmp    eax
c0012411:	b8 0b 00 00 00       	mov    eax,0xb
c0012416:	eb 05                	jmp    c001241d <File::write(unsigned long long, void*, int*)+0x55>
c0012418:	b8 05 00 00 00       	mov    eax,0x5
c001241d:	5b                   	pop    ebx
c001241e:	c3                   	ret    
c001241f:	90                   	nop

c0012420 <Directory::read(unsigned long long, void*, int*)>:
c0012420:	53                   	push   ebx
c0012421:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012425:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012429:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012430:	3c 19                	cmp    al,0x19
c0012432:	77 35                	ja     c0012469 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012434:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c001243b:	85 c0                	test   eax,eax
c001243d:	74 2a                	je     c0012469 <Directory::read(unsigned long long, void*, int*)+0x49>
c001243f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012445:	85 c0                	test   eax,eax
c0012447:	74 20                	je     c0012469 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012449:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001244d:	74 21                	je     c0012470 <Directory::read(unsigned long long, void*, int*)+0x50>
c001244f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012451:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012455:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001245b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001245f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012463:	5b                   	pop    ebx
c0012464:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012467:	ff e0                	jmp    eax
c0012469:	b8 0b 00 00 00       	mov    eax,0xb
c001246e:	eb 05                	jmp    c0012475 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012470:	b8 05 00 00 00       	mov    eax,0x5
c0012475:	5b                   	pop    ebx
c0012476:	c3                   	ret    
c0012477:	90                   	nop

c0012478 <Directory::write(unsigned long long, void*, int*)>:
c0012478:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001247c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012483:	b8 0b 00 00 00       	mov    eax,0xb
c0012488:	80 fa 19             	cmp    dl,0x19
c001248b:	77 18                	ja     c00124a5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001248d:	8b 14 95 00 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5600]
c0012494:	85 d2                	test   edx,edx
c0012496:	74 0d                	je     c00124a5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012498:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c001249f:	19 c0                	sbb    eax,eax
c00124a1:	83 e0 0a             	and    eax,0xa
c00124a4:	40                   	inc    eax
c00124a5:	c3                   	ret    

c00124a6 <File::isAtty()>:
c00124a6:	31 c0                	xor    eax,eax
c00124a8:	c3                   	ret    
c00124a9:	90                   	nop

c00124aa <Directory::isAtty()>:
c00124aa:	31 c0                	xor    eax,eax
c00124ac:	c3                   	ret    
c00124ad:	90                   	nop

c00124ae <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00124ae:	b8 0a 00 00 00       	mov    eax,0xa
c00124b3:	c3                   	ret    

c00124b4 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00124b4:	b8 0a 00 00 00       	mov    eax,0xa
c00124b9:	c3                   	ret    

c00124ba <File::~File()>:
c00124ba:	83 ec 0c             	sub    esp,0xc
c00124bd:	ba 20 73 02 c0       	mov    edx,0xc0027320
c00124c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124c6:	89 10                	mov    DWORD PTR [eax],edx
c00124c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124cc:	83 ec 0c             	sub    esp,0xc
c00124cf:	50                   	push   eax
c00124d0:	e8 49 eb ff ff       	call   c001101e <UnixFile::~UnixFile()>
c00124d5:	83 c4 10             	add    esp,0x10
c00124d8:	90                   	nop
c00124d9:	83 c4 0c             	add    esp,0xc
c00124dc:	c3                   	ret    
c00124dd:	90                   	nop

c00124de <File::~File()>:
c00124de:	83 ec 0c             	sub    esp,0xc
c00124e1:	83 ec 0c             	sub    esp,0xc
c00124e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124e8:	e8 cd ff ff ff       	call   c00124ba <File::~File()>
c00124ed:	83 c4 10             	add    esp,0x10
c00124f0:	83 ec 08             	sub    esp,0x8
c00124f3:	68 14 01 00 00       	push   0x114
c00124f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124fc:	e8 70 fc ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0012501:	83 c4 10             	add    esp,0x10
c0012504:	83 c4 0c             	add    esp,0xc
c0012507:	c3                   	ret    

c0012508 <Directory::~Directory()>:
c0012508:	83 ec 0c             	sub    esp,0xc
c001250b:	ba 3c 73 02 c0       	mov    edx,0xc002733c
c0012510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012514:	89 10                	mov    DWORD PTR [eax],edx
c0012516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001251a:	83 ec 0c             	sub    esp,0xc
c001251d:	50                   	push   eax
c001251e:	e8 fb ea ff ff       	call   c001101e <UnixFile::~UnixFile()>
c0012523:	83 c4 10             	add    esp,0x10
c0012526:	90                   	nop
c0012527:	83 c4 0c             	add    esp,0xc
c001252a:	c3                   	ret    
c001252b:	90                   	nop

c001252c <Directory::~Directory()>:
c001252c:	83 ec 0c             	sub    esp,0xc
c001252f:	83 ec 0c             	sub    esp,0xc
c0012532:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012536:	e8 cd ff ff ff       	call   c0012508 <Directory::~Directory()>
c001253b:	83 c4 10             	add    esp,0x10
c001253e:	83 ec 08             	sub    esp,0x8
c0012541:	68 14 01 00 00       	push   0x114
c0012546:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001254a:	e8 22 fc ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c001254f:	83 c4 10             	add    esp,0x10
c0012552:	83 c4 0c             	add    esp,0xc
c0012555:	c3                   	ret    

c0012556 <Filesystem::Filesystem()>:
c0012556:	ba bc 72 02 c0       	mov    edx,0xc00272bc
c001255b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001255f:	89 10                	mov    DWORD PTR [eax],edx
c0012561:	8b 15 68 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a568
c0012567:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001256b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001256e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012572:	a3 68 a5 02 c0       	mov    ds:0xc002a568,eax
c0012577:	90                   	nop
c0012578:	c3                   	ret    
c0012579:	90                   	nop

c001257a <Filesystem::~Filesystem()>:
c001257a:	ba bc 72 02 c0       	mov    edx,0xc00272bc
c001257f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012583:	89 10                	mov    DWORD PTR [eax],edx
c0012585:	90                   	nop
c0012586:	c3                   	ret    
c0012587:	90                   	nop

c0012588 <Filesystem::~Filesystem()>:
c0012588:	83 ec 0c             	sub    esp,0xc
c001258b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001258f:	e8 e6 ff ff ff       	call   c001257a <Filesystem::~Filesystem()>
c0012594:	83 c4 04             	add    esp,0x4
c0012597:	83 ec 08             	sub    esp,0x8
c001259a:	6a 08                	push   0x8
c001259c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125a0:	e8 cc fb ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c00125a5:	83 c4 10             	add    esp,0x10
c00125a8:	83 c4 0c             	add    esp,0xc
c00125ab:	c3                   	ret    

c00125ac <initVFS()>:
c00125ac:	83 ec 18             	sub    esp,0x18
c00125af:	6a 08                	push   0x8
c00125b1:	e8 ac fb ff ff       	call   c0012162 <operator new(unsigned long)>
c00125b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00125b9:	e8 62 c1 00 00       	call   c001e720 <FAT::FAT()>
c00125be:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00125c5:	e8 98 fb ff ff       	call   c0012162 <operator new(unsigned long)>
c00125ca:	89 04 24             	mov    DWORD PTR [esp],eax
c00125cd:	e8 c4 d3 00 00       	call   c001f996 <ISO9660::ISO9660()>
c00125d2:	83 c4 1c             	add    esp,0x1c
c00125d5:	c3                   	ret    

c00125d6 <standardiseFiles(char*, char const*, char const*)>:
c00125d6:	55                   	push   ebp
c00125d7:	57                   	push   edi
c00125d8:	56                   	push   esi
c00125d9:	53                   	push   ebx
c00125da:	81 ec 10 04 00 00    	sub    esp,0x410
c00125e0:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00125e7:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00125ee:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00125f5:	68 00 04 00 00       	push   0x400
c00125fa:	6a 00                	push   0x0
c00125fc:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012600:	56                   	push   esi
c0012601:	e8 c8 e0 fe ff       	call   c00006ce <memset>
c0012606:	83 c4 10             	add    esp,0x10
c0012609:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c001260d:	75 0b                	jne    c001261a <standardiseFiles(char*, char const*, char const*)+0x44>
c001260f:	50                   	push   eax
c0012610:	50                   	push   eax
c0012611:	57                   	push   edi
c0012612:	56                   	push   esi
c0012613:	e8 55 e1 fe ff       	call   c000076d <strcpy>
c0012618:	eb 41                	jmp    c001265b <standardiseFiles(char*, char const*, char const*)+0x85>
c001261a:	8a 07                	mov    al,BYTE PTR [edi]
c001261c:	3c 5c                	cmp    al,0x5c
c001261e:	74 04                	je     c0012624 <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012620:	3c 2f                	cmp    al,0x2f
c0012622:	75 18                	jne    c001263c <standardiseFiles(char*, char const*, char const*)+0x66>
c0012624:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012627:	3c 60                	cmp    al,0x60
c0012629:	7e 03                	jle    c001262e <standardiseFiles(char*, char const*, char const*)+0x58>
c001262b:	83 e8 20             	sub    eax,0x20
c001262e:	88 04 24             	mov    BYTE PTR [esp],al
c0012631:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012638:	50                   	push   eax
c0012639:	50                   	push   eax
c001263a:	eb 18                	jmp    c0012654 <standardiseFiles(char*, char const*, char const*)+0x7e>
c001263c:	50                   	push   eax
c001263d:	50                   	push   eax
c001263e:	55                   	push   ebp
c001263f:	56                   	push   esi
c0012640:	e8 28 e1 fe ff       	call   c000076d <strcpy>
c0012645:	5a                   	pop    edx
c0012646:	59                   	pop    ecx
c0012647:	68 cc 85 02 c0       	push   0xc00285cc
c001264c:	56                   	push   esi
c001264d:	e8 d2 e1 fe ff       	call   c0000824 <strcat>
c0012652:	5d                   	pop    ebp
c0012653:	58                   	pop    eax
c0012654:	57                   	push   edi
c0012655:	56                   	push   esi
c0012656:	e8 c9 e1 fe ff       	call   c0000824 <strcat>
c001265b:	83 c4 10             	add    esp,0x10
c001265e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012661:	3c 60                	cmp    al,0x60
c0012663:	7e 03                	jle    c0012668 <standardiseFiles(char*, char const*, char const*)+0x92>
c0012665:	83 e8 20             	sub    eax,0x20
c0012668:	88 04 24             	mov    BYTE PTR [esp],al
c001266b:	88 03                	mov    BYTE PTR [ebx],al
c001266d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012674:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001267a:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001267e:	bf 03 00 00 00       	mov    edi,0x3
c0012683:	b8 03 00 00 00       	mov    eax,0x3
c0012688:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c001268b:	84 d2                	test   dl,dl
c001268d:	0f 84 91 00 00 00    	je     c0012724 <standardiseFiles(char*, char const*, char const*)+0x14e>
c0012693:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012696:	80 fa 5c             	cmp    dl,0x5c
c0012699:	74 05                	je     c00126a0 <standardiseFiles(char*, char const*, char const*)+0xca>
c001269b:	80 fa 2f             	cmp    dl,0x2f
c001269e:	75 12                	jne    c00126b2 <standardiseFiles(char*, char const*, char const*)+0xdc>
c00126a0:	89 c5                	mov    ebp,eax
c00126a2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00126a7:	74 09                	je     c00126b2 <standardiseFiles(char*, char const*, char const*)+0xdc>
c00126a9:	40                   	inc    eax
c00126aa:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00126ae:	89 cf                	mov    edi,ecx
c00126b0:	eb d6                	jmp    c0012688 <standardiseFiles(char*, char const*, char const*)+0xb2>
c00126b2:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00126b7:	75 5b                	jne    c0012714 <standardiseFiles(char*, char const*, char const*)+0x13e>
c00126b9:	80 fa 2e             	cmp    dl,0x2e
c00126bc:	75 56                	jne    c0012714 <standardiseFiles(char*, char const*, char const*)+0x13e>
c00126be:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00126c2:	74 19                	je     c00126dd <standardiseFiles(char*, char const*, char const*)+0x107>
c00126c4:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00126c9:	74 53                	je     c001271e <standardiseFiles(char*, char const*, char const*)+0x148>
c00126cb:	89 f9                	mov    ecx,edi
c00126cd:	41                   	inc    ecx
c00126ce:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00126d1:	80 fa 2f             	cmp    dl,0x2f
c00126d4:	74 f7                	je     c00126cd <standardiseFiles(char*, char const*, char const*)+0xf7>
c00126d6:	80 fa 5c             	cmp    dl,0x5c
c00126d9:	74 f2                	je     c00126cd <standardiseFiles(char*, char const*, char const*)+0xf7>
c00126db:	eb d1                	jmp    c00126ae <standardiseFiles(char*, char const*, char const*)+0xd8>
c00126dd:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00126e2:	74 3a                	je     c001271e <standardiseFiles(char*, char const*, char const*)+0x148>
c00126e4:	83 f8 03             	cmp    eax,0x3
c00126e7:	74 c5                	je     c00126ae <standardiseFiles(char*, char const*, char const*)+0xd8>
c00126e9:	41                   	inc    ecx
c00126ea:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00126ed:	80 fa 2f             	cmp    dl,0x2f
c00126f0:	74 f7                	je     c00126e9 <standardiseFiles(char*, char const*, char const*)+0x113>
c00126f2:	80 fa 5c             	cmp    dl,0x5c
c00126f5:	74 f2                	je     c00126e9 <standardiseFiles(char*, char const*, char const*)+0x113>
c00126f7:	48                   	dec    eax
c00126f8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00126fc:	75 06                	jne    c0012704 <standardiseFiles(char*, char const*, char const*)+0x12e>
c00126fe:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012702:	eb f3                	jmp    c00126f7 <standardiseFiles(char*, char const*, char const*)+0x121>
c0012704:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012708:	74 07                	je     c0012711 <standardiseFiles(char*, char const*, char const*)+0x13b>
c001270a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001270e:	48                   	dec    eax
c001270f:	eb f3                	jmp    c0012704 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012711:	40                   	inc    eax
c0012712:	eb 9a                	jmp    c00126ae <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012714:	80 fa 2f             	cmp    dl,0x2f
c0012717:	74 95                	je     c00126ae <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012719:	80 fa 5c             	cmp    dl,0x5c
c001271c:	74 90                	je     c00126ae <standardiseFiles(char*, char const*, char const*)+0xd8>
c001271e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012721:	40                   	inc    eax
c0012722:	eb 8a                	jmp    c00126ae <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012724:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012728:	83 ec 0c             	sub    esp,0xc
c001272b:	53                   	push   ebx
c001272c:	e8 ba df fe ff       	call   c00006eb <strlen>
c0012731:	83 c4 10             	add    esp,0x10
c0012734:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012739:	75 26                	jne    c0012761 <standardiseFiles(char*, char const*, char const*)+0x18b>
c001273b:	83 ec 0c             	sub    esp,0xc
c001273e:	53                   	push   ebx
c001273f:	e8 a7 df fe ff       	call   c00006eb <strlen>
c0012744:	83 c4 10             	add    esp,0x10
c0012747:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001274c:	74 26                	je     c0012774 <standardiseFiles(char*, char const*, char const*)+0x19e>
c001274e:	83 ec 0c             	sub    esp,0xc
c0012751:	53                   	push   ebx
c0012752:	e8 94 df fe ff       	call   c00006eb <strlen>
c0012757:	83 c4 10             	add    esp,0x10
c001275a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001275f:	eb c7                	jmp    c0012728 <standardiseFiles(char*, char const*, char const*)+0x152>
c0012761:	83 ec 0c             	sub    esp,0xc
c0012764:	53                   	push   ebx
c0012765:	e8 81 df fe ff       	call   c00006eb <strlen>
c001276a:	83 c4 10             	add    esp,0x10
c001276d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012772:	74 c7                	je     c001273b <standardiseFiles(char*, char const*, char const*)+0x165>
c0012774:	81 c4 0c 04 00 00    	add    esp,0x40c
c001277a:	5b                   	pop    ebx
c001277b:	5e                   	pop    esi
c001277c:	5f                   	pop    edi
c001277d:	5d                   	pop    ebp
c001277e:	c3                   	ret    
c001277f:	90                   	nop

c0012780 <File::File(char const*, Process*)>:
c0012780:	83 ec 0c             	sub    esp,0xc
c0012783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012787:	83 ec 08             	sub    esp,0x8
c001278a:	6a 00                	push   0x0
c001278c:	50                   	push   eax
c001278d:	e8 ea e6 ff ff       	call   c0010e7c <UnixFile::UnixFile(int)>
c0012792:	83 c4 10             	add    esp,0x10
c0012795:	ba 20 73 02 c0       	mov    edx,0xc0027320
c001279a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001279e:	89 10                	mov    DWORD PTR [eax],edx
c00127a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127a4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00127aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127ae:	83 c0 0d             	add    eax,0xd
c00127b1:	83 ec 04             	sub    esp,0x4
c00127b4:	52                   	push   edx
c00127b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127b9:	50                   	push   eax
c00127ba:	e8 17 fe ff ff       	call   c00125d6 <standardiseFiles(char*, char const*, char const*)>
c00127bf:	83 c4 10             	add    esp,0x10
c00127c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127c6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00127c9:	8d 50 bf             	lea    edx,[eax-0x41]
c00127cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127d0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00127d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127da:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00127de:	90                   	nop
c00127df:	83 c4 0c             	add    esp,0xc
c00127e2:	c3                   	ret    
c00127e3:	90                   	nop

c00127e4 <File::open(FileOpenMode)>:
c00127e4:	53                   	push   ebx
c00127e5:	b8 0b 00 00 00       	mov    eax,0xb
c00127ea:	83 ec 08             	sub    esp,0x8
c00127ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00127f1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00127f8:	80 fa 19             	cmp    dl,0x19
c00127fb:	77 40                	ja     c001283d <File::open(FileOpenMode)+0x59>
c00127fd:	8b 14 95 00 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5600]
c0012804:	85 d2                	test   edx,edx
c0012806:	74 35                	je     c001283d <File::open(FileOpenMode)+0x59>
c0012808:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001280e:	85 d2                	test   edx,edx
c0012810:	74 2b                	je     c001283d <File::open(FileOpenMode)+0x59>
c0012812:	b8 06 00 00 00       	mov    eax,0x6
c0012817:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001281b:	75 20                	jne    c001283d <File::open(FileOpenMode)+0x59>
c001281d:	8b 02                	mov    eax,DWORD PTR [edx]
c001281f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012825:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012829:	51                   	push   ecx
c001282a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001282d:	51                   	push   ecx
c001282e:	52                   	push   edx
c001282f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012832:	83 c4 10             	add    esp,0x10
c0012835:	85 c0                	test   eax,eax
c0012837:	75 04                	jne    c001283d <File::open(FileOpenMode)+0x59>
c0012839:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001283d:	83 c4 08             	add    esp,0x8
c0012840:	5b                   	pop    ebx
c0012841:	c3                   	ret    

c0012842 <File::close()>:
c0012842:	53                   	push   ebx
c0012843:	b8 0b 00 00 00       	mov    eax,0xb
c0012848:	83 ec 08             	sub    esp,0x8
c001284b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001284f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012856:	80 fa 19             	cmp    dl,0x19
c0012859:	77 41                	ja     c001289c <File::close()+0x5a>
c001285b:	8b 1c 95 00 aa 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd5600]
c0012862:	85 db                	test   ebx,ebx
c0012864:	74 36                	je     c001289c <File::close()+0x5a>
c0012866:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001286d:	74 2d                	je     c001289c <File::close()+0x5a>
c001286f:	b8 05 00 00 00       	mov    eax,0x5
c0012874:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012878:	74 22                	je     c001289c <File::close()+0x5a>
c001287a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001287e:	8b 04 95 00 aa 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5600]
c0012885:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001288b:	53                   	push   ebx
c001288c:	53                   	push   ebx
c001288d:	8b 10                	mov    edx,DWORD PTR [eax]
c001288f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012895:	50                   	push   eax
c0012896:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012899:	83 c4 10             	add    esp,0x10
c001289c:	83 c4 08             	add    esp,0x8
c001289f:	5b                   	pop    ebx
c00128a0:	c3                   	ret    
c00128a1:	90                   	nop

c00128a2 <File::seek(unsigned long long)>:
c00128a2:	56                   	push   esi
c00128a3:	53                   	push   ebx
c00128a4:	b8 0b 00 00 00       	mov    eax,0xb
c00128a9:	51                   	push   ecx
c00128aa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00128ae:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00128b2:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00128b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00128bd:	80 fa 19             	cmp    dl,0x19
c00128c0:	77 31                	ja     c00128f3 <File::seek(unsigned long long)+0x51>
c00128c2:	8b 14 95 00 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5600]
c00128c9:	85 d2                	test   edx,edx
c00128cb:	74 26                	je     c00128f3 <File::seek(unsigned long long)+0x51>
c00128cd:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00128d3:	85 d2                	test   edx,edx
c00128d5:	74 1c                	je     c00128f3 <File::seek(unsigned long long)+0x51>
c00128d7:	b8 05 00 00 00       	mov    eax,0x5
c00128dc:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00128e0:	74 11                	je     c00128f3 <File::seek(unsigned long long)+0x51>
c00128e2:	8b 02                	mov    eax,DWORD PTR [edx]
c00128e4:	53                   	push   ebx
c00128e5:	51                   	push   ecx
c00128e6:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00128ec:	52                   	push   edx
c00128ed:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00128f0:	83 c4 10             	add    esp,0x10
c00128f3:	5a                   	pop    edx
c00128f4:	5b                   	pop    ebx
c00128f5:	5e                   	pop    esi
c00128f6:	c3                   	ret    
c00128f7:	90                   	nop

c00128f8 <File::tell(unsigned long long*)>:
c00128f8:	83 ec 0c             	sub    esp,0xc
c00128fb:	b8 0b 00 00 00       	mov    eax,0xb
c0012900:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012904:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001290b:	80 fa 19             	cmp    dl,0x19
c001290e:	77 34                	ja     c0012944 <File::tell(unsigned long long*)+0x4c>
c0012910:	8b 14 95 00 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5600]
c0012917:	85 d2                	test   edx,edx
c0012919:	74 29                	je     c0012944 <File::tell(unsigned long long*)+0x4c>
c001291b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012921:	85 d2                	test   edx,edx
c0012923:	74 1f                	je     c0012944 <File::tell(unsigned long long*)+0x4c>
c0012925:	b8 05 00 00 00       	mov    eax,0x5
c001292a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001292e:	74 14                	je     c0012944 <File::tell(unsigned long long*)+0x4c>
c0012930:	50                   	push   eax
c0012931:	8b 02                	mov    eax,DWORD PTR [edx]
c0012933:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012937:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001293d:	52                   	push   edx
c001293e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012941:	83 c4 10             	add    esp,0x10
c0012944:	83 c4 0c             	add    esp,0xc
c0012947:	c3                   	ret    

c0012948 <File::rewind()>:
c0012948:	83 ec 10             	sub    esp,0x10
c001294b:	6a 00                	push   0x0
c001294d:	6a 00                	push   0x0
c001294f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012953:	e8 4a ff ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c0012958:	83 c4 1c             	add    esp,0x1c
c001295b:	c3                   	ret    

c001295c <File::unlink()>:
c001295c:	83 ec 0c             	sub    esp,0xc
c001295f:	b8 0b 00 00 00       	mov    eax,0xb
c0012964:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012968:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001296f:	80 f9 19             	cmp    cl,0x19
c0012972:	77 2f                	ja     c00129a3 <File::unlink()+0x47>
c0012974:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c001297b:	85 c9                	test   ecx,ecx
c001297d:	74 24                	je     c00129a3 <File::unlink()+0x47>
c001297f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012985:	85 c9                	test   ecx,ecx
c0012987:	74 1a                	je     c00129a3 <File::unlink()+0x47>
c0012989:	b8 06 00 00 00       	mov    eax,0x6
c001298e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012992:	75 0f                	jne    c00129a3 <File::unlink()+0x47>
c0012994:	83 c2 0d             	add    edx,0xd
c0012997:	50                   	push   eax
c0012998:	50                   	push   eax
c0012999:	8b 01                	mov    eax,DWORD PTR [ecx]
c001299b:	52                   	push   edx
c001299c:	51                   	push   ecx
c001299d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00129a0:	83 c4 10             	add    esp,0x10
c00129a3:	83 c4 0c             	add    esp,0xc
c00129a6:	c3                   	ret    
c00129a7:	90                   	nop

c00129a8 <File::rename(char const*)>:
c00129a8:	83 ec 0c             	sub    esp,0xc
c00129ab:	b8 0b 00 00 00       	mov    eax,0xb
c00129b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00129b4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00129bb:	80 f9 19             	cmp    cl,0x19
c00129be:	77 32                	ja     c00129f2 <File::rename(char const*)+0x4a>
c00129c0:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c00129c7:	85 c9                	test   ecx,ecx
c00129c9:	74 27                	je     c00129f2 <File::rename(char const*)+0x4a>
c00129cb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00129d1:	85 c9                	test   ecx,ecx
c00129d3:	74 1d                	je     c00129f2 <File::rename(char const*)+0x4a>
c00129d5:	b8 06 00 00 00       	mov    eax,0x6
c00129da:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00129de:	75 12                	jne    c00129f2 <File::rename(char const*)+0x4a>
c00129e0:	83 c2 0d             	add    edx,0xd
c00129e3:	50                   	push   eax
c00129e4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00129e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00129ea:	52                   	push   edx
c00129eb:	51                   	push   ecx
c00129ec:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00129ef:	83 c4 10             	add    esp,0x10
c00129f2:	83 c4 0c             	add    esp,0xc
c00129f5:	c3                   	ret    

c00129f6 <File::chfatattr(unsigned char, unsigned char)>:
c00129f6:	57                   	push   edi
c00129f7:	b8 0b 00 00 00       	mov    eax,0xb
c00129fc:	56                   	push   esi
c00129fd:	53                   	push   ebx
c00129fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a02:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012a06:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a0d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012a11:	80 f9 19             	cmp    cl,0x19
c0012a14:	77 37                	ja     c0012a4d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a16:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012a1d:	85 c9                	test   ecx,ecx
c0012a1f:	74 2c                	je     c0012a4d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a21:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012a27:	85 c9                	test   ecx,ecx
c0012a29:	74 22                	je     c0012a4d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a2b:	b8 06 00 00 00       	mov    eax,0x6
c0012a30:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a34:	75 17                	jne    c0012a4d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a36:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012a38:	89 f0                	mov    eax,esi
c0012a3a:	83 c2 0d             	add    edx,0xd
c0012a3d:	0f b6 f0             	movzx  esi,al
c0012a40:	0f b6 db             	movzx  ebx,bl
c0012a43:	56                   	push   esi
c0012a44:	53                   	push   ebx
c0012a45:	52                   	push   edx
c0012a46:	51                   	push   ecx
c0012a47:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012a4a:	83 c4 10             	add    esp,0x10
c0012a4d:	5b                   	pop    ebx
c0012a4e:	5e                   	pop    esi
c0012a4f:	5f                   	pop    edi
c0012a50:	c3                   	ret    
c0012a51:	90                   	nop

c0012a52 <File::exists()>:
c0012a52:	83 ec 0c             	sub    esp,0xc
c0012a55:	31 c0                	xor    eax,eax
c0012a57:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a5b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a62:	80 f9 19             	cmp    cl,0x19
c0012a65:	77 24                	ja     c0012a8b <File::exists()+0x39>
c0012a67:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012a6e:	85 c9                	test   ecx,ecx
c0012a70:	74 19                	je     c0012a8b <File::exists()+0x39>
c0012a72:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012a78:	85 c9                	test   ecx,ecx
c0012a7a:	74 0f                	je     c0012a8b <File::exists()+0x39>
c0012a7c:	83 c2 0d             	add    edx,0xd
c0012a7f:	50                   	push   eax
c0012a80:	50                   	push   eax
c0012a81:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012a83:	52                   	push   edx
c0012a84:	51                   	push   ecx
c0012a85:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012a88:	83 c4 10             	add    esp,0x10
c0012a8b:	83 c4 0c             	add    esp,0xc
c0012a8e:	c3                   	ret    
c0012a8f:	90                   	nop

c0012a90 <File::stat(unsigned long long*, bool*)>:
c0012a90:	56                   	push   esi
c0012a91:	53                   	push   ebx
c0012a92:	50                   	push   eax
c0012a93:	b8 0b 00 00 00       	mov    eax,0xb
c0012a98:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a9c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012aa0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012aa7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012aab:	80 f9 19             	cmp    cl,0x19
c0012aae:	77 3d                	ja     c0012aed <File::stat(unsigned long long*, bool*)+0x5d>
c0012ab0:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012ab7:	85 c9                	test   ecx,ecx
c0012ab9:	74 32                	je     c0012aed <File::stat(unsigned long long*, bool*)+0x5d>
c0012abb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ac1:	85 c9                	test   ecx,ecx
c0012ac3:	74 28                	je     c0012aed <File::stat(unsigned long long*, bool*)+0x5d>
c0012ac5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ac7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012acb:	74 13                	je     c0012ae0 <File::stat(unsigned long long*, bool*)+0x50>
c0012acd:	83 ec 04             	sub    esp,0x4
c0012ad0:	56                   	push   esi
c0012ad1:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012ad7:	51                   	push   ecx
c0012ad8:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012adb:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012ade:	eb 0a                	jmp    c0012aea <File::stat(unsigned long long*, bool*)+0x5a>
c0012ae0:	53                   	push   ebx
c0012ae1:	83 c2 0d             	add    edx,0xd
c0012ae4:	56                   	push   esi
c0012ae5:	52                   	push   edx
c0012ae6:	51                   	push   ecx
c0012ae7:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012aea:	83 c4 10             	add    esp,0x10
c0012aed:	5a                   	pop    edx
c0012aee:	5b                   	pop    ebx
c0012aef:	5e                   	pop    esi
c0012af0:	c3                   	ret    

c0012af1 <getcwd(Process*, char*, int)>:
c0012af1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012af5:	31 c0                	xor    eax,eax
c0012af7:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012afa:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012afe:	7d 15                	jge    c0012b15 <getcwd(Process*, char*, int)+0x24>
c0012b00:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b04:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012b0b:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012b0e:	84 c9                	test   cl,cl
c0012b10:	74 06                	je     c0012b18 <getcwd(Process*, char*, int)+0x27>
c0012b12:	40                   	inc    eax
c0012b13:	eb e2                	jmp    c0012af7 <getcwd(Process*, char*, int)+0x6>
c0012b15:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012b18:	31 c0                	xor    eax,eax
c0012b1a:	c3                   	ret    

c0012b1b <setcwd(Process*, char*)>:
c0012b1b:	55                   	push   ebp
c0012b1c:	57                   	push   edi
c0012b1d:	56                   	push   esi
c0012b1e:	53                   	push   ebx
c0012b1f:	81 ec 20 02 00 00    	sub    esp,0x220
c0012b25:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012b2c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012b32:	57                   	push   edi
c0012b33:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012b3a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012b3e:	56                   	push   esi
c0012b3f:	e8 92 fa ff ff       	call   c00125d6 <standardiseFiles(char*, char const*, char const*)>
c0012b44:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b47:	e8 9f db fe ff       	call   c00006eb <strlen>
c0012b4c:	83 c4 10             	add    esp,0x10
c0012b4f:	83 f8 02             	cmp    eax,0x2
c0012b52:	77 17                	ja     c0012b6b <setcwd(Process*, char*)+0x50>
c0012b54:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012b59:	83 e8 41             	sub    eax,0x41
c0012b5c:	83 f8 19             	cmp    eax,0x19
c0012b5f:	76 24                	jbe    c0012b85 <setcwd(Process*, char*)+0x6a>
c0012b61:	b8 03 00 00 00       	mov    eax,0x3
c0012b66:	e9 cb 00 00 00       	jmp    c0012c36 <setcwd(Process*, char*)+0x11b>
c0012b6b:	83 ec 0c             	sub    esp,0xc
c0012b6e:	56                   	push   esi
c0012b6f:	e8 77 db fe ff       	call   c00006eb <strlen>
c0012b74:	83 c4 10             	add    esp,0x10
c0012b77:	83 f8 03             	cmp    eax,0x3
c0012b7a:	75 33                	jne    c0012baf <setcwd(Process*, char*)+0x94>
c0012b7c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012b81:	75 2c                	jne    c0012baf <setcwd(Process*, char*)+0x94>
c0012b83:	eb cf                	jmp    c0012b54 <setcwd(Process*, char*)+0x39>
c0012b85:	8b 14 85 00 aa 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5600]
c0012b8c:	b8 05 00 00 00       	mov    eax,0x5
c0012b91:	85 d2                	test   edx,edx
c0012b93:	0f 84 9d 00 00 00    	je     c0012c36 <setcwd(Process*, char*)+0x11b>
c0012b99:	b8 06 00 00 00       	mov    eax,0x6
c0012b9e:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012ba5:	0f 84 8b 00 00 00    	je     c0012c36 <setcwd(Process*, char*)+0x11b>
c0012bab:	51                   	push   ecx
c0012bac:	51                   	push   ecx
c0012bad:	eb 7b                	jmp    c0012c2a <setcwd(Process*, char*)+0x10f>
c0012baf:	83 ec 0c             	sub    esp,0xc
c0012bb2:	68 14 01 00 00       	push   0x114
c0012bb7:	e8 a6 f5 ff ff       	call   c0012162 <operator new(unsigned long)>
c0012bbc:	83 c4 0c             	add    esp,0xc
c0012bbf:	89 c3                	mov    ebx,eax
c0012bc1:	55                   	push   ebp
c0012bc2:	56                   	push   esi
c0012bc3:	50                   	push   eax
c0012bc4:	e8 b7 fb ff ff       	call   c0012780 <File::File(char const*, Process*)>
c0012bc9:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012bce:	83 c4 0c             	add    esp,0xc
c0012bd1:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012bd5:	50                   	push   eax
c0012bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012bda:	50                   	push   eax
c0012bdb:	53                   	push   ebx
c0012bdc:	e8 af fe ff ff       	call   c0012a90 <File::stat(unsigned long long*, bool*)>
c0012be1:	83 c4 10             	add    esp,0x10
c0012be4:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012be6:	83 f8 02             	cmp    eax,0x2
c0012be9:	75 09                	jne    c0012bf4 <setcwd(Process*, char*)+0xd9>
c0012beb:	83 ec 0c             	sub    esp,0xc
c0012bee:	53                   	push   ebx
c0012bef:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012bf2:	eb 0d                	jmp    c0012c01 <setcwd(Process*, char*)+0xe6>
c0012bf4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012bf7:	85 c0                	test   eax,eax
c0012bf9:	74 10                	je     c0012c0b <setcwd(Process*, char*)+0xf0>
c0012bfb:	83 ec 0c             	sub    esp,0xc
c0012bfe:	53                   	push   ebx
c0012bff:	ff d2                	call   edx
c0012c01:	83 c4 10             	add    esp,0x10
c0012c04:	b8 01 00 00 00       	mov    eax,0x1
c0012c09:	eb 2b                	jmp    c0012c36 <setcwd(Process*, char*)+0x11b>
c0012c0b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012c10:	75 10                	jne    c0012c22 <setcwd(Process*, char*)+0x107>
c0012c12:	83 ec 0c             	sub    esp,0xc
c0012c15:	53                   	push   ebx
c0012c16:	ff d2                	call   edx
c0012c18:	83 c4 10             	add    esp,0x10
c0012c1b:	b8 02 00 00 00       	mov    eax,0x2
c0012c20:	eb 14                	jmp    c0012c36 <setcwd(Process*, char*)+0x11b>
c0012c22:	83 ec 0c             	sub    esp,0xc
c0012c25:	53                   	push   ebx
c0012c26:	ff d2                	call   edx
c0012c28:	58                   	pop    eax
c0012c29:	5a                   	pop    edx
c0012c2a:	56                   	push   esi
c0012c2b:	57                   	push   edi
c0012c2c:	e8 3c db fe ff       	call   c000076d <strcpy>
c0012c31:	83 c4 10             	add    esp,0x10
c0012c34:	31 c0                	xor    eax,eax
c0012c36:	81 c4 1c 02 00 00    	add    esp,0x21c
c0012c3c:	5b                   	pop    ebx
c0012c3d:	5e                   	pop    esi
c0012c3e:	5f                   	pop    edi
c0012c3f:	5d                   	pop    ebp
c0012c40:	c3                   	ret    
c0012c41:	90                   	nop

c0012c42 <Directory::Directory(char const*, Process*)>:
c0012c42:	83 ec 0c             	sub    esp,0xc
c0012c45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c49:	83 ec 08             	sub    esp,0x8
c0012c4c:	6a 00                	push   0x0
c0012c4e:	50                   	push   eax
c0012c4f:	e8 28 e2 ff ff       	call   c0010e7c <UnixFile::UnixFile(int)>
c0012c54:	83 c4 10             	add    esp,0x10
c0012c57:	ba 3c 73 02 c0       	mov    edx,0xc002733c
c0012c5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c60:	89 10                	mov    DWORD PTR [eax],edx
c0012c62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c66:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c70:	83 c0 0d             	add    eax,0xd
c0012c73:	83 ec 04             	sub    esp,0x4
c0012c76:	52                   	push   edx
c0012c77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c7b:	50                   	push   eax
c0012c7c:	e8 55 f9 ff ff       	call   c00125d6 <standardiseFiles(char*, char const*, char const*)>
c0012c81:	83 c4 10             	add    esp,0x10
c0012c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c88:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012c8b:	8d 50 bf             	lea    edx,[eax-0x41]
c0012c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c92:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c9c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012ca0:	90                   	nop
c0012ca1:	83 c4 0c             	add    esp,0xc
c0012ca4:	c3                   	ret    
c0012ca5:	90                   	nop

c0012ca6 <Directory::open()>:
c0012ca6:	53                   	push   ebx
c0012ca7:	b8 0b 00 00 00       	mov    eax,0xb
c0012cac:	83 ec 08             	sub    esp,0x8
c0012caf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012cb3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012cba:	80 fa 19             	cmp    dl,0x19
c0012cbd:	77 3d                	ja     c0012cfc <Directory::open()+0x56>
c0012cbf:	8b 14 95 00 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5600]
c0012cc6:	85 d2                	test   edx,edx
c0012cc8:	74 32                	je     c0012cfc <Directory::open()+0x56>
c0012cca:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012cd0:	85 d2                	test   edx,edx
c0012cd2:	74 28                	je     c0012cfc <Directory::open()+0x56>
c0012cd4:	b8 06 00 00 00       	mov    eax,0x6
c0012cd9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012cdd:	75 1d                	jne    c0012cfc <Directory::open()+0x56>
c0012cdf:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012ce5:	50                   	push   eax
c0012ce6:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ce8:	51                   	push   ecx
c0012ce9:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012cec:	51                   	push   ecx
c0012ced:	52                   	push   edx
c0012cee:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0012cf1:	83 c4 10             	add    esp,0x10
c0012cf4:	85 c0                	test   eax,eax
c0012cf6:	75 04                	jne    c0012cfc <Directory::open()+0x56>
c0012cf8:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012cfc:	83 c4 08             	add    esp,0x8
c0012cff:	5b                   	pop    ebx
c0012d00:	c3                   	ret    
c0012d01:	90                   	nop

c0012d02 <Directory::close()>:
c0012d02:	53                   	push   ebx
c0012d03:	b8 0b 00 00 00       	mov    eax,0xb
c0012d08:	83 ec 08             	sub    esp,0x8
c0012d0b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d0f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d16:	80 fa 19             	cmp    dl,0x19
c0012d19:	77 41                	ja     c0012d5c <Directory::close()+0x5a>
c0012d1b:	8b 1c 95 00 aa 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd5600]
c0012d22:	85 db                	test   ebx,ebx
c0012d24:	74 36                	je     c0012d5c <Directory::close()+0x5a>
c0012d26:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012d2d:	74 2d                	je     c0012d5c <Directory::close()+0x5a>
c0012d2f:	b8 05 00 00 00       	mov    eax,0x5
c0012d34:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d38:	74 22                	je     c0012d5c <Directory::close()+0x5a>
c0012d3a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012d3e:	8b 04 95 00 aa 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5600]
c0012d45:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d4b:	53                   	push   ebx
c0012d4c:	53                   	push   ebx
c0012d4d:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d4f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d55:	50                   	push   eax
c0012d56:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0012d59:	83 c4 10             	add    esp,0x10
c0012d5c:	83 c4 08             	add    esp,0x8
c0012d5f:	5b                   	pop    ebx
c0012d60:	c3                   	ret    
c0012d61:	90                   	nop

c0012d62 <Directory::unlink()>:
c0012d62:	83 ec 0c             	sub    esp,0xc
c0012d65:	b8 0b 00 00 00       	mov    eax,0xb
c0012d6a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d6e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d75:	80 f9 19             	cmp    cl,0x19
c0012d78:	77 2f                	ja     c0012da9 <Directory::unlink()+0x47>
c0012d7a:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012d81:	85 c9                	test   ecx,ecx
c0012d83:	74 24                	je     c0012da9 <Directory::unlink()+0x47>
c0012d85:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d8b:	85 c9                	test   ecx,ecx
c0012d8d:	74 1a                	je     c0012da9 <Directory::unlink()+0x47>
c0012d8f:	b8 06 00 00 00       	mov    eax,0x6
c0012d94:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d98:	75 0f                	jne    c0012da9 <Directory::unlink()+0x47>
c0012d9a:	83 c2 0d             	add    edx,0xd
c0012d9d:	50                   	push   eax
c0012d9e:	50                   	push   eax
c0012d9f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012da1:	52                   	push   edx
c0012da2:	51                   	push   ecx
c0012da3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012da6:	83 c4 10             	add    esp,0x10
c0012da9:	83 c4 0c             	add    esp,0xc
c0012dac:	c3                   	ret    
c0012dad:	90                   	nop

c0012dae <Directory::rename(char const*)>:
c0012dae:	83 ec 0c             	sub    esp,0xc
c0012db1:	b8 0b 00 00 00       	mov    eax,0xb
c0012db6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012dba:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012dc1:	80 f9 19             	cmp    cl,0x19
c0012dc4:	77 32                	ja     c0012df8 <Directory::rename(char const*)+0x4a>
c0012dc6:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012dcd:	85 c9                	test   ecx,ecx
c0012dcf:	74 27                	je     c0012df8 <Directory::rename(char const*)+0x4a>
c0012dd1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012dd7:	85 c9                	test   ecx,ecx
c0012dd9:	74 1d                	je     c0012df8 <Directory::rename(char const*)+0x4a>
c0012ddb:	b8 06 00 00 00       	mov    eax,0x6
c0012de0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012de4:	75 12                	jne    c0012df8 <Directory::rename(char const*)+0x4a>
c0012de6:	83 c2 0d             	add    edx,0xd
c0012de9:	50                   	push   eax
c0012dea:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012dec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012df0:	52                   	push   edx
c0012df1:	51                   	push   ecx
c0012df2:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012df5:	83 c4 10             	add    esp,0x10
c0012df8:	83 c4 0c             	add    esp,0xc
c0012dfb:	c3                   	ret    

c0012dfc <Directory::exists()>:
c0012dfc:	83 ec 0c             	sub    esp,0xc
c0012dff:	31 c0                	xor    eax,eax
c0012e01:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e05:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e0c:	80 f9 19             	cmp    cl,0x19
c0012e0f:	77 24                	ja     c0012e35 <Directory::exists()+0x39>
c0012e11:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012e18:	85 c9                	test   ecx,ecx
c0012e1a:	74 19                	je     c0012e35 <Directory::exists()+0x39>
c0012e1c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e22:	85 c9                	test   ecx,ecx
c0012e24:	74 0f                	je     c0012e35 <Directory::exists()+0x39>
c0012e26:	83 c2 0d             	add    edx,0xd
c0012e29:	50                   	push   eax
c0012e2a:	50                   	push   eax
c0012e2b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e2d:	52                   	push   edx
c0012e2e:	51                   	push   ecx
c0012e2f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012e32:	83 c4 10             	add    esp,0x10
c0012e35:	83 c4 0c             	add    esp,0xc
c0012e38:	c3                   	ret    
c0012e39:	90                   	nop

c0012e3a <Directory::read(dirent*)>:
c0012e3a:	83 ec 1c             	sub    esp,0x1c
c0012e3d:	b8 0b 00 00 00       	mov    eax,0xb
c0012e42:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012e46:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e4d:	80 fa 19             	cmp    dl,0x19
c0012e50:	77 30                	ja     c0012e82 <Directory::read(dirent*)+0x48>
c0012e52:	8b 14 95 00 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5600]
c0012e59:	85 d2                	test   edx,edx
c0012e5b:	74 25                	je     c0012e82 <Directory::read(dirent*)+0x48>
c0012e5d:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012e64:	74 1c                	je     c0012e82 <Directory::read(dirent*)+0x48>
c0012e66:	83 ec 0c             	sub    esp,0xc
c0012e69:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e6b:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012e6f:	52                   	push   edx
c0012e70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012e74:	6a 00                	push   0x0
c0012e76:	68 10 01 00 00       	push   0x110
c0012e7b:	51                   	push   ecx
c0012e7c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012e7f:	83 c4 20             	add    esp,0x20
c0012e82:	83 c4 1c             	add    esp,0x1c
c0012e85:	c3                   	ret    

c0012e86 <Directory::create()>:
c0012e86:	83 ec 0c             	sub    esp,0xc
c0012e89:	b8 0b 00 00 00       	mov    eax,0xb
c0012e8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e92:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e99:	80 f9 19             	cmp    cl,0x19
c0012e9c:	77 2f                	ja     c0012ecd <Directory::create()+0x47>
c0012e9e:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012ea5:	85 c9                	test   ecx,ecx
c0012ea7:	74 24                	je     c0012ecd <Directory::create()+0x47>
c0012ea9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012eaf:	85 c9                	test   ecx,ecx
c0012eb1:	74 1a                	je     c0012ecd <Directory::create()+0x47>
c0012eb3:	b8 06 00 00 00       	mov    eax,0x6
c0012eb8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ebc:	75 0f                	jne    c0012ecd <Directory::create()+0x47>
c0012ebe:	83 c2 0d             	add    edx,0xd
c0012ec1:	50                   	push   eax
c0012ec2:	50                   	push   eax
c0012ec3:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ec5:	52                   	push   edx
c0012ec6:	51                   	push   ecx
c0012ec7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0012eca:	83 c4 10             	add    esp,0x10
c0012ecd:	83 c4 0c             	add    esp,0xc
c0012ed0:	c3                   	ret    
c0012ed1:	90                   	nop

c0012ed2 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0012ed2:	b8 0a 00 00 00       	mov    eax,0xa
c0012ed7:	c3                   	ret    

c0012ed8 <Bus::Bus(char const*)>:
c0012ed8:	83 ec 0c             	sub    esp,0xc
c0012edb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012edf:	83 ec 08             	sub    esp,0x8
c0012ee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ee6:	50                   	push   eax
c0012ee7:	e8 60 09 00 00       	call   c001384c <Device::Device(char const*)>
c0012eec:	83 c4 10             	add    esp,0x10
c0012eef:	ba 58 73 02 c0       	mov    edx,0xc0027358
c0012ef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ef8:	89 10                	mov    DWORD PTR [eax],edx
c0012efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012efe:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0012f08:	90                   	nop
c0012f09:	83 c4 0c             	add    esp,0xc
c0012f0c:	c3                   	ret    
c0012f0d:	90                   	nop

c0012f0e <Bus::~Bus()>:
c0012f0e:	83 ec 0c             	sub    esp,0xc
c0012f11:	ba 58 73 02 c0       	mov    edx,0xc0027358
c0012f16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f1a:	89 10                	mov    DWORD PTR [eax],edx
c0012f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f20:	83 ec 0c             	sub    esp,0xc
c0012f23:	50                   	push   eax
c0012f24:	e8 d5 05 00 00       	call   c00134fe <Device::~Device()>
c0012f29:	83 c4 10             	add    esp,0x10
c0012f2c:	90                   	nop
c0012f2d:	83 c4 0c             	add    esp,0xc
c0012f30:	c3                   	ret    
c0012f31:	90                   	nop

c0012f32 <Bus::~Bus()>:
c0012f32:	83 ec 0c             	sub    esp,0xc
c0012f35:	83 ec 0c             	sub    esp,0xc
c0012f38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f3c:	e8 cd ff ff ff       	call   c0012f0e <Bus::~Bus()>
c0012f41:	83 c4 10             	add    esp,0x10
c0012f44:	83 ec 08             	sub    esp,0x8
c0012f47:	68 58 01 00 00       	push   0x158
c0012f4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f50:	e8 1c f2 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0012f55:	83 c4 10             	add    esp,0x10
c0012f58:	83 c4 0c             	add    esp,0xc
c0012f5b:	c3                   	ret    

c0012f5c <Buzzer::Buzzer(char const*)>:
c0012f5c:	83 ec 0c             	sub    esp,0xc
c0012f5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f63:	83 ec 08             	sub    esp,0x8
c0012f66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f6a:	50                   	push   eax
c0012f6b:	e8 dc 08 00 00       	call   c001384c <Device::Device(char const*)>
c0012f70:	83 c4 10             	add    esp,0x10
c0012f73:	ba 84 73 02 c0       	mov    edx,0xc0027384
c0012f78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f7c:	89 10                	mov    DWORD PTR [eax],edx
c0012f7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f82:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0012f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f90:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0012f9a:	90                   	nop
c0012f9b:	83 c4 0c             	add    esp,0xc
c0012f9e:	c3                   	ret    
c0012f9f:	90                   	nop

c0012fa0 <Buzzer::~Buzzer()>:
c0012fa0:	83 ec 0c             	sub    esp,0xc
c0012fa3:	ba 84 73 02 c0       	mov    edx,0xc0027384
c0012fa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fac:	89 10                	mov    DWORD PTR [eax],edx
c0012fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fb2:	83 ec 0c             	sub    esp,0xc
c0012fb5:	50                   	push   eax
c0012fb6:	e8 43 05 00 00       	call   c00134fe <Device::~Device()>
c0012fbb:	83 c4 10             	add    esp,0x10
c0012fbe:	90                   	nop
c0012fbf:	83 c4 0c             	add    esp,0xc
c0012fc2:	c3                   	ret    
c0012fc3:	90                   	nop

c0012fc4 <Buzzer::~Buzzer()>:
c0012fc4:	83 ec 0c             	sub    esp,0xc
c0012fc7:	83 ec 0c             	sub    esp,0xc
c0012fca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fce:	e8 cd ff ff ff       	call   c0012fa0 <Buzzer::~Buzzer()>
c0012fd3:	83 c4 10             	add    esp,0x10
c0012fd6:	83 ec 08             	sub    esp,0x8
c0012fd9:	68 5c 01 00 00       	push   0x15c
c0012fde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fe2:	e8 8a f1 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0012fe7:	83 c4 10             	add    esp,0x10
c0012fea:	83 c4 0c             	add    esp,0xc
c0012fed:	c3                   	ret    

c0012fee <Buzzer::stop()>:
c0012fee:	83 ec 14             	sub    esp,0x14
c0012ff1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ff5:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ff7:	6a 00                	push   0x0
c0012ff9:	50                   	push   eax
c0012ffa:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0012ffd:	83 c4 1c             	add    esp,0x1c
c0013000:	c3                   	ret    

c0013001 <beepThread(void*)>:
c0013001:	53                   	push   ebx
c0013002:	83 ec 08             	sub    esp,0x8
c0013005:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013009:	e8 36 89 00 00       	call   c001b944 <unlockScheduler()>
c001300e:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013013:	52                   	push   edx
c0013014:	52                   	push   edx
c0013015:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001301b:	52                   	push   edx
c001301c:	50                   	push   eax
c001301d:	e8 68 8e 00 00       	call   c001be8a <nanoSleep(unsigned long long)>
c0013022:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013025:	e8 c4 ff ff ff       	call   c0012fee <Buzzer::stop()>
c001302a:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013032:	83 c4 18             	add    esp,0x18
c0013035:	5b                   	pop    ebx
c0013036:	e9 95 8d 00 00       	jmp    c001bdd0 <blockTask(TaskState)>
c001303b:	90                   	nop

c001303c <Buzzer::beep(int, int, bool)>:
c001303c:	57                   	push   edi
c001303d:	56                   	push   esi
c001303e:	53                   	push   ebx
c001303f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013043:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013047:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001304b:	52                   	push   edx
c001304c:	52                   	push   edx
c001304d:	8b 06                	mov    eax,DWORD PTR [esi]
c001304f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013053:	56                   	push   esi
c0013054:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013057:	83 c4 10             	add    esp,0x10
c001305a:	89 f8                	mov    eax,edi
c001305c:	84 c0                	test   al,al
c001305e:	74 1f                	je     c001307f <Buzzer::beep(int, int, bool)+0x43>
c0013060:	50                   	push   eax
c0013061:	50                   	push   eax
c0013062:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013068:	99                   	cdq    
c0013069:	52                   	push   edx
c001306a:	50                   	push   eax
c001306b:	e8 1a 8e 00 00       	call   c001be8a <nanoSleep(unsigned long long)>
c0013070:	83 c4 10             	add    esp,0x10
c0013073:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013077:	5b                   	pop    ebx
c0013078:	5e                   	pop    esi
c0013079:	5f                   	pop    edi
c001307a:	e9 6f ff ff ff       	jmp    c0012fee <Buzzer::stop()>
c001307f:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013085:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001308a:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013092:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013096:	c7 44 24 14 01 30 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013001
c001309e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00130a2:	5b                   	pop    ebx
c00130a3:	5e                   	pop    esi
c00130a4:	5f                   	pop    edi
c00130a5:	e9 c2 89 00 00       	jmp    c001ba6c <Process::createThread(void (*)(void*), void*, int)>

c00130aa <loadClockSettings()>:
c00130aa:	c7 05 74 a5 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002a574,0xa
c00130b4:	c6 05 71 a5 02 c0 00 	mov    BYTE PTR ds:0xc002a571,0x0
c00130bb:	c6 05 70 a5 02 c0 01 	mov    BYTE PTR ds:0xc002a570,0x1
c00130c2:	c3                   	ret    
c00130c3:	90                   	nop

c00130c4 <Clock::Clock(char const*)>:
c00130c4:	83 ec 0c             	sub    esp,0xc
c00130c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130cb:	83 ec 08             	sub    esp,0x8
c00130ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130d2:	50                   	push   eax
c00130d3:	e8 74 07 00 00       	call   c001384c <Device::Device(char const*)>
c00130d8:	83 c4 10             	add    esp,0x10
c00130db:	ba b4 73 02 c0       	mov    edx,0xc00273b4
c00130e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130e4:	89 10                	mov    DWORD PTR [eax],edx
c00130e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ea:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00130f4:	90                   	nop
c00130f5:	83 c4 0c             	add    esp,0xc
c00130f8:	c3                   	ret    
c00130f9:	90                   	nop

c00130fa <Clock::~Clock()>:
c00130fa:	83 ec 0c             	sub    esp,0xc
c00130fd:	ba b4 73 02 c0       	mov    edx,0xc00273b4
c0013102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013106:	89 10                	mov    DWORD PTR [eax],edx
c0013108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001310c:	83 ec 0c             	sub    esp,0xc
c001310f:	50                   	push   eax
c0013110:	e8 e9 03 00 00       	call   c00134fe <Device::~Device()>
c0013115:	83 c4 10             	add    esp,0x10
c0013118:	90                   	nop
c0013119:	83 c4 0c             	add    esp,0xc
c001311c:	c3                   	ret    
c001311d:	90                   	nop

c001311e <Clock::~Clock()>:
c001311e:	83 ec 0c             	sub    esp,0xc
c0013121:	83 ec 0c             	sub    esp,0xc
c0013124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013128:	e8 cd ff ff ff       	call   c00130fa <Clock::~Clock()>
c001312d:	83 c4 10             	add    esp,0x10
c0013130:	83 ec 08             	sub    esp,0x8
c0013133:	68 58 01 00 00       	push   0x158
c0013138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001313c:	e8 30 f0 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0013141:	83 c4 10             	add    esp,0x10
c0013144:	83 c4 0c             	add    esp,0xc
c0013147:	c3                   	ret    

c0013148 <Clock::timeInSecondsLocal()>:
c0013148:	53                   	push   ebx
c0013149:	83 ec 14             	sub    esp,0x14
c001314c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013150:	8b 10                	mov    edx,DWORD PTR [eax]
c0013152:	50                   	push   eax
c0013153:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013156:	0f b6 0d 70 a5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a570
c001315d:	03 0d 74 a5 02 c0    	add    ecx,DWORD PTR ds:0xc002a574
c0013163:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013169:	89 cb                	mov    ebx,ecx
c001316b:	c1 fb 1f             	sar    ebx,0x1f
c001316e:	01 c8                	add    eax,ecx
c0013170:	11 da                	adc    edx,ebx
c0013172:	83 c4 10             	add    esp,0x10
c0013175:	31 c9                	xor    ecx,ecx
c0013177:	80 3d 71 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a571,0x0
c001317e:	74 05                	je     c0013185 <Clock::timeInSecondsLocal()+0x3d>
c0013180:	b9 08 07 00 00       	mov    ecx,0x708
c0013185:	31 db                	xor    ebx,ebx
c0013187:	01 c8                	add    eax,ecx
c0013189:	11 da                	adc    edx,ebx
c001318b:	83 c4 08             	add    esp,0x8
c001318e:	5b                   	pop    ebx
c001318f:	c3                   	ret    

c0013190 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013190:	57                   	push   edi
c0013191:	56                   	push   esi
c0013192:	53                   	push   ebx
c0013193:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013197:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001319b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001319d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00131a1:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00131a4:	0f b6 05 70 a5 02 c0 	movzx  eax,BYTE PTR ds:0xc002a570
c00131ab:	03 05 74 a5 02 c0    	add    eax,DWORD PTR ds:0xc002a574
c00131b1:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00131b7:	99                   	cdq    
c00131b8:	29 c6                	sub    esi,eax
c00131ba:	19 d7                	sbb    edi,edx
c00131bc:	89 f0                	mov    eax,esi
c00131be:	89 fa                	mov    edx,edi
c00131c0:	31 f6                	xor    esi,esi
c00131c2:	80 3d 71 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a571,0x0
c00131c9:	74 05                	je     c00131d0 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00131cb:	be 08 07 00 00       	mov    esi,0x708
c00131d0:	31 ff                	xor    edi,edi
c00131d2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00131d6:	29 f0                	sub    eax,esi
c00131d8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00131dc:	19 fa                	sbb    edx,edi
c00131de:	89 d8                	mov    eax,ebx
c00131e0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00131e4:	5b                   	pop    ebx
c00131e5:	5e                   	pop    esi
c00131e6:	5f                   	pop    edi
c00131e7:	ff e0                	jmp    eax

c00131e9 <datetimeToSeconds(datetime_t)>:
c00131e9:	55                   	push   ebp
c00131ea:	57                   	push   edi
c00131eb:	56                   	push   esi
c00131ec:	53                   	push   ebx
c00131ed:	83 ec 14             	sub    esp,0x14
c00131f0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00131f4:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00131f8:	89 d3                	mov    ebx,edx
c00131fa:	0f b6 c6             	movzx  eax,dh
c00131fd:	c1 eb 10             	shr    ebx,0x10
c0013200:	48                   	dec    eax
c0013201:	66 81 eb 6c 07       	sub    bx,0x76c
c0013206:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001320a:	0f b6 f5             	movzx  esi,ch
c001320d:	89 cf                	mov    edi,ecx
c001320f:	6b f6 3c             	imul   esi,esi,0x3c
c0013212:	c1 ef 10             	shr    edi,0x10
c0013215:	0f b6 c9             	movzx  ecx,cl
c0013218:	89 f8                	mov    eax,edi
c001321a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013220:	0f b6 f8             	movzx  edi,al
c0013223:	0f b6 d2             	movzx  edx,dl
c0013226:	01 fe                	add    esi,edi
c0013228:	01 f1                	add    ecx,esi
c001322a:	0f b7 f3             	movzx  esi,bx
c001322d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013231:	c1 f9 1f             	sar    ecx,0x1f
c0013234:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013239:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001323d:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013242:	8b 0c 8d 00 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8c00]
c0013249:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001324d:	76 29                	jbe    c0013278 <datetimeToSeconds(datetime_t)+0x8f>
c001324f:	f6 c3 03             	test   bl,0x3
c0013252:	75 24                	jne    c0013278 <datetimeToSeconds(datetime_t)+0x8f>
c0013254:	31 d2                	xor    edx,edx
c0013256:	bf 64 00 00 00       	mov    edi,0x64
c001325b:	89 d8                	mov    eax,ebx
c001325d:	66 f7 f7             	div    di
c0013260:	66 85 d2             	test   dx,dx
c0013263:	75 12                	jne    c0013277 <datetimeToSeconds(datetime_t)+0x8e>
c0013265:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001326b:	bf 90 01 00 00       	mov    edi,0x190
c0013270:	99                   	cdq    
c0013271:	f7 ff                	idiv   edi
c0013273:	85 d2                	test   edx,edx
c0013275:	75 01                	jne    c0013278 <datetimeToSeconds(datetime_t)+0x8f>
c0013277:	41                   	inc    ecx
c0013278:	66 83 fb 46          	cmp    bx,0x46
c001327c:	76 45                	jbe    c00132c3 <datetimeToSeconds(datetime_t)+0xda>
c001327e:	bb 46 00 00 00       	mov    ebx,0x46
c0013283:	bf 64 00 00 00       	mov    edi,0x64
c0013288:	bd 90 01 00 00       	mov    ebp,0x190
c001328d:	b8 6d 01 00 00       	mov    eax,0x16d
c0013292:	f6 c3 03             	test   bl,0x3
c0013295:	75 23                	jne    c00132ba <datetimeToSeconds(datetime_t)+0xd1>
c0013297:	89 d8                	mov    eax,ebx
c0013299:	99                   	cdq    
c001329a:	f7 ff                	idiv   edi
c001329c:	b8 6e 01 00 00       	mov    eax,0x16e
c00132a1:	85 d2                	test   edx,edx
c00132a3:	75 15                	jne    c00132ba <datetimeToSeconds(datetime_t)+0xd1>
c00132a5:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00132ab:	99                   	cdq    
c00132ac:	f7 fd                	idiv   ebp
c00132ae:	83 fa 01             	cmp    edx,0x1
c00132b1:	19 c0                	sbb    eax,eax
c00132b3:	f7 d0                	not    eax
c00132b5:	05 6e 01 00 00       	add    eax,0x16e
c00132ba:	01 c1                	add    ecx,eax
c00132bc:	43                   	inc    ebx
c00132bd:	39 f3                	cmp    ebx,esi
c00132bf:	7c cc                	jl     c001328d <datetimeToSeconds(datetime_t)+0xa4>
c00132c1:	eb 35                	jmp    c00132f8 <datetimeToSeconds(datetime_t)+0x10f>
c00132c3:	74 33                	je     c00132f8 <datetimeToSeconds(datetime_t)+0x10f>
c00132c5:	b8 45 00 00 00       	mov    eax,0x45
c00132ca:	89 c2                	mov    edx,eax
c00132cc:	83 e2 03             	and    edx,0x3
c00132cf:	39 f0                	cmp    eax,esi
c00132d1:	7e 0f                	jle    c00132e2 <datetimeToSeconds(datetime_t)+0xf9>
c00132d3:	83 fa 01             	cmp    edx,0x1
c00132d6:	19 d2                	sbb    edx,edx
c00132d8:	48                   	dec    eax
c00132d9:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00132e0:	eb e8                	jmp    c00132ca <datetimeToSeconds(datetime_t)+0xe1>
c00132e2:	b8 6d 01 00 00       	mov    eax,0x16d
c00132e7:	85 d2                	test   edx,edx
c00132e9:	75 0b                	jne    c00132f6 <datetimeToSeconds(datetime_t)+0x10d>
c00132eb:	66 83 fb 01          	cmp    bx,0x1
c00132ef:	19 c0                	sbb    eax,eax
c00132f1:	05 6e 01 00 00       	add    eax,0x16e
c00132f6:	29 c1                	sub    ecx,eax
c00132f8:	b8 80 51 01 00       	mov    eax,0x15180
c00132fd:	f7 e9                	imul   ecx
c00132ff:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013303:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013307:	83 c4 14             	add    esp,0x14
c001330a:	5b                   	pop    ebx
c001330b:	5e                   	pop    esi
c001330c:	5f                   	pop    edi
c001330d:	5d                   	pop    ebp
c001330e:	c3                   	ret    
c001330f:	90                   	nop

c0013310 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013310:	57                   	push   edi
c0013311:	56                   	push   esi
c0013312:	53                   	push   ebx
c0013313:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013317:	8b 06                	mov    eax,DWORD PTR [esi]
c0013319:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001331c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013320:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013324:	e8 c0 fe ff ff       	call   c00131e9 <datetimeToSeconds(datetime_t)>
c0013329:	59                   	pop    ecx
c001332a:	0f b6 0d 70 a5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a570
c0013331:	5b                   	pop    ebx
c0013332:	03 0d 74 a5 02 c0    	add    ecx,DWORD PTR ds:0xc002a574
c0013338:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001333e:	89 cb                	mov    ebx,ecx
c0013340:	c1 fb 1f             	sar    ebx,0x1f
c0013343:	29 c8                	sub    eax,ecx
c0013345:	19 da                	sbb    edx,ebx
c0013347:	31 c9                	xor    ecx,ecx
c0013349:	80 3d 71 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a571,0x0
c0013350:	74 05                	je     c0013357 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013352:	b9 08 07 00 00       	mov    ecx,0x708
c0013357:	31 db                	xor    ebx,ebx
c0013359:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001335d:	29 c8                	sub    eax,ecx
c001335f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013363:	19 da                	sbb    edx,ebx
c0013365:	89 f8                	mov    eax,edi
c0013367:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001336b:	5b                   	pop    ebx
c001336c:	5e                   	pop    esi
c001336d:	5f                   	pop    edi
c001336e:	ff e0                	jmp    eax

c0013370 <secondsToDatetime(unsigned long long)>:
c0013370:	55                   	push   ebp
c0013371:	57                   	push   edi
c0013372:	56                   	push   esi
c0013373:	53                   	push   ebx
c0013374:	83 ec 1c             	sub    esp,0x1c
c0013377:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001337b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001337f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013383:	6a 00                	push   0x0
c0013385:	68 80 51 01 00       	push   0x15180
c001338a:	55                   	push   ebp
c001338b:	57                   	push   edi
c001338c:	e8 cb ff 00 00       	call   c002335c <__udivdi3>
c0013391:	83 c4 10             	add    esp,0x10
c0013394:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001339a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001339e:	6a 00                	push   0x0
c00133a0:	68 80 51 01 00       	push   0x15180
c00133a5:	55                   	push   ebp
c00133a6:	57                   	push   edi
c00133a7:	bf 10 0e 00 00       	mov    edi,0xe10
c00133ac:	e8 ab 00 01 00       	call   c002345c <__umoddi3>
c00133b1:	83 c4 10             	add    esp,0x10
c00133b4:	99                   	cdq    
c00133b5:	f7 ff                	idiv   edi
c00133b7:	bf 3c 00 00 00       	mov    edi,0x3c
c00133bc:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00133bf:	89 d0                	mov    eax,edx
c00133c1:	99                   	cdq    
c00133c2:	f7 ff                	idiv   edi
c00133c4:	85 db                	test   ebx,ebx
c00133c6:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00133c9:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00133cc:	79 11                	jns    c00133df <secondsToDatetime(unsigned long long)+0x6f>
c00133ce:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00133d2:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00133d8:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00133dd:	eb 07                	jmp    c00133e6 <secondsToDatetime(unsigned long long)+0x76>
c00133df:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00133e4:	89 d8                	mov    eax,ebx
c00133e6:	bf b4 05 00 00       	mov    edi,0x5b4
c00133eb:	99                   	cdq    
c00133ec:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00133f1:	f7 f9                	idiv   ecx
c00133f3:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00133f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00133fc:	31 d2                	xor    edx,edx
c00133fe:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013406:	01 c3                	add    ebx,eax
c0013408:	89 d8                	mov    eax,ebx
c001340a:	f7 f1                	div    ecx
c001340c:	31 d2                	xor    edx,edx
c001340e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013411:	89 d8                	mov    eax,ebx
c0013413:	f7 f7                	div    edi
c0013415:	31 d2                	xor    edx,edx
c0013417:	29 c1                	sub    ecx,eax
c0013419:	89 d8                	mov    eax,ebx
c001341b:	f7 f5                	div    ebp
c001341d:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013422:	29 c1                	sub    ecx,eax
c0013424:	31 d2                	xor    edx,edx
c0013426:	89 c8                	mov    eax,ecx
c0013428:	f7 f5                	div    ebp
c001342a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001342f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013433:	31 d2                	xor    edx,edx
c0013435:	89 c8                	mov    eax,ecx
c0013437:	f7 f5                	div    ebp
c0013439:	31 d2                	xor    edx,edx
c001343b:	01 c3                	add    ebx,eax
c001343d:	89 c8                	mov    eax,ecx
c001343f:	f7 f7                	div    edi
c0013441:	bf 99 00 00 00       	mov    edi,0x99
c0013446:	29 c3                	sub    ebx,eax
c0013448:	31 d2                	xor    edx,edx
c001344a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013452:	29 c3                	sub    ebx,eax
c0013454:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013457:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001345a:	bb 05 00 00 00       	mov    ebx,0x5
c001345f:	83 c1 02             	add    ecx,0x2
c0013462:	89 c8                	mov    eax,ecx
c0013464:	f7 f7                	div    edi
c0013466:	31 d2                	xor    edx,edx
c0013468:	89 c7                	mov    edi,eax
c001346a:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013470:	83 c0 02             	add    eax,0x2
c0013473:	f7 f3                	div    ebx
c0013475:	89 eb                	mov    ebx,ebp
c0013477:	29 c3                	sub    ebx,eax
c0013479:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001347f:	88 1e                	mov    BYTE PTR [esi],bl
c0013481:	19 c0                	sbb    eax,eax
c0013483:	31 d2                	xor    edx,edx
c0013485:	83 e0 0c             	and    eax,0xc
c0013488:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001348c:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013494:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013498:	83 f9 01             	cmp    ecx,0x1
c001349b:	0f 96 c2             	setbe  dl
c001349e:	41                   	inc    ecx
c001349f:	01 d0                	add    eax,edx
c00134a1:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00134a4:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00134a8:	83 c4 1c             	add    esp,0x1c
c00134ab:	89 f0                	mov    eax,esi
c00134ad:	5b                   	pop    ebx
c00134ae:	5e                   	pop    esi
c00134af:	5f                   	pop    edi
c00134b0:	5d                   	pop    ebp
c00134b1:	c2 04 00             	ret    0x4

c00134b4 <Clock::timeInDatetimeLocal()>:
c00134b4:	53                   	push   ebx
c00134b5:	83 ec 14             	sub    esp,0x14
c00134b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00134bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00134c0:	e8 83 fc ff ff       	call   c0013148 <Clock::timeInSecondsLocal()>
c00134c5:	83 c4 0c             	add    esp,0xc
c00134c8:	52                   	push   edx
c00134c9:	50                   	push   eax
c00134ca:	53                   	push   ebx
c00134cb:	e8 a0 fe ff ff       	call   c0013370 <secondsToDatetime(unsigned long long)>
c00134d0:	89 d8                	mov    eax,ebx
c00134d2:	83 c4 14             	add    esp,0x14
c00134d5:	5b                   	pop    ebx
c00134d6:	c2 04 00             	ret    0x4
c00134d9:	90                   	nop

c00134da <Device::hibernate()>:
c00134da:	c3                   	ret    
c00134db:	90                   	nop

c00134dc <Device::wake()>:
c00134dc:	c3                   	ret    
c00134dd:	90                   	nop

c00134de <Device::detect()>:
c00134de:	c3                   	ret    
c00134df:	90                   	nop

c00134e0 <Device::disableLegacy()>:
c00134e0:	c3                   	ret    
c00134e1:	90                   	nop

c00134e2 <Device::powerSaving(PowerSavingLevel)>:
c00134e2:	c3                   	ret    
c00134e3:	90                   	nop

c00134e4 <DriverlessDevice::close(int, int, void*)>:
c00134e4:	31 c0                	xor    eax,eax
c00134e6:	c3                   	ret    
c00134e7:	90                   	nop

c00134e8 <DriverlessDevice::detect()>:
c00134e8:	c3                   	ret    
c00134e9:	90                   	nop

c00134ea <DriverlessDevice::open(int, int, void*)>:
c00134ea:	83 ec 18             	sub    esp,0x18
c00134ed:	68 30 74 02 c0       	push   0xc0027430
c00134f2:	e8 f8 54 00 00       	call   c00189ef <Krnl::panic(char const*)>
c00134f7:	83 c8 ff             	or     eax,0xffffffff
c00134fa:	83 c4 1c             	add    esp,0x1c
c00134fd:	c3                   	ret    

c00134fe <Device::~Device()>:
c00134fe:	ba 58 74 02 c0       	mov    edx,0xc0027458
c0013503:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013507:	89 10                	mov    DWORD PTR [eax],edx
c0013509:	90                   	nop
c001350a:	c3                   	ret    
c001350b:	90                   	nop

c001350c <Device::~Device()>:
c001350c:	83 ec 0c             	sub    esp,0xc
c001350f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013513:	e8 e6 ff ff ff       	call   c00134fe <Device::~Device()>
c0013518:	83 c4 04             	add    esp,0x4
c001351b:	83 ec 08             	sub    esp,0x8
c001351e:	68 58 01 00 00       	push   0x158
c0013523:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013527:	e8 45 ec ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c001352c:	83 c4 10             	add    esp,0x10
c001352f:	83 c4 0c             	add    esp,0xc
c0013532:	c3                   	ret    
c0013533:	90                   	nop

c0013534 <Device::findAndLoadDriver()>:
c0013534:	c3                   	ret    
c0013535:	90                   	nop

c0013536 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013536:	57                   	push   edi
c0013537:	b9 09 00 00 00       	mov    ecx,0x9
c001353c:	56                   	push   esi
c001353d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013541:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013545:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001354f:	81 c7 18 01 00 00    	add    edi,0x118
c0013555:	fc                   	cld    
c0013556:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013558:	5e                   	pop    esi
c0013559:	5f                   	pop    edi
c001355a:	c3                   	ret    
c001355b:	90                   	nop

c001355c <Device::preOpenACPI(void*, char*, char*)>:
c001355c:	56                   	push   esi
c001355d:	53                   	push   ebx
c001355e:	83 ec 08             	sub    esp,0x8
c0013561:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013565:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013569:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013573:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013577:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001357d:	6a 1e                	push   0x1e
c001357f:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013585:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013589:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001358f:	50                   	push   eax
c0013590:	e8 03 d1 fe ff       	call   c0000698 <memcpy>
c0013595:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013599:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001359d:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00135a5:	83 c4 14             	add    esp,0x14
c00135a8:	5b                   	pop    ebx
c00135a9:	5e                   	pop    esi
c00135aa:	e9 e9 d0 fe ff       	jmp    c0000698 <memcpy>
c00135af:	90                   	nop

c00135b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00135b0:	55                   	push   ebp
c00135b1:	57                   	push   edi
c00135b2:	56                   	push   esi
c00135b3:	53                   	push   ebx
c00135b4:	83 ec 0c             	sub    esp,0xc
c00135b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135bb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00135bf:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00135c3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00135c7:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00135cc:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00135d3:	75 0b                	jne    c00135e0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00135d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00135d7:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00135db:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00135de:	eb 24                	jmp    c0013604 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00135e0:	e8 87 42 00 00       	call   c001786c <CPU::current()>
c00135e5:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00135eb:	8b 10                	mov    edx,DWORD PTR [eax]
c00135ed:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00135f1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00135f5:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00135f9:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00135fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013601:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013604:	83 c4 0c             	add    esp,0xc
c0013607:	5b                   	pop    ebx
c0013608:	5e                   	pop    esi
c0013609:	5f                   	pop    edi
c001360a:	5d                   	pop    ebp
c001360b:	ff e0                	jmp    eax
c001360d:	90                   	nop

c001360e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001360e:	57                   	push   edi
c001360f:	56                   	push   esi
c0013610:	53                   	push   ebx
c0013611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013615:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013619:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001361d:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0013622:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013629:	75 0b                	jne    c0013636 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c001362b:	8b 00                	mov    eax,DWORD PTR [eax]
c001362d:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0013631:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013634:	eb 20                	jmp    c0013656 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c0013636:	e8 31 42 00 00       	call   c001786c <CPU::current()>
c001363b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013641:	8b 10                	mov    edx,DWORD PTR [eax]
c0013643:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0013647:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001364b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001364f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013653:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c0013656:	5b                   	pop    ebx
c0013657:	5e                   	pop    esi
c0013658:	5f                   	pop    edi
c0013659:	ff e0                	jmp    eax
c001365b:	90                   	nop

c001365c <Device::addChild(Device*)>:
c001365c:	53                   	push   ebx
c001365d:	83 ec 08             	sub    esp,0x8
c0013660:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013664:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013668:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001366e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013674:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013676:	85 d2                	test   edx,edx
c0013678:	74 04                	je     c001367e <Device::addChild(Device*)+0x22>
c001367a:	89 d3                	mov    ebx,edx
c001367c:	eb f6                	jmp    c0013674 <Device::addChild(Device*)+0x18>
c001367e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013681:	83 ec 0c             	sub    esp,0xc
c0013684:	6a 08                	push   0x8
c0013686:	e8 d7 ea ff ff       	call   c0012162 <operator new(unsigned long)>
c001368b:	89 03                	mov    DWORD PTR [ebx],eax
c001368d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013693:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001369a:	83 c4 18             	add    esp,0x18
c001369d:	5b                   	pop    ebx
c001369e:	c3                   	ret    
c001369f:	90                   	nop

c00136a0 <Device::removeAllChildren()>:
c00136a0:	56                   	push   esi
c00136a1:	53                   	push   ebx
c00136a2:	52                   	push   edx
c00136a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136a7:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00136ad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00136b0:	74 17                	je     c00136c9 <Device::removeAllChildren()+0x29>
c00136b2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00136b5:	85 c0                	test   eax,eax
c00136b7:	74 0c                	je     c00136c5 <Device::removeAllChildren()+0x25>
c00136b9:	83 ec 0c             	sub    esp,0xc
c00136bc:	8b 10                	mov    edx,DWORD PTR [eax]
c00136be:	50                   	push   eax
c00136bf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00136c2:	83 c4 10             	add    esp,0x10
c00136c5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00136c7:	eb e4                	jmp    c00136ad <Device::removeAllChildren()+0xd>
c00136c9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00136cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00136d5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00136db:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00136e2:	58                   	pop    eax
c00136e3:	5b                   	pop    ebx
c00136e4:	5e                   	pop    esi
c00136e5:	c3                   	ret    

c00136e6 <Device::hibernateAll()>:
c00136e6:	53                   	push   ebx
c00136e7:	83 ec 14             	sub    esp,0x14
c00136ea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00136ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00136f0:	53                   	push   ebx
c00136f1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00136f4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00136fa:	83 c4 10             	add    esp,0x10
c00136fd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013700:	74 0f                	je     c0013711 <Device::hibernateAll()+0x2b>
c0013702:	83 ec 0c             	sub    esp,0xc
c0013705:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013708:	e8 d9 ff ff ff       	call   c00136e6 <Device::hibernateAll()>
c001370d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001370f:	eb e9                	jmp    c00136fa <Device::hibernateAll()+0x14>
c0013711:	83 c4 08             	add    esp,0x8
c0013714:	5b                   	pop    ebx
c0013715:	c3                   	ret    

c0013716 <Device::wakeAll()>:
c0013716:	53                   	push   ebx
c0013717:	83 ec 14             	sub    esp,0x14
c001371a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001371e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013720:	53                   	push   ebx
c0013721:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013724:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001372a:	83 c4 10             	add    esp,0x10
c001372d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013730:	74 0f                	je     c0013741 <Device::wakeAll()+0x2b>
c0013732:	83 ec 0c             	sub    esp,0xc
c0013735:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013738:	e8 d9 ff ff ff       	call   c0013716 <Device::wakeAll()>
c001373d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001373f:	eb e9                	jmp    c001372a <Device::wakeAll()+0x14>
c0013741:	83 c4 08             	add    esp,0x8
c0013744:	5b                   	pop    ebx
c0013745:	c3                   	ret    

c0013746 <Device::detectAll()>:
c0013746:	53                   	push   ebx
c0013747:	83 ec 14             	sub    esp,0x14
c001374a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001374e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013750:	53                   	push   ebx
c0013751:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013754:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001375a:	83 c4 10             	add    esp,0x10
c001375d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013760:	74 0f                	je     c0013771 <Device::detectAll()+0x2b>
c0013762:	83 ec 0c             	sub    esp,0xc
c0013765:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013768:	e8 d9 ff ff ff       	call   c0013746 <Device::detectAll()>
c001376d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001376f:	eb e9                	jmp    c001375a <Device::detectAll()+0x14>
c0013771:	83 c4 08             	add    esp,0x8
c0013774:	5b                   	pop    ebx
c0013775:	c3                   	ret    

c0013776 <Device::disableLegacyAll()>:
c0013776:	53                   	push   ebx
c0013777:	83 ec 14             	sub    esp,0x14
c001377a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001377e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013780:	53                   	push   ebx
c0013781:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013784:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001378a:	83 c4 10             	add    esp,0x10
c001378d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013790:	74 0f                	je     c00137a1 <Device::disableLegacyAll()+0x2b>
c0013792:	83 ec 0c             	sub    esp,0xc
c0013795:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013798:	e8 d9 ff ff ff       	call   c0013776 <Device::disableLegacyAll()>
c001379d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001379f:	eb e9                	jmp    c001378a <Device::disableLegacyAll()+0x14>
c00137a1:	83 c4 08             	add    esp,0x8
c00137a4:	5b                   	pop    ebx
c00137a5:	c3                   	ret    

c00137a6 <Device::loadDriversForAll()>:
c00137a6:	53                   	push   ebx
c00137a7:	83 ec 08             	sub    esp,0x8
c00137aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ae:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00137b4:	8b 18                	mov    ebx,DWORD PTR [eax]
c00137b6:	85 db                	test   ebx,ebx
c00137b8:	74 12                	je     c00137cc <Device::loadDriversForAll()+0x26>
c00137ba:	83 ec 0c             	sub    esp,0xc
c00137bd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00137c0:	e8 e1 ff ff ff       	call   c00137a6 <Device::loadDriversForAll()>
c00137c5:	83 c4 10             	add    esp,0x10
c00137c8:	89 d8                	mov    eax,ebx
c00137ca:	eb e8                	jmp    c00137b4 <Device::loadDriversForAll()+0xe>
c00137cc:	83 c4 08             	add    esp,0x8
c00137cf:	5b                   	pop    ebx
c00137d0:	c3                   	ret    
c00137d1:	90                   	nop

c00137d2 <Device::closeAll()>:
c00137d2:	53                   	push   ebx
c00137d3:	83 ec 08             	sub    esp,0x8
c00137d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00137da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137dc:	6a 00                	push   0x0
c00137de:	6a 00                	push   0x0
c00137e0:	6a 00                	push   0x0
c00137e2:	53                   	push   ebx
c00137e3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00137e6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00137ec:	83 c4 10             	add    esp,0x10
c00137ef:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00137f2:	74 0f                	je     c0013803 <Device::closeAll()+0x31>
c00137f4:	83 ec 0c             	sub    esp,0xc
c00137f7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00137fa:	e8 d3 ff ff ff       	call   c00137d2 <Device::closeAll()>
c00137ff:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013801:	eb e9                	jmp    c00137ec <Device::closeAll()+0x1a>
c0013803:	83 c4 08             	add    esp,0x8
c0013806:	5b                   	pop    ebx
c0013807:	c3                   	ret    

c0013808 <Device::powerSavingAll(PowerSavingLevel)>:
c0013808:	56                   	push   esi
c0013809:	53                   	push   ebx
c001380a:	83 ec 0c             	sub    esp,0xc
c001380d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013811:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013815:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013817:	56                   	push   esi
c0013818:	53                   	push   ebx
c0013819:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001381c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013822:	83 c4 10             	add    esp,0x10
c0013825:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013828:	74 0f                	je     c0013839 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001382a:	52                   	push   edx
c001382b:	52                   	push   edx
c001382c:	56                   	push   esi
c001382d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013830:	e8 d3 ff ff ff       	call   c0013808 <Device::powerSavingAll(PowerSavingLevel)>
c0013835:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013837:	eb e9                	jmp    c0013822 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013839:	58                   	pop    eax
c001383a:	5b                   	pop    ebx
c001383b:	5e                   	pop    esi
c001383c:	c3                   	ret    
c001383d:	90                   	nop

c001383e <Device::setName(char const*)>:
c001383e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013846:	e9 22 cf fe ff       	jmp    c000076d <strcpy>
c001384b:	90                   	nop

c001384c <Device::Device(char const*)>:
c001384c:	83 ec 0c             	sub    esp,0xc
c001384f:	ba 58 74 02 c0       	mov    edx,0xc0027458
c0013854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013858:	89 10                	mov    DWORD PTR [eax],edx
c001385a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001385e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001386c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001387a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013888:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013892:	83 ec 08             	sub    esp,0x8
c0013895:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013899:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001389d:	e8 9c ff ff ff       	call   c001383e <Device::setName(char const*)>
c00138a2:	83 c4 10             	add    esp,0x10
c00138a5:	83 ec 0c             	sub    esp,0xc
c00138a8:	6a 08                	push   0x8
c00138aa:	e8 b3 e8 ff ff       	call   c0012162 <operator new(unsigned long)>
c00138af:	83 c4 10             	add    esp,0x10
c00138b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00138b8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00138bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138c3:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00138c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138cd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00138d3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00138d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138dd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00138e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00138ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138ee:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00138f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138f9:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013904:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001390e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013912:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001391c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013920:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001392a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001392e:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013938:	90                   	nop
c0013939:	83 c4 0c             	add    esp,0xc
c001393c:	c3                   	ret    
c001393d:	90                   	nop

c001393e <Device::getName()>:
c001393e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013942:	05 d0 00 00 00       	add    eax,0xd0
c0013947:	c3                   	ret    

c0013948 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013948:	83 ec 0c             	sub    esp,0xc
c001394b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001394f:	83 ec 08             	sub    esp,0x8
c0013952:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013956:	50                   	push   eax
c0013957:	e8 f0 fe ff ff       	call   c001384c <Device::Device(char const*)>
c001395c:	83 c4 10             	add    esp,0x10
c001395f:	ba 84 74 02 c0       	mov    edx,0xc0027484
c0013964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013968:	89 10                	mov    DWORD PTR [eax],edx
c001396a:	90                   	nop
c001396b:	83 c4 0c             	add    esp,0xc
c001396e:	c3                   	ret    
c001396f:	90                   	nop

c0013970 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013970:	57                   	push   edi
c0013971:	56                   	push   esi
c0013972:	53                   	push   ebx
c0013973:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013977:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001397b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001397f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013985:	75 0c                	jne    c0013993 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013987:	52                   	push   edx
c0013988:	52                   	push   edx
c0013989:	53                   	push   ebx
c001398a:	56                   	push   esi
c001398b:	e8 24 19 01 00       	call   c00252b4 <LinkedList<Device>::addElement(Device*)>
c0013990:	83 c4 10             	add    esp,0x10
c0013993:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013999:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001399c:	74 12                	je     c00139b0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001399e:	50                   	push   eax
c001399f:	57                   	push   edi
c00139a0:	56                   	push   esi
c00139a1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00139a4:	e8 c7 ff ff ff       	call   c0013970 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00139a9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00139ab:	83 c4 10             	add    esp,0x10
c00139ae:	eb e9                	jmp    c0013999 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00139b0:	5b                   	pop    ebx
c00139b1:	5e                   	pop    esi
c00139b2:	5f                   	pop    edi
c00139b3:	c3                   	ret    

c00139b4 <getDevicesOfType(DeviceType)>:
c00139b4:	53                   	push   ebx
c00139b5:	83 ec 14             	sub    esp,0x14
c00139b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00139bc:	53                   	push   ebx
c00139bd:	e8 ce 19 01 00       	call   c0025390 <LinkedList<Device>::LinkedList()>
c00139c2:	83 c4 0c             	add    esp,0xc
c00139c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139c9:	53                   	push   ebx
c00139ca:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c00139d0:	e8 9b ff ff ff       	call   c0013970 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00139d5:	89 d8                	mov    eax,ebx
c00139d7:	83 c4 18             	add    esp,0x18
c00139da:	5b                   	pop    ebx
c00139db:	c2 04 00             	ret    0x4

c00139de <HardDiskController::HardDiskController(char const*)>:
c00139de:	83 ec 0c             	sub    esp,0xc
c00139e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139e5:	83 ec 08             	sub    esp,0x8
c00139e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139ec:	50                   	push   eax
c00139ed:	e8 5a fe ff ff       	call   c001384c <Device::Device(char const*)>
c00139f2:	83 c4 10             	add    esp,0x10
c00139f5:	ba b0 74 02 c0       	mov    edx,0xc00274b0
c00139fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139fe:	89 10                	mov    DWORD PTR [eax],edx
c0013a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a04:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013a0e:	90                   	nop
c0013a0f:	83 c4 0c             	add    esp,0xc
c0013a12:	c3                   	ret    
c0013a13:	90                   	nop

c0013a14 <HardDiskController::~HardDiskController()>:
c0013a14:	83 ec 0c             	sub    esp,0xc
c0013a17:	ba b0 74 02 c0       	mov    edx,0xc00274b0
c0013a1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a20:	89 10                	mov    DWORD PTR [eax],edx
c0013a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a26:	83 ec 0c             	sub    esp,0xc
c0013a29:	50                   	push   eax
c0013a2a:	e8 cf fa ff ff       	call   c00134fe <Device::~Device()>
c0013a2f:	83 c4 10             	add    esp,0x10
c0013a32:	90                   	nop
c0013a33:	83 c4 0c             	add    esp,0xc
c0013a36:	c3                   	ret    
c0013a37:	90                   	nop

c0013a38 <HardDiskController::~HardDiskController()>:
c0013a38:	83 ec 0c             	sub    esp,0xc
c0013a3b:	83 ec 0c             	sub    esp,0xc
c0013a3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a42:	e8 cd ff ff ff       	call   c0013a14 <HardDiskController::~HardDiskController()>
c0013a47:	83 c4 10             	add    esp,0x10
c0013a4a:	83 ec 08             	sub    esp,0x8
c0013a4d:	68 58 01 00 00       	push   0x158
c0013a52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a56:	e8 16 e7 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0013a5b:	83 c4 10             	add    esp,0x10
c0013a5e:	83 c4 0c             	add    esp,0xc
c0013a61:	c3                   	ret    

c0013a62 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013a62:	83 ec 0c             	sub    esp,0xc
c0013a65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a69:	83 ec 08             	sub    esp,0x8
c0013a6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a70:	50                   	push   eax
c0013a71:	e8 d6 fd ff ff       	call   c001384c <Device::Device(char const*)>
c0013a76:	83 c4 10             	add    esp,0x10
c0013a79:	ba dc 74 02 c0       	mov    edx,0xc00274dc
c0013a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a82:	89 10                	mov    DWORD PTR [eax],edx
c0013a84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a88:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013a8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a93:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013a9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a9e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ab0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aba:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013ac4:	90                   	nop
c0013ac5:	83 c4 0c             	add    esp,0xc
c0013ac8:	c3                   	ret    
c0013ac9:	90                   	nop

c0013aca <PhysicalDisk::startCache()>:
c0013aca:	56                   	push   esi
c0013acb:	53                   	push   ebx
c0013acc:	83 ec 10             	sub    esp,0x10
c0013acf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ad3:	6a 30                	push   0x30
c0013ad5:	e8 88 e6 ff ff       	call   c0012162 <operator new(unsigned long)>
c0013ada:	89 c6                	mov    esi,eax
c0013adc:	58                   	pop    eax
c0013add:	5a                   	pop    edx
c0013ade:	53                   	push   ebx
c0013adf:	56                   	push   esi
c0013ae0:	e8 15 25 00 00       	call   c0015ffa <VCache::VCache(PhysicalDisk*)>
c0013ae5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013aeb:	83 c4 14             	add    esp,0x14
c0013aee:	5b                   	pop    ebx
c0013aef:	5e                   	pop    esi
c0013af0:	c3                   	ret    
c0013af1:	90                   	nop

c0013af2 <PhysicalDisk::~PhysicalDisk()>:
c0013af2:	83 ec 0c             	sub    esp,0xc
c0013af5:	ba dc 74 02 c0       	mov    edx,0xc00274dc
c0013afa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013afe:	89 10                	mov    DWORD PTR [eax],edx
c0013b00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b04:	83 ec 0c             	sub    esp,0xc
c0013b07:	50                   	push   eax
c0013b08:	e8 f1 f9 ff ff       	call   c00134fe <Device::~Device()>
c0013b0d:	83 c4 10             	add    esp,0x10
c0013b10:	90                   	nop
c0013b11:	83 c4 0c             	add    esp,0xc
c0013b14:	c3                   	ret    
c0013b15:	90                   	nop

c0013b16 <PhysicalDisk::~PhysicalDisk()>:
c0013b16:	83 ec 0c             	sub    esp,0xc
c0013b19:	83 ec 0c             	sub    esp,0xc
c0013b1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b20:	e8 cd ff ff ff       	call   c0013af2 <PhysicalDisk::~PhysicalDisk()>
c0013b25:	83 c4 10             	add    esp,0x10
c0013b28:	83 ec 08             	sub    esp,0x8
c0013b2b:	68 6c 01 00 00       	push   0x16c
c0013b30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b34:	e8 38 e6 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0013b39:	83 c4 10             	add    esp,0x10
c0013b3c:	83 c4 0c             	add    esp,0xc
c0013b3f:	c3                   	ret    

c0013b40 <FPU::FPU(char const*)>:
c0013b40:	83 ec 0c             	sub    esp,0xc
c0013b43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b47:	83 ec 08             	sub    esp,0x8
c0013b4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b4e:	50                   	push   eax
c0013b4f:	e8 f8 fc ff ff       	call   c001384c <Device::Device(char const*)>
c0013b54:	83 c4 10             	add    esp,0x10
c0013b57:	ba 1c 75 02 c0       	mov    edx,0xc002751c
c0013b5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b60:	89 10                	mov    DWORD PTR [eax],edx
c0013b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b66:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013b70:	90                   	nop
c0013b71:	83 c4 0c             	add    esp,0xc
c0013b74:	c3                   	ret    
c0013b75:	90                   	nop

c0013b76 <FPU::~FPU()>:
c0013b76:	83 ec 0c             	sub    esp,0xc
c0013b79:	ba 1c 75 02 c0       	mov    edx,0xc002751c
c0013b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b82:	89 10                	mov    DWORD PTR [eax],edx
c0013b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b88:	83 ec 0c             	sub    esp,0xc
c0013b8b:	50                   	push   eax
c0013b8c:	e8 6d f9 ff ff       	call   c00134fe <Device::~Device()>
c0013b91:	83 c4 10             	add    esp,0x10
c0013b94:	90                   	nop
c0013b95:	83 c4 0c             	add    esp,0xc
c0013b98:	c3                   	ret    
c0013b99:	90                   	nop

c0013b9a <FPU::~FPU()>:
c0013b9a:	83 ec 0c             	sub    esp,0xc
c0013b9d:	83 ec 0c             	sub    esp,0xc
c0013ba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ba4:	e8 cd ff ff ff       	call   c0013b76 <FPU::~FPU()>
c0013ba9:	83 c4 10             	add    esp,0x10
c0013bac:	83 ec 08             	sub    esp,0x8
c0013baf:	68 58 01 00 00       	push   0x158
c0013bb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bb8:	e8 b4 e5 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0013bbd:	83 c4 10             	add    esp,0x10
c0013bc0:	83 c4 0c             	add    esp,0xc
c0013bc3:	c3                   	ret    

c0013bc4 <setupFPU()>:
c0013bc4:	53                   	push   ebx
c0013bc5:	83 ec 08             	sub    esp,0x8
c0013bc8:	8b 15 08 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a408
c0013bce:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0013bd5:	74 19                	je     c0013bf0 <setupFPU()+0x2c>
c0013bd7:	83 ec 0c             	sub    esp,0xc
c0013bda:	68 58 01 00 00       	push   0x158
c0013bdf:	e8 7e e5 ff ff       	call   c0012162 <operator new(unsigned long)>
c0013be4:	89 c3                	mov    ebx,eax
c0013be6:	89 04 24             	mov    DWORD PTR [esp],eax
c0013be9:	e8 40 e4 00 00       	call   c002202e <AVX::AVX()>
c0013bee:	eb 5b                	jmp    c0013c4b <setupFPU()+0x87>
c0013bf0:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013bf6:	84 c0                	test   al,al
c0013bf8:	79 19                	jns    c0013c13 <setupFPU()+0x4f>
c0013bfa:	83 ec 0c             	sub    esp,0xc
c0013bfd:	68 58 01 00 00       	push   0x158
c0013c02:	e8 5b e5 ff ff       	call   c0012162 <operator new(unsigned long)>
c0013c07:	89 c3                	mov    ebx,eax
c0013c09:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c0c:	e8 43 e5 00 00       	call   c0022154 <SSE::SSE()>
c0013c11:	eb 38                	jmp    c0013c4b <setupFPU()+0x87>
c0013c13:	a8 20                	test   al,0x20
c0013c15:	74 19                	je     c0013c30 <setupFPU()+0x6c>
c0013c17:	83 ec 0c             	sub    esp,0xc
c0013c1a:	68 58 01 00 00       	push   0x158
c0013c1f:	e8 3e e5 ff ff       	call   c0012162 <operator new(unsigned long)>
c0013c24:	89 c3                	mov    ebx,eax
c0013c26:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c29:	e8 90 e4 00 00       	call   c00220be <MMX::MMX()>
c0013c2e:	eb 1b                	jmp    c0013c4b <setupFPU()+0x87>
c0013c30:	a8 10                	test   al,0x10
c0013c32:	74 1c                	je     c0013c50 <setupFPU()+0x8c>
c0013c34:	83 ec 0c             	sub    esp,0xc
c0013c37:	68 58 01 00 00       	push   0x158
c0013c3c:	e8 21 e5 ff ff       	call   c0012162 <operator new(unsigned long)>
c0013c41:	89 c3                	mov    ebx,eax
c0013c43:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c46:	e8 97 e5 00 00       	call   c00221e2 <x87::x87()>
c0013c4b:	83 c4 10             	add    esp,0x10
c0013c4e:	eb 35                	jmp    c0013c85 <setupFPU()+0xc1>
c0013c50:	83 ec 0c             	sub    esp,0xc
c0013c53:	83 e0 ef             	and    eax,0xffffffef
c0013c56:	31 db                	xor    ebx,ebx
c0013c58:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0013c5e:	68 08 75 02 c0       	push   0xc0027508
c0013c63:	e8 e9 e5 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0013c68:	e8 ff 3b 00 00       	call   c001786c <CPU::current()>
c0013c6d:	e8 fa 3b 00 00       	call   c001786c <CPU::current()>
c0013c72:	e8 71 17 01 00       	call   c00253e8 <CPU::readCR0()>
c0013c77:	83 c8 04             	or     eax,0x4
c0013c7a:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c7d:	e8 78 17 01 00       	call   c00253fa <CPU::writeCR0(unsigned long)>
c0013c82:	83 c4 10             	add    esp,0x10
c0013c85:	89 d8                	mov    eax,ebx
c0013c87:	83 c4 08             	add    esp,0x8
c0013c8a:	5b                   	pop    ebx
c0013c8b:	c3                   	ret    

c0013c8c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0013c8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013c90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013c94:	c1 e0 04             	shl    eax,0x4
c0013c97:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013c9b:	8d 50 10             	lea    edx,[eax+0x10]
c0013c9e:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0013ca4:	74 08                	je     c0013cae <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0013ca6:	83 c0 04             	add    eax,0x4
c0013ca9:	39 d0                	cmp    eax,edx
c0013cab:	75 f1                	jne    c0013c9e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0013cad:	c3                   	ret    
c0013cae:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013cb8:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013cc2:	eb e2                	jmp    c0013ca6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0013cc4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0013cc4:	57                   	push   edi
c0013cc5:	31 c0                	xor    eax,eax
c0013cc7:	56                   	push   esi
c0013cc8:	53                   	push   ebx
c0013cc9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013ccd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013cd1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013cd5:	89 da                	mov    edx,ebx
c0013cd7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013cdb:	c1 e2 04             	shl    edx,0x4
c0013cde:	01 ca                	add    edx,ecx
c0013ce0:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0013ce8:	74 16                	je     c0013d00 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0013cea:	40                   	inc    eax
c0013ceb:	83 f8 04             	cmp    eax,0x4
c0013cee:	75 f0                	jne    c0013ce0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0013cf0:	c7 44 24 10 4c 75 02 c0 	mov    DWORD PTR [esp+0x10],0xc002754c
c0013cf8:	5b                   	pop    ebx
c0013cf9:	5e                   	pop    esi
c0013cfa:	5f                   	pop    edi
c0013cfb:	e9 ef 4c 00 00       	jmp    c00189ef <Krnl::panic(char const*)>
c0013d00:	8d 04 98             	lea    eax,[eax+ebx*4]
c0013d03:	8d 04 81             	lea    eax,[ecx+eax*4]
c0013d06:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0013d0c:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0013d12:	5b                   	pop    ebx
c0013d13:	5e                   	pop    esi
c0013d14:	5f                   	pop    edi
c0013d15:	c3                   	ret    

c0013d16 <doubleFault(regs*, void*)>:
c0013d16:	55                   	push   ebp
c0013d17:	89 e5                	mov    ebp,esp
c0013d19:	83 ec 08             	sub    esp,0x8
c0013d1c:	83 ec 0c             	sub    esp,0xc
c0013d1f:	68 87 75 02 c0       	push   0xc0027587
c0013d24:	e8 c6 4c 00 00       	call   c00189ef <Krnl::panic(char const*)>
c0013d29:	83 c4 10             	add    esp,0x10
c0013d2c:	90                   	nop
c0013d2d:	c9                   	leave  
c0013d2e:	c3                   	ret    
c0013d2f:	90                   	nop

c0013d30 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013d30:	56                   	push   esi
c0013d31:	53                   	push   ebx
c0013d32:	50                   	push   eax
c0013d33:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d37:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013d3b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013d40:	75 35                	jne    c0013d77 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0013d42:	8d 43 20             	lea    eax,[ebx+0x20]
c0013d45:	31 d2                	xor    edx,edx
c0013d47:	89 c1                	mov    ecx,eax
c0013d49:	c1 e1 04             	shl    ecx,0x4
c0013d4c:	01 f1                	add    ecx,esi
c0013d4e:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0013d56:	74 3e                	je     c0013d96 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0013d58:	42                   	inc    edx
c0013d59:	83 fa 04             	cmp    edx,0x4
c0013d5c:	75 f0                	jne    c0013d4e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0013d5e:	83 ec 0c             	sub    esp,0xc
c0013d61:	68 cc 75 02 c0       	push   0xc00275cc
c0013d66:	e8 84 4c 00 00       	call   c00189ef <Krnl::panic(char const*)>
c0013d6b:	83 c4 10             	add    esp,0x10
c0013d6e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013d73:	5a                   	pop    edx
c0013d74:	5b                   	pop    ebx
c0013d75:	5e                   	pop    esi
c0013d76:	c3                   	ret    
c0013d77:	83 ec 0c             	sub    esp,0xc
c0013d7a:	56                   	push   esi
c0013d7b:	e8 be fb ff ff       	call   c001393e <Device::getName()>
c0013d80:	83 c4 10             	add    esp,0x10
c0013d83:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013d86:	75 ba                	jne    c0013d42 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013d88:	83 fb 0f             	cmp    ebx,0xf
c0013d8b:	7f 29                	jg     c0013db6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0013d8d:	0f b6 9b e0 96 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd6920]
c0013d94:	eb ac                	jmp    c0013d42 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013d96:	8d 04 82             	lea    eax,[edx+eax*4]
c0013d99:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d9d:	8d 04 86             	lea    eax,[esi+eax*4]
c0013da0:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0013da6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013daa:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0013db0:	89 d8                	mov    eax,ebx
c0013db2:	5a                   	pop    edx
c0013db3:	5b                   	pop    ebx
c0013db4:	5e                   	pop    esi
c0013db5:	c3                   	ret    
c0013db6:	83 ec 0c             	sub    esp,0xc
c0013db9:	68 94 75 02 c0       	push   0xc0027594
c0013dbe:	e8 2c 4c 00 00       	call   c00189ef <Krnl::panic(char const*)>
c0013dc3:	83 c4 10             	add    esp,0x10
c0013dc6:	e9 77 ff ff ff       	jmp    c0013d42 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013dcb:	90                   	nop

c0013dcc <InterruptController::clearAllHandlers(int, bool)>:
c0013dcc:	56                   	push   esi
c0013dcd:	53                   	push   ebx
c0013dce:	52                   	push   edx
c0013dcf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013dd3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013dd7:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0013ddc:	75 61                	jne    c0013e3f <InterruptController::clearAllHandlers(int, bool)+0x73>
c0013dde:	8d 46 20             	lea    eax,[esi+0x20]
c0013de1:	c1 e6 04             	shl    esi,0x4
c0013de4:	c1 e0 04             	shl    eax,0x4
c0013de7:	01 de                	add    esi,ebx
c0013de9:	01 d8                	add    eax,ebx
c0013deb:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0013df5:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0013dff:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0013e09:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0013e13:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0013e1d:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0013e27:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0013e31:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0013e3b:	58                   	pop    eax
c0013e3c:	5b                   	pop    ebx
c0013e3d:	5e                   	pop    esi
c0013e3e:	c3                   	ret    
c0013e3f:	83 ec 0c             	sub    esp,0xc
c0013e42:	53                   	push   ebx
c0013e43:	e8 f6 fa ff ff       	call   c001393e <Device::getName()>
c0013e48:	83 c4 10             	add    esp,0x10
c0013e4b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013e4e:	75 8e                	jne    c0013dde <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e50:	83 fe 0f             	cmp    esi,0xf
c0013e53:	7f 09                	jg     c0013e5e <InterruptController::clearAllHandlers(int, bool)+0x92>
c0013e55:	0f b6 b6 e0 96 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd6920]
c0013e5c:	eb 80                	jmp    c0013dde <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e5e:	83 ec 0c             	sub    esp,0xc
c0013e61:	68 08 76 02 c0       	push   0xc0027608
c0013e66:	e8 84 4b 00 00       	call   c00189ef <Krnl::panic(char const*)>
c0013e6b:	83 c4 10             	add    esp,0x10
c0013e6e:	e9 6b ff ff ff       	jmp    c0013dde <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e73:	90                   	nop

c0013e74 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013e74:	56                   	push   esi
c0013e75:	53                   	push   ebx
c0013e76:	52                   	push   edx
c0013e77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013e7b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e7f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013e84:	75 3a                	jne    c0013ec0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0013e86:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e8a:	8d 50 20             	lea    edx,[eax+0x20]
c0013e8d:	c1 e2 04             	shl    edx,0x4
c0013e90:	8d 04 16             	lea    eax,[esi+edx*1]
c0013e93:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0013e97:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0013e9d:	74 0b                	je     c0013eaa <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0013e9f:	83 c0 04             	add    eax,0x4
c0013ea2:	39 d0                	cmp    eax,edx
c0013ea4:	75 f1                	jne    c0013e97 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0013ea6:	58                   	pop    eax
c0013ea7:	5b                   	pop    ebx
c0013ea8:	5e                   	pop    esi
c0013ea9:	c3                   	ret    
c0013eaa:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013eb4:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013ebe:	eb df                	jmp    c0013e9f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0013ec0:	83 ec 0c             	sub    esp,0xc
c0013ec3:	56                   	push   esi
c0013ec4:	e8 75 fa ff ff       	call   c001393e <Device::getName()>
c0013ec9:	83 c4 10             	add    esp,0x10
c0013ecc:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013ecf:	75 b5                	jne    c0013e86 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013ed1:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0013ed6:	7f 11                	jg     c0013ee9 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0013ed8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013edc:	0f b6 80 e0 96 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6920]
c0013ee3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ee7:	eb 9d                	jmp    c0013e86 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013ee9:	83 ec 0c             	sub    esp,0xc
c0013eec:	68 08 76 02 c0       	push   0xc0027608
c0013ef1:	e8 f9 4a 00 00       	call   c00189ef <Krnl::panic(char const*)>
c0013ef6:	83 c4 10             	add    esp,0x10
c0013ef9:	eb 8b                	jmp    c0013e86 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0013efb <nmiHandler(regs*, void*)>:
c0013efb:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0013f00:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013f04:	e9 83 a9 ff ff       	jmp    c000e88c <Computer::handleNMI()>

c0013f09 <int_handler>:
c0013f09:	55                   	push   ebp
c0013f0a:	57                   	push   edi
c0013f0b:	56                   	push   esi
c0013f0c:	53                   	push   ebx
c0013f0d:	83 ec 0c             	sub    esp,0xc
c0013f10:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013f14:	80 3d 54 ae 02 c0 00 	cmp    BYTE PTR ds:0xc002ae54,0x0
c0013f1b:	74 0b                	je     c0013f28 <int_handler+0x1f>
c0013f1d:	fa                   	cli    
c0013f1e:	f4                   	hlt    
c0013f1f:	80 3d 54 ae 02 c0 00 	cmp    BYTE PTR ds:0xc002ae54,0x0
c0013f26:	75 f5                	jne    c0013f1d <int_handler+0x14>
c0013f28:	e8 3f 39 00 00       	call   c001786c <CPU::current()>
c0013f2d:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0013f30:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0013f36:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013f39:	83 f8 17             	cmp    eax,0x17
c0013f3c:	77 13                	ja     c0013f51 <int_handler+0x48>
c0013f3e:	83 ec 08             	sub    esp,0x8
c0013f41:	8b 17                	mov    edx,DWORD PTR [edi]
c0013f43:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013f46:	0f b6 c0             	movzx  eax,al
c0013f49:	50                   	push   eax
c0013f4a:	57                   	push   edi
c0013f4b:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0013f4e:	83 c4 10             	add    esp,0x10
c0013f51:	83 c3 15             	add    ebx,0x15
c0013f54:	c1 e3 04             	shl    ebx,0x4
c0013f57:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0013f5b:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0013f62:	31 db                	xor    ebx,ebx
c0013f64:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0013f68:	85 c0                	test   eax,eax
c0013f6a:	74 13                	je     c0013f7f <int_handler+0x76>
c0013f6c:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013f6f:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0013f73:	74 1c                	je     c0013f91 <int_handler+0x88>
c0013f75:	83 ec 08             	sub    esp,0x8
c0013f78:	52                   	push   edx
c0013f79:	56                   	push   esi
c0013f7a:	ff d0                	call   eax
c0013f7c:	83 c4 10             	add    esp,0x10
c0013f7f:	43                   	inc    ebx
c0013f80:	83 fb 04             	cmp    ebx,0x4
c0013f83:	75 df                	jne    c0013f64 <int_handler+0x5b>
c0013f85:	83 c4 0c             	add    esp,0xc
c0013f88:	31 c0                	xor    eax,eax
c0013f8a:	5b                   	pop    ebx
c0013f8b:	31 d2                	xor    edx,edx
c0013f8d:	5e                   	pop    esi
c0013f8e:	5f                   	pop    edi
c0013f8f:	5d                   	pop    ebp
c0013f90:	c3                   	ret    
c0013f91:	83 ec 08             	sub    esp,0x8
c0013f94:	52                   	push   edx
c0013f95:	56                   	push   esi
c0013f96:	ff d0                	call   eax
c0013f98:	83 c4 10             	add    esp,0x10
c0013f9b:	83 c4 0c             	add    esp,0xc
c0013f9e:	5b                   	pop    ebx
c0013f9f:	5e                   	pop    esi
c0013fa0:	5f                   	pop    edi
c0013fa1:	5d                   	pop    ebp
c0013fa2:	c3                   	ret    
c0013fa3:	90                   	nop

c0013fa4 <InterruptController::InterruptController(char const*)>:
c0013fa4:	83 ec 1c             	sub    esp,0x1c
c0013fa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fab:	83 ec 08             	sub    esp,0x8
c0013fae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013fb2:	50                   	push   eax
c0013fb3:	e8 94 f8 ff ff       	call   c001384c <Device::Device(char const*)>
c0013fb8:	83 c4 10             	add    esp,0x10
c0013fbb:	ba 3c 78 02 c0       	mov    edx,0xc002783c
c0013fc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fc4:	89 10                	mov    DWORD PTR [eax],edx
c0013fc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fca:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0013fd4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013fdc:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0013fe4:	7f 5e                	jg     c0014044 <InterruptController::InterruptController(char const*)+0xa0>
c0013fe6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013fee:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0013ff3:	7f 49                	jg     c001403e <InterruptController::InterruptController(char const*)+0x9a>
c0013ff5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ff9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013ffd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014004:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014008:	01 ca                	add    edx,ecx
c001400a:	83 c2 54             	add    edx,0x54
c001400d:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014015:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014019:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001401d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014028:	01 ca                	add    edx,ecx
c001402a:	81 c2 54 04 00 00    	add    edx,0x454
c0014030:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014038:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001403c:	eb b0                	jmp    c0013fee <InterruptController::InterruptController(char const*)+0x4a>
c001403e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014042:	eb 98                	jmp    c0013fdc <InterruptController::InterruptController(char const*)+0x38>
c0014044:	90                   	nop
c0014045:	83 c4 1c             	add    esp,0x1c
c0014048:	c3                   	ret    
c0014049:	90                   	nop

c001404a <InterruptController::~InterruptController()>:
c001404a:	83 ec 0c             	sub    esp,0xc
c001404d:	ba 3c 78 02 c0       	mov    edx,0xc002783c
c0014052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014056:	89 10                	mov    DWORD PTR [eax],edx
c0014058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001405c:	83 ec 0c             	sub    esp,0xc
c001405f:	50                   	push   eax
c0014060:	e8 99 f4 ff ff       	call   c00134fe <Device::~Device()>
c0014065:	83 c4 10             	add    esp,0x10
c0014068:	90                   	nop
c0014069:	83 c4 0c             	add    esp,0xc
c001406c:	c3                   	ret    
c001406d:	90                   	nop

c001406e <InterruptController::~InterruptController()>:
c001406e:	83 ec 0c             	sub    esp,0xc
c0014071:	83 ec 0c             	sub    esp,0xc
c0014074:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014078:	e8 cd ff ff ff       	call   c001404a <InterruptController::~InterruptController()>
c001407d:	83 c4 10             	add    esp,0x10
c0014080:	83 ec 08             	sub    esp,0x8
c0014083:	68 58 21 00 00       	push   0x2158
c0014088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001408c:	e8 e0 e0 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0014091:	83 c4 10             	add    esp,0x10
c0014094:	83 c4 0c             	add    esp,0xc
c0014097:	c3                   	ret    

c0014098 <displayDebugInfo(regs*)>:
c0014098:	55                   	push   ebp
c0014099:	57                   	push   edi
c001409a:	56                   	push   esi
c001409b:	53                   	push   ebx
c001409c:	83 ec 24             	sub    esp,0x24
c001409f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00140a3:	0f 20 c2             	mov    edx,cr0
c00140a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00140aa:	0f 20 d7             	mov    edi,cr2
c00140ad:	0f 20 de             	mov    esi,cr3
c00140b0:	0f 20 e5             	mov    ebp,cr4
c00140b3:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00140b6:	68 42 76 02 c0       	push   0xc0027642
c00140bb:	e8 91 e1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00140c0:	58                   	pop    eax
c00140c1:	5a                   	pop    edx
c00140c2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00140c5:	68 4d 76 02 c0       	push   0xc002764d
c00140ca:	e8 82 e1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00140cf:	59                   	pop    ecx
c00140d0:	58                   	pop    eax
c00140d1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00140d4:	68 58 76 02 c0       	push   0xc0027658
c00140d9:	e8 73 e1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00140de:	58                   	pop    eax
c00140df:	5a                   	pop    edx
c00140e0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00140e3:	68 63 76 02 c0       	push   0xc0027663
c00140e8:	e8 64 e1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00140ed:	59                   	pop    ecx
c00140ee:	58                   	pop    eax
c00140ef:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00140f2:	68 6e 76 02 c0       	push   0xc002766e
c00140f7:	e8 55 e1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00140fc:	58                   	pop    eax
c00140fd:	5a                   	pop    edx
c00140fe:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014101:	68 79 76 02 c0       	push   0xc0027679
c0014106:	e8 46 e1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001410b:	59                   	pop    ecx
c001410c:	58                   	pop    eax
c001410d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014110:	68 84 76 02 c0       	push   0xc0027684
c0014115:	e8 37 e1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001411a:	58                   	pop    eax
c001411b:	5a                   	pop    edx
c001411c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001411f:	68 8f 76 02 c0       	push   0xc002768f
c0014124:	e8 28 e1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0014129:	59                   	pop    ecx
c001412a:	58                   	pop    eax
c001412b:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001412e:	68 9a 76 02 c0       	push   0xc002769a
c0014133:	e8 19 e1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0014138:	58                   	pop    eax
c0014139:	5a                   	pop    edx
c001413a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001413d:	68 a9 76 02 c0       	push   0xc00276a9
c0014142:	e8 0a e1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0014147:	59                   	pop    ecx
c0014148:	58                   	pop    eax
c0014149:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001414c:	68 b4 76 02 c0       	push   0xc00276b4
c0014151:	e8 fb e0 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0014156:	58                   	pop    eax
c0014157:	5a                   	pop    edx
c0014158:	57                   	push   edi
c0014159:	68 bf 76 02 c0       	push   0xc00276bf
c001415e:	e8 ee e0 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0014163:	59                   	pop    ecx
c0014164:	58                   	pop    eax
c0014165:	56                   	push   esi
c0014166:	68 ca 76 02 c0       	push   0xc00276ca
c001416b:	e8 e1 e0 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0014170:	58                   	pop    eax
c0014171:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014176:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001417c:	e8 fc c2 ff ff       	call   c001047d <setActiveTerminal(VgaText*)>
c0014181:	58                   	pop    eax
c0014182:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014185:	5a                   	pop    edx
c0014186:	c1 e0 05             	shl    eax,0x5
c0014189:	05 40 94 02 c0       	add    eax,0xc0029440
c001418e:	50                   	push   eax
c001418f:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014194:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001419a:	e8 fd c6 ff ff       	call   c001089c <VgaText::puts(char const*)>
c001419f:	59                   	pop    ecx
c00141a0:	58                   	pop    eax
c00141a1:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00141a6:	68 d5 76 02 c0       	push   0xc00276d5
c00141ab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141b1:	e8 e6 c6 ff ff       	call   c001089c <VgaText::puts(char const*)>
c00141b6:	58                   	pop    eax
c00141b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141bc:	5a                   	pop    edx
c00141bd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00141c0:	83 c0 0c             	add    eax,0xc
c00141c3:	50                   	push   eax
c00141c4:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00141c9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141cf:	e8 c8 c6 ff ff       	call   c001089c <VgaText::puts(char const*)>
c00141d4:	59                   	pop    ecx
c00141d5:	58                   	pop    eax
c00141d6:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00141db:	68 de 76 02 c0       	push   0xc00276de
c00141e0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141e6:	e8 b1 c6 ff ff       	call   c001089c <VgaText::puts(char const*)>
c00141eb:	58                   	pop    eax
c00141ec:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00141f1:	5a                   	pop    edx
c00141f2:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00141f5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141fb:	e8 c2 c6 ff ff       	call   c00108c2 <VgaText::putx(unsigned int)>
c0014200:	59                   	pop    ecx
c0014201:	58                   	pop    eax
c0014202:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014207:	68 e6 76 02 c0       	push   0xc00276e6
c001420c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014212:	e8 85 c6 ff ff       	call   c001089c <VgaText::puts(char const*)>
c0014217:	58                   	pop    eax
c0014218:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001421d:	5a                   	pop    edx
c001421e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014221:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014227:	e8 96 c6 ff ff       	call   c00108c2 <VgaText::putx(unsigned int)>
c001422c:	59                   	pop    ecx
c001422d:	58                   	pop    eax
c001422e:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014233:	68 ee 76 02 c0       	push   0xc00276ee
c0014238:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001423e:	e8 59 c6 ff ff       	call   c001089c <VgaText::puts(char const*)>
c0014243:	58                   	pop    eax
c0014244:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014249:	5a                   	pop    edx
c001424a:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001424d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014253:	e8 6a c6 ff ff       	call   c00108c2 <VgaText::putx(unsigned int)>
c0014258:	59                   	pop    ecx
c0014259:	58                   	pop    eax
c001425a:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001425f:	68 f6 76 02 c0       	push   0xc00276f6
c0014264:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001426a:	e8 2d c6 ff ff       	call   c001089c <VgaText::puts(char const*)>
c001426f:	58                   	pop    eax
c0014270:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014275:	5a                   	pop    edx
c0014276:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014279:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001427f:	e8 3e c6 ff ff       	call   c00108c2 <VgaText::putx(unsigned int)>
c0014284:	59                   	pop    ecx
c0014285:	58                   	pop    eax
c0014286:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001428b:	68 fe 76 02 c0       	push   0xc00276fe
c0014290:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014296:	e8 01 c6 ff ff       	call   c001089c <VgaText::puts(char const*)>
c001429b:	58                   	pop    eax
c001429c:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00142a1:	5a                   	pop    edx
c00142a2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00142a5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142ab:	e8 12 c6 ff ff       	call   c00108c2 <VgaText::putx(unsigned int)>
c00142b0:	59                   	pop    ecx
c00142b1:	58                   	pop    eax
c00142b2:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00142b7:	68 06 77 02 c0       	push   0xc0027706
c00142bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142c2:	e8 d5 c5 ff ff       	call   c001089c <VgaText::puts(char const*)>
c00142c7:	58                   	pop    eax
c00142c8:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00142cd:	5a                   	pop    edx
c00142ce:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00142d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142d7:	e8 e6 c5 ff ff       	call   c00108c2 <VgaText::putx(unsigned int)>
c00142dc:	59                   	pop    ecx
c00142dd:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00142e2:	5b                   	pop    ebx
c00142e3:	68 0e 77 02 c0       	push   0xc002770e
c00142e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142ee:	e8 a9 c5 ff ff       	call   c001089c <VgaText::puts(char const*)>
c00142f3:	58                   	pop    eax
c00142f4:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00142f9:	5a                   	pop    edx
c00142fa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00142fe:	52                   	push   edx
c00142ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014305:	e8 b8 c5 ff ff       	call   c00108c2 <VgaText::putx(unsigned int)>
c001430a:	59                   	pop    ecx
c001430b:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014310:	5b                   	pop    ebx
c0014311:	68 17 77 02 c0       	push   0xc0027717
c0014316:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001431c:	e8 7b c5 ff ff       	call   c001089c <VgaText::puts(char const*)>
c0014321:	58                   	pop    eax
c0014322:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014327:	5a                   	pop    edx
c0014328:	57                   	push   edi
c0014329:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001432f:	e8 8e c5 ff ff       	call   c00108c2 <VgaText::putx(unsigned int)>
c0014334:	59                   	pop    ecx
c0014335:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001433a:	5b                   	pop    ebx
c001433b:	68 1f 77 02 c0       	push   0xc002771f
c0014340:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014346:	e8 51 c5 ff ff       	call   c001089c <VgaText::puts(char const*)>
c001434b:	5f                   	pop    edi
c001434c:	58                   	pop    eax
c001434d:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014352:	56                   	push   esi
c0014353:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014359:	e8 64 c5 ff ff       	call   c00108c2 <VgaText::putx(unsigned int)>
c001435e:	58                   	pop    eax
c001435f:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014364:	5a                   	pop    edx
c0014365:	68 27 77 02 c0       	push   0xc0027727
c001436a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014370:	e8 27 c5 ff ff       	call   c001089c <VgaText::puts(char const*)>
c0014375:	59                   	pop    ecx
c0014376:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001437b:	5b                   	pop    ebx
c001437c:	55                   	push   ebp
c001437d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014383:	e8 3a c5 ff ff       	call   c00108c2 <VgaText::putx(unsigned int)>
c0014388:	5e                   	pop    esi
c0014389:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001438e:	5f                   	pop    edi
c001438f:	68 2f 77 02 c0       	push   0xc002772f
c0014394:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001439a:	e8 fd c4 ff ff       	call   c001089c <VgaText::puts(char const*)>
c001439f:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00143a4:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00143aa:	e8 54 10 01 00       	call   c0025403 <CPU::readDR0()>
c00143af:	5d                   	pop    ebp
c00143b0:	5a                   	pop    edx
c00143b1:	50                   	push   eax
c00143b2:	53                   	push   ebx
c00143b3:	e8 0a c5 ff ff       	call   c00108c2 <VgaText::putx(unsigned int)>
c00143b8:	59                   	pop    ecx
c00143b9:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00143be:	5b                   	pop    ebx
c00143bf:	68 38 77 02 c0       	push   0xc0027738
c00143c4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143ca:	e8 cd c4 ff ff       	call   c001089c <VgaText::puts(char const*)>
c00143cf:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00143d4:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00143da:	e8 36 10 01 00       	call   c0025415 <CPU::readDR1()>
c00143df:	5e                   	pop    esi
c00143e0:	5f                   	pop    edi
c00143e1:	50                   	push   eax
c00143e2:	53                   	push   ebx
c00143e3:	e8 da c4 ff ff       	call   c00108c2 <VgaText::putx(unsigned int)>
c00143e8:	5d                   	pop    ebp
c00143e9:	58                   	pop    eax
c00143ea:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00143ef:	68 40 77 02 c0       	push   0xc0027740
c00143f4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143fa:	e8 9d c4 ff ff       	call   c001089c <VgaText::puts(char const*)>
c00143ff:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014404:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001440a:	e8 18 10 01 00       	call   c0025427 <CPU::readDR2()>
c001440f:	5a                   	pop    edx
c0014410:	59                   	pop    ecx
c0014411:	50                   	push   eax
c0014412:	53                   	push   ebx
c0014413:	e8 aa c4 ff ff       	call   c00108c2 <VgaText::putx(unsigned int)>
c0014418:	5b                   	pop    ebx
c0014419:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001441e:	5e                   	pop    esi
c001441f:	68 48 77 02 c0       	push   0xc0027748
c0014424:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001442a:	e8 6d c4 ff ff       	call   c001089c <VgaText::puts(char const*)>
c001442f:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014434:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001443a:	e8 fa 0f 01 00       	call   c0025439 <CPU::readDR3()>
c001443f:	5f                   	pop    edi
c0014440:	5d                   	pop    ebp
c0014441:	50                   	push   eax
c0014442:	53                   	push   ebx
c0014443:	e8 7a c4 ff ff       	call   c00108c2 <VgaText::putx(unsigned int)>
c0014448:	58                   	pop    eax
c0014449:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001444e:	5a                   	pop    edx
c001444f:	68 50 77 02 c0       	push   0xc0027750
c0014454:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001445a:	e8 3d c4 ff ff       	call   c001089c <VgaText::puts(char const*)>
c001445f:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014464:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001446a:	e8 dc 0f 01 00       	call   c002544b <CPU::readDR6()>
c001446f:	59                   	pop    ecx
c0014470:	5e                   	pop    esi
c0014471:	50                   	push   eax
c0014472:	53                   	push   ebx
c0014473:	e8 4a c4 ff ff       	call   c00108c2 <VgaText::putx(unsigned int)>
c0014478:	5f                   	pop    edi
c0014479:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001447e:	5d                   	pop    ebp
c001447f:	68 58 77 02 c0       	push   0xc0027758
c0014484:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001448a:	e8 0d c4 ff ff       	call   c001089c <VgaText::puts(char const*)>
c001448f:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014494:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001449a:	e8 be 0f 01 00       	call   c002545d <CPU::readDR7()>
c001449f:	5a                   	pop    edx
c00144a0:	59                   	pop    ecx
c00144a1:	50                   	push   eax
c00144a2:	53                   	push   ebx
c00144a3:	e8 1a c4 ff ff       	call   c00108c2 <VgaText::putx(unsigned int)>
c00144a8:	fa                   	cli    
c00144a9:	f4                   	hlt    
c00144aa:	83 c4 10             	add    esp,0x10
c00144ad:	eb fe                	jmp    c00144ad <displayDebugInfo(regs*)+0x415>

c00144af <x87EmulHandler(regs*, void*)>:
c00144af:	53                   	push   ebx
c00144b0:	83 ec 14             	sub    esp,0x14
c00144b3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144b7:	53                   	push   ebx
c00144b8:	e8 84 8d 00 00       	call   c001d241 <Vm::x87Handler(regs*)>
c00144bd:	83 c4 10             	add    esp,0x10
c00144c0:	84 c0                	test   al,al
c00144c2:	74 05                	je     c00144c9 <x87EmulHandler(regs*, void*)+0x1a>
c00144c4:	83 c4 08             	add    esp,0x8
c00144c7:	5b                   	pop    ebx
c00144c8:	c3                   	ret    
c00144c9:	83 ec 0c             	sub    esp,0xc
c00144cc:	68 60 77 02 c0       	push   0xc0027760
c00144d1:	e8 7b dd ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00144d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144d9:	e8 ba fb ff ff       	call   c0014098 <displayDebugInfo(regs*)>

c00144de <gpFault(regs*, void*)>:
c00144de:	53                   	push   ebx
c00144df:	83 ec 14             	sub    esp,0x14
c00144e2:	c7 05 90 a5 02 c0 b5 c7 01 c0 	mov    DWORD PTR ds:0xc002a590,0xc001c7b5
c00144ec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144f0:	53                   	push   ebx
c00144f1:	e8 bf 82 00 00       	call   c001c7b5 <Vm::faultHandler(regs*)>
c00144f6:	83 c4 10             	add    esp,0x10
c00144f9:	84 c0                	test   al,al
c00144fb:	74 05                	je     c0014502 <gpFault(regs*, void*)+0x24>
c00144fd:	83 c4 08             	add    esp,0x8
c0014500:	5b                   	pop    ebx
c0014501:	c3                   	ret    
c0014502:	83 ec 0c             	sub    esp,0xc
c0014505:	68 76 77 02 c0       	push   0xc0027776
c001450a:	e8 42 dd ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001450f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014512:	e8 81 fb ff ff       	call   c0014098 <displayDebugInfo(regs*)>

c0014517 <pgFault(regs*, void*)>:
c0014517:	83 ec 18             	sub    esp,0x18
c001451a:	68 91 77 02 c0       	push   0xc0027791
c001451f:	e8 2d dd ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0014524:	58                   	pop    eax
c0014525:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014529:	e8 6a fb ff ff       	call   c0014098 <displayDebugInfo(regs*)>

c001452e <otherISRHandler(regs*, void*)>:
c001452e:	53                   	push   ebx
c001452f:	83 ec 0c             	sub    esp,0xc
c0014532:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014536:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014539:	50                   	push   eax
c001453a:	50                   	push   eax
c001453b:	68 9e 77 02 c0       	push   0xc002779e
c0014540:	e8 0c dd ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0014545:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014548:	e8 4b fb ff ff       	call   c0014098 <displayDebugInfo(regs*)>

c001454d <opcodeFault(regs*, void*)>:
c001454d:	55                   	push   ebp
c001454e:	89 e5                	mov    ebp,esp
c0014550:	56                   	push   esi
c0014551:	53                   	push   ebx
c0014552:	83 ec 40             	sub    esp,0x40
c0014555:	e8 12 33 00 00       	call   c001786c <CPU::current()>
c001455a:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014560:	84 c0                	test   al,al
c0014562:	74 24                	je     c0014588 <opcodeFault(regs*, void*)+0x3b>
c0014564:	83 ec 0c             	sub    esp,0xc
c0014567:	68 bc 77 02 c0       	push   0xc00277bc
c001456c:	e8 e0 dc ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0014571:	83 c4 10             	add    esp,0x10
c0014574:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014577:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001457a:	8d 50 19             	lea    edx,[eax+0x19]
c001457d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014580:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014583:	e9 77 05 00 00       	jmp    c0014aff <opcodeFault(regs*, void*)+0x5b2>
c0014588:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001458b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001458e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014591:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014595:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001459c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001459f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00145a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145a5:	8a 00                	mov    al,BYTE PTR [eax]
c00145a7:	3c f0                	cmp    al,0xf0
c00145a9:	75 17                	jne    c00145c2 <opcodeFault(regs*, void*)+0x75>
c00145ab:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00145ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145b1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145b4:	8d 50 01             	lea    edx,[eax+0x1]
c00145b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145ba:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00145bd:	e9 da 00 00 00       	jmp    c001469c <opcodeFault(regs*, void*)+0x14f>
c00145c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145c5:	8a 00                	mov    al,BYTE PTR [eax]
c00145c7:	3c f2                	cmp    al,0xf2
c00145c9:	74 09                	je     c00145d4 <opcodeFault(regs*, void*)+0x87>
c00145cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145ce:	8a 00                	mov    al,BYTE PTR [eax]
c00145d0:	3c f3                	cmp    al,0xf3
c00145d2:	75 1b                	jne    c00145ef <opcodeFault(regs*, void*)+0xa2>
c00145d4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00145d8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00145db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145de:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145e1:	8d 50 01             	lea    edx,[eax+0x1]
c00145e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145e7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00145ea:	e9 ad 00 00 00       	jmp    c001469c <opcodeFault(regs*, void*)+0x14f>
c00145ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145f2:	8a 00                	mov    al,BYTE PTR [eax]
c00145f4:	3c 66                	cmp    al,0x66
c00145f6:	75 1f                	jne    c0014617 <opcodeFault(regs*, void*)+0xca>
c00145f8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00145fc:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014600:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014603:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014606:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014609:	8d 50 01             	lea    edx,[eax+0x1]
c001460c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001460f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014612:	e9 85 00 00 00       	jmp    c001469c <opcodeFault(regs*, void*)+0x14f>
c0014617:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001461a:	8a 00                	mov    al,BYTE PTR [eax]
c001461c:	3c 67                	cmp    al,0x67
c001461e:	75 18                	jne    c0014638 <opcodeFault(regs*, void*)+0xeb>
c0014620:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014624:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014627:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001462a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001462d:	8d 50 01             	lea    edx,[eax+0x1]
c0014630:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014633:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014636:	eb 64                	jmp    c001469c <opcodeFault(regs*, void*)+0x14f>
c0014638:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001463b:	8a 00                	mov    al,BYTE PTR [eax]
c001463d:	3c 2e                	cmp    al,0x2e
c001463f:	74 09                	je     c001464a <opcodeFault(regs*, void*)+0xfd>
c0014641:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014644:	8a 00                	mov    al,BYTE PTR [eax]
c0014646:	3c 3e                	cmp    al,0x3e
c0014648:	75 18                	jne    c0014662 <opcodeFault(regs*, void*)+0x115>
c001464a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001464e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014651:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014654:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014657:	8d 50 01             	lea    edx,[eax+0x1]
c001465a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001465d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014660:	eb 3a                	jmp    c001469c <opcodeFault(regs*, void*)+0x14f>
c0014662:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014665:	8a 00                	mov    al,BYTE PTR [eax]
c0014667:	3c 36                	cmp    al,0x36
c0014669:	74 1b                	je     c0014686 <opcodeFault(regs*, void*)+0x139>
c001466b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001466e:	8a 00                	mov    al,BYTE PTR [eax]
c0014670:	3c 26                	cmp    al,0x26
c0014672:	74 12                	je     c0014686 <opcodeFault(regs*, void*)+0x139>
c0014674:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014677:	8a 00                	mov    al,BYTE PTR [eax]
c0014679:	3c 64                	cmp    al,0x64
c001467b:	74 09                	je     c0014686 <opcodeFault(regs*, void*)+0x139>
c001467d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014680:	8a 00                	mov    al,BYTE PTR [eax]
c0014682:	3c 65                	cmp    al,0x65
c0014684:	75 16                	jne    c001469c <opcodeFault(regs*, void*)+0x14f>
c0014686:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001468a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001468d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014690:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014693:	8d 50 01             	lea    edx,[eax+0x1]
c0014696:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014699:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001469c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001469f:	8a 00                	mov    al,BYTE PTR [eax]
c00146a1:	3c 0f                	cmp    al,0xf
c00146a3:	0f 85 ad 00 00 00    	jne    c0014756 <opcodeFault(regs*, void*)+0x209>
c00146a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146ac:	40                   	inc    eax
c00146ad:	8a 00                	mov    al,BYTE PTR [eax]
c00146af:	3c c2                	cmp    al,0xc2
c00146b1:	74 0e                	je     c00146c1 <opcodeFault(regs*, void*)+0x174>
c00146b3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146b6:	40                   	inc    eax
c00146b7:	8a 00                	mov    al,BYTE PTR [eax]
c00146b9:	3c c3                	cmp    al,0xc3
c00146bb:	0f 85 95 00 00 00    	jne    c0014756 <opcodeFault(regs*, void*)+0x209>
c00146c1:	83 ec 0c             	sub    esp,0xc
c00146c4:	68 df 77 02 c0       	push   0xc00277df
c00146c9:	e8 83 db ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00146ce:	83 c4 10             	add    esp,0x10
c00146d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146d4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00146d7:	8d 50 01             	lea    edx,[eax+0x1]
c00146da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146dd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00146e0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00146e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146e6:	8a 00                	mov    al,BYTE PTR [eax]
c00146e8:	8d 50 fe             	lea    edx,[eax-0x2]
c00146eb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146ee:	88 10                	mov    BYTE PTR [eax],dl
c00146f0:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00146f3:	50                   	push   eax
c00146f4:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00146f7:	50                   	push   eax
c00146f8:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00146fb:	50                   	push   eax
c00146fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00146ff:	e8 f0 40 00 00       	call   c00187f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014704:	83 c4 10             	add    esp,0x10
c0014707:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001470a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001470d:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014710:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014713:	01 d0                	add    eax,edx
c0014715:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014718:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001471b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001471e:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014721:	48                   	dec    eax
c0014722:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014725:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014728:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001472b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001472e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014731:	83 ec 04             	sub    esp,0x4
c0014734:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014737:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001473a:	50                   	push   eax
c001473b:	e8 29 ba fe ff       	call   c0000169 <voodooXADD>
c0014740:	83 c4 10             	add    esp,0x10
c0014743:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014746:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014749:	01 c2                	add    edx,eax
c001474b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001474e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014751:	e9 a9 03 00 00       	jmp    c0014aff <opcodeFault(regs*, void*)+0x5b2>
c0014756:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014759:	8a 00                	mov    al,BYTE PTR [eax]
c001475b:	3c 0f                	cmp    al,0xf
c001475d:	0f 85 8b 01 00 00    	jne    c00148ee <opcodeFault(regs*, void*)+0x3a1>
c0014763:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014766:	40                   	inc    eax
c0014767:	8a 00                	mov    al,BYTE PTR [eax]
c0014769:	3c c7                	cmp    al,0xc7
c001476b:	0f 86 7d 01 00 00    	jbe    c00148ee <opcodeFault(regs*, void*)+0x3a1>
c0014771:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014774:	40                   	inc    eax
c0014775:	8a 00                	mov    al,BYTE PTR [eax]
c0014777:	3c cf                	cmp    al,0xcf
c0014779:	0f 87 6f 01 00 00    	ja     c00148ee <opcodeFault(regs*, void*)+0x3a1>
c001477f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014782:	40                   	inc    eax
c0014783:	8a 00                	mov    al,BYTE PTR [eax]
c0014785:	83 c0 38             	add    eax,0x38
c0014788:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001478b:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001478f:	75 0b                	jne    c001479c <opcodeFault(regs*, void*)+0x24f>
c0014791:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014794:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014797:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001479a:	eb 75                	jmp    c0014811 <opcodeFault(regs*, void*)+0x2c4>
c001479c:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00147a0:	75 0b                	jne    c00147ad <opcodeFault(regs*, void*)+0x260>
c00147a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147a5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00147a8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147ab:	eb 64                	jmp    c0014811 <opcodeFault(regs*, void*)+0x2c4>
c00147ad:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00147b1:	75 0b                	jne    c00147be <opcodeFault(regs*, void*)+0x271>
c00147b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147b6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00147b9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147bc:	eb 53                	jmp    c0014811 <opcodeFault(regs*, void*)+0x2c4>
c00147be:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00147c2:	75 0b                	jne    c00147cf <opcodeFault(regs*, void*)+0x282>
c00147c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147c7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00147ca:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147cd:	eb 42                	jmp    c0014811 <opcodeFault(regs*, void*)+0x2c4>
c00147cf:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00147d3:	75 0b                	jne    c00147e0 <opcodeFault(regs*, void*)+0x293>
c00147d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147d8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00147db:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147de:	eb 31                	jmp    c0014811 <opcodeFault(regs*, void*)+0x2c4>
c00147e0:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00147e4:	75 0b                	jne    c00147f1 <opcodeFault(regs*, void*)+0x2a4>
c00147e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147e9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00147ec:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147ef:	eb 20                	jmp    c0014811 <opcodeFault(regs*, void*)+0x2c4>
c00147f1:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00147f5:	75 0b                	jne    c0014802 <opcodeFault(regs*, void*)+0x2b5>
c00147f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147fa:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00147fd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014800:	eb 0f                	jmp    c0014811 <opcodeFault(regs*, void*)+0x2c4>
c0014802:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014806:	75 09                	jne    c0014811 <opcodeFault(regs*, void*)+0x2c4>
c0014808:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001480b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001480e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014811:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014815:	74 10                	je     c0014827 <opcodeFault(regs*, void*)+0x2da>
c0014817:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c001481e:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014825:	eb 2d                	jmp    c0014854 <opcodeFault(regs*, void*)+0x307>
c0014827:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001482a:	c1 e0 18             	shl    eax,0x18
c001482d:	89 c2                	mov    edx,eax
c001482f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014832:	c1 e0 08             	shl    eax,0x8
c0014835:	25 00 00 ff 00       	and    eax,0xff0000
c001483a:	09 c2                	or     edx,eax
c001483c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001483f:	c1 e8 08             	shr    eax,0x8
c0014842:	25 00 ff 00 00       	and    eax,0xff00
c0014847:	09 c2                	or     edx,eax
c0014849:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001484c:	c1 e8 18             	shr    eax,0x18
c001484f:	09 d0                	or     eax,edx
c0014851:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014854:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014858:	75 0b                	jne    c0014865 <opcodeFault(regs*, void*)+0x318>
c001485a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001485d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014860:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014863:	eb 75                	jmp    c00148da <opcodeFault(regs*, void*)+0x38d>
c0014865:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014869:	75 0b                	jne    c0014876 <opcodeFault(regs*, void*)+0x329>
c001486b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001486e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014871:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014874:	eb 64                	jmp    c00148da <opcodeFault(regs*, void*)+0x38d>
c0014876:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001487a:	75 0b                	jne    c0014887 <opcodeFault(regs*, void*)+0x33a>
c001487c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001487f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014882:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014885:	eb 53                	jmp    c00148da <opcodeFault(regs*, void*)+0x38d>
c0014887:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001488b:	75 0b                	jne    c0014898 <opcodeFault(regs*, void*)+0x34b>
c001488d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014890:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014893:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014896:	eb 42                	jmp    c00148da <opcodeFault(regs*, void*)+0x38d>
c0014898:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001489c:	75 0b                	jne    c00148a9 <opcodeFault(regs*, void*)+0x35c>
c001489e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148a1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148a4:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00148a7:	eb 31                	jmp    c00148da <opcodeFault(regs*, void*)+0x38d>
c00148a9:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00148ad:	75 0b                	jne    c00148ba <opcodeFault(regs*, void*)+0x36d>
c00148af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148b2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148b5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00148b8:	eb 20                	jmp    c00148da <opcodeFault(regs*, void*)+0x38d>
c00148ba:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00148be:	75 0b                	jne    c00148cb <opcodeFault(regs*, void*)+0x37e>
c00148c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148c3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148c6:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00148c9:	eb 0f                	jmp    c00148da <opcodeFault(regs*, void*)+0x38d>
c00148cb:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00148cf:	75 09                	jne    c00148da <opcodeFault(regs*, void*)+0x38d>
c00148d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148d4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148d7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00148da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148dd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00148e0:	8d 50 02             	lea    edx,[eax+0x2]
c00148e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148e6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00148e9:	e9 11 02 00 00       	jmp    c0014aff <opcodeFault(regs*, void*)+0x5b2>
c00148ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00148f1:	8a 00                	mov    al,BYTE PTR [eax]
c00148f3:	3c 0f                	cmp    al,0xf
c00148f5:	0f 85 76 01 00 00    	jne    c0014a71 <opcodeFault(regs*, void*)+0x524>
c00148fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00148fe:	40                   	inc    eax
c00148ff:	8a 00                	mov    al,BYTE PTR [eax]
c0014901:	3c c7                	cmp    al,0xc7
c0014903:	0f 85 68 01 00 00    	jne    c0014a71 <opcodeFault(regs*, void*)+0x524>
c0014909:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001490c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001490f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014912:	8d 50 01             	lea    edx,[eax+0x1]
c0014915:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014918:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001491b:	8d 45 ba             	lea    eax,[ebp-0x46]
c001491e:	50                   	push   eax
c001491f:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014922:	50                   	push   eax
c0014923:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014926:	50                   	push   eax
c0014927:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001492a:	e8 c5 3e 00 00       	call   c00187f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001492f:	83 c4 10             	add    esp,0x10
c0014932:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014935:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014938:	83 f0 01             	xor    eax,0x1
c001493b:	84 c0                	test   al,al
c001493d:	0f 84 2e 01 00 00    	je     c0014a71 <opcodeFault(regs*, void*)+0x524>
c0014943:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014946:	3c 01                	cmp    al,0x1
c0014948:	0f 85 23 01 00 00    	jne    c0014a71 <opcodeFault(regs*, void*)+0x524>
c001494e:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014951:	83 f0 01             	xor    eax,0x1
c0014954:	84 c0                	test   al,al
c0014956:	0f 84 15 01 00 00    	je     c0014a71 <opcodeFault(regs*, void*)+0x524>
c001495c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001495f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014962:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014965:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001496c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001496f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014972:	89 c2                	mov    edx,eax
c0014974:	b8 00 00 00 00       	mov    eax,0x0
c0014979:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001497c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001497f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014982:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014985:	ba 00 00 00 00       	mov    edx,0x0
c001498a:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001498d:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014990:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014993:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014996:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014999:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00149a0:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00149a3:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00149a6:	89 c2                	mov    edx,eax
c00149a8:	b8 00 00 00 00       	mov    eax,0x0
c00149ad:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00149b0:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00149b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149b6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00149b9:	ba 00 00 00 00       	mov    edx,0x0
c00149be:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00149c1:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00149c4:	e8 79 6f 00 00       	call   c001b942 <lockScheduler()>
c00149c9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00149cc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00149cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00149d1:	89 c1                	mov    ecx,eax
c00149d3:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00149d6:	89 cb                	mov    ebx,ecx
c00149d8:	89 d0                	mov    eax,edx
c00149da:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00149dd:	89 c6                	mov    esi,eax
c00149df:	89 f0                	mov    eax,esi
c00149e1:	09 d8                	or     eax,ebx
c00149e3:	85 c0                	test   eax,eax
c00149e5:	75 21                	jne    c0014a08 <opcodeFault(regs*, void*)+0x4bb>
c00149e7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00149ea:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00149ed:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00149f0:	89 01                	mov    DWORD PTR [ecx],eax
c00149f2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00149f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149f8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00149fb:	83 c8 40             	or     eax,0x40
c00149fe:	89 c2                	mov    edx,eax
c0014a00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a03:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014a06:	eb 3e                	jmp    c0014a46 <opcodeFault(regs*, void*)+0x4f9>
c0014a08:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014a0b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014a0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a10:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014a13:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014a16:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014a19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a1c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014a1f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014a22:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014a25:	89 d0                	mov    eax,edx
c0014a27:	31 d2                	xor    edx,edx
c0014a29:	89 c3                	mov    ebx,eax
c0014a2b:	89 d6                	mov    esi,edx
c0014a2d:	89 da                	mov    edx,ebx
c0014a2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a32:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014a35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a38:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a3b:	83 e0 bf             	and    eax,0xffffffbf
c0014a3e:	89 c2                	mov    edx,eax
c0014a40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a43:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014a46:	e8 f9 6e 00 00       	call   c001b944 <unlockScheduler()>
c0014a4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a4e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a51:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014a54:	01 c2                	add    edx,eax
c0014a56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a59:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a5c:	83 ec 0c             	sub    esp,0xc
c0014a5f:	68 ee 77 02 c0       	push   0xc00277ee
c0014a64:	e8 e8 d7 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0014a69:	83 c4 10             	add    esp,0x10
c0014a6c:	e9 8e 00 00 00       	jmp    c0014aff <opcodeFault(regs*, void*)+0x5b2>
c0014a71:	83 ec 0c             	sub    esp,0xc
c0014a74:	68 01 78 02 c0       	push   0xc0027801
c0014a79:	e8 d3 d7 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0014a7e:	83 c4 10             	add    esp,0x10
c0014a81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a84:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014a87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a8a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014a8d:	c1 e0 04             	shl    eax,0x4
c0014a90:	01 d0                	add    eax,edx
c0014a92:	83 c0 03             	add    eax,0x3
c0014a95:	8a 00                	mov    al,BYTE PTR [eax]
c0014a97:	0f b6 d8             	movzx  ebx,al
c0014a9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a9d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014aa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aa3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014aa6:	c1 e0 04             	shl    eax,0x4
c0014aa9:	01 d0                	add    eax,edx
c0014aab:	83 c0 02             	add    eax,0x2
c0014aae:	8a 00                	mov    al,BYTE PTR [eax]
c0014ab0:	0f b6 c8             	movzx  ecx,al
c0014ab3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ab6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014ab9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014abc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014abf:	c1 e0 04             	shl    eax,0x4
c0014ac2:	01 d0                	add    eax,edx
c0014ac4:	40                   	inc    eax
c0014ac5:	8a 00                	mov    al,BYTE PTR [eax]
c0014ac7:	0f b6 d0             	movzx  edx,al
c0014aca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014acd:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014ad0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ad3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ad6:	c1 e0 04             	shl    eax,0x4
c0014ad9:	01 f0                	add    eax,esi
c0014adb:	8a 00                	mov    al,BYTE PTR [eax]
c0014add:	0f b6 c0             	movzx  eax,al
c0014ae0:	83 ec 0c             	sub    esp,0xc
c0014ae3:	53                   	push   ebx
c0014ae4:	51                   	push   ecx
c0014ae5:	52                   	push   edx
c0014ae6:	50                   	push   eax
c0014ae7:	68 14 78 02 c0       	push   0xc0027814
c0014aec:	e8 60 d7 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0014af1:	83 c4 20             	add    esp,0x20
c0014af4:	83 ec 0c             	sub    esp,0xc
c0014af7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014afa:	e8 99 f5 ff ff       	call   c0014098 <displayDebugInfo(regs*)>
c0014aff:	8d 65 f8             	lea    esp,[ebp-0x8]
c0014b02:	5b                   	pop    ebx
c0014b03:	5e                   	pop    esi
c0014b04:	5d                   	pop    ebp
c0014b05:	c3                   	ret    

c0014b06 <displayProgramFault(char const*)>:
c0014b06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b0b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014b0e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014b14:	85 c0                	test   eax,eax
c0014b16:	74 15                	je     c0014b2d <displayProgramFault(char const*)+0x27>
c0014b18:	83 ec 0c             	sub    esp,0xc
c0014b1b:	6a 04                	push   0x4
c0014b1d:	6a 0f                	push   0xf
c0014b1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b23:	50                   	push   eax
c0014b24:	e8 35 ba ff ff       	call   c001055e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014b29:	83 c4 1c             	add    esp,0x1c
c0014b2c:	c3                   	ret    
c0014b2d:	c3                   	ret    

c0014b2e <setupInterruptController()>:
c0014b2e:	55                   	push   ebp
c0014b2f:	89 e5                	mov    ebp,esp
c0014b31:	53                   	push   ebx
c0014b32:	83 ec 14             	sub    esp,0x14
c0014b35:	e8 2e 2d 00 00       	call   c0017868 <CPU::getNumber()>
c0014b3a:	85 c0                	test   eax,eax
c0014b3c:	0f 95 c0             	setne  al
c0014b3f:	84 c0                	test   al,al
c0014b41:	74 56                	je     c0014b99 <setupInterruptController()+0x6b>
c0014b43:	83 ec 0c             	sub    esp,0xc
c0014b46:	68 58 21 00 00       	push   0x2158
c0014b4b:	e8 12 d6 ff ff       	call   c0012162 <operator new(unsigned long)>
c0014b50:	83 c4 10             	add    esp,0x10
c0014b53:	89 c3                	mov    ebx,eax
c0014b55:	83 ec 0c             	sub    esp,0xc
c0014b58:	53                   	push   ebx
c0014b59:	e8 2e d8 00 00       	call   c002238c <APIC::APIC()>
c0014b5e:	83 c4 10             	add    esp,0x10
c0014b61:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0014b64:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0014b67:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014b6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b6c:	83 c0 08             	add    eax,0x8
c0014b6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b71:	6a 00                	push   0x0
c0014b73:	6a 00                	push   0x0
c0014b75:	6a 00                	push   0x0
c0014b77:	52                   	push   edx
c0014b78:	ff d0                	call   eax
c0014b7a:	83 c4 10             	add    esp,0x10
c0014b7d:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0014b82:	83 ec 08             	sub    esp,0x8
c0014b85:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014b88:	50                   	push   eax
c0014b89:	e8 ce ea ff ff       	call   c001365c <Device::addChild(Device*)>
c0014b8e:	83 c4 10             	add    esp,0x10
c0014b91:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014b94:	e9 48 03 00 00       	jmp    c0014ee1 <setupInterruptController()+0x3b3>
c0014b99:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0014b9e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014ba4:	83 e0 01             	and    eax,0x1
c0014ba7:	84 c0                	test   al,al
c0014ba9:	0f 95 c0             	setne  al
c0014bac:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0014baf:	83 ec 0c             	sub    esp,0xc
c0014bb2:	68 58 21 00 00       	push   0x2158
c0014bb7:	e8 a6 d5 ff ff       	call   c0012162 <operator new(unsigned long)>
c0014bbc:	83 c4 10             	add    esp,0x10
c0014bbf:	89 c3                	mov    ebx,eax
c0014bc1:	83 ec 0c             	sub    esp,0xc
c0014bc4:	53                   	push   ebx
c0014bc5:	e8 84 dc 00 00       	call   c002284e <PIC::PIC()>
c0014bca:	83 c4 10             	add    esp,0x10
c0014bcd:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014bd0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014bd3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bd8:	83 c0 08             	add    eax,0x8
c0014bdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bdd:	6a 00                	push   0x0
c0014bdf:	6a 00                	push   0x0
c0014be1:	6a 00                	push   0x0
c0014be3:	52                   	push   edx
c0014be4:	ff d0                	call   eax
c0014be6:	83 c4 10             	add    esp,0x10
c0014be9:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0014bed:	74 6e                	je     c0014c5d <setupInterruptController()+0x12f>
c0014bef:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014bf2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bf7:	83 c0 0c             	add    eax,0xc
c0014bfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bfc:	6a 00                	push   0x0
c0014bfe:	6a 00                	push   0x0
c0014c00:	6a 00                	push   0x0
c0014c02:	52                   	push   edx
c0014c03:	ff d0                	call   eax
c0014c05:	83 c4 10             	add    esp,0x10
c0014c08:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0014c0c:	74 15                	je     c0014c23 <setupInterruptController()+0xf5>
c0014c0e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c11:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c13:	83 c0 04             	add    eax,0x4
c0014c16:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c18:	83 ec 0c             	sub    esp,0xc
c0014c1b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c1e:	ff d0                	call   eax
c0014c20:	83 c4 10             	add    esp,0x10
c0014c23:	83 ec 0c             	sub    esp,0xc
c0014c26:	68 58 21 00 00       	push   0x2158
c0014c2b:	e8 32 d5 ff ff       	call   c0012162 <operator new(unsigned long)>
c0014c30:	83 c4 10             	add    esp,0x10
c0014c33:	89 c3                	mov    ebx,eax
c0014c35:	83 ec 0c             	sub    esp,0xc
c0014c38:	53                   	push   ebx
c0014c39:	e8 4e d7 00 00       	call   c002238c <APIC::APIC()>
c0014c3e:	83 c4 10             	add    esp,0x10
c0014c41:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014c44:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014c47:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c4c:	83 c0 08             	add    eax,0x8
c0014c4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c51:	6a 00                	push   0x0
c0014c53:	6a 00                	push   0x0
c0014c55:	6a 00                	push   0x0
c0014c57:	52                   	push   edx
c0014c58:	ff d0                	call   eax
c0014c5a:	83 c4 10             	add    esp,0x10
c0014c5d:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0014c62:	83 ec 08             	sub    esp,0x8
c0014c65:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c68:	50                   	push   eax
c0014c69:	e8 ee e9 ff ff       	call   c001365c <Device::addChild(Device*)>
c0014c6e:	83 c4 10             	add    esp,0x10
c0014c71:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c74:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c76:	83 c0 24             	add    eax,0x24
c0014c79:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c7b:	6a 00                	push   0x0
c0014c7d:	68 2e 45 01 c0       	push   0xc001452e
c0014c82:	6a 00                	push   0x0
c0014c84:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c87:	ff d0                	call   eax
c0014c89:	83 c4 10             	add    esp,0x10
c0014c8c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c91:	83 c0 24             	add    eax,0x24
c0014c94:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c96:	6a 00                	push   0x0
c0014c98:	68 2e 45 01 c0       	push   0xc001452e
c0014c9d:	6a 01                	push   0x1
c0014c9f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ca2:	ff d0                	call   eax
c0014ca4:	83 c4 10             	add    esp,0x10
c0014ca7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014caa:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cac:	83 c0 24             	add    eax,0x24
c0014caf:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cb1:	6a 00                	push   0x0
c0014cb3:	68 fb 3e 01 c0       	push   0xc0013efb
c0014cb8:	6a 02                	push   0x2
c0014cba:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014cbd:	ff d0                	call   eax
c0014cbf:	83 c4 10             	add    esp,0x10
c0014cc2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cc7:	83 c0 24             	add    eax,0x24
c0014cca:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ccc:	6a 00                	push   0x0
c0014cce:	68 2e 45 01 c0       	push   0xc001452e
c0014cd3:	6a 03                	push   0x3
c0014cd5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014cd8:	ff d0                	call   eax
c0014cda:	83 c4 10             	add    esp,0x10
c0014cdd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ce0:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ce2:	83 c0 24             	add    eax,0x24
c0014ce5:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ce7:	6a 00                	push   0x0
c0014ce9:	68 2e 45 01 c0       	push   0xc001452e
c0014cee:	6a 04                	push   0x4
c0014cf0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014cf3:	ff d0                	call   eax
c0014cf5:	83 c4 10             	add    esp,0x10
c0014cf8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cfd:	83 c0 24             	add    eax,0x24
c0014d00:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d02:	6a 00                	push   0x0
c0014d04:	68 2e 45 01 c0       	push   0xc001452e
c0014d09:	6a 05                	push   0x5
c0014d0b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d0e:	ff d0                	call   eax
c0014d10:	83 c4 10             	add    esp,0x10
c0014d13:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d16:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d18:	83 c0 24             	add    eax,0x24
c0014d1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d1d:	6a 00                	push   0x0
c0014d1f:	68 4d 45 01 c0       	push   0xc001454d
c0014d24:	6a 06                	push   0x6
c0014d26:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d29:	ff d0                	call   eax
c0014d2b:	83 c4 10             	add    esp,0x10
c0014d2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d31:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d33:	83 c0 24             	add    eax,0x24
c0014d36:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d38:	6a 00                	push   0x0
c0014d3a:	68 af 44 01 c0       	push   0xc00144af
c0014d3f:	6a 07                	push   0x7
c0014d41:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d44:	ff d0                	call   eax
c0014d46:	83 c4 10             	add    esp,0x10
c0014d49:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d4e:	83 c0 24             	add    eax,0x24
c0014d51:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d53:	6a 00                	push   0x0
c0014d55:	68 16 3d 01 c0       	push   0xc0013d16
c0014d5a:	6a 08                	push   0x8
c0014d5c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d5f:	ff d0                	call   eax
c0014d61:	83 c4 10             	add    esp,0x10
c0014d64:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d67:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d69:	83 c0 24             	add    eax,0x24
c0014d6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d6e:	6a 00                	push   0x0
c0014d70:	68 2e 45 01 c0       	push   0xc001452e
c0014d75:	6a 09                	push   0x9
c0014d77:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d7a:	ff d0                	call   eax
c0014d7c:	83 c4 10             	add    esp,0x10
c0014d7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d82:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d84:	83 c0 24             	add    eax,0x24
c0014d87:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d89:	6a 00                	push   0x0
c0014d8b:	68 2e 45 01 c0       	push   0xc001452e
c0014d90:	6a 0a                	push   0xa
c0014d92:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d95:	ff d0                	call   eax
c0014d97:	83 c4 10             	add    esp,0x10
c0014d9a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d9f:	83 c0 24             	add    eax,0x24
c0014da2:	8b 00                	mov    eax,DWORD PTR [eax]
c0014da4:	6a 00                	push   0x0
c0014da6:	68 2e 45 01 c0       	push   0xc001452e
c0014dab:	6a 0b                	push   0xb
c0014dad:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014db0:	ff d0                	call   eax
c0014db2:	83 c4 10             	add    esp,0x10
c0014db5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014db8:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dba:	83 c0 24             	add    eax,0x24
c0014dbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dbf:	6a 00                	push   0x0
c0014dc1:	68 2e 45 01 c0       	push   0xc001452e
c0014dc6:	6a 0c                	push   0xc
c0014dc8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014dcb:	ff d0                	call   eax
c0014dcd:	83 c4 10             	add    esp,0x10
c0014dd0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dd3:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dd5:	83 c0 24             	add    eax,0x24
c0014dd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dda:	6a 00                	push   0x0
c0014ddc:	68 de 44 01 c0       	push   0xc00144de
c0014de1:	6a 0d                	push   0xd
c0014de3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014de6:	ff d0                	call   eax
c0014de8:	83 c4 10             	add    esp,0x10
c0014deb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dee:	8b 00                	mov    eax,DWORD PTR [eax]
c0014df0:	83 c0 24             	add    eax,0x24
c0014df3:	8b 00                	mov    eax,DWORD PTR [eax]
c0014df5:	6a 00                	push   0x0
c0014df7:	68 17 45 01 c0       	push   0xc0014517
c0014dfc:	6a 0e                	push   0xe
c0014dfe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e01:	ff d0                	call   eax
c0014e03:	83 c4 10             	add    esp,0x10
c0014e06:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e09:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e0b:	83 c0 24             	add    eax,0x24
c0014e0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e10:	6a 00                	push   0x0
c0014e12:	68 2e 45 01 c0       	push   0xc001452e
c0014e17:	6a 0f                	push   0xf
c0014e19:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e1c:	ff d0                	call   eax
c0014e1e:	83 c4 10             	add    esp,0x10
c0014e21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e24:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e26:	83 c0 24             	add    eax,0x24
c0014e29:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e2b:	6a 00                	push   0x0
c0014e2d:	68 2e 45 01 c0       	push   0xc001452e
c0014e32:	6a 10                	push   0x10
c0014e34:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e37:	ff d0                	call   eax
c0014e39:	83 c4 10             	add    esp,0x10
c0014e3c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e41:	83 c0 24             	add    eax,0x24
c0014e44:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e46:	6a 00                	push   0x0
c0014e48:	68 2e 45 01 c0       	push   0xc001452e
c0014e4d:	6a 11                	push   0x11
c0014e4f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e52:	ff d0                	call   eax
c0014e54:	83 c4 10             	add    esp,0x10
c0014e57:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e5c:	83 c0 24             	add    eax,0x24
c0014e5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e61:	6a 00                	push   0x0
c0014e63:	68 2e 45 01 c0       	push   0xc001452e
c0014e68:	6a 12                	push   0x12
c0014e6a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e6d:	ff d0                	call   eax
c0014e6f:	83 c4 10             	add    esp,0x10
c0014e72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e75:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e77:	83 c0 24             	add    eax,0x24
c0014e7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e7c:	6a 00                	push   0x0
c0014e7e:	68 2e 45 01 c0       	push   0xc001452e
c0014e83:	6a 13                	push   0x13
c0014e85:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e88:	ff d0                	call   eax
c0014e8a:	83 c4 10             	add    esp,0x10
c0014e8d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e90:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e92:	83 c0 24             	add    eax,0x24
c0014e95:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e97:	6a 00                	push   0x0
c0014e99:	68 2e 45 01 c0       	push   0xc001452e
c0014e9e:	6a 14                	push   0x14
c0014ea0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ea3:	ff d0                	call   eax
c0014ea5:	83 c4 10             	add    esp,0x10
c0014ea8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eab:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ead:	83 c0 24             	add    eax,0x24
c0014eb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0014eb2:	6a 00                	push   0x0
c0014eb4:	68 2e 45 01 c0       	push   0xc001452e
c0014eb9:	6a 1e                	push   0x1e
c0014ebb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ebe:	ff d0                	call   eax
c0014ec0:	83 c4 10             	add    esp,0x10
c0014ec3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ec6:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ec8:	83 c0 24             	add    eax,0x24
c0014ecb:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ecd:	6a 00                	push   0x0
c0014ecf:	68 59 a3 01 c0       	push   0xc001a359
c0014ed4:	6a 60                	push   0x60
c0014ed6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ed9:	ff d0                	call   eax
c0014edb:	83 c4 10             	add    esp,0x10
c0014ede:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ee1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0014ee4:	c9                   	leave  
c0014ee5:	c3                   	ret    

c0014ee6 <InterruptController::convertLegacyIRQNumber(int)>:
c0014ee6:	55                   	push   ebp
c0014ee7:	89 e5                	mov    ebp,esp
c0014ee9:	83 ec 08             	sub    esp,0x8
c0014eec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eef:	83 ec 0c             	sub    esp,0xc
c0014ef2:	50                   	push   eax
c0014ef3:	e8 46 ea ff ff       	call   c001393e <Device::getName()>
c0014ef8:	83 c4 10             	add    esp,0x10
c0014efb:	8a 00                	mov    al,BYTE PTR [eax]
c0014efd:	3c 41                	cmp    al,0x41
c0014eff:	0f 94 c0             	sete   al
c0014f02:	84 c0                	test   al,al
c0014f04:	74 28                	je     c0014f2e <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0014f06:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0014f0a:	7f 12                	jg     c0014f1e <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0014f0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014f0f:	05 e0 96 02 c0       	add    eax,0xc00296e0
c0014f14:	8a 00                	mov    al,BYTE PTR [eax]
c0014f16:	0f b6 c0             	movzx  eax,al
c0014f19:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0014f1c:	eb 10                	jmp    c0014f2e <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0014f1e:	83 ec 0c             	sub    esp,0xc
c0014f21:	68 94 75 02 c0       	push   0xc0027594
c0014f26:	e8 c4 3a 00 00       	call   c00189ef <Krnl::panic(char const*)>
c0014f2b:	83 c4 10             	add    esp,0x10
c0014f2e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014f31:	c9                   	leave  
c0014f32:	c3                   	ret    
c0014f33:	90                   	nop

c0014f34 <startGUI(void*)>:
c0014f34:	55                   	push   ebp
c0014f35:	89 e5                	mov    ebp,esp
c0014f37:	53                   	push   ebx
c0014f38:	83 ec 04             	sub    esp,0x4
c0014f3b:	e8 04 6a 00 00       	call   c001b944 <unlockScheduler()>
c0014f40:	e8 e8 69 00 00       	call   c001b92d <getIRQNestingLevel()>
c0014f45:	83 ec 08             	sub    esp,0x8
c0014f48:	50                   	push   eax
c0014f49:	68 7c 78 02 c0       	push   0xc002787c
c0014f4e:	e8 fe d2 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0014f53:	83 c4 10             	add    esp,0x10
c0014f56:	8b 1d 08 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a408
c0014f5c:	83 ec 08             	sub    esp,0x8
c0014f5f:	6a 01                	push   0x1
c0014f61:	68 96 78 02 c0       	push   0xc0027896
c0014f66:	e8 07 64 00 00       	call   c001b372 <Thr::loadDLL(char const*, bool)>
c0014f6b:	83 c4 10             	add    esp,0x10
c0014f6e:	83 ec 08             	sub    esp,0x8
c0014f71:	53                   	push   ebx
c0014f72:	50                   	push   eax
c0014f73:	e8 c0 65 00 00       	call   c001b538 <Thr::executeDLL(unsigned long, void*)>
c0014f78:	83 c4 10             	add    esp,0x10
c0014f7b:	8b 1d 08 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a408
c0014f81:	83 ec 08             	sub    esp,0x8
c0014f84:	6a 01                	push   0x1
c0014f86:	68 b0 78 02 c0       	push   0xc00278b0
c0014f8b:	e8 e2 63 00 00       	call   c001b372 <Thr::loadDLL(char const*, bool)>
c0014f90:	83 c4 10             	add    esp,0x10
c0014f93:	83 ec 08             	sub    esp,0x8
c0014f96:	53                   	push   ebx
c0014f97:	50                   	push   eax
c0014f98:	e8 9b 65 00 00       	call   c001b538 <Thr::executeDLL(unsigned long, void*)>
c0014f9d:	83 c4 10             	add    esp,0x10
c0014fa0:	90                   	nop
c0014fa1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0014fa4:	c9                   	leave  
c0014fa5:	c3                   	ret    

c0014fa6 <sendKeyToTerminal(unsigned char)>:
c0014fa6:	55                   	push   ebp
c0014fa7:	89 e5                	mov    ebp,esp
c0014fa9:	83 ec 28             	sub    esp,0x28
c0014fac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014faf:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0014fb2:	a1 c4 a4 02 c0       	mov    eax,ds:0xc002a4c4
c0014fb7:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0014fbb:	83 ec 08             	sub    esp,0x8
c0014fbe:	52                   	push   edx
c0014fbf:	50                   	push   eax
c0014fc0:	e8 d5 ba ff ff       	call   c0010a9a <VgaText::receiveKey(unsigned char)>
c0014fc5:	83 c4 10             	add    esp,0x10
c0014fc8:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0014fcc:	75 41                	jne    c001500f <sendKeyToTerminal(unsigned char)+0x69>
c0014fce:	e8 96 69 00 00       	call   c001b969 <lockStuff()>
c0014fd3:	a1 a0 a5 02 c0       	mov    eax,ds:0xc002a5a0
c0014fd8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014fdb:	c7 05 a0 a5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a5a0,0x0
c0014fe5:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0014fe9:	74 1f                	je     c001500a <sendKeyToTerminal(unsigned char)+0x64>
c0014feb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0014ff1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014ff4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014ff7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014ffa:	83 ec 0c             	sub    esp,0xc
c0014ffd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015000:	e8 4d 6f 00 00       	call   c001bf52 <unblockTask(ThreadControlBlock*)>
c0015005:	83 c4 10             	add    esp,0x10
c0015008:	eb db                	jmp    c0014fe5 <sendKeyToTerminal(unsigned char)+0x3f>
c001500a:	e8 ec 6c 00 00       	call   c001bcfb <unlockStuff()>
c001500f:	90                   	nop
c0015010:	c9                   	leave  
c0015011:	c3                   	ret    

c0015012 <sendKeyboardToken(KeyboardToken)>:
c0015012:	55                   	push   ebp
c0015013:	89 e5                	mov    ebp,esp
c0015015:	83 ec 18             	sub    esp,0x18
c0015018:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001501b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001501e:	0f b7 c0             	movzx  eax,ax
c0015021:	83 f2 01             	xor    edx,0x1
c0015024:	88 90 c0 a5 02 c0    	mov    BYTE PTR [eax-0x3ffd5a40],dl
c001502a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001502d:	66 3d 03 02          	cmp    ax,0x203
c0015031:	75 07                	jne    c001503a <sendKeyboardToken(KeyboardToken)+0x28>
c0015033:	a0 c0 a6 02 c0       	mov    al,ds:0xc002a6c0
c0015038:	84 c0                	test   al,al
c001503a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001503e:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015041:	a0 c8 a9 02 c0       	mov    al,ds:0xc002a9c8
c0015046:	38 c2                	cmp    dl,al
c0015048:	74 1c                	je     c0015066 <sendKeyboardToken(KeyboardToken)+0x54>
c001504a:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001504d:	a2 c8 a9 02 c0       	mov    ds:0xc002a9c8,al
c0015052:	a0 c8 a9 02 c0       	mov    al,ds:0xc002a9c8
c0015057:	0f b6 c0             	movzx  eax,al
c001505a:	83 ec 0c             	sub    esp,0xc
c001505d:	50                   	push   eax
c001505e:	e8 a5 ac ff ff       	call   c000fd08 <setTerminalScrollLock(bool)>
c0015063:	83 c4 10             	add    esp,0x10
c0015066:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015069:	84 c0                	test   al,al
c001506b:	0f 84 ae 00 00 00    	je     c001511f <sendKeyboardToken(KeyboardToken)+0x10d>
c0015071:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015074:	66 3d 10 03          	cmp    ax,0x310
c0015078:	75 06                	jne    c0015080 <sendKeyboardToken(KeyboardToken)+0x6e>
c001507a:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015080:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015083:	66 3d 11 03          	cmp    ax,0x311
c0015087:	75 06                	jne    c001508f <sendKeyboardToken(KeyboardToken)+0x7d>
c0015089:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001508f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015092:	66 3d 12 03          	cmp    ax,0x312
c0015096:	75 06                	jne    c001509e <sendKeyboardToken(KeyboardToken)+0x8c>
c0015098:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001509e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a1:	66 3d 13 03          	cmp    ax,0x313
c00150a5:	75 06                	jne    c00150ad <sendKeyboardToken(KeyboardToken)+0x9b>
c00150a7:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00150ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150b0:	66 3d 14 03          	cmp    ax,0x314
c00150b4:	75 06                	jne    c00150bc <sendKeyboardToken(KeyboardToken)+0xaa>
c00150b6:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00150bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150bf:	66 3d 15 03          	cmp    ax,0x315
c00150c3:	75 06                	jne    c00150cb <sendKeyboardToken(KeyboardToken)+0xb9>
c00150c5:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00150cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ce:	66 3d 16 03          	cmp    ax,0x316
c00150d2:	75 06                	jne    c00150da <sendKeyboardToken(KeyboardToken)+0xc8>
c00150d4:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00150da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150dd:	66 3d 17 03          	cmp    ax,0x317
c00150e1:	75 06                	jne    c00150e9 <sendKeyboardToken(KeyboardToken)+0xd7>
c00150e3:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00150e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ec:	66 3d 18 03          	cmp    ax,0x318
c00150f0:	75 06                	jne    c00150f8 <sendKeyboardToken(KeyboardToken)+0xe6>
c00150f2:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00150f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150fb:	66 3d 19 03          	cmp    ax,0x319
c00150ff:	75 06                	jne    c0015107 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015101:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015107:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001510a:	66 3d 1a 03          	cmp    ax,0x31a
c001510e:	0f 85 c9 00 00 00    	jne    c00151dd <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015114:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001511a:	e9 be 00 00 00       	jmp    c00151dd <sendKeyboardToken(KeyboardToken)+0x1cb>
c001511f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015122:	66 3d 10 03          	cmp    ax,0x310
c0015126:	75 0a                	jne    c0015132 <sendKeyboardToken(KeyboardToken)+0x120>
c0015128:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001512e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015132:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015135:	66 3d 11 03          	cmp    ax,0x311
c0015139:	75 0a                	jne    c0015145 <sendKeyboardToken(KeyboardToken)+0x133>
c001513b:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015141:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015148:	66 3d 12 03          	cmp    ax,0x312
c001514c:	75 0a                	jne    c0015158 <sendKeyboardToken(KeyboardToken)+0x146>
c001514e:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015154:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015158:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001515b:	66 3d 13 03          	cmp    ax,0x313
c001515f:	75 0a                	jne    c001516b <sendKeyboardToken(KeyboardToken)+0x159>
c0015161:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015167:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001516b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001516e:	66 3d 14 03          	cmp    ax,0x314
c0015172:	75 0a                	jne    c001517e <sendKeyboardToken(KeyboardToken)+0x16c>
c0015174:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001517a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001517e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015181:	66 3d 15 03          	cmp    ax,0x315
c0015185:	75 0a                	jne    c0015191 <sendKeyboardToken(KeyboardToken)+0x17f>
c0015187:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001518d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015191:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015194:	66 3d 16 03          	cmp    ax,0x316
c0015198:	75 0a                	jne    c00151a4 <sendKeyboardToken(KeyboardToken)+0x192>
c001519a:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00151a0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151a7:	66 3d 17 03          	cmp    ax,0x317
c00151ab:	75 0a                	jne    c00151b7 <sendKeyboardToken(KeyboardToken)+0x1a5>
c00151ad:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00151b3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ba:	66 3d 18 03          	cmp    ax,0x318
c00151be:	75 0a                	jne    c00151ca <sendKeyboardToken(KeyboardToken)+0x1b8>
c00151c0:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00151c6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151cd:	66 3d 19 03          	cmp    ax,0x319
c00151d1:	75 0a                	jne    c00151dd <sendKeyboardToken(KeyboardToken)+0x1cb>
c00151d3:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00151d9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151e0:	66 3d 00 02          	cmp    ax,0x200
c00151e4:	75 2a                	jne    c0015210 <sendKeyboardToken(KeyboardToken)+0x1fe>
c00151e6:	a0 c0 a9 02 c0       	mov    al,ds:0xc002a9c0
c00151eb:	83 f0 01             	xor    eax,0x1
c00151ee:	84 c0                	test   al,al
c00151f0:	74 1e                	je     c0015210 <sendKeyboardToken(KeyboardToken)+0x1fe>
c00151f2:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00151f7:	6a 01                	push   0x1
c00151f9:	6a 00                	push   0x0
c00151fb:	68 34 4f 01 c0       	push   0xc0014f34
c0015200:	50                   	push   eax
c0015201:	e8 66 68 00 00       	call   c001ba6c <Process::createThread(void (*)(void*), void*, int)>
c0015206:	83 c4 10             	add    esp,0x10
c0015209:	c6 05 c0 a9 02 c0 01 	mov    BYTE PTR ds:0xc002a9c0,0x1
c0015210:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015213:	66 3d 1d 03          	cmp    ax,0x31d
c0015217:	75 06                	jne    c001521f <sendKeyboardToken(KeyboardToken)+0x20d>
c0015219:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001521f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015222:	66 3d 1c 03          	cmp    ax,0x31c
c0015226:	75 06                	jne    c001522e <sendKeyboardToken(KeyboardToken)+0x21c>
c0015228:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001522e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015231:	66 3d 1b 03          	cmp    ax,0x31b
c0015235:	75 06                	jne    c001523d <sendKeyboardToken(KeyboardToken)+0x22b>
c0015237:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001523d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015240:	66 3d 1e 03          	cmp    ax,0x31e
c0015244:	75 06                	jne    c001524c <sendKeyboardToken(KeyboardToken)+0x23a>
c0015246:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001524c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001524f:	66 3d 1f 03          	cmp    ax,0x31f
c0015253:	75 06                	jne    c001525b <sendKeyboardToken(KeyboardToken)+0x249>
c0015255:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001525b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001525e:	66 3d 1a 03          	cmp    ax,0x31a
c0015262:	75 06                	jne    c001526a <sendKeyboardToken(KeyboardToken)+0x258>
c0015264:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001526a:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001526e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015271:	83 f0 01             	xor    eax,0x1
c0015274:	84 c0                	test   al,al
c0015276:	74 77                	je     c00152ef <sendKeyboardToken(KeyboardToken)+0x2dd>
c0015278:	a0 c1 a6 02 c0       	mov    al,ds:0xc002a6c1
c001527d:	84 c0                	test   al,al
c001527f:	74 41                	je     c00152c2 <sendKeyboardToken(KeyboardToken)+0x2b0>
c0015281:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015285:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015289:	74 2b                	je     c00152b6 <sendKeyboardToken(KeyboardToken)+0x2a4>
c001528b:	8b 15 c4 a9 02 c0    	mov    edx,DWORD PTR ds:0xc002a9c4
c0015291:	89 d0                	mov    eax,edx
c0015293:	c1 e0 02             	shl    eax,0x2
c0015296:	01 d0                	add    eax,edx
c0015298:	01 c0                	add    eax,eax
c001529a:	a3 c4 a9 02 c0       	mov    ds:0xc002a9c4,eax
c001529f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152a2:	0f b7 c0             	movzx  eax,ax
c00152a5:	8d 50 d0             	lea    edx,[eax-0x30]
c00152a8:	a1 c4 a9 02 c0       	mov    eax,ds:0xc002a9c4
c00152ad:	01 d0                	add    eax,edx
c00152af:	a3 c4 a9 02 c0       	mov    ds:0xc002a9c4,eax
c00152b4:	eb 6d                	jmp    c0015323 <sendKeyboardToken(KeyboardToken)+0x311>
c00152b6:	c7 05 c4 a9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a9c4,0x0
c00152c0:	eb 61                	jmp    c0015323 <sendKeyboardToken(KeyboardToken)+0x311>
c00152c2:	a1 c4 a9 02 c0       	mov    eax,ds:0xc002a9c4
c00152c7:	85 c0                	test   eax,eax
c00152c9:	74 18                	je     c00152e3 <sendKeyboardToken(KeyboardToken)+0x2d1>
c00152cb:	a1 c4 a9 02 c0       	mov    eax,ds:0xc002a9c4
c00152d0:	0f b6 c0             	movzx  eax,al
c00152d3:	83 ec 0c             	sub    esp,0xc
c00152d6:	50                   	push   eax
c00152d7:	e8 ca fc ff ff       	call   c0014fa6 <sendKeyToTerminal(unsigned char)>
c00152dc:	83 c4 10             	add    esp,0x10
c00152df:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00152e3:	c7 05 c4 a9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a9c4,0x0
c00152ed:	eb 34                	jmp    c0015323 <sendKeyboardToken(KeyboardToken)+0x311>
c00152ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152f2:	66 3d 01 01          	cmp    ax,0x101
c00152f6:	75 2b                	jne    c0015323 <sendKeyboardToken(KeyboardToken)+0x311>
c00152f8:	a1 c4 a9 02 c0       	mov    eax,ds:0xc002a9c4
c00152fd:	85 c0                	test   eax,eax
c00152ff:	74 18                	je     c0015319 <sendKeyboardToken(KeyboardToken)+0x307>
c0015301:	a1 c4 a9 02 c0       	mov    eax,ds:0xc002a9c4
c0015306:	0f b6 c0             	movzx  eax,al
c0015309:	83 ec 0c             	sub    esp,0xc
c001530c:	50                   	push   eax
c001530d:	e8 94 fc ff ff       	call   c0014fa6 <sendKeyToTerminal(unsigned char)>
c0015312:	83 c4 10             	add    esp,0x10
c0015315:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015319:	c7 05 c4 a9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a9c4,0x0
c0015323:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015326:	83 f0 01             	xor    eax,0x1
c0015329:	84 c0                	test   al,al
c001532b:	74 4c                	je     c0015379 <sendKeyboardToken(KeyboardToken)+0x367>
c001532d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015330:	83 f0 01             	xor    eax,0x1
c0015333:	84 c0                	test   al,al
c0015335:	74 42                	je     c0015379 <sendKeyboardToken(KeyboardToken)+0x367>
c0015337:	a0 c0 a6 02 c0       	mov    al,ds:0xc002a6c0
c001533c:	83 f0 01             	xor    eax,0x1
c001533f:	84 c0                	test   al,al
c0015341:	74 36                	je     c0015379 <sendKeyboardToken(KeyboardToken)+0x367>
c0015343:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015346:	66 83 f8 1f          	cmp    ax,0x1f
c001534a:	76 09                	jbe    c0015355 <sendKeyboardToken(KeyboardToken)+0x343>
c001534c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001534f:	66 83 f8 7e          	cmp    ax,0x7e
c0015353:	76 12                	jbe    c0015367 <sendKeyboardToken(KeyboardToken)+0x355>
c0015355:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015358:	66 83 f8 0a          	cmp    ax,0xa
c001535c:	74 09                	je     c0015367 <sendKeyboardToken(KeyboardToken)+0x355>
c001535e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015361:	66 83 f8 08          	cmp    ax,0x8
c0015365:	75 12                	jne    c0015379 <sendKeyboardToken(KeyboardToken)+0x367>
c0015367:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001536a:	0f b6 c0             	movzx  eax,al
c001536d:	83 ec 0c             	sub    esp,0xc
c0015370:	50                   	push   eax
c0015371:	e8 30 fc ff ff       	call   c0014fa6 <sendKeyToTerminal(unsigned char)>
c0015376:	83 c4 10             	add    esp,0x10
c0015379:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001537c:	83 f0 01             	xor    eax,0x1
c001537f:	84 c0                	test   al,al
c0015381:	74 4f                	je     c00153d2 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015383:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015386:	83 f0 01             	xor    eax,0x1
c0015389:	84 c0                	test   al,al
c001538b:	74 45                	je     c00153d2 <sendKeyboardToken(KeyboardToken)+0x3c0>
c001538d:	a0 c0 a6 02 c0       	mov    al,ds:0xc002a6c0
c0015392:	84 c0                	test   al,al
c0015394:	74 3c                	je     c00153d2 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015396:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015399:	66 83 f8 3f          	cmp    ax,0x3f
c001539d:	76 33                	jbe    c00153d2 <sendKeyboardToken(KeyboardToken)+0x3c0>
c001539f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a2:	66 83 f8 7f          	cmp    ax,0x7f
c00153a6:	77 2a                	ja     c00153d2 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00153a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ab:	88 c2                	mov    dl,al
c00153ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b0:	66 83 f8 5f          	cmp    ax,0x5f
c00153b4:	76 04                	jbe    c00153ba <sendKeyboardToken(KeyboardToken)+0x3a8>
c00153b6:	b0 20                	mov    al,0x20
c00153b8:	eb 02                	jmp    c00153bc <sendKeyboardToken(KeyboardToken)+0x3aa>
c00153ba:	b0 00                	mov    al,0x0
c00153bc:	29 c2                	sub    edx,eax
c00153be:	88 d0                	mov    al,dl
c00153c0:	83 e8 40             	sub    eax,0x40
c00153c3:	0f b6 c0             	movzx  eax,al
c00153c6:	83 ec 0c             	sub    esp,0xc
c00153c9:	50                   	push   eax
c00153ca:	e8 d7 fb ff ff       	call   c0014fa6 <sendKeyToTerminal(unsigned char)>
c00153cf:	83 c4 10             	add    esp,0x10
c00153d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d5:	66 3d 00 03          	cmp    ax,0x300
c00153d9:	75 0f                	jne    c00153ea <sendKeyboardToken(KeyboardToken)+0x3d8>
c00153db:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00153de:	83 f0 01             	xor    eax,0x1
c00153e1:	84 c0                	test   al,al
c00153e3:	74 05                	je     c00153ea <sendKeyboardToken(KeyboardToken)+0x3d8>
c00153e5:	e8 45 b1 ff ff       	call   c001052f <doTerminalCycle()>
c00153ea:	90                   	nop
c00153eb:	c9                   	leave  
c00153ec:	c3                   	ret    

c00153ed <clearInternalKeybuffer(VgaText*)>:
c00153ed:	55                   	push   ebp
c00153ee:	89 e5                	mov    ebp,esp
c00153f0:	83 ec 08             	sub    esp,0x8
c00153f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f6:	05 34 11 00 00       	add    eax,0x1134
c00153fb:	83 ec 0c             	sub    esp,0xc
c00153fe:	50                   	push   eax
c00153ff:	e8 e7 b2 fe ff       	call   c00006eb <strlen>
c0015404:	83 c4 10             	add    esp,0x10
c0015407:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001540a:	81 c2 34 11 00 00    	add    edx,0x1134
c0015410:	83 ec 04             	sub    esp,0x4
c0015413:	50                   	push   eax
c0015414:	6a 00                	push   0x0
c0015416:	52                   	push   edx
c0015417:	e8 b2 b2 fe ff       	call   c00006ce <memset>
c001541c:	83 c4 10             	add    esp,0x10
c001541f:	90                   	nop
c0015420:	c9                   	leave  
c0015421:	c3                   	ret    

c0015422 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015422:	55                   	push   ebp
c0015423:	89 e5                	mov    ebp,esp
c0015425:	83 ec 18             	sub    esp,0x18
c0015428:	fb                   	sti    
c0015429:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015430:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015434:	0f 84 8a 00 00 00    	je     c00154c4 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c001543a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001543d:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015443:	84 c0                	test   al,al
c0015445:	75 11                	jne    c0015458 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0015447:	e8 f6 64 00 00       	call   c001b942 <lockScheduler()>
c001544c:	e8 25 68 00 00       	call   c001bc76 <schedule()>
c0015451:	e8 ee 64 00 00       	call   c001b944 <unlockScheduler()>
c0015456:	eb e2                	jmp    c001543a <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015458:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001545b:	8d 50 01             	lea    edx,[eax+0x1]
c001545e:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015461:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015464:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c001546a:	88 10                	mov    BYTE PTR [eax],dl
c001546c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001546f:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015475:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015478:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001547b:	05 34 11 00 00       	add    eax,0x1134
c0015480:	83 ec 0c             	sub    esp,0xc
c0015483:	50                   	push   eax
c0015484:	e8 62 b2 fe ff       	call   c00006eb <strlen>
c0015489:	83 c4 10             	add    esp,0x10
c001548c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001548f:	81 c2 34 11 00 00    	add    edx,0x1134
c0015495:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015498:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001549b:	81 c2 34 11 00 00    	add    edx,0x1134
c00154a1:	83 ec 04             	sub    esp,0x4
c00154a4:	50                   	push   eax
c00154a5:	51                   	push   ecx
c00154a6:	52                   	push   edx
c00154a7:	e8 b4 b1 fe ff       	call   c0000660 <memmove>
c00154ac:	83 c4 10             	add    esp,0x10
c00154af:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00154b2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154b5:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00154b9:	0f 85 71 ff ff ff    	jne    c0015430 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00154bf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c2:	eb 03                	jmp    c00154c7 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c00154c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c7:	c9                   	leave  
c00154c8:	c3                   	ret    
c00154c9:	90                   	nop

c00154ca <Keyboard::Keyboard(char const*)>:
c00154ca:	83 ec 0c             	sub    esp,0xc
c00154cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154d1:	83 ec 08             	sub    esp,0x8
c00154d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154d8:	50                   	push   eax
c00154d9:	e8 6e e3 ff ff       	call   c001384c <Device::Device(char const*)>
c00154de:	83 c4 10             	add    esp,0x10
c00154e1:	ba d4 78 02 c0       	mov    edx,0xc00278d4
c00154e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154ea:	89 10                	mov    DWORD PTR [eax],edx
c00154ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154f0:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00154fa:	c6 05 a4 a5 02 c0 01 	mov    BYTE PTR ds:0xc002a5a4,0x1
c0015501:	90                   	nop
c0015502:	83 c4 0c             	add    esp,0xc
c0015505:	c3                   	ret    

c0015506 <Keyboard::~Keyboard()>:
c0015506:	83 ec 0c             	sub    esp,0xc
c0015509:	ba d4 78 02 c0       	mov    edx,0xc00278d4
c001550e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015512:	89 10                	mov    DWORD PTR [eax],edx
c0015514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015518:	83 ec 0c             	sub    esp,0xc
c001551b:	50                   	push   eax
c001551c:	e8 dd df ff ff       	call   c00134fe <Device::~Device()>
c0015521:	83 c4 10             	add    esp,0x10
c0015524:	90                   	nop
c0015525:	83 c4 0c             	add    esp,0xc
c0015528:	c3                   	ret    
c0015529:	90                   	nop

c001552a <Keyboard::~Keyboard()>:
c001552a:	83 ec 0c             	sub    esp,0xc
c001552d:	83 ec 0c             	sub    esp,0xc
c0015530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015534:	e8 cd ff ff ff       	call   c0015506 <Keyboard::~Keyboard()>
c0015539:	83 c4 10             	add    esp,0x10
c001553c:	83 ec 08             	sub    esp,0x8
c001553f:	68 5c 01 00 00       	push   0x15c
c0015544:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015548:	e8 24 cc ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c001554d:	83 c4 10             	add    esp,0x10
c0015550:	83 c4 0c             	add    esp,0xc
c0015553:	c3                   	ret    

c0015554 <LogicalDisk::close(int, int, void*)>:
c0015554:	83 c8 ff             	or     eax,0xffffffff
c0015557:	c3                   	ret    

c0015558 <LogicalDisk::~LogicalDisk()>:
c0015558:	83 ec 0c             	sub    esp,0xc
c001555b:	ba 84 79 02 c0       	mov    edx,0xc0027984
c0015560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015564:	89 10                	mov    DWORD PTR [eax],edx
c0015566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001556a:	83 ec 0c             	sub    esp,0xc
c001556d:	50                   	push   eax
c001556e:	e8 8b df ff ff       	call   c00134fe <Device::~Device()>
c0015573:	83 c4 10             	add    esp,0x10
c0015576:	90                   	nop
c0015577:	83 c4 0c             	add    esp,0xc
c001557a:	c3                   	ret    
c001557b:	90                   	nop

c001557c <LogicalDisk::~LogicalDisk()>:
c001557c:	83 ec 0c             	sub    esp,0xc
c001557f:	83 ec 0c             	sub    esp,0xc
c0015582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015586:	e8 cd ff ff ff       	call   c0015558 <LogicalDisk::~LogicalDisk()>
c001558b:	83 c4 10             	add    esp,0x10
c001558e:	83 ec 08             	sub    esp,0x8
c0015591:	68 74 01 00 00       	push   0x174
c0015596:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001559a:	e8 d2 cb ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c001559f:	83 c4 10             	add    esp,0x10
c00155a2:	83 c4 0c             	add    esp,0xc
c00155a5:	c3                   	ret    

c00155a6 <LogicalDisk::open(int, int, void*)>:
c00155a6:	83 ec 18             	sub    esp,0x18
c00155a9:	68 00 79 02 c0       	push   0xc0027900
c00155ae:	e8 3c 34 00 00       	call   c00189ef <Krnl::panic(char const*)>
c00155b3:	83 c8 ff             	or     eax,0xffffffff
c00155b6:	83 c4 1c             	add    esp,0x1c
c00155b9:	c3                   	ret    

c00155ba <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00155ba:	53                   	push   ebx
c00155bb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00155bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00155c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00155c7:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00155cd:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00155d3:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00155d9:	77 10                	ja     c00155eb <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00155db:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00155e1:	89 d3                	mov    ebx,edx
c00155e3:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00155e9:	72 05                	jb     c00155f0 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00155eb:	83 c8 ff             	or     eax,0xffffffff
c00155ee:	89 c2                	mov    edx,eax
c00155f0:	5b                   	pop    ebx
c00155f1:	c3                   	ret    

c00155f2 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00155f2:	56                   	push   esi
c00155f3:	83 c8 ff             	or     eax,0xffffffff
c00155f6:	53                   	push   ebx
c00155f7:	89 c2                	mov    edx,eax
c00155f9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00155fd:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015601:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015605:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001560b:	77 27                	ja     c0015634 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001560d:	89 d8                	mov    eax,ebx
c001560f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015615:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001561b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015620:	89 c2                	mov    edx,eax
c0015622:	73 10                	jae    c0015634 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015624:	89 c8                	mov    eax,ecx
c0015626:	89 da                	mov    edx,ebx
c0015628:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001562e:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015634:	5b                   	pop    ebx
c0015635:	5e                   	pop    esi
c0015636:	c3                   	ret    
c0015637:	90                   	nop

c0015638 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015638:	83 ec 1c             	sub    esp,0x1c
c001563b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001563f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015643:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015647:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001564b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001564f:	89 04 24             	mov    DWORD PTR [esp],eax
c0015652:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015656:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001565a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001565e:	83 ec 08             	sub    esp,0x8
c0015661:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015665:	50                   	push   eax
c0015666:	e8 e1 e1 ff ff       	call   c001384c <Device::Device(char const*)>
c001566b:	83 c4 10             	add    esp,0x10
c001566e:	ba 84 79 02 c0       	mov    edx,0xc0027984
c0015673:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015677:	89 10                	mov    DWORD PTR [eax],edx
c0015679:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001567d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015684:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015688:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001568f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015693:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001569d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00156a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00156a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00156a9:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00156af:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00156b5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00156b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00156bc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00156c0:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00156c6:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00156cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156d0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00156d4:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00156da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156de:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00156e8:	90                   	nop
c00156e9:	83 c4 1c             	add    esp,0x1c
c00156ec:	c3                   	ret    
c00156ed:	90                   	nop

c00156ee <LogicalDisk::assignDriveLetter()>:
c00156ee:	55                   	push   ebp
c00156ef:	57                   	push   edi
c00156f0:	56                   	push   esi
c00156f1:	53                   	push   ebx
c00156f2:	83 ec 14             	sub    esp,0x14
c00156f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00156f9:	8b 3d e0 a9 02 c0    	mov    edi,DWORD PTR ds:0xc002a9e0
c00156ff:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015705:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015709:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001570f:	8b 3d e4 a9 02 c0    	mov    edi,DWORD PTR ds:0xc002a9e4
c0015715:	3c 01                	cmp    al,0x1
c0015717:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001571b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001571f:	19 c0                	sbb    eax,eax
c0015721:	83 e0 02             	and    eax,0x2
c0015724:	83 c0 41             	add    eax,0x41
c0015727:	0f be e8             	movsx  ebp,al
c001572a:	3c 43                	cmp    al,0x43
c001572c:	75 10                	jne    c001573e <LogicalDisk::assignDriveLetter()+0x50>
c001572e:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015735:	75 5d                	jne    c0015794 <LogicalDisk::assignDriveLetter()+0xa6>
c0015737:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001573c:	75 56                	jne    c0015794 <LogicalDisk::assignDriveLetter()+0xa6>
c001573e:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015741:	ba 01 00 00 00       	mov    edx,0x1
c0015746:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001574a:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001574e:	d3 e2                	shl    edx,cl
c0015750:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015754:	89 d7                	mov    edi,edx
c0015756:	89 d6                	mov    esi,edx
c0015758:	c1 ff 1f             	sar    edi,0x1f
c001575b:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001575f:	21 f9                	and    ecx,edi
c0015761:	09 d1                	or     ecx,edx
c0015763:	75 2f                	jne    c0015794 <LogicalDisk::assignDriveLetter()+0xa6>
c0015765:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015769:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001576d:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015773:	09 f2                	or     edx,esi
c0015775:	89 15 e0 a9 02 c0    	mov    DWORD PTR ds:0xc002a9e0,edx
c001577b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001577f:	09 fa                	or     edx,edi
c0015781:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015785:	89 15 e4 a9 02 c0    	mov    DWORD PTR ds:0xc002a9e4,edx
c001578b:	89 1c bd 00 aa 02 c0 	mov    DWORD PTR [edi*4-0x3ffd5600],ebx
c0015792:	eb 08                	jmp    c001579c <LogicalDisk::assignDriveLetter()+0xae>
c0015794:	45                   	inc    ebp
c0015795:	40                   	inc    eax
c0015796:	3c 5b                	cmp    al,0x5b
c0015798:	75 90                	jne    c001572a <LogicalDisk::assignDriveLetter()+0x3c>
c001579a:	31 c0                	xor    eax,eax
c001579c:	83 c4 14             	add    esp,0x14
c001579f:	5b                   	pop    ebx
c00157a0:	5e                   	pop    esi
c00157a1:	5f                   	pop    edi
c00157a2:	5d                   	pop    ebp
c00157a3:	c3                   	ret    

c00157a4 <LogicalDisk::mount()>:
c00157a4:	56                   	push   esi
c00157a5:	53                   	push   ebx
c00157a6:	51                   	push   ecx
c00157a7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00157ab:	8b 1d 68 a5 02 c0    	mov    ebx,DWORD PTR ds:0xc002a568
c00157b1:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00157bb:	85 db                	test   ebx,ebx
c00157bd:	74 50                	je     c001580f <LogicalDisk::mount()+0x6b>
c00157bf:	e8 69 61 00 00       	call   c001b92d <getIRQNestingLevel()>
c00157c4:	52                   	push   edx
c00157c5:	52                   	push   edx
c00157c6:	50                   	push   eax
c00157c7:	68 24 79 02 c0       	push   0xc0027924
c00157cc:	e8 80 ca ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00157d1:	83 c4 0c             	add    esp,0xc
c00157d4:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00157db:	8b 13                	mov    edx,DWORD PTR [ebx]
c00157dd:	83 e8 41             	sub    eax,0x41
c00157e0:	50                   	push   eax
c00157e1:	56                   	push   esi
c00157e2:	53                   	push   ebx
c00157e3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00157e6:	83 c4 10             	add    esp,0x10
c00157e9:	84 c0                	test   al,al
c00157eb:	74 08                	je     c00157f5 <LogicalDisk::mount()+0x51>
c00157ed:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00157f3:	eb 1c                	jmp    c0015811 <LogicalDisk::mount()+0x6d>
c00157f5:	e8 33 61 00 00       	call   c001b92d <getIRQNestingLevel()>
c00157fa:	51                   	push   ecx
c00157fb:	51                   	push   ecx
c00157fc:	50                   	push   eax
c00157fd:	68 3f 79 02 c0       	push   0xc002793f
c0015802:	e8 4a ca ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0015807:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001580a:	83 c4 10             	add    esp,0x10
c001580d:	eb ac                	jmp    c00157bb <LogicalDisk::mount()+0x17>
c001580f:	31 c0                	xor    eax,eax
c0015811:	5a                   	pop    edx
c0015812:	5b                   	pop    ebx
c0015813:	5e                   	pop    esi
c0015814:	c3                   	ret    
c0015815:	90                   	nop

c0015816 <LogicalDisk::unmount()>:
c0015816:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001581a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015824:	c3                   	ret    
c0015825:	90                   	nop

c0015826 <LogicalDisk::unassignDriveLetter()>:
c0015826:	57                   	push   edi
c0015827:	56                   	push   esi
c0015828:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001582c:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015833:	84 c9                	test   cl,cl
c0015835:	75 0f                	jne    c0015846 <LogicalDisk::unassignDriveLetter()+0x20>
c0015837:	c7 44 24 0c 5a 79 02 c0 	mov    DWORD PTR [esp+0xc],0xc002795a
c001583f:	5e                   	pop    esi
c0015840:	5f                   	pop    edi
c0015841:	e9 a9 31 00 00       	jmp    c00189ef <Krnl::panic(char const*)>
c0015846:	83 e9 41             	sub    ecx,0x41
c0015849:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015850:	b8 01 00 00 00       	mov    eax,0x1
c0015855:	c7 04 8d 00 aa 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd5600],0x0
c0015860:	d3 e0                	shl    eax,cl
c0015862:	89 c7                	mov    edi,eax
c0015864:	f7 d0                	not    eax
c0015866:	c1 ff 1f             	sar    edi,0x1f
c0015869:	21 05 e0 a9 02 c0    	and    DWORD PTR ds:0xc002a9e0,eax
c001586f:	89 fe                	mov    esi,edi
c0015871:	f7 d6                	not    esi
c0015873:	21 35 e4 a9 02 c0    	and    DWORD PTR ds:0xc002a9e4,esi
c0015879:	5e                   	pop    esi
c001587a:	5f                   	pop    edi
c001587b:	c3                   	ret    

c001587c <LogicalDisk::read(unsigned long long, int, void*)>:
c001587c:	57                   	push   edi
c001587d:	56                   	push   esi
c001587e:	53                   	push   ebx
c001587f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015883:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015887:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001588b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001588f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015895:	77 41                	ja     c00158d8 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015897:	99                   	cdq    
c0015898:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001589e:	01 c8                	add    eax,ecx
c00158a0:	11 da                	adc    edx,ebx
c00158a2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00158a8:	19 d7                	sbb    edi,edx
c00158aa:	72 33                	jb     c00158df <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00158ac:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00158b2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00158b8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00158bc:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00158c0:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00158c6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00158cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00158d0:	5b                   	pop    ebx
c00158d1:	5e                   	pop    esi
c00158d2:	5f                   	pop    edi
c00158d3:	e9 9a 09 00 00       	jmp    c0016272 <VCache::read(unsigned long long, int, void*)>
c00158d8:	b8 05 00 00 00       	mov    eax,0x5
c00158dd:	eb 05                	jmp    c00158e4 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00158df:	b8 07 00 00 00       	mov    eax,0x7
c00158e4:	5b                   	pop    ebx
c00158e5:	5e                   	pop    esi
c00158e6:	5f                   	pop    edi
c00158e7:	c3                   	ret    

c00158e8 <LogicalDisk::write(unsigned long long, int, void*)>:
c00158e8:	57                   	push   edi
c00158e9:	56                   	push   esi
c00158ea:	53                   	push   ebx
c00158eb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00158ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00158f3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00158f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00158fb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015901:	77 41                	ja     c0015944 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015903:	99                   	cdq    
c0015904:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001590a:	01 c8                	add    eax,ecx
c001590c:	11 da                	adc    edx,ebx
c001590e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015914:	19 d7                	sbb    edi,edx
c0015916:	72 33                	jb     c001594b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015918:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001591e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015924:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015928:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001592c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015932:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015938:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001593c:	5b                   	pop    ebx
c001593d:	5e                   	pop    esi
c001593e:	5f                   	pop    edi
c001593f:	e9 4a 08 00 00       	jmp    c001618e <VCache::write(unsigned long long, int, void*)>
c0015944:	b8 05 00 00 00       	mov    eax,0x5
c0015949:	eb 05                	jmp    c0015950 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001594b:	b8 07 00 00 00       	mov    eax,0x7
c0015950:	5b                   	pop    ebx
c0015951:	5e                   	pop    esi
c0015952:	5f                   	pop    edi
c0015953:	c3                   	ret    

c0015954 <Mouse::Mouse(char const*)>:
c0015954:	83 ec 0c             	sub    esp,0xc
c0015957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001595b:	83 ec 08             	sub    esp,0x8
c001595e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015962:	50                   	push   eax
c0015963:	e8 e4 de ff ff       	call   c001384c <Device::Device(char const*)>
c0015968:	83 c4 10             	add    esp,0x10
c001596b:	ba b0 79 02 c0       	mov    edx,0xc00279b0
c0015970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015974:	89 10                	mov    DWORD PTR [eax],edx
c0015976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001597a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015984:	90                   	nop
c0015985:	83 c4 0c             	add    esp,0xc
c0015988:	c3                   	ret    
c0015989:	90                   	nop

c001598a <Mouse::~Mouse()>:
c001598a:	83 ec 0c             	sub    esp,0xc
c001598d:	ba b0 79 02 c0       	mov    edx,0xc00279b0
c0015992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015996:	89 10                	mov    DWORD PTR [eax],edx
c0015998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001599c:	83 ec 0c             	sub    esp,0xc
c001599f:	50                   	push   eax
c00159a0:	e8 59 db ff ff       	call   c00134fe <Device::~Device()>
c00159a5:	83 c4 10             	add    esp,0x10
c00159a8:	90                   	nop
c00159a9:	83 c4 0c             	add    esp,0xc
c00159ac:	c3                   	ret    
c00159ad:	90                   	nop

c00159ae <Mouse::~Mouse()>:
c00159ae:	83 ec 0c             	sub    esp,0xc
c00159b1:	83 ec 0c             	sub    esp,0xc
c00159b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159b8:	e8 cd ff ff ff       	call   c001598a <Mouse::~Mouse()>
c00159bd:	83 c4 10             	add    esp,0x10
c00159c0:	83 ec 08             	sub    esp,0x8
c00159c3:	68 58 01 00 00       	push   0x158
c00159c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159cc:	e8 a0 c7 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c00159d1:	83 c4 10             	add    esp,0x10
c00159d4:	83 c4 0c             	add    esp,0xc
c00159d7:	c3                   	ret    

c00159d8 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00159d8:	55                   	push   ebp
c00159d9:	57                   	push   edi
c00159da:	56                   	push   esi
c00159db:	53                   	push   ebx
c00159dc:	81 ec 28 01 00 00    	sub    esp,0x128
c00159e2:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00159e9:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00159f0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00159f7:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00159fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015a02:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015a06:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015a0d:	e8 2c df ff ff       	call   c001393e <Device::getName()>
c0015a12:	5a                   	pop    edx
c0015a13:	59                   	pop    ecx
c0015a14:	50                   	push   eax
c0015a15:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015a19:	55                   	push   ebp
c0015a1a:	e8 4e ad fe ff       	call   c000076d <strcpy>
c0015a1f:	5b                   	pop    ebx
c0015a20:	58                   	pop    eax
c0015a21:	68 d4 79 02 c0       	push   0xc00279d4
c0015a26:	55                   	push   ebp
c0015a27:	e8 f8 ad fe ff       	call   c0000824 <strcat>
c0015a2c:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015a33:	e8 2a c7 ff ff       	call   c0012162 <operator new(unsigned long)>
c0015a38:	83 c4 0c             	add    esp,0xc
c0015a3b:	89 c3                	mov    ebx,eax
c0015a3d:	57                   	push   edi
c0015a3e:	56                   	push   esi
c0015a3f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015a43:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015a47:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0015a4e:	55                   	push   ebp
c0015a4f:	50                   	push   eax
c0015a50:	e8 e3 fb ff ff       	call   c0015638 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0015a55:	83 c4 14             	add    esp,0x14
c0015a58:	53                   	push   ebx
c0015a59:	e8 90 fc ff ff       	call   c00156ee <LogicalDisk::assignDriveLetter()>
c0015a5e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015a61:	e8 3e fd ff ff       	call   c00157a4 <LogicalDisk::mount()>
c0015a66:	58                   	pop    eax
c0015a67:	5a                   	pop    edx
c0015a68:	53                   	push   ebx
c0015a69:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015a70:	e8 e7 db ff ff       	call   c001365c <Device::addChild(Device*)>
c0015a75:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015a7b:	5b                   	pop    ebx
c0015a7c:	5e                   	pop    esi
c0015a7d:	5f                   	pop    edi
c0015a7e:	5d                   	pop    ebp
c0015a7f:	c3                   	ret    

c0015a80 <createPartitionsForDisk(PhysicalDisk*)>:
c0015a80:	55                   	push   ebp
c0015a81:	57                   	push   edi
c0015a82:	56                   	push   esi
c0015a83:	53                   	push   ebx
c0015a84:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0015a8a:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0015a91:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015a97:	3d 00 02 00 00       	cmp    eax,0x200
c0015a9c:	74 27                	je     c0015ac5 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0015a9e:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0015aa4:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0015aaa:	83 ec 10             	sub    esp,0x10
c0015aad:	0f a4 f7 0a          	shld   edi,esi,0xa
c0015ab1:	99                   	cdq    
c0015ab2:	c1 e6 0a             	shl    esi,0xa
c0015ab5:	52                   	push   edx
c0015ab6:	89 fd                	mov    ebp,edi
c0015ab8:	50                   	push   eax
c0015ab9:	55                   	push   ebp
c0015aba:	56                   	push   esi
c0015abb:	e8 9c d8 00 00       	call   c002335c <__udivdi3>
c0015ac0:	e9 b1 00 00 00       	jmp    c0015b76 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015ac5:	83 ec 0c             	sub    esp,0xc
c0015ac8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015aca:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0015ace:	56                   	push   esi
c0015acf:	6a 01                	push   0x1
c0015ad1:	6a 00                	push   0x0
c0015ad3:	6a 00                	push   0x0
c0015ad5:	53                   	push   ebx
c0015ad6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015ad9:	83 c4 20             	add    esp,0x20
c0015adc:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0015ae4:	75 0a                	jne    c0015af0 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0015ae6:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0015aee:	74 2c                	je     c0015b1c <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0015af0:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015af6:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015afc:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015b02:	83 ec 10             	sub    esp,0x10
c0015b05:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015b09:	89 f7                	mov    edi,esi
c0015b0b:	c1 e0 0a             	shl    eax,0xa
c0015b0e:	c1 ff 1f             	sar    edi,0x1f
c0015b11:	57                   	push   edi
c0015b12:	56                   	push   esi
c0015b13:	52                   	push   edx
c0015b14:	50                   	push   eax
c0015b15:	e8 42 d8 00 00       	call   c002335c <__udivdi3>
c0015b1a:	eb 5a                	jmp    c0015b76 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015b1c:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0015b23:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0015b2a:	83 e1 7f             	and    ecx,0x7f
c0015b2d:	83 e0 7f             	and    eax,0x7f
c0015b30:	01 c1                	add    ecx,eax
c0015b32:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0015b39:	83 e0 7f             	and    eax,0x7f
c0015b3c:	01 c1                	add    ecx,eax
c0015b3e:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0015b45:	83 e0 7f             	and    eax,0x7f
c0015b48:	00 c1                	add    cl,al
c0015b4a:	74 41                	je     c0015b8d <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0015b4c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015b52:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015b58:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015b5e:	83 ec 10             	sub    esp,0x10
c0015b61:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015b65:	89 f7                	mov    edi,esi
c0015b67:	c1 e0 0a             	shl    eax,0xa
c0015b6a:	c1 ff 1f             	sar    edi,0x1f
c0015b6d:	57                   	push   edi
c0015b6e:	56                   	push   esi
c0015b6f:	52                   	push   edx
c0015b70:	50                   	push   eax
c0015b71:	e8 e6 d7 00 00       	call   c002335c <__udivdi3>
c0015b76:	83 c4 14             	add    esp,0x14
c0015b79:	52                   	push   edx
c0015b7a:	50                   	push   eax
c0015b7b:	6a 00                	push   0x0
c0015b7d:	6a 00                	push   0x0
c0015b7f:	53                   	push   ebx
c0015b80:	e8 53 fe ff ff       	call   c00159d8 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015b85:	83 c4 20             	add    esp,0x20
c0015b88:	e9 79 01 00 00       	jmp    c0015d06 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0015b8d:	89 f0                	mov    eax,esi
c0015b8f:	31 f6                	xor    esi,esi
c0015b91:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0015b98:	75 02                	jne    c0015b9c <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0015b9a:	89 f1                	mov    ecx,esi
c0015b9c:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0015ba3:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0015baa:	c1 e2 08             	shl    edx,0x8
c0015bad:	c1 e7 10             	shl    edi,0x10
c0015bb0:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0015bb8:	09 fa                	or     edx,edi
c0015bba:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0015bc2:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0015bc9:	83 c0 10             	add    eax,0x10
c0015bcc:	09 fa                	or     edx,edi
c0015bce:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0015bd5:	c1 e7 18             	shl    edi,0x18
c0015bd8:	09 fa                	or     edx,edi
c0015bda:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0015be1:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0015be5:	c1 e7 10             	shl    edi,0x10
c0015be8:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0015bef:	c1 e2 08             	shl    edx,0x8
c0015bf2:	09 fa                	or     edx,edi
c0015bf4:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0015bfb:	09 fa                	or     edx,edi
c0015bfd:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0015c04:	c1 e7 18             	shl    edi,0x18
c0015c07:	09 fa                	or     edx,edi
c0015c09:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0015c0d:	46                   	inc    esi
c0015c0e:	83 fe 04             	cmp    esi,0x4
c0015c11:	0f 85 7a ff ff ff    	jne    c0015b91 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0015c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c1b:	83 f0 01             	xor    eax,0x1
c0015c1e:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0015c22:	75 57                	jne    c0015c7b <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015c24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c28:	83 f0 01             	xor    eax,0x1
c0015c2b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0015c2f:	75 4a                	jne    c0015c7b <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015c31:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0015c35:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015c3d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015c45:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015c4b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015c51:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015c57:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015c5b:	89 f7                	mov    edi,esi
c0015c5d:	c1 e0 0a             	shl    eax,0xa
c0015c60:	c1 ff 1f             	sar    edi,0x1f
c0015c63:	57                   	push   edi
c0015c64:	56                   	push   esi
c0015c65:	52                   	push   edx
c0015c66:	50                   	push   eax
c0015c67:	e8 f0 d6 00 00       	call   c002335c <__udivdi3>
c0015c6c:	83 c4 10             	add    esp,0x10
c0015c6f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015c73:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015c77:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0015c7b:	84 c9                	test   cl,cl
c0015c7d:	74 53                	je     c0015cd2 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0015c7f:	0f b6 c9             	movzx  ecx,cl
c0015c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c86:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015c8a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015c8e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0015c92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015c96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015c9a:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0015c9e:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0015ca2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015ca6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015caa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015cae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015cb2:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0015cb6:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0015cba:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0015cbe:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0015cc2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015cc6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015cca:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0015cce:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0015cd2:	31 ed                	xor    ebp,ebp
c0015cd4:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0015cd8:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0015cdc:	89 f8                	mov    eax,edi
c0015cde:	09 f0                	or     eax,esi
c0015ce0:	74 1e                	je     c0015d00 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0015ce2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0015ce6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0015cea:	89 d1                	mov    ecx,edx
c0015cec:	09 c1                	or     ecx,eax
c0015cee:	74 10                	je     c0015d00 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0015cf0:	83 ec 0c             	sub    esp,0xc
c0015cf3:	57                   	push   edi
c0015cf4:	56                   	push   esi
c0015cf5:	52                   	push   edx
c0015cf6:	50                   	push   eax
c0015cf7:	53                   	push   ebx
c0015cf8:	e8 db fc ff ff       	call   c00159d8 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015cfd:	83 c4 20             	add    esp,0x20
c0015d00:	45                   	inc    ebp
c0015d01:	83 fd 04             	cmp    ebp,0x4
c0015d04:	75 ce                	jne    c0015cd4 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0015d06:	81 c4 5c 02 00 00    	add    esp,0x25c
c0015d0c:	5b                   	pop    ebx
c0015d0d:	5e                   	pop    esi
c0015d0e:	5f                   	pop    edi
c0015d0f:	5d                   	pop    ebp
c0015d10:	c3                   	ret    
c0015d11:	90                   	nop

c0015d12 <Timer::Timer(char const*)>:
c0015d12:	83 ec 0c             	sub    esp,0xc
c0015d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d19:	83 ec 08             	sub    esp,0x8
c0015d1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d20:	50                   	push   eax
c0015d21:	e8 26 db ff ff       	call   c001384c <Device::Device(char const*)>
c0015d26:	83 c4 10             	add    esp,0x10
c0015d29:	ba e8 79 02 c0       	mov    edx,0xc00279e8
c0015d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d32:	89 10                	mov    DWORD PTR [eax],edx
c0015d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d38:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0015d42:	90                   	nop
c0015d43:	83 c4 0c             	add    esp,0xc
c0015d46:	c3                   	ret    
c0015d47:	90                   	nop

c0015d48 <Timer::~Timer()>:
c0015d48:	83 ec 0c             	sub    esp,0xc
c0015d4b:	ba e8 79 02 c0       	mov    edx,0xc00279e8
c0015d50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d54:	89 10                	mov    DWORD PTR [eax],edx
c0015d56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d5a:	83 ec 0c             	sub    esp,0xc
c0015d5d:	50                   	push   eax
c0015d5e:	e8 9b d7 ff ff       	call   c00134fe <Device::~Device()>
c0015d63:	83 c4 10             	add    esp,0x10
c0015d66:	90                   	nop
c0015d67:	83 c4 0c             	add    esp,0xc
c0015d6a:	c3                   	ret    
c0015d6b:	90                   	nop

c0015d6c <Timer::~Timer()>:
c0015d6c:	83 ec 0c             	sub    esp,0xc
c0015d6f:	83 ec 0c             	sub    esp,0xc
c0015d72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d76:	e8 cd ff ff ff       	call   c0015d48 <Timer::~Timer()>
c0015d7b:	83 c4 10             	add    esp,0x10
c0015d7e:	83 ec 08             	sub    esp,0x8
c0015d81:	68 5c 01 00 00       	push   0x15c
c0015d86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d8a:	e8 e2 c3 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0015d8f:	83 c4 10             	add    esp,0x10
c0015d92:	83 c4 0c             	add    esp,0xc
c0015d95:	c3                   	ret    

c0015d96 <Timer::read()>:
c0015d96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d9a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015da0:	c3                   	ret    

c0015da1 <timerHandler(unsigned long long)>:
c0015da1:	55                   	push   ebp
c0015da2:	57                   	push   edi
c0015da3:	56                   	push   esi
c0015da4:	53                   	push   ebx
c0015da5:	83 ec 0c             	sub    esp,0xc
c0015da8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015dac:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0015db0:	01 35 70 aa 02 c0    	add    DWORD PTR ds:0xc002aa70,esi
c0015db6:	11 3d 74 aa 02 c0    	adc    DWORD PTR ds:0xc002aa74,edi
c0015dbc:	80 3d 0d a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a40d,0x0
c0015dc3:	0f 84 07 01 00 00    	je     c0015ed0 <timerHandler(unsigned long long)+0x12f>
c0015dc9:	e8 9b 5b 00 00       	call   c001b969 <lockStuff()>
c0015dce:	83 ec 0c             	sub    esp,0xc
c0015dd1:	68 3c b8 02 c0       	push   0xc002b83c
c0015dd6:	e8 95 f6 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015ddb:	c7 04 24 3c b8 02 c0 	mov    DWORD PTR [esp],0xc002b83c
c0015de2:	89 c3                	mov    ebx,eax
c0015de4:	e8 8f f6 00 00       	call   c0025478 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015de9:	83 c4 10             	add    esp,0x10
c0015dec:	84 c0                	test   al,al
c0015dee:	74 60                	je     c0015e50 <timerHandler(unsigned long long)+0xaf>
c0015df0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015df6:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0015df9:	85 c0                	test   eax,eax
c0015dfb:	0f 85 91 00 00 00    	jne    c0015e92 <timerHandler(unsigned long long)+0xf1>
c0015e01:	e9 be 00 00 00       	jmp    c0015ec4 <timerHandler(unsigned long long)+0x123>
c0015e06:	83 ec 0c             	sub    esp,0xc
c0015e09:	55                   	push   ebp
c0015e0a:	e8 43 61 00 00       	call   c001bf52 <unblockTask(ThreadControlBlock*)>
c0015e0f:	83 c4 10             	add    esp,0x10
c0015e12:	39 eb                	cmp    ebx,ebp
c0015e14:	75 12                	jne    c0015e28 <timerHandler(unsigned long long)+0x87>
c0015e16:	83 ec 0c             	sub    esp,0xc
c0015e19:	68 3c b8 02 c0       	push   0xc002b83c
c0015e1e:	e8 4d f6 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e23:	89 c3                	mov    ebx,eax
c0015e25:	83 c4 10             	add    esp,0x10
c0015e28:	83 ec 0c             	sub    esp,0xc
c0015e2b:	68 3c b8 02 c0       	push   0xc002b83c
c0015e30:	e8 43 f6 00 00       	call   c0025478 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015e35:	83 c4 10             	add    esp,0x10
c0015e38:	84 c0                	test   al,al
c0015e3a:	75 b4                	jne    c0015df0 <timerHandler(unsigned long long)+0x4f>
c0015e3c:	83 ec 0c             	sub    esp,0xc
c0015e3f:	68 3c b8 02 c0       	push   0xc002b83c
c0015e44:	e8 27 f6 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e49:	83 c4 10             	add    esp,0x10
c0015e4c:	39 d8                	cmp    eax,ebx
c0015e4e:	74 a0                	je     c0015df0 <timerHandler(unsigned long long)+0x4f>
c0015e50:	83 ec 0c             	sub    esp,0xc
c0015e53:	68 3c b8 02 c0       	push   0xc002b83c
c0015e58:	e8 13 f6 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e5d:	c7 04 24 3c b8 02 c0 	mov    DWORD PTR [esp],0xc002b83c
c0015e64:	89 c5                	mov    ebp,eax
c0015e66:	e8 29 f6 00 00       	call   c0025494 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015e6b:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0015e6e:	83 c4 10             	add    esp,0x10
c0015e71:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0015e74:	39 15 70 aa 02 c0    	cmp    DWORD PTR ds:0xc002aa70,edx
c0015e7a:	a1 74 aa 02 c0       	mov    eax,ds:0xc002aa74
c0015e7f:	19 c8                	sbb    eax,ecx
c0015e81:	73 83                	jae    c0015e06 <timerHandler(unsigned long long)+0x65>
c0015e83:	50                   	push   eax
c0015e84:	50                   	push   eax
c0015e85:	55                   	push   ebp
c0015e86:	68 3c b8 02 c0       	push   0xc002b83c
c0015e8b:	e8 b2 f6 00 00       	call   c0025542 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015e90:	eb 93                	jmp    c0015e25 <timerHandler(unsigned long long)+0x84>
c0015e92:	80 3d 0c a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a40c,0x0
c0015e99:	74 29                	je     c0015ec4 <timerHandler(unsigned long long)+0x123>
c0015e9b:	39 c6                	cmp    esi,eax
c0015e9d:	bb 00 00 00 00       	mov    ebx,0x0
c0015ea2:	19 df                	sbb    edi,ebx
c0015ea4:	72 19                	jb     c0015ebf <timerHandler(unsigned long long)+0x11e>
c0015ea6:	e8 97 5a 00 00       	call   c001b942 <lockScheduler()>
c0015eab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015eb0:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0015eb3:	e8 be 5d 00 00       	call   c001bc76 <schedule()>
c0015eb8:	e8 87 5a 00 00       	call   c001b944 <unlockScheduler()>
c0015ebd:	eb 05                	jmp    c0015ec4 <timerHandler(unsigned long long)+0x123>
c0015ebf:	29 f0                	sub    eax,esi
c0015ec1:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0015ec4:	83 c4 0c             	add    esp,0xc
c0015ec7:	5b                   	pop    ebx
c0015ec8:	5e                   	pop    esi
c0015ec9:	5f                   	pop    edi
c0015eca:	5d                   	pop    ebp
c0015ecb:	e9 2b 5e 00 00       	jmp    c001bcfb <unlockStuff()>
c0015ed0:	83 c4 0c             	add    esp,0xc
c0015ed3:	5b                   	pop    ebx
c0015ed4:	5e                   	pop    esi
c0015ed5:	5f                   	pop    edi
c0015ed6:	5d                   	pop    ebp
c0015ed7:	c3                   	ret    

c0015ed8 <setupTimer(int)>:
c0015ed8:	57                   	push   edi
c0015ed9:	56                   	push   esi
c0015eda:	53                   	push   ebx
c0015edb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015edf:	e8 84 19 00 00       	call   c0017868 <CPU::getNumber()>
c0015ee4:	85 c0                	test   eax,eax
c0015ee6:	74 32                	je     c0015f1a <setupTimer(int)+0x42>
c0015ee8:	83 ec 0c             	sub    esp,0xc
c0015eeb:	68 60 01 00 00       	push   0x160
c0015ef0:	e8 6d c2 ff ff       	call   c0012162 <operator new(unsigned long)>
c0015ef5:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ef8:	89 c3                	mov    ebx,eax
c0015efa:	e8 fd ce 00 00       	call   c0022dfc <APICTimer::APICTimer()>
c0015eff:	6a 00                	push   0x0
c0015f01:	6a 00                	push   0x0
c0015f03:	56                   	push   esi
c0015f04:	53                   	push   ebx
c0015f05:	e8 fa cd 00 00       	call   c0022d04 <APICTimer::open(int, int, void*)>
c0015f0a:	83 c4 20             	add    esp,0x20
c0015f0d:	e8 5a 19 00 00       	call   c001786c <CPU::current()>
c0015f12:	56                   	push   esi
c0015f13:	56                   	push   esi
c0015f14:	53                   	push   ebx
c0015f15:	e9 96 00 00 00       	jmp    c0015fb0 <setupTimer(int)+0xd8>
c0015f1a:	e8 4d 19 00 00       	call   c001786c <CPU::current()>
c0015f1f:	83 ec 0c             	sub    esp,0xc
c0015f22:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0015f28:	e8 11 da ff ff       	call   c001393e <Device::getName()>
c0015f2d:	83 c4 10             	add    esp,0x10
c0015f30:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0015f33:	0f 85 87 00 00 00    	jne    c0015fc0 <setupTimer(int)+0xe8>
c0015f39:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0015f3e:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0015f45:	74 79                	je     c0015fc0 <setupTimer(int)+0xe8>
c0015f47:	83 ec 0c             	sub    esp,0xc
c0015f4a:	68 5c 01 00 00       	push   0x15c
c0015f4f:	e8 0e c2 ff ff       	call   c0012162 <operator new(unsigned long)>
c0015f54:	89 04 24             	mov    DWORD PTR [esp],eax
c0015f57:	89 c3                	mov    ebx,eax
c0015f59:	e8 ee cf 00 00       	call   c0022f4c <PIT::PIT()>
c0015f5e:	59                   	pop    ecx
c0015f5f:	5f                   	pop    edi
c0015f60:	53                   	push   ebx
c0015f61:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c0015f67:	e8 f0 d6 ff ff       	call   c001365c <Device::addChild(Device*)>
c0015f6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f6e:	6a 00                	push   0x0
c0015f70:	6a 00                	push   0x0
c0015f72:	56                   	push   esi
c0015f73:	53                   	push   ebx
c0015f74:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f77:	83 c4 14             	add    esp,0x14
c0015f7a:	68 60 01 00 00       	push   0x160
c0015f7f:	e8 de c1 ff ff       	call   c0012162 <operator new(unsigned long)>
c0015f84:	89 04 24             	mov    DWORD PTR [esp],eax
c0015f87:	89 c7                	mov    edi,eax
c0015f89:	e8 6e ce 00 00       	call   c0022dfc <APICTimer::APICTimer()>
c0015f8e:	6a 00                	push   0x0
c0015f90:	6a 00                	push   0x0
c0015f92:	56                   	push   esi
c0015f93:	57                   	push   edi
c0015f94:	e8 6b cd 00 00       	call   c0022d04 <APICTimer::open(int, int, void*)>
c0015f99:	83 c4 20             	add    esp,0x20
c0015f9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f9e:	6a 00                	push   0x0
c0015fa0:	6a 00                	push   0x0
c0015fa2:	6a 00                	push   0x0
c0015fa4:	53                   	push   ebx
c0015fa5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015fa8:	e8 bf 18 00 00       	call   c001786c <CPU::current()>
c0015fad:	5a                   	pop    edx
c0015fae:	59                   	pop    ecx
c0015faf:	57                   	push   edi
c0015fb0:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0015fb6:	e8 a1 d6 ff ff       	call   c001365c <Device::addChild(Device*)>
c0015fbb:	83 c4 10             	add    esp,0x10
c0015fbe:	eb 33                	jmp    c0015ff3 <setupTimer(int)+0x11b>
c0015fc0:	83 ec 0c             	sub    esp,0xc
c0015fc3:	68 5c 01 00 00       	push   0x15c
c0015fc8:	e8 95 c1 ff ff       	call   c0012162 <operator new(unsigned long)>
c0015fcd:	89 04 24             	mov    DWORD PTR [esp],eax
c0015fd0:	89 c3                	mov    ebx,eax
c0015fd2:	e8 75 cf 00 00       	call   c0022f4c <PIT::PIT()>
c0015fd7:	58                   	pop    eax
c0015fd8:	5a                   	pop    edx
c0015fd9:	53                   	push   ebx
c0015fda:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c0015fe0:	e8 77 d6 ff ff       	call   c001365c <Device::addChild(Device*)>
c0015fe5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fe7:	6a 00                	push   0x0
c0015fe9:	6a 00                	push   0x0
c0015feb:	56                   	push   esi
c0015fec:	53                   	push   ebx
c0015fed:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015ff0:	83 c4 20             	add    esp,0x20
c0015ff3:	89 d8                	mov    eax,ebx
c0015ff5:	5b                   	pop    ebx
c0015ff6:	5e                   	pop    esi
c0015ff7:	5f                   	pop    edi
c0015ff8:	c3                   	ret    
c0015ff9:	90                   	nop

c0015ffa <VCache::VCache(PhysicalDisk*)>:
c0015ffa:	53                   	push   ebx
c0015ffb:	83 ec 08             	sub    esp,0x8
c0015ffe:	ba 18 7a 02 c0       	mov    edx,0xc0027a18
c0016003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016007:	89 10                	mov    DWORD PTR [eax],edx
c0016009:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001600d:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016018:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001601f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016023:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001602a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016035:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001603c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016043:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016047:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001604e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016052:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016056:	83 ec 0c             	sub    esp,0xc
c0016059:	6a 10                	push   0x10
c001605b:	e8 02 c1 ff ff       	call   c0012162 <operator new(unsigned long)>
c0016060:	83 c4 10             	add    esp,0x10
c0016063:	89 c3                	mov    ebx,eax
c0016065:	83 ec 0c             	sub    esp,0xc
c0016068:	53                   	push   ebx
c0016069:	e8 ec 59 00 00       	call   c001ba5a <Mutex::Mutex()>
c001606e:	83 c4 10             	add    esp,0x10
c0016071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016075:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001607c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016080:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016083:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016087:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001608e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016092:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001609c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001609f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00160a3:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00160a9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00160af:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00160b3:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00160b6:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00160b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160bd:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00160c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00160c5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00160cb:	c1 e0 06             	shl    eax,0x6
c00160ce:	83 ec 0c             	sub    esp,0xc
c00160d1:	50                   	push   eax
c00160d2:	e8 71 90 ff ff       	call   c000f148 <malloc>
c00160d7:	83 c4 10             	add    esp,0x10
c00160da:	89 c2                	mov    edx,eax
c00160dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160e0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00160e3:	90                   	nop
c00160e4:	83 c4 08             	add    esp,0x8
c00160e7:	5b                   	pop    ebx
c00160e8:	c3                   	ret    
c00160e9:	90                   	nop

c00160ea <VCache::writeWriteBuffer()>:
c00160ea:	53                   	push   ebx
c00160eb:	83 ec 14             	sub    esp,0x14
c00160ee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00160f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00160f5:	8b 10                	mov    edx,DWORD PTR [eax]
c00160f7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00160fa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00160fd:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016100:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016103:	50                   	push   eax
c0016104:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016107:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001610e:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016115:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016119:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016120:	83 c4 28             	add    esp,0x28
c0016123:	5b                   	pop    ebx
c0016124:	c3                   	ret    
c0016125:	90                   	nop

c0016126 <VCache::~VCache()>:
c0016126:	83 ec 0c             	sub    esp,0xc
c0016129:	ba 18 7a 02 c0       	mov    edx,0xc0027a18
c001612e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016132:	89 10                	mov    DWORD PTR [eax],edx
c0016134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016138:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001613b:	84 c0                	test   al,al
c001613d:	74 0f                	je     c001614e <VCache::~VCache()+0x28>
c001613f:	83 ec 0c             	sub    esp,0xc
c0016142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016146:	e8 9f ff ff ff       	call   c00160ea <VCache::writeWriteBuffer()>
c001614b:	83 c4 10             	add    esp,0x10
c001614e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016152:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016155:	83 ec 0c             	sub    esp,0xc
c0016158:	50                   	push   eax
c0016159:	e8 fa 8f ff ff       	call   c000f158 <free>
c001615e:	83 c4 10             	add    esp,0x10
c0016161:	90                   	nop
c0016162:	83 c4 0c             	add    esp,0xc
c0016165:	c3                   	ret    

c0016166 <VCache::~VCache()>:
c0016166:	83 ec 0c             	sub    esp,0xc
c0016169:	83 ec 0c             	sub    esp,0xc
c001616c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016170:	e8 b1 ff ff ff       	call   c0016126 <VCache::~VCache()>
c0016175:	83 c4 10             	add    esp,0x10
c0016178:	83 ec 08             	sub    esp,0x8
c001617b:	6a 30                	push   0x30
c001617d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016181:	e8 eb bf ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0016186:	83 c4 10             	add    esp,0x10
c0016189:	83 c4 0c             	add    esp,0xc
c001618c:	c3                   	ret    
c001618d:	90                   	nop

c001618e <VCache::write(unsigned long long, int, void*)>:
c001618e:	55                   	push   ebp
c001618f:	57                   	push   edi
c0016190:	56                   	push   esi
c0016191:	53                   	push   ebx
c0016192:	83 ec 28             	sub    esp,0x28
c0016195:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016199:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001619d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00161a1:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00161a5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00161a8:	e8 0f 5d 00 00       	call   c001bebc <Semaphore::acquire()>
c00161ad:	83 c4 10             	add    esp,0x10
c00161b0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00161b4:	74 66                	je     c001621c <VCache::write(unsigned long long, int, void*)+0x8e>
c00161b6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00161b9:	99                   	cdq    
c00161ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00161be:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00161c1:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00161c4:	89 c1                	mov    ecx,eax
c00161c6:	89 d0                	mov    eax,edx
c00161c8:	31 f1                	xor    ecx,esi
c00161ca:	31 f8                	xor    eax,edi
c00161cc:	89 ca                	mov    edx,ecx
c00161ce:	09 c2                	or     edx,eax
c00161d0:	75 3e                	jne    c0016210 <VCache::write(unsigned long long, int, void*)+0x82>
c00161d2:	83 fd 01             	cmp    ebp,0x1
c00161d5:	75 39                	jne    c0016210 <VCache::write(unsigned long long, int, void*)+0x82>
c00161d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00161da:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00161e0:	51                   	push   ecx
c00161e1:	50                   	push   eax
c00161e2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00161e6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00161ea:	0f af c8             	imul   ecx,eax
c00161ed:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00161f0:	51                   	push   ecx
c00161f1:	e8 a2 a4 fe ff       	call   c0000698 <memcpy>
c00161f6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00161f9:	83 c4 10             	add    esp,0x10
c00161fc:	40                   	inc    eax
c00161fd:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016200:	83 f8 40             	cmp    eax,0x40
c0016203:	75 57                	jne    c001625c <VCache::write(unsigned long long, int, void*)+0xce>
c0016205:	83 ec 0c             	sub    esp,0xc
c0016208:	53                   	push   ebx
c0016209:	e8 dc fe ff ff       	call   c00160ea <VCache::writeWriteBuffer()>
c001620e:	eb 34                	jmp    c0016244 <VCache::write(unsigned long long, int, void*)+0xb6>
c0016210:	83 ec 0c             	sub    esp,0xc
c0016213:	53                   	push   ebx
c0016214:	e8 d1 fe ff ff       	call   c00160ea <VCache::writeWriteBuffer()>
c0016219:	83 c4 10             	add    esp,0x10
c001621c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001621f:	83 fd 3f             	cmp    ebp,0x3f
c0016222:	7f 25                	jg     c0016249 <VCache::write(unsigned long long, int, void*)+0xbb>
c0016224:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016227:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001622a:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001622d:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016231:	52                   	push   edx
c0016232:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016238:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001623c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001623f:	e8 54 a4 fe ff       	call   c0000698 <memcpy>
c0016244:	83 c4 10             	add    esp,0x10
c0016247:	eb 13                	jmp    c001625c <VCache::write(unsigned long long, int, void*)+0xce>
c0016249:	83 ec 0c             	sub    esp,0xc
c001624c:	8b 10                	mov    edx,DWORD PTR [eax]
c001624e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016252:	55                   	push   ebp
c0016253:	57                   	push   edi
c0016254:	56                   	push   esi
c0016255:	50                   	push   eax
c0016256:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016259:	83 c4 20             	add    esp,0x20
c001625c:	83 ec 0c             	sub    esp,0xc
c001625f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016262:	e8 dd 61 00 00       	call   c001c444 <Semaphore::release()>
c0016267:	83 c4 2c             	add    esp,0x2c
c001626a:	31 c0                	xor    eax,eax
c001626c:	5b                   	pop    ebx
c001626d:	5e                   	pop    esi
c001626e:	5f                   	pop    edi
c001626f:	5d                   	pop    ebp
c0016270:	c3                   	ret    
c0016271:	90                   	nop

c0016272 <VCache::read(unsigned long long, int, void*)>:
c0016272:	57                   	push   edi
c0016273:	56                   	push   esi
c0016274:	53                   	push   ebx
c0016275:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016279:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001627d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016281:	83 ec 0c             	sub    esp,0xc
c0016284:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016287:	e8 30 5c 00 00       	call   c001bebc <Semaphore::acquire()>
c001628c:	83 c4 10             	add    esp,0x10
c001628f:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016293:	74 0c                	je     c00162a1 <VCache::read(unsigned long long, int, void*)+0x2f>
c0016295:	83 ec 0c             	sub    esp,0xc
c0016298:	53                   	push   ebx
c0016299:	e8 4c fe ff ff       	call   c00160ea <VCache::writeWriteBuffer()>
c001629e:	83 c4 10             	add    esp,0x10
c00162a1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00162a4:	83 ec 0c             	sub    esp,0xc
c00162a7:	8b 10                	mov    edx,DWORD PTR [eax]
c00162a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162b1:	57                   	push   edi
c00162b2:	56                   	push   esi
c00162b3:	50                   	push   eax
c00162b4:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00162b7:	83 c4 14             	add    esp,0x14
c00162ba:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00162bd:	e8 82 61 00 00       	call   c001c444 <Semaphore::release()>
c00162c2:	83 c4 10             	add    esp,0x10
c00162c5:	31 c0                	xor    eax,eax
c00162c7:	5b                   	pop    ebx
c00162c8:	5e                   	pop    esi
c00162c9:	5f                   	pop    edi
c00162ca:	c3                   	ret    
c00162cb:	90                   	nop

c00162cc <Video::putrect(int, int, int, int, unsigned int)>:
c00162cc:	55                   	push   ebp
c00162cd:	57                   	push   edi
c00162ce:	56                   	push   esi
c00162cf:	53                   	push   ebx
c00162d0:	83 ec 1c             	sub    esp,0x1c
c00162d3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00162d7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00162db:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00162df:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00162e3:	01 e8                	add    eax,ebp
c00162e5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00162e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00162ed:	01 df                	add    edi,ebx
c00162ef:	39 fb                	cmp    ebx,edi
c00162f1:	7d 1b                	jge    c001630e <Video::putrect(int, int, int, int, unsigned int)+0x42>
c00162f3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00162f7:	7d 12                	jge    c001630b <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c00162f9:	8b 16                	mov    edx,DWORD PTR [esi]
c00162fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00162ff:	53                   	push   ebx
c0016300:	55                   	push   ebp
c0016301:	45                   	inc    ebp
c0016302:	56                   	push   esi
c0016303:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016306:	83 c4 10             	add    esp,0x10
c0016309:	eb e8                	jmp    c00162f3 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c001630b:	43                   	inc    ebx
c001630c:	eb e1                	jmp    c00162ef <Video::putrect(int, int, int, int, unsigned int)+0x23>
c001630e:	83 c4 1c             	add    esp,0x1c
c0016311:	5b                   	pop    ebx
c0016312:	5e                   	pop    esi
c0016313:	5f                   	pop    edi
c0016314:	5d                   	pop    ebp
c0016315:	c3                   	ret    

c0016316 <Video::blit(unsigned int*, int, int, int, int)>:
c0016316:	55                   	push   ebp
c0016317:	57                   	push   edi
c0016318:	56                   	push   esi
c0016319:	53                   	push   ebx
c001631a:	83 ec 1c             	sub    esp,0x1c
c001631d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016321:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016325:	85 c0                	test   eax,eax
c0016327:	79 02                	jns    c001632b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016329:	31 c0                	xor    eax,eax
c001632b:	c1 e0 02             	shl    eax,0x2
c001632e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016332:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016336:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001633a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001633e:	39 d8                	cmp    eax,ebx
c0016340:	7e 49                	jle    c001638b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016342:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016348:	7c 41                	jl     c001638b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001634a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001634e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016352:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016356:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001635a:	39 f9                	cmp    ecx,edi
c001635c:	7e 22                	jle    c0016380 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001635e:	83 c5 04             	add    ebp,0x4
c0016361:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016367:	7c 14                	jl     c001637d <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016369:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001636b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001636e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016372:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016376:	56                   	push   esi
c0016377:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001637a:	83 c4 10             	add    esp,0x10
c001637d:	47                   	inc    edi
c001637e:	eb d2                	jmp    c0016352 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016380:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016384:	43                   	inc    ebx
c0016385:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016389:	eb ab                	jmp    c0016336 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001638b:	83 c4 1c             	add    esp,0x1c
c001638e:	5b                   	pop    ebx
c001638f:	5e                   	pop    esi
c0016390:	5f                   	pop    edi
c0016391:	5d                   	pop    ebp
c0016392:	c3                   	ret    
c0016393:	90                   	nop

c0016394 <Video::clearScreen(unsigned int)>:
c0016394:	57                   	push   edi
c0016395:	56                   	push   esi
c0016396:	53                   	push   ebx
c0016397:	31 db                	xor    ebx,ebx
c0016399:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001639d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00163a3:	7e 1f                	jle    c00163c4 <Video::clearScreen(unsigned int)+0x30>
c00163a5:	31 ff                	xor    edi,edi
c00163a7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00163ad:	7e 12                	jle    c00163c1 <Video::clearScreen(unsigned int)+0x2d>
c00163af:	8b 06                	mov    eax,DWORD PTR [esi]
c00163b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00163b5:	53                   	push   ebx
c00163b6:	57                   	push   edi
c00163b7:	47                   	inc    edi
c00163b8:	56                   	push   esi
c00163b9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00163bc:	83 c4 10             	add    esp,0x10
c00163bf:	eb e6                	jmp    c00163a7 <Video::clearScreen(unsigned int)+0x13>
c00163c1:	43                   	inc    ebx
c00163c2:	eb d9                	jmp    c001639d <Video::clearScreen(unsigned int)+0x9>
c00163c4:	5b                   	pop    ebx
c00163c5:	5e                   	pop    esi
c00163c6:	5f                   	pop    edi
c00163c7:	c3                   	ret    

c00163c8 <Video::putpixel(int, int, unsigned int)>:
c00163c8:	c7 44 24 04 20 7a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0027a20
c00163d0:	e9 7c be ff ff       	jmp    c0012251 <Dbg::kprintf(char const*, ...)>
c00163d5:	90                   	nop

c00163d6 <Video::Video(char const*)>:
c00163d6:	83 ec 0c             	sub    esp,0xc
c00163d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163dd:	83 ec 08             	sub    esp,0x8
c00163e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163e4:	50                   	push   eax
c00163e5:	e8 62 d4 ff ff       	call   c001384c <Device::Device(char const*)>
c00163ea:	83 c4 10             	add    esp,0x10
c00163ed:	ba 38 7a 02 c0       	mov    edx,0xc0027a38
c00163f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f6:	89 10                	mov    DWORD PTR [eax],edx
c00163f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163fc:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016406:	90                   	nop
c0016407:	83 c4 0c             	add    esp,0xc
c001640a:	c3                   	ret    
c001640b:	90                   	nop

c001640c <Video::~Video()>:
c001640c:	83 ec 0c             	sub    esp,0xc
c001640f:	ba 38 7a 02 c0       	mov    edx,0xc0027a38
c0016414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016418:	89 10                	mov    DWORD PTR [eax],edx
c001641a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001641e:	83 ec 0c             	sub    esp,0xc
c0016421:	50                   	push   eax
c0016422:	e8 d7 d0 ff ff       	call   c00134fe <Device::~Device()>
c0016427:	83 c4 10             	add    esp,0x10
c001642a:	90                   	nop
c001642b:	83 c4 0c             	add    esp,0xc
c001642e:	c3                   	ret    
c001642f:	90                   	nop

c0016430 <Video::~Video()>:
c0016430:	83 ec 0c             	sub    esp,0xc
c0016433:	83 ec 0c             	sub    esp,0xc
c0016436:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001643a:	e8 cd ff ff ff       	call   c001640c <Video::~Video()>
c001643f:	83 c4 10             	add    esp,0x10
c0016442:	83 ec 08             	sub    esp,0x8
c0016445:	68 64 01 00 00       	push   0x164
c001644a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001644e:	e8 1e bd ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0016453:	83 c4 10             	add    esp,0x10
c0016456:	83 c4 0c             	add    esp,0xc
c0016459:	c3                   	ret    

c001645a <Video::isMonochrome()>:
c001645a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001645e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016464:	c3                   	ret    
c0016465:	90                   	nop

c0016466 <Video::getWidth()>:
c0016466:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001646a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016470:	c3                   	ret    
c0016471:	90                   	nop

c0016472 <Video::getHeight()>:
c0016472:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016476:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001647c:	c3                   	ret    
c001647d:	90                   	nop

c001647e <Video::drawCursor(int, int, unsigned char*, int)>:
c001647e:	55                   	push   ebp
c001647f:	57                   	push   edi
c0016480:	56                   	push   esi
c0016481:	53                   	push   ebx
c0016482:	83 ec 2c             	sub    esp,0x2c
c0016485:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016489:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001648d:	83 f8 01             	cmp    eax,0x1
c0016490:	19 c9                	sbb    ecx,ecx
c0016492:	31 db                	xor    ebx,ebx
c0016494:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016498:	89 cd                	mov    ebp,ecx
c001649a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00164a2:	f7 d5                	not    ebp
c00164a4:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00164aa:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00164ae:	01 d8                	add    eax,ebx
c00164b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00164b4:	56                   	push   esi
c00164b5:	e8 b8 ff ff ff       	call   c0016472 <Video::getHeight()>
c00164ba:	59                   	pop    ecx
c00164bb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00164bf:	7e 70                	jle    c0016531 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00164c1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00164c5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00164c9:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00164cc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00164d0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00164d4:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00164db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00164df:	89 f8                	mov    eax,edi
c00164e1:	83 c0 20             	add    eax,0x20
c00164e4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00164e8:	56                   	push   esi
c00164e9:	e8 78 ff ff ff       	call   c0016466 <Video::getWidth()>
c00164ee:	5a                   	pop    edx
c00164ef:	39 c7                	cmp    edi,eax
c00164f1:	7d 34                	jge    c0016527 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00164f3:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00164f8:	74 05                	je     c00164ff <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00164fa:	8b 06                	mov    eax,DWORD PTR [esi]
c00164fc:	55                   	push   ebp
c00164fd:	eb 0d                	jmp    c001650c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00164ff:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016504:	74 12                	je     c0016518 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016506:	8b 06                	mov    eax,DWORD PTR [esi]
c0016508:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001650c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016510:	57                   	push   edi
c0016511:	56                   	push   esi
c0016512:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016515:	83 c4 10             	add    esp,0x10
c0016518:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001651c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016520:	47                   	inc    edi
c0016521:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016525:	75 c1                	jne    c00164e8 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016527:	43                   	inc    ebx
c0016528:	83 fb 20             	cmp    ebx,0x20
c001652b:	0f 85 79 ff ff ff    	jne    c00164aa <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016531:	83 c4 2c             	add    esp,0x2c
c0016534:	5b                   	pop    ebx
c0016535:	5e                   	pop    esi
c0016536:	5f                   	pop    edi
c0016537:	5d                   	pop    ebp
c0016538:	c3                   	ret    
c0016539:	90                   	nop

c001653a <ACPI::close(int, int, void*)>:
c001653a:	83 ec 1c             	sub    esp,0x1c
c001653d:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016545:	74 0a                	je     c0016551 <ACPI::close(int, int, void*)+0x17>
c0016547:	b8 00 00 00 00       	mov    eax,0x0
c001654c:	e9 9a 00 00 00       	jmp    c00165eb <ACPI::close(int, int, void*)+0xb1>
c0016551:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016556:	75 37                	jne    c001658f <ACPI::close(int, int, void*)+0x55>
c0016558:	83 ec 0c             	sub    esp,0xc
c001655b:	68 70 7a 02 c0       	push   0xc0027a70
c0016560:	e8 ec bc ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0016565:	83 c4 10             	add    esp,0x10
c0016568:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c001656d:	85 c0                	test   eax,eax
c001656f:	74 07                	je     c0016578 <ACPI::close(int, int, void*)+0x3e>
c0016571:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0016576:	ff d0                	call   eax
c0016578:	83 ec 0c             	sub    esp,0xc
c001657b:	68 24 7b 02 c0       	push   0xc0027b24
c0016580:	e8 6a 24 00 00       	call   c00189ef <Krnl::panic(char const*)>
c0016585:	83 c4 10             	add    esp,0x10
c0016588:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001658d:	eb 5c                	jmp    c00165eb <ACPI::close(int, int, void*)+0xb1>
c001658f:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016594:	75 50                	jne    c00165e6 <ACPI::close(int, int, void*)+0xac>
c0016596:	a1 84 aa 02 c0       	mov    eax,ds:0xc002aa84
c001659b:	85 c0                	test   eax,eax
c001659d:	74 07                	je     c00165a6 <ACPI::close(int, int, void*)+0x6c>
c001659f:	a1 84 aa 02 c0       	mov    eax,ds:0xc002aa84
c00165a4:	ff d0                	call   eax
c00165a6:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00165ab:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00165b0:	83 e0 02             	and    eax,0x2
c00165b3:	74 1c                	je     c00165d1 <ACPI::close(int, int, void*)+0x97>
c00165b5:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00165bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00165c0:	89 c2                	mov    edx,eax
c00165c2:	ec                   	in     al,dx
c00165c3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00165c7:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00165cb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00165cf:	eb da                	jmp    c00165ab <ACPI::close(int, int, void*)+0x71>
c00165d1:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00165d8:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00165dd:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00165e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00165e5:	ee                   	out    dx,al
c00165e6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00165eb:	83 c4 1c             	add    esp,0x1c
c00165ee:	c3                   	ret    

c00165ef <findRSDP()>:
c00165ef:	83 ec 1c             	sub    esp,0x1c
c00165f2:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c00165f7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00165fd:	83 e0 04             	and    eax,0x4
c0016600:	84 c0                	test   al,al
c0016602:	75 07                	jne    c001660b <findRSDP()+0x1c>
c0016604:	b8 00 00 00 00       	mov    eax,0x0
c0016609:	eb 6a                	jmp    c0016675 <findRSDP()+0x86>
c001660b:	a1 50 a4 02 c0       	mov    eax,ds:0xc002a450
c0016610:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016615:	7f 1b                	jg     c0016632 <findRSDP()+0x43>
c0016617:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c001661c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016622:	83 e2 fb             	and    edx,0xfffffffb
c0016625:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001662b:	b8 00 00 00 00       	mov    eax,0x0
c0016630:	eb 43                	jmp    c0016675 <findRSDP()+0x86>
c0016632:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001663a:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0016642:	77 2c                	ja     c0016670 <findRSDP()+0x81>
c0016644:	83 ec 04             	sub    esp,0x4
c0016647:	6a 08                	push   0x8
c0016649:	68 7d 7a 02 c0       	push   0xc0027a7d
c001664e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016652:	e8 de 9f fe ff       	call   c0000635 <memcmp>
c0016657:	83 c4 10             	add    esp,0x10
c001665a:	85 c0                	test   eax,eax
c001665c:	0f 94 c0             	sete   al
c001665f:	84 c0                	test   al,al
c0016661:	74 06                	je     c0016669 <findRSDP()+0x7a>
c0016663:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016667:	eb 0c                	jmp    c0016675 <findRSDP()+0x86>
c0016669:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001666e:	eb ca                	jmp    c001663a <findRSDP()+0x4b>
c0016670:	b8 00 00 00 00       	mov    eax,0x0
c0016675:	83 c4 1c             	add    esp,0x1c
c0016678:	c3                   	ret    

c0016679 <loadACPITables(unsigned char*)>:
c0016679:	56                   	push   esi
c001667a:	53                   	push   ebx
c001667b:	83 ec 44             	sub    esp,0x44
c001667e:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0016683:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016689:	83 e0 04             	and    eax,0x4
c001668c:	84 c0                	test   al,al
c001668e:	0f 84 05 02 00 00    	je     c0016899 <loadACPITables(unsigned char*)+0x220>
c0016694:	a0 a0 ac 02 c0       	mov    al,ds:0xc002aca0
c0016699:	84 c0                	test   al,al
c001669b:	74 75                	je     c0016712 <loadACPITables(unsigned char*)+0x99>
c001669d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00166a1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00166a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00166a9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00166ac:	83 e8 24             	sub    eax,0x24
c00166af:	c1 e8 03             	shr    eax,0x3
c00166b2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00166b6:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00166be:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00166c2:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00166c6:	0f 8d b2 00 00 00    	jge    c001677e <loadACPITables(unsigned char*)+0x105>
c00166cc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00166d0:	83 c0 24             	add    eax,0x24
c00166d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00166d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00166db:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00166df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00166e3:	c1 e0 03             	shl    eax,0x3
c00166e6:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00166ea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00166ee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00166f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00166f3:	89 c1                	mov    ecx,eax
c00166f5:	a1 8c aa 02 c0       	mov    eax,ds:0xc002aa8c
c00166fa:	8d 50 01             	lea    edx,[eax+0x1]
c00166fd:	89 15 8c aa 02 c0    	mov    DWORD PTR ds:0xc002aa8c,edx
c0016703:	89 ca                	mov    edx,ecx
c0016705:	89 14 c5 a4 aa 02 c0 	mov    DWORD PTR [eax*8-0x3ffd555c],edx
c001670c:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0016710:	eb ac                	jmp    c00166be <loadACPITables(unsigned char*)+0x45>
c0016712:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016716:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001671a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001671e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016721:	83 e8 24             	sub    eax,0x24
c0016724:	c1 e8 02             	shr    eax,0x2
c0016727:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001672b:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0016733:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016737:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c001673b:	7d 41                	jge    c001677e <loadACPITables(unsigned char*)+0x105>
c001673d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016741:	83 c0 24             	add    eax,0x24
c0016744:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016748:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001674c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016750:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016754:	c1 e0 02             	shl    eax,0x2
c0016757:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c001675b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001675f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016761:	a1 8c aa 02 c0       	mov    eax,ds:0xc002aa8c
c0016766:	8d 50 01             	lea    edx,[eax+0x1]
c0016769:	89 15 8c aa 02 c0    	mov    DWORD PTR ds:0xc002aa8c,edx
c001676f:	89 ca                	mov    edx,ecx
c0016771:	89 14 c5 a4 aa 02 c0 	mov    DWORD PTR [eax*8-0x3ffd555c],edx
c0016778:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c001677c:	eb b5                	jmp    c0016733 <loadACPITables(unsigned char*)+0xba>
c001677e:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0016786:	a1 8c aa 02 c0       	mov    eax,ds:0xc002aa8c
c001678b:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c001678f:	0f 8d 05 01 00 00    	jge    c001689a <loadACPITables(unsigned char*)+0x221>
c0016795:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016799:	8b 04 c5 a4 aa 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd555c]
c00167a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167b0:	25 ff 0f 00 00       	and    eax,0xfff
c00167b5:	89 c6                	mov    esi,eax
c00167b7:	e8 53 ac ff ff       	call   c001140f <Virt::getAKernelVAS()>
c00167bc:	89 c3                	mov    ebx,eax
c00167be:	83 ec 0c             	sub    esp,0xc
c00167c1:	6a 01                	push   0x1
c00167c3:	e8 b7 aa ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c00167c8:	83 c4 10             	add    esp,0x10
c00167cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167cf:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00167d5:	83 ec 0c             	sub    esp,0xc
c00167d8:	6a 01                	push   0x1
c00167da:	6a 01                	push   0x1
c00167dc:	50                   	push   eax
c00167dd:	52                   	push   edx
c00167de:	53                   	push   ebx
c00167df:	e8 5a b4 ff ff       	call   c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00167e4:	83 c4 20             	add    esp,0x20
c00167e7:	09 f0                	or     eax,esi
c00167e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167ed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00167f1:	c1 e0 03             	shl    eax,0x3
c00167f4:	05 a0 aa 02 c0       	add    eax,0xc002aaa0
c00167f9:	83 ec 04             	sub    esp,0x4
c00167fc:	6a 04                	push   0x4
c00167fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016802:	50                   	push   eax
c0016803:	e8 90 9e fe ff       	call   c0000698 <memcpy>
c0016808:	83 c4 10             	add    esp,0x10
c001680b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001680f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016812:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016816:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001681a:	05 00 10 00 00       	add    eax,0x1000
c001681f:	c1 e8 0c             	shr    eax,0xc
c0016822:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001682a:	89 04 24             	mov    DWORD PTR [esp],eax
c001682d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016831:	25 ff 0f 00 00       	and    eax,0xfff
c0016836:	89 c6                	mov    esi,eax
c0016838:	e8 d2 ab ff ff       	call   c001140f <Virt::getAKernelVAS()>
c001683d:	89 c3                	mov    ebx,eax
c001683f:	83 ec 0c             	sub    esp,0xc
c0016842:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016846:	e8 34 aa ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c001684b:	83 c4 10             	add    esp,0x10
c001684e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016852:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016858:	83 ec 0c             	sub    esp,0xc
c001685b:	6a 01                	push   0x1
c001685d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016861:	50                   	push   eax
c0016862:	52                   	push   edx
c0016863:	53                   	push   ebx
c0016864:	e8 d5 b3 ff ff       	call   c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016869:	83 c4 20             	add    esp,0x20
c001686c:	09 f0                	or     eax,esi
c001686e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016872:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016875:	83 ec 0c             	sub    esp,0xc
c0016878:	50                   	push   eax
c0016879:	e8 5b ad ff ff       	call   c00115d9 <Virt::freeKernelVirtualPages(unsigned long)>
c001687e:	83 c4 10             	add    esp,0x10
c0016881:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016885:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016889:	89 14 c5 a4 aa 02 c0 	mov    DWORD PTR [eax*8-0x3ffd555c],edx
c0016890:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0016894:	e9 ed fe ff ff       	jmp    c0016786 <loadACPITables(unsigned char*)+0x10d>
c0016899:	90                   	nop
c001689a:	83 c4 44             	add    esp,0x44
c001689d:	5b                   	pop    ebx
c001689e:	5e                   	pop    esi
c001689f:	c3                   	ret    

c00168a0 <findRSDT(unsigned char*)>:
c00168a0:	56                   	push   esi
c00168a1:	53                   	push   ebx
c00168a2:	83 ec 44             	sub    esp,0x44
c00168a5:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c00168aa:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00168b0:	83 e0 04             	and    eax,0x4
c00168b3:	84 c0                	test   al,al
c00168b5:	75 0a                	jne    c00168c1 <findRSDT(unsigned char*)+0x21>
c00168b7:	b8 00 00 00 00       	mov    eax,0x0
c00168bc:	e9 f7 00 00 00       	jmp    c00169b8 <findRSDT(unsigned char*)+0x118>
c00168c1:	83 ec 04             	sub    esp,0x4
c00168c4:	6a 24                	push   0x24
c00168c6:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00168ca:	8d 44 24 18          	lea    eax,[esp+0x18]
c00168ce:	50                   	push   eax
c00168cf:	e8 c4 9d fe ff       	call   c0000698 <memcpy>
c00168d4:	83 c4 10             	add    esp,0x10
c00168d7:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00168db:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00168df:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00168e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00168eb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00168ef:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00168f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00168f7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00168fb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00168ff:	25 ff 0f 00 00       	and    eax,0xfff
c0016904:	89 c6                	mov    esi,eax
c0016906:	e8 04 ab ff ff       	call   c001140f <Virt::getAKernelVAS()>
c001690b:	89 c3                	mov    ebx,eax
c001690d:	83 ec 0c             	sub    esp,0xc
c0016910:	6a 02                	push   0x2
c0016912:	e8 68 a9 ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c0016917:	83 c4 10             	add    esp,0x10
c001691a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001691e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016924:	83 ec 0c             	sub    esp,0xc
c0016927:	6a 01                	push   0x1
c0016929:	6a 02                	push   0x2
c001692b:	50                   	push   eax
c001692c:	52                   	push   edx
c001692d:	53                   	push   ebx
c001692e:	e8 0b b3 ff ff       	call   c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016933:	83 c4 20             	add    esp,0x20
c0016936:	09 f0                	or     eax,esi
c0016938:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001693c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016940:	25 ff 0f 00 00       	and    eax,0xfff
c0016945:	89 c6                	mov    esi,eax
c0016947:	e8 c3 aa ff ff       	call   c001140f <Virt::getAKernelVAS()>
c001694c:	89 c3                	mov    ebx,eax
c001694e:	83 ec 0c             	sub    esp,0xc
c0016951:	6a 02                	push   0x2
c0016953:	e8 27 a9 ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c0016958:	83 c4 10             	add    esp,0x10
c001695b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001695f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016965:	83 ec 0c             	sub    esp,0xc
c0016968:	6a 01                	push   0x1
c001696a:	6a 02                	push   0x2
c001696c:	50                   	push   eax
c001696d:	52                   	push   edx
c001696e:	53                   	push   ebx
c001696f:	e8 ca b2 ff ff       	call   c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016974:	83 c4 20             	add    esp,0x20
c0016977:	09 f0                	or     eax,esi
c0016979:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001697d:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0016982:	75 11                	jne    c0016995 <findRSDT(unsigned char*)+0xf5>
c0016984:	c6 05 a0 ac 02 c0 00 	mov    BYTE PTR ds:0xc002aca0,0x0
c001698b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001698f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016993:	eb 1f                	jmp    c00169b4 <findRSDT(unsigned char*)+0x114>
c0016995:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c001699a:	75 11                	jne    c00169ad <findRSDT(unsigned char*)+0x10d>
c001699c:	c6 05 a0 ac 02 c0 01 	mov    BYTE PTR ds:0xc002aca0,0x1
c00169a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00169a7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00169ab:	eb 07                	jmp    c00169b4 <findRSDT(unsigned char*)+0x114>
c00169ad:	b8 00 00 00 00       	mov    eax,0x0
c00169b2:	eb 04                	jmp    c00169b8 <findRSDT(unsigned char*)+0x118>
c00169b4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00169b8:	83 c4 44             	add    esp,0x44
c00169bb:	5b                   	pop    ebx
c00169bc:	5e                   	pop    esi
c00169bd:	c3                   	ret    

c00169be <findDataTable(unsigned char*, char*)>:
c00169be:	83 ec 1c             	sub    esp,0x1c
c00169c1:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c00169c6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00169cc:	83 e0 04             	and    eax,0x4
c00169cf:	84 c0                	test   al,al
c00169d1:	75 07                	jne    c00169da <findDataTable(unsigned char*, char*)+0x1c>
c00169d3:	b8 00 00 00 00       	mov    eax,0x0
c00169d8:	eb 7c                	jmp    c0016a56 <findDataTable(unsigned char*, char*)+0x98>
c00169da:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00169e2:	a1 8c aa 02 c0       	mov    eax,ds:0xc002aa8c
c00169e7:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00169eb:	7d 3a                	jge    c0016a27 <findDataTable(unsigned char*, char*)+0x69>
c00169ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169f1:	c1 e0 03             	shl    eax,0x3
c00169f4:	05 a0 aa 02 c0       	add    eax,0xc002aaa0
c00169f9:	83 ec 04             	sub    esp,0x4
c00169fc:	6a 04                	push   0x4
c00169fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a02:	50                   	push   eax
c0016a03:	e8 2d 9c fe ff       	call   c0000635 <memcmp>
c0016a08:	83 c4 10             	add    esp,0x10
c0016a0b:	85 c0                	test   eax,eax
c0016a0d:	0f 94 c0             	sete   al
c0016a10:	84 c0                	test   al,al
c0016a12:	74 0d                	je     c0016a21 <findDataTable(unsigned char*, char*)+0x63>
c0016a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a18:	8b 04 c5 a4 aa 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd555c]
c0016a1f:	eb 35                	jmp    c0016a56 <findDataTable(unsigned char*, char*)+0x98>
c0016a21:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016a25:	eb bb                	jmp    c00169e2 <findDataTable(unsigned char*, char*)+0x24>
c0016a27:	a0 a0 ac 02 c0       	mov    al,ds:0xc002aca0
c0016a2c:	84 c0                	test   al,al
c0016a2e:	74 07                	je     c0016a37 <findDataTable(unsigned char*, char*)+0x79>
c0016a30:	b8 58 00 00 00       	mov    eax,0x58
c0016a35:	eb 05                	jmp    c0016a3c <findDataTable(unsigned char*, char*)+0x7e>
c0016a37:	b8 52 00 00 00       	mov    eax,0x52
c0016a3c:	83 ec 04             	sub    esp,0x4
c0016a3f:	50                   	push   eax
c0016a40:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a44:	68 48 7b 02 c0       	push   0xc0027b48
c0016a49:	e8 03 b8 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0016a4e:	83 c4 10             	add    esp,0x10
c0016a51:	b8 00 00 00 00       	mov    eax,0x0
c0016a56:	83 c4 1c             	add    esp,0x1c
c0016a59:	c3                   	ret    

c0016a5a <scanMADT()>:
c0016a5a:	83 ec 2c             	sub    esp,0x2c
c0016a5d:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0016a62:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016a68:	83 e0 04             	and    eax,0x4
c0016a6b:	84 c0                	test   al,al
c0016a6d:	0f 84 73 03 00 00    	je     c0016de6 <scanMADT()+0x38c>
c0016a73:	e8 77 fb ff ff       	call   c00165ef <findRSDP()>
c0016a78:	a3 ac ac 02 c0       	mov    ds:0xc002acac,eax
c0016a7d:	a1 ac ac 02 c0       	mov    eax,ds:0xc002acac
c0016a82:	85 c0                	test   eax,eax
c0016a84:	75 19                	jne    c0016a9f <scanMADT()+0x45>
c0016a86:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0016a8b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016a91:	83 e2 fb             	and    edx,0xfffffffb
c0016a94:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016a9a:	e9 4b 03 00 00       	jmp    c0016dea <scanMADT()+0x390>
c0016a9f:	a1 ac ac 02 c0       	mov    eax,ds:0xc002acac
c0016aa4:	83 ec 0c             	sub    esp,0xc
c0016aa7:	50                   	push   eax
c0016aa8:	e8 f3 fd ff ff       	call   c00168a0 <findRSDT(unsigned char*)>
c0016aad:	83 c4 10             	add    esp,0x10
c0016ab0:	a3 a8 ac 02 c0       	mov    ds:0xc002aca8,eax
c0016ab5:	a1 a8 ac 02 c0       	mov    eax,ds:0xc002aca8
c0016aba:	85 c0                	test   eax,eax
c0016abc:	75 19                	jne    c0016ad7 <scanMADT()+0x7d>
c0016abe:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0016ac3:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016ac9:	83 e2 fb             	and    edx,0xfffffffb
c0016acc:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016ad2:	e9 13 03 00 00       	jmp    c0016dea <scanMADT()+0x390>
c0016ad7:	a1 a8 ac 02 c0       	mov    eax,ds:0xc002aca8
c0016adc:	83 ec 0c             	sub    esp,0xc
c0016adf:	50                   	push   eax
c0016ae0:	e8 94 fb ff ff       	call   c0016679 <loadACPITables(unsigned char*)>
c0016ae5:	83 c4 10             	add    esp,0x10
c0016ae8:	a1 a8 ac 02 c0       	mov    eax,ds:0xc002aca8
c0016aed:	83 ec 08             	sub    esp,0x8
c0016af0:	68 86 7a 02 c0       	push   0xc0027a86
c0016af5:	50                   	push   eax
c0016af6:	e8 c3 fe ff ff       	call   c00169be <findDataTable(unsigned char*, char*)>
c0016afb:	83 c4 10             	add    esp,0x10
c0016afe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b02:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0016b07:	75 19                	jne    c0016b22 <scanMADT()+0xc8>
c0016b09:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0016b0e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016b14:	83 e2 fe             	and    edx,0xfffffffe
c0016b17:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016b1d:	e9 c8 02 00 00       	jmp    c0016dea <scanMADT()+0x390>
c0016b22:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0016b2a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016b31:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0016b35:	0f 87 af 02 00 00    	ja     c0016dea <scanMADT()+0x390>
c0016b3b:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0016b43:	0f 87 a1 02 00 00    	ja     c0016dea <scanMADT()+0x390>
c0016b49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016b51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b55:	8d 50 01             	lea    edx,[eax+0x1]
c0016b58:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016b5c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016b60:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016b64:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0016b68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b6c:	8d 50 01             	lea    edx,[eax+0x1]
c0016b6f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016b73:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016b77:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016b7b:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0016b7f:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0016b84:	0f 86 5f 02 00 00    	jbe    c0016de9 <scanMADT()+0x38f>
c0016b8a:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0016b8f:	75 57                	jne    c0016be8 <scanMADT()+0x18e>
c0016b91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b95:	8d 50 01             	lea    edx,[eax+0x1]
c0016b98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016b9c:	8a 15 e0 ad 02 c0    	mov    dl,BYTE PTR ds:0xc002ade0
c0016ba2:	0f b6 d2             	movzx  edx,dl
c0016ba5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016ba9:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016bad:	88 82 20 ae 02 c0    	mov    BYTE PTR [edx-0x3ffd51e0],al
c0016bb3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bb7:	8d 50 01             	lea    edx,[eax+0x1]
c0016bba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016bbe:	8a 15 e0 ad 02 c0    	mov    dl,BYTE PTR ds:0xc002ade0
c0016bc4:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016bc7:	88 0d e0 ad 02 c0    	mov    BYTE PTR ds:0xc002ade0,cl
c0016bcd:	0f b6 d2             	movzx  edx,dl
c0016bd0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016bd4:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016bd8:	88 82 00 ae 02 c0    	mov    BYTE PTR [edx-0x3ffd5200],al
c0016bde:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016be3:	e9 ea 01 00 00       	jmp    c0016dd2 <scanMADT()+0x378>
c0016be8:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0016bed:	0f 85 14 01 00 00    	jne    c0016d07 <scanMADT()+0x2ad>
c0016bf3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bf7:	8d 50 01             	lea    edx,[eax+0x1]
c0016bfa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016bfe:	8a 15 b0 ac 02 c0    	mov    dl,BYTE PTR ds:0xc002acb0
c0016c04:	0f b6 d2             	movzx  edx,dl
c0016c07:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016c0b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016c0f:	88 82 c0 ac 02 c0    	mov    BYTE PTR [edx-0x3ffd5340],al
c0016c15:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0016c19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016c1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c21:	01 d0                	add    eax,edx
c0016c23:	83 c0 2c             	add    eax,0x2c
c0016c26:	8a 00                	mov    al,BYTE PTR [eax]
c0016c28:	0f b6 d0             	movzx  edx,al
c0016c2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c2f:	8d 48 01             	lea    ecx,[eax+0x1]
c0016c32:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c36:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016c3a:	0f b6 c0             	movzx  eax,al
c0016c3d:	c1 e0 08             	shl    eax,0x8
c0016c40:	89 d1                	mov    ecx,edx
c0016c42:	09 c1                	or     ecx,eax
c0016c44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c48:	8d 50 02             	lea    edx,[eax+0x2]
c0016c4b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c4f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016c53:	0f b6 c0             	movzx  eax,al
c0016c56:	c1 e0 10             	shl    eax,0x10
c0016c59:	09 c1                	or     ecx,eax
c0016c5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c5f:	8d 50 03             	lea    edx,[eax+0x3]
c0016c62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c66:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016c6a:	0f b6 c0             	movzx  eax,al
c0016c6d:	c1 e0 18             	shl    eax,0x18
c0016c70:	09 c1                	or     ecx,eax
c0016c72:	89 ca                	mov    edx,ecx
c0016c74:	a0 b0 ac 02 c0       	mov    al,ds:0xc002acb0
c0016c79:	0f b6 c0             	movzx  eax,al
c0016c7c:	89 14 85 e0 ac 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5320],edx
c0016c83:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016c88:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016c8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c90:	01 d0                	add    eax,edx
c0016c92:	83 c0 2c             	add    eax,0x2c
c0016c95:	8a 00                	mov    al,BYTE PTR [eax]
c0016c97:	0f b6 d0             	movzx  edx,al
c0016c9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c9e:	8d 48 01             	lea    ecx,[eax+0x1]
c0016ca1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016ca5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016ca9:	0f b6 c0             	movzx  eax,al
c0016cac:	c1 e0 08             	shl    eax,0x8
c0016caf:	89 d1                	mov    ecx,edx
c0016cb1:	09 c1                	or     ecx,eax
c0016cb3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cb7:	8d 50 02             	lea    edx,[eax+0x2]
c0016cba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016cbe:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016cc2:	0f b6 c0             	movzx  eax,al
c0016cc5:	c1 e0 10             	shl    eax,0x10
c0016cc8:	09 c1                	or     ecx,eax
c0016cca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cce:	8d 50 03             	lea    edx,[eax+0x3]
c0016cd1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016cd5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016cd9:	0f b6 c0             	movzx  eax,al
c0016cdc:	c1 e0 18             	shl    eax,0x18
c0016cdf:	09 c1                	or     ecx,eax
c0016ce1:	89 ca                	mov    edx,ecx
c0016ce3:	a0 b0 ac 02 c0       	mov    al,ds:0xc002acb0
c0016ce8:	0f b6 c0             	movzx  eax,al
c0016ceb:	89 14 85 60 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd52a0],edx
c0016cf2:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016cf7:	a0 b0 ac 02 c0       	mov    al,ds:0xc002acb0
c0016cfc:	40                   	inc    eax
c0016cfd:	a2 b0 ac 02 c0       	mov    ds:0xc002acb0,al
c0016d02:	e9 cb 00 00 00       	jmp    c0016dd2 <scanMADT()+0x378>
c0016d07:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0016d0c:	0f 85 a6 00 00 00    	jne    c0016db8 <scanMADT()+0x35e>
c0016d12:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d16:	8d 50 01             	lea    edx,[eax+0x1]
c0016d19:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016d1d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016d21:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016d25:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016d29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d2d:	8d 50 01             	lea    edx,[eax+0x1]
c0016d30:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016d34:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016d38:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016d3c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0016d40:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d48:	01 d0                	add    eax,edx
c0016d4a:	83 c0 2c             	add    eax,0x2c
c0016d4d:	8a 00                	mov    al,BYTE PTR [eax]
c0016d4f:	0f b6 d0             	movzx  edx,al
c0016d52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d56:	8d 48 01             	lea    ecx,[eax+0x1]
c0016d59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d5d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016d61:	0f b6 c0             	movzx  eax,al
c0016d64:	c1 e0 08             	shl    eax,0x8
c0016d67:	89 d1                	mov    ecx,edx
c0016d69:	09 c1                	or     ecx,eax
c0016d6b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d6f:	8d 50 02             	lea    edx,[eax+0x2]
c0016d72:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d76:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016d7a:	0f b6 c0             	movzx  eax,al
c0016d7d:	c1 e0 10             	shl    eax,0x10
c0016d80:	09 c1                	or     ecx,eax
c0016d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d86:	8d 50 03             	lea    edx,[eax+0x3]
c0016d89:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d8d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016d91:	0f b6 c0             	movzx  eax,al
c0016d94:	c1 e0 18             	shl    eax,0x18
c0016d97:	09 c8                	or     eax,ecx
c0016d99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d9d:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016da2:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0016da7:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016dac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016db0:	88 90 e0 96 02 c0    	mov    BYTE PTR [eax-0x3ffd6920],dl
c0016db6:	eb 1a                	jmp    c0016dd2 <scanMADT()+0x378>
c0016db8:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0016dbd:	75 07                	jne    c0016dc6 <scanMADT()+0x36c>
c0016dbf:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016dc4:	eb 0c                	jmp    c0016dd2 <scanMADT()+0x378>
c0016dc6:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0016dcb:	75 05                	jne    c0016dd2 <scanMADT()+0x378>
c0016dcd:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0016dd2:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c0016dd7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016ddb:	01 d0                	add    eax,edx
c0016ddd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016de1:	e9 44 fd ff ff       	jmp    c0016b2a <scanMADT()+0xd0>
c0016de6:	90                   	nop
c0016de7:	eb 01                	jmp    c0016dea <scanMADT()+0x390>
c0016de9:	90                   	nop
c0016dea:	83 c4 2c             	add    esp,0x2c
c0016ded:	c3                   	ret    

c0016dee <ACPI::ACPI()>:
c0016dee:	83 ec 0c             	sub    esp,0xc
c0016df1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016df5:	83 ec 08             	sub    esp,0x8
c0016df8:	68 8b 7a 02 c0       	push   0xc0027a8b
c0016dfd:	50                   	push   eax
c0016dfe:	e8 49 ca ff ff       	call   c001384c <Device::Device(char const*)>
c0016e03:	83 c4 10             	add    esp,0x10
c0016e06:	ba 14 7c 02 c0       	mov    edx,0xc0027c14
c0016e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e0f:	89 10                	mov    DWORD PTR [eax],edx
c0016e11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e15:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0016e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e20:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0016e2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e2e:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0016e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e3c:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0016e43:	e8 12 fc ff ff       	call   c0016a5a <scanMADT()>
c0016e48:	90                   	nop
c0016e49:	83 c4 0c             	add    esp,0xc
c0016e4c:	c3                   	ret    
c0016e4d:	90                   	nop

c0016e4e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0016e4e:	83 ec 2c             	sub    esp,0x2c
c0016e51:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016e55:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016e59:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0016e5d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0016e61:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0016e66:	88 d0                	mov    al,dl
c0016e68:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016e6c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0016e71:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016e79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e7d:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016e83:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0016e87:	0f 8d 97 00 00 00    	jge    c0016f24 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0016e8d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e91:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016e95:	83 c2 2a             	add    edx,0x2a
c0016e98:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0016e9c:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0016ea1:	75 78                	jne    c0016f1b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016ea3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ea7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016eab:	83 c2 2a             	add    edx,0x2a
c0016eae:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0016eb2:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0016eb6:	75 63                	jne    c0016f1b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016eb8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0016ebd:	74 3a                	je     c0016ef9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0016ebf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ec3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016ec7:	83 c2 2a             	add    edx,0x2a
c0016eca:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0016ece:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ed2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016ed5:	39 c2                	cmp    edx,eax
c0016ed7:	74 10                	je     c0016ee9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0016ed9:	83 ec 0c             	sub    esp,0xc
c0016edc:	68 78 7b 02 c0       	push   0xc0027b78
c0016ee1:	e8 09 1b 00 00       	call   c00189ef <Krnl::panic(char const*)>
c0016ee6:	83 c4 10             	add    esp,0x10
c0016ee9:	83 ec 0c             	sub    esp,0xc
c0016eec:	68 90 7a 02 c0       	push   0xc0027a90
c0016ef1:	e8 f9 1a 00 00       	call   c00189ef <Krnl::panic(char const*)>
c0016ef6:	83 c4 10             	add    esp,0x10
c0016ef9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016efd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016f05:	83 c2 2a             	add    edx,0x2a
c0016f08:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0016f0c:	8b 02                	mov    eax,DWORD PTR [edx]
c0016f0e:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0016f11:	89 01                	mov    DWORD PTR [ecx],eax
c0016f13:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016f16:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0016f1b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0016f1f:	e9 55 ff ff ff       	jmp    c0016e79 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0016f24:	90                   	nop
c0016f25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f29:	83 c4 2c             	add    esp,0x2c
c0016f2c:	c2 04 00             	ret    0x4
c0016f2f:	90                   	nop

c0016f30 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0016f30:	56                   	push   esi
c0016f31:	53                   	push   ebx
c0016f32:	83 ec 14             	sub    esp,0x14
c0016f35:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f39:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0016f3d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016f41:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0016f46:	88 c8                	mov    al,cl
c0016f48:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016f4c:	88 d0                	mov    al,dl
c0016f4e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016f52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f56:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0016f5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f60:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0016f66:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0016f6b:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0016f70:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0016f75:	83 ec 04             	sub    esp,0x4
c0016f78:	56                   	push   esi
c0016f79:	53                   	push   ebx
c0016f7a:	51                   	push   ecx
c0016f7b:	52                   	push   edx
c0016f7c:	50                   	push   eax
c0016f7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016f81:	68 a8 7b 02 c0       	push   0xc0027ba8
c0016f86:	e8 c6 b2 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0016f8b:	83 c4 20             	add    esp,0x20
c0016f8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f92:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016f98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f9c:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0016f9f:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0016fa3:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0016fa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fab:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016fb1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016fb5:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0016fb8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fbc:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0016fc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fc5:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016fcb:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0016fcf:	8d 48 01             	lea    ecx,[eax+0x1]
c0016fd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd6:	83 c2 2a             	add    edx,0x2a
c0016fd9:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0016fdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fe1:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016fe7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016feb:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0016fee:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016ff2:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0016ff6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ffa:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017000:	8d 50 01             	lea    edx,[eax+0x1]
c0017003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017007:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c001700d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017011:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017017:	3d 00 08 00 00       	cmp    eax,0x800
c001701c:	75 10                	jne    c001702e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c001701e:	83 ec 0c             	sub    esp,0xc
c0017021:	68 9f 7a 02 c0       	push   0xc0027a9f
c0017026:	e8 c4 19 00 00       	call   c00189ef <Krnl::panic(char const*)>
c001702b:	83 c4 10             	add    esp,0x10
c001702e:	90                   	nop
c001702f:	83 c4 14             	add    esp,0x14
c0017032:	5b                   	pop    ebx
c0017033:	5e                   	pop    esi
c0017034:	c3                   	ret    
c0017035:	90                   	nop

c0017036 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017036:	b8 00 00 00 00       	mov    eax,0x0
c001703b:	c3                   	ret    

c001703c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001703c:	83 ec 1c             	sub    esp,0x1c
c001703f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017043:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017046:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001704a:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c001704f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017054:	83 ec 08             	sub    esp,0x8
c0017057:	52                   	push   edx
c0017058:	50                   	push   eax
c0017059:	e8 fa 76 ff ff       	call   c000e758 <Computer::readCMOS(unsigned char)>
c001705e:	83 c4 10             	add    esp,0x10
c0017061:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017065:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c001706a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001706f:	83 ec 04             	sub    esp,0x4
c0017072:	6a 01                	push   0x1
c0017074:	52                   	push   edx
c0017075:	50                   	push   eax
c0017076:	e8 f3 77 ff ff       	call   c000e86e <Computer::writeCMOS(unsigned char, unsigned char)>
c001707b:	83 c4 10             	add    esp,0x10
c001707e:	90                   	nop
c001707f:	83 c4 1c             	add    esp,0x1c
c0017082:	c3                   	ret    
c0017083:	90                   	nop

c0017084 <ACPI::open(int, int, void*)>:
c0017084:	53                   	push   ebx
c0017085:	83 ec 18             	sub    esp,0x18
c0017088:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001708c:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0017093:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017097:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c001709d:	84 c0                	test   al,al
c001709f:	74 60                	je     c0017101 <ACPI::open(int, int, void*)+0x7d>
c00170a1:	83 ec 0c             	sub    esp,0xc
c00170a4:	68 58 01 00 00       	push   0x158
c00170a9:	e8 b4 b0 ff ff       	call   c0012162 <operator new(unsigned long)>
c00170ae:	83 c4 10             	add    esp,0x10
c00170b1:	89 c3                	mov    ebx,eax
c00170b3:	83 ec 0c             	sub    esp,0xc
c00170b6:	53                   	push   ebx
c00170b7:	e8 12 90 00 00       	call   c00200ce <PCI::PCI()>
c00170bc:	83 c4 10             	add    esp,0x10
c00170bf:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00170c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c7:	83 ec 08             	sub    esp,0x8
c00170ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00170ce:	50                   	push   eax
c00170cf:	e8 88 c5 ff ff       	call   c001365c <Device::addChild(Device*)>
c00170d4:	83 c4 10             	add    esp,0x10
c00170d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170db:	8b 00                	mov    eax,DWORD PTR [eax]
c00170dd:	83 c0 08             	add    eax,0x8
c00170e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00170e2:	6a 00                	push   0x0
c00170e4:	6a 00                	push   0x0
c00170e6:	6a 00                	push   0x0
c00170e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00170ec:	ff d0                	call   eax
c00170ee:	83 c4 10             	add    esp,0x10
c00170f1:	83 ec 0c             	sub    esp,0xc
c00170f4:	68 bc 7a 02 c0       	push   0xc0027abc
c00170f9:	e8 53 b1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00170fe:	83 c4 10             	add    esp,0x10
c0017101:	83 ec 0c             	sub    esp,0xc
c0017104:	68 c7 7a 02 c0       	push   0xc0027ac7
c0017109:	e8 82 37 00 00       	call   c001a890 <Thr::loadKernelSymbolTable(char const*)>
c001710e:	83 c4 10             	add    esp,0x10
c0017111:	8b 1d 08 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a408
c0017117:	83 ec 08             	sub    esp,0x8
c001711a:	6a 01                	push   0x1
c001711c:	68 e5 7a 02 c0       	push   0xc0027ae5
c0017121:	e8 4c 42 00 00       	call   c001b372 <Thr::loadDLL(char const*, bool)>
c0017126:	83 c4 10             	add    esp,0x10
c0017129:	83 ec 08             	sub    esp,0x8
c001712c:	53                   	push   ebx
c001712d:	50                   	push   eax
c001712e:	e8 05 44 00 00       	call   c001b538 <Thr::executeDLL(unsigned long, void*)>
c0017133:	83 c4 10             	add    esp,0x10
c0017136:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c001713b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017141:	83 e0 04             	and    eax,0x4
c0017144:	84 c0                	test   al,al
c0017146:	0f 84 cf 00 00 00    	je     c001721b <ACPI::open(int, int, void*)+0x197>
c001714c:	83 ec 0c             	sub    esp,0xc
c001714f:	68 14 01 00 00       	push   0x114
c0017154:	e8 09 b0 ff ff       	call   c0012162 <operator new(unsigned long)>
c0017159:	83 c4 10             	add    esp,0x10
c001715c:	89 c3                	mov    ebx,eax
c001715e:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0017163:	83 ec 04             	sub    esp,0x4
c0017166:	50                   	push   eax
c0017167:	68 02 7b 02 c0       	push   0xc0027b02
c001716c:	53                   	push   ebx
c001716d:	e8 0e b6 ff ff       	call   c0012780 <File::File(char const*, Process*)>
c0017172:	83 c4 10             	add    esp,0x10
c0017175:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017179:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001717e:	74 17                	je     c0017197 <ACPI::open(int, int, void*)+0x113>
c0017180:	83 ec 0c             	sub    esp,0xc
c0017183:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017187:	e8 c6 b8 ff ff       	call   c0012a52 <File::exists()>
c001718c:	83 c4 10             	add    esp,0x10
c001718f:	84 c0                	test   al,al
c0017191:	74 04                	je     c0017197 <ACPI::open(int, int, void*)+0x113>
c0017193:	b0 01                	mov    al,0x1
c0017195:	eb 02                	jmp    c0017199 <ACPI::open(int, int, void*)+0x115>
c0017197:	b0 00                	mov    al,0x0
c0017199:	84 c0                	test   al,al
c001719b:	74 25                	je     c00171c2 <ACPI::open(int, int, void*)+0x13e>
c001719d:	8b 1d 08 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a408
c00171a3:	83 ec 08             	sub    esp,0x8
c00171a6:	6a 01                	push   0x1
c00171a8:	68 02 7b 02 c0       	push   0xc0027b02
c00171ad:	e8 c0 41 00 00       	call   c001b372 <Thr::loadDLL(char const*, bool)>
c00171b2:	83 c4 10             	add    esp,0x10
c00171b5:	83 ec 08             	sub    esp,0x8
c00171b8:	53                   	push   ebx
c00171b9:	50                   	push   eax
c00171ba:	e8 79 43 00 00       	call   c001b538 <Thr::executeDLL(unsigned long, void*)>
c00171bf:	83 c4 10             	add    esp,0x10
c00171c2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00171c7:	74 1e                	je     c00171e7 <ACPI::open(int, int, void*)+0x163>
c00171c9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00171ce:	74 17                	je     c00171e7 <ACPI::open(int, int, void*)+0x163>
c00171d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00171d6:	83 c0 08             	add    eax,0x8
c00171d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00171db:	83 ec 0c             	sub    esp,0xc
c00171de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00171e2:	ff d0                	call   eax
c00171e4:	83 c4 10             	add    esp,0x10
c00171e7:	a1 a8 ac 02 c0       	mov    eax,ds:0xc002aca8
c00171ec:	83 ec 08             	sub    esp,0x8
c00171ef:	68 1f 7b 02 c0       	push   0xc0027b1f
c00171f4:	50                   	push   eax
c00171f5:	e8 c4 f7 ff ff       	call   c00169be <findDataTable(unsigned char*, char*)>
c00171fa:	83 c4 10             	add    esp,0x10
c00171fd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017201:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0017206:	74 13                	je     c001721b <ACPI::open(int, int, void*)+0x197>
c0017208:	83 ec 08             	sub    esp,0x8
c001720b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001720f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017213:	e8 24 fe ff ff       	call   c001703c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0017218:	83 c4 10             	add    esp,0x10
c001721b:	b8 00 00 00 00       	mov    eax,0x0
c0017220:	83 c4 18             	add    esp,0x18
c0017223:	5b                   	pop    ebx
c0017224:	c3                   	ret    
c0017225:	90                   	nop

c0017226 <ACPI::sleep()>:
c0017226:	83 ec 0c             	sub    esp,0xc
c0017229:	a1 80 aa 02 c0       	mov    eax,ds:0xc002aa80
c001722e:	85 c0                	test   eax,eax
c0017230:	74 07                	je     c0017239 <ACPI::sleep()+0x13>
c0017232:	a1 80 aa 02 c0       	mov    eax,ds:0xc002aa80
c0017237:	ff d0                	call   eax
c0017239:	90                   	nop
c001723a:	83 c4 0c             	add    esp,0xc
c001723d:	c3                   	ret    

c001723e <CPU::close(int, int, void*)>:
c001723e:	31 c0                	xor    eax,eax
c0017240:	c3                   	ret    
c0017241:	90                   	nop

c0017242 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0017242:	55                   	push   ebp
c0017243:	57                   	push   edi
c0017244:	56                   	push   esi
c0017245:	53                   	push   ebx
c0017246:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001724a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001724e:	89 ce                	mov    esi,ecx
c0017250:	89 d5                	mov    ebp,edx
c0017252:	80 f9 04             	cmp    cl,0x4
c0017255:	75 28                	jne    c001727f <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0017257:	8d 42 f9             	lea    eax,[edx-0x7]
c001725a:	3c 03                	cmp    al,0x3
c001725c:	0f 86 63 01 00 00    	jbe    c00173c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017262:	80 fa 03             	cmp    dl,0x3
c0017265:	0f 84 5a 01 00 00    	je     c00173c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001726b:	8d 7a f2             	lea    edi,[edx-0xe]
c001726e:	b8 b0 98 02 c0       	mov    eax,0xc00298b0
c0017273:	89 fb                	mov    ebx,edi
c0017275:	80 fb 01             	cmp    bl,0x1
c0017278:	77 4e                	ja     c00172c8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001727a:	e9 52 01 00 00       	jmp    c00173d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001727f:	80 f9 05             	cmp    cl,0x5
c0017282:	75 4d                	jne    c00172d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0017284:	b8 c0 98 02 c0       	mov    eax,0xc00298c0
c0017289:	80 fa 03             	cmp    dl,0x3
c001728c:	0f 86 3f 01 00 00    	jbe    c00173d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017292:	8d 7a fa             	lea    edi,[edx-0x6]
c0017295:	b8 d0 98 02 c0       	mov    eax,0xc00298d0
c001729a:	89 fb                	mov    ebx,edi
c001729c:	80 fb 01             	cmp    bl,0x1
c001729f:	0f 86 2c 01 00 00    	jbe    c00173d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00172a5:	b8 e0 98 02 c0       	mov    eax,0xc00298e0
c00172aa:	80 fa 08             	cmp    dl,0x8
c00172ad:	0f 84 1e 01 00 00    	je     c00173d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00172b3:	89 d7                	mov    edi,edx
c00172b5:	b8 f0 98 02 c0       	mov    eax,0xc00298f0
c00172ba:	83 e7 fb             	and    edi,0xfffffffb
c00172bd:	89 fb                	mov    ebx,edi
c00172bf:	80 fb 09             	cmp    bl,0x9
c00172c2:	0f 84 09 01 00 00    	je     c00173d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00172c8:	31 c0                	xor    eax,eax
c00172ca:	89 eb                	mov    ebx,ebp
c00172cc:	0f b6 fb             	movzx  edi,bl
c00172cf:	eb 30                	jmp    c0017301 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00172d1:	31 c0                	xor    eax,eax
c00172d3:	80 f9 06             	cmp    cl,0x6
c00172d6:	75 f2                	jne    c00172ca <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00172d8:	80 fa 0a             	cmp    dl,0xa
c00172db:	77 ed                	ja     c00172ca <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00172dd:	bf de 05 00 00       	mov    edi,0x5de
c00172e2:	0f a3 d7             	bt     edi,edx
c00172e5:	73 e3                	jae    c00172ca <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00172e7:	b8 00 99 02 c0       	mov    eax,0xc0029900
c00172ec:	e9 e0 00 00 00       	jmp    c00173d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00172f1:	39 c7                	cmp    edi,eax
c00172f3:	0f 84 d3 00 00 00    	je     c00173cc <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00172f9:	40                   	inc    eax
c00172fa:	3d d0 00 00 00       	cmp    eax,0xd0
c00172ff:	74 09                	je     c001730a <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0017301:	89 f3                	mov    ebx,esi
c0017303:	80 fb 0f             	cmp    bl,0xf
c0017306:	75 f1                	jne    c00172f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0017308:	eb e7                	jmp    c00172f1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001730a:	80 f9 10             	cmp    cl,0x10
c001730d:	75 14                	jne    c0017323 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001730f:	8d 42 fc             	lea    eax,[edx-0x4]
c0017312:	83 e0 fb             	and    eax,0xfffffffb
c0017315:	3c 02                	cmp    al,0x2
c0017317:	76 34                	jbe    c001734d <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0017319:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c001731e:	80 fa 02             	cmp    dl,0x2
c0017321:	eb 24                	jmp    c0017347 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0017323:	80 f9 11             	cmp    cl,0x11
c0017326:	75 13                	jne    c001733b <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0017328:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c001732d:	80 fa 03             	cmp    dl,0x3
c0017330:	0f 85 9b 00 00 00    	jne    c00173d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017336:	e9 91 00 00 00       	jmp    c00173cc <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001733b:	80 f9 12             	cmp    cl,0x12
c001733e:	75 14                	jne    c0017354 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0017340:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c0017345:	fe ca                	dec    dl
c0017347:	0f 85 84 00 00 00    	jne    c00173d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001734d:	b8 20 99 02 c0       	mov    eax,0xc0029920
c0017352:	eb 7d                	jmp    c00173d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017354:	80 f9 14             	cmp    cl,0x14
c0017357:	75 12                	jne    c001736b <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0017359:	4a                   	dec    edx
c001735a:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c001735f:	80 fa 01             	cmp    dl,0x1
c0017362:	77 6d                	ja     c00173d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017364:	b8 30 99 02 c0       	mov    eax,0xc0029930
c0017369:	eb 66                	jmp    c00173d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001736b:	80 f9 15             	cmp    cl,0x15
c001736e:	75 31                	jne    c00173a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0017370:	b8 40 99 02 c0       	mov    eax,0xc0029940
c0017375:	80 fa 01             	cmp    dl,0x1
c0017378:	74 57                	je     c00173d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001737a:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c001737f:	80 fa 13             	cmp    dl,0x13
c0017382:	76 0c                	jbe    c0017390 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0017384:	80 fa 30             	cmp    dl,0x30
c0017387:	75 48                	jne    c00173d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017389:	b8 60 99 02 c0       	mov    eax,0xc0029960
c001738e:	eb 41                	jmp    c00173d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017390:	b9 04 00 09 00       	mov    ecx,0x90004
c0017395:	0f a3 d1             	bt     ecx,edx
c0017398:	73 37                	jae    c00173d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001739a:	b8 50 99 02 c0       	mov    eax,0xc0029950
c001739f:	eb 30                	jmp    c00173d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173a1:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c00173a6:	80 f9 16             	cmp    cl,0x16
c00173a9:	75 26                	jne    c00173d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173ab:	b8 70 99 02 c0       	mov    eax,0xc0029970
c00173b0:	84 d2                	test   dl,dl
c00173b2:	74 1d                	je     c00173d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173b4:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c00173b9:	80 fa 30             	cmp    dl,0x30
c00173bc:	75 13                	jne    c00173d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173be:	b8 80 99 02 c0       	mov    eax,0xc0029980
c00173c3:	eb 0c                	jmp    c00173d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173c5:	b8 a0 98 02 c0       	mov    eax,0xc00298a0
c00173ca:	eb 05                	jmp    c00173d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173cc:	b8 10 99 02 c0       	mov    eax,0xc0029910
c00173d1:	5b                   	pop    ebx
c00173d2:	5e                   	pop    esi
c00173d3:	5f                   	pop    edi
c00173d4:	5d                   	pop    ebp
c00173d5:	c3                   	ret    

c00173d6 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00173d6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00173da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00173de:	80 f9 04             	cmp    cl,0x4
c00173e1:	75 6b                	jne    c001744e <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00173e3:	b8 00 97 02 c0       	mov    eax,0xc0029700
c00173e8:	80 fa 01             	cmp    dl,0x1
c00173eb:	0f 86 92 02 00 00    	jbe    c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00173f1:	b8 10 97 02 c0       	mov    eax,0xc0029710
c00173f6:	80 fa 02             	cmp    dl,0x2
c00173f9:	0f 84 84 02 00 00    	je     c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00173ff:	b8 20 97 02 c0       	mov    eax,0xc0029720
c0017404:	80 fa 03             	cmp    dl,0x3
c0017407:	0f 84 76 02 00 00    	je     c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001740d:	b8 30 97 02 c0       	mov    eax,0xc0029730
c0017412:	80 fa 04             	cmp    dl,0x4
c0017415:	0f 84 68 02 00 00    	je     c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001741b:	b8 40 97 02 c0       	mov    eax,0xc0029740
c0017420:	80 fa 05             	cmp    dl,0x5
c0017423:	0f 84 5a 02 00 00    	je     c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017429:	b8 20 97 02 c0       	mov    eax,0xc0029720
c001742e:	80 fa 07             	cmp    dl,0x7
c0017431:	0f 84 4c 02 00 00    	je     c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017437:	83 ea 08             	sub    edx,0x8
c001743a:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c001743f:	80 fa 01             	cmp    dl,0x1
c0017442:	0f 87 3b 02 00 00    	ja     c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017448:	b8 50 97 02 c0       	mov    eax,0xc0029750
c001744d:	c3                   	ret    
c001744e:	80 f9 05             	cmp    cl,0x5
c0017451:	75 45                	jne    c0017498 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0017453:	8d 4a ff             	lea    ecx,[edx-0x1]
c0017456:	b8 60 97 02 c0       	mov    eax,0xc0029760
c001745b:	80 f9 02             	cmp    cl,0x2
c001745e:	0f 86 1f 02 00 00    	jbe    c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017464:	80 fa 04             	cmp    dl,0x4
c0017467:	0f 84 f3 01 00 00    	je     c0017660 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c001746d:	80 fa 07             	cmp    dl,0x7
c0017470:	0f 84 0d 02 00 00    	je     c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017476:	b8 70 97 02 c0       	mov    eax,0xc0029770
c001747b:	80 fa 08             	cmp    dl,0x8
c001747e:	0f 84 ff 01 00 00    	je     c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017484:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c0017489:	80 fa 09             	cmp    dl,0x9
c001748c:	0f 85 f1 01 00 00    	jne    c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017492:	b8 80 97 02 c0       	mov    eax,0xc0029780
c0017497:	c3                   	ret    
c0017498:	80 f9 06             	cmp    cl,0x6
c001749b:	0f 85 85 01 00 00    	jne    c0017626 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00174a1:	b8 90 97 02 c0       	mov    eax,0xc0029790
c00174a6:	80 fa 01             	cmp    dl,0x1
c00174a9:	0f 84 d4 01 00 00    	je     c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00174af:	8d 42 fb             	lea    eax,[edx-0x5]
c00174b2:	3c 01                	cmp    al,0x1
c00174b4:	0f 86 ac 01 00 00    	jbe    c0017666 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00174ba:	80 fa 03             	cmp    dl,0x3
c00174bd:	0f 84 a3 01 00 00    	je     c0017666 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00174c3:	8d 4a f9             	lea    ecx,[edx-0x7]
c00174c6:	b8 b0 97 02 c0       	mov    eax,0xc00297b0
c00174cb:	80 f9 01             	cmp    cl,0x1
c00174ce:	0f 86 af 01 00 00    	jbe    c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00174d4:	80 fa 09             	cmp    dl,0x9
c00174d7:	0f 84 8f 01 00 00    	je     c001766c <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00174dd:	8d 4a f6             	lea    ecx,[edx-0xa]
c00174e0:	80 f9 01             	cmp    cl,0x1
c00174e3:	0f 86 9a 01 00 00    	jbe    c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00174e9:	b8 c0 97 02 c0       	mov    eax,0xc00297c0
c00174ee:	80 fa 0d             	cmp    dl,0xd
c00174f1:	0f 84 8c 01 00 00    	je     c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00174f7:	b8 d0 97 02 c0       	mov    eax,0xc00297d0
c00174fc:	80 fa 0e             	cmp    dl,0xe
c00174ff:	0f 84 7e 01 00 00    	je     c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017505:	b8 e0 97 02 c0       	mov    eax,0xc00297e0
c001750a:	80 fa 0f             	cmp    dl,0xf
c001750d:	0f 84 70 01 00 00    	je     c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017513:	b8 c0 97 02 c0       	mov    eax,0xc00297c0
c0017518:	80 fa 15             	cmp    dl,0x15
c001751b:	0f 84 62 01 00 00    	je     c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017521:	8d 4a ea             	lea    ecx,[edx-0x16]
c0017524:	b8 e0 97 02 c0       	mov    eax,0xc00297e0
c0017529:	80 f9 01             	cmp    cl,0x1
c001752c:	0f 86 51 01 00 00    	jbe    c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017532:	80 fa 1a             	cmp    dl,0x1a
c0017535:	0f 84 37 01 00 00    	je     c0017672 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c001753b:	80 fa 1c             	cmp    dl,0x1c
c001753e:	0f 84 34 01 00 00    	je     c0017678 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0017544:	80 fa 1d             	cmp    dl,0x1d
c0017547:	0f 84 36 01 00 00    	je     c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001754d:	b8 10 98 02 c0       	mov    eax,0xc0029810
c0017552:	80 fa 25             	cmp    dl,0x25
c0017555:	0f 84 28 01 00 00    	je     c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001755b:	8d 4a da             	lea    ecx,[edx-0x26]
c001755e:	b8 00 98 02 c0       	mov    eax,0xc0029800
c0017563:	80 f9 01             	cmp    cl,0x1
c0017566:	0f 86 17 01 00 00    	jbe    c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001756c:	b8 20 98 02 c0       	mov    eax,0xc0029820
c0017571:	80 fa 2a             	cmp    dl,0x2a
c0017574:	0f 84 09 01 00 00    	je     c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001757a:	b8 10 98 02 c0       	mov    eax,0xc0029810
c001757f:	80 fa 2c             	cmp    dl,0x2c
c0017582:	0f 84 fb 00 00 00    	je     c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017588:	b8 20 98 02 c0       	mov    eax,0xc0029820
c001758d:	80 fa 2d             	cmp    dl,0x2d
c0017590:	0f 84 ed 00 00 00    	je     c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017596:	b8 f0 97 02 c0       	mov    eax,0xc00297f0
c001759b:	80 fa 2e             	cmp    dl,0x2e
c001759e:	0f 84 df 00 00 00    	je     c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175a4:	b8 10 98 02 c0       	mov    eax,0xc0029810
c00175a9:	80 fa 2f             	cmp    dl,0x2f
c00175ac:	0f 84 d1 00 00 00    	je     c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175b2:	8d 4a cb             	lea    ecx,[edx-0x35]
c00175b5:	b8 00 98 02 c0       	mov    eax,0xc0029800
c00175ba:	80 f9 01             	cmp    cl,0x1
c00175bd:	0f 86 c0 00 00 00    	jbe    c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175c3:	b8 30 98 02 c0       	mov    eax,0xc0029830
c00175c8:	80 fa 37             	cmp    dl,0x37
c00175cb:	0f 84 b2 00 00 00    	je     c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175d1:	b8 40 98 02 c0       	mov    eax,0xc0029840
c00175d6:	80 fa 3a             	cmp    dl,0x3a
c00175d9:	0f 84 a4 00 00 00    	je     c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175df:	b8 50 98 02 c0       	mov    eax,0xc0029850
c00175e4:	80 fa 3c             	cmp    dl,0x3c
c00175e7:	0f 84 96 00 00 00    	je     c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175ed:	b8 60 98 02 c0       	mov    eax,0xc0029860
c00175f2:	80 fa 3d             	cmp    dl,0x3d
c00175f5:	0f 84 88 00 00 00    	je     c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175fb:	b8 40 98 02 c0       	mov    eax,0xc0029840
c0017600:	80 fa 3e             	cmp    dl,0x3e
c0017603:	74 7e                	je     c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017605:	8d 42 bb             	lea    eax,[edx-0x45]
c0017608:	3c 01                	cmp    al,0x1
c001760a:	76 72                	jbe    c001767e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001760c:	80 fa 3f             	cmp    dl,0x3f
c001760f:	74 6d                	je     c001767e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017611:	80 fa 4a             	cmp    dl,0x4a
c0017614:	74 0a                	je     c0017620 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0017616:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c001761b:	80 fa 4d             	cmp    dl,0x4d
c001761e:	75 63                	jne    c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017620:	b8 30 98 02 c0       	mov    eax,0xc0029830
c0017625:	c3                   	ret    
c0017626:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c001762b:	80 f9 0b             	cmp    cl,0xb
c001762e:	75 0a                	jne    c001763a <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0017630:	fe ca                	dec    dl
c0017632:	75 4f                	jne    c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017634:	b8 70 98 02 c0       	mov    eax,0xc0029870
c0017639:	c3                   	ret    
c001763a:	80 f9 0f             	cmp    cl,0xf
c001763d:	75 44                	jne    c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001763f:	b8 80 98 02 c0       	mov    eax,0xc0029880
c0017644:	80 fa 02             	cmp    dl,0x2
c0017647:	76 3a                	jbe    c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017649:	8d 42 fd             	lea    eax,[edx-0x3]
c001764c:	3c 01                	cmp    al,0x1
c001764e:	76 0a                	jbe    c001765a <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0017650:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c0017655:	80 fa 06             	cmp    dl,0x6
c0017658:	75 29                	jne    c0017683 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001765a:	b8 90 98 02 c0       	mov    eax,0xc0029890
c001765f:	c3                   	ret    
c0017660:	b8 70 97 02 c0       	mov    eax,0xc0029770
c0017665:	c3                   	ret    
c0017666:	b8 a0 97 02 c0       	mov    eax,0xc00297a0
c001766b:	c3                   	ret    
c001766c:	b8 c0 97 02 c0       	mov    eax,0xc00297c0
c0017671:	c3                   	ret    
c0017672:	b8 f0 97 02 c0       	mov    eax,0xc00297f0
c0017677:	c3                   	ret    
c0017678:	b8 00 98 02 c0       	mov    eax,0xc0029800
c001767d:	c3                   	ret    
c001767e:	b8 50 98 02 c0       	mov    eax,0xc0029850
c0017683:	c3                   	ret    

c0017684 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0017684:	60                   	pusha  
c0017685:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017689:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001768d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017691:	9c                   	pushf  
c0017692:	fa                   	cli    
c0017693:	0f 09                	wbinvd 
c0017695:	0f 30                	wrmsr  
c0017697:	9d                   	popf   
c0017698:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001769c:	89 02                	mov    DWORD PTR [edx],eax
c001769e:	61                   	popa   
c001769f:	c3                   	ret    

c00176a0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00176a0:	60                   	pusha  
c00176a1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00176a5:	9c                   	pushf  
c00176a6:	fa                   	cli    
c00176a7:	0f 09                	wbinvd 
c00176a9:	31 c0                	xor    eax,eax
c00176ab:	31 d2                	xor    edx,edx
c00176ad:	0f 32                	rdmsr  
c00176af:	9d                   	popf   
c00176b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00176b4:	89 02                	mov    DWORD PTR [edx],eax
c00176b6:	61                   	popa   
c00176b7:	c3                   	ret    

c00176b8 <CPU::AMD_K6_writeback(int, int, int)>:
c00176b8:	56                   	push   esi
c00176b9:	53                   	push   ebx
c00176ba:	83 ec 10             	sub    esp,0x10
c00176bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176c1:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00176c6:	75 5d                	jne    c0017725 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00176c8:	83 f8 08             	cmp    eax,0x8
c00176cb:	75 09                	jne    c00176d6 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00176cd:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00176d2:	7e 13                	jle    c00176e7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00176d4:	eb 30                	jmp    c0017706 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00176d6:	83 f8 06             	cmp    eax,0x6
c00176d9:	7c 4a                	jl     c0017725 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00176db:	83 f8 07             	cmp    eax,0x7
c00176de:	7e 07                	jle    c00176e7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00176e0:	83 f8 09             	cmp    eax,0x9
c00176e3:	74 21                	je     c0017706 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00176e5:	eb 3e                	jmp    c0017725 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00176e7:	89 e6                	mov    esi,esp
c00176e9:	8b 1d 44 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a444
c00176ef:	56                   	push   esi
c00176f0:	c1 eb 15             	shr    ebx,0x15
c00176f3:	68 82 00 00 c0       	push   0xc0000082
c00176f8:	83 e3 7e             	and    ebx,0x7e
c00176fb:	e8 a0 ff ff ff       	call   c00176a0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0017700:	56                   	push   esi
c0017701:	6a 00                	push   0x0
c0017703:	53                   	push   ebx
c0017704:	eb 12                	jmp    c0017718 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0017706:	89 e3                	mov    ebx,esp
c0017708:	53                   	push   ebx
c0017709:	68 82 00 00 c0       	push   0xc0000082
c001770e:	e8 8d ff ff ff       	call   c00176a0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0017713:	53                   	push   ebx
c0017714:	6a 00                	push   0x0
c0017716:	6a 00                	push   0x0
c0017718:	68 82 00 00 c0       	push   0xc0000082
c001771d:	e8 62 ff ff ff       	call   c0017684 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0017722:	83 c4 18             	add    esp,0x18
c0017725:	83 c4 10             	add    esp,0x10
c0017728:	5b                   	pop    ebx
c0017729:	5e                   	pop    esi
c001772a:	c3                   	ret    
c001772b:	90                   	nop

c001772c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001772c:	55                   	push   ebp
c001772d:	57                   	push   edi
c001772e:	56                   	push   esi
c001772f:	53                   	push   ebx
c0017730:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017734:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017738:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001773c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0017740:	39 05 a0 99 02 c0    	cmp    DWORD PTR ds:0xc00299a0,eax
c0017746:	75 23                	jne    c001776b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0017748:	a1 4c ae 02 c0       	mov    eax,ds:0xc002ae4c
c001774d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017751:	89 06                	mov    DWORD PTR [esi],eax
c0017753:	a1 48 ae 02 c0       	mov    eax,ds:0xc002ae48
c0017758:	89 07                	mov    DWORD PTR [edi],eax
c001775a:	a1 44 ae 02 c0       	mov    eax,ds:0xc002ae44
c001775f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0017762:	a1 40 ae 02 c0       	mov    eax,ds:0xc002ae40
c0017767:	89 02                	mov    DWORD PTR [edx],eax
c0017769:	eb 3f                	jmp    c00177aa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001776b:	31 c9                	xor    ecx,ecx
c001776d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017771:	0f a2                	cpuid  
c0017773:	89 06                	mov    DWORD PTR [esi],eax
c0017775:	89 1f                	mov    DWORD PTR [edi],ebx
c0017777:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001777b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001777e:	89 10                	mov    DWORD PTR [eax],edx
c0017780:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017784:	a3 a0 99 02 c0       	mov    ds:0xc00299a0,eax
c0017789:	8b 06                	mov    eax,DWORD PTR [esi]
c001778b:	a3 4c ae 02 c0       	mov    ds:0xc002ae4c,eax
c0017790:	8b 07                	mov    eax,DWORD PTR [edi]
c0017792:	a3 48 ae 02 c0       	mov    ds:0xc002ae48,eax
c0017797:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001779a:	a3 44 ae 02 c0       	mov    ds:0xc002ae44,eax
c001779f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00177a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00177a5:	a3 40 ae 02 c0       	mov    ds:0xc002ae40,eax
c00177aa:	5b                   	pop    ebx
c00177ab:	5e                   	pop    esi
c00177ac:	5f                   	pop    edi
c00177ad:	5d                   	pop    ebp
c00177ae:	c3                   	ret    
c00177af:	90                   	nop

c00177b0 <CPU::cpuidCheckEDX(unsigned int)>:
c00177b0:	83 ec 10             	sub    esp,0x10
c00177b3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177b7:	50                   	push   eax
c00177b8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177bc:	50                   	push   eax
c00177bd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177c1:	50                   	push   eax
c00177c2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177c6:	50                   	push   eax
c00177c7:	6a 01                	push   0x1
c00177c9:	e8 5e ff ff ff       	call   c001772c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00177ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177d2:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00177d6:	0f 95 c0             	setne  al
c00177d9:	83 c4 24             	add    esp,0x24
c00177dc:	c3                   	ret    
c00177dd:	90                   	nop

c00177de <CPU::cpuidCheckECX(unsigned int)>:
c00177de:	83 ec 10             	sub    esp,0x10
c00177e1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177e5:	50                   	push   eax
c00177e6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177ea:	50                   	push   eax
c00177eb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177ef:	50                   	push   eax
c00177f0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177f4:	50                   	push   eax
c00177f5:	6a 01                	push   0x1
c00177f7:	e8 30 ff ff ff       	call   c001772c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00177fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017800:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0017804:	0f 95 c0             	setne  al
c0017807:	83 c4 24             	add    esp,0x24
c001780a:	c3                   	ret    
c001780b:	90                   	nop

c001780c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001780c:	83 ec 10             	sub    esp,0x10
c001780f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017813:	50                   	push   eax
c0017814:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017818:	50                   	push   eax
c0017819:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001781d:	50                   	push   eax
c001781e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017822:	50                   	push   eax
c0017823:	6a 07                	push   0x7
c0017825:	e8 02 ff ff ff       	call   c001772c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001782a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001782e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0017832:	0f 95 c0             	setne  al
c0017835:	83 c4 24             	add    esp,0x24
c0017838:	c3                   	ret    
c0017839:	90                   	nop

c001783a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001783a:	83 ec 10             	sub    esp,0x10
c001783d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017841:	50                   	push   eax
c0017842:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017846:	50                   	push   eax
c0017847:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001784b:	50                   	push   eax
c001784c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017850:	50                   	push   eax
c0017851:	6a 07                	push   0x7
c0017853:	e8 d4 fe ff ff       	call   c001772c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017858:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001785c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0017860:	0f 95 c0             	setne  al
c0017863:	83 c4 24             	add    esp,0x24
c0017866:	c3                   	ret    
c0017867:	90                   	nop

c0017868 <CPU::getNumber()>:
c0017868:	31 c0                	xor    eax,eax
c001786a:	c3                   	ret    
c001786b:	90                   	nop

c001786c <CPU::current()>:
c001786c:	e8 f7 ff ff ff       	call   c0017868 <CPU::getNumber()>
c0017871:	8b 15 08 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a408
c0017877:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c001787e:	c3                   	ret    
c001787f:	90                   	nop

c0017880 <CPU::CPU()>:
c0017880:	83 ec 0c             	sub    esp,0xc
c0017883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017887:	83 ec 08             	sub    esp,0x8
c001788a:	68 2a 7f 02 c0       	push   0xc0027f2a
c001788f:	50                   	push   eax
c0017890:	e8 b7 bf ff ff       	call   c001384c <Device::Device(char const*)>
c0017895:	83 c4 10             	add    esp,0x10
c0017898:	ba 04 80 02 c0       	mov    edx,0xc0028004
c001789d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178a1:	89 10                	mov    DWORD PTR [eax],edx
c00178a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178a7:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00178b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178b5:	05 78 01 00 00       	add    eax,0x178
c00178ba:	83 ec 0c             	sub    esp,0xc
c00178bd:	50                   	push   eax
c00178be:	e8 95 70 ff ff       	call   c000e958 <GDT::GDT()>
c00178c3:	83 c4 10             	add    esp,0x10
c00178c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178ca:	05 7c 09 00 00       	add    eax,0x97c
c00178cf:	83 ec 0c             	sub    esp,0xc
c00178d2:	50                   	push   eax
c00178d3:	e8 e0 72 ff ff       	call   c000ebb8 <IDT::IDT()>
c00178d8:	83 c4 10             	add    esp,0x10
c00178db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178df:	05 7c 11 00 00       	add    eax,0x117c
c00178e4:	83 ec 0c             	sub    esp,0xc
c00178e7:	50                   	push   eax
c00178e8:	e8 0f 93 ff ff       	call   c0010bfc <TSS::TSS()>
c00178ed:	83 c4 10             	add    esp,0x10
c00178f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178f4:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00178fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178ff:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0017909:	90                   	nop
c001790a:	83 c4 0c             	add    esp,0xc
c001790d:	c3                   	ret    

c001790e <CPU::displayFeatures()>:
c001790e:	53                   	push   ebx
c001790f:	83 ec 10             	sub    esp,0x10
c0017912:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017916:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001791c:	68 38 7c 02 c0       	push   0xc0027c38
c0017921:	e8 2b a9 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017926:	59                   	pop    ecx
c0017927:	58                   	pop    eax
c0017928:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c001792e:	50                   	push   eax
c001792f:	68 49 7c 02 c0       	push   0xc0027c49
c0017934:	e8 18 a9 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017939:	58                   	pop    eax
c001793a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017940:	5a                   	pop    edx
c0017941:	c1 e8 0e             	shr    eax,0xe
c0017944:	0f b6 c0             	movzx  eax,al
c0017947:	50                   	push   eax
c0017948:	68 5a 7c 02 c0       	push   0xc0027c5a
c001794d:	e8 ff a8 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017952:	59                   	pop    ecx
c0017953:	58                   	pop    eax
c0017954:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001795a:	66 c1 e8 06          	shr    ax,0x6
c001795e:	0f b6 c0             	movzx  eax,al
c0017961:	50                   	push   eax
c0017962:	68 6b 7c 02 c0       	push   0xc0027c6b
c0017967:	e8 e5 a8 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001796c:	c7 04 24 7e 80 02 c0 	mov    DWORD PTR [esp],0xc002807e
c0017973:	e8 d9 a8 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017978:	83 c4 10             	add    esp,0x10
c001797b:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017980:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0017987:	74 05                	je     c001798e <CPU::displayFeatures()+0x80>
c0017989:	b8 58 69 02 c0       	mov    eax,0xc0026958
c001798e:	52                   	push   edx
c001798f:	52                   	push   edx
c0017990:	50                   	push   eax
c0017991:	68 7c 7c 02 c0       	push   0xc0027c7c
c0017996:	e8 b6 a8 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001799b:	83 c4 10             	add    esp,0x10
c001799e:	b8 58 69 02 c0       	mov    eax,0xc0026958
c00179a3:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00179aa:	78 05                	js     c00179b1 <CPU::displayFeatures()+0xa3>
c00179ac:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c00179b1:	51                   	push   ecx
c00179b2:	51                   	push   ecx
c00179b3:	50                   	push   eax
c00179b4:	68 93 7c 02 c0       	push   0xc0027c93
c00179b9:	e8 93 a8 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00179be:	83 c4 10             	add    esp,0x10
c00179c1:	b8 58 69 02 c0       	mov    eax,0xc0026958
c00179c6:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00179cd:	75 05                	jne    c00179d4 <CPU::displayFeatures()+0xc6>
c00179cf:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c00179d4:	52                   	push   edx
c00179d5:	52                   	push   edx
c00179d6:	50                   	push   eax
c00179d7:	68 aa 7c 02 c0       	push   0xc0027caa
c00179dc:	e8 70 a8 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00179e1:	83 c4 10             	add    esp,0x10
c00179e4:	b8 58 69 02 c0       	mov    eax,0xc0026958
c00179e9:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c00179f0:	75 05                	jne    c00179f7 <CPU::displayFeatures()+0xe9>
c00179f2:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c00179f7:	51                   	push   ecx
c00179f8:	51                   	push   ecx
c00179f9:	50                   	push   eax
c00179fa:	68 c1 7c 02 c0       	push   0xc0027cc1
c00179ff:	e8 4d a8 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017a04:	83 c4 10             	add    esp,0x10
c0017a07:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017a0c:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0017a13:	75 05                	jne    c0017a1a <CPU::displayFeatures()+0x10c>
c0017a15:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017a1a:	52                   	push   edx
c0017a1b:	52                   	push   edx
c0017a1c:	50                   	push   eax
c0017a1d:	68 d8 7c 02 c0       	push   0xc0027cd8
c0017a22:	e8 2a a8 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017a27:	83 c4 10             	add    esp,0x10
c0017a2a:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017a2f:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0017a36:	75 05                	jne    c0017a3d <CPU::displayFeatures()+0x12f>
c0017a38:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017a3d:	51                   	push   ecx
c0017a3e:	51                   	push   ecx
c0017a3f:	50                   	push   eax
c0017a40:	68 ef 7c 02 c0       	push   0xc0027cef
c0017a45:	e8 07 a8 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017a4a:	83 c4 10             	add    esp,0x10
c0017a4d:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017a52:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0017a59:	75 05                	jne    c0017a60 <CPU::displayFeatures()+0x152>
c0017a5b:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017a60:	52                   	push   edx
c0017a61:	52                   	push   edx
c0017a62:	50                   	push   eax
c0017a63:	68 06 7d 02 c0       	push   0xc0027d06
c0017a68:	e8 e4 a7 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017a6d:	83 c4 10             	add    esp,0x10
c0017a70:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017a75:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0017a7c:	75 05                	jne    c0017a83 <CPU::displayFeatures()+0x175>
c0017a7e:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017a83:	51                   	push   ecx
c0017a84:	51                   	push   ecx
c0017a85:	50                   	push   eax
c0017a86:	68 1d 7d 02 c0       	push   0xc0027d1d
c0017a8b:	e8 c1 a7 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017a90:	83 c4 10             	add    esp,0x10
c0017a93:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017a98:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0017a9f:	75 05                	jne    c0017aa6 <CPU::displayFeatures()+0x198>
c0017aa1:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017aa6:	52                   	push   edx
c0017aa7:	52                   	push   edx
c0017aa8:	50                   	push   eax
c0017aa9:	68 34 7d 02 c0       	push   0xc0027d34
c0017aae:	e8 9e a7 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017ab3:	83 c4 10             	add    esp,0x10
c0017ab6:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017abb:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0017ac2:	75 05                	jne    c0017ac9 <CPU::displayFeatures()+0x1bb>
c0017ac4:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017ac9:	51                   	push   ecx
c0017aca:	51                   	push   ecx
c0017acb:	50                   	push   eax
c0017acc:	68 4b 7d 02 c0       	push   0xc0027d4b
c0017ad1:	e8 7b a7 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017ad6:	83 c4 10             	add    esp,0x10
c0017ad9:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017ade:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0017ae5:	75 05                	jne    c0017aec <CPU::displayFeatures()+0x1de>
c0017ae7:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017aec:	52                   	push   edx
c0017aed:	52                   	push   edx
c0017aee:	50                   	push   eax
c0017aef:	68 62 7d 02 c0       	push   0xc0027d62
c0017af4:	e8 58 a7 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017af9:	83 c4 10             	add    esp,0x10
c0017afc:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017b01:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0017b08:	75 05                	jne    c0017b0f <CPU::displayFeatures()+0x201>
c0017b0a:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017b0f:	51                   	push   ecx
c0017b10:	51                   	push   ecx
c0017b11:	50                   	push   eax
c0017b12:	68 79 7d 02 c0       	push   0xc0027d79
c0017b17:	e8 35 a7 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017b1c:	83 c4 10             	add    esp,0x10
c0017b1f:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017b24:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0017b2b:	75 05                	jne    c0017b32 <CPU::displayFeatures()+0x224>
c0017b2d:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017b32:	52                   	push   edx
c0017b33:	52                   	push   edx
c0017b34:	50                   	push   eax
c0017b35:	68 90 7d 02 c0       	push   0xc0027d90
c0017b3a:	e8 12 a7 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017b3f:	83 c4 10             	add    esp,0x10
c0017b42:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017b47:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0017b4e:	78 05                	js     c0017b55 <CPU::displayFeatures()+0x247>
c0017b50:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017b55:	51                   	push   ecx
c0017b56:	51                   	push   ecx
c0017b57:	50                   	push   eax
c0017b58:	68 a7 7d 02 c0       	push   0xc0027da7
c0017b5d:	e8 ef a6 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017b62:	83 c4 10             	add    esp,0x10
c0017b65:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017b6a:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0017b71:	75 05                	jne    c0017b78 <CPU::displayFeatures()+0x26a>
c0017b73:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017b78:	52                   	push   edx
c0017b79:	52                   	push   edx
c0017b7a:	50                   	push   eax
c0017b7b:	68 be 7d 02 c0       	push   0xc0027dbe
c0017b80:	e8 cc a6 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017b85:	83 c4 18             	add    esp,0x18
c0017b88:	5b                   	pop    ebx
c0017b89:	c3                   	ret    

c0017b8a <CPU::detectFeatures()>:
c0017b8a:	55                   	push   ebp
c0017b8b:	57                   	push   edi
c0017b8c:	56                   	push   esi
c0017b8d:	53                   	push   ebx
c0017b8e:	83 ec 50             	sub    esp,0x50
c0017b91:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0017b95:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0017b9f:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0017ba6:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0017bac:	6a 0d                	push   0xd
c0017bae:	6a 00                	push   0x0
c0017bb0:	57                   	push   edi
c0017bb1:	e8 18 8b fe ff       	call   c00006ce <memset>
c0017bb6:	83 c4 10             	add    esp,0x10
c0017bb9:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0017bbe:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0017bc5:	0f 84 20 09 00 00    	je     c00184eb <CPU::detectFeatures()+0x961>
c0017bcb:	83 ec 0c             	sub    esp,0xc
c0017bce:	6a 10                	push   0x10
c0017bd0:	e8 db fb ff ff       	call   c00177b0 <CPU::cpuidCheckEDX(unsigned int)>
c0017bd5:	83 e0 01             	and    eax,0x1
c0017bd8:	8d 14 00             	lea    edx,[eax+eax*1]
c0017bdb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017be1:	83 e0 fd             	and    eax,0xfffffffd
c0017be4:	09 d0                	or     eax,edx
c0017be6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017bec:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0017bf3:	e8 b8 fb ff ff       	call   c00177b0 <CPU::cpuidCheckEDX(unsigned int)>
c0017bf8:	83 e0 01             	and    eax,0x1
c0017bfb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0017c02:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c08:	83 e0 fb             	and    eax,0xfffffffb
c0017c0b:	09 d0                	or     eax,edx
c0017c0d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c13:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0017c1a:	e8 91 fb ff ff       	call   c00177b0 <CPU::cpuidCheckEDX(unsigned int)>
c0017c1f:	83 e0 01             	and    eax,0x1
c0017c22:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0017c29:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c2f:	83 e0 f7             	and    eax,0xfffffff7
c0017c32:	09 d0                	or     eax,edx
c0017c34:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c3a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0017c41:	e8 6a fb ff ff       	call   c00177b0 <CPU::cpuidCheckEDX(unsigned int)>
c0017c46:	83 e0 01             	and    eax,0x1
c0017c49:	c1 e0 04             	shl    eax,0x4
c0017c4c:	88 c2                	mov    dl,al
c0017c4e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c54:	83 e0 ef             	and    eax,0xffffffef
c0017c57:	09 d0                	or     eax,edx
c0017c59:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c5f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0017c66:	e8 45 fb ff ff       	call   c00177b0 <CPU::cpuidCheckEDX(unsigned int)>
c0017c6b:	83 e0 01             	and    eax,0x1
c0017c6e:	c1 e0 05             	shl    eax,0x5
c0017c71:	88 c2                	mov    dl,al
c0017c73:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c79:	83 e0 df             	and    eax,0xffffffdf
c0017c7c:	09 d0                	or     eax,edx
c0017c7e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c84:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0017c8b:	e8 20 fb ff ff       	call   c00177b0 <CPU::cpuidCheckEDX(unsigned int)>
c0017c90:	83 e0 01             	and    eax,0x1
c0017c93:	8d 14 00             	lea    edx,[eax+eax*1]
c0017c96:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0017c9c:	83 e0 fd             	and    eax,0xfffffffd
c0017c9f:	09 d0                	or     eax,edx
c0017ca1:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017ca7:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0017cae:	e8 fd fa ff ff       	call   c00177b0 <CPU::cpuidCheckEDX(unsigned int)>
c0017cb3:	83 e0 01             	and    eax,0x1
c0017cb6:	c1 e0 06             	shl    eax,0x6
c0017cb9:	88 c2                	mov    dl,al
c0017cbb:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017cc1:	83 e0 bf             	and    eax,0xffffffbf
c0017cc4:	09 d0                	or     eax,edx
c0017cc6:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0017ccc:	58                   	pop    eax
c0017ccd:	8d 74 24 28          	lea    esi,[esp+0x28]
c0017cd1:	56                   	push   esi
c0017cd2:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0017cd6:	55                   	push   ebp
c0017cd7:	8d 44 24 28          	lea    eax,[esp+0x28]
c0017cdb:	50                   	push   eax
c0017cdc:	8d 54 24 28          	lea    edx,[esp+0x28]
c0017ce0:	52                   	push   edx
c0017ce1:	6a 00                	push   0x0
c0017ce3:	e8 44 fa ff ff       	call   c001772c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017ce8:	83 c4 1c             	add    esp,0x1c
c0017ceb:	6a 04                	push   0x4
c0017ced:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017cf1:	50                   	push   eax
c0017cf2:	57                   	push   edi
c0017cf3:	e8 a0 89 fe ff       	call   c0000698 <memcpy>
c0017cf8:	83 c4 0c             	add    esp,0xc
c0017cfb:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0017d01:	6a 04                	push   0x4
c0017d03:	56                   	push   esi
c0017d04:	50                   	push   eax
c0017d05:	e8 8e 89 fe ff       	call   c0000698 <memcpy>
c0017d0a:	83 c4 0c             	add    esp,0xc
c0017d0d:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0017d13:	6a 04                	push   0x4
c0017d15:	55                   	push   ebp
c0017d16:	50                   	push   eax
c0017d17:	e8 7c 89 fe ff       	call   c0000698 <memcpy>
c0017d1c:	58                   	pop    eax
c0017d1d:	5a                   	pop    edx
c0017d1e:	68 d5 7d 02 c0       	push   0xc0027dd5
c0017d23:	57                   	push   edi
c0017d24:	e8 95 8a fe ff       	call   c00007be <strcmp>
c0017d29:	83 c4 10             	add    esp,0x10
c0017d2c:	85 c0                	test   eax,eax
c0017d2e:	75 0f                	jne    c0017d3f <CPU::detectFeatures()+0x1b5>
c0017d30:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0017d3a:	e9 22 02 00 00       	jmp    c0017f61 <CPU::detectFeatures()+0x3d7>
c0017d3f:	50                   	push   eax
c0017d40:	50                   	push   eax
c0017d41:	68 e2 7d 02 c0       	push   0xc0027de2
c0017d46:	57                   	push   edi
c0017d47:	e8 72 8a fe ff       	call   c00007be <strcmp>
c0017d4c:	83 c4 10             	add    esp,0x10
c0017d4f:	85 c0                	test   eax,eax
c0017d51:	74 dd                	je     c0017d30 <CPU::detectFeatures()+0x1a6>
c0017d53:	51                   	push   ecx
c0017d54:	51                   	push   ecx
c0017d55:	68 ef 7d 02 c0       	push   0xc0027def
c0017d5a:	57                   	push   edi
c0017d5b:	e8 5e 8a fe ff       	call   c00007be <strcmp>
c0017d60:	83 c4 10             	add    esp,0x10
c0017d63:	85 c0                	test   eax,eax
c0017d65:	74 2a                	je     c0017d91 <CPU::detectFeatures()+0x207>
c0017d67:	52                   	push   edx
c0017d68:	52                   	push   edx
c0017d69:	68 fc 7d 02 c0       	push   0xc0027dfc
c0017d6e:	57                   	push   edi
c0017d6f:	e8 4a 8a fe ff       	call   c00007be <strcmp>
c0017d74:	83 c4 10             	add    esp,0x10
c0017d77:	85 c0                	test   eax,eax
c0017d79:	74 16                	je     c0017d91 <CPU::detectFeatures()+0x207>
c0017d7b:	50                   	push   eax
c0017d7c:	50                   	push   eax
c0017d7d:	68 09 7e 02 c0       	push   0xc0027e09
c0017d82:	57                   	push   edi
c0017d83:	e8 36 8a fe ff       	call   c00007be <strcmp>
c0017d88:	83 c4 10             	add    esp,0x10
c0017d8b:	85 c0                	test   eax,eax
c0017d8d:	74 48                	je     c0017dd7 <CPU::detectFeatures()+0x24d>
c0017d8f:	eb 0f                	jmp    c0017da0 <CPU::detectFeatures()+0x216>
c0017d91:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0017d9b:	e9 c1 01 00 00       	jmp    c0017f61 <CPU::detectFeatures()+0x3d7>
c0017da0:	50                   	push   eax
c0017da1:	50                   	push   eax
c0017da2:	68 16 7e 02 c0       	push   0xc0027e16
c0017da7:	57                   	push   edi
c0017da8:	e8 11 8a fe ff       	call   c00007be <strcmp>
c0017dad:	83 c4 10             	add    esp,0x10
c0017db0:	85 c0                	test   eax,eax
c0017db2:	74 23                	je     c0017dd7 <CPU::detectFeatures()+0x24d>
c0017db4:	50                   	push   eax
c0017db5:	50                   	push   eax
c0017db6:	68 23 7e 02 c0       	push   0xc0027e23
c0017dbb:	57                   	push   edi
c0017dbc:	e8 fd 89 fe ff       	call   c00007be <strcmp>
c0017dc1:	83 c4 10             	add    esp,0x10
c0017dc4:	85 c0                	test   eax,eax
c0017dc6:	75 1e                	jne    c0017de6 <CPU::detectFeatures()+0x25c>
c0017dc8:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0017dd2:	e9 8a 01 00 00       	jmp    c0017f61 <CPU::detectFeatures()+0x3d7>
c0017dd7:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0017de1:	e9 7b 01 00 00       	jmp    c0017f61 <CPU::detectFeatures()+0x3d7>
c0017de6:	50                   	push   eax
c0017de7:	50                   	push   eax
c0017de8:	68 30 7e 02 c0       	push   0xc0027e30
c0017ded:	57                   	push   edi
c0017dee:	e8 cb 89 fe ff       	call   c00007be <strcmp>
c0017df3:	83 c4 10             	add    esp,0x10
c0017df6:	85 c0                	test   eax,eax
c0017df8:	75 0f                	jne    c0017e09 <CPU::detectFeatures()+0x27f>
c0017dfa:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0017e04:	e9 58 01 00 00       	jmp    c0017f61 <CPU::detectFeatures()+0x3d7>
c0017e09:	50                   	push   eax
c0017e0a:	50                   	push   eax
c0017e0b:	68 ef 7d 02 c0       	push   0xc0027def
c0017e10:	57                   	push   edi
c0017e11:	e8 a8 89 fe ff       	call   c00007be <strcmp>
c0017e16:	83 c4 10             	add    esp,0x10
c0017e19:	85 c0                	test   eax,eax
c0017e1b:	75 0f                	jne    c0017e2c <CPU::detectFeatures()+0x2a2>
c0017e1d:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0017e27:	e9 35 01 00 00       	jmp    c0017f61 <CPU::detectFeatures()+0x3d7>
c0017e2c:	50                   	push   eax
c0017e2d:	50                   	push   eax
c0017e2e:	68 3d 7e 02 c0       	push   0xc0027e3d
c0017e33:	57                   	push   edi
c0017e34:	e8 85 89 fe ff       	call   c00007be <strcmp>
c0017e39:	83 c4 10             	add    esp,0x10
c0017e3c:	85 c0                	test   eax,eax
c0017e3e:	75 0f                	jne    c0017e4f <CPU::detectFeatures()+0x2c5>
c0017e40:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0017e4a:	e9 12 01 00 00       	jmp    c0017f61 <CPU::detectFeatures()+0x3d7>
c0017e4f:	51                   	push   ecx
c0017e50:	51                   	push   ecx
c0017e51:	68 4a 7e 02 c0       	push   0xc0027e4a
c0017e56:	57                   	push   edi
c0017e57:	e8 62 89 fe ff       	call   c00007be <strcmp>
c0017e5c:	83 c4 10             	add    esp,0x10
c0017e5f:	85 c0                	test   eax,eax
c0017e61:	75 0f                	jne    c0017e72 <CPU::detectFeatures()+0x2e8>
c0017e63:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0017e6d:	e9 ef 00 00 00       	jmp    c0017f61 <CPU::detectFeatures()+0x3d7>
c0017e72:	52                   	push   edx
c0017e73:	52                   	push   edx
c0017e74:	68 57 7e 02 c0       	push   0xc0027e57
c0017e79:	57                   	push   edi
c0017e7a:	e8 3f 89 fe ff       	call   c00007be <strcmp>
c0017e7f:	83 c4 10             	add    esp,0x10
c0017e82:	85 c0                	test   eax,eax
c0017e84:	75 0f                	jne    c0017e95 <CPU::detectFeatures()+0x30b>
c0017e86:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0017e90:	e9 cc 00 00 00       	jmp    c0017f61 <CPU::detectFeatures()+0x3d7>
c0017e95:	50                   	push   eax
c0017e96:	50                   	push   eax
c0017e97:	68 64 7e 02 c0       	push   0xc0027e64
c0017e9c:	57                   	push   edi
c0017e9d:	e8 1c 89 fe ff       	call   c00007be <strcmp>
c0017ea2:	83 c4 10             	add    esp,0x10
c0017ea5:	85 c0                	test   eax,eax
c0017ea7:	75 0f                	jne    c0017eb8 <CPU::detectFeatures()+0x32e>
c0017ea9:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0017eb3:	e9 a9 00 00 00       	jmp    c0017f61 <CPU::detectFeatures()+0x3d7>
c0017eb8:	50                   	push   eax
c0017eb9:	50                   	push   eax
c0017eba:	68 71 7e 02 c0       	push   0xc0027e71
c0017ebf:	57                   	push   edi
c0017ec0:	e8 f9 88 fe ff       	call   c00007be <strcmp>
c0017ec5:	83 c4 10             	add    esp,0x10
c0017ec8:	85 c0                	test   eax,eax
c0017eca:	75 0f                	jne    c0017edb <CPU::detectFeatures()+0x351>
c0017ecc:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0017ed6:	e9 86 00 00 00       	jmp    c0017f61 <CPU::detectFeatures()+0x3d7>
c0017edb:	50                   	push   eax
c0017edc:	50                   	push   eax
c0017edd:	68 7e 7e 02 c0       	push   0xc0027e7e
c0017ee2:	57                   	push   edi
c0017ee3:	e8 d6 88 fe ff       	call   c00007be <strcmp>
c0017ee8:	83 c4 10             	add    esp,0x10
c0017eeb:	85 c0                	test   eax,eax
c0017eed:	75 0c                	jne    c0017efb <CPU::detectFeatures()+0x371>
c0017eef:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0017ef9:	eb 66                	jmp    c0017f61 <CPU::detectFeatures()+0x3d7>
c0017efb:	50                   	push   eax
c0017efc:	50                   	push   eax
c0017efd:	68 8b 7e 02 c0       	push   0xc0027e8b
c0017f02:	57                   	push   edi
c0017f03:	e8 b6 88 fe ff       	call   c00007be <strcmp>
c0017f08:	83 c4 10             	add    esp,0x10
c0017f0b:	85 c0                	test   eax,eax
c0017f0d:	75 0c                	jne    c0017f1b <CPU::detectFeatures()+0x391>
c0017f0f:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0017f19:	eb 46                	jmp    c0017f61 <CPU::detectFeatures()+0x3d7>
c0017f1b:	50                   	push   eax
c0017f1c:	50                   	push   eax
c0017f1d:	68 98 7e 02 c0       	push   0xc0027e98
c0017f22:	57                   	push   edi
c0017f23:	e8 96 88 fe ff       	call   c00007be <strcmp>
c0017f28:	83 c4 10             	add    esp,0x10
c0017f2b:	85 c0                	test   eax,eax
c0017f2d:	74 e0                	je     c0017f0f <CPU::detectFeatures()+0x385>
c0017f2f:	50                   	push   eax
c0017f30:	50                   	push   eax
c0017f31:	68 a5 7e 02 c0       	push   0xc0027ea5
c0017f36:	57                   	push   edi
c0017f37:	e8 82 88 fe ff       	call   c00007be <strcmp>
c0017f3c:	83 c4 10             	add    esp,0x10
c0017f3f:	85 c0                	test   eax,eax
c0017f41:	74 cc                	je     c0017f0f <CPU::detectFeatures()+0x385>
c0017f43:	51                   	push   ecx
c0017f44:	51                   	push   ecx
c0017f45:	68 b2 7e 02 c0       	push   0xc0027eb2
c0017f4a:	57                   	push   edi
c0017f4b:	e8 6e 88 fe ff       	call   c00007be <strcmp>
c0017f50:	83 c4 10             	add    esp,0x10
c0017f53:	85 c0                	test   eax,eax
c0017f55:	74 b8                	je     c0017f0f <CPU::detectFeatures()+0x385>
c0017f57:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0017f61:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0017f66:	0f 86 be 00 00 00    	jbe    c001802a <CPU::detectFeatures()+0x4a0>
c0017f6c:	83 ec 0c             	sub    esp,0xc
c0017f6f:	68 80 00 00 00       	push   0x80
c0017f74:	e8 93 f8 ff ff       	call   c001780c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0017f79:	83 e0 01             	and    eax,0x1
c0017f7c:	c1 e0 06             	shl    eax,0x6
c0017f7f:	88 c2                	mov    dl,al
c0017f81:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017f87:	83 e0 bf             	and    eax,0xffffffbf
c0017f8a:	09 d0                	or     eax,edx
c0017f8c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017f92:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0017f99:	e8 6e f8 ff ff       	call   c001780c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0017f9e:	83 e0 01             	and    eax,0x1
c0017fa1:	c1 e0 04             	shl    eax,0x4
c0017fa4:	88 c2                	mov    dl,al
c0017fa6:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017fac:	83 e0 ef             	and    eax,0xffffffef
c0017faf:	09 d0                	or     eax,edx
c0017fb1:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0017fb7:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0017fbe:	e8 49 f8 ff ff       	call   c001780c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0017fc3:	c1 e0 07             	shl    eax,0x7
c0017fc6:	88 c2                	mov    dl,al
c0017fc8:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017fce:	83 e0 7f             	and    eax,0x7f
c0017fd1:	09 d0                	or     eax,edx
c0017fd3:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017fd9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0017fe0:	e8 55 f8 ff ff       	call   c001783a <CPU::cpuidCheckExtendedECX(unsigned int)>
c0017fe5:	83 e0 01             	and    eax,0x1
c0017fe8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0017fef:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017ff5:	83 e0 f7             	and    eax,0xfffffff7
c0017ff8:	09 d0                	or     eax,edx
c0017ffa:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018000:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018007:	e8 2e f8 ff ff       	call   c001783a <CPU::cpuidCheckExtendedECX(unsigned int)>
c001800c:	83 c4 10             	add    esp,0x10
c001800f:	83 e0 01             	and    eax,0x1
c0018012:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018019:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001801f:	83 e0 fb             	and    eax,0xfffffffb
c0018022:	09 d0                	or     eax,edx
c0018024:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001802a:	83 ec 0c             	sub    esp,0xc
c001802d:	56                   	push   esi
c001802e:	55                   	push   ebp
c001802f:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018033:	57                   	push   edi
c0018034:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018038:	50                   	push   eax
c0018039:	6a 01                	push   0x1
c001803b:	e8 ec f6 ff ff       	call   c001772c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018040:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018044:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001804a:	88 ca                	mov    dl,cl
c001804c:	83 e0 f0             	and    eax,0xfffffff0
c001804f:	83 e2 0f             	and    edx,0xf
c0018052:	09 d0                	or     eax,edx
c0018054:	88 ca                	mov    dl,cl
c0018056:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001805c:	c0 ea 04             	shr    dl,0x4
c001805f:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018063:	0f b6 c2             	movzx  eax,dl
c0018066:	83 c4 20             	add    esp,0x20
c0018069:	c1 e0 06             	shl    eax,0x6
c001806c:	89 c5                	mov    ebp,eax
c001806e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018074:	66 25 3f c0          	and    ax,0xc03f
c0018078:	09 e8                	or     eax,ebp
c001807a:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018081:	89 c8                	mov    eax,ecx
c0018083:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0018089:	c1 e8 08             	shr    eax,0x8
c001808c:	83 e2 3f             	and    edx,0x3f
c001808f:	83 e0 0f             	and    eax,0xf
c0018092:	89 c5                	mov    ebp,eax
c0018094:	c1 e5 06             	shl    ebp,0x6
c0018097:	09 d5                	or     ebp,edx
c0018099:	89 ea                	mov    edx,ebp
c001809b:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00180a1:	88 c2                	mov    dl,al
c00180a3:	c0 ea 02             	shr    dl,0x2
c00180a6:	89 d5                	mov    ebp,edx
c00180a8:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00180ae:	83 e2 c0             	and    edx,0xffffffc0
c00180b1:	09 d5                	or     ebp,edx
c00180b3:	89 ea                	mov    edx,ebp
c00180b5:	89 cd                	mov    ebp,ecx
c00180b7:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00180bd:	c1 ed 0c             	shr    ebp,0xc
c00180c0:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00180c6:	83 e5 03             	and    ebp,0x3
c00180c9:	83 e2 cf             	and    edx,0xffffffcf
c00180cc:	c1 e5 04             	shl    ebp,0x4
c00180cf:	09 d5                	or     ebp,edx
c00180d1:	3c 06                	cmp    al,0x6
c00180d3:	89 ea                	mov    edx,ebp
c00180d5:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00180db:	74 04                	je     c00180e1 <CPU::detectFeatures()+0x557>
c00180dd:	3c 0f                	cmp    al,0xf
c00180df:	75 5c                	jne    c001813d <CPU::detectFeatures()+0x5b3>
c00180e1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00180e5:	89 cd                	mov    ebp,ecx
c00180e7:	c1 ed 10             	shr    ebp,0x10
c00180ea:	c1 e5 04             	shl    ebp,0x4
c00180ed:	09 ea                	or     edx,ebp
c00180ef:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00180f5:	0f b6 d2             	movzx  edx,dl
c00180f8:	66 81 e5 3f c0       	and    bp,0xc03f
c00180fd:	c1 e2 06             	shl    edx,0x6
c0018100:	09 ea                	or     edx,ebp
c0018102:	3c 0f                	cmp    al,0xf
c0018104:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001810b:	75 30                	jne    c001813d <CPU::detectFeatures()+0x5b3>
c001810d:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018113:	c1 e9 14             	shr    ecx,0x14
c0018116:	83 e0 3f             	and    eax,0x3f
c0018119:	83 c1 0f             	add    ecx,0xf
c001811c:	88 ca                	mov    dl,cl
c001811e:	c0 e9 02             	shr    cl,0x2
c0018121:	c1 e2 06             	shl    edx,0x6
c0018124:	09 d0                	or     eax,edx
c0018126:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001812c:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018132:	83 e0 c0             	and    eax,0xffffffc0
c0018135:	09 c1                	or     ecx,eax
c0018137:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001813d:	83 ec 0c             	sub    esp,0xc
c0018140:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018147:	56                   	push   esi
c0018148:	8d 44 24 28          	lea    eax,[esp+0x28]
c001814c:	50                   	push   eax
c001814d:	57                   	push   edi
c001814e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018152:	55                   	push   ebp
c0018153:	68 00 00 00 80       	push   0x80000000
c0018158:	e8 cf f5 ff ff       	call   c001772c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001815d:	83 c4 20             	add    esp,0x20
c0018160:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018168:	8d 44 24 18          	lea    eax,[esp+0x18]
c001816c:	76 1e                	jbe    c001818c <CPU::detectFeatures()+0x602>
c001816e:	83 ec 0c             	sub    esp,0xc
c0018171:	56                   	push   esi
c0018172:	50                   	push   eax
c0018173:	57                   	push   edi
c0018174:	55                   	push   ebp
c0018175:	68 01 00 00 80       	push   0x80000001
c001817a:	e8 ad f5 ff ff       	call   c001772c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001817f:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018189:	83 c4 20             	add    esp,0x20
c001818c:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018192:	83 f8 01             	cmp    eax,0x1
c0018195:	75 6f                	jne    c0018206 <CPU::detectFeatures()+0x67c>
c0018197:	51                   	push   ecx
c0018198:	51                   	push   ecx
c0018199:	68 be 7e 02 c0       	push   0xc0027ebe
c001819e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00181a2:	56                   	push   esi
c00181a3:	e8 c5 85 fe ff       	call   c000076d <strcpy>
c00181a8:	5f                   	pop    edi
c00181a9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00181af:	5d                   	pop    ebp
c00181b0:	66 c1 e8 06          	shr    ax,0x6
c00181b4:	0f b6 c0             	movzx  eax,al
c00181b7:	50                   	push   eax
c00181b8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00181be:	c1 e8 0e             	shr    eax,0xe
c00181c1:	0f b6 c0             	movzx  eax,al
c00181c4:	50                   	push   eax
c00181c5:	e8 0c f2 ff ff       	call   c00173d6 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00181ca:	5a                   	pop    edx
c00181cb:	59                   	pop    ecx
c00181cc:	50                   	push   eax
c00181cd:	56                   	push   esi
c00181ce:	e8 51 86 fe ff       	call   c0000824 <strcat>
c00181d3:	5f                   	pop    edi
c00181d4:	5d                   	pop    ebp
c00181d5:	56                   	push   esi
c00181d6:	53                   	push   ebx
c00181d7:	e8 62 b6 ff ff       	call   c001383e <Device::setName(char const*)>
c00181dc:	58                   	pop    eax
c00181dd:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00181e3:	5a                   	pop    edx
c00181e4:	68 c5 7e 02 c0       	push   0xc0027ec5
c00181e9:	50                   	push   eax
c00181ea:	e8 cf 85 fe ff       	call   c00007be <strcmp>
c00181ef:	83 c4 10             	add    esp,0x10
c00181f2:	85 c0                	test   eax,eax
c00181f4:	0f 85 73 03 00 00    	jne    c001856d <CPU::detectFeatures()+0x9e3>
c00181fa:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018201:	e9 67 03 00 00       	jmp    c001856d <CPU::detectFeatures()+0x9e3>
c0018206:	83 f8 02             	cmp    eax,0x2
c0018209:	0f 85 b5 00 00 00    	jne    c00182c4 <CPU::detectFeatures()+0x73a>
c001820f:	57                   	push   edi
c0018210:	57                   	push   edi
c0018211:	68 d7 7e 02 c0       	push   0xc0027ed7
c0018216:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001821a:	56                   	push   esi
c001821b:	e8 4d 85 fe ff       	call   c000076d <strcpy>
c0018220:	5d                   	pop    ebp
c0018221:	58                   	pop    eax
c0018222:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018228:	66 c1 e8 06          	shr    ax,0x6
c001822c:	0f b6 c0             	movzx  eax,al
c001822f:	50                   	push   eax
c0018230:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018236:	c1 e8 0e             	shr    eax,0xe
c0018239:	0f b6 c0             	movzx  eax,al
c001823c:	50                   	push   eax
c001823d:	e8 00 f0 ff ff       	call   c0017242 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018242:	5a                   	pop    edx
c0018243:	59                   	pop    ecx
c0018244:	50                   	push   eax
c0018245:	56                   	push   esi
c0018246:	e8 d9 85 fe ff       	call   c0000824 <strcat>
c001824b:	5f                   	pop    edi
c001824c:	5d                   	pop    ebp
c001824d:	56                   	push   esi
c001824e:	53                   	push   ebx
c001824f:	e8 ea b5 ff ff       	call   c001383e <Device::setName(char const*)>
c0018254:	58                   	pop    eax
c0018255:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001825b:	5a                   	pop    edx
c001825c:	68 dc 7e 02 c0       	push   0xc0027edc
c0018261:	50                   	push   eax
c0018262:	e8 57 85 fe ff       	call   c00007be <strcmp>
c0018267:	83 c4 10             	add    esp,0x10
c001826a:	85 c0                	test   eax,eax
c001826c:	75 20                	jne    c001828e <CPU::detectFeatures()+0x704>
c001826e:	8b 15 08 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a408
c0018274:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001827a:	a8 01                	test   al,0x1
c001827c:	74 10                	je     c001828e <CPU::detectFeatures()+0x704>
c001827e:	83 e0 fe             	and    eax,0xfffffffe
c0018281:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018287:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001828e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018294:	c1 e8 0e             	shr    eax,0xe
c0018297:	3c 05                	cmp    al,0x5
c0018299:	0f 85 ce 02 00 00    	jne    c001856d <CPU::detectFeatures()+0x9e3>
c001829f:	56                   	push   esi
c00182a0:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00182a6:	83 e0 0f             	and    eax,0xf
c00182a9:	50                   	push   eax
c00182aa:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00182b0:	66 c1 e8 06          	shr    ax,0x6
c00182b4:	0f b6 c0             	movzx  eax,al
c00182b7:	50                   	push   eax
c00182b8:	6a 05                	push   0x5
c00182ba:	e8 f9 f3 ff ff       	call   c00176b8 <CPU::AMD_K6_writeback(int, int, int)>
c00182bf:	e9 1f 02 00 00       	jmp    c00184e3 <CPU::detectFeatures()+0x959>
c00182c4:	8d 50 fd             	lea    edx,[eax-0x3]
c00182c7:	83 fa 01             	cmp    edx,0x1
c00182ca:	76 09                	jbe    c00182d5 <CPU::detectFeatures()+0x74b>
c00182cc:	83 f8 06             	cmp    eax,0x6
c00182cf:	0f 85 91 01 00 00    	jne    c0018466 <CPU::detectFeatures()+0x8dc>
c00182d5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00182db:	c1 ea 0e             	shr    edx,0xe
c00182de:	80 fa 05             	cmp    dl,0x5
c00182e1:	75 7b                	jne    c001835e <CPU::detectFeatures()+0x7d4>
c00182e3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00182e9:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00182ee:	66 81 fa 00 01       	cmp    dx,0x100
c00182f3:	75 0c                	jne    c0018301 <CPU::detectFeatures()+0x777>
c00182f5:	51                   	push   ecx
c00182f6:	51                   	push   ecx
c00182f7:	68 e3 7e 02 c0       	push   0xc0027ee3
c00182fc:	e9 dc 01 00 00       	jmp    c00184dd <CPU::detectFeatures()+0x953>
c0018301:	66 81 fa 00 02       	cmp    dx,0x200
c0018306:	75 0c                	jne    c0018314 <CPU::detectFeatures()+0x78a>
c0018308:	52                   	push   edx
c0018309:	52                   	push   edx
c001830a:	68 f6 7e 02 c0       	push   0xc0027ef6
c001830f:	e9 c9 01 00 00       	jmp    c00184dd <CPU::detectFeatures()+0x953>
c0018314:	66 81 fa 40 02       	cmp    dx,0x240
c0018319:	75 0c                	jne    c0018327 <CPU::detectFeatures()+0x79d>
c001831b:	50                   	push   eax
c001831c:	50                   	push   eax
c001831d:	68 08 7f 02 c0       	push   0xc0027f08
c0018322:	e9 b6 01 00 00       	jmp    c00184dd <CPU::detectFeatures()+0x953>
c0018327:	83 f8 06             	cmp    eax,0x6
c001832a:	75 0c                	jne    c0018338 <CPU::detectFeatures()+0x7ae>
c001832c:	50                   	push   eax
c001832d:	50                   	push   eax
c001832e:	68 1a 7f 02 c0       	push   0xc0027f1a
c0018333:	e9 a5 01 00 00       	jmp    c00184dd <CPU::detectFeatures()+0x953>
c0018338:	83 f8 04             	cmp    eax,0x4
c001833b:	75 0c                	jne    c0018349 <CPU::detectFeatures()+0x7bf>
c001833d:	50                   	push   eax
c001833e:	50                   	push   eax
c001833f:	68 26 7f 02 c0       	push   0xc0027f26
c0018344:	e9 94 01 00 00       	jmp    c00184dd <CPU::detectFeatures()+0x953>
c0018349:	83 f8 03             	cmp    eax,0x3
c001834c:	0f 85 1b 02 00 00    	jne    c001856d <CPU::detectFeatures()+0x9e3>
c0018352:	50                   	push   eax
c0018353:	50                   	push   eax
c0018354:	68 2e 7f 02 c0       	push   0xc0027f2e
c0018359:	e9 7f 01 00 00       	jmp    c00184dd <CPU::detectFeatures()+0x953>
c001835e:	80 fa 06             	cmp    dl,0x6
c0018361:	0f 85 db 00 00 00    	jne    c0018442 <CPU::detectFeatures()+0x8b8>
c0018367:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001836d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018372:	66 81 fa 80 01       	cmp    dx,0x180
c0018377:	75 0c                	jne    c0018385 <CPU::detectFeatures()+0x7fb>
c0018379:	50                   	push   eax
c001837a:	50                   	push   eax
c001837b:	68 39 7f 02 c0       	push   0xc0027f39
c0018380:	e9 58 01 00 00       	jmp    c00184dd <CPU::detectFeatures()+0x953>
c0018385:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001838b:	66 f7 c1 80 ff       	test   cx,0xff80
c0018390:	75 0c                	jne    c001839e <CPU::detectFeatures()+0x814>
c0018392:	50                   	push   eax
c0018393:	50                   	push   eax
c0018394:	68 49 7f 02 c0       	push   0xc0027f49
c0018399:	e9 3f 01 00 00       	jmp    c00184dd <CPU::detectFeatures()+0x953>
c001839e:	66 81 fa 40 02       	cmp    dx,0x240
c00183a3:	75 0c                	jne    c00183b1 <CPU::detectFeatures()+0x827>
c00183a5:	55                   	push   ebp
c00183a6:	55                   	push   ebp
c00183a7:	68 50 7f 02 c0       	push   0xc0027f50
c00183ac:	e9 2c 01 00 00       	jmp    c00184dd <CPU::detectFeatures()+0x953>
c00183b1:	66 81 fa 80 02       	cmp    dx,0x280
c00183b6:	75 0c                	jne    c00183c4 <CPU::detectFeatures()+0x83a>
c00183b8:	57                   	push   edi
c00183b9:	57                   	push   edi
c00183ba:	68 59 7f 02 c0       	push   0xc0027f59
c00183bf:	e9 19 01 00 00       	jmp    c00184dd <CPU::detectFeatures()+0x953>
c00183c4:	66 81 fa 40 03       	cmp    dx,0x340
c00183c9:	74 ed                	je     c00183b8 <CPU::detectFeatures()+0x82e>
c00183cb:	66 81 fa c0 03       	cmp    dx,0x3c0
c00183d0:	75 0c                	jne    c00183de <CPU::detectFeatures()+0x854>
c00183d2:	56                   	push   esi
c00183d3:	56                   	push   esi
c00183d4:	68 60 7f 02 c0       	push   0xc0027f60
c00183d9:	e9 ff 00 00 00       	jmp    c00184dd <CPU::detectFeatures()+0x953>
c00183de:	83 f8 06             	cmp    eax,0x6
c00183e1:	0f 84 45 ff ff ff    	je     c001832c <CPU::detectFeatures()+0x7a2>
c00183e7:	83 f8 04             	cmp    eax,0x4
c00183ea:	0f 84 4d ff ff ff    	je     c001833d <CPU::detectFeatures()+0x7b3>
c00183f0:	83 f8 03             	cmp    eax,0x3
c00183f3:	0f 85 74 01 00 00    	jne    c001856d <CPU::detectFeatures()+0x9e3>
c00183f9:	51                   	push   ecx
c00183fa:	51                   	push   ecx
c00183fb:	68 69 7f 02 c0       	push   0xc0027f69
c0018400:	53                   	push   ebx
c0018401:	e8 38 b4 ff ff       	call   c001383e <Device::setName(char const*)>
c0018406:	b1 c1                	mov    cl,0xc1
c0018408:	88 c8                	mov    al,cl
c001840a:	e6 22                	out    0x22,al
c001840c:	e4 23                	in     al,0x23
c001840e:	88 c2                	mov    dl,al
c0018410:	88 c8                	mov    al,cl
c0018412:	e6 22                	out    0x22,al
c0018414:	88 d0                	mov    al,dl
c0018416:	83 c8 10             	or     eax,0x10
c0018419:	e6 23                	out    0x23,al
c001841b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018422:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018425:	89 d0                	mov    eax,edx
c0018427:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001842d:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0018431:	40                   	inc    eax
c0018432:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018438:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001843d:	e9 a1 00 00 00       	jmp    c00184e3 <CPU::detectFeatures()+0x959>
c0018442:	83 f8 06             	cmp    eax,0x6
c0018445:	0f 84 e1 fe ff ff    	je     c001832c <CPU::detectFeatures()+0x7a2>
c001844b:	83 f8 04             	cmp    eax,0x4
c001844e:	0f 84 e9 fe ff ff    	je     c001833d <CPU::detectFeatures()+0x7b3>
c0018454:	83 f8 03             	cmp    eax,0x3
c0018457:	0f 85 10 01 00 00    	jne    c001856d <CPU::detectFeatures()+0x9e3>
c001845d:	52                   	push   edx
c001845e:	52                   	push   edx
c001845f:	68 74 7f 02 c0       	push   0xc0027f74
c0018464:	eb 77                	jmp    c00184dd <CPU::detectFeatures()+0x953>
c0018466:	83 f8 07             	cmp    eax,0x7
c0018469:	75 09                	jne    c0018474 <CPU::detectFeatures()+0x8ea>
c001846b:	50                   	push   eax
c001846c:	50                   	push   eax
c001846d:	68 7e 7f 02 c0       	push   0xc0027f7e
c0018472:	eb 69                	jmp    c00184dd <CPU::detectFeatures()+0x953>
c0018474:	83 f8 0a             	cmp    eax,0xa
c0018477:	75 09                	jne    c0018482 <CPU::detectFeatures()+0x8f8>
c0018479:	50                   	push   eax
c001847a:	50                   	push   eax
c001847b:	68 89 7f 02 c0       	push   0xc0027f89
c0018480:	eb 5b                	jmp    c00184dd <CPU::detectFeatures()+0x953>
c0018482:	83 f8 0b             	cmp    eax,0xb
c0018485:	75 09                	jne    c0018490 <CPU::detectFeatures()+0x906>
c0018487:	50                   	push   eax
c0018488:	50                   	push   eax
c0018489:	68 91 7f 02 c0       	push   0xc0027f91
c001848e:	eb 4d                	jmp    c00184dd <CPU::detectFeatures()+0x953>
c0018490:	83 f8 08             	cmp    eax,0x8
c0018493:	75 09                	jne    c001849e <CPU::detectFeatures()+0x914>
c0018495:	50                   	push   eax
c0018496:	50                   	push   eax
c0018497:	68 9a 7f 02 c0       	push   0xc0027f9a
c001849c:	eb 3f                	jmp    c00184dd <CPU::detectFeatures()+0x953>
c001849e:	83 f8 09             	cmp    eax,0x9
c00184a1:	75 09                	jne    c00184ac <CPU::detectFeatures()+0x922>
c00184a3:	50                   	push   eax
c00184a4:	50                   	push   eax
c00184a5:	68 a2 7f 02 c0       	push   0xc0027fa2
c00184aa:	eb 31                	jmp    c00184dd <CPU::detectFeatures()+0x953>
c00184ac:	83 f8 05             	cmp    eax,0x5
c00184af:	75 09                	jne    c00184ba <CPU::detectFeatures()+0x930>
c00184b1:	50                   	push   eax
c00184b2:	50                   	push   eax
c00184b3:	68 aa 7f 02 c0       	push   0xc0027faa
c00184b8:	eb 23                	jmp    c00184dd <CPU::detectFeatures()+0x953>
c00184ba:	83 f8 0c             	cmp    eax,0xc
c00184bd:	75 09                	jne    c00184c8 <CPU::detectFeatures()+0x93e>
c00184bf:	55                   	push   ebp
c00184c0:	55                   	push   ebp
c00184c1:	68 b8 7f 02 c0       	push   0xc0027fb8
c00184c6:	eb 15                	jmp    c00184dd <CPU::detectFeatures()+0x953>
c00184c8:	83 f8 0d             	cmp    eax,0xd
c00184cb:	75 09                	jne    c00184d6 <CPU::detectFeatures()+0x94c>
c00184cd:	57                   	push   edi
c00184ce:	57                   	push   edi
c00184cf:	68 c3 7f 02 c0       	push   0xc0027fc3
c00184d4:	eb 07                	jmp    c00184dd <CPU::detectFeatures()+0x953>
c00184d6:	56                   	push   esi
c00184d7:	56                   	push   esi
c00184d8:	68 d7 7f 02 c0       	push   0xc0027fd7
c00184dd:	53                   	push   ebx
c00184de:	e8 5b b3 ff ff       	call   c001383e <Device::setName(char const*)>
c00184e3:	83 c4 10             	add    esp,0x10
c00184e6:	e9 82 00 00 00       	jmp    c001856d <CPU::detectFeatures()+0x9e3>
c00184eb:	51                   	push   ecx
c00184ec:	51                   	push   ecx
c00184ed:	68 23 7e 02 c0       	push   0xc0027e23
c00184f2:	57                   	push   edi
c00184f3:	e8 75 82 fe ff       	call   c000076d <strcpy>
c00184f8:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018502:	e8 5c 7d fe ff       	call   c0000263 <is486>
c0018507:	83 c4 10             	add    esp,0x10
c001850a:	85 c0                	test   eax,eax
c001850c:	74 2d                	je     c001853b <CPU::detectFeatures()+0x9b1>
c001850e:	52                   	push   edx
c001850f:	52                   	push   edx
c0018510:	68 e3 7f 02 c0       	push   0xc0027fe3
c0018515:	53                   	push   ebx
c0018516:	e8 23 b3 ff ff       	call   c001383e <Device::setName(char const*)>
c001851b:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018522:	e8 c1 ce 00 00       	call   c00253e8 <CPU::readCR0()>
c0018527:	83 c4 10             	add    esp,0x10
c001852a:	83 e0 14             	and    eax,0x14
c001852d:	83 f8 04             	cmp    eax,0x4
c0018530:	75 1f                	jne    c0018551 <CPU::detectFeatures()+0x9c7>
c0018532:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0018539:	eb 32                	jmp    c001856d <CPU::detectFeatures()+0x9e3>
c001853b:	50                   	push   eax
c001853c:	50                   	push   eax
c001853d:	68 ee 7f 02 c0       	push   0xc0027fee
c0018542:	53                   	push   ebx
c0018543:	e8 f6 b2 ff ff       	call   c001383e <Device::setName(char const*)>
c0018548:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001854f:	eb d1                	jmp    c0018522 <CPU::detectFeatures()+0x998>
c0018551:	e8 e8 7c fe ff       	call   c000023e <hasLegacyFPU>
c0018556:	83 e0 01             	and    eax,0x1
c0018559:	8d 14 00             	lea    edx,[eax+eax*1]
c001855c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018562:	83 e0 fd             	and    eax,0xfffffffd
c0018565:	09 d0                	or     eax,edx
c0018567:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001856d:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0018574:	83 c4 4c             	add    esp,0x4c
c0018577:	5b                   	pop    ebx
c0018578:	5e                   	pop    esi
c0018579:	5f                   	pop    edi
c001857a:	5d                   	pop    ebp
c001857b:	c3                   	ret    

c001857c <CPU::setupSMEP()>:
c001857c:	83 ec 0c             	sub    esp,0xc
c001857f:	e8 2e d1 00 00       	call   c00256b2 <CPU::readCR4()>
c0018584:	0d 00 00 10 00       	or     eax,0x100000
c0018589:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001858d:	83 c4 0c             	add    esp,0xc
c0018590:	e9 38 d1 00 00       	jmp    c00256cd <CPU::writeCR4(unsigned long)>
c0018595:	90                   	nop

c0018596 <CPU::setupUMIP()>:
c0018596:	83 ec 0c             	sub    esp,0xc
c0018599:	e8 14 d1 00 00       	call   c00256b2 <CPU::readCR4()>
c001859e:	80 cc 08             	or     ah,0x8
c00185a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00185a5:	83 c4 0c             	add    esp,0xc
c00185a8:	e9 20 d1 00 00       	jmp    c00256cd <CPU::writeCR4(unsigned long)>
c00185ad:	90                   	nop

c00185ae <CPU::setupTSC()>:
c00185ae:	83 ec 0c             	sub    esp,0xc
c00185b1:	e8 fc d0 00 00       	call   c00256b2 <CPU::readCR4()>
c00185b6:	83 c8 04             	or     eax,0x4
c00185b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00185bd:	83 c4 0c             	add    esp,0xc
c00185c0:	e9 08 d1 00 00       	jmp    c00256cd <CPU::writeCR4(unsigned long)>
c00185c5:	90                   	nop

c00185c6 <CPU::setupLargePages()>:
c00185c6:	83 ec 0c             	sub    esp,0xc
c00185c9:	e8 e4 d0 00 00       	call   c00256b2 <CPU::readCR4()>
c00185ce:	83 c8 10             	or     eax,0x10
c00185d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00185d5:	83 c4 0c             	add    esp,0xc
c00185d8:	e9 f0 d0 00 00       	jmp    c00256cd <CPU::writeCR4(unsigned long)>
c00185dd:	90                   	nop

c00185de <CPU::setupPAT()>:
c00185de:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c00185e3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00185ea:	74 2c                	je     c0018618 <CPU::setupPAT()+0x3a>
c00185ec:	53                   	push   ebx
c00185ed:	83 ec 10             	sub    esp,0x10
c00185f0:	68 77 02 00 00       	push   0x277
c00185f5:	50                   	push   eax
c00185f6:	e8 ed 60 ff ff       	call   c000e6e8 <Computer::rdmsr(unsigned int)>
c00185fb:	83 e2 f8             	and    edx,0xfffffff8
c00185fe:	83 ca 01             	or     edx,0x1
c0018601:	52                   	push   edx
c0018602:	50                   	push   eax
c0018603:	68 77 02 00 00       	push   0x277
c0018608:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c001860e:	e8 01 61 ff ff       	call   c000e714 <Computer::wrmsr(unsigned int, unsigned long long)>
c0018613:	83 c4 28             	add    esp,0x28
c0018616:	5b                   	pop    ebx
c0018617:	c3                   	ret    
c0018618:	c3                   	ret    
c0018619:	90                   	nop

c001861a <CPU::setupMTRR()>:
c001861a:	c3                   	ret    
c001861b:	90                   	nop

c001861c <CPU::setupGlobalPages()>:
c001861c:	83 ec 0c             	sub    esp,0xc
c001861f:	e8 8e d0 00 00       	call   c00256b2 <CPU::readCR4()>
c0018624:	0c 80                	or     al,0x80
c0018626:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001862a:	83 c4 0c             	add    esp,0xc
c001862d:	e9 9b d0 00 00       	jmp    c00256cd <CPU::writeCR4(unsigned long)>

c0018632 <CPU::allowUsermodeDataAccess()>:
c0018632:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018636:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001863d:	74 03                	je     c0018642 <CPU::allowUsermodeDataAccess()+0x10>
c001863f:	0f 01 cb             	stac   
c0018642:	c3                   	ret    
c0018643:	90                   	nop

c0018644 <CPU::prohibitUsermodeDataAccess()>:
c0018644:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018648:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001864f:	74 03                	je     c0018654 <CPU::prohibitUsermodeDataAccess()+0x10>
c0018651:	0f 01 ca             	clac   
c0018654:	c3                   	ret    
c0018655:	90                   	nop

c0018656 <CPU::setupSMAP()>:
c0018656:	53                   	push   ebx
c0018657:	83 ec 08             	sub    esp,0x8
c001865a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001865e:	e8 4f d0 00 00       	call   c00256b2 <CPU::readCR4()>
c0018663:	83 ec 0c             	sub    esp,0xc
c0018666:	0d 00 00 20 00       	or     eax,0x200000
c001866b:	50                   	push   eax
c001866c:	e8 5c d0 00 00       	call   c00256cd <CPU::writeCR4(unsigned long)>
c0018671:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0018675:	83 c4 18             	add    esp,0x18
c0018678:	5b                   	pop    ebx
c0018679:	eb c9                	jmp    c0018644 <CPU::prohibitUsermodeDataAccess()>
c001867b:	90                   	nop

c001867c <CPU::setupFeatures()>:
c001867c:	53                   	push   ebx
c001867d:	83 ec 08             	sub    esp,0x8
c0018680:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018684:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c001868b:	74 0c                	je     c0018699 <CPU::setupFeatures()+0x1d>
c001868d:	83 ec 0c             	sub    esp,0xc
c0018690:	53                   	push   ebx
c0018691:	e8 e6 fe ff ff       	call   c001857c <CPU::setupSMEP()>
c0018696:	83 c4 10             	add    esp,0x10
c0018699:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00186a0:	74 0c                	je     c00186ae <CPU::setupFeatures()+0x32>
c00186a2:	83 ec 0c             	sub    esp,0xc
c00186a5:	53                   	push   ebx
c00186a6:	e8 ab ff ff ff       	call   c0018656 <CPU::setupSMAP()>
c00186ab:	83 c4 10             	add    esp,0x10
c00186ae:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00186b5:	74 0c                	je     c00186c3 <CPU::setupFeatures()+0x47>
c00186b7:	83 ec 0c             	sub    esp,0xc
c00186ba:	53                   	push   ebx
c00186bb:	e8 d6 fe ff ff       	call   c0018596 <CPU::setupUMIP()>
c00186c0:	83 c4 10             	add    esp,0x10
c00186c3:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00186ca:	74 0c                	je     c00186d8 <CPU::setupFeatures()+0x5c>
c00186cc:	83 ec 0c             	sub    esp,0xc
c00186cf:	53                   	push   ebx
c00186d0:	e8 d9 fe ff ff       	call   c00185ae <CPU::setupTSC()>
c00186d5:	83 c4 10             	add    esp,0x10
c00186d8:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00186df:	74 0c                	je     c00186ed <CPU::setupFeatures()+0x71>
c00186e1:	83 ec 0c             	sub    esp,0xc
c00186e4:	53                   	push   ebx
c00186e5:	e8 dc fe ff ff       	call   c00185c6 <CPU::setupLargePages()>
c00186ea:	83 c4 10             	add    esp,0x10
c00186ed:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00186f4:	74 0c                	je     c0018702 <CPU::setupFeatures()+0x86>
c00186f6:	83 ec 0c             	sub    esp,0xc
c00186f9:	53                   	push   ebx
c00186fa:	e8 1d ff ff ff       	call   c001861c <CPU::setupGlobalPages()>
c00186ff:	83 c4 10             	add    esp,0x10
c0018702:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018709:	74 0d                	je     c0018718 <CPU::setupFeatures()+0x9c>
c001870b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001870f:	83 c4 08             	add    esp,0x8
c0018712:	5b                   	pop    ebx
c0018713:	e9 c6 fe ff ff       	jmp    c00185de <CPU::setupPAT()>
c0018718:	83 c4 08             	add    esp,0x8
c001871b:	5b                   	pop    ebx
c001871c:	c3                   	ret    
c001871d:	90                   	nop

c001871e <CPU::open(int, int, void*)>:
c001871e:	57                   	push   edi
c001871f:	56                   	push   esi
c0018720:	53                   	push   ebx
c0018721:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018725:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018729:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001872f:	83 ec 0c             	sub    esp,0xc
c0018732:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0018738:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001873e:	50                   	push   eax
c001873f:	e8 90 62 ff ff       	call   c000e9d4 <GDT::setup()>
c0018744:	83 c4 0c             	add    esp,0xc
c0018747:	6a 00                	push   0x0
c0018749:	68 ef be ad de       	push   0xdeadbeef
c001874e:	57                   	push   edi
c001874f:	e8 e8 84 ff ff       	call   c0010c3c <TSS::setup(unsigned long, unsigned long)>
c0018754:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018757:	e8 c0 84 ff ff       	call   c0010c1c <TSS::flush()>
c001875c:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0018762:	89 04 24             	mov    DWORD PTR [esp],eax
c0018765:	e8 c4 64 ff ff       	call   c000ec2e <IDT::setup()>
c001876a:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0018771:	e8 4e cf 00 00       	call   c00256c4 <CPU::writeDR7(unsigned long)>
c0018776:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0018780:	e8 6d 6f ff ff       	call   c000f6f2 <Phys::allocatePage()>
c0018785:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001878b:	89 30                	mov    DWORD PTR [eax],esi
c001878d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0018793:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0018796:	58                   	pop    eax
c0018797:	5a                   	pop    edx
c0018798:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001879e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00187a2:	e8 7b 94 ff ff       	call   c0011c22 <VAS::setCPUSpecific(unsigned long)>
c00187a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187aa:	e8 db f3 ff ff       	call   c0017b8a <CPU::detectFeatures()>
c00187af:	e8 7a c3 ff ff       	call   c0014b2e <setupInterruptController()>
c00187b4:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00187ba:	a1 20 a4 02 c0       	mov    eax,ds:0xc002a420
c00187bf:	83 e0 10             	and    eax,0x10
c00187c2:	83 f8 01             	cmp    eax,0x1
c00187c5:	19 c0                	sbb    eax,eax
c00187c7:	83 e0 46             	and    eax,0x46
c00187ca:	83 c0 1e             	add    eax,0x1e
c00187cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00187d0:	e8 03 d7 ff ff       	call   c0015ed8 <setupTimer(int)>
c00187d5:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00187db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187de:	e8 99 fe ff ff       	call   c001867c <CPU::setupFeatures()>
c00187e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187e6:	e8 23 f1 ff ff       	call   c001790e <CPU::displayFeatures()>
c00187eb:	83 c4 10             	add    esp,0x10
c00187ee:	31 c0                	xor    eax,eax
c00187f0:	5b                   	pop    ebx
c00187f1:	5e                   	pop    esi
c00187f2:	5f                   	pop    edi
c00187f3:	c3                   	ret    

c00187f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00187f4:	57                   	push   edi
c00187f5:	56                   	push   esi
c00187f6:	53                   	push   ebx
c00187f7:	51                   	push   ecx
c00187f8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00187fc:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00187ff:	0f 02 c0             	lar    eax,ax
c0018802:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0018805:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018809:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c001880c:	88 ca                	mov    dl,cl
c001880e:	c0 ea 06             	shr    dl,0x6
c0018811:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0018815:	89 ca                	mov    edx,ecx
c0018817:	66 c1 ea 03          	shr    dx,0x3
c001881b:	83 e2 07             	and    edx,0x7
c001881e:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0018823:	88 17                	mov    BYTE PTR [edi],dl
c0018825:	0f 84 a6 01 00 00    	je     c00189d1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c001882b:	83 e1 07             	and    ecx,0x7
c001882e:	80 f9 04             	cmp    cl,0x4
c0018831:	0f 84 98 00 00 00    	je     c00188cf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0018837:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001883c:	0f 95 c0             	setne  al
c001883f:	80 f9 05             	cmp    cl,0x5
c0018842:	0f 95 c2             	setne  dl
c0018845:	08 c2                	or     dl,al
c0018847:	74 79                	je     c00188c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0018849:	84 c9                	test   cl,cl
c001884b:	75 05                	jne    c0018852 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001884d:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0018850:	eb 3c                	jmp    c001888e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018852:	80 f9 01             	cmp    cl,0x1
c0018855:	75 05                	jne    c001885c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0018857:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001885a:	eb 32                	jmp    c001888e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001885c:	80 f9 02             	cmp    cl,0x2
c001885f:	75 05                	jne    c0018866 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0018861:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0018864:	eb 28                	jmp    c001888e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018866:	31 c0                	xor    eax,eax
c0018868:	80 f9 03             	cmp    cl,0x3
c001886b:	75 05                	jne    c0018872 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001886d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0018870:	eb 1c                	jmp    c001888e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018872:	80 f9 05             	cmp    cl,0x5
c0018875:	75 05                	jne    c001887c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0018877:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001887a:	eb 12                	jmp    c001888e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001887c:	80 f9 06             	cmp    cl,0x6
c001887f:	75 05                	jne    c0018886 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0018881:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0018884:	eb 08                	jmp    c001888e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018886:	80 f9 07             	cmp    cl,0x7
c0018889:	75 03                	jne    c001888e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001888b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001888e:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0018893:	75 10                	jne    c00188a5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0018895:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0018899:	b9 03 00 00 00       	mov    ecx,0x3
c001889e:	01 d0                	add    eax,edx
c00188a0:	e9 37 01 00 00       	jmp    c00189dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00188a5:	b9 02 00 00 00       	mov    ecx,0x2
c00188aa:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00188af:	0f 85 27 01 00 00    	jne    c00189dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00188b5:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00188b8:	b9 06 00 00 00       	mov    ecx,0x6
c00188bd:	e9 1a 01 00 00       	jmp    c00189dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00188c2:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00188c5:	b9 06 00 00 00       	mov    ecx,0x6
c00188ca:	e9 0f 01 00 00       	jmp    c00189de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00188cf:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00188d2:	88 ca                	mov    dl,cl
c00188d4:	c0 ea 06             	shr    dl,0x6
c00188d7:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00188db:	89 ca                	mov    edx,ecx
c00188dd:	66 c1 ea 03          	shr    dx,0x3
c00188e1:	83 e2 07             	and    edx,0x7
c00188e4:	80 e1 07             	and    cl,0x7
c00188e7:	75 05                	jne    c00188ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00188e9:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00188ec:	eb 4c                	jmp    c001893a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00188ee:	80 f9 01             	cmp    cl,0x1
c00188f1:	75 05                	jne    c00188f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00188f3:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00188f6:	eb 42                	jmp    c001893a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00188f8:	80 f9 02             	cmp    cl,0x2
c00188fb:	75 05                	jne    c0018902 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00188fd:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0018900:	eb 38                	jmp    c001893a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018902:	80 f9 03             	cmp    cl,0x3
c0018905:	75 05                	jne    c001890c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0018907:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001890a:	eb 2e                	jmp    c001893a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001890c:	80 f9 04             	cmp    cl,0x4
c001890f:	75 12                	jne    c0018923 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0018911:	f6 c4 60             	test   ah,0x60
c0018914:	75 08                	jne    c001891e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0018916:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0018919:	8d 78 14             	lea    edi,[eax+0x14]
c001891c:	eb 1c                	jmp    c001893a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001891e:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0018921:	eb 17                	jmp    c001893a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018923:	80 f9 05             	cmp    cl,0x5
c0018926:	75 05                	jne    c001892d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0018928:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001892b:	eb 0d                	jmp    c001893a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001892d:	80 f9 06             	cmp    cl,0x6
c0018930:	75 05                	jne    c0018937 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0018932:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0018935:	eb 03                	jmp    c001893a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018937:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001893a:	84 d2                	test   dl,dl
c001893c:	75 05                	jne    c0018943 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001893e:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0018941:	eb 3c                	jmp    c001897f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018943:	80 fa 01             	cmp    dl,0x1
c0018946:	75 05                	jne    c001894d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0018948:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001894b:	eb 32                	jmp    c001897f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001894d:	80 fa 02             	cmp    dl,0x2
c0018950:	75 05                	jne    c0018957 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0018952:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0018955:	eb 28                	jmp    c001897f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018957:	80 fa 03             	cmp    dl,0x3
c001895a:	75 05                	jne    c0018961 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001895c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001895f:	eb 1e                	jmp    c001897f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018961:	31 c0                	xor    eax,eax
c0018963:	80 fa 04             	cmp    dl,0x4
c0018966:	74 17                	je     c001897f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018968:	80 fa 05             	cmp    dl,0x5
c001896b:	75 05                	jne    c0018972 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001896d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0018970:	eb 0d                	jmp    c001897f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018972:	80 fa 06             	cmp    dl,0x6
c0018975:	75 05                	jne    c001897c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0018977:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001897a:	eb 03                	jmp    c001897f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001897c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001897f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0018984:	0f 94 c2             	sete   dl
c0018987:	80 f9 05             	cmp    cl,0x5
c001898a:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001898e:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0018993:	d3 e0                	shl    eax,cl
c0018995:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0018999:	74 0a                	je     c00189a5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001899b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001899e:	b9 07 00 00 00       	mov    ecx,0x7
c00189a3:	eb 37                	jmp    c00189dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00189a5:	01 f8                	add    eax,edi
c00189a7:	b9 03 00 00 00       	mov    ecx,0x3
c00189ac:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00189b1:	74 2b                	je     c00189de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00189b3:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00189b8:	75 0d                	jne    c00189c7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00189ba:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00189be:	01 c8                	add    eax,ecx
c00189c0:	b9 04 00 00 00       	mov    ecx,0x4
c00189c5:	eb 17                	jmp    c00189de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00189c7:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00189ca:	b9 07 00 00 00       	mov    ecx,0x7
c00189cf:	eb 0d                	jmp    c00189de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00189d1:	b9 02 00 00 00       	mov    ecx,0x2
c00189d6:	b2 01                	mov    dl,0x1
c00189d8:	31 c0                	xor    eax,eax
c00189da:	eb 02                	jmp    c00189de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00189dc:	31 d2                	xor    edx,edx
c00189de:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00189e2:	89 0b                	mov    DWORD PTR [ebx],ecx
c00189e4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00189e8:	88 11                	mov    BYTE PTR [ecx],dl
c00189ea:	5a                   	pop    edx
c00189eb:	5b                   	pop    ebx
c00189ec:	5e                   	pop    esi
c00189ed:	5f                   	pop    edi
c00189ee:	c3                   	ret    

c00189ef <Krnl::panic(char const*)>:
c00189ef:	55                   	push   ebp
c00189f0:	89 e5                	mov    ebp,esp
c00189f2:	53                   	push   ebx
c00189f3:	50                   	push   eax
c00189f4:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c00189f9:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00189fc:	85 c0                	test   eax,eax
c00189fe:	74 02                	je     c0018a02 <Krnl::panic(char const*)+0x13>
c0018a00:	ff d0                	call   eax
c0018a02:	fa                   	cli    
c0018a03:	c6 05 54 ae 02 c0 01 	mov    BYTE PTR ds:0xc002ae54,0x1
c0018a0a:	83 ec 08             	sub    esp,0x8
c0018a0d:	c6 05 c0 93 02 c0 00 	mov    BYTE PTR ds:0xc00293c0,0x0
c0018a14:	53                   	push   ebx
c0018a15:	68 28 80 02 c0       	push   0xc0028028
c0018a1a:	e8 32 98 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0018a1f:	58                   	pop    eax
c0018a20:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018a25:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a2b:	e8 4d 7a ff ff       	call   c001047d <setActiveTerminal(VgaText*)>
c0018a30:	83 c4 0c             	add    esp,0xc
c0018a33:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018a38:	6a 01                	push   0x1
c0018a3a:	6a 0f                	push   0xf
c0018a3c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a42:	e8 75 74 ff ff       	call   c000febc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018a47:	5a                   	pop    edx
c0018a48:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018a4d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a53:	e8 c6 7c ff ff       	call   c001071e <VgaText::clearScreen()>
c0018a58:	59                   	pop    ecx
c0018a59:	58                   	pop    eax
c0018a5a:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018a5f:	68 41 80 02 c0       	push   0xc0028041
c0018a64:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a6a:	e8 2d 7e ff ff       	call   c001089c <VgaText::puts(char const*)>
c0018a6f:	58                   	pop    eax
c0018a70:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018a75:	5a                   	pop    edx
c0018a76:	68 e8 80 02 c0       	push   0xc00280e8
c0018a7b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a81:	e8 16 7e ff ff       	call   c001089c <VgaText::puts(char const*)>
c0018a86:	59                   	pop    ecx
c0018a87:	58                   	pop    eax
c0018a88:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018a8d:	68 5d 80 02 c0       	push   0xc002805d
c0018a92:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a98:	e8 ff 7d ff ff       	call   c001089c <VgaText::puts(char const*)>
c0018a9d:	58                   	pop    eax
c0018a9e:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018aa3:	5a                   	pop    edx
c0018aa4:	53                   	push   ebx
c0018aa5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018aab:	e8 ec 7d ff ff       	call   c001089c <VgaText::puts(char const*)>
c0018ab0:	59                   	pop    ecx
c0018ab1:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018ab6:	5b                   	pop    ebx
c0018ab7:	68 7d 80 02 c0       	push   0xc002807d
c0018abc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018ac2:	e8 d5 7d ff ff       	call   c001089c <VgaText::puts(char const*)>
c0018ac7:	58                   	pop    eax
c0018ac8:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018acd:	5a                   	pop    edx
c0018ace:	68 24 81 02 c0       	push   0xc0028124
c0018ad3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018ad9:	e8 be 7d ff ff       	call   c001089c <VgaText::puts(char const*)>
c0018ade:	59                   	pop    ecx
c0018adf:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018ae4:	5b                   	pop    ebx
c0018ae5:	68 5d 80 02 c0       	push   0xc002805d
c0018aea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018af0:	e8 a7 7d ff ff       	call   c001089c <VgaText::puts(char const*)>
c0018af5:	58                   	pop    eax
c0018af6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018afb:	5a                   	pop    edx
c0018afc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018aff:	83 c0 0c             	add    eax,0xc
c0018b02:	50                   	push   eax
c0018b03:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018b08:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b0e:	e8 89 7d ff ff       	call   c001089c <VgaText::puts(char const*)>
c0018b13:	59                   	pop    ecx
c0018b14:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018b19:	5b                   	pop    ebx
c0018b1a:	68 7c 80 02 c0       	push   0xc002807c
c0018b1f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b25:	e8 72 7d ff ff       	call   c001089c <VgaText::puts(char const*)>
c0018b2a:	58                   	pop    eax
c0018b2b:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018b30:	5a                   	pop    edx
c0018b31:	68 50 81 02 c0       	push   0xc0028150
c0018b36:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b3c:	e8 5b 7d ff ff       	call   c001089c <VgaText::puts(char const*)>
c0018b41:	59                   	pop    ecx
c0018b42:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018b47:	5b                   	pop    ebx
c0018b48:	68 90 81 02 c0       	push   0xc0028190
c0018b4d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b53:	e8 44 7d ff ff       	call   c001089c <VgaText::puts(char const*)>
c0018b58:	58                   	pop    eax
c0018b59:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018b5e:	5a                   	pop    edx
c0018b5f:	68 68 80 02 c0       	push   0xc0028068
c0018b64:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b6a:	e8 2d 7d ff ff       	call   c001089c <VgaText::puts(char const*)>
c0018b6f:	59                   	pop    ecx
c0018b70:	5b                   	pop    ebx
c0018b71:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0018b74:	68 80 80 02 c0       	push   0xc0028080
c0018b79:	e8 d3 96 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0018b7e:	58                   	pop    eax
c0018b7f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018b82:	5a                   	pop    edx
c0018b83:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0018b86:	68 89 80 02 c0       	push   0xc0028089
c0018b8b:	e8 c1 96 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0018b90:	59                   	pop    ecx
c0018b91:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018b94:	5b                   	pop    ebx
c0018b95:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b97:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0018b9a:	68 92 80 02 c0       	push   0xc0028092
c0018b9f:	e8 ad 96 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0018ba4:	58                   	pop    eax
c0018ba5:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018baa:	5a                   	pop    edx
c0018bab:	68 d4 81 02 c0       	push   0xc00281d4
c0018bb0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018bb6:	e8 e1 7c ff ff       	call   c001089c <VgaText::puts(char const*)>
c0018bbb:	59                   	pop    ecx
c0018bbc:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018bc1:	5b                   	pop    ebx
c0018bc2:	68 9b 80 02 c0       	push   0xc002809b
c0018bc7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018bcd:	e8 ca 7c ff ff       	call   c001089c <VgaText::puts(char const*)>
c0018bd2:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018bd7:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0018bdd:	e8 06 c8 00 00       	call   c00253e8 <CPU::readCR0()>
c0018be2:	5a                   	pop    edx
c0018be3:	59                   	pop    ecx
c0018be4:	50                   	push   eax
c0018be5:	53                   	push   ebx
c0018be6:	e8 d7 7c ff ff       	call   c00108c2 <VgaText::putx(unsigned int)>
c0018beb:	5b                   	pop    ebx
c0018bec:	58                   	pop    eax
c0018bed:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018bf2:	68 a5 80 02 c0       	push   0xc00280a5
c0018bf7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018bfd:	e8 9a 7c ff ff       	call   c001089c <VgaText::puts(char const*)>
c0018c02:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018c07:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0018c0d:	e8 c4 ca 00 00       	call   c00256d6 <CPU::readCR2()>
c0018c12:	5a                   	pop    edx
c0018c13:	59                   	pop    ecx
c0018c14:	50                   	push   eax
c0018c15:	53                   	push   ebx
c0018c16:	e8 a7 7c ff ff       	call   c00108c2 <VgaText::putx(unsigned int)>
c0018c1b:	5b                   	pop    ebx
c0018c1c:	58                   	pop    eax
c0018c1d:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018c22:	68 af 80 02 c0       	push   0xc00280af
c0018c27:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c2d:	e8 6a 7c ff ff       	call   c001089c <VgaText::puts(char const*)>
c0018c32:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018c37:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0018c3d:	e8 33 c4 00 00       	call   c0025075 <CPU::readCR3()>
c0018c42:	5a                   	pop    edx
c0018c43:	59                   	pop    ecx
c0018c44:	50                   	push   eax
c0018c45:	53                   	push   ebx
c0018c46:	e8 77 7c ff ff       	call   c00108c2 <VgaText::putx(unsigned int)>
c0018c4b:	5b                   	pop    ebx
c0018c4c:	58                   	pop    eax
c0018c4d:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018c52:	68 c2 80 02 c0       	push   0xc00280c2
c0018c57:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c5d:	e8 3a 7c ff ff       	call   c001089c <VgaText::puts(char const*)>
c0018c62:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018c67:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0018c6d:	e8 40 ca 00 00       	call   c00256b2 <CPU::readCR4()>
c0018c72:	5a                   	pop    edx
c0018c73:	59                   	pop    ecx
c0018c74:	50                   	push   eax
c0018c75:	53                   	push   ebx
c0018c76:	e8 47 7c ff ff       	call   c00108c2 <VgaText::putx(unsigned int)>
c0018c7b:	5b                   	pop    ebx
c0018c7c:	58                   	pop    eax
c0018c7d:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018c82:	68 cc 80 02 c0       	push   0xc00280cc
c0018c87:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c8d:	e8 0a 7c ff ff       	call   c001089c <VgaText::puts(char const*)>
c0018c92:	5a                   	pop    edx
c0018c93:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018c98:	59                   	pop    ecx
c0018c99:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018c9f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0018ca2:	50                   	push   eax
c0018ca3:	e8 1a 7c ff ff       	call   c00108c2 <VgaText::putx(unsigned int)>
c0018ca8:	5b                   	pop    ebx
c0018ca9:	58                   	pop    eax
c0018caa:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018caf:	68 e3 80 02 c0       	push   0xc00280e3
c0018cb4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018cba:	e8 dd 7b ff ff       	call   c001089c <VgaText::puts(char const*)>
c0018cbf:	5a                   	pop    edx
c0018cc0:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018cc5:	59                   	pop    ecx
c0018cc6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018ccc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0018ccf:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0018cd2:	50                   	push   eax
c0018cd3:	e8 ea 7b ff ff       	call   c00108c2 <VgaText::putx(unsigned int)>
c0018cd8:	5b                   	pop    ebx
c0018cd9:	58                   	pop    eax
c0018cda:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018cdf:	68 e3 80 02 c0       	push   0xc00280e3
c0018ce4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018cea:	e8 ad 7b ff ff       	call   c001089c <VgaText::puts(char const*)>
c0018cef:	59                   	pop    ecx
c0018cf0:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018cf5:	5b                   	pop    ebx
c0018cf6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018cfc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0018cff:	8b 12                	mov    edx,DWORD PTR [edx]
c0018d01:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0018d04:	50                   	push   eax
c0018d05:	e8 b8 7b ff ff       	call   c00108c2 <VgaText::putx(unsigned int)>
c0018d0a:	83 c4 10             	add    esp,0x10
c0018d0d:	b2 fe                	mov    dl,0xfe
c0018d0f:	e4 60                	in     al,0x60
c0018d11:	3c 1c                	cmp    al,0x1c
c0018d13:	74 04                	je     c0018d19 <Krnl::panic(char const*)+0x32a>
c0018d15:	3c 5a                	cmp    al,0x5a
c0018d17:	75 f6                	jne    c0018d0f <Krnl::panic(char const*)+0x320>
c0018d19:	e4 64                	in     al,0x64
c0018d1b:	a8 02                	test   al,0x2
c0018d1d:	75 fa                	jne    c0018d19 <Krnl::panic(char const*)+0x32a>
c0018d1f:	88 d0                	mov    al,dl
c0018d21:	e6 64                	out    0x64,al
c0018d23:	fa                   	cli    
c0018d24:	f4                   	hlt    
c0018d25:	eb e8                	jmp    c0018d0f <Krnl::panic(char const*)+0x320>

c0018d27 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0018d27:	55                   	push   ebp
c0018d28:	57                   	push   edi
c0018d29:	56                   	push   esi
c0018d2a:	53                   	push   ebx
c0018d2b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018d31:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0018d38:	8a 1e                	mov    bl,BYTE PTR [esi]
c0018d3a:	8d 6e 01             	lea    ebp,[esi+0x1]
c0018d3d:	80 fb 40             	cmp    bl,0x40
c0018d40:	75 1b                	jne    c0018d5d <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0018d42:	8a 16                	mov    dl,BYTE PTR [esi]
c0018d44:	84 d2                	test   dl,dl
c0018d46:	0f 84 f1 00 00 00    	je     c0018e3d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018d4c:	8d 46 01             	lea    eax,[esi+0x1]
c0018d4f:	80 fa 3a             	cmp    dl,0x3a
c0018d52:	74 04                	je     c0018d58 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0018d54:	89 c6                	mov    esi,eax
c0018d56:	eb ea                	jmp    c0018d42 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0018d58:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0018d5b:	89 c6                	mov    esi,eax
c0018d5d:	50                   	push   eax
c0018d5e:	6a 40                	push   0x40
c0018d60:	6a 00                	push   0x0
c0018d62:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018d66:	50                   	push   eax
c0018d67:	e8 62 79 fe ff       	call   c00006ce <memset>
c0018d6c:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0018d73:	31 c0                	xor    eax,eax
c0018d75:	83 c4 10             	add    esp,0x10
c0018d78:	8a 0f                	mov    cl,BYTE PTR [edi]
c0018d7a:	84 c9                	test   cl,cl
c0018d7c:	0f 84 bb 00 00 00    	je     c0018e3d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018d82:	3d c7 00 00 00       	cmp    eax,0xc7
c0018d87:	0f 8f b0 00 00 00    	jg     c0018e3d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018d8d:	80 f9 0a             	cmp    cl,0xa
c0018d90:	0f 85 98 00 00 00    	jne    c0018e2e <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0018d96:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0018d9b:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0018d9f:	a8 df                	test   al,0xdf
c0018da1:	0f 94 c1             	sete   cl
c0018da4:	3c 23                	cmp    al,0x23
c0018da6:	0f 94 c2             	sete   dl
c0018da9:	08 d1                	or     cl,dl
c0018dab:	75 4a                	jne    c0018df7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018dad:	8d 50 f7             	lea    edx,[eax-0x9]
c0018db0:	80 fa 01             	cmp    dl,0x1
c0018db3:	76 42                	jbe    c0018df7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018db5:	3c 5b                	cmp    al,0x5b
c0018db7:	75 42                	jne    c0018dfb <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0018db9:	80 fb 40             	cmp    bl,0x40
c0018dbc:	75 39                	jne    c0018df7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018dbe:	83 ec 0c             	sub    esp,0xc
c0018dc1:	8d 54 24 65          	lea    edx,[esp+0x65]
c0018dc5:	52                   	push   edx
c0018dc6:	e8 20 79 fe ff       	call   c00006eb <strlen>
c0018dcb:	83 c4 10             	add    esp,0x10
c0018dce:	83 f8 3f             	cmp    eax,0x3f
c0018dd1:	77 6a                	ja     c0018e3d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018dd3:	50                   	push   eax
c0018dd4:	50                   	push   eax
c0018dd5:	8d 54 24 61          	lea    edx,[esp+0x61]
c0018dd9:	52                   	push   edx
c0018dda:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018dde:	52                   	push   edx
c0018ddf:	e8 89 79 fe ff       	call   c000076d <strcpy>
c0018de4:	58                   	pop    eax
c0018de5:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018de9:	52                   	push   edx
c0018dea:	e8 fc 78 fe ff       	call   c00006eb <strlen>
c0018def:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0018df4:	83 c4 10             	add    esp,0x10
c0018df7:	31 d2                	xor    edx,edx
c0018df9:	eb 3a                	jmp    c0018e35 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0018dfb:	80 fb 40             	cmp    bl,0x40
c0018dfe:	74 06                	je     c0018e06 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0018e00:	8d 44 24 58          	lea    eax,[esp+0x58]
c0018e04:	eb 20                	jmp    c0018e26 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0018e06:	50                   	push   eax
c0018e07:	50                   	push   eax
c0018e08:	55                   	push   ebp
c0018e09:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018e0d:	50                   	push   eax
c0018e0e:	e8 ab 79 fe ff       	call   c00007be <strcmp>
c0018e13:	83 c4 10             	add    esp,0x10
c0018e16:	85 c0                	test   eax,eax
c0018e18:	75 dd                	jne    c0018df7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018e1a:	eb e4                	jmp    c0018e00 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0018e1c:	8d 50 01             	lea    edx,[eax+0x1]
c0018e1f:	80 f9 3d             	cmp    cl,0x3d
c0018e22:	74 1d                	je     c0018e41 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0018e24:	89 d0                	mov    eax,edx
c0018e26:	8a 08                	mov    cl,BYTE PTR [eax]
c0018e28:	84 c9                	test   cl,cl
c0018e2a:	75 f0                	jne    c0018e1c <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0018e2c:	eb 0f                	jmp    c0018e3d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018e2e:	8d 50 01             	lea    edx,[eax+0x1]
c0018e31:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0018e35:	47                   	inc    edi
c0018e36:	89 d0                	mov    eax,edx
c0018e38:	e9 3b ff ff ff       	jmp    c0018d78 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0018e3d:	31 c0                	xor    eax,eax
c0018e3f:	eb 33                	jmp    c0018e74 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0018e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018e45:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018e48:	50                   	push   eax
c0018e49:	50                   	push   eax
c0018e4a:	8d 44 24 60          	lea    eax,[esp+0x60]
c0018e4e:	50                   	push   eax
c0018e4f:	56                   	push   esi
c0018e50:	e8 69 79 fe ff       	call   c00007be <strcmp>
c0018e55:	83 c4 10             	add    esp,0x10
c0018e58:	85 c0                	test   eax,eax
c0018e5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e5e:	75 97                	jne    c0018df7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018e60:	51                   	push   ecx
c0018e61:	51                   	push   ecx
c0018e62:	52                   	push   edx
c0018e63:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018e6a:	e8 fe 78 fe ff       	call   c000076d <strcpy>
c0018e6f:	83 c4 10             	add    esp,0x10
c0018e72:	b0 01                	mov    al,0x1
c0018e74:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018e7a:	5b                   	pop    ebx
c0018e7b:	5e                   	pop    esi
c0018e7c:	5f                   	pop    edi
c0018e7d:	5d                   	pop    ebp
c0018e7e:	c3                   	ret    

c0018e7f <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0018e7f:	57                   	push   edi
c0018e80:	56                   	push   esi
c0018e81:	53                   	push   ebx
c0018e82:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018e88:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0018e8f:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0018e96:	53                   	push   ebx
c0018e97:	e8 4f 78 fe ff       	call   c00006eb <strlen>
c0018e9c:	89 34 24             	mov    DWORD PTR [esp],esi
c0018e9f:	89 c7                	mov    edi,eax
c0018ea1:	e8 45 78 fe ff       	call   c00006eb <strlen>
c0018ea6:	83 c4 10             	add    esp,0x10
c0018ea9:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0018ead:	31 ff                	xor    edi,edi
c0018eaf:	3d ff 00 00 00       	cmp    eax,0xff
c0018eb4:	0f 87 18 01 00 00    	ja     c0018fd2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0018eba:	51                   	push   ecx
c0018ebb:	51                   	push   ecx
c0018ebc:	56                   	push   esi
c0018ebd:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0018ec1:	56                   	push   esi
c0018ec2:	e8 a6 78 fe ff       	call   c000076d <strcpy>
c0018ec7:	58                   	pop    eax
c0018ec8:	5a                   	pop    edx
c0018ec9:	68 cc 85 02 c0       	push   0xc00285cc
c0018ece:	56                   	push   esi
c0018ecf:	e8 50 79 fe ff       	call   c0000824 <strcat>
c0018ed4:	59                   	pop    ecx
c0018ed5:	58                   	pop    eax
c0018ed6:	53                   	push   ebx
c0018ed7:	56                   	push   esi
c0018ed8:	e8 47 79 fe ff       	call   c0000824 <strcat>
c0018edd:	58                   	pop    eax
c0018ede:	5a                   	pop    edx
c0018edf:	68 fa 81 02 c0       	push   0xc00281fa
c0018ee4:	56                   	push   esi
c0018ee5:	e8 3a 79 fe ff       	call   c0000824 <strcat>
c0018eea:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018ef1:	e8 6c 92 ff ff       	call   c0012162 <operator new(unsigned long)>
c0018ef6:	83 c4 0c             	add    esp,0xc
c0018ef9:	89 c3                	mov    ebx,eax
c0018efb:	ff 35 54 b8 02 c0    	push   DWORD PTR ds:0xc002b854
c0018f01:	56                   	push   esi
c0018f02:	50                   	push   eax
c0018f03:	e8 78 98 ff ff       	call   c0012780 <File::File(char const*, Process*)>
c0018f08:	59                   	pop    ecx
c0018f09:	5e                   	pop    esi
c0018f0a:	6a 01                	push   0x1
c0018f0c:	53                   	push   ebx
c0018f0d:	e8 d2 98 ff ff       	call   c00127e4 <File::open(FileOpenMode)>
c0018f12:	83 c4 10             	add    esp,0x10
c0018f15:	85 c0                	test   eax,eax
c0018f17:	74 08                	je     c0018f21 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0018f19:	83 ec 0c             	sub    esp,0xc
c0018f1c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018f1e:	53                   	push   ebx
c0018f1f:	eb 2e                	jmp    c0018f4f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0018f21:	52                   	push   edx
c0018f22:	8d 44 24 07          	lea    eax,[esp+0x7]
c0018f26:	50                   	push   eax
c0018f27:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018f2b:	50                   	push   eax
c0018f2c:	53                   	push   ebx
c0018f2d:	e8 5e 9b ff ff       	call   c0012a90 <File::stat(unsigned long long*, bool*)>
c0018f32:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018f36:	83 c4 10             	add    esp,0x10
c0018f39:	89 c1                	mov    ecx,eax
c0018f3b:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0018f3f:	75 13                	jne    c0018f54 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0018f41:	83 ec 0c             	sub    esp,0xc
c0018f44:	53                   	push   ebx
c0018f45:	e8 f8 98 ff ff       	call   c0012842 <File::close()>
c0018f4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018f4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018f4f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018f52:	eb 7b                	jmp    c0018fcf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0018f54:	83 ec 0c             	sub    esp,0xc
c0018f57:	50                   	push   eax
c0018f58:	e8 eb 61 ff ff       	call   c000f148 <malloc>
c0018f5d:	89 c6                	mov    esi,eax
c0018f5f:	58                   	pop    eax
c0018f60:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018f62:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018f66:	52                   	push   edx
c0018f67:	56                   	push   esi
c0018f68:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018f6c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018f70:	53                   	push   ebx
c0018f71:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0018f74:	83 c4 20             	add    esp,0x20
c0018f77:	85 c0                	test   eax,eax
c0018f79:	75 0a                	jne    c0018f85 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0018f7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f7f:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018f83:	74 18                	je     c0018f9d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0018f85:	83 ec 0c             	sub    esp,0xc
c0018f88:	31 ff                	xor    edi,edi
c0018f8a:	53                   	push   ebx
c0018f8b:	e8 b2 98 ff ff       	call   c0012842 <File::close()>
c0018f90:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018f92:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018f95:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018f98:	83 c4 10             	add    esp,0x10
c0018f9b:	eb 35                	jmp    c0018fd2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0018f9d:	83 ec 0c             	sub    esp,0xc
c0018fa0:	53                   	push   ebx
c0018fa1:	e8 9c 98 ff ff       	call   c0012842 <File::close()>
c0018fa6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018fa8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018fab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018fae:	83 c4 0c             	add    esp,0xc
c0018fb1:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0018fb8:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0018fbf:	56                   	push   esi
c0018fc0:	e8 62 fd ff ff       	call   c0018d27 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0018fc5:	89 34 24             	mov    DWORD PTR [esp],esi
c0018fc8:	89 c7                	mov    edi,eax
c0018fca:	e8 89 61 ff ff       	call   c000f158 <free>
c0018fcf:	83 c4 10             	add    esp,0x10
c0018fd2:	81 c4 10 01 00 00    	add    esp,0x110
c0018fd8:	89 f8                	mov    eax,edi
c0018fda:	5b                   	pop    ebx
c0018fdb:	5e                   	pop    esi
c0018fdc:	5f                   	pop    edi
c0018fdd:	c3                   	ret    

c0018fde <Reg::getLine(char*, char*, char*)>:
c0018fde:	57                   	push   edi
c0018fdf:	56                   	push   esi
c0018fe0:	53                   	push   ebx
c0018fe1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018fe5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018fe9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0018fed:	57                   	push   edi
c0018fee:	56                   	push   esi
c0018fef:	53                   	push   ebx
c0018ff0:	68 ff 81 02 c0       	push   0xc00281ff
c0018ff5:	e8 85 fe ff ff       	call   c0018e7f <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0018ffa:	83 c4 10             	add    esp,0x10
c0018ffd:	84 c0                	test   al,al
c0018fff:	75 10                	jne    c0019011 <Reg::getLine(char*, char*, char*)+0x33>
c0019001:	57                   	push   edi
c0019002:	56                   	push   esi
c0019003:	53                   	push   ebx
c0019004:	68 24 82 02 c0       	push   0xc0028224
c0019009:	e8 71 fe ff ff       	call   c0018e7f <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001900e:	83 c4 10             	add    esp,0x10
c0019011:	5b                   	pop    ebx
c0019012:	5e                   	pop    esi
c0019013:	5f                   	pop    edi
c0019014:	c3                   	ret    

c0019015 <Reg::readInt(char*, char*, int*)>:
c0019015:	55                   	push   ebp
c0019016:	57                   	push   edi
c0019017:	56                   	push   esi
c0019018:	53                   	push   ebx
c0019019:	81 ec f0 00 00 00    	sub    esp,0xf0
c001901f:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0019023:	57                   	push   edi
c0019024:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001902b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0019032:	e8 a7 ff ff ff       	call   c0018fde <Reg::getLine(char*, char*, char*)>
c0019037:	83 c4 10             	add    esp,0x10
c001903a:	84 c0                	test   al,al
c001903c:	0f 84 b3 00 00 00    	je     c00190f5 <Reg::readInt(char*, char*, int*)+0xe0>
c0019042:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0019046:	80 fa 2b             	cmp    dl,0x2b
c0019049:	74 0c                	je     c0019057 <Reg::readInt(char*, char*, int*)+0x42>
c001904b:	80 fa 2d             	cmp    dl,0x2d
c001904e:	75 0e                	jne    c001905e <Reg::readInt(char*, char*, int*)+0x49>
c0019050:	ba 01 00 00 00       	mov    edx,0x1
c0019055:	eb 0b                	jmp    c0019062 <Reg::readInt(char*, char*, int*)+0x4d>
c0019057:	ba 01 00 00 00       	mov    edx,0x1
c001905c:	eb 02                	jmp    c0019060 <Reg::readInt(char*, char*, int*)+0x4b>
c001905e:	31 d2                	xor    edx,edx
c0019060:	31 c0                	xor    eax,eax
c0019062:	be 0a 00 00 00       	mov    esi,0xa
c0019067:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001906c:	75 20                	jne    c001908e <Reg::readInt(char*, char*, int*)+0x79>
c001906e:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0019072:	80 f9 78             	cmp    cl,0x78
c0019075:	75 0a                	jne    c0019081 <Reg::readInt(char*, char*, int*)+0x6c>
c0019077:	83 c2 02             	add    edx,0x2
c001907a:	be 10 00 00 00       	mov    esi,0x10
c001907f:	eb 0d                	jmp    c001908e <Reg::readInt(char*, char*, int*)+0x79>
c0019081:	80 f9 62             	cmp    cl,0x62
c0019084:	75 08                	jne    c001908e <Reg::readInt(char*, char*, int*)+0x79>
c0019086:	83 c2 02             	add    edx,0x2
c0019089:	be 02 00 00 00       	mov    esi,0x2
c001908e:	01 d7                	add    edi,edx
c0019090:	31 d2                	xor    edx,edx
c0019092:	8a 1f                	mov    bl,BYTE PTR [edi]
c0019094:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0019098:	80 fb 0d             	cmp    bl,0xd
c001909b:	0f 94 c3             	sete   bl
c001909e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00190a3:	0f 94 c1             	sete   cl
c00190a6:	08 cb                	or     bl,cl
c00190a8:	75 3a                	jne    c00190e4 <Reg::readInt(char*, char*, int*)+0xcf>
c00190aa:	0f af d6             	imul   edx,esi
c00190ad:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00190b2:	83 fe 10             	cmp    esi,0x10
c00190b5:	75 26                	jne    c00190dd <Reg::readInt(char*, char*, int*)+0xc8>
c00190b7:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00190bb:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00190be:	89 e9                	mov    ecx,ebp
c00190c0:	80 f9 05             	cmp    cl,0x5
c00190c3:	77 06                	ja     c00190cb <Reg::readInt(char*, char*, int*)+0xb6>
c00190c5:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00190c9:	eb 16                	jmp    c00190e1 <Reg::readInt(char*, char*, int*)+0xcc>
c00190cb:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00190cf:	83 e9 61             	sub    ecx,0x61
c00190d2:	80 f9 05             	cmp    cl,0x5
c00190d5:	77 06                	ja     c00190dd <Reg::readInt(char*, char*, int*)+0xc8>
c00190d7:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00190db:	eb 04                	jmp    c00190e1 <Reg::readInt(char*, char*, int*)+0xcc>
c00190dd:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00190e1:	47                   	inc    edi
c00190e2:	eb ae                	jmp    c0019092 <Reg::readInt(char*, char*, int*)+0x7d>
c00190e4:	84 c0                	test   al,al
c00190e6:	74 02                	je     c00190ea <Reg::readInt(char*, char*, int*)+0xd5>
c00190e8:	f7 da                	neg    edx
c00190ea:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00190f1:	89 10                	mov    DWORD PTR [eax],edx
c00190f3:	88 d8                	mov    al,bl
c00190f5:	81 c4 ec 00 00 00    	add    esp,0xec
c00190fb:	5b                   	pop    ebx
c00190fc:	5e                   	pop    esi
c00190fd:	5f                   	pop    edi
c00190fe:	5d                   	pop    ebp
c00190ff:	c3                   	ret    

c0019100 <Reg::readString(char*, char*, char*, int)>:
c0019100:	57                   	push   edi
c0019101:	56                   	push   esi
c0019102:	53                   	push   ebx
c0019103:	81 ec d4 00 00 00    	sub    esp,0xd4
c0019109:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0019110:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0019114:	57                   	push   edi
c0019115:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001911c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0019123:	e8 b6 fe ff ff       	call   c0018fde <Reg::getLine(char*, char*, char*)>
c0019128:	83 c4 10             	add    esp,0x10
c001912b:	89 c6                	mov    esi,eax
c001912d:	84 c0                	test   al,al
c001912f:	74 44                	je     c0019175 <Reg::readString(char*, char*, char*, int)+0x75>
c0019131:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0019138:	31 c0                	xor    eax,eax
c001913a:	4a                   	dec    edx
c001913b:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001913e:	84 c9                	test   cl,cl
c0019140:	74 0f                	je     c0019151 <Reg::readString(char*, char*, char*, int)+0x51>
c0019142:	39 c2                	cmp    edx,eax
c0019144:	7e 0b                	jle    c0019151 <Reg::readString(char*, char*, char*, int)+0x51>
c0019146:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0019149:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001914e:	40                   	inc    eax
c001914f:	eb ea                	jmp    c001913b <Reg::readString(char*, char*, char*, int)+0x3b>
c0019151:	83 ec 0c             	sub    esp,0xc
c0019154:	53                   	push   ebx
c0019155:	e8 91 75 fe ff       	call   c00006eb <strlen>
c001915a:	83 c4 10             	add    esp,0x10
c001915d:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0019162:	75 11                	jne    c0019175 <Reg::readString(char*, char*, char*, int)+0x75>
c0019164:	83 ec 0c             	sub    esp,0xc
c0019167:	53                   	push   ebx
c0019168:	e8 7e 75 fe ff       	call   c00006eb <strlen>
c001916d:	83 c4 10             	add    esp,0x10
c0019170:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0019175:	81 c4 d0 00 00 00    	add    esp,0xd0
c001917b:	89 f0                	mov    eax,esi
c001917d:	5b                   	pop    ebx
c001917e:	5e                   	pop    esi
c001917f:	5f                   	pop    edi
c0019180:	c3                   	ret    

c0019181 <Reg::readBool(char*, char*, bool*)>:
c0019181:	83 ec 20             	sub    esp,0x20
c0019184:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019188:	50                   	push   eax
c0019189:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001918d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019191:	e8 7f fe ff ff       	call   c0019015 <Reg::readInt(char*, char*, int*)>
c0019196:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001919b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001919f:	0f 95 02             	setne  BYTE PTR [edx]
c00191a2:	83 c4 2c             	add    esp,0x2c
c00191a5:	c3                   	ret    

c00191a6 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00191a6:	53                   	push   ebx
c00191a7:	83 ec 1c             	sub    esp,0x1c
c00191aa:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00191ae:	8d 44 24 13          	lea    eax,[esp+0x13]
c00191b2:	50                   	push   eax
c00191b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00191b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00191bb:	e8 c1 ff ff ff       	call   c0019181 <Reg::readBool(char*, char*, bool*)>
c00191c0:	83 c4 10             	add    esp,0x10
c00191c3:	84 c0                	test   al,al
c00191c5:	74 04                	je     c00191cb <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00191c7:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00191cb:	88 d8                	mov    al,bl
c00191cd:	83 c4 18             	add    esp,0x18
c00191d0:	5b                   	pop    ebx
c00191d1:	c3                   	ret    

c00191d2 <Reg::readIntWithDefault(char*, char*, int)>:
c00191d2:	53                   	push   ebx
c00191d3:	83 ec 1c             	sub    esp,0x1c
c00191d6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00191da:	8d 44 24 10          	lea    eax,[esp+0x10]
c00191de:	50                   	push   eax
c00191df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00191e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00191e7:	e8 29 fe ff ff       	call   c0019015 <Reg::readInt(char*, char*, int*)>
c00191ec:	83 c4 10             	add    esp,0x10
c00191ef:	84 c0                	test   al,al
c00191f1:	74 04                	je     c00191f7 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00191f3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00191f7:	89 d8                	mov    eax,ebx
c00191f9:	83 c4 18             	add    esp,0x18
c00191fc:	5b                   	pop    ebx
c00191fd:	c3                   	ret    

c00191fe <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00191fe:	56                   	push   esi
c00191ff:	53                   	push   ebx
c0019200:	51                   	push   ecx
c0019201:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019205:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001920d:	56                   	push   esi
c001920e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019212:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019216:	e8 e5 fe ff ff       	call   c0019100 <Reg::readString(char*, char*, char*, int)>
c001921b:	83 c4 10             	add    esp,0x10
c001921e:	84 c0                	test   al,al
c0019220:	74 02                	je     c0019224 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c0019222:	89 f3                	mov    ebx,esi
c0019224:	89 d8                	mov    eax,ebx
c0019226:	5a                   	pop    edx
c0019227:	5b                   	pop    ebx
c0019228:	5e                   	pop    esi
c0019229:	c3                   	ret    

c001922a <Sys::exit(regs*)>:
c001922a:	83 ec 18             	sub    esp,0x18
c001922d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019231:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019234:	e8 1f 31 00 00       	call   c001c358 <terminateTask(int)>
c0019239:	83 c8 ff             	or     eax,0xffffffff
c001923c:	83 c4 1c             	add    esp,0x1c
c001923f:	89 c2                	mov    edx,eax
c0019241:	c3                   	ret    

c0019242 <Sys::loadDLL(regs*)>:
c0019242:	56                   	push   esi
c0019243:	53                   	push   ebx
c0019244:	31 d2                	xor    edx,edx
c0019246:	51                   	push   ecx
c0019247:	b8 01 00 00 00       	mov    eax,0x1
c001924c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019250:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0019254:	74 7d                	je     c00192d3 <Sys::loadDLL(regs*)+0x91>
c0019256:	83 ec 0c             	sub    esp,0xc
c0019259:	68 14 01 00 00       	push   0x114
c001925e:	e8 ff 8e ff ff       	call   c0012162 <operator new(unsigned long)>
c0019263:	83 c4 0c             	add    esp,0xc
c0019266:	89 c3                	mov    ebx,eax
c0019268:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001926d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019270:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0019273:	53                   	push   ebx
c0019274:	e8 07 95 ff ff       	call   c0012780 <File::File(char const*, Process*)>
c0019279:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001927c:	e8 d1 97 ff ff       	call   c0012a52 <File::exists()>
c0019281:	83 c4 10             	add    esp,0x10
c0019284:	84 c0                	test   al,al
c0019286:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019288:	75 11                	jne    c001929b <Sys::loadDLL(regs*)+0x59>
c001928a:	83 ec 0c             	sub    esp,0xc
c001928d:	53                   	push   ebx
c001928e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019291:	83 c4 10             	add    esp,0x10
c0019294:	b8 03 00 00 00       	mov    eax,0x3
c0019299:	eb 36                	jmp    c00192d1 <Sys::loadDLL(regs*)+0x8f>
c001929b:	83 ec 0c             	sub    esp,0xc
c001929e:	53                   	push   ebx
c001929f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00192a2:	58                   	pop    eax
c00192a3:	5a                   	pop    edx
c00192a4:	6a 00                	push   0x0
c00192a6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00192a9:	e8 c4 20 00 00       	call   c001b372 <Thr::loadDLL(char const*, bool)>
c00192ae:	83 c4 10             	add    esp,0x10
c00192b1:	89 c1                	mov    ecx,eax
c00192b3:	31 d2                	xor    edx,edx
c00192b5:	b8 04 00 00 00       	mov    eax,0x4
c00192ba:	85 c9                	test   ecx,ecx
c00192bc:	74 15                	je     c00192d3 <Sys::loadDLL(regs*)+0x91>
c00192be:	53                   	push   ebx
c00192bf:	53                   	push   ebx
c00192c0:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c00192c6:	51                   	push   ecx
c00192c7:	e8 6c 22 00 00       	call   c001b538 <Thr::executeDLL(unsigned long, void*)>
c00192cc:	83 c4 10             	add    esp,0x10
c00192cf:	31 c0                	xor    eax,eax
c00192d1:	31 d2                	xor    edx,edx
c00192d3:	59                   	pop    ecx
c00192d4:	5b                   	pop    ebx
c00192d5:	5e                   	pop    esi
c00192d6:	c3                   	ret    

c00192d7 <Sys::read(regs*)>:
c00192d7:	57                   	push   edi
c00192d8:	56                   	push   esi
c00192d9:	53                   	push   ebx
c00192da:	83 ec 10             	sub    esp,0x10
c00192dd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00192e1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00192e4:	83 f8 02             	cmp    eax,0x2
c00192e7:	77 10                	ja     c00192f9 <Sys::read(regs*)+0x22>
c00192e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00192ee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00192f1:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00192f7:	eb 0e                	jmp    c0019307 <Sys::read(regs*)+0x30>
c00192f9:	83 ec 0c             	sub    esp,0xc
c00192fc:	50                   	push   eax
c00192fd:	e8 27 7e ff ff       	call   c0011129 <getFromFileDescriptor(int)>
c0019302:	83 c4 10             	add    esp,0x10
c0019305:	89 c1                	mov    ecx,eax
c0019307:	83 c8 ff             	or     eax,0xffffffff
c001930a:	85 c9                	test   ecx,ecx
c001930c:	89 c2                	mov    edx,eax
c001930e:	74 28                	je     c0019338 <Sys::read(regs*)+0x61>
c0019310:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019318:	31 ff                	xor    edi,edi
c001931a:	83 ec 0c             	sub    esp,0xc
c001931d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001931f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019323:	52                   	push   edx
c0019324:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019327:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001932a:	57                   	push   edi
c001932b:	56                   	push   esi
c001932c:	51                   	push   ecx
c001932d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019330:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019334:	83 c4 20             	add    esp,0x20
c0019337:	99                   	cdq    
c0019338:	83 c4 10             	add    esp,0x10
c001933b:	5b                   	pop    ebx
c001933c:	5e                   	pop    esi
c001933d:	5f                   	pop    edi
c001933e:	c3                   	ret    

c001933f <Sys::sbrk(regs*)>:
c001933f:	56                   	push   esi
c0019340:	53                   	push   ebx
c0019341:	50                   	push   eax
c0019342:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019347:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001934b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001934e:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0019351:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c0019357:	85 db                	test   ebx,ebx
c0019359:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001935c:	74 02                	je     c0019360 <Sys::sbrk(regs*)+0x21>
c001935e:	79 06                	jns    c0019366 <Sys::sbrk(regs*)+0x27>
c0019360:	89 f0                	mov    eax,esi
c0019362:	31 d2                	xor    edx,edx
c0019364:	eb 2a                	jmp    c0019390 <Sys::sbrk(regs*)+0x51>
c0019366:	83 c8 ff             	or     eax,0xffffffff
c0019369:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001936f:	89 c2                	mov    edx,eax
c0019371:	77 1d                	ja     c0019390 <Sys::sbrk(regs*)+0x51>
c0019373:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0019379:	50                   	push   eax
c001937a:	c1 ea 0c             	shr    edx,0xc
c001937d:	68 07 04 00 00       	push   0x407
c0019382:	52                   	push   edx
c0019383:	51                   	push   ecx
c0019384:	e8 c9 86 ff ff       	call   c0011a52 <VAS::allocatePages(int, int)>
c0019389:	89 f0                	mov    eax,esi
c001938b:	31 d2                	xor    edx,edx
c001938d:	83 c4 10             	add    esp,0x10
c0019390:	59                   	pop    ecx
c0019391:	5b                   	pop    ebx
c0019392:	5e                   	pop    esi
c0019393:	c3                   	ret    

c0019394 <Sys::write(regs*)>:
c0019394:	57                   	push   edi
c0019395:	56                   	push   esi
c0019396:	53                   	push   ebx
c0019397:	83 ec 10             	sub    esp,0x10
c001939a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001939e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00193a1:	83 f8 02             	cmp    eax,0x2
c00193a4:	77 10                	ja     c00193b6 <Sys::write(regs*)+0x22>
c00193a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00193ab:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00193ae:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00193b4:	eb 0e                	jmp    c00193c4 <Sys::write(regs*)+0x30>
c00193b6:	83 ec 0c             	sub    esp,0xc
c00193b9:	50                   	push   eax
c00193ba:	e8 6a 7d ff ff       	call   c0011129 <getFromFileDescriptor(int)>
c00193bf:	83 c4 10             	add    esp,0x10
c00193c2:	89 c1                	mov    ecx,eax
c00193c4:	83 c8 ff             	or     eax,0xffffffff
c00193c7:	85 c9                	test   ecx,ecx
c00193c9:	89 c2                	mov    edx,eax
c00193cb:	74 28                	je     c00193f5 <Sys::write(regs*)+0x61>
c00193cd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00193d5:	31 ff                	xor    edi,edi
c00193d7:	83 ec 0c             	sub    esp,0xc
c00193da:	8b 01                	mov    eax,DWORD PTR [ecx]
c00193dc:	8d 54 24 18          	lea    edx,[esp+0x18]
c00193e0:	52                   	push   edx
c00193e1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00193e4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00193e7:	57                   	push   edi
c00193e8:	56                   	push   esi
c00193e9:	51                   	push   ecx
c00193ea:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00193ed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00193f1:	83 c4 20             	add    esp,0x20
c00193f4:	99                   	cdq    
c00193f5:	83 c4 10             	add    esp,0x10
c00193f8:	5b                   	pop    ebx
c00193f9:	5e                   	pop    esi
c00193fa:	5f                   	pop    edi
c00193fb:	c3                   	ret    

c00193fc <Sys::yield(regs*)>:
c00193fc:	83 ec 0c             	sub    esp,0xc
c00193ff:	e8 3e 25 00 00       	call   c001b942 <lockScheduler()>
c0019404:	e8 6d 28 00 00       	call   c001bc76 <schedule()>
c0019409:	e8 36 25 00 00       	call   c001b944 <unlockScheduler()>
c001940e:	31 c0                	xor    eax,eax
c0019410:	31 d2                	xor    edx,edx
c0019412:	83 c4 0c             	add    esp,0xc
c0019415:	c3                   	ret    

c0019416 <sysCallGetPID(regs*)>:
c0019416:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001941b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001941e:	8b 00                	mov    eax,DWORD PTR [eax]
c0019420:	99                   	cdq    
c0019421:	c3                   	ret    

c0019422 <sysCallSeekDir(regs*)>:
c0019422:	31 c0                	xor    eax,eax
c0019424:	31 d2                	xor    edx,edx
c0019426:	c3                   	ret    

c0019427 <sysCallTellDir(regs*)>:
c0019427:	31 c0                	xor    eax,eax
c0019429:	31 d2                	xor    edx,edx
c001942b:	c3                   	ret    

c001942c <sysCallVerify(regs*)>:
c001942c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019430:	31 d2                	xor    edx,edx
c0019432:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019435:	c3                   	ret    

c0019436 <sysCallFork(regs*)>:
c0019436:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001943b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019440:	c3                   	ret    

c0019441 <sysCallExecve(regs*)>:
c0019441:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019446:	ba ff ff ff ff       	mov    edx,0xffffffff
c001944b:	c3                   	ret    

c001944c <sysCallGetArgc(regs*)>:
c001944c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019451:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019454:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001945a:	99                   	cdq    
c001945b:	c3                   	ret    

c001945c <sysFormatDisk(regs*)>:
c001945c:	56                   	push   esi
c001945d:	53                   	push   ebx
c001945e:	53                   	push   ebx
c001945f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019463:	8b 1d 68 a5 02 c0    	mov    ebx,DWORD PTR ds:0xc002a568
c0019469:	eb 25                	jmp    c0019490 <sysFormatDisk(regs*)+0x34>
c001946b:	83 ec 0c             	sub    esp,0xc
c001946e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019471:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019473:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0019476:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0019479:	50                   	push   eax
c001947a:	ff 34 85 00 aa 02 c0 	push   DWORD PTR [eax*4-0x3ffd5600]
c0019481:	53                   	push   ebx
c0019482:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0019485:	83 c4 20             	add    esp,0x20
c0019488:	83 f8 08             	cmp    eax,0x8
c001948b:	75 12                	jne    c001949f <sysFormatDisk(regs*)+0x43>
c001948d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0019490:	85 db                	test   ebx,ebx
c0019492:	75 d7                	jne    c001946b <sysFormatDisk(regs*)+0xf>
c0019494:	59                   	pop    ecx
c0019495:	b8 03 00 00 00       	mov    eax,0x3
c001949a:	31 d2                	xor    edx,edx
c001949c:	5b                   	pop    ebx
c001949d:	5e                   	pop    esi
c001949e:	c3                   	ret    
c001949f:	85 c0                	test   eax,eax
c00194a1:	74 1b                	je     c00194be <sysFormatDisk(regs*)+0x62>
c00194a3:	83 f8 09             	cmp    eax,0x9
c00194a6:	74 0b                	je     c00194b3 <sysFormatDisk(regs*)+0x57>
c00194a8:	59                   	pop    ecx
c00194a9:	b8 02 00 00 00       	mov    eax,0x2
c00194ae:	31 d2                	xor    edx,edx
c00194b0:	5b                   	pop    ebx
c00194b1:	5e                   	pop    esi
c00194b2:	c3                   	ret    
c00194b3:	59                   	pop    ecx
c00194b4:	b8 01 00 00 00       	mov    eax,0x1
c00194b9:	31 d2                	xor    edx,edx
c00194bb:	5b                   	pop    ebx
c00194bc:	5e                   	pop    esi
c00194bd:	c3                   	ret    
c00194be:	59                   	pop    ecx
c00194bf:	31 c0                	xor    eax,eax
c00194c1:	31 d2                	xor    edx,edx
c00194c3:	5b                   	pop    ebx
c00194c4:	5e                   	pop    esi
c00194c5:	c3                   	ret    

c00194c6 <sysSetDiskVolumeLabel(regs*)>:
c00194c6:	56                   	push   esi
c00194c7:	53                   	push   ebx
c00194c8:	53                   	push   ebx
c00194c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00194cd:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00194d0:	83 f8 19             	cmp    eax,0x19
c00194d3:	77 29                	ja     c00194fe <sysSetDiskVolumeLabel(regs*)+0x38>
c00194d5:	8b 0c 85 00 aa 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5600]
c00194dc:	85 c9                	test   ecx,ecx
c00194de:	74 1e                	je     c00194fe <sysSetDiskVolumeLabel(regs*)+0x38>
c00194e0:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00194e3:	85 d2                	test   edx,edx
c00194e5:	74 17                	je     c00194fe <sysSetDiskVolumeLabel(regs*)+0x38>
c00194e7:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c00194ed:	8b 33                	mov    esi,DWORD PTR [ebx]
c00194ef:	52                   	push   edx
c00194f0:	50                   	push   eax
c00194f1:	51                   	push   ecx
c00194f2:	53                   	push   ebx
c00194f3:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00194f6:	83 c4 10             	add    esp,0x10
c00194f9:	99                   	cdq    
c00194fa:	59                   	pop    ecx
c00194fb:	5b                   	pop    ebx
c00194fc:	5e                   	pop    esi
c00194fd:	c3                   	ret    
c00194fe:	59                   	pop    ecx
c00194ff:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0019504:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019509:	5b                   	pop    ebx
c001950a:	5e                   	pop    esi
c001950b:	c3                   	ret    

c001950c <sysGetDiskVolumeLabel(regs*)>:
c001950c:	57                   	push   edi
c001950d:	56                   	push   esi
c001950e:	53                   	push   ebx
c001950f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019513:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0019516:	83 fa 19             	cmp    edx,0x19
c0019519:	77 34                	ja     c001954f <sysGetDiskVolumeLabel(regs*)+0x43>
c001951b:	8b 0c 95 00 aa 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd5600]
c0019522:	85 c9                	test   ecx,ecx
c0019524:	74 29                	je     c001954f <sysGetDiskVolumeLabel(regs*)+0x43>
c0019526:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0019529:	85 db                	test   ebx,ebx
c001952b:	74 22                	je     c001954f <sysGetDiskVolumeLabel(regs*)+0x43>
c001952d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0019530:	85 c0                	test   eax,eax
c0019532:	74 1b                	je     c001954f <sysGetDiskVolumeLabel(regs*)+0x43>
c0019534:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001953a:	83 ec 0c             	sub    esp,0xc
c001953d:	8b 3e                	mov    edi,DWORD PTR [esi]
c001953f:	50                   	push   eax
c0019540:	53                   	push   ebx
c0019541:	52                   	push   edx
c0019542:	51                   	push   ecx
c0019543:	56                   	push   esi
c0019544:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0019547:	83 c4 20             	add    esp,0x20
c001954a:	99                   	cdq    
c001954b:	5b                   	pop    ebx
c001954c:	5e                   	pop    esi
c001954d:	5f                   	pop    edi
c001954e:	c3                   	ret    
c001954f:	5b                   	pop    ebx
c0019550:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0019555:	ba ff ff ff ff       	mov    edx,0xffffffff
c001955a:	5e                   	pop    esi
c001955b:	5f                   	pop    edi
c001955c:	c3                   	ret    

c001955d <sysShutdown(regs*)>:
c001955d:	83 ec 0c             	sub    esp,0xc
c0019560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019564:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019567:	85 c0                	test   eax,eax
c0019569:	74 18                	je     c0019583 <sysShutdown(regs*)+0x26>
c001956b:	83 f8 01             	cmp    eax,0x1
c001956e:	74 38                	je     c00195a8 <sysShutdown(regs*)+0x4b>
c0019570:	83 f8 02             	cmp    eax,0x2
c0019573:	74 24                	je     c0019599 <sysShutdown(regs*)+0x3c>
c0019575:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001957a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001957f:	83 c4 0c             	add    esp,0xc
c0019582:	c3                   	ret    
c0019583:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0019588:	8b 10                	mov    edx,DWORD PTR [eax]
c001958a:	6a 00                	push   0x0
c001958c:	6a 00                	push   0x0
c001958e:	6a 00                	push   0x0
c0019590:	50                   	push   eax
c0019591:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019594:	83 c4 10             	add    esp,0x10
c0019597:	eb dc                	jmp    c0019575 <sysShutdown(regs*)+0x18>
c0019599:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c001959e:	8b 10                	mov    edx,DWORD PTR [eax]
c00195a0:	6a 00                	push   0x0
c00195a2:	6a 00                	push   0x0
c00195a4:	6a 01                	push   0x1
c00195a6:	eb e8                	jmp    c0019590 <sysShutdown(regs*)+0x33>
c00195a8:	a1 80 aa 02 c0       	mov    eax,ds:0xc002aa80
c00195ad:	85 c0                	test   eax,eax
c00195af:	74 02                	je     c00195b3 <sysShutdown(regs*)+0x56>
c00195b1:	ff d0                	call   eax
c00195b3:	31 c0                	xor    eax,eax
c00195b5:	31 d2                	xor    edx,edx
c00195b7:	83 c4 0c             	add    esp,0xc
c00195ba:	c3                   	ret    

c00195bb <sysCallGetCwd(regs*)>:
c00195bb:	83 ec 10             	sub    esp,0x10
c00195be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00195c2:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00195c5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00195c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00195cd:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00195d0:	e8 1c 95 ff ff       	call   c0012af1 <getcwd(Process*, char*, int)>
c00195d5:	83 c4 1c             	add    esp,0x1c
c00195d8:	99                   	cdq    
c00195d9:	c3                   	ret    

c00195da <sysCallSetCwd(regs*)>:
c00195da:	83 ec 14             	sub    esp,0x14
c00195dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00195e1:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00195e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00195e9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00195ec:	e8 2a 95 ff ff       	call   c0012b1b <setcwd(Process*, char*)>
c00195f1:	83 c4 1c             	add    esp,0x1c
c00195f4:	99                   	cdq    
c00195f5:	c3                   	ret    

c00195f6 <sysCallRealpath(regs*)>:
c00195f6:	83 ec 0c             	sub    esp,0xc
c00195f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195fd:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0019600:	85 d2                	test   edx,edx
c0019602:	74 07                	je     c001960b <sysCallRealpath(regs*)+0x15>
c0019604:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019607:	85 c0                	test   eax,eax
c0019609:	75 0b                	jne    c0019616 <sysCallRealpath(regs*)+0x20>
c001960b:	b8 01 00 00 00       	mov    eax,0x1
c0019610:	31 d2                	xor    edx,edx
c0019612:	83 c4 0c             	add    esp,0xc
c0019615:	c3                   	ret    
c0019616:	51                   	push   ecx
c0019617:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001961d:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0019620:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0019626:	51                   	push   ecx
c0019627:	52                   	push   edx
c0019628:	50                   	push   eax
c0019629:	e8 a8 8f ff ff       	call   c00125d6 <standardiseFiles(char*, char const*, char const*)>
c001962e:	83 c4 10             	add    esp,0x10
c0019631:	31 c0                	xor    eax,eax
c0019633:	31 d2                	xor    edx,edx
c0019635:	83 c4 0c             	add    esp,0xc
c0019638:	c3                   	ret    

c0019639 <sysCallReadDir(regs*)>:
c0019639:	53                   	push   ebx
c001963a:	83 ec 18             	sub    esp,0x18
c001963d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019641:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0019644:	83 f8 02             	cmp    eax,0x2
c0019647:	76 53                	jbe    c001969c <sysCallReadDir(regs*)+0x63>
c0019649:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001964c:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c0019652:	77 4f                	ja     c00196a3 <sysCallReadDir(regs*)+0x6a>
c0019654:	83 ec 0c             	sub    esp,0xc
c0019657:	50                   	push   eax
c0019658:	e8 cc 7a ff ff       	call   c0011129 <getFromFileDescriptor(int)>
c001965d:	83 c4 10             	add    esp,0x10
c0019660:	85 c0                	test   eax,eax
c0019662:	74 50                	je     c00196b4 <sysCallReadDir(regs*)+0x7b>
c0019664:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001966c:	83 ec 0c             	sub    esp,0xc
c001966f:	8b 10                	mov    edx,DWORD PTR [eax]
c0019671:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0019675:	51                   	push   ecx
c0019676:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019679:	6a 00                	push   0x0
c001967b:	68 10 01 00 00       	push   0x110
c0019680:	50                   	push   eax
c0019681:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019684:	83 c4 20             	add    esp,0x20
c0019687:	85 c0                	test   eax,eax
c0019689:	74 38                	je     c00196c3 <sysCallReadDir(regs*)+0x8a>
c001968b:	83 f8 07             	cmp    eax,0x7
c001968e:	74 0c                	je     c001969c <sysCallReadDir(regs*)+0x63>
c0019690:	b8 02 00 00 00       	mov    eax,0x2
c0019695:	31 d2                	xor    edx,edx
c0019697:	83 c4 18             	add    esp,0x18
c001969a:	5b                   	pop    ebx
c001969b:	c3                   	ret    
c001969c:	b8 01 00 00 00       	mov    eax,0x1
c00196a1:	eb f2                	jmp    c0019695 <sysCallReadDir(regs*)+0x5c>
c00196a3:	83 ec 08             	sub    esp,0x8
c00196a6:	52                   	push   edx
c00196a7:	68 40 82 02 c0       	push   0xc0028240
c00196ac:	e8 a0 8b ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00196b1:	83 c4 10             	add    esp,0x10
c00196b4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00196b9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00196be:	83 c4 18             	add    esp,0x18
c00196c1:	5b                   	pop    ebx
c00196c2:	c3                   	ret    
c00196c3:	31 c0                	xor    eax,eax
c00196c5:	eb ce                	jmp    c0019695 <sysCallReadDir(regs*)+0x5c>

c00196c7 <sysCallIsATTY(regs*)>:
c00196c7:	83 ec 0c             	sub    esp,0xc
c00196ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196ce:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00196d1:	83 f8 02             	cmp    eax,0x2
c00196d4:	76 07                	jbe    c00196dd <sysCallIsATTY(regs*)+0x16>
c00196d6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00196db:	75 26                	jne    c0019703 <sysCallIsATTY(regs*)+0x3c>
c00196dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00196e2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00196e5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00196eb:	85 c0                	test   eax,eax
c00196ed:	74 24                	je     c0019713 <sysCallIsATTY(regs*)+0x4c>
c00196ef:	83 ec 0c             	sub    esp,0xc
c00196f2:	8b 10                	mov    edx,DWORD PTR [eax]
c00196f4:	50                   	push   eax
c00196f5:	ff 12                	call   DWORD PTR [edx]
c00196f7:	31 d2                	xor    edx,edx
c00196f9:	0f b6 c0             	movzx  eax,al
c00196fc:	83 c4 10             	add    esp,0x10
c00196ff:	83 c4 0c             	add    esp,0xc
c0019702:	c3                   	ret    
c0019703:	83 ec 0c             	sub    esp,0xc
c0019706:	50                   	push   eax
c0019707:	e8 1d 7a ff ff       	call   c0011129 <getFromFileDescriptor(int)>
c001970c:	83 c4 10             	add    esp,0x10
c001970f:	85 c0                	test   eax,eax
c0019711:	75 dc                	jne    c00196ef <sysCallIsATTY(regs*)+0x28>
c0019713:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019718:	ba ff ff ff ff       	mov    edx,0xffffffff
c001971d:	83 c4 0c             	add    esp,0xc
c0019720:	c3                   	ret    

c0019721 <sysCallSeek(regs*)>:
c0019721:	53                   	push   ebx
c0019722:	83 ec 08             	sub    esp,0x8
c0019725:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019729:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001972c:	83 f8 02             	cmp    eax,0x2
c001972f:	76 4a                	jbe    c001977b <sysCallSeek(regs*)+0x5a>
c0019731:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019736:	77 32                	ja     c001976a <sysCallSeek(regs*)+0x49>
c0019738:	83 ec 0c             	sub    esp,0xc
c001973b:	50                   	push   eax
c001973c:	e8 e8 79 ff ff       	call   c0011129 <getFromFileDescriptor(int)>
c0019741:	83 c4 0c             	add    esp,0xc
c0019744:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0019747:	31 db                	xor    ebx,ebx
c0019749:	53                   	push   ebx
c001974a:	51                   	push   ecx
c001974b:	50                   	push   eax
c001974c:	e8 51 91 ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c0019751:	83 c4 10             	add    esp,0x10
c0019754:	85 c0                	test   eax,eax
c0019756:	0f 95 c0             	setne  al
c0019759:	31 d2                	xor    edx,edx
c001975b:	0f b6 c0             	movzx  eax,al
c001975e:	f7 d8                	neg    eax
c0019760:	83 d2 00             	adc    edx,0x0
c0019763:	83 c4 08             	add    esp,0x8
c0019766:	f7 da                	neg    edx
c0019768:	5b                   	pop    ebx
c0019769:	c3                   	ret    
c001976a:	83 ec 08             	sub    esp,0x8
c001976d:	50                   	push   eax
c001976e:	68 fc 82 02 c0       	push   0xc00282fc
c0019773:	e8 d9 8a ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0019778:	83 c4 10             	add    esp,0x10
c001977b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019780:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019785:	83 c4 08             	add    esp,0x8
c0019788:	5b                   	pop    ebx
c0019789:	c3                   	ret    

c001978a <sysCallTell(regs*)>:
c001978a:	53                   	push   ebx
c001978b:	83 ec 08             	sub    esp,0x8
c001978e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019792:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019795:	83 f8 02             	cmp    eax,0x2
c0019798:	76 5e                	jbe    c00197f8 <sysCallTell(regs*)+0x6e>
c001979a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001979f:	77 2d                	ja     c00197ce <sysCallTell(regs*)+0x44>
c00197a1:	83 ec 0c             	sub    esp,0xc
c00197a4:	50                   	push   eax
c00197a5:	e8 7f 79 ff ff       	call   c0011129 <getFromFileDescriptor(int)>
c00197aa:	5a                   	pop    edx
c00197ab:	59                   	pop    ecx
c00197ac:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00197af:	50                   	push   eax
c00197b0:	e8 43 91 ff ff       	call   c00128f8 <File::tell(unsigned long long*)>
c00197b5:	83 c4 10             	add    esp,0x10
c00197b8:	85 c0                	test   eax,eax
c00197ba:	0f 95 c0             	setne  al
c00197bd:	31 d2                	xor    edx,edx
c00197bf:	0f b6 c0             	movzx  eax,al
c00197c2:	f7 d8                	neg    eax
c00197c4:	83 d2 00             	adc    edx,0x0
c00197c7:	83 c4 08             	add    esp,0x8
c00197ca:	f7 da                	neg    edx
c00197cc:	5b                   	pop    ebx
c00197cd:	c3                   	ret    
c00197ce:	83 ec 08             	sub    esp,0x8
c00197d1:	50                   	push   eax
c00197d2:	68 16 83 02 c0       	push   0xc0028316
c00197d7:	e8 75 8a ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00197dc:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00197df:	83 c4 10             	add    esp,0x10
c00197e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00197e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00197ef:	31 d2                	xor    edx,edx
c00197f1:	31 c0                	xor    eax,eax
c00197f3:	83 c4 08             	add    esp,0x8
c00197f6:	5b                   	pop    ebx
c00197f7:	c3                   	ret    
c00197f8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00197fd:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019802:	83 c4 08             	add    esp,0x8
c0019805:	5b                   	pop    ebx
c0019806:	c3                   	ret    

c0019807 <sysCallSizeFromFilename(regs*)>:
c0019807:	57                   	push   edi
c0019808:	56                   	push   esi
c0019809:	53                   	push   ebx
c001980a:	83 ec 10             	sub    esp,0x10
c001980d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019811:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0019814:	83 fb 02             	cmp    ebx,0x2
c0019817:	0f 86 8a 00 00 00    	jbe    c00198a7 <sysCallSizeFromFilename(regs*)+0xa0>
c001981d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0019823:	77 56                	ja     c001987b <sysCallSizeFromFilename(regs*)+0x74>
c0019825:	83 ec 0c             	sub    esp,0xc
c0019828:	68 14 01 00 00       	push   0x114
c001982d:	e8 30 89 ff ff       	call   c0012162 <operator new(unsigned long)>
c0019832:	83 c4 0c             	add    esp,0xc
c0019835:	89 c7                	mov    edi,eax
c0019837:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001983c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001983f:	53                   	push   ebx
c0019840:	57                   	push   edi
c0019841:	e8 3a 8f ff ff       	call   c0012780 <File::File(char const*, Process*)>
c0019846:	83 c4 0c             	add    esp,0xc
c0019849:	8d 44 24 13          	lea    eax,[esp+0x13]
c001984d:	50                   	push   eax
c001984e:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0019851:	57                   	push   edi
c0019852:	e8 39 92 ff ff       	call   c0012a90 <File::stat(unsigned long long*, bool*)>
c0019857:	89 3c 24             	mov    DWORD PTR [esp],edi
c001985a:	89 c3                	mov    ebx,eax
c001985c:	8b 07                	mov    eax,DWORD PTR [edi]
c001985e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019861:	83 c4 10             	add    esp,0x10
c0019864:	31 c0                	xor    eax,eax
c0019866:	85 db                	test   ebx,ebx
c0019868:	0f 95 c0             	setne  al
c001986b:	31 d2                	xor    edx,edx
c001986d:	f7 d8                	neg    eax
c001986f:	83 d2 00             	adc    edx,0x0
c0019872:	83 c4 10             	add    esp,0x10
c0019875:	f7 da                	neg    edx
c0019877:	5b                   	pop    ebx
c0019878:	5e                   	pop    esi
c0019879:	5f                   	pop    edi
c001987a:	c3                   	ret    
c001987b:	83 ec 08             	sub    esp,0x8
c001987e:	53                   	push   ebx
c001987f:	68 30 83 02 c0       	push   0xc0028330
c0019884:	e8 c8 89 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0019889:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001988c:	83 c4 10             	add    esp,0x10
c001988f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019895:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001989c:	31 d2                	xor    edx,edx
c001989e:	83 c4 10             	add    esp,0x10
c00198a1:	31 c0                	xor    eax,eax
c00198a3:	5b                   	pop    ebx
c00198a4:	5e                   	pop    esi
c00198a5:	5f                   	pop    edi
c00198a6:	c3                   	ret    
c00198a7:	83 c4 10             	add    esp,0x10
c00198aa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00198af:	5b                   	pop    ebx
c00198b0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00198b5:	5e                   	pop    esi
c00198b6:	5f                   	pop    edi
c00198b7:	c3                   	ret    

c00198b8 <sysCallSize(regs*)>:
c00198b8:	53                   	push   ebx
c00198b9:	83 ec 18             	sub    esp,0x18
c00198bc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00198c0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00198c3:	83 f8 02             	cmp    eax,0x2
c00198c6:	76 64                	jbe    c001992c <sysCallSize(regs*)+0x74>
c00198c8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00198cd:	77 33                	ja     c0019902 <sysCallSize(regs*)+0x4a>
c00198cf:	83 ec 0c             	sub    esp,0xc
c00198d2:	50                   	push   eax
c00198d3:	e8 51 78 ff ff       	call   c0011129 <getFromFileDescriptor(int)>
c00198d8:	83 c4 0c             	add    esp,0xc
c00198db:	8d 54 24 13          	lea    edx,[esp+0x13]
c00198df:	52                   	push   edx
c00198e0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00198e3:	50                   	push   eax
c00198e4:	e8 a7 91 ff ff       	call   c0012a90 <File::stat(unsigned long long*, bool*)>
c00198e9:	83 c4 10             	add    esp,0x10
c00198ec:	85 c0                	test   eax,eax
c00198ee:	0f 95 c0             	setne  al
c00198f1:	31 d2                	xor    edx,edx
c00198f3:	0f b6 c0             	movzx  eax,al
c00198f6:	f7 d8                	neg    eax
c00198f8:	83 d2 00             	adc    edx,0x0
c00198fb:	83 c4 18             	add    esp,0x18
c00198fe:	f7 da                	neg    edx
c0019900:	5b                   	pop    ebx
c0019901:	c3                   	ret    
c0019902:	83 ec 08             	sub    esp,0x8
c0019905:	50                   	push   eax
c0019906:	68 30 83 02 c0       	push   0xc0028330
c001990b:	e8 41 89 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0019910:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0019913:	83 c4 10             	add    esp,0x10
c0019916:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001991c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019923:	31 d2                	xor    edx,edx
c0019925:	31 c0                	xor    eax,eax
c0019927:	83 c4 18             	add    esp,0x18
c001992a:	5b                   	pop    ebx
c001992b:	c3                   	ret    
c001992c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019931:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019936:	83 c4 18             	add    esp,0x18
c0019939:	5b                   	pop    ebx
c001993a:	c3                   	ret    

c001993b <sysCallClose(regs*)>:
c001993b:	53                   	push   ebx
c001993c:	83 ec 08             	sub    esp,0x8
c001993f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019943:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019946:	83 f8 02             	cmp    eax,0x2
c0019949:	76 50                	jbe    c001999b <sysCallClose(regs*)+0x60>
c001994b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0019950:	74 58                	je     c00199aa <sysCallClose(regs*)+0x6f>
c0019952:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019957:	74 60                	je     c00199b9 <sysCallClose(regs*)+0x7e>
c0019959:	77 2f                	ja     c001998a <sysCallClose(regs*)+0x4f>
c001995b:	83 ec 0c             	sub    esp,0xc
c001995e:	50                   	push   eax
c001995f:	e8 c5 77 ff ff       	call   c0011129 <getFromFileDescriptor(int)>
c0019964:	89 c3                	mov    ebx,eax
c0019966:	89 04 24             	mov    DWORD PTR [esp],eax
c0019969:	e8 d4 8e ff ff       	call   c0012842 <File::close()>
c001996e:	83 c4 10             	add    esp,0x10
c0019971:	85 db                	test   ebx,ebx
c0019973:	74 0c                	je     c0019981 <sysCallClose(regs*)+0x46>
c0019975:	83 ec 0c             	sub    esp,0xc
c0019978:	8b 03                	mov    eax,DWORD PTR [ebx]
c001997a:	53                   	push   ebx
c001997b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001997e:	83 c4 10             	add    esp,0x10
c0019981:	31 c0                	xor    eax,eax
c0019983:	31 d2                	xor    edx,edx
c0019985:	83 c4 08             	add    esp,0x8
c0019988:	5b                   	pop    ebx
c0019989:	c3                   	ret    
c001998a:	83 ec 08             	sub    esp,0x8
c001998d:	50                   	push   eax
c001998e:	68 64 82 02 c0       	push   0xc0028264
c0019993:	e8 b9 88 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0019998:	83 c4 10             	add    esp,0x10
c001999b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00199a0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00199a5:	83 c4 08             	add    esp,0x8
c00199a8:	5b                   	pop    ebx
c00199a9:	c3                   	ret    
c00199aa:	83 ec 0c             	sub    esp,0xc
c00199ad:	68 4b 83 02 c0       	push   0xc002834b
c00199b2:	e8 9a 88 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00199b7:	eb c5                	jmp    c001997e <sysCallClose(regs*)+0x43>
c00199b9:	83 ec 0c             	sub    esp,0xc
c00199bc:	68 59 83 02 c0       	push   0xc0028359
c00199c1:	eb ef                	jmp    c00199b2 <sysCallClose(regs*)+0x77>

c00199c3 <sysCallOpenDir(regs*)>:
c00199c3:	56                   	push   esi
c00199c4:	53                   	push   ebx
c00199c5:	53                   	push   ebx
c00199c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00199ca:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00199cd:	85 f6                	test   esi,esi
c00199cf:	74 51                	je     c0019a22 <sysCallOpenDir(regs*)+0x5f>
c00199d1:	83 ec 0c             	sub    esp,0xc
c00199d4:	68 14 01 00 00       	push   0x114
c00199d9:	e8 84 87 ff ff       	call   c0012162 <operator new(unsigned long)>
c00199de:	83 c4 0c             	add    esp,0xc
c00199e1:	89 c6                	mov    esi,eax
c00199e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00199e8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00199eb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00199ee:	56                   	push   esi
c00199ef:	e8 4e 92 ff ff       	call   c0012c42 <Directory::Directory(char const*, Process*)>
c00199f4:	89 34 24             	mov    DWORD PTR [esp],esi
c00199f7:	e8 aa 92 ff ff       	call   c0012ca6 <Directory::open()>
c00199fc:	83 c4 10             	add    esp,0x10
c00199ff:	85 c0                	test   eax,eax
c0019a01:	75 1f                	jne    c0019a22 <sysCallOpenDir(regs*)+0x5f>
c0019a03:	83 ec 0c             	sub    esp,0xc
c0019a06:	56                   	push   esi
c0019a07:	e8 68 74 ff ff       	call   c0010e74 <UnixFile::getFileDescriptor()>
c0019a0c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0019a0f:	83 c4 10             	add    esp,0x10
c0019a12:	89 02                	mov    DWORD PTR [edx],eax
c0019a14:	c1 f8 1f             	sar    eax,0x1f
c0019a17:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0019a1a:	31 c0                	xor    eax,eax
c0019a1c:	59                   	pop    ecx
c0019a1d:	31 d2                	xor    edx,edx
c0019a1f:	5b                   	pop    ebx
c0019a20:	5e                   	pop    esi
c0019a21:	c3                   	ret    
c0019a22:	59                   	pop    ecx
c0019a23:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019a28:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019a2d:	5b                   	pop    ebx
c0019a2e:	5e                   	pop    esi
c0019a2f:	c3                   	ret    

c0019a30 <sysCallMakeDir(regs*)>:
c0019a30:	56                   	push   esi
c0019a31:	53                   	push   ebx
c0019a32:	83 ec 10             	sub    esp,0x10
c0019a35:	68 14 01 00 00       	push   0x114
c0019a3a:	e8 23 87 ff ff       	call   c0012162 <operator new(unsigned long)>
c0019a3f:	83 c4 0c             	add    esp,0xc
c0019a42:	89 c3                	mov    ebx,eax
c0019a44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019a49:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019a4c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019a50:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019a53:	53                   	push   ebx
c0019a54:	e8 e9 91 ff ff       	call   c0012c42 <Directory::Directory(char const*, Process*)>
c0019a59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a5c:	e8 25 94 ff ff       	call   c0012e86 <Directory::create()>
c0019a61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a64:	89 c6                	mov    esi,eax
c0019a66:	e8 97 92 ff ff       	call   c0012d02 <Directory::close()>
c0019a6b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a6d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a70:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a73:	31 c0                	xor    eax,eax
c0019a75:	85 f6                	test   esi,esi
c0019a77:	0f 95 c0             	setne  al
c0019a7a:	31 d2                	xor    edx,edx
c0019a7c:	f7 d8                	neg    eax
c0019a7e:	83 d2 00             	adc    edx,0x0
c0019a81:	83 c4 14             	add    esp,0x14
c0019a84:	f7 da                	neg    edx
c0019a86:	5b                   	pop    ebx
c0019a87:	5e                   	pop    esi
c0019a88:	c3                   	ret    

c0019a89 <sysCallCloseDir(regs*)>:
c0019a89:	53                   	push   ebx
c0019a8a:	83 ec 08             	sub    esp,0x8
c0019a8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a91:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019a94:	83 f8 02             	cmp    eax,0x2
c0019a97:	76 47                	jbe    c0019ae0 <sysCallCloseDir(regs*)+0x57>
c0019a99:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019a9e:	77 2f                	ja     c0019acf <sysCallCloseDir(regs*)+0x46>
c0019aa0:	83 ec 0c             	sub    esp,0xc
c0019aa3:	50                   	push   eax
c0019aa4:	e8 80 76 ff ff       	call   c0011129 <getFromFileDescriptor(int)>
c0019aa9:	89 c3                	mov    ebx,eax
c0019aab:	89 04 24             	mov    DWORD PTR [esp],eax
c0019aae:	e8 4f 92 ff ff       	call   c0012d02 <Directory::close()>
c0019ab3:	83 c4 10             	add    esp,0x10
c0019ab6:	85 db                	test   ebx,ebx
c0019ab8:	74 0c                	je     c0019ac6 <sysCallCloseDir(regs*)+0x3d>
c0019aba:	83 ec 0c             	sub    esp,0xc
c0019abd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019abf:	53                   	push   ebx
c0019ac0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019ac3:	83 c4 10             	add    esp,0x10
c0019ac6:	31 c0                	xor    eax,eax
c0019ac8:	31 d2                	xor    edx,edx
c0019aca:	83 c4 08             	add    esp,0x8
c0019acd:	5b                   	pop    ebx
c0019ace:	c3                   	ret    
c0019acf:	83 ec 08             	sub    esp,0x8
c0019ad2:	50                   	push   eax
c0019ad3:	68 8c 82 02 c0       	push   0xc002828c
c0019ad8:	e8 74 87 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0019add:	83 c4 10             	add    esp,0x10
c0019ae0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019ae5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019aea:	83 c4 08             	add    esp,0x8
c0019aed:	5b                   	pop    ebx
c0019aee:	c3                   	ret    

c0019aef <sysCallWait(regs*)>:
c0019aef:	83 ec 10             	sub    esp,0x10
c0019af2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019af6:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0019af9:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019afc:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019aff:	e8 ed 22 00 00       	call   c001bdf1 <waitTask(int, int*, int)>
c0019b04:	83 c4 1c             	add    esp,0x1c
c0019b07:	99                   	cdq    
c0019b08:	c3                   	ret    

c0019b09 <sysCallRmdir(regs*)>:
c0019b09:	56                   	push   esi
c0019b0a:	53                   	push   ebx
c0019b0b:	83 ec 10             	sub    esp,0x10
c0019b0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b12:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0019b15:	68 14 01 00 00       	push   0x114
c0019b1a:	e8 43 86 ff ff       	call   c0012162 <operator new(unsigned long)>
c0019b1f:	83 c4 0c             	add    esp,0xc
c0019b22:	89 c3                	mov    ebx,eax
c0019b24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019b29:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019b2c:	56                   	push   esi
c0019b2d:	53                   	push   ebx
c0019b2e:	e8 4d 8c ff ff       	call   c0012780 <File::File(char const*, Process*)>
c0019b33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b36:	e8 21 8e ff ff       	call   c001295c <File::unlink()>
c0019b3b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b3e:	89 c6                	mov    esi,eax
c0019b40:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b42:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019b45:	31 c0                	xor    eax,eax
c0019b47:	85 f6                	test   esi,esi
c0019b49:	0f 95 c0             	setne  al
c0019b4c:	31 d2                	xor    edx,edx
c0019b4e:	f7 d8                	neg    eax
c0019b50:	83 d2 00             	adc    edx,0x0
c0019b53:	83 c4 14             	add    esp,0x14
c0019b56:	f7 da                	neg    edx
c0019b58:	5b                   	pop    ebx
c0019b59:	5e                   	pop    esi
c0019b5a:	c3                   	ret    

c0019b5b <sysCallUnlink(regs*)>:
c0019b5b:	56                   	push   esi
c0019b5c:	53                   	push   ebx
c0019b5d:	83 ec 10             	sub    esp,0x10
c0019b60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b64:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0019b67:	68 14 01 00 00       	push   0x114
c0019b6c:	e8 f1 85 ff ff       	call   c0012162 <operator new(unsigned long)>
c0019b71:	83 c4 0c             	add    esp,0xc
c0019b74:	89 c3                	mov    ebx,eax
c0019b76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019b7b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019b7e:	56                   	push   esi
c0019b7f:	53                   	push   ebx
c0019b80:	e8 fb 8b ff ff       	call   c0012780 <File::File(char const*, Process*)>
c0019b85:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b88:	e8 cf 8d ff ff       	call   c001295c <File::unlink()>
c0019b8d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b90:	89 c6                	mov    esi,eax
c0019b92:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b94:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019b97:	31 c0                	xor    eax,eax
c0019b99:	85 f6                	test   esi,esi
c0019b9b:	0f 95 c0             	setne  al
c0019b9e:	31 d2                	xor    edx,edx
c0019ba0:	f7 d8                	neg    eax
c0019ba2:	83 d2 00             	adc    edx,0x0
c0019ba5:	83 c4 14             	add    esp,0x14
c0019ba8:	f7 da                	neg    edx
c0019baa:	5b                   	pop    ebx
c0019bab:	5e                   	pop    esi
c0019bac:	c3                   	ret    

c0019bad <sysCallGetArgv(regs*)>:
c0019bad:	83 ec 0c             	sub    esp,0xc
c0019bb0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019bb4:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0019bb7:	85 c0                	test   eax,eax
c0019bb9:	78 2b                	js     c0019be6 <sysCallGetArgv(regs*)+0x39>
c0019bbb:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019bc1:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0019bc4:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0019bca:	7d 1a                	jge    c0019be6 <sysCallGetArgv(regs*)+0x39>
c0019bcc:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0019bd3:	85 c0                	test   eax,eax
c0019bd5:	74 17                	je     c0019bee <sysCallGetArgv(regs*)+0x41>
c0019bd7:	83 ec 08             	sub    esp,0x8
c0019bda:	50                   	push   eax
c0019bdb:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0019bde:	e8 8a 6b fe ff       	call   c000076d <strcpy>
c0019be3:	83 c4 10             	add    esp,0x10
c0019be6:	31 c0                	xor    eax,eax
c0019be8:	31 d2                	xor    edx,edx
c0019bea:	83 c4 0c             	add    esp,0xc
c0019bed:	c3                   	ret    
c0019bee:	b8 01 00 00 00       	mov    eax,0x1
c0019bf3:	31 d2                	xor    edx,edx
c0019bf5:	83 c4 0c             	add    esp,0xc
c0019bf8:	c3                   	ret    

c0019bf9 <sysCallTTYName(regs*)>:
c0019bf9:	56                   	push   esi
c0019bfa:	53                   	push   ebx
c0019bfb:	53                   	push   ebx
c0019bfc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019c00:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019c03:	85 c0                	test   eax,eax
c0019c05:	74 5f                	je     c0019c66 <sysCallTTYName(regs*)+0x6d>
c0019c07:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019c0a:	83 f8 02             	cmp    eax,0x2
c0019c0d:	77 3e                	ja     c0019c4d <sysCallTTYName(regs*)+0x54>
c0019c0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019c14:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019c17:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0019c1d:	85 db                	test   ebx,ebx
c0019c1f:	74 45                	je     c0019c66 <sysCallTTYName(regs*)+0x6d>
c0019c21:	83 ec 0c             	sub    esp,0xc
c0019c24:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c26:	53                   	push   ebx
c0019c27:	ff 10                	call   DWORD PTR [eax]
c0019c29:	83 c4 10             	add    esp,0x10
c0019c2c:	84 c0                	test   al,al
c0019c2e:	74 41                	je     c0019c71 <sysCallTTYName(regs*)+0x78>
c0019c30:	83 ec 08             	sub    esp,0x8
c0019c33:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0019c39:	53                   	push   ebx
c0019c3a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0019c3d:	e8 2b 6b fe ff       	call   c000076d <strcpy>
c0019c42:	83 c4 10             	add    esp,0x10
c0019c45:	31 c0                	xor    eax,eax
c0019c47:	59                   	pop    ecx
c0019c48:	31 d2                	xor    edx,edx
c0019c4a:	5b                   	pop    ebx
c0019c4b:	5e                   	pop    esi
c0019c4c:	c3                   	ret    
c0019c4d:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0019c52:	74 bb                	je     c0019c0f <sysCallTTYName(regs*)+0x16>
c0019c54:	83 ec 0c             	sub    esp,0xc
c0019c57:	50                   	push   eax
c0019c58:	e8 cc 74 ff ff       	call   c0011129 <getFromFileDescriptor(int)>
c0019c5d:	83 c4 10             	add    esp,0x10
c0019c60:	89 c3                	mov    ebx,eax
c0019c62:	85 db                	test   ebx,ebx
c0019c64:	75 bb                	jne    c0019c21 <sysCallTTYName(regs*)+0x28>
c0019c66:	59                   	pop    ecx
c0019c67:	b8 01 00 00 00       	mov    eax,0x1
c0019c6c:	31 d2                	xor    edx,edx
c0019c6e:	5b                   	pop    ebx
c0019c6f:	5e                   	pop    esi
c0019c70:	c3                   	ret    
c0019c71:	59                   	pop    ecx
c0019c72:	b8 02 00 00 00       	mov    eax,0x2
c0019c77:	31 d2                	xor    edx,edx
c0019c79:	5b                   	pop    ebx
c0019c7a:	5e                   	pop    esi
c0019c7b:	c3                   	ret    

c0019c7c <sysCallGetEnv(regs*)>:
c0019c7c:	83 ec 0c             	sub    esp,0xc
c0019c7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c83:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0019c86:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0019c89:	85 c9                	test   ecx,ecx
c0019c8b:	75 22                	jne    c0019caf <sysCallGetEnv(regs*)+0x33>
c0019c8d:	85 d2                	test   edx,edx
c0019c8f:	74 08                	je     c0019c99 <sysCallGetEnv(regs*)+0x1d>
c0019c91:	31 c0                	xor    eax,eax
c0019c93:	31 d2                	xor    edx,edx
c0019c95:	83 c4 0c             	add    esp,0xc
c0019c98:	c3                   	ret    
c0019c99:	83 ec 0c             	sub    esp,0xc
c0019c9c:	68 b0 82 02 c0       	push   0xc00282b0
c0019ca1:	e8 45 6a fe ff       	call   c00006eb <strlen>
c0019ca6:	83 c4 10             	add    esp,0x10
c0019ca9:	31 d2                	xor    edx,edx
c0019cab:	83 c4 0c             	add    esp,0xc
c0019cae:	c3                   	ret    
c0019caf:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019cb2:	85 d2                	test   edx,edx
c0019cb4:	74 05                	je     c0019cbb <sysCallGetEnv(regs*)+0x3f>
c0019cb6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0019cb9:	eb d6                	jmp    c0019c91 <sysCallGetEnv(regs*)+0x15>
c0019cbb:	83 ec 08             	sub    esp,0x8
c0019cbe:	68 b0 82 02 c0       	push   0xc00282b0
c0019cc3:	50                   	push   eax
c0019cc4:	e8 a4 6a fe ff       	call   c000076d <strcpy>
c0019cc9:	83 c4 10             	add    esp,0x10
c0019ccc:	eb c3                	jmp    c0019c91 <sysCallGetEnv(regs*)+0x15>

c0019cce <sysCallUSleep(regs*)>:
c0019cce:	83 ec 14             	sub    esp,0x14
c0019cd1:	b8 e8 03 00 00       	mov    eax,0x3e8
c0019cd6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019cda:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c0019ce1:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c0019ce4:	01 ca                	add    edx,ecx
c0019ce6:	52                   	push   edx
c0019ce7:	50                   	push   eax
c0019ce8:	e8 9d 21 00 00       	call   c001be8a <nanoSleep(unsigned long long)>
c0019ced:	31 c0                	xor    eax,eax
c0019cef:	31 d2                	xor    edx,edx
c0019cf1:	83 c4 1c             	add    esp,0x1c
c0019cf4:	c3                   	ret    

c0019cf5 <sysCallSpawn(regs*)>:
c0019cf5:	56                   	push   esi
c0019cf6:	53                   	push   ebx
c0019cf7:	53                   	push   ebx
c0019cf8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019cfc:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019cff:	85 f6                	test   esi,esi
c0019d01:	75 08                	jne    c0019d0b <sysCallSpawn(regs*)+0x16>
c0019d03:	59                   	pop    ecx
c0019d04:	31 c0                	xor    eax,eax
c0019d06:	31 d2                	xor    edx,edx
c0019d08:	5b                   	pop    ebx
c0019d09:	5e                   	pop    esi
c0019d0a:	c3                   	ret    
c0019d0b:	83 ec 0c             	sub    esp,0xc
c0019d0e:	68 3b 07 00 00       	push   0x73b
c0019d13:	e8 4a 84 ff ff       	call   c0012162 <operator new(unsigned long)>
c0019d18:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0019d1b:	89 c6                	mov    esi,eax
c0019d1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019d22:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019d25:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019d28:	56                   	push   esi
c0019d29:	e8 bc 18 00 00       	call   c001b5ea <Process::Process(char const*, Process*, char**)>
c0019d2e:	83 c4 20             	add    esp,0x20
c0019d31:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0019d38:	75 c9                	jne    c0019d03 <sysCallSpawn(regs*)+0xe>
c0019d3a:	83 ec 0c             	sub    esp,0xc
c0019d3d:	56                   	push   esi
c0019d3e:	e8 0d 1e 00 00       	call   c001bb50 <Process::createUserThread()>
c0019d43:	8b 06                	mov    eax,DWORD PTR [esi]
c0019d45:	83 c4 10             	add    esp,0x10
c0019d48:	99                   	cdq    
c0019d49:	59                   	pop    ecx
c0019d4a:	5b                   	pop    ebx
c0019d4b:	5e                   	pop    esi
c0019d4c:	c3                   	ret    

c0019d4d <sysAppSettings(regs*)>:
c0019d4d:	53                   	push   ebx
c0019d4e:	83 ec 08             	sub    esp,0x8
c0019d51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d55:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0019d58:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c0019d5e:	25 e0 1f 00 00       	and    eax,0x1fe0
c0019d63:	66 3d c0 09          	cmp    ax,0x9c0
c0019d67:	75 2f                	jne    c0019d98 <sysAppSettings(regs*)+0x4b>
c0019d69:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0019d6f:	83 e0 1f             	and    eax,0x1f
c0019d72:	3c 01                	cmp    al,0x1
c0019d74:	74 2e                	je     c0019da4 <sysAppSettings(regs*)+0x57>
c0019d76:	3c 07                	cmp    al,0x7
c0019d78:	0f 84 bd 00 00 00    	je     c0019e3b <sysAppSettings(regs*)+0xee>
c0019d7e:	84 c0                	test   al,al
c0019d80:	0f 84 dc 00 00 00    	je     c0019e62 <sysAppSettings(regs*)+0x115>
c0019d86:	3c 08                	cmp    al,0x8
c0019d88:	74 6d                	je     c0019df7 <sysAppSettings(regs*)+0xaa>
c0019d8a:	0f b6 c0             	movzx  eax,al
c0019d8d:	83 c4 08             	add    esp,0x8
c0019d90:	05 e8 03 00 00       	add    eax,0x3e8
c0019d95:	5b                   	pop    ebx
c0019d96:	99                   	cdq    
c0019d97:	c3                   	ret    
c0019d98:	b8 01 00 00 00       	mov    eax,0x1
c0019d9d:	31 d2                	xor    edx,edx
c0019d9f:	83 c4 08             	add    esp,0x8
c0019da2:	5b                   	pop    ebx
c0019da3:	c3                   	ret    
c0019da4:	51                   	push   ecx
c0019da5:	68 00 01 00 00       	push   0x100
c0019daa:	6a 00                	push   0x0
c0019dac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019db1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019db4:	83 c0 0c             	add    eax,0xc
c0019db7:	50                   	push   eax
c0019db8:	e8 11 69 fe ff       	call   c00006ce <memset>
c0019dbd:	83 c4 0c             	add    esp,0xc
c0019dc0:	68 ff 00 00 00       	push   0xff
c0019dc5:	53                   	push   ebx
c0019dc6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019dcb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019dce:	83 c0 0c             	add    eax,0xc
c0019dd1:	50                   	push   eax
c0019dd2:	e8 c1 68 fe ff       	call   c0000698 <memcpy>
c0019dd7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019ddc:	5b                   	pop    ebx
c0019ddd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019de0:	5a                   	pop    edx
c0019de1:	8d 50 0c             	lea    edx,[eax+0xc]
c0019de4:	52                   	push   edx
c0019de5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019deb:	e8 00 65 ff ff       	call   c00102f0 <VgaText::setTitle(char*)>
c0019df0:	83 c4 10             	add    esp,0x10
c0019df3:	31 c0                	xor    eax,eax
c0019df5:	eb a6                	jmp    c0019d9d <sysAppSettings(regs*)+0x50>
c0019df7:	83 ec 08             	sub    esp,0x8
c0019dfa:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0019e00:	83 e0 0f             	and    eax,0xf
c0019e03:	50                   	push   eax
c0019e04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e09:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019e0c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e12:	e8 c9 64 ff ff       	call   c00102e0 <VgaText::setTitleColour(VgaColour)>
c0019e17:	58                   	pop    eax
c0019e18:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0019e1e:	5a                   	pop    edx
c0019e1f:	c1 e8 04             	shr    eax,0x4
c0019e22:	83 e0 0f             	and    eax,0xf
c0019e25:	50                   	push   eax
c0019e26:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e2b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019e2e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e34:	e8 97 64 ff ff       	call   c00102d0 <VgaText::setTitleTextColour(VgaColour)>
c0019e39:	eb b5                	jmp    c0019df0 <sysAppSettings(regs*)+0xa3>
c0019e3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e40:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019e43:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0019e49:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0019e4f:	c0 e8 06             	shr    al,0x6
c0019e52:	83 e0 01             	and    eax,0x1
c0019e55:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0019e5b:	31 c0                	xor    eax,eax
c0019e5d:	e9 3b ff ff ff       	jmp    c0019d9d <sysAppSettings(regs*)+0x50>
c0019e62:	b8 02 00 00 00       	mov    eax,0x2
c0019e67:	e9 31 ff ff ff       	jmp    c0019d9d <sysAppSettings(regs*)+0x50>

c0019e6c <sysSetFatAttrib(regs*)>:
c0019e6c:	57                   	push   edi
c0019e6d:	56                   	push   esi
c0019e6e:	53                   	push   ebx
c0019e6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019e73:	83 ec 0c             	sub    esp,0xc
c0019e76:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019e79:	68 14 01 00 00       	push   0x114
c0019e7e:	e8 df 82 ff ff       	call   c0012162 <operator new(unsigned long)>
c0019e83:	83 c4 0c             	add    esp,0xc
c0019e86:	89 c3                	mov    ebx,eax
c0019e88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e8d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019e90:	57                   	push   edi
c0019e91:	53                   	push   ebx
c0019e92:	e8 e9 88 ff ff       	call   c0012780 <File::File(char const*, Process*)>
c0019e97:	83 c4 0c             	add    esp,0xc
c0019e9a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019e9d:	0f b6 d4             	movzx  edx,ah
c0019ea0:	0f b6 c0             	movzx  eax,al
c0019ea3:	52                   	push   edx
c0019ea4:	50                   	push   eax
c0019ea5:	53                   	push   ebx
c0019ea6:	e8 4b 8b ff ff       	call   c00129f6 <File::chfatattr(unsigned char, unsigned char)>
c0019eab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019eae:	89 c6                	mov    esi,eax
c0019eb0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019eb2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019eb5:	83 c4 10             	add    esp,0x10
c0019eb8:	31 c0                	xor    eax,eax
c0019eba:	5b                   	pop    ebx
c0019ebb:	85 f6                	test   esi,esi
c0019ebd:	5e                   	pop    esi
c0019ebe:	0f 95 c0             	setne  al
c0019ec1:	5f                   	pop    edi
c0019ec2:	31 d2                	xor    edx,edx
c0019ec4:	f7 d8                	neg    eax
c0019ec6:	83 d2 00             	adc    edx,0x0
c0019ec9:	f7 da                	neg    edx
c0019ecb:	c3                   	ret    

c0019ecc <sysPanic(regs*)>:
c0019ecc:	83 ec 18             	sub    esp,0x18
c0019ecf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ed3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019ed6:	e8 14 eb ff ff       	call   c00189ef <Krnl::panic(char const*)>
c0019edb:	c7 04 24 67 83 02 c0 	mov    DWORD PTR [esp],0xc0028367
c0019ee2:	e8 08 eb ff ff       	call   c00189ef <Krnl::panic(char const*)>
c0019ee7:	b8 01 00 00 00       	mov    eax,0x1
c0019eec:	31 d2                	xor    edx,edx
c0019eee:	83 c4 1c             	add    esp,0x1c
c0019ef1:	c3                   	ret    

c0019ef2 <sysPipe(regs*)>:
c0019ef2:	57                   	push   edi
c0019ef3:	56                   	push   esi
c0019ef4:	53                   	push   ebx
c0019ef5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ef9:	83 ec 0c             	sub    esp,0xc
c0019efc:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0019eff:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0019f02:	6a 20                	push   0x20
c0019f04:	e8 59 82 ff ff       	call   c0012162 <operator new(unsigned long)>
c0019f09:	89 c3                	mov    ebx,eax
c0019f0b:	58                   	pop    eax
c0019f0c:	5a                   	pop    edx
c0019f0d:	68 00 50 00 00       	push   0x5000
c0019f12:	53                   	push   ebx
c0019f13:	e8 16 5d ff ff       	call   c000fc2e <Pipe::Pipe(int)>
c0019f18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f1b:	e8 54 6f ff ff       	call   c0010e74 <UnixFile::getFileDescriptor()>
c0019f20:	89 07                	mov    DWORD PTR [edi],eax
c0019f22:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f25:	e8 4a 6f ff ff       	call   c0010e74 <UnixFile::getFileDescriptor()>
c0019f2a:	83 c4 10             	add    esp,0x10
c0019f2d:	89 06                	mov    DWORD PTR [esi],eax
c0019f2f:	31 d2                	xor    edx,edx
c0019f31:	5b                   	pop    ebx
c0019f32:	31 c0                	xor    eax,eax
c0019f34:	5e                   	pop    esi
c0019f35:	5f                   	pop    edi
c0019f36:	c3                   	ret    

c0019f37 <sysGetUnixTime(regs*)>:
c0019f37:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0019f3c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019f42:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019f46:	e9 fd 91 ff ff       	jmp    c0013148 <Clock::timeInSecondsLocal()>

c0019f4b <string_ends_with(char const*, char const*)>:
c0019f4b:	57                   	push   edi
c0019f4c:	56                   	push   esi
c0019f4d:	53                   	push   ebx
c0019f4e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f52:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019f56:	83 ec 0c             	sub    esp,0xc
c0019f59:	53                   	push   ebx
c0019f5a:	e8 8c 67 fe ff       	call   c00006eb <strlen>
c0019f5f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019f62:	89 c6                	mov    esi,eax
c0019f64:	e8 82 67 fe ff       	call   c00006eb <strlen>
c0019f69:	83 c4 10             	add    esp,0x10
c0019f6c:	39 c6                	cmp    esi,eax
c0019f6e:	7d 06                	jge    c0019f76 <string_ends_with(char const*, char const*)+0x2b>
c0019f70:	5b                   	pop    ebx
c0019f71:	31 c0                	xor    eax,eax
c0019f73:	5e                   	pop    esi
c0019f74:	5f                   	pop    edi
c0019f75:	c3                   	ret    
c0019f76:	83 ec 08             	sub    esp,0x8
c0019f79:	29 c6                	sub    esi,eax
c0019f7b:	57                   	push   edi
c0019f7c:	01 f3                	add    ebx,esi
c0019f7e:	53                   	push   ebx
c0019f7f:	e8 3a 68 fe ff       	call   c00007be <strcmp>
c0019f84:	83 c4 10             	add    esp,0x10
c0019f87:	85 c0                	test   eax,eax
c0019f89:	5b                   	pop    ebx
c0019f8a:	0f 94 c0             	sete   al
c0019f8d:	5e                   	pop    esi
c0019f8e:	0f b6 c0             	movzx  eax,al
c0019f91:	5f                   	pop    edi
c0019f92:	c3                   	ret    

c0019f93 <sysCallOpen(regs*)>:
c0019f93:	56                   	push   esi
c0019f94:	53                   	push   ebx
c0019f95:	81 ec 04 01 00 00    	sub    esp,0x104
c0019f9b:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0019fa2:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0019fa5:	85 c9                	test   ecx,ecx
c0019fa7:	0f 84 b3 00 00 00    	je     c001a060 <sysCallOpen(regs*)+0xcd>
c0019fad:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0019fb0:	85 c0                	test   eax,eax
c0019fb2:	0f 84 a8 00 00 00    	je     c001a060 <sysCallOpen(regs*)+0xcd>
c0019fb8:	52                   	push   edx
c0019fb9:	68 76 83 02 c0       	push   0xc0028376
c0019fbe:	50                   	push   eax
c0019fbf:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0019fc3:	56                   	push   esi
c0019fc4:	e8 0d 86 ff ff       	call   c00125d6 <standardiseFiles(char*, char const*, char const*)>
c0019fc9:	89 34 24             	mov    DWORD PTR [esp],esi
c0019fcc:	e8 1a 67 fe ff       	call   c00006eb <strlen>
c0019fd1:	83 c4 10             	add    esp,0x10
c0019fd4:	48                   	dec    eax
c0019fd5:	74 1d                	je     c0019ff4 <sysCallOpen(regs*)+0x61>
c0019fd7:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0019fda:	eb 0f                	jmp    c0019feb <sysCallOpen(regs*)+0x58>
c0019fdc:	80 fa 3a             	cmp    dl,0x3a
c0019fdf:	74 0f                	je     c0019ff0 <sysCallOpen(regs*)+0x5d>
c0019fe1:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0019fe5:	48                   	dec    eax
c0019fe6:	74 0c                	je     c0019ff4 <sysCallOpen(regs*)+0x61>
c0019fe8:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0019feb:	80 fa 2e             	cmp    dl,0x2e
c0019fee:	75 ec                	jne    c0019fdc <sysCallOpen(regs*)+0x49>
c0019ff0:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0019ff4:	83 ec 08             	sub    esp,0x8
c0019ff7:	68 7a 83 02 c0       	push   0xc002837a
c0019ffc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019fff:	e8 47 ff ff ff       	call   c0019f4b <string_ends_with(char const*, char const*)>
c001a004:	83 c4 10             	add    esp,0x10
c001a007:	85 c0                	test   eax,eax
c001a009:	75 17                	jne    c001a022 <sysCallOpen(regs*)+0x8f>
c001a00b:	83 ec 08             	sub    esp,0x8
c001a00e:	68 9b 83 02 c0       	push   0xc002839b
c001a013:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a016:	e8 30 ff ff ff       	call   c0019f4b <string_ends_with(char const*, char const*)>
c001a01b:	83 c4 10             	add    esp,0x10
c001a01e:	85 c0                	test   eax,eax
c001a020:	74 51                	je     c001a073 <sysCallOpen(regs*)+0xe0>
c001a022:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a025:	83 ec 08             	sub    esp,0x8
c001a028:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001a02e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a035:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a038:	ff 30                	push   DWORD PTR [eax]
c001a03a:	68 7f 83 02 c0       	push   0xc002837f
c001a03f:	e8 0d 82 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001a044:	c7 04 24 8e 83 02 c0 	mov    DWORD PTR [esp],0xc002838e
c001a04b:	e8 01 82 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001a050:	83 c4 10             	add    esp,0x10
c001a053:	81 c4 04 01 00 00    	add    esp,0x104
c001a059:	31 c0                	xor    eax,eax
c001a05b:	31 d2                	xor    edx,edx
c001a05d:	5b                   	pop    ebx
c001a05e:	5e                   	pop    esi
c001a05f:	c3                   	ret    
c001a060:	81 c4 04 01 00 00    	add    esp,0x104
c001a066:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a06b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a070:	5b                   	pop    ebx
c001a071:	5e                   	pop    esi
c001a072:	c3                   	ret    
c001a073:	83 ec 08             	sub    esp,0x8
c001a076:	68 7b 83 02 c0       	push   0xc002837b
c001a07b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a07e:	e8 3b 67 fe ff       	call   c00007be <strcmp>
c001a083:	83 c4 10             	add    esp,0x10
c001a086:	85 c0                	test   eax,eax
c001a088:	74 98                	je     c001a022 <sysCallOpen(regs*)+0x8f>
c001a08a:	83 ec 08             	sub    esp,0x8
c001a08d:	68 7a 83 02 c0       	push   0xc002837a
c001a092:	56                   	push   esi
c001a093:	e8 b3 fe ff ff       	call   c0019f4b <string_ends_with(char const*, char const*)>
c001a098:	83 c4 10             	add    esp,0x10
c001a09b:	85 c0                	test   eax,eax
c001a09d:	75 83                	jne    c001a022 <sysCallOpen(regs*)+0x8f>
c001a09f:	83 ec 08             	sub    esp,0x8
c001a0a2:	68 a0 83 02 c0       	push   0xc00283a0
c001a0a7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a0aa:	e8 9c fe ff ff       	call   c0019f4b <string_ends_with(char const*, char const*)>
c001a0af:	83 c4 10             	add    esp,0x10
c001a0b2:	85 c0                	test   eax,eax
c001a0b4:	0f 85 d1 00 00 00    	jne    c001a18b <sysCallOpen(regs*)+0x1f8>
c001a0ba:	83 ec 08             	sub    esp,0x8
c001a0bd:	68 a5 83 02 c0       	push   0xc00283a5
c001a0c2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a0c5:	e8 81 fe ff ff       	call   c0019f4b <string_ends_with(char const*, char const*)>
c001a0ca:	83 c4 10             	add    esp,0x10
c001a0cd:	85 c0                	test   eax,eax
c001a0cf:	0f 85 b6 00 00 00    	jne    c001a18b <sysCallOpen(regs*)+0x1f8>
c001a0d5:	83 ec 08             	sub    esp,0x8
c001a0d8:	68 a1 83 02 c0       	push   0xc00283a1
c001a0dd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a0e0:	e8 d9 66 fe ff       	call   c00007be <strcmp>
c001a0e5:	83 c4 10             	add    esp,0x10
c001a0e8:	85 c0                	test   eax,eax
c001a0ea:	0f 84 9b 00 00 00    	je     c001a18b <sysCallOpen(regs*)+0x1f8>
c001a0f0:	83 ec 08             	sub    esp,0x8
c001a0f3:	68 a0 83 02 c0       	push   0xc00283a0
c001a0f8:	56                   	push   esi
c001a0f9:	e8 4d fe ff ff       	call   c0019f4b <string_ends_with(char const*, char const*)>
c001a0fe:	83 c4 10             	add    esp,0x10
c001a101:	85 c0                	test   eax,eax
c001a103:	0f 85 82 00 00 00    	jne    c001a18b <sysCallOpen(regs*)+0x1f8>
c001a109:	83 ec 0c             	sub    esp,0xc
c001a10c:	68 14 01 00 00       	push   0x114
c001a111:	e8 4c 80 ff ff       	call   c0012162 <operator new(unsigned long)>
c001a116:	83 c4 0c             	add    esp,0xc
c001a119:	89 c6                	mov    esi,eax
c001a11b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a120:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a123:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a126:	56                   	push   esi
c001a127:	e8 54 86 ff ff       	call   c0012780 <File::File(char const*, Process*)>
c001a12c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001a12f:	83 c4 10             	add    esp,0x10
c001a132:	0f b6 c2             	movzx  eax,dl
c001a135:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001a138:	89 d0                	mov    eax,edx
c001a13a:	83 e0 01             	and    eax,0x1
c001a13d:	f6 c2 02             	test   dl,0x2
c001a140:	74 03                	je     c001a145 <sysCallOpen(regs*)+0x1b2>
c001a142:	83 c8 02             	or     eax,0x2
c001a145:	f6 c2 04             	test   dl,0x4
c001a148:	74 03                	je     c001a14d <sysCallOpen(regs*)+0x1ba>
c001a14a:	83 c8 04             	or     eax,0x4
c001a14d:	f6 c2 08             	test   dl,0x8
c001a150:	74 03                	je     c001a155 <sysCallOpen(regs*)+0x1c2>
c001a152:	83 c8 0a             	or     eax,0xa
c001a155:	83 e2 10             	and    edx,0x10
c001a158:	74 03                	je     c001a15d <sysCallOpen(regs*)+0x1ca>
c001a15a:	83 c8 12             	or     eax,0x12
c001a15d:	83 ec 08             	sub    esp,0x8
c001a160:	50                   	push   eax
c001a161:	56                   	push   esi
c001a162:	e8 7d 86 ff ff       	call   c00127e4 <File::open(FileOpenMode)>
c001a167:	83 c4 10             	add    esp,0x10
c001a16a:	85 c0                	test   eax,eax
c001a16c:	0f 85 ee fe ff ff    	jne    c001a060 <sysCallOpen(regs*)+0xcd>
c001a172:	83 ec 0c             	sub    esp,0xc
c001a175:	56                   	push   esi
c001a176:	e8 f9 6c ff ff       	call   c0010e74 <UnixFile::getFileDescriptor()>
c001a17b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a17e:	89 02                	mov    DWORD PTR [edx],eax
c001a180:	c1 f8 1f             	sar    eax,0x1f
c001a183:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a186:	e9 c5 fe ff ff       	jmp    c001a050 <sysCallOpen(regs*)+0xbd>
c001a18b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a18e:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001a194:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a19b:	e9 b3 fe ff ff       	jmp    c001a053 <sysCallOpen(regs*)+0xc0>

c001a1a0 <setupSystemCalls()>:
c001a1a0:	c7 05 60 ae 02 c0 fc 93 01 c0 	mov    DWORD PTR ds:0xc002ae60,0xc00193fc
c001a1aa:	c7 05 64 ae 02 c0 2a 92 01 c0 	mov    DWORD PTR ds:0xc002ae64,0xc001922a
c001a1b4:	c7 05 68 ae 02 c0 3f 93 01 c0 	mov    DWORD PTR ds:0xc002ae68,0xc001933f
c001a1be:	c7 05 6c ae 02 c0 94 93 01 c0 	mov    DWORD PTR ds:0xc002ae6c,0xc0019394
c001a1c8:	c7 05 70 ae 02 c0 d7 92 01 c0 	mov    DWORD PTR ds:0xc002ae70,0xc00192d7
c001a1d2:	c7 05 74 ae 02 c0 16 94 01 c0 	mov    DWORD PTR ds:0xc002ae74,0xc0019416
c001a1dc:	c7 05 78 ae 02 c0 bb 95 01 c0 	mov    DWORD PTR ds:0xc002ae78,0xc00195bb
c001a1e6:	c7 05 7c ae 02 c0 da 95 01 c0 	mov    DWORD PTR ds:0xc002ae7c,0xc00195da
c001a1f0:	c7 05 84 ae 02 c0 3b 99 01 c0 	mov    DWORD PTR ds:0xc002ae84,0xc001993b
c001a1fa:	c7 05 80 ae 02 c0 93 9f 01 c0 	mov    DWORD PTR ds:0xc002ae80,0xc0019f93
c001a204:	c7 05 88 ae 02 c0 c3 99 01 c0 	mov    DWORD PTR ds:0xc002ae88,0xc00199c3
c001a20e:	c7 05 8c ae 02 c0 39 96 01 c0 	mov    DWORD PTR ds:0xc002ae8c,0xc0019639
c001a218:	c7 05 90 ae 02 c0 22 94 01 c0 	mov    DWORD PTR ds:0xc002ae90,0xc0019422
c001a222:	c7 05 94 ae 02 c0 27 94 01 c0 	mov    DWORD PTR ds:0xc002ae94,0xc0019427
c001a22c:	c7 05 98 ae 02 c0 30 9a 01 c0 	mov    DWORD PTR ds:0xc002ae98,0xc0019a30
c001a236:	c7 05 9c ae 02 c0 89 9a 01 c0 	mov    DWORD PTR ds:0xc002ae9c,0xc0019a89
c001a240:	c7 05 a0 ae 02 c0 21 97 01 c0 	mov    DWORD PTR ds:0xc002aea0,0xc0019721
c001a24a:	c7 05 a4 ae 02 c0 8a 97 01 c0 	mov    DWORD PTR ds:0xc002aea4,0xc001978a
c001a254:	c7 05 a8 ae 02 c0 b8 98 01 c0 	mov    DWORD PTR ds:0xc002aea8,0xc00198b8
c001a25e:	c7 05 ac ae 02 c0 2c 94 01 c0 	mov    DWORD PTR ds:0xc002aeac,0xc001942c
c001a268:	c7 05 b0 ae 02 c0 ef 9a 01 c0 	mov    DWORD PTR ds:0xc002aeb0,0xc0019aef
c001a272:	c7 05 b4 ae 02 c0 36 94 01 c0 	mov    DWORD PTR ds:0xc002aeb4,0xc0019436
c001a27c:	c7 05 b8 ae 02 c0 41 94 01 c0 	mov    DWORD PTR ds:0xc002aeb8,0xc0019441
c001a286:	c7 05 bc ae 02 c0 09 9b 01 c0 	mov    DWORD PTR ds:0xc002aebc,0xc0019b09
c001a290:	c7 05 c0 ae 02 c0 5b 9b 01 c0 	mov    DWORD PTR ds:0xc002aec0,0xc0019b5b
c001a29a:	c7 05 c4 ae 02 c0 4c 94 01 c0 	mov    DWORD PTR ds:0xc002aec4,0xc001944c
c001a2a4:	c7 05 c8 ae 02 c0 ad 9b 01 c0 	mov    DWORD PTR ds:0xc002aec8,0xc0019bad
c001a2ae:	c7 05 cc ae 02 c0 f6 95 01 c0 	mov    DWORD PTR ds:0xc002aecc,0xc00195f6
c001a2b8:	c7 05 d0 ae 02 c0 f9 9b 01 c0 	mov    DWORD PTR ds:0xc002aed0,0xc0019bf9
c001a2c2:	c7 05 d4 ae 02 c0 c7 96 01 c0 	mov    DWORD PTR ds:0xc002aed4,0xc00196c7
c001a2cc:	c7 05 d8 ae 02 c0 ce 9c 01 c0 	mov    DWORD PTR ds:0xc002aed8,0xc0019cce
c001a2d6:	c7 05 dc ae 02 c0 07 98 01 c0 	mov    DWORD PTR ds:0xc002aedc,0xc0019807
c001a2e0:	c7 05 e0 ae 02 c0 f5 9c 01 c0 	mov    DWORD PTR ds:0xc002aee0,0xc0019cf5
c001a2ea:	c7 05 e4 ae 02 c0 7c 9c 01 c0 	mov    DWORD PTR ds:0xc002aee4,0xc0019c7c
c001a2f4:	c7 05 e8 ae 02 c0 4d 9d 01 c0 	mov    DWORD PTR ds:0xc002aee8,0xc0019d4d
c001a2fe:	c7 05 ec ae 02 c0 5c 94 01 c0 	mov    DWORD PTR ds:0xc002aeec,0xc001945c
c001a308:	c7 05 f0 ae 02 c0 c6 94 01 c0 	mov    DWORD PTR ds:0xc002aef0,0xc00194c6
c001a312:	c7 05 f4 ae 02 c0 0c 95 01 c0 	mov    DWORD PTR ds:0xc002aef4,0xc001950c
c001a31c:	c7 05 f8 ae 02 c0 6c 9e 01 c0 	mov    DWORD PTR ds:0xc002aef8,0xc0019e6c
c001a326:	c7 05 fc ae 02 c0 cc 9e 01 c0 	mov    DWORD PTR ds:0xc002aefc,0xc0019ecc
c001a330:	c7 05 00 af 02 c0 5d 95 01 c0 	mov    DWORD PTR ds:0xc002af00,0xc001955d
c001a33a:	c7 05 04 af 02 c0 f2 9e 01 c0 	mov    DWORD PTR ds:0xc002af04,0xc0019ef2
c001a344:	c7 05 08 af 02 c0 37 9f 01 c0 	mov    DWORD PTR ds:0xc002af08,0xc0019f37
c001a34e:	c7 05 0c af 02 c0 42 92 01 c0 	mov    DWORD PTR ds:0xc002af0c,0xc0019242
c001a358:	c3                   	ret    

c001a359 <systemCall(regs*, void*)>:
c001a359:	53                   	push   ebx
c001a35a:	83 ec 08             	sub    esp,0x8
c001a35d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a361:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a364:	83 f8 7f             	cmp    eax,0x7f
c001a367:	77 16                	ja     c001a37f <systemCall(regs*, void*)+0x26>
c001a369:	8b 14 85 60 ae 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd51a0]
c001a370:	85 d2                	test   edx,edx
c001a372:	74 0b                	je     c001a37f <systemCall(regs*, void*)+0x26>
c001a374:	83 ec 0c             	sub    esp,0xc
c001a377:	53                   	push   ebx
c001a378:	ff d2                	call   edx
c001a37a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a37d:	eb 0d                	jmp    c001a38c <systemCall(regs*, void*)+0x33>
c001a37f:	52                   	push   edx
c001a380:	52                   	push   edx
c001a381:	50                   	push   eax
c001a382:	68 aa 83 02 c0       	push   0xc00283aa
c001a387:	e8 c5 7e ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001a38c:	83 c4 10             	add    esp,0x10
c001a38f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a394:	31 d2                	xor    edx,edx
c001a396:	83 c4 08             	add    esp,0x8
c001a399:	5b                   	pop    ebx
c001a39a:	c3                   	ret    

c001a39b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001a39b:	55                   	push   ebp
c001a39c:	89 e5                	mov    ebp,esp
c001a39e:	57                   	push   edi
c001a39f:	56                   	push   esi
c001a3a0:	53                   	push   ebx
c001a3a1:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001a3a7:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001a3aa:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001a3ad:	85 c0                	test   eax,eax
c001a3af:	0f 95 c1             	setne  cl
c001a3b2:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001a3b6:	0f 94 c2             	sete   dl
c001a3b9:	84 d1                	test   cl,dl
c001a3bb:	74 26                	je     c001a3e3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001a3bd:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001a3c4:	74 1d                	je     c001a3e3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001a3c6:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001a3c9:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001a3cf:	89 d6                	mov    esi,edx
c001a3d1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001a3d7:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001a3dd:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001a3e0:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001a3e3:	83 ec 0c             	sub    esp,0xc
c001a3e6:	05 ff 0f 00 00       	add    eax,0xfff
c001a3eb:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001a3ee:	6a 01                	push   0x1
c001a3f0:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001a3f6:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001a3fc:	e8 7e 6e ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c001a401:	83 c4 10             	add    esp,0x10
c001a404:	89 c6                	mov    esi,eax
c001a406:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001a40c:	0f 86 21 01 00 00    	jbe    c001a533 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001a412:	c1 eb 0c             	shr    ebx,0xc
c001a415:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001a41f:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001a425:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001a428:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001a42b:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001a431:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001a434:	29 d8                	sub    eax,ebx
c001a436:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001a43c:	0f 83 f4 00 00 00    	jae    c001a536 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001a442:	83 ec 0c             	sub    esp,0xc
c001a445:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001a44b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001a44e:	3d 00 10 00 00       	cmp    eax,0x1000
c001a453:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001a455:	52                   	push   edx
c001a456:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001a45c:	52                   	push   edx
c001a45d:	76 05                	jbe    c001a464 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001a45f:	b8 00 10 00 00       	mov    eax,0x1000
c001a464:	31 d2                	xor    edx,edx
c001a466:	52                   	push   edx
c001a467:	50                   	push   eax
c001a468:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001a46b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a46e:	83 c4 20             	add    esp,0x20
c001a471:	85 c0                	test   eax,eax
c001a473:	74 1f                	je     c001a494 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001a475:	51                   	push   ecx
c001a476:	51                   	push   ecx
c001a477:	50                   	push   eax
c001a478:	68 be 83 02 c0       	push   0xc00283be
c001a47d:	e8 cf 7d ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001a482:	89 34 24             	mov    DWORD PTR [esp],esi
c001a485:	e8 4f 71 ff ff       	call   c00115d9 <Virt::freeKernelVirtualPages(unsigned long)>
c001a48a:	83 c4 10             	add    esp,0x10
c001a48d:	31 c0                	xor    eax,eax
c001a48f:	e9 7c 01 00 00       	jmp    c001a610 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001a494:	e8 a9 14 00 00       	call   c001b942 <lockScheduler()>
c001a499:	e8 54 52 ff ff       	call   c000f6f2 <Phys::allocatePage()>
c001a49e:	6a 07                	push   0x7
c001a4a0:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001a4a6:	56                   	push   esi
c001a4a7:	50                   	push   eax
c001a4a8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a4ae:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a4b1:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001a4b7:	e8 96 74 ff ff       	call   c0011952 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a4bc:	83 c4 0c             	add    esp,0xc
c001a4bf:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a4c5:	6a 00                	push   0x0
c001a4c7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a4cd:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a4d0:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001a4d6:	e8 d5 72 ff ff       	call   c00117b0 <VAS::mapOtherVASIn(bool, VAS*)>
c001a4db:	58                   	pop    eax
c001a4dc:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001a4e2:	5a                   	pop    edx
c001a4e3:	68 07 04 00 00       	push   0x407
c001a4e8:	53                   	push   ebx
c001a4e9:	81 c3 00 10 00 00    	add    ebx,0x1000
c001a4ef:	50                   	push   eax
c001a4f0:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a4f6:	6a 00                	push   0x0
c001a4f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a4fd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a500:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a506:	e8 fd 77 ff ff       	call   c0011d08 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001a50b:	83 c4 1c             	add    esp,0x1c
c001a50e:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001a514:	68 00 10 00 00       	push   0x1000
c001a519:	50                   	push   eax
c001a51a:	56                   	push   esi
c001a51b:	e8 78 61 fe ff       	call   c0000698 <memcpy>
c001a520:	e8 1f 14 00 00       	call   c001b944 <unlockScheduler()>
c001a525:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001a52b:	83 c4 10             	add    esp,0x10
c001a52e:	e9 f5 fe ff ff       	jmp    c001a428 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001a533:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001a536:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001a540:	0f 86 bc 00 00 00    	jbe    c001a602 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001a546:	e8 f7 13 00 00       	call   c001b942 <lockScheduler()>
c001a54b:	51                   	push   ecx
c001a54c:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a552:	6a 00                	push   0x0
c001a554:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a559:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a55c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a562:	e8 49 72 ff ff       	call   c00117b0 <VAS::mapOtherVASIn(bool, VAS*)>
c001a567:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001a56d:	83 c4 10             	add    esp,0x10
c001a570:	c1 e8 0c             	shr    eax,0xc
c001a573:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001a57d:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001a583:	e8 6a 51 ff ff       	call   c000f6f2 <Phys::allocatePage()>
c001a588:	6a 07                	push   0x7
c001a58a:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001a590:	56                   	push   esi
c001a591:	50                   	push   eax
c001a592:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a598:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a59b:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001a5a1:	e8 ac 73 ff ff       	call   c0011952 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a5a6:	58                   	pop    eax
c001a5a7:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001a5ad:	5a                   	pop    edx
c001a5ae:	68 07 04 00 00       	push   0x407
c001a5b3:	53                   	push   ebx
c001a5b4:	81 c3 00 10 00 00    	add    ebx,0x1000
c001a5ba:	50                   	push   eax
c001a5bb:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a5c1:	6a 00                	push   0x0
c001a5c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5c8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a5cb:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a5d1:	e8 32 77 ff ff       	call   c0011d08 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001a5d6:	83 c4 1c             	add    esp,0x1c
c001a5d9:	68 00 10 00 00       	push   0x1000
c001a5de:	6a 00                	push   0x0
c001a5e0:	56                   	push   esi
c001a5e1:	e8 e8 60 fe ff       	call   c00006ce <memset>
c001a5e6:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001a5ec:	83 c4 10             	add    esp,0x10
c001a5ef:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001a5f5:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001a5fb:	77 86                	ja     c001a583 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001a5fd:	e8 42 13 00 00       	call   c001b944 <unlockScheduler()>
c001a602:	83 ec 0c             	sub    esp,0xc
c001a605:	56                   	push   esi
c001a606:	e8 ce 6f ff ff       	call   c00115d9 <Virt::freeKernelVirtualPages(unsigned long)>
c001a60b:	83 c4 10             	add    esp,0x10
c001a60e:	b0 01                	mov    al,0x1
c001a610:	8d 65 f4             	lea    esp,[ebp-0xc]
c001a613:	5b                   	pop    ebx
c001a614:	5e                   	pop    esi
c001a615:	5f                   	pop    edi
c001a616:	5d                   	pop    ebp
c001a617:	c3                   	ret    

c001a618 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001a618:	55                   	push   ebp
c001a619:	57                   	push   edi
c001a61a:	56                   	push   esi
c001a61b:	53                   	push   ebx
c001a61c:	83 ec 48             	sub    esp,0x48
c001a61f:	68 14 01 00 00       	push   0x114
c001a624:	e8 39 7b ff ff       	call   c0012162 <operator new(unsigned long)>
c001a629:	83 c4 0c             	add    esp,0xc
c001a62c:	89 c6                	mov    esi,eax
c001a62e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001a632:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a636:	50                   	push   eax
c001a637:	e8 44 81 ff ff       	call   c0012780 <File::File(char const*, Process*)>
c001a63c:	58                   	pop    eax
c001a63d:	5a                   	pop    edx
c001a63e:	6a 01                	push   0x1
c001a640:	56                   	push   esi
c001a641:	e8 9e 81 ff ff       	call   c00127e4 <File::open(FileOpenMode)>
c001a646:	83 c4 10             	add    esp,0x10
c001a649:	85 c0                	test   eax,eax
c001a64b:	0f 85 47 01 00 00    	jne    c001a798 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a651:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001a659:	83 ec 0c             	sub    esp,0xc
c001a65c:	6a 34                	push   0x34
c001a65e:	e8 e5 4a ff ff       	call   c000f148 <malloc>
c001a663:	89 c3                	mov    ebx,eax
c001a665:	58                   	pop    eax
c001a666:	8b 06                	mov    eax,DWORD PTR [esi]
c001a668:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001a66c:	57                   	push   edi
c001a66d:	53                   	push   ebx
c001a66e:	6a 00                	push   0x0
c001a670:	6a 34                	push   0x34
c001a672:	56                   	push   esi
c001a673:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a676:	83 c4 20             	add    esp,0x20
c001a679:	85 c0                	test   eax,eax
c001a67b:	0f 85 17 01 00 00    	jne    c001a798 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a681:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001a687:	0f 85 0b 01 00 00    	jne    c001a798 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a68d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a690:	85 c0                	test   eax,eax
c001a692:	0f 84 00 01 00 00    	je     c001a798 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a698:	31 d2                	xor    edx,edx
c001a69a:	55                   	push   ebp
c001a69b:	52                   	push   edx
c001a69c:	50                   	push   eax
c001a69d:	56                   	push   esi
c001a69e:	e8 ff 81 ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001a6a3:	83 c4 10             	add    esp,0x10
c001a6a6:	85 c0                	test   eax,eax
c001a6a8:	0f 85 ea 00 00 00    	jne    c001a798 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a6ae:	83 ec 0c             	sub    esp,0xc
c001a6b1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001a6b4:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001a6b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a6bc:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001a6c0:	0f af c2             	imul   eax,edx
c001a6c3:	50                   	push   eax
c001a6c4:	e8 7f 4a ff ff       	call   c000f148 <malloc>
c001a6c9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a6cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a6d0:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a6d2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a6d6:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001a6da:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001a6de:	0f af c2             	imul   eax,edx
c001a6e1:	99                   	cdq    
c001a6e2:	52                   	push   edx
c001a6e3:	50                   	push   eax
c001a6e4:	56                   	push   esi
c001a6e5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a6e8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001a6eb:	83 c4 20             	add    esp,0x20
c001a6ee:	85 c0                	test   eax,eax
c001a6f0:	0f 84 a2 00 00 00    	je     c001a798 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a6f6:	31 d2                	xor    edx,edx
c001a6f8:	51                   	push   ecx
c001a6f9:	52                   	push   edx
c001a6fa:	50                   	push   eax
c001a6fb:	56                   	push   esi
c001a6fc:	e8 a1 81 ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001a701:	83 c4 10             	add    esp,0x10
c001a704:	85 c0                	test   eax,eax
c001a706:	0f 85 8c 00 00 00    	jne    c001a798 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a70c:	83 ec 0c             	sub    esp,0xc
c001a70f:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001a713:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001a717:	31 ed                	xor    ebp,ebp
c001a719:	0f af c2             	imul   eax,edx
c001a71c:	50                   	push   eax
c001a71d:	e8 26 4a ff ff       	call   c000f148 <malloc>
c001a722:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a725:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a729:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a72b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a72f:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001a733:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001a737:	0f af c2             	imul   eax,edx
c001a73a:	99                   	cdq    
c001a73b:	52                   	push   edx
c001a73c:	50                   	push   eax
c001a73d:	56                   	push   esi
c001a73e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a741:	83 c4 20             	add    esp,0x20
c001a744:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a74c:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001a750:	0f 86 80 00 00 00    	jbe    c001a7d6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001a756:	0f b7 fd             	movzx  edi,bp
c001a759:	c1 e7 05             	shl    edi,0x5
c001a75c:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001a760:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001a763:	75 6b                	jne    c001a7d0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001a765:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001a768:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a76c:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001a76f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a773:	52                   	push   edx
c001a774:	31 d2                	xor    edx,edx
c001a776:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001a779:	52                   	push   edx
c001a77a:	50                   	push   eax
c001a77b:	56                   	push   esi
c001a77c:	e8 21 81 ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001a781:	83 c4 10             	add    esp,0x10
c001a784:	85 c0                	test   eax,eax
c001a786:	74 17                	je     c001a79f <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001a788:	83 ec 0c             	sub    esp,0xc
c001a78b:	68 e9 83 02 c0       	push   0xc00283e9
c001a790:	e8 bc 7a ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001a795:	83 c4 10             	add    esp,0x10
c001a798:	31 c0                	xor    eax,eax
c001a79a:	e9 87 00 00 00       	jmp    c001a826 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001a79f:	83 ec 0c             	sub    esp,0xc
c001a7a2:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001a7a5:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001a7a8:	50                   	push   eax
c001a7a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a7ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a7b1:	56                   	push   esi
c001a7b2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001a7b6:	e8 e0 fb ff ff       	call   c001a39b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001a7bb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a7bf:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001a7c3:	83 c4 20             	add    esp,0x20
c001a7c6:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001a7ca:	73 04                	jae    c001a7d0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001a7cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a7d0:	45                   	inc    ebp
c001a7d1:	e9 76 ff ff ff       	jmp    c001a74c <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001a7d6:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001a7da:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a7de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7e2:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001a7e8:	83 ec 0c             	sub    esp,0xc
c001a7eb:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001a7f1:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a7f6:	05 00 10 00 00       	add    eax,0x1000
c001a7fb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a7fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a802:	e8 51 49 ff ff       	call   c000f158 <free>
c001a807:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a80a:	e8 49 49 ff ff       	call   c000f158 <free>
c001a80f:	58                   	pop    eax
c001a810:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a814:	e8 3f 49 ff ff       	call   c000f158 <free>
c001a819:	89 34 24             	mov    DWORD PTR [esp],esi
c001a81c:	e8 21 80 ff ff       	call   c0012842 <File::close()>
c001a821:	83 c4 10             	add    esp,0x10
c001a824:	b0 01                	mov    al,0x1
c001a826:	83 c4 3c             	add    esp,0x3c
c001a829:	5b                   	pop    ebx
c001a82a:	5e                   	pop    esi
c001a82b:	5f                   	pop    edi
c001a82c:	5d                   	pop    ebp
c001a82d:	c3                   	ret    

c001a82e <Thr::runtimeReferenceHelper()>:
c001a82e:	83 ec 18             	sub    esp,0x18
c001a831:	68 f1 83 02 c0       	push   0xc00283f1
c001a836:	e8 16 7a ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001a83b:	fa                   	cli    
c001a83c:	83 c4 10             	add    esp,0x10
c001a83f:	eb fe                	jmp    c001a83f <Thr::runtimeReferenceHelper()+0x11>

c001a841 <Thr::getAddressOfKernelSymbol(char const*)>:
c001a841:	57                   	push   edi
c001a842:	56                   	push   esi
c001a843:	53                   	push   ebx
c001a844:	31 db                	xor    ebx,ebx
c001a846:	39 1d 00 b8 02 c0    	cmp    DWORD PTR ds:0xc002b800,ebx
c001a84c:	7e 3c                	jle    c001a88a <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001a84e:	8b 34 9d 80 b7 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd4880]
c001a855:	31 ff                	xor    edi,edi
c001a857:	39 3c 9d 80 b6 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd4980],edi
c001a85e:	7e 27                	jle    c001a887 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001a860:	50                   	push   eax
c001a861:	50                   	push   eax
c001a862:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a866:	8b 06                	mov    eax,DWORD PTR [esi]
c001a868:	03 04 9d 00 b7 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd4900]
c001a86f:	50                   	push   eax
c001a870:	e8 49 5f fe ff       	call   c00007be <strcmp>
c001a875:	83 c4 10             	add    esp,0x10
c001a878:	85 c0                	test   eax,eax
c001a87a:	75 05                	jne    c001a881 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001a87c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a87f:	eb 0b                	jmp    c001a88c <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001a881:	83 c6 10             	add    esi,0x10
c001a884:	47                   	inc    edi
c001a885:	eb d0                	jmp    c001a857 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001a887:	43                   	inc    ebx
c001a888:	eb bc                	jmp    c001a846 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001a88a:	31 c0                	xor    eax,eax
c001a88c:	5b                   	pop    ebx
c001a88d:	5e                   	pop    esi
c001a88e:	5f                   	pop    edi
c001a88f:	c3                   	ret    

c001a890 <Thr::loadKernelSymbolTable(char const*)>:
c001a890:	55                   	push   ebp
c001a891:	57                   	push   edi
c001a892:	56                   	push   esi
c001a893:	53                   	push   ebx
c001a894:	83 ec 68             	sub    esp,0x68
c001a897:	8b 35 54 b8 02 c0    	mov    esi,DWORD PTR ds:0xc002b854
c001a89d:	68 14 01 00 00       	push   0x114
c001a8a2:	e8 bb 78 ff ff       	call   c0012162 <operator new(unsigned long)>
c001a8a7:	83 c4 0c             	add    esp,0xc
c001a8aa:	89 c3                	mov    ebx,eax
c001a8ac:	56                   	push   esi
c001a8ad:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a8b1:	50                   	push   eax
c001a8b2:	e8 c9 7e ff ff       	call   c0012780 <File::File(char const*, Process*)>
c001a8b7:	5e                   	pop    esi
c001a8b8:	5f                   	pop    edi
c001a8b9:	6a 01                	push   0x1
c001a8bb:	53                   	push   ebx
c001a8bc:	e8 23 7f ff ff       	call   c00127e4 <File::open(FileOpenMode)>
c001a8c1:	83 c4 10             	add    esp,0x10
c001a8c4:	31 d2                	xor    edx,edx
c001a8c6:	85 c0                	test   eax,eax
c001a8c8:	0f 85 79 02 00 00    	jne    c001ab47 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001a8ce:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001a8d6:	83 ec 0c             	sub    esp,0xc
c001a8d9:	6a 34                	push   0x34
c001a8db:	e8 68 48 ff ff       	call   c000f148 <malloc>
c001a8e0:	59                   	pop    ecx
c001a8e1:	89 c7                	mov    edi,eax
c001a8e3:	8d 74 24 34          	lea    esi,[esp+0x34]
c001a8e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8e9:	56                   	push   esi
c001a8ea:	57                   	push   edi
c001a8eb:	6a 00                	push   0x0
c001a8ed:	6a 34                	push   0x34
c001a8ef:	53                   	push   ebx
c001a8f0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a8f3:	83 c4 20             	add    esp,0x20
c001a8f6:	85 c0                	test   eax,eax
c001a8f8:	74 17                	je     c001a911 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001a8fa:	83 ec 0c             	sub    esp,0xc
c001a8fd:	68 13 84 02 c0       	push   0xc0028413
c001a902:	e8 e8 e0 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c001a907:	83 c4 10             	add    esp,0x10
c001a90a:	31 d2                	xor    edx,edx
c001a90c:	e9 36 02 00 00       	jmp    c001ab47 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001a911:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001a917:	75 e1                	jne    c001a8fa <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001a919:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001a91c:	85 c0                	test   eax,eax
c001a91e:	74 da                	je     c001a8fa <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001a920:	52                   	push   edx
c001a921:	31 d2                	xor    edx,edx
c001a923:	52                   	push   edx
c001a924:	50                   	push   eax
c001a925:	53                   	push   ebx
c001a926:	e8 77 7f ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001a92b:	83 c4 10             	add    esp,0x10
c001a92e:	85 c0                	test   eax,eax
c001a930:	75 c8                	jne    c001a8fa <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001a932:	83 ec 0c             	sub    esp,0xc
c001a935:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001a939:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001a93d:	31 ed                	xor    ebp,ebp
c001a93f:	0f af c2             	imul   eax,edx
c001a942:	50                   	push   eax
c001a943:	e8 00 48 ff ff       	call   c000f148 <malloc>
c001a948:	89 34 24             	mov    DWORD PTR [esp],esi
c001a94b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a94f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001a951:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a955:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001a959:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001a95d:	0f af c2             	imul   eax,edx
c001a960:	99                   	cdq    
c001a961:	52                   	push   edx
c001a962:	50                   	push   eax
c001a963:	53                   	push   ebx
c001a964:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a967:	83 c4 20             	add    esp,0x20
c001a96a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a972:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001a97a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a982:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a98a:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001a98e:	0f 86 aa 00 00 00    	jbe    c001aa3e <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001a994:	0f b7 f5             	movzx  esi,bp
c001a997:	6b f6 28             	imul   esi,esi,0x28
c001a99a:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c001a99e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a9a1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a9a5:	50                   	push   eax
c001a9a6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a9aa:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001a9ae:	8b 16                	mov    edx,DWORD PTR [esi]
c001a9b0:	6b c0 28             	imul   eax,eax,0x28
c001a9b3:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001a9b7:	89 d0                	mov    eax,edx
c001a9b9:	31 d2                	xor    edx,edx
c001a9bb:	52                   	push   edx
c001a9bc:	50                   	push   eax
c001a9bd:	53                   	push   ebx
c001a9be:	e8 df 7e ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001a9c3:	83 c4 0c             	add    esp,0xc
c001a9c6:	6a 20                	push   0x20
c001a9c8:	6a 00                	push   0x0
c001a9ca:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001a9ce:	52                   	push   edx
c001a9cf:	e8 fa 5c fe ff       	call   c00006ce <memset>
c001a9d4:	58                   	pop    eax
c001a9d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9d7:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001a9db:	51                   	push   ecx
c001a9dc:	8d 54 24 40          	lea    edx,[esp+0x40]
c001a9e0:	52                   	push   edx
c001a9e1:	6a 00                	push   0x0
c001a9e3:	6a 1f                	push   0x1f
c001a9e5:	53                   	push   ebx
c001a9e6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a9e9:	83 c4 18             	add    esp,0x18
c001a9ec:	68 2a 84 02 c0       	push   0xc002842a
c001a9f1:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001a9f5:	52                   	push   edx
c001a9f6:	e8 c3 5d fe ff       	call   c00007be <strcmp>
c001a9fb:	83 c4 10             	add    esp,0x10
c001a9fe:	85 c0                	test   eax,eax
c001aa00:	75 0f                	jne    c001aa11 <Thr::loadKernelSymbolTable(char const*)+0x181>
c001aa02:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001aa05:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aa11:	50                   	push   eax
c001aa12:	50                   	push   eax
c001aa13:	68 32 84 02 c0       	push   0xc0028432
c001aa18:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001aa1c:	50                   	push   eax
c001aa1d:	e8 9c 5d fe ff       	call   c00007be <strcmp>
c001aa22:	83 c4 10             	add    esp,0x10
c001aa25:	85 c0                	test   eax,eax
c001aa27:	75 0f                	jne    c001aa38 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001aa29:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001aa2c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aa30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa34:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aa38:	45                   	inc    ebp
c001aa39:	e9 4c ff ff ff       	jmp    c001a98a <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001aa3e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001aa43:	75 10                	jne    c001aa55 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001aa45:	83 ec 0c             	sub    esp,0xc
c001aa48:	68 3a 84 02 c0       	push   0xc002843a
c001aa4d:	e8 9d df ff ff       	call   c00189ef <Krnl::panic(char const*)>
c001aa52:	83 c4 10             	add    esp,0x10
c001aa55:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001aa5a:	75 10                	jne    c001aa6c <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001aa5c:	83 ec 0c             	sub    esp,0xc
c001aa5f:	68 3a 84 02 c0       	push   0xc002843a
c001aa64:	e8 86 df ff ff       	call   c00189ef <Krnl::panic(char const*)>
c001aa69:	83 c4 10             	add    esp,0x10
c001aa6c:	31 d2                	xor    edx,edx
c001aa6e:	50                   	push   eax
c001aa6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aa73:	52                   	push   edx
c001aa74:	50                   	push   eax
c001aa75:	53                   	push   ebx
c001aa76:	e8 27 7e ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001aa7b:	5a                   	pop    edx
c001aa7c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001aa80:	e8 c3 46 ff ff       	call   c000f148 <malloc>
c001aa85:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001aa8d:	89 c1                	mov    ecx,eax
c001aa8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa93:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aa97:	5e                   	pop    esi
c001aa98:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa9a:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001aa9e:	55                   	push   ebp
c001aa9f:	51                   	push   ecx
c001aaa0:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c001aaa4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aaa8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aaac:	53                   	push   ebx
c001aaad:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aab0:	83 c4 14             	add    esp,0x14
c001aab3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001aab7:	e8 8c 46 ff ff       	call   c000f148 <malloc>
c001aabc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001aabf:	89 c6                	mov    esi,eax
c001aac1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aac3:	56                   	push   esi
c001aac4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aac8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aacc:	53                   	push   ebx
c001aacd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aad0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aad4:	8b 15 00 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b800
c001aada:	83 c4 1c             	add    esp,0x1c
c001aadd:	c1 e8 04             	shr    eax,0x4
c001aae0:	89 04 95 80 b6 02 c0 	mov    DWORD PTR [edx*4-0x3ffd4980],eax
c001aae7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aaeb:	31 d2                	xor    edx,edx
c001aaed:	52                   	push   edx
c001aaee:	50                   	push   eax
c001aaef:	53                   	push   ebx
c001aaf0:	e8 ad 7d ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001aaf5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001aaf8:	31 d2                	xor    edx,edx
c001aafa:	56                   	push   esi
c001aafb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001aaff:	52                   	push   edx
c001ab00:	50                   	push   eax
c001ab01:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab03:	53                   	push   ebx
c001ab04:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ab07:	83 c4 14             	add    esp,0x14
c001ab0a:	53                   	push   ebx
c001ab0b:	e8 32 7d ff ff       	call   c0012842 <File::close()>
c001ab10:	5d                   	pop    ebp
c001ab11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab15:	e8 3e 46 ff ff       	call   c000f158 <free>
c001ab1a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ab1d:	e8 36 46 ff ff       	call   c000f158 <free>
c001ab22:	a1 00 b8 02 c0       	mov    eax,ds:0xc002b800
c001ab27:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001ab2b:	8d 50 01             	lea    edx,[eax+0x1]
c001ab2e:	89 0c 85 80 b7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4880],ecx
c001ab35:	89 15 00 b8 02 c0    	mov    DWORD PTR ds:0xc002b800,edx
c001ab3b:	89 34 85 00 b7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4900],esi
c001ab42:	83 c4 10             	add    esp,0x10
c001ab45:	b2 01                	mov    dl,0x1
c001ab47:	83 c4 5c             	add    esp,0x5c
c001ab4a:	88 d0                	mov    al,dl
c001ab4c:	5b                   	pop    ebx
c001ab4d:	5e                   	pop    esi
c001ab4e:	5f                   	pop    edi
c001ab4f:	5d                   	pop    ebp
c001ab50:	c3                   	ret    

c001ab51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001ab51:	55                   	push   ebp
c001ab52:	57                   	push   edi
c001ab53:	56                   	push   esi
c001ab54:	53                   	push   ebx
c001ab55:	81 ec 68 03 00 00    	sub    esp,0x368
c001ab5b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001ab62:	8b 1d 54 b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b854
c001ab68:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001ab6c:	68 14 01 00 00       	push   0x114
c001ab71:	e8 ec 75 ff ff       	call   c0012162 <operator new(unsigned long)>
c001ab76:	83 c4 0c             	add    esp,0xc
c001ab79:	89 c7                	mov    edi,eax
c001ab7b:	53                   	push   ebx
c001ab7c:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001ab83:	50                   	push   eax
c001ab84:	e8 f7 7b ff ff       	call   c0012780 <File::File(char const*, Process*)>
c001ab89:	5e                   	pop    esi
c001ab8a:	5d                   	pop    ebp
c001ab8b:	6a 01                	push   0x1
c001ab8d:	57                   	push   edi
c001ab8e:	e8 51 7c ff ff       	call   c00127e4 <File::open(FileOpenMode)>
c001ab93:	83 c4 10             	add    esp,0x10
c001ab96:	85 c0                	test   eax,eax
c001ab98:	0f 85 10 07 00 00    	jne    c001b2ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ab9e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001aba6:	83 ec 0c             	sub    esp,0xc
c001aba9:	6a 34                	push   0x34
c001abab:	e8 98 45 ff ff       	call   c000f148 <malloc>
c001abb0:	5b                   	pop    ebx
c001abb1:	89 c5                	mov    ebp,eax
c001abb3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001abb7:	8b 07                	mov    eax,DWORD PTR [edi]
c001abb9:	53                   	push   ebx
c001abba:	55                   	push   ebp
c001abbb:	6a 00                	push   0x0
c001abbd:	6a 34                	push   0x34
c001abbf:	57                   	push   edi
c001abc0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001abc3:	83 c4 20             	add    esp,0x20
c001abc6:	85 c0                	test   eax,eax
c001abc8:	0f 85 e0 06 00 00    	jne    c001b2ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001abce:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c001abd5:	0f 85 d3 06 00 00    	jne    c001b2ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001abdb:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001abde:	85 c0                	test   eax,eax
c001abe0:	0f 84 c8 06 00 00    	je     c001b2ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001abe6:	31 d2                	xor    edx,edx
c001abe8:	51                   	push   ecx
c001abe9:	52                   	push   edx
c001abea:	50                   	push   eax
c001abeb:	57                   	push   edi
c001abec:	e8 b1 7c ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001abf1:	83 c4 10             	add    esp,0x10
c001abf4:	85 c0                	test   eax,eax
c001abf6:	0f 85 b2 06 00 00    	jne    c001b2ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001abfc:	83 ec 0c             	sub    esp,0xc
c001abff:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001ac02:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001ac06:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ac0a:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001ac0e:	0f af c2             	imul   eax,edx
c001ac11:	50                   	push   eax
c001ac12:	e8 31 45 ff ff       	call   c000f148 <malloc>
c001ac17:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac1a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ac1e:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001ac20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac24:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001ac28:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001ac2c:	0f af c2             	imul   eax,edx
c001ac2f:	99                   	cdq    
c001ac30:	52                   	push   edx
c001ac31:	50                   	push   eax
c001ac32:	57                   	push   edi
c001ac33:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ac36:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c001ac39:	83 c4 20             	add    esp,0x20
c001ac3c:	85 c0                	test   eax,eax
c001ac3e:	0f 84 6a 06 00 00    	je     c001b2ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ac44:	52                   	push   edx
c001ac45:	31 d2                	xor    edx,edx
c001ac47:	52                   	push   edx
c001ac48:	50                   	push   eax
c001ac49:	57                   	push   edi
c001ac4a:	e8 53 7c ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001ac4f:	83 c4 10             	add    esp,0x10
c001ac52:	85 c0                	test   eax,eax
c001ac54:	0f 85 54 06 00 00    	jne    c001b2ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ac5a:	83 ec 0c             	sub    esp,0xc
c001ac5d:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001ac61:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001ac65:	31 f6                	xor    esi,esi
c001ac67:	0f af c2             	imul   eax,edx
c001ac6a:	50                   	push   eax
c001ac6b:	e8 d8 44 ff ff       	call   c000f148 <malloc>
c001ac70:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac73:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ac77:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001ac79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac7d:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001ac81:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001ac85:	0f af c2             	imul   eax,edx
c001ac88:	99                   	cdq    
c001ac89:	52                   	push   edx
c001ac8a:	50                   	push   eax
c001ac8b:	57                   	push   edi
c001ac8c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ac8f:	83 c4 20             	add    esp,0x20
c001ac92:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c001ac96:	0f 86 af 00 00 00    	jbe    c001ad4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c001ac9c:	0f b7 de             	movzx  ebx,si
c001ac9f:	c1 e3 05             	shl    ebx,0x5
c001aca2:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001aca6:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001aca9:	0f 85 96 00 00 00    	jne    c001ad45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c001acaf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001acb2:	31 d2                	xor    edx,edx
c001acb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001acb8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001acbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001acbf:	50                   	push   eax
c001acc0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001acc3:	52                   	push   edx
c001acc4:	50                   	push   eax
c001acc5:	57                   	push   edi
c001acc6:	e8 d7 7b ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001accb:	83 c4 10             	add    esp,0x10
c001acce:	85 c0                	test   eax,eax
c001acd0:	0f 85 d8 05 00 00    	jne    c001b2ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001acd6:	52                   	push   edx
c001acd7:	52                   	push   edx
c001acd8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001acdc:	68 54 84 02 c0       	push   0xc0028454
c001ace1:	e8 6b 75 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001ace6:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c001aced:	31 d2                	xor    edx,edx
c001acef:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c001acf3:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001acf7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001acfb:	59                   	pop    ecx
c001acfc:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001acfe:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ad05:	50                   	push   eax
c001ad06:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ad0a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad0e:	52                   	push   edx
c001ad0f:	50                   	push   eax
c001ad10:	57                   	push   edi
c001ad11:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ad14:	83 c4 18             	add    esp,0x18
c001ad17:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ad1a:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001ad1d:	50                   	push   eax
c001ad1e:	68 78 84 02 c0       	push   0xc0028478
c001ad23:	e8 29 75 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001ad28:	83 c4 0c             	add    esp,0xc
c001ad2b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ad2e:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001ad31:	50                   	push   eax
c001ad32:	6a 00                	push   0x0
c001ad34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad38:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ad3c:	50                   	push   eax
c001ad3d:	e8 8c 59 fe ff       	call   c00006ce <memset>
c001ad42:	83 c4 10             	add    esp,0x10
c001ad45:	46                   	inc    esi
c001ad46:	e9 47 ff ff ff       	jmp    c001ac92 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c001ad4b:	31 db                	xor    ebx,ebx
c001ad4d:	50                   	push   eax
c001ad4e:	68 00 01 00 00       	push   0x100
c001ad53:	6a 00                	push   0x0
c001ad55:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001ad59:	50                   	push   eax
c001ad5a:	e8 6f 59 fe ff       	call   c00006ce <memset>
c001ad5f:	83 c4 0c             	add    esp,0xc
c001ad62:	68 00 01 00 00       	push   0x100
c001ad67:	6a 00                	push   0x0
c001ad69:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001ad70:	50                   	push   eax
c001ad71:	e8 58 59 fe ff       	call   c00006ce <memset>
c001ad76:	83 c4 10             	add    esp,0x10
c001ad79:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ad81:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ad89:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ad91:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ad99:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001ada1:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c001ada5:	0f 86 2f 01 00 00    	jbe    c001aeda <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c001adab:	0f b7 f3             	movzx  esi,bx
c001adae:	6b f6 28             	imul   esi,esi,0x28
c001adb1:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001adb5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001adb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001adbc:	50                   	push   eax
c001adbd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001adc1:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c001adc5:	8b 06                	mov    eax,DWORD PTR [esi]
c001adc7:	6b d2 28             	imul   edx,edx,0x28
c001adca:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001adce:	31 d2                	xor    edx,edx
c001add0:	52                   	push   edx
c001add1:	50                   	push   eax
c001add2:	57                   	push   edi
c001add3:	e8 ca 7a ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001add8:	83 c4 0c             	add    esp,0xc
c001addb:	6a 20                	push   0x20
c001addd:	6a 00                	push   0x0
c001addf:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001ade6:	51                   	push   ecx
c001ade7:	e8 e2 58 fe ff       	call   c00006ce <memset>
c001adec:	58                   	pop    eax
c001aded:	8b 07                	mov    eax,DWORD PTR [edi]
c001adef:	8d 54 24 58          	lea    edx,[esp+0x58]
c001adf3:	52                   	push   edx
c001adf4:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001adfb:	51                   	push   ecx
c001adfc:	6a 00                	push   0x0
c001adfe:	6a 1f                	push   0x1f
c001ae00:	57                   	push   edi
c001ae01:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae04:	83 c4 1c             	add    esp,0x1c
c001ae07:	6a 09                	push   0x9
c001ae09:	68 95 84 02 c0       	push   0xc0028495
c001ae0e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001ae15:	51                   	push   ecx
c001ae16:	e8 1a 58 fe ff       	call   c0000635 <memcmp>
c001ae1b:	83 c4 10             	add    esp,0x10
c001ae1e:	85 c0                	test   eax,eax
c001ae20:	75 21                	jne    c001ae43 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c001ae22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae26:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ae2a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae2e:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001ae32:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ae35:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001ae3c:	89 c8                	mov    eax,ecx
c001ae3e:	40                   	inc    eax
c001ae3f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ae43:	50                   	push   eax
c001ae44:	6a 09                	push   0x9
c001ae46:	68 9f 84 02 c0       	push   0xc002849f
c001ae4b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ae52:	50                   	push   eax
c001ae53:	e8 dd 57 fe ff       	call   c0000635 <memcmp>
c001ae58:	83 c4 10             	add    esp,0x10
c001ae5b:	85 c0                	test   eax,eax
c001ae5d:	75 21                	jne    c001ae80 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c001ae5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae63:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ae67:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae6b:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001ae6f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ae72:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001ae79:	89 c8                	mov    eax,ecx
c001ae7b:	40                   	inc    eax
c001ae7c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ae80:	50                   	push   eax
c001ae81:	50                   	push   eax
c001ae82:	68 2a 84 02 c0       	push   0xc002842a
c001ae87:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ae8e:	50                   	push   eax
c001ae8f:	e8 2a 59 fe ff       	call   c00007be <strcmp>
c001ae94:	83 c4 10             	add    esp,0x10
c001ae97:	85 c0                	test   eax,eax
c001ae99:	75 0f                	jne    c001aeaa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c001ae9b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ae9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001aea2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aea6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aeaa:	50                   	push   eax
c001aeab:	50                   	push   eax
c001aeac:	68 32 84 02 c0       	push   0xc0028432
c001aeb1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001aeb8:	50                   	push   eax
c001aeb9:	e8 00 59 fe ff       	call   c00007be <strcmp>
c001aebe:	83 c4 10             	add    esp,0x10
c001aec1:	85 c0                	test   eax,eax
c001aec3:	75 0f                	jne    c001aed4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c001aec5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001aec8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aecc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aed0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aed4:	43                   	inc    ebx
c001aed5:	e9 c7 fe ff ff       	jmp    c001ada1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c001aeda:	31 d2                	xor    edx,edx
c001aedc:	50                   	push   eax
c001aedd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aee1:	52                   	push   edx
c001aee2:	50                   	push   eax
c001aee3:	57                   	push   edi
c001aee4:	e8 b9 79 ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001aee9:	5a                   	pop    edx
c001aeea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aeee:	e8 55 42 ff ff       	call   c000f148 <malloc>
c001aef3:	31 d2                	xor    edx,edx
c001aef5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001aef9:	59                   	pop    ecx
c001aefa:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001aefc:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001af00:	53                   	push   ebx
c001af01:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001af05:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001af09:	52                   	push   edx
c001af0a:	50                   	push   eax
c001af0b:	57                   	push   edi
c001af0c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001af0f:	83 c4 14             	add    esp,0x14
c001af12:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001af16:	e8 2d 42 ff ff       	call   c000f148 <malloc>
c001af1b:	31 d2                	xor    edx,edx
c001af1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001af21:	83 c4 0c             	add    esp,0xc
c001af24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001af28:	52                   	push   edx
c001af29:	50                   	push   eax
c001af2a:	57                   	push   edi
c001af2b:	e8 72 79 ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001af30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af33:	31 d2                	xor    edx,edx
c001af35:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001af39:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001af3b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af3f:	52                   	push   edx
c001af40:	50                   	push   eax
c001af41:	57                   	push   edi
c001af42:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001af45:	83 c4 20             	add    esp,0x20
c001af48:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001af50:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001af54:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001af58:	0f 84 54 03 00 00    	je     c001b2b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c001af5e:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001af65:	31 d2                	xor    edx,edx
c001af67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af6b:	c1 e8 03             	shr    eax,0x3
c001af6e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001af72:	50                   	push   eax
c001af73:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001af77:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001af7b:	52                   	push   edx
c001af7c:	50                   	push   eax
c001af7d:	57                   	push   edi
c001af7e:	e8 1f 79 ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001af83:	58                   	pop    eax
c001af84:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001af88:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001af8f:	e8 b4 41 ff ff       	call   c000f148 <malloc>
c001af94:	31 d2                	xor    edx,edx
c001af96:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001af9a:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001af9c:	58                   	pop    eax
c001af9d:	8d 44 24 58          	lea    eax,[esp+0x58]
c001afa1:	50                   	push   eax
c001afa2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001afa6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001afaa:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001afb1:	52                   	push   edx
c001afb2:	50                   	push   eax
c001afb3:	57                   	push   edi
c001afb4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001afb7:	83 c4 20             	add    esp,0x20
c001afba:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001afc2:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001afc6:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001afca:	0f 8d c6 02 00 00    	jge    c001b296 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c001afd0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001afd4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001afd8:	31 db                	xor    ebx,ebx
c001afda:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001afdd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001afe1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001afe5:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001afe9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001afed:	c1 e8 08             	shr    eax,0x8
c001aff0:	89 c6                	mov    esi,eax
c001aff2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001aff6:	c1 e6 04             	shl    esi,0x4
c001aff9:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001affd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001b000:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b004:	85 c0                	test   eax,eax
c001b006:	0f 85 17 01 00 00    	jne    c001b123 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001b00c:	83 ec 0c             	sub    esp,0xc
c001b00f:	b3 01                	mov    bl,0x1
c001b011:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b015:	03 06                	add    eax,DWORD PTR [esi]
c001b017:	50                   	push   eax
c001b018:	e8 24 f8 ff ff       	call   c001a841 <Thr::getAddressOfKernelSymbol(char const*)>
c001b01d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b021:	83 c4 10             	add    esp,0x10
c001b024:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b029:	0f 85 f4 00 00 00    	jne    c001b123 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001b02f:	50                   	push   eax
c001b030:	50                   	push   eax
c001b031:	68 a9 84 02 c0       	push   0xc00284a9
c001b036:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b03a:	03 06                	add    eax,DWORD PTR [esi]
c001b03c:	50                   	push   eax
c001b03d:	e8 7c 57 fe ff       	call   c00007be <strcmp>
c001b042:	83 c4 10             	add    esp,0x10
c001b045:	85 c0                	test   eax,eax
c001b047:	75 0a                	jne    c001b053 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c001b049:	b8 5c 33 02 c0       	mov    eax,0xc002335c
c001b04e:	e9 ca 00 00 00       	jmp    c001b11d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001b053:	50                   	push   eax
c001b054:	50                   	push   eax
c001b055:	68 b3 84 02 c0       	push   0xc00284b3
c001b05a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b05e:	03 06                	add    eax,DWORD PTR [esi]
c001b060:	50                   	push   eax
c001b061:	e8 58 57 fe ff       	call   c00007be <strcmp>
c001b066:	83 c4 10             	add    esp,0x10
c001b069:	85 c0                	test   eax,eax
c001b06b:	75 0a                	jne    c001b077 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c001b06d:	b8 90 30 02 c0       	mov    eax,0xc0023090
c001b072:	e9 a6 00 00 00       	jmp    c001b11d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001b077:	53                   	push   ebx
c001b078:	53                   	push   ebx
c001b079:	68 bc 84 02 c0       	push   0xc00284bc
c001b07e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b082:	03 06                	add    eax,DWORD PTR [esi]
c001b084:	50                   	push   eax
c001b085:	e8 34 57 fe ff       	call   c00007be <strcmp>
c001b08a:	83 c4 10             	add    esp,0x10
c001b08d:	85 c0                	test   eax,eax
c001b08f:	75 0a                	jne    c001b09b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c001b091:	b8 5c 34 02 c0       	mov    eax,0xc002345c
c001b096:	e9 82 00 00 00       	jmp    c001b11d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001b09b:	51                   	push   ecx
c001b09c:	51                   	push   ecx
c001b09d:	68 c6 84 02 c0       	push   0xc00284c6
c001b0a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b0a6:	03 06                	add    eax,DWORD PTR [esi]
c001b0a8:	50                   	push   eax
c001b0a9:	e8 10 57 fe ff       	call   c00007be <strcmp>
c001b0ae:	83 c4 10             	add    esp,0x10
c001b0b1:	85 c0                	test   eax,eax
c001b0b3:	74 63                	je     c001b118 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c001b0b5:	50                   	push   eax
c001b0b6:	50                   	push   eax
c001b0b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b0bb:	03 06                	add    eax,DWORD PTR [esi]
c001b0bd:	50                   	push   eax
c001b0be:	68 cf 84 02 c0       	push   0xc00284cf
c001b0c3:	e8 89 71 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001b0c8:	58                   	pop    eax
c001b0c9:	5a                   	pop    edx
c001b0ca:	68 e9 84 02 c0       	push   0xc00284e9
c001b0cf:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001b0d6:	53                   	push   ebx
c001b0d7:	e8 91 56 fe ff       	call   c000076d <strcpy>
c001b0dc:	59                   	pop    ecx
c001b0dd:	58                   	pop    eax
c001b0de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b0e2:	03 06                	add    eax,DWORD PTR [esi]
c001b0e4:	50                   	push   eax
c001b0e5:	53                   	push   ebx
c001b0e6:	e8 39 57 fe ff       	call   c0000824 <strcat>
c001b0eb:	58                   	pop    eax
c001b0ec:	5a                   	pop    edx
c001b0ed:	68 7f 85 02 c0       	push   0xc002857f
c001b0f2:	53                   	push   ebx
c001b0f3:	e8 2c 57 fe ff       	call   c0000824 <strcat>
c001b0f8:	83 c4 10             	add    esp,0x10
c001b0fb:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b100:	0f 84 4b 01 00 00    	je     c001b251 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b106:	83 ec 0c             	sub    esp,0xc
c001b109:	53                   	push   ebx
c001b10a:	e8 e0 d8 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c001b10f:	83 c4 10             	add    esp,0x10
c001b112:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001b116:	eb 0b                	jmp    c001b123 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001b118:	b8 dc 31 02 c0       	mov    eax,0xc00231dc
c001b11d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b121:	b3 01                	mov    bl,0x1
c001b123:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001b128:	0f 85 80 00 00 00    	jne    c001b1ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c001b12e:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001b135:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b139:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001b13d:	01 ce                	add    esi,ecx
c001b13f:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b147:	8b 06                	mov    eax,DWORD PTR [esi]
c001b149:	0f 94 c2             	sete   dl
c001b14c:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b154:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001b159:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001b15d:	84 db                	test   bl,bl
c001b15f:	74 31                	je     c001b192 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c001b161:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b165:	01 c3                	add    ebx,eax
c001b167:	84 d2                	test   dl,dl
c001b169:	75 0a                	jne    c001b175 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c001b16b:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001b16f:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b173:	76 32                	jbe    c001b1a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b175:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b17a:	0f 84 d1 00 00 00    	je     c001b251 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b180:	83 ec 0c             	sub    esp,0xc
c001b183:	68 00 85 02 c0       	push   0xc0028500
c001b188:	e8 62 d8 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c001b18d:	83 c4 10             	add    esp,0x10
c001b190:	eb 15                	jmp    c001b1a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b192:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001b195:	84 d2                	test   dl,dl
c001b197:	75 0e                	jne    c001b1a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b199:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001b19d:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b1a1:	77 04                	ja     c001b1a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b1a3:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001b1a7:	89 1e                	mov    DWORD PTR [esi],ebx
c001b1a9:	e9 df 00 00 00       	jmp    c001b28d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001b1ae:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001b1b3:	75 6e                	jne    c001b223 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c001b1b5:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001b1bc:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001b1c0:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001b1c4:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b1cc:	74 17                	je     c001b1e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c001b1ce:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b1d6:	74 0d                	je     c001b1e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c001b1d8:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001b1dc:	83 e8 04             	sub    eax,0x4
c001b1df:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b1e3:	76 17                	jbe    c001b1fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001b1e5:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b1ea:	74 65                	je     c001b251 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b1ec:	83 ec 0c             	sub    esp,0xc
c001b1ef:	68 1c 85 02 c0       	push   0xc002851c
c001b1f4:	e8 f6 d7 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c001b1f9:	83 c4 10             	add    esp,0x10
c001b1fc:	8b 16                	mov    edx,DWORD PTR [esi]
c001b1fe:	84 db                	test   bl,bl
c001b200:	74 13                	je     c001b215 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c001b202:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b206:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001b20d:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001b211:	01 d0                	add    eax,edx
c001b213:	eb 06                	jmp    c001b21b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c001b215:	89 d0                	mov    eax,edx
c001b217:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001b21b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001b21f:	89 06                	mov    DWORD PTR [esi],eax
c001b221:	eb 6a                	jmp    c001b28d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001b223:	50                   	push   eax
c001b224:	50                   	push   eax
c001b225:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001b22a:	50                   	push   eax
c001b22b:	68 38 85 02 c0       	push   0xc0028538
c001b230:	e8 1c 70 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001b235:	83 c4 10             	add    esp,0x10
c001b238:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b23d:	74 12                	je     c001b251 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b23f:	83 ec 0c             	sub    esp,0xc
c001b242:	68 43 85 02 c0       	push   0xc0028543
c001b247:	e8 a3 d7 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c001b24c:	83 c4 10             	add    esp,0x10
c001b24f:	eb 3c                	jmp    c001b28d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001b251:	83 ec 0c             	sub    esp,0xc
c001b254:	57                   	push   edi
c001b255:	e8 e8 75 ff ff       	call   c0012842 <File::close()>
c001b25a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b25d:	8b 07                	mov    eax,DWORD PTR [edi]
c001b25f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b262:	59                   	pop    ecx
c001b263:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b267:	e8 ec 3e ff ff       	call   c000f158 <free>
c001b26c:	5b                   	pop    ebx
c001b26d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b271:	e8 e2 3e ff ff       	call   c000f158 <free>
c001b276:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b279:	e8 da 3e ff ff       	call   c000f158 <free>
c001b27e:	5e                   	pop    esi
c001b27f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b283:	e8 d0 3e ff ff       	call   c000f158 <free>
c001b288:	83 c4 10             	add    esp,0x10
c001b28b:	eb 21                	jmp    c001b2ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001b28d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001b291:	e9 2c fd ff ff       	jmp    c001afc2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c001b296:	83 ec 0c             	sub    esp,0xc
c001b299:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b29d:	e8 b6 3e ff ff       	call   c000f158 <free>
c001b2a2:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001b2a6:	83 c4 10             	add    esp,0x10
c001b2a9:	e9 a2 fc ff ff       	jmp    c001af50 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c001b2ae:	31 c0                	xor    eax,eax
c001b2b0:	eb 32                	jmp    c001b2e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c001b2b2:	83 ec 0c             	sub    esp,0xc
c001b2b5:	57                   	push   edi
c001b2b6:	e8 87 75 ff ff       	call   c0012842 <File::close()>
c001b2bb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b2be:	8b 07                	mov    eax,DWORD PTR [edi]
c001b2c0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2c3:	58                   	pop    eax
c001b2c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b2c8:	e8 8b 3e ff ff       	call   c000f158 <free>
c001b2cd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b2d0:	e8 83 3e ff ff       	call   c000f158 <free>
c001b2d5:	5a                   	pop    edx
c001b2d6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b2da:	e8 79 3e ff ff       	call   c000f158 <free>
c001b2df:	83 c4 10             	add    esp,0x10
c001b2e2:	b0 01                	mov    al,0x1
c001b2e4:	81 c4 5c 03 00 00    	add    esp,0x35c
c001b2ea:	5b                   	pop    ebx
c001b2eb:	5e                   	pop    esi
c001b2ec:	5f                   	pop    edi
c001b2ed:	5d                   	pop    ebp
c001b2ee:	c3                   	ret    

c001b2ef <Thr::getDriverBaseFromAddress(unsigned long)>:
c001b2ef:	56                   	push   esi
c001b2f0:	31 d2                	xor    edx,edx
c001b2f2:	53                   	push   ebx
c001b2f3:	8b 1d 60 b0 02 c0    	mov    ebx,DWORD PTR ds:0xc002b060
c001b2f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b2fd:	39 d3                	cmp    ebx,edx
c001b2ff:	7e 1b                	jle    c001b31c <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001b301:	8b 04 95 80 b2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd4d80]
c001b308:	39 c8                	cmp    eax,ecx
c001b30a:	77 0d                	ja     c001b319 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001b30c:	8b 34 95 80 b0 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd4f80]
c001b313:	01 c6                	add    esi,eax
c001b315:	39 ce                	cmp    esi,ecx
c001b317:	77 05                	ja     c001b31e <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001b319:	42                   	inc    edx
c001b31a:	eb e1                	jmp    c001b2fd <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001b31c:	31 c0                	xor    eax,eax
c001b31e:	5b                   	pop    ebx
c001b31f:	5e                   	pop    esi
c001b320:	c3                   	ret    

c001b321 <Thr::getDriverNameFromAddress(unsigned long)>:
c001b321:	53                   	push   ebx
c001b322:	31 c0                	xor    eax,eax
c001b324:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b328:	8b 1d 60 b0 02 c0    	mov    ebx,DWORD PTR ds:0xc002b060
c001b32e:	39 c3                	cmp    ebx,eax
c001b330:	7e 22                	jle    c001b354 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001b332:	8b 14 85 80 b2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4d80]
c001b339:	39 ca                	cmp    edx,ecx
c001b33b:	77 14                	ja     c001b351 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001b33d:	03 14 85 80 b0 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd4f80]
c001b344:	39 ca                	cmp    edx,ecx
c001b346:	76 09                	jbe    c001b351 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001b348:	8b 04 85 80 b4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4b80]
c001b34f:	eb 05                	jmp    c001b356 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001b351:	40                   	inc    eax
c001b352:	eb da                	jmp    c001b32e <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001b354:	31 c0                	xor    eax,eax
c001b356:	5b                   	pop    ebx
c001b357:	c3                   	ret    

c001b358 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001b358:	53                   	push   ebx
c001b359:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b35d:	53                   	push   ebx
c001b35e:	e8 8c ff ff ff       	call   c001b2ef <Thr::getDriverBaseFromAddress(unsigned long)>
c001b363:	5a                   	pop    edx
c001b364:	31 d2                	xor    edx,edx
c001b366:	85 c0                	test   eax,eax
c001b368:	74 04                	je     c001b36e <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001b36a:	89 da                	mov    edx,ebx
c001b36c:	29 c2                	sub    edx,eax
c001b36e:	89 d0                	mov    eax,edx
c001b370:	5b                   	pop    ebx
c001b371:	c3                   	ret    

c001b372 <Thr::loadDLL(char const*, bool)>:
c001b372:	55                   	push   ebp
c001b373:	57                   	push   edi
c001b374:	56                   	push   esi
c001b375:	53                   	push   ebx
c001b376:	81 ec 34 01 00 00    	sub    esp,0x134
c001b37c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001b383:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001b38a:	56                   	push   esi
c001b38b:	68 5b 85 02 c0       	push   0xc002855b
c001b390:	e8 bc 6e ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001b395:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b39c:	e8 c1 6d ff ff       	call   c0012162 <operator new(unsigned long)>
c001b3a1:	83 c4 0c             	add    esp,0xc
c001b3a4:	89 c3                	mov    ebx,eax
c001b3a6:	ff 35 54 b8 02 c0    	push   DWORD PTR ds:0xc002b854
c001b3ac:	56                   	push   esi
c001b3ad:	50                   	push   eax
c001b3ae:	e8 cd 73 ff ff       	call   c0012780 <File::File(char const*, Process*)>
c001b3b3:	83 c4 0c             	add    esp,0xc
c001b3b6:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001b3ba:	50                   	push   eax
c001b3bb:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b3bf:	50                   	push   eax
c001b3c0:	53                   	push   ebx
c001b3c1:	e8 ca 76 ff ff       	call   c0012a90 <File::stat(unsigned long long*, bool*)>
c001b3c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b3cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3ce:	83 c4 10             	add    esp,0x10
c001b3d1:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001b3d6:	75 0a                	jne    c001b3e2 <Thr::loadDLL(char const*, bool)+0x70>
c001b3d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b3dc:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001b3e0:	75 3c                	jne    c001b41e <Thr::loadDLL(char const*, bool)+0xac>
c001b3e2:	89 e8                	mov    eax,ebp
c001b3e4:	84 c0                	test   al,al
c001b3e6:	0f 84 3d 01 00 00    	je     c001b529 <Thr::loadDLL(char const*, bool)+0x1b7>
c001b3ec:	50                   	push   eax
c001b3ed:	50                   	push   eax
c001b3ee:	68 6c 85 02 c0       	push   0xc002856c
c001b3f3:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001b3f7:	53                   	push   ebx
c001b3f8:	e8 70 53 fe ff       	call   c000076d <strcpy>
c001b3fd:	58                   	pop    eax
c001b3fe:	5a                   	pop    edx
c001b3ff:	56                   	push   esi
c001b400:	53                   	push   ebx
c001b401:	e8 1e 54 fe ff       	call   c0000824 <strcat>
c001b406:	59                   	pop    ecx
c001b407:	5f                   	pop    edi
c001b408:	68 7f 85 02 c0       	push   0xc002857f
c001b40d:	53                   	push   ebx
c001b40e:	e8 11 54 fe ff       	call   c0000824 <strcat>
c001b413:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b416:	e8 d4 d5 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c001b41b:	83 c4 10             	add    esp,0x10
c001b41e:	e8 ec 5f ff ff       	call   c001140f <Virt::getAKernelVAS()>
c001b423:	51                   	push   ecx
c001b424:	6a 03                	push   0x3
c001b426:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001b42a:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b42e:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001b434:	83 d3 00             	adc    ebx,0x0
c001b437:	89 ca                	mov    edx,ecx
c001b439:	89 d1                	mov    ecx,edx
c001b43b:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001b43f:	51                   	push   ecx
c001b440:	50                   	push   eax
c001b441:	e8 0c 66 ff ff       	call   c0011a52 <VAS::allocatePages(int, int)>
c001b446:	89 34 24             	mov    DWORD PTR [esp],esi
c001b449:	89 c3                	mov    ebx,eax
c001b44b:	e8 9b 52 fe ff       	call   c00006eb <strlen>
c001b450:	8b 3d 60 b0 02 c0    	mov    edi,DWORD PTR ds:0xc002b060
c001b456:	40                   	inc    eax
c001b457:	89 04 24             	mov    DWORD PTR [esp],eax
c001b45a:	e8 e9 3c ff ff       	call   c000f148 <malloc>
c001b45f:	89 04 bd 80 b4 02 c0 	mov    DWORD PTR [edi*4-0x3ffd4b80],eax
c001b466:	5f                   	pop    edi
c001b467:	58                   	pop    eax
c001b468:	a1 60 b0 02 c0       	mov    eax,ds:0xc002b060
c001b46d:	56                   	push   esi
c001b46e:	ff 34 85 80 b4 02 c0 	push   DWORD PTR [eax*4-0x3ffd4b80]
c001b475:	e8 f3 52 fe ff       	call   c000076d <strcpy>
c001b47a:	a1 60 b0 02 c0       	mov    eax,ds:0xc002b060
c001b47f:	8d 50 01             	lea    edx,[eax+0x1]
c001b482:	89 1c 85 80 b2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4d80],ebx
c001b489:	89 15 60 b0 02 c0    	mov    DWORD PTR ds:0xc002b060,edx
c001b48f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b493:	83 c4 0c             	add    esp,0xc
c001b496:	89 14 85 80 b0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4f80],edx
c001b49d:	6a 01                	push   0x1
c001b49f:	53                   	push   ebx
c001b4a0:	56                   	push   esi
c001b4a1:	e8 ab f6 ff ff       	call   c001ab51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001b4a6:	83 c4 10             	add    esp,0x10
c001b4a9:	89 c7                	mov    edi,eax
c001b4ab:	fe c8                	dec    al
c001b4ad:	74 16                	je     c001b4c5 <Thr::loadDLL(char const*, bool)+0x153>
c001b4af:	89 e8                	mov    eax,ebp
c001b4b1:	84 c0                	test   al,al
c001b4b3:	74 10                	je     c001b4c5 <Thr::loadDLL(char const*, bool)+0x153>
c001b4b5:	83 ec 0c             	sub    esp,0xc
c001b4b8:	68 81 85 02 c0       	push   0xc0028581
c001b4bd:	e8 2d d5 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c001b4c2:	83 c4 10             	add    esp,0x10
c001b4c5:	31 f6                	xor    esi,esi
c001b4c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4cb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b4cf:	05 ff 0f 00 00       	add    eax,0xfff
c001b4d4:	83 d2 00             	adc    edx,0x0
c001b4d7:	0f ac d0 0c          	shrd   eax,edx,0xc
c001b4db:	c1 ea 0c             	shr    edx,0xc
c001b4de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b4e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b4e6:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001b4ea:	ba 00 00 00 00       	mov    edx,0x0
c001b4ef:	89 d0                	mov    eax,edx
c001b4f1:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001b4f5:	73 2c                	jae    c001b523 <Thr::loadDLL(char const*, bool)+0x1b1>
c001b4f7:	e8 13 5f ff ff       	call   c001140f <Virt::getAKernelVAS()>
c001b4fc:	89 f5                	mov    ebp,esi
c001b4fe:	c1 e5 0c             	shl    ebp,0xc
c001b501:	52                   	push   edx
c001b502:	01 dd                	add    ebp,ebx
c001b504:	52                   	push   edx
c001b505:	55                   	push   ebp
c001b506:	50                   	push   eax
c001b507:	e8 ae 60 ff ff       	call   c00115ba <VAS::getPageTableEntry(unsigned long)>
c001b50c:	83 c4 10             	add    esp,0x10
c001b50f:	f6 00 60             	test   BYTE PTR [eax],0x60
c001b512:	75 0c                	jne    c001b520 <Thr::loadDLL(char const*, bool)+0x1ae>
c001b514:	83 ec 0c             	sub    esp,0xc
c001b517:	55                   	push   ebp
c001b518:	e8 4b 41 ff ff       	call   c000f668 <Phys::freePage(unsigned long)>
c001b51d:	83 c4 10             	add    esp,0x10
c001b520:	46                   	inc    esi
c001b521:	eb a4                	jmp    c001b4c7 <Thr::loadDLL(char const*, bool)+0x155>
c001b523:	89 f8                	mov    eax,edi
c001b525:	84 c0                	test   al,al
c001b527:	75 02                	jne    c001b52b <Thr::loadDLL(char const*, bool)+0x1b9>
c001b529:	31 db                	xor    ebx,ebx
c001b52b:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b531:	89 d8                	mov    eax,ebx
c001b533:	5b                   	pop    ebx
c001b534:	5e                   	pop    esi
c001b535:	5f                   	pop    edi
c001b536:	5d                   	pop    ebp
c001b537:	c3                   	ret    

c001b538 <Thr::executeDLL(unsigned long, void*)>:
c001b538:	56                   	push   esi
c001b539:	53                   	push   ebx
c001b53a:	51                   	push   ecx
c001b53b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b53f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b543:	85 db                	test   ebx,ebx
c001b545:	75 10                	jne    c001b557 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001b547:	83 ec 0c             	sub    esp,0xc
c001b54a:	68 a0 85 02 c0       	push   0xc00285a0
c001b54f:	e8 9b d4 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c001b554:	83 c4 10             	add    esp,0x10
c001b557:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b55b:	89 d8                	mov    eax,ebx
c001b55d:	5a                   	pop    edx
c001b55e:	5b                   	pop    ebx
c001b55f:	5e                   	pop    esi
c001b560:	ff e0                	jmp    eax

c001b562 <changeTSS>:
c001b562:	83 ec 0c             	sub    esp,0xc
c001b565:	e8 02 c3 ff ff       	call   c001786c <CPU::current()>
c001b56a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b570:	83 ec 08             	sub    esp,0x8
c001b573:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c001b576:	05 7c 11 00 00       	add    eax,0x117c
c001b57b:	c1 e1 15             	shl    ecx,0x15
c001b57e:	ba 00 00 e8 01       	mov    edx,0x1e80000
c001b583:	29 ca                	sub    edx,ecx
c001b585:	52                   	push   edx
c001b586:	50                   	push   eax
c001b587:	e8 7e 56 ff ff       	call   c0010c0a <TSS::setESP(unsigned long)>
c001b58c:	83 c4 1c             	add    esp,0x1c
c001b58f:	c3                   	ret    

c001b590 <Process::addArgs(char**)>:
c001b590:	57                   	push   edi
c001b591:	56                   	push   esi
c001b592:	53                   	push   ebx
c001b593:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b597:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b59b:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001b5a5:	85 ff                	test   edi,edi
c001b5a7:	74 3d                	je     c001b5e6 <Process::addArgs(char**)+0x56>
c001b5a9:	8b 07                	mov    eax,DWORD PTR [edi]
c001b5ab:	85 c0                	test   eax,eax
c001b5ad:	74 37                	je     c001b5e6 <Process::addArgs(char**)+0x56>
c001b5af:	31 db                	xor    ebx,ebx
c001b5b1:	83 ec 0c             	sub    esp,0xc
c001b5b4:	50                   	push   eax
c001b5b5:	e8 31 51 fe ff       	call   c00006eb <strlen>
c001b5ba:	40                   	inc    eax
c001b5bb:	89 04 24             	mov    DWORD PTR [esp],eax
c001b5be:	e8 85 3b ff ff       	call   c000f148 <malloc>
c001b5c3:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001b5ca:	5a                   	pop    edx
c001b5cb:	59                   	pop    ecx
c001b5cc:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001b5cf:	43                   	inc    ebx
c001b5d0:	50                   	push   eax
c001b5d1:	e8 97 51 fe ff       	call   c000076d <strcpy>
c001b5d6:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001b5dc:	83 c4 10             	add    esp,0x10
c001b5df:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b5e2:	85 c0                	test   eax,eax
c001b5e4:	75 cb                	jne    c001b5b1 <Process::addArgs(char**)+0x21>
c001b5e6:	5b                   	pop    ebx
c001b5e7:	5e                   	pop    esi
c001b5e8:	5f                   	pop    edi
c001b5e9:	c3                   	ret    

c001b5ea <Process::Process(char const*, Process*, char**)>:
c001b5ea:	56                   	push   esi
c001b5eb:	53                   	push   ebx
c001b5ec:	83 ec 14             	sub    esp,0x14
c001b5ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5f3:	05 0c 02 00 00       	add    eax,0x20c
c001b5f8:	bb 07 00 00 00       	mov    ebx,0x7
c001b5fd:	89 c6                	mov    esi,eax
c001b5ff:	85 db                	test   ebx,ebx
c001b601:	78 12                	js     c001b615 <Process::Process(char const*, Process*, char**)+0x2b>
c001b603:	83 ec 0c             	sub    esp,0xc
c001b606:	56                   	push   esi
c001b607:	e8 de a0 00 00       	call   c00256ea <ThreadControlBlock::ThreadControlBlock()>
c001b60c:	83 c4 10             	add    esp,0x10
c001b60f:	83 c6 63             	add    esi,0x63
c001b612:	4b                   	dec    ebx
c001b613:	eb ea                	jmp    c001b5ff <Process::Process(char const*, Process*, char**)+0x15>
c001b615:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b619:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001b620:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b624:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001b62d:	a1 a4 99 02 c0       	mov    eax,ds:0xc00299a4
c001b632:	8d 50 01             	lea    edx,[eax+0x1]
c001b635:	89 15 a4 99 02 c0    	mov    DWORD PTR ds:0xc00299a4,edx
c001b63b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b63f:	89 02                	mov    DWORD PTR [edx],eax
c001b641:	83 ec 0c             	sub    esp,0xc
c001b644:	6a 10                	push   0x10
c001b646:	e8 17 6b ff ff       	call   c0012162 <operator new(unsigned long)>
c001b64b:	83 c4 10             	add    esp,0x10
c001b64e:	89 c3                	mov    ebx,eax
c001b650:	83 ec 08             	sub    esp,0x8
c001b653:	6a 00                	push   0x0
c001b655:	53                   	push   ebx
c001b656:	e8 9b 67 ff ff       	call   c0011df6 <VAS::VAS(bool)>
c001b65b:	83 c4 10             	add    esp,0x10
c001b65e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b662:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001b668:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b66c:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001b676:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b67a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b67e:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001b684:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b688:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b68e:	85 c0                	test   eax,eax
c001b690:	74 42                	je     c001b6d4 <Process::Process(char const*, Process*, char**)+0xea>
c001b692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b696:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b69c:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b6a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6a6:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001b6ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6b0:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b6b6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001b6bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6c0:	05 0c 01 00 00       	add    eax,0x10c
c001b6c5:	83 ec 08             	sub    esp,0x8
c001b6c8:	52                   	push   edx
c001b6c9:	50                   	push   eax
c001b6ca:	e8 9e 50 fe ff       	call   c000076d <strcpy>
c001b6cf:	83 c4 10             	add    esp,0x10
c001b6d2:	eb 5c                	jmp    c001b730 <Process::Process(char const*, Process*, char**)+0x146>
c001b6d4:	83 ec 0c             	sub    esp,0xc
c001b6d7:	68 60 12 00 00       	push   0x1260
c001b6dc:	e8 81 6a ff ff       	call   c0012162 <operator new(unsigned long)>
c001b6e1:	83 c4 10             	add    esp,0x10
c001b6e4:	89 c3                	mov    ebx,eax
c001b6e6:	83 ec 08             	sub    esp,0x8
c001b6e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6ed:	53                   	push   ebx
c001b6ee:	e8 15 52 ff ff       	call   c0010908 <VgaText::VgaText(char const*)>
c001b6f3:	83 c4 10             	add    esp,0x10
c001b6f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6fa:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001b700:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b704:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b70a:	83 ec 0c             	sub    esp,0xc
c001b70d:	50                   	push   eax
c001b70e:	e8 f6 45 ff ff       	call   c000fd09 <addToTerminalCycle(VgaText*)>
c001b713:	83 c4 10             	add    esp,0x10
c001b716:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b71a:	05 0c 01 00 00       	add    eax,0x10c
c001b71f:	83 ec 08             	sub    esp,0x8
c001b722:	68 ca 85 02 c0       	push   0xc00285ca
c001b727:	50                   	push   eax
c001b728:	e8 40 50 fe ff       	call   c000076d <strcpy>
c001b72d:	83 c4 10             	add    esp,0x10
c001b730:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b734:	83 c0 0c             	add    eax,0xc
c001b737:	83 ec 08             	sub    esp,0x8
c001b73a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b73e:	50                   	push   eax
c001b73f:	e8 29 50 fe ff       	call   c000076d <strcpy>
c001b744:	83 c4 10             	add    esp,0x10
c001b747:	83 ec 08             	sub    esp,0x8
c001b74a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b74e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b752:	e8 39 fe ff ff       	call   c001b590 <Process::addArgs(char**)>
c001b757:	83 c4 10             	add    esp,0x10
c001b75a:	83 ec 08             	sub    esp,0x8
c001b75d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b761:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b765:	e8 ae ee ff ff       	call   c001a618 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001b76a:	83 c4 10             	add    esp,0x10
c001b76d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b771:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b775:	83 f0 01             	xor    eax,0x1
c001b778:	88 c2                	mov    dl,al
c001b77a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b77e:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c001b784:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001b789:	83 ec 08             	sub    esp,0x8
c001b78c:	50                   	push   eax
c001b78d:	68 c8 86 02 c0       	push   0xc00286c8
c001b792:	e8 ba 6a ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001b797:	83 c4 10             	add    esp,0x10
c001b79a:	90                   	nop
c001b79b:	83 c4 14             	add    esp,0x14
c001b79e:	5b                   	pop    ebx
c001b79f:	5e                   	pop    esi
c001b7a0:	c3                   	ret    
c001b7a1:	90                   	nop

c001b7a2 <Process::Process(bool, char const*, Process*, char**)>:
c001b7a2:	56                   	push   esi
c001b7a3:	53                   	push   ebx
c001b7a4:	83 ec 14             	sub    esp,0x14
c001b7a7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b7ab:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b7af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7b3:	05 0c 02 00 00       	add    eax,0x20c
c001b7b8:	bb 07 00 00 00       	mov    ebx,0x7
c001b7bd:	89 c6                	mov    esi,eax
c001b7bf:	85 db                	test   ebx,ebx
c001b7c1:	78 12                	js     c001b7d5 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001b7c3:	83 ec 0c             	sub    esp,0xc
c001b7c6:	56                   	push   esi
c001b7c7:	e8 1e 9f 00 00       	call   c00256ea <ThreadControlBlock::ThreadControlBlock()>
c001b7cc:	83 c4 10             	add    esp,0x10
c001b7cf:	83 c6 63             	add    esi,0x63
c001b7d2:	4b                   	dec    ebx
c001b7d3:	eb ea                	jmp    c001b7bf <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001b7d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7d9:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001b7e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7e4:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001b7ed:	a1 a4 99 02 c0       	mov    eax,ds:0xc00299a4
c001b7f2:	8d 50 01             	lea    edx,[eax+0x1]
c001b7f5:	89 15 a4 99 02 c0    	mov    DWORD PTR ds:0xc00299a4,edx
c001b7fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b7ff:	89 02                	mov    DWORD PTR [edx],eax
c001b801:	83 ec 0c             	sub    esp,0xc
c001b804:	6a 10                	push   0x10
c001b806:	e8 57 69 ff ff       	call   c0012162 <operator new(unsigned long)>
c001b80b:	83 c4 10             	add    esp,0x10
c001b80e:	89 c3                	mov    ebx,eax
c001b810:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b815:	83 ec 08             	sub    esp,0x8
c001b818:	50                   	push   eax
c001b819:	53                   	push   ebx
c001b81a:	e8 d7 65 ff ff       	call   c0011df6 <VAS::VAS(bool)>
c001b81f:	83 c4 10             	add    esp,0x10
c001b822:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b826:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001b82c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b830:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001b83a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b83e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b842:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001b848:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b84c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b852:	85 c0                	test   eax,eax
c001b854:	74 42                	je     c001b898 <Process::Process(bool, char const*, Process*, char**)+0xf6>
c001b856:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b85a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b860:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b866:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b86a:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001b870:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b874:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b87a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001b880:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b884:	05 0c 01 00 00       	add    eax,0x10c
c001b889:	83 ec 08             	sub    esp,0x8
c001b88c:	52                   	push   edx
c001b88d:	50                   	push   eax
c001b88e:	e8 da 4e fe ff       	call   c000076d <strcpy>
c001b893:	83 c4 10             	add    esp,0x10
c001b896:	eb 5c                	jmp    c001b8f4 <Process::Process(bool, char const*, Process*, char**)+0x152>
c001b898:	83 ec 0c             	sub    esp,0xc
c001b89b:	68 60 12 00 00       	push   0x1260
c001b8a0:	e8 bd 68 ff ff       	call   c0012162 <operator new(unsigned long)>
c001b8a5:	83 c4 10             	add    esp,0x10
c001b8a8:	89 c3                	mov    ebx,eax
c001b8aa:	83 ec 08             	sub    esp,0x8
c001b8ad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b8b1:	53                   	push   ebx
c001b8b2:	e8 51 50 ff ff       	call   c0010908 <VgaText::VgaText(char const*)>
c001b8b7:	83 c4 10             	add    esp,0x10
c001b8ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8be:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001b8c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8c8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b8ce:	83 ec 0c             	sub    esp,0xc
c001b8d1:	50                   	push   eax
c001b8d2:	e8 32 44 ff ff       	call   c000fd09 <addToTerminalCycle(VgaText*)>
c001b8d7:	83 c4 10             	add    esp,0x10
c001b8da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8de:	05 0c 01 00 00       	add    eax,0x10c
c001b8e3:	83 ec 08             	sub    esp,0x8
c001b8e6:	68 ca 85 02 c0       	push   0xc00285ca
c001b8eb:	50                   	push   eax
c001b8ec:	e8 7c 4e fe ff       	call   c000076d <strcpy>
c001b8f1:	83 c4 10             	add    esp,0x10
c001b8f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8f8:	83 c0 0c             	add    eax,0xc
c001b8fb:	83 ec 08             	sub    esp,0x8
c001b8fe:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b902:	50                   	push   eax
c001b903:	e8 65 4e fe ff       	call   c000076d <strcpy>
c001b908:	83 c4 10             	add    esp,0x10
c001b90b:	83 ec 08             	sub    esp,0x8
c001b90e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001b912:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b916:	e8 75 fc ff ff       	call   c001b590 <Process::addArgs(char**)>
c001b91b:	83 c4 10             	add    esp,0x10
c001b91e:	90                   	nop
c001b91f:	83 c4 14             	add    esp,0x14
c001b922:	5b                   	pop    ebx
c001b923:	5e                   	pop    esi
c001b924:	c3                   	ret    

c001b925 <disableIRQs()>:
c001b925:	fa                   	cli    
c001b926:	ff 05 2c b8 02 c0    	inc    DWORD PTR ds:0xc002b82c
c001b92c:	c3                   	ret    

c001b92d <getIRQNestingLevel()>:
c001b92d:	a1 2c b8 02 c0       	mov    eax,ds:0xc002b82c
c001b932:	c3                   	ret    

c001b933 <enableIRQs()>:
c001b933:	a1 2c b8 02 c0       	mov    eax,ds:0xc002b82c
c001b938:	48                   	dec    eax
c001b939:	a3 2c b8 02 c0       	mov    ds:0xc002b82c,eax
c001b93e:	75 01                	jne    c001b941 <enableIRQs()+0xe>
c001b940:	fb                   	sti    
c001b941:	c3                   	ret    

c001b942 <lockScheduler()>:
c001b942:	eb e1                	jmp    c001b925 <disableIRQs()>

c001b944 <unlockScheduler()>:
c001b944:	eb ed                	jmp    c001b933 <enableIRQs()>

c001b946 <userModeEntryPoint(void*)>:
c001b946:	83 ec 0c             	sub    esp,0xc
c001b949:	e8 f6 ff ff ff       	call   c001b944 <unlockScheduler()>
c001b94e:	fb                   	sti    
c001b94f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b954:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b957:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001b95d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b961:	83 c4 0c             	add    esp,0xc
c001b964:	e9 61 49 fe ff       	jmp    c00002ca <goToUsermode>

c001b969 <lockStuff()>:
c001b969:	e8 b7 ff ff ff       	call   c001b925 <disableIRQs()>
c001b96e:	ff 05 28 b8 02 c0    	inc    DWORD PTR ds:0xc002b828
c001b974:	c3                   	ret    

c001b975 <taskStartupFunction>:
c001b975:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b97a:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001b97d:	c3                   	ret    

c001b97e <updateTimeUsed()>:
c001b97e:	57                   	push   edi
c001b97f:	56                   	push   esi
c001b980:	53                   	push   ebx
c001b981:	e8 e6 be ff ff       	call   c001786c <CPU::current()>
c001b986:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001b98d:	74 49                	je     c001b9d8 <updateTimeUsed()+0x5a>
c001b98f:	0f 31                	rdtsc  
c001b991:	89 c1                	mov    ecx,eax
c001b993:	a3 68 b8 02 c0       	mov    ds:0xc002b868,eax
c001b998:	2b 0d 58 b8 02 c0    	sub    ecx,DWORD PTR ds:0xc002b858
c001b99e:	89 d3                	mov    ebx,edx
c001b9a0:	89 0d 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,ecx
c001b9a6:	1b 1d 5c b8 02 c0    	sbb    ebx,DWORD PTR ds:0xc002b85c
c001b9ac:	a3 58 b8 02 c0       	mov    ds:0xc002b858,eax
c001b9b1:	89 1d 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,ebx
c001b9b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9bc:	89 15 6c b8 02 c0    	mov    DWORD PTR ds:0xc002b86c,edx
c001b9c2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001b9c5:	89 15 5c b8 02 c0    	mov    DWORD PTR ds:0xc002b85c,edx
c001b9cb:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001b9ce:	01 f1                	add    ecx,esi
c001b9d0:	11 fb                	adc    ebx,edi
c001b9d2:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001b9d5:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001b9d8:	5b                   	pop    ebx
c001b9d9:	5e                   	pop    esi
c001b9da:	5f                   	pop    edi
c001b9db:	c3                   	ret    

c001b9dc <switchToThread(ThreadControlBlock*)>:
c001b9dc:	53                   	push   ebx
c001b9dd:	83 ec 08             	sub    esp,0x8
c001b9e0:	a1 28 b8 02 c0       	mov    eax,ds:0xc002b828
c001b9e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9e9:	85 c0                	test   eax,eax
c001b9eb:	75 30                	jne    c001ba1d <switchToThread(ThreadControlBlock*)+0x41>
c001b9ed:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001b9f0:	3c ff                	cmp    al,0xff
c001b9f2:	74 25                	je     c001ba19 <switchToThread(ThreadControlBlock*)+0x3d>
c001b9f4:	0f b6 d0             	movzx  edx,al
c001b9f7:	b8 84 03 00 00       	mov    eax,0x384
c001b9fc:	29 d0                	sub    eax,edx
c001b9fe:	c1 e0 10             	shl    eax,0x10
c001ba01:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001ba04:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001ba07:	e8 72 ff ff ff       	call   c001b97e <updateTimeUsed()>
c001ba0c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001ba10:	83 c4 08             	add    esp,0x8
c001ba13:	5b                   	pop    ebx
c001ba14:	e9 ea 48 fe ff       	jmp    c0000303 <switchToThreadASM>
c001ba19:	31 c0                	xor    eax,eax
c001ba1b:	eb e7                	jmp    c001ba04 <switchToThread(ThreadControlBlock*)+0x28>
c001ba1d:	c7 05 24 b8 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002b824,0x1
c001ba27:	83 c4 08             	add    esp,0x8
c001ba2a:	5b                   	pop    ebx
c001ba2b:	c3                   	ret    

c001ba2c <Semaphore::Semaphore(int)>:
c001ba2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba30:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ba34:	89 10                	mov    DWORD PTR [eax],edx
c001ba36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba3a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ba41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba45:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba50:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ba57:	90                   	nop
c001ba58:	c3                   	ret    
c001ba59:	90                   	nop

c001ba5a <Mutex::Mutex()>:
c001ba5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba5e:	6a 01                	push   0x1
c001ba60:	50                   	push   eax
c001ba61:	e8 c6 ff ff ff       	call   c001ba2c <Semaphore::Semaphore(int)>
c001ba66:	83 c4 08             	add    esp,0x8
c001ba69:	90                   	nop
c001ba6a:	c3                   	ret    
c001ba6b:	90                   	nop

c001ba6c <Process::createThread(void (*)(void*), void*, int)>:
c001ba6c:	55                   	push   ebp
c001ba6d:	31 c9                	xor    ecx,ecx
c001ba6f:	57                   	push   edi
c001ba70:	56                   	push   esi
c001ba71:	53                   	push   ebx
c001ba72:	83 ec 1c             	sub    esp,0x1c
c001ba75:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ba79:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001ba80:	89 f2                	mov    edx,esi
c001ba82:	0f b7 c2             	movzx  eax,dx
c001ba85:	83 e2 01             	and    edx,0x1
c001ba88:	74 14                	je     c001ba9e <Process::createThread(void (*)(void*), void*, int)+0x32>
c001ba8a:	d1 f8                	sar    eax,1
c001ba8c:	41                   	inc    ecx
c001ba8d:	89 c2                	mov    edx,eax
c001ba8f:	83 f9 10             	cmp    ecx,0x10
c001ba92:	75 ee                	jne    c001ba82 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001ba94:	83 c4 1c             	add    esp,0x1c
c001ba97:	31 c0                	xor    eax,eax
c001ba99:	5b                   	pop    ebx
c001ba9a:	5e                   	pop    esi
c001ba9b:	5f                   	pop    edi
c001ba9c:	5d                   	pop    ebp
c001ba9d:	c3                   	ret    
c001ba9e:	83 ec 08             	sub    esp,0x8
c001baa1:	b8 01 00 00 00       	mov    eax,0x1
c001baa6:	d3 e0                	shl    eax,cl
c001baa8:	09 c6                	or     esi,eax
c001baaa:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001bab0:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001bab7:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001baba:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001babd:	01 ce                	add    esi,ecx
c001babf:	89 f0                	mov    eax,esi
c001bac1:	c1 e0 05             	shl    eax,0x5
c001bac4:	01 c6                	add    esi,eax
c001bac6:	8d 04 33             	lea    eax,[ebx+esi*1]
c001bac9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001bacf:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001bad5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001bad9:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001badf:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001bae5:	89 ca                	mov    edx,ecx
c001bae7:	f7 da                	neg    edx
c001bae9:	c1 e2 15             	shl    edx,0x15
c001baec:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001baf2:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001baf8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001bafc:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001bb06:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001bb0c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bb10:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001bb16:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001bb20:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001bb2a:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001bb31:	50                   	push   eax
c001bb32:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bb36:	68 48 b8 02 c0       	push   0xc002b848
c001bb3b:	e8 02 9a 00 00       	call   c0025542 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001bb40:	83 c4 10             	add    esp,0x10
c001bb43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb47:	83 c4 1c             	add    esp,0x1c
c001bb4a:	5b                   	pop    ebx
c001bb4b:	5e                   	pop    esi
c001bb4c:	5f                   	pop    edi
c001bb4d:	5d                   	pop    ebp
c001bb4e:	c3                   	ret    
c001bb4f:	90                   	nop

c001bb50 <Process::createUserThread()>:
c001bb50:	83 ec 0c             	sub    esp,0xc
c001bb53:	68 80 00 00 00       	push   0x80
c001bb58:	6a 00                	push   0x0
c001bb5a:	68 46 b9 01 c0       	push   0xc001b946
c001bb5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb63:	e8 04 ff ff ff       	call   c001ba6c <Process::createThread(void (*)(void*), void*, int)>
c001bb68:	83 c4 1c             	add    esp,0x1c
c001bb6b:	c3                   	ret    

c001bb6c <setupMultitasking(void (*)())>:
c001bb6c:	56                   	push   esi
c001bb6d:	53                   	push   ebx
c001bb6e:	53                   	push   ebx
c001bb6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bb73:	eb 10                	jmp    c001bb85 <setupMultitasking(void (*)())+0x19>
c001bb75:	83 ec 0c             	sub    esp,0xc
c001bb78:	68 48 b8 02 c0       	push   0xc002b848
c001bb7d:	e8 12 99 00 00       	call   c0025494 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001bb82:	83 c4 10             	add    esp,0x10
c001bb85:	83 ec 0c             	sub    esp,0xc
c001bb88:	68 48 b8 02 c0       	push   0xc002b848
c001bb8d:	e8 e6 98 00 00       	call   c0025478 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001bb92:	83 c4 10             	add    esp,0x10
c001bb95:	84 c0                	test   al,al
c001bb97:	74 dc                	je     c001bb75 <setupMultitasking(void (*)())+0x9>
c001bb99:	83 ec 0c             	sub    esp,0xc
c001bb9c:	68 3b 07 00 00       	push   0x73b
c001bba1:	e8 bc 65 ff ff       	call   c0012162 <operator new(unsigned long)>
c001bba6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001bbad:	89 c3                	mov    ebx,eax
c001bbaf:	6a 00                	push   0x0
c001bbb1:	68 ce 85 02 c0       	push   0xc00285ce
c001bbb6:	6a 01                	push   0x1
c001bbb8:	50                   	push   eax
c001bbb9:	e8 e4 fb ff ff       	call   c001b7a2 <Process::Process(bool, char const*, Process*, char**)>
c001bbbe:	83 c4 18             	add    esp,0x18
c001bbc1:	89 1d 54 b8 02 c0    	mov    DWORD PTR ds:0xc002b854,ebx
c001bbc7:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001bbcd:	68 f0 86 02 c0       	push   0xc00286f0
c001bbd2:	e8 7a 66 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001bbd7:	58                   	pop    eax
c001bbd8:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001bbde:	e8 9a 48 ff ff       	call   c001047d <setActiveTerminal(VgaText*)>
c001bbe3:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001bbeb:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001bbf1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001bbf4:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001bbfe:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001bc04:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001bc0a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001bc14:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001bc1e:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001bc28:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001bc2e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001bc34:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001bc3e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001bc44:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001bc4e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001bc54:	5a                   	pop    edx
c001bc55:	59                   	pop    ecx
c001bc56:	68 ca 85 02 c0       	push   0xc00285ca
c001bc5b:	50                   	push   eax
c001bc5c:	e8 0c 4b fe ff       	call   c000076d <strcpy>
c001bc61:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001bc68:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001bc6c:	83 c4 14             	add    esp,0x14
c001bc6f:	5b                   	pop    ebx
c001bc70:	5e                   	pop    esi
c001bc71:	e9 7f 46 fe ff       	jmp    c00002f5 <switchToThreadASMFirstTime>

c001bc76 <schedule()>:
c001bc76:	a1 28 b8 02 c0       	mov    eax,ds:0xc002b828
c001bc7b:	85 c0                	test   eax,eax
c001bc7d:	74 0b                	je     c001bc8a <schedule()+0x14>
c001bc7f:	c7 05 24 b8 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002b824,0x1
c001bc89:	c3                   	ret    
c001bc8a:	53                   	push   ebx
c001bc8b:	83 ec 14             	sub    esp,0x14
c001bc8e:	68 48 b8 02 c0       	push   0xc002b848
c001bc93:	e8 e0 97 00 00       	call   c0025478 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001bc98:	83 c4 10             	add    esp,0x10
c001bc9b:	84 c0                	test   al,al
c001bc9d:	75 38                	jne    c001bcd7 <schedule()+0x61>
c001bc9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bca4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bca7:	4a                   	dec    edx
c001bca8:	74 32                	je     c001bcdc <schedule()+0x66>
c001bcaa:	83 ec 0c             	sub    esp,0xc
c001bcad:	68 48 b8 02 c0       	push   0xc002b848
c001bcb2:	e8 b9 97 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001bcb7:	c7 04 24 48 b8 02 c0 	mov    DWORD PTR [esp],0xc002b848
c001bcbe:	89 c3                	mov    ebx,eax
c001bcc0:	e8 cf 97 00 00       	call   c0025494 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001bcc5:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001bccc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bccf:	e8 08 fd ff ff       	call   c001b9dc <switchToThread(ThreadControlBlock*)>
c001bcd4:	83 c4 10             	add    esp,0x10
c001bcd7:	83 c4 08             	add    esp,0x8
c001bcda:	5b                   	pop    ebx
c001bcdb:	c3                   	ret    
c001bcdc:	83 ec 08             	sub    esp,0x8
c001bcdf:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001bce6:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001bcec:	68 48 b8 02 c0       	push   0xc002b848
c001bcf1:	e8 4c 98 00 00       	call   c0025542 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001bcf6:	83 c4 10             	add    esp,0x10
c001bcf9:	eb af                	jmp    c001bcaa <schedule()+0x34>

c001bcfb <unlockStuff()>:
c001bcfb:	a1 28 b8 02 c0       	mov    eax,ds:0xc002b828
c001bd00:	48                   	dec    eax
c001bd01:	a3 28 b8 02 c0       	mov    ds:0xc002b828,eax
c001bd06:	75 09                	jne    c001bd11 <unlockStuff()+0x16>
c001bd08:	a1 24 b8 02 c0       	mov    eax,ds:0xc002b824
c001bd0d:	85 c0                	test   eax,eax
c001bd0f:	75 05                	jne    c001bd16 <unlockStuff()+0x1b>
c001bd11:	e9 1d fc ff ff       	jmp    c001b933 <enableIRQs()>
c001bd16:	83 ec 0c             	sub    esp,0xc
c001bd19:	c7 05 24 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b824,0x0
c001bd23:	e8 4e ff ff ff       	call   c001bc76 <schedule()>
c001bd28:	83 c4 0c             	add    esp,0xc
c001bd2b:	e9 03 fc ff ff       	jmp    c001b933 <enableIRQs()>

c001bd30 <Semaphore::tryAcquire()>:
c001bd30:	83 ec 0c             	sub    esp,0xc
c001bd33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd37:	e8 2d fc ff ff       	call   c001b969 <lockStuff()>
c001bd3c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001bd3f:	3b 10                	cmp    edx,DWORD PTR [eax]
c001bd41:	7c 0b                	jl     c001bd4e <Semaphore::tryAcquire()+0x1e>
c001bd43:	e8 b3 ff ff ff       	call   c001bcfb <unlockStuff()>
c001bd48:	31 c0                	xor    eax,eax
c001bd4a:	83 c4 0c             	add    esp,0xc
c001bd4d:	c3                   	ret    
c001bd4e:	42                   	inc    edx
c001bd4f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bd52:	e8 a4 ff ff ff       	call   c001bcfb <unlockStuff()>
c001bd57:	b0 01                	mov    al,0x1
c001bd59:	83 c4 0c             	add    esp,0xc
c001bd5c:	c3                   	ret    
c001bd5d:	90                   	nop

c001bd5e <Semaphore::assertLocked(char const*)>:
c001bd5e:	83 ec 0c             	sub    esp,0xc
c001bd61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd65:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bd69:	e8 fb fb ff ff       	call   c001b969 <lockStuff()>
c001bd6e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001bd70:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001bd73:	7c 05                	jl     c001bd7a <Semaphore::assertLocked(char const*)+0x1c>
c001bd75:	83 c4 0c             	add    esp,0xc
c001bd78:	eb 81                	jmp    c001bcfb <unlockStuff()>
c001bd7a:	83 ec 0c             	sub    esp,0xc
c001bd7d:	52                   	push   edx
c001bd7e:	e8 6c cc ff ff       	call   c00189ef <Krnl::panic(char const*)>
c001bd83:	83 c4 10             	add    esp,0x10
c001bd86:	83 c4 0c             	add    esp,0xc
c001bd89:	e9 6d ff ff ff       	jmp    c001bcfb <unlockStuff()>

c001bd8e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001bd8e:	83 ec 0c             	sub    esp,0xc
c001bd91:	e8 97 fb ff ff       	call   c001b92d <getIRQNestingLevel()>
c001bd96:	83 ec 08             	sub    esp,0x8
c001bd99:	50                   	push   eax
c001bd9a:	68 24 87 02 c0       	push   0xc0028724
c001bd9f:	e8 ad 64 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001bda4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bda8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdad:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bdb0:	e8 c1 fe ff ff       	call   c001bc76 <schedule()>
c001bdb5:	e8 8a fb ff ff       	call   c001b944 <unlockScheduler()>
c001bdba:	e8 6e fb ff ff       	call   c001b92d <getIRQNestingLevel()>
c001bdbf:	5a                   	pop    edx
c001bdc0:	59                   	pop    ecx
c001bdc1:	50                   	push   eax
c001bdc2:	68 58 87 02 c0       	push   0xc0028758
c001bdc7:	e8 85 64 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001bdcc:	83 c4 1c             	add    esp,0x1c
c001bdcf:	c3                   	ret    

c001bdd0 <blockTask(TaskState)>:
c001bdd0:	83 ec 0c             	sub    esp,0xc
c001bdd3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bdd7:	e8 66 fb ff ff       	call   c001b942 <lockScheduler()>
c001bddc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bde1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bde4:	e8 8d fe ff ff       	call   c001bc76 <schedule()>
c001bde9:	83 c4 0c             	add    esp,0xc
c001bdec:	e9 53 fb ff ff       	jmp    c001b944 <unlockScheduler()>

c001bdf1 <waitTask(int, int*, int)>:
c001bdf1:	83 ec 18             	sub    esp,0x18
c001bdf4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdf9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bdfd:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001be00:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001be04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be09:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001be0c:	6a 07                	push   0x7
c001be0e:	e8 bd ff ff ff       	call   c001bdd0 <blockTask(TaskState)>
c001be13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be18:	83 c4 10             	add    esp,0x10
c001be1b:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001be1e:	85 d2                	test   edx,edx
c001be20:	74 0a                	je     c001be2c <waitTask(int, int*, int)+0x3b>
c001be22:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001be25:	89 02                	mov    DWORD PTR [edx],eax
c001be27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be2c:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001be2f:	83 c4 0c             	add    esp,0xc
c001be32:	c3                   	ret    

c001be33 <nanoSleepUntil(unsigned long long)>:
c001be33:	83 ec 0c             	sub    esp,0xc
c001be36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be3a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001be3e:	3b 05 70 aa 02 c0    	cmp    eax,DWORD PTR ds:0xc002aa70
c001be44:	89 d1                	mov    ecx,edx
c001be46:	1b 0d 74 aa 02 c0    	sbb    ecx,DWORD PTR ds:0xc002aa74
c001be4c:	73 04                	jae    c001be52 <nanoSleepUntil(unsigned long long)+0x1f>
c001be4e:	83 c4 0c             	add    esp,0xc
c001be51:	c3                   	ret    
c001be52:	e8 12 fb ff ff       	call   c001b969 <lockStuff()>
c001be57:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001be5d:	83 ec 08             	sub    esp,0x8
c001be60:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001be63:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001be66:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001be6c:	68 3c b8 02 c0       	push   0xc002b83c
c001be71:	e8 cc 96 00 00       	call   c0025542 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001be76:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001be7d:	e8 4e ff ff ff       	call   c001bdd0 <blockTask(TaskState)>
c001be82:	83 c4 1c             	add    esp,0x1c
c001be85:	e9 71 fe ff ff       	jmp    c001bcfb <unlockStuff()>

c001be8a <nanoSleep(unsigned long long)>:
c001be8a:	a1 70 aa 02 c0       	mov    eax,ds:0xc002aa70
c001be8f:	8b 15 74 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aa74
c001be95:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001be99:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001be9d:	eb 94                	jmp    c001be33 <nanoSleepUntil(unsigned long long)>

c001be9f <sleep(unsigned long long)>:
c001be9f:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001bea7:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001beac:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001beb0:	01 ca                	add    edx,ecx
c001beb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001beb6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001beba:	eb ce                	jmp    c001be8a <nanoSleep(unsigned long long)>

c001bebc <Semaphore::acquire()>:
c001bebc:	83 ec 0c             	sub    esp,0xc
c001bebf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bec3:	e8 a1 fa ff ff       	call   c001b969 <lockStuff()>
c001bec8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001becb:	3b 10                	cmp    edx,DWORD PTR [eax]
c001becd:	7d 0c                	jge    c001bedb <Semaphore::acquire()+0x1f>
c001becf:	42                   	inc    edx
c001bed0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bed3:	83 c4 0c             	add    esp,0xc
c001bed6:	e9 20 fe ff ff       	jmp    c001bcfb <unlockStuff()>
c001bedb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bee1:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001bee8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001beeb:	85 d2                	test   edx,edx
c001beed:	74 2a                	je     c001bf19 <Semaphore::acquire()+0x5d>
c001beef:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001bef2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bef8:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001befb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bf01:	83 ec 0c             	sub    esp,0xc
c001bf04:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bf07:	6a 05                	push   0x5
c001bf09:	e8 c2 fe ff ff       	call   c001bdd0 <blockTask(TaskState)>
c001bf0e:	83 c4 10             	add    esp,0x10
c001bf11:	83 c4 0c             	add    esp,0xc
c001bf14:	e9 e2 fd ff ff       	jmp    c001bcfb <unlockStuff()>
c001bf19:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bf1f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bf22:	eb d7                	jmp    c001befb <Semaphore::acquire()+0x3f>

c001bf24 <taskReturned>:
c001bf24:	83 ec 18             	sub    esp,0x18
c001bf27:	68 8c 87 02 c0       	push   0xc002878c
c001bf2c:	e8 be ca ff ff       	call   c00189ef <Krnl::panic(char const*)>
c001bf31:	83 c4 10             	add    esp,0x10
c001bf34:	83 ec 0c             	sub    esp,0xc
c001bf37:	6a 02                	push   0x2
c001bf39:	e8 92 fe ff ff       	call   c001bdd0 <blockTask(TaskState)>
c001bf3e:	e8 ff f9 ff ff       	call   c001b942 <lockScheduler()>
c001bf43:	e8 2e fd ff ff       	call   c001bc76 <schedule()>
c001bf48:	e8 f7 f9 ff ff       	call   c001b944 <unlockScheduler()>
c001bf4d:	83 c4 10             	add    esp,0x10
c001bf50:	eb e2                	jmp    c001bf34 <taskReturned+0x10>

c001bf52 <unblockTask(ThreadControlBlock*)>:
c001bf52:	53                   	push   ebx
c001bf53:	83 ec 08             	sub    esp,0x8
c001bf56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf5a:	e8 e3 f9 ff ff       	call   c001b942 <lockScheduler()>
c001bf5f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001bf62:	85 c0                	test   eax,eax
c001bf64:	74 5c                	je     c001bfc2 <unblockTask(ThreadControlBlock*)+0x70>
c001bf66:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001bf69:	48                   	dec    eax
c001bf6a:	74 31                	je     c001bf9d <unblockTask(ThreadControlBlock*)+0x4b>
c001bf6c:	83 ec 0c             	sub    esp,0xc
c001bf6f:	68 48 b8 02 c0       	push   0xc002b848
c001bf74:	e8 f7 94 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001bf79:	83 c4 10             	add    esp,0x10
c001bf7c:	85 c0                	test   eax,eax
c001bf7e:	75 17                	jne    c001bf97 <unblockTask(ThreadControlBlock*)+0x45>
c001bf80:	eb 65                	jmp    c001bfe7 <unblockTask(ThreadControlBlock*)+0x95>
c001bf82:	83 ec 08             	sub    esp,0x8
c001bf85:	50                   	push   eax
c001bf86:	68 48 b8 02 c0       	push   0xc002b848
c001bf8b:	e8 f0 97 00 00       	call   c0025780 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001bf90:	83 c4 10             	add    esp,0x10
c001bf93:	85 c0                	test   eax,eax
c001bf95:	74 50                	je     c001bfe7 <unblockTask(ThreadControlBlock*)+0x95>
c001bf97:	39 c3                	cmp    ebx,eax
c001bf99:	75 e7                	jne    c001bf82 <unblockTask(ThreadControlBlock*)+0x30>
c001bf9b:	eb 1c                	jmp    c001bfb9 <unblockTask(ThreadControlBlock*)+0x67>
c001bf9d:	83 ec 0c             	sub    esp,0xc
c001bfa0:	68 7c 88 02 c0       	push   0xc002887c
c001bfa5:	e8 a7 62 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001bfaa:	c7 04 24 08 88 02 c0 	mov    DWORD PTR [esp],0xc0028808
c001bfb1:	e8 9b 62 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001bfb6:	83 c4 10             	add    esp,0x10
c001bfb9:	83 c4 08             	add    esp,0x8
c001bfbc:	5b                   	pop    ebx
c001bfbd:	e9 82 f9 ff ff       	jmp    c001b944 <unlockScheduler()>
c001bfc2:	83 ec 0c             	sub    esp,0xc
c001bfc5:	68 c0 87 02 c0       	push   0xc00287c0
c001bfca:	e8 82 62 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001bfcf:	c7 04 24 08 88 02 c0 	mov    DWORD PTR [esp],0xc0028808
c001bfd6:	e8 76 62 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001bfdb:	83 c4 10             	add    esp,0x10
c001bfde:	83 c4 08             	add    esp,0x8
c001bfe1:	5b                   	pop    ebx
c001bfe2:	e9 5d f9 ff ff       	jmp    c001b944 <unlockScheduler()>
c001bfe7:	83 ec 08             	sub    esp,0x8
c001bfea:	53                   	push   ebx
c001bfeb:	68 48 b8 02 c0       	push   0xc002b848
c001bff0:	e8 4d 95 00 00       	call   c0025542 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001bff5:	83 c4 10             	add    esp,0x10
c001bff8:	83 c4 08             	add    esp,0x8
c001bffb:	5b                   	pop    ebx
c001bffc:	e9 43 f9 ff ff       	jmp    c001b944 <unlockScheduler()>

c001c001 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001c001:	55                   	push   ebp
c001c002:	57                   	push   edi
c001c003:	56                   	push   esi
c001c004:	53                   	push   ebx
c001c005:	83 ec 1c             	sub    esp,0x1c
c001c008:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c00c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c00f:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c001c015:	85 c9                	test   ecx,ecx
c001c017:	7e 20                	jle    c001c039 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001c019:	31 f6                	xor    esi,esi
c001c01b:	83 ec 0c             	sub    esp,0xc
c001c01e:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001c025:	46                   	inc    esi
c001c026:	e8 2d 31 ff ff       	call   c000f158 <free>
c001c02b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c02e:	83 c4 10             	add    esp,0x10
c001c031:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001c037:	7f e2                	jg     c001c01b <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001c039:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001c043:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001c048:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001c04b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001c04e:	d3 c0                	rol    eax,cl
c001c050:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001c057:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c05a:	89 f7                	mov    edi,esi
c001c05c:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001c064:	0f 85 4f 01 00 00    	jne    c001c1b9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c001c06a:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c070:	85 c0                	test   eax,eax
c001c072:	0f 84 aa 00 00 00    	je     c001c122 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c078:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001c07b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c07f:	31 c9                	xor    ecx,ecx
c001c081:	eb 10                	jmp    c001c093 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c001c083:	41                   	inc    ecx
c001c084:	83 f9 10             	cmp    ecx,0x10
c001c087:	0f 84 95 00 00 00    	je     c001c122 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c08d:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c093:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001c09a:	d3 fa                	sar    edx,cl
c001c09c:	83 e2 01             	and    edx,0x1
c001c09f:	74 e2                	je     c001c083 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c0a1:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001c0a4:	01 ca                	add    edx,ecx
c001c0a6:	89 d5                	mov    ebp,edx
c001c0a8:	c1 e5 05             	shl    ebp,0x5
c001c0ab:	01 ea                	add    edx,ebp
c001c0ad:	01 d0                	add    eax,edx
c001c0af:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001c0b5:	83 fd 07             	cmp    ebp,0x7
c001c0b8:	75 c9                	jne    c001c083 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c0ba:	05 40 02 00 00       	add    eax,0x240
c001c0bf:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001c0c2:	83 fd ff             	cmp    ebp,0xffffffff
c001c0c5:	0f 8c 08 01 00 00    	jl     c001c1d3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c001c0cb:	0f 84 b9 01 00 00    	je     c001c28a <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c001c0d1:	85 ed                	test   ebp,ebp
c001c0d3:	0f 84 a0 01 00 00    	je     c001c279 <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c001c0d9:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001c0db:	75 a6                	jne    c001c083 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c0dd:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c0e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c0e7:	01 d0                	add    eax,edx
c001c0e9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001c0ed:	83 ec 0c             	sub    esp,0xc
c001c0f0:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001c0f6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c0f9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c0ff:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001c106:	50                   	push   eax
c001c107:	e8 46 fe ff ff       	call   c001bf52 <unblockTask(ThreadControlBlock*)>
c001c10c:	83 c4 10             	add    esp,0x10
c001c10f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c112:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c116:	89 f7                	mov    edi,esi
c001c118:	41                   	inc    ecx
c001c119:	83 f9 10             	cmp    ecx,0x10
c001c11c:	0f 85 6b ff ff ff    	jne    c001c08d <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c001c122:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001c128:	85 c0                	test   eax,eax
c001c12a:	74 5d                	je     c001c189 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001c12c:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001c132:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001c138:	74 4f                	je     c001c189 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001c13a:	83 ec 0c             	sub    esp,0xc
c001c13d:	68 48 b8 02 c0       	push   0xc002b848
c001c142:	e8 29 93 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c147:	c7 04 24 48 b8 02 c0 	mov    DWORD PTR [esp],0xc002b848
c001c14e:	89 c7                	mov    edi,eax
c001c150:	e8 23 93 00 00       	call   c0025478 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c155:	83 c4 10             	add    esp,0x10
c001c158:	84 c0                	test   al,al
c001c15a:	0f 84 e4 00 00 00    	je     c001c244 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001c160:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c163:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c169:	85 d2                	test   edx,edx
c001c16b:	74 0f                	je     c001c17c <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c001c16d:	83 ec 0c             	sub    esp,0xc
c001c170:	8b 02                	mov    eax,DWORD PTR [edx]
c001c172:	52                   	push   edx
c001c173:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c176:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c179:	83 c4 10             	add    esp,0x10
c001c17c:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001c186:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001c189:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001c18f:	85 db                	test   ebx,ebx
c001c191:	74 16                	je     c001c1a9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c001c193:	83 ec 0c             	sub    esp,0xc
c001c196:	53                   	push   ebx
c001c197:	e8 4a 56 ff ff       	call   c00117e6 <VAS::~VAS()>
c001c19c:	58                   	pop    eax
c001c19d:	5a                   	pop    edx
c001c19e:	6a 10                	push   0x10
c001c1a0:	53                   	push   ebx
c001c1a1:	e8 cb 5f ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c001c1a6:	83 c4 10             	add    esp,0x10
c001c1a9:	83 ec 0c             	sub    esp,0xc
c001c1ac:	68 d5 85 02 c0       	push   0xc00285d5
c001c1b1:	e8 9b 60 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001c1b6:	83 c4 10             	add    esp,0x10
c001c1b9:	83 ec 08             	sub    esp,0x8
c001c1bc:	68 3b 07 00 00       	push   0x73b
c001c1c1:	68 e3 85 02 c0       	push   0xc00285e3
c001c1c6:	e8 86 60 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001c1cb:	83 c4 2c             	add    esp,0x2c
c001c1ce:	5b                   	pop    ebx
c001c1cf:	5e                   	pop    esi
c001c1d0:	5f                   	pop    edi
c001c1d1:	5d                   	pop    ebp
c001c1d2:	c3                   	ret    
c001c1d3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c1d7:	83 ec 0c             	sub    esp,0xc
c001c1da:	68 c0 88 02 c0       	push   0xc00288c0
c001c1df:	e8 0b c8 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c001c1e4:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c1e7:	83 c4 10             	add    esp,0x10
c001c1ea:	89 f7                	mov    edi,esi
c001c1ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c1f0:	e9 8e fe ff ff       	jmp    c001c083 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c1f5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001c1fb:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001c201:	75 1c                	jne    c001c21f <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c203:	83 ec 0c             	sub    esp,0xc
c001c206:	68 28 89 02 c0       	push   0xc0028928
c001c20b:	e8 41 60 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001c210:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001c217:	e8 b4 fb ff ff       	call   c001bdd0 <blockTask(TaskState)>
c001c21c:	83 c4 10             	add    esp,0x10
c001c21f:	83 ec 08             	sub    esp,0x8
c001c222:	56                   	push   esi
c001c223:	68 48 b8 02 c0       	push   0xc002b848
c001c228:	e8 15 93 00 00       	call   c0025542 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c22d:	c7 04 24 48 b8 02 c0 	mov    DWORD PTR [esp],0xc002b848
c001c234:	e8 37 92 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c239:	83 c4 10             	add    esp,0x10
c001c23c:	39 f8                	cmp    eax,edi
c001c23e:	0f 84 1c ff ff ff    	je     c001c160 <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c001c244:	83 ec 0c             	sub    esp,0xc
c001c247:	68 48 b8 02 c0       	push   0xc002b848
c001c24c:	e8 1f 92 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c251:	c7 04 24 48 b8 02 c0 	mov    DWORD PTR [esp],0xc002b848
c001c258:	89 c6                	mov    esi,eax
c001c25a:	e8 35 92 00 00       	call   c0025494 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c25f:	83 c4 10             	add    esp,0x10
c001c262:	39 f3                	cmp    ebx,esi
c001c264:	74 b9                	je     c001c21f <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c266:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001c269:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c26c:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001c272:	75 ab                	jne    c001c21f <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c274:	e9 7c ff ff ff       	jmp    c001c1f5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001c279:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c27d:	83 ec 0c             	sub    esp,0xc
c001c280:	68 f4 88 02 c0       	push   0xc00288f4
c001c285:	e9 55 ff ff ff       	jmp    c001c1df <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c001c28a:	8b 36                	mov    esi,DWORD PTR [esi]
c001c28c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c290:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001c293:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c296:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001c29c:	01 d7                	add    edi,edx
c001c29e:	89 f8                	mov    eax,edi
c001c2a0:	e9 44 fe ff ff       	jmp    c001c0e9 <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c001c2a5 <cleanerTaskFunction(void*)>:
c001c2a5:	53                   	push   ebx
c001c2a6:	83 ec 08             	sub    esp,0x8
c001c2a9:	e8 96 f6 ff ff       	call   c001b944 <unlockScheduler()>
c001c2ae:	e8 8f f6 ff ff       	call   c001b942 <lockScheduler()>
c001c2b3:	80 3d 0c b8 02 c0 00 	cmp    BYTE PTR ds:0xc002b80c,0x0
c001c2ba:	0f 85 8e 00 00 00    	jne    c001c34e <cleanerTaskFunction(void*)+0xa9>
c001c2c0:	83 ec 0c             	sub    esp,0xc
c001c2c3:	6a 02                	push   0x2
c001c2c5:	e8 c4 fa ff ff       	call   c001bd8e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001c2ca:	83 c4 10             	add    esp,0x10
c001c2cd:	c6 05 0c b8 02 c0 00 	mov    BYTE PTR ds:0xc002b80c,0x0
c001c2d4:	e8 90 f6 ff ff       	call   c001b969 <lockStuff()>
c001c2d9:	e8 64 f6 ff ff       	call   c001b942 <lockScheduler()>
c001c2de:	83 ec 0c             	sub    esp,0xc
c001c2e1:	68 30 b8 02 c0       	push   0xc002b830
c001c2e6:	e8 8d 91 00 00       	call   c0025478 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c2eb:	83 c4 10             	add    esp,0x10
c001c2ee:	84 c0                	test   al,al
c001c2f0:	75 40                	jne    c001c332 <cleanerTaskFunction(void*)+0x8d>
c001c2f2:	83 ec 0c             	sub    esp,0xc
c001c2f5:	68 30 b8 02 c0       	push   0xc002b830
c001c2fa:	e8 71 91 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c2ff:	c7 04 24 30 b8 02 c0 	mov    DWORD PTR [esp],0xc002b830
c001c306:	89 c3                	mov    ebx,eax
c001c308:	e8 87 91 00 00       	call   c0025494 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c30d:	c7 04 24 f9 85 02 c0 	mov    DWORD PTR [esp],0xc00285f9
c001c314:	e8 38 5f ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001c319:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c31c:	e8 e0 fc ff ff       	call   c001c001 <cleanupTerminatedTask(ThreadControlBlock*)>
c001c321:	c7 04 24 12 86 02 c0 	mov    DWORD PTR [esp],0xc0028612
c001c328:	e8 24 5f ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001c32d:	83 c4 10             	add    esp,0x10
c001c330:	eb ac                	jmp    c001c2de <cleanerTaskFunction(void*)+0x39>
c001c332:	e8 0d f6 ff ff       	call   c001b944 <unlockScheduler()>
c001c337:	e8 bf f9 ff ff       	call   c001bcfb <unlockStuff()>
c001c33c:	e8 01 f6 ff ff       	call   c001b942 <lockScheduler()>
c001c341:	80 3d 0c b8 02 c0 00 	cmp    BYTE PTR ds:0xc002b80c,0x0
c001c348:	0f 84 72 ff ff ff    	je     c001c2c0 <cleanerTaskFunction(void*)+0x1b>
c001c34e:	e8 f1 f5 ff ff       	call   c001b944 <unlockScheduler()>
c001c353:	e9 75 ff ff ff       	jmp    c001c2cd <cleanerTaskFunction(void*)+0x28>

c001c358 <terminateTask(int)>:
c001c358:	83 ec 14             	sub    esp,0x14
c001c35b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c360:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c363:	83 c0 0c             	add    eax,0xc
c001c366:	50                   	push   eax
c001c367:	68 50 89 02 c0       	push   0xc0028950
c001c36c:	e8 e0 5e ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001c371:	e8 f3 f5 ff ff       	call   c001b969 <lockStuff()>
c001c376:	e8 c7 f5 ff ff       	call   c001b942 <lockScheduler()>
c001c37b:	c7 04 24 25 86 02 c0 	mov    DWORD PTR [esp],0xc0028625
c001c382:	e8 ca 5e ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001c387:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c38b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c390:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001c393:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c398:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c39b:	5a                   	pop    edx
c001c39c:	59                   	pop    ecx
c001c39d:	50                   	push   eax
c001c39e:	68 30 b8 02 c0       	push   0xc002b830
c001c3a3:	e8 9a 91 00 00       	call   c0025542 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c3a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3ad:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001c3b4:	c7 04 24 3f 86 02 c0 	mov    DWORD PTR [esp],0xc002863f
c001c3bb:	e8 91 5e ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001c3c0:	83 c4 10             	add    esp,0x10
c001c3c3:	a1 08 b8 02 c0       	mov    eax,ds:0xc002b808
c001c3c8:	85 c0                	test   eax,eax
c001c3ca:	74 5a                	je     c001c426 <terminateTask(int)+0xce>
c001c3cc:	83 ec 0c             	sub    esp,0xc
c001c3cf:	68 59 86 02 c0       	push   0xc0028659
c001c3d4:	e8 78 5e ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001c3d9:	58                   	pop    eax
c001c3da:	c6 05 0c b8 02 c0 01 	mov    BYTE PTR ds:0xc002b80c,0x1
c001c3e1:	ff 35 08 b8 02 c0    	push   DWORD PTR ds:0xc002b808
c001c3e7:	e8 66 fb ff ff       	call   c001bf52 <unblockTask(ThreadControlBlock*)>
c001c3ec:	c7 04 24 73 86 02 c0 	mov    DWORD PTR [esp],0xc0028673
c001c3f3:	e8 59 5e ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001c3f8:	83 c4 10             	add    esp,0x10
c001c3fb:	e8 44 f5 ff ff       	call   c001b944 <unlockScheduler()>
c001c400:	e8 f6 f8 ff ff       	call   c001bcfb <unlockStuff()>
c001c405:	83 ec 0c             	sub    esp,0xc
c001c408:	68 ab 86 02 c0       	push   0xc00286ab
c001c40d:	e8 3f 5e ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001c412:	83 c4 10             	add    esp,0x10
c001c415:	e8 28 f5 ff ff       	call   c001b942 <lockScheduler()>
c001c41a:	e8 57 f8 ff ff       	call   c001bc76 <schedule()>
c001c41f:	e8 20 f5 ff ff       	call   c001b944 <unlockScheduler()>
c001c424:	eb ef                	jmp    c001c415 <terminateTask(int)+0xbd>
c001c426:	83 ec 0c             	sub    esp,0xc
c001c429:	68 8d 86 02 c0       	push   0xc002868d
c001c42e:	e8 1e 5e ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001c433:	83 c4 10             	add    esp,0x10
c001c436:	eb c3                	jmp    c001c3fb <terminateTask(int)+0xa3>

c001c438 <Thr::terminateFromIRQ(int)>:
c001c438:	83 ec 18             	sub    esp,0x18
c001c43b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c43f:	e8 14 ff ff ff       	call   c001c358 <terminateTask(int)>

c001c444 <Semaphore::release()>:
c001c444:	83 ec 0c             	sub    esp,0xc
c001c447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c44b:	e8 19 f5 ff ff       	call   c001b969 <lockStuff()>
c001c450:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c453:	85 d2                	test   edx,edx
c001c455:	74 1a                	je     c001c471 <Semaphore::release()+0x2d>
c001c457:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001c45a:	83 ec 0c             	sub    esp,0xc
c001c45d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c460:	52                   	push   edx
c001c461:	e8 ec fa ff ff       	call   c001bf52 <unblockTask(ThreadControlBlock*)>
c001c466:	83 c4 10             	add    esp,0x10
c001c469:	83 c4 0c             	add    esp,0xc
c001c46c:	e9 8a f8 ff ff       	jmp    c001bcfb <unlockStuff()>
c001c471:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001c474:	83 c4 0c             	add    esp,0xc
c001c477:	e9 7f f8 ff ff       	jmp    c001bcfb <unlockStuff()>

c001c47c <__static_initialization_and_destruction_0(int, int)>:
c001c47c:	83 ec 0c             	sub    esp,0xc
c001c47f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001c484:	0f 85 88 00 00 00    	jne    c001c512 <__static_initialization_and_destruction_0(int, int)+0x96>
c001c48a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001c492:	75 7e                	jne    c001c512 <__static_initialization_and_destruction_0(int, int)+0x96>
c001c494:	83 ec 0c             	sub    esp,0xc
c001c497:	68 48 b8 02 c0       	push   0xc002b848
c001c49c:	e8 87 92 00 00       	call   c0025728 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c4a1:	83 c4 10             	add    esp,0x10
c001c4a4:	83 ec 04             	sub    esp,0x4
c001c4a7:	68 9c 93 02 c0       	push   0xc002939c
c001c4ac:	68 48 b8 02 c0       	push   0xc002b848
c001c4b1:	68 e8 56 02 c0       	push   0xc00256e8
c001c4b6:	e8 32 5c ff ff       	call   c00120ed <__cxa_atexit>
c001c4bb:	83 c4 10             	add    esp,0x10
c001c4be:	83 ec 0c             	sub    esp,0xc
c001c4c1:	68 3c b8 02 c0       	push   0xc002b83c
c001c4c6:	e8 5d 92 00 00       	call   c0025728 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c4cb:	83 c4 10             	add    esp,0x10
c001c4ce:	83 ec 04             	sub    esp,0x4
c001c4d1:	68 9c 93 02 c0       	push   0xc002939c
c001c4d6:	68 3c b8 02 c0       	push   0xc002b83c
c001c4db:	68 e8 56 02 c0       	push   0xc00256e8
c001c4e0:	e8 08 5c ff ff       	call   c00120ed <__cxa_atexit>
c001c4e5:	83 c4 10             	add    esp,0x10
c001c4e8:	83 ec 0c             	sub    esp,0xc
c001c4eb:	68 30 b8 02 c0       	push   0xc002b830
c001c4f0:	e8 33 92 00 00       	call   c0025728 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c4f5:	83 c4 10             	add    esp,0x10
c001c4f8:	83 ec 04             	sub    esp,0x4
c001c4fb:	68 9c 93 02 c0       	push   0xc002939c
c001c500:	68 30 b8 02 c0       	push   0xc002b830
c001c505:	68 e8 56 02 c0       	push   0xc00256e8
c001c50a:	e8 de 5b ff ff       	call   c00120ed <__cxa_atexit>
c001c50f:	83 c4 10             	add    esp,0x10
c001c512:	90                   	nop
c001c513:	83 c4 0c             	add    esp,0xc
c001c516:	c3                   	ret    

c001c517 <_GLOBAL__sub_I_kernelProcess>:
c001c517:	83 ec 0c             	sub    esp,0xc
c001c51a:	83 ec 08             	sub    esp,0x8
c001c51d:	68 ff ff 00 00       	push   0xffff
c001c522:	6a 01                	push   0x1
c001c524:	e8 53 ff ff ff       	call   c001c47c <__static_initialization_and_destruction_0(int, int)>
c001c529:	83 c4 10             	add    esp,0x10
c001c52c:	83 c4 0c             	add    esp,0xc
c001c52f:	c3                   	ret    

c001c530 <Vm::vm8086EntryPoint(void*)>:
c001c530:	83 ec 0c             	sub    esp,0xc
c001c533:	e8 0c f4 ff ff       	call   c001b944 <unlockScheduler()>
c001c538:	fb                   	sti    
c001c539:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c53e:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001c542:	52                   	push   edx
c001c543:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001c547:	52                   	push   edx
c001c548:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001c54c:	52                   	push   edx
c001c54d:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001c551:	50                   	push   eax
c001c552:	e8 42 3d fe ff       	call   c0000299 <goToVM86>
c001c557:	83 c4 1c             	add    esp,0x1c
c001c55a:	c3                   	ret    

c001c55b <Vm::inbv(unsigned short)>:
c001c55b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c55f:	ec                   	in     al,dx
c001c560:	c3                   	ret    

c001c561 <Vm::outbv(unsigned short, unsigned char)>:
c001c561:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c565:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c569:	ee                   	out    dx,al
c001c56a:	c3                   	ret    

c001c56b <Vm::realToLinear(unsigned short, unsigned short)>:
c001c56b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c570:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c575:	c1 e0 04             	shl    eax,0x4
c001c578:	01 d0                	add    eax,edx
c001c57a:	c3                   	ret    

c001c57b <Vm::getSegment(unsigned int)>:
c001c57b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c57f:	c1 e8 10             	shr    eax,0x10
c001c582:	c3                   	ret    

c001c583 <Vm::getOffset(unsigned int)>:
c001c583:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c587:	c3                   	ret    

c001c588 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001c588:	55                   	push   ebp
c001c589:	57                   	push   edi
c001c58a:	56                   	push   esi
c001c58b:	53                   	push   ebx
c001c58c:	83 ec 2c             	sub    esp,0x2c
c001c58f:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001c593:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c597:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c59b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c59f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c5a3:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001c5a7:	e8 96 f3 ff ff       	call   c001b942 <lockScheduler()>
c001c5ac:	68 80 00 00 00       	push   0x80
c001c5b1:	6a 00                	push   0x0
c001c5b3:	68 30 c5 01 c0       	push   0xc001c530
c001c5b8:	55                   	push   ebp
c001c5b9:	e8 ae f4 ff ff       	call   c001ba6c <Process::createThread(void (*)(void*), void*, int)>
c001c5be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c5c2:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001c5c6:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001c5ca:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c001c5ce:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c001c5d2:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001c5d6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001c5dd:	e8 80 5b ff ff       	call   c0012162 <operator new(unsigned long)>
c001c5e2:	83 c4 0c             	add    esp,0xc
c001c5e5:	89 c3                	mov    ebx,eax
c001c5e7:	55                   	push   ebp
c001c5e8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c5ec:	50                   	push   eax
c001c5ed:	e8 8e 61 ff ff       	call   c0012780 <File::File(char const*, Process*)>
c001c5f2:	83 c4 0c             	add    esp,0xc
c001c5f5:	8d 44 24 17          	lea    eax,[esp+0x17]
c001c5f9:	50                   	push   eax
c001c5fa:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c5fe:	50                   	push   eax
c001c5ff:	53                   	push   ebx
c001c600:	e8 8b 64 ff ff       	call   c0012a90 <File::stat(unsigned long long*, bool*)>
c001c605:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c001c609:	83 c4 10             	add    esp,0x10
c001c60c:	84 d2                	test   dl,dl
c001c60e:	74 1c                	je     c001c62c <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c001c610:	83 ec 0c             	sub    esp,0xc
c001c613:	68 6f 89 02 c0       	push   0xc002896f
c001c618:	e8 d2 c3 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c001c61d:	e8 22 f3 ff ff       	call   c001b944 <unlockScheduler()>
c001c622:	83 c4 10             	add    esp,0x10
c001c625:	31 d2                	xor    edx,edx
c001c627:	e9 81 00 00 00       	jmp    c001c6ad <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001c62c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c630:	51                   	push   ecx
c001c631:	51                   	push   ecx
c001c632:	6a 01                	push   0x1
c001c634:	53                   	push   ebx
c001c635:	e8 aa 61 ff ff       	call   c00127e4 <File::open(FileOpenMode)>
c001c63a:	83 c4 10             	add    esp,0x10
c001c63d:	85 c0                	test   eax,eax
c001c63f:	74 1b                	je     c001c65c <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c001c641:	83 ec 0c             	sub    esp,0xc
c001c644:	68 88 89 02 c0       	push   0xc0028988
c001c649:	e8 a1 c3 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c001c64e:	e8 f1 f2 ff ff       	call   c001b944 <unlockScheduler()>
c001c653:	83 c4 10             	add    esp,0x10
c001c656:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001c65a:	eb 51                	jmp    c001c6ad <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001c65c:	83 ec 0c             	sub    esp,0xc
c001c65f:	0f b7 ff             	movzx  edi,di
c001c662:	6a 07                	push   0x7
c001c664:	0f b7 f6             	movzx  esi,si
c001c667:	68 00 01 00 00       	push   0x100
c001c66c:	6a 00                	push   0x0
c001c66e:	6a 00                	push   0x0
c001c670:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c001c676:	e8 c3 55 ff ff       	call   c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c67b:	83 c4 18             	add    esp,0x18
c001c67e:	57                   	push   edi
c001c67f:	56                   	push   esi
c001c680:	e8 e6 fe ff ff       	call   c001c56b <Vm::realToLinear(unsigned short, unsigned short)>
c001c685:	5a                   	pop    edx
c001c686:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c688:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001c68c:	51                   	push   ecx
c001c68d:	50                   	push   eax
c001c68e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c692:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c696:	53                   	push   ebx
c001c697:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c69a:	83 c4 14             	add    esp,0x14
c001c69d:	53                   	push   ebx
c001c69e:	e8 9f 61 ff ff       	call   c0012842 <File::close()>
c001c6a3:	e8 9c f2 ff ff       	call   c001b944 <unlockScheduler()>
c001c6a8:	83 c4 10             	add    esp,0x10
c001c6ab:	b2 01                	mov    dl,0x1
c001c6ad:	83 c4 2c             	add    esp,0x2c
c001c6b0:	88 d0                	mov    al,dl
c001c6b2:	5b                   	pop    ebx
c001c6b3:	5e                   	pop    esi
c001c6b4:	5f                   	pop    edi
c001c6b5:	5d                   	pop    ebp
c001c6b6:	c3                   	ret    

c001c6b7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001c6b7:	57                   	push   edi
c001c6b8:	56                   	push   esi
c001c6b9:	53                   	push   ebx
c001c6ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c6be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c6c2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c6c6:	83 e8 06             	sub    eax,0x6
c001c6c9:	0f b7 c0             	movzx  eax,ax
c001c6cc:	50                   	push   eax
c001c6cd:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001c6d2:	50                   	push   eax
c001c6d3:	e8 93 fe ff ff       	call   c001c56b <Vm::realToLinear(unsigned short, unsigned short)>
c001c6d8:	5a                   	pop    edx
c001c6d9:	5e                   	pop    esi
c001c6da:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001c6dd:	8d 56 fa             	lea    edx,[esi-0x6]
c001c6e0:	81 e2 ff ff 00 00    	and    edx,0xffff
c001c6e6:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001c6e9:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001c6ec:	83 c2 02             	add    edx,0x2
c001c6ef:	66 89 10             	mov    WORD PTR [eax],dx
c001c6f2:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001c6f5:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001c6f9:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001c6fc:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001c700:	89 d6                	mov    esi,edx
c001c702:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001c708:	66 81 e6 ff fd       	and    si,0xfdff
c001c70d:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001c711:	74 07                	je     c001c71a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001c713:	89 d6                	mov    esi,edx
c001c715:	66 81 ce 00 02       	or     si,0x200
c001c71a:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001c71e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c723:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001c727:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001c72f:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001c732:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001c73a:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001c73d:	5b                   	pop    ebx
c001c73e:	5e                   	pop    esi
c001c73f:	5f                   	pop    edi
c001c740:	c3                   	ret    

c001c741 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001c741:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c746:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c74b:	c1 e0 04             	shl    eax,0x4
c001c74e:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001c751:	c3                   	ret    

c001c752 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001c752:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c757:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c75c:	c1 e0 04             	shl    eax,0x4
c001c75f:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001c763:	c3                   	ret    

c001c764 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001c764:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c769:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c76e:	c1 e0 04             	shl    eax,0x4
c001c771:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001c774:	c3                   	ret    

c001c775 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001c775:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c77a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c77f:	c1 e0 04             	shl    eax,0x4
c001c782:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c786:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001c789:	c3                   	ret    

c001c78a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001c78a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c78f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c794:	c1 e0 04             	shl    eax,0x4
c001c797:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c79b:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001c79f:	c3                   	ret    

c001c7a0 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001c7a0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c7a5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c7aa:	c1 e0 04             	shl    eax,0x4
c001c7ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c7b1:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001c7b4:	c3                   	ret    

c001c7b5 <Vm::faultHandler(regs*)>:
c001c7b5:	55                   	push   ebp
c001c7b6:	57                   	push   edi
c001c7b7:	56                   	push   esi
c001c7b8:	53                   	push   ebx
c001c7b9:	83 ec 1c             	sub    esp,0x1c
c001c7bc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c7c0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001c7c3:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001c7c7:	0f b7 f0             	movzx  esi,ax
c001c7ca:	52                   	push   edx
c001c7cb:	0f b7 c0             	movzx  eax,ax
c001c7ce:	50                   	push   eax
c001c7cf:	e8 97 fd ff ff       	call   c001c56b <Vm::realToLinear(unsigned short, unsigned short)>
c001c7d4:	5a                   	pop    edx
c001c7d5:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001c7d8:	59                   	pop    ecx
c001c7d9:	89 c7                	mov    edi,eax
c001c7db:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001c7de:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c7e2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c7e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c7eb:	0f b7 c5             	movzx  eax,bp
c001c7ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7f2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001c7f6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c7fa:	e8 6c fd ff ff       	call   c001c56b <Vm::realToLinear(unsigned short, unsigned short)>
c001c7ff:	5a                   	pop    edx
c001c800:	59                   	pop    ecx
c001c801:	b1 06                	mov    cl,0x6
c001c803:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001c808:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001c80d:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c001c810:	80 fa 9d             	cmp    dl,0x9d
c001c813:	0f 84 1d 02 00 00    	je     c001ca36 <Vm::faultHandler(regs*)+0x281>
c001c819:	0f 87 8e 00 00 00    	ja     c001c8ad <Vm::faultHandler(regs*)+0xf8>
c001c81f:	80 fa 66             	cmp    dl,0x66
c001c822:	0f 84 89 01 00 00    	je     c001c9b1 <Vm::faultHandler(regs*)+0x1fc>
c001c828:	77 44                	ja     c001c86e <Vm::faultHandler(regs*)+0xb9>
c001c82a:	80 fa 36             	cmp    dl,0x36
c001c82d:	0f 84 74 01 00 00    	je     c001c9a7 <Vm::faultHandler(regs*)+0x1f2>
c001c833:	77 1a                	ja     c001c84f <Vm::faultHandler(regs*)+0x9a>
c001c835:	80 fa 26             	cmp    dl,0x26
c001c838:	0f 84 4b 01 00 00    	je     c001c989 <Vm::faultHandler(regs*)+0x1d4>
c001c83e:	80 fa 2e             	cmp    dl,0x2e
c001c841:	0f 85 4a 05 00 00    	jne    c001cd91 <Vm::faultHandler(regs*)+0x5dc>
c001c847:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c84a:	31 c9                	xor    ecx,ecx
c001c84c:	47                   	inc    edi
c001c84d:	eb be                	jmp    c001c80d <Vm::faultHandler(regs*)+0x58>
c001c84f:	80 fa 64             	cmp    dl,0x64
c001c852:	0f 84 3b 01 00 00    	je     c001c993 <Vm::faultHandler(regs*)+0x1de>
c001c858:	0f 87 3f 01 00 00    	ja     c001c99d <Vm::faultHandler(regs*)+0x1e8>
c001c85e:	80 fa 3e             	cmp    dl,0x3e
c001c861:	0f 85 2a 05 00 00    	jne    c001cd91 <Vm::faultHandler(regs*)+0x5dc>
c001c867:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c86a:	b1 01                	mov    cl,0x1
c001c86c:	eb de                	jmp    c001c84c <Vm::faultHandler(regs*)+0x97>
c001c86e:	80 fa 6d             	cmp    dl,0x6d
c001c871:	0f 84 bf 02 00 00    	je     c001cb36 <Vm::faultHandler(regs*)+0x381>
c001c877:	77 17                	ja     c001c890 <Vm::faultHandler(regs*)+0xdb>
c001c879:	80 fa 67             	cmp    dl,0x67
c001c87c:	0f 84 3c 01 00 00    	je     c001c9be <Vm::faultHandler(regs*)+0x209>
c001c882:	80 fa 6c             	cmp    dl,0x6c
c001c885:	0f 84 5d 02 00 00    	je     c001cae8 <Vm::faultHandler(regs*)+0x333>
c001c88b:	e9 01 05 00 00       	jmp    c001cd91 <Vm::faultHandler(regs*)+0x5dc>
c001c890:	80 fa 6f             	cmp    dl,0x6f
c001c893:	0f 84 8b 03 00 00    	je     c001cc24 <Vm::faultHandler(regs*)+0x46f>
c001c899:	0f 82 0f 03 00 00    	jb     c001cbae <Vm::faultHandler(regs*)+0x3f9>
c001c89f:	80 fa 9c             	cmp    dl,0x9c
c001c8a2:	0f 84 23 01 00 00    	je     c001c9cb <Vm::faultHandler(regs*)+0x216>
c001c8a8:	e9 e4 04 00 00       	jmp    c001cd91 <Vm::faultHandler(regs*)+0x5dc>
c001c8ad:	80 fa ec             	cmp    dl,0xec
c001c8b0:	0f 84 7f 04 00 00    	je     c001cd35 <Vm::faultHandler(regs*)+0x580>
c001c8b6:	77 7b                	ja     c001c933 <Vm::faultHandler(regs*)+0x17e>
c001c8b8:	80 fa e4             	cmp    dl,0xe4
c001c8bb:	0f 84 fe 03 00 00    	je     c001ccbf <Vm::faultHandler(regs*)+0x50a>
c001c8c1:	77 53                	ja     c001c916 <Vm::faultHandler(regs*)+0x161>
c001c8c3:	80 fa cd             	cmp    dl,0xcd
c001c8c6:	0f 84 cd 01 00 00    	je     c001ca99 <Vm::faultHandler(regs*)+0x2e4>
c001c8cc:	80 fa cf             	cmp    dl,0xcf
c001c8cf:	0f 85 bc 04 00 00    	jne    c001cd91 <Vm::faultHandler(regs*)+0x5dc>
c001c8d5:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001c8d8:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001c8db:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001c8df:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001c8e2:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001c8e6:	81 ca 00 02 02 00    	or     edx,0x20200
c001c8ec:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001c8ef:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001c8f3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c8f9:	66 c1 e8 09          	shr    ax,0x9
c001c8fd:	83 e0 01             	and    eax,0x1
c001c900:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001c903:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001c906:	83 c0 06             	add    eax,0x6
c001c909:	25 ff ff 00 00       	and    eax,0xffff
c001c90e:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001c911:	e9 77 04 00 00       	jmp    c001cd8d <Vm::faultHandler(regs*)+0x5d8>
c001c916:	80 fa e6             	cmp    dl,0xe6
c001c919:	0f 84 ea 03 00 00    	je     c001cd09 <Vm::faultHandler(regs*)+0x554>
c001c91f:	0f 82 b6 03 00 00    	jb     c001ccdb <Vm::faultHandler(regs*)+0x526>
c001c925:	80 fa e7             	cmp    dl,0xe7
c001c928:	0f 84 f2 03 00 00    	je     c001cd20 <Vm::faultHandler(regs*)+0x56b>
c001c92e:	e9 5e 04 00 00       	jmp    c001cd91 <Vm::faultHandler(regs*)+0x5dc>
c001c933:	80 fa ef             	cmp    dl,0xef
c001c936:	0f 84 3c 04 00 00    	je     c001cd78 <Vm::faultHandler(regs*)+0x5c3>
c001c93c:	77 28                	ja     c001c966 <Vm::faultHandler(regs*)+0x1b1>
c001c93e:	80 fa ed             	cmp    dl,0xed
c001c941:	0f 84 0a 04 00 00    	je     c001cd51 <Vm::faultHandler(regs*)+0x59c>
c001c947:	80 fa ee             	cmp    dl,0xee
c001c94a:	0f 85 41 04 00 00    	jne    c001cd91 <Vm::faultHandler(regs*)+0x5dc>
c001c950:	50                   	push   eax
c001c951:	50                   	push   eax
c001c952:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001c956:	50                   	push   eax
c001c957:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001c95b:	50                   	push   eax
c001c95c:	e8 00 fc ff ff       	call   c001c561 <Vm::outbv(unsigned short, unsigned char)>
c001c961:	e9 0a 04 00 00       	jmp    c001cd70 <Vm::faultHandler(regs*)+0x5bb>
c001c966:	80 fa fa             	cmp    dl,0xfa
c001c969:	0f 84 5d 01 00 00    	je     c001cacc <Vm::faultHandler(regs*)+0x317>
c001c96f:	80 fa fb             	cmp    dl,0xfb
c001c972:	0f 84 62 01 00 00    	je     c001cada <Vm::faultHandler(regs*)+0x325>
c001c978:	80 fa f3             	cmp    dl,0xf3
c001c97b:	0f 85 10 04 00 00    	jne    c001cd91 <Vm::faultHandler(regs*)+0x5dc>
c001c981:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c984:	e9 c3 fe ff ff       	jmp    c001c84c <Vm::faultHandler(regs*)+0x97>
c001c989:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c98c:	b1 02                	mov    cl,0x2
c001c98e:	e9 b9 fe ff ff       	jmp    c001c84c <Vm::faultHandler(regs*)+0x97>
c001c993:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c996:	b1 03                	mov    cl,0x3
c001c998:	e9 af fe ff ff       	jmp    c001c84c <Vm::faultHandler(regs*)+0x97>
c001c99d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c9a0:	b1 04                	mov    cl,0x4
c001c9a2:	e9 a5 fe ff ff       	jmp    c001c84c <Vm::faultHandler(regs*)+0x97>
c001c9a7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c9aa:	b1 05                	mov    cl,0x5
c001c9ac:	e9 9b fe ff ff       	jmp    c001c84c <Vm::faultHandler(regs*)+0x97>
c001c9b1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c9b4:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001c9b9:	e9 8e fe ff ff       	jmp    c001c84c <Vm::faultHandler(regs*)+0x97>
c001c9be:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c9c1:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001c9c6:	e9 81 fe ff ff       	jmp    c001c84c <Vm::faultHandler(regs*)+0x97>
c001c9cb:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001c9ce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001c9d2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001c9d7:	74 30                	je     c001ca09 <Vm::faultHandler(regs*)+0x254>
c001c9d9:	83 e9 04             	sub    ecx,0x4
c001c9dc:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001c9e2:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001c9e8:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001c9eb:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001c9ee:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c9f4:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001c9f8:	0f 84 8c 03 00 00    	je     c001cd8a <Vm::faultHandler(regs*)+0x5d5>
c001c9fe:	80 ce 02             	or     dh,0x2
c001ca01:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001ca04:	e9 81 03 00 00       	jmp    c001cd8a <Vm::faultHandler(regs*)+0x5d5>
c001ca09:	83 e9 02             	sub    ecx,0x2
c001ca0c:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001ca12:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001ca15:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001ca19:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ca1f:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001ca23:	74 05                	je     c001ca2a <Vm::faultHandler(regs*)+0x275>
c001ca25:	80 ce 02             	or     dh,0x2
c001ca28:	eb 03                	jmp    c001ca2d <Vm::faultHandler(regs*)+0x278>
c001ca2a:	80 e6 fd             	and    dh,0xfd
c001ca2d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001ca31:	e9 54 03 00 00       	jmp    c001cd8a <Vm::faultHandler(regs*)+0x5d5>
c001ca36:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ca3b:	74 2a                	je     c001ca67 <Vm::faultHandler(regs*)+0x2b2>
c001ca3d:	8b 10                	mov    edx,DWORD PTR [eax]
c001ca3f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ca45:	81 ca 00 02 02 00    	or     edx,0x20200
c001ca4b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ca4e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca50:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ca56:	c1 e8 09             	shr    eax,0x9
c001ca59:	83 e0 01             	and    eax,0x1
c001ca5c:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ca5f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ca62:	83 c0 04             	add    eax,0x4
c001ca65:	eb 25                	jmp    c001ca8c <Vm::faultHandler(regs*)+0x2d7>
c001ca67:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001ca6a:	81 ca 00 02 02 00    	or     edx,0x20200
c001ca70:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ca73:	66 8b 00             	mov    ax,WORD PTR [eax]
c001ca76:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ca7c:	66 c1 e8 09          	shr    ax,0x9
c001ca80:	83 e0 01             	and    eax,0x1
c001ca83:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ca86:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ca89:	83 c0 02             	add    eax,0x2
c001ca8c:	25 ff ff 00 00       	and    eax,0xffff
c001ca91:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001ca94:	e9 f1 02 00 00       	jmp    c001cd8a <Vm::faultHandler(regs*)+0x5d5>
c001ca99:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001ca9d:	3c ff                	cmp    al,0xff
c001ca9f:	75 10                	jne    c001cab1 <Vm::faultHandler(regs*)+0x2fc>
c001caa1:	83 ec 0c             	sub    esp,0xc
c001caa4:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001caa7:	e8 8c f9 ff ff       	call   c001c438 <Thr::terminateFromIRQ(int)>
c001caac:	e9 c2 02 00 00       	jmp    c001cd73 <Vm::faultHandler(regs*)+0x5be>
c001cab1:	83 ec 0c             	sub    esp,0xc
c001cab4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cabc:	57                   	push   edi
c001cabd:	50                   	push   eax
c001cabe:	53                   	push   ebx
c001cabf:	e8 f3 fb ff ff       	call   c001c6b7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001cac4:	83 c4 20             	add    esp,0x20
c001cac7:	e9 c1 02 00 00       	jmp    c001cd8d <Vm::faultHandler(regs*)+0x5d8>
c001cacc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cad1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001cad5:	e9 b0 02 00 00       	jmp    c001cd8a <Vm::faultHandler(regs*)+0x5d5>
c001cada:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cadf:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001cae3:	e9 a2 02 00 00       	jmp    c001cd8a <Vm::faultHandler(regs*)+0x5d5>
c001cae8:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001caed:	74 0d                	je     c001cafc <Vm::faultHandler(regs*)+0x347>
c001caef:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001caf6:	0f 87 e9 02 00 00    	ja     c001cde5 <Vm::faultHandler(regs*)+0x630>
c001cafc:	83 ec 0c             	sub    esp,0xc
c001caff:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001cb02:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001cb06:	50                   	push   eax
c001cb07:	e8 4f fa ff ff       	call   c001c55b <Vm::inbv(unsigned short)>
c001cb0c:	83 c4 0c             	add    esp,0xc
c001cb0f:	0f b6 c0             	movzx  eax,al
c001cb12:	0f b7 c9             	movzx  ecx,cx
c001cb15:	50                   	push   eax
c001cb16:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001cb1a:	50                   	push   eax
c001cb1b:	51                   	push   ecx
c001cb1c:	e8 54 fc ff ff       	call   c001c775 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001cb21:	83 c4 10             	add    esp,0x10
c001cb24:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cb27:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cb2b:	74 03                	je     c001cb30 <Vm::faultHandler(regs*)+0x37b>
c001cb2d:	48                   	dec    eax
c001cb2e:	eb 01                	jmp    c001cb31 <Vm::faultHandler(regs*)+0x37c>
c001cb30:	40                   	inc    eax
c001cb31:	0f b7 c0             	movzx  eax,ax
c001cb34:	eb 70                	jmp    c001cba6 <Vm::faultHandler(regs*)+0x3f1>
c001cb36:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001cb39:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001cb3c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cb41:	74 0c                	je     c001cb4f <Vm::faultHandler(regs*)+0x39a>
c001cb43:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001cb49:	0f 87 96 02 00 00    	ja     c001cde5 <Vm::faultHandler(regs*)+0x630>
c001cb4f:	0f b7 c9             	movzx  ecx,cx
c001cb52:	0f b7 f6             	movzx  esi,si
c001cb55:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001cb58:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cb5d:	74 20                	je     c001cb7f <Vm::faultHandler(regs*)+0x3ca>
c001cb5f:	ed                   	in     eax,dx
c001cb60:	55                   	push   ebp
c001cb61:	50                   	push   eax
c001cb62:	51                   	push   ecx
c001cb63:	56                   	push   esi
c001cb64:	e8 37 fc ff ff       	call   c001c7a0 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001cb69:	83 c4 10             	add    esp,0x10
c001cb6c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cb6f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cb73:	74 05                	je     c001cb7a <Vm::faultHandler(regs*)+0x3c5>
c001cb75:	83 e8 04             	sub    eax,0x4
c001cb78:	eb 27                	jmp    c001cba1 <Vm::faultHandler(regs*)+0x3ec>
c001cb7a:	83 c0 04             	add    eax,0x4
c001cb7d:	eb 22                	jmp    c001cba1 <Vm::faultHandler(regs*)+0x3ec>
c001cb7f:	66 ed                	in     ax,dx
c001cb81:	0f b7 c0             	movzx  eax,ax
c001cb84:	57                   	push   edi
c001cb85:	50                   	push   eax
c001cb86:	51                   	push   ecx
c001cb87:	56                   	push   esi
c001cb88:	e8 fd fb ff ff       	call   c001c78a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001cb8d:	83 c4 10             	add    esp,0x10
c001cb90:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cb93:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cb97:	74 05                	je     c001cb9e <Vm::faultHandler(regs*)+0x3e9>
c001cb99:	83 e8 02             	sub    eax,0x2
c001cb9c:	eb 03                	jmp    c001cba1 <Vm::faultHandler(regs*)+0x3ec>
c001cb9e:	83 c0 02             	add    eax,0x2
c001cba1:	25 ff ff 00 00       	and    eax,0xffff
c001cba6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001cba9:	e9 dc 01 00 00       	jmp    c001cd8a <Vm::faultHandler(regs*)+0x5d5>
c001cbae:	49                   	dec    ecx
c001cbaf:	80 f9 05             	cmp    cl,0x5
c001cbb2:	77 24                	ja     c001cbd8 <Vm::faultHandler(regs*)+0x423>
c001cbb4:	0f b6 c9             	movzx  ecx,cl
c001cbb7:	ff 24 8d d0 89 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd7630]
c001cbbe:	0f b7 f5             	movzx  esi,bp
c001cbc1:	eb 15                	jmp    c001cbd8 <Vm::faultHandler(regs*)+0x423>
c001cbc3:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c001cbc7:	eb 0f                	jmp    c001cbd8 <Vm::faultHandler(regs*)+0x423>
c001cbc9:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c001cbcd:	eb 09                	jmp    c001cbd8 <Vm::faultHandler(regs*)+0x423>
c001cbcf:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c001cbd3:	eb 03                	jmp    c001cbd8 <Vm::faultHandler(regs*)+0x423>
c001cbd5:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c001cbd8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cbdb:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cbe0:	74 0b                	je     c001cbed <Vm::faultHandler(regs*)+0x438>
c001cbe2:	3d ff ff 00 00       	cmp    eax,0xffff
c001cbe7:	0f 87 f8 01 00 00    	ja     c001cde5 <Vm::faultHandler(regs*)+0x630>
c001cbed:	0f b7 c0             	movzx  eax,ax
c001cbf0:	52                   	push   edx
c001cbf1:	52                   	push   edx
c001cbf2:	50                   	push   eax
c001cbf3:	56                   	push   esi
c001cbf4:	e8 48 fb ff ff       	call   c001c741 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001cbf9:	59                   	pop    ecx
c001cbfa:	0f b6 c0             	movzx  eax,al
c001cbfd:	5e                   	pop    esi
c001cbfe:	50                   	push   eax
c001cbff:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001cc03:	50                   	push   eax
c001cc04:	e8 58 f9 ff ff       	call   c001c561 <Vm::outbv(unsigned short, unsigned char)>
c001cc09:	83 c4 10             	add    esp,0x10
c001cc0c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cc0f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cc13:	74 03                	je     c001cc18 <Vm::faultHandler(regs*)+0x463>
c001cc15:	48                   	dec    eax
c001cc16:	eb 01                	jmp    c001cc19 <Vm::faultHandler(regs*)+0x464>
c001cc18:	40                   	inc    eax
c001cc19:	0f b7 c0             	movzx  eax,ax
c001cc1c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001cc1f:	e9 66 01 00 00       	jmp    c001cd8a <Vm::faultHandler(regs*)+0x5d5>
c001cc24:	49                   	dec    ecx
c001cc25:	80 f9 05             	cmp    cl,0x5
c001cc28:	77 1f                	ja     c001cc49 <Vm::faultHandler(regs*)+0x494>
c001cc2a:	0f b6 c9             	movzx  ecx,cl
c001cc2d:	ff 24 8d e8 89 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd7618]
c001cc34:	89 ee                	mov    esi,ebp
c001cc36:	eb 11                	jmp    c001cc49 <Vm::faultHandler(regs*)+0x494>
c001cc38:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001cc3b:	eb 0c                	jmp    c001cc49 <Vm::faultHandler(regs*)+0x494>
c001cc3d:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001cc40:	eb 07                	jmp    c001cc49 <Vm::faultHandler(regs*)+0x494>
c001cc42:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c001cc45:	eb 02                	jmp    c001cc49 <Vm::faultHandler(regs*)+0x494>
c001cc47:	8b 33                	mov    esi,DWORD PTR [ebx]
c001cc49:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001cc4c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cc51:	74 0c                	je     c001cc5f <Vm::faultHandler(regs*)+0x4aa>
c001cc53:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001cc59:	0f 87 86 01 00 00    	ja     c001cde5 <Vm::faultHandler(regs*)+0x630>
c001cc5f:	0f b7 d6             	movzx  edx,si
c001cc62:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001cc65:	0f b7 c1             	movzx  eax,cx
c001cc68:	81 e7 00 04 00 00    	and    edi,0x400
c001cc6e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001cc71:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cc76:	74 1d                	je     c001cc95 <Vm::faultHandler(regs*)+0x4e0>
c001cc78:	55                   	push   ebp
c001cc79:	55                   	push   ebp
c001cc7a:	50                   	push   eax
c001cc7b:	52                   	push   edx
c001cc7c:	e8 e3 fa ff ff       	call   c001c764 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001cc81:	83 c4 10             	add    esp,0x10
c001cc84:	89 f2                	mov    edx,esi
c001cc86:	ef                   	out    dx,eax
c001cc87:	85 ff                	test   edi,edi
c001cc89:	74 05                	je     c001cc90 <Vm::faultHandler(regs*)+0x4db>
c001cc8b:	83 e9 04             	sub    ecx,0x4
c001cc8e:	eb 21                	jmp    c001ccb1 <Vm::faultHandler(regs*)+0x4fc>
c001cc90:	83 c1 04             	add    ecx,0x4
c001cc93:	eb 1c                	jmp    c001ccb1 <Vm::faultHandler(regs*)+0x4fc>
c001cc95:	55                   	push   ebp
c001cc96:	55                   	push   ebp
c001cc97:	50                   	push   eax
c001cc98:	52                   	push   edx
c001cc99:	e8 b4 fa ff ff       	call   c001c752 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001cc9e:	83 c4 10             	add    esp,0x10
c001cca1:	89 f2                	mov    edx,esi
c001cca3:	66 ef                	out    dx,ax
c001cca5:	85 ff                	test   edi,edi
c001cca7:	74 05                	je     c001ccae <Vm::faultHandler(regs*)+0x4f9>
c001cca9:	83 e9 02             	sub    ecx,0x2
c001ccac:	eb 03                	jmp    c001ccb1 <Vm::faultHandler(regs*)+0x4fc>
c001ccae:	83 c1 02             	add    ecx,0x2
c001ccb1:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001ccb7:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c001ccba:	e9 cb 00 00 00       	jmp    c001cd8a <Vm::faultHandler(regs*)+0x5d5>
c001ccbf:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ccc6:	83 ec 0c             	sub    esp,0xc
c001ccc9:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001cccd:	50                   	push   eax
c001ccce:	e8 88 f8 ff ff       	call   c001c55b <Vm::inbv(unsigned short)>
c001ccd3:	0f b6 c0             	movzx  eax,al
c001ccd6:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ccd9:	eb 3f                	jmp    c001cd1a <Vm::faultHandler(regs*)+0x565>
c001ccdb:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cce0:	74 07                	je     c001cce9 <Vm::faultHandler(regs*)+0x534>
c001cce2:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001cce6:	ed                   	in     eax,dx
c001cce7:	eb 14                	jmp    c001ccfd <Vm::faultHandler(regs*)+0x548>
c001cce9:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c001ccec:	66 31 c9             	xor    cx,cx
c001ccef:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c001ccf2:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001ccf6:	66 ed                	in     ax,dx
c001ccf8:	0f b7 c0             	movzx  eax,ax
c001ccfb:	09 c8                	or     eax,ecx
c001ccfd:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001cd00:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001cd04:	e9 84 00 00 00       	jmp    c001cd8d <Vm::faultHandler(regs*)+0x5d8>
c001cd09:	52                   	push   edx
c001cd0a:	52                   	push   edx
c001cd0b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001cd0f:	50                   	push   eax
c001cd10:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001cd14:	50                   	push   eax
c001cd15:	e8 47 f8 ff ff       	call   c001c561 <Vm::outbv(unsigned short, unsigned char)>
c001cd1a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001cd1e:	eb 53                	jmp    c001cd73 <Vm::faultHandler(regs*)+0x5be>
c001cd20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cd23:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001cd27:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cd2c:	74 03                	je     c001cd31 <Vm::faultHandler(regs*)+0x57c>
c001cd2e:	ef                   	out    dx,eax
c001cd2f:	eb cf                	jmp    c001cd00 <Vm::faultHandler(regs*)+0x54b>
c001cd31:	66 ef                	out    dx,ax
c001cd33:	eb cb                	jmp    c001cd00 <Vm::faultHandler(regs*)+0x54b>
c001cd35:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001cd3c:	83 ec 0c             	sub    esp,0xc
c001cd3f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001cd43:	50                   	push   eax
c001cd44:	e8 12 f8 ff ff       	call   c001c55b <Vm::inbv(unsigned short)>
c001cd49:	0f b6 c0             	movzx  eax,al
c001cd4c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001cd4f:	eb 1f                	jmp    c001cd70 <Vm::faultHandler(regs*)+0x5bb>
c001cd51:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001cd54:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cd59:	74 03                	je     c001cd5e <Vm::faultHandler(regs*)+0x5a9>
c001cd5b:	ed                   	in     eax,dx
c001cd5c:	eb 0d                	jmp    c001cd6b <Vm::faultHandler(regs*)+0x5b6>
c001cd5e:	66 ed                	in     ax,dx
c001cd60:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001cd63:	0f b7 c0             	movzx  eax,ax
c001cd66:	66 31 d2             	xor    dx,dx
c001cd69:	09 d0                	or     eax,edx
c001cd6b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001cd6e:	eb 1a                	jmp    c001cd8a <Vm::faultHandler(regs*)+0x5d5>
c001cd70:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cd73:	83 c4 10             	add    esp,0x10
c001cd76:	eb 15                	jmp    c001cd8d <Vm::faultHandler(regs*)+0x5d8>
c001cd78:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cd7b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001cd7e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cd83:	74 03                	je     c001cd88 <Vm::faultHandler(regs*)+0x5d3>
c001cd85:	ef                   	out    dx,eax
c001cd86:	eb 02                	jmp    c001cd8a <Vm::faultHandler(regs*)+0x5d5>
c001cd88:	66 ef                	out    dx,ax
c001cd8a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cd8d:	b0 01                	mov    al,0x1
c001cd8f:	eb 56                	jmp    c001cde7 <Vm::faultHandler(regs*)+0x632>
c001cd91:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c001cd95:	50                   	push   eax
c001cd96:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c001cd9a:	50                   	push   eax
c001cd9b:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c001cd9f:	50                   	push   eax
c001cda0:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c001cda4:	50                   	push   eax
c001cda5:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001cda9:	50                   	push   eax
c001cdaa:	52                   	push   edx
c001cdab:	52                   	push   edx
c001cdac:	68 a1 89 02 c0       	push   0xc00289a1
c001cdb1:	e8 9b 54 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001cdb6:	83 c4 20             	add    esp,0x20
c001cdb9:	83 ec 0c             	sub    esp,0xc
c001cdbc:	6a 60                	push   0x60
c001cdbe:	e8 98 f7 ff ff       	call   c001c55b <Vm::inbv(unsigned short)>
c001cdc3:	83 c4 10             	add    esp,0x10
c001cdc6:	3c 1c                	cmp    al,0x1c
c001cdc8:	74 04                	je     c001cdce <Vm::faultHandler(regs*)+0x619>
c001cdca:	3c 5a                	cmp    al,0x5a
c001cdcc:	75 eb                	jne    c001cdb9 <Vm::faultHandler(regs*)+0x604>
c001cdce:	3c 5a                	cmp    al,0x5a
c001cdd0:	74 04                	je     c001cdd6 <Vm::faultHandler(regs*)+0x621>
c001cdd2:	3c 1c                	cmp    al,0x1c
c001cdd4:	75 0f                	jne    c001cde5 <Vm::faultHandler(regs*)+0x630>
c001cdd6:	83 ec 0c             	sub    esp,0xc
c001cdd9:	6a 60                	push   0x60
c001cddb:	e8 7b f7 ff ff       	call   c001c55b <Vm::inbv(unsigned short)>
c001cde0:	83 c4 10             	add    esp,0x10
c001cde3:	eb e9                	jmp    c001cdce <Vm::faultHandler(regs*)+0x619>
c001cde5:	31 c0                	xor    eax,eax
c001cde7:	83 c4 1c             	add    esp,0x1c
c001cdea:	5b                   	pop    ebx
c001cdeb:	5e                   	pop    esi
c001cdec:	5f                   	pop    edi
c001cded:	5d                   	pop    ebp
c001cdee:	c3                   	ret    

c001cdef <Vm::fpuInternalTo32(unsigned long long)>:
c001cdef:	57                   	push   edi
c001cdf0:	56                   	push   esi
c001cdf1:	53                   	push   ebx
c001cdf2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cdf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdfa:	89 d6                	mov    esi,edx
c001cdfc:	89 d7                	mov    edi,edx
c001cdfe:	89 c1                	mov    ecx,eax
c001ce00:	c1 ef 14             	shr    edi,0x14
c001ce03:	89 d3                	mov    ebx,edx
c001ce05:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ce0b:	31 d2                	xor    edx,edx
c001ce0d:	89 f8                	mov    eax,edi
c001ce0f:	81 e6 00 00 00 80    	and    esi,0x80000000
c001ce15:	bf ff 00 00 00       	mov    edi,0xff
c001ce1a:	05 80 fc ff ff       	add    eax,0xfffffc80
c001ce1f:	83 d2 ff             	adc    edx,0xffffffff
c001ce22:	39 c7                	cmp    edi,eax
c001ce24:	bf 00 00 00 00       	mov    edi,0x0
c001ce29:	19 d7                	sbb    edi,edx
c001ce2b:	72 15                	jb     c001ce42 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001ce2d:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001ce31:	c1 e0 17             	shl    eax,0x17
c001ce34:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001ce3a:	09 f1                	or     ecx,esi
c001ce3c:	09 c1                	or     ecx,eax
c001ce3e:	89 cf                	mov    edi,ecx
c001ce40:	eb 02                	jmp    c001ce44 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001ce42:	31 ff                	xor    edi,edi
c001ce44:	89 f8                	mov    eax,edi
c001ce46:	5b                   	pop    ebx
c001ce47:	5e                   	pop    esi
c001ce48:	5f                   	pop    edi
c001ce49:	c3                   	ret    

c001ce4a <Vm::fpuInternalTo64(unsigned long long)>:
c001ce4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ce52:	c3                   	ret    

c001ce53 <Vm::fpu32ToInternal(unsigned int)>:
c001ce53:	57                   	push   edi
c001ce54:	31 ff                	xor    edi,edi
c001ce56:	56                   	push   esi
c001ce57:	53                   	push   ebx
c001ce58:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ce5c:	89 cb                	mov    ebx,ecx
c001ce5e:	89 ce                	mov    esi,ecx
c001ce60:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001ce66:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001ce6c:	c1 e9 17             	shr    ecx,0x17
c001ce6f:	89 f0                	mov    eax,esi
c001ce71:	0f b6 d1             	movzx  edx,cl
c001ce74:	81 c2 80 03 00 00    	add    edx,0x380
c001ce7a:	89 d1                	mov    ecx,edx
c001ce7c:	89 fa                	mov    edx,edi
c001ce7e:	c1 e1 14             	shl    ecx,0x14
c001ce81:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001ce85:	c1 e0 1d             	shl    eax,0x1d
c001ce88:	89 d7                	mov    edi,edx
c001ce8a:	89 c6                	mov    esi,eax
c001ce8c:	89 ca                	mov    edx,ecx
c001ce8e:	89 f0                	mov    eax,esi
c001ce90:	09 fa                	or     edx,edi
c001ce92:	09 da                	or     edx,ebx
c001ce94:	5b                   	pop    ebx
c001ce95:	5e                   	pop    esi
c001ce96:	5f                   	pop    edi
c001ce97:	c3                   	ret    

c001ce98 <Vm::fpu64ToInternal(unsigned long long)>:
c001ce98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce9c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cea0:	c3                   	ret    

c001cea1 <Vm::fpuFloatToLong(unsigned long long)>:
c001cea1:	57                   	push   edi
c001cea2:	31 c0                	xor    eax,eax
c001cea4:	56                   	push   esi
c001cea5:	31 d2                	xor    edx,edx
c001cea7:	53                   	push   ebx
c001cea8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ceac:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ceb0:	89 d9                	mov    ecx,ebx
c001ceb2:	c1 e9 14             	shr    ecx,0x14
c001ceb5:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001cebb:	89 cf                	mov    edi,ecx
c001cebd:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001cec3:	78 33                	js     c001cef8 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001cec5:	89 d9                	mov    ecx,ebx
c001cec7:	89 f0                	mov    eax,esi
c001cec9:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001cecf:	81 c9 00 00 10 00    	or     ecx,0x100000
c001ced5:	89 ca                	mov    edx,ecx
c001ced7:	b9 34 00 00 00       	mov    ecx,0x34
c001cedc:	29 f9                	sub    ecx,edi
c001cede:	0f ad d0             	shrd   eax,edx,cl
c001cee1:	d3 fa                	sar    edx,cl
c001cee3:	f6 c1 20             	test   cl,0x20
c001cee6:	74 05                	je     c001ceed <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001cee8:	89 d0                	mov    eax,edx
c001ceea:	c1 fa 1f             	sar    edx,0x1f
c001ceed:	85 db                	test   ebx,ebx
c001ceef:	79 07                	jns    c001cef8 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001cef1:	f7 d8                	neg    eax
c001cef3:	83 d2 00             	adc    edx,0x0
c001cef6:	f7 da                	neg    edx
c001cef8:	5b                   	pop    ebx
c001cef9:	5e                   	pop    esi
c001cefa:	5f                   	pop    edi
c001cefb:	c3                   	ret    

c001cefc <Vm::fpuULongToFloat(unsigned long long)>:
c001cefc:	57                   	push   edi
c001cefd:	31 c9                	xor    ecx,ecx
c001ceff:	56                   	push   esi
c001cf00:	53                   	push   ebx
c001cf01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cf05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cf09:	0f ba e7 14          	bt     edi,0x14
c001cf0d:	72 07                	jb     c001cf16 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001cf0f:	01 f6                	add    esi,esi
c001cf11:	11 ff                	adc    edi,edi
c001cf13:	41                   	inc    ecx
c001cf14:	eb f3                	jmp    c001cf09 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001cf16:	89 fa                	mov    edx,edi
c001cf18:	89 f0                	mov    eax,esi
c001cf1a:	bb 33 04 00 00       	mov    ebx,0x433
c001cf1f:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001cf25:	29 cb                	sub    ebx,ecx
c001cf27:	89 d9                	mov    ecx,ebx
c001cf29:	5b                   	pop    ebx
c001cf2a:	c1 e1 14             	shl    ecx,0x14
c001cf2d:	5e                   	pop    esi
c001cf2e:	09 ca                	or     edx,ecx
c001cf30:	5f                   	pop    edi
c001cf31:	c3                   	ret    

c001cf32 <Vm::fpuLongToFloat(long long)>:
c001cf32:	56                   	push   esi
c001cf33:	31 c0                	xor    eax,eax
c001cf35:	53                   	push   ebx
c001cf36:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cf3a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cf3e:	39 c8                	cmp    eax,ecx
c001cf40:	19 d8                	sbb    eax,ebx
c001cf42:	7d 04                	jge    c001cf48 <Vm::fpuLongToFloat(long long)+0x16>
c001cf44:	31 f6                	xor    esi,esi
c001cf46:	eb 0c                	jmp    c001cf54 <Vm::fpuLongToFloat(long long)+0x22>
c001cf48:	f7 d9                	neg    ecx
c001cf4a:	be 01 00 00 00       	mov    esi,0x1
c001cf4f:	83 d3 00             	adc    ebx,0x0
c001cf52:	f7 db                	neg    ebx
c001cf54:	31 c0                	xor    eax,eax
c001cf56:	0f ba e3 14          	bt     ebx,0x14
c001cf5a:	72 07                	jb     c001cf63 <Vm::fpuLongToFloat(long long)+0x31>
c001cf5c:	01 c9                	add    ecx,ecx
c001cf5e:	11 db                	adc    ebx,ebx
c001cf60:	40                   	inc    eax
c001cf61:	eb f3                	jmp    c001cf56 <Vm::fpuLongToFloat(long long)+0x24>
c001cf63:	ba 33 04 00 00       	mov    edx,0x433
c001cf68:	29 c2                	sub    edx,eax
c001cf6a:	89 c8                	mov    eax,ecx
c001cf6c:	c1 e2 14             	shl    edx,0x14
c001cf6f:	89 d9                	mov    ecx,ebx
c001cf71:	89 f3                	mov    ebx,esi
c001cf73:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001cf79:	09 ca                	or     edx,ecx
c001cf7b:	84 db                	test   bl,bl
c001cf7d:	74 06                	je     c001cf85 <Vm::fpuLongToFloat(long long)+0x53>
c001cf7f:	81 ca 00 00 00 80    	or     edx,0x80000000
c001cf85:	5b                   	pop    ebx
c001cf86:	5e                   	pop    esi
c001cf87:	c3                   	ret    

c001cf88 <Vm::fpuGet0()>:
c001cf88:	31 c0                	xor    eax,eax
c001cf8a:	31 d2                	xor    edx,edx
c001cf8c:	c3                   	ret    

c001cf8d <Vm::fpuGet1()>:
c001cf8d:	b8 01 00 00 00       	mov    eax,0x1
c001cf92:	31 d2                	xor    edx,edx
c001cf94:	c3                   	ret    

c001cf95 <Vm::fpuGetPi()>:
c001cf95:	b8 03 00 00 00       	mov    eax,0x3
c001cf9a:	31 d2                	xor    edx,edx
c001cf9c:	c3                   	ret    

c001cf9d <Vm::fpuGetLog2E()>:
c001cf9d:	83 ec 18             	sub    esp,0x18
c001cfa0:	68 00 8a 02 c0       	push   0xc0028a00
c001cfa5:	e8 45 ba ff ff       	call   c00189ef <Krnl::panic(char const*)>
c001cfaa:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cfaf:	31 d2                	xor    edx,edx
c001cfb1:	83 c4 1c             	add    esp,0x1c
c001cfb4:	c3                   	ret    

c001cfb5 <Vm::fpuGetLogE2()>:
c001cfb5:	83 ec 18             	sub    esp,0x18
c001cfb8:	68 0c 8a 02 c0       	push   0xc0028a0c
c001cfbd:	e8 2d ba ff ff       	call   c00189ef <Krnl::panic(char const*)>
c001cfc2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cfc7:	31 d2                	xor    edx,edx
c001cfc9:	83 c4 1c             	add    esp,0x1c
c001cfcc:	c3                   	ret    

c001cfcd <Vm::fpuGetLog210()>:
c001cfcd:	83 ec 18             	sub    esp,0x18
c001cfd0:	68 18 8a 02 c0       	push   0xc0028a18
c001cfd5:	e8 15 ba ff ff       	call   c00189ef <Krnl::panic(char const*)>
c001cfda:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cfdf:	31 d2                	xor    edx,edx
c001cfe1:	83 c4 1c             	add    esp,0x1c
c001cfe4:	c3                   	ret    

c001cfe5 <Vm::fpuGetLog102()>:
c001cfe5:	83 ec 18             	sub    esp,0x18
c001cfe8:	68 25 8a 02 c0       	push   0xc0028a25
c001cfed:	e8 fd b9 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c001cff2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cff7:	31 d2                	xor    edx,edx
c001cff9:	83 c4 1c             	add    esp,0x1c
c001cffc:	c3                   	ret    

c001cffd <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001cffd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d001:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001d005:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d009:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001d00d:	0f 92 c0             	setb   al
c001d010:	c3                   	ret    

c001d011 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001d011:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d019:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001d01d:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001d021:	09 c2                	or     edx,eax
c001d023:	0f 94 c0             	sete   al
c001d026:	c3                   	ret    

c001d027 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001d027:	57                   	push   edi
c001d028:	56                   	push   esi
c001d029:	53                   	push   ebx
c001d02a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d02e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d032:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d036:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d03a:	57                   	push   edi
c001d03b:	56                   	push   esi
c001d03c:	53                   	push   ebx
c001d03d:	51                   	push   ecx
c001d03e:	e8 ce ff ff ff       	call   c001d011 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001d043:	83 c4 10             	add    esp,0x10
c001d046:	88 c2                	mov    dl,al
c001d048:	31 c0                	xor    eax,eax
c001d04a:	84 d2                	test   dl,dl
c001d04c:	75 0c                	jne    c001d05a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001d04e:	57                   	push   edi
c001d04f:	56                   	push   esi
c001d050:	53                   	push   ebx
c001d051:	51                   	push   ecx
c001d052:	e8 a6 ff ff ff       	call   c001cffd <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001d057:	83 c4 10             	add    esp,0x10
c001d05a:	83 e0 01             	and    eax,0x1
c001d05d:	5b                   	pop    ebx
c001d05e:	88 c1                	mov    cl,al
c001d060:	83 e2 01             	and    edx,0x1
c001d063:	a0 81 b8 02 c0       	mov    al,ds:0xc002b881
c001d068:	c1 e2 06             	shl    edx,0x6
c001d06b:	83 e0 ba             	and    eax,0xffffffba
c001d06e:	5e                   	pop    esi
c001d06f:	09 c8                	or     eax,ecx
c001d071:	5f                   	pop    edi
c001d072:	09 d0                	or     eax,edx
c001d074:	a2 81 b8 02 c0       	mov    ds:0xc002b881,al
c001d079:	c3                   	ret    

c001d07a <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001d07a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d07e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d082:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d086:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001d08a:	c3                   	ret    

c001d08b <Vm::fpuAbs(unsigned long long)>:
c001d08b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d08f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d093:	c3                   	ret    

c001d094 <Vm::fpuChs(unsigned long long)>:
c001d094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d098:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d09c:	f7 d8                	neg    eax
c001d09e:	83 d2 00             	adc    edx,0x0
c001d0a1:	f7 da                	neg    edx
c001d0a3:	c3                   	ret    

c001d0a4 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001d0a4:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001d0a8:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001d0ad:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001d0b1:	eb c7                	jmp    c001d07a <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001d0b3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001d0b3:	53                   	push   ebx
c001d0b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d0b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d0bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d0c0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d0c4:	0f af ca             	imul   ecx,edx
c001d0c7:	0f af d8             	imul   ebx,eax
c001d0ca:	f7 e2                	mul    edx
c001d0cc:	01 d9                	add    ecx,ebx
c001d0ce:	5b                   	pop    ebx
c001d0cf:	01 ca                	add    edx,ecx
c001d0d1:	c3                   	ret    

c001d0d2 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001d0d2:	83 ec 0c             	sub    esp,0xc
c001d0d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0e5:	e8 72 62 00 00       	call   c002335c <__udivdi3>
c001d0ea:	83 c4 1c             	add    esp,0x1c
c001d0ed:	c3                   	ret    

c001d0ee <Vm::fpuSquare(unsigned long long)>:
c001d0ee:	50                   	push   eax
c001d0ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d0f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d0f7:	52                   	push   edx
c001d0f8:	50                   	push   eax
c001d0f9:	52                   	push   edx
c001d0fa:	50                   	push   eax
c001d0fb:	e8 b3 ff ff ff       	call   c001d0b3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d100:	83 c4 14             	add    esp,0x14
c001d103:	c3                   	ret    

c001d104 <Vm::fpuGetReg(int)>:
c001d104:	83 ec 0c             	sub    esp,0xc
c001d107:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001d10c:	76 10                	jbe    c001d11e <Vm::fpuGetReg(int)+0x1a>
c001d10e:	83 ec 0c             	sub    esp,0xc
c001d111:	68 32 8a 02 c0       	push   0xc0028a32
c001d116:	e8 d4 b8 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c001d11b:	83 c4 10             	add    esp,0x10
c001d11e:	a0 81 b8 02 c0       	mov    al,ds:0xc002b881
c001d123:	b9 08 00 00 00       	mov    ecx,0x8
c001d128:	c0 e8 03             	shr    al,0x3
c001d12b:	83 e0 07             	and    eax,0x7
c001d12e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d132:	99                   	cdq    
c001d133:	f7 f9                	idiv   ecx
c001d135:	8b 04 d5 84 b8 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd477c]
c001d13c:	8b 14 d5 88 b8 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd4778]
c001d143:	83 c4 0c             	add    esp,0xc
c001d146:	c3                   	ret    

c001d147 <Vm::fpuSetReg(int, unsigned long long)>:
c001d147:	57                   	push   edi
c001d148:	56                   	push   esi
c001d149:	52                   	push   edx
c001d14a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d14e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001d152:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001d157:	76 10                	jbe    c001d169 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001d159:	83 ec 0c             	sub    esp,0xc
c001d15c:	68 45 8a 02 c0       	push   0xc0028a45
c001d161:	e8 89 b8 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c001d166:	83 c4 10             	add    esp,0x10
c001d169:	a0 81 b8 02 c0       	mov    al,ds:0xc002b881
c001d16e:	b9 08 00 00 00       	mov    ecx,0x8
c001d173:	c0 e8 03             	shr    al,0x3
c001d176:	83 e0 07             	and    eax,0x7
c001d179:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d17d:	99                   	cdq    
c001d17e:	f7 f9                	idiv   ecx
c001d180:	89 34 d5 84 b8 02 c0 	mov    DWORD PTR [edx*8-0x3ffd477c],esi
c001d187:	89 3c d5 88 b8 02 c0 	mov    DWORD PTR [edx*8-0x3ffd4778],edi
c001d18e:	58                   	pop    eax
c001d18f:	5e                   	pop    esi
c001d190:	5f                   	pop    edi
c001d191:	c3                   	ret    

c001d192 <Vm::fpuPush(unsigned long long)>:
c001d192:	a0 81 b8 02 c0       	mov    al,ds:0xc002b881
c001d197:	c0 e8 03             	shr    al,0x3
c001d19a:	83 e0 07             	and    eax,0x7
c001d19d:	83 c0 07             	add    eax,0x7
c001d1a0:	88 c2                	mov    dl,al
c001d1a2:	83 e0 07             	and    eax,0x7
c001d1a5:	83 e2 07             	and    edx,0x7
c001d1a8:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001d1af:	8a 15 81 b8 02 c0    	mov    dl,BYTE PTR ds:0xc002b881
c001d1b5:	83 e2 c7             	and    edx,0xffffffc7
c001d1b8:	09 ca                	or     edx,ecx
c001d1ba:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d1be:	88 15 81 b8 02 c0    	mov    BYTE PTR ds:0xc002b881,dl
c001d1c4:	89 0c c5 88 b8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd4778],ecx
c001d1cb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d1cf:	89 14 c5 84 b8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd477c],edx
c001d1d6:	a1 c4 b8 02 c0       	mov    eax,ds:0xc002b8c4
c001d1db:	83 f8 08             	cmp    eax,0x8
c001d1de:	75 08                	jne    c001d1e8 <Vm::fpuPush(unsigned long long)+0x56>
c001d1e0:	80 0d 80 b8 02 c0 40 	or     BYTE PTR ds:0xc002b880,0x40
c001d1e7:	c3                   	ret    
c001d1e8:	40                   	inc    eax
c001d1e9:	a3 c4 b8 02 c0       	mov    ds:0xc002b8c4,eax
c001d1ee:	c3                   	ret    

c001d1ef <Vm::fpuPop()>:
c001d1ef:	8a 0d 81 b8 02 c0    	mov    cl,BYTE PTR ds:0xc002b881
c001d1f5:	53                   	push   ebx
c001d1f6:	c0 e9 03             	shr    cl,0x3
c001d1f9:	8a 1d 81 b8 02 c0    	mov    bl,BYTE PTR ds:0xc002b881
c001d1ff:	83 e1 07             	and    ecx,0x7
c001d202:	83 e3 c7             	and    ebx,0xffffffc7
c001d205:	8b 04 cd 84 b8 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd477c]
c001d20c:	8b 14 cd 88 b8 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd4778]
c001d213:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001d21a:	83 e1 38             	and    ecx,0x38
c001d21d:	09 d9                	or     ecx,ebx
c001d21f:	88 0d 81 b8 02 c0    	mov    BYTE PTR ds:0xc002b881,cl
c001d225:	8b 0d c4 b8 02 c0    	mov    ecx,DWORD PTR ds:0xc002b8c4
c001d22b:	85 c9                	test   ecx,ecx
c001d22d:	74 09                	je     c001d238 <Vm::fpuPop()+0x49>
c001d22f:	49                   	dec    ecx
c001d230:	89 0d c4 b8 02 c0    	mov    DWORD PTR ds:0xc002b8c4,ecx
c001d236:	eb 07                	jmp    c001d23f <Vm::fpuPop()+0x50>
c001d238:	80 0d 80 b8 02 c0 40 	or     BYTE PTR ds:0xc002b880,0x40
c001d23f:	5b                   	pop    ebx
c001d240:	c3                   	ret    

c001d241 <Vm::x87Handler(regs*)>:
c001d241:	55                   	push   ebp
c001d242:	57                   	push   edi
c001d243:	56                   	push   esi
c001d244:	53                   	push   ebx
c001d245:	83 ec 1c             	sub    esp,0x1c
c001d248:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d24c:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001d251:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001d254:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001d25c:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001d260:	50                   	push   eax
c001d261:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001d265:	50                   	push   eax
c001d266:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d26a:	50                   	push   eax
c001d26b:	53                   	push   ebx
c001d26c:	e8 83 b5 ff ff       	call   c00187f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001d271:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001d274:	83 c4 10             	add    esp,0x10
c001d277:	89 c6                	mov    esi,eax
c001d279:	80 fa d9             	cmp    dl,0xd9
c001d27c:	0f 85 52 01 00 00    	jne    c001d3d4 <Vm::x87Handler(regs*)+0x193>
c001d282:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d286:	8d 50 20             	lea    edx,[eax+0x20]
c001d289:	80 fa 0e             	cmp    dl,0xe
c001d28c:	0f 87 86 00 00 00    	ja     c001d318 <Vm::x87Handler(regs*)+0xd7>
c001d292:	0f b6 d2             	movzx  edx,dl
c001d295:	ff 24 95 58 8a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd75a8]
c001d29c:	e8 e7 fc ff ff       	call   c001cf88 <Vm::fpuGet0()>
c001d2a1:	eb 05                	jmp    c001d2a8 <Vm::x87Handler(regs*)+0x67>
c001d2a3:	e8 e5 fc ff ff       	call   c001cf8d <Vm::fpuGet1()>
c001d2a8:	57                   	push   edi
c001d2a9:	57                   	push   edi
c001d2aa:	52                   	push   edx
c001d2ab:	50                   	push   eax
c001d2ac:	e8 e1 fe ff ff       	call   c001d192 <Vm::fpuPush(unsigned long long)>
c001d2b1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d2b5:	83 c4 10             	add    esp,0x10
c001d2b8:	b0 01                	mov    al,0x1
c001d2ba:	e9 e3 09 00 00       	jmp    c001dca2 <Vm::x87Handler(regs*)+0xa61>
c001d2bf:	83 ec 0c             	sub    esp,0xc
c001d2c2:	6a 00                	push   0x0
c001d2c4:	e8 3b fe ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d2c9:	59                   	pop    ecx
c001d2ca:	5e                   	pop    esi
c001d2cb:	52                   	push   edx
c001d2cc:	50                   	push   eax
c001d2cd:	e8 c2 fd ff ff       	call   c001d094 <Vm::fpuChs(unsigned long long)>
c001d2d2:	eb 13                	jmp    c001d2e7 <Vm::x87Handler(regs*)+0xa6>
c001d2d4:	83 ec 0c             	sub    esp,0xc
c001d2d7:	6a 00                	push   0x0
c001d2d9:	e8 26 fe ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d2de:	5f                   	pop    edi
c001d2df:	5d                   	pop    ebp
c001d2e0:	52                   	push   edx
c001d2e1:	50                   	push   eax
c001d2e2:	e8 a4 fd ff ff       	call   c001d08b <Vm::fpuAbs(unsigned long long)>
c001d2e7:	83 c4 0c             	add    esp,0xc
c001d2ea:	52                   	push   edx
c001d2eb:	50                   	push   eax
c001d2ec:	6a 00                	push   0x0
c001d2ee:	e8 54 fe ff ff       	call   c001d147 <Vm::fpuSetReg(int, unsigned long long)>
c001d2f3:	eb bc                	jmp    c001d2b1 <Vm::x87Handler(regs*)+0x70>
c001d2f5:	e8 d3 fc ff ff       	call   c001cfcd <Vm::fpuGetLog210()>
c001d2fa:	eb ac                	jmp    c001d2a8 <Vm::x87Handler(regs*)+0x67>
c001d2fc:	e8 9c fc ff ff       	call   c001cf9d <Vm::fpuGetLog2E()>
c001d301:	eb a5                	jmp    c001d2a8 <Vm::x87Handler(regs*)+0x67>
c001d303:	e8 8d fc ff ff       	call   c001cf95 <Vm::fpuGetPi()>
c001d308:	eb 9e                	jmp    c001d2a8 <Vm::x87Handler(regs*)+0x67>
c001d30a:	e8 d6 fc ff ff       	call   c001cfe5 <Vm::fpuGetLog102()>
c001d30f:	eb 97                	jmp    c001d2a8 <Vm::x87Handler(regs*)+0x67>
c001d311:	e8 9f fc ff ff       	call   c001cfb5 <Vm::fpuGetLogE2()>
c001d316:	eb 90                	jmp    c001d2a8 <Vm::x87Handler(regs*)+0x67>
c001d318:	8d 50 40             	lea    edx,[eax+0x40]
c001d31b:	80 fa 07             	cmp    dl,0x7
c001d31e:	77 15                	ja     c001d335 <Vm::x87Handler(regs*)+0xf4>
c001d320:	83 ec 0c             	sub    esp,0xc
c001d323:	2d c0 00 00 00       	sub    eax,0xc0
c001d328:	50                   	push   eax
c001d329:	e8 d6 fd ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d32e:	59                   	pop    ecx
c001d32f:	5e                   	pop    esi
c001d330:	e9 75 ff ff ff       	jmp    c001d2aa <Vm::x87Handler(regs*)+0x69>
c001d335:	8d 50 38             	lea    edx,[eax+0x38]
c001d338:	80 fa 07             	cmp    dl,0x7
c001d33b:	77 3c                	ja     c001d379 <Vm::x87Handler(regs*)+0x138>
c001d33d:	83 ec 0c             	sub    esp,0xc
c001d340:	2d c8 00 00 00       	sub    eax,0xc8
c001d345:	50                   	push   eax
c001d346:	e8 b9 fd ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d34b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d352:	89 c6                	mov    esi,eax
c001d354:	89 d7                	mov    edi,edx
c001d356:	e8 a9 fd ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d35b:	83 c4 0c             	add    esp,0xc
c001d35e:	52                   	push   edx
c001d35f:	50                   	push   eax
c001d360:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d364:	2d c8 00 00 00       	sub    eax,0xc8
c001d369:	50                   	push   eax
c001d36a:	e8 d8 fd ff ff       	call   c001d147 <Vm::fpuSetReg(int, unsigned long long)>
c001d36f:	83 c4 0c             	add    esp,0xc
c001d372:	57                   	push   edi
c001d373:	56                   	push   esi
c001d374:	e9 73 ff ff ff       	jmp    c001d2ec <Vm::x87Handler(regs*)+0xab>
c001d379:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d37d:	84 d2                	test   dl,dl
c001d37f:	75 0f                	jne    c001d390 <Vm::x87Handler(regs*)+0x14f>
c001d381:	83 ec 0c             	sub    esp,0xc
c001d384:	ff 36                	push   DWORD PTR [esi]
c001d386:	e8 c8 fa ff ff       	call   c001ce53 <Vm::fpu32ToInternal(unsigned int)>
c001d38b:	e9 bf 00 00 00       	jmp    c001d44f <Vm::x87Handler(regs*)+0x20e>
c001d390:	80 fa 03             	cmp    dl,0x3
c001d393:	75 13                	jne    c001d3a8 <Vm::x87Handler(regs*)+0x167>
c001d395:	e8 55 fe ff ff       	call   c001d1ef <Vm::fpuPop()>
c001d39a:	55                   	push   ebp
c001d39b:	55                   	push   ebp
c001d39c:	52                   	push   edx
c001d39d:	50                   	push   eax
c001d39e:	e8 4c fa ff ff       	call   c001cdef <Vm::fpuInternalTo32(unsigned long long)>
c001d3a3:	e9 88 00 00 00       	jmp    c001d430 <Vm::x87Handler(regs*)+0x1ef>
c001d3a8:	80 fa 05             	cmp    dl,0x5
c001d3ab:	75 0e                	jne    c001d3bb <Vm::x87Handler(regs*)+0x17a>
c001d3ad:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d3b0:	66 a3 82 b8 02 c0    	mov    ds:0xc002b882,ax
c001d3b6:	e9 df 00 00 00       	jmp    c001d49a <Vm::x87Handler(regs*)+0x259>
c001d3bb:	31 c0                	xor    eax,eax
c001d3bd:	80 fa 07             	cmp    dl,0x7
c001d3c0:	0f 85 dc 08 00 00    	jne    c001dca2 <Vm::x87Handler(regs*)+0xa61>
c001d3c6:	66 a1 82 b8 02 c0    	mov    ax,ds:0xc002b882
c001d3cc:	66 89 06             	mov    WORD PTR [esi],ax
c001d3cf:	e9 c6 00 00 00       	jmp    c001d49a <Vm::x87Handler(regs*)+0x259>
c001d3d4:	80 fa d8             	cmp    dl,0xd8
c001d3d7:	0f 84 c9 00 00 00    	je     c001d4a6 <Vm::x87Handler(regs*)+0x265>
c001d3dd:	80 fa dc             	cmp    dl,0xdc
c001d3e0:	0f 84 0d 02 00 00    	je     c001d5f3 <Vm::x87Handler(regs*)+0x3b2>
c001d3e6:	80 fa de             	cmp    dl,0xde
c001d3e9:	0f 84 cd 02 00 00    	je     c001d6bc <Vm::x87Handler(regs*)+0x47b>
c001d3ef:	80 fa dd             	cmp    dl,0xdd
c001d3f2:	0f 84 5f 04 00 00    	je     c001d857 <Vm::x87Handler(regs*)+0x616>
c001d3f8:	80 fa da             	cmp    dl,0xda
c001d3fb:	0f 84 24 05 00 00    	je     c001d925 <Vm::x87Handler(regs*)+0x6e4>
c001d401:	80 fa df             	cmp    dl,0xdf
c001d404:	0f 84 68 05 00 00    	je     c001d972 <Vm::x87Handler(regs*)+0x731>
c001d40a:	31 c0                	xor    eax,eax
c001d40c:	80 fa db             	cmp    dl,0xdb
c001d40f:	0f 85 8d 08 00 00    	jne    c001dca2 <Vm::x87Handler(regs*)+0xa61>
c001d415:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d419:	80 fa 03             	cmp    dl,0x3
c001d41c:	0f 85 70 06 00 00    	jne    c001da92 <Vm::x87Handler(regs*)+0x851>
c001d422:	e8 c8 fd ff ff       	call   c001d1ef <Vm::fpuPop()>
c001d427:	55                   	push   ebp
c001d428:	55                   	push   ebp
c001d429:	52                   	push   edx
c001d42a:	50                   	push   eax
c001d42b:	e8 71 fa ff ff       	call   c001cea1 <Vm::fpuFloatToLong(unsigned long long)>
c001d430:	83 c4 10             	add    esp,0x10
c001d433:	89 06                	mov    DWORD PTR [esi],eax
c001d435:	eb 63                	jmp    c001d49a <Vm::x87Handler(regs*)+0x259>
c001d437:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d43b:	84 d2                	test   dl,dl
c001d43d:	0f 85 e6 05 00 00    	jne    c001da29 <Vm::x87Handler(regs*)+0x7e8>
c001d443:	57                   	push   edi
c001d444:	57                   	push   edi
c001d445:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001d448:	ff 36                	push   DWORD PTR [esi]
c001d44a:	e8 49 fa ff ff       	call   c001ce98 <Vm::fpu64ToInternal(unsigned long long)>
c001d44f:	5e                   	pop    esi
c001d450:	5f                   	pop    edi
c001d451:	52                   	push   edx
c001d452:	50                   	push   eax
c001d453:	e8 3a fd ff ff       	call   c001d192 <Vm::fpuPush(unsigned long long)>
c001d458:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d45c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001d45f:	e9 51 fe ff ff       	jmp    c001d2b5 <Vm::x87Handler(regs*)+0x74>
c001d464:	80 fa 03             	cmp    dl,0x3
c001d467:	0f 85 d7 06 00 00    	jne    c001db44 <Vm::x87Handler(regs*)+0x903>
c001d46d:	57                   	push   edi
c001d46e:	57                   	push   edi
c001d46f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001d472:	ff 36                	push   DWORD PTR [esi]
c001d474:	e8 1f fa ff ff       	call   c001ce98 <Vm::fpu64ToInternal(unsigned long long)>
c001d479:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d480:	89 c6                	mov    esi,eax
c001d482:	89 d7                	mov    edi,edx
c001d484:	e8 7b fc ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d489:	57                   	push   edi
c001d48a:	56                   	push   esi
c001d48b:	52                   	push   edx
c001d48c:	50                   	push   eax
c001d48d:	e8 95 fb ff ff       	call   c001d027 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001d492:	83 c4 20             	add    esp,0x20
c001d495:	e8 55 fd ff ff       	call   c001d1ef <Vm::fpuPop()>
c001d49a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d49e:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001d4a1:	e9 12 fe ff ff       	jmp    c001d2b8 <Vm::x87Handler(regs*)+0x77>
c001d4a6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d4aa:	8d 50 40             	lea    edx,[eax+0x40]
c001d4ad:	80 fa 07             	cmp    dl,0x7
c001d4b0:	77 29                	ja     c001d4db <Vm::x87Handler(regs*)+0x29a>
c001d4b2:	83 ec 0c             	sub    esp,0xc
c001d4b5:	2d c0 00 00 00       	sub    eax,0xc0
c001d4ba:	50                   	push   eax
c001d4bb:	e8 44 fc ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d4c0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d4c7:	89 c6                	mov    esi,eax
c001d4c9:	89 d7                	mov    edi,edx
c001d4cb:	e8 34 fc ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d4d0:	57                   	push   edi
c001d4d1:	56                   	push   esi
c001d4d2:	52                   	push   edx
c001d4d3:	50                   	push   eax
c001d4d4:	e8 a1 fb ff ff       	call   c001d07a <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001d4d9:	eb 2f                	jmp    c001d50a <Vm::x87Handler(regs*)+0x2c9>
c001d4db:	8d 50 38             	lea    edx,[eax+0x38]
c001d4de:	80 fa 07             	cmp    dl,0x7
c001d4e1:	77 2f                	ja     c001d512 <Vm::x87Handler(regs*)+0x2d1>
c001d4e3:	83 ec 0c             	sub    esp,0xc
c001d4e6:	2d c8 00 00 00       	sub    eax,0xc8
c001d4eb:	50                   	push   eax
c001d4ec:	e8 13 fc ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d4f1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d4f8:	89 c6                	mov    esi,eax
c001d4fa:	89 d7                	mov    edi,edx
c001d4fc:	e8 03 fc ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d501:	57                   	push   edi
c001d502:	56                   	push   esi
c001d503:	52                   	push   edx
c001d504:	50                   	push   eax
c001d505:	e8 a9 fb ff ff       	call   c001d0b3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d50a:	83 c4 1c             	add    esp,0x1c
c001d50d:	e9 d8 fd ff ff       	jmp    c001d2ea <Vm::x87Handler(regs*)+0xa9>
c001d512:	8d 50 30             	lea    edx,[eax+0x30]
c001d515:	80 fa 07             	cmp    dl,0x7
c001d518:	77 0d                	ja     c001d527 <Vm::x87Handler(regs*)+0x2e6>
c001d51a:	83 ec 0c             	sub    esp,0xc
c001d51d:	2d d0 00 00 00       	sub    eax,0xd0
c001d522:	e9 99 03 00 00       	jmp    c001d8c0 <Vm::x87Handler(regs*)+0x67f>
c001d527:	8d 50 28             	lea    edx,[eax+0x28]
c001d52a:	80 fa 07             	cmp    dl,0x7
c001d52d:	77 0d                	ja     c001d53c <Vm::x87Handler(regs*)+0x2fb>
c001d52f:	83 ec 0c             	sub    esp,0xc
c001d532:	2d d8 00 00 00       	sub    eax,0xd8
c001d537:	e9 c0 03 00 00       	jmp    c001d8fc <Vm::x87Handler(regs*)+0x6bb>
c001d53c:	8d 50 20             	lea    edx,[eax+0x20]
c001d53f:	80 fa 07             	cmp    dl,0x7
c001d542:	77 1b                	ja     c001d55f <Vm::x87Handler(regs*)+0x31e>
c001d544:	83 ec 0c             	sub    esp,0xc
c001d547:	2d e0 00 00 00       	sub    eax,0xe0
c001d54c:	50                   	push   eax
c001d54d:	e8 b2 fb ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d552:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d559:	89 c6                	mov    esi,eax
c001d55b:	89 d7                	mov    edi,edx
c001d55d:	eb 22                	jmp    c001d581 <Vm::x87Handler(regs*)+0x340>
c001d55f:	8d 50 18             	lea    edx,[eax+0x18]
c001d562:	80 fa 07             	cmp    dl,0x7
c001d565:	77 2d                	ja     c001d594 <Vm::x87Handler(regs*)+0x353>
c001d567:	83 ec 0c             	sub    esp,0xc
c001d56a:	6a 00                	push   0x0
c001d56c:	e8 93 fb ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d571:	89 c6                	mov    esi,eax
c001d573:	89 d7                	mov    edi,edx
c001d575:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d579:	2d e8 00 00 00       	sub    eax,0xe8
c001d57e:	89 04 24             	mov    DWORD PTR [esp],eax
c001d581:	e8 7e fb ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d586:	57                   	push   edi
c001d587:	56                   	push   esi
c001d588:	52                   	push   edx
c001d589:	50                   	push   eax
c001d58a:	e8 15 fb ff ff       	call   c001d0a4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d58f:	e9 76 ff ff ff       	jmp    c001d50a <Vm::x87Handler(regs*)+0x2c9>
c001d594:	8d 50 10             	lea    edx,[eax+0x10]
c001d597:	80 fa 07             	cmp    dl,0x7
c001d59a:	77 1b                	ja     c001d5b7 <Vm::x87Handler(regs*)+0x376>
c001d59c:	83 ec 0c             	sub    esp,0xc
c001d59f:	2d f0 00 00 00       	sub    eax,0xf0
c001d5a4:	50                   	push   eax
c001d5a5:	e8 5a fb ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d5aa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d5b1:	89 c6                	mov    esi,eax
c001d5b3:	89 d7                	mov    edi,edx
c001d5b5:	eb 22                	jmp    c001d5d9 <Vm::x87Handler(regs*)+0x398>
c001d5b7:	3c f7                	cmp    al,0xf7
c001d5b9:	0f 86 d1 03 00 00    	jbe    c001d990 <Vm::x87Handler(regs*)+0x74f>
c001d5bf:	83 ec 0c             	sub    esp,0xc
c001d5c2:	6a 00                	push   0x0
c001d5c4:	e8 3b fb ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d5c9:	89 c6                	mov    esi,eax
c001d5cb:	89 d7                	mov    edi,edx
c001d5cd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d5d1:	2d f8 00 00 00       	sub    eax,0xf8
c001d5d6:	89 04 24             	mov    DWORD PTR [esp],eax
c001d5d9:	e8 26 fb ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d5de:	57                   	push   edi
c001d5df:	56                   	push   esi
c001d5e0:	52                   	push   edx
c001d5e1:	50                   	push   eax
c001d5e2:	e8 eb fa ff ff       	call   c001d0d2 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001d5e7:	83 c4 1c             	add    esp,0x1c
c001d5ea:	52                   	push   edx
c001d5eb:	50                   	push   eax
c001d5ec:	6a 00                	push   0x0
c001d5ee:	e9 51 02 00 00       	jmp    c001d844 <Vm::x87Handler(regs*)+0x603>
c001d5f3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d5f7:	8d 50 40             	lea    edx,[eax+0x40]
c001d5fa:	80 fa 07             	cmp    dl,0x7
c001d5fd:	77 37                	ja     c001d636 <Vm::x87Handler(regs*)+0x3f5>
c001d5ff:	83 ec 0c             	sub    esp,0xc
c001d602:	2d c0 00 00 00       	sub    eax,0xc0
c001d607:	50                   	push   eax
c001d608:	e8 f7 fa ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d60d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d614:	89 c6                	mov    esi,eax
c001d616:	89 d7                	mov    edi,edx
c001d618:	e8 e7 fa ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d61d:	57                   	push   edi
c001d61e:	56                   	push   esi
c001d61f:	52                   	push   edx
c001d620:	50                   	push   eax
c001d621:	e8 54 fa ff ff       	call   c001d07a <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001d626:	83 c4 1c             	add    esp,0x1c
c001d629:	52                   	push   edx
c001d62a:	50                   	push   eax
c001d62b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d62f:	2d c0 00 00 00       	sub    eax,0xc0
c001d634:	eb 3d                	jmp    c001d673 <Vm::x87Handler(regs*)+0x432>
c001d636:	8d 50 38             	lea    edx,[eax+0x38]
c001d639:	80 fa 07             	cmp    dl,0x7
c001d63c:	77 3b                	ja     c001d679 <Vm::x87Handler(regs*)+0x438>
c001d63e:	83 ec 0c             	sub    esp,0xc
c001d641:	2d c8 00 00 00       	sub    eax,0xc8
c001d646:	50                   	push   eax
c001d647:	e8 b8 fa ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d64c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d653:	89 c6                	mov    esi,eax
c001d655:	89 d7                	mov    edi,edx
c001d657:	e8 a8 fa ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d65c:	57                   	push   edi
c001d65d:	56                   	push   esi
c001d65e:	52                   	push   edx
c001d65f:	50                   	push   eax
c001d660:	e8 4e fa ff ff       	call   c001d0b3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d665:	83 c4 1c             	add    esp,0x1c
c001d668:	52                   	push   edx
c001d669:	50                   	push   eax
c001d66a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d66e:	2d c8 00 00 00       	sub    eax,0xc8
c001d673:	50                   	push   eax
c001d674:	e9 75 fc ff ff       	jmp    c001d2ee <Vm::x87Handler(regs*)+0xad>
c001d679:	83 c0 18             	add    eax,0x18
c001d67c:	3c 07                	cmp    al,0x7
c001d67e:	0f 87 3b 04 00 00    	ja     c001dabf <Vm::x87Handler(regs*)+0x87e>
c001d684:	83 ec 0c             	sub    esp,0xc
c001d687:	6a 00                	push   0x0
c001d689:	e8 76 fa ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d68e:	89 c6                	mov    esi,eax
c001d690:	89 d7                	mov    edi,edx
c001d692:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d696:	2d e8 00 00 00       	sub    eax,0xe8
c001d69b:	89 04 24             	mov    DWORD PTR [esp],eax
c001d69e:	e8 61 fa ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d6a3:	57                   	push   edi
c001d6a4:	56                   	push   esi
c001d6a5:	52                   	push   edx
c001d6a6:	50                   	push   eax
c001d6a7:	e8 f8 f9 ff ff       	call   c001d0a4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d6ac:	83 c4 1c             	add    esp,0x1c
c001d6af:	52                   	push   edx
c001d6b0:	50                   	push   eax
c001d6b1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d6b5:	2d e8 00 00 00       	sub    eax,0xe8
c001d6ba:	eb b7                	jmp    c001d673 <Vm::x87Handler(regs*)+0x432>
c001d6bc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d6c0:	8d 50 40             	lea    edx,[eax+0x40]
c001d6c3:	80 fa 07             	cmp    dl,0x7
c001d6c6:	77 3a                	ja     c001d702 <Vm::x87Handler(regs*)+0x4c1>
c001d6c8:	83 ec 0c             	sub    esp,0xc
c001d6cb:	2d c0 00 00 00       	sub    eax,0xc0
c001d6d0:	50                   	push   eax
c001d6d1:	e8 2e fa ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d6d6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d6dd:	89 c6                	mov    esi,eax
c001d6df:	89 d7                	mov    edi,edx
c001d6e1:	e8 1e fa ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d6e6:	57                   	push   edi
c001d6e7:	56                   	push   esi
c001d6e8:	52                   	push   edx
c001d6e9:	50                   	push   eax
c001d6ea:	e8 8b f9 ff ff       	call   c001d07a <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001d6ef:	83 c4 1c             	add    esp,0x1c
c001d6f2:	52                   	push   edx
c001d6f3:	50                   	push   eax
c001d6f4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d6f8:	2d c0 00 00 00       	sub    eax,0xc0
c001d6fd:	e9 9e 01 00 00       	jmp    c001d8a0 <Vm::x87Handler(regs*)+0x65f>
c001d702:	8d 50 20             	lea    edx,[eax+0x20]
c001d705:	80 fa 07             	cmp    dl,0x7
c001d708:	77 3a                	ja     c001d744 <Vm::x87Handler(regs*)+0x503>
c001d70a:	83 ec 0c             	sub    esp,0xc
c001d70d:	2d e0 00 00 00       	sub    eax,0xe0
c001d712:	50                   	push   eax
c001d713:	e8 ec f9 ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d718:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d71f:	89 c6                	mov    esi,eax
c001d721:	89 d7                	mov    edi,edx
c001d723:	e8 dc f9 ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d728:	57                   	push   edi
c001d729:	56                   	push   esi
c001d72a:	52                   	push   edx
c001d72b:	50                   	push   eax
c001d72c:	e8 73 f9 ff ff       	call   c001d0a4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d731:	83 c4 1c             	add    esp,0x1c
c001d734:	52                   	push   edx
c001d735:	50                   	push   eax
c001d736:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d73a:	2d e0 00 00 00       	sub    eax,0xe0
c001d73f:	e9 5c 01 00 00       	jmp    c001d8a0 <Vm::x87Handler(regs*)+0x65f>
c001d744:	8d 50 18             	lea    edx,[eax+0x18]
c001d747:	80 fa 07             	cmp    dl,0x7
c001d74a:	77 3b                	ja     c001d787 <Vm::x87Handler(regs*)+0x546>
c001d74c:	83 ec 0c             	sub    esp,0xc
c001d74f:	6a 00                	push   0x0
c001d751:	e8 ae f9 ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d756:	89 c6                	mov    esi,eax
c001d758:	89 d7                	mov    edi,edx
c001d75a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d75e:	2d e8 00 00 00       	sub    eax,0xe8
c001d763:	89 04 24             	mov    DWORD PTR [esp],eax
c001d766:	e8 99 f9 ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d76b:	57                   	push   edi
c001d76c:	56                   	push   esi
c001d76d:	52                   	push   edx
c001d76e:	50                   	push   eax
c001d76f:	e8 30 f9 ff ff       	call   c001d0a4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d774:	83 c4 1c             	add    esp,0x1c
c001d777:	52                   	push   edx
c001d778:	50                   	push   eax
c001d779:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d77d:	2d e8 00 00 00       	sub    eax,0xe8
c001d782:	e9 19 01 00 00       	jmp    c001d8a0 <Vm::x87Handler(regs*)+0x65f>
c001d787:	8d 50 38             	lea    edx,[eax+0x38]
c001d78a:	80 fa 07             	cmp    dl,0x7
c001d78d:	77 37                	ja     c001d7c6 <Vm::x87Handler(regs*)+0x585>
c001d78f:	83 ec 0c             	sub    esp,0xc
c001d792:	2d c8 00 00 00       	sub    eax,0xc8
c001d797:	50                   	push   eax
c001d798:	e8 67 f9 ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d79d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d7a4:	89 c6                	mov    esi,eax
c001d7a6:	89 d7                	mov    edi,edx
c001d7a8:	e8 57 f9 ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d7ad:	57                   	push   edi
c001d7ae:	56                   	push   esi
c001d7af:	52                   	push   edx
c001d7b0:	50                   	push   eax
c001d7b1:	e8 fd f8 ff ff       	call   c001d0b3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d7b6:	83 c4 1c             	add    esp,0x1c
c001d7b9:	52                   	push   edx
c001d7ba:	50                   	push   eax
c001d7bb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d7bf:	2d c8 00 00 00       	sub    eax,0xc8
c001d7c4:	eb 7d                	jmp    c001d843 <Vm::x87Handler(regs*)+0x602>
c001d7c6:	3c f7                	cmp    al,0xf7
c001d7c8:	76 38                	jbe    c001d802 <Vm::x87Handler(regs*)+0x5c1>
c001d7ca:	83 ec 0c             	sub    esp,0xc
c001d7cd:	6a 00                	push   0x0
c001d7cf:	e8 30 f9 ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d7d4:	89 c6                	mov    esi,eax
c001d7d6:	89 d7                	mov    edi,edx
c001d7d8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d7dc:	2d f8 00 00 00       	sub    eax,0xf8
c001d7e1:	89 04 24             	mov    DWORD PTR [esp],eax
c001d7e4:	e8 1b f9 ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d7e9:	57                   	push   edi
c001d7ea:	56                   	push   esi
c001d7eb:	52                   	push   edx
c001d7ec:	50                   	push   eax
c001d7ed:	e8 e0 f8 ff ff       	call   c001d0d2 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001d7f2:	83 c4 1c             	add    esp,0x1c
c001d7f5:	52                   	push   edx
c001d7f6:	50                   	push   eax
c001d7f7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d7fb:	2d f8 00 00 00       	sub    eax,0xf8
c001d800:	eb 41                	jmp    c001d843 <Vm::x87Handler(regs*)+0x602>
c001d802:	8d 50 10             	lea    edx,[eax+0x10]
c001d805:	80 fa 07             	cmp    dl,0x7
c001d808:	0f 87 5a 01 00 00    	ja     c001d968 <Vm::x87Handler(regs*)+0x727>
c001d80e:	83 ec 0c             	sub    esp,0xc
c001d811:	2d f0 00 00 00       	sub    eax,0xf0
c001d816:	50                   	push   eax
c001d817:	e8 e8 f8 ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d81c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d823:	89 c6                	mov    esi,eax
c001d825:	89 d7                	mov    edi,edx
c001d827:	e8 d8 f8 ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d82c:	57                   	push   edi
c001d82d:	56                   	push   esi
c001d82e:	52                   	push   edx
c001d82f:	50                   	push   eax
c001d830:	e8 9d f8 ff ff       	call   c001d0d2 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001d835:	83 c4 1c             	add    esp,0x1c
c001d838:	52                   	push   edx
c001d839:	50                   	push   eax
c001d83a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d83e:	2d f0 00 00 00       	sub    eax,0xf0
c001d843:	50                   	push   eax
c001d844:	e8 fe f8 ff ff       	call   c001d147 <Vm::fpuSetReg(int, unsigned long long)>
c001d849:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d84d:	e8 9d f9 ff ff       	call   c001d1ef <Vm::fpuPop()>
c001d852:	e9 5e fa ff ff       	jmp    c001d2b5 <Vm::x87Handler(regs*)+0x74>
c001d857:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d85b:	8d 50 30             	lea    edx,[eax+0x30]
c001d85e:	80 fa 07             	cmp    dl,0x7
c001d861:	77 1d                	ja     c001d880 <Vm::x87Handler(regs*)+0x63f>
c001d863:	83 ec 0c             	sub    esp,0xc
c001d866:	6a 00                	push   0x0
c001d868:	e8 97 f8 ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d86d:	83 c4 0c             	add    esp,0xc
c001d870:	52                   	push   edx
c001d871:	50                   	push   eax
c001d872:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d876:	2d d0 00 00 00       	sub    eax,0xd0
c001d87b:	e9 f3 fd ff ff       	jmp    c001d673 <Vm::x87Handler(regs*)+0x432>
c001d880:	8d 50 28             	lea    edx,[eax+0x28]
c001d883:	80 fa 07             	cmp    dl,0x7
c001d886:	77 28                	ja     c001d8b0 <Vm::x87Handler(regs*)+0x66f>
c001d888:	83 ec 0c             	sub    esp,0xc
c001d88b:	6a 00                	push   0x0
c001d88d:	e8 72 f8 ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d892:	83 c4 0c             	add    esp,0xc
c001d895:	52                   	push   edx
c001d896:	50                   	push   eax
c001d897:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d89b:	2d d8 00 00 00       	sub    eax,0xd8
c001d8a0:	50                   	push   eax
c001d8a1:	e8 a1 f8 ff ff       	call   c001d147 <Vm::fpuSetReg(int, unsigned long long)>
c001d8a6:	e8 44 f9 ff ff       	call   c001d1ef <Vm::fpuPop()>
c001d8ab:	e9 01 fa ff ff       	jmp    c001d2b1 <Vm::x87Handler(regs*)+0x70>
c001d8b0:	8d 50 20             	lea    edx,[eax+0x20]
c001d8b3:	80 fa 07             	cmp    dl,0x7
c001d8b6:	77 30                	ja     c001d8e8 <Vm::x87Handler(regs*)+0x6a7>
c001d8b8:	83 ec 0c             	sub    esp,0xc
c001d8bb:	2d e0 00 00 00       	sub    eax,0xe0
c001d8c0:	50                   	push   eax
c001d8c1:	e8 3e f8 ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d8c6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d8cd:	89 c6                	mov    esi,eax
c001d8cf:	89 d7                	mov    edi,edx
c001d8d1:	e8 2e f8 ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d8d6:	57                   	push   edi
c001d8d7:	56                   	push   esi
c001d8d8:	52                   	push   edx
c001d8d9:	50                   	push   eax
c001d8da:	e8 48 f7 ff ff       	call   c001d027 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001d8df:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d8e3:	e9 54 02 00 00       	jmp    c001db3c <Vm::x87Handler(regs*)+0x8fb>
c001d8e8:	8d 50 18             	lea    edx,[eax+0x18]
c001d8eb:	80 fa 07             	cmp    dl,0x7
c001d8ee:	0f 87 43 fb ff ff    	ja     c001d437 <Vm::x87Handler(regs*)+0x1f6>
c001d8f4:	83 ec 0c             	sub    esp,0xc
c001d8f7:	2d e8 00 00 00       	sub    eax,0xe8
c001d8fc:	50                   	push   eax
c001d8fd:	e8 02 f8 ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d902:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d909:	89 c6                	mov    esi,eax
c001d90b:	89 d7                	mov    edi,edx
c001d90d:	e8 f2 f7 ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d912:	57                   	push   edi
c001d913:	56                   	push   esi
c001d914:	52                   	push   edx
c001d915:	50                   	push   eax
c001d916:	e8 0c f7 ff ff       	call   c001d027 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001d91b:	83 c4 20             	add    esp,0x20
c001d91e:	e8 cc f8 ff ff       	call   c001d1ef <Vm::fpuPop()>
c001d923:	eb 62                	jmp    c001d987 <Vm::x87Handler(regs*)+0x746>
c001d925:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001d929:	0f 85 0f 01 00 00    	jne    c001da3e <Vm::x87Handler(regs*)+0x7fd>
c001d92f:	83 ec 0c             	sub    esp,0xc
c001d932:	6a 01                	push   0x1
c001d934:	e8 cb f7 ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d939:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d940:	89 c6                	mov    esi,eax
c001d942:	89 d7                	mov    edi,edx
c001d944:	e8 bb f7 ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d949:	57                   	push   edi
c001d94a:	56                   	push   esi
c001d94b:	52                   	push   edx
c001d94c:	50                   	push   eax
c001d94d:	e8 d5 f6 ff ff       	call   c001d027 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001d952:	83 c4 20             	add    esp,0x20
c001d955:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d959:	e8 91 f8 ff ff       	call   c001d1ef <Vm::fpuPop()>
c001d95e:	e8 8c f8 ff ff       	call   c001d1ef <Vm::fpuPop()>
c001d963:	e9 50 f9 ff ff       	jmp    c001d2b8 <Vm::x87Handler(regs*)+0x77>
c001d968:	3c d9                	cmp    al,0xd9
c001d96a:	0f 85 b5 02 00 00    	jne    c001dc25 <Vm::x87Handler(regs*)+0x9e4>
c001d970:	eb bd                	jmp    c001d92f <Vm::x87Handler(regs*)+0x6ee>
c001d972:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001d976:	0f 85 ea 02 00 00    	jne    c001dc66 <Vm::x87Handler(regs*)+0xa25>
c001d97c:	0f b7 05 80 b8 02 c0 	movzx  eax,WORD PTR ds:0xc002b880
c001d983:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001d987:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d98b:	e9 28 f9 ff ff       	jmp    c001d2b8 <Vm::x87Handler(regs*)+0x77>
c001d990:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d994:	84 d2                	test   dl,dl
c001d996:	75 0f                	jne    c001d9a7 <Vm::x87Handler(regs*)+0x766>
c001d998:	83 ec 0c             	sub    esp,0xc
c001d99b:	ff 36                	push   DWORD PTR [esi]
c001d99d:	e8 b1 f4 ff ff       	call   c001ce53 <Vm::fpu32ToInternal(unsigned int)>
c001d9a2:	e9 2c 01 00 00       	jmp    c001dad3 <Vm::x87Handler(regs*)+0x892>
c001d9a7:	80 fa 01             	cmp    dl,0x1
c001d9aa:	75 0f                	jne    c001d9bb <Vm::x87Handler(regs*)+0x77a>
c001d9ac:	83 ec 0c             	sub    esp,0xc
c001d9af:	ff 36                	push   DWORD PTR [esi]
c001d9b1:	e8 9d f4 ff ff       	call   c001ce53 <Vm::fpu32ToInternal(unsigned int)>
c001d9b6:	e9 81 02 00 00       	jmp    c001dc3c <Vm::x87Handler(regs*)+0x9fb>
c001d9bb:	80 fa 04             	cmp    dl,0x4
c001d9be:	75 0f                	jne    c001d9cf <Vm::x87Handler(regs*)+0x78e>
c001d9c0:	83 ec 0c             	sub    esp,0xc
c001d9c3:	ff 36                	push   DWORD PTR [esi]
c001d9c5:	e8 89 f4 ff ff       	call   c001ce53 <Vm::fpu32ToInternal(unsigned int)>
c001d9ca:	e9 86 01 00 00       	jmp    c001db55 <Vm::x87Handler(regs*)+0x914>
c001d9cf:	80 fa 05             	cmp    dl,0x5
c001d9d2:	75 1b                	jne    c001d9ef <Vm::x87Handler(regs*)+0x7ae>
c001d9d4:	83 ec 0c             	sub    esp,0xc
c001d9d7:	6a 00                	push   0x0
c001d9d9:	e8 26 f7 ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001d9de:	89 c7                	mov    edi,eax
c001d9e0:	89 d5                	mov    ebp,edx
c001d9e2:	58                   	pop    eax
c001d9e3:	ff 36                	push   DWORD PTR [esi]
c001d9e5:	e8 69 f4 ff ff       	call   c001ce53 <Vm::fpu32ToInternal(unsigned int)>
c001d9ea:	e9 a3 01 00 00       	jmp    c001db92 <Vm::x87Handler(regs*)+0x951>
c001d9ef:	80 fa 06             	cmp    dl,0x6
c001d9f2:	75 0f                	jne    c001da03 <Vm::x87Handler(regs*)+0x7c2>
c001d9f4:	83 ec 0c             	sub    esp,0xc
c001d9f7:	ff 36                	push   DWORD PTR [esi]
c001d9f9:	e8 55 f4 ff ff       	call   c001ce53 <Vm::fpu32ToInternal(unsigned int)>
c001d9fe:	e9 ae 01 00 00       	jmp    c001dbb1 <Vm::x87Handler(regs*)+0x970>
c001da03:	31 c0                	xor    eax,eax
c001da05:	80 fa 07             	cmp    dl,0x7
c001da08:	0f 85 94 02 00 00    	jne    c001dca2 <Vm::x87Handler(regs*)+0xa61>
c001da0e:	83 ec 0c             	sub    esp,0xc
c001da11:	6a 00                	push   0x0
c001da13:	e8 ec f6 ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001da18:	89 c7                	mov    edi,eax
c001da1a:	89 d5                	mov    ebp,edx
c001da1c:	58                   	pop    eax
c001da1d:	ff 36                	push   DWORD PTR [esi]
c001da1f:	e8 2f f4 ff ff       	call   c001ce53 <Vm::fpu32ToInternal(unsigned int)>
c001da24:	e9 cb 01 00 00       	jmp    c001dbf4 <Vm::x87Handler(regs*)+0x9b3>
c001da29:	80 fa 03             	cmp    dl,0x3
c001da2c:	0f 85 d3 01 00 00    	jne    c001dc05 <Vm::x87Handler(regs*)+0x9c4>
c001da32:	e8 b8 f7 ff ff       	call   c001d1ef <Vm::fpuPop()>
c001da37:	51                   	push   ecx
c001da38:	51                   	push   ecx
c001da39:	e9 de 01 00 00       	jmp    c001dc1c <Vm::x87Handler(regs*)+0x9db>
c001da3e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001da42:	80 fa 01             	cmp    dl,0x1
c001da45:	75 09                	jne    c001da50 <Vm::x87Handler(regs*)+0x80f>
c001da47:	57                   	push   edi
c001da48:	57                   	push   edi
c001da49:	8b 06                	mov    eax,DWORD PTR [esi]
c001da4b:	e9 e3 01 00 00       	jmp    c001dc33 <Vm::x87Handler(regs*)+0x9f2>
c001da50:	80 fa 04             	cmp    dl,0x4
c001da53:	75 12                	jne    c001da67 <Vm::x87Handler(regs*)+0x826>
c001da55:	31 d2                	xor    edx,edx
c001da57:	51                   	push   ecx
c001da58:	51                   	push   ecx
c001da59:	8b 06                	mov    eax,DWORD PTR [esi]
c001da5b:	52                   	push   edx
c001da5c:	50                   	push   eax
c001da5d:	e8 d0 f4 ff ff       	call   c001cf32 <Vm::fpuLongToFloat(long long)>
c001da62:	e9 ee 00 00 00       	jmp    c001db55 <Vm::x87Handler(regs*)+0x914>
c001da67:	31 c0                	xor    eax,eax
c001da69:	80 fa 07             	cmp    dl,0x7
c001da6c:	0f 85 30 02 00 00    	jne    c001dca2 <Vm::x87Handler(regs*)+0xa61>
c001da72:	83 ec 0c             	sub    esp,0xc
c001da75:	6a 00                	push   0x0
c001da77:	e8 88 f6 ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001da7c:	89 c7                	mov    edi,eax
c001da7e:	89 d5                	mov    ebp,edx
c001da80:	58                   	pop    eax
c001da81:	8b 06                	mov    eax,DWORD PTR [esi]
c001da83:	5a                   	pop    edx
c001da84:	31 d2                	xor    edx,edx
c001da86:	52                   	push   edx
c001da87:	50                   	push   eax
c001da88:	e8 a5 f4 ff ff       	call   c001cf32 <Vm::fpuLongToFloat(long long)>
c001da8d:	e9 62 01 00 00       	jmp    c001dbf4 <Vm::x87Handler(regs*)+0x9b3>
c001da92:	84 d2                	test   dl,dl
c001da94:	75 0d                	jne    c001daa3 <Vm::x87Handler(regs*)+0x862>
c001da96:	31 d2                	xor    edx,edx
c001da98:	55                   	push   ebp
c001da99:	55                   	push   ebp
c001da9a:	8b 06                	mov    eax,DWORD PTR [esi]
c001da9c:	52                   	push   edx
c001da9d:	50                   	push   eax
c001da9e:	e9 d3 01 00 00       	jmp    c001dc76 <Vm::x87Handler(regs*)+0xa35>
c001daa3:	31 c0                	xor    eax,eax
c001daa5:	80 fa 02             	cmp    dl,0x2
c001daa8:	0f 85 f4 01 00 00    	jne    c001dca2 <Vm::x87Handler(regs*)+0xa61>
c001daae:	83 ec 0c             	sub    esp,0xc
c001dab1:	6a 00                	push   0x0
c001dab3:	e8 4c f6 ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001dab8:	59                   	pop    ecx
c001dab9:	5f                   	pop    edi
c001daba:	e9 6a f9 ff ff       	jmp    c001d429 <Vm::x87Handler(regs*)+0x1e8>
c001dabf:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001dac3:	84 d2                	test   dl,dl
c001dac5:	75 2a                	jne    c001daf1 <Vm::x87Handler(regs*)+0x8b0>
c001dac7:	50                   	push   eax
c001dac8:	50                   	push   eax
c001dac9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dacc:	ff 36                	push   DWORD PTR [esi]
c001dace:	e8 c5 f3 ff ff       	call   c001ce98 <Vm::fpu64ToInternal(unsigned long long)>
c001dad3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dada:	89 c6                	mov    esi,eax
c001dadc:	89 d7                	mov    edi,edx
c001dade:	e8 21 f6 ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001dae3:	57                   	push   edi
c001dae4:	56                   	push   esi
c001dae5:	52                   	push   edx
c001dae6:	50                   	push   eax
c001dae7:	e8 8e f5 ff ff       	call   c001d07a <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001daec:	e9 64 01 00 00       	jmp    c001dc55 <Vm::x87Handler(regs*)+0xa14>
c001daf1:	80 fa 01             	cmp    dl,0x1
c001daf4:	75 11                	jne    c001db07 <Vm::x87Handler(regs*)+0x8c6>
c001daf6:	50                   	push   eax
c001daf7:	50                   	push   eax
c001daf8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dafb:	ff 36                	push   DWORD PTR [esi]
c001dafd:	e8 96 f3 ff ff       	call   c001ce98 <Vm::fpu64ToInternal(unsigned long long)>
c001db02:	e9 35 01 00 00       	jmp    c001dc3c <Vm::x87Handler(regs*)+0x9fb>
c001db07:	80 fa 02             	cmp    dl,0x2
c001db0a:	0f 85 54 f9 ff ff    	jne    c001d464 <Vm::x87Handler(regs*)+0x223>
c001db10:	55                   	push   ebp
c001db11:	55                   	push   ebp
c001db12:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001db15:	ff 36                	push   DWORD PTR [esi]
c001db17:	e8 7c f3 ff ff       	call   c001ce98 <Vm::fpu64ToInternal(unsigned long long)>
c001db1c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001db23:	89 c6                	mov    esi,eax
c001db25:	89 d7                	mov    edi,edx
c001db27:	e8 d8 f5 ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001db2c:	57                   	push   edi
c001db2d:	56                   	push   esi
c001db2e:	52                   	push   edx
c001db2f:	50                   	push   eax
c001db30:	e8 f2 f4 ff ff       	call   c001d027 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001db35:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001db39:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001db3c:	83 c4 20             	add    esp,0x20
c001db3f:	e9 74 f7 ff ff       	jmp    c001d2b8 <Vm::x87Handler(regs*)+0x77>
c001db44:	80 fa 04             	cmp    dl,0x4
c001db47:	75 2a                	jne    c001db73 <Vm::x87Handler(regs*)+0x932>
c001db49:	51                   	push   ecx
c001db4a:	51                   	push   ecx
c001db4b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001db4e:	ff 36                	push   DWORD PTR [esi]
c001db50:	e8 43 f3 ff ff       	call   c001ce98 <Vm::fpu64ToInternal(unsigned long long)>
c001db55:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001db5c:	89 c6                	mov    esi,eax
c001db5e:	89 d7                	mov    edi,edx
c001db60:	e8 9f f5 ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001db65:	57                   	push   edi
c001db66:	56                   	push   esi
c001db67:	52                   	push   edx
c001db68:	50                   	push   eax
c001db69:	e8 36 f5 ff ff       	call   c001d0a4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001db6e:	e9 e2 00 00 00       	jmp    c001dc55 <Vm::x87Handler(regs*)+0xa14>
c001db73:	80 fa 05             	cmp    dl,0x5
c001db76:	75 28                	jne    c001dba0 <Vm::x87Handler(regs*)+0x95f>
c001db78:	83 ec 0c             	sub    esp,0xc
c001db7b:	6a 00                	push   0x0
c001db7d:	e8 82 f5 ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001db82:	89 c7                	mov    edi,eax
c001db84:	89 d5                	mov    ebp,edx
c001db86:	58                   	pop    eax
c001db87:	5a                   	pop    edx
c001db88:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001db8b:	ff 36                	push   DWORD PTR [esi]
c001db8d:	e8 06 f3 ff ff       	call   c001ce98 <Vm::fpu64ToInternal(unsigned long long)>
c001db92:	83 c4 10             	add    esp,0x10
c001db95:	55                   	push   ebp
c001db96:	57                   	push   edi
c001db97:	52                   	push   edx
c001db98:	50                   	push   eax
c001db99:	e8 06 f5 ff ff       	call   c001d0a4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001db9e:	eb 60                	jmp    c001dc00 <Vm::x87Handler(regs*)+0x9bf>
c001dba0:	80 fa 06             	cmp    dl,0x6
c001dba3:	75 2a                	jne    c001dbcf <Vm::x87Handler(regs*)+0x98e>
c001dba5:	51                   	push   ecx
c001dba6:	51                   	push   ecx
c001dba7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dbaa:	ff 36                	push   DWORD PTR [esi]
c001dbac:	e8 e7 f2 ff ff       	call   c001ce98 <Vm::fpu64ToInternal(unsigned long long)>
c001dbb1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dbb8:	89 c6                	mov    esi,eax
c001dbba:	89 d7                	mov    edi,edx
c001dbbc:	e8 43 f5 ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001dbc1:	57                   	push   edi
c001dbc2:	56                   	push   esi
c001dbc3:	52                   	push   edx
c001dbc4:	50                   	push   eax
c001dbc5:	e8 08 f5 ff ff       	call   c001d0d2 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001dbca:	e9 86 00 00 00       	jmp    c001dc55 <Vm::x87Handler(regs*)+0xa14>
c001dbcf:	31 c0                	xor    eax,eax
c001dbd1:	80 fa 07             	cmp    dl,0x7
c001dbd4:	0f 85 c8 00 00 00    	jne    c001dca2 <Vm::x87Handler(regs*)+0xa61>
c001dbda:	83 ec 0c             	sub    esp,0xc
c001dbdd:	6a 00                	push   0x0
c001dbdf:	e8 20 f5 ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001dbe4:	89 c7                	mov    edi,eax
c001dbe6:	89 d5                	mov    ebp,edx
c001dbe8:	58                   	pop    eax
c001dbe9:	5a                   	pop    edx
c001dbea:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dbed:	ff 36                	push   DWORD PTR [esi]
c001dbef:	e8 a4 f2 ff ff       	call   c001ce98 <Vm::fpu64ToInternal(unsigned long long)>
c001dbf4:	83 c4 10             	add    esp,0x10
c001dbf7:	55                   	push   ebp
c001dbf8:	57                   	push   edi
c001dbf9:	52                   	push   edx
c001dbfa:	50                   	push   eax
c001dbfb:	e8 d2 f4 ff ff       	call   c001d0d2 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001dc00:	83 c4 0c             	add    esp,0xc
c001dc03:	eb 53                	jmp    c001dc58 <Vm::x87Handler(regs*)+0xa17>
c001dc05:	31 c0                	xor    eax,eax
c001dc07:	80 fa 02             	cmp    dl,0x2
c001dc0a:	0f 85 92 00 00 00    	jne    c001dca2 <Vm::x87Handler(regs*)+0xa61>
c001dc10:	83 ec 0c             	sub    esp,0xc
c001dc13:	6a 00                	push   0x0
c001dc15:	e8 ea f4 ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001dc1a:	59                   	pop    ecx
c001dc1b:	5f                   	pop    edi
c001dc1c:	52                   	push   edx
c001dc1d:	50                   	push   eax
c001dc1e:	e8 27 f2 ff ff       	call   c001ce4a <Vm::fpuInternalTo64(unsigned long long)>
c001dc23:	eb 70                	jmp    c001dc95 <Vm::x87Handler(regs*)+0xa54>
c001dc25:	31 c0                	xor    eax,eax
c001dc27:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001dc2c:	75 74                	jne    c001dca2 <Vm::x87Handler(regs*)+0xa61>
c001dc2e:	50                   	push   eax
c001dc2f:	50                   	push   eax
c001dc30:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001dc33:	31 d2                	xor    edx,edx
c001dc35:	52                   	push   edx
c001dc36:	50                   	push   eax
c001dc37:	e8 f6 f2 ff ff       	call   c001cf32 <Vm::fpuLongToFloat(long long)>
c001dc3c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dc43:	89 c6                	mov    esi,eax
c001dc45:	89 d7                	mov    edi,edx
c001dc47:	e8 b8 f4 ff ff       	call   c001d104 <Vm::fpuGetReg(int)>
c001dc4c:	57                   	push   edi
c001dc4d:	56                   	push   esi
c001dc4e:	52                   	push   edx
c001dc4f:	50                   	push   eax
c001dc50:	e8 5e f4 ff ff       	call   c001d0b3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001dc55:	83 c4 1c             	add    esp,0x1c
c001dc58:	52                   	push   edx
c001dc59:	50                   	push   eax
c001dc5a:	6a 00                	push   0x0
c001dc5c:	e8 e6 f4 ff ff       	call   c001d147 <Vm::fpuSetReg(int, unsigned long long)>
c001dc61:	e9 f2 f7 ff ff       	jmp    c001d458 <Vm::x87Handler(regs*)+0x217>
c001dc66:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001dc6a:	80 fa 05             	cmp    dl,0x5
c001dc6d:	75 11                	jne    c001dc80 <Vm::x87Handler(regs*)+0xa3f>
c001dc6f:	55                   	push   ebp
c001dc70:	55                   	push   ebp
c001dc71:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dc74:	ff 36                	push   DWORD PTR [esi]
c001dc76:	e8 81 f2 ff ff       	call   c001cefc <Vm::fpuULongToFloat(unsigned long long)>
c001dc7b:	e9 cf f7 ff ff       	jmp    c001d44f <Vm::x87Handler(regs*)+0x20e>
c001dc80:	31 c0                	xor    eax,eax
c001dc82:	80 fa 07             	cmp    dl,0x7
c001dc85:	75 1b                	jne    c001dca2 <Vm::x87Handler(regs*)+0xa61>
c001dc87:	e8 63 f5 ff ff       	call   c001d1ef <Vm::fpuPop()>
c001dc8c:	51                   	push   ecx
c001dc8d:	51                   	push   ecx
c001dc8e:	52                   	push   edx
c001dc8f:	50                   	push   eax
c001dc90:	e8 0c f2 ff ff       	call   c001cea1 <Vm::fpuFloatToLong(unsigned long long)>
c001dc95:	83 c4 10             	add    esp,0x10
c001dc98:	89 06                	mov    DWORD PTR [esi],eax
c001dc9a:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001dc9d:	e9 f8 f7 ff ff       	jmp    c001d49a <Vm::x87Handler(regs*)+0x259>
c001dca2:	83 c4 1c             	add    esp,0x1c
c001dca5:	5b                   	pop    ebx
c001dca6:	5e                   	pop    esi
c001dca7:	5f                   	pop    edi
c001dca8:	5d                   	pop    ebp
c001dca9:	c3                   	ret    

c001dcaa <__static_initialization_and_destruction_0(int, int)>:
c001dcaa:	83 ec 0c             	sub    esp,0xc
c001dcad:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001dcb2:	75 1a                	jne    c001dcce <__static_initialization_and_destruction_0(int, int)+0x24>
c001dcb4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001dcbc:	75 10                	jne    c001dcce <__static_initialization_and_destruction_0(int, int)+0x24>
c001dcbe:	83 ec 0c             	sub    esp,0xc
c001dcc1:	68 80 b8 02 c0       	push   0xc002b880
c001dcc6:	e8 bd 7a 00 00       	call   c0025788 <Vm::_FPUState::_FPUState()>
c001dccb:	83 c4 10             	add    esp,0x10
c001dcce:	90                   	nop
c001dccf:	83 c4 0c             	add    esp,0xc
c001dcd2:	c3                   	ret    

c001dcd3 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001dcd3:	83 ec 0c             	sub    esp,0xc
c001dcd6:	83 ec 08             	sub    esp,0x8
c001dcd9:	68 ff ff 00 00       	push   0xffff
c001dcde:	6a 01                	push   0x1
c001dce0:	e8 c5 ff ff ff       	call   c001dcaa <__static_initialization_and_destruction_0(int, int)>
c001dce5:	83 c4 10             	add    esp,0x10
c001dce8:	83 c4 0c             	add    esp,0xc
c001dceb:	c3                   	ret    

c001dcec <FAT::getName()>:
c001dcec:	b8 94 8a 02 c0       	mov    eax,0xc0028a94
c001dcf1:	c3                   	ret    

c001dcf2 <FAT::tell(void*, unsigned long long*)>:
c001dcf2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001dcf7:	75 06                	jne    c001dcff <FAT::tell(void*, unsigned long long*)+0xd>
c001dcf9:	b8 04 00 00 00       	mov    eax,0x4
c001dcfe:	c3                   	ret    
c001dcff:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001dd04:	75 06                	jne    c001dd0c <FAT::tell(void*, unsigned long long*)+0x1a>
c001dd06:	b8 04 00 00 00       	mov    eax,0x4
c001dd0b:	c3                   	ret    
c001dd0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dd10:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001dd13:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001dd16:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd1a:	89 01                	mov    DWORD PTR [ecx],eax
c001dd1c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001dd1f:	b8 00 00 00 00       	mov    eax,0x0
c001dd24:	c3                   	ret    
c001dd25:	90                   	nop

c001dd26 <FAT::stat(void*, unsigned long long*)>:
c001dd26:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001dd2b:	75 06                	jne    c001dd33 <FAT::stat(void*, unsigned long long*)+0xd>
c001dd2d:	b8 04 00 00 00       	mov    eax,0x4
c001dd32:	c3                   	ret    
c001dd33:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001dd38:	75 06                	jne    c001dd40 <FAT::stat(void*, unsigned long long*)+0x1a>
c001dd3a:	b8 04 00 00 00       	mov    eax,0x4
c001dd3f:	c3                   	ret    
c001dd40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dd44:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001dd47:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001dd4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd4e:	89 01                	mov    DWORD PTR [ecx],eax
c001dd50:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001dd53:	b8 00 00 00 00       	mov    eax,0x0
c001dd58:	c3                   	ret    
c001dd59:	90                   	nop

c001dd5a <FAT::~FAT()>:
c001dd5a:	83 ec 0c             	sub    esp,0xc
c001dd5d:	ba 18 8b 02 c0       	mov    edx,0xc0028b18
c001dd62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd66:	89 10                	mov    DWORD PTR [eax],edx
c001dd68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd6c:	83 ec 0c             	sub    esp,0xc
c001dd6f:	50                   	push   eax
c001dd70:	e8 05 48 ff ff       	call   c001257a <Filesystem::~Filesystem()>
c001dd75:	83 c4 10             	add    esp,0x10
c001dd78:	90                   	nop
c001dd79:	83 c4 0c             	add    esp,0xc
c001dd7c:	c3                   	ret    
c001dd7d:	90                   	nop

c001dd7e <FAT::~FAT()>:
c001dd7e:	83 ec 0c             	sub    esp,0xc
c001dd81:	83 ec 0c             	sub    esp,0xc
c001dd84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd88:	e8 cd ff ff ff       	call   c001dd5a <FAT::~FAT()>
c001dd8d:	83 c4 10             	add    esp,0x10
c001dd90:	83 ec 08             	sub    esp,0x8
c001dd93:	6a 08                	push   0x8
c001dd95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd99:	e8 d3 43 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c001dd9e:	83 c4 10             	add    esp,0x10
c001dda1:	83 c4 0c             	add    esp,0xc
c001dda4:	c3                   	ret    
c001dda5:	90                   	nop

c001dda6 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001dda6:	83 ec 1c             	sub    esp,0x1c
c001dda9:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001ddb0:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001ddb5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ddb9:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001ddc0:	83 f8 ff             	cmp    eax,0xffffffff
c001ddc3:	75 34                	jne    c001ddf9 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001ddc5:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ddc9:	88 c2                	mov    dl,al
c001ddcb:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001ddd0:	01 d0                	add    eax,edx
c001ddd2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ddd6:	8b 15 e0 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b8e0
c001dddc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001dde0:	89 14 85 00 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4700],edx
c001dde7:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001ddec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ddf0:	89 14 85 80 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4680],edx
c001ddf7:	eb 17                	jmp    c001de10 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001ddf9:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ddfd:	88 c2                	mov    dl,al
c001ddff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001de03:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001de0a:	01 d0                	add    eax,edx
c001de0c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001de10:	83 ec 04             	sub    esp,0x4
c001de13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001de17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001de1b:	8d 44 24 15          	lea    eax,[esp+0x15]
c001de1f:	50                   	push   eax
c001de20:	e8 06 8d fe ff       	call   c0006b2b <f_getlabel>
c001de25:	83 c4 10             	add    esp,0x10
c001de28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001de2c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001de31:	75 07                	jne    c001de3a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001de33:	b8 00 00 00 00       	mov    eax,0x0
c001de38:	eb 05                	jmp    c001de3f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001de3a:	b8 01 00 00 00       	mov    eax,0x1
c001de3f:	83 c4 1c             	add    esp,0x1c
c001de42:	c3                   	ret    
c001de43:	90                   	nop

c001de44 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001de44:	57                   	push   edi
c001de45:	83 ec 58             	sub    esp,0x58
c001de48:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001de50:	8d 54 24 10          	lea    edx,[esp+0x10]
c001de54:	b9 0f 00 00 00       	mov    ecx,0xf
c001de59:	b8 00 00 00 00       	mov    eax,0x0
c001de5e:	fc                   	cld    
c001de5f:	89 d7                	mov    edi,edx
c001de61:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001de63:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001de67:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001de6e:	83 f8 ff             	cmp    eax,0xffffffff
c001de71:	75 34                	jne    c001dea7 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001de73:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001de77:	88 c2                	mov    dl,al
c001de79:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001de7e:	01 d0                	add    eax,edx
c001de80:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001de84:	8b 15 e0 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b8e0
c001de8a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001de8e:	89 14 85 00 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4700],edx
c001de95:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001de9a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001de9e:	89 14 85 80 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4680],edx
c001dea5:	eb 17                	jmp    c001debe <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001dea7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001deab:	88 c2                	mov    dl,al
c001dead:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001deb1:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001deb8:	01 d0                	add    eax,edx
c001deba:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001debe:	83 ec 08             	sub    esp,0x8
c001dec1:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001dec5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001dec9:	50                   	push   eax
c001deca:	e8 55 29 fe ff       	call   c0000824 <strcat>
c001decf:	83 c4 10             	add    esp,0x10
c001ded2:	83 ec 0c             	sub    esp,0xc
c001ded5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ded9:	50                   	push   eax
c001deda:	e8 3a 8e fe ff       	call   c0006d19 <f_setlabel>
c001dedf:	83 c4 10             	add    esp,0x10
c001dee2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dee6:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001deeb:	75 07                	jne    c001def4 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001deed:	b8 00 00 00 00       	mov    eax,0x0
c001def2:	eb 05                	jmp    c001def9 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001def4:	b8 01 00 00 00       	mov    eax,0x1
c001def9:	83 c4 58             	add    esp,0x58
c001defc:	5f                   	pop    edi
c001defd:	c3                   	ret    

c001defe <FAT::format(LogicalDisk*, int, char const*, int)>:
c001defe:	83 ec 2c             	sub    esp,0x2c
c001df01:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001df09:	83 ec 08             	sub    esp,0x8
c001df0c:	68 b8 8a 02 c0       	push   0xc0028ab8
c001df11:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001df15:	e8 a4 28 fe ff       	call   c00007be <strcmp>
c001df1a:	83 c4 10             	add    esp,0x10
c001df1d:	85 c0                	test   eax,eax
c001df1f:	0f 94 c0             	sete   al
c001df22:	84 c0                	test   al,al
c001df24:	74 0d                	je     c001df33 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001df26:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001df2e:	e9 a6 00 00 00       	jmp    c001dfd9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001df33:	83 ec 08             	sub    esp,0x8
c001df36:	68 aa 8a 02 c0       	push   0xc0028aaa
c001df3b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001df3f:	e8 7a 28 fe ff       	call   c00007be <strcmp>
c001df44:	83 c4 10             	add    esp,0x10
c001df47:	85 c0                	test   eax,eax
c001df49:	0f 94 c0             	sete   al
c001df4c:	84 c0                	test   al,al
c001df4e:	74 0a                	je     c001df5a <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001df50:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001df58:	eb 7f                	jmp    c001dfd9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001df5a:	83 ec 08             	sub    esp,0x8
c001df5d:	68 b0 8a 02 c0       	push   0xc0028ab0
c001df62:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001df66:	e8 53 28 fe ff       	call   c00007be <strcmp>
c001df6b:	83 c4 10             	add    esp,0x10
c001df6e:	85 c0                	test   eax,eax
c001df70:	0f 94 c0             	sete   al
c001df73:	84 c0                	test   al,al
c001df75:	74 0a                	je     c001df81 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001df77:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001df7f:	eb 58                	jmp    c001dfd9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001df81:	83 ec 08             	sub    esp,0x8
c001df84:	68 0c 5e 02 c0       	push   0xc0025e0c
c001df89:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001df8d:	e8 2c 28 fe ff       	call   c00007be <strcmp>
c001df92:	83 c4 10             	add    esp,0x10
c001df95:	85 c0                	test   eax,eax
c001df97:	0f 94 c0             	sete   al
c001df9a:	84 c0                	test   al,al
c001df9c:	74 0a                	je     c001dfa8 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001df9e:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001dfa6:	eb 31                	jmp    c001dfd9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001dfa8:	83 ec 08             	sub    esp,0x8
c001dfab:	68 b6 8a 02 c0       	push   0xc0028ab6
c001dfb0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dfb4:	e8 05 28 fe ff       	call   c00007be <strcmp>
c001dfb9:	83 c4 10             	add    esp,0x10
c001dfbc:	85 c0                	test   eax,eax
c001dfbe:	0f 94 c0             	sete   al
c001dfc1:	84 c0                	test   al,al
c001dfc3:	74 0a                	je     c001dfcf <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001dfc5:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001dfcd:	eb 0a                	jmp    c001dfd9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001dfcf:	b8 08 00 00 00       	mov    eax,0x8
c001dfd4:	e9 04 01 00 00       	jmp    c001e0dd <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001dfd9:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001dfe0:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001dfe5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dfe9:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001dff0:	83 f8 ff             	cmp    eax,0xffffffff
c001dff3:	75 34                	jne    c001e029 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001dff5:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001dff9:	88 c2                	mov    dl,al
c001dffb:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001e000:	01 d0                	add    eax,edx
c001e002:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001e006:	8b 15 e0 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b8e0
c001e00c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e010:	89 14 85 00 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4700],edx
c001e017:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001e01c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e020:	89 14 85 80 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4680],edx
c001e027:	eb 17                	jmp    c001e040 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001e029:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001e02d:	88 c2                	mov    dl,al
c001e02f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e033:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001e03a:	01 d0                	add    eax,edx
c001e03c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001e040:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e044:	88 04 24             	mov    BYTE PTR [esp],al
c001e047:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e04b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e04f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001e057:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001e05c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e064:	83 ec 0c             	sub    esp,0xc
c001e067:	68 00 20 00 00       	push   0x2000
c001e06c:	e8 d7 10 ff ff       	call   c000f148 <malloc>
c001e071:	83 c4 10             	add    esp,0x10
c001e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e078:	68 00 20 00 00       	push   0x2000
c001e07d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e081:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e085:	50                   	push   eax
c001e086:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001e08a:	50                   	push   eax
c001e08b:	e8 d4 90 fe ff       	call   c0007164 <f_mkfs>
c001e090:	83 c4 10             	add    esp,0x10
c001e093:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e097:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e09c:	75 07                	jne    c001e0a5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001e09e:	b8 00 00 00 00       	mov    eax,0x0
c001e0a3:	eb 38                	jmp    c001e0dd <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e0a5:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001e0aa:	75 17                	jne    c001e0c3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001e0ac:	83 ec 0c             	sub    esp,0xc
c001e0af:	68 e8 8a 02 c0       	push   0xc0028ae8
c001e0b4:	e8 98 41 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001e0b9:	83 c4 10             	add    esp,0x10
c001e0bc:	b8 09 00 00 00       	mov    eax,0x9
c001e0c1:	eb 1a                	jmp    c001e0dd <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e0c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e0c7:	83 ec 08             	sub    esp,0x8
c001e0ca:	50                   	push   eax
c001e0cb:	68 bc 8a 02 c0       	push   0xc0028abc
c001e0d0:	e8 7c 41 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001e0d5:	83 c4 10             	add    esp,0x10
c001e0d8:	b8 01 00 00 00       	mov    eax,0x1
c001e0dd:	83 c4 2c             	add    esp,0x2c
c001e0e0:	c3                   	ret    
c001e0e1:	90                   	nop

c001e0e2 <FAT::tryMount(LogicalDisk*, int)>:
c001e0e2:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001e0e8:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001e0ed:	83 f8 14             	cmp    eax,0x14
c001e0f0:	75 17                	jne    c001e109 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001e0f2:	83 ec 0c             	sub    esp,0xc
c001e0f5:	68 ce 8a 02 c0       	push   0xc0028ace
c001e0fa:	e8 f0 a8 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c001e0ff:	83 c4 10             	add    esp,0x10
c001e102:	b0 00                	mov    al,0x0
c001e104:	e9 d7 01 00 00       	jmp    c001e2e0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e109:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001e110:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e116:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e11c:	3d 00 02 00 00       	cmp    eax,0x200
c001e121:	74 07                	je     c001e12a <FAT::tryMount(LogicalDisk*, int)+0x48>
c001e123:	b0 00                	mov    al,0x0
c001e125:	e9 b6 01 00 00       	jmp    c001e2e0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e12a:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001e132:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001e139:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001e140:	83 f8 ff             	cmp    eax,0xffffffff
c001e143:	74 07                	je     c001e14c <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001e145:	b0 01                	mov    al,0x1
c001e147:	e9 94 01 00 00       	jmp    c001e2e0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e14c:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001e156:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001e15e:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001e165:	88 c2                	mov    dl,al
c001e167:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001e16c:	01 d0                	add    eax,edx
c001e16e:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001e175:	8b 15 e0 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b8e0
c001e17b:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001e182:	89 14 85 00 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4700],edx
c001e189:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001e18e:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001e195:	89 14 85 80 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4680],edx
c001e19c:	83 ec 0c             	sub    esp,0xc
c001e19f:	68 54 02 00 00       	push   0x254
c001e1a4:	e8 9f 0f ff ff       	call   c000f148 <malloc>
c001e1a9:	83 c4 10             	add    esp,0x10
c001e1ac:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001e1b3:	83 ec 04             	sub    esp,0x4
c001e1b6:	6a 00                	push   0x0
c001e1b8:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e1bf:	50                   	push   eax
c001e1c0:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e1c7:	e8 56 6b fe ff       	call   c0004d22 <f_mount>
c001e1cc:	83 c4 10             	add    esp,0x10
c001e1cf:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001e1d6:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001e1de:	74 19                	je     c001e1f9 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001e1e0:	83 ec 0c             	sub    esp,0xc
c001e1e3:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e1ea:	e8 79 0f ff ff       	call   c000f168 <rfree>
c001e1ef:	83 c4 10             	add    esp,0x10
c001e1f2:	b0 00                	mov    al,0x0
c001e1f4:	e9 e7 00 00 00       	jmp    c001e2e0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e1f9:	83 ec 04             	sub    esp,0x4
c001e1fc:	68 00 01 00 00       	push   0x100
c001e201:	6a 00                	push   0x0
c001e203:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e20a:	50                   	push   eax
c001e20b:	e8 be 24 fe ff       	call   c00006ce <memset>
c001e210:	83 c4 10             	add    esp,0x10
c001e213:	83 ec 08             	sub    esp,0x8
c001e216:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e21d:	50                   	push   eax
c001e21e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e225:	50                   	push   eax
c001e226:	e8 f9 25 fe ff       	call   c0000824 <strcat>
c001e22b:	83 c4 10             	add    esp,0x10
c001e22e:	83 ec 08             	sub    esp,0x8
c001e231:	68 dc 8a 02 c0       	push   0xc0028adc
c001e236:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e23d:	50                   	push   eax
c001e23e:	e8 e1 25 fe ff       	call   c0000824 <strcat>
c001e243:	83 c4 10             	add    esp,0x10
c001e246:	83 ec 04             	sub    esp,0x4
c001e249:	6a 01                	push   0x1
c001e24b:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001e252:	50                   	push   eax
c001e253:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e257:	50                   	push   eax
c001e258:	e8 27 6b fe ff       	call   c0004d84 <f_open>
c001e25d:	83 c4 10             	add    esp,0x10
c001e260:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001e267:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001e26e:	85 c0                	test   eax,eax
c001e270:	74 0a                	je     c001e27c <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001e272:	78 2d                	js     c001e2a1 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001e274:	83 e8 04             	sub    eax,0x4
c001e277:	83 f8 01             	cmp    eax,0x1
c001e27a:	77 25                	ja     c001e2a1 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001e27c:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001e284:	83 ec 0c             	sub    esp,0xc
c001e287:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e28b:	50                   	push   eax
c001e28c:	e8 45 76 fe ff       	call   c00058d6 <f_close>
c001e291:	83 c4 10             	add    esp,0x10
c001e294:	90                   	nop
c001e295:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001e29d:	74 3a                	je     c001e2d9 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001e29f:	eb 2d                	jmp    c001e2ce <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001e2a1:	83 ec 0c             	sub    esp,0xc
c001e2a4:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e2ab:	e8 b8 0e ff ff       	call   c000f168 <rfree>
c001e2b0:	83 c4 10             	add    esp,0x10
c001e2b3:	83 ec 04             	sub    esp,0x4
c001e2b6:	6a 00                	push   0x0
c001e2b8:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e2bf:	50                   	push   eax
c001e2c0:	6a 00                	push   0x0
c001e2c2:	e8 5b 6a fe ff       	call   c0004d22 <f_mount>
c001e2c7:	83 c4 10             	add    esp,0x10
c001e2ca:	b0 00                	mov    al,0x0
c001e2cc:	eb 12                	jmp    c001e2e0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e2ce:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001e2d3:	40                   	inc    eax
c001e2d4:	a3 e0 b8 02 c0       	mov    ds:0xc002b8e0,eax
c001e2d9:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001e2e0:	81 c4 6c 03 00 00    	add    esp,0x36c
c001e2e6:	c3                   	ret    
c001e2e7:	90                   	nop

c001e2e8 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001e2e8:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001e2ee:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001e2f6:	74 0a                	je     c001e302 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001e2f8:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001e300:	75 0a                	jne    c001e30c <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001e302:	b8 04 00 00 00       	mov    eax,0x4
c001e307:	e9 db 00 00 00       	jmp    c001e3e7 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e30c:	83 ec 08             	sub    esp,0x8
c001e30f:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001e316:	50                   	push   eax
c001e317:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001e31e:	e8 bd 7b fe ff       	call   c0005ee0 <f_readdir>
c001e323:	83 c4 10             	add    esp,0x10
c001e326:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001e32d:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001e333:	83 ec 0c             	sub    esp,0xc
c001e336:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001e33d:	83 c0 1a             	add    eax,0x1a
c001e340:	50                   	push   eax
c001e341:	e8 a5 23 fe ff       	call   c00006eb <strlen>
c001e346:	83 c4 10             	add    esp,0x10
c001e349:	ba 00 00 00 00       	mov    edx,0x0
c001e34e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e352:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e356:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001e35d:	0f b6 c0             	movzx  eax,al
c001e360:	83 e0 10             	and    eax,0x10
c001e363:	74 07                	je     c001e36c <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001e365:	b8 02 00 00 00       	mov    eax,0x2
c001e36a:	eb 05                	jmp    c001e371 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001e36c:	b8 01 00 00 00       	mov    eax,0x1
c001e371:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e375:	83 ec 08             	sub    esp,0x8
c001e378:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001e37f:	83 c0 1a             	add    eax,0x1a
c001e382:	50                   	push   eax
c001e383:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e387:	83 c0 10             	add    eax,0x10
c001e38a:	50                   	push   eax
c001e38b:	e8 dd 23 fe ff       	call   c000076d <strcpy>
c001e390:	83 c4 10             	add    esp,0x10
c001e393:	83 ec 04             	sub    esp,0x4
c001e396:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001e39d:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e3a1:	50                   	push   eax
c001e3a2:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001e3a9:	e8 ea 22 fe ff       	call   c0000698 <memcpy>
c001e3ae:	83 c4 10             	add    esp,0x10
c001e3b1:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001e3b8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001e3be:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001e3c5:	84 c0                	test   al,al
c001e3c7:	75 07                	jne    c001e3d0 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001e3c9:	b8 07 00 00 00       	mov    eax,0x7
c001e3ce:	eb 17                	jmp    c001e3e7 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e3d0:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001e3d7:	85 c0                	test   eax,eax
c001e3d9:	75 07                	jne    c001e3e2 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001e3db:	b8 00 00 00 00       	mov    eax,0x0
c001e3e0:	eb 05                	jmp    c001e3e7 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e3e2:	b8 01 00 00 00       	mov    eax,0x1
c001e3e7:	81 c4 3c 02 00 00    	add    esp,0x23c
c001e3ed:	c3                   	ret    

c001e3ee <FAT::read(void*, unsigned long, void*, int*)>:
c001e3ee:	83 ec 1c             	sub    esp,0x1c
c001e3f1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e3f6:	74 07                	je     c001e3ff <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001e3f8:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001e3fd:	75 07                	jne    c001e406 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001e3ff:	b8 04 00 00 00       	mov    eax,0x4
c001e404:	eb 3d                	jmp    c001e443 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001e406:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e40a:	50                   	push   eax
c001e40b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e40f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e413:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e417:	e8 a4 6d fe ff       	call   c00051c0 <f_read>
c001e41c:	83 c4 10             	add    esp,0x10
c001e41f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e423:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e427:	89 c2                	mov    edx,eax
c001e429:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e42d:	89 10                	mov    DWORD PTR [eax],edx
c001e42f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e433:	85 c0                	test   eax,eax
c001e435:	75 07                	jne    c001e43e <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001e437:	b8 00 00 00 00       	mov    eax,0x0
c001e43c:	eb 05                	jmp    c001e443 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001e43e:	b8 01 00 00 00       	mov    eax,0x1
c001e443:	83 c4 1c             	add    esp,0x1c
c001e446:	c3                   	ret    
c001e447:	90                   	nop

c001e448 <FAT::write(void*, unsigned long, void*, int*)>:
c001e448:	83 ec 1c             	sub    esp,0x1c
c001e44b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e450:	74 07                	je     c001e459 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001e452:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001e457:	75 07                	jne    c001e460 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001e459:	b8 04 00 00 00       	mov    eax,0x4
c001e45e:	eb 3d                	jmp    c001e49d <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001e460:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e464:	50                   	push   eax
c001e465:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e469:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e46d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e471:	e8 ca 6f fe ff       	call   c0005440 <f_write>
c001e476:	83 c4 10             	add    esp,0x10
c001e479:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e47d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e481:	89 c2                	mov    edx,eax
c001e483:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e487:	89 10                	mov    DWORD PTR [eax],edx
c001e489:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e48d:	85 c0                	test   eax,eax
c001e48f:	75 07                	jne    c001e498 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001e491:	b8 00 00 00 00       	mov    eax,0x0
c001e496:	eb 05                	jmp    c001e49d <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001e498:	b8 01 00 00 00       	mov    eax,0x1
c001e49d:	83 c4 1c             	add    esp,0x1c
c001e4a0:	c3                   	ret    
c001e4a1:	90                   	nop

c001e4a2 <FAT::close(void*)>:
c001e4a2:	83 ec 1c             	sub    esp,0x1c
c001e4a5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e4aa:	75 07                	jne    c001e4b3 <FAT::close(void*)+0x11>
c001e4ac:	b8 04 00 00 00       	mov    eax,0x4
c001e4b1:	eb 36                	jmp    c001e4e9 <FAT::close(void*)+0x47>
c001e4b3:	83 ec 0c             	sub    esp,0xc
c001e4b6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e4ba:	e8 17 74 fe ff       	call   c00058d6 <f_close>
c001e4bf:	83 c4 10             	add    esp,0x10
c001e4c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4c6:	83 ec 0c             	sub    esp,0xc
c001e4c9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e4cd:	e8 86 0c ff ff       	call   c000f158 <free>
c001e4d2:	83 c4 10             	add    esp,0x10
c001e4d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e4d9:	85 c0                	test   eax,eax
c001e4db:	75 07                	jne    c001e4e4 <FAT::close(void*)+0x42>
c001e4dd:	b8 00 00 00 00       	mov    eax,0x0
c001e4e2:	eb 05                	jmp    c001e4e9 <FAT::close(void*)+0x47>
c001e4e4:	b8 01 00 00 00       	mov    eax,0x1
c001e4e9:	83 c4 1c             	add    esp,0x1c
c001e4ec:	c3                   	ret    
c001e4ed:	90                   	nop

c001e4ee <FAT::closeDir(void*)>:
c001e4ee:	83 ec 1c             	sub    esp,0x1c
c001e4f1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e4f6:	75 07                	jne    c001e4ff <FAT::closeDir(void*)+0x11>
c001e4f8:	b8 04 00 00 00       	mov    eax,0x4
c001e4fd:	eb 36                	jmp    c001e535 <FAT::closeDir(void*)+0x47>
c001e4ff:	83 ec 0c             	sub    esp,0xc
c001e502:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e506:	e8 b3 79 fe ff       	call   c0005ebe <f_closedir>
c001e50b:	83 c4 10             	add    esp,0x10
c001e50e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e512:	83 ec 0c             	sub    esp,0xc
c001e515:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e519:	e8 3a 0c ff ff       	call   c000f158 <free>
c001e51e:	83 c4 10             	add    esp,0x10
c001e521:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e525:	85 c0                	test   eax,eax
c001e527:	75 07                	jne    c001e530 <FAT::closeDir(void*)+0x42>
c001e529:	b8 00 00 00 00       	mov    eax,0x0
c001e52e:	eb 05                	jmp    c001e535 <FAT::closeDir(void*)+0x47>
c001e530:	b8 01 00 00 00       	mov    eax,0x1
c001e535:	83 c4 1c             	add    esp,0x1c
c001e538:	c3                   	ret    
c001e539:	90                   	nop

c001e53a <FAT::seek(void*, unsigned long long)>:
c001e53a:	83 ec 2c             	sub    esp,0x2c
c001e53d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e541:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e545:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e549:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e54d:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001e552:	75 07                	jne    c001e55b <FAT::seek(void*, unsigned long long)+0x21>
c001e554:	b8 04 00 00 00       	mov    eax,0x4
c001e559:	eb 2f                	jmp    c001e58a <FAT::seek(void*, unsigned long long)+0x50>
c001e55b:	83 ec 04             	sub    esp,0x4
c001e55e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e562:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e566:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e56a:	e8 96 73 fe ff       	call   c0005905 <f_lseek>
c001e56f:	83 c4 10             	add    esp,0x10
c001e572:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e576:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e57a:	85 c0                	test   eax,eax
c001e57c:	75 07                	jne    c001e585 <FAT::seek(void*, unsigned long long)+0x4b>
c001e57e:	b8 00 00 00 00       	mov    eax,0x0
c001e583:	eb 05                	jmp    c001e58a <FAT::seek(void*, unsigned long long)+0x50>
c001e585:	b8 01 00 00 00       	mov    eax,0x1
c001e58a:	83 c4 2c             	add    esp,0x2c
c001e58d:	c3                   	ret    

c001e58e <fatWrapperReadDisk>:
c001e58e:	83 ec 1c             	sub    esp,0x1c
c001e591:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e595:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e599:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e59d:	89 04 24             	mov    DWORD PTR [esp],eax
c001e5a0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e5a8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e5ad:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c001e5b4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e5b8:	83 ec 0c             	sub    esp,0xc
c001e5bb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e5bf:	52                   	push   edx
c001e5c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e5c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e5c8:	50                   	push   eax
c001e5c9:	e8 ae 72 ff ff       	call   c001587c <LogicalDisk::read(unsigned long long, int, void*)>
c001e5ce:	83 c4 20             	add    esp,0x20
c001e5d1:	83 c4 1c             	add    esp,0x1c
c001e5d4:	c3                   	ret    

c001e5d5 <fatWrapperWriteDisk>:
c001e5d5:	83 ec 1c             	sub    esp,0x1c
c001e5d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5dc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e5e0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e5e4:	89 04 24             	mov    DWORD PTR [esp],eax
c001e5e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5eb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e5ef:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e5f4:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c001e5fb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e5ff:	83 ec 0c             	sub    esp,0xc
c001e602:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e606:	52                   	push   edx
c001e607:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e60b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e60f:	50                   	push   eax
c001e610:	e8 d3 72 ff ff       	call   c00158e8 <LogicalDisk::write(unsigned long long, int, void*)>
c001e615:	83 c4 20             	add    esp,0x20
c001e618:	83 c4 1c             	add    esp,0x1c
c001e61b:	c3                   	ret    

c001e61c <fatWrapperIoctl>:
c001e61c:	53                   	push   ebx
c001e61d:	83 ec 28             	sub    esp,0x28
c001e620:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e624:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e628:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001e62c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e630:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001e635:	75 31                	jne    c001e668 <fatWrapperIoctl+0x4c>
c001e637:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e63b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e63f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e644:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c001e64b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e651:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e657:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e65b:	66 89 02             	mov    WORD PTR [edx],ax
c001e65e:	b8 00 00 00 00       	mov    eax,0x0
c001e663:	e9 b2 00 00 00       	jmp    c001e71a <fatWrapperIoctl+0xfe>
c001e668:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001e66d:	75 6a                	jne    c001e6d9 <fatWrapperIoctl+0xbd>
c001e66f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e673:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e677:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e67c:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c001e683:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e689:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001e68f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001e695:	89 c8                	mov    eax,ecx
c001e697:	89 da                	mov    edx,ebx
c001e699:	0f a4 c2 0a          	shld   edx,eax,0xa
c001e69d:	c1 e0 0a             	shl    eax,0xa
c001e6a0:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001e6a5:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c001e6ac:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001e6b2:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001e6b8:	89 cb                	mov    ebx,ecx
c001e6ba:	c1 fb 1f             	sar    ebx,0x1f
c001e6bd:	53                   	push   ebx
c001e6be:	51                   	push   ecx
c001e6bf:	52                   	push   edx
c001e6c0:	50                   	push   eax
c001e6c1:	e8 96 4c 00 00       	call   c002335c <__udivdi3>
c001e6c6:	83 c4 10             	add    esp,0x10
c001e6c9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001e6cd:	89 01                	mov    DWORD PTR [ecx],eax
c001e6cf:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e6d2:	b8 00 00 00 00       	mov    eax,0x0
c001e6d7:	eb 41                	jmp    c001e71a <fatWrapperIoctl+0xfe>
c001e6d9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001e6de:	75 07                	jne    c001e6e7 <fatWrapperIoctl+0xcb>
c001e6e0:	b8 00 00 00 00       	mov    eax,0x0
c001e6e5:	eb 33                	jmp    c001e71a <fatWrapperIoctl+0xfe>
c001e6e7:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001e6ec:	75 19                	jne    c001e707 <fatWrapperIoctl+0xeb>
c001e6ee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e6f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e6f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e6fa:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001e700:	b8 00 00 00 00       	mov    eax,0x0
c001e705:	eb 13                	jmp    c001e71a <fatWrapperIoctl+0xfe>
c001e707:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001e70c:	75 07                	jne    c001e715 <fatWrapperIoctl+0xf9>
c001e70e:	b8 00 00 00 00       	mov    eax,0x0
c001e713:	eb 05                	jmp    c001e71a <fatWrapperIoctl+0xfe>
c001e715:	b8 04 00 00 00       	mov    eax,0x4
c001e71a:	83 c4 28             	add    esp,0x28
c001e71d:	5b                   	pop    ebx
c001e71e:	c3                   	ret    
c001e71f:	90                   	nop

c001e720 <FAT::FAT()>:
c001e720:	83 ec 1c             	sub    esp,0x1c
c001e723:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e727:	83 ec 0c             	sub    esp,0xc
c001e72a:	50                   	push   eax
c001e72b:	e8 26 3e ff ff       	call   c0012556 <Filesystem::Filesystem()>
c001e730:	83 c4 10             	add    esp,0x10
c001e733:	ba 18 8b 02 c0       	mov    edx,0xc0028b18
c001e738:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e73c:	89 10                	mov    DWORD PTR [eax],edx
c001e73e:	c7 05 e0 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b8e0,0x0
c001e748:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e750:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001e755:	7f 15                	jg     c001e76c <FAT::FAT()+0x4c>
c001e757:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e75b:	c7 04 85 00 b9 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd4700],0xffffffff
c001e766:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001e76a:	eb e4                	jmp    c001e750 <FAT::FAT()+0x30>
c001e76c:	90                   	nop
c001e76d:	83 c4 1c             	add    esp,0x1c
c001e770:	c3                   	ret    
c001e771:	90                   	nop

c001e772 <FAT::fixFilepath(char*)>:
c001e772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e776:	8a 00                	mov    al,BYTE PTR [eax]
c001e778:	3c 40                	cmp    al,0x40
c001e77a:	7e 2c                	jle    c001e7a8 <FAT::fixFilepath(char*)+0x36>
c001e77c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e780:	8a 00                	mov    al,BYTE PTR [eax]
c001e782:	83 e8 41             	sub    eax,0x41
c001e785:	88 c2                	mov    dl,al
c001e787:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e78b:	88 10                	mov    BYTE PTR [eax],dl
c001e78d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e791:	8a 00                	mov    al,BYTE PTR [eax]
c001e793:	0f be c0             	movsx  eax,al
c001e796:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001e79d:	83 c0 30             	add    eax,0x30
c001e7a0:	88 c2                	mov    dl,al
c001e7a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e7a6:	88 10                	mov    BYTE PTR [eax],dl
c001e7a8:	90                   	nop
c001e7a9:	c3                   	ret    

c001e7aa <FAT::open(char const*, void**, FileOpenMode)>:
c001e7aa:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001e7b0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001e7b8:	74 0a                	je     c001e7c4 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001e7ba:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001e7c2:	75 0a                	jne    c001e7ce <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001e7c4:	b8 04 00 00 00       	mov    eax,0x4
c001e7c9:	e9 fd 00 00 00       	jmp    c001e8cb <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001e7ce:	83 ec 08             	sub    esp,0x8
c001e7d1:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e7d8:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e7dc:	50                   	push   eax
c001e7dd:	e8 8b 1f fe ff       	call   c000076d <strcpy>
c001e7e2:	83 c4 10             	add    esp,0x10
c001e7e5:	83 ec 08             	sub    esp,0x8
c001e7e8:	8d 44 24 10          	lea    eax,[esp+0x10]
c001e7ec:	50                   	push   eax
c001e7ed:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e7f4:	e8 79 ff ff ff       	call   c001e772 <FAT::fixFilepath(char*)>
c001e7f9:	83 c4 10             	add    esp,0x10
c001e7fc:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001e804:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e80b:	83 e0 01             	and    eax,0x1
c001e80e:	74 08                	je     c001e818 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001e810:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001e818:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e81f:	83 e0 04             	and    eax,0x4
c001e822:	74 10                	je     c001e834 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001e824:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001e82c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001e834:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e83b:	83 e0 02             	and    eax,0x2
c001e83e:	74 08                	je     c001e848 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001e840:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001e848:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e84f:	83 e0 08             	and    eax,0x8
c001e852:	74 08                	je     c001e85c <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001e854:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001e85c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e863:	83 e0 10             	and    eax,0x10
c001e866:	74 08                	je     c001e870 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001e868:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001e870:	83 ec 0c             	sub    esp,0xc
c001e873:	68 50 02 00 00       	push   0x250
c001e878:	e8 cb 08 ff ff       	call   c000f148 <malloc>
c001e87d:	83 c4 10             	add    esp,0x10
c001e880:	89 c2                	mov    edx,eax
c001e882:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e889:	89 10                	mov    DWORD PTR [eax],edx
c001e88b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001e893:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e89a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e89c:	83 ec 04             	sub    esp,0x4
c001e89f:	52                   	push   edx
c001e8a0:	8d 54 24 10          	lea    edx,[esp+0x10]
c001e8a4:	52                   	push   edx
c001e8a5:	50                   	push   eax
c001e8a6:	e8 d9 64 fe ff       	call   c0004d84 <f_open>
c001e8ab:	83 c4 10             	add    esp,0x10
c001e8ae:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001e8b5:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001e8bd:	74 07                	je     c001e8c6 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001e8bf:	b8 01 00 00 00       	mov    eax,0x1
c001e8c4:	eb 05                	jmp    c001e8cb <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001e8c6:	b8 00 00 00 00       	mov    eax,0x0
c001e8cb:	81 c4 1c 01 00 00    	add    esp,0x11c
c001e8d1:	c3                   	ret    

c001e8d2 <FAT::openDir(char const*, void**)>:
c001e8d2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001e8d8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001e8e0:	74 0a                	je     c001e8ec <FAT::openDir(char const*, void**)+0x1a>
c001e8e2:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001e8ea:	75 07                	jne    c001e8f3 <FAT::openDir(char const*, void**)+0x21>
c001e8ec:	b8 04 00 00 00       	mov    eax,0x4
c001e8f1:	eb 7d                	jmp    c001e970 <FAT::openDir(char const*, void**)+0x9e>
c001e8f3:	83 ec 08             	sub    esp,0x8
c001e8f6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e8fd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e901:	50                   	push   eax
c001e902:	e8 66 1e fe ff       	call   c000076d <strcpy>
c001e907:	83 c4 10             	add    esp,0x10
c001e90a:	83 ec 08             	sub    esp,0x8
c001e90d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e911:	50                   	push   eax
c001e912:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e919:	e8 54 fe ff ff       	call   c001e772 <FAT::fixFilepath(char*)>
c001e91e:	83 c4 10             	add    esp,0x10
c001e921:	83 ec 0c             	sub    esp,0xc
c001e924:	6a 4c                	push   0x4c
c001e926:	e8 1d 08 ff ff       	call   c000f148 <malloc>
c001e92b:	83 c4 10             	add    esp,0x10
c001e92e:	89 c2                	mov    edx,eax
c001e930:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e937:	89 10                	mov    DWORD PTR [eax],edx
c001e939:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e940:	8b 00                	mov    eax,DWORD PTR [eax]
c001e942:	83 ec 08             	sub    esp,0x8
c001e945:	8d 54 24 14          	lea    edx,[esp+0x14]
c001e949:	52                   	push   edx
c001e94a:	50                   	push   eax
c001e94b:	e8 6c 74 fe ff       	call   c0005dbc <f_opendir>
c001e950:	83 c4 10             	add    esp,0x10
c001e953:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001e95a:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001e962:	74 07                	je     c001e96b <FAT::openDir(char const*, void**)+0x99>
c001e964:	b8 01 00 00 00       	mov    eax,0x1
c001e969:	eb 05                	jmp    c001e970 <FAT::openDir(char const*, void**)+0x9e>
c001e96b:	b8 00 00 00 00       	mov    eax,0x0
c001e970:	81 c4 1c 01 00 00    	add    esp,0x11c
c001e976:	c3                   	ret    
c001e977:	90                   	nop

c001e978 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001e978:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001e97e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001e986:	75 0a                	jne    c001e992 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001e988:	b8 04 00 00 00       	mov    eax,0x4
c001e98d:	e9 c9 00 00 00       	jmp    c001ea5b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001e992:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001e99a:	75 0a                	jne    c001e9a6 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001e99c:	b8 04 00 00 00       	mov    eax,0x4
c001e9a1:	e9 b5 00 00 00       	jmp    c001ea5b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001e9a6:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001e9ae:	75 0a                	jne    c001e9ba <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001e9b0:	b8 04 00 00 00       	mov    eax,0x4
c001e9b5:	e9 a1 00 00 00       	jmp    c001ea5b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001e9ba:	83 ec 08             	sub    esp,0x8
c001e9bd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001e9c4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001e9cb:	50                   	push   eax
c001e9cc:	e8 9c 1d fe ff       	call   c000076d <strcpy>
c001e9d1:	83 c4 10             	add    esp,0x10
c001e9d4:	83 ec 08             	sub    esp,0x8
c001e9d7:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001e9de:	50                   	push   eax
c001e9df:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001e9e6:	e8 87 fd ff ff       	call   c001e772 <FAT::fixFilepath(char*)>
c001e9eb:	83 c4 10             	add    esp,0x10
c001e9ee:	83 ec 08             	sub    esp,0x8
c001e9f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e9f5:	50                   	push   eax
c001e9f6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001e9fd:	50                   	push   eax
c001e9fe:	e8 78 75 fe ff       	call   c0005f7b <f_stat>
c001ea03:	83 c4 10             	add    esp,0x10
c001ea06:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ea0d:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ea14:	85 c0                	test   eax,eax
c001ea16:	74 07                	je     c001ea1f <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001ea18:	83 f8 04             	cmp    eax,0x4
c001ea1b:	74 32                	je     c001ea4f <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c001ea1d:	eb 37                	jmp    c001ea56 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c001ea1f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ea23:	0f b6 c0             	movzx  eax,al
c001ea26:	83 e0 10             	and    eax,0x10
c001ea29:	0f 95 c2             	setne  dl
c001ea2c:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001ea33:	88 10                	mov    BYTE PTR [eax],dl
c001ea35:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ea38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea3c:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001ea43:	89 01                	mov    DWORD PTR [ecx],eax
c001ea45:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ea48:	b8 00 00 00 00       	mov    eax,0x0
c001ea4d:	eb 0c                	jmp    c001ea5b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001ea4f:	b8 02 00 00 00       	mov    eax,0x2
c001ea54:	eb 05                	jmp    c001ea5b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001ea56:	b8 01 00 00 00       	mov    eax,0x1
c001ea5b:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ea61:	c3                   	ret    

c001ea62 <FAT::unlink(char const*)>:
c001ea62:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ea68:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ea70:	75 07                	jne    c001ea79 <FAT::unlink(char const*)+0x17>
c001ea72:	b8 04 00 00 00       	mov    eax,0x4
c001ea77:	eb 5c                	jmp    c001ead5 <FAT::unlink(char const*)+0x73>
c001ea79:	83 ec 08             	sub    esp,0x8
c001ea7c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ea83:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ea87:	50                   	push   eax
c001ea88:	e8 e0 1c fe ff       	call   c000076d <strcpy>
c001ea8d:	83 c4 10             	add    esp,0x10
c001ea90:	83 ec 08             	sub    esp,0x8
c001ea93:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ea97:	50                   	push   eax
c001ea98:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ea9f:	e8 ce fc ff ff       	call   c001e772 <FAT::fixFilepath(char*)>
c001eaa4:	83 c4 10             	add    esp,0x10
c001eaa7:	83 ec 0c             	sub    esp,0xc
c001eaaa:	8d 44 24 18          	lea    eax,[esp+0x18]
c001eaae:	50                   	push   eax
c001eaaf:	e8 19 78 fe ff       	call   c00062cd <f_unlink>
c001eab4:	83 c4 10             	add    esp,0x10
c001eab7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001eabe:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001eac5:	85 c0                	test   eax,eax
c001eac7:	75 07                	jne    c001ead0 <FAT::unlink(char const*)+0x6e>
c001eac9:	b8 00 00 00 00       	mov    eax,0x0
c001eace:	eb 05                	jmp    c001ead5 <FAT::unlink(char const*)+0x73>
c001ead0:	b8 01 00 00 00       	mov    eax,0x1
c001ead5:	81 c4 1c 01 00 00    	add    esp,0x11c
c001eadb:	c3                   	ret    

c001eadc <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001eadc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001eae2:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001eae9:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001eaf0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001eaf4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001eaf8:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001eb00:	75 0a                	jne    c001eb0c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001eb02:	b8 04 00 00 00       	mov    eax,0x4
c001eb07:	e9 1c 01 00 00       	jmp    c001ec28 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001eb0c:	83 ec 08             	sub    esp,0x8
c001eb0f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001eb16:	8d 44 24 24          	lea    eax,[esp+0x24]
c001eb1a:	50                   	push   eax
c001eb1b:	e8 4d 1c fe ff       	call   c000076d <strcpy>
c001eb20:	83 c4 10             	add    esp,0x10
c001eb23:	83 ec 08             	sub    esp,0x8
c001eb26:	8d 44 24 20          	lea    eax,[esp+0x20]
c001eb2a:	50                   	push   eax
c001eb2b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001eb32:	e8 3b fc ff ff       	call   c001e772 <FAT::fixFilepath(char*)>
c001eb37:	83 c4 10             	add    esp,0x10
c001eb3a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001eb42:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001eb4a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb4f:	83 e0 01             	and    eax,0x1
c001eb52:	74 08                	je     c001eb5c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001eb54:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001eb5c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb61:	83 e0 02             	and    eax,0x2
c001eb64:	74 08                	je     c001eb6e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001eb66:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001eb6e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb73:	83 e0 04             	and    eax,0x4
c001eb76:	74 08                	je     c001eb80 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001eb78:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001eb80:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb85:	83 e0 08             	and    eax,0x8
c001eb88:	74 08                	je     c001eb92 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001eb8a:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001eb92:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001eb97:	83 e0 01             	and    eax,0x1
c001eb9a:	74 08                	je     c001eba4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001eb9c:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001eba4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001eba9:	83 e0 02             	and    eax,0x2
c001ebac:	74 08                	je     c001ebb6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001ebae:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001ebb6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ebbb:	83 e0 04             	and    eax,0x4
c001ebbe:	74 08                	je     c001ebc8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001ebc0:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001ebc8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ebcd:	83 e0 08             	and    eax,0x8
c001ebd0:	74 08                	je     c001ebda <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001ebd2:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001ebda:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ebe1:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001ebe8:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001ebf0:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001ebf8:	83 ec 04             	sub    esp,0x4
c001ebfb:	52                   	push   edx
c001ebfc:	50                   	push   eax
c001ebfd:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ec01:	50                   	push   eax
c001ec02:	e8 68 7d fe ff       	call   c000696f <f_chmod>
c001ec07:	83 c4 10             	add    esp,0x10
c001ec0a:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ec11:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ec18:	85 c0                	test   eax,eax
c001ec1a:	75 07                	jne    c001ec23 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001ec1c:	b8 00 00 00 00       	mov    eax,0x0
c001ec21:	eb 05                	jmp    c001ec28 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001ec23:	b8 01 00 00 00       	mov    eax,0x1
c001ec28:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ec2e:	c3                   	ret    
c001ec2f:	90                   	nop

c001ec30 <FAT::rename(char const*, char const*)>:
c001ec30:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ec36:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001ec3e:	74 0a                	je     c001ec4a <FAT::rename(char const*, char const*)+0x1a>
c001ec40:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001ec48:	75 0a                	jne    c001ec54 <FAT::rename(char const*, char const*)+0x24>
c001ec4a:	b8 04 00 00 00       	mov    eax,0x4
c001ec4f:	e9 98 00 00 00       	jmp    c001ecec <FAT::rename(char const*, char const*)+0xbc>
c001ec54:	83 ec 08             	sub    esp,0x8
c001ec57:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ec5e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ec65:	50                   	push   eax
c001ec66:	e8 02 1b fe ff       	call   c000076d <strcpy>
c001ec6b:	83 c4 10             	add    esp,0x10
c001ec6e:	83 ec 08             	sub    esp,0x8
c001ec71:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001ec78:	50                   	push   eax
c001ec79:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ec80:	e8 ed fa ff ff       	call   c001e772 <FAT::fixFilepath(char*)>
c001ec85:	83 c4 10             	add    esp,0x10
c001ec88:	83 ec 08             	sub    esp,0x8
c001ec8b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001ec92:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ec96:	50                   	push   eax
c001ec97:	e8 d1 1a fe ff       	call   c000076d <strcpy>
c001ec9c:	83 c4 10             	add    esp,0x10
c001ec9f:	83 ec 08             	sub    esp,0x8
c001eca2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001eca6:	50                   	push   eax
c001eca7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ecae:	e8 bf fa ff ff       	call   c001e772 <FAT::fixFilepath(char*)>
c001ecb3:	83 c4 10             	add    esp,0x10
c001ecb6:	83 ec 08             	sub    esp,0x8
c001ecb9:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ecbd:	50                   	push   eax
c001ecbe:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ecc5:	50                   	push   eax
c001ecc6:	e8 b1 79 fe ff       	call   c000667c <f_rename>
c001eccb:	83 c4 10             	add    esp,0x10
c001ecce:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001ecd5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001ecdc:	85 c0                	test   eax,eax
c001ecde:	75 07                	jne    c001ece7 <FAT::rename(char const*, char const*)+0xb7>
c001ece0:	b8 00 00 00 00       	mov    eax,0x0
c001ece5:	eb 05                	jmp    c001ecec <FAT::rename(char const*, char const*)+0xbc>
c001ece7:	b8 01 00 00 00       	mov    eax,0x1
c001ecec:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ecf2:	c3                   	ret    
c001ecf3:	90                   	nop

c001ecf4 <FAT::mkdir(char const*)>:
c001ecf4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ecfa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ed02:	75 07                	jne    c001ed0b <FAT::mkdir(char const*)+0x17>
c001ed04:	b8 04 00 00 00       	mov    eax,0x4
c001ed09:	eb 5c                	jmp    c001ed67 <FAT::mkdir(char const*)+0x73>
c001ed0b:	83 ec 08             	sub    esp,0x8
c001ed0e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ed15:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ed19:	50                   	push   eax
c001ed1a:	e8 4e 1a fe ff       	call   c000076d <strcpy>
c001ed1f:	83 c4 10             	add    esp,0x10
c001ed22:	83 ec 08             	sub    esp,0x8
c001ed25:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ed29:	50                   	push   eax
c001ed2a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ed31:	e8 3c fa ff ff       	call   c001e772 <FAT::fixFilepath(char*)>
c001ed36:	83 c4 10             	add    esp,0x10
c001ed39:	83 ec 0c             	sub    esp,0xc
c001ed3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ed40:	50                   	push   eax
c001ed41:	e8 0a 77 fe ff       	call   c0006450 <f_mkdir>
c001ed46:	83 c4 10             	add    esp,0x10
c001ed49:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ed50:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ed57:	85 c0                	test   eax,eax
c001ed59:	75 07                	jne    c001ed62 <FAT::mkdir(char const*)+0x6e>
c001ed5b:	b8 00 00 00 00       	mov    eax,0x0
c001ed60:	eb 05                	jmp    c001ed67 <FAT::mkdir(char const*)+0x73>
c001ed62:	b8 01 00 00 00       	mov    eax,0x1
c001ed67:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ed6d:	c3                   	ret    

c001ed6e <FAT::exists(char const*)>:
c001ed6e:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ed74:	83 ec 08             	sub    esp,0x8
c001ed77:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ed7e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ed82:	50                   	push   eax
c001ed83:	e8 e5 19 fe ff       	call   c000076d <strcpy>
c001ed88:	83 c4 10             	add    esp,0x10
c001ed8b:	83 ec 08             	sub    esp,0x8
c001ed8e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ed92:	50                   	push   eax
c001ed93:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ed9a:	e8 d3 f9 ff ff       	call   c001e772 <FAT::fixFilepath(char*)>
c001ed9f:	83 c4 10             	add    esp,0x10
c001eda2:	83 ec 08             	sub    esp,0x8
c001eda5:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001edac:	50                   	push   eax
c001edad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001edb1:	50                   	push   eax
c001edb2:	e8 c4 71 fe ff       	call   c0005f7b <f_stat>
c001edb7:	83 c4 10             	add    esp,0x10
c001edba:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001edc1:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001edc8:	85 c0                	test   eax,eax
c001edca:	75 04                	jne    c001edd0 <FAT::exists(char const*)+0x62>
c001edcc:	b0 01                	mov    al,0x1
c001edce:	eb 02                	jmp    c001edd2 <FAT::exists(char const*)+0x64>
c001edd0:	b0 00                	mov    al,0x0
c001edd2:	81 c4 2c 02 00 00    	add    esp,0x22c
c001edd8:	c3                   	ret    
c001edd9:	90                   	nop

c001edda <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001edda:	b8 08 00 00 00       	mov    eax,0x8
c001eddf:	c3                   	ret    

c001ede0 <ISO9660::seek(void*, unsigned long long)>:
c001ede0:	53                   	push   ebx
c001ede1:	b8 04 00 00 00       	mov    eax,0x4
c001ede6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001edea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001edee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001edf2:	85 d2                	test   edx,edx
c001edf4:	74 17                	je     c001ee0d <ISO9660::seek(void*, unsigned long long)+0x2d>
c001edf6:	89 c8                	mov    eax,ecx
c001edf8:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001edfb:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001edfe:	b8 01 00 00 00       	mov    eax,0x1
c001ee03:	73 08                	jae    c001ee0d <ISO9660::seek(void*, unsigned long long)+0x2d>
c001ee05:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001ee08:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001ee0b:	31 c0                	xor    eax,eax
c001ee0d:	5b                   	pop    ebx
c001ee0e:	c3                   	ret    
c001ee0f:	90                   	nop

c001ee10 <ISO9660::tell(void*, unsigned long long*)>:
c001ee10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ee14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee18:	85 d2                	test   edx,edx
c001ee1a:	74 12                	je     c001ee2e <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001ee1c:	85 c0                	test   eax,eax
c001ee1e:	74 0e                	je     c001ee2e <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001ee20:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ee23:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001ee26:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ee29:	89 10                	mov    DWORD PTR [eax],edx
c001ee2b:	31 c0                	xor    eax,eax
c001ee2d:	c3                   	ret    
c001ee2e:	b8 04 00 00 00       	mov    eax,0x4
c001ee33:	c3                   	ret    

c001ee34 <ISO9660::getName()>:
c001ee34:	b8 74 8b 02 c0       	mov    eax,0xc0028b74
c001ee39:	c3                   	ret    

c001ee3a <ISO9660::stat(void*, unsigned long long*)>:
c001ee3a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ee3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee42:	85 d2                	test   edx,edx
c001ee44:	74 12                	je     c001ee58 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ee46:	85 c0                	test   eax,eax
c001ee48:	74 0e                	je     c001ee58 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ee4a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001ee4d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001ee50:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ee53:	89 10                	mov    DWORD PTR [eax],edx
c001ee55:	31 c0                	xor    eax,eax
c001ee57:	c3                   	ret    
c001ee58:	b8 04 00 00 00       	mov    eax,0x4
c001ee5d:	c3                   	ret    

c001ee5e <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001ee5e:	b8 01 00 00 00       	mov    eax,0x1
c001ee63:	c3                   	ret    

c001ee64 <ISO9660::unlink(char const*)>:
c001ee64:	b8 01 00 00 00       	mov    eax,0x1
c001ee69:	c3                   	ret    

c001ee6a <ISO9660::write(void*, unsigned long, void*, int*)>:
c001ee6a:	b8 01 00 00 00       	mov    eax,0x1
c001ee6f:	c3                   	ret    

c001ee70 <ISO9660::rename(char const*, char const*)>:
c001ee70:	b8 01 00 00 00       	mov    eax,0x1
c001ee75:	c3                   	ret    

c001ee76 <ISO9660::mkdir(char const*)>:
c001ee76:	b8 01 00 00 00       	mov    eax,0x1
c001ee7b:	c3                   	ret    

c001ee7c <ISO9660::close(void*)>:
c001ee7c:	83 ec 0c             	sub    esp,0xc
c001ee7f:	b8 04 00 00 00       	mov    eax,0x4
c001ee84:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee88:	85 d2                	test   edx,edx
c001ee8a:	74 0e                	je     c001ee9a <ISO9660::close(void*)+0x1e>
c001ee8c:	83 ec 0c             	sub    esp,0xc
c001ee8f:	52                   	push   edx
c001ee90:	e8 c3 02 ff ff       	call   c000f158 <free>
c001ee95:	83 c4 10             	add    esp,0x10
c001ee98:	31 c0                	xor    eax,eax
c001ee9a:	83 c4 0c             	add    esp,0xc
c001ee9d:	c3                   	ret    

c001ee9e <ISO9660::closeDir(void*)>:
c001ee9e:	83 ec 0c             	sub    esp,0xc
c001eea1:	b8 04 00 00 00       	mov    eax,0x4
c001eea6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eeaa:	85 d2                	test   edx,edx
c001eeac:	74 0e                	je     c001eebc <ISO9660::closeDir(void*)+0x1e>
c001eeae:	83 ec 0c             	sub    esp,0xc
c001eeb1:	52                   	push   edx
c001eeb2:	e8 a1 02 ff ff       	call   c000f158 <free>
c001eeb7:	83 c4 10             	add    esp,0x10
c001eeba:	31 c0                	xor    eax,eax
c001eebc:	83 c4 0c             	add    esp,0xc
c001eebf:	c3                   	ret    

c001eec0 <ISO9660::~ISO9660()>:
c001eec0:	83 ec 0c             	sub    esp,0xc
c001eec3:	ba c8 8b 02 c0       	mov    edx,0xc0028bc8
c001eec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eecc:	89 10                	mov    DWORD PTR [eax],edx
c001eece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed2:	83 ec 0c             	sub    esp,0xc
c001eed5:	50                   	push   eax
c001eed6:	e8 9f 36 ff ff       	call   c001257a <Filesystem::~Filesystem()>
c001eedb:	83 c4 10             	add    esp,0x10
c001eede:	90                   	nop
c001eedf:	83 c4 0c             	add    esp,0xc
c001eee2:	c3                   	ret    
c001eee3:	90                   	nop

c001eee4 <ISO9660::~ISO9660()>:
c001eee4:	83 ec 0c             	sub    esp,0xc
c001eee7:	83 ec 0c             	sub    esp,0xc
c001eeea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eeee:	e8 cd ff ff ff       	call   c001eec0 <ISO9660::~ISO9660()>
c001eef3:	83 c4 10             	add    esp,0x10
c001eef6:	83 ec 08             	sub    esp,0x8
c001eef9:	6a 08                	push   0x8
c001eefb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eeff:	e8 6d 32 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c001ef04:	83 c4 10             	add    esp,0x10
c001ef07:	83 c4 0c             	add    esp,0xc
c001ef0a:	c3                   	ret    

c001ef0b <__memmem(unsigned char*, int, unsigned char*, int)>:
c001ef0b:	55                   	push   ebp
c001ef0c:	31 c9                	xor    ecx,ecx
c001ef0e:	57                   	push   edi
c001ef0f:	56                   	push   esi
c001ef10:	53                   	push   ebx
c001ef11:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001ef15:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ef19:	89 eb                	mov    ebx,ebp
c001ef1b:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001ef1f:	39 ce                	cmp    esi,ecx
c001ef21:	7e 17                	jle    c001ef3a <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001ef23:	31 d2                	xor    edx,edx
c001ef25:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001ef29:	7d 13                	jge    c001ef3e <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001ef2b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ef2f:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001ef32:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001ef35:	75 0d                	jne    c001ef44 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001ef37:	42                   	inc    edx
c001ef38:	eb eb                	jmp    c001ef25 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001ef3a:	31 c0                	xor    eax,eax
c001ef3c:	eb 0a                	jmp    c001ef48 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ef3e:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001ef42:	eb 04                	jmp    c001ef48 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ef44:	41                   	inc    ecx
c001ef45:	43                   	inc    ebx
c001ef46:	eb d7                	jmp    c001ef1f <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001ef48:	5b                   	pop    ebx
c001ef49:	5e                   	pop    esi
c001ef4a:	5f                   	pop    edi
c001ef4b:	5d                   	pop    ebp
c001ef4c:	c3                   	ret    

c001ef4d <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001ef4d:	56                   	push   esi
c001ef4e:	53                   	push   ebx
c001ef4f:	52                   	push   edx
c001ef50:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef54:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ef58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ef5c:	39 0d e0 b9 02 c0    	cmp    DWORD PTR ds:0xc002b9e0,ecx
c001ef62:	75 08                	jne    c001ef6c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001ef64:	38 05 a8 99 02 c0    	cmp    BYTE PTR ds:0xc00299a8,al
c001ef6a:	74 2b                	je     c001ef97 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001ef6c:	83 ec 0c             	sub    esp,0xc
c001ef6f:	a2 a8 99 02 c0       	mov    ds:0xc00299a8,al
c001ef74:	68 00 ba 02 c0       	push   0xc002ba00
c001ef79:	0f be c0             	movsx  eax,al
c001ef7c:	6a 01                	push   0x1
c001ef7e:	89 0d e0 b9 02 c0    	mov    DWORD PTR ds:0xc002b9e0,ecx
c001ef84:	31 db                	xor    ebx,ebx
c001ef86:	53                   	push   ebx
c001ef87:	51                   	push   ecx
c001ef88:	ff 34 85 fc a8 02 c0 	push   DWORD PTR [eax*4-0x3ffd5704]
c001ef8f:	e8 e8 68 ff ff       	call   c001587c <LogicalDisk::read(unsigned long long, int, void*)>
c001ef94:	83 c4 20             	add    esp,0x20
c001ef97:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001ef9f:	c7 44 24 14 00 ba 02 c0 	mov    DWORD PTR [esp+0x14],0xc002ba00
c001efa7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001efab:	58                   	pop    eax
c001efac:	5b                   	pop    ebx
c001efad:	5e                   	pop    esi
c001efae:	e9 e5 16 fe ff       	jmp    c0000698 <memcpy>
c001efb3:	90                   	nop

c001efb4 <ISO9660::tryMount(LogicalDisk*, int)>:
c001efb4:	81 ec 10 08 00 00    	sub    esp,0x810
c001efba:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001efc1:	83 c0 41             	add    eax,0x41
c001efc4:	0f be c0             	movsx  eax,al
c001efc7:	50                   	push   eax
c001efc8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001efcc:	50                   	push   eax
c001efcd:	6a 10                	push   0x10
c001efcf:	e8 79 ff ff ff       	call   c001ef4d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001efd4:	83 c4 10             	add    esp,0x10
c001efd7:	31 c0                	xor    eax,eax
c001efd9:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001efde:	75 1d                	jne    c001effd <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001efe0:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001efe5:	75 16                	jne    c001effd <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001efe7:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001efec:	75 0f                	jne    c001effd <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001efee:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001eff3:	75 08                	jne    c001effd <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001eff5:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001effa:	0f 94 c0             	sete   al
c001effd:	81 c4 0c 08 00 00    	add    esp,0x80c
c001f003:	c3                   	ret    

c001f004 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001f004:	55                   	push   ebp
c001f005:	57                   	push   edi
c001f006:	56                   	push   esi
c001f007:	53                   	push   ebx
c001f008:	81 ec 34 08 00 00    	sub    esp,0x834
c001f00e:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001f015:	55                   	push   ebp
c001f016:	68 8f 8b 02 c0       	push   0xc0028b8f
c001f01b:	e8 31 32 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001f020:	83 c4 10             	add    esp,0x10
c001f023:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001f02b:	0f 84 06 02 00 00    	je     c001f237 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001f031:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001f039:	0f 84 f8 01 00 00    	je     c001f237 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001f03f:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001f046:	b8 01 00 00 00       	mov    eax,0x1
c001f04b:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001f04f:	0f 85 e7 01 00 00    	jne    c001f23c <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001f055:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001f058:	31 d2                	xor    edx,edx
c001f05a:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001f05d:	89 e9                	mov    ecx,ebp
c001f05f:	89 d3                	mov    ebx,edx
c001f061:	01 f1                	add    ecx,esi
c001f063:	11 fb                	adc    ebx,edi
c001f065:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001f069:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001f06d:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001f074:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001f077:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001f07a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f07e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001f082:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f086:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f08a:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001f08e:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001f092:	72 19                	jb     c001f0ad <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001f094:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f09c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f0a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001f0a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f0a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f0ab:	eb 13                	jmp    c001f0c0 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001f0ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f0b1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f0b5:	29 f0                	sub    eax,esi
c001f0b7:	19 fa                	sbb    edx,edi
c001f0b9:	89 04 24             	mov    DWORD PTR [esp],eax
c001f0bc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f0c0:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001f0c7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001f0ca:	8b 00                	mov    eax,DWORD PTR [eax]
c001f0cc:	53                   	push   ebx
c001f0cd:	0f a4 c2 0b          	shld   edx,eax,0xb
c001f0d1:	c1 e0 0b             	shl    eax,0xb
c001f0d4:	01 c6                	add    esi,eax
c001f0d6:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f0dd:	11 d7                	adc    edi,edx
c001f0df:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f0e3:	89 fa                	mov    edx,edi
c001f0e5:	50                   	push   eax
c001f0e6:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f0ea:	50                   	push   eax
c001f0eb:	89 f0                	mov    eax,esi
c001f0ed:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f0f1:	50                   	push   eax
c001f0f2:	e8 56 fe ff ff       	call   c001ef4d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f0f7:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001f0fe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f102:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001f105:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001f109:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001f10f:	83 c4 10             	add    esp,0x10
c001f112:	b8 00 08 00 00       	mov    eax,0x800
c001f117:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001f11b:	29 d0                	sub    eax,edx
c001f11d:	39 c1                	cmp    ecx,eax
c001f11f:	83 db 00             	sbb    ebx,0x0
c001f122:	7d 19                	jge    c001f13d <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001f124:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001f129:	75 16                	jne    c001f141 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001f12b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f132:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f138:	e9 f6 00 00 00       	jmp    c001f233 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001f13d:	89 c5                	mov    ebp,eax
c001f13f:	eb 03                	jmp    c001f144 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001f141:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001f144:	51                   	push   ecx
c001f145:	55                   	push   ebp
c001f146:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001f14a:	50                   	push   eax
c001f14b:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001f152:	e8 41 15 fe ff       	call   c0000698 <memcpy>
c001f157:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f15b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f15f:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001f166:	01 e8                	add    eax,ebp
c001f168:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f16c:	89 e8                	mov    eax,ebp
c001f16e:	99                   	cdq    
c001f16f:	01 ee                	add    esi,ebp
c001f171:	11 d7                	adc    edi,edx
c001f173:	29 e9                	sub    ecx,ebp
c001f175:	19 d3                	sbb    ebx,edx
c001f177:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001f17b:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001f17f:	83 c4 10             	add    esp,0x10
c001f182:	b8 ff 07 00 00       	mov    eax,0x7ff
c001f187:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001f18a:	b8 00 00 00 00       	mov    eax,0x0
c001f18f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001f193:	7d 3f                	jge    c001f1d4 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001f195:	52                   	push   edx
c001f196:	89 fa                	mov    edx,edi
c001f198:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f19f:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f1a3:	50                   	push   eax
c001f1a4:	89 f0                	mov    eax,esi
c001f1a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f1aa:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f1ae:	50                   	push   eax
c001f1af:	e8 99 fd ff ff       	call   c001ef4d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f1b4:	81 c6 00 08 00 00    	add    esi,0x800
c001f1ba:	83 d7 00             	adc    edi,0x0
c001f1bd:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001f1c5:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001f1cd:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001f1d2:	eb ab                	jmp    c001f17f <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001f1d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1d8:	0b 04 24             	or     eax,DWORD PTR [esp]
c001f1db:	74 34                	je     c001f211 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001f1dd:	89 fa                	mov    edx,edi
c001f1df:	50                   	push   eax
c001f1e0:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f1e7:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f1eb:	50                   	push   eax
c001f1ec:	89 f0                	mov    eax,esi
c001f1ee:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001f1f2:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f1f6:	55                   	push   ebp
c001f1f7:	50                   	push   eax
c001f1f8:	e8 50 fd ff ff       	call   c001ef4d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f1fd:	83 c4 0c             	add    esp,0xc
c001f200:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001f204:	55                   	push   ebp
c001f205:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f209:	e8 8a 14 fe ff       	call   c0000698 <memcpy>
c001f20e:	83 c4 10             	add    esp,0x10
c001f211:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f218:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f21c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f220:	89 38                	mov    DWORD PTR [eax],edi
c001f222:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001f229:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f22d:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001f230:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f233:	31 c0                	xor    eax,eax
c001f235:	eb 05                	jmp    c001f23c <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001f237:	b8 04 00 00 00       	mov    eax,0x4
c001f23c:	81 c4 2c 08 00 00    	add    esp,0x82c
c001f242:	5b                   	pop    ebx
c001f243:	5e                   	pop    esi
c001f244:	5f                   	pop    edi
c001f245:	5d                   	pop    ebp
c001f246:	c3                   	ret    
c001f247:	90                   	nop

c001f248 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001f248:	55                   	push   ebp
c001f249:	57                   	push   edi
c001f24a:	56                   	push   esi
c001f24b:	53                   	push   ebx
c001f24c:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001f252:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001f259:	85 f6                	test   esi,esi
c001f25b:	0f 84 64 02 00 00    	je     c001f4c5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001f261:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001f269:	0f 84 56 02 00 00    	je     c001f4c5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001f26f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001f272:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001f275:	75 0a                	jne    c001f281 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001f277:	b8 07 00 00 00       	mov    eax,0x7
c001f27c:	e9 49 02 00 00       	jmp    c001f4ca <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001f281:	50                   	push   eax
c001f282:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001f286:	50                   	push   eax
c001f287:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001f28e:	53                   	push   ebx
c001f28f:	8b 06                	mov    eax,DWORD PTR [esi]
c001f291:	c1 e0 0b             	shl    eax,0xb
c001f294:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001f297:	c1 e8 0b             	shr    eax,0xb
c001f29a:	50                   	push   eax
c001f29b:	e8 ad fc ff ff       	call   c001ef4d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f2a0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f2a3:	83 c4 10             	add    esp,0x10
c001f2a6:	89 c1                	mov    ecx,eax
c001f2a8:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001f2ab:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f2b1:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001f2b4:	84 db                	test   bl,bl
c001f2b6:	0f 85 90 00 00 00    	jne    c001f34c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001f2bc:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001f2c2:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f2c8:	29 c7                	sub    edi,eax
c001f2ca:	89 fb                	mov    ebx,edi
c001f2cc:	c1 fb 1f             	sar    ebx,0x1f
c001f2cf:	01 f8                	add    eax,edi
c001f2d1:	11 da                	adc    edx,ebx
c001f2d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f2d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f2db:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001f2de:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001f2e1:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001f2e4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001f2e7:	89 04 24             	mov    DWORD PTR [esp],eax
c001f2ea:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f2ee:	89 d8                	mov    eax,ebx
c001f2f0:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f2f3:	ba 00 00 00 00       	mov    edx,0x0
c001f2f8:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001f2fc:	b8 00 00 00 00       	mov    eax,0x0
c001f301:	73 0b                	jae    c001f30e <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001f303:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f306:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f30a:	29 f8                	sub    eax,edi
c001f30c:	19 da                	sbb    edx,ebx
c001f30e:	89 d3                	mov    ebx,edx
c001f310:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001f313:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001f316:	09 c3                	or     ebx,eax
c001f318:	0f 84 59 ff ff ff    	je     c001f277 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001f31e:	55                   	push   ebp
c001f31f:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001f323:	50                   	push   eax
c001f324:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001f32b:	53                   	push   ebx
c001f32c:	8b 06                	mov    eax,DWORD PTR [esi]
c001f32e:	c1 e0 0b             	shl    eax,0xb
c001f331:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001f335:	c1 e8 0b             	shr    eax,0xb
c001f338:	50                   	push   eax
c001f339:	e8 0f fc ff ff       	call   c001ef4d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f33e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f341:	83 c4 10             	add    esp,0x10
c001f344:	25 ff 07 00 00       	and    eax,0x7ff
c001f349:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001f34c:	57                   	push   edi
c001f34d:	6a 28                	push   0x28
c001f34f:	6a 00                	push   0x0
c001f351:	8d 44 24 24          	lea    eax,[esp+0x24]
c001f355:	50                   	push   eax
c001f356:	e8 73 13 fe ff       	call   c00006ce <memset>
c001f35b:	31 d2                	xor    edx,edx
c001f35d:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001f360:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f366:	89 f8                	mov    eax,edi
c001f368:	83 c0 21             	add    eax,0x21
c001f36b:	83 d2 00             	adc    edx,0x0
c001f36e:	89 c7                	mov    edi,eax
c001f370:	89 d5                	mov    ebp,edx
c001f372:	83 c4 10             	add    esp,0x10
c001f375:	31 c9                	xor    ecx,ecx
c001f377:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001f37e:	83 f9 28             	cmp    ecx,0x28
c001f381:	88 04 24             	mov    BYTE PTR [esp],al
c001f384:	0f 94 c2             	sete   dl
c001f387:	88 d0                	mov    al,dl
c001f389:	ba ff 07 00 00       	mov    edx,0x7ff
c001f38e:	39 fa                	cmp    edx,edi
c001f390:	ba 00 00 00 00       	mov    edx,0x0
c001f395:	19 ea                	sbb    edx,ebp
c001f397:	0f 92 c2             	setb   dl
c001f39a:	09 c2                	or     edx,eax
c001f39c:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001f3a0:	0f 94 c0             	sete   al
c001f3a3:	08 d0                	or     al,dl
c001f3a5:	75 16                	jne    c001f3bd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001f3a7:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001f3ab:	74 10                	je     c001f3bd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001f3ad:	8a 04 24             	mov    al,BYTE PTR [esp]
c001f3b0:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001f3b4:	41                   	inc    ecx
c001f3b5:	83 c7 01             	add    edi,0x1
c001f3b8:	83 d5 00             	adc    ebp,0x0
c001f3bb:	eb ba                	jmp    c001f377 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001f3bd:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001f3c4:	83 ec 0c             	sub    esp,0xc
c001f3c7:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001f3cb:	57                   	push   edi
c001f3cc:	e8 1a 13 fe ff       	call   c00006eb <strlen>
c001f3d1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001f3d9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001f3dd:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001f3e4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f3e7:	5a                   	pop    edx
c001f3e8:	25 ff 07 00 00       	and    eax,0x7ff
c001f3ed:	01 c8                	add    eax,ecx
c001f3ef:	59                   	pop    ecx
c001f3f0:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001f3f6:	83 e0 02             	and    eax,0x2
c001f3f9:	3c 01                	cmp    al,0x1
c001f3fb:	19 c0                	sbb    eax,eax
c001f3fd:	83 c0 02             	add    eax,0x2
c001f400:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001f404:	57                   	push   edi
c001f405:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001f409:	50                   	push   eax
c001f40a:	e8 5e 13 fe ff       	call   c000076d <strcpy>
c001f40f:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001f413:	83 c4 10             	add    esp,0x10
c001f416:	84 c0                	test   al,al
c001f418:	75 21                	jne    c001f43b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001f41a:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001f422:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001f42a:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001f432:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001f439:	eb 28                	jmp    c001f463 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001f43b:	fe c8                	dec    al
c001f43d:	75 24                	jne    c001f463 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001f43f:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001f447:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001f44f:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001f457:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001f45e:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001f463:	0f b6 fb             	movzx  edi,bl
c001f466:	31 db                	xor    ebx,ebx
c001f468:	50                   	push   eax
c001f469:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001f470:	8d 44 24 48          	lea    eax,[esp+0x48]
c001f474:	50                   	push   eax
c001f475:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001f47c:	e8 17 12 fe ff       	call   c0000698 <memcpy>
c001f481:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001f488:	89 f9                	mov    ecx,edi
c001f48a:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001f490:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001f493:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001f496:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001f499:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001f49c:	83 c4 10             	add    esp,0x10
c001f49f:	39 c7                	cmp    edi,eax
c001f4a1:	89 df                	mov    edi,ebx
c001f4a3:	19 d7                	sbb    edi,edx
c001f4a5:	72 10                	jb     c001f4b7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001f4a7:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001f4ae:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001f4b5:	eb 0a                	jmp    c001f4c1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001f4b7:	29 c8                	sub    eax,ecx
c001f4b9:	19 da                	sbb    edx,ebx
c001f4bb:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001f4be:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001f4c1:	31 c0                	xor    eax,eax
c001f4c3:	eb 05                	jmp    c001f4ca <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001f4c5:	b8 04 00 00 00       	mov    eax,0x4
c001f4ca:	81 c4 5c 09 00 00    	add    esp,0x95c
c001f4d0:	5b                   	pop    ebx
c001f4d1:	5e                   	pop    esi
c001f4d2:	5f                   	pop    edi
c001f4d3:	5d                   	pop    ebp
c001f4d4:	c3                   	ret    

c001f4d5 <readRoot(unsigned int*, unsigned int*, char)>:
c001f4d5:	81 ec 40 08 00 00    	sub    esp,0x840
c001f4db:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001f4e3:	50                   	push   eax
c001f4e4:	8d 44 24 38          	lea    eax,[esp+0x38]
c001f4e8:	50                   	push   eax
c001f4e9:	6a 10                	push   0x10
c001f4eb:	e8 5d fa ff ff       	call   c001ef4d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f4f0:	83 c4 0c             	add    esp,0xc
c001f4f3:	6a 22                	push   0x22
c001f4f5:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001f4fc:	50                   	push   eax
c001f4fd:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001f501:	50                   	push   eax
c001f502:	e8 91 11 fe ff       	call   c0000698 <memcpy>
c001f507:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f50e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001f512:	89 10                	mov    DWORD PTR [eax],edx
c001f514:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001f51b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001f51f:	89 10                	mov    DWORD PTR [eax],edx
c001f521:	b0 01                	mov    al,0x1
c001f523:	81 c4 4c 08 00 00    	add    esp,0x84c
c001f529:	c3                   	ret    

c001f52a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001f52a:	55                   	push   ebp
c001f52b:	57                   	push   edi
c001f52c:	56                   	push   esi
c001f52d:	53                   	push   ebx
c001f52e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f534:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001f53b:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001f542:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f546:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001f54a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f54e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f552:	75 03                	jne    c001f557 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001f554:	83 c3 02             	add    ebx,0x2
c001f557:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001f55a:	75 03                	jne    c001f55f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001f55c:	43                   	inc    ebx
c001f55d:	eb f8                	jmp    c001f557 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001f55f:	51                   	push   ecx
c001f560:	68 00 01 00 00       	push   0x100
c001f565:	6a 00                	push   0x0
c001f567:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f56b:	50                   	push   eax
c001f56c:	e8 5d 11 fe ff       	call   c00006ce <memset>
c001f571:	83 c4 10             	add    esp,0x10
c001f574:	31 d2                	xor    edx,edx
c001f576:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001f579:	84 c0                	test   al,al
c001f57b:	74 21                	je     c001f59e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001f57d:	3c 2f                	cmp    al,0x2f
c001f57f:	75 0b                	jne    c001f58c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001f581:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001f585:	bd 01 00 00 00       	mov    ebp,0x1
c001f58a:	eb 14                	jmp    c001f5a0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001f58c:	8d 48 9f             	lea    ecx,[eax-0x61]
c001f58f:	80 f9 19             	cmp    cl,0x19
c001f592:	77 03                	ja     c001f597 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001f594:	83 e8 20             	sub    eax,0x20
c001f597:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001f59b:	42                   	inc    edx
c001f59c:	eb d8                	jmp    c001f576 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001f59e:	31 ed                	xor    ebp,ebp
c001f5a0:	83 ec 0c             	sub    esp,0xc
c001f5a3:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001f5aa:	e8 99 fb fe ff       	call   c000f148 <malloc>
c001f5af:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001f5b6:	89 c6                	mov    esi,eax
c001f5b8:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001f5be:	c1 ef 0b             	shr    edi,0xb
c001f5c1:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001f5c8:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001f5cc:	83 c4 10             	add    esp,0x10
c001f5cf:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001f5d4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f5d8:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001f5df:	74 28                	je     c001f609 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001f5e1:	52                   	push   edx
c001f5e2:	57                   	push   edi
c001f5e3:	50                   	push   eax
c001f5e4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f5e8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001f5ef:	e8 59 f9 ff ff       	call   c001ef4d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f5f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f5f8:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001f5ff:	05 00 08 00 00       	add    eax,0x800
c001f604:	83 c4 10             	add    esp,0x10
c001f607:	eb cb                	jmp    c001f5d4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001f609:	83 ec 0c             	sub    esp,0xc
c001f60c:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001f610:	57                   	push   edi
c001f611:	e8 d5 10 fe ff       	call   c00006eb <strlen>
c001f616:	50                   	push   eax
c001f617:	57                   	push   edi
c001f618:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001f61f:	56                   	push   esi
c001f620:	e8 e6 f8 ff ff       	call   c001ef0b <__memmem(unsigned char*, int, unsigned char*, int)>
c001f625:	83 c4 20             	add    esp,0x20
c001f628:	85 c0                	test   eax,eax
c001f62a:	75 13                	jne    c001f63f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001f62c:	83 ec 0c             	sub    esp,0xc
c001f62f:	56                   	push   esi
c001f630:	e8 23 fb fe ff       	call   c000f158 <free>
c001f635:	83 c4 10             	add    esp,0x10
c001f638:	31 c0                	xor    eax,eax
c001f63a:	e9 b3 00 00 00       	jmp    c001f6f2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001f63f:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001f643:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001f647:	c1 e7 08             	shl    edi,0x8
c001f64a:	c1 e2 10             	shl    edx,0x10
c001f64d:	09 d7                	or     edi,edx
c001f64f:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001f653:	09 d7                	or     edi,edx
c001f655:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001f659:	c1 e2 18             	shl    edx,0x18
c001f65c:	09 d7                	or     edi,edx
c001f65e:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001f662:	89 d1                	mov    ecx,edx
c001f664:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001f668:	c1 e1 08             	shl    ecx,0x8
c001f66b:	c1 e2 10             	shl    edx,0x10
c001f66e:	09 ca                	or     edx,ecx
c001f670:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001f674:	09 ca                	or     edx,ecx
c001f676:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001f67a:	c1 e1 18             	shl    ecx,0x18
c001f67d:	09 ca                	or     edx,ecx
c001f67f:	89 e9                	mov    ecx,ebp
c001f681:	84 c9                	test   cl,cl
c001f683:	74 3c                	je     c001f6c1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001f685:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f689:	83 ec 0c             	sub    esp,0xc
c001f68c:	56                   	push   esi
c001f68d:	e8 c6 fa fe ff       	call   c000f158 <free>
c001f692:	83 c4 0c             	add    esp,0xc
c001f695:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f69c:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001f6a1:	50                   	push   eax
c001f6a2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f6a9:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f6b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f6b4:	52                   	push   edx
c001f6b5:	57                   	push   edi
c001f6b6:	53                   	push   ebx
c001f6b7:	e8 6e fe ff ff       	call   c001f52a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001f6bc:	83 c4 20             	add    esp,0x20
c001f6bf:	eb 31                	jmp    c001f6f2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001f6c1:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001f6c4:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001f6cb:	d0 e8                	shr    al,1
c001f6cd:	89 3b                	mov    DWORD PTR [ebx],edi
c001f6cf:	83 e0 01             	and    eax,0x1
c001f6d2:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001f6d9:	83 ec 0c             	sub    esp,0xc
c001f6dc:	89 13                	mov    DWORD PTR [ebx],edx
c001f6de:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001f6e5:	89 03                	mov    DWORD PTR [ebx],eax
c001f6e7:	56                   	push   esi
c001f6e8:	e8 6b fa fe ff       	call   c000f158 <free>
c001f6ed:	83 c4 10             	add    esp,0x10
c001f6f0:	b0 01                	mov    al,0x1
c001f6f2:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f6f8:	5b                   	pop    ebx
c001f6f9:	5e                   	pop    esi
c001f6fa:	5f                   	pop    edi
c001f6fb:	5d                   	pop    ebp
c001f6fc:	c3                   	ret    

c001f6fd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001f6fd:	55                   	push   ebp
c001f6fe:	57                   	push   edi
c001f6ff:	56                   	push   esi
c001f700:	53                   	push   ebx
c001f701:	83 ec 20             	sub    esp,0x20
c001f704:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001f708:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001f70c:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f710:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001f718:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f720:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001f725:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001f72b:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001f731:	57                   	push   edi
c001f732:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f736:	50                   	push   eax
c001f737:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f73b:	50                   	push   eax
c001f73c:	e8 94 fd ff ff       	call   c001f4d5 <readRoot(unsigned int*, unsigned int*, char)>
c001f741:	5a                   	pop    edx
c001f742:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f746:	e8 a0 0f fe ff       	call   c00006eb <strlen>
c001f74b:	83 c4 10             	add    esp,0x10
c001f74e:	83 f8 03             	cmp    eax,0x3
c001f751:	77 17                	ja     c001f76a <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001f753:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f757:	89 03                	mov    DWORD PTR [ebx],eax
c001f759:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f75d:	89 06                	mov    DWORD PTR [esi],eax
c001f75f:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001f766:	b0 01                	mov    al,0x1
c001f768:	eb 19                	jmp    c001f783 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001f76a:	50                   	push   eax
c001f76b:	55                   	push   ebp
c001f76c:	57                   	push   edi
c001f76d:	56                   	push   esi
c001f76e:	53                   	push   ebx
c001f76f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001f773:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001f777:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f77b:	e8 aa fd ff ff       	call   c001f52a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001f780:	83 c4 20             	add    esp,0x20
c001f783:	83 c4 1c             	add    esp,0x1c
c001f786:	5b                   	pop    ebx
c001f787:	5e                   	pop    esi
c001f788:	5f                   	pop    edi
c001f789:	5d                   	pop    ebp
c001f78a:	c3                   	ret    
c001f78b:	90                   	nop

c001f78c <ISO9660::open(char const*, void**, FileOpenMode)>:
c001f78c:	57                   	push   edi
c001f78d:	56                   	push   esi
c001f78e:	53                   	push   ebx
c001f78f:	83 ec 10             	sub    esp,0x10
c001f792:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001f796:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001f79a:	85 ff                	test   edi,edi
c001f79c:	74 7b                	je     c001f819 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001f79e:	85 f6                	test   esi,esi
c001f7a0:	74 77                	je     c001f819 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001f7a2:	83 ec 0c             	sub    esp,0xc
c001f7a5:	6a 1c                	push   0x1c
c001f7a7:	e8 9c f9 fe ff       	call   c000f148 <malloc>
c001f7ac:	89 07                	mov    DWORD PTR [edi],eax
c001f7ae:	89 c3                	mov    ebx,eax
c001f7b0:	58                   	pop    eax
c001f7b1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f7b5:	50                   	push   eax
c001f7b6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001f7b9:	50                   	push   eax
c001f7ba:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f7be:	50                   	push   eax
c001f7bf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f7c3:	50                   	push   eax
c001f7c4:	56                   	push   esi
c001f7c5:	e8 33 ff ff ff       	call   c001f6fd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f7ca:	83 c4 20             	add    esp,0x20
c001f7cd:	84 c0                	test   al,al
c001f7cf:	74 07                	je     c001f7d8 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001f7d1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f7d6:	74 0b                	je     c001f7e3 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001f7d8:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001f7dc:	b8 01 00 00 00       	mov    eax,0x1
c001f7e1:	eb 3b                	jmp    c001f81e <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001f7e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7e7:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001f7eb:	89 03                	mov    DWORD PTR [ebx],eax
c001f7ed:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001f7f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7f8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001f7ff:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f806:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f809:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f810:	8a 06                	mov    al,BYTE PTR [esi]
c001f812:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001f815:	31 c0                	xor    eax,eax
c001f817:	eb 05                	jmp    c001f81e <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001f819:	b8 04 00 00 00       	mov    eax,0x4
c001f81e:	83 c4 10             	add    esp,0x10
c001f821:	5b                   	pop    ebx
c001f822:	5e                   	pop    esi
c001f823:	5f                   	pop    edi
c001f824:	c3                   	ret    
c001f825:	90                   	nop

c001f826 <ISO9660::exists(char const*)>:
c001f826:	83 ec 28             	sub    esp,0x28
c001f829:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f82d:	8d 54 24 18          	lea    edx,[esp+0x18]
c001f831:	52                   	push   edx
c001f832:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001f835:	52                   	push   edx
c001f836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001f83a:	52                   	push   edx
c001f83b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001f83f:	52                   	push   edx
c001f840:	50                   	push   eax
c001f841:	e8 b7 fe ff ff       	call   c001f6fd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f846:	83 c4 3c             	add    esp,0x3c
c001f849:	c3                   	ret    

c001f84a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001f84a:	56                   	push   esi
c001f84b:	53                   	push   ebx
c001f84c:	83 ec 14             	sub    esp,0x14
c001f84f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001f853:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001f857:	85 db                	test   ebx,ebx
c001f859:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001f85d:	0f 94 c2             	sete   dl
c001f860:	85 f6                	test   esi,esi
c001f862:	0f 94 c0             	sete   al
c001f865:	08 c2                	or     dl,al
c001f867:	75 68                	jne    c001f8d1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001f869:	85 c9                	test   ecx,ecx
c001f86b:	74 64                	je     c001f8d1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001f86d:	83 ec 0c             	sub    esp,0xc
c001f870:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001f873:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f877:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001f87d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f884:	50                   	push   eax
c001f885:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001f888:	50                   	push   eax
c001f889:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f88d:	50                   	push   eax
c001f88e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f892:	50                   	push   eax
c001f893:	51                   	push   ecx
c001f894:	e8 64 fe ff ff       	call   c001f6fd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f899:	83 c4 20             	add    esp,0x20
c001f89c:	ba 01 00 00 00       	mov    edx,0x1
c001f8a1:	84 c0                	test   al,al
c001f8a3:	74 31                	je     c001f8d6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f8a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8a9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f8b0:	89 03                	mov    DWORD PTR [ebx],eax
c001f8b2:	ba 00 00 00 00       	mov    edx,0x0
c001f8b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8bb:	85 c0                	test   eax,eax
c001f8bd:	0f 95 06             	setne  BYTE PTR [esi]
c001f8c0:	74 14                	je     c001f8d6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f8c2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001f8c8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f8cf:	eb 05                	jmp    c001f8d6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f8d1:	ba 04 00 00 00       	mov    edx,0x4
c001f8d6:	83 c4 14             	add    esp,0x14
c001f8d9:	89 d0                	mov    eax,edx
c001f8db:	5b                   	pop    ebx
c001f8dc:	5e                   	pop    esi
c001f8dd:	c3                   	ret    

c001f8de <ISO9660::openDir(char const*, void**)>:
c001f8de:	57                   	push   edi
c001f8df:	56                   	push   esi
c001f8e0:	53                   	push   ebx
c001f8e1:	83 ec 10             	sub    esp,0x10
c001f8e4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001f8e8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001f8ec:	85 ff                	test   edi,edi
c001f8ee:	0f 84 95 00 00 00    	je     c001f989 <ISO9660::openDir(char const*, void**)+0xab>
c001f8f4:	85 f6                	test   esi,esi
c001f8f6:	0f 84 8d 00 00 00    	je     c001f989 <ISO9660::openDir(char const*, void**)+0xab>
c001f8fc:	83 ec 0c             	sub    esp,0xc
c001f8ff:	6a 1c                	push   0x1c
c001f901:	e8 42 f8 fe ff       	call   c000f148 <malloc>
c001f906:	89 07                	mov    DWORD PTR [edi],eax
c001f908:	89 c3                	mov    ebx,eax
c001f90a:	59                   	pop    ecx
c001f90b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f90f:	50                   	push   eax
c001f910:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001f913:	50                   	push   eax
c001f914:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f918:	50                   	push   eax
c001f919:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f91d:	50                   	push   eax
c001f91e:	56                   	push   esi
c001f91f:	e8 d9 fd ff ff       	call   c001f6fd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f924:	83 c4 20             	add    esp,0x20
c001f927:	84 c0                	test   al,al
c001f929:	74 07                	je     c001f932 <ISO9660::openDir(char const*, void**)+0x54>
c001f92b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f930:	75 21                	jne    c001f953 <ISO9660::openDir(char const*, void**)+0x75>
c001f932:	0f b6 c0             	movzx  eax,al
c001f935:	52                   	push   edx
c001f936:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001f93a:	50                   	push   eax
c001f93b:	68 a2 8b 02 c0       	push   0xc0028ba2
c001f940:	e8 0c 29 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001f945:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001f949:	83 c4 10             	add    esp,0x10
c001f94c:	b8 01 00 00 00       	mov    eax,0x1
c001f951:	eb 3b                	jmp    c001f98e <ISO9660::openDir(char const*, void**)+0xb0>
c001f953:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f957:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001f95b:	89 03                	mov    DWORD PTR [ebx],eax
c001f95d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001f964:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f968:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001f96f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f976:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f980:	8a 06                	mov    al,BYTE PTR [esi]
c001f982:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001f985:	31 c0                	xor    eax,eax
c001f987:	eb 05                	jmp    c001f98e <ISO9660::openDir(char const*, void**)+0xb0>
c001f989:	b8 04 00 00 00       	mov    eax,0x4
c001f98e:	83 c4 10             	add    esp,0x10
c001f991:	5b                   	pop    ebx
c001f992:	5e                   	pop    esi
c001f993:	5f                   	pop    edi
c001f994:	c3                   	ret    
c001f995:	90                   	nop

c001f996 <ISO9660::ISO9660()>:
c001f996:	83 ec 0c             	sub    esp,0xc
c001f999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f99d:	83 ec 0c             	sub    esp,0xc
c001f9a0:	50                   	push   eax
c001f9a1:	e8 b0 2b ff ff       	call   c0012556 <Filesystem::Filesystem()>
c001f9a6:	83 c4 10             	add    esp,0x10
c001f9a9:	ba c8 8b 02 c0       	mov    edx,0xc0028bc8
c001f9ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b2:	89 10                	mov    DWORD PTR [eax],edx
c001f9b4:	90                   	nop
c001f9b5:	83 c4 0c             	add    esp,0xc
c001f9b8:	c3                   	ret    
c001f9b9:	90                   	nop

c001f9ba <SoundChannel::~SoundChannel()>:
c001f9ba:	83 ec 0c             	sub    esp,0xc
c001f9bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001f9c4:	83 ec 0c             	sub    esp,0xc
c001f9c7:	50                   	push   eax
c001f9c8:	e8 8b f7 fe ff       	call   c000f158 <free>
c001f9cd:	83 c4 10             	add    esp,0x10
c001f9d0:	90                   	nop
c001f9d1:	83 c4 0c             	add    esp,0xc
c001f9d4:	c3                   	ret    
c001f9d5:	90                   	nop

c001f9d6 <SoundChannel::setSpeed(float)>:
c001f9d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f9de:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f9e1:	c3                   	ret    

c001f9e2 <SoundChannel::getSpeed()>:
c001f9e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9e6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001f9e9:	c3                   	ret    

c001f9ea <SoundChannel::setVolume(int)>:
c001f9ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9ee:	83 f8 64             	cmp    eax,0x64
c001f9f1:	7e 05                	jle    c001f9f8 <SoundChannel::setVolume(int)+0xe>
c001f9f3:	b8 64 00 00 00       	mov    eax,0x64
c001f9f8:	85 c0                	test   eax,eax
c001f9fa:	79 02                	jns    c001f9fe <SoundChannel::setVolume(int)+0x14>
c001f9fc:	31 c0                	xor    eax,eax
c001f9fe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fa02:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001fa05:	c3                   	ret    

c001fa06 <SoundChannel::getVolume()>:
c001fa06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa0a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001fa0d:	c3                   	ret    

c001fa0e <SoundChannel::pause()>:
c001fa0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa12:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001fa16:	c3                   	ret    
c001fa17:	90                   	nop

c001fa18 <SoundChannel::SoundChannel(int, int, int, int)>:
c001fa18:	83 ec 1c             	sub    esp,0x1c
c001fa1b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001fa1f:	e8 ea ff ff ff       	call   c001fa0e <SoundChannel::pause()>
c001fa24:	83 c4 04             	add    esp,0x4
c001fa27:	6a 50                	push   0x50
c001fa29:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001fa2d:	e8 b8 ff ff ff       	call   c001f9ea <SoundChannel::setVolume(int)>
c001fa32:	83 c4 08             	add    esp,0x8
c001fa35:	a1 40 8c 02 c0       	mov    eax,ds:0xc0028c40
c001fa3a:	50                   	push   eax
c001fa3b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001fa3f:	e8 92 ff ff ff       	call   c001f9d6 <SoundChannel::setSpeed(float)>
c001fa44:	83 c4 08             	add    esp,0x8
c001fa47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa4b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001fa4f:	89 10                	mov    DWORD PTR [eax],edx
c001fa51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa55:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fa59:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa60:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001fa64:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa67:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001fa6c:	75 23                	jne    c001fa91 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c001fa6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa72:	8b 10                	mov    edx,DWORD PTR [eax]
c001fa74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa7b:	0f af c2             	imul   eax,edx
c001fa7e:	85 c0                	test   eax,eax
c001fa80:	79 03                	jns    c001fa85 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c001fa82:	83 c0 03             	add    eax,0x3
c001fa85:	c1 f8 02             	sar    eax,0x2
c001fa88:	05 a0 0f 00 00       	add    eax,0xfa0
c001fa8d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001fa91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa95:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fa99:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001fa9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001faa0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001faa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001faab:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001fab2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fab6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001fab9:	c1 e0 02             	shl    eax,0x2
c001fabc:	83 ec 0c             	sub    esp,0xc
c001fabf:	50                   	push   eax
c001fac0:	e8 83 f6 fe ff       	call   c000f148 <malloc>
c001fac5:	83 c4 10             	add    esp,0x10
c001fac8:	89 c2                	mov    edx,eax
c001faca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001face:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001fad1:	83 ec 04             	sub    esp,0x4
c001fad4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fad8:	50                   	push   eax
c001fad9:	6a 01                	push   0x1
c001fadb:	6a 04                	push   0x4
c001fadd:	e8 8e 8e fe ff       	call   c0008970 <src_new>
c001fae2:	83 c4 10             	add    esp,0x10
c001fae5:	89 c2                	mov    edx,eax
c001fae7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001faeb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001faee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faf2:	85 c0                	test   eax,eax
c001faf4:	74 10                	je     c001fb06 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c001faf6:	83 ec 0c             	sub    esp,0xc
c001faf9:	68 24 8c 02 c0       	push   0xc0028c24
c001fafe:	e8 ec 8e ff ff       	call   c00189ef <Krnl::panic(char const*)>
c001fb03:	83 c4 10             	add    esp,0x10
c001fb06:	a0 00 c6 02 c0       	mov    al,ds:0xc002c600
c001fb0b:	83 f0 01             	xor    eax,0x1
c001fb0e:	84 c0                	test   al,al
c001fb10:	74 57                	je     c001fb69 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c001fb12:	a1 44 8c 02 c0       	mov    eax,ds:0xc0028c44
c001fb17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fb1b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fb23:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c001fb2b:	7f 35                	jg     c001fb62 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c001fb2d:	83 ec 0c             	sub    esp,0xc
c001fb30:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fb34:	e8 4e 41 00 00       	call   c0023c87 <__floatsisf>
c001fb39:	83 c4 10             	add    esp,0x10
c001fb3c:	8b 15 44 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c44
c001fb42:	83 ec 08             	sub    esp,0x8
c001fb45:	52                   	push   edx
c001fb46:	50                   	push   eax
c001fb47:	e8 4d 3d 00 00       	call   c0023899 <__mulsf3>
c001fb4c:	83 c4 10             	add    esp,0x10
c001fb4f:	89 c2                	mov    edx,eax
c001fb51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb55:	89 14 85 00 c2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3e00],edx
c001fb5c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fb60:	eb c1                	jmp    c001fb23 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c001fb62:	c6 05 00 c6 02 c0 01 	mov    BYTE PTR ds:0xc002c600,0x1
c001fb69:	90                   	nop
c001fb6a:	83 c4 1c             	add    esp,0x1c
c001fb6d:	c3                   	ret    

c001fb6e <SoundChannel::play()>:
c001fb6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb72:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001fb76:	c3                   	ret    
c001fb77:	90                   	nop

c001fb78 <SoundChannel::paused()>:
c001fb78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb7c:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001fb7f:	c3                   	ret    

c001fb80 <SoundChannel::getSampleRate()>:
c001fb80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb84:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb86:	c3                   	ret    
c001fb87:	90                   	nop

c001fb88 <SoundChannel::getBits()>:
c001fb88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb8f:	c3                   	ret    

c001fb90 <SoundChannel::getBufferUsed()>:
c001fb90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb94:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001fb97:	c3                   	ret    

c001fb98 <SoundChannel::getBufferSize()>:
c001fb98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb9c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001fb9f:	c3                   	ret    

c001fba0 <SoundChannel::unbuffer(float*, int, int)>:
c001fba0:	56                   	push   esi
c001fba1:	53                   	push   ebx
c001fba2:	83 ec 40             	sub    esp,0x40
c001fba5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001fba9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001fbac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fbb0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001fbb3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001fbb7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001fbbb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001fbbf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001fbc3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fbc7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001fbcb:	e8 b7 40 00 00       	call   c0023c87 <__floatsisf>
c001fbd0:	5a                   	pop    edx
c001fbd1:	89 c6                	mov    esi,eax
c001fbd3:	ff 33                	push   DWORD PTR [ebx]
c001fbd5:	e8 ad 40 00 00       	call   c0023c87 <__floatsisf>
c001fbda:	59                   	pop    ecx
c001fbdb:	5a                   	pop    edx
c001fbdc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001fbdf:	50                   	push   eax
c001fbe0:	e8 b4 3c 00 00       	call   c0023899 <__mulsf3>
c001fbe5:	59                   	pop    ecx
c001fbe6:	5a                   	pop    edx
c001fbe7:	50                   	push   eax
c001fbe8:	56                   	push   esi
c001fbe9:	e8 6e 3e 00 00       	call   c0023a5c <__divsf3>
c001fbee:	89 04 24             	mov    DWORD PTR [esp],eax
c001fbf1:	e8 61 53 00 00       	call   c0024f57 <__extendsfdf2>
c001fbf6:	59                   	pop    ecx
c001fbf7:	5e                   	pop    esi
c001fbf8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001fbfc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001fc00:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001fc08:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fc0c:	50                   	push   eax
c001fc0d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001fc10:	e8 d5 89 fe ff       	call   c00085ea <src_process>
c001fc15:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001fc19:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001fc1c:	83 c4 0c             	add    esp,0xc
c001fc1f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001fc22:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001fc25:	29 d0                	sub    eax,edx
c001fc27:	c1 e0 02             	shl    eax,0x2
c001fc2a:	50                   	push   eax
c001fc2b:	8d 04 91             	lea    eax,[ecx+edx*4]
c001fc2e:	50                   	push   eax
c001fc2f:	51                   	push   ecx
c001fc30:	e8 2b 0a fe ff       	call   c0000660 <memmove>
c001fc35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fc39:	83 c4 44             	add    esp,0x44
c001fc3c:	5b                   	pop    ebx
c001fc3d:	5e                   	pop    esi
c001fc3e:	c3                   	ret    
c001fc3f:	90                   	nop

c001fc40 <SoundChannel::buffer8(unsigned char*, int)>:
c001fc40:	55                   	push   ebp
c001fc41:	57                   	push   edi
c001fc42:	56                   	push   esi
c001fc43:	53                   	push   ebx
c001fc44:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc48:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001fc4c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c001fc4f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fc53:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c001fc56:	74 7a                	je     c001fcd2 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c001fc58:	85 ff                	test   edi,edi
c001fc5a:	7e 76                	jle    c001fcd2 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c001fc5c:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c001fc60:	8d 70 01             	lea    esi,[eax+0x1]
c001fc63:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c001fc66:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fc69:	8b 1c 9d 00 c2 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3e00]
c001fc70:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c001fc73:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c001fc76:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c001fc79:	74 5e                	je     c001fcd9 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c001fc7b:	83 ff 01             	cmp    edi,0x1
c001fc7e:	74 4b                	je     c001fccb <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c001fc80:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001fc84:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c001fc87:	8d 70 01             	lea    esi,[eax+0x1]
c001fc8a:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fc8d:	8b 1c 9d 00 c2 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3e00]
c001fc94:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c001fc97:	b8 02 00 00 00       	mov    eax,0x2
c001fc9c:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001fc9f:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c001fca2:	75 23                	jne    c001fcc7 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c001fca4:	eb 27                	jmp    c001fccd <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c001fca6:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c001fcab:	8d 71 01             	lea    esi,[ecx+0x1]
c001fcae:	40                   	inc    eax
c001fcaf:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fcb2:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c001fcb5:	8b 1c 9d 00 c2 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3e00]
c001fcbc:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001fcbf:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001fcc2:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c001fcc5:	74 06                	je     c001fccd <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c001fcc7:	39 c7                	cmp    edi,eax
c001fcc9:	75 db                	jne    c001fca6 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c001fccb:	89 f8                	mov    eax,edi
c001fccd:	5b                   	pop    ebx
c001fcce:	5e                   	pop    esi
c001fccf:	5f                   	pop    edi
c001fcd0:	5d                   	pop    ebp
c001fcd1:	c3                   	ret    
c001fcd2:	5b                   	pop    ebx
c001fcd3:	31 c0                	xor    eax,eax
c001fcd5:	5e                   	pop    esi
c001fcd6:	5f                   	pop    edi
c001fcd7:	5d                   	pop    ebp
c001fcd8:	c3                   	ret    
c001fcd9:	b8 01 00 00 00       	mov    eax,0x1
c001fcde:	eb ed                	jmp    c001fccd <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c001fce0 <SoundDevice::SoundDevice(char const*)>:
c001fce0:	83 ec 1c             	sub    esp,0x1c
c001fce3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fce7:	83 ec 08             	sub    esp,0x8
c001fcea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fcee:	50                   	push   eax
c001fcef:	e8 58 3b ff ff       	call   c001384c <Device::Device(char const*)>
c001fcf4:	83 c4 10             	add    esp,0x10
c001fcf7:	ba 50 8c 02 c0       	mov    edx,0xc0028c50
c001fcfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd00:	89 10                	mov    DWORD PTR [eax],edx
c001fd02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd06:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001fd10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd14:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001fd1e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fd26:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001fd2b:	7f 19                	jg     c001fd46 <SoundDevice::SoundDevice(char const*)+0x66>
c001fd2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fd35:	83 c2 54             	add    edx,0x54
c001fd38:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001fd40:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fd44:	eb e0                	jmp    c001fd26 <SoundDevice::SoundDevice(char const*)+0x46>
c001fd46:	90                   	nop
c001fd47:	83 c4 1c             	add    esp,0x1c
c001fd4a:	c3                   	ret    
c001fd4b:	90                   	nop

c001fd4c <SoundDevice::~SoundDevice()>:
c001fd4c:	53                   	push   ebx
c001fd4d:	83 ec 18             	sub    esp,0x18
c001fd50:	ba 50 8c 02 c0       	mov    edx,0xc0028c50
c001fd55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd59:	89 10                	mov    DWORD PTR [eax],edx
c001fd5b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fd63:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001fd68:	7f 46                	jg     c001fdb0 <SoundDevice::~SoundDevice()+0x64>
c001fd6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fd72:	83 c2 54             	add    edx,0x54
c001fd75:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001fd79:	85 c0                	test   eax,eax
c001fd7b:	74 2d                	je     c001fdaa <SoundDevice::~SoundDevice()+0x5e>
c001fd7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd81:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fd85:	83 c2 54             	add    edx,0x54
c001fd88:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001fd8c:	85 db                	test   ebx,ebx
c001fd8e:	74 1a                	je     c001fdaa <SoundDevice::~SoundDevice()+0x5e>
c001fd90:	83 ec 0c             	sub    esp,0xc
c001fd93:	53                   	push   ebx
c001fd94:	e8 21 fc ff ff       	call   c001f9ba <SoundChannel::~SoundChannel()>
c001fd99:	83 c4 10             	add    esp,0x10
c001fd9c:	83 ec 08             	sub    esp,0x8
c001fd9f:	6a 2c                	push   0x2c
c001fda1:	53                   	push   ebx
c001fda2:	e8 ca 23 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c001fda7:	83 c4 10             	add    esp,0x10
c001fdaa:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fdae:	eb b3                	jmp    c001fd63 <SoundDevice::~SoundDevice()+0x17>
c001fdb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fdb4:	83 ec 0c             	sub    esp,0xc
c001fdb7:	50                   	push   eax
c001fdb8:	e8 41 37 ff ff       	call   c00134fe <Device::~Device()>
c001fdbd:	83 c4 10             	add    esp,0x10
c001fdc0:	90                   	nop
c001fdc1:	83 c4 18             	add    esp,0x18
c001fdc4:	5b                   	pop    ebx
c001fdc5:	c3                   	ret    

c001fdc6 <SoundDevice::~SoundDevice()>:
c001fdc6:	83 ec 0c             	sub    esp,0xc
c001fdc9:	83 ec 0c             	sub    esp,0xc
c001fdcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdd0:	e8 77 ff ff ff       	call   c001fd4c <SoundDevice::~SoundDevice()>
c001fdd5:	83 c4 10             	add    esp,0x10
c001fdd8:	83 ec 08             	sub    esp,0x8
c001fddb:	68 e4 01 00 00       	push   0x1e4
c001fde0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fde4:	e8 88 23 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c001fde9:	83 c4 10             	add    esp,0x10
c001fdec:	83 c4 0c             	add    esp,0xc
c001fdef:	c3                   	ret    

c001fdf0 <SoundDevice::getFreeChannelNum()>:
c001fdf0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fdf4:	31 c0                	xor    eax,eax
c001fdf6:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001fdfe:	74 09                	je     c001fe09 <SoundDevice::getFreeChannelNum()+0x19>
c001fe00:	40                   	inc    eax
c001fe01:	83 f8 20             	cmp    eax,0x20
c001fe04:	75 f0                	jne    c001fdf6 <SoundDevice::getFreeChannelNum()+0x6>
c001fe06:	83 c8 ff             	or     eax,0xffffffff
c001fe09:	c3                   	ret    

c001fe0a <SoundDevice::addChannel(SoundChannel*)>:
c001fe0a:	56                   	push   esi
c001fe0b:	53                   	push   ebx
c001fe0c:	51                   	push   ecx
c001fe0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fe11:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fe15:	53                   	push   ebx
c001fe16:	e8 d5 ff ff ff       	call   c001fdf0 <SoundDevice::getFreeChannelNum()>
c001fe1b:	5a                   	pop    edx
c001fe1c:	83 f8 ff             	cmp    eax,0xffffffff
c001fe1f:	74 51                	je     c001fe72 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001fe21:	85 f6                	test   esi,esi
c001fe23:	74 4d                	je     c001fe72 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001fe25:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001fe2c:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001fe33:	75 30                	jne    c001fe65 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001fe35:	83 ec 0c             	sub    esp,0xc
c001fe38:	56                   	push   esi
c001fe39:	e8 42 fd ff ff       	call   c001fb80 <SoundChannel::getSampleRate()>
c001fe3e:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001fe44:	89 34 24             	mov    DWORD PTR [esp],esi
c001fe47:	e8 3c fd ff ff       	call   c001fb88 <SoundChannel::getBits()>
c001fe4c:	83 c4 0c             	add    esp,0xc
c001fe4f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001fe55:	8b 13                	mov    edx,DWORD PTR [ebx]
c001fe57:	50                   	push   eax
c001fe58:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001fe5e:	53                   	push   ebx
c001fe5f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001fe62:	83 c4 10             	add    esp,0x10
c001fe65:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001fe6b:	b8 01 00 00 00       	mov    eax,0x1
c001fe70:	eb 03                	jmp    c001fe75 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001fe72:	83 c8 ff             	or     eax,0xffffffff
c001fe75:	5a                   	pop    edx
c001fe76:	5b                   	pop    ebx
c001fe77:	5e                   	pop    esi
c001fe78:	c3                   	ret    
c001fe79:	90                   	nop

c001fe7a <SoundDevice::removeChannel(int)>:
c001fe7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fe7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe82:	83 fa 1f             	cmp    edx,0x1f
c001fe85:	77 23                	ja     c001feaa <SoundDevice::removeChannel(int)+0x30>
c001fe87:	8d 14 90             	lea    edx,[eax+edx*4]
c001fe8a:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001fe91:	74 17                	je     c001feaa <SoundDevice::removeChannel(int)+0x30>
c001fe93:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001fe9d:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001fea3:	75 05                	jne    c001feaa <SoundDevice::removeChannel(int)+0x30>
c001fea5:	8b 00                	mov    eax,DWORD PTR [eax]
c001fea7:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001feaa:	c3                   	ret    
c001feab:	90                   	nop

c001feac <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001feac:	57                   	push   edi
c001fead:	56                   	push   esi
c001feae:	53                   	push   ebx
c001feaf:	31 db                	xor    ebx,ebx
c001feb1:	83 ec 10             	sub    esp,0x10
c001feb4:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001feb8:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001febc:	0f 8d cb 00 00 00    	jge    c001ff8d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c001fec2:	83 ec 0c             	sub    esp,0xc
c001fec5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c001fecc:	e8 86 50 00 00       	call   c0024f57 <__extendsfdf2>
c001fed1:	83 c4 10             	add    esp,0x10
c001fed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001fedc:	68 00 00 f0 3f       	push   0x3ff00000
c001fee1:	6a 00                	push   0x0
c001fee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001feeb:	e8 f3 3f 00 00       	call   c0023ee3 <__adddf3>
c001fef0:	83 c4 10             	add    esp,0x10
c001fef3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fef7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001fefb:	68 00 00 e0 3f       	push   0x3fe00000
c001ff00:	6a 00                	push   0x0
c001ff02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff0a:	e8 51 46 00 00       	call   c0024560 <__muldf3>
c001ff0f:	83 c4 10             	add    esp,0x10
c001ff12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ff16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ff1a:	68 00 00 60 40       	push   0x40600000
c001ff1f:	6a 00                	push   0x0
c001ff21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff29:	e8 32 46 00 00       	call   c0024560 <__muldf3>
c001ff2e:	59                   	pop    ecx
c001ff2f:	5f                   	pop    edi
c001ff30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ff34:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001ff38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff40:	e8 ee 4e 00 00       	call   c0024e33 <__truncdfsf2>
c001ff45:	5a                   	pop    edx
c001ff46:	89 c7                	mov    edi,eax
c001ff48:	59                   	pop    ecx
c001ff49:	68 00 00 fe 42       	push   0x42fe0000
c001ff4e:	50                   	push   eax
c001ff4f:	e8 89 3f 00 00       	call   c0023edd <__gesf2>
c001ff54:	83 c4 10             	add    esp,0x10
c001ff57:	85 c0                	test   eax,eax
c001ff59:	78 06                	js     c001ff61 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c001ff5b:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001ff5f:	eb 26                	jmp    c001ff87 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c001ff61:	50                   	push   eax
c001ff62:	50                   	push   eax
c001ff63:	6a 00                	push   0x0
c001ff65:	57                   	push   edi
c001ff66:	e8 76 3f 00 00       	call   c0023ee1 <__lesf2>
c001ff6b:	83 c4 10             	add    esp,0x10
c001ff6e:	85 c0                	test   eax,eax
c001ff70:	7f 06                	jg     c001ff78 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c001ff72:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001ff76:	eb 0f                	jmp    c001ff87 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c001ff78:	83 ec 0c             	sub    esp,0xc
c001ff7b:	57                   	push   edi
c001ff7c:	e8 6b 50 00 00       	call   c0024fec <lrintf>
c001ff81:	83 c4 10             	add    esp,0x10
c001ff84:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001ff87:	43                   	inc    ebx
c001ff88:	e9 2b ff ff ff       	jmp    c001feb8 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c001ff8d:	83 c4 10             	add    esp,0x10
c001ff90:	5b                   	pop    ebx
c001ff91:	5e                   	pop    esi
c001ff92:	5f                   	pop    edi
c001ff93:	c3                   	ret    

c001ff94 <SoundDevice::getAudio(int, float*, float*)>:
c001ff94:	55                   	push   ebp
c001ff95:	57                   	push   edi
c001ff96:	56                   	push   esi
c001ff97:	53                   	push   ebx
c001ff98:	31 db                	xor    ebx,ebx
c001ff9a:	83 ec 20             	sub    esp,0x20
c001ff9d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ffa1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ffa5:	c1 e0 02             	shl    eax,0x2
c001ffa8:	50                   	push   eax
c001ffa9:	6a 00                	push   0x0
c001ffab:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ffaf:	e8 1a 07 fe ff       	call   c00006ce <memset>
c001ffb4:	83 c4 10             	add    esp,0x10
c001ffb7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ffbb:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001ffc2:	85 c0                	test   eax,eax
c001ffc4:	0f 84 d7 00 00 00    	je     c00200a1 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c001ffca:	83 ec 0c             	sub    esp,0xc
c001ffcd:	50                   	push   eax
c001ffce:	e8 a5 fb ff ff       	call   c001fb78 <SoundChannel::paused()>
c001ffd3:	83 c4 10             	add    esp,0x10
c001ffd6:	84 c0                	test   al,al
c001ffd8:	0f 85 c3 00 00 00    	jne    c00200a1 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c001ffde:	83 ec 0c             	sub    esp,0xc
c001ffe1:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001ffe8:	e8 19 fa ff ff       	call   c001fa06 <SoundChannel::getVolume()>
c001ffed:	83 c4 10             	add    esp,0x10
c001fff0:	85 c0                	test   eax,eax
c001fff2:	0f 84 a9 00 00 00    	je     c00200a1 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c001fff8:	83 ec 0c             	sub    esp,0xc
c001fffb:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0020002:	e8 ff f9 ff ff       	call   c001fa06 <SoundChannel::getVolume()>
c0020007:	83 ec 0c             	sub    esp,0xc
c002000a:	50                   	push   eax
c002000b:	e8 77 3c 00 00       	call   c0023c87 <__floatsisf>
c0020010:	59                   	pop    ecx
c0020011:	5d                   	pop    ebp
c0020012:	31 ed                	xor    ebp,ebp
c0020014:	68 00 00 c8 42       	push   0x42c80000
c0020019:	50                   	push   eax
c002001a:	e8 3d 3a 00 00       	call   c0023a5c <__divsf3>
c002001f:	83 c4 10             	add    esp,0x10
c0020022:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c002002a:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0020030:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0020034:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002003b:	e8 60 fb ff ff       	call   c001fba0 <SoundChannel::unbuffer(float*, int, int)>
c0020040:	83 c4 20             	add    esp,0x20
c0020043:	89 c1                	mov    ecx,eax
c0020045:	39 cd                	cmp    ebp,ecx
c0020047:	7d 52                	jge    c002009b <SoundDevice::getAudio(int, float*, float*)+0x107>
c0020049:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002004d:	50                   	push   eax
c002004e:	50                   	push   eax
c002004f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020053:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0020056:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002005a:	e8 3a 38 00 00       	call   c0023899 <__mulsf3>
c002005f:	5a                   	pop    edx
c0020060:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020064:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c002006a:	e8 18 3c 00 00       	call   c0023c87 <__floatsisf>
c002006f:	59                   	pop    ecx
c0020070:	5a                   	pop    edx
c0020071:	50                   	push   eax
c0020072:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020076:	e8 e1 39 00 00       	call   c0023a5c <__divsf3>
c002007b:	59                   	pop    ecx
c002007c:	5a                   	pop    edx
c002007d:	50                   	push   eax
c002007e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020082:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0020085:	e8 ec 34 00 00       	call   c0023576 <__addsf3>
c002008a:	83 c4 10             	add    esp,0x10
c002008d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020091:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020095:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0020098:	45                   	inc    ebp
c0020099:	eb aa                	jmp    c0020045 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c002009b:	39 cf                	cmp    edi,ecx
c002009d:	7e 02                	jle    c00200a1 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002009f:	89 cf                	mov    edi,ecx
c00200a1:	43                   	inc    ebx
c00200a2:	83 fb 20             	cmp    ebx,0x20
c00200a5:	0f 85 10 ff ff ff    	jne    c001ffbb <SoundDevice::getAudio(int, float*, float*)+0x27>
c00200ab:	83 c4 1c             	add    esp,0x1c
c00200ae:	89 f8                	mov    eax,edi
c00200b0:	5b                   	pop    ebx
c00200b1:	5e                   	pop    esi
c00200b2:	5f                   	pop    edi
c00200b3:	5d                   	pop    ebp
c00200b4:	c3                   	ret    
c00200b5:	90                   	nop

c00200b6 <PCI::open(int, int, void*)>:
c00200b6:	83 ec 18             	sub    esp,0x18
c00200b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00200bd:	8b 10                	mov    edx,DWORD PTR [eax]
c00200bf:	50                   	push   eax
c00200c0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00200c3:	31 c0                	xor    eax,eax
c00200c5:	83 c4 1c             	add    esp,0x1c
c00200c8:	c3                   	ret    
c00200c9:	90                   	nop

c00200ca <PCI::close(int, int, void*)>:
c00200ca:	31 c0                	xor    eax,eax
c00200cc:	c3                   	ret    
c00200cd:	90                   	nop

c00200ce <PCI::PCI()>:
c00200ce:	83 ec 0c             	sub    esp,0xc
c00200d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200d5:	83 ec 08             	sub    esp,0x8
c00200d8:	68 80 8c 02 c0       	push   0xc0028c80
c00200dd:	50                   	push   eax
c00200de:	e8 f5 2d ff ff       	call   c0012ed8 <Bus::Bus(char const*)>
c00200e3:	83 c4 10             	add    esp,0x10
c00200e6:	ba 0c 8d 02 c0       	mov    edx,0xc0028d0c
c00200eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200ef:	89 10                	mov    DWORD PTR [eax],edx
c00200f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200f5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00200fb:	0f b6 d0             	movzx  edx,al
c00200fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020102:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0020109:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002010d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020113:	0f b6 d0             	movzx  edx,al
c0020116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002011a:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002011f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020123:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020129:	8d 50 01             	lea    edx,[eax+0x1]
c002012c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020130:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020136:	0f b6 d0             	movzx  edx,al
c0020139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002013d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020141:	83 c9 c0             	or     ecx,0xffffffc0
c0020144:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020148:	90                   	nop
c0020149:	83 c4 0c             	add    esp,0xc
c002014c:	c3                   	ret    
c002014d:	90                   	nop

c002014e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002014e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020152:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020157:	89 ca                	mov    edx,ecx
c0020159:	c1 e0 10             	shl    eax,0x10
c002015c:	81 e2 fc 00 00 00    	and    edx,0xfc
c0020162:	09 d0                	or     eax,edx
c0020164:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0020169:	c1 e2 08             	shl    edx,0x8
c002016c:	09 d0                	or     eax,edx
c002016e:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0020173:	c1 e2 0b             	shl    edx,0xb
c0020176:	09 d0                	or     eax,edx
c0020178:	ba f8 0c 00 00       	mov    edx,0xcf8
c002017d:	0d 00 00 00 80       	or     eax,0x80000000
c0020182:	ef                   	out    dx,eax
c0020183:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020188:	ed                   	in     eax,dx
c0020189:	83 e1 02             	and    ecx,0x2
c002018c:	0f b6 c9             	movzx  ecx,cl
c002018f:	c1 e1 03             	shl    ecx,0x3
c0020192:	d3 e8                	shr    eax,cl
c0020194:	c3                   	ret    
c0020195:	90                   	nop

c0020196 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0020196:	6a 00                	push   0x0
c0020198:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002019d:	50                   	push   eax
c002019e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00201a3:	50                   	push   eax
c00201a4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00201a9:	50                   	push   eax
c00201aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00201ae:	e8 9b ff ff ff       	call   c002014e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00201b3:	83 c4 14             	add    esp,0x14
c00201b6:	c3                   	ret    
c00201b7:	90                   	nop

c00201b8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00201b8:	6a 0e                	push   0xe
c00201ba:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00201bf:	50                   	push   eax
c00201c0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00201c5:	50                   	push   eax
c00201c6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00201cb:	50                   	push   eax
c00201cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00201d0:	e8 79 ff ff ff       	call   c002014e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00201d5:	83 c4 14             	add    esp,0x14
c00201d8:	0f b6 c0             	movzx  eax,al
c00201db:	c3                   	ret    

c00201dc <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00201dc:	55                   	push   ebp
c00201dd:	57                   	push   edi
c00201de:	56                   	push   esi
c00201df:	53                   	push   ebx
c00201e0:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00201e5:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00201ea:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00201ef:	6a 0a                	push   0xa
c00201f1:	56                   	push   esi
c00201f2:	55                   	push   ebp
c00201f3:	57                   	push   edi
c00201f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00201f8:	e8 51 ff ff ff       	call   c002014e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00201fd:	6a 0a                	push   0xa
c00201ff:	89 c3                	mov    ebx,eax
c0020201:	56                   	push   esi
c0020202:	0f b6 db             	movzx  ebx,bl
c0020205:	55                   	push   ebp
c0020206:	57                   	push   edi
c0020207:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002020b:	e8 3e ff ff ff       	call   c002014e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020210:	83 c4 28             	add    esp,0x28
c0020213:	25 00 ff 00 00       	and    eax,0xff00
c0020218:	09 d8                	or     eax,ebx
c002021a:	5b                   	pop    ebx
c002021b:	5e                   	pop    esi
c002021c:	5f                   	pop    edi
c002021d:	5d                   	pop    ebp
c002021e:	c3                   	ret    
c002021f:	90                   	nop

c0020220 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0020220:	6a 08                	push   0x8
c0020222:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020227:	50                   	push   eax
c0020228:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002022d:	50                   	push   eax
c002022e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020233:	50                   	push   eax
c0020234:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020238:	e8 11 ff ff ff       	call   c002014e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002023d:	83 c4 14             	add    esp,0x14
c0020240:	0f b6 c4             	movzx  eax,ah
c0020243:	c3                   	ret    

c0020244 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0020244:	6a 08                	push   0x8
c0020246:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002024b:	50                   	push   eax
c002024c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020251:	50                   	push   eax
c0020252:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020257:	50                   	push   eax
c0020258:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002025c:	e8 ed fe ff ff       	call   c002014e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020261:	83 c4 14             	add    esp,0x14
c0020264:	c3                   	ret    
c0020265:	90                   	nop

c0020266 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0020266:	6a 3c                	push   0x3c
c0020268:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002026d:	50                   	push   eax
c002026e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020273:	50                   	push   eax
c0020274:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020279:	50                   	push   eax
c002027a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002027e:	e8 cb fe ff ff       	call   c002014e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020283:	83 c4 14             	add    esp,0x14
c0020286:	c3                   	ret    
c0020287:	90                   	nop

c0020288 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0020288:	6a 18                	push   0x18
c002028a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002028f:	50                   	push   eax
c0020290:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020295:	50                   	push   eax
c0020296:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002029b:	50                   	push   eax
c002029c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00202a0:	e8 a9 fe ff ff       	call   c002014e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00202a5:	83 c4 14             	add    esp,0x14
c00202a8:	0f b6 c4             	movzx  eax,ah
c00202ab:	c3                   	ret    

c00202ac <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00202ac:	55                   	push   ebp
c00202ad:	57                   	push   edi
c00202ae:	56                   	push   esi
c00202af:	53                   	push   ebx
c00202b0:	50                   	push   eax
c00202b1:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00202b5:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c00202ba:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00202bf:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c00202c4:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00202cb:	8d 43 12             	lea    eax,[ebx+0x12]
c00202ce:	83 c3 10             	add    ebx,0x10
c00202d1:	0f b6 c0             	movzx  eax,al
c00202d4:	0f b6 db             	movzx  ebx,bl
c00202d7:	50                   	push   eax
c00202d8:	51                   	push   ecx
c00202d9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00202dd:	57                   	push   edi
c00202de:	55                   	push   ebp
c00202df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00202e3:	e8 66 fe ff ff       	call   c002014e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00202e8:	53                   	push   ebx
c00202e9:	89 c6                	mov    esi,eax
c00202eb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00202ef:	c1 e6 10             	shl    esi,0x10
c00202f2:	51                   	push   ecx
c00202f3:	57                   	push   edi
c00202f4:	55                   	push   ebp
c00202f5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00202f9:	e8 50 fe ff ff       	call   c002014e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00202fe:	83 c4 2c             	add    esp,0x2c
c0020301:	0f b7 c0             	movzx  eax,ax
c0020304:	5b                   	pop    ebx
c0020305:	09 f0                	or     eax,esi
c0020307:	5e                   	pop    esi
c0020308:	5f                   	pop    edi
c0020309:	5d                   	pop    ebp
c002030a:	c3                   	ret    
c002030b:	90                   	nop

c002030c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002030c:	53                   	push   ebx
c002030d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020312:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020317:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002031b:	c1 e1 10             	shl    ecx,0x10
c002031e:	25 fc 00 00 00       	and    eax,0xfc
c0020323:	09 c1                	or     ecx,eax
c0020325:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002032a:	c1 e0 08             	shl    eax,0x8
c002032d:	09 c1                	or     ecx,eax
c002032f:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0020334:	c1 e0 0b             	shl    eax,0xb
c0020337:	09 c1                	or     ecx,eax
c0020339:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002033f:	89 c8                	mov    eax,ecx
c0020341:	ef                   	out    dx,eax
c0020342:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020347:	ed                   	in     eax,dx
c0020348:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c002034d:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0020352:	74 0a                	je     c002035e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0020354:	0f b7 d8             	movzx  ebx,ax
c0020357:	89 d0                	mov    eax,edx
c0020359:	c1 e0 10             	shl    eax,0x10
c002035c:	eb 05                	jmp    c0020363 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c002035e:	66 31 c0             	xor    ax,ax
c0020361:	89 d3                	mov    ebx,edx
c0020363:	09 c3                	or     ebx,eax
c0020365:	ba f8 0c 00 00       	mov    edx,0xcf8
c002036a:	89 c8                	mov    eax,ecx
c002036c:	ef                   	out    dx,eax
c002036d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020372:	89 d8                	mov    eax,ebx
c0020374:	ef                   	out    dx,eax
c0020375:	5b                   	pop    ebx
c0020376:	c3                   	ret    
c0020377:	90                   	nop

c0020378 <PCI::checkBus(unsigned char)>:
c0020378:	56                   	push   esi
c0020379:	53                   	push   ebx
c002037a:	31 db                	xor    ebx,ebx
c002037c:	51                   	push   ecx
c002037d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0020382:	52                   	push   edx
c0020383:	53                   	push   ebx
c0020384:	43                   	inc    ebx
c0020385:	56                   	push   esi
c0020386:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002038a:	e8 29 03 00 00       	call   c00206b8 <PCI::checkDevice(unsigned char, unsigned char)>
c002038f:	83 c4 10             	add    esp,0x10
c0020392:	83 fb 20             	cmp    ebx,0x20
c0020395:	75 eb                	jne    c0020382 <PCI::checkBus(unsigned char)+0xa>
c0020397:	58                   	pop    eax
c0020398:	5b                   	pop    ebx
c0020399:	5e                   	pop    esi
c002039a:	c3                   	ret    
c002039b:	90                   	nop

c002039c <PCI::foundDevice(PCIDeviceInfo)>:
c002039c:	55                   	push   ebp
c002039d:	57                   	push   edi
c002039e:	56                   	push   esi
c002039f:	53                   	push   ebx
c00203a0:	83 ec 1c             	sub    esp,0x1c
c00203a3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00203a7:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00203ad:	0f 84 51 01 00 00    	je     c0020504 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c00203b3:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00203b7:	66 81 f9 06 04       	cmp    cx,0x406
c00203bc:	75 2c                	jne    c00203ea <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00203be:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00203c3:	50                   	push   eax
c00203c4:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00203c9:	50                   	push   eax
c00203ca:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00203cf:	50                   	push   eax
c00203d0:	56                   	push   esi
c00203d1:	e8 b2 fe ff ff       	call   c0020288 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00203d6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00203da:	0f b6 c0             	movzx  eax,al
c00203dd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00203e1:	83 c4 2c             	add    esp,0x2c
c00203e4:	5b                   	pop    ebx
c00203e5:	5e                   	pop    esi
c00203e6:	5f                   	pop    edi
c00203e7:	5d                   	pop    ebp
c00203e8:	eb 8e                	jmp    c0020378 <PCI::checkBus(unsigned char)>
c00203ea:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00203ee:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00203f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00203f8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00203fc:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0020400:	88 d3                	mov    bl,dl
c0020402:	85 c0                	test   eax,eax
c0020404:	74 33                	je     c0020439 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0020406:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0020409:	85 d2                	test   edx,edx
c002040b:	74 28                	je     c0020435 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002040d:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0020413:	31 ef                	xor    edi,ebp
c0020415:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c002041b:	75 18                	jne    c0020435 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002041d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020421:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0020427:	75 0c                	jne    c0020435 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0020429:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c002042f:	0f 84 cf 00 00 00    	je     c0020504 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c0020435:	8b 00                	mov    eax,DWORD PTR [eax]
c0020437:	eb c9                	jmp    c0020402 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0020439:	66 81 f9 01 06       	cmp    cx,0x601
c002043e:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0020442:	75 18                	jne    c002045c <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c0020444:	83 ec 0c             	sub    esp,0xc
c0020447:	68 58 01 00 00       	push   0x158
c002044c:	e8 11 1d ff ff       	call   c0012162 <operator new(unsigned long)>
c0020451:	59                   	pop    ecx
c0020452:	89 c5                	mov    ebp,eax
c0020454:	5f                   	pop    edi
c0020455:	68 88 8c 02 c0       	push   0xc0028c88
c002045a:	eb 7d                	jmp    c00204d9 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c002045c:	66 81 f9 01 01       	cmp    cx,0x101
c0020461:	75 60                	jne    c00204c3 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c0020463:	83 ec 0c             	sub    esp,0xc
c0020466:	68 70 02 00 00       	push   0x270
c002046b:	e8 f2 1c ff ff       	call   c0012162 <operator new(unsigned long)>
c0020470:	89 04 24             	mov    DWORD PTR [esp],eax
c0020473:	89 c5                	mov    ebp,eax
c0020475:	e8 02 03 00 00       	call   c002077c <IDE::IDE()>
c002047a:	58                   	pop    eax
c002047b:	5a                   	pop    edx
c002047c:	55                   	push   ebp
c002047d:	56                   	push   esi
c002047e:	e8 d9 31 ff ff       	call   c001365c <Device::addChild(Device*)>
c0020483:	83 ec 1c             	sub    esp,0x1c
c0020486:	b9 09 00 00 00       	mov    ecx,0x9
c002048b:	fc                   	cld    
c002048c:	89 e7                	mov    edi,esp
c002048e:	89 de                	mov    esi,ebx
c0020490:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020492:	55                   	push   ebp
c0020493:	e8 9e 30 ff ff       	call   c0013536 <Device::preOpenPCI(PCIDeviceInfo)>
c0020498:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002049b:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c002049f:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00204a7:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00204af:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00204b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00204ba:	83 c4 4c             	add    esp,0x4c
c00204bd:	5b                   	pop    ebx
c00204be:	5e                   	pop    esi
c00204bf:	5f                   	pop    edi
c00204c0:	5d                   	pop    ebp
c00204c1:	ff e0                	jmp    eax
c00204c3:	83 ec 0c             	sub    esp,0xc
c00204c6:	68 58 01 00 00       	push   0x158
c00204cb:	e8 92 1c ff ff       	call   c0012162 <operator new(unsigned long)>
c00204d0:	59                   	pop    ecx
c00204d1:	89 c5                	mov    ebp,eax
c00204d3:	5f                   	pop    edi
c00204d4:	68 a7 8c 02 c0       	push   0xc0028ca7
c00204d9:	55                   	push   ebp
c00204da:	e8 69 34 ff ff       	call   c0013948 <DriverlessDevice::DriverlessDevice(char const*)>
c00204df:	58                   	pop    eax
c00204e0:	5a                   	pop    edx
c00204e1:	55                   	push   ebp
c00204e2:	56                   	push   esi
c00204e3:	e8 74 31 ff ff       	call   c001365c <Device::addChild(Device*)>
c00204e8:	b9 09 00 00 00       	mov    ecx,0x9
c00204ed:	fc                   	cld    
c00204ee:	89 df                	mov    edi,ebx
c00204f0:	89 de                	mov    esi,ebx
c00204f2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00204f4:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00204f8:	83 c4 2c             	add    esp,0x2c
c00204fb:	5b                   	pop    ebx
c00204fc:	5e                   	pop    esi
c00204fd:	5f                   	pop    edi
c00204fe:	5d                   	pop    ebp
c00204ff:	e9 32 30 ff ff       	jmp    c0013536 <Device::preOpenPCI(PCIDeviceInfo)>
c0020504:	83 c4 1c             	add    esp,0x1c
c0020507:	5b                   	pop    ebx
c0020508:	5e                   	pop    esi
c0020509:	5f                   	pop    edi
c002050a:	5d                   	pop    ebp
c002050b:	c3                   	ret    

c002050c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002050c:	55                   	push   ebp
c002050d:	57                   	push   edi
c002050e:	56                   	push   esi
c002050f:	53                   	push   ebx
c0020510:	83 ec 5c             	sub    esp,0x5c
c0020513:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0020517:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002051b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c002051f:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0020524:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020528:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c002052c:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0020531:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020535:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c002053a:	6a 0c                	push   0xc
c002053c:	55                   	push   ebp
c002053d:	53                   	push   ebx
c002053e:	57                   	push   edi
c002053f:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0020546:	e8 03 fc ff ff       	call   c002014e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002054b:	55                   	push   ebp
c002054c:	53                   	push   ebx
c002054d:	57                   	push   edi
c002054e:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0020555:	e8 82 fc ff ff       	call   c00201dc <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002055a:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c002055f:	83 c4 24             	add    esp,0x24
c0020562:	55                   	push   ebp
c0020563:	53                   	push   ebx
c0020564:	57                   	push   edi
c0020565:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0020569:	e8 f8 fc ff ff       	call   c0020266 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002056e:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0020572:	6a 3c                	push   0x3c
c0020574:	55                   	push   ebp
c0020575:	53                   	push   ebx
c0020576:	57                   	push   edi
c0020577:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c002057e:	e8 cb fb ff ff       	call   c002014e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020583:	0f b6 c4             	movzx  eax,ah
c0020586:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002058a:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002058e:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0020592:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0020597:	83 c4 24             	add    esp,0x24
c002059a:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00205a0:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c00205a7:	74 6c                	je     c0020615 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00205a9:	31 f6                	xor    esi,esi
c00205ab:	8b 15 08 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a408
c00205b1:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00205b7:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c00205bd:	7e 56                	jle    c0020615 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00205bf:	8d 14 f2             	lea    edx,[edx+esi*8]
c00205c2:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c00205c9:	39 cb                	cmp    ebx,ecx
c00205cb:	75 45                	jne    c0020612 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00205cd:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c00205d4:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c00205d8:	75 38                	jne    c0020612 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00205da:	83 ec 0c             	sub    esp,0xc
c00205dd:	68 c1 8c 02 c0       	push   0xc0028cc1
c00205e2:	e8 6a 1c ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00205e7:	8b 15 08 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a408
c00205ed:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00205f3:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c00205fb:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c00205ff:	52                   	push   edx
c0020600:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020604:	53                   	push   ebx
c0020605:	68 e6 8c 02 c0       	push   0xc0028ce6
c002060a:	e8 42 1c ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c002060f:	83 c4 20             	add    esp,0x20
c0020612:	46                   	inc    esi
c0020613:	eb 96                	jmp    c00205ab <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0020615:	31 d2                	xor    edx,edx
c0020617:	83 ec 0c             	sub    esp,0xc
c002061a:	55                   	push   ebp
c002061b:	53                   	push   ebx
c002061c:	57                   	push   edi
c002061d:	52                   	push   edx
c002061e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0020622:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0020629:	e8 7e fc ff ff       	call   c00202ac <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c002062e:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0020632:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020636:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002063a:	42                   	inc    edx
c002063b:	83 c4 20             	add    esp,0x20
c002063e:	83 fa 06             	cmp    edx,0x6
c0020641:	75 d4                	jne    c0020617 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0020643:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020647:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c002064b:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c002064f:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0020653:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0020657:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c002065b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0020660:	86 e0                	xchg   al,ah
c0020662:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0020667:	55                   	push   ebp
c0020668:	53                   	push   ebx
c0020669:	57                   	push   edi
c002066a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c002066e:	e8 ad fb ff ff       	call   c0020220 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0020673:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0020677:	55                   	push   ebp
c0020678:	53                   	push   ebx
c0020679:	57                   	push   edi
c002067a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0020681:	e8 10 fb ff ff       	call   c0020196 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020686:	83 ec 0c             	sub    esp,0xc
c0020689:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c002068e:	b9 09 00 00 00       	mov    ecx,0x9
c0020693:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0020697:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c002069b:	fc                   	cld    
c002069c:	89 e7                	mov    edi,esp
c002069e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00206a0:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00206a7:	e8 f0 fc ff ff       	call   c002039c <PCI::foundDevice(PCIDeviceInfo)>
c00206ac:	81 c4 8c 00 00 00    	add    esp,0x8c
c00206b2:	5b                   	pop    ebx
c00206b3:	5e                   	pop    esi
c00206b4:	5f                   	pop    edi
c00206b5:	5d                   	pop    ebp
c00206b6:	c3                   	ret    
c00206b7:	90                   	nop

c00206b8 <PCI::checkDevice(unsigned char, unsigned char)>:
c00206b8:	55                   	push   ebp
c00206b9:	57                   	push   edi
c00206ba:	56                   	push   esi
c00206bb:	53                   	push   ebx
c00206bc:	83 ec 0c             	sub    esp,0xc
c00206bf:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00206c3:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00206c8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00206cd:	6a 00                	push   0x0
c00206cf:	56                   	push   esi
c00206d0:	57                   	push   edi
c00206d1:	55                   	push   ebp
c00206d2:	e8 bf fa ff ff       	call   c0020196 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00206d7:	6a 00                	push   0x0
c00206d9:	56                   	push   esi
c00206da:	57                   	push   edi
c00206db:	55                   	push   ebp
c00206dc:	e8 2b fe ff ff       	call   c002050c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00206e1:	83 c4 20             	add    esp,0x20
c00206e4:	6a 00                	push   0x0
c00206e6:	56                   	push   esi
c00206e7:	57                   	push   edi
c00206e8:	55                   	push   ebp
c00206e9:	e8 ca fa ff ff       	call   c00201b8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00206ee:	83 c4 10             	add    esp,0x10
c00206f1:	84 c0                	test   al,al
c00206f3:	79 27                	jns    c002071c <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00206f5:	bb 01 00 00 00       	mov    ebx,0x1
c00206fa:	53                   	push   ebx
c00206fb:	56                   	push   esi
c00206fc:	57                   	push   edi
c00206fd:	55                   	push   ebp
c00206fe:	e8 93 fa ff ff       	call   c0020196 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020703:	83 c4 10             	add    esp,0x10
c0020706:	66 40                	inc    ax
c0020708:	74 0c                	je     c0020716 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c002070a:	53                   	push   ebx
c002070b:	56                   	push   esi
c002070c:	57                   	push   edi
c002070d:	55                   	push   ebp
c002070e:	e8 f9 fd ff ff       	call   c002050c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0020713:	83 c4 10             	add    esp,0x10
c0020716:	43                   	inc    ebx
c0020717:	83 fb 08             	cmp    ebx,0x8
c002071a:	75 de                	jne    c00206fa <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002071c:	83 c4 0c             	add    esp,0xc
c002071f:	5b                   	pop    ebx
c0020720:	5e                   	pop    esi
c0020721:	5f                   	pop    edi
c0020722:	5d                   	pop    ebp
c0020723:	c3                   	ret    

c0020724 <PCI::detect()>:
c0020724:	56                   	push   esi
c0020725:	53                   	push   ebx
c0020726:	53                   	push   ebx
c0020727:	31 db                	xor    ebx,ebx
c0020729:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002072d:	6a 00                	push   0x0
c002072f:	6a 00                	push   0x0
c0020731:	6a 00                	push   0x0
c0020733:	56                   	push   esi
c0020734:	e8 7f fa ff ff       	call   c00201b8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0020739:	83 c4 10             	add    esp,0x10
c002073c:	a8 80                	test   al,0x80
c002073e:	75 21                	jne    c0020761 <PCI::detect()+0x3d>
c0020740:	51                   	push   ecx
c0020741:	51                   	push   ecx
c0020742:	6a 00                	push   0x0
c0020744:	56                   	push   esi
c0020745:	e8 2e fc ff ff       	call   c0020378 <PCI::checkBus(unsigned char)>
c002074a:	83 c4 10             	add    esp,0x10
c002074d:	eb 24                	jmp    c0020773 <PCI::detect()+0x4f>
c002074f:	52                   	push   edx
c0020750:	52                   	push   edx
c0020751:	53                   	push   ebx
c0020752:	43                   	inc    ebx
c0020753:	56                   	push   esi
c0020754:	e8 1f fc ff ff       	call   c0020378 <PCI::checkBus(unsigned char)>
c0020759:	83 c4 10             	add    esp,0x10
c002075c:	83 fb 08             	cmp    ebx,0x8
c002075f:	74 12                	je     c0020773 <PCI::detect()+0x4f>
c0020761:	53                   	push   ebx
c0020762:	6a 00                	push   0x0
c0020764:	6a 00                	push   0x0
c0020766:	56                   	push   esi
c0020767:	e8 2a fa ff ff       	call   c0020196 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002076c:	83 c4 10             	add    esp,0x10
c002076f:	66 40                	inc    ax
c0020771:	74 dc                	je     c002074f <PCI::detect()+0x2b>
c0020773:	58                   	pop    eax
c0020774:	5b                   	pop    ebx
c0020775:	5e                   	pop    esi
c0020776:	c3                   	ret    
c0020777:	90                   	nop

c0020778 <IDE::close(int, int, void*)>:
c0020778:	83 c8 ff             	or     eax,0xffffffff
c002077b:	c3                   	ret    

c002077c <IDE::IDE()>:
c002077c:	83 ec 0c             	sub    esp,0xc
c002077f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020783:	83 ec 08             	sub    esp,0x8
c0020786:	68 30 8d 02 c0       	push   0xc0028d30
c002078b:	50                   	push   eax
c002078c:	e8 4d 32 ff ff       	call   c00139de <HardDiskController::HardDiskController(char const*)>
c0020791:	83 c4 10             	add    esp,0x10
c0020794:	ba 70 8f 02 c0       	mov    edx,0xc0028f70
c0020799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002079d:	89 10                	mov    DWORD PTR [eax],edx
c002079f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207a3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00207aa:	90                   	nop
c00207ab:	83 c4 0c             	add    esp,0xc
c00207ae:	c3                   	ret    
c00207af:	90                   	nop

c00207b0 <IDE::prepareInterrupt(unsigned char)>:
c00207b0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00207b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00207b9:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00207c1:	c3                   	ret    

c00207c2 <selectDrive(unsigned char, unsigned char)>:
c00207c2:	c3                   	ret    
c00207c3:	90                   	nop

c00207c4 <IDE::getBase(unsigned char)>:
c00207c4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00207c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00207cd:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00207d5:	c3                   	ret    

c00207d6 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00207d6:	55                   	push   ebp
c00207d7:	57                   	push   edi
c00207d8:	56                   	push   esi
c00207d9:	53                   	push   ebx
c00207da:	83 ec 1c             	sub    esp,0x1c
c00207dd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00207e1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00207e5:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00207e8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00207ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00207f0:	80 f9 03             	cmp    cl,0x3
c00207f3:	77 51                	ja     c0020846 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00207f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00207f9:	0f b6 f2             	movzx  esi,dl
c00207fc:	0f b6 db             	movzx  ebx,bl
c00207ff:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0020802:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0020806:	83 ca 80             	or     edx,0xffffff80
c0020809:	0f b6 d2             	movzx  edx,dl
c002080c:	52                   	push   edx
c002080d:	6a 0c                	push   0xc
c002080f:	56                   	push   esi
c0020810:	57                   	push   edi
c0020811:	e8 c0 ff ff ff       	call   c00207d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020816:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002081b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002081f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0020823:	ee                   	out    dx,al
c0020824:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0020829:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002082d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0020831:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020835:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002083d:	83 c4 2c             	add    esp,0x2c
c0020840:	5b                   	pop    ebx
c0020841:	5e                   	pop    esi
c0020842:	5f                   	pop    edi
c0020843:	5d                   	pop    ebp
c0020844:	eb 90                	jmp    c00207d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020846:	80 fb 07             	cmp    bl,0x7
c0020849:	77 12                	ja     c002085d <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c002084b:	0f b6 d2             	movzx  edx,dl
c002084e:	0f b6 db             	movzx  ebx,bl
c0020851:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0020859:	89 da                	mov    edx,ebx
c002085b:	eb 2f                	jmp    c002088c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002085d:	80 fb 0d             	cmp    bl,0xd
c0020860:	77 13                	ja     c0020875 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0020862:	0f b6 d2             	movzx  edx,dl
c0020865:	0f b6 db             	movzx  ebx,bl
c0020868:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002086f:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0020873:	eb 17                	jmp    c002088c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0020875:	80 fb 15             	cmp    bl,0x15
c0020878:	77 13                	ja     c002088d <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002087a:	0f b6 d2             	movzx  edx,dl
c002087d:	0f b6 db             	movzx  ebx,bl
c0020880:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0020888:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002088c:	ee                   	out    dx,al
c002088d:	83 c4 1c             	add    esp,0x1c
c0020890:	5b                   	pop    ebx
c0020891:	5e                   	pop    esi
c0020892:	5f                   	pop    edi
c0020893:	5d                   	pop    ebp
c0020894:	c3                   	ret    
c0020895:	90                   	nop

c0020896 <IDE::read(unsigned char, unsigned char)>:
c0020896:	55                   	push   ebp
c0020897:	57                   	push   edi
c0020898:	56                   	push   esi
c0020899:	53                   	push   ebx
c002089a:	83 ec 1c             	sub    esp,0x1c
c002089d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00208a1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00208a5:	8d 43 f8             	lea    eax,[ebx-0x8]
c00208a8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00208ac:	3c 03                	cmp    al,0x3
c00208ae:	77 43                	ja     c00208f3 <IDE::read(unsigned char, unsigned char)+0x5d>
c00208b0:	0f b6 f2             	movzx  esi,dl
c00208b3:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00208b6:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00208ba:	83 c8 80             	or     eax,0xffffff80
c00208bd:	0f b6 c0             	movzx  eax,al
c00208c0:	50                   	push   eax
c00208c1:	6a 0c                	push   0xc
c00208c3:	56                   	push   esi
c00208c4:	57                   	push   edi
c00208c5:	e8 0c ff ff ff       	call   c00207d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00208ca:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00208cf:	0f b6 c3             	movzx  eax,bl
c00208d2:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00208d6:	ec                   	in     al,dx
c00208d7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00208db:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00208e0:	52                   	push   edx
c00208e1:	6a 0c                	push   0xc
c00208e3:	56                   	push   esi
c00208e4:	57                   	push   edi
c00208e5:	e8 ec fe ff ff       	call   c00207d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00208ea:	83 c4 20             	add    esp,0x20
c00208ed:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00208f1:	eb 49                	jmp    c002093c <IDE::read(unsigned char, unsigned char)+0xa6>
c00208f3:	80 fb 07             	cmp    bl,0x7
c00208f6:	77 12                	ja     c002090a <IDE::read(unsigned char, unsigned char)+0x74>
c00208f8:	0f b6 d2             	movzx  edx,dl
c00208fb:	0f b6 c3             	movzx  eax,bl
c00208fe:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0020906:	89 c2                	mov    edx,eax
c0020908:	eb 31                	jmp    c002093b <IDE::read(unsigned char, unsigned char)+0xa5>
c002090a:	80 fb 0d             	cmp    bl,0xd
c002090d:	77 13                	ja     c0020922 <IDE::read(unsigned char, unsigned char)+0x8c>
c002090f:	0f b6 d2             	movzx  edx,dl
c0020912:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0020919:	0f b6 d3             	movzx  edx,bl
c002091c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0020920:	eb 19                	jmp    c002093b <IDE::read(unsigned char, unsigned char)+0xa5>
c0020922:	31 c0                	xor    eax,eax
c0020924:	80 fb 15             	cmp    bl,0x15
c0020927:	77 13                	ja     c002093c <IDE::read(unsigned char, unsigned char)+0xa6>
c0020929:	0f b6 d2             	movzx  edx,dl
c002092c:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0020934:	0f b6 d3             	movzx  edx,bl
c0020937:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002093b:	ec                   	in     al,dx
c002093c:	83 c4 1c             	add    esp,0x1c
c002093f:	5b                   	pop    ebx
c0020940:	5e                   	pop    esi
c0020941:	5f                   	pop    edi
c0020942:	5d                   	pop    ebp
c0020943:	c3                   	ret    

c0020944 <IDE::waitInterrupt(unsigned char)>:
c0020944:	55                   	push   ebp
c0020945:	57                   	push   edi
c0020946:	56                   	push   esi
c0020947:	53                   	push   ebx
c0020948:	31 db                	xor    ebx,ebx
c002094a:	83 ec 0c             	sub    esp,0xc
c002094d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0020951:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0020956:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002095e:	89 e8                	mov    eax,ebp
c0020960:	84 c0                	test   al,al
c0020962:	75 34                	jne    c0020998 <IDE::waitInterrupt(unsigned char)+0x54>
c0020964:	52                   	push   edx
c0020965:	6a 0c                	push   0xc
c0020967:	56                   	push   esi
c0020968:	57                   	push   edi
c0020969:	e8 28 ff ff ff       	call   c0020896 <IDE::read(unsigned char, unsigned char)>
c002096e:	83 c4 10             	add    esp,0x10
c0020971:	a8 01                	test   al,0x1
c0020973:	75 2b                	jne    c00209a0 <IDE::waitInterrupt(unsigned char)+0x5c>
c0020975:	f6 c3 04             	test   bl,0x4
c0020978:	75 16                	jne    c0020990 <IDE::waitInterrupt(unsigned char)+0x4c>
c002097a:	83 fb 32             	cmp    ebx,0x32
c002097d:	7e 11                	jle    c0020990 <IDE::waitInterrupt(unsigned char)+0x4c>
c002097f:	50                   	push   eax
c0020980:	50                   	push   eax
c0020981:	6a 00                	push   0x0
c0020983:	68 80 96 98 00       	push   0x989680
c0020988:	e8 fd b4 ff ff       	call   c001be8a <nanoSleep(unsigned long long)>
c002098d:	83 c4 10             	add    esp,0x10
c0020990:	83 fb 3c             	cmp    ebx,0x3c
c0020993:	74 0b                	je     c00209a0 <IDE::waitInterrupt(unsigned char)+0x5c>
c0020995:	43                   	inc    ebx
c0020996:	eb be                	jmp    c0020956 <IDE::waitInterrupt(unsigned char)+0x12>
c0020998:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00209a0:	83 c4 0c             	add    esp,0xc
c00209a3:	89 e8                	mov    eax,ebp
c00209a5:	5b                   	pop    ebx
c00209a6:	5e                   	pop    esi
c00209a7:	5f                   	pop    edi
c00209a8:	5d                   	pop    ebp
c00209a9:	c3                   	ret    

c00209aa <ideChannel0IRQHandler(regs*, void*)>:
c00209aa:	83 ec 10             	sub    esp,0x10
c00209ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00209b1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00209b8:	6a 07                	push   0x7
c00209ba:	6a 00                	push   0x0
c00209bc:	50                   	push   eax
c00209bd:	e8 d4 fe ff ff       	call   c0020896 <IDE::read(unsigned char, unsigned char)>
c00209c2:	83 c4 1c             	add    esp,0x1c
c00209c5:	c3                   	ret    

c00209c6 <ideChannel1IRQHandler(regs*, void*)>:
c00209c6:	83 ec 10             	sub    esp,0x10
c00209c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00209cd:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00209d4:	6a 07                	push   0x7
c00209d6:	6a 01                	push   0x1
c00209d8:	50                   	push   eax
c00209d9:	e8 b8 fe ff ff       	call   c0020896 <IDE::read(unsigned char, unsigned char)>
c00209de:	83 c4 1c             	add    esp,0x1c
c00209e1:	c3                   	ret    

c00209e2 <IDE::enableIRQs(unsigned char, bool)>:
c00209e2:	57                   	push   edi
c00209e3:	56                   	push   esi
c00209e4:	be 04 00 00 00       	mov    esi,0x4
c00209e9:	53                   	push   ebx
c00209ea:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00209ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00209f3:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00209f8:	0f 94 c0             	sete   al
c00209fb:	d1 e0                	shl    eax,1
c00209fd:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0020a04:	0f b6 c0             	movzx  eax,al
c0020a07:	50                   	push   eax
c0020a08:	6a 0c                	push   0xc
c0020a0a:	57                   	push   edi
c0020a0b:	53                   	push   ebx
c0020a0c:	e8 c5 fd ff ff       	call   c00207d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020a11:	83 c4 10             	add    esp,0x10
c0020a14:	50                   	push   eax
c0020a15:	6a 0c                	push   0xc
c0020a17:	57                   	push   edi
c0020a18:	53                   	push   ebx
c0020a19:	e8 78 fe ff ff       	call   c0020896 <IDE::read(unsigned char, unsigned char)>
c0020a1e:	83 c4 10             	add    esp,0x10
c0020a21:	4e                   	dec    esi
c0020a22:	75 f0                	jne    c0020a14 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0020a24:	5b                   	pop    ebx
c0020a25:	5e                   	pop    esi
c0020a26:	5f                   	pop    edi
c0020a27:	c3                   	ret    

c0020a28 <IDE::open(int, int, void*)>:
c0020a28:	55                   	push   ebp
c0020a29:	57                   	push   edi
c0020a2a:	56                   	push   esi
c0020a2b:	53                   	push   ebx
c0020a2c:	83 ec 1c             	sub    esp,0x1c
c0020a2f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0020a33:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0020a3c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0020a45:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0020a4c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0020a53:	0f 85 b0 02 00 00    	jne    c0020d09 <IDE::open(int, int, void*)+0x2e1>
c0020a59:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0020a5f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0020a63:	83 e0 7f             	and    eax,0x7f
c0020a66:	3c 05                	cmp    al,0x5
c0020a68:	74 04                	je     c0020a6e <IDE::open(int, int, void*)+0x46>
c0020a6a:	3c 0f                	cmp    al,0xf
c0020a6c:	75 32                	jne    c0020aa0 <IDE::open(int, int, void*)+0x78>
c0020a6e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0020a74:	83 e0 fc             	and    eax,0xfffffffc
c0020a77:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0020a7e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0020a84:	83 e0 fc             	and    eax,0xfffffffc
c0020a87:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0020a8e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0020a94:	83 e0 fc             	and    eax,0xfffffffc
c0020a97:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0020a9e:	eb 14                	jmp    c0020ab4 <IDE::open(int, int, void*)+0x8c>
c0020aa0:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0020aaa:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0020ab4:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0020abb:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0020ac2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020ac6:	89 c6                	mov    esi,eax
c0020ac8:	bf f8 0c 00 00       	mov    edi,0xcf8
c0020acd:	c1 e6 10             	shl    esi,0x10
c0020ad0:	89 e8                	mov    eax,ebp
c0020ad2:	89 fa                	mov    edx,edi
c0020ad4:	c1 e0 0b             	shl    eax,0xb
c0020ad7:	09 f0                	or     eax,esi
c0020ad9:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0020ae0:	c1 e6 08             	shl    esi,0x8
c0020ae3:	09 c6                	or     esi,eax
c0020ae5:	89 f0                	mov    eax,esi
c0020ae7:	0d 08 00 00 80       	or     eax,0x80000008
c0020aec:	ef                   	out    dx,eax
c0020aed:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0020af2:	89 ca                	mov    edx,ecx
c0020af4:	ed                   	in     eax,dx
c0020af5:	c1 e8 10             	shr    eax,0x10
c0020af8:	3d ff ff 00 00       	cmp    eax,0xffff
c0020afd:	0f 84 f5 00 00 00    	je     c0020bf8 <IDE::open(int, int, void*)+0x1d0>
c0020b03:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0020b09:	89 fa                	mov    edx,edi
c0020b0b:	89 f0                	mov    eax,esi
c0020b0d:	ef                   	out    dx,eax
c0020b0e:	b0 fe                	mov    al,0xfe
c0020b10:	89 ca                	mov    edx,ecx
c0020b12:	ee                   	out    dx,al
c0020b13:	89 f0                	mov    eax,esi
c0020b15:	89 fa                	mov    edx,edi
c0020b17:	ef                   	out    dx,eax
c0020b18:	89 ca                	mov    edx,ecx
c0020b1a:	ed                   	in     eax,dx
c0020b1b:	3c fe                	cmp    al,0xfe
c0020b1d:	0f 85 a9 00 00 00    	jne    c0020bcc <IDE::open(int, int, void*)+0x1a4>
c0020b23:	8b 15 08 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a408
c0020b29:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0020b30:	74 33                	je     c0020b65 <IDE::open(int, int, void*)+0x13d>
c0020b32:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0020b38:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0020b3c:	40                   	inc    eax
c0020b3d:	83 ec 0c             	sub    esp,0xc
c0020b40:	0f b6 c0             	movzx  eax,al
c0020b43:	50                   	push   eax
c0020b44:	55                   	push   ebp
c0020b45:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020b49:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0020b4f:	51                   	push   ecx
c0020b50:	e8 f9 62 ff ff       	call   c0016e4e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0020b55:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0020b5a:	83 c4 1c             	add    esp,0x1c
c0020b5d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0020b63:	eb 0a                	jmp    c0020b6f <IDE::open(int, int, void*)+0x147>
c0020b65:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0020b6f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0020b76:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0020b7d:	c1 e1 10             	shl    ecx,0x10
c0020b80:	c1 e0 08             	shl    eax,0x8
c0020b83:	bf f8 0c 00 00       	mov    edi,0xcf8
c0020b88:	09 c1                	or     ecx,eax
c0020b8a:	89 fa                	mov    edx,edi
c0020b8c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0020b93:	c1 e0 0b             	shl    eax,0xb
c0020b96:	09 c1                	or     ecx,eax
c0020b98:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0020b9e:	89 c8                	mov    eax,ecx
c0020ba0:	ef                   	out    dx,eax
c0020ba1:	be fc 0c 00 00       	mov    esi,0xcfc
c0020ba6:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0020bac:	89 f2                	mov    edx,esi
c0020bae:	ee                   	out    dx,al
c0020baf:	89 c8                	mov    eax,ecx
c0020bb1:	89 fa                	mov    edx,edi
c0020bb3:	ef                   	out    dx,eax
c0020bb4:	89 f2                	mov    edx,esi
c0020bb6:	ed                   	in     eax,dx
c0020bb7:	0f b6 c0             	movzx  eax,al
c0020bba:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0020bc0:	74 46                	je     c0020c08 <IDE::open(int, int, void*)+0x1e0>
c0020bc2:	83 ec 0c             	sub    esp,0xc
c0020bc5:	68 48 8d 02 c0       	push   0xc0028d48
c0020bca:	eb 34                	jmp    c0020c00 <IDE::open(int, int, void*)+0x1d8>
c0020bcc:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0020bd5:	75 17                	jne    c0020bee <IDE::open(int, int, void*)+0x1c6>
c0020bd7:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0020bdc:	74 07                	je     c0020be5 <IDE::open(int, int, void*)+0x1bd>
c0020bde:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0020be3:	75 09                	jne    c0020bee <IDE::open(int, int, void*)+0x1c6>
c0020be5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0020bec:	eb 1a                	jmp    c0020c08 <IDE::open(int, int, void*)+0x1e0>
c0020bee:	83 ec 0c             	sub    esp,0xc
c0020bf1:	68 50 8d 02 c0       	push   0xc0028d50
c0020bf6:	eb 08                	jmp    c0020c00 <IDE::open(int, int, void*)+0x1d8>
c0020bf8:	83 ec 0c             	sub    esp,0xc
c0020bfb:	68 81 8d 02 c0       	push   0xc0028d81
c0020c00:	e8 ea 7d ff ff       	call   c00189ef <Krnl::panic(char const*)>
c0020c05:	83 c4 10             	add    esp,0x10
c0020c08:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0020c0f:	79 1a                	jns    c0020c2b <IDE::open(int, int, void*)+0x203>
c0020c11:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0020c17:	83 e0 fc             	and    eax,0xfffffffc
c0020c1a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0020c21:	83 c0 08             	add    eax,0x8
c0020c24:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0020c2b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0020c31:	89 c2                	mov    edx,eax
c0020c33:	83 e2 0f             	and    edx,0xf
c0020c36:	66 83 fa 08          	cmp    dx,0x8
c0020c3a:	75 0a                	jne    c0020c46 <IDE::open(int, int, void*)+0x21e>
c0020c3c:	83 e8 02             	sub    eax,0x2
c0020c3f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0020c46:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0020c4c:	89 c2                	mov    edx,eax
c0020c4e:	83 e2 0f             	and    edx,0xf
c0020c51:	66 83 fa 08          	cmp    dx,0x8
c0020c55:	75 0a                	jne    c0020c61 <IDE::open(int, int, void*)+0x239>
c0020c57:	83 e8 02             	sub    eax,0x2
c0020c5a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0020c61:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0020c68:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0020c6f:	89 d0                	mov    eax,edx
c0020c71:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020c74:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020c78:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0020c7c:	8d 4a 01             	lea    ecx,[edx+0x1]
c0020c7f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020c84:	0f b6 c9             	movzx  ecx,cl
c0020c87:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0020c8e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0020c91:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0020c95:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0020c99:	8d 50 02             	lea    edx,[eax+0x2]
c0020c9c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0020ca1:	0f b6 d2             	movzx  edx,dl
c0020ca4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0020caa:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020cad:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020cb1:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0020cb5:	8d 48 03             	lea    ecx,[eax+0x3]
c0020cb8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020cbd:	0f b6 c9             	movzx  ecx,cl
c0020cc0:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0020cc6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0020cc9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0020ccd:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0020cd1:	8d 50 04             	lea    edx,[eax+0x4]
c0020cd4:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0020cda:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0020cdf:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0020ce6:	66 85 f6             	test   si,si
c0020ce9:	74 3e                	je     c0020d29 <IDE::open(int, int, void*)+0x301>
c0020ceb:	0f b6 d2             	movzx  edx,dl
c0020cee:	83 c0 05             	add    eax,0x5
c0020cf1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020cf4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020cf8:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0020cfc:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0020d02:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020d07:	eb 20                	jmp    c0020d29 <IDE::open(int, int, void*)+0x301>
c0020d09:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0020d13:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0020d1d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0020d24:	e9 02 ff ff ff       	jmp    c0020c2b <IDE::open(int, int, void*)+0x203>
c0020d29:	52                   	push   edx
c0020d2a:	52                   	push   edx
c0020d2b:	6a 00                	push   0x0
c0020d2d:	53                   	push   ebx
c0020d2e:	e8 7d fa ff ff       	call   c00207b0 <IDE::prepareInterrupt(unsigned char)>
c0020d33:	59                   	pop    ecx
c0020d34:	5e                   	pop    esi
c0020d35:	6a 01                	push   0x1
c0020d37:	53                   	push   ebx
c0020d38:	e8 73 fa ff ff       	call   c00207b0 <IDE::prepareInterrupt(unsigned char)>
c0020d3d:	83 c4 0c             	add    esp,0xc
c0020d40:	6a 00                	push   0x0
c0020d42:	6a 00                	push   0x0
c0020d44:	53                   	push   ebx
c0020d45:	e8 98 fc ff ff       	call   c00209e2 <IDE::enableIRQs(unsigned char, bool)>
c0020d4a:	83 c4 0c             	add    esp,0xc
c0020d4d:	6a 00                	push   0x0
c0020d4f:	6a 01                	push   0x1
c0020d51:	53                   	push   ebx
c0020d52:	e8 8b fc ff ff       	call   c00209e2 <IDE::enableIRQs(unsigned char, bool)>
c0020d57:	83 c4 10             	add    esp,0x10
c0020d5a:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0020d61:	74 40                	je     c0020da3 <IDE::open(int, int, void*)+0x37b>
c0020d63:	83 ec 0c             	sub    esp,0xc
c0020d66:	68 ab 8d 02 c0       	push   0xc0028dab
c0020d6b:	e8 e1 14 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0020d70:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020d73:	6a 01                	push   0x1
c0020d75:	68 aa 09 02 c0       	push   0xc00209aa
c0020d7a:	6a 0e                	push   0xe
c0020d7c:	53                   	push   ebx
c0020d7d:	e8 2e 28 ff ff       	call   c00135b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020d82:	83 c4 14             	add    esp,0x14
c0020d85:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0020d8b:	53                   	push   ebx
c0020d8c:	6a 01                	push   0x1
c0020d8e:	68 c6 09 02 c0       	push   0xc00209c6
c0020d93:	6a 0f                	push   0xf
c0020d95:	53                   	push   ebx
c0020d96:	e8 15 28 ff ff       	call   c00135b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020d9b:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0020da1:	eb 4a                	jmp    c0020ded <IDE::open(int, int, void*)+0x3c5>
c0020da3:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0020dad:	50                   	push   eax
c0020dae:	6a 0f                	push   0xf
c0020db0:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0020db6:	68 c7 8d 02 c0       	push   0xc0028dc7
c0020dbb:	e8 91 14 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0020dc0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020dc3:	6a 00                	push   0x0
c0020dc5:	68 aa 09 02 c0       	push   0xc00209aa
c0020dca:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0020dd0:	53                   	push   ebx
c0020dd1:	e8 da 27 ff ff       	call   c00135b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020dd6:	83 c4 14             	add    esp,0x14
c0020dd9:	53                   	push   ebx
c0020dda:	6a 00                	push   0x0
c0020ddc:	68 c6 09 02 c0       	push   0xc00209c6
c0020de1:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0020de7:	53                   	push   ebx
c0020de8:	e8 c3 27 ff ff       	call   c00135b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020ded:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020def:	83 c4 20             	add    esp,0x20
c0020df2:	83 ec 0c             	sub    esp,0xc
c0020df5:	53                   	push   ebx
c0020df6:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0020df9:	83 c4 0c             	add    esp,0xc
c0020dfc:	6a 07                	push   0x7
c0020dfe:	6a 00                	push   0x0
c0020e00:	53                   	push   ebx
c0020e01:	e8 90 fa ff ff       	call   c0020896 <IDE::read(unsigned char, unsigned char)>
c0020e06:	83 c4 0c             	add    esp,0xc
c0020e09:	6a 07                	push   0x7
c0020e0b:	6a 01                	push   0x1
c0020e0d:	53                   	push   ebx
c0020e0e:	e8 83 fa ff ff       	call   c0020896 <IDE::read(unsigned char, unsigned char)>
c0020e13:	83 c4 0c             	add    esp,0xc
c0020e16:	6a 01                	push   0x1
c0020e18:	6a 00                	push   0x0
c0020e1a:	53                   	push   ebx
c0020e1b:	e8 c2 fb ff ff       	call   c00209e2 <IDE::enableIRQs(unsigned char, bool)>
c0020e20:	83 c4 0c             	add    esp,0xc
c0020e23:	6a 01                	push   0x1
c0020e25:	6a 01                	push   0x1
c0020e27:	53                   	push   ebx
c0020e28:	e8 b5 fb ff ff       	call   c00209e2 <IDE::enableIRQs(unsigned char, bool)>
c0020e2d:	83 c4 2c             	add    esp,0x2c
c0020e30:	31 c0                	xor    eax,eax
c0020e32:	5b                   	pop    ebx
c0020e33:	5e                   	pop    esi
c0020e34:	5f                   	pop    edi
c0020e35:	5d                   	pop    ebp
c0020e36:	c3                   	ret    
c0020e37:	90                   	nop

c0020e38 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0020e38:	55                   	push   ebp
c0020e39:	57                   	push   edi
c0020e3a:	56                   	push   esi
c0020e3b:	53                   	push   ebx
c0020e3c:	83 ec 1c             	sub    esp,0x1c
c0020e3f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e43:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020e47:	8d 50 f8             	lea    edx,[eax-0x8]
c0020e4a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020e4e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0020e52:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020e56:	80 fa 03             	cmp    dl,0x3
c0020e59:	77 5d                	ja     c0020eb8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0020e5b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020e5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020e63:	0f b6 db             	movzx  ebx,bl
c0020e66:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0020e69:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0020e6d:	83 ca 80             	or     edx,0xffffff80
c0020e70:	0f b6 d2             	movzx  edx,dl
c0020e73:	52                   	push   edx
c0020e74:	6a 0c                	push   0xc
c0020e76:	53                   	push   ebx
c0020e77:	56                   	push   esi
c0020e78:	e8 59 f9 ff ff       	call   c00207d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020e7d:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0020e82:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020e86:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0020e8a:	0f b6 c0             	movzx  eax,al
c0020e8d:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0020e91:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0020e93:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0020e98:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0020e9c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0020ea0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020ea4:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0020eac:	83 c4 2c             	add    esp,0x2c
c0020eaf:	5b                   	pop    ebx
c0020eb0:	5e                   	pop    esi
c0020eb1:	5f                   	pop    edi
c0020eb2:	5d                   	pop    ebp
c0020eb3:	e9 1e f9 ff ff       	jmp    c00207d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020eb8:	3c 07                	cmp    al,0x7
c0020eba:	77 10                	ja     c0020ecc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0020ebc:	0f b6 db             	movzx  ebx,bl
c0020ebf:	0f b6 d0             	movzx  edx,al
c0020ec2:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0020eca:	eb 2d                	jmp    c0020ef9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0020ecc:	3c 0d                	cmp    al,0xd
c0020ece:	77 13                	ja     c0020ee3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0020ed0:	0f b6 db             	movzx  ebx,bl
c0020ed3:	0f b6 c0             	movzx  eax,al
c0020ed6:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0020edd:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0020ee1:	eb 16                	jmp    c0020ef9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0020ee3:	3c 15                	cmp    al,0x15
c0020ee5:	77 14                	ja     c0020efb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0020ee7:	0f b6 db             	movzx  ebx,bl
c0020eea:	0f b6 c0             	movzx  eax,al
c0020eed:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0020ef5:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0020ef9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0020efb:	83 c4 1c             	add    esp,0x1c
c0020efe:	5b                   	pop    ebx
c0020eff:	5e                   	pop    esi
c0020f00:	5f                   	pop    edi
c0020f01:	5d                   	pop    ebp
c0020f02:	c3                   	ret    
c0020f03:	90                   	nop

c0020f04 <IDE::detect()>:
c0020f04:	55                   	push   ebp
c0020f05:	57                   	push   edi
c0020f06:	56                   	push   esi
c0020f07:	53                   	push   ebx
c0020f08:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020f0e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0020f15:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0020f1c:	0f 85 be 02 00 00    	jne    c00211e0 <IDE::detect()+0x2dc>
c0020f22:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0020f29:	31 f6                	xor    esi,esi
c0020f2b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020f33:	31 ed                	xor    ebp,ebp
c0020f35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020f39:	c1 e0 06             	shl    eax,0x6
c0020f3c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0020f44:	89 e8                	mov    eax,ebp
c0020f46:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020f4a:	c1 e0 04             	shl    eax,0x4
c0020f4d:	83 c8 a0             	or     eax,0xffffffa0
c0020f50:	0f b6 c0             	movzx  eax,al
c0020f53:	50                   	push   eax
c0020f54:	6a 06                	push   0x6
c0020f56:	56                   	push   esi
c0020f57:	53                   	push   ebx
c0020f58:	e8 79 f8 ff ff       	call   c00207d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020f5d:	83 c4 0c             	add    esp,0xc
c0020f60:	6a 0c                	push   0xc
c0020f62:	56                   	push   esi
c0020f63:	53                   	push   ebx
c0020f64:	e8 2d f9 ff ff       	call   c0020896 <IDE::read(unsigned char, unsigned char)>
c0020f69:	83 c4 0c             	add    esp,0xc
c0020f6c:	6a 0c                	push   0xc
c0020f6e:	56                   	push   esi
c0020f6f:	53                   	push   ebx
c0020f70:	e8 21 f9 ff ff       	call   c0020896 <IDE::read(unsigned char, unsigned char)>
c0020f75:	83 c4 0c             	add    esp,0xc
c0020f78:	6a 0c                	push   0xc
c0020f7a:	56                   	push   esi
c0020f7b:	53                   	push   ebx
c0020f7c:	e8 15 f9 ff ff       	call   c0020896 <IDE::read(unsigned char, unsigned char)>
c0020f81:	83 c4 0c             	add    esp,0xc
c0020f84:	6a 0c                	push   0xc
c0020f86:	56                   	push   esi
c0020f87:	53                   	push   ebx
c0020f88:	e8 09 f9 ff ff       	call   c0020896 <IDE::read(unsigned char, unsigned char)>
c0020f8d:	68 ec 00 00 00       	push   0xec
c0020f92:	6a 07                	push   0x7
c0020f94:	56                   	push   esi
c0020f95:	53                   	push   ebx
c0020f96:	e8 3b f8 ff ff       	call   c00207d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020f9b:	83 c4 1c             	add    esp,0x1c
c0020f9e:	6a 0c                	push   0xc
c0020fa0:	56                   	push   esi
c0020fa1:	53                   	push   ebx
c0020fa2:	e8 ef f8 ff ff       	call   c0020896 <IDE::read(unsigned char, unsigned char)>
c0020fa7:	83 c4 0c             	add    esp,0xc
c0020faa:	6a 0c                	push   0xc
c0020fac:	56                   	push   esi
c0020fad:	53                   	push   ebx
c0020fae:	e8 e3 f8 ff ff       	call   c0020896 <IDE::read(unsigned char, unsigned char)>
c0020fb3:	83 c4 0c             	add    esp,0xc
c0020fb6:	6a 0c                	push   0xc
c0020fb8:	56                   	push   esi
c0020fb9:	53                   	push   ebx
c0020fba:	e8 d7 f8 ff ff       	call   c0020896 <IDE::read(unsigned char, unsigned char)>
c0020fbf:	83 c4 0c             	add    esp,0xc
c0020fc2:	6a 0c                	push   0xc
c0020fc4:	56                   	push   esi
c0020fc5:	53                   	push   ebx
c0020fc6:	e8 cb f8 ff ff       	call   c0020896 <IDE::read(unsigned char, unsigned char)>
c0020fcb:	83 c4 0c             	add    esp,0xc
c0020fce:	6a 0c                	push   0xc
c0020fd0:	56                   	push   esi
c0020fd1:	53                   	push   ebx
c0020fd2:	e8 bf f8 ff ff       	call   c0020896 <IDE::read(unsigned char, unsigned char)>
c0020fd7:	83 c4 10             	add    esp,0x10
c0020fda:	84 c0                	test   al,al
c0020fdc:	0f 84 8b 01 00 00    	je     c002116d <IDE::detect()+0x269>
c0020fe2:	31 ff                	xor    edi,edi
c0020fe4:	50                   	push   eax
c0020fe5:	6a 0c                	push   0xc
c0020fe7:	56                   	push   esi
c0020fe8:	53                   	push   ebx
c0020fe9:	e8 a8 f8 ff ff       	call   c0020896 <IDE::read(unsigned char, unsigned char)>
c0020fee:	83 c4 10             	add    esp,0x10
c0020ff1:	a8 01                	test   al,0x1
c0020ff3:	0f 85 8e 01 00 00    	jne    c0021187 <IDE::detect()+0x283>
c0020ff9:	84 c0                	test   al,al
c0020ffb:	78 04                	js     c0021001 <IDE::detect()+0xfd>
c0020ffd:	a8 08                	test   al,0x8
c0020fff:	75 27                	jne    c0021028 <IDE::detect()+0x124>
c0021001:	47                   	inc    edi
c0021002:	81 ff 17 01 00 00    	cmp    edi,0x117
c0021008:	7e da                	jle    c0020fe4 <IDE::detect()+0xe0>
c002100a:	50                   	push   eax
c002100b:	50                   	push   eax
c002100c:	6a 00                	push   0x0
c002100e:	68 40 4b 4c 00       	push   0x4c4b40
c0021013:	e8 72 ae ff ff       	call   c001be8a <nanoSleep(unsigned long long)>
c0021018:	83 c4 10             	add    esp,0x10
c002101b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0021021:	75 c1                	jne    c0020fe4 <IDE::detect()+0xe0>
c0021023:	e9 5f 01 00 00       	jmp    c0021187 <IDE::detect()+0x283>
c0021028:	31 c9                	xor    ecx,ecx
c002102a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002102e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0021032:	83 ec 0c             	sub    esp,0xc
c0021035:	68 80 00 00 00       	push   0x80
c002103a:	57                   	push   edi
c002103b:	6a 00                	push   0x0
c002103d:	56                   	push   esi
c002103e:	53                   	push   ebx
c002103f:	e8 f4 fd ff ff       	call   c0020e38 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0021044:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0021049:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002104d:	89 d1                	mov    ecx,edx
c002104f:	c1 e0 06             	shl    eax,0x6
c0021052:	01 d8                	add    eax,ebx
c0021054:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002105b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0021062:	89 f2                	mov    edx,esi
c0021064:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002106a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002106e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0021074:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021078:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002107f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0021087:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002108e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0021096:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002109c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00210a3:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00210a9:	8d 54 24 58          	lea    edx,[esp+0x58]
c00210ad:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00210b1:	83 c4 20             	add    esp,0x20
c00210b4:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00210b7:	83 c0 02             	add    eax,0x2
c00210ba:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00210c0:	83 c7 02             	add    edi,0x2
c00210c3:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00210c6:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00210cc:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00210d0:	75 e2                	jne    c00210b4 <IDE::detect()+0x1b0>
c00210d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00210d6:	c1 e0 06             	shl    eax,0x6
c00210d9:	01 d8                	add    eax,ebx
c00210db:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00210e1:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00210e8:	66 c1 ea 09          	shr    dx,0x9
c00210ec:	83 e2 01             	and    edx,0x1
c00210ef:	84 c9                	test   cl,cl
c00210f1:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00210f7:	75 2f                	jne    c0021128 <IDE::detect()+0x224>
c00210f9:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00210ff:	85 c0                	test   eax,eax
c0021101:	74 66                	je     c0021169 <IDE::detect()+0x265>
c0021103:	50                   	push   eax
c0021104:	55                   	push   ebp
c0021105:	56                   	push   esi
c0021106:	68 e3 8d 02 c0       	push   0xc0028de3
c002110b:	e8 41 11 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0021110:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0021117:	e8 46 10 ff ff       	call   c0012162 <operator new(unsigned long)>
c002111c:	89 c7                	mov    edi,eax
c002111e:	89 04 24             	mov    DWORD PTR [esp],eax
c0021121:	e8 e8 02 00 00       	call   c002140e <ATA::ATA()>
c0021126:	eb 28                	jmp    c0021150 <IDE::detect()+0x24c>
c0021128:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c002112e:	55                   	push   ebp
c002112f:	56                   	push   esi
c0021130:	68 12 8e 02 c0       	push   0xc0028e12
c0021135:	e8 17 11 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c002113a:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0021141:	e8 1c 10 ff ff       	call   c0012162 <operator new(unsigned long)>
c0021146:	89 c7                	mov    edi,eax
c0021148:	89 04 24             	mov    DWORD PTR [esp],eax
c002114b:	e8 ee 08 00 00       	call   c0021a3e <ATAPI::ATAPI()>
c0021150:	5a                   	pop    edx
c0021151:	59                   	pop    ecx
c0021152:	57                   	push   edi
c0021153:	53                   	push   ebx
c0021154:	e8 03 25 ff ff       	call   c001365c <Device::addChild(Device*)>
c0021159:	8b 07                	mov    eax,DWORD PTR [edi]
c002115b:	53                   	push   ebx
c002115c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021160:	6a 00                	push   0x0
c0021162:	57                   	push   edi
c0021163:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021166:	83 c4 20             	add    esp,0x20
c0021169:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002116d:	4d                   	dec    ebp
c002116e:	74 0a                	je     c002117a <IDE::detect()+0x276>
c0021170:	bd 01 00 00 00       	mov    ebp,0x1
c0021175:	e9 bb fd ff ff       	jmp    c0020f35 <IDE::detect()+0x31>
c002117a:	4e                   	dec    esi
c002117b:	74 63                	je     c00211e0 <IDE::detect()+0x2dc>
c002117d:	be 01 00 00 00       	mov    esi,0x1
c0021182:	e9 ac fd ff ff       	jmp    c0020f33 <IDE::detect()+0x2f>
c0021187:	50                   	push   eax
c0021188:	6a 04                	push   0x4
c002118a:	56                   	push   esi
c002118b:	53                   	push   ebx
c002118c:	e8 05 f7 ff ff       	call   c0020896 <IDE::read(unsigned char, unsigned char)>
c0021191:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0021195:	83 c4 0c             	add    esp,0xc
c0021198:	6a 05                	push   0x5
c002119a:	56                   	push   esi
c002119b:	53                   	push   ebx
c002119c:	e8 f5 f6 ff ff       	call   c0020896 <IDE::read(unsigned char, unsigned char)>
c00211a1:	83 c4 10             	add    esp,0x10
c00211a4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00211a8:	80 fa 14             	cmp    dl,0x14
c00211ab:	75 04                	jne    c00211b1 <IDE::detect()+0x2ad>
c00211ad:	3c eb                	cmp    al,0xeb
c00211af:	eb 07                	jmp    c00211b8 <IDE::detect()+0x2b4>
c00211b1:	3c 96                	cmp    al,0x96
c00211b3:	75 b8                	jne    c002116d <IDE::detect()+0x269>
c00211b5:	80 fa 69             	cmp    dl,0x69
c00211b8:	75 b3                	jne    c002116d <IDE::detect()+0x269>
c00211ba:	68 a1 00 00 00       	push   0xa1
c00211bf:	6a 07                	push   0x7
c00211c1:	56                   	push   esi
c00211c2:	53                   	push   ebx
c00211c3:	e8 0e f6 ff ff       	call   c00207d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00211c8:	5f                   	pop    edi
c00211c9:	58                   	pop    eax
c00211ca:	6a 00                	push   0x0
c00211cc:	68 40 42 0f 00       	push   0xf4240
c00211d1:	e8 b4 ac ff ff       	call   c001be8a <nanoSleep(unsigned long long)>
c00211d6:	83 c4 10             	add    esp,0x10
c00211d9:	b1 01                	mov    cl,0x1
c00211db:	e9 4a fe ff ff       	jmp    c002102a <IDE::detect()+0x126>
c00211e0:	81 c4 1c 02 00 00    	add    esp,0x21c
c00211e6:	5b                   	pop    ebx
c00211e7:	5e                   	pop    esi
c00211e8:	5f                   	pop    edi
c00211e9:	5d                   	pop    ebp
c00211ea:	c3                   	ret    
c00211eb:	90                   	nop

c00211ec <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00211ec:	55                   	push   ebp
c00211ed:	57                   	push   edi
c00211ee:	56                   	push   esi
c00211ef:	53                   	push   ebx
c00211f0:	83 ec 1c             	sub    esp,0x1c
c00211f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00211f7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00211fb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00211ff:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021203:	88 c3                	mov    bl,al
c0021205:	84 c0                	test   al,al
c0021207:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002120b:	0f 84 67 01 00 00    	je     c0021378 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0021211:	83 ec 0c             	sub    esp,0xc
c0021214:	68 43 8e 02 c0       	push   0xc0028e43
c0021219:	e8 33 10 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c002121e:	83 c4 10             	add    esp,0x10
c0021221:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021225:	3c 01                	cmp    al,0x1
c0021227:	75 17                	jne    c0021240 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0021229:	83 ec 0c             	sub    esp,0xc
c002122c:	b3 13                	mov    bl,0x13
c002122e:	68 4f 8e 02 c0       	push   0xc0028e4f
c0021233:	e8 19 10 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0021238:	83 c4 10             	add    esp,0x10
c002123b:	e9 25 01 00 00       	jmp    c0021365 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021240:	3c 02                	cmp    al,0x2
c0021242:	0f 85 ef 00 00 00    	jne    c0021337 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0021248:	d1 e6                	shl    esi,1
c002124a:	09 ee                	or     esi,ebp
c002124c:	52                   	push   edx
c002124d:	89 f0                	mov    eax,esi
c002124f:	6a 01                	push   0x1
c0021251:	0f b6 f0             	movzx  esi,al
c0021254:	c1 e6 06             	shl    esi,0x6
c0021257:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c002125f:	50                   	push   eax
c0021260:	57                   	push   edi
c0021261:	e8 30 f6 ff ff       	call   c0020896 <IDE::read(unsigned char, unsigned char)>
c0021266:	83 c4 10             	add    esp,0x10
c0021269:	89 c6                	mov    esi,eax
c002126b:	a8 01                	test   al,0x1
c002126d:	74 12                	je     c0021281 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c002126f:	83 ec 0c             	sub    esp,0xc
c0021272:	b3 07                	mov    bl,0x7
c0021274:	68 64 8e 02 c0       	push   0xc0028e64
c0021279:	e8 d3 0f ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c002127e:	83 c4 10             	add    esp,0x10
c0021281:	f7 c6 02 00 00 00    	test   esi,0x2
c0021287:	74 12                	je     c002129b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0021289:	83 ec 0c             	sub    esp,0xc
c002128c:	b3 03                	mov    bl,0x3
c002128e:	68 82 8e 02 c0       	push   0xc0028e82
c0021293:	e8 b9 0f ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0021298:	83 c4 10             	add    esp,0x10
c002129b:	f7 c6 04 00 00 00    	test   esi,0x4
c00212a1:	74 12                	je     c00212b5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c00212a3:	83 ec 0c             	sub    esp,0xc
c00212a6:	b3 14                	mov    bl,0x14
c00212a8:	68 a2 8e 02 c0       	push   0xc0028ea2
c00212ad:	e8 9f 0f ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00212b2:	83 c4 10             	add    esp,0x10
c00212b5:	f7 c6 08 00 00 00    	test   esi,0x8
c00212bb:	74 12                	je     c00212cf <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c00212bd:	83 ec 0c             	sub    esp,0xc
c00212c0:	b3 03                	mov    bl,0x3
c00212c2:	68 82 8e 02 c0       	push   0xc0028e82
c00212c7:	e8 85 0f ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00212cc:	83 c4 10             	add    esp,0x10
c00212cf:	f7 c6 10 00 00 00    	test   esi,0x10
c00212d5:	74 12                	je     c00212e9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00212d7:	83 ec 0c             	sub    esp,0xc
c00212da:	b3 15                	mov    bl,0x15
c00212dc:	68 ba 8e 02 c0       	push   0xc0028eba
c00212e1:	e8 6b 0f ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00212e6:	83 c4 10             	add    esp,0x10
c00212e9:	f7 c6 20 00 00 00    	test   esi,0x20
c00212ef:	74 12                	je     c0021303 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00212f1:	83 ec 0c             	sub    esp,0xc
c00212f4:	b3 03                	mov    bl,0x3
c00212f6:	68 82 8e 02 c0       	push   0xc0028e82
c00212fb:	e8 51 0f ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0021300:	83 c4 10             	add    esp,0x10
c0021303:	f7 c6 40 00 00 00    	test   esi,0x40
c0021309:	74 12                	je     c002131d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c002130b:	83 ec 0c             	sub    esp,0xc
c002130e:	b3 16                	mov    bl,0x16
c0021310:	68 d4 8e 02 c0       	push   0xc0028ed4
c0021315:	e8 37 0f ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c002131a:	83 c4 10             	add    esp,0x10
c002131d:	89 f0                	mov    eax,esi
c002131f:	84 c0                	test   al,al
c0021321:	79 42                	jns    c0021365 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021323:	83 ec 0c             	sub    esp,0xc
c0021326:	b3 0d                	mov    bl,0xd
c0021328:	68 f5 8e 02 c0       	push   0xc0028ef5
c002132d:	e8 1f 0f ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0021332:	83 c4 10             	add    esp,0x10
c0021335:	eb 2e                	jmp    c0021365 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021337:	3c 03                	cmp    al,0x3
c0021339:	75 14                	jne    c002134f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c002133b:	83 ec 0c             	sub    esp,0xc
c002133e:	b3 17                	mov    bl,0x17
c0021340:	68 09 8f 02 c0       	push   0xc0028f09
c0021345:	e8 07 0f ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c002134a:	83 c4 10             	add    esp,0x10
c002134d:	eb 16                	jmp    c0021365 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002134f:	3c 04                	cmp    al,0x4
c0021351:	75 12                	jne    c0021365 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021353:	83 ec 0c             	sub    esp,0xc
c0021356:	b3 08                	mov    bl,0x8
c0021358:	68 1f 8f 02 c0       	push   0xc0028f1f
c002135d:	e8 ef 0e ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0021362:	83 c4 10             	add    esp,0x10
c0021365:	50                   	push   eax
c0021366:	50                   	push   eax
c0021367:	0f b6 c3             	movzx  eax,bl
c002136a:	50                   	push   eax
c002136b:	68 37 8f 02 c0       	push   0xc0028f37
c0021370:	e8 dc 0e ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0021375:	83 c4 10             	add    esp,0x10
c0021378:	83 c4 1c             	add    esp,0x1c
c002137b:	88 d8                	mov    al,bl
c002137d:	5b                   	pop    ebx
c002137e:	5e                   	pop    esi
c002137f:	5f                   	pop    edi
c0021380:	5d                   	pop    ebp
c0021381:	c3                   	ret    

c0021382 <IDE::polling(unsigned char, unsigned int)>:
c0021382:	57                   	push   edi
c0021383:	56                   	push   esi
c0021384:	53                   	push   ebx
c0021385:	bb 04 00 00 00       	mov    ebx,0x4
c002138a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002138e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0021393:	52                   	push   edx
c0021394:	6a 0c                	push   0xc
c0021396:	56                   	push   esi
c0021397:	57                   	push   edi
c0021398:	e8 f9 f4 ff ff       	call   c0020896 <IDE::read(unsigned char, unsigned char)>
c002139d:	83 c4 10             	add    esp,0x10
c00213a0:	4b                   	dec    ebx
c00213a1:	75 f0                	jne    c0021393 <IDE::polling(unsigned char, unsigned int)+0x11>
c00213a3:	bb a0 86 01 00       	mov    ebx,0x186a0
c00213a8:	50                   	push   eax
c00213a9:	6a 0c                	push   0xc
c00213ab:	56                   	push   esi
c00213ac:	57                   	push   edi
c00213ad:	e8 e4 f4 ff ff       	call   c0020896 <IDE::read(unsigned char, unsigned char)>
c00213b2:	83 c4 10             	add    esp,0x10
c00213b5:	a8 01                	test   al,0x1
c00213b7:	74 12                	je     c00213cb <IDE::polling(unsigned char, unsigned int)+0x49>
c00213b9:	83 ec 0c             	sub    esp,0xc
c00213bc:	68 51 8f 02 c0       	push   0xc0028f51
c00213c1:	e8 8b 0e ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00213c6:	83 c4 10             	add    esp,0x10
c00213c9:	eb 17                	jmp    c00213e2 <IDE::polling(unsigned char, unsigned int)+0x60>
c00213cb:	a8 20                	test   al,0x20
c00213cd:	75 0f                	jne    c00213de <IDE::polling(unsigned char, unsigned int)+0x5c>
c00213cf:	4b                   	dec    ebx
c00213d0:	74 10                	je     c00213e2 <IDE::polling(unsigned char, unsigned int)+0x60>
c00213d2:	84 c0                	test   al,al
c00213d4:	78 d2                	js     c00213a8 <IDE::polling(unsigned char, unsigned int)+0x26>
c00213d6:	a8 08                	test   al,0x8
c00213d8:	74 ce                	je     c00213a8 <IDE::polling(unsigned char, unsigned int)+0x26>
c00213da:	31 c0                	xor    eax,eax
c00213dc:	eb 06                	jmp    c00213e4 <IDE::polling(unsigned char, unsigned int)+0x62>
c00213de:	b0 01                	mov    al,0x1
c00213e0:	eb 02                	jmp    c00213e4 <IDE::polling(unsigned char, unsigned int)+0x62>
c00213e2:	b0 02                	mov    al,0x2
c00213e4:	5b                   	pop    ebx
c00213e5:	5e                   	pop    esi
c00213e6:	5f                   	pop    edi
c00213e7:	c3                   	ret    

c00213e8 <ATA::close(int, int, void*)>:
c00213e8:	83 ec 0c             	sub    esp,0xc
c00213eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213ef:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00213f5:	85 c0                	test   eax,eax
c00213f7:	74 0c                	je     c0021405 <ATA::close(int, int, void*)+0x1d>
c00213f9:	83 ec 0c             	sub    esp,0xc
c00213fc:	8b 10                	mov    edx,DWORD PTR [eax]
c00213fe:	50                   	push   eax
c00213ff:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0021402:	83 c4 10             	add    esp,0x10
c0021405:	31 c0                	xor    eax,eax
c0021407:	83 c4 0c             	add    esp,0xc
c002140a:	c3                   	ret    
c002140b:	90                   	nop

c002140c <ATA::powerSaving(PowerSavingLevel)>:
c002140c:	c3                   	ret    
c002140d:	90                   	nop

c002140e <ATA::ATA()>:
c002140e:	83 ec 0c             	sub    esp,0xc
c0021411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021415:	83 ec 04             	sub    esp,0x4
c0021418:	68 00 02 00 00       	push   0x200
c002141d:	68 94 8f 02 c0       	push   0xc0028f94
c0021422:	50                   	push   eax
c0021423:	e8 3a 26 ff ff       	call   c0013a62 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021428:	83 c4 10             	add    esp,0x10
c002142b:	ba c0 8f 02 c0       	mov    edx,0xc0028fc0
c0021430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021434:	89 10                	mov    DWORD PTR [eax],edx
c0021436:	90                   	nop
c0021437:	83 c4 0c             	add    esp,0xc
c002143a:	c3                   	ret    
c002143b:	90                   	nop

c002143c <ATA::flush(bool)>:
c002143c:	53                   	push   ebx
c002143d:	83 ec 08             	sub    esp,0x8
c0021440:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0021445:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021449:	19 c0                	sbb    eax,eax
c002144b:	83 e0 fd             	and    eax,0xfffffffd
c002144e:	05 ea 00 00 00       	add    eax,0xea
c0021453:	50                   	push   eax
c0021454:	6a 07                	push   0x7
c0021456:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002145d:	50                   	push   eax
c002145e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021464:	e8 6d f3 ff ff       	call   c00207d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021469:	83 c4 0c             	add    esp,0xc
c002146c:	6a 00                	push   0x0
c002146e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021475:	50                   	push   eax
c0021476:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002147c:	e8 01 ff ff ff       	call   c0021382 <IDE::polling(unsigned char, unsigned int)>
c0021481:	83 c4 18             	add    esp,0x18
c0021484:	5b                   	pop    ebx
c0021485:	c3                   	ret    

c0021486 <ATA::readyForCommand()>:
c0021486:	56                   	push   esi
c0021487:	53                   	push   ebx
c0021488:	31 db                	xor    ebx,ebx
c002148a:	50                   	push   eax
c002148b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002148f:	50                   	push   eax
c0021490:	6a 0c                	push   0xc
c0021492:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0021499:	50                   	push   eax
c002149a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00214a0:	e8 f1 f3 ff ff       	call   c0020896 <IDE::read(unsigned char, unsigned char)>
c00214a5:	83 c4 10             	add    esp,0x10
c00214a8:	a8 88                	test   al,0x88
c00214aa:	74 23                	je     c00214cf <ATA::readyForCommand()+0x49>
c00214ac:	43                   	inc    ebx
c00214ad:	83 fb 63             	cmp    ebx,0x63
c00214b0:	7e dd                	jle    c002148f <ATA::readyForCommand()+0x9>
c00214b2:	51                   	push   ecx
c00214b3:	51                   	push   ecx
c00214b4:	6a 00                	push   0x0
c00214b6:	68 40 42 0f 00       	push   0xf4240
c00214bb:	e8 ca a9 ff ff       	call   c001be8a <nanoSleep(unsigned long long)>
c00214c0:	83 c4 10             	add    esp,0x10
c00214c3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00214c9:	75 c4                	jne    c002148f <ATA::readyForCommand()+0x9>
c00214cb:	31 c0                	xor    eax,eax
c00214cd:	eb 02                	jmp    c00214d1 <ATA::readyForCommand()+0x4b>
c00214cf:	b0 01                	mov    al,0x1
c00214d1:	5a                   	pop    edx
c00214d2:	5b                   	pop    ebx
c00214d3:	5e                   	pop    esi
c00214d4:	c3                   	ret    
c00214d5:	90                   	nop

c00214d6 <ATA::access(unsigned long long, int, void*, bool)>:
c00214d6:	55                   	push   ebp
c00214d7:	57                   	push   edi
c00214d8:	56                   	push   esi
c00214d9:	53                   	push   ebx
c00214da:	83 ec 2c             	sub    esp,0x2c
c00214dd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00214e1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00214e5:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00214e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00214ed:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00214f1:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00214f5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00214f9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00214ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021503:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0021509:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002150d:	c1 e0 06             	shl    eax,0x6
c0021510:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0021518:	74 5d                	je     c0021577 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c002151a:	89 fa                	mov    edx,edi
c002151c:	89 f0                	mov    eax,esi
c002151e:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0021522:	c1 ea 1c             	shr    edx,0x1c
c0021525:	89 d1                	mov    ecx,edx
c0021527:	09 c1                	or     ecx,eax
c0021529:	74 25                	je     c0021550 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002152b:	31 ed                	xor    ebp,ebp
c002152d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0021534:	89 fa                	mov    edx,edi
c0021536:	89 f0                	mov    eax,esi
c0021538:	0f ad d0             	shrd   eax,edx,cl
c002153b:	d3 ea                	shr    edx,cl
c002153d:	f6 c1 20             	test   cl,0x20
c0021540:	74 02                	je     c0021544 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0021542:	89 d0                	mov    eax,edx
c0021544:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0021548:	45                   	inc    ebp
c0021549:	83 fd 06             	cmp    ebp,0x6
c002154c:	75 df                	jne    c002152d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002154e:	eb 76                	jmp    c00215c6 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0021550:	89 f0                	mov    eax,esi
c0021552:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0021557:	89 fa                	mov    edx,edi
c0021559:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0021560:	0f ac d0 10          	shrd   eax,edx,0x10
c0021564:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0021569:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002156d:	c1 ee 18             	shr    esi,0x18
c0021570:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0021575:	eb 56                	jmp    c00215cd <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0021577:	6a 00                	push   0x0
c0021579:	6a 3f                	push   0x3f
c002157b:	57                   	push   edi
c002157c:	56                   	push   esi
c002157d:	e8 da 1e 00 00       	call   c002345c <__umoddi3>
c0021582:	83 c4 10             	add    esp,0x10
c0021585:	40                   	inc    eax
c0021586:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002158a:	6a 00                	push   0x0
c002158c:	68 f0 03 00 00       	push   0x3f0
c0021591:	57                   	push   edi
c0021592:	56                   	push   esi
c0021593:	e8 c4 1d 00 00       	call   c002335c <__udivdi3>
c0021598:	83 c4 10             	add    esp,0x10
c002159b:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00215a0:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00215a7:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00215ac:	6a 00                	push   0x0
c00215ae:	6a 3f                	push   0x3f
c00215b0:	57                   	push   edi
c00215b1:	56                   	push   esi
c00215b2:	e8 a5 1d 00 00       	call   c002335c <__udivdi3>
c00215b7:	83 c4 10             	add    esp,0x10
c00215ba:	89 c6                	mov    esi,eax
c00215bc:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00215c1:	83 e6 0f             	and    esi,0xf
c00215c4:	eb 07                	jmp    c00215cd <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00215c6:	31 f6                	xor    esi,esi
c00215c8:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00215cd:	bf 01 00 00 00       	mov    edi,0x1
c00215d2:	50                   	push   eax
c00215d3:	6a 00                	push   0x0
c00215d5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00215dc:	50                   	push   eax
c00215dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00215e1:	e8 fc f3 ff ff       	call   c00209e2 <IDE::enableIRQs(unsigned char, bool)>
c00215e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00215e9:	e8 98 fe ff ff       	call   c0021486 <ATA::readyForCommand()>
c00215ee:	83 c4 10             	add    esp,0x10
c00215f1:	84 c0                	test   al,al
c00215f3:	0f 84 50 02 00 00    	je     c0021849 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c00215f9:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00215ff:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0021605:	c1 e0 04             	shl    eax,0x4
c0021608:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002160f:	09 c6                	or     esi,eax
c0021611:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0021616:	75 05                	jne    c002161d <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0021618:	83 ce a0             	or     esi,0xffffffa0
c002161b:	eb 03                	jmp    c0021620 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002161d:	83 ce e0             	or     esi,0xffffffe0
c0021620:	89 f0                	mov    eax,esi
c0021622:	0f b6 f0             	movzx  esi,al
c0021625:	56                   	push   esi
c0021626:	6a 06                	push   0x6
c0021628:	51                   	push   ecx
c0021629:	52                   	push   edx
c002162a:	e8 a7 f1 ff ff       	call   c00207d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002162f:	83 c4 10             	add    esp,0x10
c0021632:	6a 00                	push   0x0
c0021634:	6a 01                	push   0x1
c0021636:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002163d:	50                   	push   eax
c002163e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021644:	e8 8d f1 ff ff       	call   c00207d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021649:	83 c4 10             	add    esp,0x10
c002164c:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0021651:	75 6e                	jne    c00216c1 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0021653:	6a 00                	push   0x0
c0021655:	6a 08                	push   0x8
c0021657:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002165e:	50                   	push   eax
c002165f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021665:	e8 6c f1 ff ff       	call   c00207d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002166a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002166f:	50                   	push   eax
c0021670:	6a 09                	push   0x9
c0021672:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021679:	50                   	push   eax
c002167a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021680:	e8 51 f1 ff ff       	call   c00207d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021685:	83 c4 20             	add    esp,0x20
c0021688:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002168d:	50                   	push   eax
c002168e:	6a 0a                	push   0xa
c0021690:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021697:	50                   	push   eax
c0021698:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002169e:	e8 33 f1 ff ff       	call   c00207d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00216a3:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00216a8:	50                   	push   eax
c00216a9:	6a 0b                	push   0xb
c00216ab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00216b2:	50                   	push   eax
c00216b3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00216b9:	e8 18 f1 ff ff       	call   c00207d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00216be:	83 c4 20             	add    esp,0x20
c00216c1:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00216c6:	50                   	push   eax
c00216c7:	6a 02                	push   0x2
c00216c9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00216d0:	50                   	push   eax
c00216d1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00216d7:	e8 fa f0 ff ff       	call   c00207d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00216dc:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00216e1:	50                   	push   eax
c00216e2:	6a 03                	push   0x3
c00216e4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00216eb:	50                   	push   eax
c00216ec:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00216f2:	e8 df f0 ff ff       	call   c00207d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00216f7:	83 c4 20             	add    esp,0x20
c00216fa:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00216ff:	50                   	push   eax
c0021700:	6a 04                	push   0x4
c0021702:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021709:	50                   	push   eax
c002170a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021710:	e8 c1 f0 ff ff       	call   c00207d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021715:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002171a:	50                   	push   eax
c002171b:	6a 05                	push   0x5
c002171d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021724:	50                   	push   eax
c0021725:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002172b:	e8 a6 f0 ff ff       	call   c00207d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021730:	83 c4 20             	add    esp,0x20
c0021733:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0021738:	0f 94 c0             	sete   al
c002173b:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0021740:	74 09                	je     c002174b <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0021742:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0021749:	eb 07                	jmp    c0021752 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c002174b:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0021752:	0f b6 c0             	movzx  eax,al
c0021755:	50                   	push   eax
c0021756:	6a 07                	push   0x7
c0021758:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002175f:	50                   	push   eax
c0021760:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021766:	e8 6b f0 ff ff       	call   c00207d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002176b:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002176f:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0021773:	83 c4 10             	add    esp,0x10
c0021776:	85 f6                	test   esi,esi
c0021778:	0f 84 ac 00 00 00    	je     c002182a <ATA::access(unsigned long long, int, void*, bool)+0x354>
c002177e:	50                   	push   eax
c002177f:	6a 01                	push   0x1
c0021781:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021788:	50                   	push   eax
c0021789:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002178f:	e8 ee fb ff ff       	call   c0021382 <IDE::polling(unsigned char, unsigned int)>
c0021794:	83 c4 10             	add    esp,0x10
c0021797:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002179d:	84 c0                	test   al,al
c002179f:	74 20                	je     c00217c1 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c00217a1:	0f b6 f8             	movzx  edi,al
c00217a4:	0f b6 d2             	movzx  edx,dl
c00217a7:	57                   	push   edi
c00217a8:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00217af:	50                   	push   eax
c00217b0:	52                   	push   edx
c00217b1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00217b7:	e8 30 fa ff ff       	call   c00211ec <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00217bc:	e9 85 00 00 00       	jmp    c0021846 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c00217c1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00217c6:	74 41                	je     c0021809 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c00217c8:	31 c9                	xor    ecx,ecx
c00217ca:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c00217ce:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00217d2:	50                   	push   eax
c00217d3:	50                   	push   eax
c00217d4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00217db:	50                   	push   eax
c00217dc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00217e2:	e8 dd ef ff ff       	call   c00207c4 <IDE::getBase(unsigned char)>
c00217e7:	89 c2                	mov    edx,eax
c00217e9:	89 e8                	mov    eax,ebp
c00217eb:	66 ef                	out    dx,ax
c00217ed:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00217f1:	83 c4 10             	add    esp,0x10
c00217f4:	41                   	inc    ecx
c00217f5:	81 f9 00 01 00 00    	cmp    ecx,0x100
c00217fb:	75 cd                	jne    c00217ca <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c00217fd:	4e                   	dec    esi
c00217fe:	81 c7 00 02 00 00    	add    edi,0x200
c0021804:	e9 6d ff ff ff       	jmp    c0021776 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c0021809:	0f b6 d2             	movzx  edx,dl
c002180c:	51                   	push   ecx
c002180d:	51                   	push   ecx
c002180e:	52                   	push   edx
c002180f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021815:	e8 aa ef ff ff       	call   c00207c4 <IDE::getBase(unsigned char)>
c002181a:	b9 00 01 00 00       	mov    ecx,0x100
c002181f:	89 c2                	mov    edx,eax
c0021821:	fc                   	cld    
c0021822:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0021825:	83 c4 10             	add    esp,0x10
c0021828:	eb d3                	jmp    c00217fd <ATA::access(unsigned long long, int, void*, bool)+0x327>
c002182a:	31 ff                	xor    edi,edi
c002182c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0021831:	74 16                	je     c0021849 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0021833:	50                   	push   eax
c0021834:	50                   	push   eax
c0021835:	31 c0                	xor    eax,eax
c0021837:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c002183c:	0f 94 c0             	sete   al
c002183f:	50                   	push   eax
c0021840:	53                   	push   ebx
c0021841:	e8 f6 fb ff ff       	call   c002143c <ATA::flush(bool)>
c0021846:	83 c4 10             	add    esp,0x10
c0021849:	83 c4 2c             	add    esp,0x2c
c002184c:	89 f8                	mov    eax,edi
c002184e:	5b                   	pop    ebx
c002184f:	5e                   	pop    esi
c0021850:	5f                   	pop    edi
c0021851:	5d                   	pop    ebp
c0021852:	c3                   	ret    
c0021853:	90                   	nop

c0021854 <ATA::read(unsigned long long, int, void*)>:
c0021854:	57                   	push   edi
c0021855:	b8 04 00 00 00       	mov    eax,0x4
c002185a:	56                   	push   esi
c002185b:	53                   	push   ebx
c002185c:	83 ec 10             	sub    esp,0x10
c002185f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021863:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021867:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002186a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002186e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021872:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0021878:	77 3b                	ja     c00218b5 <ATA::read(unsigned long long, int, void*)+0x61>
c002187a:	b8 06 00 00 00       	mov    eax,0x6
c002187f:	85 d2                	test   edx,edx
c0021881:	74 32                	je     c00218b5 <ATA::read(unsigned long long, int, void*)+0x61>
c0021883:	50                   	push   eax
c0021884:	50                   	push   eax
c0021885:	6a 00                	push   0x0
c0021887:	52                   	push   edx
c0021888:	53                   	push   ebx
c0021889:	57                   	push   edi
c002188a:	56                   	push   esi
c002188b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002188f:	e8 42 fc ff ff       	call   c00214d6 <ATA::access(unsigned long long, int, void*, bool)>
c0021894:	83 c4 20             	add    esp,0x20
c0021897:	85 c0                	test   eax,eax
c0021899:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002189d:	75 11                	jne    c00218b0 <ATA::read(unsigned long long, int, void*)+0x5c>
c002189f:	01 1d 08 c6 02 c0    	add    DWORD PTR ds:0xc002c608,ebx
c00218a5:	e8 7a e8 fe ff       	call   c0010124 <VgaText::updateDiskUsage()>
c00218aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00218ae:	eb 05                	jmp    c00218b5 <ATA::read(unsigned long long, int, void*)+0x61>
c00218b0:	b8 01 00 00 00       	mov    eax,0x1
c00218b5:	83 c4 10             	add    esp,0x10
c00218b8:	5b                   	pop    ebx
c00218b9:	5e                   	pop    esi
c00218ba:	5f                   	pop    edi
c00218bb:	c3                   	ret    

c00218bc <ATA::write(unsigned long long, int, void*)>:
c00218bc:	57                   	push   edi
c00218bd:	b8 04 00 00 00       	mov    eax,0x4
c00218c2:	56                   	push   esi
c00218c3:	53                   	push   ebx
c00218c4:	83 ec 10             	sub    esp,0x10
c00218c7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00218cb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00218cf:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00218d2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00218d6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00218da:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00218e0:	77 3b                	ja     c002191d <ATA::write(unsigned long long, int, void*)+0x61>
c00218e2:	b8 06 00 00 00       	mov    eax,0x6
c00218e7:	85 d2                	test   edx,edx
c00218e9:	74 32                	je     c002191d <ATA::write(unsigned long long, int, void*)+0x61>
c00218eb:	50                   	push   eax
c00218ec:	50                   	push   eax
c00218ed:	6a 01                	push   0x1
c00218ef:	52                   	push   edx
c00218f0:	53                   	push   ebx
c00218f1:	57                   	push   edi
c00218f2:	56                   	push   esi
c00218f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00218f7:	e8 da fb ff ff       	call   c00214d6 <ATA::access(unsigned long long, int, void*, bool)>
c00218fc:	83 c4 20             	add    esp,0x20
c00218ff:	85 c0                	test   eax,eax
c0021901:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021905:	75 11                	jne    c0021918 <ATA::write(unsigned long long, int, void*)+0x5c>
c0021907:	01 1d 04 c6 02 c0    	add    DWORD PTR ds:0xc002c604,ebx
c002190d:	e8 12 e8 fe ff       	call   c0010124 <VgaText::updateDiskUsage()>
c0021912:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021916:	eb 05                	jmp    c002191d <ATA::write(unsigned long long, int, void*)+0x61>
c0021918:	b8 01 00 00 00       	mov    eax,0x1
c002191d:	83 c4 10             	add    esp,0x10
c0021920:	5b                   	pop    ebx
c0021921:	5e                   	pop    esi
c0021922:	5f                   	pop    edi
c0021923:	c3                   	ret    

c0021924 <ATA::detectCHS()>:
c0021924:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021928:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002192e:	c1 e0 06             	shl    eax,0x6
c0021931:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0021937:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0021941:	c7 44 24 04 a3 8f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028fa3
c0021949:	e9 a1 70 ff ff       	jmp    c00189ef <Krnl::panic(char const*)>

c002194e <ATA::open(int, int, void*)>:
c002194e:	53                   	push   ebx
c002194f:	83 ec 08             	sub    esp,0x8
c0021952:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021956:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002195a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002195e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0021964:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002196a:	c1 e0 06             	shl    eax,0x6
c002196d:	01 d0                	add    eax,edx
c002196f:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0021976:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002197c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0021983:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002198d:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0021993:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002199a:	75 0c                	jne    c00219a8 <ATA::open(int, int, void*)+0x5a>
c002199c:	83 ec 0c             	sub    esp,0xc
c002199f:	53                   	push   ebx
c00219a0:	e8 7f ff ff ff       	call   c0021924 <ATA::detectCHS()>
c00219a5:	83 c4 10             	add    esp,0x10
c00219a8:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00219ae:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00219b4:	c1 e0 06             	shl    eax,0x6
c00219b7:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00219be:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00219c8:	d1 e8                	shr    eax,1
c00219ca:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00219d0:	6a 04                	push   0x4
c00219d2:	6a 0c                	push   0xc
c00219d4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00219db:	50                   	push   eax
c00219dc:	52                   	push   edx
c00219dd:	e8 f4 ed ff ff       	call   c00207d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00219e2:	90                   	nop
c00219e3:	90                   	nop
c00219e4:	6a 00                	push   0x0
c00219e6:	6a 0c                	push   0xc
c00219e8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00219ef:	50                   	push   eax
c00219f0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00219f6:	e8 db ed ff ff       	call   c00207d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00219fb:	83 c4 14             	add    esp,0x14
c00219fe:	53                   	push   ebx
c00219ff:	e8 c6 20 ff ff       	call   c0013aca <PhysicalDisk::startCache()>
c0021a04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021a07:	e8 74 40 ff ff       	call   c0015a80 <createPartitionsForDisk(PhysicalDisk*)>
c0021a0c:	31 c0                	xor    eax,eax
c0021a0e:	83 c4 18             	add    esp,0x18
c0021a11:	5b                   	pop    ebx
c0021a12:	c3                   	ret    
c0021a13:	90                   	nop

c0021a14 <ATAPI::write(unsigned long long, int, void*)>:
c0021a14:	b8 03 00 00 00       	mov    eax,0x3
c0021a19:	c3                   	ret    

c0021a1a <ATAPI::close(int, int, void*)>:
c0021a1a:	83 ec 0c             	sub    esp,0xc
c0021a1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a21:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021a27:	85 c0                	test   eax,eax
c0021a29:	74 0c                	je     c0021a37 <ATAPI::close(int, int, void*)+0x1d>
c0021a2b:	83 ec 0c             	sub    esp,0xc
c0021a2e:	8b 10                	mov    edx,DWORD PTR [eax]
c0021a30:	50                   	push   eax
c0021a31:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0021a34:	83 c4 10             	add    esp,0x10
c0021a37:	31 c0                	xor    eax,eax
c0021a39:	83 c4 0c             	add    esp,0xc
c0021a3c:	c3                   	ret    
c0021a3d:	90                   	nop

c0021a3e <ATAPI::ATAPI()>:
c0021a3e:	83 ec 0c             	sub    esp,0xc
c0021a41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a45:	83 ec 04             	sub    esp,0x4
c0021a48:	68 00 08 00 00       	push   0x800
c0021a4d:	68 ec 8f 02 c0       	push   0xc0028fec
c0021a52:	50                   	push   eax
c0021a53:	e8 0a 20 ff ff       	call   c0013a62 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021a58:	83 c4 10             	add    esp,0x10
c0021a5b:	ba 2c 90 02 c0       	mov    edx,0xc002902c
c0021a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a64:	89 10                	mov    DWORD PTR [eax],edx
c0021a66:	90                   	nop
c0021a67:	83 c4 0c             	add    esp,0xc
c0021a6a:	c3                   	ret    
c0021a6b:	90                   	nop

c0021a6c <ATAPI::readyForCommand()>:
c0021a6c:	56                   	push   esi
c0021a6d:	53                   	push   ebx
c0021a6e:	31 db                	xor    ebx,ebx
c0021a70:	50                   	push   eax
c0021a71:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021a75:	50                   	push   eax
c0021a76:	6a 0c                	push   0xc
c0021a78:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0021a7f:	50                   	push   eax
c0021a80:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0021a86:	e8 0b ee ff ff       	call   c0020896 <IDE::read(unsigned char, unsigned char)>
c0021a8b:	83 c4 10             	add    esp,0x10
c0021a8e:	a8 88                	test   al,0x88
c0021a90:	74 23                	je     c0021ab5 <ATAPI::readyForCommand()+0x49>
c0021a92:	43                   	inc    ebx
c0021a93:	83 fb 63             	cmp    ebx,0x63
c0021a96:	7e dd                	jle    c0021a75 <ATAPI::readyForCommand()+0x9>
c0021a98:	51                   	push   ecx
c0021a99:	51                   	push   ecx
c0021a9a:	6a 00                	push   0x0
c0021a9c:	68 40 42 0f 00       	push   0xf4240
c0021aa1:	e8 e4 a3 ff ff       	call   c001be8a <nanoSleep(unsigned long long)>
c0021aa6:	83 c4 10             	add    esp,0x10
c0021aa9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0021aaf:	75 c4                	jne    c0021a75 <ATAPI::readyForCommand()+0x9>
c0021ab1:	31 c0                	xor    eax,eax
c0021ab3:	eb 02                	jmp    c0021ab7 <ATAPI::readyForCommand()+0x4b>
c0021ab5:	b0 01                	mov    al,0x1
c0021ab7:	5a                   	pop    edx
c0021ab8:	5b                   	pop    ebx
c0021ab9:	5e                   	pop    esi
c0021aba:	c3                   	ret    
c0021abb:	90                   	nop

c0021abc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0021abc:	55                   	push   ebp
c0021abd:	57                   	push   edi
c0021abe:	56                   	push   esi
c0021abf:	53                   	push   ebx
c0021ac0:	83 ec 20             	sub    esp,0x20
c0021ac3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0021ac7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0021acb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0021acf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021ad3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021ad7:	6a 01                	push   0x1
c0021ad9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021ae0:	50                   	push   eax
c0021ae1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021ae7:	e8 f6 ee ff ff       	call   c00209e2 <IDE::enableIRQs(unsigned char, bool)>
c0021aec:	5e                   	pop    esi
c0021aed:	58                   	pop    eax
c0021aee:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021af5:	50                   	push   eax
c0021af6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021afc:	e8 af ec ff ff       	call   c00207b0 <IDE::prepareInterrupt(unsigned char)>
c0021b01:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021b04:	e8 63 ff ff ff       	call   c0021a6c <ATAPI::readyForCommand()>
c0021b09:	83 c4 10             	add    esp,0x10
c0021b0c:	84 c0                	test   al,al
c0021b0e:	75 0a                	jne    c0021b1a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0021b10:	bb 01 00 00 00       	mov    ebx,0x1
c0021b15:	e9 57 02 00 00       	jmp    c0021d71 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021b1a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0021b20:	c1 e0 04             	shl    eax,0x4
c0021b23:	0f b6 c0             	movzx  eax,al
c0021b26:	50                   	push   eax
c0021b27:	6a 06                	push   0x6
c0021b29:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b30:	50                   	push   eax
c0021b31:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b37:	e8 9a ec ff ff       	call   c00207d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b3c:	6a 00                	push   0x0
c0021b3e:	6a 01                	push   0x1
c0021b40:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b47:	50                   	push   eax
c0021b48:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b4e:	e8 83 ec ff ff       	call   c00207d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b53:	83 c4 20             	add    esp,0x20
c0021b56:	0f b6 c3             	movzx  eax,bl
c0021b59:	0f b6 df             	movzx  ebx,bh
c0021b5c:	50                   	push   eax
c0021b5d:	6a 04                	push   0x4
c0021b5f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b66:	50                   	push   eax
c0021b67:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b6d:	e8 64 ec ff ff       	call   c00207d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b72:	53                   	push   ebx
c0021b73:	6a 05                	push   0x5
c0021b75:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b7c:	50                   	push   eax
c0021b7d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b83:	e8 4e ec ff ff       	call   c00207d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b88:	83 c4 20             	add    esp,0x20
c0021b8b:	68 a0 00 00 00       	push   0xa0
c0021b90:	6a 07                	push   0x7
c0021b92:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b99:	50                   	push   eax
c0021b9a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021ba0:	e8 31 ec ff ff       	call   c00207d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021ba5:	83 c4 0c             	add    esp,0xc
c0021ba8:	6a 01                	push   0x1
c0021baa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021bb1:	50                   	push   eax
c0021bb2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021bb8:	e8 c5 f7 ff ff       	call   c0021382 <IDE::polling(unsigned char, unsigned int)>
c0021bbd:	83 c4 10             	add    esp,0x10
c0021bc0:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0021bc6:	84 c0                	test   al,al
c0021bc8:	74 23                	je     c0021bed <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0021bca:	0f b6 d8             	movzx  ebx,al
c0021bcd:	0f b6 d2             	movzx  edx,dl
c0021bd0:	53                   	push   ebx
c0021bd1:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0021bd8:	50                   	push   eax
c0021bd9:	52                   	push   edx
c0021bda:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021be0:	e8 07 f6 ff ff       	call   c00211ec <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0021be5:	83 c4 10             	add    esp,0x10
c0021be8:	e9 84 01 00 00       	jmp    c0021d71 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021bed:	0f b6 d2             	movzx  edx,dl
c0021bf0:	53                   	push   ebx
c0021bf1:	53                   	push   ebx
c0021bf2:	52                   	push   edx
c0021bf3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021bf9:	e8 c6 eb ff ff       	call   c00207c4 <IDE::getBase(unsigned char)>
c0021bfe:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0021c02:	b9 06 00 00 00       	mov    ecx,0x6
c0021c07:	89 c2                	mov    edx,eax
c0021c09:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0021c0c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0021c10:	83 c4 10             	add    esp,0x10
c0021c13:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021c19:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021c20:	85 db                	test   ebx,ebx
c0021c22:	0f 84 ec 00 00 00    	je     c0021d14 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0021c28:	51                   	push   ecx
c0021c29:	51                   	push   ecx
c0021c2a:	52                   	push   edx
c0021c2b:	50                   	push   eax
c0021c2c:	e8 13 ed ff ff       	call   c0020944 <IDE::waitInterrupt(unsigned char)>
c0021c31:	83 c4 10             	add    esp,0x10
c0021c34:	84 c0                	test   al,al
c0021c36:	0f 84 d4 fe ff ff    	je     c0021b10 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0021c3c:	56                   	push   esi
c0021c3d:	56                   	push   esi
c0021c3e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c45:	50                   	push   eax
c0021c46:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c4c:	e8 5f eb ff ff       	call   c00207b0 <IDE::prepareInterrupt(unsigned char)>
c0021c51:	83 c4 0c             	add    esp,0xc
c0021c54:	6a 04                	push   0x4
c0021c56:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c5d:	50                   	push   eax
c0021c5e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c64:	e8 2d ec ff ff       	call   c0020896 <IDE::read(unsigned char, unsigned char)>
c0021c69:	83 c4 0c             	add    esp,0xc
c0021c6c:	89 c6                	mov    esi,eax
c0021c6e:	6a 05                	push   0x5
c0021c70:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c77:	50                   	push   eax
c0021c78:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c7e:	e8 13 ec ff ff       	call   c0020896 <IDE::read(unsigned char, unsigned char)>
c0021c83:	89 f1                	mov    ecx,esi
c0021c85:	0f b6 c0             	movzx  eax,al
c0021c88:	0f b6 f1             	movzx  esi,cl
c0021c8b:	c1 e0 08             	shl    eax,0x8
c0021c8e:	09 c6                	or     esi,eax
c0021c90:	d1 fe                	sar    esi,1
c0021c92:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0021c96:	83 c4 10             	add    esp,0x10
c0021c99:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0021c9e:	74 41                	je     c0021ce1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0021ca0:	31 c9                	xor    ecx,ecx
c0021ca2:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021ca8:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021caf:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0021cb3:	75 0a                	jne    c0021cbf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0021cb5:	01 c9                	add    ecx,ecx
c0021cb7:	01 cd                	add    ebp,ecx
c0021cb9:	4b                   	dec    ebx
c0021cba:	e9 54 ff ff ff       	jmp    c0021c13 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0021cbf:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0021cc4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0021cc8:	51                   	push   ecx
c0021cc9:	51                   	push   ecx
c0021cca:	52                   	push   edx
c0021ccb:	50                   	push   eax
c0021ccc:	e8 f3 ea ff ff       	call   c00207c4 <IDE::getBase(unsigned char)>
c0021cd1:	89 c2                	mov    edx,eax
c0021cd3:	89 f0                	mov    eax,esi
c0021cd5:	66 ef                	out    dx,ax
c0021cd7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021cdb:	83 c4 10             	add    esp,0x10
c0021cde:	41                   	inc    ecx
c0021cdf:	eb c1                	jmp    c0021ca2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0021ce1:	31 f6                	xor    esi,esi
c0021ce3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021ce9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021cf0:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0021cf4:	75 06                	jne    c0021cfc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0021cf6:	01 f6                	add    esi,esi
c0021cf8:	01 f5                	add    ebp,esi
c0021cfa:	eb bd                	jmp    c0021cb9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0021cfc:	51                   	push   ecx
c0021cfd:	51                   	push   ecx
c0021cfe:	52                   	push   edx
c0021cff:	50                   	push   eax
c0021d00:	e8 bf ea ff ff       	call   c00207c4 <IDE::getBase(unsigned char)>
c0021d05:	89 c2                	mov    edx,eax
c0021d07:	66 ed                	in     ax,dx
c0021d09:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0021d0e:	83 c4 10             	add    esp,0x10
c0021d11:	46                   	inc    esi
c0021d12:	eb cf                	jmp    c0021ce3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0021d14:	51                   	push   ecx
c0021d15:	51                   	push   ecx
c0021d16:	52                   	push   edx
c0021d17:	50                   	push   eax
c0021d18:	e8 27 ec ff ff       	call   c0020944 <IDE::waitInterrupt(unsigned char)>
c0021d1d:	83 c4 10             	add    esp,0x10
c0021d20:	84 c0                	test   al,al
c0021d22:	0f 84 e8 fd ff ff    	je     c0021b10 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0021d28:	bb a0 86 01 00       	mov    ebx,0x186a0
c0021d2d:	52                   	push   edx
c0021d2e:	52                   	push   edx
c0021d2f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021d36:	50                   	push   eax
c0021d37:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021d3d:	e8 6e ea ff ff       	call   c00207b0 <IDE::prepareInterrupt(unsigned char)>
c0021d42:	83 c4 10             	add    esp,0x10
c0021d45:	50                   	push   eax
c0021d46:	50                   	push   eax
c0021d47:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021d4e:	50                   	push   eax
c0021d4f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021d55:	e8 6a ea ff ff       	call   c00207c4 <IDE::getBase(unsigned char)>
c0021d5a:	8d 50 07             	lea    edx,[eax+0x7]
c0021d5d:	ec                   	in     al,dx
c0021d5e:	83 c4 10             	add    esp,0x10
c0021d61:	a8 88                	test   al,0x88
c0021d63:	74 0a                	je     c0021d6f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0021d65:	4b                   	dec    ebx
c0021d66:	75 dd                	jne    c0021d45 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0021d68:	bb 02 00 00 00       	mov    ebx,0x2
c0021d6d:	eb 02                	jmp    c0021d71 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021d6f:	31 db                	xor    ebx,ebx
c0021d71:	83 c4 1c             	add    esp,0x1c
c0021d74:	89 d8                	mov    eax,ebx
c0021d76:	5b                   	pop    ebx
c0021d77:	5e                   	pop    esi
c0021d78:	5f                   	pop    edi
c0021d79:	5d                   	pop    ebp
c0021d7a:	c3                   	ret    
c0021d7b:	90                   	nop

c0021d7c <ATAPI::diskRemoved()>:
c0021d7c:	83 ec 18             	sub    esp,0x18
c0021d7f:	68 f7 8f 02 c0       	push   0xc0028ff7
c0021d84:	e8 c8 04 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0021d89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d8d:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0021d94:	83 c4 1c             	add    esp,0x1c
c0021d97:	c3                   	ret    

c0021d98 <ATAPI::eject()>:
c0021d98:	57                   	push   edi
c0021d99:	b9 03 00 00 00       	mov    ecx,0x3
c0021d9e:	53                   	push   ebx
c0021d9f:	83 ec 14             	sub    esp,0x14
c0021da2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021da6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021daa:	fc                   	cld    
c0021dab:	31 c0                	xor    eax,eax
c0021dad:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021daf:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0021db4:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0021db9:	50                   	push   eax
c0021dba:	50                   	push   eax
c0021dbb:	6a 00                	push   0x0
c0021dbd:	6a 00                	push   0x0
c0021dbf:	6a 00                	push   0x0
c0021dc1:	6a 02                	push   0x2
c0021dc3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021dc7:	50                   	push   eax
c0021dc8:	53                   	push   ebx
c0021dc9:	e8 ee fc ff ff       	call   c0021abc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021dce:	83 c4 14             	add    esp,0x14
c0021dd1:	53                   	push   ebx
c0021dd2:	e8 a5 ff ff ff       	call   c0021d7c <ATAPI::diskRemoved()>
c0021dd7:	83 c4 24             	add    esp,0x24
c0021dda:	5b                   	pop    ebx
c0021ddb:	5f                   	pop    edi
c0021ddc:	c3                   	ret    
c0021ddd:	90                   	nop

c0021dde <ATAPI::diskInserted()>:
c0021dde:	53                   	push   ebx
c0021ddf:	83 ec 14             	sub    esp,0x14
c0021de2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021de6:	68 0d 90 02 c0       	push   0xc002900d
c0021deb:	e8 61 04 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0021df0:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0021df7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021dfa:	e8 cb 1c ff ff       	call   c0013aca <PhysicalDisk::startCache()>
c0021dff:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0021e03:	83 c4 18             	add    esp,0x18
c0021e06:	5b                   	pop    ebx
c0021e07:	e9 74 3c ff ff       	jmp    c0015a80 <createPartitionsForDisk(PhysicalDisk*)>

c0021e0c <ATAPI::detectMedia()>:
c0021e0c:	56                   	push   esi
c0021e0d:	53                   	push   ebx
c0021e0e:	83 ec 28             	sub    esp,0x28
c0021e11:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021e15:	6a 0c                	push   0xc
c0021e17:	6a 00                	push   0x0
c0021e19:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0021e1d:	56                   	push   esi
c0021e1e:	e8 ab e8 fd ff       	call   c00006ce <memset>
c0021e23:	58                   	pop    eax
c0021e24:	5a                   	pop    edx
c0021e25:	6a 00                	push   0x0
c0021e27:	6a 00                	push   0x0
c0021e29:	6a 00                	push   0x0
c0021e2b:	6a 00                	push   0x0
c0021e2d:	56                   	push   esi
c0021e2e:	53                   	push   ebx
c0021e2f:	e8 88 fc ff ff       	call   c0021abc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021e34:	83 c4 1c             	add    esp,0x1c
c0021e37:	6a 0c                	push   0xc
c0021e39:	6a 00                	push   0x0
c0021e3b:	56                   	push   esi
c0021e3c:	e8 8d e8 fd ff       	call   c00006ce <memset>
c0021e41:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0021e46:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0021e4b:	59                   	pop    ecx
c0021e4c:	58                   	pop    eax
c0021e4d:	6a 01                	push   0x1
c0021e4f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021e53:	50                   	push   eax
c0021e54:	6a 00                	push   0x0
c0021e56:	6a 12                	push   0x12
c0021e58:	56                   	push   esi
c0021e59:	53                   	push   ebx
c0021e5a:	e8 5d fc ff ff       	call   c0021abc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021e5f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0021e63:	83 c4 20             	add    esp,0x20
c0021e66:	83 e0 7f             	and    eax,0x7f
c0021e69:	3c 70                	cmp    al,0x70
c0021e6b:	74 15                	je     c0021e82 <ATAPI::detectMedia()+0x76>
c0021e6d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021e74:	75 0c                	jne    c0021e82 <ATAPI::detectMedia()+0x76>
c0021e76:	83 ec 0c             	sub    esp,0xc
c0021e79:	53                   	push   ebx
c0021e7a:	e8 5f ff ff ff       	call   c0021dde <ATAPI::diskInserted()>
c0021e7f:	83 c4 10             	add    esp,0x10
c0021e82:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021e86:	83 e0 0f             	and    eax,0xf
c0021e89:	3c 02                	cmp    al,0x2
c0021e8b:	75 1b                	jne    c0021ea8 <ATAPI::detectMedia()+0x9c>
c0021e8d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0021e92:	75 2d                	jne    c0021ec1 <ATAPI::detectMedia()+0xb5>
c0021e94:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021e9b:	74 24                	je     c0021ec1 <ATAPI::detectMedia()+0xb5>
c0021e9d:	83 ec 0c             	sub    esp,0xc
c0021ea0:	53                   	push   ebx
c0021ea1:	e8 d6 fe ff ff       	call   c0021d7c <ATAPI::diskRemoved()>
c0021ea6:	eb 16                	jmp    c0021ebe <ATAPI::detectMedia()+0xb2>
c0021ea8:	84 c0                	test   al,al
c0021eaa:	75 15                	jne    c0021ec1 <ATAPI::detectMedia()+0xb5>
c0021eac:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021eb3:	75 0c                	jne    c0021ec1 <ATAPI::detectMedia()+0xb5>
c0021eb5:	83 ec 0c             	sub    esp,0xc
c0021eb8:	53                   	push   ebx
c0021eb9:	e8 20 ff ff ff       	call   c0021dde <ATAPI::diskInserted()>
c0021ebe:	83 c4 10             	add    esp,0x10
c0021ec1:	83 c4 24             	add    esp,0x24
c0021ec4:	5b                   	pop    ebx
c0021ec5:	5e                   	pop    esi
c0021ec6:	c3                   	ret    
c0021ec7:	90                   	nop

c0021ec8 <ATAPI::open(int, int, void*)>:
c0021ec8:	53                   	push   ebx
c0021ec9:	83 ec 08             	sub    esp,0x8
c0021ecc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021ed0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021ed4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021ed8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0021ede:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0021ee4:	c1 e0 06             	shl    eax,0x6
c0021ee7:	01 d0                	add    eax,edx
c0021ee9:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0021ef0:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0021ef6:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0021efd:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0021f07:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0021f0d:	6a 04                	push   0x4
c0021f0f:	6a 0c                	push   0xc
c0021f11:	51                   	push   ecx
c0021f12:	52                   	push   edx
c0021f13:	e8 be e8 ff ff       	call   c00207d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021f18:	90                   	nop
c0021f19:	90                   	nop
c0021f1a:	6a 00                	push   0x0
c0021f1c:	6a 0c                	push   0xc
c0021f1e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021f25:	50                   	push   eax
c0021f26:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021f2c:	e8 a5 e8 ff ff       	call   c00207d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021f31:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0021f38:	83 c4 14             	add    esp,0x14
c0021f3b:	53                   	push   ebx
c0021f3c:	e8 cb fe ff ff       	call   c0021e0c <ATAPI::detectMedia()>
c0021f41:	31 c0                	xor    eax,eax
c0021f43:	83 c4 18             	add    esp,0x18
c0021f46:	5b                   	pop    ebx
c0021f47:	c3                   	ret    

c0021f48 <ATAPI::read(unsigned long long, int, void*)>:
c0021f48:	55                   	push   ebp
c0021f49:	57                   	push   edi
c0021f4a:	56                   	push   esi
c0021f4b:	53                   	push   ebx
c0021f4c:	83 ec 1c             	sub    esp,0x1c
c0021f4f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021f53:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021f57:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0021f5b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0021f62:	74 41                	je     c0021fa5 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0021f64:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021f68:	b9 03 00 00 00       	mov    ecx,0x3
c0021f6d:	fc                   	cld    
c0021f6e:	31 c0                	xor    eax,eax
c0021f70:	86 fb                	xchg   bl,bh
c0021f72:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021f74:	c1 c3 10             	rol    ebx,0x10
c0021f77:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0021f7c:	89 e8                	mov    eax,ebp
c0021f7e:	86 fb                	xchg   bl,bh
c0021f80:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0021f84:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0021f88:	50                   	push   eax
c0021f89:	50                   	push   eax
c0021f8a:	55                   	push   ebp
c0021f8b:	c1 e5 0b             	shl    ebp,0xb
c0021f8e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f92:	6a 00                	push   0x0
c0021f94:	55                   	push   ebp
c0021f95:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f99:	50                   	push   eax
c0021f9a:	56                   	push   esi
c0021f9b:	e8 1c fb ff ff       	call   c0021abc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021fa0:	83 c4 20             	add    esp,0x20
c0021fa3:	eb 1a                	jmp    c0021fbf <ATAPI::read(unsigned long long, int, void*)+0x77>
c0021fa5:	83 ec 0c             	sub    esp,0xc
c0021fa8:	56                   	push   esi
c0021fa9:	e8 5e fe ff ff       	call   c0021e0c <ATAPI::detectMedia()>
c0021fae:	83 c4 10             	add    esp,0x10
c0021fb1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0021fb8:	75 aa                	jne    c0021f64 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0021fba:	b8 02 00 00 00       	mov    eax,0x2
c0021fbf:	83 c4 1c             	add    esp,0x1c
c0021fc2:	5b                   	pop    ebx
c0021fc3:	5e                   	pop    esi
c0021fc4:	5f                   	pop    edi
c0021fc5:	5d                   	pop    ebp
c0021fc6:	c3                   	ret    
c0021fc7:	90                   	nop

c0021fc8 <AVX::open(int, int, void*)>:
c0021fc8:	83 ec 0c             	sub    esp,0xc
c0021fcb:	e8 08 10 00 00       	call   c0022fd8 <avxInit>
c0021fd0:	b8 00 00 00 00       	mov    eax,0x0
c0021fd5:	83 c4 0c             	add    esp,0xc
c0021fd8:	c3                   	ret    
c0021fd9:	90                   	nop

c0021fda <AVX::close(int, int, void*)>:
c0021fda:	83 ec 0c             	sub    esp,0xc
c0021fdd:	e8 f7 0f 00 00       	call   c0022fd9 <avxClose>
c0021fe2:	b8 00 00 00 00       	mov    eax,0x0
c0021fe7:	83 c4 0c             	add    esp,0xc
c0021fea:	c3                   	ret    
c0021feb:	90                   	nop

c0021fec <AVX::available()>:
c0021fec:	83 ec 0c             	sub    esp,0xc
c0021fef:	e8 dc 0f 00 00       	call   c0022fd0 <avxDetect>
c0021ff4:	85 c0                	test   eax,eax
c0021ff6:	0f 95 c0             	setne  al
c0021ff9:	83 c4 0c             	add    esp,0xc
c0021ffc:	c3                   	ret    
c0021ffd:	90                   	nop

c0021ffe <AVX::save(void*)>:
c0021ffe:	83 ec 0c             	sub    esp,0xc
c0022001:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022005:	83 ec 0c             	sub    esp,0xc
c0022008:	50                   	push   eax
c0022009:	e8 c8 0f 00 00       	call   c0022fd6 <avxSave>
c002200e:	83 c4 10             	add    esp,0x10
c0022011:	90                   	nop
c0022012:	83 c4 0c             	add    esp,0xc
c0022015:	c3                   	ret    

c0022016 <AVX::load(void*)>:
c0022016:	83 ec 0c             	sub    esp,0xc
c0022019:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002201d:	83 ec 0c             	sub    esp,0xc
c0022020:	50                   	push   eax
c0022021:	e8 b1 0f 00 00       	call   c0022fd7 <avxLoad>
c0022026:	83 c4 10             	add    esp,0x10
c0022029:	90                   	nop
c002202a:	83 c4 0c             	add    esp,0xc
c002202d:	c3                   	ret    

c002202e <AVX::AVX()>:
c002202e:	83 ec 0c             	sub    esp,0xc
c0022031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022035:	83 ec 08             	sub    esp,0x8
c0022038:	68 58 90 02 c0       	push   0xc0029058
c002203d:	50                   	push   eax
c002203e:	e8 fd 1a ff ff       	call   c0013b40 <FPU::FPU(char const*)>
c0022043:	83 c4 10             	add    esp,0x10
c0022046:	ba 68 90 02 c0       	mov    edx,0xc0029068
c002204b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002204f:	89 10                	mov    DWORD PTR [eax],edx
c0022051:	90                   	nop
c0022052:	83 c4 0c             	add    esp,0xc
c0022055:	c3                   	ret    

c0022056 <MMX::available()>:
c0022056:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c002205b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0022061:	83 e0 20             	and    eax,0x20
c0022064:	84 c0                	test   al,al
c0022066:	0f 95 c0             	setne  al
c0022069:	c3                   	ret    

c002206a <MMX::open(int, int, void*)>:
c002206a:	83 ec 0c             	sub    esp,0xc
c002206d:	e8 da 0f 00 00       	call   c002304c <x87Init>
c0022072:	b8 00 00 00 00       	mov    eax,0x0
c0022077:	83 c4 0c             	add    esp,0xc
c002207a:	c3                   	ret    
c002207b:	90                   	nop

c002207c <MMX::close(int, int, void*)>:
c002207c:	83 ec 0c             	sub    esp,0xc
c002207f:	e8 e2 0f 00 00       	call   c0023066 <x87Close>
c0022084:	b8 00 00 00 00       	mov    eax,0x0
c0022089:	83 c4 0c             	add    esp,0xc
c002208c:	c3                   	ret    
c002208d:	90                   	nop

c002208e <MMX::save(void*)>:
c002208e:	83 ec 0c             	sub    esp,0xc
c0022091:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022095:	83 ec 0c             	sub    esp,0xc
c0022098:	50                   	push   eax
c0022099:	e8 a3 0f 00 00       	call   c0023041 <x87Save>
c002209e:	83 c4 10             	add    esp,0x10
c00220a1:	90                   	nop
c00220a2:	83 c4 0c             	add    esp,0xc
c00220a5:	c3                   	ret    

c00220a6 <MMX::load(void*)>:
c00220a6:	83 ec 0c             	sub    esp,0xc
c00220a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00220ad:	83 ec 0c             	sub    esp,0xc
c00220b0:	50                   	push   eax
c00220b1:	e8 91 0f 00 00       	call   c0023047 <x87Load>
c00220b6:	83 c4 10             	add    esp,0x10
c00220b9:	90                   	nop
c00220ba:	83 c4 0c             	add    esp,0xc
c00220bd:	c3                   	ret    

c00220be <MMX::MMX()>:
c00220be:	83 ec 0c             	sub    esp,0xc
c00220c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220c5:	83 ec 08             	sub    esp,0x8
c00220c8:	68 98 90 02 c0       	push   0xc0029098
c00220cd:	50                   	push   eax
c00220ce:	e8 6d 1a ff ff       	call   c0013b40 <FPU::FPU(char const*)>
c00220d3:	83 c4 10             	add    esp,0x10
c00220d6:	ba a8 90 02 c0       	mov    edx,0xc00290a8
c00220db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220df:	89 10                	mov    DWORD PTR [eax],edx
c00220e1:	90                   	nop
c00220e2:	83 c4 0c             	add    esp,0xc
c00220e5:	c3                   	ret    

c00220e6 <SSE::open(int, int, void*)>:
c00220e6:	83 ec 0c             	sub    esp,0xc
c00220e9:	e8 19 0f 00 00       	call   c0023007 <sseInit>
c00220ee:	b8 00 00 00 00       	mov    eax,0x0
c00220f3:	83 c4 0c             	add    esp,0xc
c00220f6:	c3                   	ret    
c00220f7:	90                   	nop

c00220f8 <SSE::close(int, int, void*)>:
c00220f8:	83 ec 0c             	sub    esp,0xc
c00220fb:	e8 17 0f 00 00       	call   c0023017 <sseClose>
c0022100:	b8 00 00 00 00       	mov    eax,0x0
c0022105:	83 c4 0c             	add    esp,0xc
c0022108:	c3                   	ret    
c0022109:	90                   	nop

c002210a <SSE::available()>:
c002210a:	83 ec 1c             	sub    esp,0x1c
c002210d:	e8 ce 0e 00 00       	call   c0022fe0 <sseDetect>
c0022112:	85 c0                	test   eax,eax
c0022114:	0f 95 c0             	setne  al
c0022117:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002211b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002211f:	83 c4 1c             	add    esp,0x1c
c0022122:	c3                   	ret    
c0022123:	90                   	nop

c0022124 <SSE::save(void*)>:
c0022124:	83 ec 0c             	sub    esp,0xc
c0022127:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002212b:	83 ec 0c             	sub    esp,0xc
c002212e:	50                   	push   eax
c002212f:	e8 c7 0e 00 00       	call   c0022ffb <sseSave>
c0022134:	83 c4 10             	add    esp,0x10
c0022137:	90                   	nop
c0022138:	83 c4 0c             	add    esp,0xc
c002213b:	c3                   	ret    

c002213c <SSE::load(void*)>:
c002213c:	83 ec 0c             	sub    esp,0xc
c002213f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022143:	83 ec 0c             	sub    esp,0xc
c0022146:	50                   	push   eax
c0022147:	e8 b5 0e 00 00       	call   c0023001 <sseLoad>
c002214c:	83 c4 10             	add    esp,0x10
c002214f:	90                   	nop
c0022150:	83 c4 0c             	add    esp,0xc
c0022153:	c3                   	ret    

c0022154 <SSE::SSE()>:
c0022154:	83 ec 0c             	sub    esp,0xc
c0022157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002215b:	83 ec 08             	sub    esp,0x8
c002215e:	68 d8 90 02 c0       	push   0xc00290d8
c0022163:	50                   	push   eax
c0022164:	e8 d7 19 ff ff       	call   c0013b40 <FPU::FPU(char const*)>
c0022169:	83 c4 10             	add    esp,0x10
c002216c:	ba e8 90 02 c0       	mov    edx,0xc00290e8
c0022171:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022175:	89 10                	mov    DWORD PTR [eax],edx
c0022177:	90                   	nop
c0022178:	83 c4 0c             	add    esp,0xc
c002217b:	c3                   	ret    

c002217c <x87::open(int, int, void*)>:
c002217c:	83 ec 0c             	sub    esp,0xc
c002217f:	e8 c8 0e 00 00       	call   c002304c <x87Init>
c0022184:	b8 00 00 00 00       	mov    eax,0x0
c0022189:	83 c4 0c             	add    esp,0xc
c002218c:	c3                   	ret    
c002218d:	90                   	nop

c002218e <x87::close(int, int, void*)>:
c002218e:	83 ec 0c             	sub    esp,0xc
c0022191:	e8 d0 0e 00 00       	call   c0023066 <x87Close>
c0022196:	b8 00 00 00 00       	mov    eax,0x0
c002219b:	83 c4 0c             	add    esp,0xc
c002219e:	c3                   	ret    
c002219f:	90                   	nop

c00221a0 <x87::available()>:
c00221a0:	83 ec 0c             	sub    esp,0xc
c00221a3:	e8 7e 0e 00 00       	call   c0023026 <x87Detect>
c00221a8:	85 c0                	test   eax,eax
c00221aa:	0f 95 c0             	setne  al
c00221ad:	83 c4 0c             	add    esp,0xc
c00221b0:	c3                   	ret    
c00221b1:	90                   	nop

c00221b2 <x87::save(void*)>:
c00221b2:	83 ec 0c             	sub    esp,0xc
c00221b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00221b9:	83 ec 0c             	sub    esp,0xc
c00221bc:	50                   	push   eax
c00221bd:	e8 7f 0e 00 00       	call   c0023041 <x87Save>
c00221c2:	83 c4 10             	add    esp,0x10
c00221c5:	90                   	nop
c00221c6:	83 c4 0c             	add    esp,0xc
c00221c9:	c3                   	ret    

c00221ca <x87::load(void*)>:
c00221ca:	83 ec 0c             	sub    esp,0xc
c00221cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00221d1:	83 ec 0c             	sub    esp,0xc
c00221d4:	50                   	push   eax
c00221d5:	e8 6d 0e 00 00       	call   c0023047 <x87Load>
c00221da:	83 c4 10             	add    esp,0x10
c00221dd:	90                   	nop
c00221de:	83 c4 0c             	add    esp,0xc
c00221e1:	c3                   	ret    

c00221e2 <x87::x87()>:
c00221e2:	83 ec 0c             	sub    esp,0xc
c00221e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221e9:	83 ec 08             	sub    esp,0x8
c00221ec:	68 18 91 02 c0       	push   0xc0029118
c00221f1:	50                   	push   eax
c00221f2:	e8 49 19 ff ff       	call   c0013b40 <FPU::FPU(char const*)>
c00221f7:	83 c4 10             	add    esp,0x10
c00221fa:	ba 28 91 02 c0       	mov    edx,0xc0029128
c00221ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022203:	89 10                	mov    DWORD PTR [eax],edx
c0022205:	90                   	nop
c0022206:	83 c4 0c             	add    esp,0xc
c0022209:	c3                   	ret    

c002220a <APIC::disable()>:
c002220a:	90                   	nop
c002220b:	c3                   	ret    

c002220c <APIC::close(int, int, void*)>:
c002220c:	55                   	push   ebp
c002220d:	89 e5                	mov    ebp,esp
c002220f:	83 ec 08             	sub    esp,0x8
c0022212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022215:	8b 00                	mov    eax,DWORD PTR [eax]
c0022217:	83 c0 3c             	add    eax,0x3c
c002221a:	8b 00                	mov    eax,DWORD PTR [eax]
c002221c:	83 ec 0c             	sub    esp,0xc
c002221f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022222:	ff d0                	call   eax
c0022224:	83 c4 10             	add    esp,0x10
c0022227:	b8 00 00 00 00       	mov    eax,0x0
c002222c:	c9                   	leave  
c002222d:	c3                   	ret    

c002222e <IOAPIC::close(int, int, void*)>:
c002222e:	b8 00 00 00 00       	mov    eax,0x0
c0022233:	c3                   	ret    

c0022234 <APIC::io_wait()>:
c0022234:	eb 00                	jmp    c0022236 <APIC::io_wait()+0x2>
c0022236:	eb 00                	jmp    c0022238 <APIC::io_wait()+0x4>
c0022238:	90                   	nop
c0022239:	c3                   	ret    

c002223a <APIC::getBase()>:
c002223a:	55                   	push   ebp
c002223b:	89 e5                	mov    ebp,esp
c002223d:	83 ec 18             	sub    esp,0x18
c0022240:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0022245:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002224b:	83 e0 08             	and    eax,0x8
c002224e:	84 c0                	test   al,al
c0022250:	75 07                	jne    c0022259 <APIC::getBase()+0x1f>
c0022252:	b8 00 00 00 00       	mov    eax,0x0
c0022257:	eb 21                	jmp    c002227a <APIC::getBase()+0x40>
c0022259:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c002225e:	83 ec 08             	sub    esp,0x8
c0022261:	6a 1b                	push   0x1b
c0022263:	50                   	push   eax
c0022264:	e8 7f c4 fe ff       	call   c000e6e8 <Computer::rdmsr(unsigned int)>
c0022269:	83 c4 10             	add    esp,0x10
c002226c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002226f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0022272:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022275:	25 00 f0 ff ff       	and    eax,0xfffff000
c002227a:	c9                   	leave  
c002227b:	c3                   	ret    

c002227c <APIC::eoi(unsigned char)>:
c002227c:	55                   	push   ebp
c002227d:	89 e5                	mov    ebp,esp
c002227f:	83 ec 28             	sub    esp,0x28
c0022282:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022285:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0022288:	83 ec 0c             	sub    esp,0xc
c002228b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002228e:	e8 a7 ff ff ff       	call   c002223a <APIC::getBase()>
c0022293:	83 c4 10             	add    esp,0x10
c0022296:	05 b0 00 00 00       	add    eax,0xb0
c002229b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002229e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00222a1:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00222a7:	90                   	nop
c00222a8:	c9                   	leave  
c00222a9:	c3                   	ret    

c00222aa <APIC::open(int, int, void*)>:
c00222aa:	55                   	push   ebp
c00222ab:	89 e5                	mov    ebp,esp
c00222ad:	57                   	push   edi
c00222ae:	56                   	push   esi
c00222af:	53                   	push   ebx
c00222b0:	83 ec 1c             	sub    esp,0x1c
c00222b3:	83 ec 0c             	sub    esp,0xc
c00222b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00222b9:	e8 7c ff ff ff       	call   c002223a <APIC::getBase()>
c00222be:	83 c4 10             	add    esp,0x10
c00222c1:	05 f0 00 00 00       	add    eax,0xf0
c00222c6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00222c9:	83 ec 0c             	sub    esp,0xc
c00222cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00222cf:	e8 66 ff ff ff       	call   c002223a <APIC::getBase()>
c00222d4:	83 c4 10             	add    esp,0x10
c00222d7:	89 c2                	mov    edx,eax
c00222d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00222dc:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00222e2:	0f b6 f8             	movzx  edi,al
c00222e5:	89 d0                	mov    eax,edx
c00222e7:	ba 00 00 00 00       	mov    edx,0x0
c00222ec:	89 c1                	mov    ecx,eax
c00222ee:	80 e5 ff             	and    ch,0xff
c00222f1:	89 cb                	mov    ebx,ecx
c00222f3:	0f b6 f2             	movzx  esi,dl
c00222f6:	89 d8                	mov    eax,ebx
c00222f8:	89 f2                	mov    edx,esi
c00222fa:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00222fd:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022300:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0022304:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022308:	83 e0 00             	and    eax,0x0
c002230b:	09 d0                	or     eax,edx
c002230d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0022311:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022314:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002231a:	8d 50 01             	lea    edx,[eax+0x1]
c002231d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0022320:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022326:	0f b6 d0             	movzx  edx,al
c0022329:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002232c:	83 c2 08             	add    edx,0x8
c002232f:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022333:	0f b6 c9             	movzx  ecx,cl
c0022336:	81 c9 00 00 01 00    	or     ecx,0x10000
c002233c:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022340:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0022343:	8b 00                	mov    eax,DWORD PTR [eax]
c0022345:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0022348:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c002234f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0022352:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0022355:	89 10                	mov    DWORD PTR [eax],edx
c0022357:	b8 00 00 00 00       	mov    eax,0x0
c002235c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002235f:	5b                   	pop    ebx
c0022360:	5e                   	pop    esi
c0022361:	5f                   	pop    edi
c0022362:	5d                   	pop    ebp
c0022363:	c3                   	ret    

c0022364 <IOAPIC::IOAPIC()>:
c0022364:	83 ec 0c             	sub    esp,0xc
c0022367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002236b:	83 ec 08             	sub    esp,0x8
c002236e:	68 58 91 02 c0       	push   0xc0029158
c0022373:	50                   	push   eax
c0022374:	e8 d3 14 ff ff       	call   c001384c <Device::Device(char const*)>
c0022379:	83 c4 10             	add    esp,0x10
c002237c:	ba 80 92 02 c0       	mov    edx,0xc0029280
c0022381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022385:	89 10                	mov    DWORD PTR [eax],edx
c0022387:	90                   	nop
c0022388:	83 c4 0c             	add    esp,0xc
c002238b:	c3                   	ret    

c002238c <APIC::APIC()>:
c002238c:	53                   	push   ebx
c002238d:	83 ec 18             	sub    esp,0x18
c0022390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022394:	83 ec 08             	sub    esp,0x8
c0022397:	68 60 91 02 c0       	push   0xc0029160
c002239c:	50                   	push   eax
c002239d:	e8 02 1c ff ff       	call   c0013fa4 <InterruptController::InterruptController(char const*)>
c00223a2:	83 c4 10             	add    esp,0x10
c00223a5:	ba 38 92 02 c0       	mov    edx,0xc0029238
c00223aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223ae:	89 10                	mov    DWORD PTR [eax],edx
c00223b0:	a0 60 c6 02 c0       	mov    al,ds:0xc002c660
c00223b5:	83 f0 01             	xor    eax,0x1
c00223b8:	84 c0                	test   al,al
c00223ba:	0f 84 96 00 00 00    	je     c0022456 <APIC::APIC()+0xca>
c00223c0:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00223c5:	a0 b0 ac 02 c0       	mov    al,ds:0xc002acb0
c00223ca:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00223ce:	73 7f                	jae    c002244f <APIC::APIC()+0xc3>
c00223d0:	83 ec 0c             	sub    esp,0xc
c00223d3:	68 68 01 00 00       	push   0x168
c00223d8:	e8 85 fd fe ff       	call   c0012162 <operator new(unsigned long)>
c00223dd:	83 c4 10             	add    esp,0x10
c00223e0:	89 c3                	mov    ebx,eax
c00223e2:	83 ec 0c             	sub    esp,0xc
c00223e5:	53                   	push   ebx
c00223e6:	e8 79 ff ff ff       	call   c0022364 <IOAPIC::IOAPIC()>
c00223eb:	83 c4 10             	add    esp,0x10
c00223ee:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00223f2:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00223f7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00223fb:	89 14 85 40 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39c0],edx
c0022402:	a1 20 c6 02 c0       	mov    eax,ds:0xc002c620
c0022407:	40                   	inc    eax
c0022408:	a3 20 c6 02 c0       	mov    ds:0xc002c620,eax
c002240d:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0022412:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022418:	83 ec 08             	sub    esp,0x8
c002241b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002241f:	50                   	push   eax
c0022420:	e8 37 12 ff ff       	call   c001365c <Device::addChild(Device*)>
c0022425:	83 c4 10             	add    esp,0x10
c0022428:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002242c:	8b 00                	mov    eax,DWORD PTR [eax]
c002242e:	83 c0 08             	add    eax,0x8
c0022431:	8b 00                	mov    eax,DWORD PTR [eax]
c0022433:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0022438:	6a 00                	push   0x0
c002243a:	6a 00                	push   0x0
c002243c:	52                   	push   edx
c002243d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022441:	ff d0                	call   eax
c0022443:	83 c4 10             	add    esp,0x10
c0022446:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c002244a:	e9 76 ff ff ff       	jmp    c00223c5 <APIC::APIC()+0x39>
c002244f:	c6 05 60 c6 02 c0 01 	mov    BYTE PTR ds:0xc002c660,0x1
c0022456:	90                   	nop
c0022457:	83 c4 18             	add    esp,0x18
c002245a:	5b                   	pop    ebx
c002245b:	c3                   	ret    

c002245c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002245c:	55                   	push   ebp
c002245d:	89 e5                	mov    ebp,esp
c002245f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022462:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022468:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002246b:	72 1d                	jb     c002248a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002246d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022470:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0022476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022479:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002247f:	01 d0                	add    eax,edx
c0022481:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0022484:	73 04                	jae    c002248a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0022486:	b0 01                	mov    al,0x1
c0022488:	eb 02                	jmp    c002248c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002248a:	b0 00                	mov    al,0x0
c002248c:	5d                   	pop    ebp
c002248d:	c3                   	ret    

c002248e <IOAPIC::read(int)>:
c002248e:	55                   	push   ebp
c002248f:	89 e5                	mov    ebp,esp
c0022491:	83 ec 10             	sub    esp,0x10
c0022494:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022497:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002249d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00224a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00224a3:	0f b6 d0             	movzx  edx,al
c00224a6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00224a9:	89 10                	mov    DWORD PTR [eax],edx
c00224ab:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00224ae:	83 c0 10             	add    eax,0x10
c00224b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00224b3:	c9                   	leave  
c00224b4:	c3                   	ret    
c00224b5:	90                   	nop

c00224b6 <IOAPIC::open(int, int, void*)>:
c00224b6:	55                   	push   ebp
c00224b7:	89 e5                	mov    ebp,esp
c00224b9:	57                   	push   edi
c00224ba:	56                   	push   esi
c00224bb:	53                   	push   ebx
c00224bc:	83 ec 0c             	sub    esp,0xc
c00224bf:	83 ec 0c             	sub    esp,0xc
c00224c2:	68 8b 91 02 c0       	push   0xc002918b
c00224c7:	e8 85 fd fe ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00224cc:	83 c4 10             	add    esp,0x10
c00224cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00224d2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00224d5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00224db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00224de:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00224e4:	8b 14 85 e0 ac 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5320]
c00224eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00224ee:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00224f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00224f7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00224fd:	8b 14 85 60 ad 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd52a0]
c0022504:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022507:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002250d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022510:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0022516:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022519:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002251f:	0f b6 f8             	movzx  edi,al
c0022522:	89 d0                	mov    eax,edx
c0022524:	ba 00 00 00 00       	mov    edx,0x0
c0022529:	89 c1                	mov    ecx,eax
c002252b:	80 e5 ff             	and    ch,0xff
c002252e:	89 cb                	mov    ebx,ecx
c0022530:	0f b6 f2             	movzx  esi,dl
c0022533:	89 d8                	mov    eax,ebx
c0022535:	89 f2                	mov    edx,esi
c0022537:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002253a:	8d 5f 08             	lea    ebx,[edi+0x8]
c002253d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0022541:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022545:	83 e0 00             	and    eax,0x0
c0022548:	09 d0                	or     eax,edx
c002254a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002254e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022551:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022557:	8d 50 01             	lea    edx,[eax+0x1]
c002255a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002255d:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022563:	0f b6 d0             	movzx  edx,al
c0022566:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022569:	83 c2 08             	add    edx,0x8
c002256c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022570:	0f b6 c9             	movzx  ecx,cl
c0022573:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0022579:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002257d:	83 ec 08             	sub    esp,0x8
c0022580:	6a 01                	push   0x1
c0022582:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022585:	e8 04 ff ff ff       	call   c002248e <IOAPIC::read(int)>
c002258a:	83 c4 10             	add    esp,0x10
c002258d:	c1 f8 10             	sar    eax,0x10
c0022590:	0f b6 c0             	movzx  eax,al
c0022593:	8d 50 01             	lea    edx,[eax+0x1]
c0022596:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022599:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002259f:	b8 00 00 00 00       	mov    eax,0x0
c00225a4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00225a7:	5b                   	pop    ebx
c00225a8:	5e                   	pop    esi
c00225a9:	5f                   	pop    edi
c00225aa:	5d                   	pop    ebp
c00225ab:	c3                   	ret    

c00225ac <IOAPIC::write(int, int)>:
c00225ac:	55                   	push   ebp
c00225ad:	89 e5                	mov    ebp,esp
c00225af:	83 ec 10             	sub    esp,0x10
c00225b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00225b5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00225bb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00225be:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00225c1:	0f b6 d0             	movzx  edx,al
c00225c4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00225c7:	89 10                	mov    DWORD PTR [eax],edx
c00225c9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00225cc:	8d 50 10             	lea    edx,[eax+0x10]
c00225cf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00225d2:	89 02                	mov    DWORD PTR [edx],eax
c00225d4:	90                   	nop
c00225d5:	c9                   	leave  
c00225d6:	c3                   	ret    
c00225d7:	90                   	nop

c00225d8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c00225d8:	55                   	push   ebp
c00225d9:	89 e5                	mov    ebp,esp
c00225db:	83 ec 20             	sub    esp,0x20
c00225de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00225e1:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00225e4:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00225e7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00225ea:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00225ed:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00225f0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00225f3:	88 d0                	mov    al,dl
c00225f5:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c00225f8:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c00225fc:	83 c0 08             	add    eax,0x8
c00225ff:	01 c0                	add    eax,eax
c0022601:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0022604:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c0022608:	83 c0 08             	add    eax,0x8
c002260b:	01 c0                	add    eax,eax
c002260d:	40                   	inc    eax
c002260e:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c0022611:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0022614:	50                   	push   eax
c0022615:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022618:	e8 71 fe ff ff       	call   c002248e <IOAPIC::read(int)>
c002261d:	83 c4 08             	add    esp,0x8
c0022620:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0022623:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c002262a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002262d:	c1 e0 18             	shl    eax,0x18
c0022630:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0022633:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0022636:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0022639:	52                   	push   edx
c002263a:	50                   	push   eax
c002263b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002263e:	e8 69 ff ff ff       	call   c00225ac <IOAPIC::write(int, int)>
c0022643:	83 c4 0c             	add    esp,0xc
c0022646:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022649:	50                   	push   eax
c002264a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002264d:	e8 3c fe ff ff       	call   c002248e <IOAPIC::read(int)>
c0022652:	83 c4 08             	add    esp,0x8
c0022655:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0022658:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c002265f:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c0022666:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c002266d:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c0022674:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c0022678:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c002267b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c002267e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022681:	52                   	push   edx
c0022682:	50                   	push   eax
c0022683:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022686:	e8 21 ff ff ff       	call   c00225ac <IOAPIC::write(int, int)>
c002268b:	83 c4 0c             	add    esp,0xc
c002268e:	90                   	nop
c002268f:	c9                   	leave  
c0022690:	c3                   	ret    
c0022691:	90                   	nop

c0022692 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0022692:	55                   	push   ebp
c0022693:	89 e5                	mov    ebp,esp
c0022695:	56                   	push   esi
c0022696:	53                   	push   ebx
c0022697:	83 ec 20             	sub    esp,0x20
c002269a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002269d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00226a0:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c00226a4:	74 28                	je     c00226ce <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c00226a6:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00226aa:	7f 12                	jg     c00226be <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c00226ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00226af:	05 e0 96 02 c0       	add    eax,0xc00296e0
c00226b4:	8a 00                	mov    al,BYTE PTR [eax]
c00226b6:	0f b6 c0             	movzx  eax,al
c00226b9:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00226bc:	eb 10                	jmp    c00226ce <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c00226be:	83 ec 0c             	sub    esp,0xc
c00226c1:	68 9c 91 02 c0       	push   0xc002919c
c00226c6:	e8 24 63 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c00226cb:	83 c4 10             	add    esp,0x10
c00226ce:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00226d2:	a1 20 c6 02 c0       	mov    eax,ds:0xc002c620
c00226d7:	83 ec 08             	sub    esp,0x8
c00226da:	50                   	push   eax
c00226db:	68 d4 91 02 c0       	push   0xc00291d4
c00226e0:	e8 6c fb fe ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00226e5:	83 c4 10             	add    esp,0x10
c00226e8:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c00226ef:	a1 20 c6 02 c0       	mov    eax,ds:0xc002c620
c00226f4:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c00226f7:	7d 58                	jge    c0022751 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c00226f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00226fc:	8b 04 85 40 c6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd39c0]
c0022703:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022706:	83 ec 08             	sub    esp,0x8
c0022709:	52                   	push   edx
c002270a:	50                   	push   eax
c002270b:	e8 4c fd ff ff       	call   c002245c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0022710:	83 c4 10             	add    esp,0x10
c0022713:	84 c0                	test   al,al
c0022715:	74 35                	je     c002274c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c0022717:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002271a:	8b 1c 85 40 c6 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd39c0]
c0022721:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022724:	83 c0 20             	add    eax,0x20
c0022727:	0f b6 f0             	movzx  esi,al
c002272a:	e8 39 51 ff ff       	call   c0017868 <CPU::getNumber()>
c002272f:	99                   	cdq    
c0022730:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0022733:	0f b6 c9             	movzx  ecx,cl
c0022736:	83 ec 0c             	sub    esp,0xc
c0022739:	56                   	push   esi
c002273a:	52                   	push   edx
c002273b:	50                   	push   eax
c002273c:	51                   	push   ecx
c002273d:	53                   	push   ebx
c002273e:	e8 95 fe ff ff       	call   c00225d8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c0022743:	83 c4 20             	add    esp,0x20
c0022746:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c002274a:	eb 05                	jmp    c0022751 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c002274c:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c002274f:	eb 9e                	jmp    c00226ef <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c0022751:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c0022754:	83 f0 01             	xor    eax,0x1
c0022757:	84 c0                	test   al,al
c0022759:	74 10                	je     c002276b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c002275b:	83 ec 0c             	sub    esp,0xc
c002275e:	68 eb 91 02 c0       	push   0xc00291eb
c0022763:	e8 87 62 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c0022768:	83 c4 10             	add    esp,0x10
c002276b:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c002276f:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0022776:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c002277a:	7f 65                	jg     c00227e1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c002277c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002277f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022782:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0022789:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002278c:	01 ca                	add    edx,ecx
c002278e:	83 c2 54             	add    edx,0x54
c0022791:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0022795:	85 c0                	test   eax,eax
c0022797:	75 43                	jne    c00227dc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c0022799:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002279c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002279f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00227a6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00227a9:	01 ca                	add    edx,ecx
c00227ab:	8d 4a 54             	lea    ecx,[edx+0x54]
c00227ae:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00227b1:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00227b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00227b8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00227bb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00227c2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00227c5:	01 ca                	add    edx,ecx
c00227c7:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00227cd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00227d0:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00227d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00227d7:	83 e8 20             	sub    eax,0x20
c00227da:	eb 1a                	jmp    c00227f6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c00227dc:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00227df:	eb 95                	jmp    c0022776 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c00227e1:	83 ec 0c             	sub    esp,0xc
c00227e4:	68 f8 91 02 c0       	push   0xc00291f8
c00227e9:	e8 01 62 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c00227ee:	83 c4 10             	add    esp,0x10
c00227f1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00227f6:	8d 65 f8             	lea    esp,[ebp-0x8]
c00227f9:	5b                   	pop    ebx
c00227fa:	5e                   	pop    esi
c00227fb:	5d                   	pop    ebp
c00227fc:	c3                   	ret    
c00227fd:	90                   	nop

c00227fe <PIC::disable()>:
c00227fe:	55                   	push   ebp
c00227ff:	89 e5                	mov    ebp,esp
c0022801:	83 ec 10             	sub    esp,0x10
c0022804:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c002280a:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c002280e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022811:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0022815:	ee                   	out    dx,al
c0022816:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c002281c:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0022820:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0022823:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0022827:	ee                   	out    dx,al
c0022828:	90                   	nop
c0022829:	c9                   	leave  
c002282a:	c3                   	ret    
c002282b:	90                   	nop

c002282c <PIC::close(int, int, void*)>:
c002282c:	55                   	push   ebp
c002282d:	89 e5                	mov    ebp,esp
c002282f:	83 ec 08             	sub    esp,0x8
c0022832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022835:	8b 00                	mov    eax,DWORD PTR [eax]
c0022837:	83 c0 3c             	add    eax,0x3c
c002283a:	8b 00                	mov    eax,DWORD PTR [eax]
c002283c:	83 ec 0c             	sub    esp,0xc
c002283f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022842:	ff d0                	call   eax
c0022844:	83 c4 10             	add    esp,0x10
c0022847:	b8 00 00 00 00       	mov    eax,0x0
c002284c:	c9                   	leave  
c002284d:	c3                   	ret    

c002284e <PIC::PIC()>:
c002284e:	83 ec 0c             	sub    esp,0xc
c0022851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022855:	83 ec 08             	sub    esp,0x8
c0022858:	68 a4 92 02 c0       	push   0xc00292a4
c002285d:	50                   	push   eax
c002285e:	e8 41 17 ff ff       	call   c0013fa4 <InterruptController::InterruptController(char const*)>
c0022863:	83 c4 10             	add    esp,0x10
c0022866:	ba d0 92 02 c0       	mov    edx,0xc00292d0
c002286b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002286f:	89 10                	mov    DWORD PTR [eax],edx
c0022871:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022875:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002287b:	0f b6 d0             	movzx  edx,al
c002287e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022882:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0022889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002288d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022893:	0f b6 d0             	movzx  edx,al
c0022896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002289a:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002289f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228a3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228a9:	8d 50 01             	lea    edx,[eax+0x1]
c00228ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00228b0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00228b6:	0f b6 d0             	movzx  edx,al
c00228b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228bd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00228c1:	83 e1 3f             	and    ecx,0x3f
c00228c4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00228c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228cc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228d2:	0f b6 d0             	movzx  edx,al
c00228d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228d9:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00228e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228e4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228ea:	0f b6 d0             	movzx  edx,al
c00228ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228f1:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00228f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228fa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022900:	8d 50 01             	lea    edx,[eax+0x1]
c0022903:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022907:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002290d:	0f b6 d0             	movzx  edx,al
c0022910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022914:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022918:	83 e1 3f             	and    ecx,0x3f
c002291b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002291f:	90                   	nop
c0022920:	83 c4 0c             	add    esp,0xc
c0022923:	c3                   	ret    

c0022924 <PIC::ioWait()>:
c0022924:	eb 00                	jmp    c0022926 <PIC::ioWait()+0x2>
c0022926:	eb 00                	jmp    c0022928 <PIC::ioWait()+0x4>
c0022928:	90                   	nop
c0022929:	c3                   	ret    

c002292a <PIC::getIRQReg(int)>:
c002292a:	55                   	push   ebp
c002292b:	89 e5                	mov    ebp,esp
c002292d:	83 ec 10             	sub    esp,0x10
c0022930:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022933:	0f b6 c0             	movzx  eax,al
c0022936:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002293c:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c002293f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022942:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022946:	ee                   	out    dx,al
c0022947:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002294a:	0f b6 c0             	movzx  eax,al
c002294d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0022953:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0022956:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022959:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002295d:	ee                   	out    dx,al
c002295e:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0022964:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0022968:	89 c2                	mov    edx,eax
c002296a:	ec                   	in     al,dx
c002296b:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c002296e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022971:	0f b6 c0             	movzx  eax,al
c0022974:	c1 e0 08             	shl    eax,0x8
c0022977:	89 c1                	mov    ecx,eax
c0022979:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c002297f:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0022983:	89 c2                	mov    edx,eax
c0022985:	ec                   	in     al,dx
c0022986:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0022989:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002298c:	0f b6 c0             	movzx  eax,al
c002298f:	09 c8                	or     eax,ecx
c0022991:	c9                   	leave  
c0022992:	c3                   	ret    
c0022993:	90                   	nop

c0022994 <PIC::eoi(unsigned char)>:
c0022994:	55                   	push   ebp
c0022995:	89 e5                	mov    ebp,esp
c0022997:	83 ec 14             	sub    esp,0x14
c002299a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002299d:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00229a0:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00229a4:	75 1e                	jne    c00229c4 <PIC::eoi(unsigned char)+0x30>
c00229a6:	6a 0b                	push   0xb
c00229a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00229ab:	e8 7a ff ff ff       	call   c002292a <PIC::getIRQReg(int)>
c00229b0:	83 c4 08             	add    esp,0x8
c00229b3:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00229b7:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00229bb:	25 80 00 00 00       	and    eax,0x80
c00229c0:	85 c0                	test   eax,eax
c00229c2:	74 5f                	je     c0022a23 <PIC::eoi(unsigned char)+0x8f>
c00229c4:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00229c8:	75 2d                	jne    c00229f7 <PIC::eoi(unsigned char)+0x63>
c00229ca:	6a 0b                	push   0xb
c00229cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00229cf:	e8 56 ff ff ff       	call   c002292a <PIC::getIRQReg(int)>
c00229d4:	83 c4 08             	add    esp,0x8
c00229d7:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00229db:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00229de:	66 85 c0             	test   ax,ax
c00229e1:	78 14                	js     c00229f7 <PIC::eoi(unsigned char)+0x63>
c00229e3:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00229e9:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00229ed:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00229f0:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00229f4:	ee                   	out    dx,al
c00229f5:	eb 2d                	jmp    c0022a24 <PIC::eoi(unsigned char)+0x90>
c00229f7:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00229fb:	76 12                	jbe    c0022a0f <PIC::eoi(unsigned char)+0x7b>
c00229fd:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0022a03:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0022a07:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022a0a:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022a0e:	ee                   	out    dx,al
c0022a0f:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0022a15:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0022a19:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022a1c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022a20:	ee                   	out    dx,al
c0022a21:	eb 01                	jmp    c0022a24 <PIC::eoi(unsigned char)+0x90>
c0022a23:	90                   	nop
c0022a24:	c9                   	leave  
c0022a25:	c3                   	ret    

c0022a26 <PIC::remap()>:
c0022a26:	55                   	push   ebp
c0022a27:	89 e5                	mov    ebp,esp
c0022a29:	83 ec 48             	sub    esp,0x48
c0022a2c:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0022a33:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0022a3a:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0022a40:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0022a43:	89 c2                	mov    edx,eax
c0022a45:	ec                   	in     al,dx
c0022a46:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0022a49:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0022a4c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0022a4f:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0022a55:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0022a58:	89 c2                	mov    edx,eax
c0022a5a:	ec                   	in     al,dx
c0022a5b:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0022a5e:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0022a61:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0022a64:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0022a6a:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0022a6e:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0022a71:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0022a74:	ee                   	out    dx,al
c0022a75:	83 ec 0c             	sub    esp,0xc
c0022a78:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022a7b:	e8 a4 fe ff ff       	call   c0022924 <PIC::ioWait()>
c0022a80:	83 c4 10             	add    esp,0x10
c0022a83:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0022a89:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0022a8d:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0022a90:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0022a93:	ee                   	out    dx,al
c0022a94:	83 ec 0c             	sub    esp,0xc
c0022a97:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022a9a:	e8 85 fe ff ff       	call   c0022924 <PIC::ioWait()>
c0022a9f:	83 c4 10             	add    esp,0x10
c0022aa2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0022aa5:	0f b6 c0             	movzx  eax,al
c0022aa8:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0022aae:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0022ab1:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0022ab4:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0022ab7:	ee                   	out    dx,al
c0022ab8:	83 ec 0c             	sub    esp,0xc
c0022abb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022abe:	e8 61 fe ff ff       	call   c0022924 <PIC::ioWait()>
c0022ac3:	83 c4 10             	add    esp,0x10
c0022ac6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022ac9:	0f b6 c0             	movzx  eax,al
c0022acc:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0022ad2:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0022ad5:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0022ad8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0022adb:	ee                   	out    dx,al
c0022adc:	83 ec 0c             	sub    esp,0xc
c0022adf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022ae2:	e8 3d fe ff ff       	call   c0022924 <PIC::ioWait()>
c0022ae7:	83 c4 10             	add    esp,0x10
c0022aea:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0022af0:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0022af4:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0022af7:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0022afa:	ee                   	out    dx,al
c0022afb:	83 ec 0c             	sub    esp,0xc
c0022afe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022b01:	e8 1e fe ff ff       	call   c0022924 <PIC::ioWait()>
c0022b06:	83 c4 10             	add    esp,0x10
c0022b09:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0022b0f:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0022b13:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0022b16:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022b19:	ee                   	out    dx,al
c0022b1a:	83 ec 0c             	sub    esp,0xc
c0022b1d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022b20:	e8 ff fd ff ff       	call   c0022924 <PIC::ioWait()>
c0022b25:	83 c4 10             	add    esp,0x10
c0022b28:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0022b2e:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0022b32:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0022b35:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0022b38:	ee                   	out    dx,al
c0022b39:	83 ec 0c             	sub    esp,0xc
c0022b3c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022b3f:	e8 e0 fd ff ff       	call   c0022924 <PIC::ioWait()>
c0022b44:	83 c4 10             	add    esp,0x10
c0022b47:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0022b4d:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0022b51:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0022b54:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0022b57:	ee                   	out    dx,al
c0022b58:	83 ec 0c             	sub    esp,0xc
c0022b5b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022b5e:	e8 c1 fd ff ff       	call   c0022924 <PIC::ioWait()>
c0022b63:	83 c4 10             	add    esp,0x10
c0022b66:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0022b6a:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0022b70:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0022b73:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0022b76:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0022b79:	ee                   	out    dx,al
c0022b7a:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0022b7e:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0022b84:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0022b87:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0022b8a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0022b8d:	ee                   	out    dx,al
c0022b8e:	90                   	nop
c0022b8f:	c9                   	leave  
c0022b90:	c3                   	ret    
c0022b91:	90                   	nop

c0022b92 <PIC::open(int, int, void*)>:
c0022b92:	55                   	push   ebp
c0022b93:	89 e5                	mov    ebp,esp
c0022b95:	83 ec 18             	sub    esp,0x18
c0022b98:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0022b9e:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0022ba2:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022ba5:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022ba9:	ee                   	out    dx,al
c0022baa:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0022bb0:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0022bb4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022bb7:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022bbb:	ee                   	out    dx,al
c0022bbc:	83 ec 0c             	sub    esp,0xc
c0022bbf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022bc2:	e8 5f fe ff ff       	call   c0022a26 <PIC::remap()>
c0022bc7:	83 c4 10             	add    esp,0x10
c0022bca:	b8 00 00 00 00       	mov    eax,0x0
c0022bcf:	c9                   	leave  
c0022bd0:	c3                   	ret    
c0022bd1:	90                   	nop

c0022bd2 <APICTimer::close(int, int, void*)>:
c0022bd2:	b8 00 00 00 00       	mov    eax,0x0
c0022bd7:	c3                   	ret    

c0022bd8 <apicTimerHandler(regs*, void*)>:
c0022bd8:	83 ec 0c             	sub    esp,0xc
c0022bdb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022bdf:	8b 00                	mov    eax,DWORD PTR [eax]
c0022be1:	99                   	cdq    
c0022be2:	52                   	push   edx
c0022be3:	50                   	push   eax
c0022be4:	6a 00                	push   0x0
c0022be6:	68 00 ca 9a 3b       	push   0x3b9aca00
c0022beb:	e8 6c 07 00 00       	call   c002335c <__udivdi3>
c0022bf0:	83 c4 10             	add    esp,0x10
c0022bf3:	83 ec 08             	sub    esp,0x8
c0022bf6:	52                   	push   edx
c0022bf7:	50                   	push   eax
c0022bf8:	e8 a4 31 ff ff       	call   c0015da1 <timerHandler(unsigned long long)>
c0022bfd:	83 c4 10             	add    esp,0x10
c0022c00:	90                   	nop
c0022c01:	83 c4 0c             	add    esp,0xc
c0022c04:	c3                   	ret    
c0022c05:	90                   	nop

c0022c06 <APICTimer::write(int)>:
c0022c06:	53                   	push   ebx
c0022c07:	83 ec 28             	sub    esp,0x28
c0022c0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022c0e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022c12:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022c18:	e8 4f 4c ff ff       	call   c001786c <CPU::current()>
c0022c1d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022c23:	83 ec 0c             	sub    esp,0xc
c0022c26:	50                   	push   eax
c0022c27:	e8 0e f6 ff ff       	call   c002223a <APIC::getBase()>
c0022c2c:	83 c4 10             	add    esp,0x10
c0022c2f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022c33:	a1 70 aa 02 c0       	mov    eax,ds:0xc002aa70
c0022c38:	8b 15 74 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aa74
c0022c3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022c42:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022c46:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022c4a:	05 e0 03 00 00       	add    eax,0x3e0
c0022c4f:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022c55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022c59:	05 80 03 00 00       	add    eax,0x380
c0022c5e:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0022c64:	fb                   	sti    
c0022c65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c69:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022c6d:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0022c72:	83 d2 00             	adc    edx,0x0
c0022c75:	89 c1                	mov    ecx,eax
c0022c77:	89 d3                	mov    ebx,edx
c0022c79:	a1 70 aa 02 c0       	mov    eax,ds:0xc002aa70
c0022c7e:	8b 15 74 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aa74
c0022c84:	39 c8                	cmp    eax,ecx
c0022c86:	89 d0                	mov    eax,edx
c0022c88:	19 d8                	sbb    eax,ebx
c0022c8a:	73 02                	jae    c0022c8e <APICTimer::write(int)+0x88>
c0022c8c:	eb d7                	jmp    c0022c65 <APICTimer::write(int)+0x5f>
c0022c8e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022c92:	05 20 03 00 00       	add    eax,0x320
c0022c97:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0022c9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022ca1:	05 90 03 00 00       	add    eax,0x390
c0022ca6:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ca8:	f7 d0                	not    eax
c0022caa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022cae:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022cb6:	ba 00 00 00 00       	mov    edx,0x0
c0022cbb:	f7 f3                	div    ebx
c0022cbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022cc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022cc5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022ccb:	0d 00 00 02 00       	or     eax,0x20000
c0022cd0:	89 c2                	mov    edx,eax
c0022cd2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022cd6:	05 20 03 00 00       	add    eax,0x320
c0022cdb:	89 10                	mov    DWORD PTR [eax],edx
c0022cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022ce1:	05 e0 03 00 00       	add    eax,0x3e0
c0022ce6:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022cec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022cf0:	05 80 03 00 00       	add    eax,0x380
c0022cf5:	89 c2                	mov    edx,eax
c0022cf7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022cfb:	89 02                	mov    DWORD PTR [edx],eax
c0022cfd:	90                   	nop
c0022cfe:	83 c4 28             	add    esp,0x28
c0022d01:	5b                   	pop    ebx
c0022d02:	c3                   	ret    
c0022d03:	90                   	nop

c0022d04 <APICTimer::open(int, int, void*)>:
c0022d04:	57                   	push   edi
c0022d05:	56                   	push   esi
c0022d06:	53                   	push   ebx
c0022d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d0d:	83 c0 24             	add    eax,0x24
c0022d10:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d12:	83 ec 08             	sub    esp,0x8
c0022d15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d1d:	ff d0                	call   eax
c0022d1f:	83 c4 10             	add    esp,0x10
c0022d22:	e8 45 4b ff ff       	call   c001786c <CPU::current()>
c0022d27:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022d2d:	83 ec 0c             	sub    esp,0xc
c0022d30:	50                   	push   eax
c0022d31:	e8 04 f5 ff ff       	call   c002223a <APIC::getBase()>
c0022d36:	83 c4 10             	add    esp,0x10
c0022d39:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0022d3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d43:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022d49:	0f b6 f8             	movzx  edi,al
c0022d4c:	89 d0                	mov    eax,edx
c0022d4e:	ba 00 00 00 00       	mov    edx,0x0
c0022d53:	89 c1                	mov    ecx,eax
c0022d55:	80 e5 ff             	and    ch,0xff
c0022d58:	89 cb                	mov    ebx,ecx
c0022d5a:	0f b6 f2             	movzx  esi,dl
c0022d5d:	89 d8                	mov    eax,ebx
c0022d5f:	89 f2                	mov    edx,esi
c0022d61:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022d65:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022d68:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0022d6c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022d70:	83 e0 00             	and    eax,0x0
c0022d73:	09 d0                	or     eax,edx
c0022d75:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0022d79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d7d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022d83:	8d 50 01             	lea    edx,[eax+0x1]
c0022d86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022d8a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022d90:	0f b6 d0             	movzx  edx,al
c0022d93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d97:	83 c2 08             	add    edx,0x8
c0022d9a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022d9e:	0f b6 c9             	movzx  ecx,cl
c0022da1:	81 c9 00 00 01 00    	or     ecx,0x10000
c0022da7:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022dab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022daf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022db3:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022db9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dbd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022dc1:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0022dc7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022dcb:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022dd1:	83 ec 0c             	sub    esp,0xc
c0022dd4:	51                   	push   ecx
c0022dd5:	6a 01                	push   0x1
c0022dd7:	68 d8 2b 02 c0       	push   0xc0022bd8
c0022ddc:	52                   	push   edx
c0022ddd:	50                   	push   eax
c0022dde:	e8 cd 07 ff ff       	call   c00135b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022de3:	83 c4 20             	add    esp,0x20
c0022de6:	89 c2                	mov    edx,eax
c0022de8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dec:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022df2:	b8 00 00 00 00       	mov    eax,0x0
c0022df7:	5b                   	pop    ebx
c0022df8:	5e                   	pop    esi
c0022df9:	5f                   	pop    edi
c0022dfa:	c3                   	ret    
c0022dfb:	90                   	nop

c0022dfc <APICTimer::APICTimer()>:
c0022dfc:	83 ec 0c             	sub    esp,0xc
c0022dff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e03:	83 ec 08             	sub    esp,0x8
c0022e06:	68 10 93 02 c0       	push   0xc0029310
c0022e0b:	50                   	push   eax
c0022e0c:	e8 01 2f ff ff       	call   c0015d12 <Timer::Timer(char const*)>
c0022e11:	83 c4 10             	add    esp,0x10
c0022e14:	ba 24 93 02 c0       	mov    edx,0xc0029324
c0022e19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e1d:	89 10                	mov    DWORD PTR [eax],edx
c0022e1f:	90                   	nop
c0022e20:	83 c4 0c             	add    esp,0xc
c0022e23:	c3                   	ret    

c0022e24 <PIT::write(int)>:
c0022e24:	83 ec 10             	sub    esp,0x10
c0022e27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022e2b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022e2f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022e35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022e39:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0022e3e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0022e43:	99                   	cdq    
c0022e44:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0022e48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022e4c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0022e53:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0022e58:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0022e5c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0022e61:	ee                   	out    dx,al
c0022e62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022e66:	0f b6 c0             	movzx  eax,al
c0022e69:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0022e70:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022e74:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0022e78:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0022e7d:	ee                   	out    dx,al
c0022e7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022e82:	c1 f8 08             	sar    eax,0x8
c0022e85:	0f b6 c0             	movzx  eax,al
c0022e88:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0022e8f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0022e93:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0022e97:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0022e9c:	ee                   	out    dx,al
c0022e9d:	90                   	nop
c0022e9e:	83 c4 10             	add    esp,0x10
c0022ea1:	c3                   	ret    

c0022ea2 <pitHandler(regs*, void*)>:
c0022ea2:	83 ec 0c             	sub    esp,0xc
c0022ea5:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0022eaa:	99                   	cdq    
c0022eab:	52                   	push   edx
c0022eac:	50                   	push   eax
c0022ead:	6a 00                	push   0x0
c0022eaf:	68 00 ca 9a 3b       	push   0x3b9aca00
c0022eb4:	e8 a3 04 00 00       	call   c002335c <__udivdi3>
c0022eb9:	83 c4 10             	add    esp,0x10
c0022ebc:	83 ec 08             	sub    esp,0x8
c0022ebf:	52                   	push   edx
c0022ec0:	50                   	push   eax
c0022ec1:	e8 db 2e ff ff       	call   c0015da1 <timerHandler(unsigned long long)>
c0022ec6:	83 c4 10             	add    esp,0x10
c0022ec9:	90                   	nop
c0022eca:	83 c4 0c             	add    esp,0xc
c0022ecd:	c3                   	ret    

c0022ece <PIT::open(int, int, void*)>:
c0022ece:	83 ec 0c             	sub    esp,0xc
c0022ed1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ed5:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ed7:	83 c0 24             	add    eax,0x24
c0022eda:	8b 00                	mov    eax,DWORD PTR [eax]
c0022edc:	83 ec 08             	sub    esp,0x8
c0022edf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ee3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ee7:	ff d0                	call   eax
c0022ee9:	83 c4 10             	add    esp,0x10
c0022eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ef0:	83 ec 0c             	sub    esp,0xc
c0022ef3:	6a 00                	push   0x0
c0022ef5:	6a 01                	push   0x1
c0022ef7:	68 a2 2e 02 c0       	push   0xc0022ea2
c0022efc:	6a 00                	push   0x0
c0022efe:	50                   	push   eax
c0022eff:	e8 ac 06 ff ff       	call   c00135b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022f04:	83 c4 20             	add    esp,0x20
c0022f07:	89 c2                	mov    edx,eax
c0022f09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f0d:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022f13:	b8 00 00 00 00       	mov    eax,0x0
c0022f18:	83 c4 0c             	add    esp,0xc
c0022f1b:	c3                   	ret    

c0022f1c <PIT::close(int, int, void*)>:
c0022f1c:	83 ec 0c             	sub    esp,0xc
c0022f1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f23:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0022f2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f31:	6a 01                	push   0x1
c0022f33:	68 a2 2e 02 c0       	push   0xc0022ea2
c0022f38:	6a 00                	push   0x0
c0022f3a:	50                   	push   eax
c0022f3b:	e8 ce 06 ff ff       	call   c001360e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0022f40:	83 c4 10             	add    esp,0x10
c0022f43:	b8 00 00 00 00       	mov    eax,0x0
c0022f48:	83 c4 0c             	add    esp,0xc
c0022f4b:	c3                   	ret    

c0022f4c <PIT::PIT()>:
c0022f4c:	83 ec 0c             	sub    esp,0xc
c0022f4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f53:	83 ec 08             	sub    esp,0x8
c0022f56:	68 4c 93 02 c0       	push   0xc002934c
c0022f5b:	50                   	push   eax
c0022f5c:	e8 b1 2d ff ff       	call   c0015d12 <Timer::Timer(char const*)>
c0022f61:	83 c4 10             	add    esp,0x10
c0022f64:	ba 74 93 02 c0       	mov    edx,0xc0029374
c0022f69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f6d:	89 10                	mov    DWORD PTR [eax],edx
c0022f6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f73:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022f79:	0f b6 d0             	movzx  edx,al
c0022f7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f80:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0022f87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f8b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022f91:	0f b6 d0             	movzx  edx,al
c0022f94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f98:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0022f9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fa1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022fa7:	8d 50 01             	lea    edx,[eax+0x1]
c0022faa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022fae:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022fb4:	0f b6 d0             	movzx  edx,al
c0022fb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fbb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022fbf:	83 e1 3f             	and    ecx,0x3f
c0022fc2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022fc6:	90                   	nop
c0022fc7:	83 c4 0c             	add    esp,0xc
c0022fca:	c3                   	ret    
c0022fcb:	66 90                	xchg   ax,ax
c0022fcd:	66 90                	xchg   ax,ax
c0022fcf:	90                   	nop

c0022fd0 <avxDetect>:
c0022fd0:	b8 00 00 00 00       	mov    eax,0x0
c0022fd5:	c3                   	ret    

c0022fd6 <avxSave>:
c0022fd6:	c3                   	ret    

c0022fd7 <avxLoad>:
c0022fd7:	c3                   	ret    

c0022fd8 <avxInit>:
c0022fd8:	c3                   	ret    

c0022fd9 <avxClose>:
c0022fd9:	c3                   	ret    
c0022fda:	66 90                	xchg   ax,ax
c0022fdc:	66 90                	xchg   ax,ax
c0022fde:	66 90                	xchg   ax,ax

c0022fe0 <sseDetect>:
c0022fe0:	b8 01 00 00 00       	mov    eax,0x1
c0022fe5:	0f a2                	cpuid  
c0022fe7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0022fed:	74 06                	je     c0022ff5 <sseDetect.noSSE>
c0022fef:	b8 01 00 00 00       	mov    eax,0x1
c0022ff4:	c3                   	ret    

c0022ff5 <sseDetect.noSSE>:
c0022ff5:	b8 00 00 00 00       	mov    eax,0x0
c0022ffa:	c3                   	ret    

c0022ffb <sseSave>:
c0022ffb:	0f ae 44 24 08       	fxsave [esp+0x8]
c0023000:	c3                   	ret    

c0023001 <sseLoad>:
c0023001:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0023006:	c3                   	ret    

c0023007 <sseInit>:
c0023007:	e8 40 00 00 00       	call   c002304c <x87Init>
c002300c:	0f 20 e0             	mov    eax,cr4
c002300f:	66 0d 00 06          	or     ax,0x600
c0023013:	0f 22 e0             	mov    cr4,eax
c0023016:	c3                   	ret    

c0023017 <sseClose>:
c0023017:	c3                   	ret    
c0023018:	66 90                	xchg   ax,ax
c002301a:	66 90                	xchg   ax,ax
c002301c:	66 90                	xchg   ax,ax
c002301e:	66 90                	xchg   ax,ax

c0023020 <value_37F>:
c0023020:	7f 03                	jg     c0023025 <value_37A+0x1>

c0023022 <value_37E>:
c0023022:	7e 03                	jle    c0023027 <x87Detect+0x1>

c0023024 <value_37A>:
c0023024:	7a 03                	jp     c0023029 <x87Detect+0x3>

c0023026 <x87Detect>:
c0023026:	b8 01 00 00 00       	mov    eax,0x1
c002302b:	0f a2                	cpuid  
c002302d:	f7 c2 01 00 00 00    	test   edx,0x1
c0023033:	74 06                	je     c002303b <x87Detect.nox87>
c0023035:	b8 01 00 00 00       	mov    eax,0x1
c002303a:	c3                   	ret    

c002303b <x87Detect.nox87>:
c002303b:	b8 00 00 00 00       	mov    eax,0x0
c0023040:	c3                   	ret    

c0023041 <x87Save>:
c0023041:	9b dd 74 24 08       	fsave  [esp+0x8]
c0023046:	c3                   	ret    

c0023047 <x87Load>:
c0023047:	dd 64 24 08          	frstor [esp+0x8]
c002304b:	c3                   	ret    

c002304c <x87Init>:
c002304c:	9b db e3             	finit  
c002304f:	0f 20 c0             	mov    eax,cr0
c0023052:	66 25 fb ff          	and    ax,0xfffb
c0023056:	66 0d 22 00          	or     ax,0x22
c002305a:	0f 22 c0             	mov    cr0,eax
c002305d:	0f 06                	clts   
c002305f:	d9 2d 24 30 02 c0    	fldcw  WORD PTR ds:0xc0023024
c0023065:	c3                   	ret    

c0023066 <x87Close>:
c0023066:	c3                   	ret    
c0023067:	90                   	nop

c0023068 <__do_global_ctors_aux>:
c0023068:	a1 98 5b 02 c0       	mov    eax,ds:0xc0025b98
c002306d:	83 f8 ff             	cmp    eax,0xffffffff
c0023070:	74 1a                	je     c002308c <__do_global_ctors_aux+0x24>
c0023072:	55                   	push   ebp
c0023073:	89 e5                	mov    ebp,esp
c0023075:	53                   	push   ebx
c0023076:	52                   	push   edx
c0023077:	bb 98 5b 02 c0       	mov    ebx,0xc0025b98
c002307c:	ff d0                	call   eax
c002307e:	83 eb 04             	sub    ebx,0x4
c0023081:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023083:	83 f8 ff             	cmp    eax,0xffffffff
c0023086:	75 f4                	jne    c002307c <__do_global_ctors_aux+0x14>
c0023088:	58                   	pop    eax
c0023089:	5b                   	pop    ebx
c002308a:	5d                   	pop    ebp
c002308b:	c3                   	ret    
c002308c:	c3                   	ret    
c002308d:	66 90                	xchg   ax,ax
c002308f:	90                   	nop

c0023090 <__divdi3>:
c0023090:	55                   	push   ebp
c0023091:	57                   	push   edi
c0023092:	56                   	push   esi
c0023093:	53                   	push   ebx
c0023094:	83 ec 1c             	sub    esp,0x1c
c0023097:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002309b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002309f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00230a2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00230a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00230aa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00230ae:	85 db                	test   ebx,ebx
c00230b0:	0f 88 8e 00 00 00    	js     c0023144 <__divdi3+0xb4>
c00230b6:	89 dd                	mov    ebp,ebx
c00230b8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00230c0:	89 d3                	mov    ebx,edx
c00230c2:	85 d2                	test   edx,edx
c00230c4:	79 0d                	jns    c00230d3 <__divdi3+0x43>
c00230c6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00230ca:	f7 d8                	neg    eax
c00230cc:	83 d2 00             	adc    edx,0x0
c00230cf:	f7 da                	neg    edx
c00230d1:	89 d3                	mov    ebx,edx
c00230d3:	89 c7                	mov    edi,eax
c00230d5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00230d8:	85 db                	test   ebx,ebx
c00230da:	75 48                	jne    c0023124 <__divdi3+0x94>
c00230dc:	39 ef                	cmp    edi,ebp
c00230de:	76 24                	jbe    c0023104 <__divdi3+0x74>
c00230e0:	89 ea                	mov    edx,ebp
c00230e2:	f7 f7                	div    edi
c00230e4:	89 c1                	mov    ecx,eax
c00230e6:	31 f6                	xor    esi,esi
c00230e8:	89 c8                	mov    eax,ecx
c00230ea:	89 f2                	mov    edx,esi
c00230ec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00230f0:	85 c9                	test   ecx,ecx
c00230f2:	74 07                	je     c00230fb <__divdi3+0x6b>
c00230f4:	f7 d8                	neg    eax
c00230f6:	83 d2 00             	adc    edx,0x0
c00230f9:	f7 da                	neg    edx
c00230fb:	83 c4 1c             	add    esp,0x1c
c00230fe:	5b                   	pop    ebx
c00230ff:	5e                   	pop    esi
c0023100:	5f                   	pop    edi
c0023101:	5d                   	pop    ebp
c0023102:	c3                   	ret    
c0023103:	90                   	nop
c0023104:	85 ff                	test   edi,edi
c0023106:	75 0b                	jne    c0023113 <__divdi3+0x83>
c0023108:	b8 01 00 00 00       	mov    eax,0x1
c002310d:	31 d2                	xor    edx,edx
c002310f:	f7 f3                	div    ebx
c0023111:	89 c7                	mov    edi,eax
c0023113:	31 d2                	xor    edx,edx
c0023115:	89 e8                	mov    eax,ebp
c0023117:	f7 f7                	div    edi
c0023119:	89 c6                	mov    esi,eax
c002311b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002311e:	f7 f7                	div    edi
c0023120:	89 c1                	mov    ecx,eax
c0023122:	eb c4                	jmp    c00230e8 <__divdi3+0x58>
c0023124:	39 eb                	cmp    ebx,ebp
c0023126:	77 3c                	ja     c0023164 <__divdi3+0xd4>
c0023128:	0f bd f3             	bsr    esi,ebx
c002312b:	83 f6 1f             	xor    esi,0x1f
c002312e:	75 40                	jne    c0023170 <__divdi3+0xe0>
c0023130:	39 eb                	cmp    ebx,ebp
c0023132:	72 09                	jb     c002313d <__divdi3+0xad>
c0023134:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0023137:	0f 87 97 00 00 00    	ja     c00231d4 <__divdi3+0x144>
c002313d:	b9 01 00 00 00       	mov    ecx,0x1
c0023142:	eb a4                	jmp    c00230e8 <__divdi3+0x58>
c0023144:	f7 d9                	neg    ecx
c0023146:	83 d3 00             	adc    ebx,0x0
c0023149:	f7 db                	neg    ebx
c002314b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002314e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0023152:	89 dd                	mov    ebp,ebx
c0023154:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002315c:	e9 5f ff ff ff       	jmp    c00230c0 <__divdi3+0x30>
c0023161:	8d 76 00             	lea    esi,[esi+0x0]
c0023164:	31 f6                	xor    esi,esi
c0023166:	31 c9                	xor    ecx,ecx
c0023168:	e9 7b ff ff ff       	jmp    c00230e8 <__divdi3+0x58>
c002316d:	8d 76 00             	lea    esi,[esi+0x0]
c0023170:	b8 20 00 00 00       	mov    eax,0x20
c0023175:	29 f0                	sub    eax,esi
c0023177:	89 f1                	mov    ecx,esi
c0023179:	d3 e3                	shl    ebx,cl
c002317b:	89 fa                	mov    edx,edi
c002317d:	88 c1                	mov    cl,al
c002317f:	d3 ea                	shr    edx,cl
c0023181:	09 da                	or     edx,ebx
c0023183:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023187:	89 f1                	mov    ecx,esi
c0023189:	d3 e7                	shl    edi,cl
c002318b:	89 eb                	mov    ebx,ebp
c002318d:	88 c1                	mov    cl,al
c002318f:	d3 eb                	shr    ebx,cl
c0023191:	89 f1                	mov    ecx,esi
c0023193:	d3 e5                	shl    ebp,cl
c0023195:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0023198:	88 c1                	mov    cl,al
c002319a:	d3 ea                	shr    edx,cl
c002319c:	09 d5                	or     ebp,edx
c002319e:	89 e8                	mov    eax,ebp
c00231a0:	89 da                	mov    edx,ebx
c00231a2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00231a6:	89 d3                	mov    ebx,edx
c00231a8:	89 c5                	mov    ebp,eax
c00231aa:	f7 e7                	mul    edi
c00231ac:	39 d3                	cmp    ebx,edx
c00231ae:	72 18                	jb     c00231c8 <__divdi3+0x138>
c00231b0:	74 0a                	je     c00231bc <__divdi3+0x12c>
c00231b2:	89 e9                	mov    ecx,ebp
c00231b4:	31 f6                	xor    esi,esi
c00231b6:	e9 2d ff ff ff       	jmp    c00230e8 <__divdi3+0x58>
c00231bb:	90                   	nop
c00231bc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00231bf:	89 f1                	mov    ecx,esi
c00231c1:	d3 e7                	shl    edi,cl
c00231c3:	39 c7                	cmp    edi,eax
c00231c5:	73 eb                	jae    c00231b2 <__divdi3+0x122>
c00231c7:	90                   	nop
c00231c8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00231cb:	31 f6                	xor    esi,esi
c00231cd:	e9 16 ff ff ff       	jmp    c00230e8 <__divdi3+0x58>
c00231d2:	66 90                	xchg   ax,ax
c00231d4:	31 c9                	xor    ecx,ecx
c00231d6:	e9 0d ff ff ff       	jmp    c00230e8 <__divdi3+0x58>
c00231db:	90                   	nop

c00231dc <__moddi3>:
c00231dc:	55                   	push   ebp
c00231dd:	57                   	push   edi
c00231de:	56                   	push   esi
c00231df:	53                   	push   ebx
c00231e0:	83 ec 2c             	sub    esp,0x2c
c00231e3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00231e7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00231eb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00231ef:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00231f3:	85 db                	test   ebx,ebx
c00231f5:	0f 88 85 00 00 00    	js     c0023280 <__moddi3+0xa4>
c00231fb:	89 de                	mov    esi,ebx
c00231fd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0023205:	89 d7                	mov    edi,edx
c0023207:	85 d2                	test   edx,edx
c0023209:	79 09                	jns    c0023214 <__moddi3+0x38>
c002320b:	f7 d8                	neg    eax
c002320d:	83 d2 00             	adc    edx,0x0
c0023210:	f7 da                	neg    edx
c0023212:	89 d7                	mov    edi,edx
c0023214:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023218:	89 cd                	mov    ebp,ecx
c002321a:	85 ff                	test   edi,edi
c002321c:	75 52                	jne    c0023270 <__moddi3+0x94>
c002321e:	89 c3                	mov    ebx,eax
c0023220:	39 f0                	cmp    eax,esi
c0023222:	76 24                	jbe    c0023248 <__moddi3+0x6c>
c0023224:	89 c8                	mov    eax,ecx
c0023226:	89 f2                	mov    edx,esi
c0023228:	f7 f3                	div    ebx
c002322a:	89 d6                	mov    esi,edx
c002322c:	89 f0                	mov    eax,esi
c002322e:	31 d2                	xor    edx,edx
c0023230:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023234:	85 c9                	test   ecx,ecx
c0023236:	74 07                	je     c002323f <__moddi3+0x63>
c0023238:	f7 d8                	neg    eax
c002323a:	83 d2 00             	adc    edx,0x0
c002323d:	f7 da                	neg    edx
c002323f:	83 c4 2c             	add    esp,0x2c
c0023242:	5b                   	pop    ebx
c0023243:	5e                   	pop    esi
c0023244:	5f                   	pop    edi
c0023245:	5d                   	pop    ebp
c0023246:	c3                   	ret    
c0023247:	90                   	nop
c0023248:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002324c:	85 db                	test   ebx,ebx
c002324e:	75 0d                	jne    c002325d <__moddi3+0x81>
c0023250:	b8 01 00 00 00       	mov    eax,0x1
c0023255:	31 d2                	xor    edx,edx
c0023257:	f7 f7                	div    edi
c0023259:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002325d:	89 f0                	mov    eax,esi
c002325f:	31 d2                	xor    edx,edx
c0023261:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023265:	f7 f7                	div    edi
c0023267:	89 e8                	mov    eax,ebp
c0023269:	f7 f7                	div    edi
c002326b:	89 d6                	mov    esi,edx
c002326d:	eb bd                	jmp    c002322c <__moddi3+0x50>
c002326f:	90                   	nop
c0023270:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0023274:	39 f7                	cmp    edi,esi
c0023276:	76 20                	jbe    c0023298 <__moddi3+0xbc>
c0023278:	89 c8                	mov    eax,ecx
c002327a:	89 f2                	mov    edx,esi
c002327c:	eb b2                	jmp    c0023230 <__moddi3+0x54>
c002327e:	66 90                	xchg   ax,ax
c0023280:	f7 d9                	neg    ecx
c0023282:	83 d3 00             	adc    ebx,0x0
c0023285:	f7 db                	neg    ebx
c0023287:	89 de                	mov    esi,ebx
c0023289:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0023291:	e9 6f ff ff ff       	jmp    c0023205 <__moddi3+0x29>
c0023296:	66 90                	xchg   ax,ax
c0023298:	0f bd c7             	bsr    eax,edi
c002329b:	83 f0 1f             	xor    eax,0x1f
c002329e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00232a2:	75 24                	jne    c00232c8 <__moddi3+0xec>
c00232a4:	39 f7                	cmp    edi,esi
c00232a6:	72 06                	jb     c00232ae <__moddi3+0xd2>
c00232a8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00232ac:	77 0c                	ja     c00232ba <__moddi3+0xde>
c00232ae:	89 e9                	mov    ecx,ebp
c00232b0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00232b4:	19 fe                	sbb    esi,edi
c00232b6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00232ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00232be:	89 f2                	mov    edx,esi
c00232c0:	e9 6b ff ff ff       	jmp    c0023230 <__moddi3+0x54>
c00232c5:	8d 76 00             	lea    esi,[esi+0x0]
c00232c8:	b8 20 00 00 00       	mov    eax,0x20
c00232cd:	89 c2                	mov    edx,eax
c00232cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00232d3:	29 da                	sub    edx,ebx
c00232d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00232d9:	88 d9                	mov    cl,bl
c00232db:	d3 e7                	shl    edi,cl
c00232dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00232e1:	88 d1                	mov    cl,dl
c00232e3:	d3 e8                	shr    eax,cl
c00232e5:	09 c7                	or     edi,eax
c00232e7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00232eb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00232ef:	89 d8                	mov    eax,ebx
c00232f1:	88 d9                	mov    cl,bl
c00232f3:	d3 e7                	shl    edi,cl
c00232f5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00232f9:	89 f3                	mov    ebx,esi
c00232fb:	88 d1                	mov    cl,dl
c00232fd:	d3 eb                	shr    ebx,cl
c00232ff:	89 c7                	mov    edi,eax
c0023301:	88 c1                	mov    cl,al
c0023303:	d3 e6                	shl    esi,cl
c0023305:	89 e8                	mov    eax,ebp
c0023307:	88 d1                	mov    cl,dl
c0023309:	d3 e8                	shr    eax,cl
c002330b:	09 f0                	or     eax,esi
c002330d:	89 f9                	mov    ecx,edi
c002330f:	d3 e5                	shl    ebp,cl
c0023311:	89 da                	mov    edx,ebx
c0023313:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0023317:	89 d3                	mov    ebx,edx
c0023319:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002331d:	89 c6                	mov    esi,eax
c002331f:	89 d1                	mov    ecx,edx
c0023321:	39 d3                	cmp    ebx,edx
c0023323:	72 27                	jb     c002334c <__moddi3+0x170>
c0023325:	74 21                	je     c0023348 <__moddi3+0x16c>
c0023327:	29 f5                	sub    ebp,esi
c0023329:	19 cb                	sbb    ebx,ecx
c002332b:	89 de                	mov    esi,ebx
c002332d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0023331:	d3 e6                	shl    esi,cl
c0023333:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0023337:	89 f9                	mov    ecx,edi
c0023339:	d3 ed                	shr    ebp,cl
c002333b:	09 ee                	or     esi,ebp
c002333d:	89 f0                	mov    eax,esi
c002333f:	d3 eb                	shr    ebx,cl
c0023341:	89 da                	mov    edx,ebx
c0023343:	e9 e8 fe ff ff       	jmp    c0023230 <__moddi3+0x54>
c0023348:	39 c5                	cmp    ebp,eax
c002334a:	73 db                	jae    c0023327 <__moddi3+0x14b>
c002334c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0023350:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0023354:	89 d1                	mov    ecx,edx
c0023356:	89 c6                	mov    esi,eax
c0023358:	eb cd                	jmp    c0023327 <__moddi3+0x14b>
c002335a:	66 90                	xchg   ax,ax

c002335c <__udivdi3>:
c002335c:	55                   	push   ebp
c002335d:	57                   	push   edi
c002335e:	56                   	push   esi
c002335f:	53                   	push   ebx
c0023360:	83 ec 1c             	sub    esp,0x1c
c0023363:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0023367:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002336b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002336f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023373:	85 d2                	test   edx,edx
c0023375:	75 41                	jne    c00233b8 <__udivdi3+0x5c>
c0023377:	39 f7                	cmp    edi,esi
c0023379:	76 15                	jbe    c0023390 <__udivdi3+0x34>
c002337b:	89 e8                	mov    eax,ebp
c002337d:	89 f2                	mov    edx,esi
c002337f:	f7 f7                	div    edi
c0023381:	31 db                	xor    ebx,ebx
c0023383:	89 da                	mov    edx,ebx
c0023385:	83 c4 1c             	add    esp,0x1c
c0023388:	5b                   	pop    ebx
c0023389:	5e                   	pop    esi
c002338a:	5f                   	pop    edi
c002338b:	5d                   	pop    ebp
c002338c:	c3                   	ret    
c002338d:	8d 76 00             	lea    esi,[esi+0x0]
c0023390:	89 f9                	mov    ecx,edi
c0023392:	85 ff                	test   edi,edi
c0023394:	75 0b                	jne    c00233a1 <__udivdi3+0x45>
c0023396:	b8 01 00 00 00       	mov    eax,0x1
c002339b:	31 d2                	xor    edx,edx
c002339d:	f7 f7                	div    edi
c002339f:	89 c1                	mov    ecx,eax
c00233a1:	31 d2                	xor    edx,edx
c00233a3:	89 f0                	mov    eax,esi
c00233a5:	f7 f1                	div    ecx
c00233a7:	89 c3                	mov    ebx,eax
c00233a9:	89 e8                	mov    eax,ebp
c00233ab:	f7 f1                	div    ecx
c00233ad:	89 da                	mov    edx,ebx
c00233af:	83 c4 1c             	add    esp,0x1c
c00233b2:	5b                   	pop    ebx
c00233b3:	5e                   	pop    esi
c00233b4:	5f                   	pop    edi
c00233b5:	5d                   	pop    ebp
c00233b6:	c3                   	ret    
c00233b7:	90                   	nop
c00233b8:	39 f2                	cmp    edx,esi
c00233ba:	77 1c                	ja     c00233d8 <__udivdi3+0x7c>
c00233bc:	0f bd da             	bsr    ebx,edx
c00233bf:	83 f3 1f             	xor    ebx,0x1f
c00233c2:	75 24                	jne    c00233e8 <__udivdi3+0x8c>
c00233c4:	39 f2                	cmp    edx,esi
c00233c6:	72 08                	jb     c00233d0 <__udivdi3+0x74>
c00233c8:	39 ef                	cmp    edi,ebp
c00233ca:	0f 87 84 00 00 00    	ja     c0023454 <__udivdi3+0xf8>
c00233d0:	b8 01 00 00 00       	mov    eax,0x1
c00233d5:	eb ac                	jmp    c0023383 <__udivdi3+0x27>
c00233d7:	90                   	nop
c00233d8:	31 db                	xor    ebx,ebx
c00233da:	31 c0                	xor    eax,eax
c00233dc:	89 da                	mov    edx,ebx
c00233de:	83 c4 1c             	add    esp,0x1c
c00233e1:	5b                   	pop    ebx
c00233e2:	5e                   	pop    esi
c00233e3:	5f                   	pop    edi
c00233e4:	5d                   	pop    ebp
c00233e5:	c3                   	ret    
c00233e6:	66 90                	xchg   ax,ax
c00233e8:	b8 20 00 00 00       	mov    eax,0x20
c00233ed:	29 d8                	sub    eax,ebx
c00233ef:	88 d9                	mov    cl,bl
c00233f1:	d3 e2                	shl    edx,cl
c00233f3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00233f7:	89 fa                	mov    edx,edi
c00233f9:	88 c1                	mov    cl,al
c00233fb:	d3 ea                	shr    edx,cl
c00233fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023401:	09 d1                	or     ecx,edx
c0023403:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023407:	88 d9                	mov    cl,bl
c0023409:	d3 e7                	shl    edi,cl
c002340b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002340f:	89 f7                	mov    edi,esi
c0023411:	88 c1                	mov    cl,al
c0023413:	d3 ef                	shr    edi,cl
c0023415:	88 d9                	mov    cl,bl
c0023417:	d3 e6                	shl    esi,cl
c0023419:	89 ea                	mov    edx,ebp
c002341b:	88 c1                	mov    cl,al
c002341d:	d3 ea                	shr    edx,cl
c002341f:	09 d6                	or     esi,edx
c0023421:	89 f0                	mov    eax,esi
c0023423:	89 fa                	mov    edx,edi
c0023425:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0023429:	89 d7                	mov    edi,edx
c002342b:	89 c6                	mov    esi,eax
c002342d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023431:	39 d7                	cmp    edi,edx
c0023433:	72 13                	jb     c0023448 <__udivdi3+0xec>
c0023435:	74 09                	je     c0023440 <__udivdi3+0xe4>
c0023437:	89 f0                	mov    eax,esi
c0023439:	31 db                	xor    ebx,ebx
c002343b:	e9 43 ff ff ff       	jmp    c0023383 <__udivdi3+0x27>
c0023440:	88 d9                	mov    cl,bl
c0023442:	d3 e5                	shl    ebp,cl
c0023444:	39 c5                	cmp    ebp,eax
c0023446:	73 ef                	jae    c0023437 <__udivdi3+0xdb>
c0023448:	8d 46 ff             	lea    eax,[esi-0x1]
c002344b:	31 db                	xor    ebx,ebx
c002344d:	e9 31 ff ff ff       	jmp    c0023383 <__udivdi3+0x27>
c0023452:	66 90                	xchg   ax,ax
c0023454:	31 c0                	xor    eax,eax
c0023456:	e9 28 ff ff ff       	jmp    c0023383 <__udivdi3+0x27>
c002345b:	90                   	nop

c002345c <__umoddi3>:
c002345c:	55                   	push   ebp
c002345d:	57                   	push   edi
c002345e:	56                   	push   esi
c002345f:	53                   	push   ebx
c0023460:	83 ec 1c             	sub    esp,0x1c
c0023463:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023467:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002346b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002346f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023473:	89 da                	mov    edx,ebx
c0023475:	85 c0                	test   eax,eax
c0023477:	75 37                	jne    c00234b0 <__umoddi3+0x54>
c0023479:	39 df                	cmp    edi,ebx
c002347b:	76 13                	jbe    c0023490 <__umoddi3+0x34>
c002347d:	89 f0                	mov    eax,esi
c002347f:	f7 f7                	div    edi
c0023481:	89 d0                	mov    eax,edx
c0023483:	31 d2                	xor    edx,edx
c0023485:	83 c4 1c             	add    esp,0x1c
c0023488:	5b                   	pop    ebx
c0023489:	5e                   	pop    esi
c002348a:	5f                   	pop    edi
c002348b:	5d                   	pop    ebp
c002348c:	c3                   	ret    
c002348d:	8d 76 00             	lea    esi,[esi+0x0]
c0023490:	89 fd                	mov    ebp,edi
c0023492:	85 ff                	test   edi,edi
c0023494:	75 0b                	jne    c00234a1 <__umoddi3+0x45>
c0023496:	b8 01 00 00 00       	mov    eax,0x1
c002349b:	31 d2                	xor    edx,edx
c002349d:	f7 f7                	div    edi
c002349f:	89 c5                	mov    ebp,eax
c00234a1:	89 d8                	mov    eax,ebx
c00234a3:	31 d2                	xor    edx,edx
c00234a5:	f7 f5                	div    ebp
c00234a7:	89 f0                	mov    eax,esi
c00234a9:	f7 f5                	div    ebp
c00234ab:	89 d0                	mov    eax,edx
c00234ad:	eb d4                	jmp    c0023483 <__umoddi3+0x27>
c00234af:	90                   	nop
c00234b0:	89 f1                	mov    ecx,esi
c00234b2:	39 d8                	cmp    eax,ebx
c00234b4:	76 0a                	jbe    c00234c0 <__umoddi3+0x64>
c00234b6:	89 f0                	mov    eax,esi
c00234b8:	83 c4 1c             	add    esp,0x1c
c00234bb:	5b                   	pop    ebx
c00234bc:	5e                   	pop    esi
c00234bd:	5f                   	pop    edi
c00234be:	5d                   	pop    ebp
c00234bf:	c3                   	ret    
c00234c0:	0f bd e8             	bsr    ebp,eax
c00234c3:	83 f5 1f             	xor    ebp,0x1f
c00234c6:	75 1c                	jne    c00234e4 <__umoddi3+0x88>
c00234c8:	39 d8                	cmp    eax,ebx
c00234ca:	72 04                	jb     c00234d0 <__umoddi3+0x74>
c00234cc:	39 f7                	cmp    edi,esi
c00234ce:	77 08                	ja     c00234d8 <__umoddi3+0x7c>
c00234d0:	89 da                	mov    edx,ebx
c00234d2:	29 fe                	sub    esi,edi
c00234d4:	19 c2                	sbb    edx,eax
c00234d6:	89 f1                	mov    ecx,esi
c00234d8:	89 c8                	mov    eax,ecx
c00234da:	83 c4 1c             	add    esp,0x1c
c00234dd:	5b                   	pop    ebx
c00234de:	5e                   	pop    esi
c00234df:	5f                   	pop    edi
c00234e0:	5d                   	pop    ebp
c00234e1:	c3                   	ret    
c00234e2:	66 90                	xchg   ax,ax
c00234e4:	ba 20 00 00 00       	mov    edx,0x20
c00234e9:	29 ea                	sub    edx,ebp
c00234eb:	89 e9                	mov    ecx,ebp
c00234ed:	d3 e0                	shl    eax,cl
c00234ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00234f3:	89 f8                	mov    eax,edi
c00234f5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00234f9:	88 d1                	mov    cl,dl
c00234fb:	d3 e8                	shr    eax,cl
c00234fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023501:	09 c1                	or     ecx,eax
c0023503:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023507:	89 e9                	mov    ecx,ebp
c0023509:	d3 e7                	shl    edi,cl
c002350b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002350f:	89 d8                	mov    eax,ebx
c0023511:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023515:	88 d1                	mov    cl,dl
c0023517:	d3 e8                	shr    eax,cl
c0023519:	89 c7                	mov    edi,eax
c002351b:	89 e9                	mov    ecx,ebp
c002351d:	d3 e3                	shl    ebx,cl
c002351f:	89 f0                	mov    eax,esi
c0023521:	88 d1                	mov    cl,dl
c0023523:	d3 e8                	shr    eax,cl
c0023525:	09 d8                	or     eax,ebx
c0023527:	89 e9                	mov    ecx,ebp
c0023529:	d3 e6                	shl    esi,cl
c002352b:	89 f3                	mov    ebx,esi
c002352d:	89 fa                	mov    edx,edi
c002352f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0023533:	89 d1                	mov    ecx,edx
c0023535:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023539:	89 c6                	mov    esi,eax
c002353b:	89 d7                	mov    edi,edx
c002353d:	39 d1                	cmp    ecx,edx
c002353f:	72 27                	jb     c0023568 <__umoddi3+0x10c>
c0023541:	74 21                	je     c0023564 <__umoddi3+0x108>
c0023543:	89 ca                	mov    edx,ecx
c0023545:	29 f3                	sub    ebx,esi
c0023547:	19 fa                	sbb    edx,edi
c0023549:	89 d0                	mov    eax,edx
c002354b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002354f:	d3 e0                	shl    eax,cl
c0023551:	89 e9                	mov    ecx,ebp
c0023553:	d3 eb                	shr    ebx,cl
c0023555:	09 d8                	or     eax,ebx
c0023557:	d3 ea                	shr    edx,cl
c0023559:	83 c4 1c             	add    esp,0x1c
c002355c:	5b                   	pop    ebx
c002355d:	5e                   	pop    esi
c002355e:	5f                   	pop    edi
c002355f:	5d                   	pop    ebp
c0023560:	c3                   	ret    
c0023561:	8d 76 00             	lea    esi,[esi+0x0]
c0023564:	39 c3                	cmp    ebx,eax
c0023566:	73 db                	jae    c0023543 <__umoddi3+0xe7>
c0023568:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002356c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0023570:	89 d7                	mov    edi,edx
c0023572:	89 c6                	mov    esi,eax
c0023574:	eb cd                	jmp    c0023543 <__umoddi3+0xe7>

c0023576 <__addsf3>:
c0023576:	55                   	push   ebp
c0023577:	89 e5                	mov    ebp,esp
c0023579:	57                   	push   edi
c002357a:	56                   	push   esi
c002357b:	53                   	push   ebx
c002357c:	83 ec 08             	sub    esp,0x8
c002357f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0023582:	89 fa                	mov    edx,edi
c0023584:	89 f8                	mov    eax,edi
c0023586:	c1 f8 17             	sar    eax,0x17
c0023589:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002358c:	c1 e2 08             	shl    edx,0x8
c002358f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0023595:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0023598:	89 de                	mov    esi,ebx
c002359a:	c1 fe 17             	sar    esi,0x17
c002359d:	c1 e3 08             	shl    ebx,0x8
c00235a0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00235a6:	31 f0                	xor    eax,esi
c00235a8:	0f 88 3b 01 00 00    	js     c00236e9 <__addsf3+0x173>
c00235ae:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00235b1:	29 f1                	sub    ecx,esi
c00235b3:	85 c9                	test   ecx,ecx
c00235b5:	7e 54                	jle    c002360b <__addsf3+0x95>
c00235b7:	89 f0                	mov    eax,esi
c00235b9:	84 c0                	test   al,al
c00235bb:	75 10                	jne    c00235cd <__addsf3+0x57>
c00235bd:	85 db                	test   ebx,ebx
c00235bf:	0f 84 aa 02 00 00    	je     c002386f <__addsf3+0x2f9>
c00235c5:	49                   	dec    ecx
c00235c6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00235c9:	74 38                	je     c0023603 <__addsf3+0x8d>
c00235cb:	eb 13                	jmp    c00235e0 <__addsf3+0x6a>
c00235cd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00235d0:	f7 d0                	not    eax
c00235d2:	84 c0                	test   al,al
c00235d4:	0f 84 95 02 00 00    	je     c002386f <__addsf3+0x2f9>
c00235da:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00235e0:	83 f9 1f             	cmp    ecx,0x1f
c00235e3:	0f 8f 86 02 00 00    	jg     c002386f <__addsf3+0x2f9>
c00235e9:	89 de                	mov    esi,ebx
c00235eb:	d3 ee                	shr    esi,cl
c00235ed:	b8 20 00 00 00       	mov    eax,0x20
c00235f2:	29 c8                	sub    eax,ecx
c00235f4:	89 c1                	mov    ecx,eax
c00235f6:	d3 e3                	shl    ebx,cl
c00235f8:	31 c0                	xor    eax,eax
c00235fa:	85 db                	test   ebx,ebx
c00235fc:	0f 95 c0             	setne  al
c00235ff:	09 f0                	or     eax,esi
c0023601:	01 d0                	add    eax,edx
c0023603:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023606:	e9 b6 00 00 00       	jmp    c00236c1 <__addsf3+0x14b>
c002360b:	74 5c                	je     c0023669 <__addsf3+0xf3>
c002360d:	89 f1                	mov    ecx,esi
c002360f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0023612:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023615:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0023619:	75 14                	jne    c002362f <__addsf3+0xb9>
c002361b:	85 d2                	test   edx,edx
c002361d:	0f 84 4c 02 00 00    	je     c002386f <__addsf3+0x2f9>
c0023623:	49                   	dec    ecx
c0023624:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0023627:	0f 84 94 00 00 00    	je     c00236c1 <__addsf3+0x14b>
c002362d:	eb 12                	jmp    c0023641 <__addsf3+0xcb>
c002362f:	89 f0                	mov    eax,esi
c0023631:	f7 d0                	not    eax
c0023633:	84 c0                	test   al,al
c0023635:	0f 84 34 02 00 00    	je     c002386f <__addsf3+0x2f9>
c002363b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023641:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023644:	83 f9 1f             	cmp    ecx,0x1f
c0023647:	0f 8f 22 02 00 00    	jg     c002386f <__addsf3+0x2f9>
c002364d:	89 d7                	mov    edi,edx
c002364f:	d3 ef                	shr    edi,cl
c0023651:	b8 20 00 00 00       	mov    eax,0x20
c0023656:	29 c8                	sub    eax,ecx
c0023658:	89 c1                	mov    ecx,eax
c002365a:	d3 e2                	shl    edx,cl
c002365c:	31 c0                	xor    eax,eax
c002365e:	85 d2                	test   edx,edx
c0023660:	0f 95 c0             	setne  al
c0023663:	09 f8                	or     eax,edi
c0023665:	01 d8                	add    eax,ebx
c0023667:	eb 58                	jmp    c00236c1 <__addsf3+0x14b>
c0023669:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002366c:	8d 70 01             	lea    esi,[eax+0x1]
c002366f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0023675:	75 32                	jne    c00236a9 <__addsf3+0x133>
c0023677:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c002367b:	75 1f                	jne    c002369c <__addsf3+0x126>
c002367d:	85 d2                	test   edx,edx
c002367f:	0f 84 e0 01 00 00    	je     c0023865 <__addsf3+0x2ef>
c0023685:	85 db                	test   ebx,ebx
c0023687:	0f 84 e2 01 00 00    	je     c002386f <__addsf3+0x2f9>
c002368d:	89 d0                	mov    eax,edx
c002368f:	01 d8                	add    eax,ebx
c0023691:	0f 89 a9 01 00 00    	jns    c0023840 <__addsf3+0x2ca>
c0023697:	e9 9d 01 00 00       	jmp    c0023839 <__addsf3+0x2c3>
c002369c:	85 d2                	test   edx,edx
c002369e:	0f 85 cb 01 00 00    	jne    c002386f <__addsf3+0x2f9>
c00236a4:	e9 bc 01 00 00       	jmp    c0023865 <__addsf3+0x2ef>
c00236a9:	31 c0                	xor    eax,eax
c00236ab:	89 f1                	mov    ecx,esi
c00236ad:	f7 d1                	not    ecx
c00236af:	84 c9                	test   cl,cl
c00236b1:	0f 84 90 01 00 00    	je     c0023847 <__addsf3+0x2d1>
c00236b7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00236ba:	d1 e8                	shr    eax,1
c00236bc:	e9 86 01 00 00       	jmp    c0023847 <__addsf3+0x2d1>
c00236c1:	85 c0                	test   eax,eax
c00236c3:	0f 89 7e 01 00 00    	jns    c0023847 <__addsf3+0x2d1>
c00236c9:	46                   	inc    esi
c00236ca:	89 f2                	mov    edx,esi
c00236cc:	f7 d2                	not    edx
c00236ce:	84 d2                	test   dl,dl
c00236d0:	0f 84 6f 01 00 00    	je     c0023845 <__addsf3+0x2cf>
c00236d6:	89 c2                	mov    edx,eax
c00236d8:	83 e2 01             	and    edx,0x1
c00236db:	d1 e8                	shr    eax,1
c00236dd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00236e2:	09 d0                	or     eax,edx
c00236e4:	e9 5e 01 00 00       	jmp    c0023847 <__addsf3+0x2d1>
c00236e9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00236ed:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00236f0:	89 f0                	mov    eax,esi
c00236f2:	0f b6 c0             	movzx  eax,al
c00236f5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00236f8:	29 c1                	sub    ecx,eax
c00236fa:	85 c9                	test   ecx,ecx
c00236fc:	7e 55                	jle    c0023753 <__addsf3+0x1dd>
c00236fe:	85 c0                	test   eax,eax
c0023700:	75 11                	jne    c0023713 <__addsf3+0x19d>
c0023702:	85 db                	test   ebx,ebx
c0023704:	0f 84 65 01 00 00    	je     c002386f <__addsf3+0x2f9>
c002370a:	49                   	dec    ecx
c002370b:	75 19                	jne    c0023726 <__addsf3+0x1b0>
c002370d:	89 d0                	mov    eax,edx
c002370f:	29 d8                	sub    eax,ebx
c0023711:	eb 38                	jmp    c002374b <__addsf3+0x1d5>
c0023713:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023716:	f7 d0                	not    eax
c0023718:	84 c0                	test   al,al
c002371a:	0f 84 4f 01 00 00    	je     c002386f <__addsf3+0x2f9>
c0023720:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0023726:	83 f9 1f             	cmp    ecx,0x1f
c0023729:	0f 8f 40 01 00 00    	jg     c002386f <__addsf3+0x2f9>
c002372f:	89 de                	mov    esi,ebx
c0023731:	d3 ee                	shr    esi,cl
c0023733:	b8 20 00 00 00       	mov    eax,0x20
c0023738:	29 c8                	sub    eax,ecx
c002373a:	89 c1                	mov    ecx,eax
c002373c:	d3 e3                	shl    ebx,cl
c002373e:	31 c0                	xor    eax,eax
c0023740:	85 db                	test   ebx,ebx
c0023742:	0f 95 c0             	setne  al
c0023745:	09 f0                	or     eax,esi
c0023747:	29 c2                	sub    edx,eax
c0023749:	89 d0                	mov    eax,edx
c002374b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002374e:	e9 af 00 00 00       	jmp    c0023802 <__addsf3+0x28c>
c0023753:	74 5c                	je     c00237b1 <__addsf3+0x23b>
c0023755:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0023758:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002375b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002375f:	75 14                	jne    c0023775 <__addsf3+0x1ff>
c0023761:	85 d2                	test   edx,edx
c0023763:	0f 84 06 01 00 00    	je     c002386f <__addsf3+0x2f9>
c0023769:	48                   	dec    eax
c002376a:	75 1b                	jne    c0023787 <__addsf3+0x211>
c002376c:	89 d8                	mov    eax,ebx
c002376e:	29 d0                	sub    eax,edx
c0023770:	e9 8d 00 00 00       	jmp    c0023802 <__addsf3+0x28c>
c0023775:	89 f1                	mov    ecx,esi
c0023777:	f7 d1                	not    ecx
c0023779:	84 c9                	test   cl,cl
c002377b:	0f 84 ee 00 00 00    	je     c002386f <__addsf3+0x2f9>
c0023781:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023787:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002378a:	83 f8 1f             	cmp    eax,0x1f
c002378d:	0f 8f dc 00 00 00    	jg     c002386f <__addsf3+0x2f9>
c0023793:	89 d7                	mov    edi,edx
c0023795:	88 c1                	mov    cl,al
c0023797:	d3 ef                	shr    edi,cl
c0023799:	b9 20 00 00 00       	mov    ecx,0x20
c002379e:	29 c1                	sub    ecx,eax
c00237a0:	d3 e2                	shl    edx,cl
c00237a2:	31 c0                	xor    eax,eax
c00237a4:	85 d2                	test   edx,edx
c00237a6:	0f 95 c0             	setne  al
c00237a9:	09 f8                	or     eax,edi
c00237ab:	29 c3                	sub    ebx,eax
c00237ad:	89 d8                	mov    eax,ebx
c00237af:	eb 51                	jmp    c0023802 <__addsf3+0x28c>
c00237b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00237b4:	40                   	inc    eax
c00237b5:	a8 fe                	test   al,0xfe
c00237b7:	75 3d                	jne    c00237f6 <__addsf3+0x280>
c00237b9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00237bd:	0f 85 a7 00 00 00    	jne    c002386a <__addsf3+0x2f4>
c00237c3:	85 d2                	test   edx,edx
c00237c5:	75 12                	jne    c00237d9 <__addsf3+0x263>
c00237c7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00237ca:	85 db                	test   ebx,ebx
c00237cc:	0f 85 9d 00 00 00    	jne    c002386f <__addsf3+0x2f9>
c00237d2:	31 ff                	xor    edi,edi
c00237d4:	e9 96 00 00 00       	jmp    c002386f <__addsf3+0x2f9>
c00237d9:	85 db                	test   ebx,ebx
c00237db:	0f 84 8e 00 00 00    	je     c002386f <__addsf3+0x2f9>
c00237e1:	89 d0                	mov    eax,edx
c00237e3:	29 d8                	sub    eax,ebx
c00237e5:	79 06                	jns    c00237ed <__addsf3+0x277>
c00237e7:	89 d8                	mov    eax,ebx
c00237e9:	29 d0                	sub    eax,edx
c00237eb:	eb 5a                	jmp    c0023847 <__addsf3+0x2d1>
c00237ed:	bf 00 00 00 00       	mov    edi,0x0
c00237f2:	74 7b                	je     c002386f <__addsf3+0x2f9>
c00237f4:	eb 4a                	jmp    c0023840 <__addsf3+0x2ca>
c00237f6:	89 d0                	mov    eax,edx
c00237f8:	29 d8                	sub    eax,ebx
c00237fa:	79 12                	jns    c002380e <__addsf3+0x298>
c00237fc:	89 d8                	mov    eax,ebx
c00237fe:	29 d0                	sub    eax,edx
c0023800:	eb 09                	jmp    c002380b <__addsf3+0x295>
c0023802:	85 c0                	test   eax,eax
c0023804:	79 41                	jns    c0023847 <__addsf3+0x2d1>
c0023806:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002380b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c002380e:	31 f6                	xor    esi,esi
c0023810:	85 c0                	test   eax,eax
c0023812:	74 33                	je     c0023847 <__addsf3+0x2d1>
c0023814:	0f bd c8             	bsr    ecx,eax
c0023817:	83 f1 1f             	xor    ecx,0x1f
c002381a:	d3 e0                	shl    eax,cl
c002381c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0023820:	39 ca                	cmp    edx,ecx
c0023822:	7f 10                	jg     c0023834 <__addsf3+0x2be>
c0023824:	29 d1                	sub    ecx,edx
c0023826:	41                   	inc    ecx
c0023827:	d3 e8                	shr    eax,cl
c0023829:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002382c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0023832:	eb 13                	jmp    c0023847 <__addsf3+0x2d1>
c0023834:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023837:	29 ce                	sub    esi,ecx
c0023839:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002383e:	eb 07                	jmp    c0023847 <__addsf3+0x2d1>
c0023840:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023843:	eb 02                	jmp    c0023847 <__addsf3+0x2d1>
c0023845:	31 c0                	xor    eax,eax
c0023847:	89 c2                	mov    edx,eax
c0023849:	c1 ea 08             	shr    edx,0x8
c002384c:	a8 7f                	test   al,0x7f
c002384e:	0f 95 c1             	setne  cl
c0023851:	09 d1                	or     ecx,edx
c0023853:	83 e1 01             	and    ecx,0x1
c0023856:	c1 e8 07             	shr    eax,0x7
c0023859:	21 c8                	and    eax,ecx
c002385b:	c1 e6 17             	shl    esi,0x17
c002385e:	09 d6                	or     esi,edx
c0023860:	8d 3c 30             	lea    edi,[eax+esi*1]
c0023863:	eb 0a                	jmp    c002386f <__addsf3+0x2f9>
c0023865:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023868:	eb 05                	jmp    c002386f <__addsf3+0x2f9>
c002386a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c002386f:	89 f8                	mov    eax,edi
c0023871:	5a                   	pop    edx
c0023872:	59                   	pop    ecx
c0023873:	5b                   	pop    ebx
c0023874:	5e                   	pop    esi
c0023875:	5f                   	pop    edi
c0023876:	5d                   	pop    ebp
c0023877:	c3                   	ret    

c0023878 <__subsf3>:
c0023878:	55                   	push   ebp
c0023879:	89 e5                	mov    ebp,esp
c002387b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002387e:	05 00 00 00 80       	add    eax,0x80000000
c0023883:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0023886:	5d                   	pop    ebp
c0023887:	e9 ea fc ff ff       	jmp    c0023576 <__addsf3>

c002388c <__negsf2>:
c002388c:	55                   	push   ebp
c002388d:	89 e5                	mov    ebp,esp
c002388f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023892:	05 00 00 00 80       	add    eax,0x80000000
c0023897:	5d                   	pop    ebp
c0023898:	c3                   	ret    

c0023899 <__mulsf3>:
c0023899:	55                   	push   ebp
c002389a:	89 e5                	mov    ebp,esp
c002389c:	57                   	push   edi
c002389d:	56                   	push   esi
c002389e:	53                   	push   ebx
c002389f:	83 ec 1c             	sub    esp,0x1c
c00238a2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00238a5:	89 f0                	mov    eax,esi
c00238a7:	89 f1                	mov    ecx,esi
c00238a9:	c1 f9 17             	sar    ecx,0x17
c00238ac:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00238af:	c1 e0 08             	shl    eax,0x8
c00238b2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00238b7:	89 c1                	mov    ecx,eax
c00238b9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00238bc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00238bf:	89 c7                	mov    edi,eax
c00238c1:	c1 ff 17             	sar    edi,0x17
c00238c4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00238c8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00238cb:	89 f8                	mov    eax,edi
c00238cd:	0f b6 c0             	movzx  eax,al
c00238d0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00238d3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c00238d7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00238da:	42                   	inc    edx
c00238db:	80 e2 fe             	and    dl,0xfe
c00238de:	75 7b                	jne    c002395b <__mulsf3+0xc2>
c00238e0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00238e4:	74 54                	je     c002393a <__mulsf3+0xa1>
c00238e6:	85 c9                	test   ecx,ecx
c00238e8:	0f 85 64 01 00 00    	jne    c0023a52 <__mulsf3+0x1b9>
c00238ee:	8d 57 01             	lea    edx,[edi+0x1]
c00238f1:	80 e2 fe             	and    dl,0xfe
c00238f4:	75 1f                	jne    c0023915 <__mulsf3+0x7c>
c00238f6:	85 c0                	test   eax,eax
c00238f8:	b8 00 00 00 00       	mov    eax,0x0
c00238fd:	74 29                	je     c0023928 <__mulsf3+0x8f>
c00238ff:	53                   	push   ebx
c0023900:	53                   	push   ebx
c0023901:	50                   	push   eax
c0023902:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023905:	e8 96 05 00 00       	call   c0023ea0 <__nesf2>
c002390a:	83 c4 10             	add    esp,0x10
c002390d:	85 c0                	test   eax,eax
c002390f:	0f 85 3a 01 00 00    	jne    c0023a4f <__mulsf3+0x1b6>
c0023915:	85 ff                	test   edi,edi
c0023917:	0f 89 35 01 00 00    	jns    c0023a52 <__mulsf3+0x1b9>
c002391d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0023923:	e9 2a 01 00 00       	jmp    c0023a52 <__mulsf3+0x1b9>
c0023928:	51                   	push   ecx
c0023929:	51                   	push   ecx
c002392a:	50                   	push   eax
c002392b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002392e:	e8 6d 05 00 00       	call   c0023ea0 <__nesf2>
c0023933:	83 c4 10             	add    esp,0x10
c0023936:	85 c0                	test   eax,eax
c0023938:	eb 15                	jmp    c002394f <__mulsf3+0xb6>
c002393a:	85 c9                	test   ecx,ecx
c002393c:	74 0b                	je     c0023949 <__mulsf3+0xb0>
c002393e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0023941:	01 c9                	add    ecx,ecx
c0023943:	78 16                	js     c002395b <__mulsf3+0xc2>
c0023945:	89 d3                	mov    ebx,edx
c0023947:	eb f5                	jmp    c002393e <__mulsf3+0xa5>
c0023949:	89 f8                	mov    eax,edi
c002394b:	f7 d0                	not    eax
c002394d:	84 c0                	test   al,al
c002394f:	75 c4                	jne    c0023915 <__mulsf3+0x7c>
c0023951:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0023956:	e9 f7 00 00 00       	jmp    c0023a52 <__mulsf3+0x1b9>
c002395b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002395e:	c1 e6 08             	shl    esi,0x8
c0023961:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0023967:	8d 57 01             	lea    edx,[edi+0x1]
c002396a:	80 e2 fe             	and    dl,0xfe
c002396d:	75 63                	jne    c00239d2 <__mulsf3+0x139>
c002396f:	85 c0                	test   eax,eax
c0023971:	74 2f                	je     c00239a2 <__mulsf3+0x109>
c0023973:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0023977:	0f 89 d2 00 00 00    	jns    c0023a4f <__mulsf3+0x1b6>
c002397d:	52                   	push   edx
c002397e:	52                   	push   edx
c002397f:	6a 00                	push   0x0
c0023981:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023984:	e8 dc 04 00 00       	call   c0023e65 <__eqsf2>
c0023989:	83 c4 10             	add    esp,0x10
c002398c:	85 c0                	test   eax,eax
c002398e:	0f 85 bb 00 00 00    	jne    c0023a4f <__mulsf3+0x1b6>
c0023994:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023997:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c002399d:	e9 b0 00 00 00       	jmp    c0023a52 <__mulsf3+0x1b9>
c00239a2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00239a5:	50                   	push   eax
c00239a6:	50                   	push   eax
c00239a7:	6a 00                	push   0x0
c00239a9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00239ac:	e8 b4 04 00 00       	call   c0023e65 <__eqsf2>
c00239b1:	83 c4 10             	add    esp,0x10
c00239b4:	85 c0                	test   eax,eax
c00239b6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00239b9:	75 0c                	jne    c00239c7 <__mulsf3+0x12e>
c00239bb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00239bf:	0f 89 8a 00 00 00    	jns    c0023a4f <__mulsf3+0x1b6>
c00239c5:	eb cd                	jmp    c0023994 <__mulsf3+0xfb>
c00239c7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00239ca:	01 f6                	add    esi,esi
c00239cc:	78 04                	js     c00239d2 <__mulsf3+0x139>
c00239ce:	89 c3                	mov    ebx,eax
c00239d0:	eb f5                	jmp    c00239c7 <__mulsf3+0x12e>
c00239d2:	89 c8                	mov    eax,ecx
c00239d4:	0d 00 00 00 80       	or     eax,0x80000000
c00239d9:	81 ce 00 00 00 80    	or     esi,0x80000000
c00239df:	f7 e6                	mul    esi
c00239e1:	85 c0                	test   eax,eax
c00239e3:	0f 95 c0             	setne  al
c00239e6:	0f b6 c0             	movzx  eax,al
c00239e9:	09 c2                	or     edx,eax
c00239eb:	78 03                	js     c00239f0 <__mulsf3+0x157>
c00239ed:	01 d2                	add    edx,edx
c00239ef:	4b                   	dec    ebx
c00239f0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c00239f6:	7f 22                	jg     c0023a1a <__mulsf3+0x181>
c00239f8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00239fe:	85 db                	test   ebx,ebx
c0023a00:	7f 23                	jg     c0023a25 <__mulsf3+0x18c>
c0023a02:	83 fb e9             	cmp    ebx,0xffffffe9
c0023a05:	7c 1a                	jl     c0023a21 <__mulsf3+0x188>
c0023a07:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023a0d:	b9 01 00 00 00       	mov    ecx,0x1
c0023a12:	29 d9                	sub    ecx,ebx
c0023a14:	d3 ea                	shr    edx,cl
c0023a16:	31 db                	xor    ebx,ebx
c0023a18:	eb 0b                	jmp    c0023a25 <__mulsf3+0x18c>
c0023a1a:	bb ff 00 00 00       	mov    ebx,0xff
c0023a1f:	eb 02                	jmp    c0023a23 <__mulsf3+0x18a>
c0023a21:	31 db                	xor    ebx,ebx
c0023a23:	31 d2                	xor    edx,edx
c0023a25:	89 d0                	mov    eax,edx
c0023a27:	c1 e8 08             	shr    eax,0x8
c0023a2a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0023a2d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0023a33:	09 fb                	or     ebx,edi
c0023a35:	c1 e3 17             	shl    ebx,0x17
c0023a38:	09 c3                	or     ebx,eax
c0023a3a:	f6 c2 7f             	test   dl,0x7f
c0023a3d:	0f 95 c1             	setne  cl
c0023a40:	09 c8                	or     eax,ecx
c0023a42:	83 e0 01             	and    eax,0x1
c0023a45:	c1 ea 07             	shr    edx,0x7
c0023a48:	21 c2                	and    edx,eax
c0023a4a:	8d 34 13             	lea    esi,[ebx+edx*1]
c0023a4d:	eb 03                	jmp    c0023a52 <__mulsf3+0x1b9>
c0023a4f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0023a52:	89 f0                	mov    eax,esi
c0023a54:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023a57:	5b                   	pop    ebx
c0023a58:	5e                   	pop    esi
c0023a59:	5f                   	pop    edi
c0023a5a:	5d                   	pop    ebp
c0023a5b:	c3                   	ret    

c0023a5c <__divsf3>:
c0023a5c:	55                   	push   ebp
c0023a5d:	89 e5                	mov    ebp,esp
c0023a5f:	57                   	push   edi
c0023a60:	56                   	push   esi
c0023a61:	53                   	push   ebx
c0023a62:	83 ec 1c             	sub    esp,0x1c
c0023a65:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0023a68:	89 d8                	mov    eax,ebx
c0023a6a:	89 d9                	mov    ecx,ebx
c0023a6c:	c1 f9 17             	sar    ecx,0x17
c0023a6f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0023a72:	c1 e0 08             	shl    eax,0x8
c0023a75:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023a7a:	89 c1                	mov    ecx,eax
c0023a7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023a7f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0023a82:	89 c7                	mov    edi,eax
c0023a84:	c1 ff 17             	sar    edi,0x17
c0023a87:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0023a8b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0023a8e:	89 f8                	mov    eax,edi
c0023a90:	0f b6 c0             	movzx  eax,al
c0023a93:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0023a96:	29 c6                	sub    esi,eax
c0023a98:	83 c6 7f             	add    esi,0x7f
c0023a9b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0023a9e:	42                   	inc    edx
c0023a9f:	80 e2 fe             	and    dl,0xfe
c0023aa2:	0f 85 9c 00 00 00    	jne    c0023b44 <__divsf3+0xe8>
c0023aa8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0023aac:	74 33                	je     c0023ae1 <__divsf3+0x85>
c0023aae:	85 c9                	test   ecx,ecx
c0023ab0:	0f 85 c7 01 00 00    	jne    c0023c7d <__divsf3+0x221>
c0023ab6:	8d 57 01             	lea    edx,[edi+0x1]
c0023ab9:	80 e2 fe             	and    dl,0xfe
c0023abc:	75 2f                	jne    c0023aed <__divsf3+0x91>
c0023abe:	85 c0                	test   eax,eax
c0023ac0:	74 2b                	je     c0023aed <__divsf3+0x91>
c0023ac2:	51                   	push   ecx
c0023ac3:	51                   	push   ecx
c0023ac4:	6a 00                	push   0x0
c0023ac6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023ac9:	e8 d2 03 00 00       	call   c0023ea0 <__nesf2>
c0023ace:	83 c4 10             	add    esp,0x10
c0023ad1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0023ad4:	85 c0                	test   eax,eax
c0023ad6:	0f 85 a1 01 00 00    	jne    c0023c7d <__divsf3+0x221>
c0023adc:	e9 92 01 00 00       	jmp    c0023c73 <__divsf3+0x217>
c0023ae1:	85 c9                	test   ecx,ecx
c0023ae3:	75 1b                	jne    c0023b00 <__divsf3+0xa4>
c0023ae5:	8d 57 01             	lea    edx,[edi+0x1]
c0023ae8:	80 e2 fe             	and    dl,0xfe
c0023aeb:	74 1e                	je     c0023b0b <__divsf3+0xaf>
c0023aed:	85 ff                	test   edi,edi
c0023aef:	0f 89 88 01 00 00    	jns    c0023c7d <__divsf3+0x221>
c0023af5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0023afb:	e9 7d 01 00 00       	jmp    c0023c7d <__divsf3+0x221>
c0023b00:	8d 56 ff             	lea    edx,[esi-0x1]
c0023b03:	01 c9                	add    ecx,ecx
c0023b05:	78 3d                	js     c0023b44 <__divsf3+0xe8>
c0023b07:	89 d6                	mov    esi,edx
c0023b09:	eb f5                	jmp    c0023b00 <__divsf3+0xa4>
c0023b0b:	85 c0                	test   eax,eax
c0023b0d:	b8 00 00 00 00       	mov    eax,0x0
c0023b12:	74 18                	je     c0023b2c <__divsf3+0xd0>
c0023b14:	52                   	push   edx
c0023b15:	52                   	push   edx
c0023b16:	50                   	push   eax
c0023b17:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023b1a:	e8 81 03 00 00       	call   c0023ea0 <__nesf2>
c0023b1f:	83 c4 10             	add    esp,0x10
c0023b22:	85 c0                	test   eax,eax
c0023b24:	0f 85 50 01 00 00    	jne    c0023c7a <__divsf3+0x21e>
c0023b2a:	eb c1                	jmp    c0023aed <__divsf3+0x91>
c0023b2c:	56                   	push   esi
c0023b2d:	56                   	push   esi
c0023b2e:	50                   	push   eax
c0023b2f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023b32:	e8 69 03 00 00       	call   c0023ea0 <__nesf2>
c0023b37:	83 c4 10             	add    esp,0x10
c0023b3a:	85 c0                	test   eax,eax
c0023b3c:	0f 84 31 01 00 00    	je     c0023c73 <__divsf3+0x217>
c0023b42:	eb a9                	jmp    c0023aed <__divsf3+0x91>
c0023b44:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0023b47:	c1 e3 08             	shl    ebx,0x8
c0023b4a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0023b50:	8d 57 01             	lea    edx,[edi+0x1]
c0023b53:	80 e2 fe             	and    dl,0xfe
c0023b56:	75 71                	jne    c0023bc9 <__divsf3+0x16d>
c0023b58:	85 c0                	test   eax,eax
c0023b5a:	ba 00 00 00 00       	mov    edx,0x0
c0023b5f:	74 2f                	je     c0023b90 <__divsf3+0x134>
c0023b61:	51                   	push   ecx
c0023b62:	51                   	push   ecx
c0023b63:	52                   	push   edx
c0023b64:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023b67:	e8 f9 02 00 00       	call   c0023e65 <__eqsf2>
c0023b6c:	83 c4 10             	add    esp,0x10
c0023b6f:	85 c0                	test   eax,eax
c0023b71:	0f 85 03 01 00 00    	jne    c0023c7a <__divsf3+0x21e>
c0023b77:	31 d2                	xor    edx,edx
c0023b79:	89 d3                	mov    ebx,edx
c0023b7b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0023b7e:	31 f8                	xor    eax,edi
c0023b80:	0f 89 f7 00 00 00    	jns    c0023c7d <__divsf3+0x221>
c0023b86:	bb 00 00 00 80       	mov    ebx,0x80000000
c0023b8b:	e9 ed 00 00 00       	jmp    c0023c7d <__divsf3+0x221>
c0023b90:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0023b93:	50                   	push   eax
c0023b94:	50                   	push   eax
c0023b95:	52                   	push   edx
c0023b96:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023b99:	e8 c7 02 00 00       	call   c0023e65 <__eqsf2>
c0023b9e:	83 c4 10             	add    esp,0x10
c0023ba1:	85 c0                	test   eax,eax
c0023ba3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0023ba6:	75 16                	jne    c0023bbe <__divsf3+0x162>
c0023ba8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0023bab:	31 fb                	xor    ebx,edi
c0023bad:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0023bb3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0023bb9:	e9 bf 00 00 00       	jmp    c0023c7d <__divsf3+0x221>
c0023bbe:	8d 46 01             	lea    eax,[esi+0x1]
c0023bc1:	01 db                	add    ebx,ebx
c0023bc3:	78 04                	js     c0023bc9 <__divsf3+0x16d>
c0023bc5:	89 c6                	mov    esi,eax
c0023bc7:	eb f5                	jmp    c0023bbe <__divsf3+0x162>
c0023bc9:	89 c8                	mov    eax,ecx
c0023bcb:	0d 00 00 00 80       	or     eax,0x80000000
c0023bd0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0023bd6:	31 d2                	xor    edx,edx
c0023bd8:	39 d8                	cmp    eax,ebx
c0023bda:	72 07                	jb     c0023be3 <__divsf3+0x187>
c0023bdc:	29 d8                	sub    eax,ebx
c0023bde:	ba 01 00 00 00       	mov    edx,0x1
c0023be3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0023bea:	01 d2                	add    edx,edx
c0023bec:	89 c1                	mov    ecx,eax
c0023bee:	01 c0                	add    eax,eax
c0023bf0:	85 c9                	test   ecx,ecx
c0023bf2:	78 04                	js     c0023bf8 <__divsf3+0x19c>
c0023bf4:	39 c3                	cmp    ebx,eax
c0023bf6:	77 05                	ja     c0023bfd <__divsf3+0x1a1>
c0023bf8:	29 d8                	sub    eax,ebx
c0023bfa:	83 ca 01             	or     edx,0x1
c0023bfd:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0023c00:	75 e8                	jne    c0023bea <__divsf3+0x18e>
c0023c02:	85 c0                	test   eax,eax
c0023c04:	0f 95 c0             	setne  al
c0023c07:	0f b6 c0             	movzx  eax,al
c0023c0a:	c1 e2 06             	shl    edx,0x6
c0023c0d:	09 c2                	or     edx,eax
c0023c0f:	78 03                	js     c0023c14 <__divsf3+0x1b8>
c0023c11:	01 d2                	add    edx,edx
c0023c13:	4e                   	dec    esi
c0023c14:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0023c1a:	7f 22                	jg     c0023c3e <__divsf3+0x1e2>
c0023c1c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0023c22:	85 f6                	test   esi,esi
c0023c24:	7f 23                	jg     c0023c49 <__divsf3+0x1ed>
c0023c26:	83 fe e9             	cmp    esi,0xffffffe9
c0023c29:	7c 1a                	jl     c0023c45 <__divsf3+0x1e9>
c0023c2b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023c31:	b9 01 00 00 00       	mov    ecx,0x1
c0023c36:	29 f1                	sub    ecx,esi
c0023c38:	d3 ea                	shr    edx,cl
c0023c3a:	31 f6                	xor    esi,esi
c0023c3c:	eb 0b                	jmp    c0023c49 <__divsf3+0x1ed>
c0023c3e:	be ff 00 00 00       	mov    esi,0xff
c0023c43:	eb 02                	jmp    c0023c47 <__divsf3+0x1eb>
c0023c45:	31 f6                	xor    esi,esi
c0023c47:	31 d2                	xor    edx,edx
c0023c49:	89 d0                	mov    eax,edx
c0023c4b:	c1 e8 08             	shr    eax,0x8
c0023c4e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0023c51:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0023c57:	09 fe                	or     esi,edi
c0023c59:	c1 e6 17             	shl    esi,0x17
c0023c5c:	09 c6                	or     esi,eax
c0023c5e:	f6 c2 7f             	test   dl,0x7f
c0023c61:	0f 95 c1             	setne  cl
c0023c64:	09 c8                	or     eax,ecx
c0023c66:	83 e0 01             	and    eax,0x1
c0023c69:	c1 ea 07             	shr    edx,0x7
c0023c6c:	21 c2                	and    edx,eax
c0023c6e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0023c71:	eb 0a                	jmp    c0023c7d <__divsf3+0x221>
c0023c73:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0023c78:	eb 03                	jmp    c0023c7d <__divsf3+0x221>
c0023c7a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0023c7d:	89 d8                	mov    eax,ebx
c0023c7f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023c82:	5b                   	pop    ebx
c0023c83:	5e                   	pop    esi
c0023c84:	5f                   	pop    edi
c0023c85:	5d                   	pop    ebp
c0023c86:	c3                   	ret    

c0023c87 <__floatsisf>:
c0023c87:	55                   	push   ebp
c0023c88:	89 e5                	mov    ebp,esp
c0023c8a:	53                   	push   ebx
c0023c8b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023c8e:	85 d2                	test   edx,edx
c0023c90:	7e 2b                	jle    c0023cbd <__floatsisf+0x36>
c0023c92:	0f bd ca             	bsr    ecx,edx
c0023c95:	83 f1 1f             	xor    ecx,0x1f
c0023c98:	d3 e2                	shl    edx,cl
c0023c9a:	89 d0                	mov    eax,edx
c0023c9c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023ca1:	89 c3                	mov    ebx,eax
c0023ca3:	c1 eb 08             	shr    ebx,0x8
c0023ca6:	80 e2 7f             	and    dl,0x7f
c0023ca9:	0f 95 c2             	setne  dl
c0023cac:	09 da                	or     edx,ebx
c0023cae:	83 e2 01             	and    edx,0x1
c0023cb1:	c1 e8 07             	shr    eax,0x7
c0023cb4:	21 c2                	and    edx,eax
c0023cb6:	b8 9e 00 00 00       	mov    eax,0x9e
c0023cbb:	eb 32                	jmp    c0023cef <__floatsisf+0x68>
c0023cbd:	b8 00 00 00 00       	mov    eax,0x0
c0023cc2:	74 34                	je     c0023cf8 <__floatsisf+0x71>
c0023cc4:	f7 da                	neg    edx
c0023cc6:	0f bd ca             	bsr    ecx,edx
c0023cc9:	83 f1 1f             	xor    ecx,0x1f
c0023ccc:	d3 e2                	shl    edx,cl
c0023cce:	89 d0                	mov    eax,edx
c0023cd0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023cd5:	89 c3                	mov    ebx,eax
c0023cd7:	c1 eb 08             	shr    ebx,0x8
c0023cda:	80 e2 7f             	and    dl,0x7f
c0023cdd:	0f 95 c2             	setne  dl
c0023ce0:	09 da                	or     edx,ebx
c0023ce2:	83 e2 01             	and    edx,0x1
c0023ce5:	c1 e8 07             	shr    eax,0x7
c0023ce8:	21 c2                	and    edx,eax
c0023cea:	b8 9e 01 00 00       	mov    eax,0x19e
c0023cef:	29 c8                	sub    eax,ecx
c0023cf1:	c1 e0 17             	shl    eax,0x17
c0023cf4:	09 d8                	or     eax,ebx
c0023cf6:	01 d0                	add    eax,edx
c0023cf8:	5b                   	pop    ebx
c0023cf9:	5d                   	pop    ebp
c0023cfa:	c3                   	ret    

c0023cfb <__floatunsisf>:
c0023cfb:	55                   	push   ebp
c0023cfc:	89 e5                	mov    ebp,esp
c0023cfe:	53                   	push   ebx
c0023cff:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023d02:	31 c0                	xor    eax,eax
c0023d04:	85 d2                	test   edx,edx
c0023d06:	74 32                	je     c0023d3a <__floatunsisf+0x3f>
c0023d08:	0f bd ca             	bsr    ecx,edx
c0023d0b:	83 f1 1f             	xor    ecx,0x1f
c0023d0e:	d3 e2                	shl    edx,cl
c0023d10:	89 d0                	mov    eax,edx
c0023d12:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023d17:	89 c3                	mov    ebx,eax
c0023d19:	c1 eb 08             	shr    ebx,0x8
c0023d1c:	80 e2 7f             	and    dl,0x7f
c0023d1f:	0f 95 c2             	setne  dl
c0023d22:	09 da                	or     edx,ebx
c0023d24:	83 e2 01             	and    edx,0x1
c0023d27:	c1 e8 07             	shr    eax,0x7
c0023d2a:	21 c2                	and    edx,eax
c0023d2c:	b8 9e 00 00 00       	mov    eax,0x9e
c0023d31:	29 c8                	sub    eax,ecx
c0023d33:	c1 e0 17             	shl    eax,0x17
c0023d36:	09 d8                	or     eax,ebx
c0023d38:	01 d0                	add    eax,edx
c0023d3a:	5b                   	pop    ebx
c0023d3b:	5d                   	pop    ebp
c0023d3c:	c3                   	ret    

c0023d3d <__fixsfsi>:
c0023d3d:	55                   	push   ebp
c0023d3e:	89 e5                	mov    ebp,esp
c0023d40:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023d43:	89 d1                	mov    ecx,edx
c0023d45:	c1 e1 08             	shl    ecx,0x8
c0023d48:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0023d4e:	c1 fa 17             	sar    edx,0x17
c0023d51:	78 1c                	js     c0023d6f <__fixsfsi+0x32>
c0023d53:	83 ea 7f             	sub    edx,0x7f
c0023d56:	31 c0                	xor    eax,eax
c0023d58:	83 fa 1e             	cmp    edx,0x1e
c0023d5b:	77 40                	ja     c0023d9d <__fixsfsi+0x60>
c0023d5d:	89 c8                	mov    eax,ecx
c0023d5f:	0d 00 00 00 80       	or     eax,0x80000000
c0023d64:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023d69:	29 d1                	sub    ecx,edx
c0023d6b:	d3 e8                	shr    eax,cl
c0023d6d:	eb 2e                	jmp    c0023d9d <__fixsfsi+0x60>
c0023d6f:	31 c0                	xor    eax,eax
c0023d71:	81 c2 81 00 00 00    	add    edx,0x81
c0023d77:	78 24                	js     c0023d9d <__fixsfsi+0x60>
c0023d79:	83 fa 1e             	cmp    edx,0x1e
c0023d7c:	7e 09                	jle    c0023d87 <__fixsfsi+0x4a>
c0023d7e:	83 fa 1f             	cmp    edx,0x1f
c0023d81:	75 18                	jne    c0023d9b <__fixsfsi+0x5e>
c0023d83:	85 c9                	test   ecx,ecx
c0023d85:	75 14                	jne    c0023d9b <__fixsfsi+0x5e>
c0023d87:	89 c8                	mov    eax,ecx
c0023d89:	0d 00 00 00 80       	or     eax,0x80000000
c0023d8e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023d93:	29 d1                	sub    ecx,edx
c0023d95:	d3 e8                	shr    eax,cl
c0023d97:	f7 d8                	neg    eax
c0023d99:	eb 02                	jmp    c0023d9d <__fixsfsi+0x60>
c0023d9b:	31 c0                	xor    eax,eax
c0023d9d:	5d                   	pop    ebp
c0023d9e:	c3                   	ret    

c0023d9f <__fixunssfsi>:
c0023d9f:	55                   	push   ebp
c0023da0:	89 e5                	mov    ebp,esp
c0023da2:	53                   	push   ebx
c0023da3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023da6:	89 d3                	mov    ebx,edx
c0023da8:	c1 fb 17             	sar    ebx,0x17
c0023dab:	83 eb 7f             	sub    ebx,0x7f
c0023dae:	31 c0                	xor    eax,eax
c0023db0:	83 fb 1f             	cmp    ebx,0x1f
c0023db3:	77 18                	ja     c0023dcd <__fixunssfsi+0x2e>
c0023db5:	89 d0                	mov    eax,edx
c0023db7:	c1 e0 08             	shl    eax,0x8
c0023dba:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023dbf:	0d 00 00 00 80       	or     eax,0x80000000
c0023dc4:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023dc9:	29 d9                	sub    ecx,ebx
c0023dcb:	d3 e8                	shr    eax,cl
c0023dcd:	5b                   	pop    ebx
c0023dce:	5d                   	pop    ebp
c0023dcf:	c3                   	ret    

c0023dd0 <__cmpsf2>:
c0023dd0:	55                   	push   ebp
c0023dd1:	89 e5                	mov    ebp,esp
c0023dd3:	57                   	push   edi
c0023dd4:	56                   	push   esi
c0023dd5:	53                   	push   ebx
c0023dd6:	83 ec 24             	sub    esp,0x24
c0023dd9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023ddc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023ddf:	e8 4f 10 00 00       	call   c0024e33 <__truncdfsf2>
c0023de4:	5a                   	pop    edx
c0023de5:	59                   	pop    ecx
c0023de6:	89 c3                	mov    ebx,eax
c0023de8:	c1 e8 17             	shr    eax,0x17
c0023deb:	0f b6 f0             	movzx  esi,al
c0023dee:	89 d8                	mov    eax,ebx
c0023df0:	c1 e8 1f             	shr    eax,0x1f
c0023df3:	31 c6                	xor    esi,eax
c0023df5:	c1 e3 08             	shl    ebx,0x8
c0023df8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0023dfb:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0023dfe:	e8 30 10 00 00       	call   c0024e33 <__truncdfsf2>
c0023e03:	83 c4 10             	add    esp,0x10
c0023e06:	89 c1                	mov    ecx,eax
c0023e08:	c1 e9 17             	shr    ecx,0x17
c0023e0b:	0f b6 c9             	movzx  ecx,cl
c0023e0e:	89 c7                	mov    edi,eax
c0023e10:	c1 ef 1f             	shr    edi,0x1f
c0023e13:	89 ca                	mov    edx,ecx
c0023e15:	31 fa                	xor    edx,edi
c0023e17:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0023e1a:	c1 e0 08             	shl    eax,0x8
c0023e1d:	89 c2                	mov    edx,eax
c0023e1f:	89 d8                	mov    eax,ebx
c0023e21:	09 d0                	or     eax,edx
c0023e23:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023e28:	09 f0                	or     eax,esi
c0023e2a:	75 08                	jne    c0023e34 <__cmpsf2+0x64>
c0023e2c:	31 c0                	xor    eax,eax
c0023e2e:	39 f9                	cmp    ecx,edi
c0023e30:	75 0c                	jne    c0023e3e <__cmpsf2+0x6e>
c0023e32:	eb 29                	jmp    c0023e5d <__cmpsf2+0x8d>
c0023e34:	b8 01 00 00 00       	mov    eax,0x1
c0023e39:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0023e3c:	7f 1f                	jg     c0023e5d <__cmpsf2+0x8d>
c0023e3e:	83 c8 ff             	or     eax,0xffffffff
c0023e41:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0023e44:	7c 17                	jl     c0023e5d <__cmpsf2+0x8d>
c0023e46:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0023e4c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0023e52:	b8 01 00 00 00       	mov    eax,0x1
c0023e57:	39 d3                	cmp    ebx,edx
c0023e59:	77 02                	ja     c0023e5d <__cmpsf2+0x8d>
c0023e5b:	19 c0                	sbb    eax,eax
c0023e5d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023e60:	5b                   	pop    ebx
c0023e61:	5e                   	pop    esi
c0023e62:	5f                   	pop    edi
c0023e63:	5d                   	pop    ebp
c0023e64:	c3                   	ret    

c0023e65 <__eqsf2>:
c0023e65:	55                   	push   ebp
c0023e66:	89 e5                	mov    ebp,esp
c0023e68:	83 ec 24             	sub    esp,0x24
c0023e6b:	6a 01                	push   0x1
c0023e6d:	83 ec 0c             	sub    esp,0xc
c0023e70:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023e73:	e8 df 10 00 00       	call   c0024f57 <__extendsfdf2>
c0023e78:	83 c4 10             	add    esp,0x10
c0023e7b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023e7e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023e81:	52                   	push   edx
c0023e82:	50                   	push   eax
c0023e83:	50                   	push   eax
c0023e84:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023e87:	e8 cb 10 00 00       	call   c0024f57 <__extendsfdf2>
c0023e8c:	59                   	pop    ecx
c0023e8d:	59                   	pop    ecx
c0023e8e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023e91:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023e94:	52                   	push   edx
c0023e95:	50                   	push   eax
c0023e96:	e8 35 ff ff ff       	call   c0023dd0 <__cmpsf2>
c0023e9b:	83 c4 20             	add    esp,0x20
c0023e9e:	c9                   	leave  
c0023e9f:	c3                   	ret    

c0023ea0 <__nesf2>:
c0023ea0:	eb c3                	jmp    c0023e65 <__eqsf2>

c0023ea2 <__gtsf2>:
c0023ea2:	55                   	push   ebp
c0023ea3:	89 e5                	mov    ebp,esp
c0023ea5:	83 ec 24             	sub    esp,0x24
c0023ea8:	6a ff                	push   0xffffffff
c0023eaa:	83 ec 0c             	sub    esp,0xc
c0023ead:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023eb0:	e8 a2 10 00 00       	call   c0024f57 <__extendsfdf2>
c0023eb5:	83 c4 10             	add    esp,0x10
c0023eb8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023ebb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023ebe:	52                   	push   edx
c0023ebf:	50                   	push   eax
c0023ec0:	50                   	push   eax
c0023ec1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023ec4:	e8 8e 10 00 00       	call   c0024f57 <__extendsfdf2>
c0023ec9:	59                   	pop    ecx
c0023eca:	59                   	pop    ecx
c0023ecb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023ece:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023ed1:	52                   	push   edx
c0023ed2:	50                   	push   eax
c0023ed3:	e8 f8 fe ff ff       	call   c0023dd0 <__cmpsf2>
c0023ed8:	83 c4 20             	add    esp,0x20
c0023edb:	c9                   	leave  
c0023edc:	c3                   	ret    

c0023edd <__gesf2>:
c0023edd:	eb c3                	jmp    c0023ea2 <__gtsf2>

c0023edf <__ltsf2>:
c0023edf:	eb 84                	jmp    c0023e65 <__eqsf2>

c0023ee1 <__lesf2>:
c0023ee1:	eb 82                	jmp    c0023e65 <__eqsf2>

c0023ee3 <__adddf3>:
c0023ee3:	55                   	push   ebp
c0023ee4:	89 e5                	mov    ebp,esp
c0023ee6:	57                   	push   edi
c0023ee7:	56                   	push   esi
c0023ee8:	53                   	push   ebx
c0023ee9:	83 ec 24             	sub    esp,0x24
c0023eec:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0023eef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0023ef2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0023ef5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0023ef8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0023efb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0023efe:	89 c8                	mov    eax,ecx
c0023f00:	89 ce                	mov    esi,ecx
c0023f02:	c1 fe 14             	sar    esi,0x14
c0023f05:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0023f08:	89 fb                	mov    ebx,edi
c0023f0a:	89 fa                	mov    edx,edi
c0023f0c:	c1 e2 0b             	shl    edx,0xb
c0023f0f:	c1 e0 0b             	shl    eax,0xb
c0023f12:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0023f17:	c1 eb 15             	shr    ebx,0x15
c0023f1a:	09 d8                	or     eax,ebx
c0023f1c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0023f1f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0023f22:	c1 fe 14             	sar    esi,0x14
c0023f25:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0023f28:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0023f2b:	89 f3                	mov    ebx,esi
c0023f2d:	c1 e3 0b             	shl    ebx,0xb
c0023f30:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0023f33:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0023f36:	c1 e3 0b             	shl    ebx,0xb
c0023f39:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0023f3f:	c1 ee 15             	shr    esi,0x15
c0023f42:	09 f3                	or     ebx,esi
c0023f44:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0023f47:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0023f4a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0023f4d:	0f 88 5f 02 00 00    	js     c00241b2 <__adddf3+0x2cf>
c0023f53:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0023f56:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0023f59:	85 db                	test   ebx,ebx
c0023f5b:	0f 8e c7 00 00 00    	jle    c0024028 <__adddf3+0x145>
c0023f61:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0023f68:	75 1a                	jne    c0023f84 <__adddf3+0xa1>
c0023f6a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0023f6d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0023f70:	0f 84 b2 05 00 00    	je     c0024528 <__adddf3+0x645>
c0023f76:	4b                   	dec    ebx
c0023f77:	75 23                	jne    c0023f9c <__adddf3+0xb9>
c0023f79:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0023f7c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0023f7f:	e9 99 00 00 00       	jmp    c002401d <__adddf3+0x13a>
c0023f84:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0023f87:	f7 d6                	not    esi
c0023f89:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0023f8f:	0f 84 93 05 00 00    	je     c0024528 <__adddf3+0x645>
c0023f95:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0023f9c:	83 fb 1f             	cmp    ebx,0x1f
c0023f9f:	7e 42                	jle    c0023fe3 <__adddf3+0x100>
c0023fa1:	83 fb 3f             	cmp    ebx,0x3f
c0023fa4:	0f 8f 7e 05 00 00    	jg     c0024528 <__adddf3+0x645>
c0023faa:	83 e3 1f             	and    ebx,0x1f
c0023fad:	89 d9                	mov    ecx,ebx
c0023faf:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0023fb2:	d3 ef                	shr    edi,cl
c0023fb4:	31 db                	xor    ebx,ebx
c0023fb6:	85 c9                	test   ecx,ecx
c0023fb8:	74 15                	je     c0023fcf <__adddf3+0xec>
c0023fba:	be 20 00 00 00       	mov    esi,0x20
c0023fbf:	29 ce                	sub    esi,ecx
c0023fc1:	89 f1                	mov    ecx,esi
c0023fc3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0023fc6:	d3 e6                	shl    esi,cl
c0023fc8:	31 db                	xor    ebx,ebx
c0023fca:	85 f6                	test   esi,esi
c0023fcc:	0f 95 c3             	setne  bl
c0023fcf:	31 c9                	xor    ecx,ecx
c0023fd1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0023fd5:	0f 95 c1             	setne  cl
c0023fd8:	09 cf                	or     edi,ecx
c0023fda:	09 fb                	or     ebx,edi
c0023fdc:	01 da                	add    edx,ebx
c0023fde:	83 d0 00             	adc    eax,0x0
c0023fe1:	eb 3a                	jmp    c002401d <__adddf3+0x13a>
c0023fe3:	bf 20 00 00 00       	mov    edi,0x20
c0023fe8:	29 df                	sub    edi,ebx
c0023fea:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0023fed:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0023ff0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0023ff3:	d3 e6                	shl    esi,cl
c0023ff5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0023ff8:	88 d9                	mov    cl,bl
c0023ffa:	d3 ef                	shr    edi,cl
c0023ffc:	09 fe                	or     esi,edi
c0023ffe:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024001:	88 d9                	mov    cl,bl
c0024003:	d3 ef                	shr    edi,cl
c0024005:	89 fb                	mov    ebx,edi
c0024007:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002400a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002400d:	d3 e7                	shl    edi,cl
c002400f:	85 ff                	test   edi,edi
c0024011:	0f 95 c1             	setne  cl
c0024014:	0f b6 c9             	movzx  ecx,cl
c0024017:	09 ce                	or     esi,ecx
c0024019:	01 f2                	add    edx,esi
c002401b:	11 d8                	adc    eax,ebx
c002401d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024020:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024023:	e9 52 01 00 00       	jmp    c002417a <__adddf3+0x297>
c0024028:	0f 84 d5 00 00 00    	je     c0024103 <__adddf3+0x220>
c002402e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024031:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0024034:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024037:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002403a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0024041:	75 20                	jne    c0024063 <__adddf3+0x180>
c0024043:	89 d6                	mov    esi,edx
c0024045:	09 c6                	or     esi,eax
c0024047:	0f 84 db 04 00 00    	je     c0024528 <__adddf3+0x645>
c002404d:	4b                   	dec    ebx
c002404e:	75 29                	jne    c0024079 <__adddf3+0x196>
c0024050:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024053:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024056:	01 d1                	add    ecx,edx
c0024058:	11 c6                	adc    esi,eax
c002405a:	89 f0                	mov    eax,esi
c002405c:	89 ca                	mov    edx,ecx
c002405e:	e9 17 01 00 00       	jmp    c002417a <__adddf3+0x297>
c0024063:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0024066:	f7 d6                	not    esi
c0024068:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002406e:	0f 84 b4 04 00 00    	je     c0024528 <__adddf3+0x645>
c0024074:	0d 00 00 00 80       	or     eax,0x80000000
c0024079:	83 fb 1f             	cmp    ebx,0x1f
c002407c:	7e 48                	jle    c00240c6 <__adddf3+0x1e3>
c002407e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024081:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024084:	83 fb 3f             	cmp    ebx,0x3f
c0024087:	0f 8f 9b 04 00 00    	jg     c0024528 <__adddf3+0x645>
c002408d:	83 e3 1f             	and    ebx,0x1f
c0024090:	89 d9                	mov    ecx,ebx
c0024092:	89 c7                	mov    edi,eax
c0024094:	d3 ef                	shr    edi,cl
c0024096:	31 db                	xor    ebx,ebx
c0024098:	85 c9                	test   ecx,ecx
c002409a:	74 12                	je     c00240ae <__adddf3+0x1cb>
c002409c:	be 20 00 00 00       	mov    esi,0x20
c00240a1:	29 ce                	sub    esi,ecx
c00240a3:	89 f1                	mov    ecx,esi
c00240a5:	d3 e0                	shl    eax,cl
c00240a7:	31 db                	xor    ebx,ebx
c00240a9:	85 c0                	test   eax,eax
c00240ab:	0f 95 c3             	setne  bl
c00240ae:	31 c0                	xor    eax,eax
c00240b0:	85 d2                	test   edx,edx
c00240b2:	0f 95 c0             	setne  al
c00240b5:	09 c7                	or     edi,eax
c00240b7:	09 fb                	or     ebx,edi
c00240b9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00240bc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00240bf:	01 da                	add    edx,ebx
c00240c1:	83 d6 00             	adc    esi,0x0
c00240c4:	eb 39                	jmp    c00240ff <__adddf3+0x21c>
c00240c6:	be 20 00 00 00       	mov    esi,0x20
c00240cb:	29 de                	sub    esi,ebx
c00240cd:	89 c7                	mov    edi,eax
c00240cf:	89 f1                	mov    ecx,esi
c00240d1:	d3 e7                	shl    edi,cl
c00240d3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00240d6:	89 d7                	mov    edi,edx
c00240d8:	88 d9                	mov    cl,bl
c00240da:	d3 ef                	shr    edi,cl
c00240dc:	89 f9                	mov    ecx,edi
c00240de:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00240e1:	09 cf                	or     edi,ecx
c00240e3:	88 d9                	mov    cl,bl
c00240e5:	d3 e8                	shr    eax,cl
c00240e7:	89 f1                	mov    ecx,esi
c00240e9:	d3 e2                	shl    edx,cl
c00240eb:	85 d2                	test   edx,edx
c00240ed:	0f 95 c2             	setne  dl
c00240f0:	0f b6 d2             	movzx  edx,dl
c00240f3:	09 d7                	or     edi,edx
c00240f5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00240f8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00240fb:	01 fa                	add    edx,edi
c00240fd:	11 c6                	adc    esi,eax
c00240ff:	89 f0                	mov    eax,esi
c0024101:	eb 77                	jmp    c002417a <__adddf3+0x297>
c0024103:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024106:	46                   	inc    esi
c0024107:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002410a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0024110:	75 41                	jne    c0024153 <__adddf3+0x270>
c0024112:	89 d3                	mov    ebx,edx
c0024114:	09 c3                	or     ebx,eax
c0024116:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002411d:	75 27                	jne    c0024146 <__adddf3+0x263>
c002411f:	85 db                	test   ebx,ebx
c0024121:	0f 84 fb 03 00 00    	je     c0024522 <__adddf3+0x63f>
c0024127:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002412a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002412d:	0f 84 f5 03 00 00    	je     c0024528 <__adddf3+0x645>
c0024133:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0024136:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0024139:	85 c0                	test   eax,eax
c002413b:	0f 89 91 03 00 00    	jns    c00244d2 <__adddf3+0x5ef>
c0024141:	e9 85 03 00 00       	jmp    c00244cb <__adddf3+0x5e8>
c0024146:	85 db                	test   ebx,ebx
c0024148:	0f 85 da 03 00 00    	jne    c0024528 <__adddf3+0x645>
c002414e:	e9 cf 03 00 00       	jmp    c0024522 <__adddf3+0x63f>
c0024153:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0024156:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0024159:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002415c:	f7 d1                	not    ecx
c002415e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0024164:	0f 84 70 03 00 00    	je     c00244da <__adddf3+0x5f7>
c002416a:	d1 ea                	shr    edx,1
c002416c:	89 c1                	mov    ecx,eax
c002416e:	c1 e1 1f             	shl    ecx,0x1f
c0024171:	09 ca                	or     edx,ecx
c0024173:	d1 e8                	shr    eax,1
c0024175:	e9 6f 03 00 00       	jmp    c00244e9 <__adddf3+0x606>
c002417a:	85 c0                	test   eax,eax
c002417c:	0f 89 67 03 00 00    	jns    c00244e9 <__adddf3+0x606>
c0024182:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0024185:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024188:	f7 d1                	not    ecx
c002418a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0024190:	0f 84 44 03 00 00    	je     c00244da <__adddf3+0x5f7>
c0024196:	89 d1                	mov    ecx,edx
c0024198:	d1 e9                	shr    ecx,1
c002419a:	83 e2 01             	and    edx,0x1
c002419d:	09 ca                	or     edx,ecx
c002419f:	89 c1                	mov    ecx,eax
c00241a1:	c1 e1 1f             	shl    ecx,0x1f
c00241a4:	09 ca                	or     edx,ecx
c00241a6:	d1 e8                	shr    eax,1
c00241a8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00241ad:	e9 37 03 00 00       	jmp    c00244e9 <__adddf3+0x606>
c00241b2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00241b5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00241bb:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00241be:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00241c1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00241c7:	29 de                	sub    esi,ebx
c00241c9:	85 f6                	test   esi,esi
c00241cb:	0f 8e bd 00 00 00    	jle    c002428e <__adddf3+0x3ab>
c00241d1:	85 db                	test   ebx,ebx
c00241d3:	75 17                	jne    c00241ec <__adddf3+0x309>
c00241d5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00241d8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00241db:	0f 84 47 03 00 00    	je     c0024528 <__adddf3+0x645>
c00241e1:	4e                   	dec    esi
c00241e2:	75 20                	jne    c0024204 <__adddf3+0x321>
c00241e4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00241e7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00241ea:	eb 5b                	jmp    c0024247 <__adddf3+0x364>
c00241ec:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00241ef:	f7 d3                	not    ebx
c00241f1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00241f7:	0f 84 2b 03 00 00    	je     c0024528 <__adddf3+0x645>
c00241fd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0024204:	83 fe 1f             	cmp    esi,0x1f
c0024207:	7e 49                	jle    c0024252 <__adddf3+0x36f>
c0024209:	83 fe 3f             	cmp    esi,0x3f
c002420c:	0f 8f 16 03 00 00    	jg     c0024528 <__adddf3+0x645>
c0024212:	83 e6 1f             	and    esi,0x1f
c0024215:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024218:	89 f1                	mov    ecx,esi
c002421a:	d3 ef                	shr    edi,cl
c002421c:	31 db                	xor    ebx,ebx
c002421e:	85 f6                	test   esi,esi
c0024220:	74 13                	je     c0024235 <__adddf3+0x352>
c0024222:	b9 20 00 00 00       	mov    ecx,0x20
c0024227:	29 f1                	sub    ecx,esi
c0024229:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002422c:	d3 e6                	shl    esi,cl
c002422e:	31 db                	xor    ebx,ebx
c0024230:	85 f6                	test   esi,esi
c0024232:	0f 95 c3             	setne  bl
c0024235:	31 c9                	xor    ecx,ecx
c0024237:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002423b:	0f 95 c1             	setne  cl
c002423e:	09 cf                	or     edi,ecx
c0024240:	09 fb                	or     ebx,edi
c0024242:	29 da                	sub    edx,ebx
c0024244:	83 d8 00             	sbb    eax,0x0
c0024247:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002424a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002424d:	e9 aa 01 00 00       	jmp    c00243fc <__adddf3+0x519>
c0024252:	bf 20 00 00 00       	mov    edi,0x20
c0024257:	29 f7                	sub    edi,esi
c0024259:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002425c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002425f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0024262:	d3 e3                	shl    ebx,cl
c0024264:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024267:	89 f1                	mov    ecx,esi
c0024269:	d3 ef                	shr    edi,cl
c002426b:	09 fb                	or     ebx,edi
c002426d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024270:	89 f1                	mov    ecx,esi
c0024272:	d3 ef                	shr    edi,cl
c0024274:	89 fe                	mov    esi,edi
c0024276:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024279:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002427c:	d3 e7                	shl    edi,cl
c002427e:	85 ff                	test   edi,edi
c0024280:	0f 95 c1             	setne  cl
c0024283:	0f b6 c9             	movzx  ecx,cl
c0024286:	09 cb                	or     ebx,ecx
c0024288:	29 da                	sub    edx,ebx
c002428a:	19 f0                	sbb    eax,esi
c002428c:	eb b9                	jmp    c0024247 <__adddf3+0x364>
c002428e:	0f 84 cd 00 00 00    	je     c0024361 <__adddf3+0x47e>
c0024294:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0024297:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002429a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002429d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00242a1:	75 1b                	jne    c00242be <__adddf3+0x3db>
c00242a3:	89 d6                	mov    esi,edx
c00242a5:	09 c6                	or     esi,eax
c00242a7:	0f 84 7b 02 00 00    	je     c0024528 <__adddf3+0x645>
c00242ad:	4b                   	dec    ebx
c00242ae:	75 24                	jne    c00242d4 <__adddf3+0x3f1>
c00242b0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00242b3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00242b6:	29 d1                	sub    ecx,edx
c00242b8:	19 c6                	sbb    esi,eax
c00242ba:	89 ca                	mov    edx,ecx
c00242bc:	eb 61                	jmp    c002431f <__adddf3+0x43c>
c00242be:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00242c1:	f7 d6                	not    esi
c00242c3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00242c9:	0f 84 59 02 00 00    	je     c0024528 <__adddf3+0x645>
c00242cf:	0d 00 00 00 80       	or     eax,0x80000000
c00242d4:	83 fb 1f             	cmp    ebx,0x1f
c00242d7:	7e 4d                	jle    c0024326 <__adddf3+0x443>
c00242d9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00242dc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00242df:	83 fb 3f             	cmp    ebx,0x3f
c00242e2:	0f 8f 40 02 00 00    	jg     c0024528 <__adddf3+0x645>
c00242e8:	83 e3 1f             	and    ebx,0x1f
c00242eb:	89 d9                	mov    ecx,ebx
c00242ed:	89 c7                	mov    edi,eax
c00242ef:	d3 ef                	shr    edi,cl
c00242f1:	31 db                	xor    ebx,ebx
c00242f3:	85 c9                	test   ecx,ecx
c00242f5:	74 12                	je     c0024309 <__adddf3+0x426>
c00242f7:	be 20 00 00 00       	mov    esi,0x20
c00242fc:	29 ce                	sub    esi,ecx
c00242fe:	89 f1                	mov    ecx,esi
c0024300:	d3 e0                	shl    eax,cl
c0024302:	31 db                	xor    ebx,ebx
c0024304:	85 c0                	test   eax,eax
c0024306:	0f 95 c3             	setne  bl
c0024309:	31 c0                	xor    eax,eax
c002430b:	85 d2                	test   edx,edx
c002430d:	0f 95 c0             	setne  al
c0024310:	09 c7                	or     edi,eax
c0024312:	09 fb                	or     ebx,edi
c0024314:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024317:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002431a:	29 da                	sub    edx,ebx
c002431c:	83 de 00             	sbb    esi,0x0
c002431f:	89 f0                	mov    eax,esi
c0024321:	e9 d6 00 00 00       	jmp    c00243fc <__adddf3+0x519>
c0024326:	be 20 00 00 00       	mov    esi,0x20
c002432b:	29 de                	sub    esi,ebx
c002432d:	89 c7                	mov    edi,eax
c002432f:	89 f1                	mov    ecx,esi
c0024331:	d3 e7                	shl    edi,cl
c0024333:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0024336:	89 d7                	mov    edi,edx
c0024338:	88 d9                	mov    cl,bl
c002433a:	d3 ef                	shr    edi,cl
c002433c:	89 f9                	mov    ecx,edi
c002433e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024341:	09 cf                	or     edi,ecx
c0024343:	88 d9                	mov    cl,bl
c0024345:	d3 e8                	shr    eax,cl
c0024347:	89 f1                	mov    ecx,esi
c0024349:	d3 e2                	shl    edx,cl
c002434b:	85 d2                	test   edx,edx
c002434d:	0f 95 c2             	setne  dl
c0024350:	0f b6 d2             	movzx  edx,dl
c0024353:	09 d7                	or     edi,edx
c0024355:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024358:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002435b:	29 fa                	sub    edx,edi
c002435d:	19 c6                	sbb    esi,eax
c002435f:	eb be                	jmp    c002431f <__adddf3+0x43c>
c0024361:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024364:	8d 5e 01             	lea    ebx,[esi+0x1]
c0024367:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002436d:	75 6a                	jne    c00243d9 <__adddf3+0x4f6>
c002436f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0024373:	75 58                	jne    c00243cd <__adddf3+0x4ea>
c0024375:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0024378:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002437b:	89 d6                	mov    esi,edx
c002437d:	09 c6                	or     esi,eax
c002437f:	75 17                	jne    c0024398 <__adddf3+0x4b5>
c0024381:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024384:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024387:	85 db                	test   ebx,ebx
c0024389:	0f 85 99 01 00 00    	jne    c0024528 <__adddf3+0x645>
c002438f:	31 ff                	xor    edi,edi
c0024391:	31 c9                	xor    ecx,ecx
c0024393:	e9 90 01 00 00       	jmp    c0024528 <__adddf3+0x645>
c0024398:	85 db                	test   ebx,ebx
c002439a:	0f 84 88 01 00 00    	je     c0024528 <__adddf3+0x645>
c00243a0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00243a3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00243a6:	85 c0                	test   eax,eax
c00243a8:	79 10                	jns    c00243ba <__adddf3+0x4d7>
c00243aa:	31 c9                	xor    ecx,ecx
c00243ac:	f7 da                	neg    edx
c00243ae:	0f 95 c1             	setne  cl
c00243b1:	01 c8                	add    eax,ecx
c00243b3:	f7 d8                	neg    eax
c00243b5:	e9 2f 01 00 00       	jmp    c00244e9 <__adddf3+0x606>
c00243ba:	31 ff                	xor    edi,edi
c00243bc:	31 c9                	xor    ecx,ecx
c00243be:	89 c3                	mov    ebx,eax
c00243c0:	09 d3                	or     ebx,edx
c00243c2:	0f 84 60 01 00 00    	je     c0024528 <__adddf3+0x645>
c00243c8:	e9 05 01 00 00       	jmp    c00244d2 <__adddf3+0x5ef>
c00243cd:	31 ff                	xor    edi,edi
c00243cf:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00243d4:	e9 4f 01 00 00       	jmp    c0024528 <__adddf3+0x645>
c00243d9:	89 c1                	mov    ecx,eax
c00243db:	89 d0                	mov    eax,edx
c00243dd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00243e0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00243e3:	89 ca                	mov    edx,ecx
c00243e5:	85 c9                	test   ecx,ecx
c00243e7:	79 2c                	jns    c0024415 <__adddf3+0x532>
c00243e9:	31 c9                	xor    ecx,ecx
c00243eb:	f7 d8                	neg    eax
c00243ed:	0f 95 c1             	setne  cl
c00243f0:	01 ca                	add    edx,ecx
c00243f2:	f7 da                	neg    edx
c00243f4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00243f7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00243fa:	eb 19                	jmp    c0024415 <__adddf3+0x532>
c00243fc:	85 c0                	test   eax,eax
c00243fe:	0f 89 e5 00 00 00    	jns    c00244e9 <__adddf3+0x606>
c0024404:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024409:	89 c1                	mov    ecx,eax
c002440b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002440e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0024411:	89 d0                	mov    eax,edx
c0024413:	89 ca                	mov    edx,ecx
c0024415:	85 d2                	test   edx,edx
c0024417:	74 59                	je     c0024472 <__adddf3+0x58f>
c0024419:	0f bd da             	bsr    ebx,edx
c002441c:	83 f3 1f             	xor    ebx,0x1f
c002441f:	88 d9                	mov    cl,bl
c0024421:	d3 e2                	shl    edx,cl
c0024423:	bf 20 00 00 00       	mov    edi,0x20
c0024428:	89 f9                	mov    ecx,edi
c002442a:	29 d9                	sub    ecx,ebx
c002442c:	89 c6                	mov    esi,eax
c002442e:	d3 ee                	shr    esi,cl
c0024430:	09 d6                	or     esi,edx
c0024432:	88 d9                	mov    cl,bl
c0024434:	d3 e0                	shl    eax,cl
c0024436:	89 c2                	mov    edx,eax
c0024438:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002443b:	25 ff 07 00 00       	and    eax,0x7ff
c0024440:	39 d8                	cmp    eax,ebx
c0024442:	7f 22                	jg     c0024466 <__adddf3+0x583>
c0024444:	29 c3                	sub    ebx,eax
c0024446:	43                   	inc    ebx
c0024447:	88 d9                	mov    cl,bl
c0024449:	d3 ea                	shr    edx,cl
c002444b:	29 df                	sub    edi,ebx
c002444d:	89 f9                	mov    ecx,edi
c002444f:	89 f0                	mov    eax,esi
c0024451:	d3 e0                	shl    eax,cl
c0024453:	09 c2                	or     edx,eax
c0024455:	89 f0                	mov    eax,esi
c0024457:	88 d9                	mov    cl,bl
c0024459:	d3 e8                	shr    eax,cl
c002445b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002445e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0024464:	eb 6f                	jmp    c00244d5 <__adddf3+0x5f2>
c0024466:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024469:	29 d8                	sub    eax,ebx
c002446b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002446e:	89 f0                	mov    eax,esi
c0024470:	eb 59                	jmp    c00244cb <__adddf3+0x5e8>
c0024472:	85 c0                	test   eax,eax
c0024474:	74 6a                	je     c00244e0 <__adddf3+0x5fd>
c0024476:	0f bd c8             	bsr    ecx,eax
c0024479:	83 f1 1f             	xor    ecx,0x1f
c002447c:	d3 e0                	shl    eax,cl
c002447e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0024481:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024487:	83 c1 20             	add    ecx,0x20
c002448a:	39 cb                	cmp    ebx,ecx
c002448c:	7f 35                	jg     c00244c3 <__adddf3+0x5e0>
c002448e:	29 d9                	sub    ecx,ebx
c0024490:	8d 71 01             	lea    esi,[ecx+0x1]
c0024493:	83 fe 1f             	cmp    esi,0x1f
c0024496:	7e 09                	jle    c00244a1 <__adddf3+0x5be>
c0024498:	83 e9 1f             	sub    ecx,0x1f
c002449b:	d3 e8                	shr    eax,cl
c002449d:	89 c3                	mov    ebx,eax
c002449f:	eb 11                	jmp    c00244b2 <__adddf3+0x5cf>
c00244a1:	b9 20 00 00 00       	mov    ecx,0x20
c00244a6:	29 f1                	sub    ecx,esi
c00244a8:	89 c3                	mov    ebx,eax
c00244aa:	d3 e3                	shl    ebx,cl
c00244ac:	89 f1                	mov    ecx,esi
c00244ae:	d3 e8                	shr    eax,cl
c00244b0:	89 c2                	mov    edx,eax
c00244b2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00244b5:	25 00 f8 ff ff       	and    eax,0xfffff800
c00244ba:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00244bd:	89 d0                	mov    eax,edx
c00244bf:	89 da                	mov    edx,ebx
c00244c1:	eb 26                	jmp    c00244e9 <__adddf3+0x606>
c00244c3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00244c6:	29 cf                	sub    edi,ecx
c00244c8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00244cb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00244d0:	eb 17                	jmp    c00244e9 <__adddf3+0x606>
c00244d2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00244d5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00244d8:	eb 0f                	jmp    c00244e9 <__adddf3+0x606>
c00244da:	31 d2                	xor    edx,edx
c00244dc:	31 c0                	xor    eax,eax
c00244de:	eb 09                	jmp    c00244e9 <__adddf3+0x606>
c00244e0:	89 c2                	mov    edx,eax
c00244e2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00244e9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00244ec:	c1 e1 14             	shl    ecx,0x14
c00244ef:	89 c3                	mov    ebx,eax
c00244f1:	c1 eb 0b             	shr    ebx,0xb
c00244f4:	09 d9                	or     ecx,ebx
c00244f6:	89 d3                	mov    ebx,edx
c00244f8:	c1 eb 0b             	shr    ebx,0xb
c00244fb:	c1 e0 15             	shl    eax,0x15
c00244fe:	09 d8                	or     eax,ebx
c0024500:	89 c7                	mov    edi,eax
c0024502:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0024508:	0f 95 c0             	setne  al
c002450b:	89 c6                	mov    esi,eax
c002450d:	09 f3                	or     ebx,esi
c002450f:	83 e3 01             	and    ebx,0x1
c0024512:	c1 ea 0a             	shr    edx,0xa
c0024515:	21 da                	and    edx,ebx
c0024517:	89 f8                	mov    eax,edi
c0024519:	01 d0                	add    eax,edx
c002451b:	83 d1 00             	adc    ecx,0x0
c002451e:	89 c7                	mov    edi,eax
c0024520:	eb 06                	jmp    c0024528 <__adddf3+0x645>
c0024522:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024525:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024528:	89 f8                	mov    eax,edi
c002452a:	89 ca                	mov    edx,ecx
c002452c:	83 c4 24             	add    esp,0x24
c002452f:	5b                   	pop    ebx
c0024530:	5e                   	pop    esi
c0024531:	5f                   	pop    edi
c0024532:	5d                   	pop    ebp
c0024533:	c3                   	ret    

c0024534 <__subdf3>:
c0024534:	55                   	push   ebp
c0024535:	89 e5                	mov    ebp,esp
c0024537:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002453a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002453d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0024543:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0024546:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0024549:	5d                   	pop    ebp
c002454a:	e9 94 f9 ff ff       	jmp    c0023ee3 <__adddf3>

c002454f <__negdf2>:
c002454f:	55                   	push   ebp
c0024550:	89 e5                	mov    ebp,esp
c0024552:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024555:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024558:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002455e:	5d                   	pop    ebp
c002455f:	c3                   	ret    

c0024560 <__muldf3>:
c0024560:	55                   	push   ebp
c0024561:	89 e5                	mov    ebp,esp
c0024563:	57                   	push   edi
c0024564:	56                   	push   esi
c0024565:	53                   	push   ebx
c0024566:	83 ec 24             	sub    esp,0x24
c0024569:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002456c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002456f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024572:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024575:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0024578:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002457b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002457e:	89 c8                	mov    eax,ecx
c0024580:	c1 f8 14             	sar    eax,0x14
c0024583:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024586:	89 f8                	mov    eax,edi
c0024588:	89 fb                	mov    ebx,edi
c002458a:	c1 e3 0b             	shl    ebx,0xb
c002458d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0024590:	c1 e1 0b             	shl    ecx,0xb
c0024593:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024599:	c1 e8 15             	shr    eax,0x15
c002459c:	09 c1                	or     ecx,eax
c002459e:	89 d6                	mov    esi,edx
c00245a0:	89 d0                	mov    eax,edx
c00245a2:	c1 f8 14             	sar    eax,0x14
c00245a5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00245a8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00245ab:	89 c3                	mov    ebx,eax
c00245ad:	c1 e3 0b             	shl    ebx,0xb
c00245b0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00245b3:	c1 e6 0b             	shl    esi,0xb
c00245b6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00245bc:	c1 e8 15             	shr    eax,0x15
c00245bf:	09 c6                	or     esi,eax
c00245c1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00245c4:	25 ff 07 00 00       	and    eax,0x7ff
c00245c9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00245cc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00245cf:	25 ff 07 00 00       	and    eax,0x7ff
c00245d4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00245d7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00245da:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00245dd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00245e4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00245e7:	40                   	inc    eax
c00245e8:	a9 fe 07 00 00       	test   eax,0x7fe
c00245ed:	0f 85 8d 00 00 00    	jne    c0024680 <__muldf3+0x120>
c00245f3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00245f6:	09 c8                	or     eax,ecx
c00245f8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00245fc:	74 44                	je     c0024642 <__muldf3+0xe2>
c00245fe:	85 c0                	test   eax,eax
c0024600:	0f 85 31 02 00 00    	jne    c0024837 <__muldf3+0x2d7>
c0024606:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024609:	40                   	inc    eax
c002460a:	a9 fe 07 00 00       	test   eax,0x7fe
c002460f:	75 13                	jne    c0024624 <__muldf3+0xc4>
c0024611:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024614:	09 f1                	or     ecx,esi
c0024616:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002461a:	74 22                	je     c002463e <__muldf3+0xde>
c002461c:	85 c9                	test   ecx,ecx
c002461e:	0f 85 0d 02 00 00    	jne    c0024831 <__muldf3+0x2d1>
c0024624:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0024628:	0f 89 09 02 00 00    	jns    c0024837 <__muldf3+0x2d7>
c002462e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024631:	05 00 00 00 80       	add    eax,0x80000000
c0024636:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024639:	e9 f9 01 00 00       	jmp    c0024837 <__muldf3+0x2d7>
c002463e:	85 c9                	test   ecx,ecx
c0024640:	eb 2e                	jmp    c0024670 <__muldf3+0x110>
c0024642:	85 c0                	test   eax,eax
c0024644:	74 20                	je     c0024666 <__muldf3+0x106>
c0024646:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0024649:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002464c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002464f:	c1 ef 1f             	shr    edi,0x1f
c0024652:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0024655:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0024658:	8d 43 ff             	lea    eax,[ebx-0x1]
c002465b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002465e:	09 f9                	or     ecx,edi
c0024660:	78 1e                	js     c0024680 <__muldf3+0x120>
c0024662:	89 c3                	mov    ebx,eax
c0024664:	eb e0                	jmp    c0024646 <__muldf3+0xe6>
c0024666:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024669:	f7 d0                	not    eax
c002466b:	a9 ff 07 00 00       	test   eax,0x7ff
c0024670:	75 b2                	jne    c0024624 <__muldf3+0xc4>
c0024672:	31 ff                	xor    edi,edi
c0024674:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c002467b:	e9 b7 01 00 00       	jmp    c0024837 <__muldf3+0x2d7>
c0024680:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024683:	40                   	inc    eax
c0024684:	a9 fe 07 00 00       	test   eax,0x7fe
c0024689:	75 57                	jne    c00246e2 <__muldf3+0x182>
c002468b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002468e:	09 f0                	or     eax,esi
c0024690:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0024694:	74 23                	je     c00246b9 <__muldf3+0x159>
c0024696:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c002469a:	0f 89 91 01 00 00    	jns    c0024831 <__muldf3+0x2d1>
c00246a0:	85 c0                	test   eax,eax
c00246a2:	0f 85 89 01 00 00    	jne    c0024831 <__muldf3+0x2d1>
c00246a8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00246ab:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00246b1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00246b4:	e9 7e 01 00 00       	jmp    c0024837 <__muldf3+0x2d7>
c00246b9:	85 c0                	test   eax,eax
c00246bb:	75 0c                	jne    c00246c9 <__muldf3+0x169>
c00246bd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00246c1:	0f 89 6a 01 00 00    	jns    c0024831 <__muldf3+0x2d1>
c00246c7:	eb df                	jmp    c00246a8 <__muldf3+0x148>
c00246c9:	01 f6                	add    esi,esi
c00246cb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00246ce:	c1 ea 1f             	shr    edx,0x1f
c00246d1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00246d4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00246d7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00246da:	09 d6                	or     esi,edx
c00246dc:	78 04                	js     c00246e2 <__muldf3+0x182>
c00246de:	89 c3                	mov    ebx,eax
c00246e0:	eb e7                	jmp    c00246c9 <__muldf3+0x169>
c00246e2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00246e8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00246ee:	89 c8                	mov    eax,ecx
c00246f0:	f7 e6                	mul    esi
c00246f2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00246f5:	89 c7                	mov    edi,eax
c00246f7:	89 c8                	mov    eax,ecx
c00246f9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00246fc:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00246ff:	89 c1                	mov    ecx,eax
c0024701:	89 f0                	mov    eax,esi
c0024703:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0024706:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0024709:	89 c6                	mov    esi,eax
c002470b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002470e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0024711:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0024714:	31 c0                	xor    eax,eax
c0024716:	01 f1                	add    ecx,esi
c0024718:	0f 92 c0             	setb   al
c002471b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c002471e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0024721:	83 d6 00             	adc    esi,0x0
c0024724:	01 c7                	add    edi,eax
c0024726:	83 d6 00             	adc    esi,0x0
c0024729:	01 ca                	add    edx,ecx
c002472b:	0f 92 c1             	setb   cl
c002472e:	0f b6 c9             	movzx  ecx,cl
c0024731:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0024734:	83 d6 00             	adc    esi,0x0
c0024737:	01 cf                	add    edi,ecx
c0024739:	83 d6 00             	adc    esi,0x0
c002473c:	31 c9                	xor    ecx,ecx
c002473e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0024741:	0f 95 c1             	setne  cl
c0024744:	09 cf                	or     edi,ecx
c0024746:	85 f6                	test   esi,esi
c0024748:	78 0c                	js     c0024756 <__muldf3+0x1f6>
c002474a:	01 f6                	add    esi,esi
c002474c:	89 f8                	mov    eax,edi
c002474e:	c1 e8 1f             	shr    eax,0x1f
c0024751:	09 c6                	or     esi,eax
c0024753:	01 ff                	add    edi,edi
c0024755:	4b                   	dec    ebx
c0024756:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c002475c:	0f 8f 85 00 00 00    	jg     c00247e7 <__muldf3+0x287>
c0024762:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0024768:	85 db                	test   ebx,ebx
c002476a:	0f 8f 84 00 00 00    	jg     c00247f4 <__muldf3+0x294>
c0024770:	83 fb cc             	cmp    ebx,0xffffffcc
c0024773:	7c 79                	jl     c00247ee <__muldf3+0x28e>
c0024775:	ba 01 00 00 00       	mov    edx,0x1
c002477a:	29 da                	sub    edx,ebx
c002477c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0024782:	83 fa 1f             	cmp    edx,0x1f
c0024785:	7e 30                	jle    c00247b7 <__muldf3+0x257>
c0024787:	83 fa 20             	cmp    edx,0x20
c002478a:	75 0b                	jne    c0024797 <__muldf3+0x237>
c002478c:	31 c0                	xor    eax,eax
c002478e:	85 ff                	test   edi,edi
c0024790:	0f 95 c0             	setne  al
c0024793:	89 c7                	mov    edi,eax
c0024795:	eb 1a                	jmp    c00247b1 <__muldf3+0x251>
c0024797:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c002479a:	89 f0                	mov    eax,esi
c002479c:	d3 e0                	shl    eax,cl
c002479e:	09 f8                	or     eax,edi
c00247a0:	0f 95 c0             	setne  al
c00247a3:	0f b6 c0             	movzx  eax,al
c00247a6:	89 c7                	mov    edi,eax
c00247a8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00247ad:	29 d9                	sub    ecx,ebx
c00247af:	d3 ee                	shr    esi,cl
c00247b1:	09 f7                	or     edi,esi
c00247b3:	31 db                	xor    ebx,ebx
c00247b5:	eb 3b                	jmp    c00247f2 <__muldf3+0x292>
c00247b7:	83 c3 1f             	add    ebx,0x1f
c00247ba:	89 f0                	mov    eax,esi
c00247bc:	88 d9                	mov    cl,bl
c00247be:	d3 e0                	shl    eax,cl
c00247c0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00247c3:	89 f8                	mov    eax,edi
c00247c5:	88 d1                	mov    cl,dl
c00247c7:	d3 e8                	shr    eax,cl
c00247c9:	89 c1                	mov    ecx,eax
c00247cb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00247ce:	09 c8                	or     eax,ecx
c00247d0:	88 d9                	mov    cl,bl
c00247d2:	d3 e7                	shl    edi,cl
c00247d4:	31 db                	xor    ebx,ebx
c00247d6:	85 ff                	test   edi,edi
c00247d8:	0f 95 c3             	setne  bl
c00247db:	89 df                	mov    edi,ebx
c00247dd:	09 c7                	or     edi,eax
c00247df:	88 d1                	mov    cl,dl
c00247e1:	d3 ee                	shr    esi,cl
c00247e3:	31 db                	xor    ebx,ebx
c00247e5:	eb 0d                	jmp    c00247f4 <__muldf3+0x294>
c00247e7:	bb ff 07 00 00       	mov    ebx,0x7ff
c00247ec:	eb 02                	jmp    c00247f0 <__muldf3+0x290>
c00247ee:	31 db                	xor    ebx,ebx
c00247f0:	31 ff                	xor    edi,edi
c00247f2:	31 f6                	xor    esi,esi
c00247f4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00247f7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c00247fa:	25 00 f8 ff ff       	and    eax,0xfffff800
c00247ff:	09 c3                	or     ebx,eax
c0024801:	c1 e3 14             	shl    ebx,0x14
c0024804:	89 f0                	mov    eax,esi
c0024806:	c1 e8 0b             	shr    eax,0xb
c0024809:	09 c3                	or     ebx,eax
c002480b:	89 f8                	mov    eax,edi
c002480d:	c1 e8 0b             	shr    eax,0xb
c0024810:	c1 e6 15             	shl    esi,0x15
c0024813:	09 c6                	or     esi,eax
c0024815:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c002481b:	0f 95 c1             	setne  cl
c002481e:	09 c8                	or     eax,ecx
c0024820:	83 e0 01             	and    eax,0x1
c0024823:	c1 ef 0a             	shr    edi,0xa
c0024826:	21 c7                	and    edi,eax
c0024828:	01 f7                	add    edi,esi
c002482a:	83 d3 00             	adc    ebx,0x0
c002482d:	89 da                	mov    edx,ebx
c002482f:	eb 03                	jmp    c0024834 <__muldf3+0x2d4>
c0024831:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0024834:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0024837:	89 f8                	mov    eax,edi
c0024839:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002483c:	83 c4 24             	add    esp,0x24
c002483f:	5b                   	pop    ebx
c0024840:	5e                   	pop    esi
c0024841:	5f                   	pop    edi
c0024842:	5d                   	pop    ebp
c0024843:	c3                   	ret    

c0024844 <__divdf3>:
c0024844:	55                   	push   ebp
c0024845:	89 e5                	mov    ebp,esp
c0024847:	57                   	push   edi
c0024848:	56                   	push   esi
c0024849:	53                   	push   ebx
c002484a:	83 ec 2c             	sub    esp,0x2c
c002484d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0024850:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024853:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024856:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0024859:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002485c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002485f:	89 ce                	mov    esi,ecx
c0024861:	89 c8                	mov    eax,ecx
c0024863:	c1 f8 14             	sar    eax,0x14
c0024866:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024869:	89 f8                	mov    eax,edi
c002486b:	89 fb                	mov    ebx,edi
c002486d:	c1 e3 0b             	shl    ebx,0xb
c0024870:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0024873:	c1 e6 0b             	shl    esi,0xb
c0024876:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002487c:	c1 e8 15             	shr    eax,0x15
c002487f:	09 c6                	or     esi,eax
c0024881:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0024884:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0024887:	89 c2                	mov    edx,eax
c0024889:	c1 fa 14             	sar    edx,0x14
c002488c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002488f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0024892:	89 de                	mov    esi,ebx
c0024894:	c1 e6 0b             	shl    esi,0xb
c0024897:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002489a:	c1 e0 0b             	shl    eax,0xb
c002489d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00248a2:	c1 eb 15             	shr    ebx,0x15
c00248a5:	09 d8                	or     eax,ebx
c00248a7:	89 c2                	mov    edx,eax
c00248a9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00248ac:	25 ff 07 00 00       	and    eax,0x7ff
c00248b1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00248b4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00248b7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00248bd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c00248c0:	29 d8                	sub    eax,ebx
c00248c2:	05 ff 03 00 00       	add    eax,0x3ff
c00248c7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00248ca:	46                   	inc    esi
c00248cb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00248d1:	0f 85 a5 00 00 00    	jne    c002497c <__divdf3+0x138>
c00248d7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00248da:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c00248dd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c00248e1:	74 2a                	je     c002490d <__divdf3+0xc9>
c00248e3:	85 f6                	test   esi,esi
c00248e5:	0f 85 cc 02 00 00    	jne    c0024bb7 <__divdf3+0x373>
c00248eb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00248ee:	40                   	inc    eax
c00248ef:	a9 fe 07 00 00       	test   eax,0x7fe
c00248f4:	75 26                	jne    c002491c <__divdf3+0xd8>
c00248f6:	85 db                	test   ebx,ebx
c00248f8:	74 22                	je     c002491c <__divdf3+0xd8>
c00248fa:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00248fd:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0024900:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024903:	09 d0                	or     eax,edx
c0024905:	0f 85 ac 02 00 00    	jne    c0024bb7 <__divdf3+0x373>
c002490b:	eb 63                	jmp    c0024970 <__divdf3+0x12c>
c002490d:	85 f6                	test   esi,esi
c002490f:	75 22                	jne    c0024933 <__divdf3+0xef>
c0024911:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024914:	40                   	inc    eax
c0024915:	a9 fe 07 00 00       	test   eax,0x7fe
c002491a:	74 36                	je     c0024952 <__divdf3+0x10e>
c002491c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0024920:	0f 89 91 02 00 00    	jns    c0024bb7 <__divdf3+0x373>
c0024926:	89 f8                	mov    eax,edi
c0024928:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002492e:	e9 80 02 00 00       	jmp    c0024bb3 <__divdf3+0x36f>
c0024933:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0024936:	01 f6                	add    esi,esi
c0024938:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002493b:	c1 ef 1f             	shr    edi,0x1f
c002493e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024941:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0024944:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024947:	09 f7                	or     edi,esi
c0024949:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c002494c:	78 2e                	js     c002497c <__divdf3+0x138>
c002494e:	89 c8                	mov    eax,ecx
c0024950:	eb e1                	jmp    c0024933 <__divdf3+0xef>
c0024952:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024955:	09 d0                	or     eax,edx
c0024957:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002495b:	74 0f                	je     c002496c <__divdf3+0x128>
c002495d:	85 c0                	test   eax,eax
c002495f:	74 bb                	je     c002491c <__divdf3+0xd8>
c0024961:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0024964:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0024967:	e9 4b 02 00 00       	jmp    c0024bb7 <__divdf3+0x373>
c002496c:	85 c0                	test   eax,eax
c002496e:	75 ac                	jne    c002491c <__divdf3+0xd8>
c0024970:	31 ff                	xor    edi,edi
c0024972:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0024977:	e9 3b 02 00 00       	jmp    c0024bb7 <__divdf3+0x373>
c002497c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002497f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0024982:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0024988:	75 6b                	jne    c00249f5 <__divdf3+0x1b1>
c002498a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002498d:	09 d6                	or     esi,edx
c002498f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0024993:	74 28                	je     c00249bd <__divdf3+0x179>
c0024995:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0024998:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002499b:	85 f6                	test   esi,esi
c002499d:	0f 85 14 02 00 00    	jne    c0024bb7 <__divdf3+0x373>
c00249a3:	31 ff                	xor    edi,edi
c00249a5:	31 c9                	xor    ecx,ecx
c00249a7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00249aa:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00249ad:	0f 89 04 02 00 00    	jns    c0024bb7 <__divdf3+0x373>
c00249b3:	b9 00 00 00 80       	mov    ecx,0x80000000
c00249b8:	e9 fa 01 00 00       	jmp    c0024bb7 <__divdf3+0x373>
c00249bd:	85 f6                	test   esi,esi
c00249bf:	75 1b                	jne    c00249dc <__divdf3+0x198>
c00249c1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00249c4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00249c7:	25 00 00 00 80       	and    eax,0x80000000
c00249cc:	31 c9                	xor    ecx,ecx
c00249ce:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00249d3:	89 cf                	mov    edi,ecx
c00249d5:	89 c1                	mov    ecx,eax
c00249d7:	e9 db 01 00 00       	jmp    c0024bb7 <__divdf3+0x373>
c00249dc:	01 d2                	add    edx,edx
c00249de:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00249e1:	c1 eb 1f             	shr    ebx,0x1f
c00249e4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00249e7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c00249ea:	8d 48 01             	lea    ecx,[eax+0x1]
c00249ed:	09 da                	or     edx,ebx
c00249ef:	78 04                	js     c00249f5 <__divdf3+0x1b1>
c00249f1:	89 c8                	mov    eax,ecx
c00249f3:	eb e7                	jmp    c00249dc <__divdf3+0x198>
c00249f5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00249f8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00249fe:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024a04:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0024a07:	39 d6                	cmp    esi,edx
c0024a09:	77 0d                	ja     c0024a18 <__divdf3+0x1d4>
c0024a0b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024a0e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0024a11:	72 1b                	jb     c0024a2e <__divdf3+0x1ea>
c0024a13:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0024a16:	75 16                	jne    c0024a2e <__divdf3+0x1ea>
c0024a18:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0024a1b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0024a1e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0024a21:	83 de 00             	sbb    esi,0x0
c0024a24:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0024a27:	ba 01 00 00 00       	mov    edx,0x1
c0024a2c:	eb 02                	jmp    c0024a30 <__divdf3+0x1ec>
c0024a2e:	31 d2                	xor    edx,edx
c0024a30:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0024a37:	31 ff                	xor    edi,edi
c0024a39:	01 ff                	add    edi,edi
c0024a3b:	89 d1                	mov    ecx,edx
c0024a3d:	c1 e9 1f             	shr    ecx,0x1f
c0024a40:	09 cf                	or     edi,ecx
c0024a42:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0024a45:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0024a48:	89 da                	mov    edx,ebx
c0024a4a:	89 f3                	mov    ebx,esi
c0024a4c:	8d 34 36             	lea    esi,[esi+esi*1]
c0024a4f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024a52:	c1 e9 1f             	shr    ecx,0x1f
c0024a55:	09 ce                	or     esi,ecx
c0024a57:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024a5a:	01 c9                	add    ecx,ecx
c0024a5c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0024a5f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0024a62:	85 db                	test   ebx,ebx
c0024a64:	78 29                	js     c0024a8f <__divdf3+0x24b>
c0024a66:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0024a69:	72 07                	jb     c0024a72 <__divdf3+0x22e>
c0024a6b:	75 3c                	jne    c0024aa9 <__divdf3+0x265>
c0024a6d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0024a70:	77 37                	ja     c0024aa9 <__divdf3+0x265>
c0024a72:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0024a75:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0024a78:	31 d2                	xor    edx,edx
c0024a7a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0024a7d:	0f 97 c2             	seta   dl
c0024a80:	29 d6                	sub    esi,edx
c0024a82:	89 d9                	mov    ecx,ebx
c0024a84:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0024a87:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0024a8a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0024a8d:	eb 17                	jmp    c0024aa6 <__divdf3+0x262>
c0024a8f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0024a92:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024a95:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0024a98:	0f 97 c1             	seta   cl
c0024a9b:	0f b6 c9             	movzx  ecx,cl
c0024a9e:	29 ce                	sub    esi,ecx
c0024aa0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0024aa3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0024aa6:	83 ca 01             	or     edx,0x1
c0024aa9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0024aac:	75 8b                	jne    c0024a39 <__divdf3+0x1f5>
c0024aae:	c1 e7 09             	shl    edi,0x9
c0024ab1:	89 d1                	mov    ecx,edx
c0024ab3:	c1 e9 17             	shr    ecx,0x17
c0024ab6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024ab9:	09 f3                	or     ebx,esi
c0024abb:	0f 95 c3             	setne  bl
c0024abe:	0f b6 db             	movzx  ebx,bl
c0024ac1:	c1 e2 09             	shl    edx,0x9
c0024ac4:	09 d3                	or     ebx,edx
c0024ac6:	89 ca                	mov    edx,ecx
c0024ac8:	09 fa                	or     edx,edi
c0024aca:	78 0c                	js     c0024ad8 <__divdf3+0x294>
c0024acc:	01 d2                	add    edx,edx
c0024ace:	89 d9                	mov    ecx,ebx
c0024ad0:	c1 e9 1f             	shr    ecx,0x1f
c0024ad3:	09 ca                	or     edx,ecx
c0024ad5:	01 db                	add    ebx,ebx
c0024ad7:	48                   	dec    eax
c0024ad8:	3d fe 07 00 00       	cmp    eax,0x7fe
c0024add:	0f 8f 83 00 00 00    	jg     c0024b66 <__divdf3+0x322>
c0024ae3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0024ae9:	85 c0                	test   eax,eax
c0024aeb:	0f 8f 82 00 00 00    	jg     c0024b73 <__divdf3+0x32f>
c0024af1:	83 f8 cc             	cmp    eax,0xffffffcc
c0024af4:	7c 77                	jl     c0024b6d <__divdf3+0x329>
c0024af6:	be 01 00 00 00       	mov    esi,0x1
c0024afb:	29 c6                	sub    esi,eax
c0024afd:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024b03:	83 fe 1f             	cmp    esi,0x1f
c0024b06:	7e 2f                	jle    c0024b37 <__divdf3+0x2f3>
c0024b08:	83 fe 20             	cmp    esi,0x20
c0024b0b:	75 0a                	jne    c0024b17 <__divdf3+0x2d3>
c0024b0d:	85 db                	test   ebx,ebx
c0024b0f:	0f 95 c3             	setne  bl
c0024b12:	0f b6 db             	movzx  ebx,bl
c0024b15:	eb 1a                	jmp    c0024b31 <__divdf3+0x2ed>
c0024b17:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0024b1a:	89 d7                	mov    edi,edx
c0024b1c:	d3 e7                	shl    edi,cl
c0024b1e:	89 f9                	mov    ecx,edi
c0024b20:	09 d9                	or     ecx,ebx
c0024b22:	0f 95 c3             	setne  bl
c0024b25:	0f b6 db             	movzx  ebx,bl
c0024b28:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0024b2d:	29 c1                	sub    ecx,eax
c0024b2f:	d3 ea                	shr    edx,cl
c0024b31:	09 d3                	or     ebx,edx
c0024b33:	31 c0                	xor    eax,eax
c0024b35:	eb 3a                	jmp    c0024b71 <__divdf3+0x32d>
c0024b37:	83 c0 1f             	add    eax,0x1f
c0024b3a:	89 d7                	mov    edi,edx
c0024b3c:	88 c1                	mov    cl,al
c0024b3e:	d3 e7                	shl    edi,cl
c0024b40:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024b43:	89 df                	mov    edi,ebx
c0024b45:	89 f1                	mov    ecx,esi
c0024b47:	d3 ef                	shr    edi,cl
c0024b49:	89 f9                	mov    ecx,edi
c0024b4b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0024b4e:	09 cf                	or     edi,ecx
c0024b50:	88 c1                	mov    cl,al
c0024b52:	d3 e3                	shl    ebx,cl
c0024b54:	85 db                	test   ebx,ebx
c0024b56:	0f 95 c3             	setne  bl
c0024b59:	0f b6 db             	movzx  ebx,bl
c0024b5c:	09 fb                	or     ebx,edi
c0024b5e:	89 f1                	mov    ecx,esi
c0024b60:	d3 ea                	shr    edx,cl
c0024b62:	31 c0                	xor    eax,eax
c0024b64:	eb 0d                	jmp    c0024b73 <__divdf3+0x32f>
c0024b66:	b8 ff 07 00 00       	mov    eax,0x7ff
c0024b6b:	eb 02                	jmp    c0024b6f <__divdf3+0x32b>
c0024b6d:	31 c0                	xor    eax,eax
c0024b6f:	31 db                	xor    ebx,ebx
c0024b71:	31 d2                	xor    edx,edx
c0024b73:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0024b76:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0024b79:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0024b7f:	09 c8                	or     eax,ecx
c0024b81:	c1 e0 14             	shl    eax,0x14
c0024b84:	89 d1                	mov    ecx,edx
c0024b86:	c1 e9 0b             	shr    ecx,0xb
c0024b89:	09 c8                	or     eax,ecx
c0024b8b:	89 c6                	mov    esi,eax
c0024b8d:	89 d9                	mov    ecx,ebx
c0024b8f:	c1 e9 0b             	shr    ecx,0xb
c0024b92:	c1 e2 15             	shl    edx,0x15
c0024b95:	09 ca                	or     edx,ecx
c0024b97:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0024b9d:	0f 95 c0             	setne  al
c0024ba0:	09 c1                	or     ecx,eax
c0024ba2:	83 e1 01             	and    ecx,0x1
c0024ba5:	c1 eb 0a             	shr    ebx,0xa
c0024ba8:	21 cb                	and    ebx,ecx
c0024baa:	01 d3                	add    ebx,edx
c0024bac:	89 d8                	mov    eax,ebx
c0024bae:	83 d6 00             	adc    esi,0x0
c0024bb1:	89 f2                	mov    edx,esi
c0024bb3:	89 c7                	mov    edi,eax
c0024bb5:	89 d1                	mov    ecx,edx
c0024bb7:	89 f8                	mov    eax,edi
c0024bb9:	89 ca                	mov    edx,ecx
c0024bbb:	83 c4 2c             	add    esp,0x2c
c0024bbe:	5b                   	pop    ebx
c0024bbf:	5e                   	pop    esi
c0024bc0:	5f                   	pop    edi
c0024bc1:	5d                   	pop    ebp
c0024bc2:	c3                   	ret    

c0024bc3 <__floatsidf>:
c0024bc3:	55                   	push   ebp
c0024bc4:	89 e5                	mov    ebp,esp
c0024bc6:	56                   	push   esi
c0024bc7:	53                   	push   ebx
c0024bc8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024bcb:	85 db                	test   ebx,ebx
c0024bcd:	7e 15                	jle    c0024be4 <__floatsidf+0x21>
c0024bcf:	0f bd cb             	bsr    ecx,ebx
c0024bd2:	83 f1 1f             	xor    ecx,0x1f
c0024bd5:	d3 e3                	shl    ebx,cl
c0024bd7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024bdd:	b8 1e 04 00 00       	mov    eax,0x41e
c0024be2:	eb 21                	jmp    c0024c05 <__floatsidf+0x42>
c0024be4:	b8 00 00 00 00       	mov    eax,0x0
c0024be9:	ba 00 00 00 00       	mov    edx,0x0
c0024bee:	74 2a                	je     c0024c1a <__floatsidf+0x57>
c0024bf0:	f7 db                	neg    ebx
c0024bf2:	0f bd cb             	bsr    ecx,ebx
c0024bf5:	83 f1 1f             	xor    ecx,0x1f
c0024bf8:	d3 e3                	shl    ebx,cl
c0024bfa:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024c00:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0024c05:	29 c8                	sub    eax,ecx
c0024c07:	c1 e0 14             	shl    eax,0x14
c0024c0a:	89 c1                	mov    ecx,eax
c0024c0c:	89 de                	mov    esi,ebx
c0024c0e:	c1 ee 0b             	shr    esi,0xb
c0024c11:	09 f1                	or     ecx,esi
c0024c13:	89 ca                	mov    edx,ecx
c0024c15:	c1 e3 15             	shl    ebx,0x15
c0024c18:	89 d8                	mov    eax,ebx
c0024c1a:	5b                   	pop    ebx
c0024c1b:	5e                   	pop    esi
c0024c1c:	5d                   	pop    ebp
c0024c1d:	c3                   	ret    

c0024c1e <__floatunsidf>:
c0024c1e:	55                   	push   ebp
c0024c1f:	89 e5                	mov    ebp,esp
c0024c21:	56                   	push   esi
c0024c22:	53                   	push   ebx
c0024c23:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024c26:	85 db                	test   ebx,ebx
c0024c28:	74 2a                	je     c0024c54 <__floatunsidf+0x36>
c0024c2a:	0f bd cb             	bsr    ecx,ebx
c0024c2d:	83 f1 1f             	xor    ecx,0x1f
c0024c30:	d3 e3                	shl    ebx,cl
c0024c32:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024c38:	b8 1e 04 00 00       	mov    eax,0x41e
c0024c3d:	29 c8                	sub    eax,ecx
c0024c3f:	c1 e0 14             	shl    eax,0x14
c0024c42:	89 c1                	mov    ecx,eax
c0024c44:	89 de                	mov    esi,ebx
c0024c46:	c1 ee 0b             	shr    esi,0xb
c0024c49:	09 f1                	or     ecx,esi
c0024c4b:	89 ca                	mov    edx,ecx
c0024c4d:	c1 e3 15             	shl    ebx,0x15
c0024c50:	89 d8                	mov    eax,ebx
c0024c52:	eb 04                	jmp    c0024c58 <__floatunsidf+0x3a>
c0024c54:	31 c0                	xor    eax,eax
c0024c56:	31 d2                	xor    edx,edx
c0024c58:	5b                   	pop    ebx
c0024c59:	5e                   	pop    esi
c0024c5a:	5d                   	pop    ebp
c0024c5b:	c3                   	ret    

c0024c5c <__fixdfsi>:
c0024c5c:	55                   	push   ebp
c0024c5d:	89 e5                	mov    ebp,esp
c0024c5f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024c62:	89 d1                	mov    ecx,edx
c0024c64:	c1 e1 0b             	shl    ecx,0xb
c0024c67:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024c6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024c70:	c1 e8 15             	shr    eax,0x15
c0024c73:	09 c1                	or     ecx,eax
c0024c75:	c1 fa 14             	sar    edx,0x14
c0024c78:	78 1f                	js     c0024c99 <__fixdfsi+0x3d>
c0024c7a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0024c80:	31 c0                	xor    eax,eax
c0024c82:	83 fa 1e             	cmp    edx,0x1e
c0024c85:	77 40                	ja     c0024cc7 <__fixdfsi+0x6b>
c0024c87:	89 c8                	mov    eax,ecx
c0024c89:	0d 00 00 00 80       	or     eax,0x80000000
c0024c8e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024c93:	29 d1                	sub    ecx,edx
c0024c95:	d3 e8                	shr    eax,cl
c0024c97:	eb 2e                	jmp    c0024cc7 <__fixdfsi+0x6b>
c0024c99:	31 c0                	xor    eax,eax
c0024c9b:	81 c2 01 04 00 00    	add    edx,0x401
c0024ca1:	78 24                	js     c0024cc7 <__fixdfsi+0x6b>
c0024ca3:	83 fa 1e             	cmp    edx,0x1e
c0024ca6:	7e 09                	jle    c0024cb1 <__fixdfsi+0x55>
c0024ca8:	83 fa 1f             	cmp    edx,0x1f
c0024cab:	75 18                	jne    c0024cc5 <__fixdfsi+0x69>
c0024cad:	85 c9                	test   ecx,ecx
c0024caf:	75 14                	jne    c0024cc5 <__fixdfsi+0x69>
c0024cb1:	89 c8                	mov    eax,ecx
c0024cb3:	0d 00 00 00 80       	or     eax,0x80000000
c0024cb8:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024cbd:	29 d1                	sub    ecx,edx
c0024cbf:	d3 e8                	shr    eax,cl
c0024cc1:	f7 d8                	neg    eax
c0024cc3:	eb 02                	jmp    c0024cc7 <__fixdfsi+0x6b>
c0024cc5:	31 c0                	xor    eax,eax
c0024cc7:	5d                   	pop    ebp
c0024cc8:	c3                   	ret    

c0024cc9 <__fixunsdfsi>:
c0024cc9:	55                   	push   ebp
c0024cca:	89 e5                	mov    ebp,esp
c0024ccc:	53                   	push   ebx
c0024ccd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024cd0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024cd3:	89 d3                	mov    ebx,edx
c0024cd5:	c1 fb 14             	sar    ebx,0x14
c0024cd8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0024cde:	31 c0                	xor    eax,eax
c0024ce0:	83 fb 1f             	cmp    ebx,0x1f
c0024ce3:	77 1d                	ja     c0024d02 <__fixunsdfsi+0x39>
c0024ce5:	89 d0                	mov    eax,edx
c0024ce7:	c1 e0 0b             	shl    eax,0xb
c0024cea:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024cef:	c1 e9 15             	shr    ecx,0x15
c0024cf2:	09 c8                	or     eax,ecx
c0024cf4:	0d 00 00 00 80       	or     eax,0x80000000
c0024cf9:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024cfe:	29 d9                	sub    ecx,ebx
c0024d00:	d3 e8                	shr    eax,cl
c0024d02:	5b                   	pop    ebx
c0024d03:	5d                   	pop    ebp
c0024d04:	c3                   	ret    

c0024d05 <__cmpdf2>:
c0024d05:	55                   	push   ebp
c0024d06:	89 e5                	mov    ebp,esp
c0024d08:	57                   	push   edi
c0024d09:	56                   	push   esi
c0024d0a:	53                   	push   ebx
c0024d0b:	83 ec 0c             	sub    esp,0xc
c0024d0e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0024d11:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024d14:	89 ca                	mov    edx,ecx
c0024d16:	c1 ea 14             	shr    edx,0x14
c0024d19:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0024d1f:	89 cb                	mov    ebx,ecx
c0024d21:	c1 fb 1f             	sar    ebx,0x1f
c0024d24:	31 da                	xor    edx,ebx
c0024d26:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024d29:	89 df                	mov    edi,ebx
c0024d2b:	c1 e7 0b             	shl    edi,0xb
c0024d2e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024d31:	c1 e1 0b             	shl    ecx,0xb
c0024d34:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024d3a:	c1 eb 15             	shr    ebx,0x15
c0024d3d:	09 d9                	or     ecx,ebx
c0024d3f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0024d42:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0024d45:	89 ce                	mov    esi,ecx
c0024d47:	c1 ee 14             	shr    esi,0x14
c0024d4a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0024d50:	89 cb                	mov    ebx,ecx
c0024d52:	c1 fb 1f             	sar    ebx,0x1f
c0024d55:	31 de                	xor    esi,ebx
c0024d57:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0024d5a:	89 df                	mov    edi,ebx
c0024d5c:	c1 e7 0b             	shl    edi,0xb
c0024d5f:	c1 e1 0b             	shl    ecx,0xb
c0024d62:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024d68:	c1 eb 15             	shr    ebx,0x15
c0024d6b:	09 d9                	or     ecx,ebx
c0024d6d:	89 d3                	mov    ebx,edx
c0024d6f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0024d75:	43                   	inc    ebx
c0024d76:	83 fb 01             	cmp    ebx,0x1
c0024d79:	77 08                	ja     c0024d83 <__cmpdf2+0x7e>
c0024d7b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024d7e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0024d81:	75 68                	jne    c0024deb <__cmpdf2+0xe6>
c0024d83:	89 f3                	mov    ebx,esi
c0024d85:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0024d8b:	43                   	inc    ebx
c0024d8c:	83 fb 01             	cmp    ebx,0x1
c0024d8f:	77 06                	ja     c0024d97 <__cmpdf2+0x92>
c0024d91:	89 fb                	mov    ebx,edi
c0024d93:	09 cb                	or     ebx,ecx
c0024d95:	75 54                	jne    c0024deb <__cmpdf2+0xe6>
c0024d97:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024d9a:	09 f8                	or     eax,edi
c0024d9c:	09 c8                	or     eax,ecx
c0024d9e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0024da1:	75 12                	jne    c0024db5 <__cmpdf2+0xb0>
c0024da3:	8d 42 01             	lea    eax,[edx+0x1]
c0024da6:	83 f8 01             	cmp    eax,0x1
c0024da9:	77 0a                	ja     c0024db5 <__cmpdf2+0xb0>
c0024dab:	8d 5e 01             	lea    ebx,[esi+0x1]
c0024dae:	31 c0                	xor    eax,eax
c0024db0:	83 fb 01             	cmp    ebx,0x1
c0024db3:	76 36                	jbe    c0024deb <__cmpdf2+0xe6>
c0024db5:	b8 01 00 00 00       	mov    eax,0x1
c0024dba:	39 f2                	cmp    edx,esi
c0024dbc:	7f 2d                	jg     c0024deb <__cmpdf2+0xe6>
c0024dbe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0024dc3:	7c 26                	jl     c0024deb <__cmpdf2+0xe6>
c0024dc5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0024dc8:	77 07                	ja     c0024dd1 <__cmpdf2+0xcc>
c0024dca:	72 16                	jb     c0024de2 <__cmpdf2+0xdd>
c0024dcc:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0024dcf:	76 0a                	jbe    c0024ddb <__cmpdf2+0xd6>
c0024dd1:	89 d0                	mov    eax,edx
c0024dd3:	c1 f8 1f             	sar    eax,0x1f
c0024dd6:	83 c8 01             	or     eax,0x1
c0024dd9:	eb 10                	jmp    c0024deb <__cmpdf2+0xe6>
c0024ddb:	b8 00 00 00 00       	mov    eax,0x0
c0024de0:	73 09                	jae    c0024deb <__cmpdf2+0xe6>
c0024de2:	89 d0                	mov    eax,edx
c0024de4:	c1 f8 1f             	sar    eax,0x1f
c0024de7:	83 e0 02             	and    eax,0x2
c0024dea:	48                   	dec    eax
c0024deb:	83 c4 0c             	add    esp,0xc
c0024dee:	5b                   	pop    ebx
c0024def:	5e                   	pop    esi
c0024df0:	5f                   	pop    edi
c0024df1:	5d                   	pop    ebp
c0024df2:	c3                   	ret    

c0024df3 <__eqdf2>:
c0024df3:	55                   	push   ebp
c0024df4:	89 e5                	mov    ebp,esp
c0024df6:	50                   	push   eax
c0024df7:	6a 01                	push   0x1
c0024df9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0024dfc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0024dff:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024e02:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024e05:	e8 fb fe ff ff       	call   c0024d05 <__cmpdf2>
c0024e0a:	83 c4 18             	add    esp,0x18
c0024e0d:	c9                   	leave  
c0024e0e:	c3                   	ret    

c0024e0f <__nedf2>:
c0024e0f:	eb e2                	jmp    c0024df3 <__eqdf2>

c0024e11 <__gtdf2>:
c0024e11:	55                   	push   ebp
c0024e12:	89 e5                	mov    ebp,esp
c0024e14:	50                   	push   eax
c0024e15:	6a ff                	push   0xffffffff
c0024e17:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0024e1a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0024e1d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024e20:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024e23:	e8 dd fe ff ff       	call   c0024d05 <__cmpdf2>
c0024e28:	83 c4 18             	add    esp,0x18
c0024e2b:	c9                   	leave  
c0024e2c:	c3                   	ret    

c0024e2d <__gedf2>:
c0024e2d:	eb e2                	jmp    c0024e11 <__gtdf2>

c0024e2f <__ltdf2>:
c0024e2f:	eb c2                	jmp    c0024df3 <__eqdf2>

c0024e31 <__ledf2>:
c0024e31:	eb c0                	jmp    c0024df3 <__eqdf2>

c0024e33 <__truncdfsf2>:
c0024e33:	55                   	push   ebp
c0024e34:	89 e5                	mov    ebp,esp
c0024e36:	57                   	push   edi
c0024e37:	56                   	push   esi
c0024e38:	53                   	push   ebx
c0024e39:	83 ec 0c             	sub    esp,0xc
c0024e3c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024e3f:	89 d1                	mov    ecx,edx
c0024e41:	c1 f9 14             	sar    ecx,0x14
c0024e44:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024e47:	89 df                	mov    edi,ebx
c0024e49:	c1 e7 0b             	shl    edi,0xb
c0024e4c:	89 d0                	mov    eax,edx
c0024e4e:	c1 e0 0b             	shl    eax,0xb
c0024e51:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024e56:	c1 eb 15             	shr    ebx,0x15
c0024e59:	09 d8                	or     eax,ebx
c0024e5b:	89 cb                	mov    ebx,ecx
c0024e5d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024e63:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0024e69:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0024e6f:	0f 86 9e 00 00 00    	jbe    c0024f13 <__truncdfsf2+0xe0>
c0024e75:	85 db                	test   ebx,ebx
c0024e77:	75 0a                	jne    c0024e83 <__truncdfsf2+0x50>
c0024e79:	c1 fa 17             	sar    edx,0x17
c0024e7c:	30 d2                	xor    dl,dl
c0024e7e:	e9 84 00 00 00       	jmp    c0024f07 <__truncdfsf2+0xd4>
c0024e83:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0024e89:	83 fe 83             	cmp    esi,0xffffff83
c0024e8c:	7d 4b                	jge    c0024ed9 <__truncdfsf2+0xa6>
c0024e8e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0024e93:	29 f1                	sub    ecx,esi
c0024e95:	83 f9 1f             	cmp    ecx,0x1f
c0024e98:	7f 6b                	jg     c0024f05 <__truncdfsf2+0xd2>
c0024e9a:	0d 00 00 00 80       	or     eax,0x80000000
c0024e9f:	89 c3                	mov    ebx,eax
c0024ea1:	d3 eb                	shr    ebx,cl
c0024ea3:	be 01 00 00 00       	mov    esi,0x1
c0024ea8:	d3 e6                	shl    esi,cl
c0024eaa:	4e                   	dec    esi
c0024eab:	21 f0                	and    eax,esi
c0024ead:	09 f8                	or     eax,edi
c0024eaf:	0f 95 c0             	setne  al
c0024eb2:	0f b6 c0             	movzx  eax,al
c0024eb5:	09 c3                	or     ebx,eax
c0024eb7:	89 d9                	mov    ecx,ebx
c0024eb9:	c1 e9 08             	shr    ecx,0x8
c0024ebc:	f6 c3 7f             	test   bl,0x7f
c0024ebf:	0f 95 c0             	setne  al
c0024ec2:	09 c8                	or     eax,ecx
c0024ec4:	83 e0 01             	and    eax,0x1
c0024ec7:	c1 eb 07             	shr    ebx,0x7
c0024eca:	21 c3                	and    ebx,eax
c0024ecc:	81 e2 00 00 00 80    	and    edx,0x80000000
c0024ed2:	09 d1                	or     ecx,edx
c0024ed4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0024ed7:	eb 76                	jmp    c0024f4f <__truncdfsf2+0x11c>
c0024ed9:	83 c6 80             	add    esi,0xffffff80
c0024edc:	7e 1d                	jle    c0024efb <__truncdfsf2+0xc8>
c0024ede:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0024ee4:	75 0b                	jne    c0024ef1 <__truncdfsf2+0xbe>
c0024ee6:	09 f8                	or     eax,edi
c0024ee8:	74 09                	je     c0024ef3 <__truncdfsf2+0xc0>
c0024eea:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0024eef:	eb 02                	jmp    c0024ef3 <__truncdfsf2+0xc0>
c0024ef1:	31 c0                	xor    eax,eax
c0024ef3:	c1 fa 17             	sar    edx,0x17
c0024ef6:	80 ca ff             	or     dl,0xff
c0024ef9:	eb 0e                	jmp    c0024f09 <__truncdfsf2+0xd6>
c0024efb:	c1 fa 1f             	sar    edx,0x1f
c0024efe:	c1 e2 08             	shl    edx,0x8
c0024f01:	09 ca                	or     edx,ecx
c0024f03:	eb 04                	jmp    c0024f09 <__truncdfsf2+0xd6>
c0024f05:	31 d2                	xor    edx,edx
c0024f07:	31 c0                	xor    eax,eax
c0024f09:	c1 e2 17             	shl    edx,0x17
c0024f0c:	c1 e8 08             	shr    eax,0x8
c0024f0f:	09 d0                	or     eax,edx
c0024f11:	eb 3c                	jmp    c0024f4f <__truncdfsf2+0x11c>
c0024f13:	81 e9 80 03 00 00    	sub    ecx,0x380
c0024f19:	89 ca                	mov    edx,ecx
c0024f1b:	c1 fa 0b             	sar    edx,0xb
c0024f1e:	c1 e2 08             	shl    edx,0x8
c0024f21:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0024f24:	31 db                	xor    ebx,ebx
c0024f26:	85 ff                	test   edi,edi
c0024f28:	0f 95 c3             	setne  bl
c0024f2b:	09 d8                	or     eax,ebx
c0024f2d:	89 c3                	mov    ebx,eax
c0024f2f:	c1 eb 08             	shr    ebx,0x8
c0024f32:	a8 7f                	test   al,0x7f
c0024f34:	0f 95 c2             	setne  dl
c0024f37:	89 d6                	mov    esi,edx
c0024f39:	09 de                	or     esi,ebx
c0024f3b:	83 e6 01             	and    esi,0x1
c0024f3e:	c1 e8 07             	shr    eax,0x7
c0024f41:	21 f0                	and    eax,esi
c0024f43:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0024f46:	09 ca                	or     edx,ecx
c0024f48:	c1 e2 17             	shl    edx,0x17
c0024f4b:	09 da                	or     edx,ebx
c0024f4d:	01 d0                	add    eax,edx
c0024f4f:	83 c4 0c             	add    esp,0xc
c0024f52:	5b                   	pop    ebx
c0024f53:	5e                   	pop    esi
c0024f54:	5f                   	pop    edi
c0024f55:	5d                   	pop    ebp
c0024f56:	c3                   	ret    

c0024f57 <__extendsfdf2>:
c0024f57:	55                   	push   ebp
c0024f58:	89 e5                	mov    ebp,esp
c0024f5a:	57                   	push   edi
c0024f5b:	56                   	push   esi
c0024f5c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0024f5f:	89 d1                	mov    ecx,edx
c0024f61:	c1 f9 17             	sar    ecx,0x17
c0024f64:	c1 e2 08             	shl    edx,0x8
c0024f67:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0024f6d:	89 c8                	mov    eax,ecx
c0024f6f:	80 e4 f8             	and    ah,0xf8
c0024f72:	8d 71 01             	lea    esi,[ecx+0x1]
c0024f75:	81 e6 fe 00 00 00    	and    esi,0xfe
c0024f7b:	75 27                	jne    c0024fa4 <__extendsfdf2+0x4d>
c0024f7d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0024f83:	75 18                	jne    c0024f9d <__extendsfdf2+0x46>
c0024f85:	85 d2                	test   edx,edx
c0024f87:	74 20                	je     c0024fa9 <__extendsfdf2+0x52>
c0024f89:	41                   	inc    ecx
c0024f8a:	01 d2                	add    edx,edx
c0024f8c:	79 fb                	jns    c0024f89 <__extendsfdf2+0x32>
c0024f8e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0024f94:	29 c8                	sub    eax,ecx
c0024f96:	05 81 03 00 00       	add    eax,0x381
c0024f9b:	eb 0c                	jmp    c0024fa9 <__extendsfdf2+0x52>
c0024f9d:	05 00 07 00 00       	add    eax,0x700
c0024fa2:	eb 05                	jmp    c0024fa9 <__extendsfdf2+0x52>
c0024fa4:	05 80 03 00 00       	add    eax,0x380
c0024fa9:	c1 e0 14             	shl    eax,0x14
c0024fac:	89 c1                	mov    ecx,eax
c0024fae:	89 d0                	mov    eax,edx
c0024fb0:	c1 e8 0b             	shr    eax,0xb
c0024fb3:	09 c1                	or     ecx,eax
c0024fb5:	c1 e2 15             	shl    edx,0x15
c0024fb8:	89 d0                	mov    eax,edx
c0024fba:	89 ca                	mov    edx,ecx
c0024fbc:	5e                   	pop    esi
c0024fbd:	5f                   	pop    edi
c0024fbe:	5d                   	pop    ebp
c0024fbf:	c3                   	ret    

c0024fc0 <fabs>:
c0024fc0:	83 ec 0c             	sub    esp,0xc
c0024fc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fc7:	89 04 24             	mov    DWORD PTR [esp],eax
c0024fca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024fce:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024fd3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024fd7:	dd 04 24             	fld    QWORD PTR [esp]
c0024fda:	83 c4 0c             	add    esp,0xc
c0024fdd:	c3                   	ret    
c0024fde:	66 90                	xchg   ax,ax

c0024fe0 <lrint>:
c0024fe0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0024fe4:	83 ec 04             	sub    esp,0x4
c0024fe7:	db 1c 24             	fistp  DWORD PTR [esp]
c0024fea:	58                   	pop    eax
c0024feb:	c3                   	ret    

c0024fec <lrintf>:
c0024fec:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0024ff0:	83 ec 04             	sub    esp,0x4
c0024ff3:	db 1c 24             	fistp  DWORD PTR [esp]
c0024ff6:	58                   	pop    eax
c0024ff7:	c3                   	ret    

Disassembly of section .init:

c0024ff8 <_init>:
c0024ff8:	55                   	push   ebp
c0024ff9:	89 e5                	mov    ebp,esp
c0024ffb:	e8 18 b1 fd ff       	call   c0000118 <frame_dummy>
c0025000:	e8 63 e0 ff ff       	call   c0023068 <__do_global_ctors_aux>
c0025005:	5d                   	pop    ebp
c0025006:	c3                   	ret    

Disassembly of section .fini:

c0025007 <_fini>:
c0025007:	55                   	push   ebp
c0025008:	89 e5                	mov    ebp,esp
c002500a:	e8 99 b0 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002500f:	5d                   	pop    ebp
c0025010:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0025012 <Computer::~Computer()>:
c0025012:	83 ec 0c             	sub    esp,0xc
c0025015:	ba f0 6a 02 c0       	mov    edx,0xc0026af0
c002501a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002501e:	89 10                	mov    DWORD PTR [eax],edx
c0025020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025024:	83 ec 0c             	sub    esp,0xc
c0025027:	50                   	push   eax
c0025028:	e8 d1 e4 fe ff       	call   c00134fe <Device::~Device()>
c002502d:	83 c4 10             	add    esp,0x10
c0025030:	90                   	nop
c0025031:	83 c4 0c             	add    esp,0xc
c0025034:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0025036 <Computer::~Computer()>:
c0025036:	83 ec 0c             	sub    esp,0xc
c0025039:	83 ec 0c             	sub    esp,0xc
c002503c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025040:	e8 cd ff ff ff       	call   c0025012 <Computer::~Computer()>
c0025045:	83 c4 10             	add    esp,0x10
c0025048:	83 ec 08             	sub    esp,0x8
c002504b:	68 ec 01 00 00       	push   0x1ec
c0025050:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025054:	e8 18 d1 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0025059:	83 c4 10             	add    esp,0x10
c002505c:	83 c4 0c             	add    esp,0xc
c002505f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0025060 <idleCommon()>:
c0025060:	83 ec 0c             	sub    esp,0xc
c0025063:	e8 da 68 ff ff       	call   c001b942 <lockScheduler()>
c0025068:	e8 09 6c ff ff       	call   c001bc76 <schedule()>
c002506d:	83 c4 0c             	add    esp,0xc
c0025070:	e9 cf 68 ff ff       	jmp    c001b944 <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c0025075 <CPU::readCR3()>:
c0025075:	83 ec 10             	sub    esp,0x10
c0025078:	0f 20 d8             	mov    eax,cr3
c002507b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002507f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025083:	83 c4 10             	add    esp,0x10
c0025086:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c0025087 <CPU::writeCR3(unsigned long)>:
c0025087:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002508b:	0f 22 d8             	mov    cr3,eax
c002508e:	90                   	nop
c002508f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0025090 <LinkedList<UnixFile>::~LinkedList()>:
c0025090:	90                   	nop
c0025091:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0025092 <LinkedList<UnixFile>::LinkedList()>:
c0025092:	83 ec 0c             	sub    esp,0xc
c0025095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025099:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002509f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00250aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250ae:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00250b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250b9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00250bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250c3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00250ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250ce:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00250d5:	83 ec 0c             	sub    esp,0xc
c00250d8:	68 66 6d 02 c0       	push   0xc0026d66
c00250dd:	e8 6f d1 fe ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00250e2:	83 c4 10             	add    esp,0x10
c00250e5:	90                   	nop
c00250e6:	83 c4 0c             	add    esp,0xc
c00250e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00250ea <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00250ea:	83 ec 0c             	sub    esp,0xc
c00250ed:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00250f2:	75 10                	jne    c0025104 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00250f4:	83 ec 0c             	sub    esp,0xc
c00250f7:	68 80 6d 02 c0       	push   0xc0026d80
c00250fc:	e8 ee 38 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c0025101:	83 c4 10             	add    esp,0x10
c0025104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025108:	8b 00                	mov    eax,DWORD PTR [eax]
c002510a:	85 c0                	test   eax,eax
c002510c:	74 34                	je     c0025142 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002510e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025112:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025115:	85 c0                	test   eax,eax
c0025117:	74 29                	je     c0025142 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0025119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002511d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025120:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025124:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002512b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002512f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025136:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025139:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025140:	eb 65                	jmp    c00251a7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025146:	8b 00                	mov    eax,DWORD PTR [eax]
c0025148:	85 c0                	test   eax,eax
c002514a:	75 4b                	jne    c0025197 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002514c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025150:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025153:	85 c0                	test   eax,eax
c0025155:	75 40                	jne    c0025197 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0025157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002515b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002515f:	89 10                	mov    DWORD PTR [eax],edx
c0025161:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025165:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025169:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002516c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025170:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025173:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002517a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002517e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025181:	85 c0                	test   eax,eax
c0025183:	74 22                	je     c00251a7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025185:	83 ec 0c             	sub    esp,0xc
c0025188:	68 a2 6d 02 c0       	push   0xc0026da2
c002518d:	e8 5d 38 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c0025192:	83 c4 10             	add    esp,0x10
c0025195:	eb 10                	jmp    c00251a7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025197:	83 ec 0c             	sub    esp,0xc
c002519a:	68 ac 6d 02 c0       	push   0xc0026dac
c002519f:	e8 4b 38 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c00251a4:	83 c4 10             	add    esp,0x10
c00251a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251ab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00251ae:	8d 50 01             	lea    edx,[eax+0x1]
c00251b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251b5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00251b8:	90                   	nop
c00251b9:	83 c4 0c             	add    esp,0xc
c00251bc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00251be <LinkedList<UnixFile>::getFirstElement()>:
c00251be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00251c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00251c4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00251c6 <LinkedList<UnixFile>::removeFirst()>:
c00251c6:	83 ec 0c             	sub    esp,0xc
c00251c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00251cf:	85 c0                	test   eax,eax
c00251d1:	75 12                	jne    c00251e5 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00251d3:	83 ec 0c             	sub    esp,0xc
c00251d6:	68 b8 6d 02 c0       	push   0xc0026db8
c00251db:	e8 0f 38 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c00251e0:	83 c4 10             	add    esp,0x10
c00251e3:	eb 7e                	jmp    c0025263 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00251e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00251ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00251ef:	85 c0                	test   eax,eax
c00251f1:	74 10                	je     c0025203 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00251f3:	83 ec 0c             	sub    esp,0xc
c00251f6:	68 03 6e 02 c0       	push   0xc0026e03
c00251fb:	e8 ef 37 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c0025200:	83 c4 10             	add    esp,0x10
c0025203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025207:	8b 00                	mov    eax,DWORD PTR [eax]
c0025209:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002520c:	85 c0                	test   eax,eax
c002520e:	75 33                	jne    c0025243 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0025210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025214:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002521a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002521e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025229:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002522c:	83 f8 01             	cmp    eax,0x1
c002522f:	74 21                	je     c0025252 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0025231:	83 ec 0c             	sub    esp,0xc
c0025234:	68 dc 6d 02 c0       	push   0xc0026ddc
c0025239:	e8 b1 37 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c002523e:	83 c4 10             	add    esp,0x10
c0025241:	eb 0f                	jmp    c0025252 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0025243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025247:	8b 00                	mov    eax,DWORD PTR [eax]
c0025249:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002524c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025250:	89 10                	mov    DWORD PTR [eax],edx
c0025252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025256:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025259:	8d 50 ff             	lea    edx,[eax-0x1]
c002525c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025260:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025263:	83 c4 0c             	add    esp,0xc
c0025266:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0025268 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0025268:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002526c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002526f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0025270 <DriverlessDevice::~DriverlessDevice()>:
c0025270:	ba 84 74 02 c0       	mov    edx,0xc0027484
c0025275:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025279:	89 10                	mov    DWORD PTR [eax],edx
c002527b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002527f:	50                   	push   eax
c0025280:	e8 79 e2 fe ff       	call   c00134fe <Device::~Device()>
c0025285:	83 c4 04             	add    esp,0x4
c0025288:	90                   	nop
c0025289:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002528a <DriverlessDevice::~DriverlessDevice()>:
c002528a:	83 ec 0c             	sub    esp,0xc
c002528d:	83 ec 0c             	sub    esp,0xc
c0025290:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025294:	e8 d7 ff ff ff       	call   c0025270 <DriverlessDevice::~DriverlessDevice()>
c0025299:	83 c4 10             	add    esp,0x10
c002529c:	83 ec 08             	sub    esp,0x8
c002529f:	68 58 01 00 00       	push   0x158
c00252a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00252a8:	e8 c4 ce fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c00252ad:	83 c4 10             	add    esp,0x10
c00252b0:	83 c4 0c             	add    esp,0xc
c00252b3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00252b4 <LinkedList<Device>::addElement(Device*)>:
c00252b4:	83 ec 0c             	sub    esp,0xc
c00252b7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00252bc:	75 10                	jne    c00252ce <LinkedList<Device>::addElement(Device*)+0x1a>
c00252be:	83 ec 0c             	sub    esp,0xc
c00252c1:	68 80 6d 02 c0       	push   0xc0026d80
c00252c6:	e8 24 37 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c00252cb:	83 c4 10             	add    esp,0x10
c00252ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00252d4:	85 c0                	test   eax,eax
c00252d6:	74 3a                	je     c0025312 <LinkedList<Device>::addElement(Device*)+0x5e>
c00252d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00252df:	85 c0                	test   eax,eax
c00252e1:	74 2f                	je     c0025312 <LinkedList<Device>::addElement(Device*)+0x5e>
c00252e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00252ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00252ee:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00252f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00252fc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00252ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025303:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025306:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0025310:	eb 68                	jmp    c002537a <LinkedList<Device>::addElement(Device*)+0xc6>
c0025312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025316:	8b 00                	mov    eax,DWORD PTR [eax]
c0025318:	85 c0                	test   eax,eax
c002531a:	75 4e                	jne    c002536a <LinkedList<Device>::addElement(Device*)+0xb6>
c002531c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025320:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025323:	85 c0                	test   eax,eax
c0025325:	75 43                	jne    c002536a <LinkedList<Device>::addElement(Device*)+0xb6>
c0025327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002532b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002532f:	89 10                	mov    DWORD PTR [eax],edx
c0025331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025335:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025339:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002533c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025340:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025343:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002534d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025351:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025354:	85 c0                	test   eax,eax
c0025356:	74 22                	je     c002537a <LinkedList<Device>::addElement(Device*)+0xc6>
c0025358:	83 ec 0c             	sub    esp,0xc
c002535b:	68 a2 6d 02 c0       	push   0xc0026da2
c0025360:	e8 8a 36 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c0025365:	83 c4 10             	add    esp,0x10
c0025368:	eb 10                	jmp    c002537a <LinkedList<Device>::addElement(Device*)+0xc6>
c002536a:	83 ec 0c             	sub    esp,0xc
c002536d:	68 ac 6d 02 c0       	push   0xc0026dac
c0025372:	e8 78 36 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c0025377:	83 c4 10             	add    esp,0x10
c002537a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002537e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025381:	8d 50 01             	lea    edx,[eax+0x1]
c0025384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025388:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002538b:	90                   	nop
c002538c:	83 c4 0c             	add    esp,0xc
c002538f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0025390 <LinkedList<Device>::LinkedList()>:
c0025390:	83 ec 0c             	sub    esp,0xc
c0025393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025397:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002539d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253a1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00253a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253ac:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00253b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253b7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00253bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00253c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253cc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00253d3:	83 ec 0c             	sub    esp,0xc
c00253d6:	68 66 6d 02 c0       	push   0xc0026d66
c00253db:	e8 71 ce fe ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00253e0:	83 c4 10             	add    esp,0x10
c00253e3:	90                   	nop
c00253e4:	83 c4 0c             	add    esp,0xc
c00253e7:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c00253e8 <CPU::readCR0()>:
c00253e8:	83 ec 10             	sub    esp,0x10
c00253eb:	0f 20 c0             	mov    eax,cr0
c00253ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00253f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00253f6:	83 c4 10             	add    esp,0x10
c00253f9:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c00253fa <CPU::writeCR0(unsigned long)>:
c00253fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00253fe:	0f 22 c0             	mov    cr0,eax
c0025401:	90                   	nop
c0025402:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c0025403 <CPU::readDR0()>:
c0025403:	83 ec 10             	sub    esp,0x10
c0025406:	0f 21 c0             	mov    eax,db0
c0025409:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002540d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025411:	83 c4 10             	add    esp,0x10
c0025414:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c0025415 <CPU::readDR1()>:
c0025415:	83 ec 10             	sub    esp,0x10
c0025418:	0f 21 c8             	mov    eax,db1
c002541b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002541f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025423:	83 c4 10             	add    esp,0x10
c0025426:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c0025427 <CPU::readDR2()>:
c0025427:	83 ec 10             	sub    esp,0x10
c002542a:	0f 21 d0             	mov    eax,db2
c002542d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025431:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025435:	83 c4 10             	add    esp,0x10
c0025438:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c0025439 <CPU::readDR3()>:
c0025439:	83 ec 10             	sub    esp,0x10
c002543c:	0f 21 d8             	mov    eax,db3
c002543f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025443:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025447:	83 c4 10             	add    esp,0x10
c002544a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c002544b <CPU::readDR6()>:
c002544b:	83 ec 10             	sub    esp,0x10
c002544e:	0f 21 f0             	mov    eax,db6
c0025451:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025455:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025459:	83 c4 10             	add    esp,0x10
c002545c:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c002545d <CPU::readDR7()>:
c002545d:	83 ec 10             	sub    esp,0x10
c0025460:	0f 21 f8             	mov    eax,db7
c0025463:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025467:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002546b:	83 c4 10             	add    esp,0x10
c002546e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0025470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025474:	8b 00                	mov    eax,DWORD PTR [eax]
c0025476:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0025478 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0025478:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002547c:	8b 00                	mov    eax,DWORD PTR [eax]
c002547e:	85 c0                	test   eax,eax
c0025480:	75 0e                	jne    c0025490 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0025482:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025486:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025489:	85 c0                	test   eax,eax
c002548b:	75 03                	jne    c0025490 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002548d:	b0 01                	mov    al,0x1
c002548f:	c3                   	ret    
c0025490:	b0 00                	mov    al,0x0
c0025492:	90                   	nop
c0025493:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0025494 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0025494:	83 ec 0c             	sub    esp,0xc
c0025497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002549b:	8b 00                	mov    eax,DWORD PTR [eax]
c002549d:	85 c0                	test   eax,eax
c002549f:	75 15                	jne    c00254b6 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00254a1:	83 ec 0c             	sub    esp,0xc
c00254a4:	68 b8 6d 02 c0       	push   0xc0026db8
c00254a9:	e8 41 35 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c00254ae:	83 c4 10             	add    esp,0x10
c00254b1:	e9 88 00 00 00       	jmp    c002553e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00254b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00254bd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00254c0:	85 c0                	test   eax,eax
c00254c2:	0f 95 c0             	setne  al
c00254c5:	84 c0                	test   al,al
c00254c7:	74 10                	je     c00254d9 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00254c9:	83 ec 0c             	sub    esp,0xc
c00254cc:	68 03 6e 02 c0       	push   0xc0026e03
c00254d1:	e8 19 35 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c00254d6:	83 c4 10             	add    esp,0x10
c00254d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00254df:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00254e2:	85 c0                	test   eax,eax
c00254e4:	0f 94 c0             	sete   al
c00254e7:	84 c0                	test   al,al
c00254e9:	74 33                	je     c002551e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00254eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254ef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00254f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025504:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025507:	83 f8 01             	cmp    eax,0x1
c002550a:	74 21                	je     c002552d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002550c:	83 ec 0c             	sub    esp,0xc
c002550f:	68 dc 6d 02 c0       	push   0xc0026ddc
c0025514:	e8 d6 34 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c0025519:	83 c4 10             	add    esp,0x10
c002551c:	eb 0f                	jmp    c002552d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002551e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025522:	8b 00                	mov    eax,DWORD PTR [eax]
c0025524:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0025527:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002552b:	89 10                	mov    DWORD PTR [eax],edx
c002552d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025531:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025534:	8d 50 ff             	lea    edx,[eax-0x1]
c0025537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002553b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002553e:	83 c4 0c             	add    esp,0xc
c0025541:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0025542 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0025542:	83 ec 0c             	sub    esp,0xc
c0025545:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002554a:	75 10                	jne    c002555c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002554c:	83 ec 0c             	sub    esp,0xc
c002554f:	68 80 6d 02 c0       	push   0xc0026d80
c0025554:	e8 96 34 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c0025559:	83 c4 10             	add    esp,0x10
c002555c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025560:	8b 00                	mov    eax,DWORD PTR [eax]
c0025562:	85 c0                	test   eax,eax
c0025564:	74 34                	je     c002559a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0025566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002556a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002556d:	85 c0                	test   eax,eax
c002556f:	74 29                	je     c002559a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0025571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025575:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025578:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002557c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002557f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025583:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025587:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002558a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002558e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025591:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0025598:	eb 65                	jmp    c00255ff <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002559a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002559e:	8b 00                	mov    eax,DWORD PTR [eax]
c00255a0:	85 c0                	test   eax,eax
c00255a2:	75 4b                	jne    c00255ef <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00255a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00255ab:	85 c0                	test   eax,eax
c00255ad:	75 40                	jne    c00255ef <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00255af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00255b7:	89 10                	mov    DWORD PTR [eax],edx
c00255b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00255c1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00255c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00255cb:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00255d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00255d9:	85 c0                	test   eax,eax
c00255db:	74 22                	je     c00255ff <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00255dd:	83 ec 0c             	sub    esp,0xc
c00255e0:	68 a2 6d 02 c0       	push   0xc0026da2
c00255e5:	e8 05 34 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c00255ea:	83 c4 10             	add    esp,0x10
c00255ed:	eb 10                	jmp    c00255ff <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00255ef:	83 ec 0c             	sub    esp,0xc
c00255f2:	68 ac 6d 02 c0       	push   0xc0026dac
c00255f7:	e8 f3 33 ff ff       	call   c00189ef <Krnl::panic(char const*)>
c00255fc:	83 c4 10             	add    esp,0x10
c00255ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025603:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025606:	8d 50 01             	lea    edx,[eax+0x1]
c0025609:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002560d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025610:	90                   	nop
c0025611:	83 c4 0c             	add    esp,0xc
c0025614:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0025616 <ACPI::~ACPI()>:
c0025616:	83 ec 0c             	sub    esp,0xc
c0025619:	ba 14 7c 02 c0       	mov    edx,0xc0027c14
c002561e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025622:	89 10                	mov    DWORD PTR [eax],edx
c0025624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025628:	83 ec 0c             	sub    esp,0xc
c002562b:	50                   	push   eax
c002562c:	e8 cd de fe ff       	call   c00134fe <Device::~Device()>
c0025631:	83 c4 10             	add    esp,0x10
c0025634:	90                   	nop
c0025635:	83 c4 0c             	add    esp,0xc
c0025638:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002563a <ACPI::~ACPI()>:
c002563a:	83 ec 0c             	sub    esp,0xc
c002563d:	83 ec 0c             	sub    esp,0xc
c0025640:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025644:	e8 cd ff ff ff       	call   c0025616 <ACPI::~ACPI()>
c0025649:	83 c4 10             	add    esp,0x10
c002564c:	83 ec 08             	sub    esp,0x8
c002564f:	68 68 22 00 00       	push   0x2268
c0025654:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025658:	e8 14 cb fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c002565d:	83 c4 10             	add    esp,0x10
c0025660:	83 c4 0c             	add    esp,0xc
c0025663:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0025664 <CPU::~CPU()>:
c0025664:	83 ec 0c             	sub    esp,0xc
c0025667:	ba 04 80 02 c0       	mov    edx,0xc0028004
c002566c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025670:	89 10                	mov    DWORD PTR [eax],edx
c0025672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025676:	83 ec 0c             	sub    esp,0xc
c0025679:	50                   	push   eax
c002567a:	e8 7f de fe ff       	call   c00134fe <Device::~Device()>
c002567f:	83 c4 10             	add    esp,0x10
c0025682:	90                   	nop
c0025683:	83 c4 0c             	add    esp,0xc
c0025686:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0025688 <CPU::~CPU()>:
c0025688:	83 ec 0c             	sub    esp,0xc
c002568b:	83 ec 0c             	sub    esp,0xc
c002568e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025692:	e8 cd ff ff ff       	call   c0025664 <CPU::~CPU()>
c0025697:	83 c4 10             	add    esp,0x10
c002569a:	83 ec 08             	sub    esp,0x8
c002569d:	68 98 11 00 00       	push   0x1198
c00256a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00256a6:	e8 c6 ca fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c00256ab:	83 c4 10             	add    esp,0x10
c00256ae:	83 c4 0c             	add    esp,0xc
c00256b1:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c00256b2 <CPU::readCR4()>:
c00256b2:	83 ec 10             	sub    esp,0x10
c00256b5:	0f 20 e0             	mov    eax,cr4
c00256b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00256bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00256c0:	83 c4 10             	add    esp,0x10
c00256c3:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c00256c4 <CPU::writeDR7(unsigned long)>:
c00256c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00256c8:	0f 23 f8             	mov    db7,eax
c00256cb:	90                   	nop
c00256cc:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c00256cd <CPU::writeCR4(unsigned long)>:
c00256cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00256d1:	0f 22 e0             	mov    cr4,eax
c00256d4:	90                   	nop
c00256d5:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c00256d6 <CPU::readCR2()>:
c00256d6:	83 ec 10             	sub    esp,0x10
c00256d9:	0f 20 d0             	mov    eax,cr2
c00256dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00256e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00256e4:	83 c4 10             	add    esp,0x10
c00256e7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00256e8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00256e8:	90                   	nop
c00256e9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00256ea <ThreadControlBlock::ThreadControlBlock()>:
c00256ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00256ee:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00256f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00256f9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0025700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025704:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002570b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002570f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0025716:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002571a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c002571e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025722:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0025726:	90                   	nop
c0025727:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0025728 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0025728:	83 ec 0c             	sub    esp,0xc
c002572b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002572f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025739:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025744:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002574b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002574f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025759:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025764:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002576b:	83 ec 0c             	sub    esp,0xc
c002576e:	68 66 6d 02 c0       	push   0xc0026d66
c0025773:	e8 d9 ca fe ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0025778:	83 c4 10             	add    esp,0x10
c002577b:	90                   	nop
c002577c:	83 c4 0c             	add    esp,0xc
c002577f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0025780 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0025780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025784:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0025787:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0025788 <Vm::_FPUState::_FPUState()>:
c0025788:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002578c:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0025793:	90                   	nop
c0025794:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0025796 <PCI::~PCI()>:
c0025796:	83 ec 0c             	sub    esp,0xc
c0025799:	ba 0c 8d 02 c0       	mov    edx,0xc0028d0c
c002579e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257a2:	89 10                	mov    DWORD PTR [eax],edx
c00257a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257a8:	83 ec 0c             	sub    esp,0xc
c00257ab:	50                   	push   eax
c00257ac:	e8 5d d7 fe ff       	call   c0012f0e <Bus::~Bus()>
c00257b1:	83 c4 10             	add    esp,0x10
c00257b4:	90                   	nop
c00257b5:	83 c4 0c             	add    esp,0xc
c00257b8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00257ba <PCI::~PCI()>:
c00257ba:	83 ec 0c             	sub    esp,0xc
c00257bd:	83 ec 0c             	sub    esp,0xc
c00257c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00257c4:	e8 cd ff ff ff       	call   c0025796 <PCI::~PCI()>
c00257c9:	83 c4 10             	add    esp,0x10
c00257cc:	83 ec 08             	sub    esp,0x8
c00257cf:	68 58 01 00 00       	push   0x158
c00257d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00257d8:	e8 94 c9 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c00257dd:	83 c4 10             	add    esp,0x10
c00257e0:	83 c4 0c             	add    esp,0xc
c00257e3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00257e4 <IDE::~IDE()>:
c00257e4:	83 ec 0c             	sub    esp,0xc
c00257e7:	ba 70 8f 02 c0       	mov    edx,0xc0028f70
c00257ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257f0:	89 10                	mov    DWORD PTR [eax],edx
c00257f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257f6:	83 ec 0c             	sub    esp,0xc
c00257f9:	50                   	push   eax
c00257fa:	e8 15 e2 fe ff       	call   c0013a14 <HardDiskController::~HardDiskController()>
c00257ff:	83 c4 10             	add    esp,0x10
c0025802:	90                   	nop
c0025803:	83 c4 0c             	add    esp,0xc
c0025806:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0025808 <IDE::~IDE()>:
c0025808:	83 ec 0c             	sub    esp,0xc
c002580b:	83 ec 0c             	sub    esp,0xc
c002580e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025812:	e8 cd ff ff ff       	call   c00257e4 <IDE::~IDE()>
c0025817:	83 c4 10             	add    esp,0x10
c002581a:	83 ec 08             	sub    esp,0x8
c002581d:	68 70 02 00 00       	push   0x270
c0025822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025826:	e8 46 c9 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c002582b:	83 c4 10             	add    esp,0x10
c002582e:	83 c4 0c             	add    esp,0xc
c0025831:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0025832 <ATA::~ATA()>:
c0025832:	83 ec 0c             	sub    esp,0xc
c0025835:	ba c0 8f 02 c0       	mov    edx,0xc0028fc0
c002583a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002583e:	89 10                	mov    DWORD PTR [eax],edx
c0025840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025844:	83 ec 0c             	sub    esp,0xc
c0025847:	50                   	push   eax
c0025848:	e8 a5 e2 fe ff       	call   c0013af2 <PhysicalDisk::~PhysicalDisk()>
c002584d:	83 c4 10             	add    esp,0x10
c0025850:	90                   	nop
c0025851:	83 c4 0c             	add    esp,0xc
c0025854:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0025856 <ATA::~ATA()>:
c0025856:	83 ec 0c             	sub    esp,0xc
c0025859:	83 ec 0c             	sub    esp,0xc
c002585c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025860:	e8 cd ff ff ff       	call   c0025832 <ATA::~ATA()>
c0025865:	83 c4 10             	add    esp,0x10
c0025868:	83 ec 08             	sub    esp,0x8
c002586b:	68 7c 01 00 00       	push   0x17c
c0025870:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025874:	e8 f8 c8 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0025879:	83 c4 10             	add    esp,0x10
c002587c:	83 c4 0c             	add    esp,0xc
c002587f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0025880 <ATAPI::~ATAPI()>:
c0025880:	83 ec 0c             	sub    esp,0xc
c0025883:	ba 2c 90 02 c0       	mov    edx,0xc002902c
c0025888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002588c:	89 10                	mov    DWORD PTR [eax],edx
c002588e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025892:	83 ec 0c             	sub    esp,0xc
c0025895:	50                   	push   eax
c0025896:	e8 57 e2 fe ff       	call   c0013af2 <PhysicalDisk::~PhysicalDisk()>
c002589b:	83 c4 10             	add    esp,0x10
c002589e:	90                   	nop
c002589f:	83 c4 0c             	add    esp,0xc
c00258a2:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00258a4 <ATAPI::~ATAPI()>:
c00258a4:	83 ec 0c             	sub    esp,0xc
c00258a7:	83 ec 0c             	sub    esp,0xc
c00258aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00258ae:	e8 cd ff ff ff       	call   c0025880 <ATAPI::~ATAPI()>
c00258b3:	83 c4 10             	add    esp,0x10
c00258b6:	83 ec 08             	sub    esp,0x8
c00258b9:	68 80 01 00 00       	push   0x180
c00258be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00258c2:	e8 aa c8 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c00258c7:	83 c4 10             	add    esp,0x10
c00258ca:	83 c4 0c             	add    esp,0xc
c00258cd:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00258ce <AVX::~AVX()>:
c00258ce:	83 ec 0c             	sub    esp,0xc
c00258d1:	ba 68 90 02 c0       	mov    edx,0xc0029068
c00258d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258da:	89 10                	mov    DWORD PTR [eax],edx
c00258dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258e0:	83 ec 0c             	sub    esp,0xc
c00258e3:	50                   	push   eax
c00258e4:	e8 8d e2 fe ff       	call   c0013b76 <FPU::~FPU()>
c00258e9:	83 c4 10             	add    esp,0x10
c00258ec:	90                   	nop
c00258ed:	83 c4 0c             	add    esp,0xc
c00258f0:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00258f2 <AVX::~AVX()>:
c00258f2:	83 ec 0c             	sub    esp,0xc
c00258f5:	83 ec 0c             	sub    esp,0xc
c00258f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00258fc:	e8 cd ff ff ff       	call   c00258ce <AVX::~AVX()>
c0025901:	83 c4 10             	add    esp,0x10
c0025904:	83 ec 08             	sub    esp,0x8
c0025907:	68 58 01 00 00       	push   0x158
c002590c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025910:	e8 5c c8 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0025915:	83 c4 10             	add    esp,0x10
c0025918:	83 c4 0c             	add    esp,0xc
c002591b:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002591c <MMX::~MMX()>:
c002591c:	83 ec 0c             	sub    esp,0xc
c002591f:	ba a8 90 02 c0       	mov    edx,0xc00290a8
c0025924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025928:	89 10                	mov    DWORD PTR [eax],edx
c002592a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002592e:	83 ec 0c             	sub    esp,0xc
c0025931:	50                   	push   eax
c0025932:	e8 3f e2 fe ff       	call   c0013b76 <FPU::~FPU()>
c0025937:	83 c4 10             	add    esp,0x10
c002593a:	90                   	nop
c002593b:	83 c4 0c             	add    esp,0xc
c002593e:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0025940 <MMX::~MMX()>:
c0025940:	83 ec 0c             	sub    esp,0xc
c0025943:	83 ec 0c             	sub    esp,0xc
c0025946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002594a:	e8 cd ff ff ff       	call   c002591c <MMX::~MMX()>
c002594f:	83 c4 10             	add    esp,0x10
c0025952:	83 ec 08             	sub    esp,0x8
c0025955:	68 58 01 00 00       	push   0x158
c002595a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002595e:	e8 0e c8 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0025963:	83 c4 10             	add    esp,0x10
c0025966:	83 c4 0c             	add    esp,0xc
c0025969:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002596a <SSE::~SSE()>:
c002596a:	83 ec 0c             	sub    esp,0xc
c002596d:	ba e8 90 02 c0       	mov    edx,0xc00290e8
c0025972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025976:	89 10                	mov    DWORD PTR [eax],edx
c0025978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002597c:	83 ec 0c             	sub    esp,0xc
c002597f:	50                   	push   eax
c0025980:	e8 f1 e1 fe ff       	call   c0013b76 <FPU::~FPU()>
c0025985:	83 c4 10             	add    esp,0x10
c0025988:	90                   	nop
c0025989:	83 c4 0c             	add    esp,0xc
c002598c:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002598e <SSE::~SSE()>:
c002598e:	83 ec 0c             	sub    esp,0xc
c0025991:	83 ec 0c             	sub    esp,0xc
c0025994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025998:	e8 cd ff ff ff       	call   c002596a <SSE::~SSE()>
c002599d:	83 c4 10             	add    esp,0x10
c00259a0:	83 ec 08             	sub    esp,0x8
c00259a3:	68 58 01 00 00       	push   0x158
c00259a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00259ac:	e8 c0 c7 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c00259b1:	83 c4 10             	add    esp,0x10
c00259b4:	83 c4 0c             	add    esp,0xc
c00259b7:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00259b8 <x87::~x87()>:
c00259b8:	83 ec 0c             	sub    esp,0xc
c00259bb:	ba 28 91 02 c0       	mov    edx,0xc0029128
c00259c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259c4:	89 10                	mov    DWORD PTR [eax],edx
c00259c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259ca:	83 ec 0c             	sub    esp,0xc
c00259cd:	50                   	push   eax
c00259ce:	e8 a3 e1 fe ff       	call   c0013b76 <FPU::~FPU()>
c00259d3:	83 c4 10             	add    esp,0x10
c00259d6:	90                   	nop
c00259d7:	83 c4 0c             	add    esp,0xc
c00259da:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00259dc <x87::~x87()>:
c00259dc:	83 ec 0c             	sub    esp,0xc
c00259df:	83 ec 0c             	sub    esp,0xc
c00259e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00259e6:	e8 cd ff ff ff       	call   c00259b8 <x87::~x87()>
c00259eb:	83 c4 10             	add    esp,0x10
c00259ee:	83 ec 08             	sub    esp,0x8
c00259f1:	68 58 01 00 00       	push   0x158
c00259f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00259fa:	e8 72 c7 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c00259ff:	83 c4 10             	add    esp,0x10
c0025a02:	83 c4 0c             	add    esp,0xc
c0025a05:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0025a06 <IOAPIC::~IOAPIC()>:
c0025a06:	83 ec 0c             	sub    esp,0xc
c0025a09:	ba 80 92 02 c0       	mov    edx,0xc0029280
c0025a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a12:	89 10                	mov    DWORD PTR [eax],edx
c0025a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a18:	83 ec 0c             	sub    esp,0xc
c0025a1b:	50                   	push   eax
c0025a1c:	e8 dd da fe ff       	call   c00134fe <Device::~Device()>
c0025a21:	83 c4 10             	add    esp,0x10
c0025a24:	90                   	nop
c0025a25:	83 c4 0c             	add    esp,0xc
c0025a28:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0025a2a <IOAPIC::~IOAPIC()>:
c0025a2a:	83 ec 0c             	sub    esp,0xc
c0025a2d:	83 ec 0c             	sub    esp,0xc
c0025a30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a34:	e8 cd ff ff ff       	call   c0025a06 <IOAPIC::~IOAPIC()>
c0025a39:	83 c4 10             	add    esp,0x10
c0025a3c:	83 ec 08             	sub    esp,0x8
c0025a3f:	68 68 01 00 00       	push   0x168
c0025a44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a48:	e8 24 c7 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0025a4d:	83 c4 10             	add    esp,0x10
c0025a50:	83 c4 0c             	add    esp,0xc
c0025a53:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0025a54 <APIC::~APIC()>:
c0025a54:	83 ec 0c             	sub    esp,0xc
c0025a57:	ba 38 92 02 c0       	mov    edx,0xc0029238
c0025a5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a60:	89 10                	mov    DWORD PTR [eax],edx
c0025a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a66:	83 ec 0c             	sub    esp,0xc
c0025a69:	50                   	push   eax
c0025a6a:	e8 db e5 fe ff       	call   c001404a <InterruptController::~InterruptController()>
c0025a6f:	83 c4 10             	add    esp,0x10
c0025a72:	90                   	nop
c0025a73:	83 c4 0c             	add    esp,0xc
c0025a76:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0025a78 <APIC::~APIC()>:
c0025a78:	83 ec 0c             	sub    esp,0xc
c0025a7b:	83 ec 0c             	sub    esp,0xc
c0025a7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a82:	e8 cd ff ff ff       	call   c0025a54 <APIC::~APIC()>
c0025a87:	83 c4 10             	add    esp,0x10
c0025a8a:	83 ec 08             	sub    esp,0x8
c0025a8d:	68 58 21 00 00       	push   0x2158
c0025a92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a96:	e8 d6 c6 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0025a9b:	83 c4 10             	add    esp,0x10
c0025a9e:	83 c4 0c             	add    esp,0xc
c0025aa1:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0025aa2 <PIC::~PIC()>:
c0025aa2:	83 ec 0c             	sub    esp,0xc
c0025aa5:	ba d0 92 02 c0       	mov    edx,0xc00292d0
c0025aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aae:	89 10                	mov    DWORD PTR [eax],edx
c0025ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ab4:	83 ec 0c             	sub    esp,0xc
c0025ab7:	50                   	push   eax
c0025ab8:	e8 8d e5 fe ff       	call   c001404a <InterruptController::~InterruptController()>
c0025abd:	83 c4 10             	add    esp,0x10
c0025ac0:	90                   	nop
c0025ac1:	83 c4 0c             	add    esp,0xc
c0025ac4:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0025ac6 <PIC::~PIC()>:
c0025ac6:	83 ec 0c             	sub    esp,0xc
c0025ac9:	83 ec 0c             	sub    esp,0xc
c0025acc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025ad0:	e8 cd ff ff ff       	call   c0025aa2 <PIC::~PIC()>
c0025ad5:	83 c4 10             	add    esp,0x10
c0025ad8:	83 ec 08             	sub    esp,0x8
c0025adb:	68 58 21 00 00       	push   0x2158
c0025ae0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025ae4:	e8 88 c6 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0025ae9:	83 c4 10             	add    esp,0x10
c0025aec:	83 c4 0c             	add    esp,0xc
c0025aef:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0025af0 <APICTimer::~APICTimer()>:
c0025af0:	83 ec 0c             	sub    esp,0xc
c0025af3:	ba 24 93 02 c0       	mov    edx,0xc0029324
c0025af8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025afc:	89 10                	mov    DWORD PTR [eax],edx
c0025afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b02:	83 ec 0c             	sub    esp,0xc
c0025b05:	50                   	push   eax
c0025b06:	e8 3d 02 ff ff       	call   c0015d48 <Timer::~Timer()>
c0025b0b:	83 c4 10             	add    esp,0x10
c0025b0e:	90                   	nop
c0025b0f:	83 c4 0c             	add    esp,0xc
c0025b12:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0025b14 <APICTimer::~APICTimer()>:
c0025b14:	83 ec 0c             	sub    esp,0xc
c0025b17:	83 ec 0c             	sub    esp,0xc
c0025b1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b1e:	e8 cd ff ff ff       	call   c0025af0 <APICTimer::~APICTimer()>
c0025b23:	83 c4 10             	add    esp,0x10
c0025b26:	83 ec 08             	sub    esp,0x8
c0025b29:	68 60 01 00 00       	push   0x160
c0025b2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b32:	e8 3a c6 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0025b37:	83 c4 10             	add    esp,0x10
c0025b3a:	83 c4 0c             	add    esp,0xc
c0025b3d:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0025b3e <PIT::~PIT()>:
c0025b3e:	83 ec 0c             	sub    esp,0xc
c0025b41:	ba 74 93 02 c0       	mov    edx,0xc0029374
c0025b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b4a:	89 10                	mov    DWORD PTR [eax],edx
c0025b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b50:	83 ec 0c             	sub    esp,0xc
c0025b53:	50                   	push   eax
c0025b54:	e8 ef 01 ff ff       	call   c0015d48 <Timer::~Timer()>
c0025b59:	83 c4 10             	add    esp,0x10
c0025b5c:	90                   	nop
c0025b5d:	83 c4 0c             	add    esp,0xc
c0025b60:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0025b62 <PIT::~PIT()>:
c0025b62:	83 ec 0c             	sub    esp,0xc
c0025b65:	83 ec 0c             	sub    esp,0xc
c0025b68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b6c:	e8 cd ff ff ff       	call   c0025b3e <PIT::~PIT()>
c0025b71:	83 c4 10             	add    esp,0x10
c0025b74:	83 ec 08             	sub    esp,0x8
c0025b77:	68 5c 01 00 00       	push   0x15c
c0025b7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b80:	e8 ec c5 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0025b85:	83 c4 10             	add    esp,0x10
c0025b88:	83 c4 0c             	add    esp,0xc
c0025b8b:	c3                   	ret    
